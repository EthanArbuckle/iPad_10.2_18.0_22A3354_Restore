uint64_t sub_1DCB3B868(uint64_t a1, void *a2, int a3)
{
  id v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void **v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  float v13;
  float v14;
  float32x2_t v15;
  float32x2_t v16;
  int8x8_t v17;
  double v18;
  void *v19;
  double v20;
  __int128 v22;
  uint64_t v23;

  v5 = a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_1DCB56BA8(a1 + 40, v6);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v9 = (void **)(a1 + 200);
  *(_QWORD *)(a1 + 216) = 0;
  if (a3 >= 1)
  {
    objc_msgSend_boundingBox(v5, v7, v8);
    *(float32x4_t *)(a1 + 160) = v10;
    *(float32x4_t *)(a1 + 176) = v11;
    v12 = COERCE_FLOAT(vsubq_f32(v10, v11).i32[1]) / (float)a3;
    if (v12 > 0.0)
    {
      v13 = fabsf(v11.f32[0]);
      v14 = fabsf(v10.f32[0]);
      if (v13 < v14)
        v13 = v14;
      v15 = (float32x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL).u64[0];
      v16 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL).u64[0];
      v17 = vbsl_s8((int8x8_t)vcagt_f32(v16, v15), (int8x8_t)vabs_f32(v16), (int8x8_t)vabs_f32(v15));
      if (*(float *)v17.i32 < *(float *)&v17.i32[1])
        v17.i32[0] = v17.i32[1];
      if (v13 >= *(float *)v17.i32)
        *(float *)v17.i32 = v13;
      *(_DWORD *)(a1 + 32) = (int)(float)((float)(*(float *)v17.i32 * 4.0) / v12);
      sub_1DCADE880(v5, &v22);
      v19 = *v9;
      if (*v9)
      {
        *(_QWORD *)(a1 + 208) = v19;
        operator delete(v19);
        *v9 = 0;
        *(_QWORD *)(a1 + 208) = 0;
        *(_QWORD *)(a1 + 216) = 0;
      }
      v20 = *(double *)&v22;
      *(_OWORD *)(a1 + 200) = v22;
      *(_QWORD *)(a1 + 216) = v23;
      sub_1DCB3B9D0(a1, v20, v18);
    }
  }

  return a1;
}

void sub_1DCB3B988(_Unwind_Exception *a1)
{
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    v2[26] = v6;
    operator delete(v6);
  }
  sub_1DCB3BBA4(v3);
  v7 = (void *)v2[1];
  if (v7)
  {
    v2[2] = v7;
    operator delete(v7);
  }

  _Unwind_Resume(a1);
}

void sub_1DCB3B9D0(uint64_t a1, double a2, double a3)
{
  float v3;
  float v4;
  float v5;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  float v10;
  float v11;
  float32x2_t v12;
  float32x2_t v13;
  int8x8_t v14;
  float v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  double v20;
  int8x16_t v21;
  float v22;
  int32x2_t v23;
  float v24;
  double v25;
  double v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t *v32;
  __int32 v33;

  v3 = *(float *)(a1 + 160);
  if (v3 < *(float *)(a1 + 164))
    v3 = *(float *)(a1 + 164);
  if (v3 < *(float *)(a1 + 168))
    v3 = *(float *)(a1 + 168);
  v4 = *(float *)(a1 + 176);
  if (*(float *)(a1 + 180) < v4)
    v4 = *(float *)(a1 + 180);
  if (*(float *)(a1 + 184) < v4)
    v4 = *(float *)(a1 + 184);
  *(float *)&a2 = fabsf(v3);
  v5 = fabsf(v4);
  if (*(float *)&a2 < v5)
    *(float *)&a2 = v5;
  *(float *)&a3 = -*(float *)&a2;
  *(int32x4_t *)(a1 + 160) = vdupq_lane_s32(*(int32x2_t *)&a2, 0);
  *(int32x4_t *)(a1 + 176) = vdupq_lane_s32(*(int32x2_t *)&a3, 0);
  if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a1 + 200))
  {
    v7 = operator new();
    *(_QWORD *)v7 = a1;
    *(_QWORD *)(v7 + 8) = 0;
    *(_BYTE *)(v7 + 112) = 0;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_DWORD *)(v7 + 152) = 1065353216;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 96) = 0u;
    *(_QWORD *)a1 = v7;
    v9 = *(int8x16_t *)(a1 + 160);
    v8 = *(int8x16_t *)(a1 + 176);
    v10 = fabsf(*(float *)v8.i32);
    v11 = fabsf(*(float *)v9.i32);
    if (v10 < v11)
      v10 = v11;
    v12 = (float32x2_t)vext_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), 4uLL);
    v13 = (float32x2_t)vext_s8(*(int8x8_t *)v9.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), 4uLL);
    v14 = vbsl_s8((int8x8_t)vcagt_f32(v13, v12), (int8x8_t)vabs_f32(v13), (int8x8_t)vabs_f32(v12));
    if (*(float *)v14.i32 < *(float *)&v14.i32[1])
      v14.i32[0] = v14.i32[1];
    if (v10 >= *(float *)v14.i32)
      v15 = v10;
    else
      v15 = *(float *)v14.i32;
    v16 = *(_DWORD *)(a1 + 32);
    v17 = (v16 - 1) | ((v16 - 1) >> 1) | (((v16 - 1) | ((v16 - 1) >> 1)) >> 2);
    v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
    v19 = log2f((float)((v18 | HIWORD(v18)) + 1));
    *(_DWORD *)(a1 + 144) = (int)v19;
    v22 = (float)(1 << (int)v19);
    *(float *)v23.i32 = (float)(v15 * (float)(v22 + v22)) / (float)v16;
    v24 = (float)(*(float *)v23.i32 + *(float *)v23.i32) / v22;
    v25 = 0.01;
    v26 = v24 * 0.01;
    *(float *)&v26 = v26;
    v27 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v26, 0);
    *(float *)(a1 + 192) = v24;
    v28 = (float32x4_t)vdupq_lane_s32(v23, 0);
    v29 = vsubq_f32(v27, v28);
    v30 = vaddq_f32(v27, v28);
    *(float32x4_t *)(v7 + 16) = v30;
    *(float32x4_t *)(v7 + 32) = v29;
    *(float32x4_t *)(a1 + 112) = v30;
    *(float32x4_t *)(a1 + 128) = v29;
    v31 = *(float32x4_t **)(a1 + 200);
    v32 = *(float32x4_t **)(a1 + 208);
    if (v31 != v32)
    {
      v33 = 0;
      do
      {
        v31[10].i32[3] = v33;
        sub_1DCB3BDF8((float32x4_t *)a1, *(float32x4_t **)a1, v31, *(_DWORD *)(a1 + 144) - 1, *(double *)v30.i64, *(double *)v29.i64, *(double *)v27.i64, v25, v20, v21);
        ++v33;
        v31 += 14;
      }
      while (v31 != v32);
    }
  }
}

uint64_t sub_1DCB3BBA4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1DCB3BBF8(uint64_t a1, void *a2, int a3)
{
  id v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void **v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  float v13;
  float v14;
  float32x2_t v15;
  float32x2_t v16;
  int8x8_t v17;
  double v18;
  void *v19;
  double v20;
  __int128 v22;
  uint64_t v23;

  v5 = a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_1DCB56BA8(a1 + 40, v6);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v9 = (void **)(a1 + 200);
  *(_QWORD *)(a1 + 216) = 0;
  if (a3 >= 1)
  {
    objc_msgSend_boundingBoxAtTime_(v5, v7, v8, 0.0);
    *(float32x4_t *)(a1 + 160) = v10;
    *(float32x4_t *)(a1 + 176) = v11;
    v12 = COERCE_FLOAT(vsubq_f32(v10, v11).i32[1]) / (float)a3;
    if (v12 > 0.0)
    {
      v13 = fabsf(v11.f32[0]);
      v14 = fabsf(v10.f32[0]);
      if (v13 < v14)
        v13 = v14;
      v15 = (float32x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL).u64[0];
      v16 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL).u64[0];
      v17 = vbsl_s8((int8x8_t)vcagt_f32(v16, v15), (int8x8_t)vabs_f32(v16), (int8x8_t)vabs_f32(v15));
      if (*(float *)v17.i32 < *(float *)&v17.i32[1])
        v17.i32[0] = v17.i32[1];
      if (v13 >= *(float *)v17.i32)
        *(float *)v17.i32 = v13;
      *(_DWORD *)(a1 + 32) = (int)(float)((float)(*(float *)v17.i32 * 4.0) / v12);
      sub_1DCADEFDC(v5, (uint64_t *)&v22);
      v19 = *v9;
      if (*v9)
      {
        *(_QWORD *)(a1 + 208) = v19;
        operator delete(v19);
        *v9 = 0;
        *(_QWORD *)(a1 + 208) = 0;
        *(_QWORD *)(a1 + 216) = 0;
      }
      v20 = *(double *)&v22;
      *(_OWORD *)(a1 + 200) = v22;
      *(_QWORD *)(a1 + 216) = v23;
      sub_1DCB3B9D0(a1, v20, v18);
    }
  }

  return a1;
}

void sub_1DCB3BD1C(_Unwind_Exception *a1)
{
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    v2[26] = v6;
    operator delete(v6);
  }
  sub_1DCB3BBA4(v3);
  v7 = (void *)v2[1];
  if (v7)
  {
    v2[2] = v7;
    operator delete(v7);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DCB3BD68(float32x4_t *a1, float32x4_t a2, double a3, double a4)
{
  float v4;
  float32x4_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;

  v4 = a1[12].f32[0];
  *(float *)&a4 = v4 * 0.5;
  v5 = vmulq_n_f32(vsubq_f32(vsubq_f32(a2, a1[8]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0)), 1.0 / v4);
  v6 = llroundf(v5.f32[0]);
  v7 = llroundf(v5.f32[1]);
  v8 = llroundf(v5.f32[2]);
  return *(_QWORD *)(a1[5].i64[1] + 8 * v8) | ((*(_QWORD *)(a1[4].i64[0] + 8 * HIBYTE(v7)) | *(_QWORD *)(a1[5].i64[1] + 8 * HIBYTE(v8)) | *(_QWORD *)(a1[2].i64[1] + 8 * HIBYTE(v6))) << 24) | *(_QWORD *)(a1[4].i64[0] + 8 * v7) | *(_QWORD *)(a1[2].i64[1] + 8 * v6);
}

uint64_t sub_1DCB3BDF8(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, int a4, double a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  uint64_t v14;
  uint64_t v15;
  int *v16;
  float32x4_t *v17;
  float32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t result;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;

  v14 = 0;
  v15 = (a4 - 1);
  v16 = &a3[10].i32[3];
  v17 = a2 + 3;
  __asm { FMOV            V0.4S, #0.25 }
  v36 = (float32x4_t)_Q0;
  do
  {
    _Q0.i32[0] = 0;
    v24 = (int32x4_t)a2[1];
    v23 = a2[2];
    v25.i64[0] = 0x3F0000003F000000;
    v25.i64[1] = 0x3F0000003F000000;
    v26 = vmulq_f32(vaddq_f32((float32x4_t)v24, v23), v25);
    v27 = vsubq_f32((float32x4_t)v24, v23);
    v24.i32[0] = v14 & 4;
    v28 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v24, _Q0), 0);
    *(float *)v24.i32 = 0.25 * v27.f32[0];
    v25.f32[0] = v26.f32[0] + (float)(0.25 * v27.f32[0]);
    v25.i32[1] = v26.i32[1];
    v25.i32[2] = v26.i32[2];
    *(float *)a10.i32 = v26.f32[0] - (float)(0.25 * v27.f32[0]);
    a10.i32[1] = v26.i32[1];
    a10.i32[2] = v26.i32[2];
    v29 = vbslq_s8(v28, a10, (int8x16_t)v25);
    v25.f32[0] = -(float)(v27.f32[0] * 0.25);
    *(float32x2_t *)v24.i8 = vadd_f32((float32x2_t)vext_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), 4uLL), (float32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v14), (int8x8_t)0x100000002)), (int8x8_t)vdup_lane_s32(*(int32x2_t *)v25.f32, 0), (int8x8_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 0)));
    v35 = (float32x4_t)vextq_s8(vextq_s8(v29, v29, 4uLL), (int8x16_t)v24, 0xCuLL);
    result = sub_1DCB1E7A4(a3, v35, vmulq_f32(v27, v36));
    if (!(_DWORD)result)
      goto LABEL_9;
    v31 = v17->i64[v14];
    if (v31)
      goto LABEL_5;
    v31 = operator new();
    *(_BYTE *)(v31 + 112) = 0;
    *(_OWORD *)(v31 + 120) = 0u;
    *(_OWORD *)(v31 + 136) = 0u;
    *(_DWORD *)(v31 + 152) = 1065353216;
    *(_OWORD *)(v31 + 48) = 0u;
    *(_OWORD *)(v31 + 64) = 0u;
    *(_OWORD *)(v31 + 80) = 0u;
    *(_OWORD *)(v31 + 96) = 0u;
    v17->i64[v14] = v31;
    a2[7].i8[0] |= 1 << v14;
    v32 = vmulq_f32(vsubq_f32(a2[1], a2[2]), v36);
    v33 = vsubq_f32(v35, v32);
    v34 = vaddq_f32(v32, v35);
    *(float32x4_t *)(v31 + 16) = v34;
    *(float32x4_t *)(v31 + 32) = v33;
    *(_QWORD *)v31 = a1;
    *(_QWORD *)(v31 + 8) = 0;
    if (a4)
    {
LABEL_5:
      if (a4 >= 1)
      {
        result = sub_1DCB3BDF8(a1, v31, a3, v15);
        goto LABEL_9;
      }
    }
    else
    {
      *(_QWORD *)(v31 + 8) = sub_1DCB3BD68(a1, v35, *(double *)v33.i64, *(double *)v34.i64);
    }
    result = (uint64_t)sub_1DCAE7240(v31 + 120, v16, v16);
LABEL_9:
    ++v14;
  }
  while (v14 != 8);
  return result;
}

uint64_t sub_1DCB3BFD4(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  BOOL v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v85;
  uint64_t v86;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v40 = *(a2 - 1);
        v41 = *v8;
        if (*(float *)(v40 + 20) < *(float *)(*v8 + 20))
        {
          *v8 = v40;
          *(a2 - 1) = v41;
        }
        return result;
      case 3uLL:
        return (uint64_t)sub_1DCAE661C(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return (uint64_t)sub_1DCAE689C(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v42 = v8 + 1;
        v43 = v8 + 2;
        v44 = v8 + 3;
        result = (uint64_t)sub_1DCAE689C(v8, v8 + 1, v8 + 2, v8 + 3);
        v45 = *(a2 - 1);
        v46 = v8[3];
        if (*(float *)(v45 + 20) < *(float *)(v46 + 20))
        {
          *v44 = v45;
          *(a2 - 1) = v46;
          v47 = *v44;
          v48 = *v43;
          if (*(float *)(*v44 + 20) < *(float *)(*v43 + 20))
          {
            *v43 = v47;
            *v44 = v48;
            v49 = *v42;
            if (*(float *)(v47 + 20) < *(float *)(*v42 + 20))
            {
              v8[1] = v47;
              v8[2] = v49;
              v50 = *v8;
              if (*(float *)(v47 + 20) < *(float *)(*v8 + 20))
              {
                *v8 = v47;
                v8[1] = v50;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v51 = v8 + 1;
          v53 = v8 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              v54 = 0;
              v55 = v8;
              do
              {
                v57 = *v55;
                v56 = v55[1];
                v55 = v51;
                if (*(float *)(v56 + 20) < *(float *)(v57 + 20))
                {
                  v58 = v54;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v58 + 8) = v57;
                    if (!v58)
                      break;
                    v57 = *(uint64_t *)((char *)v8 + v58 - 8);
                    v58 -= 8;
                    if (*(float *)(v56 + 20) >= *(float *)(v57 + 20))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58 + 8);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v56;
                }
                v51 = v55 + 1;
                v54 += 8;
              }
              while (v55 + 1 != a2);
            }
          }
          else if (!v53)
          {
            do
            {
              v86 = *v7;
              v85 = v7[1];
              v7 = v51;
              if (*(float *)(v85 + 20) < *(float *)(v86 + 20))
              {
                do
                {
                  *v51 = v86;
                  v86 = *(v51 - 2);
                  --v51;
                }
                while (*(float *)(v85 + 20) < *(float *)(v86 + 20));
                *v51 = v85;
              }
              v51 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                if (2 * v62 + 2 < (uint64_t)v10 && *(float *)(*v64 + 20) < *(float *)(v64[1] + 20))
                {
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                v65 = &v8[v62];
                v66 = *v64;
                v67 = *v65;
                if (*(float *)(*v64 + 20) >= *(float *)(*v65 + 20))
                {
                  do
                  {
                    v68 = v64;
                    *v65 = v66;
                    if (v60 < v63)
                      break;
                    v69 = 2 * v63;
                    v63 = (2 * v63) | 1;
                    v64 = &v8[v63];
                    v70 = v69 + 2;
                    if (v70 < (uint64_t)v10)
                    {
                      result = *v64;
                      if (*(float *)(*v64 + 20) < *(float *)(v64[1] + 20))
                      {
                        ++v64;
                        v63 = v70;
                      }
                    }
                    v66 = *v64;
                    v65 = v68;
                  }
                  while (*(float *)(*v64 + 20) >= *(float *)(v67 + 20));
                  *v68 = v67;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v71 = (unint64_t)v9 >> 3;
            do
            {
              v72 = 0;
              v73 = *v8;
              v74 = v8;
              do
              {
                v75 = v74;
                v74 += v72 + 1;
                v76 = 2 * v72;
                v72 = (2 * v72) | 1;
                v77 = v76 + 2;
                if (v77 < v71 && *(float *)(*v74 + 20) < *(float *)(v74[1] + 20))
                {
                  ++v74;
                  v72 = v77;
                }
                *v75 = *v74;
              }
              while (v72 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
              if (v74 == --a2)
              {
                *v74 = v73;
              }
              else
              {
                *v74 = *a2;
                *a2 = v73;
                v78 = (char *)v74 - (char *)v8 + 8;
                if (v78 >= 9)
                {
                  v79 = (((unint64_t)v78 >> 3) - 2) >> 1;
                  v80 = &v8[v79];
                  v81 = *v80;
                  v82 = *v74;
                  if (*(float *)(*v80 + 20) < *(float *)(*v74 + 20))
                  {
                    do
                    {
                      v83 = v80;
                      *v74 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v8[v79];
                      v81 = *v80;
                      v74 = v83;
                    }
                    while (*(float *)(*v80 + 20) < *(float *)(v82 + 20));
                    *v83 = v82;
                  }
                }
              }
            }
            while (v71-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)sub_1DCAE661C(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1DCAE661C(v7, &v7[v10 >> 1], a2 - 1);
          sub_1DCAE661C(v7 + 1, v12 - 1, a2 - 2);
          sub_1DCAE661C(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (uint64_t)sub_1DCAE661C(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(float *)(v14 + 20);
          if (*(float *)(*(v7 - 1) + 20) < v15)
            goto LABEL_12;
          if (v15 >= *(float *)(*(a2 - 1) + 20))
          {
            v31 = v7 + 1;
            do
            {
              v8 = v31;
              if (v31 >= a2)
                break;
              ++v31;
            }
            while (v15 >= *(float *)(*v8 + 20));
          }
          else
          {
            v8 = v7;
            do
            {
              v30 = v8[1];
              ++v8;
            }
            while (v15 >= *(float *)(v30 + 20));
          }
          v32 = a2;
          if (v8 < a2)
          {
            v32 = a2;
            do
              v33 = *--v32;
            while (v15 < *(float *)(v33 + 20));
          }
          if (v8 < v32)
          {
            v34 = *v8;
            v35 = *v32;
            do
            {
              *v8 = v35;
              *v32 = v34;
              v36 = *(float *)(v14 + 20);
              do
              {
                v37 = v8[1];
                ++v8;
                v34 = v37;
              }
              while (v36 >= *(float *)(v37 + 20));
              do
              {
                v38 = *--v32;
                v35 = v38;
              }
              while (v36 < *(float *)(v38 + 20));
            }
            while (v8 < v32);
          }
          v39 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v39;
          a4 = 0;
          *v39 = v14;
          continue;
        }
        v15 = *(float *)(v14 + 20);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(float *)(v17 + 20) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(float *)(v21 + 20) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(float *)(v20 + 20) >= v15);
        }
        if (v18 >= v19)
        {
          v28 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = v19;
          v24 = &v7[v16];
          do
          {
            *v24 = v22;
            *v23 = v17;
            v25 = *(float *)(v14 + 20);
            do
            {
              v26 = v24[1];
              ++v24;
              v17 = v26;
            }
            while (*(float *)(v26 + 20) < v25);
            do
            {
              v27 = *--v23;
              v22 = v27;
            }
            while (*(float *)(v27 + 20) >= v25);
          }
          while (v24 < v23);
          v28 = v24 - 1;
        }
        if (v28 != v7)
          *v7 = *v28;
        *v28 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = sub_1DCB3BFD4(v7, v28, a3, a4 & 1);
          a4 = 0;
          v8 = v28 + 1;
          continue;
        }
        v29 = sub_1DCB3C6F8(v7, v28);
        v8 = v28 + 1;
        result = sub_1DCB3C6F8(v28 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_33;
        }
        a2 = v28;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1DCB3C6F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(float *)(v6 + 20) < *(float *)(*a1 + 20))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1DCAE661C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1DCAE689C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v17 = a1 + 1;
      v18 = a1 + 2;
      v19 = a1 + 3;
      sub_1DCAE689C(a1, a1 + 1, a1 + 2, a1 + 3);
      v20 = *(a2 - 1);
      v21 = a1[3];
      if (*(float *)(v20 + 20) < *(float *)(v21 + 20))
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = *v18;
        if (*(float *)(*v19 + 20) < *(float *)(*v18 + 20))
        {
          *v18 = v22;
          *v19 = v23;
          v24 = *v17;
          if (*(float *)(v22 + 20) < *(float *)(*v17 + 20))
          {
            a1[1] = v22;
            a1[2] = v24;
            v25 = *a1;
            if (*(float *)(v22 + 20) < *(float *)(*a1 + 20))
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1DCAE661C(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*(float *)(*v9 + 20) < *(float *)(*v8 + 20))
    {
      v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (*(float *)(v12 + 20) >= *(float *)(v13 + 20))
        {
          v16 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

void sub_1DCB3E7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v44;
  void *v45;
  void *v46;

  if (__p)
    operator delete(__p);
  v44 = *(void **)(v42 - 224);
  if (v44)
  {
    *(_QWORD *)(v42 - 216) = v44;
    operator delete(v44);
  }
  v45 = *(void **)(v42 - 200);
  if (v45)
  {
    *(_QWORD *)(v42 - 192) = v45;
    operator delete(v45);
  }
  v46 = *(void **)(v42 - 176);
  if (v46)
  {
    *(_QWORD *)(v42 - 168) = v46;
    operator delete(v46);
  }

  _Unwind_Resume(a1);
}

void sub_1DCB3EB08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float sub_1DCB3EB18(int a1)
{
  float result;

  dword_1F03B51A8 = a1;
  result = 1.0 / (double)a1;
  dword_1F03B51AC = LODWORD(result);
  dword_1F03B51B0 = 1067030938;
  dword_1F03B51B4 = 1061997773;
  return result;
}

BOOL sub_1DCB3EB5C(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  float32x2_t v4;
  int32x2_t v5;
  int32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  float32x2_t v11;

  v4 = vsub_f32(a2, a1);
  v5 = (int32x2_t)vsub_f32(a3, a1);
  v6 = (int32x2_t)vsub_f32(a4, a1);
  v7 = vmla_lane_f32(vneg_f32(vmul_n_f32((float32x2_t)vzip2_s32(v6, v5), v4.f32[0])), (float32x2_t)vzip1_s32(v6, v5), v4, 1);
  if (vmul_lane_f32(v7, v7, 1).f32[0] >= 0.0)
    return 0;
  v8 = vsub_f32(a4, a3);
  v9 = (int32x2_t)vsub_f32(a1, a3);
  v10 = (int32x2_t)vsub_f32(a2, a3);
  v11 = vmla_lane_f32(vneg_f32(vmul_n_f32((float32x2_t)vzip2_s32(v9, v10), v8.f32[0])), (float32x2_t)vzip1_s32(v9, v10), v8, 1);
  return vmul_lane_f32(v11, v11, 1).f32[0] < 0.0;
}

double sub_1DCB3EBC0(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float v9;
  BOOL v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  double v14;
  float32x2_t v15;
  float32x2_t v16;

  v4 = vsub_f32(a2, a1);
  v5 = vsub_f32(a4, a3);
  v6 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v5), v4);
  v7 = vsub_f32(v6, (float32x2_t)vdup_lane_s32((int32x2_t)v6, 1));
  v8 = vsub_f32(a3, a1);
  if (v7.f32[0] == 0.0)
  {
    v9 = vaddv_f32(vmul_f32(vsub_f32(a4, a1), v8));
    v10 = vaddv_f32(vmul_f32(vsub_f32(a4, a2), vsub_f32(a3, a2))) < 0.0;
    v11 = vmul_f32(vsub_f32(a1, a3), vsub_f32(a2, a3));
    v12 = (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1);
    v13 = vadd_f32(v11, v12);
    v12.i32[0] = 0;
    v14 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v12, v13), 0), (int8x8_t)a3, (int8x8_t)a4));
    if (!v10)
      *(double *)&a2 = v14;
    if (v9 >= 0.0)
      v15 = a2;
    else
      v15 = a1;
  }
  else
  {
    v16 = vmul_f32(v8, (float32x2_t)vrev64_s32((int32x2_t)v4));
    v15 = vmla_n_f32(a3, v5, vdiv_f32(vsub_f32(v16, (float32x2_t)vdup_lane_s32((int32x2_t)v16, 1)), v7).f32[0]);
  }
  return *(double *)&v15;
}

uint64_t sub_1DCB3EC58(float32x4_t a1, float a2)
{
  float v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = 1.0 / a2;
  v3 = vcvtms_u32_f32(v2 * a1.f32[0]);
  v4 = vcvtms_u32_f32(vmuls_lane_f32(v2, *(float32x2_t *)a1.f32, 1));
  v5 = (((unint64_t)(v3 & 0x1FFFFF) << 16) | ((unint64_t)(v3 & 0x1FFFFF) << 32)) & 0x1F0000FF0000FFLL | v3;
  v6 = (v5 | (v5 << 8)) & 0x1003003003003003 | (16 * ((v5 | (v5 << 8)) & 0x100F00F00F00F00FLL)) & 0x10C30C30C30C30C3;
  v7 = (((unint64_t)(v4 & 0x1FFFFF) << 16) | ((unint64_t)(v4 & 0x1FFFFF) << 32)) & 0x1F0000FF0000FFLL | v4;
  v8 = (v7 | (v7 << 8)) & 0x1003003003003003 | (16 * ((v7 | (v7 << 8)) & 0x100F00F00F00F00FLL)) & 0x10C30C30C30C30C3;
  v9 = vcvtms_u32_f32(vmuls_lane_f32(v2, a1, 2)) & 0x1FFFFF;
  v10 = (((unint64_t)v9 << 16) | (v9 << 32) | v9) & 0xF00000F00000FLL | (((((unint64_t)v9 << 16) | (v9 << 32) | v9) & 0x1F0000FF0000FFLL) << 8) & 0x100F00F00F00F00FLL;
  return ((8 * v8) | (2 * v8)) & 0x2492492492492492 | ((16 * ((v10 | (16 * v10)) & 0x10C30C30C30C30C3)) | (4 * ((v10 | (16 * v10)) & 0x10C30C30C30C30C3))) & 0x4924924924924924 | (v6 | (4 * v6)) & 0x1249249249249249;
}

float32x2_t sub_1DCB3ED6C(float32x2_t a1)
{
  return vmul_n_f32(vrndm_f32(vmul_n_f32(a1, (float)dword_1F03B51A8)), *(float *)&dword_1F03B51AC);
}

uint64_t sub_1DCB3ED90(float32x4_t a1, uint64_t a2, unint64_t *a3)
{
  a1.i64[0] = *a3;
  return sub_1DCB3EC58(a1, 0.000001);
}

BOOL sub_1DCB3EDA0(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  float32x2_t v3;

  v3 = vsub_f32(*a2, *a3);
  return vaddv_f32(vmul_f32(v3, v3)) < 1.0e-12;
}

uint64_t sub_1DCB3EDC8(uint64_t a1, float32x4_t *a2)
{
  return sub_1DCB3EC58(*a2, 0.000001);
}

BOOL sub_1DCB3EDD8(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;

  v3 = vsubq_f32(*a2, *a3);
  v4 = vmulq_f32(v3, v3);
  return vaddq_f32(vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2)).f32[0] < 1.0e-12;
}

uint64_t sub_1DCB3EE0C(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = *a2;
  v3 = 2654435769;
  v4 = *a2 + 2654435769;
  if (COERCE_FLOAT(*a2) == 0.0)
    v4 = 2654435769;
  v5 = DWORD1(v2) + 2654435769;
  if (*((float *)&v2 + 1) == 0.0)
    v5 = 2654435769;
  v6 = (v5 + (v4 << 6) + (v4 >> 2)) ^ v4;
  v7 = DWORD2(v2) + 2654435769;
  if (*((float *)&v2 + 2) == 0.0)
    v7 = 2654435769;
  v8 = (v7 + (v6 << 6) + (v6 >> 2)) ^ v6;
  if (*((float *)&v2 + 3) != 0.0)
    v3 = HIDWORD(v2) + 2654435769;
  return (v3 + (v8 << 6) + (v8 >> 2)) ^ v8;
}

BOOL sub_1DCB3EE8C(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3;
  int8x16_t v4;

  v3 = vsubq_f32(*a2, *a3);
  v4 = (int8x16_t)vmulq_f32(v3, v3);
  return vaddv_f32(vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL))) < 1.0e-12;
}

uint64_t sub_1DCB3EEBC(uint64_t a1, __int128 **a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = **a2;
  v3 = (*a2)[1];
  v4 = 2654435769;
  v5 = v2 + 2654435769;
  if (*(float *)&v2 == 0.0)
    v5 = 2654435769;
  v6 = DWORD1(v2) + 2654435769;
  if (*((float *)&v2 + 1) == 0.0)
    v6 = 2654435769;
  v7 = (v6 + (v5 << 6) + (v5 >> 2)) ^ v5;
  v8 = DWORD2(v2) + 2654435769;
  if (*((float *)&v2 + 2) == 0.0)
    v8 = 2654435769;
  v9 = (v8 + (v7 << 6) + (v7 >> 2)) ^ v7;
  v10 = v3 + 2654435769;
  if (*(float *)&v3 == 0.0)
    v10 = 2654435769;
  v11 = (v10 + (v9 << 6) + (v9 >> 2)) ^ v9;
  v12 = DWORD1(v3) + 2654435769;
  if (*((float *)&v3 + 1) == 0.0)
    v12 = 2654435769;
  v13 = (v12 + (v11 << 6) + (v11 >> 2)) ^ v11;
  if (*((float *)&v3 + 2) != 0.0)
    v4 = DWORD2(v3) + 2654435769;
  return (v4 + (v13 << 6) + (v13 >> 2)) ^ v13;
}

BOOL sub_1DCB3EF7C(uint64_t a1, float32x4_t **a2, float32x4_t **a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;

  v3 = vsubq_f32(**a2, **a3);
  v4 = vmulq_f32(v3, v3);
  if (vaddq_f32(vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2)).f32[0] >= 1.0e-12)return 0;
  v5 = vsubq_f32((*a2)[1], (*a3)[1]);
  v6 = vmulq_f32(v5, v5);
  return vaddq_f32(vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2)).f32[0] < 1.0e-12;
}

uint64_t sub_1DCB3EFE8(uint64_t a1, int32x2_t *a2)
{
  int64x2_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = vaddw_s32(vdupq_n_s64(0x9E3779B9uLL), vrev64_s32(*a2));
  v3 = (v2.i64[0] + (v2.i64[1] << 6) + ((unint64_t)v2.i64[1] >> 2)) ^ v2.i64[1];
  v4 = ((v3 << 6) + (int)*(_QWORD *)&a2[1] + (v3 >> 2) + 2654435769u) ^ v3;
  return ((v4 << 6) + (int)HIDWORD(*(_OWORD *)a2->i8) + (v4 >> 2) + 2654435769u) ^ v4;
}

uint64_t sub_1DCB3F048(uint64_t a1, float32x4_t *a2)
{
  return sub_1DCB3EC58(*a2, *(float *)&dword_1F03B51B8);
}

BOOL sub_1DCB3F058(int32x2_t a1, float32x4_t a2, float32x4_t a3, uint64_t a4, float32x2_t *a5, float32x2_t *a6)
{
  float32x4_t v11;
  float32x4_t v12;

  a1.i32[0] = dword_1F03B51B8;
  __asm { FMOV            V3.2S, #1.0 }
  *(float32x2_t *)a2.f32 = vdiv_f32(_D3, (float32x2_t)vdup_lane_s32(a1, 0));
  *(float32x2_t *)a3.f32 = vmul_n_f32(vrndm_f32(vmul_f32(*a5, *(float32x2_t *)a2.f32)), *(float *)&dword_1F03B51B8);
  a3.f32[2] = floorf(a5[1].f32[0] / *(float *)&dword_1F03B51B8) * *(float *)&dword_1F03B51B8;
  *(float32x2_t *)a2.f32 = vmul_n_f32(vrndm_f32(vmul_f32(*a6, *(float32x2_t *)a2.f32)), *(float *)&dword_1F03B51B8);
  a2.f32[2] = floorf(a6[1].f32[0] / *(float *)&dword_1F03B51B8) * *(float *)&dword_1F03B51B8;
  v11 = vsubq_f32(a3, a2);
  v12 = vmulq_f32(v11, v11);
  return vaddq_f32(vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2)).f32[0] < 1.0e-12;
}

int8x16_t *sub_1DCB3F0E0(int8x16_t *a1, int8x16_t a2, int8x16_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64x2_t v6;
  uint64x2_t v7;
  int8x16_t v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  std::locale v14;

  v4 = sub_1DCB3EC58((float32x4_t)a2, 0.000001);
  v5 = sub_1DCB3EC58((float32x4_t)a3, 0.000001);
  v6.i64[0] = v4;
  v7.i64[0] = v5;
  v8 = (int8x16_t)vdupq_lane_s64(vcgtq_u64(v7, v6).i64[0], 0);
  *a1 = vbslq_s8(v8, a2, a3);
  a1[1] = vbslq_s8(v8, a3, a2);
  if (v4 == v5)
  {
    v9 = sub_1DCB03734(MEMORY[0x1E0DE4A60], (uint64_t)"Can't choose for edge creation", 30);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
    v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v14);
    std::ostream::put();
    std::ostream::flush();
    *a1 = a2;
    a1[1] = a3;
  }
  return a1;
}

void sub_1DCB3F1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  _Unwind_Resume(a1);
}

double sub_1DCB3F1FC(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1DCB3F208(float32x4_t *a1)
{
  uint64_t v2;

  v2 = sub_1DCB3EC58(*a1, 0.000001);
  return v2 ^ (sub_1DCB3EC58(a1[1], 0.000001) << 32);
}

float sub_1DCB3F254(float32x4_t *a1)
{
  float32x4_t v1;
  float32x4_t v2;

  v1 = vsubq_f32(*a1, a1[1]);
  v2 = vmulq_f32(v1, v1);
  return sqrtf(vaddq_f32(vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2)).f32[0]);
}

BOOL sub_1DCB3F278(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;

  v2 = vsubq_f32(*a1, *a2);
  v3 = vmulq_f32(v2, v2);
  if (sqrtf(vaddq_f32(vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2)).f32[0]) >= 0.000001)return 0;
  v4 = vsubq_f32(a1[1], a2[1]);
  v5 = vmulq_f32(v4, v4);
  return sqrtf(vaddq_f32(vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2)).f32[0]) < 0.000001;
}

float32x2_t sub_1DCB3F2E4(float32x2_t *a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t result;

  v2 = vmul_f32(a1[3], a2);
  a1[2] = vmul_f32(a1[2], a2);
  a1[3] = v2;
  result = vmul_f32(a1[4], a2);
  a1[4] = result;
  return result;
}

float32x2_t sub_1DCB3F304(float32x2_t *a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t result;

  v2 = vadd_f32(a1[3], a2);
  a1[2] = vadd_f32(a1[2], a2);
  a1[3] = v2;
  result = vadd_f32(a1[4], a2);
  a1[4] = result;
  return result;
}

float sub_1DCB3F324(_QWORD *a1)
{
  float32x2_t v1;
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  int32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float v10;
  BOOL v11;
  float result;

  v1 = (float32x2_t)a1[2];
  v2 = (float32x2_t)a1[3];
  v3 = vsub_f32(v1, v2);
  v4 = (int32x2_t)vmul_f32(v3, v3);
  v5 = (float32x2_t)a1[4];
  v6 = vsub_f32(v2, v5);
  v7 = (int32x2_t)vmul_f32(v6, v6);
  v8 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v7, v4), (float32x2_t)vzip2_s32(v7, v4)));
  v9 = vsub_f32(v5, v1);
  v9.f32[0] = sqrtf(vaddv_f32(vmul_f32(v9, v9)));
  v5.f32[0] = (float)(vaddv_f32(v8) + v9.f32[0]) * 0.5;
  v9.f32[0] = (float)((float)(v5.f32[0] - v8.f32[1]) * v5.f32[0])
            * (float)((float)(v5.f32[0] - v8.f32[0]) * (float)(v5.f32[0] - v9.f32[0]));
  v10 = sqrtf(v9.f32[0]);
  v11 = v9.f32[0] <= 0.0;
  result = 0.0;
  if (!v11)
    return v10;
  return result;
}

float sub_1DCB3F39C(float32x4_t *a1)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  BOOL v11;
  float result;

  v1 = a1[4];
  v2 = a1[5];
  v3 = vsubq_f32(v1, v2);
  v4 = vmulq_f32(v3, v3);
  v5 = a1[6];
  v6 = vsubq_f32(v2, v5);
  v7 = vmulq_f32(v6, v6);
  v4.f32[0] = sqrtf(vaddq_f32(vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2)).f32[0]);
  v7.f32[0] = sqrtf(vaddq_f32(vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2)).f32[0]);
  v8 = vsubq_f32(v5, v1);
  v9 = vmulq_f32(v8, v8);
  v9.f32[0] = sqrtf(vaddq_f32(vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2)).f32[0]);
  v9.f32[0] = (float)((float)((float)((float)((float)(v7.f32[0] + v4.f32[0]) + v9.f32[0]) * 0.5) - v4.f32[0])
                    * (float)((float)((float)(v7.f32[0] + v4.f32[0]) + v9.f32[0]) * 0.5))
            * (float)((float)((float)((float)((float)(v7.f32[0] + v4.f32[0]) + v9.f32[0]) * 0.5) - v7.f32[0])
                    * (float)((float)((float)((float)(v7.f32[0] + v4.f32[0]) + v9.f32[0]) * 0.5) - v9.f32[0]));
  v10 = sqrtf(v9.f32[0]);
  v11 = v9.f32[0] <= 0.0;
  result = 0.0;
  if (!v11)
    return v10;
  return result;
}

_QWORD *sub_1DCB3F434(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[32] = 0;
  result[33] = 0;
  return result;
}

__n128 sub_1DCB3F440(uint64_t a1)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  int32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  float v9;
  unsigned int v10;
  float v11;
  __n128 result;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  float v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;

  v2 = *(float32x4_t *)(a1 + 80);
  v26 = *(float32x4_t *)(a1 + 96);
  v3 = *(float32x4_t *)(a1 + 64);
  v4 = vsubq_f32(v2, v26);
  v5 = (int32x4_t)vmulq_f32(v4, v4);
  *(float *)v5.i32 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.i8, 1)), (float32x4_t)vdupq_laneq_s32(v5, 2)).f32[0]);
  v6 = vsubq_f32(v3, v26);
  v7 = (int32x4_t)vmulq_f32(v6, v6);
  v24 = v3;
  v25 = (int32x4_t)vsubq_f32(v2, v3);
  v8 = (int32x4_t)vmulq_f32((float32x4_t)v25, (float32x4_t)v25);
  v9 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.i8, 1)), (float32x4_t)vdupq_laneq_s32(v7, 2)).f32[0]);
  *(float *)&v10 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 1)), (float32x4_t)vdupq_laneq_s32(v8, 2)).f32[0]);
  v22 = (float)((float)(v9 * v9)
              - (float)((float)(*(float *)v5.i32 * *(float *)v5.i32) - (float)(*(float *)&v10 * *(float *)&v10)))
      / (float)(v9 * (float)(*(float *)&v10 + *(float *)&v10));
  v23 = v9;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v10;
  v11 = acosf(v22);
  *(float32x2_t *)(a1 + 32) = vmul_n_f32((float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sinf(v11)), LODWORD(v22)), v23);
  __asm { FMOV            V0.4S, #1.0 }
  *(__n128 *)(a1 + 224) = result;
  *(__n128 *)(a1 + 240) = result;
  v17 = (int32x4_t)vsubq_f32(v26, v24);
  v18 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v25, v25), (int8x16_t)v25, 0xCuLL), (float32x4_t)v17)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL), (float32x4_t)v25);
  v19 = (int32x4_t)vmulq_f32((float32x4_t)v18, (float32x4_t)v18);
  v19.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), *(float32x2_t *)v19.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1)).u32[0];
  v20 = vrsqrte_f32((float32x2_t)v19.u32[0]);
  v21 = vmul_f32(vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v20, v20)), v20);
  *(float32x4_t *)(a1 + 192) = vnegq_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL), vmul_f32(v21, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v21, v21))).f32[0]));
  *(__n128 *)(a1 + 208) = result;
  return result;
}

uint64_t sub_1DCB3F588(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 264) = 0;
  sub_1DCB3F440(a1);
  return a1;
}

_QWORD *sub_1DCB3F604@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  unsigned __int8 v6;
  float v8;
  float v9;
  float v11;
  float v12;
  float v13;
  float v14;
  float32x2_t v19;
  int32x2_t v20;
  float32x2_t v21;
  int32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  int32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float v44;
  float32x2_t v45;
  int32x2_t v46;
  float32x2_t v47;
  int32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  int32x2_t v56;
  float32x2_t v57;
  float32x2_t v60;
  float32x2_t v61;
  int32x2_t v62;
  int32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float v66;
  float32x2_t v67;
  float32x2_t v68;
  int32x2_t v69;
  int32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  int32x2_t v74;
  float v76;
  float v78;

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v4 = (float32x2_t)result[2];
  v3 = (float32x2_t)result[3];
  v5 = (float32x2_t)result[4];
  v6 = vcgt_f32(v5, v3).u8[0];
  _ZF = (v6 & 1) == 0;
  if ((v6 & 1) != 0)
    LODWORD(v8) = result[4];
  else
    LODWORD(v8) = result[3];
  if (_ZF)
    LODWORD(v9) = result[4];
  else
    LODWORD(v9) = result[3];
  if (v4.f32[0] >= v8)
    LODWORD(v8) = result[2];
  if (v4.f32[0] < v9)
    LODWORD(v9) = result[2];
  if (*(float *)&a3 < v9 || *(float *)&a3 > v8)
    goto LABEL_30;
  LODWORD(v11) = HIDWORD(result[2]);
  LODWORD(v12) = HIDWORD(result[3]);
  if (v3.f32[1] >= v5.f32[1])
    LODWORD(v13) = HIDWORD(result[4]);
  else
    LODWORD(v13) = HIDWORD(result[3]);
  if (v3.f32[1] < v5.f32[1])
    LODWORD(v12) = HIDWORD(result[4]);
  if (v4.f32[1] >= v13)
    v14 = v13;
  else
    LODWORD(v14) = HIDWORD(result[2]);
  if (v4.f32[1] < v12)
    v11 = v12;
  if (*((float *)&a3 + 1) < v14 || *((float *)&a3 + 1) > v11)
    goto LABEL_30;
  v19 = vsub_f32(v3, v4);
  v20 = (int32x2_t)vmul_f32(v19, v19);
  v21 = vsub_f32(v5, v4);
  v22 = (int32x2_t)vmul_f32(v21, v21);
  v23 = vadd_f32((float32x2_t)vzip1_s32(v22, v20), (float32x2_t)vzip2_s32(v22, v20));
  v24 = vrsqrte_f32((float32x2_t)v23.u32[1]);
  v25 = vmul_f32(vrsqrts_f32((float32x2_t)v23.u32[1], vmul_f32(v24, v24)), v24);
  v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[1], vmul_f32(v25, v25)));
  v27 = vrsqrte_f32((float32x2_t)v23.u32[0]);
  v28 = vmul_f32(vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v27, v27)), v27);
  v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v28, v28)));
  v30 = vmul_f32(v21, v19);
  v31 = (int32x2_t)vmul_n_f32(v30, vmul_f32(v29, v26).f32[0]);
  v32 = vsub_f32(v4, v3);
  v33 = vmul_f32(v32, v32);
  v34 = vadd_f32(v33, (float32x2_t)vdup_lane_s32((int32x2_t)v33, 1));
  v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
  v36 = vmul_f32(vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)), v35);
  v37 = vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36)));
  v38 = vsub_f32(v5, v3);
  v39 = vmul_f32(v38, v38);
  v40 = vadd_f32(v39, (float32x2_t)vdup_lane_s32((int32x2_t)v39, 1));
  v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
  v42 = vmul_f32(vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)), v41);
  v43 = vmul_f32(v38, v32);
  v44 = fabsf(vaddv_f32(vmul_n_f32(v43, vmul_f32(vmul_f32(v42, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v42, v42))), v37).f32[0])));
  v45 = vsub_f32(v4, v5);
  v46 = (int32x2_t)vmul_f32(v45, v45);
  v47 = vsub_f32(v3, v5);
  v48 = (int32x2_t)vmul_f32(v47, v47);
  v49 = vadd_f32((float32x2_t)vzip1_s32(v48, v46), (float32x2_t)vzip2_s32(v48, v46));
  v50 = vrsqrte_f32((float32x2_t)v49.u32[1]);
  v51 = vmul_f32(vrsqrts_f32((float32x2_t)v49.u32[1], vmul_f32(v50, v50)), v50);
  v52 = vrsqrte_f32((float32x2_t)v49.u32[0]);
  v53 = vmul_f32(vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(v52, v52)), v52);
  v54 = vmul_f32(v53, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(v53, v53)));
  v55 = vmul_f32(v47, v45);
  v56 = (int32x2_t)vmul_n_f32(v55, vmul_f32(v54, vmul_f32(v51, vrsqrts_f32((float32x2_t)v49.u32[1], vmul_f32(v51, v51)))).f32[0]);
  v57 = vabs_f32(vadd_f32((float32x2_t)vzip1_s32(v31, v56), (float32x2_t)vzip2_s32(v31, v56)));
  if (v57.f32[0] >= v44 || v57.f32[0] >= v57.f32[1])
  {
    if (v44 < v57.f32[0] && v44 < v57.f32[1])
    {
      _S4 = vaddv_f32(v39);
      v74 = (int32x2_t)vmul_f32(vsub_f32(*(float32x2_t *)&a3, v3), v32);
      _D0 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)v43, v74), (float32x2_t)vzip2_s32((int32x2_t)v43, v74));
      v76 = vmla_f32(vneg_f32(vmul_f32(_D0, _D0)), v34, v40).f32[0];
      __asm { FMLA            S1, S4, V0.S[1] }
      v78 = _S1 / v76;
      if (v78 >= 0.0)
      {
        _S4 = _D0.i32[1];
        __asm { FMLS            S3, S4, V0.S[0] }
        v66 = _S3 / v76;
        if ((float)(_S3 / v76) >= 0.0 && (float)(v78 + v66) <= 1.0001)
        {
          *(float *)a2 = v78;
          *(float *)(a2 + 4) = 1.0 - (float)(v78 + v66);
          goto LABEL_51;
        }
      }
    }
    else
    {
      v60 = vsub_f32(*(float32x2_t *)&a3, v5);
      v61 = vadd_f32(v55, (float32x2_t)vdup_lane_s32((int32x2_t)v55, 1));
      v62 = (int32x2_t)vmul_f32(v60, v45);
      v63 = (int32x2_t)vmul_f32(v60, v47);
      v64 = vadd_f32((float32x2_t)vzip1_s32(v62, v63), (float32x2_t)vzip2_s32(v62, v63));
      v65 = vdiv_f32(vmla_f32(vneg_f32(vmul_n_f32((float32x2_t)vrev64_s32((int32x2_t)v64), v61.f32[0])), v64, v49), (float32x2_t)vdup_lane_s32((int32x2_t)vmla_lane_f32(vneg_f32(vmul_f32(v61, v61)), v49, v49, 1), 0));
      if (v65.f32[0] >= 0.0 && v65.f32[1] >= 0.0 && (float)(v65.f32[0] + v65.f32[1]) <= 1.0001)
      {
        *(float32x2_t *)a2 = v65;
        v66 = 1.0 - (float)(v65.f32[0] + v65.f32[1]);
LABEL_51:
        *(float *)(a2 + 8) = v66;
        goto LABEL_52;
      }
    }
LABEL_30:
    __asm { FMOV            V0.2S, #-1.0 }
    *(_QWORD *)a2 = _D0;
    *(_DWORD *)(a2 + 8) = -1082130432;
    return result;
  }
  v67 = vsub_f32(*(float32x2_t *)&a3, v4);
  v68 = vadd_f32(v30, (float32x2_t)vdup_lane_s32((int32x2_t)v30, 1));
  v69 = (int32x2_t)vmul_f32(v19, v67);
  v70 = (int32x2_t)vmul_f32(v21, v67);
  v71 = vadd_f32((float32x2_t)vzip1_s32(v69, v70), (float32x2_t)vzip2_s32(v69, v70));
  v72 = vdiv_f32(vmla_f32(vneg_f32(vmul_n_f32((float32x2_t)vrev64_s32((int32x2_t)v71), v68.f32[0])), v23, v71), (float32x2_t)vdup_lane_s32((int32x2_t)vmla_lane_f32(vneg_f32(vmul_f32(v68, v68)), v23, v23, 1), 0));
  if (v72.f32[0] < 0.0 || v72.f32[1] < 0.0 || (float)(v72.f32[0] + v72.f32[1]) > 1.0001)
    goto LABEL_30;
  *(float *)a2 = 1.0 - (float)(v72.f32[0] + v72.f32[1]);
  *(float32x2_t *)(a2 + 4) = v72;
LABEL_52:
  *(_QWORD *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1DCB3F9AC(uint64_t a1, _QWORD *a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t *v6;
  uint64_t v7;
  void *__p;
  _BYTE *v10;
  uint64_t v11;
  float32x4_t v12[2];

  v12[0] = a3;
  v12[1] = a4;
  if (!sub_1DCB3FC90(a2, v12))
    return 0;
  v6 = sub_1DCB3FC90(a2, v12);
  if (!v6)
    sub_1DCB03520("unordered_map::at: key not found");
  __p = 0;
  v10 = 0;
  v11 = 0;
  sub_1DCB3FDF0(&__p, (const void *)v6[3].i64[0], v6[3].i64[1], (v6[3].i64[1] - v6[3].i64[0]) >> 3);
  v7 = *(_QWORD *)__p;
  if (*(_QWORD *)__p == a1)
  {
    if ((unint64_t)(v10 - (_BYTE *)__p) < 9)
      v7 = 0;
    else
      v7 = *((_QWORD *)__p + 1);
  }
  v10 = __p;
  operator delete(__p);
  return v7;
}

double sub_1DCB3FA60(float32x2_t *a1)
{
  int8x16_t v1;
  float32x4_t v2;
  int8x16_t v3;
  int16x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  int8x16_t v7;
  double result;

  *(float32x2_t *)v1.i8 = a1[2];
  v2.i64[0] = v1.i64[0];
  v2.i64[1] = v1.i64[0];
  *(float32x2_t *)v3.i8 = a1[4];
  v4 = (int16x4_t)vcgt_f32(*(float32x2_t *)v3.i8, a1[3]);
  *(float32x2_t *)v5.i8 = a1[3];
  v5.i64[1] = v3.i64[0];
  v3.i64[1] = v5.i64[0];
  v6 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vuzp1_s16(v4, v4)), v5, v3);
  v7 = (int8x16_t)vcgtq_f32(v6, v2);
  v3.i64[0] = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
  v6.i64[1] = v1.i64[0];
  v1.i64[1] = v3.i64[0];
  *(_QWORD *)&result = vbslq_s8(v7, v1, (int8x16_t)v6).u64[0];
  return result;
}

__n128 sub_1DCB3FAA8(__n128 *a1)
{
  return a1[12];
}

BOOL sub_1DCB3FAB0(float32x4_t *a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v7;
  float32x4_t v8;

  v2 = vsubq_f32(a2, a1[4]);
  v3 = vmulq_f32(v2, v2);
  if (sqrtf(vaddq_f32(vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2)).f32[0]) < 0.000001)return 1;
  v4 = vsubq_f32(a2, a1[5]);
  v5 = vmulq_f32(v4, v4);
  if (sqrtf(vaddq_f32(vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2)).f32[0]) < 0.000001)return 1;
  v7 = vsubq_f32(a2, a1[6]);
  v8 = vmulq_f32(v7, v7);
  return sqrtf(vaddq_f32(vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2)).f32[0]) < 0.000001;
}

float32x2_t sub_1DCB3FB3C(float32x2_t *a1)
{
  return vmul_f32(vadd_f32(vadd_f32(a1[3], a1[2]), a1[4]), (float32x2_t)vdup_n_s32(0x3EAAAAABu));
}

unint64_t sub_1DCB3FB60(float32x4_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = sub_1DCB3EC58(a1[4], 0.000001);
  v3 = sub_1DCB3EC58(a1[5], 0.000001);
  v4 = sub_1DCB3EC58(a1[6], 0.000001);
  if (v4 >= v3)
    v5 = v3;
  else
    v5 = v4;
  if (v4 <= v3)
    v6 = v3;
  else
    v6 = v4;
  if (v6 >= v2)
    v7 = v2;
  else
    v7 = v6;
  if (v6 <= v2)
    v6 = v2;
  if (v5 >= v7)
    v8 = v7;
  else
    v8 = v5;
  if (v5 <= v7)
    v5 = v7;
  return v6 ^ (v5 << 21) ^ (v8 << 42);
}

BOOL sub_1DCB3FBEC(float32x4_t *a1, float32x4_t *a2)
{
  unint64_t v4;
  float32x4_t v5;
  int32x4_t v6;

  v4 = sub_1DCB3FB60(a1);
  if (v4 != sub_1DCB3FB60(a2))
    return 0;
  v5 = vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(a1[5], a1[4]), a1[6]), vaddq_f32(vaddq_f32(a2[4], a2[5]), a2[6])), (float32x4_t)vdupq_n_s32(0x3EAAAAABu));
  v6 = (int32x4_t)vmulq_f32(v5, v5);
  return sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.i8, 1)), (float32x4_t)vdupq_laneq_s32(v6, 2)).f32[0]) < 0.000001;
}

float32x4_t *sub_1DCB3FC90(_QWORD *a1, float32x4_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t **v13;
  float32x4_t *result;
  unint64_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;

  v21 = *a2;
  v4 = sub_1DCB3EC58(*a2, 0.000001);
  v20 = a2[1];
  v5 = sub_1DCB3EC58(v20, 0.000001);
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = v4 ^ (v5 << 32);
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v4 ^ (v5 << 32);
    v12 = v20;
    v11 = v21;
    if (v7 >= *(_QWORD *)&v6)
      v10 = v7 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = (*(_QWORD *)&v6 - 1) & v7;
    v12 = v20;
    v11 = v21;
  }
  v13 = *(float32x4_t ***)(*a1 + 8 * v10);
  if (!v13)
    return 0;
  for (result = *v13; result; result = (float32x4_t *)result->i64[0])
  {
    v15 = result->u64[1];
    if (v7 == v15)
    {
      v16 = vsubq_f32(result[1], v11);
      v17 = (int32x4_t)vmulq_f32(v16, v16);
      if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.i8, 1)), (float32x4_t)vdupq_laneq_s32(v17, 2)).f32[0]) < 0.000001)
      {
        v18 = vsubq_f32(result[2], v12);
        v19 = (int32x4_t)vmulq_f32(v18, v18);
        if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 1)), (float32x4_t)vdupq_laneq_s32(v19, 2)).f32[0]) < 0.000001)return result;
      }
    }
    else
    {
      if (v9 > 1)
      {
        if (v15 >= *(_QWORD *)&v6)
          v15 %= *(_QWORD *)&v6;
      }
      else
      {
        v15 &= *(_QWORD *)&v6 - 1;
      }
      if (v15 != v10)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_1DCB3FDF0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1DCAE7964(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DCB3FE4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1DCB3FE68(uint64_t *a1, int a2)
{
  unsigned __int8 v4;
  uint64_t v6;
  unint64_t *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v11;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v12;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v14;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v15;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v16;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v17;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v20;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41[28];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = atomic_load((unsigned __int8 *)&qword_1F03B4800);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1F03B4800))
  {
    v6 = operator new();
    v7 = (unint64_t *)MEMORY[0x1E0DF2618];
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
    if (!v8)
      v8 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v8 + 512));
    v41[0] = v40;
    v41[1] = (uint64_t *)786433;
    v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v7);
    if (!v9)
      v9 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 608));
    v41[2] = v39;
    v41[3] = (uint64_t *)786434;
    v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v7);
    if (!v10)
      v10 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v10 + 840));
    v41[4] = v38;
    v41[5] = (uint64_t *)786434;
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v7);
    if (!v11)
      v11 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v11 + 616));
    v41[6] = v37;
    v41[7] = (uint64_t *)786435;
    v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v7);
    if (!v12)
      v12 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v12 + 864));
    v41[8] = v36;
    v41[9] = (uint64_t *)786435;
    v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v7);
    if (!v13)
      v13 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v13 + 712));
    v41[10] = v35;
    v41[11] = (uint64_t *)786435;
    v14 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v7);
    if (!v14)
      v14 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v14 + 624));
    v41[12] = v34;
    v41[13] = (uint64_t *)786436;
    v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v7);
    if (!v15)
      v15 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v15 + 464));
    v41[14] = v33;
    v41[15] = (uint64_t *)655361;
    v16 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v7);
    if (!v16)
      v16 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v16 + 560));
    v41[16] = v32;
    v41[17] = (uint64_t *)655362;
    v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v7);
    if (!v17)
      v17 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v17 + 568));
    v41[18] = v31;
    v41[19] = (uint64_t *)655363;
    v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v7);
    if (!v18)
      v18 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v18 + 576));
    v41[20] = v30;
    v41[21] = (uint64_t *)655364;
    v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v7);
    if (!v19)
      v19 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v19 + 456));
    v41[22] = v29;
    v41[23] = (uint64_t *)65537;
    v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v7);
    if (!v20)
      v20 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v20 + 472));
    v41[24] = v28;
    v41[25] = (uint64_t *)327681;
    v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v7);
    if (!v21)
      v21 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v21 + 480));
    v41[26] = v27;
    v41[27] = (uint64_t *)589825;
    sub_1DCB4402C(v6, (uint64_t *)v41, 14);
    v22 = (uint64_t **)&v42;
    do
    {
      v24 = (uint64_t)*(v22 - 2);
      v22 -= 2;
      v23 = v24;
      if ((v24 & 7) != 0)
      {
        v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
    }
    while (v22 != v41);
    qword_1F03B47F8 = v6;
    __cxa_guard_release(&qword_1F03B4800);
  }
  v41[0] = a1;
  if (a2 < 2)
    return sub_1DCB44514((uint64_t **)qword_1F03B47F8, a1, (uint64_t)&unk_1DCC58300, v41)[5];
  else
    return sub_1DCB44514((uint64_t **)qword_1F03B47F8, a1, (uint64_t)&unk_1DCC58300, v41)[5] & 0xFFFFFFFFFFFFF000 | a2;
}

void sub_1DCB404D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;

  v26 = v24 + 224;
  while (1)
  {
    v28 = *(_QWORD *)(v26 - 16);
    v26 -= 16;
    v27 = v28;
    if ((v28 & 7) != 0)
    {
      v29 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    if (v26 == v24)
    {
      if ((a10 & 7) != 0)
      {
        v31 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      if ((a11 & 7) != 0)
      {
        v33 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      if ((a12 & 7) != 0)
      {
        v35 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      if ((a13 & 7) != 0)
      {
        v37 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      if ((a14 & 7) != 0)
      {
        v39 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((a15 & 7) != 0)
      {
        v41 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((a16 & 7) != 0)
      {
        v43 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((a17 & 7) != 0)
      {
        v45 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      if ((a18 & 7) != 0)
      {
        v47 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      if ((a19 & 7) != 0)
      {
        v49 = (unsigned int *)(a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((a20 & 7) != 0)
      {
        v51 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      if ((a21 & 7) != 0)
      {
        v53 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v54 = __ldxr(v53);
        while (__stlxr(v54 - 2, v53));
      }
      if ((a22 & 7) != 0)
      {
        v55 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      if ((a23 & 7) != 0)
      {
        v57 = (unsigned int *)(a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v58 = __ldxr(v57);
        while (__stlxr(v58 - 2, v57));
      }
      MEMORY[0x1DF0D228C](v23, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_1F03B4800);
      _Unwind_Resume(a1);
    }
  }
}

BOOL sub_1DCB407EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  MEMORY[0x1DF0D1254](&v21, "constant");
  v2 = v21;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (v21 & 0xFFFFFFFFFFFFFFF8))
  {
    result = 1;
  }
  else
  {
    MEMORY[0x1DF0D1254](&v20, "uniform");
    v3 = v20;
    if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (v20 & 0xFFFFFFFFFFFFFFF8))
    {
      result = 1;
    }
    else
    {
      MEMORY[0x1DF0D1254](&v19, "varying");
      v4 = v19;
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (v19 & 0xFFFFFFFFFFFFFFF8))
      {
        result = 1;
      }
      else
      {
        MEMORY[0x1DF0D1254](&v18, "vertex");
        v5 = v18;
        if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (v18 & 0xFFFFFFFFFFFFFFF8))
        {
          result = 1;
        }
        else
        {
          MEMORY[0x1DF0D1254](&v17, "faceVarying");
          v6 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
          result = (*a1 & 0xFFFFFFFFFFFFFFF8) == (v17 & 0xFFFFFFFFFFFFFFF8);
          if ((v17 & 7) != 0)
          {
            do
              v8 = __ldxr(v6);
            while (__stlxr(v8 - 2, v6));
          }
          v5 = v18;
        }
        if ((v5 & 7) != 0)
        {
          v9 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v10 = __ldxr(v9);
          while (__stlxr(v10 - 2, v9));
        }
        v4 = v19;
      }
      if ((v4 & 7) != 0)
      {
        v11 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
      v3 = v20;
    }
    if ((v3 & 7) != 0)
    {
      v13 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    v2 = v21;
  }
  if ((v2 & 7) != 0)
  {
    v15 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return result;
}

void **sub_1DCB40A20(void **a1)
{
  void **v3;

  v3 = a1;
  sub_1DCB44638(&v3);
  return a1;
}

void sub_1DCB40A5C(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  void *v35;
  int v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  id *v44;
  id *v45;
  id v46;
  id v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  id v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t j;
  void *v71;
  id v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  void *v78;
  _QWORD *v79;
  uint64_t v80;
  const char *v81;
  const char *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  _BOOL4 v94;
  const char *v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  _BOOL4 v102;
  const char *v103;
  void *v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  void *v113;
  const char *v114;
  _QWORD *v115;
  _QWORD *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  _BOOL4 v123;
  void *v124;
  const char *v125;
  void *v126;
  char v128;
  void *v129;
  id v130;
  void *v131;
  id v132;
  id v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  _BYTE v143[128];
  _BYTE v144[128];
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v130 = a7;
  v131 = v9;
  v129 = (void *)objc_msgSend_copy(v9, v10, v11);
  v14 = 0;
  v15 = 0;
  while (1)
  {
    objc_msgSend_layouts(v9, v12, v13);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend_count(v16, v17, v18);

    if (v19 <= v14)
      break;
    objc_msgSend_layouts(v9, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v22, v23, v14);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend_stride(v24, v25, v26);

    ++v14;
    if (v27)
      v15 = v14;
  }
  v141 = 0u;
  v142 = 0u;
  v139 = 0u;
  v140 = 0u;
  objc_msgSend_attributes(v9, v20, v21);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v28, v29, (uint64_t)&v139, v144, 16);
  if (v32)
  {
    v33 = *(_QWORD *)v140;
    do
    {
      for (i = 0; i != v32; ++i)
      {
        if (*(_QWORD *)v140 != v33)
          objc_enumerationMutation(v28);
        v35 = *(void **)(*((_QWORD *)&v139 + 1) + 8 * i);
        if (objc_msgSend_format(v35, v30, v31))
        {
          v36 = objc_msgSend_bufferIndex(v35, v30, v31);
          if (v15 <= v36 + 1)
            v15 = v36 + 1;
        }
      }
      v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v28, v30, (uint64_t)&v139, v144, 16);
    }
    while (v32);
  }

  objc_msgSend_removeAllObjects(v130, v37, v38);
  if (v15)
  {
    v41 = v15;
    do
    {
      objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v39, 0);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v130, v43, (uint64_t)v42);

      --v41;
    }
    while (v41);
  }
  v44 = (id *)*a2;
  v45 = (id *)a2[1];
  while (v44 != v45)
  {
    v46 = *v44;
    v47 = v44[1];
    objc_msgSend_name(v46, v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_attributeNamed_(v129, v51, (uint64_t)v50);
    v52 = (void *)objc_claimAutoreleasedReturnValue();

    if (v52)
    {
      v55 = objc_msgSend_bufferIndex(v52, v53, v54);
      objc_msgSend_setBufferIndex_(v47, v56, v55);
      v59 = objc_msgSend_offset(v52, v57, v58);
      objc_msgSend_setOffset_(v47, v60, v59);
      v63 = objc_msgSend_format(v52, v61, v62);
      objc_msgSend_setFormat_(v47, v64, v63);
    }
    else
    {
      v65 = v44[1];
      v44[1] = 0;

    }
    v44 += 3;
  }
  v137 = 0u;
  v138 = 0u;
  v135 = 0u;
  v136 = 0u;
  objc_msgSend_attributes(v129, v39, v40);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = objc_msgSend_countByEnumeratingWithState_objects_count_(v66, v67, (uint64_t)&v135, v143, 16);
  if (v68)
  {
    v69 = *(_QWORD *)v136;
    do
    {
      for (j = 0; j != v68; ++j)
      {
        if (*(_QWORD *)v136 != v69)
          objc_enumerationMutation(v66);
        v71 = *(void **)(*((_QWORD *)&v135 + 1) + 8 * j);
        v72 = v71;
        v73 = (void *)a2[3];
        objc_msgSend_name(v72, v74, v75);
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_attributeNamed_(v73, v77, (uint64_t)v76);
        v78 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v78)
        {
          v132 = 0;
          v133 = 0;
          v134 = 0;
          objc_storeStrong(&v133, v71);
          v79 = (_QWORD *)a2[1];
          if ((unint64_t)v79 >= a2[2])
          {
            v80 = sub_1DCB44C20(a2, (uint64_t)&v132);
          }
          else
          {
            *v79 = v132;
            v79[1] = v133;
            v79[2] = v134;
            v80 = (uint64_t)(v79 + 3);
          }
          a2[1] = v80;

        }
      }
      v68 = objc_msgSend_countByEnumeratingWithState_objects_count_(v66, v81, (uint64_t)&v135, v143, 16);
    }
    while (v68);
  }

  v84 = (_QWORD *)*a2;
  v85 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 != v85)
  {
    v128 = 1;
    do
    {
      v86 = (void *)v84[1];
      if (v86)
      {
        v87 = objc_msgSend_bufferIndex(v86, v82, v83);
        if (*v84)
        {
          v88 = v87;
          objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v82, v84[2]);
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectAtIndexedSubscript_(v130, v90, v88);
          v91 = (void *)objc_claimAutoreleasedReturnValue();
          v94 = objc_msgSend_integerValue(v91, v92, v93) == 0;

          if (v94)
          {
            objc_msgSend_setObject_atIndexedSubscript_(v130, v95, (uint64_t)v89, v88);
          }
          else
          {
            objc_msgSend_objectAtIndexedSubscript_(v130, v95, v88);
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            v99 = objc_msgSend_integerValue(v96, v97, v98);
            v102 = v99 == objc_msgSend_integerValue(v89, v100, v101);

            if (!v102)
            {
              v104 = (void *)MEMORY[0x1E0CB37E8];
              objc_msgSend_objectAtIndexedSubscript_(v130, v103, v88);
              v105 = (void *)objc_claimAutoreleasedReturnValue();
              v108 = objc_msgSend_integerValue(v105, v106, v107);
              v111 = objc_msgSend_integerValue(v89, v109, v110);
              if (v111 >= v108)
                objc_msgSend_numberWithInteger_(v104, v112, v108);
              else
                objc_msgSend_numberWithInteger_(v104, v112, v111);
              v113 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setObject_atIndexedSubscript_(v130, v114, (uint64_t)v113, v88);

              if ((v128 & 1) != 0)
                NSLog(CFSTR("Warning: Trying to interleave multiple attributes into buffer: %ul,\nbut their element counts do not agree, taking the mininum."), v88);
              v128 = 0;
            }
          }

        }
      }
      v84 += 3;
    }
    while (v84 != v85);
    v115 = (_QWORD *)*a2;
    v116 = (_QWORD *)a2[1];
    while (v115 != v116)
    {
      v117 = (void *)v115[1];
      if (v117)
      {
        v118 = objc_msgSend_bufferIndex(v117, v82, v83);
        if (!*v115)
        {
          v119 = v118;
          objc_msgSend_objectAtIndexedSubscript_(v130, v82, v118);
          v120 = (void *)objc_claimAutoreleasedReturnValue();
          v123 = objc_msgSend_integerValue(v120, v121, v122) == 0;

          if (v123)
          {
            objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v82, a4);
            v124 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setObject_atIndexedSubscript_(v130, v125, (uint64_t)v124, v119);

          }
        }
      }
      v115 += 3;
    }
  }
  v126 = (void *)a2[3];
  a2[3] = (uint64_t)v129;

}

void sub_1DCB41010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id sub_1DCB41170(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  MDLMesh *v12;
  const char *v13;
  const char *v14;
  void *v15;
  void *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;

  v7 = a1;
  v8 = a3;
  v11 = objc_msgSend_vertexCount(v7, v9, v10);
  if (*a4 == v11)
  {
    v12 = [MDLMesh alloc];
    v15 = (void *)objc_msgSend_initWithBufferAllocator_(v12, v13, (uint64_t)v8);
    if (*(char *)(a2 + 23) < 0)
      a2 = *(_QWORD *)a2;
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v14, a2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v15, v17, (uint64_t)v16);

    objc_msgSend_setVertexCount_(v15, v18, v11);
    objc_msgSend_submeshes(v7, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setSubmeshes_(v15, v22, (uint64_t)v21);

    objc_msgSend_addAttributeWithName_format_(v15, v23, (uint64_t)CFSTR("position"), 786435);
    objc_msgSend_vertexAttributeDataForAttributeNamed_(v15, v24, (uint64_t)CFSTR("position"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend_dataStart(v25, v26, v27);
    if (v11)
    {
      v31 = v28;
      v32 = 0;
      v33 = 0;
      do
      {
        if (4 * v33 + 8 <= (unint64_t)objc_msgSend_bufferSize(v25, v29, v30))
        {
          v34 = a4[4] + v32;
          v35 = *(_DWORD *)(v34 + 8);
          v36 = v31 + 4 * v33;
          *(_QWORD *)v36 = *(_QWORD *)v34;
          v33 += 3;
          *(_DWORD *)(v36 + 8) = v35;
        }
        v32 += 12;
        --v11;
      }
      while (v11);
    }

  }
  else
  {
    NSLog(CFSTR("Warning: target shape points does not match MDLMesh vertexCount. Skipping MDLMorphDeformer.\n"));
    v15 = 0;
  }

  return v15;
}

void sub_1DCB41304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_1DCB41344(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t EmptyString;
  __int128 v19;
  const char *v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  MDLMorphDeformer *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  unsigned int *v43;
  unsigned int v44;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  void *__p[2];
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_opt_new();
  v8 = *(uint64_t **)a2;
  v9 = *(uint64_t **)(a2 + 8);
  if (*(uint64_t **)a2 == v9)
  {
LABEL_24:
    v24 = sub_1DCB41744((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 24));
    v25 = *(_OWORD *)(v24 + 16);
    v51 = *(_OWORD *)v24;
    v52 = v25;
    v26 = *(_QWORD *)(v24 + 32);
    v53 = v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 - 16);
      if (*((_QWORD *)&v52 + 1))
        v27 = (unint64_t *)*((_QWORD *)&v52 + 1);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = sub_1DCB417AC((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 40));
    v30 = *(_OWORD *)(v29 + 16);
    v46 = *(_OWORD *)v29;
    v47 = v30;
    v31 = *(_QWORD *)(v29 + 32);
    v48 = v31;
    if (v31)
    {
      v32 = (unint64_t *)(v31 - 16);
      if (*((_QWORD *)&v47 + 1))
        v32 = (unint64_t *)*((_QWORD *)&v47 + 1);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v34 = [MDLMorphDeformer alloc];
    sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v51);
    v35 = v53;
    v36 = v51;
    sub_1DCB450D8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v46);
    v38 = (void *)objc_msgSend_initWithTargetShapes_shapeSetTargetWeights_count_shapeSetTargetCounts_count_(v34, v37, (uint64_t)v7, v35, v36, v48, (_QWORD)v46);
    objc_msgSend_weights(v38, v39, v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_resetWithAnimatedValue_(v41, v42, *(_QWORD *)(a2 + 56));

    sub_1DCAEEE78((uint64_t)&v46);
    sub_1DCAEEE78((uint64_t)&v51);
  }
  else
  {
    while (1)
    {
      v46 = 0u;
      v47 = 0u;
      v10 = *v8;
      *(_QWORD *)&v46 = v10;
      if ((v10 & 7) != 0)
      {
        v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 2, v11));
        if ((v12 & 1) == 0)
          *(_QWORD *)&v46 = v46 & 0xFFFFFFFFFFFFFFF8;
      }
      *((_QWORD *)&v46 + 1) = 0;
      v47 = 0uLL;
      sub_1DCB446C8((_QWORD *)&v46 + 1, v8[1], v8[2], 0xAAAAAAAAAAAAAAABLL * ((v8[2] - v8[1]) >> 5));
      v53 = 0;
      v51 = 0u;
      v52 = 0u;
      v13 = sub_1DCB23B80(*((pxrInternal__aapl__pxrReserved__::VtValue **)&v46 + 1));
      v14 = *(_OWORD *)(v13 + 16);
      v51 = *(_OWORD *)v13;
      v52 = v14;
      v15 = *(_QWORD *)(v13 + 32);
      v53 = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 - 16);
        if (*((_QWORD *)&v52 + 1))
          v16 = (unint64_t *)*((_QWORD *)&v52 + 1);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      if ((v46 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (v46 & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v13);
      if (*(char *)(EmptyString + 23) < 0)
      {
        sub_1DCACA658(__p, *(void **)EmptyString, *(_QWORD *)(EmptyString + 8));
      }
      else
      {
        v19 = *(_OWORD *)EmptyString;
        v50 = *(_QWORD *)(EmptyString + 16);
        *(_OWORD *)__p = v19;
      }
      sub_1DCB41170(v5, (uint64_t)__p, v6, &v51);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (SHIBYTE(v50) < 0)
        operator delete(__p[0]);
      if (!v21)
        break;
      objc_msgSend_addObject_(v7, v20, (uint64_t)v21);

      sub_1DCAEEE78((uint64_t)&v51);
      *(_QWORD *)&v51 = (char *)&v46 + 8;
      sub_1DCB448C4((void ***)&v51);
      if ((v46 & 7) != 0)
      {
        v22 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      v8 += 4;
      if (v8 == v9)
        goto LABEL_24;
    }
    sub_1DCAEEE78((uint64_t)&v51);
    *(_QWORD *)&v51 = (char *)&v46 + 8;
    sub_1DCB448C4((void ***)&v51);
    if ((v46 & 7) != 0)
    {
      v43 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stlxr(v44 - 2, v43));
    }
    v38 = 0;
  }

  return v38;
}

void sub_1DCB4166C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  sub_1DCAEEE78((uint64_t)&a9);
  sub_1DCAEEE78((uint64_t)&a22);

  _Unwind_Resume(a1);
}

uint64_t sub_1DCB41744(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCB44F28(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_1DCB417AC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCB45000(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

MDLSubmeshTopology *sub_1DCB41814(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  MDLSubmeshTopology *v9;
  const char *v10;
  MDLSubmeshTopology *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  MDLSubmeshTopology *v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  __int128 *v19;
  id v20;
  const char *v21;
  void *v22;
  const char *v23;
  void *v24;
  const char *v25;
  const char *v26;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  _BYTE *v32[3];

  v32[2] = *(_BYTE **)MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = (uint64_t *)(a1 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    v7 = 0;
    while (1)
    {
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 8));
      v8 = *(int *)(*(_QWORD *)(a1 + 40) + 4 * v7);
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a2 + 112));
      if (*(int *)(*(_QWORD *)(a2 + 144) + 4 * v8) >= 256)
        break;
      if (*v6 <= (unint64_t)++v7)
        goto LABEL_5;
    }
LABEL_13:
    v17 = 0;
  }
  else
  {
    sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a2 + 112));
    v15 = *(int **)(a2 + 144);
    while (1)
    {
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a2 + 112));
      if (v15 == (int *)(*(_QWORD *)(a2 + 144) + 4 * *(_QWORD *)(a2 + 112)))
        break;
      v16 = *v15++;
      if (v16 > 255)
        goto LABEL_13;
    }
LABEL_5:
    v9 = objc_alloc_init(MDLSubmeshTopology);
    v11 = v9;
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    if (*v6)
    {
      objc_msgSend_setFaceCount_(v9, v10, *v6);
      v12 = *v6;
      v31 = 0;
      v32[0] = &v31;
      sub_1DCB456C4((unint64_t *)&v28, v12, v32);
      if (*v6)
      {
        v13 = 0;
        do
        {
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 8));
          v14 = *(int *)(*(_QWORD *)(a1 + 40) + 4 * v13);
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a2 + 112));
          LODWORD(v14) = *(_DWORD *)(*(_QWORD *)(a2 + 144) + 4 * v14);
          sub_1DCB458E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v28);
          *(_BYTE *)(v30 + v13++) = v14;
        }
        while (*v6 > v13);
      }
    }
    else
    {
      objc_msgSend_setFaceCount_(v9, v10, *(_QWORD *)(a2 + 112));
      v32[1] = &off_1EA575DE8;
      sub_1DCB45564((uint64_t *)v32, a2 + 112);
      v18 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_1DCB41B0C((pxrInternal__aapl__pxrReserved__::VtValue *)v32);
      v19 = (__int128 *)sub_1DCB41B94(v18);
      sub_1DCB41BFC((uint64_t)&v28, v19);
      sub_1DCAEEE2C((uint64_t)v32);
    }
    v20 = objc_alloc(MEMORY[0x1E0C99D50]);
    sub_1DCB458E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v28);
    v22 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v20, v21, v30, (_QWORD)v28, 0);
    v24 = (void *)objc_msgSend_newBufferWithData_type_(v5, v23, (uint64_t)v22, 2);
    if (objc_msgSend_conformsToProtocol_(v24, v25, (uint64_t)&unk_1F03B6D88))
      objc_msgSend_setName_(v24, v26, (uint64_t)CFSTR("faceVertexCounts"));
    objc_msgSend_setFaceTopology_(v11, v26, (uint64_t)v24, v28, v29);
    v17 = v11;

    sub_1DCAEEE78((uint64_t)&v28);
  }

  return v17;
}

void sub_1DCB41A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_1DCAEEE78((uint64_t)&a9);

  _Unwind_Resume(a1);
}

std::type_info *sub_1DCB41B0C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCB455EC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573BE8, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_1DCB41B94(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCB455EC(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_1DCB41BFC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_1DCAEEE78(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_1DCAEEE78((uint64_t)&v9);
  }
  return a1;
}

void sub_1DCB41C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DCB41CB4(uint64_t *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  id v14;
  const char *v15;
  void *v16;
  const char *v17;
  void *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  id v22;
  const char *v23;
  void *v24;
  const char *v25;
  void *v26;
  const char *v27;
  const char *v28;
  id v29;
  const char *v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  id v37;
  const char *v38;
  void *v39;
  const char *v40;
  void *v41;
  const char *v42;
  const char *v43;
  void *v44;
  _OWORD v45[2];
  uint64_t v46;
  _OWORD v47[2];
  uint64_t v48;

  v5 = a2;
  v6 = a3;
  if (!a1[40] || !a1[45])
  {
LABEL_15:
    if (a1[30] && a1[35])
    {
      v29 = objc_alloc(MEMORY[0x1E0C99D50]);
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 30));
      v31 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v29, v30, a1[34], 4 * a1[30], 0);
      v33 = (void *)objc_msgSend_newBufferWithData_type_(v5, v32, (uint64_t)v31, 2);
      if (objc_msgSend_conformsToProtocol_(v33, v34, (uint64_t)&unk_1F03B6D88))
        objc_msgSend_setName_(v33, v35, (uint64_t)CFSTR("vertexCreaseIndices"));
      objc_msgSend_setVertexCreaseIndices_(v6, v35, (uint64_t)v33);
      objc_msgSend_setVertexCreaseCount_(v6, v36, a1[30]);
      v37 = objc_alloc(MEMORY[0x1E0C99D50]);
      sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 35));
      v39 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v37, v38, a1[39], 4 * a1[35], 0);

      v41 = (void *)objc_msgSend_newBufferWithData_type_(v5, v40, (uint64_t)v39, 2);
      if (objc_msgSend_conformsToProtocol_(v41, v42, (uint64_t)&unk_1F03B6D88))
        objc_msgSend_setName_(v41, v43, (uint64_t)CFSTR("vertexCreaseSharpness"));
      objc_msgSend_setVertexCreases_(v6, v43, (uint64_t)v41);

    }
    goto LABEL_23;
  }
  v48 = 0;
  memset(v47, 0, sizeof(v47));
  v46 = 0;
  memset(v45, 0, sizeof(v45));
  v44 = v5;
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 45));
  v7 = (int *)a1[49];
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 45));
  v8 = a1[49] + 4 * a1[45];
  if (v7 == (int *)v8)
  {
LABEL_10:
    v14 = objc_alloc(MEMORY[0x1E0C99D50]);
    sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v45);
    v16 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v14, v15, v46, 4 * *(_QWORD *)&v45[0], 0);
    v5 = v44;
    v18 = (void *)objc_msgSend_newBufferWithData_type_(v44, v17, (uint64_t)v16, 2);
    if (objc_msgSend_conformsToProtocol_(v18, v19, (uint64_t)&unk_1F03B6D88))
      objc_msgSend_setName_(v18, v20, (uint64_t)CFSTR("creaseIndices"));
    objc_msgSend_setEdgeCreaseIndices_(v6, v20, (uint64_t)v18);
    objc_msgSend_setEdgeCreaseCount_(v6, v21, *(_QWORD *)&v45[0] >> 1);
    v22 = objc_alloc(MEMORY[0x1E0C99D50]);
    sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v47);
    v24 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v22, v23, v48, 4 * *(_QWORD *)&v47[0], 0);

    v26 = (void *)objc_msgSend_newBufferWithData_type_(v44, v25, (uint64_t)v24, 2);
    if (objc_msgSend_conformsToProtocol_(v26, v27, (uint64_t)&unk_1F03B6D88))
      objc_msgSend_setName_(v26, v28, (uint64_t)CFSTR("creaseSharpness"));
    objc_msgSend_setEdgeCreases_(v6, v28, (uint64_t)v26);

    sub_1DCAEEE78((uint64_t)v45);
    sub_1DCAEEE78((uint64_t)v47);
    goto LABEL_15;
  }
  v9 = 0;
  v10 = 0;
  while (1)
  {
    v11 = *v7;
    if (a1[40] < (unint64_t)(*v7 + v10))
      break;
    if (v11 >= 2)
    {
      v12 = 4 * v10;
      v13 = v11 - 1;
      do
      {
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 40));
        sub_1DCB45970((uint64_t)v45, (_DWORD *)(a1[44] + v12));
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 40));
        sub_1DCB45970((uint64_t)v45, (_DWORD *)(a1[44] + v12 + 4));
        sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 50));
        sub_1DCB45AD4((uint64_t)v47, (_DWORD *)(a1[54] + 4 * v9));
        v12 += 4;
        ++v10;
        --v13;
      }
      while (v13);
    }
    ++v9;
    ++v10;
    if (++v7 == (int *)v8)
      goto LABEL_10;
  }
  sub_1DCAEEE78((uint64_t)v45);
  sub_1DCAEEE78((uint64_t)v47);
  v5 = v44;
LABEL_23:

}

void sub_1DCB42050(_Unwind_Exception *a1, uint64_t a2, void *a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);

  sub_1DCAEEE78((uint64_t)va);
  sub_1DCAEEE78((uint64_t)va1);

  _Unwind_Resume(a1);
}

id sub_1DCB42120(uint64_t a1, _QWORD *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a4)
{
  id v7;
  __int128 *v8;
  int v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v11;
  unsigned int v12;
  const char *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  int *v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  id v41;
  __int128 *v42;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v8 = (__int128 *)a2[1];
  v41 = v7;
  v42 = (__int128 *)a2[2];
  if (v8 != v42)
  {
    v9 = 0;
    v10 = 0;
    v11 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 8);
    v43 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a2 + 14);
    v12 = -1;
    v36 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 8);
    v37 = a1;
    do
    {
      MEMORY[0x1DF0D1254](&v44, "vertex");
      v14 = *((_QWORD *)v8 + 10);
      v15 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
      if ((v44 & 7) != 0)
      {
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      if ((unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8) == v15)
      {
        if ((v9 & 1) == 0)
        {
          v46 = 0;
          v44 = 0u;
          v45 = 0u;
          if (*(_QWORD *)v11)
          {
            sub_1DCAF0F78(v11);
            v25 = *(int **)(a1 + 40);
            sub_1DCAF0F78(v11);
            v26 = *(_QWORD *)(a1 + 40) + 4 * *(_QWORD *)(a1 + 8);
            while (v25 != (int *)v26)
            {
              v27 = *v25;
              sub_1DCAF0F78(v43);
              v28 = *(unsigned int *)(a2[18] + 4 * v27);
              sub_1DCAF0F78(a4);
              if ((int)v28 >= 1)
              {
                v29 = 4 * *(int *)(*((_QWORD *)a4 + 4) + 4 * v27);
                do
                {
                  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a2 + 19));
                  sub_1DCB45970((uint64_t)&v44, (_DWORD *)(a2[23] + v29));
                  v29 += 4;
                  --v28;
                }
                while (v28);
              }
              ++v25;
            }
          }
          else
          {
            sub_1DCB24648((uint64_t)&v44, (__int128 *)(a2 + 19));
          }
          sub_1DCB424DC(a3, (uint64_t)&v44);
          sub_1DCAEEE78((uint64_t)&v44);
          v12 = v10;
          v11 = v36;
          a1 = v37;
        }
        objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v13, v12);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v41, v34, (uint64_t)v33);

        v9 = 1;
      }
      else
      {
        MEMORY[0x1DF0D1254](&v44, "faceVarying");
        v17 = *((_QWORD *)v8 + 10);
        v18 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
        if ((v44 & 7) != 0)
        {
          do
            v19 = __ldxr(v18);
          while (__stlxr(v19 - 2, v18));
        }
        if ((unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8) == v18)
        {
          v46 = 0;
          v44 = 0u;
          v45 = 0u;
          v38 = v9;
          v39 = v12;
          if (*(_QWORD *)v11)
          {
            sub_1DCAF0F78(v11);
            v20 = *(int **)(a1 + 40);
            sub_1DCAF0F78(v11);
            for (i = *(_QWORD *)(a1 + 40) + 4 * *(_QWORD *)(a1 + 8); v20 != (int *)i; ++v20)
            {
              v22 = *v20;
              sub_1DCAF0F78(v43);
              v23 = *(unsigned int *)(a2[18] + 4 * v22);
              sub_1DCAF0F78(a4);
              if ((int)v23 >= 1)
              {
                v24 = 4 * *(int *)(*((_QWORD *)a4 + 4) + 4 * v22);
                do
                {
                  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v8 + 1));
                  sub_1DCB45970((uint64_t)&v44, (_DWORD *)(*((_QWORD *)v8 + 6) + v24));
                  v24 += 4;
                  --v23;
                }
                while (v23);
              }
            }
          }
          else
          {
            sub_1DCB24648((uint64_t)&v44, v8 + 1);
          }
          sub_1DCB424DC(a3, (uint64_t)&v44);
          objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v30, -1 - 0x3333333333333333 * ((a3[1] - *a3) >> 3));
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v41, v32, (uint64_t)v31);

          sub_1DCAEEE78((uint64_t)&v44);
          a1 = v37;
          v9 = v38;
          v12 = v39;
          v11 = v36;
        }
      }
      ++v10;
      v8 += 6;
    }
    while (v8 != v42);
  }
  return v41;
}

void sub_1DCB42450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1DCAEEE78((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1DCB424DC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v24[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    v14 = v13 + 1;
    if (v13 + 1 > 0x666666666666666)
      sub_1DCAE4C44();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x333333333333333)
      v16 = 0x666666666666666;
    else
      v16 = v14;
    v24[4] = result;
    v17 = (char *)sub_1DCB45CAC(result, v16);
    v18 = &v17[40 * v13];
    v24[0] = v17;
    v24[1] = v18;
    v24[3] = &v17[40 * v19];
    v20 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v18 = *(_OWORD *)a2;
    *((_OWORD *)v18 + 1) = v20;
    v21 = *(_QWORD *)(a2 + 32);
    *((_QWORD *)v18 + 4) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 - 16);
      if (*((_QWORD *)v18 + 3))
        v22 = (unint64_t *)*((_QWORD *)v18 + 3);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24[2] = v18 + 40;
    sub_1DCB45C38(a1, v24);
    v12 = a1[1];
    result = sub_1DCB45EA8((uint64_t)v24);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_OWORD *)(v7 + 16) = v8;
    v9 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(v7 + 32) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 - 16);
      if (*(_QWORD *)(v7 + 24))
        v10 = *(unint64_t **)(v7 + 24);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v12;
  return result;
}

void sub_1DCB4262C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCB45EA8((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1DCB42640(uint64_t *a1, void *a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v4;
  const char *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  const char *v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  id v31;
  const char *v32;
  void *v33;
  MDLSubmesh *v34;
  const char *v35;
  const char *v36;
  void *v37;
  MDLSubmesh *v38;
  const char *v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v46;
  _QWORD *i;
  id v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _OWORD v56[2];
  uint64_t v57;
  _OWORD v58[2];
  uint64_t v59;
  int v60;
  int *v61;
  void **v62;

  v49 = a2;
  v46 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v59 = 0;
  memset(v58, 0, sizeof(v58));
  v4 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 14);
  sub_1DCB23B10((uint64_t)v58, a1[14]);
  if (a1[14])
  {
    v6 = 0;
    v7 = 0;
    do
    {
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v58);
      *(_DWORD *)(v59 + 4 * v6) = v7;
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 14));
      v7 += *(_DWORD *)(a1[18] + 4 * v6++);
    }
    while (a1[14] > v6);
  }
  v8 = (_QWORD *)a1[55];
  for (i = (_QWORD *)a1[56]; v8 != i; v8 += 7)
  {
    v57 = 0;
    memset(v56, 0, sizeof(v56));
    if (a3)
    {
      v53 = 0;
      v54 = 0;
      v55 = 0;
      sub_1DCB42120((uint64_t)v8, a1, (uint64_t *)&v53, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v58);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *v53;
      v10 = 0xCCCCCCCCCCCCCCCDLL * (v54 - v53) * *v53;
      v60 = 0;
      v61 = &v60;
      sub_1DCB267B0((unint64_t *)v56, v10, &v61);
      if (v9)
      {
        v11 = 0;
        v13 = v53;
        v12 = v54;
        v51 = v9;
        v52 = v8;
        do
        {
          if (v12 == v13)
          {
            v12 = v13;
          }
          else
          {
            v14 = v4;
            v15 = 0;
            v16 = 4;
            do
            {
              sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13[v16 - 4]);
              v17 = *(_DWORD *)(v13[v16] + 4 * v11);
              v19 = v53;
              v18 = v54;
              sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v56);
              *(_DWORD *)(v57 + 4 * (v15 - 0x3333333333333333 * (v18 - v19) * v11)) = v17;
              ++v15;
              v13 = v53;
              v12 = v54;
              v16 += 5;
            }
            while (0xCCCCCCCCCCCCCCCDLL * (v54 - v53) > v15);
            v4 = v14;
            v9 = v51;
            v8 = v52;
          }
          ++v11;
        }
        while (v11 != v9);
      }
      v62 = (void **)&v53;
      sub_1DCB45F1C(&v62);
    }
    else
    {
      if (v8[1])
      {
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v8 + 1));
        v20 = (int *)v8[5];
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v8 + 1));
        v21 = v8[5] + 4 * v8[1];
        while (v20 != (int *)v21)
        {
          v22 = *v20;
          sub_1DCAF0F78(v4);
          v23 = *(unsigned int *)(a1[18] + 4 * v22);
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v58);
          if ((int)v23 >= 1)
          {
            v24 = 4 * *(int *)(v59 + 4 * v22);
            do
            {
              sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 19));
              sub_1DCB45970((uint64_t)v56, (_DWORD *)(a1[23] + v24));
              v24 += 4;
              --v23;
            }
            while (v23);
          }
          ++v20;
        }
      }
      else
      {
        sub_1DCB24648((uint64_t)v56, (__int128 *)(a1 + 19));
      }
      v50 = 0;
    }
    v25 = objc_alloc(MEMORY[0x1E0C99D50]);
    sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v56);
    v27 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v25, v26, v57, 4 * *(_QWORD *)&v56[0], 0);
    v29 = (void *)objc_msgSend_newBufferWithData_type_(v49, v28, (uint64_t)v27, 2);
    if (objc_msgSend_conformsToProtocol_(v29, v30, (uint64_t)&unk_1F03B6D88))
    {
      v31 = v29;
      objc_msgSend_setName_(v31, v32, (uint64_t)CFSTR("indices"));

    }
    sub_1DCB41814((uint64_t)v8, (uint64_t)a1, v49);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    if (a3)
    {
      v34 = [MDLSubmesh alloc];
      v37 = (void *)objc_msgSend_initWithName_indexBuffer_indexCount_indexType_faceIndexing_geometryType_material_topology_(v34, v35, (uint64_t)CFSTR("submesh"), v29, *(_QWORD *)&v56[0], 32, v50, 5, v8[6], v33);
      if (v37)
        goto LABEL_30;
    }
    else
    {
      v38 = [MDLSubmesh alloc];
      v37 = (void *)objc_msgSend_initWithName_indexBuffer_indexCount_indexType_geometryType_material_topology_(v38, v39, (uint64_t)CFSTR("submesh"), v29, *(_QWORD *)&v56[0], 32, 5, v8[6], v33);
      if (v37)
      {
LABEL_30:
        objc_msgSend_addObject_(v46, v36, (uint64_t)v37);

      }
    }

    sub_1DCAEEE78((uint64_t)v56);
  }
  objc_msgSend_objectAtIndexedSubscript_(v46, v5, 0);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_topology(v40, v41, v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1DCB41CB4(a1, v49, v43);

  v44 = v46;
  sub_1DCAEEE78((uint64_t)v58);

  return v44;
}

void sub_1DCB42A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;

  sub_1DCAEEE78((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB42B7C(_QWORD *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v4;
  unint64_t v5;
  uint64_t i;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  _OWORD v23[3];
  int v24;
  _DWORD *v25[5];

  v4 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a2 + 16);
  if (*(_QWORD *)(a2 + 16))
  {
    memset(v23, 0, 40);
    sub_1DCB23B10((uint64_t)v23, a1[19]);
    if (a1[14])
    {
      v5 = 0;
      LODWORD(i) = 0;
      do
      {
        v7 = 0;
        for (i = (int)i; ; ++i)
        {
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 14));
          if (v7 >= *(_DWORD *)(a1[18] + 4 * v5))
            break;
          sub_1DCAF0F78(v4);
          v8 = *(_DWORD *)(*(_QWORD *)(a2 + 48) + 4 * v5);
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23);
          *(_DWORD *)(*(_QWORD *)&v23[2] + 4 * i) = v8;
          ++v7;
        }
        ++v5;
      }
      while (a1[14] > v5);
    }
    v9 = a1[19];
    v24 = 0;
    v25[0] = &v24;
    sub_1DCB267B0((unint64_t *)v4, v9, v25);
    v10 = *((_QWORD *)v4 + 2);
    v11 = *(_OWORD *)v4;
    *(_OWORD *)v4 = v23[0];
    *((_QWORD *)v4 + 2) = *(_QWORD *)&v23[1];
    v23[0] = v11;
    *(_QWORD *)&v23[1] = v10;
    v12 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a2 + 40) = *(_OWORD *)((char *)&v23[1] + 8);
    *(_OWORD *)((char *)&v23[1] + 8) = v12;
    sub_1DCAEEE78((uint64_t)v23);
  }
  else
  {
    v13 = a1[19];
    LODWORD(v25[0]) = 0;
    *(_QWORD *)&v23[0] = v25;
    sub_1DCB267B0((unint64_t *)v4, v13, (_DWORD **)v23);
    if (a1[14])
    {
      v14 = 0;
      v15 = 0;
      do
      {
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 14));
        if (*(int *)(a1[18] + 4 * v14) >= 1)
        {
          v16 = 0;
          do
          {
            sub_1DCAF0F78(v4);
            *(_DWORD *)(*(_QWORD *)(a2 + 48) + 4 * v15 + 4 * v16) = v14;
            sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 14));
            ++v16;
          }
          while ((int)v16 < *(_DWORD *)(a1[18] + 4 * v14));
          v15 += v16;
        }
        ++v14;
      }
      while (a1[14] > v14);
    }
  }
  result = MEMORY[0x1DF0D1254](v23, "faceVarying");
  v18 = (_QWORD *)(a2 + 80);
  if (v23 == (_OWORD *)(a2 + 80))
  {
    if ((v23[0] & 7) != 0)
    {
      v21 = (unsigned int *)(*(_QWORD *)&v23[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
  }
  else
  {
    if ((*v18 & 7) != 0)
    {
      v19 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    *v18 = *(_QWORD *)&v23[0];
  }
  return result;
}

void sub_1DCB42DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DCB42DC8(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  _OWORD v16[3];
  int v17;
  _DWORD *v18[5];

  memset(v16, 0, 40);
  v4 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 152);
  sub_1DCB23B10((uint64_t)v16, *(_QWORD *)(a1 + 152));
  if (*(_QWORD *)v4)
  {
    v5 = 0;
    do
    {
      sub_1DCAF0F78(v4);
      v6 = *(int *)(*(_QWORD *)(a1 + 184) + 4 * v5);
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a2 + 16));
      LODWORD(v6) = *(_DWORD *)(*(_QWORD *)(a2 + 48) + 4 * v6);
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
      *(_DWORD *)(*(_QWORD *)&v16[2] + 4 * v5++) = v6;
      v7 = *(_QWORD *)v4;
    }
    while (*(_QWORD *)v4 > v5);
  }
  else
  {
    v7 = 0;
  }
  v17 = 0;
  v18[0] = &v17;
  sub_1DCB267B0((unint64_t *)(a2 + 16), v7, v18);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a2 + 16) = v16[0];
  *(_QWORD *)(a2 + 32) = *(_QWORD *)&v16[1];
  v16[0] = v9;
  *(_QWORD *)&v16[1] = v8;
  v10 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)((char *)&v16[1] + 8);
  *(_OWORD *)((char *)&v16[1] + 8) = v10;
  MEMORY[0x1DF0D1254](v18, "faceVarying");
  v11 = (_QWORD *)(a2 + 80);
  if (v18 == (_DWORD **)(a2 + 80))
  {
    if (((uint64_t)v18[0] & 7) != 0)
    {
      v14 = (unsigned int *)((unint64_t)v18[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
  }
  else
  {
    if ((*v11 & 7) != 0)
    {
      v12 = (unsigned int *)(*v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    *v11 = v18[0];
  }
  sub_1DCAEEE78((uint64_t)v16);
}

void sub_1DCB42F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB42F58(__n128 *a1, int a2)
{
  unint64_t *v4;
  uint64_t v6;
  __int128 v7;
  _OWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v19;
  __int128 v20;
  _OWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t result;
  __n128 *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v38;
  __int128 v39;
  _OWORD *v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _OWORD *v44;
  unint64_t v45;
  uint64_t v46;
  _WORD *v47;
  unint64_t v48;
  uint64_t v50;
  __int128 v51;
  _OWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  char *v55;
  _OWORD *v56;
  unint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  _OWORD *v67;
  __n128 v68;
  __int128 v69;
  char *v70;

  v4 = (unint64_t *)MEMORY[0x1E0DF2618];
  if (!atomic_load(MEMORY[0x1E0DF2618]))
    sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    v70 = 0;
    v68 = 0u;
    v69 = 0u;
    sub_1DCAEEB34((uint64_t)&v68, a2);
    v6 = sub_1DCAEEACC((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    v7 = *(_OWORD *)(v6 + 16);
    v65 = *(_OWORD *)v6;
    v66 = v7;
    v8 = *(_OWORD **)(v6 + 32);
    v67 = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 - 1);
      if (*((_QWORD *)&v66 + 1))
        v9 = (unint64_t *)*((_QWORD *)&v66 + 1);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    if ((_QWORD)v65)
    {
      sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v68);
      v11 = v70;
      sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v68);
      v12 = v70;
      v13 = v68.n128_u64[0];
      sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v65);
      v14 = &v12[16 * v13] - v11;
      if (v14 >= 1)
      {
        v15 = v67;
        v16 = ((unint64_t)v14 >> 4) + 1;
        do
        {
          *(_OWORD *)v11 = *v15;
          v11 += 16;
          --v16;
        }
        while (v16 > 1);
      }
      sub_1DCB435E8((uint64_t *)a1, &v68);
    }
LABEL_29:
    sub_1DCAEEE78((uint64_t)&v65);
    sub_1DCAEEE78((uint64_t)&v68);
    goto LABEL_30;
  }
  if (!atomic_load(v4))
    sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    goto LABEL_20;
  if (!atomic_load(v4))
    sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
LABEL_20:
    v70 = 0;
    v68 = 0u;
    v69 = 0u;
    sub_1DCB2525C((uint64_t)&v68, a2);
    v19 = sub_1DCB23B80((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    v20 = *(_OWORD *)(v19 + 16);
    v65 = *(_OWORD *)v19;
    v66 = v20;
    v21 = *(_OWORD **)(v19 + 32);
    v67 = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 - 1);
      if (*((_QWORD *)&v66 + 1))
        v22 = (unint64_t *)*((_QWORD *)&v66 + 1);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if ((_QWORD)v65)
    {
      sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v68);
      v24 = v70;
      sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v68);
      v25 = v70;
      v26 = v68.n128_u64[0];
      sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v65);
      v27 = (char *)v25 + 12 * v26 - (char *)v24;
      if (v27 >= 1)
      {
        v28 = v67;
        v29 = v27 / 0xCuLL + 1;
        do
        {
          v30 = *(_QWORD *)v28;
          *((_DWORD *)v24 + 2) = *((_DWORD *)v28 + 2);
          *(_QWORD *)v24 = v30;
          v24 = (_OWORD *)((char *)v24 + 12);
          --v29;
        }
        while (v29 > 1);
      }
      sub_1DCB24508((uint64_t *)a1, &v68);
    }
    goto LABEL_29;
  }
  if (!atomic_load(v4))
    sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    v70 = 0;
    v68 = 0u;
    v69 = 0u;
    sub_1DCB4369C((uint64_t)&v68, a1[5].n128_i32[2] * (uint64_t)a2);
    v67 = 0;
    v65 = 0u;
    v66 = 0u;
    v38 = sub_1DCB4370C((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    v39 = *(_OWORD *)(v38 + 16);
    v65 = *(_OWORD *)v38;
    v66 = v39;
    v40 = *(_OWORD **)(v38 + 32);
    v67 = v40;
    if (v40)
    {
      v41 = (unint64_t *)(v40 - 1);
      if (*((_QWORD *)&v66 + 1))
        v41 = (unint64_t *)*((_QWORD *)&v66 + 1);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    if ((_QWORD)v65)
    {
      if (a1[5].n128_u32[2] == 1)
      {
        sub_1DCB46434((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v68);
        v43 = v70;
        sub_1DCB46434((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v68);
        v44 = v70;
        v45 = v68.n128_u64[0];
        sub_1DCB46434((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v65);
        v46 = (char *)v44 + 2 * v45 - v43;
        if (v46 >= 1)
        {
          v47 = v67;
          v48 = ((unint64_t)v46 >> 1) + 1;
          do
          {
            *(_WORD *)v43 = *v47;
            v43 += 2;
            --v48;
          }
          while (v48 > 1);
        }
      }
      else
      {
        sub_1DCB46434((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v68);
        v61 = v70;
        while (1)
        {
          sub_1DCB46434((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v68);
          if (v61 == &v70[2 * v68.n128_u64[0]])
            break;
          if (a1[5].n128_u32[2])
          {
            v62 = 0;
            do
            {
              sub_1DCB46434((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v65);
              *(_WORD *)v61 = *((_WORD *)v67 + v62);
              v61 += 2;
              ++v62;
            }
            while (v62 < a1[5].n128_i32[2]);
          }
        }
      }
      sub_1DCB43774((uint64_t *)a1, &v68);
    }
    goto LABEL_29;
  }
  if (!atomic_load(v4))
    sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    v70 = 0;
    v68 = 0u;
    v69 = 0u;
    sub_1DCB43828((uint64_t)&v68, a1[5].n128_i32[2] * (uint64_t)a2);
    v67 = 0;
    v65 = 0u;
    v66 = 0u;
    v50 = sub_1DCB41744((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    v51 = *(_OWORD *)(v50 + 16);
    v65 = *(_OWORD *)v50;
    v66 = v51;
    v52 = *(_OWORD **)(v50 + 32);
    v67 = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 - 1);
      if (*((_QWORD *)&v66 + 1))
        v53 = (unint64_t *)*((_QWORD *)&v66 + 1);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if ((_QWORD)v65)
    {
      if (a1[5].n128_u32[2] == 1)
      {
        sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v68);
        v55 = v70;
        sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v68);
        v56 = v70;
        v57 = v68.n128_u64[0];
        sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v65);
        v58 = (char *)v56 + 4 * v57 - v55;
        if (v58 >= 1)
        {
          v59 = v67;
          v60 = ((unint64_t)v58 >> 2) + 1;
          do
          {
            *(_DWORD *)v55 = *v59;
            v55 += 4;
            --v60;
          }
          while (v60 > 1);
        }
      }
      else
      {
        sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v68);
        v63 = v70;
        while (1)
        {
          sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v68);
          if (v63 == &v70[4 * v68.n128_u64[0]])
            break;
          if (a1[5].n128_u32[2])
          {
            v64 = 0;
            do
            {
              sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v65);
              *(_DWORD *)v63 = *((_DWORD *)v67 + v64);
              v63 += 4;
              ++v64;
            }
            while (v64 < a1[5].n128_i32[2]);
          }
        }
      }
      sub_1DCB43898((uint64_t *)a1, &v68);
    }
    goto LABEL_29;
  }
LABEL_30:
  result = MEMORY[0x1DF0D1254](&v68, "vertex");
  v32 = a1 + 5;
  if (&v68 == &a1[5])
  {
    if ((v68.n128_u8[0] & 7) != 0)
    {
      v35 = (unsigned int *)(v68.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stlxr(v36 - 2, v35));
    }
  }
  else
  {
    if ((v32->n128_u64[0] & 7) != 0)
    {
      v33 = (unsigned int *)(v32->n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    v32->n128_u64[0] = v68.n128_u64[0];
  }
  return result;
}

void sub_1DCB4350C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_1DCAEEE78((uint64_t)&a9);
  sub_1DCAEEE78((uint64_t)&a15);
  _Unwind_Resume(a1);
}

__n128 sub_1DCB435E8(uint64_t *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_1DCAEEEFC((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_1DCB45FA8(a1, (uint64_t)v10);
    sub_1DCAEEE78((uint64_t)v10);
  }
  v4 = (__n128 *)sub_1DCB46078(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_1DCB43684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB4369C(uint64_t a1, unint64_t a2)
{
  __int16 v5;
  __int16 *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_1DCAEEFD4((_QWORD *)a1);
  v6 = &v5;
  sub_1DCB46108((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_1DCB436F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB4370C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCB4635C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

__n128 sub_1DCB43774(uint64_t *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_1DCB4635C((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_1DCB464C8(a1, (uint64_t)v10);
    sub_1DCAEEE78((uint64_t)v10);
  }
  v4 = (__n128 *)sub_1DCB46908(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_1DCB43810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB43828(uint64_t a1, unint64_t a2)
{
  int v5;
  int *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_1DCAEEFD4((_QWORD *)a1);
  v6 = &v5;
  sub_1DCB30BCC((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_1DCB43880(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE78(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1DCB43898(uint64_t *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_1DCB44F28((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_1DCB46998(a1, (uint64_t)v10);
    sub_1DCAEEE78((uint64_t)v10);
  }
  v4 = (__n128 *)sub_1DCB46E50(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_1DCB43934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB4394C(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t *v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1F03B4810);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1F03B4810))
  {
    v4 = operator new();
    v5 = (unint64_t *)MEMORY[0x1E0DF24F8];
    v6 = atomic_load(MEMORY[0x1E0DF24F8]);
    if (!v6)
      v6 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
    v7 = *(uint64_t **)(v6 + 680);
    v27[0] = v7;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        v27[0] = (uint64_t *)((unint64_t)v27[0] & 0xFFFFFFFFFFFFFFF8);
    }
    v27[1] = 0;
    v10 = atomic_load(v5);
    if (!v10)
      v10 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
    v11 = *(_QWORD *)(v10 + 96);
    v28 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    v29 = 1;
    v14 = atomic_load(v5);
    if (!v14)
      v14 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
    v15 = *(_QWORD *)(v14 + 552);
    v30 = v15;
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 2, v16));
      if ((v17 & 1) == 0)
        v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    v31 = 2;
    v18 = atomic_load(v5);
    if (!v18)
      v18 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
    v19 = *(_QWORD *)(v18 + 48);
    v32 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 2, v20));
      if ((v21 & 1) == 0)
        v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    v33 = 3;
    sub_1DCB44948(v4, (uint64_t *)v27, 4);
    v22 = (uint64_t **)&v34;
    do
    {
      v24 = (uint64_t)*(v22 - 2);
      v22 -= 2;
      v23 = v24;
      if ((v24 & 7) != 0)
      {
        v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
    }
    while (v22 != v27);
    qword_1F03B4808 = v4;
    __cxa_guard_release(&qword_1F03B4810);
  }
  v27[0] = a1;
  return sub_1DCB44514((uint64_t **)qword_1F03B4808, a1, (uint64_t)&unk_1DCC58300, v27)[5];
}

void sub_1DCB43BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;

  while (1)
  {
    v14 = *((_QWORD *)v11 - 2);
    v11 -= 16;
    v13 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    if (v11 == &a10)
    {
      MEMORY[0x1DF0D228C](v10, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_1F03B4810);
      _Unwind_Resume(a1);
    }
  }
}

__n128 sub_1DCB43C84(unint64_t *a1, __int128 *a2)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  _OWORD v14[5];

  memset(v14, 0, 40);
  sub_1DCB43D9C((unint64_t *)v14, *(_QWORD *)a2);
  if (*a1)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(int *)(a1[4] + 4 * v4);
      v7 = v6 + 1;
      for (i = 4 * (v6 + v5) - 4; v7-- > 1; i -= 4)
      {
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        sub_1DCB45970((uint64_t)v14, (_DWORD *)(*((_QWORD *)a2 + 4) + i));
      }
      v5 += v6;
      ++v4;
    }
    while (*a1 > v4);
  }
  v10 = *((_QWORD *)a2 + 2);
  v11 = *a2;
  *a2 = v14[0];
  *((_QWORD *)a2 + 2) = *(_QWORD *)&v14[1];
  v14[0] = v11;
  *(_QWORD *)&v14[1] = v10;
  v12 = *(__int128 *)((char *)a2 + 24);
  *(__int128 *)((char *)a2 + 24) = *(_OWORD *)((char *)&v14[1] + 8);
  *(_OWORD *)((char *)&v14[1] + 8) = v12;
  sub_1DCAEEE78((uint64_t)v14);
  return result;
}

void sub_1DCB43D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DCB43D9C(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = a1[4];
  if (!v3)
  {
    if (!a2)
      return;
    v7 = sub_1DCAF100C((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3])
    v4 = a1;
  else
    v4 = (unint64_t *)(v3 - 8);
  if (*v4 < a2)
  {
    v5 = *a1;
    v6 = sub_1DCAF100C((uint64_t)a1, a2);
    v7 = v6;
    if (v5)
    {
      v8 = 0;
      do
      {
        *(_DWORD *)((char *)v6 + v8) = *(_DWORD *)(v3 + v8);
        v8 += 4;
      }
      while (4 * v5 != v8);
    }
LABEL_12:
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

void sub_1DCB43E34(uint64_t a1)
{
  unint64_t *v2;
  __n128 v3;
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  int v13;
  uint64_t v14;

  v2 = (unint64_t *)(a1 + 112);
  v3 = sub_1DCB43C84((unint64_t *)(a1 + 112), (__int128 *)(a1 + 152));
  v4 = *(unint64_t **)(a1 + 8);
  v5 = *(unint64_t **)(a1 + 16);
  if (v4 != v5)
  {
    v6 = *(_QWORD *)(a1 + 152);
    do
    {
      MEMORY[0x1DF0D1254](&v14, "faceVarying", v3);
      v7 = v4[10];
      v8 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      if ((v14 & 7) != 0)
      {
        do
          v9 = __ldxr(v8);
        while (__stlxr(v9 - 2, v8));
      }
      if ((unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8) != v8)
        goto LABEL_16;
      v10 = v4[2];
      if (v10)
      {
        if (v10 != (int)v6)
        {
          v11 = v4[7] & 0xFFFFFFFFFFFFFFF8;
          if (v11)
          {
            v12 = (const char *)(v11 + 16);
            if (*(char *)(v11 + 39) < 0)
              v12 = *(const char **)v12;
          }
          else
          {
            v12 = "";
          }
          NSLog(CFSTR("Unable to unwind attribute indice of attribute named: %s"), v12);
          goto LABEL_16;
        }
      }
      else
      {
        sub_1DCB43D9C(v4 + 2, (int)v6);
        v13 = 0;
        if ((int)v6 >= 1)
        {
          do
          {
            sub_1DCB45970((uint64_t)(v4 + 2), &v13);
            ++v13;
          }
          while (v13 < (int)v6);
        }
      }
      v3 = sub_1DCB43C84(v2, (__int128 *)v4 + 1);
LABEL_16:
      v4 += 12;
    }
    while (v4 != v5);
  }
}

uint64_t sub_1DCB43F88(uint64_t a1)
{

  sub_1DCAEEE78(a1 + 8);
  return a1;
}

uint64_t sub_1DCB43FBC(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_1DCAEEFD4((_QWORD *)a1);
  v6 = &v5;
  sub_1DCB46F0C((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_1DCB44014(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB4402C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_1DCB440A8((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_1DCB44090(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCB444B4(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCB440A8(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v6 = (uint64_t **)sub_1DCB44134(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1DCB442CC((uint64_t)a1, a4, v8);
    sub_1DCACAE54(a1, v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

uint64_t *sub_1DCB44134(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_1DCB443EC((uint64_t)(a1 + 2), a5, a2 + 4))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_1DCB443EC((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return sub_1DCB44350((uint64_t)a1, a3, a5);
  }
  if (sub_1DCB443EC((uint64_t)(a1 + 2), a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_1DCB443EC((uint64_t)(a1 + 2), a5, v15 + 4))
        return sub_1DCB44350((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *sub_1DCB442CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = operator new(0x30uLL);
  *a3 = result;
  a3[1] = v5;
  v7 = *a2;
  result[4] = *a2;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[5] = a2[1];
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

_QWORD *sub_1DCB44350(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = v4 + 4;
        if (!sub_1DCB443EC(v7, a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_1DCB443EC(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t sub_1DCB443EC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  const void *v14;
  int v15;
  unint64_t v16;
  const void *v17;
  const void *v18;
  int v19;
  size_t v20;
  const void *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;

  v3 = *a2;
  v4 = *a3;
  if (*a2)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if (v3)
      v6 = 1;
    else
      v6 = v4 == 0;
    return !v6;
  }
  else
  {
    if (v3 == v4)
      return 0;
    v8 = v3 & 0xFFFFFFFFFFFFFFF8;
    v9 = v4 & 0xFFFFFFFFFFFFFFF8;
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(_QWORD *)(v9 + 8);
    if (v10 < v11)
      return 1;
    if (v10 != v11)
    {
      return 0;
    }
    else
    {
      v14 = *(const void **)(v9 + 16);
      v12 = v9 + 16;
      v13 = v14;
      v15 = *(char *)(v12 + 23);
      v18 = *(const void **)(v8 + 16);
      v16 = v8 + 16;
      v17 = v18;
      v19 = *(char *)(v16 + 23);
      if (v19 >= 0)
        v20 = *(unsigned __int8 *)(v16 + 23);
      else
        v20 = *(_QWORD *)(v16 + 8);
      if (v19 >= 0)
        v21 = (const void *)v16;
      else
        v21 = v17;
      if (v15 >= 0)
        v22 = *(unsigned __int8 *)(v12 + 23);
      else
        v22 = *(_QWORD *)(v12 + 8);
      if (v15 >= 0)
        v23 = (const void *)v12;
      else
        v23 = v13;
      if (v22 >= v20)
        v24 = v20;
      else
        v24 = v22;
      v25 = memcmp(v21, v23, v24);
      if (v25)
        return v25 < 0;
      else
        return v20 < v22;
    }
  }
}

void sub_1DCB444B4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    sub_1DCB444B4(a1, *a2);
    sub_1DCB444B4(a1, a2[1]);
    v4 = a2[4];
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(a2);
  }
}

uint64_t *sub_1DCB44514(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_1DCB44350((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1DCB445B4((uint64_t)a1, a4, v8);
    sub_1DCACAE54(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

_QWORD *sub_1DCB445B4@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = operator new(0x30uLL);
  *a3 = result;
  a3[1] = v5;
  v7 = **a2;
  result[4] = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[5] = 0;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1DCB44638(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1DCB44678((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void sub_1DCB44678(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 24)
  {

    v5 = *(void **)(i - 24);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

_QWORD *sub_1DCB446C8(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1DCB4474C(result, a4);
    result = sub_1DCB4479C((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DCB4472C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1DCB448C4(&a9);
  _Unwind_Resume(a1);
}

char *sub_1DCB4474C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    sub_1DCAE4C44();
  result = (char *)sub_1DCB27740((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

_QWORD *sub_1DCB4479C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v9[3];
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_1DCB27848(a1, v4, v6);
      v6 += 96;
      v4 = v12 + 12;
      v12 += 12;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  sub_1DCB44840((uint64_t)v9);
  return v4;
}

void sub_1DCB4482C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCB44840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB44840(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1DCB44874((uint64_t *)a1);
  return a1;
}

uint64_t *sub_1DCB44874(uint64_t *result)
{
  _QWORD **v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)result[1];
  v1 = (_QWORD **)result[2];
  v3 = *v1;
  v4 = (_QWORD *)*v2;
  if (*v1 != (_QWORD *)*v2)
  {
    v5 = *result;
    do
    {
      v3 -= 12;
      result = (uint64_t *)sub_1DCB279D4(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

void sub_1DCB448C4(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        sub_1DCB279D4((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1DCB44948(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_1DCB440A8((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_1DCB449AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCB444B4(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB449C4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_1DCB44A40((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_1DCB44A28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCB44B2C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCB44A40(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v6 = sub_1DCB44134(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    sub_1DCB44ACC(v7 + 4, a4);
    sub_1DCACAE54(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1DCB44ACC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  a1[1] = (uint64_t)(id)a2[1];
  return a1;
}

void sub_1DCB44B2C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    sub_1DCB44B2C(a1, *a2);
    sub_1DCB44B2C(a1, a2[1]);

    v4 = a2[4];
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(a2);
  }
}

_QWORD *sub_1DCB44B94(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = sub_1DCB443EC(v5, v3 + 4, a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_1DCB443EC(v5, a2, v6 + 4))
    return v2;
  return v6;
}

uint64_t sub_1DCB44C20(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1DCAE4C44();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_1DCB01278(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[24 * v9];
  *(_QWORD *)v11 = *(id *)a2;
  *((_QWORD *)v11 + 1) = *(id *)(a2 + 8);
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  v14[2] = v11 + 24;
  sub_1DCACCA20(a1, v14);
  v12 = a1[1];
  sub_1DCACCA94((uint64_t)v14);
  return v12;
}

void sub_1DCB44D20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCACCA94((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB44D34(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *a3 = 0;
      a3[1] = 0;
      *(_OWORD *)(v8 - 24) = v9;
      v8 -= 24;
      *(_QWORD *)(v8 + 16) = a3[2];
      v7 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  LOBYTE(v13) = 1;
  sub_1DCB44DC8((uint64_t)v12);
  return v10;
}

uint64_t sub_1DCB44DC8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1DCB44DFC((uint64_t *)a1);
  return a1;
}

void sub_1DCB44DFC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  sub_1DCB44E70(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_1DCB44E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *i;

  for (i = *(id **)(a2 + 32); i != *(id **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {

    i = (id *)(*(_QWORD *)(a2 + 32) + 24);
  }
}

void sub_1DCB44ED0(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;

  }
}

uint64_t sub_1DCB44F28(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 57)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573BD0);
  else
    return 0;
}

double sub_1DCB44F60@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_1DCB44FB8;
  a1[2] = (uint64_t)&stru_1EA573BD0;
  return result;
}

uint64_t sub_1DCB44FB8(uint64_t result)
{
  if (result)
  {
    sub_1DCAEEE78(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

uint64_t sub_1DCB45000(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 53)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573C18);
  else
    return 0;
}

double sub_1DCB45038@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_1DCB45090;
  a1[2] = (uint64_t)&stru_1EA573C18;
  return result;
}

uint64_t sub_1DCB45090(uint64_t result)
{
  if (result)
  {
    sub_1DCAEEE78(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

void sub_1DCB450D8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique() [T = unsigned int]");
      v4 = (int *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_1DCB4516C((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 4 * v5;
        v9 = v6;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      sub_1DCAEEE78((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

_QWORD *sub_1DCB4516C(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL)
    v3 = -1;
  else
    v3 = 4 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCB451F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCB4520C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCB45234(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCB453C0(a1);
}

uint64_t sub_1DCB45244()
{
  return 1;
}

unint64_t sub_1DCB4524C(uint64_t *a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v1 = *a1;
  v3[1] = 1;
  v3[0] = *(_QWORD *)v1;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v3, *(const char **)(v1 + 32));
  return bswap64(0x9E3779B97F4A7C55 * v3[0]);
}

uint64_t sub_1DCB452A4(uint64_t *a1, uint64_t *a2)
{
  return sub_1DCB45428(*a1, *a2);
}

uint64_t sub_1DCB452B0(uint64_t *a1, uint64_t a2)
{
  return sub_1DCB45428(*a1, a2);
}

uint64_t sub_1DCB452BC()
{
  return 0;
}

uint64_t sub_1DCB452C8(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_1DCB45310()
{
  return &unk_1EA573C00;
}

uint64_t sub_1DCB4531C()
{
  return 1;
}

uint64_t sub_1DCB45324()
{
  return MEMORY[0x1E0DE4EF0];
}

uint64_t sub_1DCB45330(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCB45338(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_1DCB45344(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIiEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCB45374(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573C00, a2);
}

void *sub_1DCB45394()
{
  return &unk_1EA573C00;
}

uint64_t sub_1DCB453A0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCB453A8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA575DE8;
  return sub_1DCB45564(a2, v2);
}

uint64_t *sub_1DCB453C0(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_1DCAEEE78(v2);
      MEMORY[0x1DF0D228C](v2, 0x1030C404A96FE9ALL);
    }
  }
  return a1;
}

uint64_t sub_1DCB45428(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
    && sub_1DCB27110(a1, a2)
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = sub_1DCB27110(a1, a2);
  if ((_DWORD)result)
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 4 * *(_QWORD *)a1) == 0;
  return result;
}

uint64_t sub_1DCB454AC(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_1DCB453C0((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t sub_1DCB45564(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  result = operator new();
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(result + 24))
      v7 = *(unint64_t **)(result + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (unsigned int *)(result + 40);
  atomic_store(0, (unsigned int *)(result + 40));
  *a1 = result;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

uint64_t sub_1DCB455EC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 49)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573BE8);
  else
    return 0;
}

double sub_1DCB45624@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_1DCB4567C;
  a1[2] = (uint64_t)&stru_1EA573BE8;
  return result;
}

uint64_t sub_1DCB4567C(uint64_t result)
{
  if (result)
  {
    sub_1DCAEEE78(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

void sub_1DCB456C4(unint64_t *a1, unint64_t a2, _BYTE **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t i;
  _BYTE *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  char v20;
  _BYTE *v21;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
  {
    sub_1DCAEEFD4(a1);
    return;
  }
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCB45850((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                *((_BYTE *)v10 + i) = *(_BYTE *)(v9 + i);
            }
          }
          v12 = *a3;
          do
            *((_BYTE *)v7 + v3++) = *v12;
          while (a2 != v3);
        }
        v13 = v7;
        goto LABEL_28;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v17 = a2;
    else
      v17 = *a1;
    v18 = sub_1DCB45850((uint64_t)a1, a2);
    v13 = v18;
    if (v17)
    {
      v19 = v18;
      do
      {
        v20 = *(_BYTE *)v7;
        v7 = (unint64_t *)((char *)v7 + 1);
        *(_BYTE *)v19 = v20;
        v19 = (unint64_t *)((char *)v19 + 1);
        --v17;
      }
      while (v17);
    }
    if (v3 < a2)
    {
      v21 = *a3;
      do
        *((_BYTE *)v18 + v3++) = *v21;
      while (a2 != v3);
    }
    goto LABEL_28;
  }
  v14 = sub_1DCB45850((uint64_t)a1, a2);
  v13 = v14;
  v15 = 0;
  v16 = *a3;
  do
    *((_BYTE *)v14 + v15++) = *v16;
  while (a2 != v15);
LABEL_28:
  if (v13 != (unint64_t *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v13;
  }
  *a1 = a2;
}

_QWORD *sub_1DCB45850(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 >= 0xFFFFFFFFFFFFFFF0)
    v3 = -1;
  else
    v3 = a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCB458C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DCB458E0(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  char v9;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique() [T = unsigned char]");
      v4 = (char *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_1DCB45850((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = v6;
        do
        {
          v9 = *v4++;
          *v8++ = v9;
          --v5;
        }
        while (v5);
      }
      sub_1DCAEEE78((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

void sub_1DCB45970(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(int **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_1DCAF100C(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 4 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_1DCAEEE78(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void sub_1DCB45AD4(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(int **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_1DCB30D80(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 4 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_1DCAEEE78(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

uint64_t sub_1DCB45C38(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1DCB45CF0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1DCB45CAC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    sub_1DCAE4CDC();
  return operator new(40 * a2);
}

uint64_t sub_1DCB45CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      v9 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 - 16);
        if (*(_QWORD *)(v7 - 16))
          v10 = *(unint64_t **)(v7 - 16);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        v7 = *((_QWORD *)&v17 + 1);
      }
      a3 -= 40;
      v7 -= 40;
      *((_QWORD *)&v17 + 1) = v7;
    }
    while (a3 != a5);
    v12 = v17;
  }
  LOBYTE(v15) = 1;
  sub_1DCB45DB0((uint64_t)v14);
  return v12;
}

uint64_t sub_1DCB45DB0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1DCB45DE4((uint64_t *)a1);
  return a1;
}

uint64_t sub_1DCB45DE4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return sub_1DCB45E58(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1DCB45E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  for (result = *(_QWORD *)(a2 + 32); result != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = result)
  {
    sub_1DCAEEE78(result);
    result = *(_QWORD *)(a2 + 32) + 40;
  }
  return result;
}

uint64_t sub_1DCB45EA8(uint64_t a1)
{
  sub_1DCB45EDC(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1DCB45EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == a2)
      break;
    *(_QWORD *)(a1 + 16) = v4 - 40;
    sub_1DCAEEE78(v4 - 40);
  }
}

void sub_1DCB45F1C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1DCB45F5C((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void sub_1DCB45F5C(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; sub_1DCAEEE78(i))
    i -= 40;
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t *sub_1DCB45FA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6 = 0;
  sub_1DCB25FE8((uint64_t)&v5, (uint64_t)a1);
  a1[1] = (uint64_t)&off_1EA575B08;
  sub_1DCB272BC(a1, a2);
  if (v6)
    (*(void (**)(uint64_t *))(v6 + 32))(&v5);
  return a1;
}

void sub_1DCB4603C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_1DCAE4C58(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCB46078(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_1DCB273D4(a1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return sub_1DCB2817C(a1);
}

void sub_1DCB46108(unint64_t *a1, unint64_t a2, _WORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  __int16 v23;
  _WORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCB462BC((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_WORD *)((char *)v10 + v11) = *(_WORD *)(v9 + v11);
                v11 += 2;
              }
              while (2 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 2 * v3;
          do
          {
            *(_WORD *)((char *)v7 + v13) = *v12;
            v13 += 2;
          }
          while (2 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_1DCB462BC((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 2 * v19;
      v22 = v20;
      do
      {
        v23 = *(_WORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 2);
        *(_WORD *)v22 = v23;
        v22 = (unint64_t *)((char *)v22 + 2);
        v21 -= 2;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 2 * v3;
      do
      {
        *(_WORD *)((char *)v20 + v25) = *v24;
        v25 += 2;
      }
      while (2 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 2 * a2;
  if (2 * a2 / a2 != 2)
  {
LABEL_18:
    sub_1DCAEEFD4(a1);
    return;
  }
  v16 = sub_1DCB462BC((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_WORD *)((char *)v16 + v17) = *v18;
    v17 += 2;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_1DCB462BC(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 > 0x7FFFFFFFFFFFFFF7)
    v3 = -1;
  else
    v3 = 2 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCB46344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB4635C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 51)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573C30);
  else
    return 0;
}

double sub_1DCB46394@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_1DCB463EC;
  a1[2] = (uint64_t)&stru_1EA573C30;
  return result;
}

uint64_t sub_1DCB463EC(uint64_t result)
{
  if (result)
  {
    sub_1DCAEEE78(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

void sub_1DCB46434(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int16 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _WORD *v9;
  __int16 v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned short>::_DetachIfNotUnique() [T = unsigned short]");
      v4 = (__int16 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_1DCB462BC((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 2 * v5;
        v9 = v6;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 2;
        }
        while (v8);
      }
      sub_1DCAEEE78((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *sub_1DCB464C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6 = 0;
  sub_1DCB25FE8((uint64_t)&v5, (uint64_t)a1);
  a1[1] = (uint64_t)&off_1EA575F58;
  sub_1DCB45564(a1, a2);
  if (v6)
    (*(void (**)(uint64_t *))(v6 + 32))(&v5);
  return a1;
}

void sub_1DCB4655C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_1DCAE4C58(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1DCB46598(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCB465C0(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCB4674C(a1);
}

uint64_t sub_1DCB465D0()
{
  return 1;
}

unint64_t sub_1DCB465D8(uint64_t *a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v1 = *a1;
  v3[1] = 1;
  v3[0] = *(_QWORD *)v1;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v3, *(const char **)(v1 + 32));
  return bswap64(0x9E3779B97F4A7C55 * v3[0]);
}

uint64_t sub_1DCB46630(uint64_t *a1, uint64_t *a2)
{
  return sub_1DCB467B4(*a1, *a2);
}

uint64_t sub_1DCB4663C(uint64_t *a1, uint64_t a2)
{
  return sub_1DCB467B4(*a1, a2);
}

uint64_t sub_1DCB46648()
{
  return 0;
}

uint64_t sub_1DCB46654(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_1DCB4669C()
{
  return &unk_1EA573C30;
}

uint64_t sub_1DCB466A8()
{
  return 1;
}

uint64_t sub_1DCB466B0()
{
  return MEMORY[0x1E0DE4F18];
}

uint64_t sub_1DCB466BC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCB466C4(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_1DCB466D0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayItEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCB46700(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573C30, a2);
}

void *sub_1DCB46720()
{
  return &unk_1EA573C30;
}

uint64_t sub_1DCB4672C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCB46734@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA575F58;
  return sub_1DCB45564(a2, v2);
}

uint64_t *sub_1DCB4674C(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_1DCAEEE78(v2);
      MEMORY[0x1DF0D228C](v2, 0x1030C404A96FE9ALL);
    }
  }
  return a1;
}

uint64_t sub_1DCB467B4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
    && sub_1DCB27110(a1, a2)
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = sub_1DCB27110(a1, a2);
  if ((_DWORD)result)
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 2 * *(_QWORD *)a1) == 0;
  return result;
}

uint64_t sub_1DCB46838(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_1DCB4674C((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t sub_1DCB468F0(_QWORD *a1)
{
  *a1 += 2;
  return std::ostream::operator<<();
}

uint64_t sub_1DCB46908(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_1DCB273D4(a1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return sub_1DCB46838(a1);
}

uint64_t *sub_1DCB46998(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6 = 0;
  sub_1DCB25FE8((uint64_t)&v5, (uint64_t)a1);
  a1[1] = (uint64_t)&off_1EA575D30;
  sub_1DCB46DC8(a1, a2);
  if (v6)
    (*(void (**)(uint64_t *))(v6 + 32))(&v5);
  return a1;
}

void sub_1DCB46A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_1DCAE4C58(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1DCB46A68(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCB46A90(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCB46C0C(a1);
}

uint64_t sub_1DCB46AA0()
{
  return 1;
}

unint64_t sub_1DCB46AA8(unint64_t **a1)
{
  unint64_t v1;
  unsigned int *v2;
  unint64_t v3;
  unsigned int v4;

  v1 = **a1;
  if (v1)
  {
    v2 = (unsigned int *)(*a1)[4];
    v3 = **a1;
    do
    {
      v4 = *v2++;
      v1 = v4 + ((v1 + v4 + (v1 + v4) * (v1 + v4)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_1DCB46AF0(_QWORD **a1, uint64_t *a2)
{
  return sub_1DCB46C74(*a1, *a2);
}

BOOL sub_1DCB46AFC(_QWORD **a1, uint64_t a2)
{
  return sub_1DCB46C74(*a1, a2);
}

uint64_t sub_1DCB46B08()
{
  return 0;
}

uint64_t sub_1DCB46B14(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_1DCB46B5C()
{
  return &unk_1EA573BD0;
}

uint64_t sub_1DCB46B68()
{
  return 1;
}

uint64_t sub_1DCB46B70()
{
  return MEMORY[0x1E0DE4EE0];
}

uint64_t sub_1DCB46B7C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCB46B84(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_1DCB46B90(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIfEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCB46BC0(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573BD0, a2);
}

void *sub_1DCB46BE0()
{
  return &unk_1EA573BD0;
}

uint64_t sub_1DCB46BEC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCB46BF4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA575D30;
  return sub_1DCB46DC8(a2, v2);
}

uint64_t *sub_1DCB46C0C(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_1DCAEEE78(v2);
      MEMORY[0x1DF0D228C](v2, 0x10A0C407A159F4ELL);
    }
  }
  return a1;
}

BOOL sub_1DCB46C74(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_1DCB27110((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_1DCB27110((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)a1[4];
  v6 = *(float **)(a2 + 32);
  v7 = 4 * *a1 - 4;
  do
  {
    v8 = *v5++;
    v9 = v8;
    v10 = *v6++;
    result = v9 == v10;
    v11 = v9 != v10 || v7 == 0;
    v7 -= 4;
  }
  while (!v11);
  return result;
}

uint64_t sub_1DCB46D10(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_1DCB46C0C((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t sub_1DCB46DC8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  result = operator new();
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(result + 24))
      v7 = *(unint64_t **)(result + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (unsigned int *)(result + 40);
  atomic_store(0, (unsigned int *)(result + 40));
  *a1 = result;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

uint64_t sub_1DCB46E50(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_1DCB273D4(a1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return sub_1DCB46D10(a1);
}

uint64_t sub_1DCB46EE0(_QWORD *a1)
{
  *a1 += 4;
  return std::ostream::operator<<();
}

uint64_t sub_1DCB46EF8(_QWORD *a1)
{
  *a1 += 4;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut();
}

void sub_1DCB46F0C(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load((unint64_t *)v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCB470C0((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                v10[i] = *(_QWORD *)(v9 + i * 8);
            }
          }
          v12 = *a3;
          v13 = v3;
          do
            v7[v13++] = *v12;
          while (a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (uint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_1DCB470C0((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 8 * v19;
      v22 = v20;
      do
      {
        v23 = *v7++;
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = v3;
      do
        v20[v25++] = *v24;
      while (a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 8 * a2;
  if (8 * a2 / a2 != 8)
  {
LABEL_18:
    sub_1DCAEEFD4(a1);
    return;
  }
  v16 = sub_1DCB470C0((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    v16[v17 / 8] = *v18;
    v17 += 8;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (uint64_t *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_1DCB470C0(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCB47148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DCB47160(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique() [T = double]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_1DCB470C0((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 8 * v5;
        v9 = v6;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      sub_1DCAEEE78((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t sub_1DCB471F4(_QWORD *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut();
}

uint64_t sub_1DCB47208(uint64_t result)
{
  double *v1;
  double *v2;
  double v3;
  double v4;
  double v5;
  double *v6;
  double *v7;
  double v8;
  double *v9;
  double *v10;
  double v11;
  double *v12;
  double *v13;
  double v14;

  v1 = *(double **)result;
  v2 = *(double **)(result + 8);
  if (*(double **)result == v2)
  {
    v5 = 1.79769313e308;
    v3 = 1.79769313e308;
  }
  else
  {
    v3 = 1.79769313e308;
    v4 = 1.79769313e308;
    do
    {
      v5 = *v1;
      if (*v1 == 1.79769313e308)
        goto LABEL_11;
      if (v3 == 1.79769313e308)
        v3 = *v1;
      if (v4 == 1.79769313e308)
        v4 = *v1;
      if (v3 > v5)
        v3 = *v1;
      if (v4 >= v5)
LABEL_11:
        v5 = v4;
      v1 += 4;
      v4 = v5;
    }
    while (v1 != v2);
  }
  v6 = *(double **)(result + 24);
  v7 = *(double **)(result + 32);
  if (v6 == v7)
  {
    v8 = v5;
  }
  else
  {
    do
    {
      v8 = *v6;
      if (*v6 == 1.79769313e308)
        goto LABEL_24;
      if (v3 == 1.79769313e308)
        v3 = *v6;
      if (v5 == 1.79769313e308)
        v5 = *v6;
      if (v3 > v8)
        v3 = *v6;
      if (v5 >= v8)
LABEL_24:
        v8 = v5;
      v6 += 4;
      v5 = v8;
    }
    while (v6 != v7);
  }
  v9 = *(double **)(result + 48);
  v10 = *(double **)(result + 56);
  if (v9 == v10)
  {
    v11 = v8;
  }
  else
  {
    do
    {
      v11 = *v9;
      if (*v9 == 1.79769313e308)
        goto LABEL_37;
      if (v3 == 1.79769313e308)
        v3 = *v9;
      if (v8 == 1.79769313e308)
        v8 = *v9;
      if (v3 > v11)
        v3 = *v9;
      if (v8 >= v11)
LABEL_37:
        v11 = v8;
      v9 += 4;
      v8 = v11;
    }
    while (v9 != v10);
  }
  v12 = *(double **)(result + 72);
  v13 = *(double **)(result + 80);
  if (v12 == v13)
  {
    v14 = v11;
  }
  else
  {
    do
    {
      v14 = *v12;
      if (*v12 == 1.79769313e308)
        goto LABEL_50;
      if (v3 == 1.79769313e308)
        v3 = *v12;
      if (v11 == 1.79769313e308)
        v11 = *v12;
      if (v3 > v14)
        v3 = *v12;
      if (v11 >= v14)
LABEL_50:
        v14 = v11;
      v12 += 4;
      v11 = v14;
    }
    while (v12 != v13);
  }
  *(double *)(result + 96) = v3;
  *(double *)(result + 104) = v14;
  return result;
}

void sub_1DCB473A0(uint64_t a1, double a2)
{
  double v4;
  int v5;
  const float *v6;
  __int128 v7;
  __int128 v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  double v12;
  __int32 v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  unint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  unint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  unint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  simd_float4x4 v36;
  float32x4_t v37;
  unsigned __int128 v38;
  int8x8_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  double v52;
  int v53;
  int v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  simd_float4x4 v59;

  *(double *)(a1 + 120) = a2;
  sub_1DCB47208(a1);
  v4 = sub_1DCB476B4(a1, a2);
  v54 = 5;
  v53 = v5;
  v52 = v4;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  sub_1DCB4777C((uint64_t)&v52, (uint64_t)&v48);
  v7 = v49;
  *(_OWORD *)(a1 + 256) = v48;
  *(_OWORD *)(a1 + 272) = v7;
  v8 = v51;
  *(_OWORD *)(a1 + 288) = v50;
  *(_OWORD *)(a1 + 304) = v8;
  v44 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
  v45 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
  v46 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
  v47 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
  *(double *)v9.i64 = sub_1DCB4793C((float32x4_t **)a1, a2);
  v9.i32[3] = v47.i32[3];
  v41 = v9;
  *(double *)v10.i64 = sub_1DCB47A04(a1, a2);
  v11 = v45;
  v11.i32[0] = v10.i32[0];
  v42 = v10;
  v43 = v11;
  v12 = sub_1DCB47ACC(a1, a2);
  v14 = v44;
  v15 = v45;
  v16 = v46;
  v17 = v47;
  v18 = 0;
  v19 = v45;
  v19.i32[1] = HIDWORD(v12);
  v20 = *(float32x4_t *)(a1 + 272);
  v21 = *(float32x4_t *)(a1 + 288);
  v22 = *(float32x4_t *)(a1 + 304);
  v55 = *(float32x4_t *)(a1 + 256);
  v56 = v20;
  v57 = v21;
  v58 = v22;
  memset(&v59, 0, sizeof(v59));
  do
  {
    v59.columns[v18 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, COERCE_FLOAT(*(_OWORD *)((char *)&v55 + v18 * 4))), v45, *(float32x2_t *)&v55.f32[v18], 1), v46, *(float32x4_t *)((char *)&v55 + v18 * 4), 2), v41, *(float32x4_t *)((char *)&v55 + v18 * 4), 3);
    v18 += 4;
  }
  while (v18 != 16);
  v23 = 0;
  v24.i64[0] = vextq_s8(v42, (int8x16_t)v46, 4uLL).u64[0];
  v24.i64[1] = v46.i64[1];
  v25 = v44;
  v25.i32[0] = LODWORD(v12);
  v26 = (float32x4_t)v59.columns[0];
  v27 = (float32x4_t)v59.columns[1];
  v28 = (float32x4_t)v59.columns[2];
  v29 = (float32x4_t)v59.columns[3];
  v55 = v44;
  v56 = v43;
  v57 = v24;
  v58 = v47;
  memset(&v59, 0, sizeof(v59));
  do
  {
    v59.columns[v23 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)((char *)&v55 + v23 * 4))), v27, *(float32x2_t *)&v55.f32[v23], 1), v28, *(float32x4_t *)((char *)&v55 + v23 * 4), 2), v29, *(float32x4_t *)((char *)&v55 + v23 * 4), 3);
    v23 += 4;
  }
  while (v23 != 16);
  v30 = 0;
  v31 = v46;
  v31.i32[2] = v13;
  v32 = (float32x4_t)v59.columns[0];
  v33 = (float32x4_t)v59.columns[1];
  v34 = (float32x4_t)v59.columns[2];
  v35 = (float32x4_t)v59.columns[3];
  v55 = v25;
  v56 = v19;
  v57 = v31;
  v58 = v47;
  memset(&v59, 0, sizeof(v59));
  do
  {
    v59.columns[v30 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, COERCE_FLOAT(*(_OWORD *)((char *)&v55 + v30 * 4))), v33, *(float32x2_t *)&v55.f32[v30], 1), v34, *(float32x4_t *)((char *)&v55 + v30 * 4), 2), v35, *(float32x4_t *)((char *)&v55 + v30 * 4), 3);
    v30 += 4;
  }
  while (v30 != 16);
  v36 = v59;
  *(simd_float4 *)(a1 + 128) = v59.columns[0];
  *(simd_float4 *)(a1 + 144) = v36.columns[1];
  *(simd_float4 *)(a1 + 160) = v36.columns[2];
  *(simd_float4 *)(a1 + 176) = v36.columns[3];
  v37 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v37, vabsq_f32(vsubq_f32((float32x4_t)v36.columns[0], v44)))))) & 1) != 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v37, vabsq_f32(vsubq_f32((float32x4_t)v36.columns[1], v45)))))) & 1) != 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32((float32x4_t)vdupq_n_s32(0x38D1B717u), vabsq_f32(vsubq_f32((float32x4_t)v36.columns[2], v46)))))) & 1) != 0|| (v38 = *(_OWORD *)&vsubq_f32((float32x4_t)v36.columns[3], v47) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL), LODWORD(v38) = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u32[0], v39 = vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_n_s32(0x38D1B717u), *(float32x2_t *)&v38)), (v39.i8[0] & 1) != 0)|| (v40 = vabdq_f32((float32x4_t)v36.columns[3], v47), v40.f32[0] > 0.0001)|| (v39.i8[4] & 1) != 0)
  {
    *(_BYTE *)(a1 + 112) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 112) = v40.f32[3] <= 0.0001;
    if (v40.f32[3] <= 0.0001)
    {
      *(float32x4_t *)(a1 + 128) = v44;
      *(float32x4_t *)(a1 + 144) = v45;
      *(float32x4_t *)(a1 + 160) = v46;
      *(float32x4_t *)(a1 + 176) = v47;
      *(float32x4_t *)(a1 + 192) = v44;
      *(float32x4_t *)(a1 + 208) = v45;
      *(float32x4_t *)(a1 + 224) = v46;
      *(float32x4_t *)(a1 + 240) = v47;
      goto LABEL_12;
    }
  }
  *(simd_float4x4 *)(a1 + 192) = __invert_f4(v36);
  v6 = (const float *)(a1 + 256);
  *(float32x4x4_t *)v14.f32 = vld4q_f32(v6);
LABEL_12:
  *(float32x4_t *)(a1 + 320) = v14;
  *(float32x4_t *)(a1 + 336) = v15;
  *(float32x4_t *)(a1 + 352) = v16;
  *(float32x4_t *)(a1 + 368) = v17;
}

double sub_1DCB476B4(uint64_t a1, double a2)
{
  double *v2;
  double v3;
  float32x4_t v4;
  double *v5;
  double v6;
  double *v7;
  double v8;
  double v9;
  float v10;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v4 = *(float32x4_t *)(*(_QWORD *)(a1 + 32) - 16);
  }
  else
  {
    v2 = *(double **)(a1 + 24);
    v3 = *v2;
    v4 = *(float32x4_t *)(v2 + 2);
    if (*v2 + 2.22044605e-16 < a2)
    {
      v5 = *(double **)(a1 + 32);
      if (v2 == v5)
      {
LABEL_11:
        v4 = *(float32x4_t *)(v5 - 2);
        return *(double *)v4.i64;
      }
      v6 = *v2 + 2.22044605e-16;
      if (v6 < a2)
      {
        v7 = v2 + 4;
        while (v7 != v5)
        {
          v3 = v6;
          v8 = *v7;
          v7 += 4;
          v6 = v8 + 2.22044605e-16;
          if (v8 + 2.22044605e-16 >= a2)
          {
            v4 = *(float32x4_t *)(v7 - 6);
            v2 = v7 - 4;
            goto LABEL_9;
          }
        }
        goto LABEL_11;
      }
LABEL_9:
      v9 = (a2 - v3) / (v6 - v3);
      v10 = 1.0 - v9;
      *(float *)&v9 = v9;
      v4.i64[0] = vmlaq_n_f32(vmulq_n_f32(v4, v10), *(float32x4_t *)(v2 + 2), *(float *)&v9).u64[0];
    }
  }
  return *(double *)v4.i64;
}

void sub_1DCB4777C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  float v11;
  float v12;
  float v13;
  __float2 v14;
  __float2 v15;
  __float2 v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;

  v3 = *(unsigned __int8 *)(a1 + 12);
  v4 = (v3 >> 3) & 3;
  v5 = v4 - 1;
  if (v4)
    v6 = v4 - 1;
  else
    v6 = 2;
  if (v4 < 2)
    v7 = 1;
  else
    v7 = -2;
  v8 = v7 + v4;
  if (!v4)
    v5 = 2;
  if ((v3 & 4) != 0)
    v9 = v8;
  else
    v9 = v6;
  if ((v3 & 4) != 0)
    v10 = v5;
  else
    v10 = v8;
  v11 = *(float *)(a1 + 8 * ((v3 & 1) == 0));
  if ((v3 & 4) != 0)
  {
    v12 = *(float *)(a1 + 4);
  }
  else
  {
    v11 = -v11;
    v12 = -*(float *)(a1 + 4);
  }
  if ((v3 & 4) != 0)
    v13 = *(float *)(a1 + 8 * (v3 & 1));
  else
    v13 = -*(float *)(a1 + 8 * (v3 & 1));
  v14 = __sincosf_stret(v11);
  v15 = __sincosf_stret(v12);
  v16 = __sincosf_stret(v13);
  *(_DWORD *)a2 = 1065353216;
  *(_QWORD *)(a2 + 12) = 0;
  v17 = v14.__cosval * v16.__cosval;
  v18 = v14.__cosval * v16.__sinval;
  v19 = v14.__sinval * v16.__cosval;
  *(_QWORD *)(a2 + 4) = 0;
  v20 = v14.__sinval * v16.__sinval;
  *(_DWORD *)(a2 + 20) = 1065353216;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 40) = 1065353216;
  *(_QWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a2 + 60) = 1065353216;
  v21 = a2 + 16 * v4;
  if ((v3 & 2) != 0)
  {
    *(float *)(v21 + 4 * v4) = v15.__cosval;
    v25 = a2 + 16 * v9;
    *(float *)(v25 + 4 * v4) = v14.__sinval * v15.__sinval;
    v23 = a2 + 16 * v10;
    *(float *)(v23 + 4 * v4) = v14.__cosval * v15.__sinval;
    *(float *)(v21 + 4 * v9) = v15.__sinval * v16.__sinval;
    *(float *)(v25 + 4 * v9) = v17 - (float)(v20 * v15.__cosval);
    *(float *)(v23 + 4 * v9) = -(float)(v19 + (float)(v18 * v15.__cosval));
    *(float *)(v21 + 4 * v10) = -(float)(v16.__cosval * v15.__sinval);
    *(float *)(v25 + 4 * v10) = v18 + (float)(v19 * v15.__cosval);
    v24 = -(float)(v20 - (float)(v17 * v15.__cosval));
  }
  else
  {
    *(float *)(v21 + 4 * v4) = v15.__cosval * v16.__cosval;
    v22 = a2 + 16 * v9;
    *(float *)(v22 + 4 * v4) = -(float)(v18 - (float)(v19 * v15.__sinval));
    v23 = a2 + 16 * v10;
    *(float *)(v23 + 4 * v4) = v20 + (float)(v17 * v15.__sinval);
    *(float *)(v21 + 4 * v9) = v15.__cosval * v16.__sinval;
    *(float *)(v22 + 4 * v9) = v17 + (float)(v20 * v15.__sinval);
    *(float *)(v23 + 4 * v9) = -(float)(v19 - (float)(v18 * v15.__sinval));
    *(float *)(v21 + 4 * v10) = -v15.__sinval;
    *(float *)(v22 + 4 * v10) = v14.__sinval * v15.__cosval;
    v24 = v14.__cosval * v15.__cosval;
  }
  *(float *)(v23 + 4 * v10) = v24;
}

double sub_1DCB4793C(float32x4_t **a1, double a2)
{
  double *v2;
  double v3;
  float32x4_t v4;
  float32x4_t *v5;
  double v6;
  double *v7;
  double v8;
  double v9;
  float v10;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v4 = a1[1][-1];
  }
  else
  {
    v2 = (double *)*a1;
    v3 = *(double *)(*a1)->i64;
    v4 = (*a1)[1];
    if (v3 + 2.22044605e-16 < a2)
    {
      v5 = a1[1];
      if (v2 == (double *)v5)
      {
LABEL_11:
        v4 = v5[-1];
        return *(double *)v4.i64;
      }
      v6 = *v2 + 2.22044605e-16;
      if (v6 < a2)
      {
        v7 = v2 + 4;
        while (v7 != (double *)v5)
        {
          v3 = v6;
          v8 = *v7;
          v7 += 4;
          v6 = v8 + 2.22044605e-16;
          if (v8 + 2.22044605e-16 >= a2)
          {
            v4 = *(float32x4_t *)(v7 - 6);
            v2 = v7 - 4;
            goto LABEL_9;
          }
        }
        goto LABEL_11;
      }
LABEL_9:
      v9 = (a2 - v3) / (v6 - v3);
      v10 = 1.0 - v9;
      *(float *)&v9 = v9;
      v4.i64[0] = vmlaq_n_f32(vmulq_n_f32(v4, v10), *(float32x4_t *)(v2 + 2), *(float *)&v9).u64[0];
    }
  }
  return *(double *)v4.i64;
}

double sub_1DCB47A04(uint64_t a1, double a2)
{
  double *v2;
  double v3;
  float32x4_t v4;
  double *v5;
  double v6;
  double *v7;
  double v8;
  double v9;
  float v10;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v4 = *(float32x4_t *)(*(_QWORD *)(a1 + 56) - 16);
  }
  else
  {
    v2 = *(double **)(a1 + 48);
    v3 = *v2;
    v4 = *(float32x4_t *)(v2 + 2);
    if (*v2 + 2.22044605e-16 < a2)
    {
      v5 = *(double **)(a1 + 56);
      if (v2 == v5)
      {
LABEL_11:
        v4 = *(float32x4_t *)(v5 - 2);
        return *(double *)v4.i64;
      }
      v6 = *v2 + 2.22044605e-16;
      if (v6 < a2)
      {
        v7 = v2 + 4;
        while (v7 != v5)
        {
          v3 = v6;
          v8 = *v7;
          v7 += 4;
          v6 = v8 + 2.22044605e-16;
          if (v8 + 2.22044605e-16 >= a2)
          {
            v4 = *(float32x4_t *)(v7 - 6);
            v2 = v7 - 4;
            goto LABEL_9;
          }
        }
        goto LABEL_11;
      }
LABEL_9:
      v9 = (a2 - v3) / (v6 - v3);
      v10 = 1.0 - v9;
      *(float *)&v9 = v9;
      v4.i64[0] = vmlaq_n_f32(vmulq_n_f32(v4, v10), *(float32x4_t *)(v2 + 2), *(float *)&v9).u64[0];
    }
  }
  return *(double *)v4.i64;
}

double sub_1DCB47ACC(uint64_t a1, double a2)
{
  double *v2;
  double v3;
  float32x4_t v4;
  double *v5;
  double v6;
  double *v7;
  double v8;
  double v9;
  float v10;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v4 = *(float32x4_t *)(*(_QWORD *)(a1 + 80) - 16);
  }
  else
  {
    v2 = *(double **)(a1 + 72);
    v3 = *v2;
    v4 = *(float32x4_t *)(v2 + 2);
    if (*v2 + 2.22044605e-16 < a2)
    {
      v5 = *(double **)(a1 + 80);
      if (v2 == v5)
      {
LABEL_11:
        v4 = *(float32x4_t *)(v5 - 2);
        return *(double *)v4.i64;
      }
      v6 = *v2 + 2.22044605e-16;
      if (v6 < a2)
      {
        v7 = v2 + 4;
        while (v7 != v5)
        {
          v3 = v6;
          v8 = *v7;
          v7 += 4;
          v6 = v8 + 2.22044605e-16;
          if (v8 + 2.22044605e-16 >= a2)
          {
            v4 = *(float32x4_t *)(v7 - 6);
            v2 = v7 - 4;
            goto LABEL_9;
          }
        }
        goto LABEL_11;
      }
LABEL_9:
      v9 = (a2 - v3) / (v6 - v3);
      v10 = 1.0 - v9;
      *(float *)&v9 = v9;
      v4.i64[0] = vmlaq_n_f32(vmulq_n_f32(v4, v10), *(float32x4_t *)(v2 + 2), *(float *)&v9).u64[0];
    }
  }
  return *(double *)v4.i64;
}

void sub_1DCB47B94(uint64_t a1)
{
  sub_1DCB473A0(a1, 1.79769313e308);
}

void sub_1DCB47BA0(uint64_t a1, double a2)
{
  double v4;
  int v5;
  const float *v6;
  __int128 v7;
  __int128 v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  double v12;
  __int32 v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  unint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  unint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  unint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  simd_float4x4 v36;
  float32x4_t v37;
  unsigned __int128 v38;
  int8x8_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  double v52;
  int v53;
  int v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  simd_float4x4 v59;

  v4 = sub_1DCB476B4(a1, a2);
  v54 = 5;
  v53 = v5;
  v52 = v4;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  sub_1DCB4777C((uint64_t)&v52, (uint64_t)&v48);
  v7 = v49;
  *(_OWORD *)(a1 + 256) = v48;
  *(_OWORD *)(a1 + 272) = v7;
  v8 = v51;
  *(_OWORD *)(a1 + 288) = v50;
  *(_OWORD *)(a1 + 304) = v8;
  v44 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
  v45 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
  v46 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
  v47 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
  *(double *)v9.i64 = sub_1DCB4793C((float32x4_t **)a1, a2);
  v9.i32[3] = v47.i32[3];
  v41 = v9;
  *(double *)v10.i64 = sub_1DCB47A04(a1, a2);
  v11 = v45;
  v11.i32[0] = v10.i32[0];
  v42 = v10;
  v43 = v11;
  v12 = sub_1DCB47ACC(a1, a2);
  v14 = v44;
  v15 = v45;
  v16 = v46;
  v17 = v47;
  v18 = 0;
  v19 = v45;
  v19.i32[1] = HIDWORD(v12);
  v20 = *(float32x4_t *)(a1 + 272);
  v21 = *(float32x4_t *)(a1 + 288);
  v22 = *(float32x4_t *)(a1 + 304);
  v55 = *(float32x4_t *)(a1 + 256);
  v56 = v20;
  v57 = v21;
  v58 = v22;
  memset(&v59, 0, sizeof(v59));
  do
  {
    v59.columns[v18 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, COERCE_FLOAT(*(_OWORD *)((char *)&v55 + v18 * 4))), v45, *(float32x2_t *)&v55.f32[v18], 1), v46, *(float32x4_t *)((char *)&v55 + v18 * 4), 2), v41, *(float32x4_t *)((char *)&v55 + v18 * 4), 3);
    v18 += 4;
  }
  while (v18 != 16);
  v23 = 0;
  v24.i64[0] = vextq_s8(v42, (int8x16_t)v46, 4uLL).u64[0];
  v24.i64[1] = v46.i64[1];
  v25 = v44;
  v25.i32[0] = LODWORD(v12);
  v26 = (float32x4_t)v59.columns[0];
  v27 = (float32x4_t)v59.columns[1];
  v28 = (float32x4_t)v59.columns[2];
  v29 = (float32x4_t)v59.columns[3];
  v55 = v44;
  v56 = v43;
  v57 = v24;
  v58 = v47;
  memset(&v59, 0, sizeof(v59));
  do
  {
    v59.columns[v23 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)((char *)&v55 + v23 * 4))), v27, *(float32x2_t *)&v55.f32[v23], 1), v28, *(float32x4_t *)((char *)&v55 + v23 * 4), 2), v29, *(float32x4_t *)((char *)&v55 + v23 * 4), 3);
    v23 += 4;
  }
  while (v23 != 16);
  v30 = 0;
  v31 = v46;
  v31.i32[2] = v13;
  v32 = (float32x4_t)v59.columns[0];
  v33 = (float32x4_t)v59.columns[1];
  v34 = (float32x4_t)v59.columns[2];
  v35 = (float32x4_t)v59.columns[3];
  v55 = v25;
  v56 = v19;
  v57 = v31;
  v58 = v47;
  memset(&v59, 0, sizeof(v59));
  do
  {
    v59.columns[v30 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, COERCE_FLOAT(*(_OWORD *)((char *)&v55 + v30 * 4))), v33, *(float32x2_t *)&v55.f32[v30], 1), v34, *(float32x4_t *)((char *)&v55 + v30 * 4), 2), v35, *(float32x4_t *)((char *)&v55 + v30 * 4), 3);
    v30 += 4;
  }
  while (v30 != 16);
  v36 = v59;
  *(simd_float4 *)(a1 + 128) = v59.columns[0];
  *(simd_float4 *)(a1 + 144) = v36.columns[1];
  *(simd_float4 *)(a1 + 160) = v36.columns[2];
  *(simd_float4 *)(a1 + 176) = v36.columns[3];
  v37 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v37, vabsq_f32(vsubq_f32((float32x4_t)v36.columns[0], v44)))))) & 1) != 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v37, vabsq_f32(vsubq_f32((float32x4_t)v36.columns[1], v45)))))) & 1) != 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32((float32x4_t)vdupq_n_s32(0x38D1B717u), vabsq_f32(vsubq_f32((float32x4_t)v36.columns[2], v46)))))) & 1) != 0|| (v38 = *(_OWORD *)&vsubq_f32((float32x4_t)v36.columns[3], v47) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL), LODWORD(v38) = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u32[0], v39 = vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_n_s32(0x38D1B717u), *(float32x2_t *)&v38)), (v39.i8[0] & 1) != 0)|| (v40 = vabdq_f32((float32x4_t)v36.columns[3], v47), v40.f32[0] > 0.0001)|| (v39.i8[4] & 1) != 0)
  {
    *(_BYTE *)(a1 + 112) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 112) = v40.f32[3] <= 0.0001;
    if (v40.f32[3] <= 0.0001)
    {
      *(float32x4_t *)(a1 + 128) = v44;
      *(float32x4_t *)(a1 + 144) = v45;
      *(float32x4_t *)(a1 + 160) = v46;
      *(float32x4_t *)(a1 + 176) = v47;
      *(float32x4_t *)(a1 + 192) = v44;
      *(float32x4_t *)(a1 + 208) = v45;
      *(float32x4_t *)(a1 + 224) = v46;
      *(float32x4_t *)(a1 + 240) = v47;
      goto LABEL_12;
    }
  }
  *(simd_float4x4 *)(a1 + 192) = __invert_f4(v36);
  v6 = (const float *)(a1 + 256);
  *(float32x4x4_t *)v14.f32 = vld4q_f32(v6);
LABEL_12:
  *(float32x4_t *)(a1 + 320) = v14;
  *(float32x4_t *)(a1 + 336) = v15;
  *(float32x4_t *)(a1 + 352) = v16;
  *(float32x4_t *)(a1 + 368) = v17;
}

__n128 sub_1DCB47EA4(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  float32x2_t v13;
  int v14;
  _BYTE v15[32];
  _BYTE v16[32];

  v3 = a2[1];
  *(_OWORD *)v15 = *a2;
  *(_OWORD *)&v15[16] = v3;
  v4 = a2[3];
  *(_OWORD *)v16 = a2[2];
  *(_OWORD *)&v16[16] = v4;
  if (!sub_1DCB47FD4((uint64_t)a2))
  {
    *(_DWORD *)v15 = 1065353216;
    *(_QWORD *)&v15[12] = 0;
    *(_QWORD *)&v15[4] = 0;
    *(_DWORD *)&v15[20] = 1065353216;
    *(_QWORD *)&v15[24] = 0;
    *(_QWORD *)v16 = 0;
    *(_DWORD *)&v16[8] = 1065353216;
    *(_QWORD *)&v16[20] = 0;
    *(_QWORD *)&v16[12] = 0;
    *(_DWORD *)&v16[28] = 1065353216;
  }
  v14 = 0;
  v13 = 0;
  v12 = 0;
  v11 = 0;
  v10 = 0;
  v9 = 0;
  v8 = 0;
  v7 = 0;
  sub_1DCB48FE8((uint64_t)v15, &v13, (float *)&v11, (float *)&v9, &v7, 1, 0x101u);
  sub_1DCAD3ADC((char **)a1);
  *(_QWORD *)&v5 = v7;
  DWORD2(v5) = v8;
  *(_OWORD *)(*(_QWORD *)a1 + 16) = v5;
  *(_QWORD *)&v5 = v9;
  DWORD2(v5) = v10;
  *(_OWORD *)(*(_QWORD *)(a1 + 24) + 16) = v5;
  *(_QWORD *)&v5 = v11;
  DWORD2(v5) = v12;
  *(_OWORD *)(*(_QWORD *)(a1 + 48) + 16) = v5;
  *(float32x2_t *)&v5 = v13;
  DWORD2(v5) = v14;
  *(_OWORD *)(*(_QWORD *)(a1 + 72) + 16) = v5;
  sub_1DCB473A0(a1, 1.79769313e308);
  return result;
}

BOOL sub_1DCB47FD4(uint64_t a1)
{
  simd_float4x4 v1;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  uint32x4_t v11;
  float32x4_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  simd_float4 v23;
  simd_float4 v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  simd_float3x3 v28;
  simd_float4x4 v29;

  v1.columns[0] = *(simd_float4 *)a1;
  if (fabsf(COERCE_FLOAT(HIDWORD(*(_OWORD *)a1))) > 0.00000001)
    return 0;
  if (fabsf(*(float *)(a1 + 28)) > 0.00000001)
    return 0;
  if (fabsf(*(float *)(a1 + 44)) > 0.00000001)
    return 0;
  if (fabsf(*(float *)(a1 + 60) + -1.0) > 0.00000001)
    return 0;
  v1.columns[1] = *(simd_float4 *)(a1 + 16);
  v1.columns[2] = *(simd_float4 *)(a1 + 32);
  v1.columns[3] = *(simd_float4 *)(a1 + 48);
  v3 = (float32x4_t)vextq_s8((int8x16_t)v1.columns[2], (int8x16_t)v1.columns[2], 8uLL);
  v4 = (float32x4_t)vextq_s8((int8x16_t)v1.columns[3], (int8x16_t)v1.columns[3], 0xCuLL);
  v5 = (float32x4_t)vextq_s8((int8x16_t)v1.columns[2], (int8x16_t)v1.columns[2], 0xCuLL);
  v6 = (float32x4_t)vextq_s8((int8x16_t)v1.columns[3], (int8x16_t)v1.columns[3], 8uLL);
  v7 = (float32x4_t)vextq_s8((int8x16_t)v1.columns[3], (int8x16_t)v1.columns[3], 4uLL);
  v8 = (float32x4_t)vextq_s8((int8x16_t)v1.columns[2], (int8x16_t)v1.columns[2], 4uLL);
  v9 = (int8x16_t)vmulq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(vmlaq_f32(vnegq_f32(vmulq_f32(v4, v8)), v5, v7), (float32x4_t)vextq_s8((int8x16_t)v1.columns[1], (int8x16_t)v1.columns[1], 8uLL)), (float32x4_t)vextq_s8((int8x16_t)v1.columns[1], (int8x16_t)v1.columns[1], 4uLL), vmlaq_f32(vnegq_f32(vmulq_f32(v6, v5)), v3, v4)), (float32x4_t)vextq_s8((int8x16_t)v1.columns[1], (int8x16_t)v1.columns[1], 0xCuLL), vmlaq_f32(vnegq_f32(vmulq_f32(v7, v3)), v8, v6)), (float32x4_t)v1.columns[0]);
  v3.i64[0] = vextq_s8(v9, v9, 8uLL).u64[0];
  if (fabsf(vaddv_f32(vsub_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v3.f32), (float32x2_t)vzip2_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v3.f32)))) <= 0.00000001)return 0;
  v24 = *(simd_float4 *)a1;
  v29 = __invert_f4(v1);
  v25 = (float32x4_t)v29.columns[0];
  v26 = (float32x4_t)v29.columns[1];
  v27 = (float32x4_t)v29.columns[2];
  v23 = v29.columns[3];
  v29.columns[1] = *(simd_float4 *)(a1 + 16);
  v29.columns[2] = *(simd_float4 *)(a1 + 32);
  v29.columns[0] = v24;
  v29.columns[0].i32[3] = 0;
  v29.columns[1].i32[3] = 0;
  v29.columns[2].i32[3] = 0;
  v28 = __invert_f3(*(simd_float3x3 *)v29.columns[0].f32);
  v10 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
  v11 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v10, vabdq_f32(v25, (float32x4_t)v28.columns[0])), (int8x16_t)vcgeq_f32(v10, vabdq_f32(v26, (float32x4_t)v28.columns[1]))), (int8x16_t)vcgeq_f32(v10, vabdq_f32(v27, (float32x4_t)v28.columns[2])));
  v11.i32[3] = v11.i32[2];
  if ((vminvq_u32(v11) & 0x80000000) == 0)
    return 0;
  v13 = vnegq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v28.columns[0], COERCE_FLOAT(*(_OWORD *)(a1 + 48))), (float32x4_t)v28.columns[1], *(float32x2_t *)(a1 + 48), 1), (float32x4_t)v28.columns[2], *(float32x4_t *)(a1 + 48), 2));
  v14 = vabds_f32(v23.f32[0], v13.f32[0]);
  if (v14 > 0.001)
  {
    v15 = fabsf(v23.f32[0]);
    v16 = fabsf(v13.f32[0]);
    if (v16 > v15)
      v15 = v16;
    if (v14 > (float)(v15 * 0.000001))
      return 0;
  }
  v17 = vabds_f32(v23.f32[1], v13.f32[1]);
  if (v17 > 0.001)
  {
    v18 = fabsf(v23.f32[1]);
    v19 = fabsf(v13.f32[1]);
    if (v19 > v18)
      v18 = v19;
    if (v17 > (float)(v18 * 0.000001))
      return 0;
  }
  v20 = vabds_f32(v23.f32[2], v13.f32[2]);
  if (v20 <= 0.001)
    return 1;
  v21 = fabsf(v23.f32[2]);
  v22 = fabsf(v13.f32[2]);
  if (v22 > v21)
    v21 = v22;
  return v20 <= (float)(v21 * 0.000001);
}

void sub_1DCB4820C(uint64_t a1, _OWORD *a2, double a3)
{
  __int128 v5;
  __int128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  unint64_t v11;
  unsigned __int32 v12;
  unint64_t v13;
  unsigned __int32 v14;
  unint64_t v15;
  unsigned __int32 v16;
  unint64_t v17;
  unsigned __int32 v18;
  _BYTE v19[32];
  _BYTE v20[32];

  v5 = a2[1];
  *(_OWORD *)v19 = *a2;
  *(_OWORD *)&v19[16] = v5;
  v6 = a2[3];
  *(_OWORD *)v20 = a2[2];
  *(_OWORD *)&v20[16] = v6;
  if (!sub_1DCB47FD4((uint64_t)a2))
  {
    *(_DWORD *)v19 = 1065353216;
    *(_QWORD *)&v19[12] = 0;
    *(_QWORD *)&v19[4] = 0;
    *(_DWORD *)&v19[20] = 1065353216;
    *(_QWORD *)&v19[24] = 0;
    *(_QWORD *)v20 = 0;
    *(_DWORD *)&v20[8] = 1065353216;
    *(_QWORD *)&v20[20] = 0;
    *(_QWORD *)&v20[12] = 0;
    *(_DWORD *)&v20[28] = 1065353216;
  }
  v18 = 0;
  v17 = 0;
  v16 = 0;
  v15 = 0;
  v14 = 0;
  v13 = 0;
  v12 = 0;
  v11 = 0;
  sub_1DCB48FE8((uint64_t)v19, (float32x2_t *)&v17, (float *)&v15, (float *)&v13, &v11, 1, 0x101u);
  v7.n128_u64[0] = v11;
  v7.n128_u32[2] = v12;
  sub_1DCB4834C(a1, v7, a3);
  v8.n128_u64[0] = v13;
  v8.n128_u32[2] = v14;
  sub_1DCB484D8(a1, v8, a3);
  v9.n128_u64[0] = v15;
  v9.n128_u32[2] = v16;
  sub_1DCB48670(a1, v9, a3);
  v10.n128_u64[0] = v17;
  v10.n128_u32[2] = v18;
  sub_1DCB48808(a1, v10, a3);
  sub_1DCB473A0(a1, a3);
}

void sub_1DCB4834C(uint64_t a1, __n128 a2, double a3)
{
  char *v5;
  __n128 *v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  unint64_t v11;
  __n128 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  __n128 *v18;
  char *v19;
  __n128 *v20;
  char *v21;
  __n128 v22;
  __n128 v23;
  _OWORD v24[2];

  v5 = *(char **)a1;
  if (a3 != 1.79769313e308 && **(double **)a1 == 1.79769313e308)
  {
    *(_QWORD *)(a1 + 8) = v5;
    v7 = (__n128 *)v5;
    goto LABEL_12;
  }
  v7 = *(__n128 **)(a1 + 8);
  if (v5 == (char *)v7)
  {
LABEL_12:
    v10 = a1 + 16;
    v11 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v7 >= v11)
    {
      v13 = ((char *)v7 - v5) >> 5;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 59)
        sub_1DCAE4C44();
      v15 = v11 - (_QWORD)v5;
      if (v15 >> 4 > v14)
        v14 = v15 >> 4;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
        v16 = 0x7FFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        v23 = a2;
        v17 = (char *)sub_1DCAF116C(v10, v16);
        a2 = v23;
      }
      else
      {
        v17 = 0;
      }
      v18 = (__n128 *)&v17[32 * v13];
      v19 = &v17[32 * v16];
      v18->n128_f64[0] = a3;
      v18[1] = a2;
      v12 = v18 + 2;
      v21 = *(char **)a1;
      v20 = *(__n128 **)(a1 + 8);
      if (v20 != *(__n128 **)a1)
      {
        do
        {
          v22 = v20[-1];
          v18[-2] = v20[-2];
          v18[-1] = v22;
          v18 -= 2;
          v20 -= 2;
        }
        while (v20 != (__n128 *)v21);
        v20 = *(__n128 **)a1;
      }
      *(_QWORD *)a1 = v18;
      *(_QWORD *)(a1 + 8) = v12;
      *(_QWORD *)(a1 + 16) = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      v7->n128_f64[0] = a3;
      v7[1] = a2;
      v12 = v7 + 2;
    }
    *(_QWORD *)(a1 + 8) = v12;
    goto LABEL_29;
  }
  v8 = *(_QWORD *)a1;
  v9 = *(__n128 **)a1;
  while (1)
  {
    if (vabdd_f64(v9->n128_f64[0], a3) < 2.22044605e-16)
    {
      v9[1] = a2;
      goto LABEL_29;
    }
    if (v9->n128_f64[0] > a3)
      break;
    v9 += 2;
    v8 += 32;
    if (v9 == v7)
      goto LABEL_12;
  }
  *(double *)v24 = a3;
  v24[1] = a2;
  sub_1DCB48C8C((char **)a1, v8, v24);
LABEL_29:
  sub_1DCB473A0(a1, a3);
}

void sub_1DCB484D8(uint64_t a1, __n128 a2, double a3)
{
  double *v5;
  void **v6;
  __n128 *v8;
  uint64_t v9;
  __n128 *v10;
  uint64_t v11;
  unint64_t v12;
  __n128 *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __n128 *v19;
  char *v20;
  __n128 *v21;
  __n128 *v22;
  __n128 v23;
  __n128 v24;
  _OWORD v25[2];

  v6 = (void **)(a1 + 24);
  v5 = *(double **)(a1 + 24);
  if (a3 != 1.79769313e308 && *v5 == 1.79769313e308)
  {
    *(_QWORD *)(a1 + 32) = v5;
    v8 = (__n128 *)v5;
    goto LABEL_12;
  }
  v8 = *(__n128 **)(a1 + 32);
  if (v5 == (double *)v8)
  {
LABEL_12:
    v11 = a1 + 40;
    v12 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v8 >= v12)
    {
      v14 = ((char *)v8 - (char *)v5) >> 5;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 59)
        sub_1DCAE4C44();
      v16 = v12 - (_QWORD)v5;
      if (v16 >> 4 > v15)
        v15 = v16 >> 4;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
        v17 = 0x7FFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        v24 = a2;
        v18 = (char *)sub_1DCAF116C(v11, v17);
        a2 = v24;
      }
      else
      {
        v18 = 0;
      }
      v19 = (__n128 *)&v18[32 * v14];
      v20 = &v18[32 * v17];
      v19->n128_f64[0] = a3;
      v19[1] = a2;
      v13 = v19 + 2;
      v22 = *(__n128 **)(a1 + 24);
      v21 = *(__n128 **)(a1 + 32);
      if (v21 != v22)
      {
        do
        {
          v23 = v21[-1];
          v19[-2] = v21[-2];
          v19[-1] = v23;
          v19 -= 2;
          v21 -= 2;
        }
        while (v21 != v22);
        v21 = (__n128 *)*v6;
      }
      *(_QWORD *)(a1 + 24) = v19;
      *(_QWORD *)(a1 + 32) = v13;
      *(_QWORD *)(a1 + 40) = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      v8->n128_f64[0] = a3;
      v8[1] = a2;
      v13 = v8 + 2;
    }
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_29;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (__n128 *)v9;
  while (1)
  {
    if (vabdd_f64(v10->n128_f64[0], a3) < 2.22044605e-16)
    {
      v10[1] = a2;
      goto LABEL_29;
    }
    if (v10->n128_f64[0] > a3)
      break;
    v10 += 2;
    v9 += 32;
    if (v10 == v8)
      goto LABEL_12;
  }
  *(double *)v25 = a3;
  v25[1] = a2;
  sub_1DCB48C8C((char **)(a1 + 24), v9, v25);
LABEL_29:
  sub_1DCB473A0(a1, a3);
}

void sub_1DCB48670(uint64_t a1, __n128 a2, double a3)
{
  double *v5;
  void **v6;
  __n128 *v8;
  uint64_t v9;
  __n128 *v10;
  uint64_t v11;
  unint64_t v12;
  __n128 *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __n128 *v19;
  char *v20;
  __n128 *v21;
  __n128 *v22;
  __n128 v23;
  __n128 v24;
  _OWORD v25[2];

  v6 = (void **)(a1 + 48);
  v5 = *(double **)(a1 + 48);
  if (a3 != 1.79769313e308 && *v5 == 1.79769313e308)
  {
    *(_QWORD *)(a1 + 56) = v5;
    v8 = (__n128 *)v5;
    goto LABEL_12;
  }
  v8 = *(__n128 **)(a1 + 56);
  if (v5 == (double *)v8)
  {
LABEL_12:
    v11 = a1 + 64;
    v12 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v8 >= v12)
    {
      v14 = ((char *)v8 - (char *)v5) >> 5;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 59)
        sub_1DCAE4C44();
      v16 = v12 - (_QWORD)v5;
      if (v16 >> 4 > v15)
        v15 = v16 >> 4;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
        v17 = 0x7FFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        v24 = a2;
        v18 = (char *)sub_1DCAF116C(v11, v17);
        a2 = v24;
      }
      else
      {
        v18 = 0;
      }
      v19 = (__n128 *)&v18[32 * v14];
      v20 = &v18[32 * v17];
      v19->n128_f64[0] = a3;
      v19[1] = a2;
      v13 = v19 + 2;
      v22 = *(__n128 **)(a1 + 48);
      v21 = *(__n128 **)(a1 + 56);
      if (v21 != v22)
      {
        do
        {
          v23 = v21[-1];
          v19[-2] = v21[-2];
          v19[-1] = v23;
          v19 -= 2;
          v21 -= 2;
        }
        while (v21 != v22);
        v21 = (__n128 *)*v6;
      }
      *(_QWORD *)(a1 + 48) = v19;
      *(_QWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 64) = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      v8->n128_f64[0] = a3;
      v8[1] = a2;
      v13 = v8 + 2;
    }
    *(_QWORD *)(a1 + 56) = v13;
    goto LABEL_29;
  }
  v9 = *(_QWORD *)(a1 + 48);
  v10 = (__n128 *)v9;
  while (1)
  {
    if (vabdd_f64(v10->n128_f64[0], a3) < 2.22044605e-16)
    {
      v10[1] = a2;
      goto LABEL_29;
    }
    if (v10->n128_f64[0] > a3)
      break;
    v10 += 2;
    v9 += 32;
    if (v10 == v8)
      goto LABEL_12;
  }
  *(double *)v25 = a3;
  v25[1] = a2;
  sub_1DCB48C8C((char **)(a1 + 48), v9, v25);
LABEL_29:
  sub_1DCB473A0(a1, a3);
}

void sub_1DCB48808(uint64_t a1, __n128 a2, double a3)
{
  double *v5;
  void **v6;
  __n128 *v8;
  uint64_t v9;
  __n128 *v10;
  uint64_t v11;
  unint64_t v12;
  __n128 *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __n128 *v19;
  char *v20;
  __n128 *v21;
  __n128 *v22;
  __n128 v23;
  __n128 v24;
  _OWORD v25[2];

  v6 = (void **)(a1 + 72);
  v5 = *(double **)(a1 + 72);
  if (a3 != 1.79769313e308 && *v5 == 1.79769313e308)
  {
    *(_QWORD *)(a1 + 80) = v5;
    v8 = (__n128 *)v5;
    goto LABEL_12;
  }
  v8 = *(__n128 **)(a1 + 80);
  if (v5 == (double *)v8)
  {
LABEL_12:
    v11 = a1 + 88;
    v12 = *(_QWORD *)(a1 + 88);
    if ((unint64_t)v8 >= v12)
    {
      v14 = ((char *)v8 - (char *)v5) >> 5;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 59)
        sub_1DCAE4C44();
      v16 = v12 - (_QWORD)v5;
      if (v16 >> 4 > v15)
        v15 = v16 >> 4;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
        v17 = 0x7FFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        v24 = a2;
        v18 = (char *)sub_1DCAF116C(v11, v17);
        a2 = v24;
      }
      else
      {
        v18 = 0;
      }
      v19 = (__n128 *)&v18[32 * v14];
      v20 = &v18[32 * v17];
      v19->n128_f64[0] = a3;
      v19[1] = a2;
      v13 = v19 + 2;
      v22 = *(__n128 **)(a1 + 72);
      v21 = *(__n128 **)(a1 + 80);
      if (v21 != v22)
      {
        do
        {
          v23 = v21[-1];
          v19[-2] = v21[-2];
          v19[-1] = v23;
          v19 -= 2;
          v21 -= 2;
        }
        while (v21 != v22);
        v21 = (__n128 *)*v6;
      }
      *(_QWORD *)(a1 + 72) = v19;
      *(_QWORD *)(a1 + 80) = v13;
      *(_QWORD *)(a1 + 88) = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      v8->n128_f64[0] = a3;
      v8[1] = a2;
      v13 = v8 + 2;
    }
    *(_QWORD *)(a1 + 80) = v13;
    goto LABEL_29;
  }
  v9 = *(_QWORD *)(a1 + 72);
  v10 = (__n128 *)v9;
  while (1)
  {
    if (vabdd_f64(v10->n128_f64[0], a3) < 2.22044605e-16)
    {
      v10[1] = a2;
      goto LABEL_29;
    }
    if (v10->n128_f64[0] > a3)
      break;
    v10 += 2;
    v9 += 32;
    if (v10 == v8)
      goto LABEL_12;
  }
  *(double *)v25 = a3;
  v25[1] = a2;
  sub_1DCB48C8C((char **)(a1 + 72), v9, v25);
LABEL_29:
  sub_1DCB473A0(a1, a3);
}

void sub_1DCB489A0(__int128 **a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  __int128 v6;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  __int128 v32;
  __int128 v33;
  uint64_t *v34;
  _QWORD *v35;
  unint64_t v36;

  v35 = 0;
  v36 = 0;
  v34 = (uint64_t *)&v35;
  v4 = *a1;
  v5 = a1[1];
  while (v4 != v5)
  {
    v6 = v4[1];
    v32 = *v4;
    v33 = v6;
    sub_1DCB4A128(&v34, (double *)&v32, (uint64_t *)&v32);
    v4 += 2;
  }
  v7 = a1[3];
  v8 = a1[4];
  while (v7 != v8)
  {
    v9 = v7[1];
    v32 = *v7;
    v33 = v9;
    sub_1DCB4A128(&v34, (double *)&v32, (uint64_t *)&v32);
    v7 += 2;
  }
  v10 = a1[6];
  v11 = a1[7];
  while (v10 != v11)
  {
    v12 = v10[1];
    v32 = *v10;
    v33 = v12;
    sub_1DCB4A128(&v34, (double *)&v32, (uint64_t *)&v32);
    v10 += 2;
  }
  v14 = a1[9];
  v13 = a1[10];
  while (v14 != v13)
  {
    v15 = v14[1];
    v32 = *v14;
    v33 = v15;
    sub_1DCB4A128(&v34, (double *)&v32, (uint64_t *)&v32);
    v14 += 2;
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  sub_1DCB48BF8((void **)a2, v36);
  v16 = v34;
  if (v34 != (uint64_t *)&v35)
  {
    v17 = (_QWORD *)(a2 + 16);
    v18 = *(uint64_t **)(a2 + 8);
    do
    {
      v19 = v16[4];
      if ((unint64_t)v18 >= *v17)
      {
        v20 = *(uint64_t **)a2;
        v21 = ((uint64_t)v18 - *(_QWORD *)a2) >> 3;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          sub_1DCAE4C44();
        v23 = *v17 - (_QWORD)v20;
        if (v23 >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)sub_1DCAE79A4(a2 + 16, v24);
          v20 = *(uint64_t **)a2;
          v18 = *(uint64_t **)(a2 + 8);
        }
        else
        {
          v25 = 0;
        }
        v26 = (uint64_t *)&v25[8 * v21];
        *v26 = v19;
        v27 = v26 + 1;
        while (v18 != v20)
        {
          v28 = *--v18;
          *--v26 = v28;
        }
        *(_QWORD *)a2 = v26;
        *(_QWORD *)(a2 + 8) = v27;
        *(_QWORD *)(a2 + 16) = &v25[8 * v24];
        if (v20)
          operator delete(v20);
        v18 = v27;
      }
      else
      {
        *v18++ = v19;
      }
      *(_QWORD *)(a2 + 8) = v18;
      v29 = (uint64_t *)v16[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (uint64_t *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (uint64_t *)v16[2];
          v31 = *v30 == (_QWORD)v16;
          v16 = v30;
        }
        while (!v31);
      }
      v16 = v30;
    }
    while (v30 != (uint64_t *)&v35);
  }
  sub_1DCAE4E44((uint64_t)&v34, v35);
}

void sub_1DCB48BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_1DCAE4E44((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_1DCB48BF8(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_1DCAE4C44();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1DCAE79A4(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

char *sub_1DCB48C8C(char **a1, uint64_t a2, _OWORD *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v5 = *a1;
  v6 = a1[1];
  v7 = a2 - (_QWORD)*a1;
  v8 = v7 >> 5;
  v9 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFE0];
  v12 = (unint64_t)a1[2];
  v10 = (uint64_t)(a1 + 2);
  v11 = v12;
  if ((unint64_t)v6 >= v12)
  {
    v18 = ((v6 - v5) >> 5) + 1;
    if (v18 >> 59)
      sub_1DCAE4C44();
    v19 = v11 - (_QWORD)v5;
    if (v19 >> 4 > v18)
      v18 = v19 >> 4;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
      v20 = 0x7FFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    v43 = v10;
    if (v20)
      v21 = (char *)sub_1DCAF116C(v10, v20);
    else
      v21 = 0;
    v39 = v21;
    v40 = &v21[32 * v8];
    v41 = v40;
    v42 = &v21[32 * v20];
    sub_1DCB48EBC(&v39, (uint64_t)a3);
    v26 = v40;
    v27 = *a1;
    v28 = v40;
    if (*a1 != v9)
    {
      v29 = v9;
      v30 = v40;
      do
      {
        v28 = v30 - 32;
        v31 = *((_OWORD *)v29 - 1);
        *((_OWORD *)v30 - 2) = *((_OWORD *)v29 - 2);
        *((_OWORD *)v30 - 1) = v31;
        v29 -= 32;
        v30 -= 32;
      }
      while (v29 != v27);
    }
    v40 = v28;
    v32 = a1[1];
    v33 = v41;
    if (v32 != v9)
    {
      do
      {
        v34 = *(_OWORD *)v9;
        v35 = *((_OWORD *)v9 + 1);
        v9 += 32;
        *(_OWORD *)v33 = v34;
        *((_OWORD *)v33 + 1) = v35;
        v33 += 32;
      }
      while (v9 != v32);
      v28 = v40;
      v9 = a1[1];
    }
    v36 = *a1;
    *a1 = v28;
    a1[1] = v33;
    v37 = a1[2];
    a1[2] = v42;
    v41 = v9;
    v42 = v37;
    v39 = v36;
    v40 = v36;
    if (v9 != v36)
      v41 = &v9[(v36 - v9 + 31) & 0xFFFFFFFFFFFFFFE0];
    if (v36)
      operator delete(v36);
    return v26;
  }
  else if (v9 == v6)
  {
    v25 = a3[1];
    *(_OWORD *)v9 = *a3;
    *((_OWORD *)v9 + 1) = v25;
    a1[1] = v9 + 32;
  }
  else
  {
    v13 = v9 + 32;
    v14 = v6 - 32;
    v15 = v6;
    while (v14 < v6)
    {
      v16 = *(_OWORD *)v14;
      v17 = *((_OWORD *)v14 + 1);
      v14 += 32;
      *(_OWORD *)v15 = v16;
      *((_OWORD *)v15 + 1) = v17;
      v15 += 32;
    }
    a1[1] = v15;
    if (v6 != v13)
    {
      v22 = (v6 - v13) >> 5;
      v23 = v6 - 16;
      v24 = 32 * v22;
      do
      {
        *((_QWORD *)v23 - 2) = *(_QWORD *)&v9[v24 - 32];
        *(_OWORD *)v23 = *(_OWORD *)&v9[v24 - 16];
        v23 -= 32;
        v24 -= 32;
      }
      while (v24);
    }
    *(_QWORD *)v9 = *(_QWORD *)a3;
    *(_OWORD *)&v5[32 * v8 + 16] = a3[1];
  }
  return v9;
}

void sub_1DCB48E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_1DCB48EBC(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  __n128 result;
  __int128 v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v6 = (char *)*a1;
    v5 = (char *)a1[1];
    v7 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == v6)
        v13 = 1;
      else
        v13 = (v4 - v6) >> 4;
      v14 = (char *)sub_1DCAF116C(a1[4], v13);
      v16 = &v14[32 * (v13 >> 2)];
      v17 = (__int128 *)a1[1];
      v4 = v16;
      v18 = a1[2] - (_QWORD)v17;
      if (v18)
      {
        v4 = &v16[v18 & 0xFFFFFFFFFFFFFFE0];
        v19 = 32 * (v18 >> 5);
        v20 = &v14[32 * (v13 >> 2)];
        do
        {
          v21 = *v17;
          v22 = v17[1];
          v17 += 2;
          *(_OWORD *)v20 = v21;
          *((_OWORD *)v20 + 1) = v22;
          v20 += 32;
          v19 -= 32;
        }
        while (v19);
      }
      v23 = (char *)*a1;
      *a1 = v14;
      a1[1] = v16;
      a1[2] = v4;
      a1[3] = &v14[32 * v15];
      if (v23)
      {
        operator delete(v23);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v8 = v7 >> 5;
      v9 = v7 >> 5 < -1;
      v10 = (v7 >> 5) + 2;
      if (!v9)
        v10 = v8 + 1;
      if (v5 == v4)
      {
        v12 = &v5[-32 * (v10 >> 1)];
      }
      else
      {
        do
        {
          v11 = &v5[-32 * (v10 >> 1)];
          *(_QWORD *)v11 = *(_QWORD *)v5;
          *((_OWORD *)v11 + 1) = *((_OWORD *)v5 + 1);
          v5 += 32;
        }
        while (v5 != v4);
        v4 = (char *)a1[1];
        v12 = &v5[-32 * (v10 >> 1)];
      }
      a1[1] = &v4[-32 * (v10 >> 1)];
      a1[2] = v12;
      v4 = v12;
    }
  }
  result = *(__n128 *)a2;
  v25 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *((_OWORD *)v4 + 1) = v25;
  a1[2] += 32;
  return result;
}

BOOL sub_1DCB48FE8(uint64_t a1, float32x2_t *a2, float *a3, float *a4, _DWORD *a5, int a6, unsigned int a7)
{
  __int128 v11;
  __int128 v12;
  _BOOL8 v13;
  int v14;
  char v15;
  int v16;
  BOOL v17;
  int v18;
  char v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  _OWORD v31[4];
  _OWORD v32[2];
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v11 = *(_OWORD *)(a1 + 16);
  v31[0] = *(_OWORD *)a1;
  v31[1] = v11;
  v12 = *(_OWORD *)(a1 + 48);
  v31[2] = *(_OWORD *)(a1 + 32);
  v31[3] = v12;
  v13 = sub_1DCB49194((uint64_t)v31, a2, a3, a6);
  if (v13)
  {
    sub_1DCB49584((float *)v31, a4);
    *a5 = *(_DWORD *)(a1 + 48);
    a5[1] = *(_DWORD *)(a1 + 52);
    a5[2] = *(_DWORD *)(a1 + 56);
    if (a7 != 257)
    {
      v30 = 5;
      v28 = *(_QWORD *)a4;
      v29 = *((_DWORD *)a4 + 2);
      v26 = 0;
      v27 = 0;
      v14 = (a7 >> 9) & 8;
      if ((a7 & 0x2000) != 0)
        LOBYTE(v14) = 16;
      BYTE4(v27) = a7 & 1 | (4 * (BYTE1(a7) & 1)) | (a7 >> 3) & 2 | v14;
      v33 = 0;
      memset(v32, 0, sizeof(v32));
      sub_1DCB49AB8((uint64_t)&v28, (uint64_t)v32);
      sub_1DCB49C6C((uint64_t)&v26, (uint64_t)v32);
      v15 = BYTE4(v27);
      v16 = (BYTE4(v27) >> 3) & 3;
      v17 = v16 != 0;
      v18 = v16 - 1;
      if (v18 != 0 && v17)
        v19 = -2;
      else
        v19 = 1;
      v20 = (BYTE4(v27) >> 3) & 3;
      DWORD2(v32[0]) = 0;
      *(_QWORD *)&v32[0] = 0;
      if (!v20)
        LOBYTE(v18) = 2;
      if ((v27 & 0x400000000) != 0)
        v21 = 1;
      else
        v21 = 2;
      *((_DWORD *)v32 + (v19 + v20)) = v21;
      if ((v15 & 4) != 0)
        v22 = 2;
      else
        v22 = 1;
      *((_DWORD *)v32 + v18) = v22;
      v23 = *((_DWORD *)&v26 + SDWORD1(v32[0]));
      v24 = *((_DWORD *)&v26 + SDWORD2(v32[0]));
      *a4 = *((float *)&v26 + SLODWORD(v32[0]));
      *((_DWORD *)a4 + 1) = v23;
      *((_DWORD *)a4 + 2) = v24;
    }
  }
  return v13;
}

BOOL sub_1DCB49194(uint64_t a1, float32x2_t *a2, float *a3, int a4)
{
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  float *v12;
  __int128 v13;
  float v14;
  float v15;
  uint64_t i;
  float v17;
  uint64_t v18;
  float32x2_t *v19;
  _BOOL8 result;
  int32x2_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float *v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  float *v58;
  uint64_t v59;
  _DWORD *v60;
  float v61;
  float v62;
  float v63;
  __int128 v64;
  float v65;
  uint64_t v66;
  float v67;
  uint64_t v68;

  v8 = 0;
  v68 = *MEMORY[0x1E0C80C00];
  v9 = *(float *)a1;
  v10 = *(_QWORD *)(a1 + 4);
  v63 = *(float *)a1;
  v11 = *(float *)(a1 + 24);
  v12 = &v63;
  *(_QWORD *)&v13 = v10;
  *((_QWORD *)&v13 + 1) = *(_QWORD *)(a1 + 16);
  v64 = v13;
  v65 = v11;
  v14 = *(float *)(a1 + 40);
  v66 = *(_QWORD *)(a1 + 32);
  v67 = v14;
  v15 = 0.0;
  do
  {
    for (i = 0; i != 3; ++i)
    {
      v17 = v12[i];
      if (v17 <= 0.0)
        v17 = -v17;
      if (v17 > v15)
        v15 = v17;
    }
    ++v8;
    v12 += 3;
  }
  while (v8 != 3);
  v62 = v15;
  if (v15 == 0.0)
  {
    v22 = *((float *)&v10 + 1);
LABEL_15:
    v23 = (float)((float)(v9 * v9) + (float)(*(float *)&v10 * *(float *)&v10)) + (float)(v22 * v22);
    if (v23 < 2.351e-38)
      v24 = sub_1DCB499B4(&v63);
    else
      v24 = sqrtf(v23);
    a2->f32[0] = v24;
    result = sub_1DCB498C4((float *)a2, (uint64_t)&v63, a4);
    if (result)
    {
      v25 = 1.0 / a2->f32[0];
      v26 = v63 * v25;
      v27 = *(float *)&v64 * v25;
      v63 = v26;
      *(float *)&v64 = v27;
      v28 = *((float *)&v64 + 2);
      v29 = *((float *)&v64 + 1) * v25;
      v30 = *((float *)&v64 + 3);
      v31 = v65;
      v32 = (float)((float)(*((float *)&v64 + 2) * v26) + (float)(*((float *)&v64 + 3) * v27)) + (float)(v65 * v29);
      *a3 = v32;
      *((float *)&v64 + 1) = v29;
      *((float *)&v64 + 2) = v28 - (float)(v32 * v26);
      *((float *)&v64 + 3) = v30 - (float)(v32 * v27);
      v65 = v31 - (float)(v32 * v29);
      v33 = (float)((float)(*((float *)&v64 + 2) * *((float *)&v64 + 2))
                  + (float)(*((float *)&v64 + 3) * *((float *)&v64 + 3)))
          + (float)(v65 * v65);
      v34 = v33 < 2.351e-38 ? sub_1DCB499B4((float *)&v64 + 2) : sqrtf(v33);
      a2->f32[1] = v34;
      result = sub_1DCB498C4((float *)a2 + 1, (uint64_t)&v64 + 8, a4);
      if (result)
      {
        v35 = 1.0 / a2->f32[1];
        v36 = *((float *)&v64 + 1);
        *((float *)&v64 + 2) = *((float *)&v64 + 2) * v35;
        v37 = *((float *)&v64 + 2);
        *((float *)&v64 + 3) = *((float *)&v64 + 3) * v35;
        v38 = *((float *)&v64 + 3);
        v39 = v65 * v35;
        v40 = v63;
        v41 = *(float *)&v64;
        v42 = v66;
        v43 = v67;
        v44 = (float)((float)(*(float *)&v66 * v63) + (float)(*((float *)&v66 + 1) * *(float *)&v64))
            + (float)(v67 * *((float *)&v64 + 1));
        *a3 = *a3 * v35;
        a3[1] = v44;
        v45 = *(float *)&v42 - (float)(v44 * v40);
        v46 = *((float *)&v42 + 1) - (float)(v44 * v41);
        v47 = v43 - (float)(v44 * v36);
        v48 = (float)((float)(v45 * v37) + (float)(v46 * v38)) + (float)(v47 * v39);
        a3[2] = v48;
        v65 = v39;
        *(float *)&v66 = v45 - (float)(v48 * v37);
        *((float *)&v66 + 1) = v46 - (float)(v48 * v38);
        v67 = v47 - (float)(v48 * v39);
        v49 = (float)((float)(*(float *)&v66 * *(float *)&v66) + (float)(*((float *)&v66 + 1) * *((float *)&v66 + 1)))
            + (float)(v67 * v67);
        v50 = v49 < 2.351e-38 ? sub_1DCB499B4((float *)&v66) : sqrtf(v49);
        a2[1].f32[0] = v50;
        v51 = (float *)&a2[1];
        result = sub_1DCB498C4((float *)&a2[1], (uint64_t)&v66, a4);
        if (result)
        {
          v52 = 1.0 / *v51;
          v53 = *(float *)&v66 * v52;
          *((float *)&v66 + 1) = *((float *)&v66 + 1) * v52;
          v54 = *((float *)&v66 + 1);
          v67 = v67 * v52;
          v55 = v67;
          v56 = a3[2];
          a3[1] = a3[1] * v52;
          a3[2] = v56 / *v51;
          *(float *)&v66 = v53;
          if ((float)((float)((float)((float)-(float)((float)(v65 * v54) - (float)(*((float *)&v64 + 3) * v55)) * v63)
                             + (float)((float)-(float)((float)(*((float *)&v64 + 2) * v55) - (float)(v65 * v53))
                                     * *(float *)&v64))
                     + (float)(*((float *)&v64 + 1)
                             * (float)-(float)((float)(*((float *)&v64 + 3) * v53) - (float)(*((float *)&v64 + 2) * v54)))) < 0.0)
          {
            v57 = 0;
            v58 = (float *)&v64 + 1;
            do
            {
              a2->f32[v57] = -a2->f32[v57];
              *((float32x2_t *)v58 - 1) = vneg_f32(*(float32x2_t *)(v58 - 2));
              *v58 = -*v58;
              v58 += 3;
              ++v57;
            }
            while (v57 != 3);
          }
          v59 = 0;
          v60 = (_DWORD *)(a1 + 8);
          do
          {
            *((_QWORD *)v60 - 1) = *(_QWORD *)((char *)&v63 + v59);
            *v60 = *(_DWORD *)((char *)&v64 + v59 + 4);
            v60 += 4;
            v59 += 12;
          }
          while (v59 != 36);
          v61 = v62;
          *a2 = vmul_n_f32(*a2, v62);
          a2[1].f32[0] = a2[1].f32[0] * v61;
          return 1;
        }
      }
    }
  }
  else
  {
    v18 = 0;
    while (1)
    {
      v19 = (float32x2_t *)((char *)&v63 + v18);
      result = sub_1DCB498C4(&v62, (uint64_t)&v63 + v18, a4);
      if (!result)
        break;
      *(float *)v21.i32 = v62;
      *v19 = vdiv_f32(*v19, (float32x2_t)vdup_lane_s32(v21, 0));
      v19[1].f32[0] = v19[1].f32[0] / *(float *)v21.i32;
      v18 += 12;
      if (v18 == 36)
      {
        v9 = v63;
        v22 = *((float *)&v64 + 1);
        LODWORD(v10) = v64;
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_1DCB49584(float *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  __float2 v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float32x4_t v45;
  float v46;
  float v47;
  __int128 v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  float32x4_t v59;
  float v60;
  float v61;
  float v62;
  int v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  int v69;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = (float)((float)(v4 * v4) + (float)(v3 * v3)) + (float)(v5 * v5);
  if (v9 >= 2.351e-38)
  {
    v10 = sqrtf(v9);
    goto LABEL_3;
  }
  v33 = -v4;
  if (v4 >= 0.0)
    v33 = *a1;
  v34 = -v3;
  if (v3 >= 0.0)
    v34 = a1[1];
  if (v5 >= 0.0)
    v35 = a1[2];
  else
    v35 = -v5;
  if (v33 >= v34)
    v36 = v33;
  else
    v36 = v34;
  if (v36 < v35)
    v36 = v35;
  if (v36 != 0.0)
  {
    v10 = sqrtf((float)((float)((float)(v34 * (float)(1.0 / v36)) * (float)(v34 * (float)(1.0 / v36)))+ (float)((float)(v33 * (float)(1.0 / v36)) * (float)(v33 * (float)(1.0 / v36))))+ (float)((float)(v35 * (float)(1.0 / v36)) * (float)(v35 * (float)(1.0 / v36))))* v36;
LABEL_3:
    if (v10 != 0.0)
    {
      v11 = 1.0 / v10;
      v4 = v4 * v11;
      v3 = v3 * v11;
      v5 = v5 * v11;
    }
  }
  v12 = a1[8];
  v13 = a1[9];
  v14 = a1[10];
  v15 = (float)((float)(v6 * v6) + (float)(v7 * v7)) + (float)(v8 * v8);
  if (v15 >= 2.351e-38)
  {
    v16 = sqrtf(v15);
    goto LABEL_7;
  }
  v37 = -v6;
  if (v6 >= 0.0)
    v37 = a1[4];
  v38 = -v7;
  if (v7 >= 0.0)
    v38 = a1[5];
  if (v8 >= 0.0)
    v39 = a1[6];
  else
    v39 = -v8;
  if (v37 >= v38)
    v40 = v37;
  else
    v40 = v38;
  if (v40 < v39)
    v40 = v39;
  if (v40 != 0.0)
  {
    v16 = sqrtf((float)((float)((float)(v38 * (float)(1.0 / v40)) * (float)(v38 * (float)(1.0 / v40)))+ (float)((float)(v37 * (float)(1.0 / v40)) * (float)(v37 * (float)(1.0 / v40))))+ (float)((float)(v39 * (float)(1.0 / v40)) * (float)(v39 * (float)(1.0 / v40))))* v40;
LABEL_7:
    if (v16 != 0.0)
    {
      v17 = 1.0 / v16;
      v6 = v6 * v17;
      v7 = v7 * v17;
      v8 = v8 * v17;
    }
  }
  v18 = (float)((float)(v12 * v12) + (float)(v13 * v13)) + (float)(v14 * v14);
  if (v18 >= 2.351e-38)
  {
    v19 = sqrtf(v18);
    goto LABEL_11;
  }
  v41 = -v12;
  if (v12 >= 0.0)
    v41 = a1[8];
  v42 = -v13;
  if (v13 >= 0.0)
    v42 = a1[9];
  if (v14 >= 0.0)
    v43 = a1[10];
  else
    v43 = -v14;
  if (v41 >= v42)
    v44 = v41;
  else
    v44 = v42;
  if (v44 < v43)
    v44 = v43;
  if (v44 != 0.0)
  {
    v19 = sqrtf((float)((float)((float)(v42 * (float)(1.0 / v44)) * (float)(v42 * (float)(1.0 / v44)))+ (float)((float)(v41 * (float)(1.0 / v44)) * (float)(v41 * (float)(1.0 / v44))))+ (float)((float)(v43 * (float)(1.0 / v44)) * (float)(v43 * (float)(1.0 / v44))))* v44;
LABEL_11:
    if (v19 != 0.0)
    {
      v20 = 1.0 / v19;
      v12 = v12 * v20;
      v13 = v13 * v20;
      v14 = v14 * v20;
    }
  }
  v59.i64[0] = __PAIR64__(LODWORD(v3), LODWORD(v4));
  v59.i64[1] = LODWORD(v5);
  v60 = v6;
  v61 = v7;
  v62 = v8;
  v63 = 0;
  v64 = v12;
  v65 = v13;
  v66 = v14;
  v68 = 0;
  v67 = 0;
  v69 = 1065353216;
  v21 = atan2f(v8, v14);
  *a2 = v21;
  v57 = 0;
  v58 = 0x3F80000000000000;
  v22 = __sincosf_stret(v21);
  v23 = (float)(v22.__sinval * -0.0) - (float)(v22.__cosval * 0.0);
  v24 = (float)(v22.__sinval * -0.0) + v22.__cosval;
  v25 = (float)(v22.__sinval * -0.0) + (float)(v22.__cosval * 0.0);
  v26 = (float)(v22.__cosval * 0.0) + v22.__sinval;
  v48 = xmmword_1DCC56FD0;
  v27 = (float)((float)(v24 * 0.0) + v23) - (float)(v22.__sinval * 0.0);
  v28 = v23 * 0.0;
  v49 = v27;
  v50 = (float)(v28 + v24) - (float)(v22.__sinval * 0.0);
  v51 = (float)(v28 - v22.__sinval) + (float)(v24 * 0.0);
  v52 = (float)((float)(v24 * 0.0) + v28) - (float)(v22.__sinval * 0.0);
  v29 = (float)(v26 * 0.0) + (float)(v25 + (float)(v22.__cosval * 0.0));
  v30 = v25 * 0.0;
  v53 = v29;
  v54 = v30 + (float)(v26 + (float)(v22.__cosval * 0.0));
  v55 = (float)(v30 + v22.__cosval) + (float)(v26 * 0.0);
  v56 = (float)((float)(v26 * 0.0) + v30) + (float)(v22.__cosval * 0.0);
  sub_1DCB49A2C((uint64_t)&v48, &v59, &v45);
  v32 = v46;
  v31 = v47;
  a2[1] = atan2f(-v45.f32[2], sqrtf((float)(v45.f32[0] * v45.f32[0]) + (float)(v45.f32[1] * v45.f32[1])));
  a2[2] = atan2f(-v32, v31);
}

BOOL sub_1DCB498C4(float *a1, uint64_t a2, int a3)
{
  unint64_t v3;
  BOOL v4;
  float v5;
  float v6;
  std::logic_error *exception;

  v3 = 0;
  v4 = 0;
  v5 = *a1;
  if (*a1 <= 0.0)
    v5 = -*a1;
  while (1)
  {
    if (v5 < 1.0)
    {
      v6 = *(float *)(a2 + 4 * v3);
      if (v6 <= 0.0)
        v6 = -v6;
      if (v6 >= (float)(v5 * 3.4028e38))
        break;
    }
    v4 = v3++ > 1;
    if (v3 == 3)
      return 1;
  }
  if (a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1DCB49990(exception, "Cannot remove zero scaling from matrix.");
    __cxa_throw(exception, (struct type_info *)off_1EA5730B0, MEMORY[0x1E0DE42C0]);
  }
  return v4;
}

void sub_1DCB4997C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1DCB49990(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
  return result;
}

float sub_1DCB499B4(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 < 0.0)
    v1 = -*a1;
  if (v2 < 0.0)
    v2 = -v2;
  v3 = a1[2];
  v4 = -v3;
  if (v3 >= 0.0)
    v4 = a1[2];
  if (v1 >= v2)
    v5 = v1;
  else
    v5 = v2;
  if (v5 < v4)
    v5 = v4;
  if (v5 == 0.0)
    return 0.0;
  else
    return sqrtf((float)((float)((float)(v2 * (float)(1.0 / v5)) * (float)(v2 * (float)(1.0 / v5)))+ (float)((float)(v1 * (float)(1.0 / v5)) * (float)(v1 * (float)(1.0 / v5))))+ (float)((float)(v4 * (float)(1.0 / v5)) * (float)(v4 * (float)(1.0 / v5))))* v5;
}

float32x4_t sub_1DCB49A2C@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  float32x4_t result;

  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 36);
  v6 = *(_OWORD *)(a1 + 40);
  v7 = *(_OWORD *)(a1 + 44);
  v8 = *(_QWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *a2;
  v11 = a2[1];
  v12 = a2[2];
  v13 = a2[3];
  v14 = *(float *)(a1 + 60);
  v15 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a2, COERCE_FLOAT(*(_OWORD *)(a1 + 16))), v11, COERCE_FLOAT(*(_OWORD *)(a1 + 20))), v12, COERCE_FLOAT(*(_OWORD *)(a1 + 24))), v13, COERCE_FLOAT(*(_OWORD *)(a1 + 28)));
  *a3 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a2, COERCE_FLOAT(*(_OWORD *)a1)), v11, COERCE_FLOAT(*(_OWORD *)(a1 + 4))), v12, COERCE_FLOAT(*(_OWORD *)(a1 + 8))), v13, COERCE_FLOAT(*(_OWORD *)(a1 + 12)));
  a3[1] = v15;
  result = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v10, *(float *)&v3), v11, *(float *)&v5), v12, *(float *)&v6), v13, *(float *)&v7);
  a3[2] = result;
  a3[3] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v10, *(float *)&v4), v11, *(float *)&v8), v12, *(float *)&v9), v13, v14);
  return result;
}

void sub_1DCB49AB8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  float v11;
  float v12;
  float v13;
  __float2 v14;
  __float2 v15;
  __float2 v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;

  v3 = *(unsigned __int8 *)(a1 + 12);
  v4 = (v3 >> 3) & 3;
  v5 = v4 - 1;
  if (v4)
    v6 = v4 - 1;
  else
    v6 = 2;
  if (v4 < 2)
    v7 = 1;
  else
    v7 = -2;
  v8 = v7 + v4;
  if (!v4)
    v5 = 2;
  if ((v3 & 4) != 0)
    v9 = v8;
  else
    v9 = v6;
  if ((v3 & 4) != 0)
    v10 = v5;
  else
    v10 = v8;
  v11 = *(float *)(a1 + 8 * ((v3 & 1) == 0));
  if ((v3 & 4) != 0)
  {
    v12 = *(float *)(a1 + 4);
  }
  else
  {
    v11 = -v11;
    v12 = -*(float *)(a1 + 4);
  }
  if ((v3 & 4) != 0)
    v13 = *(float *)(a1 + 8 * (v3 & 1));
  else
    v13 = -*(float *)(a1 + 8 * (v3 & 1));
  v14 = __sincosf_stret(v11);
  v15 = __sincosf_stret(v12);
  v16 = __sincosf_stret(v13);
  v17 = v14.__cosval * v16.__cosval;
  v18 = v14.__cosval * v16.__sinval;
  v19 = v14.__sinval * v16.__cosval;
  v20 = v14.__sinval * v16.__sinval;
  *(_OWORD *)a2 = xmmword_1DCC56FD0;
  *(_OWORD *)(a2 + 16) = xmmword_1DCC56FD0;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v21 = a2 + 12 * v4;
  if ((v3 & 2) != 0)
  {
    *(float *)(v21 + 4 * v4) = v15.__cosval;
    v25 = a2 + 12 * v9;
    *(float *)(v25 + 4 * v4) = v14.__sinval * v15.__sinval;
    v23 = a2 + 12 * v10;
    *(float *)(v23 + 4 * v4) = v14.__cosval * v15.__sinval;
    *(float *)(v21 + 4 * v9) = v15.__sinval * v16.__sinval;
    *(float *)(v25 + 4 * v9) = v17 - (float)(v20 * v15.__cosval);
    *(float *)(v23 + 4 * v9) = -(float)(v19 + (float)(v18 * v15.__cosval));
    *(float *)(v21 + 4 * v10) = -(float)(v16.__cosval * v15.__sinval);
    *(float *)(v25 + 4 * v10) = v18 + (float)(v19 * v15.__cosval);
    v24 = -(float)(v20 - (float)(v17 * v15.__cosval));
  }
  else
  {
    *(float *)(v21 + 4 * v4) = v15.__cosval * v16.__cosval;
    v22 = a2 + 12 * v9;
    *(float *)(v22 + 4 * v4) = -(float)(v18 - (float)(v19 * v15.__sinval));
    v23 = a2 + 12 * v10;
    *(float *)(v23 + 4 * v4) = v20 + (float)(v17 * v15.__sinval);
    *(float *)(v21 + 4 * v9) = v15.__cosval * v16.__sinval;
    *(float *)(v22 + 4 * v9) = v17 + (float)(v20 * v15.__sinval);
    *(float *)(v23 + 4 * v9) = -(float)(v19 - (float)(v18 * v15.__sinval));
    *(float *)(v21 + 4 * v10) = -v15.__sinval;
    *(float *)(v22 + 4 * v10) = v14.__sinval * v15.__cosval;
    v24 = v14.__cosval * v15.__cosval;
  }
  *(float *)(v23 + 4 * v10) = v24;
}

void sub_1DCB49C6C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  __float2 v17;
  __float2 v18;
  __float2 v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  unsigned int v28;
  int v29;
  int v30;
  unint64_t v31;
  float v32;
  unint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  __float2 v39;
  __float2 v40;
  __float2 v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v53;
  float v54;
  float v55;
  float v56;
  char v57;
  float v58;
  float32x4_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  float32x4_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  float32x4_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  float v77;

  v4 = *(unsigned __int8 *)(a1 + 12);
  v5 = (v4 >> 3) & 3;
  v6 = v5 - 1;
  if ((_DWORD)v5)
    v7 = v5 - 1;
  else
    v7 = 2;
  if (v5 < 2)
    v8 = 1;
  else
    v8 = -2;
  v9 = v8 + v5;
  if (!(_DWORD)v5)
    v6 = 2;
  if ((v4 & 4) != 0)
    v10 = v9;
  else
    v10 = v7;
  if ((v4 & 4) != 0)
    v11 = v6;
  else
    v11 = v9;
  v12 = v10;
  v13 = a2 + 12 * v10;
  if ((v4 & 2) != 0)
  {
    v36 = atan2f(*(float *)(v13 + 4 * v5), *(float *)(a2 + 12 * v11 + 4 * v5));
    *(float *)a1 = v36;
    if ((v4 & 4) != 0)
      v36 = -v36;
    v77 = 0.0;
    v76 = 0;
    *((float *)&v76 + v5) = v36;
    *(_QWORD *)&v75 = 0;
    *((_QWORD *)&v75 + 1) = 0x3F80000000000000;
    v37 = *((float *)&v76 + 1);
    v38 = *(float *)&v76;
    v39 = __sincosf_stret(v77);
    v40 = __sincosf_stret(v37);
    v41 = __sincosf_stret(v38);
    v42 = (float)((float)(v40.__sinval * v39.__sinval) * v41.__sinval) + (float)(v41.__cosval * v39.__cosval);
    v43 = (float)((float)(v40.__sinval * v39.__cosval) * v41.__cosval) + (float)(v41.__sinval * v39.__sinval);
    v44 = -(float)((float)(v41.__sinval * v39.__cosval) - (float)((float)(v40.__sinval * v39.__sinval) * v41.__cosval));
    v45 = (float)(v40.__cosval * v39.__sinval) * 0.0;
    v46 = (float)(v40.__cosval * v39.__cosval) * 0.0;
    v72.f32[0] = (float)(v45 + (float)(v40.__cosval * v39.__cosval)) - (float)(v40.__sinval * 0.0);
    v72.f32[1] = (float)(v46 + (float)(v40.__cosval * v39.__sinval)) - (float)(v40.__sinval * 0.0);
    v72.f32[2] = (float)(v46 - v40.__sinval) + v45;
    v72.f32[3] = (float)(v45 + v46) - (float)(v40.__sinval * 0.0);
    v47 = (float)-(float)((float)(v41.__cosval * v39.__sinval)
                        - (float)((float)(v40.__sinval * v39.__cosval) * v41.__sinval))
        * 0.0;
    *(float *)&v73 = (float)(v42 * 0.0)
                   + (float)((float)((float)(v41.__sinval * v40.__cosval) * 0.0)
                           - (float)((float)(v41.__cosval * v39.__sinval)
                                   - (float)((float)(v40.__sinval * v39.__cosval) * v41.__sinval)));
    *((float *)&v73 + 1) = (float)(v47 + v42) + (float)((float)(v41.__sinval * v40.__cosval) * 0.0);
    *((float *)&v73 + 2) = (float)(v47 + (float)(v41.__sinval * v40.__cosval)) + (float)(v42 * 0.0);
    *((float *)&v73 + 3) = (float)(v42 * 0.0) + (float)(v47 + (float)((float)(v41.__sinval * v40.__cosval) * 0.0));
    v48 = (float)((float)(v44 * 0.0) + v43) + (float)((float)(v41.__cosval * v40.__cosval) * 0.0);
    v49 = v43 * 0.0;
    *(float *)&v74 = v48;
    *((float *)&v74 + 1) = v49
                         + (float)((float)((float)(v41.__cosval * v40.__cosval) * 0.0)
                                 - (float)((float)(v41.__sinval * v39.__cosval)
                                         - (float)((float)(v40.__sinval * v39.__sinval) * v41.__cosval)));
    *((float *)&v74 + 2) = v49 + (float)((float)(v41.__cosval * v40.__cosval) + (float)(v44 * 0.0));
    *((float *)&v74 + 3) = (float)((float)(v44 * 0.0) + (float)((float)(v41.__cosval * v40.__cosval) * 0.0)) + v49;
    v50 = *(_DWORD *)(a2 + 8);
    v51 = *(_DWORD *)(a2 + 20);
    v52 = *(_DWORD *)(a2 + 32);
    v59.i64[0] = *(_QWORD *)a2;
    v59.i64[1] = v50;
    v60 = *(_QWORD *)(a2 + 12);
    v61 = v51;
    v62 = 0;
    v63 = *(_QWORD *)(a2 + 24);
    v64 = v52;
    v66 = 0;
    v65 = 0;
    v67 = 1065353216;
    sub_1DCB49A2C((uint64_t)&v72, &v59, &v68);
    v72 = v68;
    v73 = v69;
    v74 = v70;
    v75 = v71;
    v53 = (unint64_t)(&v72 + v12);
    v54 = *(float *)(v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
    v55 = *(float *)((unint64_t)(&v72 + v11) | (4 * v5));
    v32 = atan2f(sqrtf((float)(v54 * v54) + (float)(v55 * v55)), *(float *)((unint64_t)(&v72 + v5) & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3))));
    *(float *)(a1 + 4) = v32;
    v34 = *(float *)(v53 + 4 * v11);
    v35 = *(float *)(v53 + 4 * v12);
  }
  else
  {
    v14 = atan2f(*(float *)(v13 + 4 * v11), *(float *)(a2 + 12 * v11 + 4 * v11));
    *(float *)a1 = v14;
    if ((v4 & 4) != 0)
      v14 = -v14;
    v77 = 0.0;
    v76 = 0;
    *((float *)&v76 + v5) = v14;
    *(_QWORD *)&v75 = 0;
    *((_QWORD *)&v75 + 1) = 0x3F80000000000000;
    v15 = *((float *)&v76 + 1);
    v16 = *(float *)&v76;
    v17 = __sincosf_stret(v77);
    v18 = __sincosf_stret(v15);
    v19 = __sincosf_stret(v16);
    v20 = (float)((float)(v18.__sinval * v17.__sinval) * v19.__sinval) + (float)(v19.__cosval * v17.__cosval);
    v21 = (float)((float)(v18.__sinval * v17.__cosval) * v19.__cosval) + (float)(v19.__sinval * v17.__sinval);
    v22 = -(float)((float)(v19.__sinval * v17.__cosval) - (float)((float)(v18.__sinval * v17.__sinval) * v19.__cosval));
    v23 = (float)(v18.__cosval * v17.__sinval) * 0.0;
    v24 = (float)(v18.__cosval * v17.__cosval) * 0.0;
    v72.f32[0] = (float)(v23 + (float)(v18.__cosval * v17.__cosval)) - (float)(v18.__sinval * 0.0);
    v72.f32[1] = (float)(v24 + (float)(v18.__cosval * v17.__sinval)) - (float)(v18.__sinval * 0.0);
    v72.f32[2] = (float)(v24 - v18.__sinval) + v23;
    v72.f32[3] = (float)(v23 + v24) - (float)(v18.__sinval * 0.0);
    v25 = (float)-(float)((float)(v19.__cosval * v17.__sinval)
                        - (float)((float)(v18.__sinval * v17.__cosval) * v19.__sinval))
        * 0.0;
    *(float *)&v73 = (float)(v20 * 0.0)
                   + (float)((float)((float)(v19.__sinval * v18.__cosval) * 0.0)
                           - (float)((float)(v19.__cosval * v17.__sinval)
                                   - (float)((float)(v18.__sinval * v17.__cosval) * v19.__sinval)));
    *((float *)&v73 + 1) = (float)(v25 + v20) + (float)((float)(v19.__sinval * v18.__cosval) * 0.0);
    *((float *)&v73 + 2) = (float)(v25 + (float)(v19.__sinval * v18.__cosval)) + (float)(v20 * 0.0);
    *((float *)&v73 + 3) = (float)(v20 * 0.0) + (float)(v25 + (float)((float)(v19.__sinval * v18.__cosval) * 0.0));
    v26 = (float)((float)(v22 * 0.0) + v21) + (float)((float)(v19.__cosval * v18.__cosval) * 0.0);
    v27 = v21 * 0.0;
    *(float *)&v74 = v26;
    *((float *)&v74 + 1) = v27
                         + (float)((float)((float)(v19.__cosval * v18.__cosval) * 0.0)
                                 - (float)((float)(v19.__sinval * v17.__cosval)
                                         - (float)((float)(v18.__sinval * v17.__sinval) * v19.__cosval)));
    *((float *)&v74 + 2) = v27 + (float)((float)(v19.__cosval * v18.__cosval) + (float)(v22 * 0.0));
    *((float *)&v74 + 3) = (float)((float)(v22 * 0.0) + (float)((float)(v19.__cosval * v18.__cosval) * 0.0)) + v27;
    v28 = *(_DWORD *)(a2 + 8);
    v29 = *(_DWORD *)(a2 + 20);
    v30 = *(_DWORD *)(a2 + 32);
    v59.i64[0] = *(_QWORD *)a2;
    v59.i64[1] = v28;
    v60 = *(_QWORD *)(a2 + 12);
    v61 = v29;
    v62 = 0;
    v63 = *(_QWORD *)(a2 + 24);
    v64 = v30;
    v66 = 0;
    v65 = 0;
    v67 = 1065353216;
    sub_1DCB49A2C((uint64_t)&v72, &v59, &v68);
    v72 = v68;
    v73 = v69;
    v74 = v70;
    v75 = v71;
    v31 = (unint64_t)(&v72 + v5);
    v32 = atan2f(-*(float *)(v31 + 4 * v11), sqrtf((float)(*(float *)(v31 & 0xFFFFFFFFFFFFFFF3 | (4 * ((v4 >> 3) & 3)))* *(float *)(v31 & 0xFFFFFFFFFFFFFFF3 | (4 * ((v4 >> 3) & 3))))+ (float)(*(float *)(v31 + 4 * v12) * *(float *)(v31 + 4 * v12))));
    *(float *)(a1 + 4) = v32;
    v33 = (unint64_t)(&v72 + v12);
    v34 = -*(float *)(v33 | (4 * v5));
    v35 = *(float *)(v33 + 4 * v12);
  }
  v56 = atan2f(v34, v35);
  *(float *)(a1 + 8) = v56;
  v57 = *(_BYTE *)(a1 + 12);
  if ((v57 & 4) == 0)
  {
    *(float *)a1 = -*(float *)a1;
    *(float *)(a1 + 4) = -v32;
    v56 = -v56;
    *(float *)(a1 + 8) = v56;
  }
  if ((v57 & 1) == 0)
  {
    v58 = *(float *)a1;
    *(float *)a1 = v56;
    *(float *)(a1 + 8) = v58;
  }
}

uint64_t *sub_1DCB4A128(uint64_t **a1, double *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  double v7;
  uint64_t **v8;
  double v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((double *)v5 + 4);
        if (v7 >= v9)
          break;
        v5 = (uint64_t *)*v5;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_1DCACAE54(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

id sub_1DCB4A1E0(void *a1, int a2, uint64_t a3, void *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  objc_class *v19;
  void *v20;
  void *v21;
  const char *v22;
  void *v23;
  objc_class *v24;
  const char *v25;
  void *v26;
  const char *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  const char *v40;
  uint64_t v41;
  int v42;
  const char *v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  int v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  BOOL v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  int v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  id v71;
  int v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  int *v76;
  int v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  void *v84;
  BOOL v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  void *v104;
  BOOL v105;
  const char *v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  void *v117;
  const char *v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  int v135;
  char *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  int v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  int v158;
  const char *v159;
  uint64_t v160;
  OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  const char *v169;
  const char *v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  void *v180;
  const char *v181;
  uint64_t v182;
  void *v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  void *v188;
  const char *v189;
  uint64_t v190;
  unint64_t v191;
  double v192;
  uint64_t v193;
  double *v194;
  double *v195;
  int v196;
  uint64_t v197;
  _DWORD *v198;
  _DWORD *v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  unsigned int *v203;
  void *v204;
  float *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  unsigned int *v211;
  uint64_t v212;
  int *v213;
  float *v214;
  uint64_t v215;
  float *v216;
  float32x2_t v217;
  float v218;
  float *v219;
  int v220;
  float32x2_t *v221;
  float v222;
  _DWORD *v223;
  OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *v224;
  uint64_t v225;
  unsigned int *v226;
  void *v227;
  float *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  unsigned int *v234;
  uint64_t v235;
  int *v236;
  float *v237;
  uint64_t v238;
  float *v239;
  float32x2_t v240;
  float v241;
  float *v242;
  int v243;
  float32x2_t *v244;
  float v245;
  _DWORD *v246;
  OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *v247;
  uint64_t v248;
  unsigned int *v249;
  void *v250;
  float *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  unsigned int *v257;
  uint64_t v258;
  int *v259;
  float *v260;
  uint64_t v261;
  float *v262;
  float32x2_t v263;
  float v264;
  float *v265;
  int v266;
  float32x2_t *v267;
  float v268;
  _DWORD *v269;
  void *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int *v274;
  uint64_t v275;
  int v276;
  int v277;
  int *v278;
  float *v279;
  float32x2_t *v280;
  float v281;
  float32x2_t *v282;
  float32x2_t v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int v287;
  uint64_t v288;
  int *v289;
  _DWORD *v290;
  int v291;
  int v292;
  _DWORD *v293;
  void *v294;
  double v295;
  uint64_t v296;
  int v297;
  uint64_t i;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int *v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  int *v306;
  float *v307;
  float *v308;
  float v309;
  float v310;
  float v311;
  float *v312;
  float v313;
  uint64_t v314;
  int v315;
  float *v316;
  uint64_t v317;
  int *v318;
  _DWORD *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  float v326;
  float *v327;
  void *v328;
  _QWORD *v329;
  uint64_t v330;
  unsigned int *v331;
  unsigned int v332;
  int v333;
  uint64_t v334;
  unsigned int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  _DWORD *v343;
  _DWORD *v344;
  uint64_t v345;
  float *v346;
  float32x2_t v347;
  float v348;
  int *v349;
  uint64_t v350;
  uint64_t v351;
  float32x2_t *v352;
  uint64_t v353;
  int *v355;
  uint64_t v356;
  uint64_t v357;
  float32x2_t *v358;
  float32x2_t *v359;
  float v360;
  void *v361;
  double v362;
  uint64_t v363;
  int v364;
  uint64_t j;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int *v369;
  uint64_t v370;
  uint64_t v371;
  int v372;
  int *v373;
  float *v374;
  float *v375;
  float v376;
  float v377;
  float v378;
  float *v379;
  float v380;
  uint64_t v381;
  int v382;
  float *v383;
  uint64_t v384;
  int *v385;
  _DWORD *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  float v393;
  float *v394;
  _QWORD *v395;
  uint64_t v396;
  unsigned int *v397;
  unsigned int v398;
  int v399;
  uint64_t v400;
  unsigned int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  int v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  _DWORD *v409;
  _DWORD *v410;
  uint64_t v411;
  float *v412;
  float32x2_t v413;
  float v414;
  int *v415;
  uint64_t v416;
  uint64_t v417;
  float32x2_t *v418;
  uint64_t v419;
  int *v421;
  uint64_t v422;
  uint64_t v423;
  float32x2_t *v424;
  float32x2_t *v425;
  float v426;
  OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *v427;
  unint64_t v428;
  uint64_t v429;
  void *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  char *v437;
  _DWORD *v438;
  char *v439;
  char *v440;
  char *v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  char *v445;
  char *v446;
  int v447;
  char *v448;
  char *v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  char *v453;
  char *v454;
  int v455;
  char *v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  char *v460;
  char *v461;
  int v462;
  void *v463;
  void *v464;
  const char *v465;
  const char *v466;
  const char *v467;
  uint64_t v468;
  void *v469;
  const char *v470;
  void *v471;
  const char *v472;
  uint64_t v473;
  void *v474;
  const char *v475;
  void *v476;
  const char *v477;
  id v478;
  const char *v479;
  void *v480;
  const char *v481;
  char *v482;
  uint64_t v483;
  uint64_t v484;
  _DWORD *v485;
  _DWORD *v486;
  char *v487;
  char *v488;
  char *v489;
  char *v490;
  char *v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  char *v496;
  char *v497;
  uint64_t v498;
  unint64_t v499;
  uint64_t v500;
  unint64_t v501;
  char *v502;
  char *v503;
  int v504;
  char *v505;
  char *v506;
  uint64_t v507;
  unint64_t v508;
  uint64_t v509;
  unint64_t v510;
  char *v511;
  char *v512;
  int v513;
  char *v514;
  char *v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  unint64_t v519;
  char *v520;
  char *v521;
  int v522;
  int v523;
  char *v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  unint64_t v528;
  char *v529;
  char *v530;
  int v531;
  char *v532;
  char *v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  unint64_t v537;
  char *v538;
  char *v539;
  int v540;
  char *v541;
  int v542;
  char *v543;
  char *v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  unint64_t v548;
  char *v549;
  char *v550;
  int v551;
  char *v552;
  uint64_t v553;
  unint64_t v554;
  uint64_t v555;
  unint64_t v556;
  char *v557;
  char *v558;
  int v559;
  uint64_t v560;
  unint64_t v561;
  uint64_t v562;
  int v563;
  id v564;
  const char *v565;
  void *v566;
  const char *v567;
  uint64_t v568;
  void *v569;
  const char *v570;
  void *v571;
  const char *v572;
  uint64_t v573;
  void *v574;
  const char *v575;
  void *v576;
  const char *v577;
  id v578;
  const char *v579;
  void *v580;
  const char *v581;
  MDLSubmesh *v582;
  char *v583;
  _BYTE *v584;
  const char *v585;
  uint64_t v586;
  void *v587;
  const char *v588;
  void *v589;
  const char *v590;
  uint64_t v591;
  void *v592;
  const char *v593;
  void *v594;
  void *v595;
  const char *v596;
  uint64_t v597;
  void *v598;
  const char *v599;
  void *v600;
  const char *v601;
  const char *v602;
  uint64_t v603;
  void *v604;
  const char *v605;
  void *v606;
  const char *v607;
  const char *v608;
  uint64_t v609;
  void *v610;
  const char *v611;
  void *v612;
  const char *v613;
  const char *v614;
  uint64_t v615;
  void *v616;
  const char *v617;
  void *v618;
  const char *v619;
  const char *v620;
  uint64_t v621;
  void *v622;
  const char *v623;
  void *v624;
  const char *v625;
  MDLMesh *v626;
  const char *v627;
  void *v628;
  const char *v629;
  void *v630;
  const char *v631;
  void *v633;
  void *context;
  void *v635;
  void *v636;
  uint64_t v637;
  void *v638;
  void *v639;
  void *v640;
  id v641;
  void *v642;
  void *v643;
  void *v645;
  void *v646;
  void *v647;
  void *v648;
  uint64_t v649;
  unsigned int *v650;
  unsigned int *v651;
  uint64_t v652;
  uint64_t v653;
  OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  int v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  void *v663;
  int v664;
  uint64_t v665;
  int v666;
  uint64_t v667;
  int v668;
  uint64_t v669;
  void *v670;
  __int128 v671;
  _DWORD *v672;
  uint64_t v673;
  uint64_t v674;
  _DWORD *v675;
  unsigned int **v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  uint64_t v683;
  void *__p;
  char *v685;
  char *v686;
  void *v687;
  _BYTE *v688;
  uint64_t v689;
  float *v690;
  void *v691;
  void *v692;
  __int128 v693;
  float v694;
  unsigned int *v695;
  uint64_t v696;
  unint64_t v697;
  uint64_t v698;
  void *v699;
  uint64_t v700;
  void *v701;
  uint64_t v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  __int128 v710;
  void *v711;
  uint64_t v712;

  v712 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v641 = a4;
  v646 = v6;
  objc_msgSend_submeshes(v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v637 = a2;
  objc_msgSend_objectAtIndex_(v9, v10, a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v647 = v11;
  v14 = objc_msgSend_geometryType(v11, v12, v13);
  v17 = v14;
  if (v14 > 5 || ((1 << v14) & 0x34) == 0)
  {
    v23 = (void *)MEMORY[0x1E0C99DA0];
    v24 = (objc_class *)objc_opt_class();
    NSStringFromClass(v24);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromSelector(sel_initMeshBySubdividingMesh_submeshIndex_subdivisionLevels_allocator_);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_raise_format_(v23, v25, (uint64_t)CFSTR("ModelIOException"), CFSTR("[%@ %@]: Can only subdivide submesh in mesh using MDLGeometryTypeTriangles, MDLGeometryTypeQuads, or MDLGeometryTypeVariableTopology"), v20, v21);
LABEL_7:

    goto LABEL_8;
  }
  if (v14 == 5)
  {
    objc_msgSend_topology(v11, v15, v16);
    v648 = (void *)objc_claimAutoreleasedReturnValue();
    if (v648)
      goto LABEL_9;
    v18 = (void *)MEMORY[0x1E0C99DA0];
    v19 = (objc_class *)objc_opt_class();
    NSStringFromClass(v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromSelector(sel_initMeshBySubdividingMesh_submeshIndex_subdivisionLevels_allocator_);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_raise_format_(v18, v22, (uint64_t)CFSTR("ModelIOException"), CFSTR("[%@ %@]: If submesh object's geometryType is MDLGeometryTypeVariableTopology, it must have a topology"), v20, v21);
    goto LABEL_7;
  }
LABEL_8:
  v648 = 0;
LABEL_9:
  objc_msgSend_vertexDescriptor(v6, v15, v16);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_attributeNamed_(v26, v27, (uint64_t)CFSTR("position"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  v645 = v28;
  if (objc_msgSend_format(v28, v29, v30) != 786435)
  {
    v71 = 0;
    goto LABEL_471;
  }
  context = (void *)MEMORY[0x1DF0D25C8]();
  v687 = 0;
  v688 = 0;
  v689 = 0;
  if (v17 == 5)
  {
    objc_msgSend_faceTopology(v648, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_map(v33, v34, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();

    v39 = (unsigned __int8 *)objc_msgSend_bytes(v36, v37, v38);
    v42 = objc_msgSend_faceCount(v648, v40, v41);
    sub_1DCB231F4((uint64_t)&v687, v42);
    if (v42 >= 1)
    {
      v45 = v687;
      v46 = v42;
      do
      {
        v47 = *v39++;
        *v45++ = v47;
        --v46;
      }
      while (v46);
    }
    objc_msgSend_vertexCreaseIndices(v648, v43, v44);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    if (v50)
    {
      objc_msgSend_vertexCreases(v648, v48, v49);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      if (v53)
      {
        v54 = objc_msgSend_vertexCreaseCount(v648, v51, v52) == 0;

        if (!v54)
        {
          objc_msgSend_vertexCreases(v648, v48, v49);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_map(v55, v56, v57);
          v639 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_vertexCreaseIndices(v648, v58, v59);
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_map(v60, v61, v62);
          v640 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend_bytes(v639, v63, v64) && objc_msgSend_bytes(v640, v48, v49))
          {
            v65 = objc_msgSend_vertexCreaseCount(v648, v48, v49);
            v68 = objc_msgSend_bytes(v639, v66, v67);
            v674 = objc_msgSend_bytes(v640, v69, v70);
          }
          else
          {
            v65 = 0;
            v674 = 0;
            v68 = 0;
          }
LABEL_30:
          objc_msgSend_edgeCreaseIndices(v648, v48, v49);
          v81 = (void *)objc_claimAutoreleasedReturnValue();
          if (v81)
          {
            objc_msgSend_edgeCreases(v648, v79, v80);
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            if (v84)
            {
              v85 = objc_msgSend_edgeCreaseCount(v648, v82, v83) == 0;

              if (!v85)
              {
                objc_msgSend_edgeCreaseIndices(v648, v79, v80);
                v86 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_map(v86, v87, v88);
                v642 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend_edgeCreases(v648, v89, v90);
                v91 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_map(v91, v92, v93);
                v643 = (void *)objc_claimAutoreleasedReturnValue();

                if (objc_msgSend_bytes(v642, v94, v95) && objc_msgSend_bytes(v643, v96, v97))
                {
                  objc_msgSend_edgeCreaseCount(v648, v96, v97);
                  *((_QWORD *)&v671 + 1) = objc_msgSend_bytes(v643, v98, v99);
                  *(_QWORD *)&v671 = objc_msgSend_bytes(v642, v100, v101);
                }
                else
                {
                  v671 = 0uLL;
                }
                v664 = objc_msgSend_edgeCreaseCount(v648, v96, v97);
                goto LABEL_41;
              }
            }
            else
            {

            }
          }
          v664 = 0;
          v671 = 0uLL;
          v642 = 0;
          v643 = 0;
LABEL_41:
          objc_msgSend_holes(v648, v79, v80);
          v104 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v104 || (v105 = objc_msgSend_holeCount(v648, v102, v103) == 0, v104, v105))
          {
            v77 = 0;
            v78 = 0;
            v636 = 0;
          }
          else
          {
            objc_msgSend_holes(v648, v106, v107);
            v108 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_map(v108, v109, v110);
            v636 = (void *)objc_claimAutoreleasedReturnValue();

            if (objc_msgSend_bytes(v636, v111, v112))
            {
              v77 = objc_msgSend_holeCount(v648, v113, v114);
              v78 = objc_msgSend_bytes(v636, v115, v116);
            }
            else
            {
              v77 = 0;
              v78 = 0;
            }
          }

          goto LABEL_47;
        }
      }
      else
      {

      }
    }
    v65 = 0;
    v674 = 0;
    v68 = 0;
    v639 = 0;
    v640 = 0;
    goto LABEL_30;
  }
  if (v17 == 4)
    v72 = 4;
  else
    v72 = 3;
  v73 = ((int)objc_msgSend_indexCount(v647, v31, v32) / v72);
  sub_1DCB231F4((uint64_t)&v687, (int)v73);
  if ((int)v73 >= 1)
  {
    v76 = (int *)v687;
    do
    {
      *v76++ = v72;
      --v73;
    }
    while (v73);
  }
  v65 = 0;
  v674 = 0;
  v68 = 0;
  v639 = 0;
  v640 = 0;
  v664 = 0;
  v671 = 0uLL;
  v642 = 0;
  v643 = 0;
  v77 = 0;
  v78 = 0;
  v636 = 0;
LABEL_47:
  objc_msgSend_indexBuffer(v647, v74, v75);
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_map(v117, v118, v119);
  v638 = (void *)objc_claimAutoreleasedReturnValue();

  __p = 0;
  v685 = 0;
  v686 = 0;
  if (objc_msgSend_indexType(v647, v120, v121) == 32)
  {
    v124 = objc_msgSend_bytes(v638, v122, v123);
  }
  else
  {
    v125 = objc_msgSend_indexCount(v647, v122, v123);
    sub_1DCB01460(&__p, v125);
    v128 = objc_msgSend_indexType(v647, v126, v127);
    if (v128 == 8)
    {
      v655 = v68;
      v658 = v65;
      v145 = objc_msgSend_bytes(v638, v129, v130);
      if (v125)
      {
        v146 = v145;
        v147 = 0;
        v148 = v685;
        do
        {
          v149 = *(unsigned __int8 *)(v146 + v147);
          if (v148 >= v686)
          {
            v151 = (char *)__p;
            v152 = (v148 - (_BYTE *)__p) >> 2;
            v153 = v152 + 1;
            if ((unint64_t)(v152 + 1) >> 62)
              sub_1DCAE4C44();
            v154 = v686 - (_BYTE *)__p;
            if ((v686 - (_BYTE *)__p) >> 1 > v153)
              v153 = v154 >> 1;
            if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL)
              v155 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v155 = v153;
            if (v155)
            {
              v156 = (char *)sub_1DCAE4D04((uint64_t)&v686, v155);
              v151 = (char *)__p;
              v148 = v685;
            }
            else
            {
              v156 = 0;
            }
            v157 = &v156[4 * v152];
            *(_DWORD *)v157 = v149;
            v150 = v157 + 4;
            while (v148 != v151)
            {
              v158 = *((_DWORD *)v148 - 1);
              v148 -= 4;
              *((_DWORD *)v157 - 1) = v158;
              v157 -= 4;
            }
            __p = v157;
            v685 = v150;
            v686 = &v156[4 * v155];
            if (v151)
              operator delete(v151);
          }
          else
          {
            *(_DWORD *)v148 = v149;
            v150 = v148 + 4;
          }
          v685 = v150;
          ++v147;
          v148 = v150;
        }
        while (v147 != v125);
      }
    }
    else
    {
      if (v128 != 16)
        goto LABEL_95;
      v655 = v68;
      v658 = v65;
      v131 = objc_msgSend_bytes(v638, v129, v130);
      if (v125)
      {
        v132 = v131;
        v133 = 0;
        v134 = v685;
        do
        {
          v135 = *(unsigned __int16 *)(v132 + 2 * v133);
          if (v134 >= v686)
          {
            v137 = (char *)__p;
            v138 = (v134 - (_BYTE *)__p) >> 2;
            v139 = v138 + 1;
            if ((unint64_t)(v138 + 1) >> 62)
              sub_1DCAE4C44();
            v140 = v686 - (_BYTE *)__p;
            if ((v686 - (_BYTE *)__p) >> 1 > v139)
              v139 = v140 >> 1;
            if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL)
              v141 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v141 = v139;
            if (v141)
            {
              v142 = (char *)sub_1DCAE4D04((uint64_t)&v686, v141);
              v137 = (char *)__p;
              v134 = v685;
            }
            else
            {
              v142 = 0;
            }
            v143 = &v142[4 * v138];
            *(_DWORD *)v143 = v135;
            v136 = v143 + 4;
            while (v134 != v137)
            {
              v144 = *((_DWORD *)v134 - 1);
              v134 -= 4;
              *((_DWORD *)v143 - 1) = v144;
              v143 -= 4;
            }
            __p = v143;
            v685 = v136;
            v686 = &v142[4 * v141];
            if (v137)
              operator delete(v137);
          }
          else
          {
            *(_DWORD *)v134 = v135;
            v136 = v134 + 4;
          }
          v685 = v136;
          ++v133;
          v134 = v136;
        }
        while (v133 != v125);
      }
    }
    v124 = (uint64_t)__p;
    v6 = v646;
    v68 = v655;
    v65 = v658;
  }
  v683 = 0;
  v681 = 0u;
  v682 = 0u;
  v679 = 0u;
  v680 = 0u;
  v677 = 0u;
  v678 = 0u;
  OpenSubdiv::__aapl__::Far::TopologyDescriptor::TopologyDescriptor((OpenSubdiv::__aapl__::Far::TopologyDescriptor *)&v677);
  v683 = 0;
  v681 = 0u;
  v682 = 0u;
  v679 = 0u;
  v680 = 0u;
  v677 = 0u;
  v678 = 0u;
  LODWORD(v677) = objc_msgSend_vertexCount(v6, v159, v160);
  DWORD1(v677) = (unint64_t)(v688 - (_BYTE *)v687) >> 2;
  *((_QWORD *)&v677 + 1) = v687;
  *(_QWORD *)&v678 = v124;
  DWORD2(v678) = v664;
  v679 = v671;
  LODWORD(v680) = v65;
  *((_QWORD *)&v680 + 1) = v674;
  *(_QWORD *)&v681 = v68;
  DWORD2(v681) = v77;
  *(_QWORD *)&v682 = v78;
  v161 = sub_1DCB4CD7C();
  if (v161)
  {
    OpenSubdiv::__aapl__::Far::TopologyRefiner::RefineUniform();
    v654 = v161;
    v164 = *((int *)v161 + 5);
    if ((_DWORD)v164)
    {
      if ((v164 & 0x80000000) != 0)
        sub_1DCAE4C44();
      v672 = operator new(12 * v164);
    }
    else
    {
      v672 = 0;
    }
    objc_msgSend_vertexBuffers(v6, v162, v163);
    v165 = (void *)objc_claimAutoreleasedReturnValue();
    v168 = objc_msgSend_bufferIndex(v645, v166, v167);
    objc_msgSend_objectAtIndexedSubscript_(v165, v169, v168);
    v635 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_map(v635, v170, v171);
    v633 = (void *)objc_claimAutoreleasedReturnValue();
    v174 = objc_msgSend_bytes(v633, v172, v173);
    v177 = objc_msgSend_offset(v645, v175, v176);
    objc_msgSend_vertexDescriptor(v6, v178, v179);
    v180 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_layouts(v180, v181, v182);
    v183 = (void *)objc_claimAutoreleasedReturnValue();
    v186 = objc_msgSend_bufferIndex(v645, v184, v185);
    objc_msgSend_objectAtIndexedSubscript_(v183, v187, v186);
    v188 = (void *)objc_claimAutoreleasedReturnValue();
    v191 = objc_msgSend_stride(v188, v189, v190);

    v193 = v677;
    if ((int)v677 >= 1)
    {
      v194 = (double *)(v672 + 2);
      v195 = (double *)(v177 + v174 + 8);
      do
      {
        v196 = *(_DWORD *)v195;
        v192 = *(v195 - 1);
        *(v194 - 1) = v192;
        *(_DWORD *)v194 = v196;
        v194 = (double *)((char *)v194 + 12);
        v195 = (double *)((char *)v195 + 4 * (v191 >> 2));
        --v193;
      }
      while (v193);
    }
    if ((int)a3 >= 1)
    {
      v197 = 1;
      v198 = v672;
      while (1)
      {
        v199 = v198;
        v200 = v197 - 1;
        v198 += 3 * *(int *)(*(_QWORD *)(*((_QWORD *)v654 + 12) + 24 * (v197 - 1)) + 8);
        v201 = *(_DWORD *)v654;
        v675 = v198;
        if (!*(_DWORD *)v654)
          break;
        if (v201 == 2)
        {
          v649 = v197;
          v225 = *(_QWORD *)(*((_QWORD *)v654 + 9) + 8 * v200);
          v226 = *(unsigned int **)(v225 + 8);
          if (*(_DWORD *)(v225 + 52))
          {
            v227 = 0;
            v228 = (float *)&v703;
            v705 = 0u;
            v706 = 0u;
            v703 = 0u;
            v704 = 0u;
            v229 = v226[5];
            v701 = &v703;
            v702 = v229 | 0x1000000000;
            *(_QWORD *)&v707 = 0;
            if (v229 >= 0x11)
            {
              v227 = operator new(4 * v229);
              *(_QWORD *)&v707 = v227;
              v701 = v227;
              v228 = (float *)v227;
              HIDWORD(v702) = v229;
              v198 = v675;
            }
            v230 = *v226;
            if ((int)v230 >= 1)
            {
              v231 = 0;
              v232 = *(_QWORD *)(v225 + 168);
              do
              {
                v233 = *(_DWORD *)(v232 + 4 * v231);
                if (v233 != -1)
                {
                  v234 = (unsigned int *)(*((_QWORD *)v226 + 3) + 8 * v231);
                  v235 = *v234;
                  if ((int)v235 < 1)
                  {
                    v246 = &v198[3 * v233];
                    v246[2] = 0;
                    *(_QWORD *)v246 = 0;
                  }
                  else
                  {
                    v236 = (int *)(*((_QWORD *)v226 + 6) + 4 * (int)v234[1]);
                    v237 = v228;
                    v238 = v235;
                    do
                    {
                      *v237++ = 1.0 / (float)(int)v235;
                      --v238;
                    }
                    while (v238);
                    v239 = (float *)&v198[3 * v233];
                    v239[2] = 0.0;
                    v240 = 0;
                    *(_QWORD *)v239 = 0;
                    v241 = 0.0;
                    v242 = v228;
                    do
                    {
                      v243 = *v236++;
                      v244 = (float32x2_t *)&v199[3 * v243];
                      v245 = *v242++;
                      v240 = vmla_n_f32(v240, *v244, v245);
                      *(float32x2_t *)v239 = v240;
                      v241 = v241 + (float)(v244[1].f32[0] * v245);
                      v239[2] = v241;
                      --v235;
                    }
                    while (v235);
                  }
                }
                ++v231;
              }
              while (v231 != v230);
            }
            operator delete(v227);
            v247 = v654;
            v225 = *(_QWORD *)(*((_QWORD *)v654 + 9) + 8 * v200);
            v226 = *(unsigned int **)(v225 + 8);
          }
          else
          {
            v247 = v654;
          }
          v294 = 0;
          v665 = *(_QWORD *)(v225 + 16);
          v694 = *((float *)v247 + 1);
          v695 = v226;
          v696 = 0;
          HIDWORD(v295) = 0;
          v703 = 0u;
          v704 = 0u;
          v296 = v226[4];
          v700 = 0;
          v701 = &v703;
          v702 = v296 | 0x800000000;
          *(_QWORD *)&v705 = 0;
          if (v296 >= 9)
          {
            v294 = operator new(4 * v296);
            *(_QWORD *)&v705 = v294;
            v701 = v294;
            HIDWORD(v702) = v296;
          }
          v297 = v226[1];
          if (v297 >= 1)
          {
            v659 = v197 - 1;
            for (i = 0; i < v297; ++i)
            {
              v299 = *(int *)(*(_QWORD *)(v225 + 216) + 4 * i);
              if ((_DWORD)v299 != -1)
              {
                v300 = *((_QWORD *)v226 + 15);
                v301 = *((_QWORD *)v226 + 21);
                v302 = (unsigned int *)(*((_QWORD *)v226 + 18) + 8 * i);
                v303 = *v302;
                v304 = (int)v302[1];
                v690 = (float *)&v700;
                v691 = 0;
                HIDWORD(v693) = 0;
                v692 = v701;
                *(_QWORD *)&v693 = 0;
                *(_QWORD *)((char *)&v693 + 5) = 0;
                LODWORD(v696) = i;
                LODWORD(v295) = *(_DWORD *)(*((_QWORD *)v226 + 27) + 4 * i);
                if (*(float *)&v295 <= 0.0)
                  v305 = 1;
                else
                  v305 = 4;
                sub_1DCB4D9C0(&v694, (int *)&v695, (uint64_t)&v690, v305, (*(unsigned __int16 *)(*(_QWORD *)(v665 + 432) + 2 * v299) >> 7) & 0xF, v295, v192);
                v306 = (int *)(v300 + 8 * i);
                v307 = (float *)&v675[3 * (int)v299];
                v307[2] = 0.0;
                *(_QWORD *)v307 = 0;
                v308 = (float *)&v199[3 * *v306];
                v310 = *((float *)&v700 + 1);
                v309 = *(float *)&v700;
                *(float *)&v295 = *v308 * *(float *)&v700;
                *(float *)&v192 = v308[1] * *(float *)&v700;
                *v307 = *(float *)&v295;
                v307[1] = *(float *)&v192;
                v311 = v308[2] * v309;
                v307[2] = v311;
                v312 = (float *)&v199[3 * v306[1]];
                *(float *)&v295 = *(float *)&v295 + (float)(*v312 * v310);
                *(float *)&v192 = *(float *)&v192 + (float)(v312[1] * v310);
                *v307 = *(float *)&v295;
                v307[1] = *(float *)&v192;
                v313 = v311 + (float)(v312[2] * v310);
                v307[2] = v313;
                if (SDWORD2(v693) >= 1 && (int)v303 >= 1)
                {
                  v314 = 0;
                  v315 = BYTE12(v693);
                  v316 = (float *)v701;
                  do
                  {
                    v317 = *(int *)(v301 + 4 * v304 + 4 * v314);
                    if (v315)
                    {
                      v318 = (int *)(*(_QWORD *)(v225 + 168) + 4 * v317);
                      v319 = v675;
                    }
                    else
                    {
                      v320 = 0;
                      v321 = *((_QWORD *)v226 + 3);
                      v322 = *(int *)(v321 + 8 * (_DWORD)v317 + 4);
                      v323 = *(_DWORD *)(v321 + 8 * v317);
                      do
                        v324 = *(unsigned int *)(*((_QWORD *)v226 + 9) + 4 * v322 + 4 * v320++);
                      while (i != v324);
                      v325 = *((_QWORD *)v226 + 6) + 4 * v322;
                      if ((int)v320 + 1 < v323)
                        v323 = 0;
                      v318 = (int *)(v325 + 4 * ((int)v320 - v323 + 1));
                      v319 = v199;
                    }
                    v326 = v316[v314];
                    v327 = (float *)&v319[3 * *v318];
                    *(float *)&v295 = *(float *)&v295 + (float)(*v327 * v326);
                    *v307 = *(float *)&v295;
                    *(float *)&v192 = *(float *)&v192 + (float)(v327[1] * v326);
                    v307[1] = *(float *)&v192;
                    v313 = v313 + (float)(v327[2] * v326);
                    v307[2] = v313;
                    ++v314;
                  }
                  while (v314 != v303);
                }
                v297 = v226[1];
              }
            }
            v294 = (void *)v705;
            v200 = v659;
          }
          operator delete(v294);
          v328 = 0;
          v329 = *(_QWORD **)(*((_QWORD *)v654 + 9) + 8 * v200);
          v331 = (unsigned int *)v329[1];
          v330 = v329[2];
          LODWORD(v700) = *((_DWORD *)v654 + 1);
          v697 = 0;
          v698 = 0;
          v695 = v331;
          v696 = v330;
          v652 = v330;
          v709 = 0u;
          v710 = 0u;
          v707 = 0u;
          v708 = 0u;
          v705 = 0u;
          v706 = 0u;
          v703 = 0u;
          v704 = 0u;
          v332 = 2 * v331[5];
          v701 = &v703;
          v702 = v332 | 0x2000000000;
          v711 = 0;
          if (v332 >= 0x21)
          {
            v328 = operator new(4 * v332);
            v711 = v328;
            v701 = v328;
            HIDWORD(v702) = v332;
          }
          v333 = v331[2];
          if (v333 >= 1)
          {
            v334 = 0;
            v650 = v331;
            do
            {
              v335 = *(_DWORD *)(v329[30] + 4 * v334);
              if (v335 != -1)
              {
                v336 = *((_QWORD *)v331 + 42);
                v337 = (8 * v334) | 4;
                v660 = *(int *)(v336 + v337);
                v338 = *(int *)(v336 + 8 * v334);
                v339 = *(_DWORD *)(v329[30] + 4 * v334);
                v340 = *((_QWORD *)v331 + 33);
                v341 = *(int *)(v340 + v337);
                v342 = *(unsigned int *)(v340 + 8 * v334);
                v656 = *((_QWORD *)v331 + 45);
                v694 = 0.0;
                v343 = v701;
                v666 = v338;
                v344 = (char *)v701 + 4 * v338;
                v690 = &v694;
                v691 = v701;
                HIDWORD(v693) = 0;
                v692 = v344;
                *(_QWORD *)&v693 = 0;
                *(_QWORD *)((char *)&v693 + 5) = 0;
                v697 = __PAIR64__(v335, v334);
                LODWORD(v698) = *(_DWORD *)(*((_QWORD *)v695 + 42) + 8 * v334);
                HIDWORD(v698) = *(_DWORD *)(*((_QWORD *)v695 + 33) + 8 * v334);
                LODWORD(v340) = *(unsigned __int16 *)(*((_QWORD *)v331 + 54) + 2 * v334);
                v345 = *((_QWORD *)v331 + 36);
                sub_1DCB4DB98((int *)&v700, (uint64_t)&v695, (uint64_t)&v690, (v340 >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v652 + 432) + 2 * (int)v335) >> 7) & 0xF);
                v346 = (float *)&v675[3 * v339];
                v346[2] = 0.0;
                v347 = 0;
                *(_QWORD *)v346 = 0;
                v348 = 0.0;
                if (SDWORD2(v693) >= 1 && (int)v342 >= 1)
                {
                  v349 = (int *)(v345 + 4 * v341);
                  v350 = v329[21];
                  do
                  {
                    v351 = *v349++;
                    v352 = (float32x2_t *)&v675[3 * *(int *)(v350 + 4 * v351)];
                    LODWORD(v351) = *v344++;
                    v347 = vmla_n_f32(v347, *v352, *(float *)&v351);
                    *(float32x2_t *)v346 = v347;
                    v348 = v348 + (float)(v352[1].f32[0] * *(float *)&v351);
                    v346[2] = v348;
                    --v342;
                  }
                  while (v342);
                }
                v353 = v666;
                if (SDWORD1(v693) < 1 || v666 < 1)
                {
                  v331 = v650;
                }
                else
                {
                  v355 = (int *)(v656 + 4 * v660);
                  v331 = v650;
                  v356 = *((_QWORD *)v650 + 15);
                  do
                  {
                    v357 = *v355++;
                    v358 = (float32x2_t *)&v199[3
                                              * *(int *)(v356 + 8 * v357 + 4 * (v334 == *(_DWORD *)(v356 + 8 * v357)))];
                    LODWORD(v357) = *v343++;
                    v347 = vmla_n_f32(v347, *v358, *(float *)&v357);
                    *(float32x2_t *)v346 = v347;
                    v348 = v348 + (float)(v358[1].f32[0] * *(float *)&v357);
                    v346[2] = v348;
                    --v353;
                  }
                  while (v353);
                }
                v359 = (float32x2_t *)&v199[3 * v334];
                v360 = v694;
                *(float32x2_t *)v346 = vmla_n_f32(v347, *v359, v694);
                v346[2] = v348 + (float)(v359[1].f32[0] * v360);
                v333 = v331[2];
              }
              ++v334;
            }
            while (v334 < v333);
LABEL_248:
            v328 = v711;
          }
LABEL_249:
          operator delete(v328);
          v197 = v649;
LABEL_250:
          v198 = v675;
          goto LABEL_251;
        }
        if (v201 == 1)
        {
          v649 = v197;
          v202 = *(_QWORD *)(*((_QWORD *)v654 + 9) + 8 * v200);
          v203 = *(unsigned int **)(v202 + 8);
          if (*(_DWORD *)(v202 + 52))
          {
            v204 = 0;
            v205 = (float *)&v703;
            v705 = 0u;
            v706 = 0u;
            v703 = 0u;
            v704 = 0u;
            v206 = v203[5];
            v701 = &v703;
            v702 = v206 | 0x1000000000;
            *(_QWORD *)&v707 = 0;
            if (v206 >= 0x11)
            {
              v204 = operator new(4 * v206);
              *(_QWORD *)&v707 = v204;
              v701 = v204;
              v205 = (float *)v204;
              HIDWORD(v702) = v206;
              v198 = v675;
            }
            v207 = *v203;
            if ((int)v207 >= 1)
            {
              v208 = 0;
              v209 = *(_QWORD *)(v202 + 168);
              do
              {
                v210 = *(_DWORD *)(v209 + 4 * v208);
                if (v210 != -1)
                {
                  v211 = (unsigned int *)(*((_QWORD *)v203 + 3) + 8 * v208);
                  v212 = *v211;
                  if ((int)v212 < 1)
                  {
                    v223 = &v198[3 * v210];
                    v223[2] = 0;
                    *(_QWORD *)v223 = 0;
                  }
                  else
                  {
                    v213 = (int *)(*((_QWORD *)v203 + 6) + 4 * (int)v211[1]);
                    v214 = v205;
                    v215 = v212;
                    do
                    {
                      *v214++ = 1.0 / (float)(int)v212;
                      --v215;
                    }
                    while (v215);
                    v216 = (float *)&v198[3 * v210];
                    v216[2] = 0.0;
                    v217 = 0;
                    *(_QWORD *)v216 = 0;
                    v218 = 0.0;
                    v219 = v205;
                    do
                    {
                      v220 = *v213++;
                      v221 = (float32x2_t *)&v199[3 * v220];
                      v222 = *v219++;
                      v217 = vmla_n_f32(v217, *v221, v222);
                      *(float32x2_t *)v216 = v217;
                      v218 = v218 + (float)(v221[1].f32[0] * v222);
                      v216[2] = v218;
                      --v212;
                    }
                    while (v212);
                  }
                }
                ++v208;
              }
              while (v208 != v207);
            }
            operator delete(v204);
            v224 = v654;
            v202 = *(_QWORD *)(*((_QWORD *)v654 + 9) + 8 * v200);
            v203 = *(unsigned int **)(v202 + 8);
          }
          else
          {
            v224 = v654;
          }
          v361 = 0;
          v667 = *(_QWORD *)(v202 + 16);
          v694 = *((float *)v224 + 1);
          v695 = v203;
          v696 = 0;
          HIDWORD(v362) = 0;
          v703 = 0u;
          v704 = 0u;
          v363 = v203[4];
          v700 = 0;
          v701 = &v703;
          v702 = v363 | 0x800000000;
          *(_QWORD *)&v705 = 0;
          if (v363 >= 9)
          {
            v361 = operator new(4 * v363);
            *(_QWORD *)&v705 = v361;
            v701 = v361;
            HIDWORD(v702) = v363;
          }
          v364 = v203[1];
          if (v364 >= 1)
          {
            v661 = v197 - 1;
            for (j = 0; j < v364; ++j)
            {
              v366 = *(int *)(*(_QWORD *)(v202 + 216) + 4 * j);
              if ((_DWORD)v366 != -1)
              {
                v367 = *((_QWORD *)v203 + 15);
                v368 = *((_QWORD *)v203 + 21);
                v369 = (unsigned int *)(*((_QWORD *)v203 + 18) + 8 * j);
                v370 = *v369;
                v371 = (int)v369[1];
                v690 = (float *)&v700;
                v691 = 0;
                HIDWORD(v693) = 0;
                v692 = v701;
                *(_QWORD *)&v693 = 0;
                *(_QWORD *)((char *)&v693 + 5) = 0;
                LODWORD(v696) = j;
                LODWORD(v362) = *(_DWORD *)(*((_QWORD *)v203 + 27) + 4 * j);
                if (*(float *)&v362 <= 0.0)
                  v372 = 1;
                else
                  v372 = 4;
                sub_1DCB4CEF0((int *)&v694, (int *)&v695, (uint64_t)&v690, v372, (*(unsigned __int16 *)(*(_QWORD *)(v667 + 432) + 2 * v366) >> 7) & 0xF, v362, v192);
                v373 = (int *)(v367 + 8 * j);
                v374 = (float *)&v675[3 * (int)v366];
                v374[2] = 0.0;
                *(_QWORD *)v374 = 0;
                v375 = (float *)&v199[3 * *v373];
                v377 = *((float *)&v700 + 1);
                v376 = *(float *)&v700;
                *(float *)&v362 = *v375 * *(float *)&v700;
                *(float *)&v192 = v375[1] * *(float *)&v700;
                *v374 = *(float *)&v362;
                v374[1] = *(float *)&v192;
                v378 = v375[2] * v376;
                v374[2] = v378;
                v379 = (float *)&v199[3 * v373[1]];
                *(float *)&v362 = *(float *)&v362 + (float)(*v379 * v377);
                *(float *)&v192 = *(float *)&v192 + (float)(v379[1] * v377);
                *v374 = *(float *)&v362;
                v374[1] = *(float *)&v192;
                v380 = v378 + (float)(v379[2] * v377);
                v374[2] = v380;
                if (SDWORD2(v693) >= 1 && (int)v370 >= 1)
                {
                  v381 = 0;
                  v382 = BYTE12(v693);
                  v383 = (float *)v701;
                  do
                  {
                    v384 = *(int *)(v368 + 4 * v371 + 4 * v381);
                    if (v382)
                    {
                      v385 = (int *)(*(_QWORD *)(v202 + 168) + 4 * v384);
                      v386 = v675;
                    }
                    else
                    {
                      v387 = 0;
                      v388 = *((_QWORD *)v203 + 3);
                      v389 = *(int *)(v388 + 8 * (_DWORD)v384 + 4);
                      v390 = *(_DWORD *)(v388 + 8 * v384);
                      do
                        v391 = *(unsigned int *)(*((_QWORD *)v203 + 9) + 4 * v389 + 4 * v387++);
                      while (j != v391);
                      v392 = *((_QWORD *)v203 + 6) + 4 * v389;
                      if ((int)v387 + 1 < v390)
                        v390 = 0;
                      v385 = (int *)(v392 + 4 * ((int)v387 - v390 + 1));
                      v386 = v199;
                    }
                    v393 = v383[v381];
                    v394 = (float *)&v386[3 * *v385];
                    *(float *)&v362 = *(float *)&v362 + (float)(*v394 * v393);
                    *v374 = *(float *)&v362;
                    *(float *)&v192 = *(float *)&v192 + (float)(v394[1] * v393);
                    v374[1] = *(float *)&v192;
                    v380 = v380 + (float)(v394[2] * v393);
                    v374[2] = v380;
                    ++v381;
                  }
                  while (v381 != v370);
                }
                v364 = v203[1];
              }
            }
            v361 = (void *)v705;
            v200 = v661;
          }
          operator delete(v361);
          v328 = 0;
          v395 = *(_QWORD **)(*((_QWORD *)v654 + 9) + 8 * v200);
          v397 = (unsigned int *)v395[1];
          v396 = v395[2];
          LODWORD(v700) = *((_DWORD *)v654 + 1);
          v697 = 0;
          v698 = 0;
          v695 = v397;
          v696 = v396;
          v653 = v396;
          v709 = 0u;
          v710 = 0u;
          v707 = 0u;
          v708 = 0u;
          v705 = 0u;
          v706 = 0u;
          v703 = 0u;
          v704 = 0u;
          v398 = 2 * v397[5];
          v701 = &v703;
          v702 = v398 | 0x2000000000;
          v711 = 0;
          if (v398 >= 0x21)
          {
            v328 = operator new(4 * v398);
            v711 = v328;
            v701 = v328;
            HIDWORD(v702) = v398;
          }
          v399 = v397[2];
          if (v399 >= 1)
          {
            v400 = 0;
            v651 = v397;
            do
            {
              v401 = *(_DWORD *)(v395[30] + 4 * v400);
              if (v401 != -1)
              {
                v402 = *((_QWORD *)v397 + 42);
                v403 = (8 * v400) | 4;
                v662 = *(int *)(v402 + v403);
                v404 = *(int *)(v402 + 8 * v400);
                v405 = *(_DWORD *)(v395[30] + 4 * v400);
                v406 = *((_QWORD *)v397 + 33);
                v407 = *(int *)(v406 + v403);
                v408 = *(unsigned int *)(v406 + 8 * v400);
                v657 = *((_QWORD *)v397 + 45);
                v694 = 0.0;
                v409 = v701;
                v668 = v404;
                v410 = (char *)v701 + 4 * v404;
                v690 = &v694;
                v691 = v701;
                HIDWORD(v693) = 0;
                v692 = v410;
                *(_QWORD *)&v693 = 0;
                *(_QWORD *)((char *)&v693 + 5) = 0;
                v697 = __PAIR64__(v401, v400);
                LODWORD(v698) = *(_DWORD *)(*((_QWORD *)v695 + 42) + 8 * v400);
                HIDWORD(v698) = *(_DWORD *)(*((_QWORD *)v695 + 33) + 8 * v400);
                LODWORD(v406) = *(unsigned __int16 *)(*((_QWORD *)v397 + 54) + 2 * v400);
                v411 = *((_QWORD *)v397 + 36);
                sub_1DCB4D2B0((int *)&v700, (uint64_t)&v695, (uint64_t)&v690, (v406 >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v653 + 432) + 2 * (int)v401) >> 7) & 0xF);
                v412 = (float *)&v675[3 * v405];
                v412[2] = 0.0;
                v413 = 0;
                *(_QWORD *)v412 = 0;
                v414 = 0.0;
                if (SDWORD2(v693) >= 1 && (int)v408 >= 1)
                {
                  v415 = (int *)(v411 + 4 * v407);
                  v416 = v395[21];
                  do
                  {
                    v417 = *v415++;
                    v418 = (float32x2_t *)&v675[3 * *(int *)(v416 + 4 * v417)];
                    LODWORD(v417) = *v410++;
                    v413 = vmla_n_f32(v413, *v418, *(float *)&v417);
                    *(float32x2_t *)v412 = v413;
                    v414 = v414 + (float)(v418[1].f32[0] * *(float *)&v417);
                    v412[2] = v414;
                    --v408;
                  }
                  while (v408);
                }
                v419 = v668;
                if (SDWORD1(v693) < 1 || v668 < 1)
                {
                  v397 = v651;
                }
                else
                {
                  v421 = (int *)(v657 + 4 * v662);
                  v397 = v651;
                  v422 = *((_QWORD *)v651 + 15);
                  do
                  {
                    v423 = *v421++;
                    v424 = (float32x2_t *)&v199[3
                                              * *(int *)(v422 + 8 * v423 + 4 * (v400 == *(_DWORD *)(v422 + 8 * v423)))];
                    LODWORD(v423) = *v409++;
                    v413 = vmla_n_f32(v413, *v424, *(float *)&v423);
                    *(float32x2_t *)v412 = v413;
                    v414 = v414 + (float)(v424[1].f32[0] * *(float *)&v423);
                    v412[2] = v414;
                    --v419;
                  }
                  while (v419);
                }
                v425 = (float32x2_t *)&v199[3 * v400];
                v426 = v694;
                *(float32x2_t *)v412 = vmla_n_f32(v413, *v425, v694);
                v412[2] = v414 + (float)(v425[1].f32[0] * v426);
                v399 = v397[2];
              }
              ++v400;
            }
            while (v400 < v399);
            goto LABEL_248;
          }
          goto LABEL_249;
        }
LABEL_251:
        if (++v197 == (_DWORD)a3 + 1)
          goto LABEL_252;
      }
      v248 = *(_QWORD *)(*((_QWORD *)v654 + 9) + 8 * v200);
      v249 = *(unsigned int **)(v248 + 8);
      if (*(_DWORD *)(v248 + 52))
      {
        v250 = 0;
        v251 = (float *)&v703;
        v705 = 0u;
        v706 = 0u;
        v703 = 0u;
        v704 = 0u;
        v252 = v249[5];
        v701 = &v703;
        v702 = v252 | 0x1000000000;
        *(_QWORD *)&v707 = 0;
        if (v252 >= 0x11)
        {
          v250 = operator new(4 * v252);
          *(_QWORD *)&v707 = v250;
          v701 = v250;
          v251 = (float *)v250;
          HIDWORD(v702) = v252;
          v198 = v675;
        }
        v253 = *v249;
        if ((int)v253 >= 1)
        {
          v254 = 0;
          v255 = *(_QWORD *)(v248 + 168);
          do
          {
            v256 = *(_DWORD *)(v255 + 4 * v254);
            if (v256 != -1)
            {
              v257 = (unsigned int *)(*((_QWORD *)v249 + 3) + 8 * v254);
              v258 = *v257;
              if ((int)v258 < 1)
              {
                v269 = &v198[3 * v256];
                v269[2] = 0;
                *(_QWORD *)v269 = 0;
              }
              else
              {
                v259 = (int *)(*((_QWORD *)v249 + 6) + 4 * (int)v257[1]);
                v260 = v251;
                v261 = v258;
                do
                {
                  *v260++ = 1.0 / (float)(int)v258;
                  --v261;
                }
                while (v261);
                v262 = (float *)&v198[3 * v256];
                v262[2] = 0.0;
                v263 = 0;
                *(_QWORD *)v262 = 0;
                v264 = 0.0;
                v265 = v251;
                do
                {
                  v266 = *v259++;
                  v267 = (float32x2_t *)&v199[3 * v266];
                  v268 = *v265++;
                  v263 = vmla_n_f32(v263, *v267, v268);
                  *(float32x2_t *)v262 = v263;
                  v264 = v264 + (float)(v267[1].f32[0] * v268);
                  v262[2] = v264;
                  --v258;
                }
                while (v258);
              }
            }
            ++v254;
          }
          while (v254 != v253);
        }
        operator delete(v250);
        v198 = v675;
        v248 = *(_QWORD *)(*((_QWORD *)v654 + 9) + 8 * v200);
        v249 = *(unsigned int **)(v248 + 8);
      }
      v270 = 0;
      v703 = 0u;
      v704 = 0u;
      v271 = v249[4];
      v701 = &v703;
      v702 = v271 | 0x800000000;
      *(_QWORD *)&v705 = 0;
      if (v271 >= 9)
      {
        v270 = operator new(4 * v271);
        *(_QWORD *)&v705 = v270;
        v701 = v270;
        HIDWORD(v702) = v271;
        v198 = v675;
      }
      v272 = v249[1];
      if ((int)v272 >= 1)
      {
        v273 = 0;
        v274 = *(int **)(v248 + 216);
        v275 = 8 * v272;
        do
        {
          v277 = *v274++;
          v276 = v277;
          if (v277 != -1)
          {
            v278 = (int *)(*((_QWORD *)v249 + 15) + v273);
            v279 = (float *)&v198[3 * v276];
            v279[2] = 0.0;
            *(_QWORD *)v279 = 0;
            v280 = (float32x2_t *)&v199[3 * *v278];
            v281 = v280[1].f32[0] * 0.5;
            v279[2] = v281;
            v282 = (float32x2_t *)&v199[3 * v278[1]];
            v283 = vmul_f32(*v280, (float32x2_t)0x3F0000003F000000);
            *(float32x2_t *)v279 = v283;
            *(float32x2_t *)v279 = vmla_f32(v283, (float32x2_t)0x3F0000003F000000, *v282);
            v279[2] = v281 + (float)(v282[1].f32[0] * 0.5);
          }
          v273 += 8;
        }
        while (v275 != v273);
      }
      operator delete(v270);
      v284 = 0;
      v285 = *(_QWORD *)(*((_QWORD *)v654 + 9) + 8 * v200);
      v286 = *(_QWORD *)(v285 + 8);
      v709 = 0u;
      v710 = 0u;
      v707 = 0u;
      v708 = 0u;
      v705 = 0u;
      v706 = 0u;
      v703 = 0u;
      v704 = 0u;
      v287 = 2 * *(_DWORD *)(v286 + 20);
      v701 = &v703;
      v702 = v287 | 0x2000000000;
      v711 = 0;
      if (v287 >= 0x21)
      {
        v284 = operator new(4 * v287);
        v711 = v284;
        v701 = v284;
        HIDWORD(v702) = v287;
      }
      v288 = *(unsigned int *)(v286 + 8);
      if ((int)v288 >= 1)
      {
        v289 = *(int **)(v285 + 240);
        v290 = v199 + 2;
        do
        {
          v292 = *v289++;
          v291 = v292;
          if (v292 != -1)
          {
            v293 = &v675[3 * v291];
            v293[2] = 0;
            *(_QWORD *)v293 = 0;
            *(_QWORD *)v293 = *((_QWORD *)v290 - 1);
            v293[2] = *v290;
          }
          v290 += 3;
          --v288;
        }
        while (v288);
      }
      operator delete(v284);
      goto LABEL_250;
    }
LABEL_252:
    v427 = v654;
    v676 = (unsigned int **)(*((_QWORD *)v654 + 12) + 24 * (int)a3);
    v673 = (int)(*v676)[2];
    v701 = 0;
    v702 = 0;
    *(_QWORD *)&v703 = 0;
    sub_1DCB0BBF4(&v701, 3 * v673);
    v430 = v646;
    if ((a3 & 0x80000000) == 0)
    {
      v431 = 0;
      v432 = 0;
      v433 = (a3 + 1);
      v434 = a3;
      do
      {
        if (v431 == v434)
        {
          if ((_DWORD)v673)
          {
            v435 = 0;
            v669 = v432;
            v436 = (int)v432;
            v437 = (char *)v702;
            do
            {
              v438 = &v672[3 * v435 + 3 * v436];
              v439 = (char *)v703;
              if ((unint64_t)v437 >= (unint64_t)v703)
              {
                v441 = (char *)v701;
                v442 = (v437 - (_BYTE *)v701) >> 2;
                v443 = v442 + 1;
                if ((unint64_t)(v442 + 1) >> 62)
                  goto LABEL_473;
                v444 = v703 - (_QWORD)v701;
                if ((uint64_t)(v703 - (_QWORD)v701) >> 1 > v443)
                  v443 = v444 >> 1;
                if ((unint64_t)v444 >= 0x7FFFFFFFFFFFFFFCLL)
                  v428 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v428 = v443;
                if (v428)
                {
                  v445 = (char *)sub_1DCAE4D04((uint64_t)&v703, v428);
                  v441 = (char *)v701;
                  v437 = (char *)v702;
                }
                else
                {
                  v445 = 0;
                }
                v446 = &v445[4 * v442];
                *(_DWORD *)v446 = *v438;
                v440 = v446 + 4;
                while (v437 != v441)
                {
                  v447 = *((_DWORD *)v437 - 1);
                  v437 -= 4;
                  *((_DWORD *)v446 - 1) = v447;
                  v446 -= 4;
                }
                v439 = &v445[4 * v428];
                v701 = v446;
                v702 = (uint64_t)v440;
                *(_QWORD *)&v703 = v439;
                if (v441)
                {
                  operator delete(v441);
                  v439 = (char *)v703;
                }
              }
              else
              {
                *(_DWORD *)v437 = *v438;
                v440 = v437 + 4;
              }
              v702 = (uint64_t)v440;
              if (v440 >= v439)
              {
                v449 = (char *)v701;
                v450 = (v440 - (_BYTE *)v701) >> 2;
                v451 = v450 + 1;
                if ((unint64_t)(v450 + 1) >> 62)
                  goto LABEL_473;
                v452 = v439 - (_BYTE *)v701;
                if (v452 >> 1 > v451)
                  v451 = v452 >> 1;
                if ((unint64_t)v452 >= 0x7FFFFFFFFFFFFFFCLL)
                  v428 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v428 = v451;
                if (v428)
                {
                  v453 = (char *)sub_1DCAE4D04((uint64_t)&v703, v428);
                  v449 = (char *)v701;
                  v440 = (char *)v702;
                }
                else
                {
                  v453 = 0;
                }
                v454 = &v453[4 * v450];
                *(_DWORD *)v454 = v438[1];
                v448 = v454 + 4;
                while (v440 != v449)
                {
                  v455 = *((_DWORD *)v440 - 1);
                  v440 -= 4;
                  *((_DWORD *)v454 - 1) = v455;
                  v454 -= 4;
                }
                v439 = &v453[4 * v428];
                v701 = v454;
                v702 = (uint64_t)v448;
                *(_QWORD *)&v703 = v439;
                if (v449)
                {
                  operator delete(v449);
                  v439 = (char *)v703;
                }
              }
              else
              {
                *(_DWORD *)v440 = v438[1];
                v448 = v440 + 4;
              }
              v702 = (uint64_t)v448;
              if (v448 >= v439)
              {
                v456 = (char *)v701;
                v457 = (v448 - (_BYTE *)v701) >> 2;
                v458 = v457 + 1;
                if ((unint64_t)(v457 + 1) >> 62)
LABEL_473:
                  sub_1DCAE4C44();
                v459 = v439 - (_BYTE *)v701;
                if (v459 >> 1 > v458)
                  v458 = v459 >> 1;
                if ((unint64_t)v459 >= 0x7FFFFFFFFFFFFFFCLL)
                  v428 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v428 = v458;
                if (v428)
                {
                  v460 = (char *)sub_1DCAE4D04((uint64_t)&v703, v428);
                  v456 = (char *)v701;
                  v448 = (char *)v702;
                }
                else
                {
                  v460 = 0;
                }
                v461 = &v460[4 * v457];
                *(_DWORD *)v461 = v438[2];
                v437 = v461 + 4;
                while (v448 != v456)
                {
                  v462 = *((_DWORD *)v448 - 1);
                  v448 -= 4;
                  *((_DWORD *)v461 - 1) = v462;
                  v461 -= 4;
                }
                v701 = v461;
                v702 = (uint64_t)v437;
                *(_QWORD *)&v703 = &v460[4 * v428];
                if (v456)
                  operator delete(v456);
              }
              else
              {
                *(_DWORD *)v448 = v438[2];
                v437 = v448 + 4;
              }
              v702 = (uint64_t)v437;
              ++v435;
            }
            while (v435 != v673);
            v430 = v646;
            v427 = v654;
            v434 = a3;
            v433 = (a3 + 1);
            v432 = v669;
          }
        }
        else
        {
          v432 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v427 + 12) + 24 * v431) + 8) + v432);
        }
        ++v431;
      }
      while (v431 != v433);
    }
    v463 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend_name(v430, (const char *)v428, v429);
    v464 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v463, v465, (uint64_t)CFSTR("%@_subd%d"), v464, a3);
    v670 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v466, (uint64_t)v701, v702 - (_QWORD)v701);
    v663 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_vertexBuffers(v430, v467, v468);
    v469 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v469, v470, 0);
    v471 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_allocator(v471, v472, v473);
    v474 = (void *)objc_claimAutoreleasedReturnValue();
    v476 = (void *)objc_msgSend_newBufferWithData_type_(v474, v475, (uint64_t)v663, 1);

    if (objc_msgSend_conformsToProtocol_(v476, v477, (uint64_t)&unk_1F03B6D88))
    {
      v478 = v476;
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v479, (uint64_t)CFSTR("%@-%@"), v670, CFSTR("position"));
      v480 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setName_(v478, v481, (uint64_t)v480);

    }
    v482 = (char *)__p;
    v685 = (char *)__p;
    v483 = **v676;
    if ((_DWORD)v483)
    {
      v484 = 0;
      while (1)
      {
        v485 = (_DWORD *)(*((_QWORD *)*v676 + 3) + 8 * v484);
        v486 = (_DWORD *)(*((_QWORD *)*v676 + 6) + 4 * (int)v485[1]);
        if (*v485 == 4)
          break;
        if (*v485 == 3)
        {
          v487 = v686;
          if (v482 >= v686)
          {
            v491 = (char *)__p;
            v492 = (v482 - (_BYTE *)__p) >> 2;
            v493 = v492 + 1;
            if ((unint64_t)(v492 + 1) >> 62)
              goto LABEL_474;
            v494 = v686 - (_BYTE *)__p;
            if ((v686 - (_BYTE *)__p) >> 1 > v493)
              v493 = v494 >> 1;
            if ((unint64_t)v494 >= 0x7FFFFFFFFFFFFFFCLL)
              v495 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v495 = v493;
            if (v495)
            {
              v496 = (char *)sub_1DCAE4D04((uint64_t)&v686, v495);
              v491 = (char *)__p;
              v482 = v685;
            }
            else
            {
              v496 = 0;
            }
            v503 = &v496[4 * v492];
            *(_DWORD *)v503 = *v486;
            v488 = v503 + 4;
            while (v482 != v491)
            {
              v504 = *((_DWORD *)v482 - 1);
              v482 -= 4;
              *((_DWORD *)v503 - 1) = v504;
              v503 -= 4;
            }
            v487 = &v496[4 * v495];
            __p = v503;
            v685 = v488;
            v686 = v487;
            if (v491)
            {
              operator delete(v491);
              v487 = v686;
            }
          }
          else
          {
            *(_DWORD *)v482 = *v486;
            v488 = v482 + 4;
          }
          v685 = v488;
          if (v488 >= v487)
          {
            v506 = (char *)__p;
            v507 = (v488 - (_BYTE *)__p) >> 2;
            v508 = v507 + 1;
            if ((unint64_t)(v507 + 1) >> 62)
              goto LABEL_474;
            v509 = v487 - (_BYTE *)__p;
            if (v509 >> 1 > v508)
              v508 = v509 >> 1;
            if ((unint64_t)v509 >= 0x7FFFFFFFFFFFFFFCLL)
              v510 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v510 = v508;
            if (v510)
            {
              v511 = (char *)sub_1DCAE4D04((uint64_t)&v686, v510);
              v506 = (char *)__p;
              v488 = v685;
            }
            else
            {
              v511 = 0;
            }
            v521 = &v511[4 * v507];
            *(_DWORD *)v521 = v486[1];
            v505 = v521 + 4;
            while (v488 != v506)
            {
              v522 = *((_DWORD *)v488 - 1);
              v488 -= 4;
              *((_DWORD *)v521 - 1) = v522;
              v521 -= 4;
            }
            v487 = &v511[4 * v510];
            __p = v521;
            v685 = v505;
            v686 = v487;
            if (v506)
            {
              operator delete(v506);
              v487 = v686;
            }
          }
          else
          {
            *(_DWORD *)v488 = v486[1];
            v505 = v488 + 4;
          }
          v685 = v505;
          if (v505 < v487)
          {
            v523 = v486[2];
            goto LABEL_443;
          }
          v524 = (char *)__p;
          v525 = (v505 - (_BYTE *)__p) >> 2;
          v526 = v525 + 1;
          if ((unint64_t)(v525 + 1) >> 62)
            goto LABEL_474;
          v527 = v487 - (_BYTE *)__p;
          if (v527 >> 1 > v526)
            v526 = v527 >> 1;
          if ((unint64_t)v527 >= 0x7FFFFFFFFFFFFFFCLL)
            v528 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v528 = v526;
          if (v528)
          {
            v529 = (char *)sub_1DCAE4D04((uint64_t)&v686, v528);
            v524 = (char *)__p;
            v505 = v685;
          }
          else
          {
            v529 = 0;
          }
          v539 = &v529[4 * v525];
          *(_DWORD *)v539 = v486[2];
          v482 = v539 + 4;
          while (v505 != v524)
          {
            v540 = *((_DWORD *)v505 - 1);
            v505 -= 4;
            *((_DWORD *)v539 - 1) = v540;
            v539 -= 4;
          }
LABEL_456:
          __p = v539;
          v685 = v482;
          v686 = &v529[4 * v528];
          if (v524)
            operator delete(v524);
          goto LABEL_458;
        }
LABEL_459:
        if (++v484 == v483)
          goto LABEL_460;
      }
      v489 = v686;
      if (v482 >= v686)
      {
        v497 = (char *)__p;
        v498 = (v482 - (_BYTE *)__p) >> 2;
        v499 = v498 + 1;
        if ((unint64_t)(v498 + 1) >> 62)
          goto LABEL_474;
        v500 = v686 - (_BYTE *)__p;
        if ((v686 - (_BYTE *)__p) >> 1 > v499)
          v499 = v500 >> 1;
        if ((unint64_t)v500 >= 0x7FFFFFFFFFFFFFFCLL)
          v501 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v501 = v499;
        if (v501)
        {
          v502 = (char *)sub_1DCAE4D04((uint64_t)&v686, v501);
          v497 = (char *)__p;
          v482 = v685;
        }
        else
        {
          v502 = 0;
        }
        v512 = &v502[4 * v498];
        *(_DWORD *)v512 = *v486;
        v490 = v512 + 4;
        while (v482 != v497)
        {
          v513 = *((_DWORD *)v482 - 1);
          v482 -= 4;
          *((_DWORD *)v512 - 1) = v513;
          v512 -= 4;
        }
        v489 = &v502[4 * v501];
        __p = v512;
        v685 = v490;
        v686 = v489;
        if (v497)
        {
          operator delete(v497);
          v489 = v686;
        }
      }
      else
      {
        *(_DWORD *)v482 = *v486;
        v490 = v482 + 4;
      }
      v685 = v490;
      if (v490 >= v489)
      {
        v515 = (char *)__p;
        v516 = (v490 - (_BYTE *)__p) >> 2;
        v517 = v516 + 1;
        if ((unint64_t)(v516 + 1) >> 62)
          goto LABEL_474;
        v518 = v489 - (_BYTE *)__p;
        if (v518 >> 1 > v517)
          v517 = v518 >> 1;
        if ((unint64_t)v518 >= 0x7FFFFFFFFFFFFFFCLL)
          v519 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v519 = v517;
        if (v519)
        {
          v520 = (char *)sub_1DCAE4D04((uint64_t)&v686, v519);
          v515 = (char *)__p;
          v490 = v685;
        }
        else
        {
          v520 = 0;
        }
        v530 = &v520[4 * v516];
        *(_DWORD *)v530 = v486[1];
        v514 = v530 + 4;
        while (v490 != v515)
        {
          v531 = *((_DWORD *)v490 - 1);
          v490 -= 4;
          *((_DWORD *)v530 - 1) = v531;
          v530 -= 4;
        }
        v489 = &v520[4 * v519];
        __p = v530;
        v685 = v514;
        v686 = v489;
        if (v515)
        {
          operator delete(v515);
          v489 = v686;
        }
      }
      else
      {
        *(_DWORD *)v490 = v486[1];
        v514 = v490 + 4;
      }
      v685 = v514;
      if (v514 >= v489)
      {
        v533 = (char *)__p;
        v534 = (v514 - (_BYTE *)__p) >> 2;
        v535 = v534 + 1;
        if ((unint64_t)(v534 + 1) >> 62)
          goto LABEL_474;
        v536 = v489 - (_BYTE *)__p;
        if (v536 >> 1 > v535)
          v535 = v536 >> 1;
        if ((unint64_t)v536 >= 0x7FFFFFFFFFFFFFFCLL)
          v537 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v537 = v535;
        if (v537)
        {
          v538 = (char *)sub_1DCAE4D04((uint64_t)&v686, v537);
          v533 = (char *)__p;
          v514 = v685;
        }
        else
        {
          v538 = 0;
        }
        v541 = &v538[4 * v534];
        *(_DWORD *)v541 = v486[2];
        v532 = v541 + 4;
        while (v514 != v533)
        {
          v542 = *((_DWORD *)v514 - 1);
          v514 -= 4;
          *((_DWORD *)v541 - 1) = v542;
          v541 -= 4;
        }
        v489 = &v538[4 * v537];
        __p = v541;
        v685 = v532;
        v686 = v489;
        if (v533)
        {
          operator delete(v533);
          v489 = v686;
        }
      }
      else
      {
        *(_DWORD *)v514 = v486[2];
        v532 = v514 + 4;
      }
      v685 = v532;
      if (v532 >= v489)
      {
        v544 = (char *)__p;
        v545 = (v532 - (_BYTE *)__p) >> 2;
        v546 = v545 + 1;
        if ((unint64_t)(v545 + 1) >> 62)
          goto LABEL_474;
        v547 = v489 - (_BYTE *)__p;
        if (v547 >> 1 > v546)
          v546 = v547 >> 1;
        if ((unint64_t)v547 >= 0x7FFFFFFFFFFFFFFCLL)
          v548 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v548 = v546;
        if (v548)
        {
          v549 = (char *)sub_1DCAE4D04((uint64_t)&v686, v548);
          v544 = (char *)__p;
          v532 = v685;
        }
        else
        {
          v549 = 0;
        }
        v550 = &v549[4 * v545];
        *(_DWORD *)v550 = *v486;
        v543 = v550 + 4;
        while (v532 != v544)
        {
          v551 = *((_DWORD *)v532 - 1);
          v532 -= 4;
          *((_DWORD *)v550 - 1) = v551;
          v550 -= 4;
        }
        v489 = &v549[4 * v548];
        __p = v550;
        v685 = v543;
        v686 = v489;
        if (v544)
        {
          operator delete(v544);
          v489 = v686;
        }
      }
      else
      {
        *(_DWORD *)v532 = *v486;
        v543 = v532 + 4;
      }
      v685 = v543;
      if (v543 >= v489)
      {
        v552 = (char *)__p;
        v553 = (v543 - (_BYTE *)__p) >> 2;
        v554 = v553 + 1;
        if ((unint64_t)(v553 + 1) >> 62)
          goto LABEL_474;
        v555 = v489 - (_BYTE *)__p;
        if (v555 >> 1 > v554)
          v554 = v555 >> 1;
        if ((unint64_t)v555 >= 0x7FFFFFFFFFFFFFFCLL)
          v556 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v556 = v554;
        if (v556)
        {
          v557 = (char *)sub_1DCAE4D04((uint64_t)&v686, v556);
          v552 = (char *)__p;
          v543 = v685;
        }
        else
        {
          v557 = 0;
        }
        v558 = &v557[4 * v553];
        *(_DWORD *)v558 = v486[2];
        v505 = v558 + 4;
        while (v543 != v552)
        {
          v559 = *((_DWORD *)v543 - 1);
          v543 -= 4;
          *((_DWORD *)v558 - 1) = v559;
          v558 -= 4;
        }
        v489 = &v557[4 * v556];
        __p = v558;
        v685 = v505;
        v686 = v489;
        if (v552)
        {
          operator delete(v552);
          v489 = v686;
        }
      }
      else
      {
        *(_DWORD *)v543 = v486[2];
        v505 = v543 + 4;
      }
      v685 = v505;
      if (v505 >= v489)
      {
        v524 = (char *)__p;
        v560 = (v505 - (_BYTE *)__p) >> 2;
        v561 = v560 + 1;
        if ((unint64_t)(v560 + 1) >> 62)
LABEL_474:
          sub_1DCAE4C44();
        v562 = v489 - (_BYTE *)__p;
        if (v562 >> 1 > v561)
          v561 = v562 >> 1;
        if ((unint64_t)v562 >= 0x7FFFFFFFFFFFFFFCLL)
          v528 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v528 = v561;
        if (v528)
        {
          v529 = (char *)sub_1DCAE4D04((uint64_t)&v686, v528);
          v524 = (char *)__p;
          v505 = v685;
        }
        else
        {
          v529 = 0;
        }
        v539 = &v529[4 * v560];
        *(_DWORD *)v539 = v486[3];
        v482 = v539 + 4;
        while (v505 != v524)
        {
          v563 = *((_DWORD *)v505 - 1);
          v505 -= 4;
          *((_DWORD *)v539 - 1) = v563;
          v539 -= 4;
        }
        goto LABEL_456;
      }
      v523 = v486[3];
LABEL_443:
      *(_DWORD *)v505 = v523;
      v482 = v505 + 4;
LABEL_458:
      v685 = v482;
      goto LABEL_459;
    }
LABEL_460:
    v564 = objc_alloc(MEMORY[0x1E0C99D50]);
    v566 = (void *)objc_msgSend_initWithBytes_length_(v564, v565, (uint64_t)__p, v685 - (_BYTE *)__p);
    v6 = v646;
    objc_msgSend_vertexBuffers(v646, v567, v568);
    v569 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v569, v570, 0);
    v571 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_allocator(v571, v572, v573);
    v574 = (void *)objc_claimAutoreleasedReturnValue();
    v576 = (void *)objc_msgSend_newBufferWithData_type_(v574, v575, (uint64_t)v566, 2);

    if (objc_msgSend_conformsToProtocol_(v576, v577, (uint64_t)&unk_1F03B6D88))
    {
      v578 = v576;
      objc_msgSend_stringByAppendingString_(v670, v579, (uint64_t)CFSTR("-Indices"));
      v580 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setName_(v578, v581, (uint64_t)v580);

    }
    v582 = [MDLSubmesh alloc];
    v584 = __p;
    v583 = v685;
    objc_msgSend_submeshes(v646, v585, v586);
    v587 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v587, v588, v637);
    v589 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_material(v589, v590, v591);
    v592 = (void *)objc_claimAutoreleasedReturnValue();
    v594 = (void *)objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v582, v593, (uint64_t)v576, (v583 - v584) >> 2, 32, 2, v592);

    v595 = (void *)objc_opt_new();
    objc_msgSend_attributes(v595, v596, v597);
    v598 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v598, v599, 0);
    v600 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v600, v601, (uint64_t)CFSTR("position"));

    objc_msgSend_attributes(v595, v602, v603);
    v604 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v604, v605, 0);
    v606 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFormat_(v606, v607, 786435);

    objc_msgSend_attributes(v595, v608, v609);
    v610 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v610, v611, 0);
    v612 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOffset_(v612, v613, 0);

    objc_msgSend_attributes(v595, v614, v615);
    v616 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v616, v617, 0);
    v618 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBufferIndex_(v618, v619, 0);

    objc_msgSend_layouts(v595, v620, v621);
    v622 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v622, v623, 0);
    v624 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setStride_(v624, v625, 12);

    v626 = [MDLMesh alloc];
    v699 = v594;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v627, (uint64_t)&v699, 1);
    v628 = (void *)objc_claimAutoreleasedReturnValue();
    v630 = (void *)objc_msgSend_initWithVertexBuffer_vertexCount_descriptor_submeshes_(v626, v629, (uint64_t)v476, v673, v595, v628);

    objc_msgSend_setName_(v630, v631, (uint64_t)v670);
    v71 = v630;

    if (v701)
    {
      v702 = (uint64_t)v701;
      operator delete(v701);
    }

    if (v672)
      operator delete(v672);
    goto LABEL_466;
  }
LABEL_95:
  v71 = 0;
LABEL_466:
  if (__p)
  {
    v685 = (char *)__p;
    operator delete(__p);
  }

  if (v687)
  {
    v688 = v687;
    operator delete(v687);
  }
  objc_autoreleasePoolPop(context);
LABEL_471:

  return v71;
}

void sub_1DCB4C854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *__p)
{
  void *v57;
  void *v58;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *sub_1DCB4CD7C()
{
  OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *v0;
  uint64_t v1;

  v0 = (OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *)operator new();
  OpenSubdiv::__aapl__::Far::TopologyRefiner::TopologyRefiner();
  if ((sub_1DCB4CE3C(v0) & 1) == 0)
  {
    v1 = MEMORY[0x1DF0D0B58](v0);
    MEMORY[0x1DF0D228C](v1, 0x10A0C40CA00941DLL);
    return 0;
  }
  return v0;
}

void sub_1DCB4CE18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D228C](v1, 0x10A0C40CA00941DLL);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB4CE3C(OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *a1)
{
  OpenSubdiv::__aapl__::Far::TopologyRefiner *v2;
  OpenSubdiv::__aapl__::Far::TopologyRefiner *v3;
  OpenSubdiv::__aapl__::Far::TopologyRefiner *v4;

  if (OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::resizeComponentTopology()
    && OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing(a1, v2)
    && OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::assignComponentTopology()
    && OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTopologyAssignment()
    && OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::assignComponentTags()
    && OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTagsAndSharpness(a1, v3)
    && OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::assignFaceVaryingTopology())
  {
    return OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareFaceVaryingChannels(a1, v4);
  }
  else
  {
    return 0;
  }
}

int *sub_1DCB4CEF0(int *result, int *a2, uint64_t a3, int a4, int a5, double a6, double a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  float32x2_t *v15;
  uint64_t v21;
  float *v24;
  float v25;
  float v26;
  float v28;
  float *v29;
  float *v31;
  float v32;
  float v33;
  float v34;
  float *v35;
  float *v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float *v42;
  uint64_t v43;
  _QWORD v44[2];

  v44[1] = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    v9 = *(_QWORD *)a2;
    v10 = a2[2];
    if (*(float *)(*(_QWORD *)(*(_QWORD *)a2 + 216) + 4 * v10) <= 0.0)
      goto LABEL_13;
LABEL_5:
    if (a5)
    {
      if (a5 != 4)
      {
        v11 = *(_QWORD *)a2;
        LODWORD(v12) = a2[2];
        v13 = *((unsigned __int8 *)result + 3);
        goto LABEL_8;
      }
    }
    else if (a4 != 4)
    {
      v11 = *(_QWORD *)a2;
      v12 = a2[2];
      v26 = *(float *)(*(_QWORD *)(*(_QWORD *)a2 + 216) + 4 * v12);
      if (v26 < 1.0)
      {
        v13 = HIBYTE(*result);
        if ((*result & 0xFF0000) == 0 || (float)(v26 + -1.0) <= 0.0)
        {
LABEL_8:
          v14 = *(unsigned int *)(*(_QWORD *)(v11 + 144) + 8 * (_DWORD)v12);
          *(_QWORD *)(a3 + 24) = 2;
          *(_DWORD *)(a3 + 32) = v14;
          *(_BYTE *)(a3 + 36) = 1;
          if (v13 == 1)
          {
            if ((_DWORD)v14 == 2)
            {
              v44[0] = 0;
              result = sub_1DCB4D264(a2, v44);
              if (LODWORD(v44[0]) == 3 || HIDWORD(v44[0]) == 3)
              {
                v39 = 0.47;
                if (HIDWORD(v44[0]) == 3)
                  v40 = 0.47;
                else
                  v40 = 0.25;
                if (LODWORD(v44[0]) != 3)
                  v39 = 0.25;
                v32 = (float)(v40 + v39) * 0.5;
                v15 = *(float32x2_t **)a3;
                v15->f32[0] = 0.5 - v32;
                v15->f32[1] = 0.5 - v32;
                v31 = *(float **)(a3 + 16);
                *v31 = v32;
                goto LABEL_50;
              }
              v15 = *(float32x2_t **)a3;
              __asm { FMOV            V0.2S, #0.25 }
              **(_QWORD **)a3 = _D0;
LABEL_32:
              v31 = *(float **)(a3 + 16);
              *v31 = 0.25;
              v32 = 0.25;
LABEL_50:
              v31[1] = v32;
              v11 = *(_QWORD *)a2;
              LODWORD(v14) = *(_DWORD *)(a3 + 32);
LABEL_51:
              LODWORD(a7) = *(_DWORD *)(*(_QWORD *)(v11 + 216) + 4 * a2[2]);
              v41 = 1.0 - *(float *)&a7;
              *(float *)&a7 = *(float *)&a7 * 0.5;
              *v15 = vmla_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0), *v15, v41);
              if ((int)v14 >= 1)
              {
                v42 = *(float **)(a3 + 16);
                v43 = v14;
                do
                {
                  *v42 = *v42 * v41;
                  ++v42;
                  --v43;
                }
                while (v43);
              }
              return result;
            }
            v15 = *(float32x2_t **)a3;
            __asm { FMOV            V0.2S, #0.25 }
            **(_QWORD **)a3 = _D0;
          }
          else
          {
            v15 = *(float32x2_t **)a3;
            __asm { FMOV            V0.2S, #0.25 }
            **(_QWORD **)a3 = _D0;
            if ((_DWORD)v14 == 2)
              goto LABEL_32;
          }
          if ((int)v14 >= 1)
          {
            v37 = *(float **)(a3 + 16);
            v38 = v14;
            do
            {
              *v37++ = 0.5 / (float)(int)v14;
              --v38;
            }
            while (v38);
          }
          goto LABEL_51;
        }
      }
    }
    *(_DWORD *)(a3 + 24) = 2;
    *(_QWORD *)(a3 + 28) = 0;
    *(_BYTE *)(a3 + 36) = 0;
    v24 = *(float **)a3;
    **(_DWORD **)a3 = 1056964608;
    v25 = 0.5;
    goto LABEL_25;
  }
  if (a4 != 1)
    goto LABEL_5;
  v9 = *(_QWORD *)a2;
  LODWORD(v10) = a2[2];
LABEL_13:
  v21 = *(unsigned int *)(*(_QWORD *)(v9 + 144) + 8 * (_DWORD)v10);
  *(_QWORD *)(a3 + 24) = 2;
  *(_DWORD *)(a3 + 32) = v21;
  *(_BYTE *)(a3 + 36) = 1;
  if (*((_BYTE *)result + 3) == 1)
  {
    if ((_DWORD)v21 == 2)
    {
      v44[0] = 0;
      result = sub_1DCB4D264(a2, v44);
      if (LODWORD(v44[0]) == 3 || HIDWORD(v44[0]) == 3)
      {
        v33 = 0.47;
        if (HIDWORD(v44[0]) == 3)
          v34 = 0.47;
        else
          v34 = 0.25;
        if (LODWORD(v44[0]) != 3)
          v33 = 0.25;
        v25 = (float)(v34 + v33) * 0.5;
        v35 = *(float **)a3;
        *v35 = 0.5 - v25;
        v35[1] = 0.5 - v25;
        v24 = *(float **)(a3 + 16);
        *v24 = v25;
        goto LABEL_25;
      }
      __asm { FMOV            V0.2S, #0.25 }
      **(_QWORD **)a3 = _D0;
      goto LABEL_19;
    }
    __asm { FMOV            V0.2S, #0.25 }
    **(_QWORD **)a3 = _D0;
  }
  else
  {
    __asm { FMOV            V0.2S, #0.25 }
    **(_QWORD **)a3 = _D0;
    if ((_DWORD)v21 == 2)
    {
LABEL_19:
      v24 = *(float **)(a3 + 16);
      *v24 = 0.25;
      v25 = 0.25;
LABEL_25:
      v24[1] = v25;
      return result;
    }
  }
  if ((int)v21 >= 1)
  {
    v28 = 0.5 / (float)(int)v21;
    v29 = *(float **)(a3 + 16);
    do
    {
      *v29++ = v28;
      --v21;
    }
    while (v21);
  }
  return result;
}

int *sub_1DCB4D264(int *result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)result;
  v3 = result[2];
  v4 = *(_QWORD *)(*(_QWORD *)result + 144);
  v5 = *(unsigned int *)(v4 + 8 * (_DWORD)v3);
  if ((int)v5 >= 1)
  {
    v6 = (int *)(*(_QWORD *)(v2 + 168) + 4 * *(int *)(v4 + 8 * v3 + 4));
    v7 = *(_QWORD *)(v2 + 24);
    do
    {
      v8 = *v6++;
      *a2++ = *(_DWORD *)(v7 + 8 * v8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_1DCB4D2B0(int *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v7;
  uint64_t v8;
  float v9;
  float *v10;
  float *v11;
  int v12;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t v21;
  float v22;
  int *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float *v30;
  float *v31;
  float v32;
  uint64_t v33;
  float *v34;
  float v35;
  uint64_t v36;
  float *v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float *v46;
  size_t v47;
  _DWORD *v48;
  uint64_t v49;
  float v50;
  float *v51;
  uint64_t v52;
  char v53;
  int v54;
  float v55;
  uint64_t v56;
  float *v57;
  float v58;
  float *v59;
  float v60;
  uint64_t v61;
  float v62;
  float v63;
  float *v64;
  uint64_t v65;
  float *v66;
  float v67;
  float *v68;
  uint64_t v69;
  float *v70;
  float v71;
  float *v72;
  float *v73;
  uint64_t v74;
  float v75;
  float *v76;
  uint64_t v77;
  float v78;
  _BYTE v79[4];
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v7 = a4 - 1;
  if ((a4 - 1) <= 1)
  {
    v8 = *(unsigned int *)(a2 + 28);
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 28) = v8;
    *(_DWORD *)(a3 + 32) = v8;
    *(_BYTE *)(a3 + 36) = 1;
    **(float **)a3 = (float)(v8 - 2) / (float)(int)v8;
    if ((int)v8 >= 1)
    {
      v9 = 1.0 / (float)(v8 * v8);
      v10 = *(float **)(a3 + 8);
      v11 = *(float **)(a3 + 16);
      do
      {
        *v10++ = v9;
        *v11++ = v9;
        --v8;
      }
      while (v8);
    }
    return;
  }
  v12 = a4;
  if (a5)
    v14 = 1;
  else
    v14 = a4 == 0;
  if (v14)
    v15 = a5;
  else
    v15 = a4;
  v16 = *(int *)(a2 + 24);
  v17 = *(unsigned int *)(a2 + 24);
  v18 = 4 * v16;
  MEMORY[0x1E0C80A78]();
  v19 = &v79[-((4 * v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v19, 4 * v16);
  if ((v12 | 4) != 4 && v15 == v12)
  {
    v19 = 0;
    v22 = 0.0;
LABEL_25:
    if (v12 == 4)
    {
      v80 = v15;
      v81 = v17;
      v32 = *MEMORY[0x1E0DF2378];
      v33 = 0xFFFFFFFF00000000;
      v34 = (float *)v19;
      do
      {
        v35 = *v34++;
        v33 += 0x100000000;
      }
      while (v32 >= v35);
      v36 = v16 << 32;
      v37 = (float *)&v19[4 * v16 - 4];
      do
      {
        v38 = *v37--;
        v36 -= 0x100000000;
      }
      while (v32 >= v38);
      v39 = *(unsigned int *)(a2 + 24);
      *(_DWORD *)(a3 + 24) = 1;
      *(_QWORD *)(a3 + 28) = v39;
      *(_BYTE *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1061158912;
      v40 = *(_QWORD *)(a3 + 8);
      if ((int)v39 >= 1)
        bzero(*(void **)(a3 + 8), 4 * v39);
      *(_DWORD *)(v40 + (v33 >> 30)) = 1040187392;
      *(_DWORD *)(v40 + (v36 >> 30)) = 1040187392;
      v17 = v81;
      v15 = v80;
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(_QWORD *)(a3 + 28) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1065353216;
    }
    if (v15 != v12)
    {
      v82 = *a1;
      MEMORY[0x1E0C80A78]();
      bzero(&v79[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)], 4 * v16);
      v41 = sub_1DCB4D898((int *)a2, (OpenSubdiv::__aapl__::Sdc::Crease *)&v82, (float *)&v79[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)]);
      v42 = *(int *)(a2 + 20);
      v43 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 408);
      v44 = *(float *)(v43 + 4 * v42);
      if (v15
        || (v15 = OpenSubdiv::__aapl__::Sdc::Crease::DetermineVertexVertexRule((OpenSubdiv::__aapl__::Sdc::Crease *)&v82, *(float *)(v43 + 4 * v42), v16, v41), v15 != v12))
      {
        MEMORY[0x1E0C80A78]();
        v46 = (float *)&v79[-v45];
        bzero(&v79[-v45], v47);
        v48 = v46 + 1;
        if ((v15 - 1) > 1)
        {
          if (v15 == 4)
          {
            v81 = v17;
            v55 = *MEMORY[0x1E0DF2378];
            v56 = 0xFFFFFFFF00000000;
            v57 = v41;
            do
            {
              v58 = *v57++;
              v56 += 0x100000000;
            }
            while (v55 >= v58);
            v49 = v16 << 32;
            v59 = &v41[v16 - 1];
            do
            {
              v60 = *v59--;
              v49 -= 0x100000000;
            }
            while (v55 >= v60);
            v61 = *(unsigned int *)(a2 + 24);
            *v46 = 0.75;
            if ((int)v61 >= 1)
              bzero(v46 + 1, 4 * v61);
            v54 = 0;
            *(_DWORD *)((char *)v48 + (v56 >> 30)) = 1040187392;
            *(_DWORD *)((char *)v48 + (v49 >> 30)) = 1040187392;
            LODWORD(v49) = v61;
            v53 = 0;
            v17 = v81;
          }
          else
          {
            LODWORD(v49) = 0;
            v54 = 0;
            v53 = 0;
            *v46 = 1.0;
          }
        }
        else
        {
          v49 = *(unsigned int *)(a2 + 28);
          *v46 = (float)(v49 - 2) / (float)(int)v49;
          if ((int)v49 >= 1)
          {
            v50 = 1.0 / (float)(v49 * v49);
            v51 = v46 + 1;
            v52 = v49;
            do
            {
              *v51 = v50;
              v51[v16] = v50;
              ++v51;
              --v52;
            }
            while (v52);
          }
          v53 = 1;
          v54 = v49;
        }
        OpenSubdiv::__aapl__::Sdc::Crease::ComputeFractionalWeightAtVertex((OpenSubdiv::__aapl__::Sdc::Crease *)&v82, v22, v44, v17, (const float *)v19, v41);
        v63 = 1.0 - v62;
        **(float **)a3 = (float)(**(float **)a3 * v62) + (float)(*v46 * (float)(1.0 - v62));
        if ((_DWORD)v49)
        {
          if (*(_DWORD *)(a3 + 28))
          {
            if ((int)v49 >= 1)
            {
              v64 = *(float **)(a3 + 8);
              v65 = v49;
              v66 = v46 + 1;
              do
              {
                v67 = *v66++;
                *v64 = (float)(*v64 * v62) + (float)(v67 * v63);
                ++v64;
                --v65;
              }
              while (v65);
            }
          }
          else
          {
            *(_DWORD *)(a3 + 28) = v49;
            if ((int)v49 >= 1)
            {
              v68 = *(float **)(a3 + 8);
              v69 = v49;
              v70 = v46 + 1;
              do
              {
                v71 = *v70++;
                *v68++ = v71 * v63;
                --v69;
              }
              while (v69);
            }
          }
        }
        if (v54)
        {
          v72 = (float *)&v48[v16];
          if (*(_DWORD *)(a3 + 32))
          {
            if (v54 >= 1)
            {
              v73 = *(float **)(a3 + 16);
              v74 = v54;
              do
              {
                v75 = *v72++;
                *v73 = (float)(*v73 * v62) + (float)(v75 * v63);
                ++v73;
                --v74;
              }
              while (v74);
            }
          }
          else
          {
            *(_DWORD *)(a3 + 32) = v54;
            *(_BYTE *)(a3 + 36) = v53;
            if (v54 >= 1)
            {
              v76 = *(float **)(a3 + 16);
              v77 = v54;
              do
              {
                v78 = *v72++;
                *v76++ = v78 * v63;
                --v77;
              }
              while (v77);
            }
          }
        }
      }
    }
    return;
  }
  v20 = *(_QWORD **)a2;
  v21 = *(int *)(a2 + 16);
  v22 = *(float *)(*(_QWORD *)(*(_QWORD *)a2 + 408) + 4 * v21);
  if ((int)v17 >= 1)
  {
    v23 = (int *)(v20[45] + 4 * *(int *)(v20[42] + 8 * v21 + 4));
    v24 = v20[27];
    v25 = &v79[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
    v26 = v17;
    do
    {
      v27 = *v23++;
      *v25++ = *(_DWORD *)(v24 + 4 * v27);
      --v26;
    }
    while (v26);
  }
  if (!v12)
  {
    v82 = *a1;
    v12 = OpenSubdiv::__aapl__::Sdc::Crease::DetermineVertexVertexRule((OpenSubdiv::__aapl__::Sdc::Crease *)&v82, v22, v16, (const float *)&v79[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    v7 = v12 - 1;
  }
  if (v7 > 1)
    goto LABEL_25;
  v28 = *(unsigned int *)(a2 + 28);
  *(_DWORD *)(a3 + 24) = 1;
  *(_DWORD *)(a3 + 28) = v28;
  *(_DWORD *)(a3 + 32) = v28;
  *(_BYTE *)(a3 + 36) = 1;
  **(float **)a3 = (float)(v28 - 2) / (float)(int)v28;
  if ((int)v28 >= 1)
  {
    v29 = 1.0 / (float)(v28 * v28);
    v30 = *(float **)(a3 + 8);
    v31 = *(float **)(a3 + 16);
    do
    {
      *v30++ = v29;
      *v31++ = v29;
      --v28;
    }
    while (v28);
  }
}

float *sub_1DCB4D898(int *a1, OpenSubdiv::__aapl__::Sdc::Crease *this, float *a3)
{
  _OWORD *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _OWORD v14[4];
  void *__p;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = v14;
  memset(v14, 0, sizeof(v14));
  v7 = a1[6];
  __p = 0;
  if (v7 >= 0x11)
  {
    v6 = operator new(4 * v7);
    __p = v6;
    v7 = a1[6];
  }
  if ((int)v7 >= 1)
  {
    v8 = (int *)(*(_QWORD *)(*(_QWORD *)a1 + 360)
               + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)a1 + 336) + 8 * a1[4] + 4));
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 216);
    v10 = v7;
    v11 = v6;
    do
    {
      v12 = *v8++;
      *v11++ = *(_DWORD *)(v9 + 4 * v12);
      --v10;
    }
    while (v10);
  }
  OpenSubdiv::__aapl__::Sdc::Crease::SubdivideEdgeSharpnessesAroundVertex(this, v7, (const float *)v6, a3);
  operator delete(__p);
  return a3;
}

void sub_1DCB4D9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1DCB4D9C0(_DWORD *result, int *a2, uint64_t a3, int a4, int a5, double a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t *v13;
  uint64_t v19;
  float32x2_t *v21;
  float v22;
  float v23;
  float *v24;
  float v25;
  float *v26;
  uint64_t v27;
  float v28;
  float *v29;

  if (!a4)
  {
    v7 = *(_QWORD *)a2;
    v8 = a2[2];
    if (*(float *)(*(_QWORD *)(*(_QWORD *)a2 + 216) + 4 * v8) <= 0.0)
      goto LABEL_10;
LABEL_5:
    if (a5)
    {
      if (a5 != 4)
      {
        v9 = *(_QWORD *)a2;
        LODWORD(v10) = a2[2];
LABEL_8:
        v11 = (int)v10;
        v12 = *(unsigned int *)(*(_QWORD *)(v9 + 144) + 8 * (int)v10);
        *(_QWORD *)(a3 + 24) = 2;
        *(_DWORD *)(a3 + 32) = v12;
        *(_BYTE *)(a3 + 36) = 0;
        v13 = *(float32x2_t **)a3;
        __asm { FMOV            V0.2S, #0.375 }
        **(_QWORD **)a3 = _D0;
        if ((_DWORD)v12 == 2)
        {
          **(_QWORD **)(a3 + 16) = 0x3E0000003E000000;
        }
        else if ((int)v12 >= 1)
        {
          v26 = *(float **)(a3 + 16);
          v27 = v12;
          do
          {
            *v26++ = 0.25 / (float)(int)v12;
            --v27;
          }
          while (v27);
        }
        LODWORD(a7) = *(_DWORD *)(*(_QWORD *)(v9 + 216) + 4 * v11);
        v28 = 1.0 - *(float *)&a7;
        *(float *)&a7 = *(float *)&a7 * 0.5;
        *v13 = vmla_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0), *v13, v28);
        if ((int)v12 >= 1)
        {
          v29 = *(float **)(a3 + 16);
          do
          {
            *v29 = *v29 * v28;
            ++v29;
            --v12;
          }
          while (v12);
        }
        return result;
      }
    }
    else if (a4 != 4)
    {
      v9 = *(_QWORD *)a2;
      v10 = a2[2];
      v25 = *(float *)(*(_QWORD *)(*(_QWORD *)a2 + 216) + 4 * v10);
      if (v25 < 1.0 && ((*result & 0xFF0000) == 0 || (float)(v25 + -1.0) <= 0.0))
        goto LABEL_8;
    }
    *(_DWORD *)(a3 + 24) = 2;
    *(_QWORD *)(a3 + 28) = 0;
    *(_BYTE *)(a3 + 36) = 0;
    v21 = *(float32x2_t **)a3;
    **(_DWORD **)a3 = 1056964608;
    v22 = 0.5;
    goto LABEL_21;
  }
  if (a4 != 1)
    goto LABEL_5;
  v7 = *(_QWORD *)a2;
  LODWORD(v8) = a2[2];
LABEL_10:
  v19 = *(unsigned int *)(*(_QWORD *)(v7 + 144) + 8 * (_DWORD)v8);
  *(_QWORD *)(a3 + 24) = 2;
  *(_DWORD *)(a3 + 32) = v19;
  *(_BYTE *)(a3 + 36) = 0;
  __asm { FMOV            V0.2S, #0.375 }
  **(_QWORD **)a3 = _D0;
  if ((_DWORD)v19 == 2)
  {
    v21 = *(float32x2_t **)(a3 + 16);
    v21->i32[0] = 1040187392;
    v22 = 0.125;
LABEL_21:
    v21->f32[1] = v22;
    return result;
  }
  if ((int)v19 >= 1)
  {
    v23 = 0.25 / (float)(int)v19;
    v24 = *(float **)(a3 + 16);
    do
    {
      *v24++ = v23;
      --v19;
    }
    while (v19);
  }
  return result;
}

void sub_1DCB4DB98(int *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v7;
  uint64_t v8;
  float v9;
  int v10;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  uint64_t v19;
  float v20;
  int *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  double v28;
  long double v29;
  float v30;
  float *v31;
  float v32;
  uint64_t v33;
  float *v34;
  float v35;
  uint64_t v36;
  float *v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float *v46;
  size_t v47;
  float *v48;
  uint64_t v49;
  float v50;
  double v51;
  long double v52;
  float v53;
  float *v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  float *v58;
  float v59;
  uint64_t v60;
  float *v61;
  float v62;
  double v63;
  long double v64;
  float v65;
  float *v66;
  uint64_t v67;
  float v68;
  float v69;
  float *v70;
  uint64_t v71;
  float v72;
  float *v73;
  uint64_t v74;
  float v75;
  _BYTE v76[4];
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v7 = a4 - 1;
  if ((a4 - 1) <= 1)
  {
    v8 = *(unsigned int *)(a2 + 28);
    *(_DWORD *)(a3 + 24) = 1;
    *(_QWORD *)(a3 + 28) = v8;
    *(_BYTE *)(a3 + 36) = 0;
    if ((_DWORD)v8 == 6)
    {
      **(_DWORD **)a3 = 1059061760;
      v9 = 0.0625;
    }
    else
    {
      v28 = 1.0 / (double)(int)v8;
      v29 = cos(v28 * 6.28318531);
      v9 = -(((v29 * 0.25 + 0.375) * (v29 * 0.25 + 0.375) + -0.625) * v28);
      v30 = 1.0 - v9 * (double)(int)v8;
      **(float **)a3 = v30;
      if ((int)v8 < 1)
        return;
    }
    v31 = *(float **)(a3 + 8);
    do
    {
      *v31++ = v9;
      --v8;
    }
    while (v8);
    return;
  }
  v10 = a4;
  if (a5)
    v12 = 1;
  else
    v12 = a4 == 0;
  if (v12)
    v13 = a5;
  else
    v13 = a4;
  v14 = *(int *)(a2 + 24);
  v15 = *(unsigned int *)(a2 + 24);
  v16 = 4 * v14;
  MEMORY[0x1E0C80A78]();
  v17 = &v76[-((4 * v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v17, 4 * v14);
  if ((v10 | 4) != 4 && v13 == v10)
  {
    v17 = 0;
    v20 = 0.0;
    goto LABEL_25;
  }
  v18 = *(_QWORD **)a2;
  v19 = *(int *)(a2 + 16);
  v20 = *(float *)(*(_QWORD *)(*(_QWORD *)a2 + 408) + 4 * v19);
  if ((int)v15 >= 1)
  {
    v21 = (int *)(v18[45] + 4 * *(int *)(v18[42] + 8 * v19 + 4));
    v22 = v18[27];
    v23 = &v76[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
    v24 = v15;
    do
    {
      v25 = *v21++;
      *v23++ = *(_DWORD *)(v22 + 4 * v25);
      --v24;
    }
    while (v24);
  }
  if (!v10)
  {
    v79 = *a1;
    v10 = OpenSubdiv::__aapl__::Sdc::Crease::DetermineVertexVertexRule((OpenSubdiv::__aapl__::Sdc::Crease *)&v79, v20, v14, (const float *)&v76[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    v7 = v10 - 1;
  }
  if (v7 > 1)
  {
LABEL_25:
    if (v10 == 4)
    {
      v77 = v13;
      v78 = v15;
      v32 = *MEMORY[0x1E0DF2378];
      v33 = 0xFFFFFFFF00000000;
      v34 = (float *)v17;
      do
      {
        v35 = *v34++;
        v33 += 0x100000000;
      }
      while (v32 >= v35);
      v36 = v14 << 32;
      v37 = (float *)&v17[4 * v14 - 4];
      do
      {
        v38 = *v37--;
        v36 -= 0x100000000;
      }
      while (v32 >= v38);
      v39 = *(unsigned int *)(a2 + 24);
      *(_DWORD *)(a3 + 24) = 1;
      *(_QWORD *)(a3 + 28) = v39;
      *(_BYTE *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1061158912;
      v40 = *(_QWORD *)(a3 + 8);
      if ((int)v39 >= 1)
        bzero(*(void **)(a3 + 8), 4 * v39);
      *(_DWORD *)(v40 + (v33 >> 30)) = 1040187392;
      *(_DWORD *)(v40 + (v36 >> 30)) = 1040187392;
      v15 = v78;
      v13 = v77;
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(_QWORD *)(a3 + 28) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1065353216;
    }
    if (v13 == v10)
      return;
    v79 = *a1;
    MEMORY[0x1E0C80A78]();
    bzero(&v76[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)], 4 * v14);
    v41 = sub_1DCB4D898((int *)a2, (OpenSubdiv::__aapl__::Sdc::Crease *)&v79, (float *)&v76[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    v42 = *(int *)(a2 + 20);
    v43 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 408);
    v44 = *(float *)(v43 + 4 * v42);
    if (!v13)
    {
      v13 = OpenSubdiv::__aapl__::Sdc::Crease::DetermineVertexVertexRule((OpenSubdiv::__aapl__::Sdc::Crease *)&v79, *(float *)(v43 + 4 * v42), v14, v41);
      if (v13 == v10)
        return;
    }
    MEMORY[0x1E0C80A78]();
    v46 = (float *)&v76[-v45];
    bzero(&v76[-v45], v47);
    v48 = v46 + 1;
    if ((v13 - 1) > 1)
    {
      if (v13 == 4)
      {
        v55 = v15;
        v56 = *MEMORY[0x1E0DF2378];
        v57 = 0xFFFFFFFF00000000;
        v58 = v41;
        do
        {
          v59 = *v58++;
          v57 += 0x100000000;
        }
        while (v56 >= v59);
        v60 = v14 << 32;
        v61 = &v41[v14 - 1];
        do
        {
          v62 = *v61--;
          v60 -= 0x100000000;
        }
        while (v56 >= v62);
        v49 = *(unsigned int *)(a2 + 24);
        *v46 = 0.75;
        if ((int)v49 >= 1)
          bzero(v46 + 1, 4 * v49);
        *(float *)((char *)v48 + (v57 >> 30)) = 0.125;
        *(float *)((char *)v48 + (v60 >> 30)) = 0.125;
        v15 = v55;
      }
      else
      {
        LODWORD(v49) = 0;
        *v46 = 1.0;
      }
      goto LABEL_57;
    }
    v49 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v49 == 6)
    {
      *v46 = 0.625;
      v50 = 0.0625;
    }
    else
    {
      v63 = 1.0 / (double)(int)v49;
      v64 = cos(v63 * 6.28318531);
      v50 = -(((v64 * 0.25 + 0.375) * (v64 * 0.25 + 0.375) + -0.625) * v63);
      v65 = 1.0 - v50 * (double)(int)v49;
      *v46 = v65;
      if ((int)v49 < 1)
        goto LABEL_57;
    }
    v66 = v46 + 1;
    v67 = v49;
    do
    {
      *v66++ = v50;
      --v67;
    }
    while (v67);
LABEL_57:
    OpenSubdiv::__aapl__::Sdc::Crease::ComputeFractionalWeightAtVertex((OpenSubdiv::__aapl__::Sdc::Crease *)&v79, v20, v44, v15, (const float *)v17, v41);
    v69 = 1.0 - v68;
    **(float **)a3 = (float)(**(float **)a3 * v68) + (float)(*v46 * (float)(1.0 - v68));
    if ((_DWORD)v49)
    {
      if (*(_DWORD *)(a3 + 28))
      {
        if ((int)v49 >= 1)
        {
          v70 = *(float **)(a3 + 8);
          v71 = v49;
          do
          {
            v72 = *v48++;
            *v70 = (float)(*v70 * v68) + (float)(v72 * v69);
            ++v70;
            --v71;
          }
          while (v71);
        }
      }
      else
      {
        *(_DWORD *)(a3 + 28) = v49;
        if ((int)v49 >= 1)
        {
          v73 = *(float **)(a3 + 8);
          v74 = v49;
          do
          {
            v75 = *v48++;
            *v73++ = v75 * v69;
            --v74;
          }
          while (v74);
        }
      }
    }
    return;
  }
  v26 = *(unsigned int *)(a2 + 28);
  *(_DWORD *)(a3 + 24) = 1;
  *(_QWORD *)(a3 + 28) = v26;
  *(_BYTE *)(a3 + 36) = 0;
  if ((_DWORD)v26 == 6)
  {
    **(_DWORD **)a3 = 1059061760;
    v27 = 0.0625;
  }
  else
  {
    v51 = 1.0 / (double)(int)v26;
    v52 = cos(v51 * 6.28318531);
    v27 = -(((v52 * 0.25 + 0.375) * (v52 * 0.25 + 0.375) + -0.625) * v51);
    v53 = 1.0 - v27 * (double)(int)v26;
    **(float **)a3 = v53;
    if ((int)v26 < 1)
      return;
  }
  v54 = *(float **)(a3 + 8);
  do
  {
    *v54++ = v27;
    --v26;
  }
  while (v26);
}

uint64_t sub_1DCB4E1B4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16))
    return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x1E0DE4EC0]);
}

MDLTransformStack *sub_1DCB4E1E8()
{
  MDLTransformStack *v1;
  __int128 v2;
  _QWORD v3[3];
  BOOL v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[5];

  v8[1] = 0;
  v8[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v7 = 0;
  v8[0] = MEMORY[0x1E0DF3100] + 16;
  v5 = 0;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamples();
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v8, &v4);
  v1 = objc_alloc_init(MDLTransformStack);
  *(_QWORD *)&v2 = v3;
  sub_1DCB4FDB8((void ***)&v2);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  MEMORY[0x1DF0D0F30](v8);
  return v1;
}

void sub_1DCB4EC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v41;

  if (a16 < 0)
    operator delete(__p);
  sub_1DCB4F7EC((uint64_t)&a18);

  a18 = &a36;
  sub_1DCB4FDB8((void ***)&a18);
  v41 = *(void **)(v39 - 160);
  if (v41)
  {
    *(_QWORD *)(v39 - 152) = v41;
    operator delete(v41);
  }
  MEMORY[0x1DF0D0F30](v39 - 136);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB4EDE4(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v1 == -1)
    sub_1DCB4F844();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))*(&off_1EA577290 + v1))(&v4, a1);
}

void sub_1DCB4EE2C(pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD v8[3];
  __int128 v9;
  __int128 v10;
  _QWORD v11[3];
  _OWORD v12[2];
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[14];

  v17[13] = *MEMORY[0x1E0C80C00];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  if (!pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
    goto LABEL_22;
  v11[1] = 0;
  v11[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v11[0] = MEMORY[0x1E0DF30F8] + 16;
  v9 = 0u;
  v10 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetExtentAttr((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)v11);
  if (sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9))
  {
    memset(v17, 0, 104);
    v16 = 0u;
    MEMORY[0x1DF0D0F84](&v16, &v9);
    if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>())
    {
      v1 = *(_QWORD *)&v12[0];
      sub_1DCB4F918(&v16);
      if (v1 == 2)
        goto LABEL_16;
    }
    else
    {
      sub_1DCB4F918(&v16);
    }
  }
  else
  {
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::CreateExtentAttr((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)v11, (const pxrInternal__aapl__pxrReserved__::VtValue *)v14);
    LODWORD(v9) = v16;
    v2 = *((_QWORD *)&v16 + 1);
    *((_QWORD *)&v16 + 1) = 0;
    v3 = *((_QWORD *)&v9 + 1);
    *((_QWORD *)&v9 + 1) = v2;
    if (v3)
      sub_1DCAEED94(v3);
    sub_1DCB4FA2C((uint64_t)&v10, (int *)v17);
    sub_1DCB4FA80((uint64_t)&v10 + 4);
    if ((BYTE8(v10) & 7) != 0)
    {
      v4 = (unsigned int *)(*((_QWORD *)&v10 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    *((_QWORD *)&v10 + 1) = v17[1];
    v17[1] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)v17);
    if (*((_QWORD *)&v16 + 1))
      sub_1DCAEED94(*((uint64_t *)&v16 + 1));
    sub_1DCAEEE2C((uint64_t)v14);
  }
  v8[1] = 0;
  v8[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v8[0] = MEMORY[0x1E0DF3120] + 16;
  MEMORY[0x1DF0D0FC0](v8);
LABEL_16:
  if ((BYTE8(v10) & 7) != 0)
  {
    v6 = (unsigned int *)(*((_QWORD *)&v10 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v10);
  if (*((_QWORD *)&v9 + 1))
    sub_1DCAEED94(*((uint64_t *)&v9 + 1));
  MEMORY[0x1DF0D0F24](v11);
LABEL_22:
  sub_1DCAEEE78((uint64_t)v12);
}

void sub_1DCB4F464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_1DCAEEE78(v37 - 176);
  MEMORY[0x1DF0D0D8C](&a27);
  MEMORY[0x1DF0D0DB0](&a34);
  sub_1DCAEEE78((uint64_t)&a37);
  MEMORY[0x1DF0D0FC0](&a10);
  sub_1DCAEEA6C((uint64_t)&a13);
  MEMORY[0x1DF0D0F24](&a18);
  sub_1DCAEEE78((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB4F600(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 120) = -1;
  sub_1DCB4F644(a1, a2);
  return a1;
}

void sub_1DCB4F630(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCB4F7EC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB4F644(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 120);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1EA577270[v4])(&v7, result);
  *(_DWORD *)(v3 + 120) = -1;
  v5 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1EA577280 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 120) = v5;
  }
  return result;
}

uint64_t sub_1DCB4F6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34(a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  if (result)
    return sub_1DCAEED94(result);
  return result;
}

_QWORD *sub_1DCB4F734(uint64_t a1, _QWORD *a2)
{
  return sub_1DCB4F918(a2);
}

uint64_t sub_1DCB4F73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DCB4F754(a2, a3);
}

void sub_1DCB4F748()
{
  JUMPOUT(0x1DF0D0F90);
}

uint64_t sub_1DCB4F754(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_1DCB30114((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_1DCB30164((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

uint64_t sub_1DCB4F7EC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1EA577270[v2])(&v4, a1);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

void sub_1DCB4F844()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::exception::~exception);
}

uint64_t sub_1DCB4F87C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1DCB4F884(int a1, pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(this);
}

uint64_t sub_1DCB4F88C(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v3;
  uint64_t result;

  if (*(_DWORD *)this > 4u || ((1 << *(_DWORD *)this) & 0x1A) == 0)
    return 0;
  v3 = *((_QWORD *)this + 1);
  if (!v3 || (*(_BYTE *)(v3 + 57) & 8) != 0)
    return 0;
  if (*(_DWORD *)this == 1)
    return 1;
  result = pxrInternal__aapl__pxrReserved__::UsdObject::_GetDefiningSpecType(this);
  if (*(_DWORD *)this != 3 || (_DWORD)result != 1)
    return *(_DWORD *)this == 4 && (_DWORD)result == 8;
  return result;
}

_QWORD *sub_1DCB4F918(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;

  sub_1DCB4F9F0(a1 + 14, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)(a1 + 12));
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)a1[5];
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = a1[3];
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)(a1 + 2));
  v13 = a1[1];
  if (v13)
    sub_1DCAEED94(v13);
  return a1;
}

uint64_t sub_1DCB4F9F0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1DCB0546C(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

uint64_t sub_1DCB4FA2C(uint64_t a1, int *a2)
{
  int v4;

  v4 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
  sub_1DCAEEC34((uint64_t)&v4);
  return a1;
}

uint64_t sub_1DCB4FA80(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return a1;
}

uint64_t sub_1DCB4FAD8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_1DCAEED94(v5);
  return a1;
}

uint64_t sub_1DCB4FB38(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *(_DWORD *)a1 = 1;
  v5 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (_QWORD *)(a1 + 16);
  sub_1DCB30114((_DWORD *)(a1 + 16), a3);
  sub_1DCB30164((_DWORD *)(a1 + 20), a3 + 1);
  *(_QWORD *)(a1 + 24) = 0;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 && (*(_BYTE *)(v9 + 57) & 8) == 0 && *(_QWORD *)(v9 + 16) == *v8)
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  return a1;
}

void sub_1DCB4FC14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v1 + 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_1DCB2FDE8(v2);
  v7 = *(_QWORD *)(v1 + 8);
  if (v7)
    sub_1DCAEED94(v7);
  _Unwind_Resume(a1);
}

void sub_1DCB4FC54(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(int **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_1DCB30D80(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 4 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_1DCAEEE78(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void sub_1DCB4FDB8(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_1DCB4F7EC(v4 - 136);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1DCB4FE28(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v8;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = a1 + 8;
  v8 = 0uLL;
  v3 = (_OWORD *)operator new();
  *(_OWORD *)((char *)v3 + 60) = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  sub_1DCB50E24(&v8, (uint64_t)v3);
  *(_DWORD *)(v8 + 72) = -1;
  sub_1DCB4FEF4(v2, &v8);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1DCB4FEE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCB0546C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB4FEF4(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t sub_1DCB4FF5C(uint64_t a1)
{
  sub_1DCB4FF8C(a1);
  sub_1DCB0546C(a1 + 8);
  return a1;
}

void sub_1DCB4FF8C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;

  v1 = (uint64_t *)(a1 + 8);
  v23 = 0uLL;
  do
  {
    while (1)
    {
      sub_1DCB50788(&v23, v1);
      sub_1DCB50788(v1, (uint64_t *)(v23 + 56));
      v2 = v23;
      v22 = v23;
      if (*((_QWORD *)&v23 + 1))
      {
        v3 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v4 = __ldxr(v3);
        while (__stxr(v4 + 1, v3));
      }
      while (1)
      {
        v10 = *(_QWORD *)(v2 + 24);
        v9 = (uint64_t *)(v2 + 24);
        if (!v10)
          break;
        v5 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
        if (*((_QWORD *)&v22 + 1))
        {
          v6 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
          do
            v7 = __ldxr(v6);
          while (__stxr(v7 + 1, v6));
          sub_1DCB50788(&v22, v9);
          do
            v8 = __ldaxr(v6);
          while (__stlxr(v8 - 1, v6));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        else
        {
          sub_1DCB50788(&v22, v9);
        }
        v2 = v22;
      }
      v11 = *v1;
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
      if (*((_QWORD *)&v22 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
          break;
      }
      if (!v11)
        goto LABEL_23;
    }
    ((void (*)(std::__shared_weak_count *, uint64_t *))v12->__on_zero_shared)(v12, v9);
    std::__shared_weak_count::__release_weak(v12);
  }
  while (v11);
LABEL_23:
  v22 = 0uLL;
  v15 = (_OWORD *)operator new();
  *(_OWORD *)((char *)v15 + 60) = 0u;
  v15[2] = 0u;
  v15[3] = 0u;
  *v15 = 0u;
  v15[1] = 0u;
  sub_1DCB50E24(&v22, (uint64_t)v15);
  *(_DWORD *)(v22 + 72) = -1;
  sub_1DCB4FEF4((uint64_t)v1, &v22);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1DCB5016C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1DCB0546C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCB50184(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  BOOL v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  _QWORD *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  _QWORD *v89;
  std::__shared_weak_count *v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  _QWORD *v93;
  std::__shared_weak_count *v94;
  _QWORD *v95;
  std::__shared_weak_count *v96;

  v95 = 0;
  v96 = 0;
  v4 = operator new();
  *(_QWORD *)v4 = a2;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_DWORD *)(v4 + 72) = 0;
  sub_1DCB50E24(&v95, v4);
  v7 = *(_QWORD **)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v6 = (_QWORD *)(a1 + 8);
  v93 = v7;
  v94 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  while (1)
  {
    if (*((_DWORD *)v7 + 18) == -1 || *(float *)(*v7 + 4) < *(float *)(*v95 + 4))
    {
      v10 = v7 + 3;
      if (v7[3])
        goto LABEL_5;
    }
    else
    {
      if (*v7 == *v95)
        goto LABEL_95;
      v11 = (std::__shared_weak_count *)v7[2];
      if (v11 && (v11 = std::__shared_weak_count::lock(v11)) != 0)
        v12 = (_QWORD *)v7[1];
      else
        v12 = 0;
      v13 = v94;
      v93 = v12;
      v94 = v11;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v7 = v93;
    }
    v10 = v7 + 7;
    if (!v7[7])
      break;
LABEL_5:
    sub_1DCB50788(&v93, v10);
    v7 = v93;
  }
  sub_1DCB50788(v95 + 3, v7 + 3);
  v16 = v93;
  v17 = v93[3];
  if (v17)
  {
    v19 = v95;
    v18 = v96;
    if (v96)
    {
      p_shared_weak_owners = (unint64_t *)&v96->__shared_weak_owners_;
      do
        v21 = __ldxr(p_shared_weak_owners);
      while (__stxr(v21 + 1, p_shared_weak_owners));
    }
    v22 = *(std::__shared_weak_count **)(v17 + 16);
    *(_QWORD *)(v17 + 8) = v19;
    *(_QWORD *)(v17 + 16) = v18;
    if (v22)
    {
      std::__shared_weak_count::__release_weak(v22);
      v16 = v93;
    }
  }
  sub_1DCB50788(v16 + 3, (uint64_t *)&v95);
  v24 = v94;
  v23 = v95;
  v25 = v93;
  if (v94)
  {
    v26 = (unint64_t *)&v94->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = (std::__shared_weak_count *)v23[2];
  v23[1] = v25;
  v23[2] = v24;
  if (v28)
  {
    std::__shared_weak_count::__release_weak(v28);
    v23 = v95;
  }
  v91 = v23;
  v92 = v96;
  if (v96)
  {
    v29 = (unint64_t *)&v96->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = 0;
  while (2)
  {
    if ((rand() & 1) != 0 && !v31)
    {
      while (1)
      {
        v32 = v93;
        v33 = v93[6];
        if (v33)
        {
          if (*(_QWORD *)(v33 + 8) != -1)
            break;
        }
        v34 = (std::__shared_weak_count *)v93[2];
        if (!v34 || v34->__shared_owners_ == -1)
          break;
        v35 = std::__shared_weak_count::lock(v34);
        if (v35)
          v36 = (_QWORD *)v32[1];
        else
          v36 = 0;
        v37 = v94;
        v93 = v36;
        v94 = v35;
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      v89 = 0;
      v90 = 0;
      v40 = operator new();
      *(_QWORD *)v40 = a2;
      *(_OWORD *)(v40 + 8) = 0u;
      *(_OWORD *)(v40 + 24) = 0u;
      *(_OWORD *)(v40 + 40) = 0u;
      *(_OWORD *)(v40 + 56) = 0u;
      *(_DWORD *)(v40 + 72) = 0;
      sub_1DCB50E24(&v89, v40);
      v41 = v93;
      v31 = v93 == (_QWORD *)*v6;
      if (v93 == (_QWORD *)*v6)
      {
        v87 = 0;
        v88 = 0;
        v47 = (_OWORD *)operator new();
        *(_OWORD *)((char *)v47 + 60) = 0u;
        v47[2] = 0u;
        v47[3] = 0u;
        *v47 = 0u;
        v47[1] = 0u;
        sub_1DCB50E24(&v87, (uint64_t)v47);
        v48 = v87;
        *(_DWORD *)(v87 + 72) = -1;
        sub_1DCB50788((_QWORD *)(v48 + 56), (uint64_t *)(a1 + 8));
        v49 = (_QWORD *)*v6;
        v51 = v87;
        v50 = v88;
        if (v88)
        {
          v52 = (unint64_t *)&v88->__shared_weak_owners_;
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        v54 = (std::__shared_weak_count *)v49[6];
        v49[5] = v51;
        v49[6] = v50;
        if (v54)
          std::__shared_weak_count::__release_weak(v54);
        sub_1DCB50788((_QWORD *)(a1 + 8), &v87);
        sub_1DCB50788(&v93, (uint64_t *)(a1 + 8));
        ++*(_DWORD *)a1;
        v44 = v88;
        if (v88)
        {
          v55 = (unint64_t *)&v88->__shared_owners_;
          do
            v46 = __ldaxr(v55);
          while (__stlxr(v46 - 1, v55));
          goto LABEL_67;
        }
      }
      else
      {
        v42 = (std::__shared_weak_count *)v93[6];
        if (v42 && (v42 = std::__shared_weak_count::lock(v42)) != 0)
          v43 = (_QWORD *)v41[5];
        else
          v43 = 0;
        v44 = v94;
        v93 = v43;
        v94 = v42;
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
LABEL_67:
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
      }
      sub_1DCB50788(v89 + 3, v93 + 3);
      v56 = v93;
      v57 = v93[3];
      if (v57)
      {
        v59 = (uint64_t)v89;
        v58 = v90;
        if (v90)
        {
          v60 = (unint64_t *)&v90->__shared_weak_owners_;
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        v62 = *(std::__shared_weak_count **)(v57 + 16);
        *(_QWORD *)(v57 + 8) = v59;
        *(_QWORD *)(v57 + 16) = v58;
        if (v62)
        {
          std::__shared_weak_count::__release_weak(v62);
          v56 = v93;
        }
      }
      sub_1DCB50788(v56 + 3, (uint64_t *)&v89);
      v63 = v89;
      v65 = v93;
      v64 = v94;
      if (v94)
      {
        v66 = (unint64_t *)&v94->__shared_weak_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      v68 = (std::__shared_weak_count *)v63[2];
      v63[1] = v65;
      v63[2] = v64;
      if (v68)
      {
        std::__shared_weak_count::__release_weak(v68);
        v63 = v89;
      }
      sub_1DCB50788(v63 + 7, (uint64_t *)&v91);
      v70 = v90;
      v69 = (uint64_t)v91;
      v71 = (uint64_t)v89;
      if (v90)
      {
        v72 = (unint64_t *)&v90->__shared_weak_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      v74 = *(std::__shared_weak_count **)(v69 + 48);
      *(_QWORD *)(v69 + 40) = v71;
      *(_QWORD *)(v69 + 48) = v70;
      if (v74)
        std::__shared_weak_count::__release_weak(v74);
      sub_1DCB50788(&v91, (uint64_t *)&v89);
      v75 = v90;
      if (v90)
      {
        v76 = (unint64_t *)&v90->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      continue;
    }
    break;
  }
  v78 = v92;
  if (v92)
  {
    v79 = (unint64_t *)&v92->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
LABEL_95:
  v81 = v94;
  if (v94)
  {
    v82 = (unint64_t *)&v94->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v96;
  if (v96)
  {
    v85 = (unint64_t *)&v96->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
}

void sub_1DCB50750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  sub_1DCB0546C((uint64_t)va);
  sub_1DCB0546C((uint64_t)va1);
  sub_1DCB0546C((uint64_t)va2);
  sub_1DCB0546C((uint64_t)va3);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCB50788(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1DCB50800(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;

  v53 = 0;
  v54 = 0;
  sub_1DCB50B34(a1, a2, (uint64_t *)&v53);
  if (v53)
  {
    v3 = a1 + 8;
    while (1)
    {
      v4 = v53;
      v5 = (std::__shared_weak_count *)v53[2];
      if (v5)
      {
        v6 = std::__shared_weak_count::lock(v5);
        if (v6)
          v7 = v4[1];
        else
          v7 = 0;
      }
      else
      {
        v7 = 0;
        v6 = 0;
      }
      v8 = v53;
      if (v7 == *(_QWORD *)v3 && !v53[3])
      {
        v31 = *(_QWORD *)(v7 + 56);
        if (v31)
        {
          v32 = *(std::__shared_weak_count **)(v7 + 64);
          v51 = v31;
          v52 = v32;
          if (v32)
          {
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldxr(p_shared_owners);
            while (__stxr(v34 + 1, p_shared_owners));
          }
          sub_1DCB50788((_QWORD *)(a1 + 8), &v51);
          v35 = *(_QWORD *)v3;
          v36 = *(std::__shared_weak_count **)(*(_QWORD *)v3 + 48);
          *(_QWORD *)(v35 + 40) = 0;
          *(_QWORD *)(v35 + 48) = 0;
          if (v36)
            std::__shared_weak_count::__release_weak(v36);
          v37 = (std::__shared_weak_count *)v53[8];
          v49 = v53[7];
          v50 = v37;
          if (v37)
          {
            v38 = (unint64_t *)&v37->__shared_owners_;
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
          }
          sub_1DCB50788(&v53, &v49);
          --*(_DWORD *)a1;
          v40 = v50;
          if (v50)
          {
            v41 = (unint64_t *)&v50->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          v43 = v52;
          if (v52)
          {
            v44 = (unint64_t *)&v52->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          v26 = 2;
          if (!v6)
            goto LABEL_42;
LABEL_38:
          v29 = (unint64_t *)&v6->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          goto LABEL_42;
        }
      }
      v9 = (std::__shared_weak_count *)v53[2];
      if (v9)
      {
        v10 = std::__shared_weak_count::lock(v9);
        if (v10)
          v11 = v8[1];
        else
          v11 = 0;
      }
      else
      {
        v11 = 0;
        v10 = 0;
      }
      sub_1DCB50788((_QWORD *)(v11 + 24), v53 + 3);
      v12 = v53;
      v13 = v53[3];
      if (v13)
      {
        v15 = v53[1];
        v14 = v53[2];
        if (v14)
        {
          v16 = (unint64_t *)(v14 + 16);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        v18 = *(std::__shared_weak_count **)(v13 + 16);
        *(_QWORD *)(v13 + 8) = v15;
        *(_QWORD *)(v13 + 16) = v14;
        if (v18)
        {
          std::__shared_weak_count::__release_weak(v18);
          v12 = v53;
        }
      }
      v19 = v12[7];
      if (!v19)
        break;
      v20 = (std::__shared_weak_count *)v12[8];
      v51 = v19;
      v52 = v20;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      sub_1DCB50788(&v53, &v51);
      v23 = v52;
      if (v52)
      {
        v24 = (unint64_t *)&v52->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = 0;
      if (v10)
        goto LABEL_33;
LABEL_37:
      if (v6)
        goto LABEL_38;
LABEL_42:
      if (v26 == 3)
        goto LABEL_65;
    }
    v26 = 3;
    if (!v10)
      goto LABEL_37;
LABEL_33:
    v27 = (unint64_t *)&v10->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_37;
  }
LABEL_65:
  v46 = v54;
  if (v54)
  {
    v47 = (unint64_t *)&v54->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1DCB50B34(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v3 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v6;
  v21 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  while (1)
  {
    if (*(_DWORD *)(v6 + 72) == -1 || *(float *)(*(_QWORD *)v6 + 4) < *((float *)v3 + 1))
    {
      a2 = (uint64_t *)(v6 + 24);
      if (!*(_QWORD *)(v6 + 24))
      {
        v15 = *(_QWORD *)(v6 + 56);
        v14 = (uint64_t *)(v6 + 56);
        if (!v15)
          goto LABEL_23;
        a2 = v14;
      }
      goto LABEL_15;
    }
    if (*(uint64_t **)v6 == v3)
      break;
    v9 = *(std::__shared_weak_count **)(v6 + 16);
    if (v9 && (v9 = std::__shared_weak_count::lock(v9)) != 0)
      v10 = *(_QWORD *)(v6 + 8);
    else
      v10 = 0;
    v11 = v21;
    v20 = v10;
    v21 = v9;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    a2 = (uint64_t *)(v20 + 56);
    if (!*(_QWORD *)(v20 + 56))
      goto LABEL_23;
LABEL_15:
    sub_1DCB50788(&v20, a2);
    v6 = v20;
  }
  v16 = v21;
  *a3 = v6;
  a3[1] = (uint64_t)v16;
  a3 = &v20;
LABEL_23:
  *a3 = 0;
  a3[1] = 0;
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t *))v17->__on_zero_shared)(v17, a2);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

_QWORD *sub_1DCB50C84(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v12 = 0;
  v13 = 0;
  sub_1DCB50B34(a1, a2, &v12);
  v2 = (_QWORD *)v12;
  if (v12)
  {
    while (v2[7])
    {
      sub_1DCB50788(&v12, v2 + 7);
      v2 = (_QWORD *)v12;
    }
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3 && (v3 = std::__shared_weak_count::lock(v3)) != 0)
      v4 = v2[1];
    else
      v4 = 0;
    v5 = v13;
    v12 = v4;
    v13 = v3;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (*(_DWORD *)(v12 + 72) == -1)
      v2 = 0;
    else
      v2 = *(_QWORD **)v12;
  }
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v2;
}

uint64_t sub_1DCB50D84(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v10 = 0;
  v11 = 0;
  sub_1DCB50B34(a1, a2, &v10);
  v3 = v10;
  if (!v10)
    goto LABEL_6;
  while (1)
  {
    v2 = (uint64_t *)(v3 + 56);
    if (!*(_QWORD *)(v3 + 56))
      break;
    sub_1DCB50788(&v10, v2);
    v3 = v10;
  }
  v4 = *(uint64_t **)(v3 + 24);
  if (v4)
    v5 = *v4;
  else
LABEL_6:
    v5 = 0;
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t *))v6->__on_zero_shared)(v6, v2);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

_QWORD *sub_1DCB50E24(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1EA5748E8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DCB50E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCB50F80((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1DCB50EA0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0D228CLL);
}

uint64_t sub_1DCB50EC4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_1DCB50F38(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

uint64_t sub_1DCB50EF8(uint64_t a1, uint64_t a2)
{
  if (sub_1DCAE69FC(a2, (uint64_t)&unk_1EA574000))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_1DCB50F38(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  sub_1DCB0546C(a1 + 56);
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  sub_1DCB0546C(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t sub_1DCB50F80(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1DCB50F38(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

void sub_1DCB51060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double sub_1DCB51168@<D0>(uint64_t a1@<X8>, double a2@<D0>, float64x2_t a3@<Q1>, float64_t a4@<D2>, float64x2_t a5@<Q3>)
{
  float64x2_t v6;
  __double2 v7;
  double v9;
  __int128 v10;
  double v11;
  double v12;
  double v13;
  double v20;
  __int128 v21;
  double result;
  float64x2_t v23;
  double v24;

  a3.f64[1] = a4;
  v6 = vmulq_f64(a3, a3);
  v6.f64[0] = 1.0 / sqrt(vaddvq_f64(v6) + vmulq_f64(a5, a5).f64[0]);
  v23 = vmulq_n_f64(a3, v6.f64[0]);
  v24 = vmulq_f64(v6, a5).f64[0];
  v7 = __sincos_stret(a2);
  _V19.D[1] = v23.f64[1];
  v9 = (1.0 - v7.__cosval) * v23.f64[0];
  *(double *)&v10 = vmlad_n_f64(v7.__cosval, v9, v23.f64[0]);
  v11 = vmuld_lane_f64(v9, v23, 1);
  v12 = v9 * v24;
  v13 = vmuld_lane_f64(v7.__sinval, v23, 1);
  *((double *)&v10 + 1) = v11 + v7.__sinval * v24;
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = COERCE_UNSIGNED_INT64(v12 - v13);
  *(double *)&v10 = v11 - v7.__sinval * v24;
  _D2 = vmuld_lane_f64(1.0 - v7.__cosval, v23, 1);
  __asm { FMLA            D4, D2, V19.D[1] }
  v20 = _D2 * v24;
  *((_QWORD *)&v10 + 1) = _D4;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = COERCE_UNSIGNED_INT64(v20 + v7.__sinval * v23.f64[0]);
  *(double *)&v21 = v12 + v13;
  *((double *)&v21 + 1) = v20 - v7.__sinval * v23.f64[0];
  *(_OWORD *)(a1 + 64) = v21;
  *(_OWORD *)(a1 + 80) = COERCE_UNSIGNED_INT64(v7.__cosval + vmuld_n_f64(v24, v24) * (1.0 - v7.__cosval));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = xmmword_1DCC588A0;
  return result;
}

void sub_1DCB5141C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCB516E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCB519A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCB51BD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCB52E44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCB53064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCB533AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCB5397C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCB53B70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB53CE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB53EE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DCB54040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB5414C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB54258(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB54364(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB54470(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB54518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCB545CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCB54680(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCB54734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCB547F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCB548AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCB54960(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCB54A14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCB54BE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB54C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1DCB54D10(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_1DCB54DB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB54F38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCB55600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1DCB55780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCB55860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCB55C0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCB55D24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB55FD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCB566D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1DCB56828(simd_float4x4 *a1, float a2)
{
  float v4;
  float v5;

  a1[3].columns[2].f32[3] = a2;
  a1[3].columns[2].f32[0] = 0.5 / tanf(a2 * 0.017453);
  v4 = a1[3].columns[2].f32[2];
  v5 = tanf(a2 * 0.0087266);
  a1[3].columns[0].f32[2] = v4 / (float)(v5 + v5);
  sub_1DCBC1034(a1);
}

uint64_t sub_1DCB56894(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_OWORD *)(a1 + 48) = 0u;
  v2 = a1 + 48;
  *(_QWORD *)(a1 + 64) = 0;
  v3 = a1 + 24;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_1DCB56914(a1);
  sub_1DCB569F0(v3);
  sub_1DCB56ACC(v2);
  return a1;
}

void sub_1DCB568EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  sub_1DCC31D94(v2, v1);
  _Unwind_Resume(a1);
}

void sub_1DCB56914(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB56BAC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 0x1000000;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 0x1000000;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB569F0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB64D88((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 0x2000000;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 0x2000000;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB56ACC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB72F74((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 0x4000000;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 0x4000000;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB56BAC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB56C90((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2396745;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2396745;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB56C90(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB56D74((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2396744;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2396744;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB56D74(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB56E58((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2396737;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2396737;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB56E58(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB56F3C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2396736;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2396736;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB56F3C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB57020((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2396681;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2396681;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB57020(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB57104((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2396680;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2396680;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB57104(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB571E8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2396673;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2396673;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB571E8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB572CC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2396672;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2396672;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB572CC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB573B0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2396233;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2396233;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB573B0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB57494((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2396232;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2396232;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB57494(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB57578((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2396225;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2396225;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB57578(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5765C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2396224;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2396224;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5765C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB57740((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2396169;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2396169;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB57740(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB57824((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2396168;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2396168;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB57824(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB57908((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2396161;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2396161;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB57908(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB579EC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2396160;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2396160;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB579EC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB57AD0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2392649;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2392649;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB57AD0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB57BB4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2392648;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2392648;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB57BB4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB57C98((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2392641;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2392641;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB57C98(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB57D7C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2392640;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2392640;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB57D7C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB57E60((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2392585;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2392585;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB57E60(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB57F44((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2392584;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2392584;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB57F44(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB58028((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2392577;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2392577;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB58028(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5810C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2392576;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2392576;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5810C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB581F0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2392137;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2392137;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB581F0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB582D4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2392136;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2392136;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB582D4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB583B8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2392129;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2392129;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB583B8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5849C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2392128;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2392128;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5849C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB58580((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2392073;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2392073;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB58580(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB58664((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2392072;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2392072;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB58664(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB58748((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2392065;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2392065;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB58748(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5882C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2392064;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2392064;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5882C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB58910((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2363977;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2363977;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB58910(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB589F4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2363976;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2363976;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB589F4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB58AD8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2363969;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2363969;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB58AD8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB58BBC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2363968;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2363968;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB58BBC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB58CA0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2363913;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2363913;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB58CA0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB58D84((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2363912;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2363912;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB58D84(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB58E68((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2363905;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2363905;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB58E68(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB58F4C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2363904;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2363904;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB58F4C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB59030((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2363465;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2363465;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB59030(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB59114((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2363464;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2363464;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB59114(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB591F8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2363457;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2363457;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB591F8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB592DC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2363456;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2363456;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB592DC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB593C0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2363401;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2363401;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB593C0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB594A4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2363400;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2363400;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB594A4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB59588((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2363393;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2363393;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB59588(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5966C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2363392;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2363392;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5966C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB59750((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2359881;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2359881;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB59750(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB59834((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2359880;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2359880;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB59834(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB59918((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2359873;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2359873;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB59918(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB599FC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2359872;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2359872;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB599FC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB59AE0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2359817;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2359817;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB59AE0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB59BC4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2359816;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2359816;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB59BC4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB59CA8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2359809;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2359809;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB59CA8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB59D8C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2359808;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2359808;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB59D8C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB59E70((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2359369;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2359369;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB59E70(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB59F54((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2359368;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2359368;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB59F54(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5A038((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2359361;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2359361;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5A038(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5A11C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2359360;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2359360;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5A11C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5A200((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2359305;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2359305;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5A200(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5A2E4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2359304;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2359304;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5A2E4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5A3C8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2359297;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2359297;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5A3C8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5A4A4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2359296;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2359296;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5A4A4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5A588((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2134601;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2134601;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5A588(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5A66C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2134600;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2134600;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5A66C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5A750((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2134593;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2134593;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5A750(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5A834((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2134592;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2134592;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5A834(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5A918((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2134537;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2134537;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5A918(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5A9FC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2134536;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2134536;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5A9FC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5AAE0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2134529;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2134529;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5AAE0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5ABC4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2134528;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2134528;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5ABC4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5ACA8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2134089;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2134089;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5ACA8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5AD8C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2134088;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2134088;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5AD8C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5AE70((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2134081;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2134081;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5AE70(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5AF54((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2134080;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2134080;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5AF54(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5B038((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2134025;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2134025;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5B038(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5B11C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2134024;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2134024;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5B11C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5B200((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2134017;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2134017;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5B200(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5B2E4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2134016;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2134016;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5B2E4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5B3C8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2130505;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2130505;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5B3C8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5B4AC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2130504;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2130504;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5B4AC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5B590((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2130497;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2130497;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5B590(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5B674((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2130496;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2130496;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5B674(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5B758((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2130441;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2130441;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5B758(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5B83C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2130440;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2130440;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5B83C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5B920((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2130433;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2130433;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5B920(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5BA04((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2130432;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2130432;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5BA04(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5BAE8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2129993;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2129993;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5BAE8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5BBCC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2129992;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2129992;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5BBCC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5BCB0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2129985;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2129985;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5BCB0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5BD94((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2129984;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2129984;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5BD94(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5BE78((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2129929;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2129929;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5BE78(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5BF5C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2129928;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2129928;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5BF5C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5C040((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2129921;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2129921;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5C040(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5C124((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2129920;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2129920;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5C124(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5C208((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2101833;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2101833;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5C208(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5C2EC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2101832;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2101832;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5C2EC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5C3D0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2101825;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2101825;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5C3D0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5C4B4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2101824;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2101824;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5C4B4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5C598((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2101769;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2101769;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5C598(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5C67C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2101768;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2101768;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5C67C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5C760((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2101761;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2101761;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5C760(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5C844((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2101760;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2101760;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5C844(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5C928((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2101321;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2101321;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5C928(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5CA0C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2101320;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2101320;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5CA0C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5CAF0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2101313;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2101313;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5CAF0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5CBD4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2101312;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2101312;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5CBD4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5CCB8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2101257;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2101257;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5CCB8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5CD9C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2101256;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2101256;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5CD9C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5CE80((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2101249;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2101249;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5CE80(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5CF64((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2101248;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2101248;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5CF64(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5D048((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2097737;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2097737;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5D048(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5D12C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2097736;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2097736;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5D12C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5D210((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2097729;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2097729;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5D210(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5D2F4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2097728;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2097728;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5D2F4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5D3D8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2097673;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2097673;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5D3D8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5D4BC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2097672;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2097672;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5D4BC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5D5A0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2097665;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2097665;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5D5A0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5D684((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2097664;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2097664;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5D684(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5D768((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2097225;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2097225;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5D768(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5D84C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2097224;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2097224;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5D84C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5D930((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2097217;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2097217;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5D930(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5DA14((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2097216;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2097216;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5DA14(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5DAF8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2097161;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2097161;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5DAF8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5DBDC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2097160;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2097160;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5DBDC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5DCC0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2097153;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2097153;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5DCC0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5DD9C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 0x200000;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 0x200000;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5DD9C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5DE80((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 299593;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 299593;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5DE80(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5DF64((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 299592;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 299592;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5DF64(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5E048((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 299585;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 299585;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5E048(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5E12C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 299584;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 299584;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5E12C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5E210((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 299529;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 299529;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5E210(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5E2F4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 299528;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 299528;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5E2F4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5E3D8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 299521;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 299521;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5E3D8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5E4BC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 299520;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 299520;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5E4BC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5E5A0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 299081;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 299081;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5E5A0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5E684((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 299080;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 299080;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5E684(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5E768((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 299073;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 299073;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5E768(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5E84C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 299072;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 299072;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5E84C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5E930((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 299017;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 299017;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5E930(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5EA14((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 299016;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 299016;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5EA14(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5EAF8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 299009;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 299009;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5EAF8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5EBDC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 299008;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 299008;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5EBDC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5ECC0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 295497;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 295497;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5ECC0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5EDA4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 295496;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 295496;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5EDA4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5EE88((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 295489;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 295489;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5EE88(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5EF6C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 295488;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 295488;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5EF6C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5F050((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 295433;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 295433;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5F050(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5F134((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 295432;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 295432;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5F134(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5F218((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 295425;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 295425;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5F218(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5F2FC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 295424;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 295424;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5F2FC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5F3E0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 294985;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 294985;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5F3E0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5F4C4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 294984;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 294984;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5F4C4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5F5A8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 294977;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 294977;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5F5A8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5F68C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 294976;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 294976;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5F68C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5F770((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 294921;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 294921;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5F770(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5F854((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 294920;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 294920;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5F854(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5F938((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 294913;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 294913;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5F938(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5FA1C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 294912;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 294912;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5FA1C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5FB00((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 266825;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 266825;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5FB00(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5FBE4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 266824;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 266824;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5FBE4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5FCC8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 266817;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 266817;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5FCC8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5FDAC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 266816;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 266816;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5FDAC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5FE90((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 266761;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 266761;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB5FE90(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB5FF74((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 266760;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 266760;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB5FF74(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB60058((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 266753;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 266753;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB60058(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6013C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 266752;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 266752;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6013C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB60220((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 266313;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 266313;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB60220(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB60304((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 266312;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 266312;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB60304(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB603E8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 266305;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 266305;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB603E8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB604CC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 266304;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 266304;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB604CC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB605B0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 266249;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 266249;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB605B0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB60694((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 266248;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 266248;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB60694(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB60778((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 266241;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 266241;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB60778(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6085C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 266240;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 266240;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6085C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB60940((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 262729;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 262729;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB60940(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB60A24((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 262728;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 262728;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB60A24(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB60B08((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 262721;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 262721;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB60B08(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB60BEC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 262720;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 262720;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB60BEC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB60CD0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 262665;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 262665;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB60CD0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB60DB4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 262664;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 262664;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB60DB4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB60E98((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 262657;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 262657;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB60E98(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB60F7C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 262656;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 262656;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB60F7C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB61060((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 262217;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 262217;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB61060(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB61144((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 262216;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 262216;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB61144(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB61228((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 262209;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 262209;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB61228(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6130C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 262208;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 262208;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6130C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB613F0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 262153;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 262153;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB613F0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB614D4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 262152;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 262152;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB614D4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB615B8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 262145;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 262145;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB615B8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB61694((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 0x40000;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 0x40000;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB61694(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB61770((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 37449;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 37449;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB61770(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6184C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 37448;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 37448;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6184C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB61928((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 37441;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 37441;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB61928(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB61A04((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 37440;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 37440;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB61A04(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB61AE0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 37385;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 37385;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB61AE0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB61BBC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 37384;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 37384;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB61BBC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB61C98((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 37377;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 37377;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB61C98(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB61D74((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 37376;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 37376;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB61D74(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB61E50((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 36937;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 36937;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB61E50(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB61F2C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 36936;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 36936;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB61F2C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB62008((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 36929;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 36929;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB62008(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB620E4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 36928;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 36928;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB620E4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB621C0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 36873;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 36873;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB621C0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6229C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 36872;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 36872;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6229C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB62378((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 36865;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 36865;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB62378(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB62454((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 36864;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 36864;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB62454(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB62530((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 33353;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 33353;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB62530(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6260C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 33352;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 33352;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6260C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB626E8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 33345;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 33345;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB626E8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB627C4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 33344;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 33344;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB627C4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB628A0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 33289;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 33289;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB628A0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6297C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 33288;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 33288;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6297C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB62A58((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 33281;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 33281;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB62A58(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB62B34((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 33280;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 33280;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB62B34(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB62C10((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 32841;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 32841;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB62C10(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB62CEC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 32840;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 32840;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB62CEC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB62DC8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 32833;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 32833;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB62DC8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB62EA4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 32832;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 32832;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB62EA4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB62F80((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 32777;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 32777;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB62F80(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6305C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 32776;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 32776;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6305C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB63138((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 32769;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 32769;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB63138(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB63214((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 0x8000;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 0x8000;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB63214(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB632F0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4681;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4681;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB632F0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB633CC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4680;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4680;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB633CC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB634A8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4673;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4673;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB634A8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB63584((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4672;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4672;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB63584(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB63660((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4617;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4617;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB63660(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6373C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4616;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4616;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6373C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB63818((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4609;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4609;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB63818(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB638F4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4608;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4608;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB638F4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB639D0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4169;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4169;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB639D0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB63AAC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4168;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4168;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB63AAC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB63B88((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4161;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4161;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB63B88(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB63C64((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4160;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4160;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB63C64(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB63D40((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4105;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4105;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB63D40(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB63E1C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4104;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4104;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB63E1C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB63EF8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4097;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4097;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB63EF8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB63FD4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4096;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4096;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB63FD4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB640B0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 585;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 585;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB640B0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6418C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 584;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 584;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6418C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB64268((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 577;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 577;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB64268(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB64344((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 576;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 576;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB64344(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB64420((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 521;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 521;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB64420(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB644FC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 520;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 520;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB644FC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB645D8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 513;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 513;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB645D8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB646B4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 512;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 512;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB646B4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB64790((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 73;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 73;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB64790(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6486C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 72;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 72;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6486C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB64948((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 65;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 65;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB64948(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB64A24((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 64;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 64;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB64A24(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB64B00((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB64B00(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB64BDC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB64BDC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB64CB8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB64CB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v4 >= v3)
  {
    v6 = *(_QWORD **)a1;
    v7 = ((uint64_t)v4 - *(_QWORD *)a1) >> 3;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_1DCAE4C44();
    v9 = v3 - (_QWORD)v6;
    if (v9 >> 2 > v8)
      v8 = v9 >> 2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      v11 = (char *)sub_1DCAE79A4(v2, v10);
      v6 = *(_QWORD **)a1;
      v4 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *(_QWORD *)v12 = 0;
    v5 = v12 + 8;
    while (v4 != v6)
    {
      v14 = *--v4;
      *((_QWORD *)v12 - 1) = v14;
      v12 -= 8;
    }
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v4 = 0;
    v5 = v4 + 1;
  }
  *(_QWORD *)(a1 + 8) = v5;
}

void sub_1DCB64D88(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB64E6C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4793490;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4793490;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB64E6C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB64F50((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4793488;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4793488;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB64F50(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB65034((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4793474;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4793474;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB65034(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB65118((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4793472;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4793472;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB65118(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB651FC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4793362;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4793362;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB651FC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB652E0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4793360;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4793360;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB652E0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB653C4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4793346;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4793346;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB653C4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB654A8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4793344;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4793344;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB654A8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6558C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4792466;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4792466;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6558C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB65670((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4792464;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4792464;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB65670(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB65754((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4792450;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4792450;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB65754(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB65838((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4792448;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4792448;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB65838(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6591C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4792338;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4792338;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6591C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB65A00((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4792336;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4792336;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB65A00(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB65AE4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4792322;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4792322;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB65AE4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB65BC8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4792320;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4792320;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB65BC8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB65CAC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4785298;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4785298;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB65CAC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB65D90((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4785296;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4785296;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB65D90(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB65E74((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4785282;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4785282;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB65E74(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB65F58((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4785280;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4785280;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB65F58(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6603C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4785170;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4785170;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6603C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB66120((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4785168;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4785168;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB66120(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB66204((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4785154;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4785154;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB66204(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB662E8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4785152;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4785152;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB662E8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB663CC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4784274;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4784274;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB663CC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB664B0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4784272;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4784272;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB664B0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB66594((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4784258;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4784258;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB66594(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB66678((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4784256;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4784256;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB66678(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6675C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4784146;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4784146;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6675C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB66840((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4784144;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4784144;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB66840(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB66924((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4784130;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4784130;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB66924(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB66A00((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4784128;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4784128;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB66A00(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB66AE4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4727954;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4727954;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB66AE4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB66BC8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4727952;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4727952;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB66BC8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB66CAC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4727938;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4727938;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB66CAC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB66D90((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4727936;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4727936;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB66D90(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB66E74((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4727826;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4727826;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB66E74(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB66F58((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4727824;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4727824;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB66F58(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6703C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4727810;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4727810;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6703C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB67120((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4727808;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4727808;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB67120(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB67204((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4726930;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4726930;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB67204(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB672E8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4726928;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4726928;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB672E8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB673CC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4726914;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4726914;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB673CC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB674B0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4726912;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4726912;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB674B0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB67594((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4726802;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4726802;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB67594(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB67678((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4726800;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4726800;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB67678(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6775C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4726786;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4726786;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6775C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB67840((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4726784;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4726784;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB67840(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB67924((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4719762;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4719762;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB67924(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB67A08((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4719760;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4719760;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB67A08(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB67AEC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4719746;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4719746;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB67AEC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB67BD0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4719744;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4719744;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB67BD0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB67CB4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4719634;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4719634;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB67CB4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB67D98((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4719632;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4719632;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB67D98(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB67E7C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4719618;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4719618;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB67E7C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB67F60((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4719616;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4719616;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB67F60(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB68044((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4718738;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4718738;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB68044(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB68128((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4718736;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4718736;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB68128(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6820C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4718722;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4718722;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6820C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB682F0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4718720;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4718720;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB682F0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB683D4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4718610;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4718610;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB683D4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB684B8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4718608;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4718608;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB684B8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6859C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4718594;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4718594;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6859C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB68678((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4718592;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4718592;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB68678(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6875C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4269202;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4269202;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6875C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB68840((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4269200;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4269200;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB68840(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB68924((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4269186;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4269186;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB68924(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB68A08((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4269184;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4269184;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB68A08(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB68AEC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4269074;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4269074;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB68AEC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB68BD0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4269072;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4269072;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB68BD0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB68CB4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4269058;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4269058;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB68CB4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB68D98((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4269056;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4269056;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB68D98(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB68E7C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4268178;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4268178;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB68E7C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB68F60((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4268176;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4268176;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB68F60(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB69044((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4268162;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4268162;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB69044(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB69128((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4268160;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4268160;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB69128(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6920C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4268050;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4268050;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6920C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB692F0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4268048;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4268048;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB692F0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB693D4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4268034;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4268034;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB693D4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB694B8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4268032;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4268032;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB694B8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6959C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4261010;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4261010;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6959C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB69680((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4261008;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4261008;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB69680(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB69764((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4260994;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4260994;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB69764(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB69848((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4260992;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4260992;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB69848(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6992C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4260882;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4260882;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6992C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB69A10((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4260880;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4260880;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB69A10(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB69AF4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4260866;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4260866;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB69AF4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB69BD8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4260864;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4260864;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB69BD8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB69CBC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4259986;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4259986;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB69CBC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB69DA0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4259984;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4259984;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB69DA0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB69E84((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4259970;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4259970;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB69E84(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB69F68((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4259968;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4259968;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB69F68(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6A04C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4259858;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4259858;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6A04C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6A130((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4259856;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4259856;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6A130(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6A214((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4259842;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4259842;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6A214(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6A2F0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4259840;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4259840;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6A2F0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6A3D4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4203666;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4203666;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6A3D4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6A4B8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4203664;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4203664;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6A4B8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6A59C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4203650;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4203650;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6A59C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6A680((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4203648;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4203648;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6A680(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6A764((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4203538;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4203538;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6A764(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6A848((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4203536;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4203536;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6A848(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6A92C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4203522;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4203522;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6A92C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6AA10((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4203520;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4203520;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6AA10(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6AAF4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4202642;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4202642;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6AAF4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6ABD8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4202640;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4202640;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6ABD8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6ACBC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4202626;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4202626;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6ACBC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6ADA0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4202624;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4202624;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6ADA0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6AE84((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4202514;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4202514;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6AE84(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6AF68((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4202512;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4202512;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6AF68(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6B04C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4202498;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4202498;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6B04C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6B130((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4202496;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4202496;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6B130(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6B214((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4195474;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4195474;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6B214(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6B2F8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4195472;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4195472;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6B2F8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6B3DC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4195458;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4195458;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6B3DC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6B4C0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4195456;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4195456;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6B4C0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6B5A4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4195346;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4195346;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6B5A4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6B688((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4195344;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4195344;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6B688(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6B76C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4195330;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4195330;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6B76C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6B850((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4195328;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4195328;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6B850(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6B934((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4194450;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4194450;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6B934(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6BA18((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4194448;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4194448;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6BA18(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6BAFC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4194434;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4194434;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6BAFC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6BBE0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4194432;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4194432;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6BBE0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6BCC4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4194322;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4194322;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6BCC4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6BDA8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4194320;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4194320;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6BDA8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6BE8C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4194306;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4194306;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6BE8C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6BF68((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 0x400000;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 0x400000;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6BF68(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6C04C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 599186;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 599186;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6C04C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6C130((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 599184;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 599184;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6C130(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6C214((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 599170;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 599170;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6C214(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6C2F8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 599168;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 599168;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6C2F8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6C3DC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 599058;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 599058;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6C3DC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6C4C0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 599056;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 599056;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6C4C0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6C5A4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 599042;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 599042;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6C5A4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6C688((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 599040;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 599040;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6C688(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6C76C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 598162;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 598162;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6C76C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6C850((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 598160;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 598160;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6C850(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6C934((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 598146;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 598146;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6C934(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6CA18((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 598144;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 598144;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6CA18(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6CAFC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 598034;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 598034;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6CAFC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6CBE0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 598032;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 598032;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6CBE0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6CCC4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 598018;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 598018;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6CCC4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6CDA8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 598016;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 598016;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6CDA8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6CE8C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 590994;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 590994;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6CE8C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6CF70((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 590992;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 590992;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6CF70(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6D054((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 590978;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 590978;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6D054(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6D138((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 590976;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 590976;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6D138(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6D21C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 590866;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 590866;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6D21C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6D300((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 590864;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 590864;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6D300(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6D3E4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 590850;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 590850;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6D3E4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6D4C8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 590848;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 590848;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6D4C8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6D5AC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 589970;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 589970;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6D5AC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6D690((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 589968;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 589968;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6D690(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6D774((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 589954;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 589954;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6D774(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6D858((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 589952;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 589952;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6D858(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6D93C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 589842;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 589842;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6D93C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6DA20((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 589840;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 589840;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6DA20(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6DB04((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 589826;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 589826;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6DB04(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6DBE0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 589824;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 589824;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6DBE0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6DCC4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 533650;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 533650;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6DCC4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6DDA8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 533648;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 533648;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6DDA8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6DE8C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 533634;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 533634;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6DE8C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6DF70((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 533632;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 533632;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6DF70(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6E054((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 533522;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 533522;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6E054(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6E138((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 533520;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 533520;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6E138(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6E21C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 533506;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 533506;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6E21C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6E300((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 533504;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 533504;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6E300(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6E3E4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 532626;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 532626;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6E3E4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6E4C8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 532624;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 532624;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6E4C8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6E5AC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 532610;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 532610;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6E5AC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6E690((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 532608;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 532608;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6E690(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6E774((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 532498;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 532498;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6E774(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6E858((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 532496;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 532496;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6E858(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6E93C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 532482;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 532482;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6E93C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6EA20((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 532480;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 532480;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6EA20(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6EB04((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 525458;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 525458;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6EB04(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6EBE8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 525456;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 525456;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6EBE8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6ECCC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 525442;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 525442;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6ECCC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6EDB0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 525440;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 525440;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6EDB0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6EE94((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 525330;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 525330;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6EE94(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6EF78((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 525328;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 525328;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6EF78(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6F05C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 525314;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 525314;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6F05C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6F140((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 525312;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 525312;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6F140(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6F224((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 524434;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 524434;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6F224(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6F308((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 524432;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 524432;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6F308(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6F3EC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 524418;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 524418;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6F3EC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6F4D0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 524416;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 524416;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6F4D0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6F5B4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 524306;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 524306;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6F5B4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6F698((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 524304;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 524304;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6F698(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6F77C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 524290;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 524290;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6F77C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6F858((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 0x80000;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 0x80000;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6F858(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6F93C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 74898;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 74898;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6F93C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6FA20((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 74896;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 74896;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6FA20(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6FB04((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 74882;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 74882;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6FB04(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6FBE8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 74880;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 74880;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6FBE8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6FCCC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 74770;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 74770;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6FCCC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6FDB0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 74768;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 74768;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6FDB0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6FE94((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 74754;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 74754;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB6FE94(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB6FF78((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 74752;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 74752;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB6FF78(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7005C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 73874;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 73874;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7005C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB70140((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 73872;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 73872;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB70140(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB70224((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 73858;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 73858;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB70224(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB70308((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 73856;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 73856;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB70308(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB703EC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 73746;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 73746;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB703EC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB704D0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 73744;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 73744;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB704D0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB705B4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 73730;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 73730;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB705B4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB70698((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 73728;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 73728;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB70698(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7077C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 66706;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 66706;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7077C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB70860((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 66704;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 66704;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB70860(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB70944((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 66690;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 66690;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB70944(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB70A28((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 66688;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 66688;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB70A28(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB70B0C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 66578;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 66578;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB70B0C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB70BF0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 66576;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 66576;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB70BF0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB70CD4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 66562;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 66562;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB70CD4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB70DB8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 66560;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 66560;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB70DB8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB70E9C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 65682;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 65682;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB70E9C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB70F80((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 65680;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 65680;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB70F80(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB71064((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 65666;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 65666;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB71064(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB71148((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 65664;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 65664;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB71148(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7122C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 65554;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 65554;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7122C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB71310((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 65552;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 65552;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB71310(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB713F4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 65538;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 65538;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB713F4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB714D0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 0x10000;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 0x10000;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB714D0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB715AC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9362;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9362;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB715AC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB71688((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9360;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9360;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB71688(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB71764((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9346;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9346;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB71764(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB71840((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9344;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9344;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB71840(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7191C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9234;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9234;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7191C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB719F8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9232;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9232;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB719F8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB71AD4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9218;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9218;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB71AD4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB71BB0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9216;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9216;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB71BB0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB71C8C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8338;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8338;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB71C8C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB71D68((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8336;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8336;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB71D68(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB71E44((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8322;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8322;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB71E44(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB71F20((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8320;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8320;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB71F20(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB71FFC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8210;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8210;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB71FFC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB720D8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8208;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8208;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB720D8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB721B4((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8194;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8194;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB721B4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB72290((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 0x2000;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 0x2000;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB72290(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7236C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1170;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1170;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7236C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB72448((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1168;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1168;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB72448(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB72524((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1154;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1154;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB72524(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB72600((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1152;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1152;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB72600(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB726DC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1042;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1042;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB726DC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB727B8((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1040;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1040;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB727B8(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB72894((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1026;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1026;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB72894(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB72970((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1024;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1024;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB72970(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB72A4C((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 146;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 146;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB72A4C(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB72B28((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 144;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 144;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB72B28(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB72C04((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 130;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 130;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB72C04(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB72CE0((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 128;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 128;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB72CE0(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB72DBC((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 18;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 18;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB72DBC(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB72E98((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 16;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 16;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB72E98(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB64CB8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB72F74(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB73058((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9586980;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9586980;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB73058(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7313C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9586976;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9586976;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7313C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB73220((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9586948;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9586948;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB73220(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB73304((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9586944;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9586944;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB73304(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB733E8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9586724;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9586724;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB733E8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB734CC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9586720;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9586720;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB734CC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB735B0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9586692;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9586692;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB735B0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB73694((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9586688;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9586688;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB73694(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB73778((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9584932;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9584932;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB73778(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7385C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9584928;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9584928;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7385C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB73940((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9584900;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9584900;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB73940(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB73A24((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9584896;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9584896;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB73A24(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB73B08((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9584676;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9584676;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB73B08(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB73BEC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9584672;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9584672;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB73BEC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB73CD0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9584644;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9584644;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB73CD0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB73DB4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9584640;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9584640;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB73DB4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB73E98((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9570596;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9570596;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB73E98(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB73F7C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9570592;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9570592;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB73F7C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB74060((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9570564;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9570564;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB74060(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB74144((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9570560;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9570560;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB74144(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB74228((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9570340;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9570340;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB74228(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7430C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9570336;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9570336;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7430C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB743F0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9570308;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9570308;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB743F0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB744D4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9570304;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9570304;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB744D4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB745B8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9568548;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9568548;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB745B8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7469C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9568544;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9568544;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7469C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB74780((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9568516;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9568516;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB74780(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB74864((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9568512;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9568512;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB74864(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB74948((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9568292;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9568292;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB74948(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB74A2C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9568288;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9568288;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB74A2C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB74B10((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9568260;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9568260;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB74B10(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB74BEC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9568256;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9568256;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB74BEC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB74CD0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9455908;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9455908;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB74CD0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB74DB4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9455904;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9455904;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB74DB4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB74E98((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9455876;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9455876;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB74E98(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB74F7C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9455872;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9455872;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB74F7C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB75060((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9455652;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9455652;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB75060(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB75144((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9455648;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9455648;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB75144(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB75228((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9455620;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9455620;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB75228(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7530C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9455616;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9455616;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7530C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB753F0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9453860;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9453860;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB753F0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB754D4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9453856;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9453856;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB754D4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB755B8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9453828;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9453828;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB755B8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7569C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9453824;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9453824;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7569C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB75780((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9453604;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9453604;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB75780(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB75864((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9453600;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9453600;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB75864(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB75948((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9453572;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9453572;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB75948(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB75A2C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9453568;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9453568;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB75A2C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB75B10((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9439524;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9439524;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB75B10(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB75BF4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9439520;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9439520;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB75BF4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB75CD8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9439492;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9439492;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB75CD8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB75DBC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9439488;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9439488;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB75DBC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB75EA0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9439268;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9439268;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB75EA0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB75F84((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9439264;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9439264;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB75F84(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB76068((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9439236;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9439236;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB76068(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7614C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9439232;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9439232;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7614C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB76230((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9437476;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9437476;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB76230(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB76314((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9437472;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9437472;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB76314(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB763F8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9437444;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9437444;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB763F8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB764DC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9437440;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9437440;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB764DC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB765C0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9437220;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9437220;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB765C0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB766A4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9437216;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9437216;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB766A4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB76788((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9437188;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9437188;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB76788(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB76864((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 9437184;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 9437184;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB76864(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB76948((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8538404;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8538404;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB76948(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB76A2C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8538400;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8538400;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB76A2C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB76B10((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8538372;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8538372;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB76B10(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB76BF4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8538368;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8538368;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB76BF4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB76CD8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8538148;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8538148;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB76CD8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB76DBC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8538144;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8538144;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB76DBC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB76EA0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8538116;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8538116;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB76EA0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB76F84((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8538112;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8538112;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB76F84(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB77068((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8536356;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8536356;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB77068(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7714C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8536352;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8536352;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7714C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB77230((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8536324;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8536324;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB77230(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB77314((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8536320;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8536320;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB77314(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB773F8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8536100;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8536100;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB773F8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB774DC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8536096;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8536096;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB774DC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB775C0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8536068;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8536068;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB775C0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB776A4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8536064;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8536064;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB776A4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB77788((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8522020;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8522020;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB77788(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7786C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8522016;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8522016;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7786C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB77950((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8521988;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8521988;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB77950(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB77A34((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8521984;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8521984;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB77A34(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB77B18((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8521764;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8521764;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB77B18(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB77BFC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8521760;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8521760;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB77BFC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB77CE0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8521732;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8521732;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB77CE0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB77DC4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8521728;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8521728;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB77DC4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB77EA8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8519972;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8519972;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB77EA8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB77F8C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8519968;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8519968;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB77F8C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB78070((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8519940;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8519940;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB78070(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB78154((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8519936;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8519936;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB78154(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB78238((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8519716;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8519716;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB78238(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7831C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8519712;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8519712;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7831C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB78400((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8519684;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8519684;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB78400(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB784DC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8519680;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8519680;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB784DC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB785C0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8407332;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8407332;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB785C0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB786A4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8407328;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8407328;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB786A4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB78788((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8407300;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8407300;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB78788(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7886C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8407296;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8407296;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7886C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB78950((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8407076;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8407076;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB78950(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB78A34((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8407072;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8407072;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB78A34(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB78B18((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8407044;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8407044;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB78B18(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB78BFC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8407040;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8407040;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB78BFC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB78CE0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8405284;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8405284;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB78CE0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB78DC4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8405280;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8405280;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB78DC4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB78EA8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8405252;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8405252;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB78EA8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB78F8C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8405248;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8405248;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB78F8C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB79070((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8405028;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8405028;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB79070(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB79154((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8405024;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8405024;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB79154(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB79238((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8404996;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8404996;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB79238(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7931C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8404992;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8404992;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7931C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB79400((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8390948;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8390948;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB79400(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB794E4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8390944;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8390944;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB794E4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB795C8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8390916;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8390916;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB795C8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB796AC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8390912;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8390912;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB796AC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB79790((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8390692;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8390692;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB79790(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB79874((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8390688;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8390688;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB79874(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB79958((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8390660;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8390660;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB79958(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB79A3C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8390656;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8390656;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB79A3C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB79B20((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8388900;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8388900;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB79B20(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB79C04((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8388896;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8388896;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB79C04(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB79CE8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8388868;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8388868;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB79CE8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB79DCC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8388864;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8388864;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB79DCC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB79EB0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8388644;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8388644;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB79EB0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB79F94((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8388640;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8388640;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB79F94(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7A078((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 8388612;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 8388612;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7A078(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7A154((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 0x800000;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 0x800000;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7A154(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7A238((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1198372;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1198372;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7A238(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7A31C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1198368;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1198368;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7A31C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7A400((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1198340;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1198340;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7A400(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7A4E4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1198336;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1198336;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7A4E4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7A5C8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1198116;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1198116;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7A5C8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7A6AC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1198112;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1198112;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7A6AC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7A790((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1198084;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1198084;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7A790(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7A874((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1198080;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1198080;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7A874(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7A958((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1196324;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1196324;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7A958(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7AA3C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1196320;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1196320;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7AA3C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7AB20((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1196292;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1196292;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7AB20(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7AC04((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1196288;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1196288;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7AC04(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7ACE8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1196068;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1196068;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7ACE8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7ADCC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1196064;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1196064;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7ADCC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7AEB0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1196036;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1196036;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7AEB0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7AF94((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1196032;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1196032;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7AF94(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7B078((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1181988;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1181988;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7B078(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7B15C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1181984;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1181984;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7B15C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7B240((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1181956;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1181956;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7B240(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7B324((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1181952;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1181952;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7B324(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7B408((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1181732;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1181732;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7B408(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7B4EC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1181728;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1181728;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7B4EC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7B5D0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1181700;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1181700;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7B5D0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7B6B4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1181696;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1181696;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7B6B4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7B798((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1179940;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1179940;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7B798(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7B87C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1179936;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1179936;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7B87C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7B960((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1179908;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1179908;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7B960(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7BA44((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1179904;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1179904;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7BA44(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7BB28((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1179684;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1179684;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7BB28(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7BC0C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1179680;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1179680;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7BC0C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7BCF0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1179652;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1179652;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7BCF0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7BDCC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1179648;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1179648;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7BDCC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7BEB0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1067300;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1067300;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7BEB0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7BF94((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1067296;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1067296;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7BF94(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7C078((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1067268;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1067268;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7C078(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7C15C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1067264;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1067264;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7C15C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7C240((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1067044;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1067044;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7C240(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7C324((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1067040;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1067040;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7C324(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7C408((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1067012;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1067012;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7C408(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7C4EC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1067008;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1067008;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7C4EC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7C5D0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1065252;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1065252;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7C5D0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7C6B4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1065248;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1065248;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7C6B4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7C798((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1065220;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1065220;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7C798(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7C87C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1065216;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1065216;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7C87C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7C960((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1064996;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1064996;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7C960(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7CA44((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1064992;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1064992;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7CA44(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7CB28((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1064964;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1064964;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7CB28(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7CC0C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1064960;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1064960;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7CC0C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7CCF0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1050916;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1050916;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7CCF0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7CDD4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1050912;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1050912;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7CDD4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7CEB8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1050884;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1050884;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7CEB8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7CF9C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1050880;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1050880;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7CF9C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7D080((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1050660;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1050660;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7D080(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7D164((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1050656;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1050656;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7D164(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7D248((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1050628;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1050628;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7D248(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7D32C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1050624;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1050624;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7D32C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7D410((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1048868;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1048868;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7D410(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7D4F4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1048864;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1048864;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7D4F4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7D5D8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1048836;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1048836;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7D5D8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7D6BC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1048832;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1048832;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7D6BC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7D7A0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1048612;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1048612;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7D7A0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7D884((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1048608;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1048608;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7D884(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7D968((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 1048580;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 1048580;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7D968(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7DA44((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 0x100000;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 0x100000;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7DA44(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7DB28((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 149796;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 149796;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7DB28(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7DC0C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 149792;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 149792;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7DC0C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7DCF0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 149764;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 149764;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7DCF0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7DDD4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 149760;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 149760;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7DDD4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7DEB8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 149540;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 149540;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7DEB8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7DF9C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 149536;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 149536;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7DF9C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7E080((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 149508;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 149508;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7E080(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7E164((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 149504;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 149504;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7E164(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7E248((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 147748;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 147748;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7E248(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7E32C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 147744;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 147744;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7E32C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7E410((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 147716;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 147716;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7E410(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7E4F4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 147712;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 147712;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7E4F4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7E5D8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 147492;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 147492;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7E5D8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7E6BC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 147488;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 147488;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7E6BC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7E7A0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 147460;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 147460;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7E7A0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7E884((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 147456;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 147456;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7E884(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7E968((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 133412;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 133412;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7E968(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7EA4C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 133408;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 133408;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7EA4C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7EB30((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 133380;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 133380;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7EB30(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7EC14((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 133376;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 133376;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7EC14(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7ECF8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 133156;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 133156;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7ECF8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7EDDC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 133152;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 133152;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7EDDC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7EEC0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 133124;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 133124;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7EEC0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7EFA4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 133120;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 133120;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7EFA4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7F088((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 131364;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 131364;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7F088(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7F16C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 131360;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 131360;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7F16C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7F250((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 131332;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 131332;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7F250(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7F334((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 131328;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 131328;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7F334(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7F418((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 131108;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 131108;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7F418(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7F4FC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 131104;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 131104;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7F4FC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7F5E0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 131076;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 131076;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7F5E0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7F6BC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 0x20000;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 0x20000;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7F6BC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7F798((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 18724;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 18724;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7F798(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7F874((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 18720;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 18720;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7F874(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7F950((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 18692;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 18692;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7F950(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7FA2C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 18688;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 18688;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7FA2C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7FB08((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 18468;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 18468;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7FB08(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7FBE4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 18464;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 18464;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7FBE4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7FCC0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 18436;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 18436;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7FCC0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7FD9C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 18432;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 18432;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7FD9C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7FE78((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 16676;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 16676;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB7FE78(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB7FF54((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 16672;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 16672;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB7FF54(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB80030((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 16644;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 16644;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB80030(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB8010C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 16640;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 16640;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB8010C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB801E8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 16420;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 16420;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB801E8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB802C4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 16416;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 16416;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB802C4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB803A0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 16388;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 16388;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB803A0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB8047C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 0x4000;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 0x4000;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB8047C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB80558((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2340;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2340;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB80558(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB80634((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2336;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2336;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB80634(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB80710((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2308;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2308;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB80710(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB807EC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2304;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2304;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB807EC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB808C8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2084;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2084;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB808C8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB809A4((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2080;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2080;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB809A4(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB80A80((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2052;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2052;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB80A80(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB80B5C((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 2048;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 2048;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB80B5C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB80C38((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 292;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 292;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB80C38(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB80D14((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 288;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 288;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB80D14(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB80DF0((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 260;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 260;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB80DF0(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB80ECC((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 256;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 256;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB80ECC(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB80FA8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 36;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 36;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB80FA8(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB81084((char **)a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    v5 = *(char **)a1;
    v6 = (uint64_t)&v3[-*(_QWORD *)a1] >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4(a1 + 16, v9);
      v5 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 32;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 32;
    v4 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1DCB81084(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  sub_1DCB64CB8((uint64_t)a1);
  v2 = (unint64_t)a1[2];
  v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = (v3 - *a1) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_1DCAE4C44();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v9);
      v5 = *a1;
      v3 = a1[1];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = 4;
    v4 = v11 + 8;
    while (v3 != v5)
    {
      v13 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v3 = 4;
    v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_1DCB81200(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x1DF0D228C](v3, 0x1030C403C5DC1E9);

  _Unwind_Resume(a1);
}

void sub_1DCB812DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x1DF0D228C](v3, 0x1030C403C5DC1E9);

  _Unwind_Resume(a1);
}

void sub_1DCB814D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1DCAE6B78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCB81508(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a2)
  {
    v3 = (void *)a2[25];
    if (v3)
    {
      a2[26] = v3;
      operator delete(v3);
    }
    v4 = (void *)a2[11];
    if (v4)
    {
      a2[12] = v4;
      operator delete(v4);
    }
    v5 = (void *)a2[8];
    if (v5)
    {
      a2[9] = v5;
      operator delete(v5);
    }
    v6 = (void *)a2[5];
    if (v6)
    {
      a2[6] = v6;
      operator delete(v6);
    }
    v7 = (void *)a2[1];
    if (v7)
    {
      a2[2] = v7;
      operator delete(v7);
    }
    JUMPOUT(0x1DF0D228CLL);
  }
}

uint64_t sub_1DCB81590(uint64_t a1, char a2)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = a2;
  *(_QWORD *)a1 = &off_1EA574138;
  v3 = operator new();
  sub_1DCB86FC4((_QWORD *)(a1 + 40), v3);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return a1;
}

void sub_1DCB81624(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)v1 = &off_1EA574198;
  sub_1DCAD5CA8(v2, *(_QWORD **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB8164C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v8;

  *(_QWORD *)a1 = &off_1EA574138;
  v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(_QWORD *)(a1 + 184) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 152);
  if (v3)
  {
    *(_QWORD *)(a1 + 160) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(_QWORD *)(a1 + 136) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 104);
  if (v5)
  {
    *(_QWORD *)(a1 + 112) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 80);
  if (v6)
  {
    *(_QWORD *)(a1 + 88) = v6;
    operator delete(v6);
  }
  v8 = (void **)(a1 + 56);
  sub_1DCB870C0(&v8);
  sub_1DCB0546C(a1 + 40);
  *(_QWORD *)a1 = &off_1EA574198;
  sub_1DCAD5CA8(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_1DCB81704(uint64_t a1)
{
  sub_1DCB8164C(a1);
  JUMPOUT(0x1DF0D228CLL);
}

void sub_1DCB81728(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::string *v8;
  unsigned __int16 *v9;
  int v10;
  int v11;
  uint64_t *v13;
  std::string::size_type size;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  char v21;
  void **v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  void *v37;
  int v38;
  uint64_t v39;
  int v40;
  __int128 *v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v48;
  unint64_t v49;
  int v50;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  int *v58;
  _DWORD *v59;
  uint64_t *v60;
  _QWORD *v61;
  int *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  int *v68;
  int *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  std::string *v73;
  void *v74[2];
  uint64_t v75;
  __int128 __p;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  _OWORD v89[4];
  void *v90[2];
  __int128 v91;
  _OWORD v92[10];
  std::string __str;
  __int128 v94;
  char *v95;
  char *v96;
  uint64_t v97;

  memset(&__str, 0, sizeof(__str));
  if (!sub_1DCB8228C(a3, (uint64_t)&__str))
  {
    sub_1DCB0345C(a4, "Parse PLY: Bad header");
    goto LABEL_181;
  }
  memset(v92, 0, sizeof(v92));
  *(_OWORD *)v90 = 0u;
  v91 = 0u;
  memset(v89, 0, sizeof(v89));
  v88 = 0u;
  sub_1DCB82468((uint64_t)&v88);
  v8 = (std::string *)v90;
  std::string::operator=((std::string *)v90, &__str);
  sub_1DCB03624((uint64_t)v89);
  v85 = 0;
  v86 = 0;
  v87 = 0;
  sub_1DCAF22B8((uint64_t *)&v88, (uint64_t)&v85);
  if (SHIBYTE(v87) < 0)
  {
    if (v86 != 6)
      goto LABEL_12;
    v9 = (unsigned __int16 *)v85;
  }
  else
  {
    if (SHIBYTE(v87) != 6)
      goto LABEL_12;
    v9 = (unsigned __int16 *)&v85;
  }
  v10 = *(_DWORD *)v9;
  v11 = v9[2];
  if (v10 == 1836216166 && v11 == 29793)
  {
    sub_1DCAF22B8((uint64_t *)&v88, a2);
    goto LABEL_13;
  }
LABEL_12:
  MEMORY[0x1DF0D201C](a2, "ascii");
LABEL_13:
  v13 = a1 + 7;
  v72 = (uint64_t)(a1 + 9);
  while (sub_1DCB8228C(a3, (uint64_t)&__str))
  {
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      std::ios_base::clear((std::ios_base *)((char *)&v89[-1] + *(_QWORD *)(v88 - 24)), 0);
      std::string::operator=(v8, &__str);
      sub_1DCB03624((uint64_t)v89);
      v82 = 0;
      v83 = 0;
      v84 = 0;
      sub_1DCAF22B8((uint64_t *)&v88, (uint64_t)&v82);
      if (SHIBYTE(v84) < 0)
      {
        v16 = v83;
        if (v83 != 7)
        {
          if (v83 != 8 || *(_QWORD *)v82 != 0x79747265706F7270)
            goto LABEL_32;
LABEL_42:
          if (a1[8] == a1[7])
          {
            v21 = 0;
            if (v84 < 0)
              goto LABEL_66;
            goto LABEL_173;
          }
          v74[0] = 0;
          v74[1] = 0;
          v75 = 0;
          sub_1DCAF22B8((uint64_t *)&v88, (uint64_t)v74);
          if ((SHIBYTE(v75) & 0x80000000) == 0)
          {
            if (SHIBYTE(v75) == 4)
            {
              v22 = v74;
              goto LABEL_70;
            }
            goto LABEL_71;
          }
          if (v74[1] != (void *)4)
            goto LABEL_71;
          v22 = (void **)v74[0];
LABEL_70:
          if (*(_DWORD *)v22 == 1953720684)
          {
            sub_1DCAF22B8((uint64_t *)&v88, (uint64_t)v74);
            v38 = sub_1DCB82554(v74);
            sub_1DCAF22B8((uint64_t *)&v88, (uint64_t)v74);
          }
          else
          {
LABEL_71:
            v38 = 8;
          }
          v94 = 0uLL;
          v95 = 0;
          sub_1DCAF22B8((uint64_t *)&v88, (uint64_t)&v94);
          v39 = a1[8];
          if (SHIBYTE(v95) < 0)
          {
            v43 = *((_QWORD *)&v94 + 1);
            if (*((_QWORD *)&v94 + 1) == 1)
            {
              v42 = *(unsigned __int8 *)v94 - 120;
              if (v42 >= 3)
                LOBYTE(v42) = 10;
LABEL_111:
              v40 = v42;
            }
            else
            {
              if (*((_QWORD *)&v94 + 1) != 2)
                goto LABEL_78;
              if (*(_WORD *)v94 == 30830)
              {
LABEL_136:
                v40 = 3;
                goto LABEL_149;
              }
              if (*(_WORD *)v94 == 31086)
              {
LABEL_140:
                v40 = 4;
                goto LABEL_149;
              }
              v40 = *(_WORD *)v94 == 31342 ? 5 : 10;
              if (*(_WORD *)v94 != 31342)
              {
LABEL_78:
                if (*((_QWORD *)&v94 + 1) == 3)
                {
                  if (*(_WORD *)v94 == 25970 && *(_BYTE *)(v94 + 2) == 100)
                  {
                    v40 = 6;
                    goto LABEL_149;
                  }
                  v43 = *((_QWORD *)&v94 + 1);
                }
                if (v43 == 5)
                {
                  if (*(_DWORD *)v94 == 1701147239 && *(_BYTE *)(v94 + 4) == 110)
                  {
LABEL_137:
                    v40 = 7;
                    goto LABEL_149;
                  }
                  v43 = *((_QWORD *)&v94 + 1);
                }
                if (v43 == 4)
                {
                  if (*(_DWORD *)v94 == 1702194274)
                  {
                    v40 = 8;
                    goto LABEL_149;
                  }
                  v43 = *((_QWORD *)&v94 + 1);
                }
                if (v43 == 14)
                {
                  if (*(_QWORD *)v94 == 0x695F786574726576 && *(_QWORD *)(v94 + 6) == 0x73656369646E695FLL)
                  {
LABEL_138:
                    v40 = 9;
                    goto LABEL_149;
                  }
                  v43 = *((_QWORD *)&v94 + 1);
                }
                if (v43 == 12)
                {
                  v41 = (__int128 *)v94;
                  goto LABEL_122;
                }
                v40 = 10;
              }
            }
          }
          else
          {
            v40 = 10;
            v41 = &v94;
            switch(HIBYTE(v95))
            {
              case 1:
                v42 = v94 - 120;
                if (v42 < 3)
                  goto LABEL_111;
                goto LABEL_149;
              case 2:
                switch((unsigned __int16)v94)
                {
                  case 0x786Eu:
                    goto LABEL_136;
                  case 0x796Eu:
                    goto LABEL_140;
                  case 0x7A6Eu:
                    v40 = 5;
                    break;
                }
                goto LABEL_149;
              case 3:
                if ((unsigned __int16)v94 ^ 0x6572 | BYTE2(v94) ^ 0x64)
                  v40 = 10;
                else
                  v40 = 6;
                goto LABEL_149;
              case 4:
                goto LABEL_133;
              case 5:
                if ((_DWORD)v94 == 1701147239 && BYTE4(v94) == 110)
                  goto LABEL_137;
                if (HIBYTE(v95) == 4)
                {
LABEL_133:
                  if ((_DWORD)v94 == 1702194274)
                    v40 = 8;
                  else
                    v40 = 10;
                }
                goto LABEL_149;
              case 0xC:
                break;
              case 0xE:
                if ((_QWORD)v94 == 0x695F786574726576 && *(_QWORD *)((char *)&v94 + 6) == 0x73656369646E695FLL)
                  goto LABEL_138;
                if (HIBYTE(v95) != 12)
                  goto LABEL_149;
                v41 = &v94;
                break;
              default:
                goto LABEL_149;
            }
LABEL_122:
            v48 = 0x7665727465785F69;
            v49 = bswap64(*(_QWORD *)v41);
            if (v49 == 0x7665727465785F69)
            {
              v49 = bswap32(*((_DWORD *)v41 + 2));
              if ((_DWORD)v49 == 1852073336)
              {
                v50 = 0;
                goto LABEL_146;
              }
              v48 = 1852073336;
            }
            if (v49 < v48)
              v50 = -1;
            else
              v50 = 1;
LABEL_146:
            if (v50)
              v40 = 10;
            else
              v40 = 9;
          }
LABEL_149:
          v73 = v8;
          v52 = a1;
          v53 = v38;
          v54 = v39 - 56;
          v55 = sub_1DCB82554(v74);
          v56 = v55;
          v57 = *(_QWORD *)(v54 + 16);
          v58 = *(int **)(v54 + 8);
          if ((unint64_t)v58 >= v57)
          {
            v60 = v13;
            v61 = a4;
            v62 = *(int **)v54;
            v63 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v58 - *(_QWORD *)v54) >> 2);
            v64 = v63 + 1;
            if (v63 + 1 > 0x1555555555555555)
              sub_1DCAE4C44();
            v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (_QWORD)v62) >> 2);
            if (2 * v65 > v64)
              v64 = 2 * v65;
            if (v65 >= 0xAAAAAAAAAAAAAAALL)
              v66 = 0x1555555555555555;
            else
              v66 = v64;
            if (v66)
            {
              v67 = (char *)sub_1DCB011C0(v54 + 16, v66);
              v62 = *(int **)v54;
              v58 = *(int **)(v54 + 8);
            }
            else
            {
              v67 = 0;
            }
            v68 = (int *)&v67[12 * v63];
            *v68 = v40;
            v68[1] = v56;
            v68[2] = v53;
            v69 = v68;
            a4 = v61;
            if (v58 == v62)
            {
              v13 = v60;
              a1 = v52;
            }
            else
            {
              a1 = v52;
              do
              {
                v70 = *(_QWORD *)(v58 - 3);
                v58 -= 3;
                v71 = v58[2];
                *(_QWORD *)(v69 - 3) = v70;
                v69 -= 3;
                v69[2] = v71;
              }
              while (v58 != v62);
              v62 = *(int **)v54;
              v13 = v60;
            }
            v8 = v73;
            v59 = v68 + 3;
            *(_QWORD *)v54 = v69;
            *(_QWORD *)(v54 + 8) = v68 + 3;
            *(_QWORD *)(v54 + 16) = &v67[12 * v66];
            if (v62)
              operator delete(v62);
          }
          else
          {
            *v58 = v40;
            v58[1] = v55;
            v59 = v58 + 3;
            v58[2] = v53;
            a1 = v52;
            v8 = v73;
          }
          *(_QWORD *)(v54 + 8) = v59;
          if (SHIBYTE(v95) < 0)
            operator delete((void *)v94);
          if (SHIBYTE(v75) < 0)
          {
            v37 = v74[0];
            goto LABEL_171;
          }
          goto LABEL_172;
        }
        if (*(_DWORD *)v82 != 1835363429 || *(_DWORD *)((char *)v82 + 3) != 1953391981)
        {
          v16 = v83;
LABEL_32:
          if (v16 != 10)
            goto LABEL_172;
          v15 = (unsigned __int16 *)v82;
          goto LABEL_34;
        }
LABEL_51:
        v80 = 0uLL;
        v81 = 0;
        sub_1DCAF22B8((uint64_t *)&v88, (uint64_t)&v80);
        v79 = 0;
        MEMORY[0x1DF0D20F4](&v88, &v79);
        sub_1DCB86D64(v74, &v80, v79);
        v24 = a1[8];
        v25 = a1[9];
        if (v24 >= v25)
        {
          v27 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v24 - *v13) >> 3);
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) > 0x492492492492492)
            sub_1DCAE4C44();
          v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v25 - *v13) >> 3);
          if (2 * v29 > v28)
            v28 = 2 * v29;
          if (v29 >= 0x249249249249249)
            v30 = 0x492492492492492;
          else
            v30 = v28;
          v97 = v72;
          v31 = (char *)sub_1DCB871FC(v72, v30);
          v32 = &v31[56 * v27];
          *(_QWORD *)&v94 = v31;
          *((_QWORD *)&v94 + 1) = v32;
          v96 = &v31[56 * v33];
          *(_QWORD *)v32 = 0;
          *((_QWORD *)v32 + 1) = 0;
          *((_QWORD *)v32 + 2) = 0;
          *(_OWORD *)v32 = *(_OWORD *)v74;
          *((_QWORD *)v32 + 2) = v75;
          v74[0] = 0;
          v74[1] = 0;
          v75 = 0;
          v34 = __p;
          *((_QWORD *)v32 + 5) = v77;
          *(_OWORD *)(v32 + 24) = v34;
          v77 = 0;
          __p = 0uLL;
          *((_QWORD *)v32 + 6) = v78;
          v95 = v32 + 56;
          sub_1DCB87188(v13, &v94);
          v35 = a1[8];
          sub_1DCB87388((void **)&v94);
          v36 = SHIBYTE(v77);
          a1[8] = v35;
          if (v36 < 0)
            operator delete((void *)__p);
        }
        else
        {
          *(_QWORD *)v24 = 0;
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v24 + 16) = 0;
          *(_OWORD *)v24 = *(_OWORD *)v74;
          *(_QWORD *)(v24 + 16) = v75;
          v74[0] = 0;
          v74[1] = 0;
          v75 = 0;
          v26 = v77;
          *(_OWORD *)(v24 + 24) = __p;
          *(_QWORD *)(v24 + 40) = v26;
          v77 = 0;
          __p = 0uLL;
          *(_QWORD *)(v24 + 48) = v78;
          a1[8] = v24 + 56;
        }
        if (v74[0])
        {
          v74[1] = v74[0];
          operator delete(v74[0]);
        }
        if (SHIBYTE(v81) < 0)
        {
          v37 = (void *)v80;
LABEL_171:
          operator delete(v37);
        }
LABEL_172:
        v21 = 0;
        if ((v84 & 0x8000000000000000) == 0)
          goto LABEL_173;
LABEL_66:
        operator delete(v82);
        if ((v21 & 1) != 0)
          break;
      }
      else
      {
        if (HIBYTE(v84) == 7)
        {
          if ((_DWORD)v82 != 1835363429 || *(_DWORD *)((char *)&v82 + 3) != 1953391981)
            goto LABEL_172;
          goto LABEL_51;
        }
        if (HIBYTE(v84) == 8)
        {
          if (v82 != (void *)0x79747265706F7270)
            goto LABEL_172;
          goto LABEL_42;
        }
        if (HIBYTE(v84) != 10)
          goto LABEL_172;
        v15 = (unsigned __int16 *)&v82;
LABEL_34:
        v18 = *(_QWORD *)v15;
        v19 = v15[4];
        if (v18 != 0x646165685F646E65 || v19 != 29285)
          goto LABEL_172;
        v21 = 1;
        if (v84 < 0)
          goto LABEL_66;
LABEL_173:
        if ((v21 & 1) != 0)
          break;
      }
    }
  }
  sub_1DCB0345C(a4, "");
  if (SHIBYTE(v87) < 0)
    operator delete(v85);
  *(_QWORD *)&v88 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)&v89[-1] + *(_QWORD *)(v88 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  *(_QWORD *)&v89[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v91) < 0)
    operator delete(v90[0]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1DF0D2238]((char *)v92 + 8);
LABEL_181:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1DCB821AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  uint64_t v43;

  if (*(char *)(v43 - 105) < 0)
    operator delete(*(void **)(v43 - 128));
  if (a18 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  sub_1DCAF25DC((uint64_t)&a43);
  if (*(char *)(v43 - 129) < 0)
    operator delete(*(void **)(v43 - 152));
  _Unwind_Resume(a1);
}

BOOL sub_1DCB8228C(_QWORD *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  std::locale v29;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v4 = std::locale::use_facet(&v29, MEMORY[0x1E0DE4A90]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v29);
  v6 = sub_1DCB86E3C(a1, a2, v5);
  v7 = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5;
  if (!v7)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
    v9 = (char)v8;
    v10 = a2 + v8;
    if (v9 >= 0)
      v11 = v10;
    else
      v11 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
    if (v9 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    v13 = MEMORY[0x1E0C80978];
    while (v11 != v12)
    {
      v15 = *(char *)--v11;
      v14 = v15;
      if ((v15 & 0x80000000) != 0)
      {
        if (!__maskrune(v14, 0x4000uLL))
        {
LABEL_14:
          v12 = v11 + 1;
          break;
        }
      }
      else if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) == 0)
      {
        goto LABEL_14;
      }
    }
    v16 = *(unsigned __int8 *)(a2 + 23);
    v17 = (char)v16;
    v18 = a2 + v16;
    if (v17 >= 0)
    {
      v19 = a2;
    }
    else
    {
      v18 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
      v19 = *(_QWORD *)a2;
    }
    std::string::erase((std::string *)a2, v12 - v19, v18 - v12);
    v20 = *(char *)(a2 + 23);
    v21 = *(_QWORD *)a2;
    if (v20 >= 0)
      v22 = a2;
    else
      v22 = *(_QWORD *)a2;
    if (v20 >= 0)
      v23 = *(unsigned __int8 *)(a2 + 23);
    else
      v23 = *(_QWORD *)(a2 + 8);
    if (v23)
    {
      v24 = (char *)(v22 + v23);
      v25 = (char *)v22;
      do
      {
        v26 = *v25;
        if ((v26 & 0x80000000) != 0)
        {
          if (!__maskrune(v26, 0x4000uLL))
            goto LABEL_32;
        }
        else if ((*(_DWORD *)(v13 + 4 * v26 + 60) & 0x4000) == 0)
        {
          goto LABEL_32;
        }
        ++v25;
        --v23;
      }
      while (v23);
      v25 = v24;
LABEL_32:
      LOBYTE(v20) = *(_BYTE *)(a2 + 23);
      v21 = *(_QWORD *)a2;
    }
    else
    {
      v25 = (char *)v22;
    }
    if ((v20 & 0x80u) == 0)
      v27 = a2;
    else
      v27 = v21;
    std::string::erase((std::string *)a2, v22 - v27, (std::string::size_type)&v25[-v22]);
  }
  return v7 == 0;
}

void sub_1DCB82454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB82468(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FD8];
  v3 = MEMORY[0x1E0DE4FD8] + 64;
  *(_QWORD *)(a1 + 120) = MEMORY[0x1E0DE4FD8] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 16));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 120) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 8;
  return a1;
}

void sub_1DCB8252C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1DF0D2238](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB82554(_QWORD *a1)
{
  int v2;
  uint64_t v4;
  _DWORD *v7;

  v2 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    switch(*((_BYTE *)a1 + 23))
    {
      case 3:
        goto LABEL_3;
      case 4:
        v7 = a1;
        if (*(_DWORD *)a1 == 1918986339)
          return 0;
        goto LABEL_61;
      case 5:
        if (*(_DWORD *)a1 == 1634231157 && *((_BYTE *)a1 + 4) == 114)
          return 1;
        if (v2 == 3)
          goto LABEL_3;
        v7 = a1;
        if (v2 == 4)
          goto LABEL_61;
        if (v2 != 5)
          goto LABEL_62;
        if (*(_DWORD *)a1 != 1919903859 || *((_BYTE *)a1 + 4) != 116)
          goto LABEL_62;
        return 2;
      case 6:
        if (*(_DWORD *)a1 == 1869116277 && *((_WORD *)a1 + 2) == 29810)
          return 3;
        v7 = a1;
        if (v2 == 4)
          goto LABEL_61;
        if (v2 != 3)
          goto LABEL_62;
        goto LABEL_3;
      default:
        goto LABEL_62;
    }
  }
  v4 = a1[1];
  if (v4 == 4 && *(_DWORD *)*a1 == 1918986339)
    return 0;
  if (v4 == 5)
  {
    if (*(_DWORD *)*a1 == 1634231157 && *(_BYTE *)(*a1 + 4) == 114)
      return 1;
    v4 = a1[1];
    if (v4 == 5)
    {
      if (*(_DWORD *)*a1 == 1919903859 && *(_BYTE *)(*a1 + 4) == 116)
        return 2;
      if ((v2 & 0x80) == 0)
      {
        if (v2 != 3)
        {
          v7 = a1;
          if (v2 != 4)
            goto LABEL_62;
          goto LABEL_61;
        }
LABEL_3:
        if (*(_WORD *)a1 != 28265 || *((_BYTE *)a1 + 2) != 116)
        {
          if ((v2 & 0x80) == 0)
            goto LABEL_62;
          goto LABEL_36;
        }
        return 4;
      }
    }
  }
  if (v4 == 6)
  {
    if (*(_DWORD *)*a1 == 1869116277 && *(_WORD *)(*a1 + 4) == 29810)
      return 3;
    v4 = a1[1];
  }
  if (v4 != 3)
    goto LABEL_37;
  if (*(_WORD *)*a1 == 28265 && *(_BYTE *)(*a1 + 2) == 116)
    return 4;
LABEL_36:
  v4 = a1[1];
LABEL_37:
  if (v4 != 4)
    goto LABEL_62;
  v7 = (_DWORD *)*a1;
LABEL_61:
  if (*v7 == 1953393013)
    return 5;
LABEL_62:
  if (sub_1DCAF24E8(a1, "float"))
    return 6;
  if (sub_1DCAF24E8(a1, "double"))
    return 7;
  if (sub_1DCAF24E8(a1, "int8"))
    return 0;
  if (sub_1DCAF24E8(a1, "uint8"))
    return 1;
  if (sub_1DCAF24E8(a1, "int16"))
    return 2;
  if (sub_1DCAF24E8(a1, "uint16"))
    return 3;
  if (sub_1DCAF24E8(a1, "int32"))
    return 4;
  if (sub_1DCAF24E8(a1, "uint32"))
    return 5;
  if (sub_1DCAF24E8(a1, "float32"))
    return 6;
  if (sub_1DCAF24E8(a1, "float64"))
    return 7;
  else
    return 8;
}

uint64_t sub_1DCB828A4(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1DCB828E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v12;
  int v13;
  int v14;

  if (*(_DWORD *)(a2 + 8) == 8)
  {
    v14 = *(_DWORD *)(a2 + 4);
    v7 = *(_QWORD *)(a4 + 24);
    if (v7)
    {
      (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v7 + 48))(v7, a3, &v14);
      return 1;
    }
LABEL_11:
    sub_1DCAE7684();
  }
  v12 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a4 + 24);
  if (!v8)
    goto LABEL_11;
  v9 = (int)(*(float (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v8 + 48))(v8, a3, &v12);
  if (v9 <= 0x400)
  {
    if (!v9)
      return 1;
    while (1)
    {
      v13 = *(_DWORD *)(a2 + 4);
      v10 = *(_QWORD *)(a4 + 24);
      if (!v10)
        break;
      (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v10 + 48))(v10, a3, &v13);
      if (!--v9)
        return 1;
    }
    goto LABEL_11;
  }
  return 0;
}

void sub_1DCB829B8(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  const std::locale::facet *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  void **v9;
  void *v10;
  BOOL v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  int v20;
  float (*v23)(uint64_t, unsigned int);
  __int128 *v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  std::locale *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  int v35;
  uint64_t v37;
  unint64_t j;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  int *v47;
  int *v48;
  unsigned int v49;
  int i;
  int v51;
  unint64_t v52;
  int *v53;
  _DWORD *v54;
  int *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  int *v61;
  int v62;
  unint64_t v63;
  unsigned int *v64;
  _DWORD *v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  int *v78;
  int *v79;
  char v80;
  char v81;
  int v82;
  unint64_t v83;
  int *v84;
  int *v85;
  uint64_t v86;
  char v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  void **v102;
  void **v103;
  uint64_t v104;
  float v105;
  _BYTE v106[12];
  uint64_t v107;
  float v108;
  void *__p[2];
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114[2];
  uint64_t v115;
  int v116;
  _BYTE v117[24];
  _BYTE *v118;
  _BYTE v119[24];
  _BYTE *v120;
  _BYTE v121[24];
  _BYTE *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  std::locale v127[2];
  __int128 v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v114[0] = 0;
  v114[1] = 0;
  v115 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v6 = std::locale::use_facet(v127, MEMORY[0x1E0DE4A90]);
  v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(v127);
  v8 = sub_1DCB86E3C(a2, (uint64_t)v114, v7);
  if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
  {
    sub_1DCB0345C(a3, "Parse PLY: Empty file");
    goto LABEL_74;
  }
  if (v115 >= 0)
    v9 = v114;
  else
    v9 = (void **)v114[0];
  if (strncmp("ply", (const char *)v9, 3uLL))
  {
    sub_1DCB0345C(a3, "Parse PLY: Bad format");
    goto LABEL_74;
  }
  v111 = 0;
  v112 = 0;
  v113 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v110 = 0;
  sub_1DCB81728(a1, (uint64_t)&v111, a2, __p);
  v10 = (void *)HIBYTE(v110);
  if (v110 < 0)
    v10 = __p[1];
  if (v10)
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    a3[2] = v110;
    goto LABEL_72;
  }
  *(_OWORD *)&v127[0].__locale_ = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  v123 = 0u;
  v124 = 0u;
  if ((v113 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v113) != 5)
    {
      if (HIBYTE(v113) != 17)
      {
        if (HIBYTE(v113) != 20)
          goto LABEL_54;
        v11 = v111 == (void *)0x6C5F7972616E6962 && v112 == 0x6E655F656C747469;
        if (!v11 || (_DWORD)v113 != 1851877732)
          goto LABEL_54;
        goto LABEL_77;
      }
      v13 = (uint64_t *)&v111;
LABEL_41:
      v18 = *v13;
      v19 = v13[1];
      v20 = *((unsigned __int8 *)v13 + 16);
      if (v18 != 0x625F7972616E6962 || v19 != 0x6169646E655F6769 || v20 != 110)
        goto LABEL_54;
      sub_1DCB838FC(v127, (uint64_t)sub_1DCB83D38);
      sub_1DCB83A38(&v125, (uint64_t)sub_1DCB83E38);
      v23 = sub_1DCB83F58;
      goto LABEL_79;
    }
    if ((_DWORD)v111 != 1768125281 || BYTE4(v111) != 105)
      goto LABEL_54;
LABEL_78:
    sub_1DCB838FC(v127, (uint64_t)sub_1DCB83868);
    sub_1DCB83A38(&v125, (uint64_t)sub_1DCB8399C);
    v23 = sub_1DCB83AD8;
    goto LABEL_79;
  }
  v14 = v112;
  if (v112 == 5 && *(_DWORD *)v111 == 1768125281 && *((_BYTE *)v111 + 4) == 105)
    goto LABEL_78;
  if (v112 != 20)
  {
LABEL_39:
    if (v14 != 17)
    {
LABEL_54:
      sub_1DCB0345C(a3, "Parse PLY: Bad format");
      goto LABEL_55;
    }
    v13 = (uint64_t *)v111;
    goto LABEL_41;
  }
  if (*(_QWORD *)v111 != 0x6C5F7972616E6962
    || *((_QWORD *)v111 + 1) != 0x6E655F656C747469
    || *((_DWORD *)v111 + 4) != 1851877732)
  {
    v14 = v112;
    goto LABEL_39;
  }
LABEL_77:
  sub_1DCB838FC(v127, (uint64_t)sub_1DCB83B08);
  sub_1DCB83A38(&v125, (uint64_t)sub_1DCB83BF8);
  v23 = sub_1DCB83D08;
LABEL_79:
  sub_1DCB83A38(&v123, (uint64_t)v23);
  v32 = a1[7];
  v31 = a1[8];
  if (v32 == v31)
    goto LABEL_237;
  v103 = (void **)(a1 + 19);
  v101 = a1 + 10;
  v102 = (void **)(a1 + 22);
  v100 = a1 + 13;
  v99 = a1 + 16;
  while (1)
  {
    v33 = *(_QWORD *)(v32 + 48);
    if (v33 >> 28)
      break;
    v34 = (_DWORD *)(v32 + 24);
    if (*(char *)(v32 + 47) < 0)
    {
      v37 = *(_QWORD *)(v32 + 32);
      if (v37 == 4)
      {
        v34 = *(_DWORD **)v34;
LABEL_99:
        if (*v34 == 1701011814)
        {
          sub_1DCB01460(v103, 3 * v33);
          sub_1DCB01460(v102, *(_QWORD *)(v32 + 48));
          v46 = *(_QWORD *)(v32 + 48);
          if (!v46)
            goto LABEL_236;
          v96 = 0;
          v97 = v31;
          while (1)
          {
            v48 = *(int **)v32;
            v47 = *(int **)(v32 + 8);
            if (*(int **)v32 != v47)
              break;
LABEL_175:
            v31 = v97;
            if (++v96 >= v46)
              goto LABEL_236;
          }
          while (2)
          {
            if (*v48 == 9)
            {
              LODWORD(v107) = v48[2];
              if (!*((_QWORD *)&v128 + 1))
                sub_1DCAE7684();
              v49 = (int)(*(float (**)(_QWORD, _QWORD *, uint64_t *))(**((_QWORD **)&v128 + 1) + 48))(*((_QWORD *)&v128 + 1), a2, &v107);
              if (v49 > 0x400)
              {
                sub_1DCB0345C(a3, "Parse PLY: Property list has invalid number of elements");
                goto LABEL_55;
              }
              if (v49)
              {
                for (i = 0; i != v49; ++i)
                {
                  LODWORD(v107) = v48[1];
                  if (!*((_QWORD *)&v128 + 1))
                    sub_1DCAE7684();
                  v51 = (int)(*(float (**)(_QWORD, _QWORD *, uint64_t *))(**((_QWORD **)&v128 + 1) + 48))(*((_QWORD *)&v128 + 1), a2, &v107);
                  v53 = (int *)a1[20];
                  v52 = a1[21];
                  if ((unint64_t)v53 >= v52)
                  {
                    v55 = (int *)*v103;
                    v56 = ((char *)v53 - (_BYTE *)*v103) >> 2;
                    v57 = v56 + 1;
                    if ((unint64_t)(v56 + 1) >> 62)
                      sub_1DCAE4C44();
                    v58 = v52 - (_QWORD)v55;
                    if (v58 >> 1 > v57)
                      v57 = v58 >> 1;
                    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                      v59 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v59 = v57;
                    if (v59)
                    {
                      v60 = (char *)sub_1DCAE4D04((uint64_t)(a1 + 21), v59);
                      v55 = (int *)a1[19];
                      v53 = (int *)a1[20];
                    }
                    else
                    {
                      v60 = 0;
                    }
                    v61 = (int *)&v60[4 * v56];
                    *v61 = v51;
                    v54 = v61 + 1;
                    while (v53 != v55)
                    {
                      v62 = *--v53;
                      *--v61 = v62;
                    }
                    a1[19] = v61;
                    a1[20] = v54;
                    a1[21] = &v60[4 * v59];
                    if (v55)
                      operator delete(v55);
                  }
                  else
                  {
                    *v53 = v51;
                    v54 = v53 + 1;
                  }
                  a1[20] = v54;
                }
              }
              v64 = (unsigned int *)a1[23];
              v63 = a1[24];
              if ((unint64_t)v64 >= v63)
              {
                v67 = (unsigned int *)*v102;
                v68 = ((char *)v64 - (_BYTE *)*v102) >> 2;
                v69 = v68 + 1;
                if ((unint64_t)(v68 + 1) >> 62)
                  sub_1DCAE4C44();
                v70 = v63 - (_QWORD)v67;
                if (v70 >> 1 > v69)
                  v69 = v70 >> 1;
                if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
                  v71 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v71 = v69;
                if (v71)
                {
                  v72 = (char *)sub_1DCAE4D04((uint64_t)(a1 + 24), v71);
                  v67 = (unsigned int *)a1[22];
                  v64 = (unsigned int *)a1[23];
                }
                else
                {
                  v72 = 0;
                }
                v76 = (unsigned int *)&v72[4 * v68];
                *v76 = v49;
                v65 = v76 + 1;
                while (v64 != v67)
                {
                  v77 = *--v64;
                  *--v76 = v77;
                }
                a1[22] = v76;
                a1[23] = v65;
                a1[24] = &v72[4 * v71];
                if (v67)
                  operator delete(v67);
              }
              else
              {
                *v64 = v49;
                v65 = v64 + 1;
              }
              a1[23] = v65;
              goto LABEL_173;
            }
            v66 = *((_QWORD *)&v128 + 1);
            if (*((_QWORD *)&v128 + 1))
            {
              if (*((std::locale **)&v128 + 1) != v127)
              {
                v66 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v128 + 1) + 16))(*((_QWORD *)&v128 + 1));
                goto LABEL_149;
              }
              v120 = v119;
              v66 = (*((uint64_t (**)(std::locale *, _BYTE *))v127[0].__locale_ + 3))(v127, v119);
            }
            else
            {
LABEL_149:
              v120 = (_BYTE *)v66;
            }
            v73 = sub_1DCB828E4(v66, (uint64_t)v48, (uint64_t)a2, (uint64_t)v119);
            v74 = v120;
            if (v120 == v119)
            {
              v74 = v119;
              v75 = 4;
LABEL_163:
              (*(void (**)(void))(*v74 + 8 * v75))();
            }
            else if (v120)
            {
              v75 = 5;
              goto LABEL_163;
            }
            if ((v73 & 1) == 0)
            {
LABEL_165:
              sub_1DCB0345C(a3, "Parse PLY: Unknown property");
              goto LABEL_55;
            }
LABEL_173:
            v48 += 3;
            if (v48 == v47)
            {
              v46 = *(_QWORD *)(v32 + 48);
              goto LABEL_175;
            }
            continue;
          }
        }
        goto LABEL_100;
      }
      if (v37 == 6 && **(_DWORD **)v34 == 1953654134 && *(_WORD *)(*(_QWORD *)v34 + 4) == 30821)
      {
LABEL_177:
        v78 = *(int **)v32;
        v79 = *(int **)(v32 + 8);
        if (*(int **)v32 == v79)
        {
          v81 = 0;
          v80 = 0;
        }
        else
        {
          v80 = 0;
          v81 = 0;
          do
          {
            v82 = *v78;
            v78 += 3;
            v80 |= v82 == 3;
            v81 |= v82 == 6;
          }
          while (v78 != v79);
        }
        v98 = v31;
        sub_1DCB83F88(v101, v33);
        if ((v80 & 1) != 0)
          sub_1DCB83F88(v100, *(_QWORD *)(v32 + 48));
        if ((v81 & 1) != 0)
          sub_1DCB83F88(v99, *(_QWORD *)(v32 + 48));
        v108 = 0.0;
        v107 = 0;
        *(_DWORD *)v106 = 0;
        *(_QWORD *)&v106[4] = 1065353216;
        v105 = 0.0;
        v104 = 0;
        if (*(_QWORD *)(v32 + 48))
        {
          v83 = 0;
          do
          {
            v85 = *(int **)v32;
            v84 = *(int **)(v32 + 8);
            while (v85 != v84)
            {
              switch(*v85)
              {
                case 0:
                  v116 = v85[1];
                  if (!*((_QWORD *)&v126 + 1))
                    goto LABEL_243;
                  LODWORD(v107) = (*(float (**)(_QWORD, _QWORD *, int *))(**((_QWORD **)&v126 + 1) + 48))(*((_QWORD *)&v126 + 1), a2, &v116);
                  goto LABEL_220;
                case 1:
                  v116 = v85[1];
                  if (!*((_QWORD *)&v126 + 1))
                    goto LABEL_243;
                  HIDWORD(v107) = (*(float (**)(_QWORD, _QWORD *, int *))(**((_QWORD **)&v126 + 1) + 48))(*((_QWORD *)&v126 + 1), a2, &v116);
                  goto LABEL_220;
                case 2:
                  v116 = v85[1];
                  if (!*((_QWORD *)&v126 + 1))
                    goto LABEL_243;
                  v108 = (*(float (**)(_QWORD, _QWORD *, int *))(**((_QWORD **)&v126 + 1) + 48))(*((_QWORD *)&v126 + 1), a2, &v116);
                  goto LABEL_220;
                case 3:
                  v116 = v85[1];
                  if (!*((_QWORD *)&v126 + 1))
                    goto LABEL_243;
                  *(_DWORD *)v106 = (*(float (**)(_QWORD, _QWORD *, int *))(**((_QWORD **)&v126 + 1) + 48))(*((_QWORD *)&v126 + 1), a2, &v116);
                  goto LABEL_220;
                case 4:
                  v116 = v85[1];
                  if (!*((_QWORD *)&v126 + 1))
                    goto LABEL_243;
                  *(_DWORD *)&v106[4] = (*(float (**)(_QWORD, _QWORD *, int *))(**((_QWORD **)&v126 + 1)
                                                                                         + 48))(*((_QWORD *)&v126 + 1), a2, &v116);
                  goto LABEL_220;
                case 5:
                  v116 = v85[1];
                  if (!*((_QWORD *)&v126 + 1))
                    goto LABEL_243;
                  *(_DWORD *)&v106[8] = (*(float (**)(_QWORD, _QWORD *, int *))(**((_QWORD **)&v126 + 1)
                                                                                         + 48))(*((_QWORD *)&v126 + 1), a2, &v116);
                  goto LABEL_220;
                case 6:
                  v116 = v85[1];
                  if (!*((_QWORD *)&v124 + 1))
                    goto LABEL_243;
                  LODWORD(v104) = (*(float (**)(_QWORD, _QWORD *, int *))(**((_QWORD **)&v124 + 1) + 48))(*((_QWORD *)&v124 + 1), a2, &v116);
                  goto LABEL_220;
                case 7:
                  v116 = v85[1];
                  if (!*((_QWORD *)&v124 + 1))
                    goto LABEL_243;
                  HIDWORD(v104) = (*(float (**)(_QWORD, _QWORD *, int *))(**((_QWORD **)&v124 + 1) + 48))(*((_QWORD *)&v124 + 1), a2, &v116);
                  goto LABEL_220;
                case 8:
                  v116 = v85[1];
                  if (!*((_QWORD *)&v124 + 1))
LABEL_243:
                    sub_1DCAE7684();
                  v105 = (*(float (**)(_QWORD, _QWORD *, int *))(**((_QWORD **)&v124 + 1) + 48))(*((_QWORD *)&v124 + 1), a2, &v116);
                  goto LABEL_220;
                default:
                  v86 = *((_QWORD *)&v128 + 1);
                  if (!*((_QWORD *)&v128 + 1))
                    goto LABEL_212;
                  if (*((std::locale **)&v128 + 1) == v127)
                  {
                    v122 = v121;
                    v86 = (*((uint64_t (**)(std::locale *, _BYTE *))v127[0].__locale_ + 3))(v127, v121);
                  }
                  else
                  {
                    v86 = (*(uint64_t (**)(void))(**((_QWORD **)&v128 + 1) + 16))();
LABEL_212:
                    v122 = (_BYTE *)v86;
                  }
                  v87 = sub_1DCB828E4(v86, (uint64_t)v85, (uint64_t)a2, (uint64_t)v121);
                  v88 = v122;
                  if (v122 == v121)
                  {
                    v88 = v121;
                    v89 = 4;
                  }
                  else
                  {
                    if (!v122)
                      goto LABEL_219;
                    v89 = 5;
                  }
                  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_219:
                  if ((v87 & 1) == 0)
                    goto LABEL_165;
LABEL_220:
                  v85 += 3;
                  break;
              }
            }
            v90 = a1[11];
            if (v90 >= a1[12])
            {
              v91 = sub_1DCB87774(v101, (uint64_t)&v107);
            }
            else
            {
              *(_QWORD *)v90 = v107;
              *(float *)(v90 + 8) = v108;
              v91 = v90 + 12;
            }
            a1[11] = v91;
            if ((v80 & 1) != 0)
            {
              v92 = a1[14];
              if (v92 >= a1[15])
              {
                v93 = sub_1DCB87774(v100, (uint64_t)v106);
              }
              else
              {
                *(_QWORD *)v92 = *(_QWORD *)v106;
                *(_DWORD *)(v92 + 8) = *(_DWORD *)&v106[8];
                v93 = v92 + 12;
              }
              a1[14] = v93;
            }
            if ((v81 & 1) != 0)
            {
              v94 = a1[17];
              if (v94 >= a1[18])
              {
                v95 = sub_1DCB87774(v99, (uint64_t)&v104);
              }
              else
              {
                *(_QWORD *)v94 = v104;
                *(float *)(v94 + 8) = v105;
                v95 = v94 + 12;
              }
              a1[17] = v95;
            }
            ++v83;
          }
          while (v83 < *(_QWORD *)(v32 + 48));
        }
        v31 = v98;
        goto LABEL_236;
      }
    }
    else
    {
      v35 = *(unsigned __int8 *)(v32 + 47);
      if (v35 == 4)
        goto LABEL_99;
      if (v35 == 6 && *v34 == 1953654134 && *(_WORD *)(v32 + 28) == 30821)
        goto LABEL_177;
    }
LABEL_100:
    if (!v33)
      goto LABEL_236;
    for (j = 0; j < v33; ++j)
    {
      v41 = *(_QWORD *)v32;
      v40 = *(_QWORD *)(v32 + 8);
      if (*(_QWORD *)v32 == v40)
        continue;
      do
      {
        v42 = *((_QWORD *)&v128 + 1);
        if (!*((_QWORD *)&v128 + 1))
          goto LABEL_106;
        if (*((std::locale **)&v128 + 1) != v127)
        {
          v42 = (*(uint64_t (**)(void))(**((_QWORD **)&v128 + 1) + 16))();
LABEL_106:
          v118 = (_BYTE *)v42;
          goto LABEL_108;
        }
        v118 = v117;
        v42 = (*((uint64_t (**)(std::locale *, _BYTE *))v127[0].__locale_ + 3))(v127, v117);
LABEL_108:
        v43 = sub_1DCB828E4(v42, v41, (uint64_t)a2, (uint64_t)v117);
        v44 = v118;
        if (v118 == v117)
        {
          v44 = v117;
          v45 = 4;
        }
        else
        {
          if (!v118)
            goto LABEL_113;
          v45 = 5;
        }
        (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_113:
        if ((v43 & 1) == 0)
          goto LABEL_165;
        v41 += 12;
      }
      while (v41 != v40);
      v33 = *(_QWORD *)(v32 + 48);
    }
LABEL_236:
    v32 += 56;
    if (v32 == v31)
    {
LABEL_237:
      sub_1DCB0345C(a3, "");
      goto LABEL_55;
    }
  }
  sub_1DCB0345C(a3, "Parse PLY: Element has invalid count");
LABEL_55:
  v25 = (__int128 *)*((_QWORD *)&v124 + 1);
  if (*((__int128 **)&v124 + 1) == &v123)
  {
    v26 = 4;
    v25 = &v123;
LABEL_59:
    (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
  }
  else if (*((_QWORD *)&v124 + 1))
  {
    v26 = 5;
    goto LABEL_59;
  }
  v27 = (__int128 *)*((_QWORD *)&v126 + 1);
  if (*((__int128 **)&v126 + 1) == &v125)
  {
    v28 = 4;
    v27 = &v125;
LABEL_64:
    (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
  }
  else if (*((_QWORD *)&v126 + 1))
  {
    v28 = 5;
    goto LABEL_64;
  }
  v29 = (std::locale *)*((_QWORD *)&v128 + 1);
  if (*((std::locale **)&v128 + 1) == v127)
  {
    v30 = 4;
    v29 = v127;
LABEL_69:
    (*((void (**)(void))v29->__locale_ + v30))();
  }
  else if (*((_QWORD *)&v128 + 1))
  {
    v30 = 5;
    goto LABEL_69;
  }
  if (SHIBYTE(v110) < 0)
    operator delete(__p[0]);
LABEL_72:
  if (SHIBYTE(v113) < 0)
    operator delete(v111);
LABEL_74:
  if (SHIBYTE(v115) < 0)
    operator delete(v114[0]);
}

void sub_1DCB836BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;

  v53 = *(_QWORD **)(v51 - 184);
  if (v53 == (_QWORD *)(v51 - 208))
  {
    v54 = 4;
    v53 = (_QWORD *)(v51 - 208);
  }
  else
  {
    if (!v53)
      goto LABEL_6;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_6:
  v55 = *(_QWORD **)(v51 - 152);
  if (v55 == (_QWORD *)(v51 - 176))
  {
    v56 = 4;
    v55 = (_QWORD *)(v51 - 176);
  }
  else
  {
    if (!v55)
      goto LABEL_11;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_11:
  v57 = *(_QWORD **)(v51 - 120);
  if (v57 == (_QWORD *)(v51 - 144))
  {
    v58 = 4;
    v57 = (_QWORD *)(v51 - 144);
  }
  else
  {
    if (!v57)
      goto LABEL_16;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_16:
  if (a30 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCB83868(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  double v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v2;
  v7 = v3;
  switch(a2)
  {
    case 0:
    case 2:
    case 4:
      LODWORD(v5) = 0;
      MEMORY[0x1DF0D20DC](a1, &v5);
      goto LABEL_4;
    case 1:
    case 3:
    case 5:
      LODWORD(v5) = 0;
      MEMORY[0x1DF0D20E8](a1, &v5);
LABEL_4:
      result = LODWORD(v5);
      break;
    case 6:
      LODWORD(v5) = 0;
      MEMORY[0x1DF0D20D0](a1, &v5);
      result = (int)*(float *)&v5;
      break;
    case 7:
      v5 = 0.0;
      MEMORY[0x1DF0D20C4](a1, &v5);
      result = (int)v5;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

_QWORD *sub_1DCB838FC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1EA573898;
  v6[1] = a2;
  v7 = v6;
  sub_1DCB874D4(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

float sub_1DCB8399C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  float result;
  double v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v2;
  v7 = v3;
  switch(a2)
  {
    case 0:
    case 2:
    case 4:
      LODWORD(v5) = 0;
      MEMORY[0x1DF0D20DC](a1, &v5);
      result = (float)SLODWORD(v5);
      break;
    case 1:
    case 3:
    case 5:
      LODWORD(v5) = 0;
      MEMORY[0x1DF0D20E8](a1, &v5);
      result = (float)LODWORD(v5);
      break;
    case 6:
      LODWORD(v5) = 0;
      MEMORY[0x1DF0D20D0](a1, &v5);
      result = *(float *)&v5;
      break;
    case 7:
      v5 = 0.0;
      MEMORY[0x1DF0D20C4](a1, &v5);
      result = v5;
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

_QWORD *sub_1DCB83A38(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1EA573840;
  v6[1] = a2;
  v7 = v6;
  sub_1DCB874D4(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

float sub_1DCB83AD8(uint64_t a1, unsigned int a2)
{
  if (a2 > 5)
    return sub_1DCB8399C(a1, a2);
  else
    return (float)(int)sub_1DCB83868(a1, a2) * 0.0039216;
}

uint64_t sub_1DCB83B08(uint64_t a1, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      std::istream::read();
      result = 0;
      break;
    case 6:
      std::istream::read();
      result = (int)0.0;
      break;
    case 7:
      std::istream::read();
      result = (int)0.0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

float sub_1DCB83BF8(uint64_t a1, int a2)
{
  float result;
  unsigned int v3;

  switch(a2)
  {
    case 0:
    case 2:
    case 4:
      std::istream::read();
      return (float)0;
    case 1:
      std::istream::read();
      LOBYTE(v3) = 0;
      goto LABEL_8;
    case 3:
      std::istream::read();
      LOWORD(v3) = 0;
      goto LABEL_8;
    case 5:
      std::istream::read();
      v3 = 0;
LABEL_8:
      result = (float)v3;
      break;
    case 6:
      std::istream::read();
      result = 0.0;
      break;
    case 7:
      std::istream::read();
      result = 0.0;
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

float sub_1DCB83D08(uint64_t a1, unsigned int a2)
{
  if (a2 > 5)
    return sub_1DCB83BF8(a1, a2);
  else
    return (float)(int)sub_1DCB83B08(a1, a2) * 0.0039216;
}

uint64_t sub_1DCB83D38(uint64_t a1, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
    case 1:
    case 2:
      std::istream::read();
      result = 0;
      break;
    case 3:
      std::istream::read();
      result = __rev16(0);
      break;
    case 4:
    case 5:
      std::istream::read();
      result = bswap32(0);
      break;
    case 6:
      std::istream::read();
      result = (int)COERCE_FLOAT(bswap32(0));
      break;
    case 7:
      result = (int)sub_1DCB86DDC();
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

float sub_1DCB83E38(uint64_t a1, int a2)
{
  int v2;
  float result;
  unsigned int v4;
  unsigned int v5;

  switch(a2)
  {
    case 0:
      std::istream::read();
      v2 = 0;
      goto LABEL_8;
    case 1:
      std::istream::read();
      LOBYTE(v4) = 0;
      return (float)v4;
    case 2:
      std::istream::read();
      v2 = (int)bswap32(0) >> 16;
      goto LABEL_8;
    case 3:
      std::istream::read();
      v5 = bswap32(0) >> 16;
      goto LABEL_10;
    case 4:
      std::istream::read();
      v2 = bswap32(0);
LABEL_8:
      result = (float)v2;
      break;
    case 5:
      std::istream::read();
      v5 = bswap32(0);
LABEL_10:
      result = (float)v5;
      break;
    case 6:
      std::istream::read();
      result = COERCE_FLOAT(bswap32(0));
      break;
    case 7:
      result = sub_1DCB86DDC();
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

float sub_1DCB83F58(uint64_t a1, unsigned int a2)
{
  if (a2 > 5)
    return sub_1DCB83E38(a1, a2);
  else
    return (float)(int)sub_1DCB83D38(a1, a2) * 0.0039216;
}

void sub_1DCB83F88(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556)
      sub_1DCAE4C44();
    v5 = a1[1] - *a1;
    v11 = v3;
    __p = sub_1DCB011C0(v3, a2);
    v8 = (char *)__p + v5;
    v9 = (char *)__p + v5;
    v10 = (char *)__p + 12 * v6;
    sub_1DCB87714(a1, &__p);
    if (v9 != v8)
      v9 = &v8[(v9 - v8 - 12) % 0xCuLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_1DCB8405C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1DCB840A8(uint64_t *a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  void *v39;
  const char *v40;
  MDLVertexDescriptor *v41;
  void *v42;
  const char *v43;
  void *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  void *v50;
  const char *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  void *v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  int v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  int v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  int v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  int v119;
  _BYTE *v120;
  id v121;
  float *v122;
  unint64_t v123;
  const char *v124;
  MDLVertexAttribute *v125;
  const char *v126;
  const char *v127;
  const char *v128;
  const char *v129;
  const char *v130;
  const char *v131;
  const char *v132;
  const char *v133;
  id v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  void *v140;
  const char *v141;
  void *v142;
  const char *v143;
  uint64_t v144;
  id v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  void *v153;
  id v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  void *v160;
  const char *v161;
  void *v162;
  void *v163;
  const char *v164;
  id v165;
  const char *v166;
  void *v167;
  const char *v168;
  uint64_t v169;
  void *v170;
  const char *v171;
  void *v172;
  MDLSubmesh *v173;
  char *v174;
  _BYTE *v175;
  MDLMaterial *v176;
  void *v177;
  const char *v178;
  void *v179;
  const char *v180;
  void *v181;
  MDLMesh *v182;
  const char *v183;
  uint64_t v184;
  const char *v185;
  void *v186;
  const char *v187;
  uint64_t v188;
  void *v189;
  const char *v190;
  uint64_t v191;
  void *v192;
  const char *v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  id v198;
  uint64_t v199;
  id v200;
  uint64_t v201;
  id v202;
  int *v203;
  void *v204;
  MDLVertexDescriptor *v205;
  MDLVertexAttribute *v206;
  void *__p;
  char *v208;
  char *v209;
  _QWORD v210[2];

  v210[1] = *MEMORY[0x1E0C80C00];
  v202 = a2;
  v200 = a3;
  v205 = objc_alloc_init(MDLVertexDescriptor);
  objc_msgSend_attributes(v205, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v7, v8, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setName_(v9, v10, (uint64_t)CFSTR("position"));

  objc_msgSend_attributes(v205, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v13, v14, 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFormat_(v15, v16, 786435);

  objc_msgSend_attributes(v205, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v19, v20, 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setBufferIndex_(v21, v22, 0);

  if (a1[14] != a1[13])
  {
    objc_msgSend_attributes(v205, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v25, v26, 1);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v27, v28, (uint64_t)CFSTR("normal"));

    objc_msgSend_attributes(v205, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v31, v32, 1);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFormat_(v33, v34, 786435);

    objc_msgSend_attributes(v205, v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v37, v38, 1);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBufferIndex_(v39, v40, 0);

  }
  v41 = v205;
  if (a1[17] != a1[16])
  {
    objc_msgSend_attributes(v205, v23, v24);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v42, v43, 2);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v44, v45, (uint64_t)CFSTR("color"));

    objc_msgSend_attributes(v205, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v48, v49, 2);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFormat_(v50, v51, 786435);

    objc_msgSend_attributes(v205, v52, v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v54, v55, 2);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBufferIndex_(v56, v57, 0);

    v41 = v205;
  }
  objc_msgSend_setPackedOffsets(v41, v23, v24);
  objc_msgSend_setPackedStrides(v205, v58, v59);
  v61 = a1[10];
  v60 = a1[11];
  objc_msgSend_layouts(v205, v62, v63);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v64, v65, 0);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v201 = objc_msgSend_stride(v66, v67, v68);

  __p = 0;
  v208 = 0;
  v209 = 0;
  sub_1DCB01460(&__p, (a1[20] - a1[19]) >> 2);
  v70 = a1[19];
  v69 = a1[20];
  sub_1DCB01460(&__p, (a1[11] - a1[10]) >> 2);
  if (v69 == v70)
  {
    if (a1[11] == a1[10])
    {
      v199 = 0;
    }
    else
    {
      LODWORD(v109) = 0;
      v110 = v208;
      do
      {
        if (v110 >= v209)
        {
          v112 = (char *)__p;
          v113 = (v110 - (_BYTE *)__p) >> 2;
          v114 = v113 + 1;
          if ((unint64_t)(v113 + 1) >> 62)
            sub_1DCAE4C44();
          v115 = v209 - (_BYTE *)__p;
          if ((v209 - (_BYTE *)__p) >> 1 > v114)
            v114 = v115 >> 1;
          if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
            v116 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v116 = v114;
          if (v116)
          {
            v117 = (char *)sub_1DCAE4D04((uint64_t)&v209, v116);
            v112 = (char *)__p;
            v110 = v208;
          }
          else
          {
            v117 = 0;
          }
          v118 = &v117[4 * v113];
          *(_DWORD *)v118 = v109;
          v111 = v118 + 4;
          while (v110 != v112)
          {
            v119 = *((_DWORD *)v110 - 1);
            v110 -= 4;
            *((_DWORD *)v118 - 1) = v119;
            v118 -= 4;
          }
          __p = v118;
          v208 = v111;
          v209 = &v117[4 * v116];
          if (v112)
            operator delete(v112);
        }
        else
        {
          *(_DWORD *)v110 = v109;
          v111 = v110 + 4;
        }
        v208 = v111;
        v109 = (v109 + 1);
        v110 = v111;
      }
      while (v109 < (a1[11] - a1[10]) >> 2);
      v199 = 0;
    }
  }
  else
  {
    v71 = (int *)a1[22];
    v203 = (int *)a1[23];
    if (v71 == v203)
    {
      v199 = 2;
    }
    else
    {
      v195 = v61;
      v196 = v60;
      v72 = 0;
      v199 = 2;
      do
      {
        v73 = *v71;
        if ((int)v73 >= 3)
        {
          v75 = 0;
          v74 = v72;
          do
          {
            v76 = a1[19];
            if (v74 >= (a1[20] - v76) >> 2)
              break;
            v77 = v208;
            if (v208 >= v209)
            {
              v79 = (char *)__p;
              v80 = (v208 - (_BYTE *)__p) >> 2;
              v81 = v80 + 1;
              if ((unint64_t)(v80 + 1) >> 62)
                goto LABEL_96;
              v82 = v209 - (_BYTE *)__p;
              if ((v209 - (_BYTE *)__p) >> 1 > v81)
                v81 = v82 >> 1;
              if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
                v83 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v83 = v81;
              if (v83)
              {
                v84 = (char *)sub_1DCAE4D04((uint64_t)&v209, v83);
                v79 = (char *)__p;
                v77 = v208;
              }
              else
              {
                v84 = 0;
              }
              v85 = &v84[4 * v80];
              *(_DWORD *)v85 = *(_DWORD *)(v76 + 4 * v74);
              v78 = v85 + 4;
              while (v77 != v79)
              {
                v86 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *((_DWORD *)v85 - 1) = v86;
                v85 -= 4;
              }
              __p = v85;
              v208 = v78;
              v209 = &v84[4 * v83];
              if (v79)
                operator delete(v79);
            }
            else
            {
              *(_DWORD *)v208 = *(_DWORD *)(v76 + 4 * v74);
              v78 = v77 + 4;
            }
            v208 = v78;
            if (v75 >= 3)
            {
              v87 = a1[19];
              v88 = v209;
              if (v78 >= v209)
              {
                v90 = (char *)__p;
                v91 = (v78 - (_BYTE *)__p) >> 2;
                v92 = v91 + 1;
                if ((unint64_t)(v91 + 1) >> 62)
                  goto LABEL_96;
                v93 = v209 - (_BYTE *)__p;
                if ((v209 - (_BYTE *)__p) >> 1 > v92)
                  v92 = v93 >> 1;
                if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
                  v94 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v94 = v92;
                if (v94)
                {
                  v95 = (char *)sub_1DCAE4D04((uint64_t)&v209, v94);
                  v90 = (char *)__p;
                  v78 = v208;
                }
                else
                {
                  v95 = 0;
                }
                v96 = &v95[4 * v91];
                *(_DWORD *)v96 = *(_DWORD *)(v87 + 4 * v72);
                v89 = v96 + 4;
                while (v78 != v90)
                {
                  v97 = *((_DWORD *)v78 - 1);
                  v78 -= 4;
                  *((_DWORD *)v96 - 1) = v97;
                  v96 -= 4;
                }
                v88 = &v95[4 * v94];
                __p = v96;
                v208 = v89;
                v209 = v88;
                if (v90)
                {
                  operator delete(v90);
                  v88 = v209;
                }
              }
              else
              {
                *(_DWORD *)v78 = *(_DWORD *)(v87 + 4 * v72);
                v89 = v78 + 4;
              }
              v208 = v89;
              v98 = v74 - 1;
              v99 = a1[19];
              if (v89 >= v88)
              {
                v101 = (char *)__p;
                v102 = (v89 - (_BYTE *)__p) >> 2;
                v103 = v102 + 1;
                if ((unint64_t)(v102 + 1) >> 62)
LABEL_96:
                  sub_1DCAE4C44();
                v104 = v88 - (_BYTE *)__p;
                if (v104 >> 1 > v103)
                  v103 = v104 >> 1;
                if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
                  v105 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v105 = v103;
                if (v105)
                {
                  v106 = (char *)sub_1DCAE4D04((uint64_t)&v209, v105);
                  v101 = (char *)__p;
                  v89 = v208;
                }
                else
                {
                  v106 = 0;
                }
                v107 = &v106[4 * v102];
                *(_DWORD *)v107 = *(_DWORD *)(v99 + 4 * v98);
                v100 = v107 + 4;
                while (v89 != v101)
                {
                  v108 = *((_DWORD *)v89 - 1);
                  v89 -= 4;
                  *((_DWORD *)v107 - 1) = v108;
                  v107 -= 4;
                }
                __p = v107;
                v208 = v100;
                v209 = &v106[4 * v105];
                if (v101)
                  operator delete(v101);
              }
              else
              {
                *(_DWORD *)v89 = *(_DWORD *)(v99 + 4 * v98);
                v100 = v89 + 4;
              }
              v208 = v100;
            }
            ++v75;
            ++v74;
          }
          while (v75 != (_DWORD)v73);
        }
        else
        {
          v74 = v72 + v73;
        }
        ++v71;
        v72 = v74;
      }
      while (v71 != v203);
      v60 = v196;
      v61 = v195;
    }
  }
  v120 = __p;
  v197 = v208;
  v121 = objc_alloc(MEMORY[0x1E0C99DF0]);
  v122 = (float *)(0xAAAAAAAAAAAAAAABLL * ((v60 - v61) >> 2));
  v123 = v201 * (_QWORD)v122;
  v198 = (id)objc_msgSend_initWithLength_(v121, v124, v201 * (_QWORD)v122);
  v125 = objc_alloc_init(MDLVertexAttribute);
  objc_msgSend_setFormat_(v125, v126, 786435);
  objc_msgSend_setBufferIndex_(v125, v127, 0);
  objc_msgSend_setOffset_(v125, v128, 0);
  objc_msgSend_setName_(v125, v129, (uint64_t)CFSTR("position"));
  v206 = objc_alloc_init(MDLVertexAttribute);
  objc_msgSend_setFormat_(v206, v130, 786436);
  objc_msgSend_setBufferIndex_(v206, v131, 0);
  objc_msgSend_setOffset_(v206, v132, 0);
  objc_msgSend_setName_(v206, v133, (uint64_t)CFSTR("color"));
  v134 = objc_retainAutorelease(v198);
  v137 = objc_msgSend_mutableBytes(v134, v135, v136);
  objc_msgSend_attributes(v205, v138, v139);
  v140 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v140, v141, 0);
  v142 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1DCACC16C(v137, (float *)v201, v142, a1[10], (float *)0xC, v125, v122, v201 * (_QWORD)v122, (float *)(a1[11] - a1[10]));

  if (a1[14] != a1[13])
  {
    objc_msgSend_setName_(v125, v143, (uint64_t)CFSTR("normal"));
    v145 = objc_retainAutorelease(v134);
    v148 = objc_msgSend_mutableBytes(v145, v146, v147);
    objc_msgSend_attributes(v205, v149, v150);
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v151, v152, 1);
    v153 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1DCACC16C(v148, (float *)v201, v153, a1[13], (float *)0xC, v125, v122, v123, (float *)(a1[14] - a1[13]));

  }
  if (a1[17] != a1[16])
  {
    v154 = objc_retainAutorelease(v134);
    v157 = objc_msgSend_mutableBytes(v154, v155, v156);
    objc_msgSend_attributes(v205, v158, v159);
    v160 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v160, v161, 2);
    v162 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1DCACC16C(v157, (float *)v201, v162, a1[16], (float *)0xC, v206, v122, v123, (float *)(a1[17] - a1[16]));

  }
  objc_msgSend_bufferAllocator(v202, v143, v144);
  v163 = (void *)objc_claimAutoreleasedReturnValue();
  v204 = (void *)objc_msgSend_newBufferFromZone_data_type_(v163, v164, 0, v134, 1);

  v165 = objc_alloc(MEMORY[0x1E0C99D50]);
  v167 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v165, v166, (uint64_t)__p, v197 - v120, 0);
  objc_msgSend_bufferAllocator(v202, v168, v169);
  v170 = (void *)objc_claimAutoreleasedReturnValue();
  v172 = (void *)objc_msgSend_newBufferFromZone_data_type_(v170, v171, 0, v167, 2);

  v173 = [MDLSubmesh alloc];
  v175 = __p;
  v174 = v208;
  v176 = [MDLMaterial alloc];
  v177 = (void *)objc_opt_new();
  v179 = (void *)objc_msgSend_initWithName_scatteringFunction_(v176, v178, (uint64_t)CFSTR("PLY Material"), v177);
  v181 = (void *)objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v173, v180, (uint64_t)v172, (v174 - v175) >> 2, 32, v199, v179);

  v182 = [MDLMesh alloc];
  v210[0] = v181;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v183, (uint64_t)v210, 1);
  v184 = objc_claimAutoreleasedReturnValue();
  v186 = (void *)objc_msgSend_initWithVertexBuffer_vertexCount_descriptor_submeshes_(v182, v185, (uint64_t)v204, v122, v205, v184);

  objc_msgSend_vertexDescriptor(v202, v187, v188);
  v189 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v184) = v189 == 0;

  if ((v184 & 1) == 0)
  {
    objc_msgSend_vertexDescriptor(v202, v190, v191);
    v192 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setVertexDescriptor_(v186, v193, (uint64_t)v192);

  }
  objc_msgSend_setName_(v186, v190, (uint64_t)v200);
  objc_msgSend_addObject_(v202, v194, (uint64_t)v186);

  if (__p)
  {
    v208 = (char *)__p;
    operator delete(__p);
  }

}

void sub_1DCB84B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *__p,uint64_t a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v28;

  v28 = a18;
  if (__p)
  {
    operator delete(__p);
    v28 = a18;
  }

  _Unwind_Resume(a1);
}

void sub_1DCB84D28(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X3>, _QWORD *a4@<X8>)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  const char *v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  void *__p[2];
  uint64_t v26;
  void *v27[2];
  uint64_t v28;
  _QWORD v29[2];
  _QWORD v30[51];
  _QWORD v31[20];

  v31[19] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  if (sub_1DCC1CD44(v7, v9, v10))
  {
    objc_msgSend_path(v7, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (v13)
    {
      v27[0] = 0;
      v27[1] = 0;
      v28 = 0;
      v15 = objc_retainAutorelease(v13);
      v17 = (char *)objc_msgSend_cStringUsingEncoding_(v15, v16, 4);
      sub_1DCB0345C(v27, v17);
      bzero(v29, 0x240uLL);
      sub_1DCB84FD8(v29);
      if (v30[15])
      {
        __p[0] = 0;
        __p[1] = 0;
        v26 = 0;
        sub_1DCB829B8(a1, v29, __p);
        v20 = (void *)HIBYTE(v26);
        if (v26 < 0)
          v20 = __p[1];
        if (v20)
        {
          *(_OWORD *)a4 = *(_OWORD *)__p;
          a4[2] = v26;
        }
        else
        {
          objc_msgSend_URLByDeletingPathExtension(v7, v18, v19);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_lastPathComponent(v21, v22, v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1DCB840A8(a1, v8, v24);

          sub_1DCB0345C(a4, "");
          if (SHIBYTE(v26) < 0)
            operator delete(__p[0]);
        }
      }
      else
      {
        sub_1DCB0345C(a4, "Could not open PLY file");
      }
      v29[0] = *MEMORY[0x1E0DE4F40];
      *(_QWORD *)((char *)v29 + *(_QWORD *)(v29[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
      MEMORY[0x1DF0D2094](v30);
      std::istream::~istream();
      MEMORY[0x1DF0D2238](v31);
      if (SHIBYTE(v28) < 0)
        operator delete(v27[0]);
    }
    else
    {
      sub_1DCB0345C(a4, "Could not open PLY file: Incorrect URL");
    }

  }
  else
  {
    sub_1DCB0345C(a4, "Could not find PLY file");
  }

}

void sub_1DCB84F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  if (a15 < 0)
    operator delete(__p);
  sub_1DCB850E4(&a22);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

_QWORD *sub_1DCB84FD8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1DF0D2088](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1DCB850AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1DF0D2238](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCB850E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1DF0D2094](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1DF0D2238](a1 + 53);
  return a1;
}

void sub_1DCB8513C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t i;
  void *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  std::string::size_type v18;
  uint64_t v19;
  int v20;
  std::string *p_str;
  std::string::size_type size;
  std::ios_base *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  _BOOL4 v31;
  _QWORD *v32;
  const char *v33;
  uint64_t v34;
  id v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  size_t v39;
  _QWORD *v40;
  const std::locale::facet *v41;
  const char *v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  _QWORD *v49;
  const std::locale::facet *v50;
  _QWORD *v51;
  const std::locale::facet *v52;
  _QWORD *v53;
  const std::locale::facet *v54;
  _QWORD *v55;
  const std::locale::facet *v56;
  const char *v57;
  uint64_t v58;
  _QWORD *v59;
  const std::locale::facet *v60;
  _QWORD *v61;
  const std::locale::facet *v62;
  _QWORD *v63;
  const std::locale::facet *v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  void *v81;
  BOOL v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  const std::locale::facet *v90;
  _QWORD *v91;
  const std::locale::facet *v92;
  _QWORD *v93;
  const std::locale::facet *v94;
  const char *v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  _DWORD *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _DWORD *v114;
  const char *v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  const std::locale::facet *v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  void *v125;
  const char *v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  const std::locale::facet *v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t j;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  const std::locale::facet *v151;
  const char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  const std::locale::facet *v159;
  const char *v160;
  uint64_t v161;
  const char *v162;
  uint64_t v163;
  const char *v164;
  uint64_t v165;
  void *v166;
  void *v167;
  const char *v168;
  uint64_t v169;
  void *v170;
  BOOL v171;
  const char *v172;
  uint64_t v173;
  void *v174;
  const char *v175;
  uint64_t v176;
  void *v177;
  const char *v178;
  uint64_t v179;
  void *v180;
  const char *v181;
  uint64_t v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  int v187;
  void *v188;
  const char *v189;
  uint64_t v190;
  BOOL v191;
  int v192;
  _QWORD *v193;
  const std::locale::facet *v194;
  unint64_t k;
  void *v196;
  id v197;
  void *v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  std::string::size_type v203;
  uint64_t v204;
  std::string::size_type v205;
  std::string::size_type v206;
  uint64_t v207;
  std::string::size_type v208;
  uint64_t v209;
  void *v210;
  int v211;
  int v212;
  void *v213;
  void *__p[2];
  char v215;
  __int128 v216;
  _OWORD v217[4];
  void *v218[2];
  __int128 v219;
  __int128 v220;
  _BYTE v221[144];
  uint64_t v222;
  std::string __str;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  std::string v231;
  _BYTE v232[384];
  uint64_t v233[19];
  _BYTE v234[128];
  uint64_t v235;

  v235 = *MEMORY[0x1E0C80C00];
  v197 = a2;
  v7 = a3;
  v196 = v7;
  if (v7)
  {
    v199 = a4;
    v229 = 0;
    v228 = 0;
    v230 = 0;
    v224 = 0u;
    v225 = 0u;
    v226 = 0u;
    v227 = 0u;
    v8 = v7;
    v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v224, v234, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v225;
      v12 = (__n128 *)MEMORY[0x1E0C83FF0];
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v225 != v11)
            objc_enumerationMutation(v8);
          v14 = *(void **)(*((_QWORD *)&v224 + 1) + 8 * i);
          sub_1DCC1CF40(a1, &v228, v14, *v12, v12[1], v12[2], v12[3]);
          sub_1DCC1D3E0(a1, &v228, v14, *v12, v12[1], v12[2], v12[3]);
        }
        v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v15, (uint64_t)&v224, v234, 16);
      }
      while (v10);
    }

    memset(&__str, 0, sizeof(__str));
    sub_1DCAD5A0C(v197, v16, v17, &__str);
    v18 = std::string::rfind(&__str, 46, 0xFFFFFFFFFFFFFFFFLL);
    if (v18 != -1)
    {
      std::string::basic_string(&v231, &__str, 0, v18, (std::allocator<char> *)&v216);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = v231;
    }
    v19 = v228;
    v209 = v229;
    if (v228 == v229)
    {
LABEL_96:
      sub_1DCB0345C(v199, "");
    }
    else
    {
      v20 = 0;
      v205 = *MEMORY[0x1E0DE4F48];
      v207 = MEMORY[0x1E0DE4FB0] + 64;
      v208 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
      v206 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
      v203 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
      v204 = MEMORY[0x1E0DE4FB8] + 16;
      v201 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v202 = *MEMORY[0x1E0DE4F50];
      v200 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      while (1)
      {
        v222 = 0;
        v220 = 0u;
        memset(v221, 0, sizeof(v221));
        *(_OWORD *)v218 = 0u;
        v219 = 0u;
        memset(v217, 0, sizeof(v217));
        v216 = 0u;
        sub_1DCB86A2C((uint64_t)&v216);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          size = __str.__r_.__value_.__l.__size_;
        sub_1DCB03734(v217, (uint64_t)p_str, size);
        ++v20;
        if (0xCCCCCCCCCCCCCCCDLL * ((v229 - v228) >> 4) >= 2)
        {
          sub_1DCB03734(v217, (uint64_t)"_", 1);
          std::ostream::operator<<();
        }
        sub_1DCB03734(v217, (uint64_t)".ply", 4);
        bzero(&v231.__r_.__value_.__r.__words[1], 0x230uLL);
        v233[0] = v207;
        v231.__r_.__value_.__r.__words[0] = v208;
        *(std::string::size_type *)((char *)v231.__r_.__value_.__r.__words + *(_QWORD *)(v208 - 24)) = v206;
        v23 = (std::ios_base *)((char *)&v231 + *(_QWORD *)(v231.__r_.__value_.__r.__words[0] - 24));
        std::ios_base::init(v23, &v231.__r_.__value_.__r.__words[1]);
        v23[1].__vftable = 0;
        v23[1].__fmtflags_ = -1;
        v231.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE4FB0] + 24;
        v233[0] = MEMORY[0x1E0DE4FB0] + 64;
        MEMORY[0x1DF0D2088](&v231.__r_.__value_.__r.__words[1]);
        std::stringbuf::str();
        std::ofstream::open();
        if (v215 < 0)
          operator delete(__p[0]);
        v212 = *(_DWORD *)&v232[*(_QWORD *)(v231.__r_.__value_.__r.__words[0] - 24)] & 5;
        if (v212)
        {
          sub_1DCB0345C(v199, "Failed to open file path.");
        }
        else
        {
          v24 = sub_1DCB03734(&v231, (uint64_t)"ply ", 4);
          std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
          v25 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          v26 = sub_1DCB03734(v24, (uint64_t)"format ascii 1.0", 16);
          std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
          v27 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          objc_msgSend_name(*(void **)(v19 + 64), v28, v29);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v211 = v20;
          v31 = v30 == 0;

          if (v31)
          {
            sub_1DCB03734(&v231, (uint64_t)"comment object: submesh", 23);
            v43 = (_QWORD *)std::ostream::operator<<();
            std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(*v43 - 24)));
            v44 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
            std::ostream::flush();
          }
          else
          {
            v32 = sub_1DCB03734(&v231, (uint64_t)"comment object: ", 16);
            objc_msgSend_name(*(void **)(v19 + 64), v33, v34);
            v35 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v38 = (const char *)objc_msgSend_UTF8String(v35, v36, v37);
            v39 = strlen(v38);
            sub_1DCB03734(v32, (uint64_t)v38, v39);
            v40 = (_QWORD *)std::ostream::operator<<();
            std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(_QWORD *)(*v40 - 24)));
            v41 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
            std::ostream::flush();

          }
          objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(*(void **)(v19 + 64), v42, (uint64_t)CFSTR("normal"), 786435);
          v198 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(*(void **)(v19 + 64), v45, (uint64_t)CFSTR("occlusionValue"), 786435);
          v213 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v213)
          {
            objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(*(void **)(v19 + 64), v46, (uint64_t)CFSTR("color"), 786435);
            v213 = (void *)objc_claimAutoreleasedReturnValue();
          }
          sub_1DCB03734(&v231, (uint64_t)"element vertex ", 15);
          objc_msgSend_vertexCount(*(void **)(v19 + 64), v47, v48);
          v49 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(_QWORD *)(*v49 - 24)));
          v50 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          v51 = sub_1DCB03734(&v231, (uint64_t)"property float x", 16);
          std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(_QWORD *)(*v51 - 24)));
          v52 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          v53 = sub_1DCB03734(v51, (uint64_t)"property float y", 16);
          std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(_QWORD *)(*v53 - 24)));
          v54 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          v55 = sub_1DCB03734(v53, (uint64_t)"property float z", 16);
          std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(_QWORD *)(*v55 - 24)));
          v56 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          if (v213)
          {
            v59 = sub_1DCB03734(&v231, (uint64_t)"property uchar red", 18);
            std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(_QWORD *)(*v59 - 24)));
            v60 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
            std::ostream::flush();
            v61 = sub_1DCB03734(v59, (uint64_t)"property uchar green", 20);
            std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(_QWORD *)(*v61 - 24)));
            v62 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
            std::ostream::flush();
            v63 = sub_1DCB03734(v61, (uint64_t)"property uchar blue", 19);
            std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(_QWORD *)(*v63 - 24)));
            v64 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
            std::ostream::flush();
          }
          if (objc_msgSend_geometryType(*(void **)(v19 + 72), v57, v58) == 2
            || objc_msgSend_geometryType(*(void **)(v19 + 72), v65, v66) == 4
            || objc_msgSend_geometryType(*(void **)(v19 + 72), v67, v68) == 1
            || !objc_msgSend_geometryType(*(void **)(v19 + 72), v69, v70))
          {
            sub_1DCB03734(&v231, (uint64_t)"element face ", 13);
            objc_msgSend_indexCount(*(void **)(v19 + 72), v88, v89);
            std::ostream::operator<<();
          }
          else if (objc_msgSend_geometryType(*(void **)(v19 + 72), v71, v72) == 5)
          {
            objc_msgSend_topology(*(void **)(v19 + 72), v73, v74);
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            if (v77)
            {
              objc_msgSend_topology(*(void **)(v19 + 72), v75, v76);
              v78 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_faceTopology(v78, v79, v80);
              v81 = (void *)objc_claimAutoreleasedReturnValue();
              v82 = v81 == 0;

              if (!v82)
              {
                sub_1DCB03734(&v231, (uint64_t)"element face ", 13);
                objc_msgSend_topology(*(void **)(v19 + 72), v83, v84);
                v85 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_faceCount(v85, v86, v87);
                std::ostream::operator<<();

              }
            }
          }
          std::ios_base::getloc((const std::ios_base *)((char *)&v231
                                                      + *(_QWORD *)(v231.__r_.__value_.__r.__words[0] - 24)));
          v90 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          v91 = sub_1DCB03734(&v231, (uint64_t)"property list uchar int vertex_index", 36);
          std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(_QWORD *)(*v91 - 24)));
          v92 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)(v92, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          v93 = sub_1DCB03734(v91, (uint64_t)"end_header", 10);
          std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(_QWORD *)(*v93 - 24)));
          v94 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(*(void **)(v19 + 64), v95, (uint64_t)CFSTR("position"), 786435);
          v96 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_dataStart(v96, v97, v98);
          v103 = objc_msgSend_stride(v96, v99, v100);
          if (v213)
          {
            v105 = objc_msgSend_stride(v213, v101, v102);
            v108 = (_DWORD *)objc_msgSend_dataStart(v213, v106, v107);
            if ((unint64_t)objc_msgSend_bufferSize(v213, v109, v110) >= 0xC)
            {
              v111 = -1;
              do
              {
                if (++v111 >= (unint64_t)objc_msgSend_vertexCount(*(void **)(v19 + 64), v101, v102))
                  break;
                LODWORD(v104) = *v108;
                if (*(float *)v108 > 1.0)
                  break;
                LODWORD(v104) = v108[1];
                if (*(float *)&v104 > 1.0)
                  break;
                LODWORD(v104) = v108[2];
              }
              while (*(float *)&v104 <= 1.0);
            }
          }
          else
          {
            v108 = 0;
            v105 = 0;
          }
          v112 = 0;
          v113 = 0;
          v114 = v108 + 2;
          while (v113 < objc_msgSend_vertexCount(*(void **)(v19 + 64), v101, v102, v104))
          {
            if (v112 + 12 <= (unint64_t)objc_msgSend_bufferSize(v96, v115, v116))
            {
              v117 = (_QWORD *)std::ostream::operator<<();
              sub_1DCB03734(v117, (uint64_t)" ", 1);
              v118 = (_QWORD *)std::ostream::operator<<();
              sub_1DCB03734(v118, (uint64_t)" ", 1);
              std::ostream::operator<<();
              if (v213)
              {
                sub_1DCB03734(&v231, (uint64_t)" ", 1);
                v119 = (_QWORD *)std::ostream::operator<<();
                sub_1DCB03734(v119, (uint64_t)" ", 1);
                v120 = (_QWORD *)std::ostream::operator<<();
                sub_1DCB03734(v120, (uint64_t)" ", 1);
                std::ostream::operator<<();
              }
              std::ios_base::getloc((const std::ios_base *)((char *)&v231
                                                          + *(_QWORD *)(v231.__r_.__value_.__r.__words[0] - 24)));
              v121 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v121->__vftable[2].~facet_0)(v121, 10);
              std::locale::~locale((std::locale *)__p);
              std::ostream::put();
              std::ostream::flush();
            }
            ++v113;
            v114 = (_DWORD *)((char *)v114 + v105);
            v112 += v103;
          }
          v122 = objc_msgSend_indexType(*(void **)(v19 + 72), v115, v116);
          objc_msgSend_indexBuffer(*(void **)(v19 + 72), v123, v124);
          v125 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_map(v125, v126, v127);
          v210 = (void *)objc_claimAutoreleasedReturnValue();

          v130 = objc_msgSend_bytes(v210, v128, v129);
          if (objc_msgSend_geometryType(*(void **)(v19 + 72), v131, v132) == 2)
          {
            v135 = 0;
            v136 = v130 + 4;
            v137 = v130 + 8;
            while (objc_msgSend_indexCount(*(void **)(v19 + 72), v133, v134) > v135)
            {
              sub_1DCB03734(&v231, (uint64_t)"3 ", 2);
              v138 = (_QWORD *)std::ostream::operator<<();
              sub_1DCB03734(v138, (uint64_t)" ", 1);
              v139 = (_QWORD *)std::ostream::operator<<();
              sub_1DCB03734(v139, (uint64_t)" ", 1);
              v140 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v140 + *(_QWORD *)(*v140 - 24)));
              v141 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v141->__vftable[2].~facet_0)(v141, 10);
              std::locale::~locale((std::locale *)__p);
              std::ostream::put();
              std::ostream::flush();
              v135 += 3;
              v136 += 6;
              v137 += 12;
            }
          }
          else if (objc_msgSend_geometryType(*(void **)(v19 + 72), v133, v134) == 4)
          {
            v144 = 0;
            v145 = 0;
            for (j = 0; objc_msgSend_indexCount(*(void **)(v19 + 72), v142, v143) > j; j += 4)
            {
              sub_1DCB03734(&v231, (uint64_t)"4 ", 2);
              v147 = (_QWORD *)std::ostream::operator<<();
              sub_1DCB03734(v147, (uint64_t)" ", 1);
              v148 = (_QWORD *)std::ostream::operator<<();
              sub_1DCB03734(v148, (uint64_t)" ", 1);
              v149 = (_QWORD *)std::ostream::operator<<();
              sub_1DCB03734(v149, (uint64_t)" ", 1);
              v150 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v150 + *(_QWORD *)(*v150 - 24)));
              v151 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v151->__vftable[2].~facet_0)(v151, 10);
              std::locale::~locale((std::locale *)__p);
              std::ostream::put();
              std::ostream::flush();
              v145 += 8;
              v144 += 16;
            }
          }
          else if (objc_msgSend_geometryType(*(void **)(v19 + 72), v142, v143) == 1)
          {
            v154 = 0;
            v155 = v130 + 2;
            v156 = v130 + 4;
            while (objc_msgSend_indexCount(*(void **)(v19 + 72), v152, v153) > v154)
            {
              sub_1DCB03734(&v231, (uint64_t)"2 ", 2);
              v157 = (_QWORD *)std::ostream::operator<<();
              sub_1DCB03734(v157, (uint64_t)" ", 1);
              v158 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v158 + *(_QWORD *)(*v158 - 24)));
              v159 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v159->__vftable[2].~facet_0)(v159, 10);
              std::locale::~locale((std::locale *)__p);
              std::ostream::put();
              std::ostream::flush();
              v154 += 2;
              v155 += 4;
              v156 += 8;
            }
          }
          else if (objc_msgSend_geometryType(*(void **)(v19 + 72), v152, v153))
          {
            if (objc_msgSend_geometryType(*(void **)(v19 + 72), v160, v161) == 5)
            {
              objc_msgSend_topology(*(void **)(v19 + 72), v162, v163);
              v166 = (void *)objc_claimAutoreleasedReturnValue();
              if (v166)
              {
                objc_msgSend_topology(*(void **)(v19 + 72), v164, v165);
                v167 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_faceTopology(v167, v168, v169);
                v170 = (void *)objc_claimAutoreleasedReturnValue();
                v171 = v170 == 0;

                if (!v171)
                {
                  objc_msgSend_topology(*(void **)(v19 + 72), v172, v173);
                  v174 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_faceTopology(v174, v175, v176);
                  v177 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_map(v177, v178, v179);
                  v180 = (void *)objc_claimAutoreleasedReturnValue();

                  v185 = objc_msgSend_bytes(v180, v181, v182);
                  v186 = 0;
                  v187 = 0;
                  while (1)
                  {
                    objc_msgSend_topology(*(void **)(v19 + 72), v183, v184);
                    v188 = (void *)objc_claimAutoreleasedReturnValue();
                    v191 = objc_msgSend_faceCount(v188, v189, v190) > v186;

                    if (!v191)
                      break;
                    v192 = *(unsigned __int8 *)(v185 + v186);
                    v193 = (_QWORD *)std::ostream::operator<<();
                    sub_1DCB03734(v193, (uint64_t)" ", 1);
                    for (; v192; --v192)
                    {
                      if (v122 == 32 || v122 == 16 || v122 == 8)
                        ++v187;
                      std::ostream::operator<<();
                    }
                    std::ios_base::getloc((const std::ios_base *)((char *)&v231
                                                                + *(_QWORD *)(v231.__r_.__value_.__r.__words[0] - 24)));
                    v194 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
                    ((void (*)(const std::locale::facet *, uint64_t))v194->__vftable[2].~facet_0)(v194, 10);
                    std::locale::~locale((std::locale *)__p);
                    std::ostream::put();
                    std::ostream::flush();
                    ++v186;
                  }

                }
              }
            }
          }
          else
          {
            for (k = 0; objc_msgSend_indexCount(*(void **)(v19 + 72), v160, v161) > k; ++k)
            {
              sub_1DCB03734(&v231, (uint64_t)"1 ", 2);
              std::ostream::operator<<();
            }
          }
          if (!std::filebuf::close())
            std::ios_base::clear((std::ios_base *)((char *)&v231 + *(_QWORD *)(v231.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)&v232[*(_QWORD *)(v231.__r_.__value_.__r.__words[0] - 24)] | 4);

          v20 = v211;
        }
        v231.__r_.__value_.__r.__words[0] = v205;
        *(std::string::size_type *)((char *)v231.__r_.__value_.__r.__words + *(_QWORD *)(v205 - 24)) = v203;
        MEMORY[0x1DF0D2094](&v231.__r_.__value_.__r.__words[1]);
        std::ostream::~ostream();
        MEMORY[0x1DF0D2238](v233);
        *(_QWORD *)&v216 = v202;
        *(_QWORD *)((char *)&v217[-1] + *(_QWORD *)(v202 - 24)) = v201;
        *(_QWORD *)&v217[0] = v200;
        *((_QWORD *)&v217[0] + 1) = v204;
        if (SHIBYTE(v219) < 0)
          operator delete(v218[1]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1DF0D2238](v221);
        if (v212)
          break;
        v19 += 80;
        if (v19 == v209)
          goto LABEL_96;
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v231.__r_.__value_.__r.__words[0] = (std::string::size_type)&v228;
    sub_1DCB045EC((void ***)&v231);
  }
  else
  {
    sub_1DCB0345C(a4, "");
  }

}

void sub_1DCB866EC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, _QWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,std::locale a40,uint64_t a41,uint64_t a42,char a43)
{
  void *v43;
  void *v44;
  void *v47;
  char *v48;

  sub_1DCAF3ED4(&STACK[0x2B0]);
  sub_1DCB28D6C((uint64_t)&a43);
  if (a2 == 1)
  {
    v47 = __cxa_begin_catch(a1);
    v48 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v47 + 16))(v47);
    sub_1DCB0345C(a17, v48);
    __cxa_end_catch();
    JUMPOUT(0x1DCB86668);
  }
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  STACK[0x2B0] = (unint64_t)&STACK[0x298];
  sub_1DCB045EC((void ***)&STACK[0x2B0]);

  _Unwind_Resume(a1);
}

uint64_t sub_1DCB86A2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1DCB86B30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1DF0D2238](v1);
  _Unwind_Resume(a1);
}

void sub_1DCB86B58(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v6;
  void *v7;
  id v8;
  const char *v9;
  char *v10;
  void *v11;
  void *__p[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[51];
  _QWORD v18[20];

  v18[19] = *MEMORY[0x1E0C80C00];
  objc_msgSend_path(a2, (const char *)a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v14[0] = 0;
    v14[1] = 0;
    v15 = 0;
    v8 = objc_retainAutorelease(v6);
    v10 = (char *)objc_msgSend_cStringUsingEncoding_(v8, v9, 4);
    sub_1DCB0345C(v14, v10);
    bzero(v16, 0x240uLL);
    sub_1DCB84FD8(v16);
    if (v17[15])
    {
      __p[0] = 0;
      __p[1] = 0;
      v13 = 0;
      sub_1DCB829B8(a1, v16, __p);
      v11 = (void *)HIBYTE(v13);
      if (v13 < 0)
        v11 = __p[1];
      if (v11)
      {
        *(_OWORD *)a4 = *(_OWORD *)__p;
        a4[2] = v13;
      }
      else
      {
        sub_1DCB0345C(a4, "");
        if (SHIBYTE(v13) < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      sub_1DCB0345C(a4, "Could not open PLY file");
    }
    v16[0] = *MEMORY[0x1E0DE4F40];
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
    MEMORY[0x1DF0D2094](v17);
    std::istream::~istream();
    MEMORY[0x1DF0D2238](v18);
    if (SHIBYTE(v15) < 0)
      operator delete(v14[0]);
  }
  else
  {
    sub_1DCB0345C(a4, "Could not open PLY file: Incorrect URL");
  }

}

void sub_1DCB86D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  void *v22;

  if (a15 < 0)
    operator delete(__p);
  sub_1DCB850E4(&a22);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

_QWORD *sub_1DCB86D64(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = a1 + 3;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1DCACA658(v5, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
  }
  a1[6] = a3;
  return a1;
}

void sub_1DCB86DC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DCB86DDC()
{
  std::istream::read();
  return COERCE_DOUBLE(bswap64(0));
}

_QWORD *sub_1DCB86E3C(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  v11 = 0;
  MEMORY[0x1DF0D20AC](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1DCB86F6C(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1DCB86F38);
  }
  __cxa_rethrow();
}

void sub_1DCB86FB0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCB86FC4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1EA574840;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DCB87018(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x1DF0D228C](v1, 0xC400A2AC0F1);
  _Unwind_Resume(exception_object);
}

void sub_1DCB87040(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0D228CLL);
}

uint64_t sub_1DCB87064(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1DF0D228CLL);
  return result;
}

uint64_t sub_1DCB87080(uint64_t a1, uint64_t a2)
{
  if (sub_1DCAE69FC(a2, (uint64_t)&unk_1EA573FB8))
    return a1 + 24;
  else
    return 0;
}

void sub_1DCB870C0(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_1DCB87144((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1DCB87144(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  v3 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t sub_1DCB87188(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1DCB87244((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1DCB871FC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    sub_1DCAE4CDC();
  return operator new(56 * a2);
}

uint64_t sub_1DCB87244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      v8 = *(_OWORD *)(a3 - 56);
      a3 -= 56;
      *(_OWORD *)(v7 - 56) = v8;
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v9 = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 40);
      *(_OWORD *)(v7 - 32) = v9;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 48);
      v7 = *((_QWORD *)&v15 + 1) - 56;
      *((_QWORD *)&v15 + 1) -= 56;
    }
    while (a3 != a5);
    v10 = v15;
  }
  LOBYTE(v13) = 1;
  sub_1DCB87304((uint64_t)v12);
  return v10;
}

uint64_t sub_1DCB87304(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1DCB87338((uint64_t *)a1);
  return a1;
}

void sub_1DCB87338(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_1DCB87144(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **sub_1DCB87388(void **a1)
{
  sub_1DCB873B8(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1DCB873B8(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    sub_1DCB87144(v4, i - 56);
  }
}

void sub_1DCB87400()
{
  JUMPOUT(0x1DF0D228CLL);
}

_QWORD *sub_1DCB87414(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA573898;
  result[1] = v3;
  return result;
}

uint64_t sub_1DCB87448(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA573898;
  a2[1] = v2;
  return result;
}

float sub_1DCB87464(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return (float)(*(int (**)(uint64_t, _QWORD))(a1 + 8))(a2, *a3);
}

uint64_t sub_1DCB8748C(uint64_t a1, uint64_t a2)
{
  if (sub_1DCAE69FC(a2, (uint64_t)&unk_1EA573810))
    return a1 + 8;
  else
    return 0;
}

void *sub_1DCB874C8()
{
  return &unk_1EA573810;
}

_QWORD *sub_1DCB874D4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1DCB87644(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1DCAE4C58(a1);
}

void sub_1DCB87654()
{
  JUMPOUT(0x1DF0D228CLL);
}

_QWORD *sub_1DCB87668(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA573840;
  result[1] = v3;
  return result;
}

uint64_t sub_1DCB8769C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA573840;
  a2[1] = v2;
  return result;
}

uint64_t sub_1DCB876B8(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 8))(a2, *a3);
}

uint64_t sub_1DCB876CC(uint64_t a1, uint64_t a2)
{
  if (sub_1DCAE69FC(a2, (uint64_t)&unk_1EA5737F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_1DCB87708()
{
  return &unk_1EA5737F0;
}

uint64_t *sub_1DCB87714(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 12);
    v2 -= 12;
    *(_QWORD *)(v4 - 12) = v5;
    v4 -= 12;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1DCB87774(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    sub_1DCAE4C44();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xAAAAAAAAAAAAAAALL)
    v9 = 0x1555555555555555;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)sub_1DCB011C0(v7, v9);
  v11 = &v10[12 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[12 * v12];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  v17 = v11 + 12;
  sub_1DCB87714(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 12) % 0xCuLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_1DCB87890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1DCB878DC(_DWORD *result)
{
  *result = 1049652922;
  return result;
}

float sub_1DCB878EC(uint64_t a1, int8x16_t a2)
{
  float result;

  *(_DWORD *)a1 = 1049652922;
  *(float32x2_t *)(a1 + 4) = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32((float32x2_t)vext_s8(*(int8x8_t *)a2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL), 4uLL)), (float64x2_t)xmmword_1DCC58CF0));
  result = *(float *)a2.i32 * -0.488602511;
  *(float *)(a1 + 12) = result;
  return result;
}

float sub_1DCB87934(uint64_t a1, int8x16_t a2)
{
  float64x2_t v2;
  float v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float32x4_t v8;
  float result;

  v2 = vcvtq_f64_f32((float32x2_t)vext_s8(*(int8x8_t *)a2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL), 4uLL));
  *(float32x2_t *)(a1 + 4) = vcvt_f32_f64(vmulq_f64(v2, (float64x2_t)xmmword_1DCC58CF0));
  v3 = *(float *)a2.i32 * -0.488602511;
  *(float *)(a1 + 12) = v3;
  v4 = vmulq_f64(v2, (float64x2_t)xmmword_1DCC58D00);
  v5 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v2.f64[0], 0);
  v5.f64[0] = *(float *)a2.i32;
  v6 = vmulq_f64(v2, v2);
  v7.f64[1] = v4.f64[1];
  v7.f64[0] = vmuld_lane_f64(0.946174695, v6, 1);
  v6.f64[0] = -0.315391565;
  *(_QWORD *)&v7.f64[0] = *(_OWORD *)&vaddq_f64(v7, v6);
  v6.f64[1] = *(float *)a2.i32;
  *(_DWORD *)a1 = 1049652922;
  v7.f64[1] = vmulq_f64(v4, v6).f64[1];
  *(float32x2_t *)(a1 + 16) = vcvt_f32_f64(vmulq_f64(v4, v5));
  *(float32x2_t *)(a1 + 24) = vcvt_f32_f64(v7);
  v8 = vmulq_f32((float32x4_t)a2, (float32x4_t)a2);
  result = vsubq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)).f32[0] * 0.546274215;
  *(float *)(a1 + 32) = result;
  return result;
}

float sub_1DCB879F4(uint64_t a1, float32x4_t _Q0)
{
  float v3;
  float v4;
  float32x2_t v6;
  float32x4_t v11;
  float result;

  _S1 = _Q0.u32[1];
  v3 = vmuls_lane_f32(_Q0.f32[2], _Q0, 2);
  *(_DWORD *)a1 = 1049652923;
  v4 = vmuls_lane_f32(-1.0925, _Q0, 2);
  *(float *)(a1 + 20) = vmuls_lane_f32(v4, *(float32x2_t *)_Q0.f32, 1);
  *(float *)(a1 + 24) = (float)(v3 * 0.94617) + -0.31539;
  _D2 = vmul_n_f32((float32x2_t)0x3FEED53640124131, v3);
  v6.i32[0] = vsub_f32((float32x2_t)0x3FEED5363EEA01E8, _D2).u32[0];
  v6.i32[1] = vadd_f32(_D2, (float32x2_t)vdup_n_s32(0xBF8F4CBA)).i32[1];
  *(float32x2_t *)(a1 + 44) = vmul_f32(v6, (float32x2_t)vext_s8(*(int8x8_t *)_Q0.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL), 4uLL));
  __asm { FMLS            S2, S1, V0.S[1] }
  *(float *)(a1 + 28) = v4 * _Q0.f32[0];
  *(float *)(a1 + 32) = _D2.f32[0] * 0.54627;
  v11 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 0xCuLL), (int8x16_t)_Q0, 8uLL);
  v11.i32[3] = vmuls_lane_f32(_Q0.f32[0] + _Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
  *(float32x4_t *)(a1 + 4) = vmulq_f32(v11, (float32x4_t)xmmword_1DCC58D10);
  v11.f32[0] = vmuls_lane_f32(1.4453, _Q0, 2);
  *(float *)(a1 + 52) = vmuls_n_f32(v6.f32[0], _Q0.f32[0]);
  *(float *)(a1 + 56) = _D2.f32[0] * v11.f32[0];
  *(float *)(a1 + 60) = vmlas_n_f32(-(float)(v11.f32[3] * _Q0.f32[1]), _D2.f32[0], _Q0.f32[0]) * -0.59004;
  result = vmlas_n_f32(vmuls_lane_f32(_D2.f32[0], *(float32x2_t *)_Q0.f32, 1), v11.f32[3], _Q0.f32[0]) * -0.59004;
  *(float *)(a1 + 36) = result;
  *(float *)(a1 + 40) = v11.f32[3] * v11.f32[0];
  return result;
}

uint64_t sub_1DCB87AF8(uint64_t result, __int128 *a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1DCC583A0;
  v4 = xmmword_1DCC56FD0;
  switch((int)result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      v4 = xmmword_1DCC58390;
      goto LABEL_7;
    case 2:
      v3 = xmmword_1DCC58380;
      v4 = xmmword_1DCC583A0;
      goto LABEL_7;
    case 3:
      v3 = xmmword_1DCC58360;
      v4 = xmmword_1DCC58370;
      goto LABEL_7;
    case 4:
      v4 = xmmword_1DCC58380;
      goto LABEL_7;
    case 5:
      v4 = xmmword_1DCC58360;
LABEL_7:
      *a2 = v4;
      *a3 = v3;
      break;
    default:
      return result;
  }
  return result;
}

double sub_1DCB87B7C(int a1, int a2, int a3, int8x16_t a4, int8x16_t _Q1)
{
  float v13;
  float v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x2_t v17;
  float32x2_t v18;
  double result;

  switch(a3)
  {
    case 0:
      __asm
      {
        FMOV            V3.2S, #1.0
        FMOV            V1.2S, #-1.0
      }
      *(float32x2_t *)_Q1.i8 = vmla_n_f32(_D1, vmla_f32(_D3, (float32x2_t)0x4000000040000000, vcvt_f32_s32((int32x2_t)__PAIR64__(a1, a2))), *(float *)a4.i32);
      a4.i32[0] = 1.0;
      break;
    case 1:
      __asm { FMOV            V3.2S, #1.0 }
      *(float32x2_t *)a4.i8 = vmul_n_f32(vmla_f32(_D3, (float32x2_t)0x4000000040000000, vcvt_f32_s32((int32x2_t)__PAIR64__(a1, a2))), *(float *)a4.i32);
      __asm { FMOV            V1.2S, #-1.0 }
      _Q1.i32[0] = vadd_f32(*(float32x2_t *)a4.i8, _D1).u32[0];
      _Q1.i32[1] = vsub_f32(_D3, *(float32x2_t *)&a4).i32[1];
      a4.i32[0] = -1.0;
      break;
    case 2:
      v13 = (float)((float)((float)((float)a2 * 2.0) + 1.0) * *(float *)a4.i32) + -1.0;
      *(float *)a4.i32 = (float)((float)((float)((float)a1 * 2.0) + 1.0) * *(float *)a4.i32) + -1.0;
      __asm { FMOV            V1.2S, #1.0 }
      goto LABEL_7;
    case 3:
      v13 = -(float)((float)((float)((float)((float)a2 * 2.0) + 1.0) * *(float *)a4.i32) + -1.0);
      *(float *)a4.i32 = (float)((float)((float)((float)a1 * 2.0) + 1.0) * *(float *)a4.i32) + -1.0;
      __asm { FMOV            V1.2S, #-1.0 }
LABEL_7:
      *(float *)&_Q1.i32[1] = v13;
      break;
    case 4:
      v14 = (float)((float)((float)((float)a2 * 2.0) + 1.0) * *(float *)a4.i32) + -1.0;
      *(float *)a4.i32 = (float)((float)((float)((float)a1 * 2.0) + 1.0) * *(float *)a4.i32) + -1.0;
      __asm { FMOV            V1.2S, #-1.0 }
      goto LABEL_10;
    case 5:
      v14 = (float)((float)((float)((float)a2 * 2.0) + 1.0) * *(float *)a4.i32) + -1.0;
      *(float *)a4.i32 = -(float)((float)((float)((float)((float)a1 * 2.0) + 1.0) * *(float *)a4.i32) + -1.0);
      __asm { FMOV            V1.2S, #1.0 }
LABEL_10:
      *(float *)_Q1.i32 = v14;
      break;
    default:
      _Q1.i64[0] = 0;
      a4.i32[0] = 0;
      break;
  }
  v15 = (float32x4_t)vextq_s8(vextq_s8(a4, a4, 4uLL), _Q1, 0xCuLL);
  v16 = (int32x4_t)vmulq_f32(v15, v15);
  v16.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v16, 2)).u32[0];
  v17 = vrsqrte_f32((float32x2_t)v16.u32[0]);
  v18 = vmul_f32(vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v17, v17)), v17);
  *(_QWORD *)&result = vmulq_n_f32(v15, vmul_f32(v18, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v18, v18))).f32[0]).u64[0];
  return result;
}

float sub_1DCB87D04(int a1, int a2, int a3)
{
  float v3;
  float v4;
  float v5;

  v3 = 1.0 / (float)a3;
  v4 = 0.0;
  if (a3 >= 2)
    v4 = (float)(2.0 - (float)(v3 * 2.0)) / (float)((float)a3 + -1.0);
  v5 = (float)((float)((float)((float)(v3 + -1.0) + (float)(v4 * (float)a1))
                     * (float)((float)(v3 + -1.0) + (float)(v4 * (float)a1)))
             + 1.0)
     + (float)((float)((float)(v3 + -1.0) + (float)(v4 * (float)a2))
             * (float)((float)(v3 + -1.0) + (float)(v4 * (float)a2)));
  return 4.0 / (float)(sqrtf(v5) * v5);
}

uint64_t sub_1DCB87D64(uint64_t a1, void *a2, CGColor *a3)
{
  id v5;
  id v6;

  v5 = a2;
  *(_QWORD *)a1 = &off_1EA574648;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)(a1 + 8) = CGColorCreateCopy(a3);

  return a1;
}

void sub_1DCB87DC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCB87DE0(uint64_t a1)
{
  void *v2;
  CGColor *v3;

  *(_QWORD *)a1 = &off_1EA574648;
  v2 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;

  v3 = *(CGColor **)(a1 + 8);
  if (v3)
    CGColorRelease(v3);

  return a1;
}

void sub_1DCB87E34(uint64_t a1)
{
  sub_1DCB87DE0(a1);
  JUMPOUT(0x1DF0D228CLL);
}

CGColorRef sub_1DCB87E58(uint64_t a1, CGColorRef color)
{
  CGColor *v4;
  CGColorRef result;

  v4 = *(CGColor **)(a1 + 8);
  if (v4)
    CGColorRelease(v4);
  result = CGColorCreateCopy(color);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1DCB87E90(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_translation(*(void **)(a1 + 16), a2, a3);
}

float32x2_t sub_1DCB87E98(uint64_t a1)
{
  return vcvt_f32_f64(*(float64x2_t *)CGColorGetComponents(*(CGColorRef *)(a1 + 8)));
}

uint64_t sub_1DCB87EC4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1DCB87ECC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

double sub_1DCB87ED4(uint64_t a1, void *a2, CGColor *a3)
{
  uint64_t v3;
  double result;

  v3 = sub_1DCB87D64(a1, a2, a3);
  *(_QWORD *)v3 = &off_1EA574560;
  *(_OWORD *)(v3 + 28) = xmmword_1DCC58D20;
  result = 0.0000305175854;
  *(_QWORD *)(v3 + 44) = 0x3F00000040000000;
  return result;
}

uint64_t sub_1DCB87F0C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;

  if (*(float *)(a1 + 48) == 0.0)
    return objc_msgSend_translation(*(void **)(a1 + 16), a2, a3);
  arc4random();
  arc4random();
  arc4random();
  return objc_msgSend_translation(*(void **)(a1 + 16), v4, v5);
}

double sub_1DCB87FE8(uint64_t a1, const char *a2, uint64_t a3, float a4)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  uint32_t v17;
  float32x4_t v18;
  uint32_t v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  double result;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;

  objc_msgSend_rotationMatrixAtTime_(*(void **)(a1 + 16), a2, a3, 0.0);
  v7 = vmlaq_f32(vmulq_f32(v5, (float32x4_t)0), (float32x4_t)0, v6);
  __asm { FMOV            V1.4S, #-1.0 }
  v15 = vmlaq_f32(vmlaq_f32(v7, _Q1, v13), (float32x4_t)0, v14);
  v16 = (int32x4_t)vmulq_f32(v15, v15);
  v16.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v16, 2)).u32[0];
  *(float32x2_t *)v13.f32 = vrsqrte_f32((float32x2_t)v16.u32[0]);
  *(float32x2_t *)v13.f32 = vmul_f32(vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32)), *(float32x2_t *)v13.f32);
  v28 = vmulq_f32(vmulq_n_f32((float32x4_t)vdupq_n_s32(0x42C80000u), vmul_f32(*(float32x2_t *)v13.f32, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32))).f32[0]), v15);
  v17 = arc4random();
  *(float32x2_t *)v18.f32 = vmla_f32((float32x2_t)0xBF000000BF000000, (float32x2_t)0x3000000030000000, vcvt_f32_u32((uint32x2_t)__PAIR64__(arc4random(), v17)));
  v29 = v18;
  v19 = arc4random();
  v20 = v29;
  v20.f32[2] = (float)((float)v19 * 4.6566e-10) + -0.5;
  v30 = v20;
  v21 = (int32x4_t)vmulq_f32(v20, v20);
  v21.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2)).u32[0];
  *(float32x2_t *)v20.f32 = vrsqrte_f32((float32x2_t)v21.u32[0]);
  *(float32x2_t *)v20.f32 = vmul_f32(vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32)), *(float32x2_t *)v20.f32);
  *(float32x2_t *)v21.i8 = vmul_f32(*(float32x2_t *)v20.f32, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32)));
  v27 = (float32x4_t)v21;
  v22.f32[0] = sinf(a4);
  v23 = vmlaq_n_f32(v28, v30, vmulq_f32(v27, v22).f32[0]);
  v24 = (int32x4_t)vmulq_f32(v23, v23);
  v25 = v23;
  v24.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2)).u32[0];
  *(float32x2_t *)v23.f32 = vrsqrte_f32((float32x2_t)v24.u32[0]);
  *(float32x2_t *)v23.f32 = vmul_f32(vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32)), *(float32x2_t *)v23.f32);
  *(_QWORD *)&result = vmulq_n_f32(v25, vmul_f32(*(float32x2_t *)v23.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32))).f32[0]).u64[0];
  return result;
}

float sub_1DCB88154(uint64_t a1, const char *a2, uint64_t a3, float32x4_t a4)
{
  int v4;
  float32x4_t v7;
  const char *v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float v21;
  float v22;
  float32x4_t v23;
  int32x4_t v24;
  float v25;
  float v26;
  int32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int32x4_t v30;
  float v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v36;
  float32x2_t v37;

  v4 = *(_DWORD *)(a1 + 24);
  if (v4 != 3 && v4 != 0)
    return 1.0;
  objc_msgSend_translation(*(void **)(a1 + 16), a2, a3);
  v33 = v7;
  objc_msgSend_rotationMatrixAtTime_(*(void **)(a1 + 16), v8, v9, 0.0);
  v12 = vmlaq_f32(vmulq_f32(v10, (float32x4_t)0), (float32x4_t)0, v11);
  __asm { FMOV            V0.4S, #-1.0 }
  v19 = vmlaq_f32(vmlaq_f32(v12, _Q0, v17), (float32x4_t)0, v18);
  v20 = (int32x4_t)vmulq_f32(v19, v19);
  v20.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v20, 2)).u32[0];
  *(float32x2_t *)v11.f32 = vrsqrte_f32((float32x2_t)v20.u32[0]);
  *(float32x2_t *)v11.f32 = vmul_f32(vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32)), *(float32x2_t *)v11.f32);
  LODWORD(v21) = vmul_f32(*(float32x2_t *)v11.f32, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32))).u32[0];
  v22 = *(float *)(a1 + 40);
  v23 = vsubq_f32(a4, v33);
  v36 = v23;
  if (v22 == 0.0)
  {
    v26 = 1.0;
  }
  else
  {
    v24 = (int32x4_t)vmulq_f32(v23, v23);
    v32 = v21;
    v34 = v19;
    v25 = powf(fminf(fmaxf((float)(v22- sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1)), (float32x4_t)vdupq_laneq_s32(v24, 2)).f32[0]))/ (float)(v22 - *(float *)(a1 + 36)), 0.0), 1.0), *(float *)(a1 + 44));
    v21 = v32;
    v19 = v34;
    v26 = v25;
  }
  if (!*(_DWORD *)(a1 + 24))
  {
    v27 = (int32x4_t)vmulq_f32(v36, v36);
    v27.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2)).u32[0];
    v28 = vrsqrte_f32((float32x2_t)v27.u32[0]);
    v29 = vmul_f32(vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v28, v28)), v28);
    v30 = (int32x4_t)vmulq_n_f32(vmulq_f32(vmulq_n_f32(v36, v21), v19), vmul_f32(v29, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v29, v29))).f32[0]);
    v37 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 28)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL)));
    return fminf(fmaxf((float)(v37.f32[1]- acosf(vaddq_f32(vaddq_f32((float32x4_t)v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.i8, 1)), (float32x4_t)vdupq_laneq_s32(v30, 2)).f32[0]))/ (float)(v37.f32[1] - v37.f32[0]), 0.0), 1.0)* v26;
  }
  return v26;
}

CGColorRef sub_1DCB88320(CGColorRef *a1)
{
  float v2;
  const CGFloat *Components;
  uint64_t v4;
  CGColorSpace *ColorSpace;
  CGColorRef v6;
  float64x2_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = (*((float (**)(CGColorRef *))*a1 + 6))(a1);
  Components = CGColorGetComponents(a1[1]);
  v8 = vmulq_n_f64(*(float64x2_t *)Components, v2);
  v4 = *((_QWORD *)Components + 3);
  v9 = Components[2] * v2;
  v10 = v4;
  ColorSpace = CGColorGetColorSpace(a1[1]);
  v6 = CGColorCreate(ColorSpace, v8.f64);
  CFRelease(ColorSpace);
  return v6;
}

CGColorRef sub_1DCB883D0(CGColorRef *a1, CGColorSpace *a2)
{
  float v4;
  CGColor *CopyByMatchingToColorSpace;
  const CGFloat *Components;
  uint64_t v7;
  CGColorRef v8;
  float64x2_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (*((float (**)(CGColorRef *))*a1 + 6))(a1);
  CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace(a2, kCGRenderingIntentAbsoluteColorimetric, a1[1], 0);
  Components = CGColorGetComponents(CopyByMatchingToColorSpace);
  v10 = vmulq_n_f64(*(float64x2_t *)Components, v4);
  v7 = *((_QWORD *)Components + 3);
  v11 = Components[2] * v4;
  v12 = v7;
  v8 = CGColorCreate(a2, v10.f64);
  CFRelease(CopyByMatchingToColorSpace);
  return v8;
}

double sub_1DCB88490(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  const char *v4;
  uint64_t v5;
  float32x4_t v6;
  const char *v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int v13;
  float32x4_t v14;
  float32x4_t v20;
  int32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x2_t v27;
  float32x2_t v28;
  int32x4_t v29;
  float64x2_t *Components;
  float32x4_t v31;
  float32_t v32;
  double result;
  float32x4_t v34;
  float v37;

  LODWORD(v37) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1));
  objc_msgSend_translation(*(void **)(a1 + 16), v4, v5);
  v34 = v6;
  objc_msgSend_rotationMatrixAtTime_(*(void **)(a1 + 16), v7, v8, 0.0);
  v13 = *(_DWORD *)(a1 + 24);
  if (v13 != 2)
  {
    if (v13 == 1)
    {
      v14 = vmlaq_f32(vmulq_f32(v9, (float32x4_t)0), (float32x4_t)0, v10);
      __asm { FMOV            V1.4S, #-1.0 }
      v20 = vmlaq_f32(vmlaq_f32(v14, _Q1, v11), (float32x4_t)0, v12);
      v21 = (int32x4_t)vmulq_f32(v20, v20);
      v21.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2)).u32[0];
      v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
      v23 = vmul_f32(vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)), v22);
      v24 = vnegq_f32(vmulq_n_f32(v20, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).f32[0]));
    }
    else
    {
      v25 = vsubq_f32(v34, a2);
      v26 = (int32x4_t)vmulq_f32(v25, v25);
      v26.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v26, 2)).u32[0];
      v27 = vrsqrte_f32((float32x2_t)v26.u32[0]);
      v28 = vmul_f32(vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v27, v27)), v27);
      v24 = vmulq_n_f32(v25, vmul_f32(v28, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v28, v28))).f32[0]);
    }
    v29 = (int32x4_t)vmulq_f32(v24, a3);
    v37 = fmaxf(vaddq_f32(vaddq_f32((float32x4_t)v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.i8, 1)), (float32x4_t)vdupq_laneq_s32(v29, 2)).f32[0], 0.0)* v37;
  }
  Components = (float64x2_t *)CGColorGetComponents(*(CGColorRef *)(a1 + 8));
  v31 = *(float32x4_t *)Components;
  *(float32x2_t *)v31.f32 = vcvt_f32_f64(*Components);
  v32 = Components[1].f64[0];
  v31.f32[2] = v32;
  *(_QWORD *)&result = vmulq_n_f32(v31, v37).u64[0];
  return result;
}

double sub_1DCB885DC(uint64_t a1, void *a2, CGColor *a3)
{
  uint64_t v3;
  double result;

  v3 = sub_1DCB87D64(a1, a2, a3);
  *(_OWORD *)(v3 + 28) = xmmword_1DCC58D20;
  *(_QWORD *)(v3 + 44) = 0x3F00000040000000;
  *(_QWORD *)v3 = &off_1EA574490;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v3 + 56) = result;
  *(_DWORD *)(v3 + 64) = 1065353216;
  return result;
}

float sub_1DCB88624(uint64_t a1, const char *a2, uint64_t a3, float32x4_t a4)
{
  unint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  float v8;
  float32x4_t v9;
  int32x4_t v10;
  float v11;
  float v12;
  double v13;
  float v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  uint64_t v21;
  __float2 v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  float32x2_t v47;
  float32x2_t v48;
  int32x4_t v49;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int32x4_t v57;
  int8x16_t v58;
  int32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t *v64;
  float32x4_t *v65;
  float32x4_t *v66;

  objc_msgSend_translation(*(void **)(a1 + 16), a2, a3);
  v8 = *(float *)(a1 + 40);
  if (v8 == 0.0)
  {
    v11 = 1.0;
  }
  else
  {
    v9 = vsubq_f32(a4, v7);
    v10 = (int32x4_t)vmulq_f32(v9, v9);
    v11 = powf(fminf(fmaxf((float)(v8- sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 1)), (float32x4_t)vdupq_laneq_s32(v10, 2)).f32[0]))/ (float)(v8 - *(float *)(a1 + 36)), 0.0), 1.0), *(float *)(a1 + 44));
  }
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v12 = 0.0;
  v13 = 0.0;
  do
  {
    v14 = *(float *)(a1 + 48);
    v15 = *(float *)(a1 + 64);
    v60.i64[0] = *(_QWORD *)(a1 + 56);
    objc_msgSend_matrix(*(void **)(a1 + 16), (const char *)v5, v6);
    v54 = v16;
    v55 = v17;
    v56 = v18;
    v53 = v19;
    v22 = __sincosf_stret(v12);
    *(float *)&v21 = v22.__cosval;
    *(float *)v20.i32 = v22.__sinval;
    v52 = v20;
    v58.i64[0] = v21;
    *(float *)v23.i32 = powf(fabsf(v22.__sinval), 2.0 / v60.f32[1]) * v14;
    v24.i64[0] = 0x8000000080000000;
    v24.i64[1] = 0x8000000080000000;
    v52.i32[0] = vbslq_s8(v24, v23, v52).u32[0];
    *(float *)v25.i32 = (float)(v15 * v14) * powf(fabsf(*(float *)v58.i32), 2.0 / v60.f32[0]);
    v26.i64[0] = 0x8000000080000000;
    v26.i64[1] = 0x8000000080000000;
    v27 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vsubq_f32(v53, a4), v54, *(float *)vbslq_s8(v26, v25, v58).i32), v55, *(float *)v52.i32), (float32x4_t)0, v56);
    v28 = (int32x4_t)vmulq_f32(v27, v27);
    v28.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v28, 2)).u32[0];
    *(float32x2_t *)v26.i8 = vrsqrte_f32((float32x2_t)v28.u32[0]);
    *(float32x2_t *)v26.i8 = vmul_f32(vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8)), *(float32x2_t *)v26.i8);
    v29 = vmulq_n_f32(v27, vmul_f32(*(float32x2_t *)v26.i8, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8))).f32[0]);
    if (v65 >= v66)
    {
      v61 = v29;
      v31 = v65 - v64;
      if ((unint64_t)(v31 + 1) >> 60)
        sub_1DCAE4C44();
      v32 = ((char *)v66 - (char *)v64) >> 3;
      if (v32 <= v31 + 1)
        v32 = v31 + 1;
      if ((unint64_t)((char *)v66 - (char *)v64) >= 0x7FFFFFFFFFFFFFF0)
        v5 = 0xFFFFFFFFFFFFFFFLL;
      else
        v5 = v32;
      if (v5)
        v33 = (char *)sub_1DCAFBD5C((uint64_t)&v66, v5);
      else
        v33 = 0;
      v34 = (float32x4_t *)&v33[16 * v31];
      *v34 = v61;
      v30 = v34 + 1;
      v35 = v65;
      if (v65 != v64)
      {
        do
        {
          v36 = v35[-1];
          --v35;
          v34[-1] = v36;
          --v34;
        }
        while (v35 != v64);
        v35 = v64;
      }
      v64 = v34;
      v66 = (float32x4_t *)&v33[16 * v5];
      if (v35)
        operator delete(v35);
    }
    else
    {
      *v65 = v29;
      v30 = v65 + 1;
    }
    v65 = v30;
    v12 = v13 + 0.104719755;
    v13 = v12;
  }
  while (v12 < 6.28318531);
  v37 = (char *)v30 - (char *)v64;
  if (v30 != v64)
  {
    v38 = 0;
    v39 = v37 >> 4;
    if ((unint64_t)(v37 >> 4) <= 1)
      v40 = 1;
    else
      v40 = v37 >> 4;
    v41 = 0uLL;
    do
    {
      v62 = v41;
      v42 = v64[v38++];
      v57 = (int32x4_t)v42;
      v59 = (int32x4_t)v64[v38 % v39];
      v43 = (int32x4_t)vmulq_f32((float32x4_t)v59, v42);
      v44.f32[0] = acosf(vaddq_f32(vaddq_f32((float32x4_t)v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.i8, 1)), (float32x4_t)vdupq_laneq_s32(v43, 2)).f32[0]);
      v45 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v59, v59), (int8x16_t)v59, 0xCuLL), (float32x4_t)v57)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v57, v57), (int8x16_t)v57, 0xCuLL), (float32x4_t)v59);
      v46 = (int32x4_t)vmulq_f32((float32x4_t)v45, (float32x4_t)v45);
      v46.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v46, 2), *(float32x2_t *)v46.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1)).u32[0];
      v47 = vrsqrte_f32((float32x2_t)v46.u32[0]);
      v48 = vmul_f32(vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v47, v47)), v47);
      *(float32x2_t *)v46.i8 = vmul_f32(v48, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v48, v48)));
      v41 = vmlaq_n_f32(v62, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v45, v45), (int8x16_t)v45, 0xCuLL), vmulq_f32((float32x4_t)v46, v44).f32[0]);
    }
    while (v40 != v38);
    goto LABEL_30;
  }
  v41 = 0uLL;
  if (v64)
  {
LABEL_30:
    v63 = v41;
    operator delete(v64);
    v41 = v63;
  }
  v49 = (int32x4_t)vmulq_f32(v41, v41);
  return sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.i8, 1)), (float32x4_t)vdupq_laneq_s32(v49, 2)).f32[0])* v11;
}

void sub_1DCB889CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCB889F0(uint64_t a1, uint64_t a2, void *a3, CGColor *a4)
{
  uint64_t v6;

  v6 = sub_1DCB87D64(a1, a3, a4);
  *(_OWORD *)(v6 + 28) = xmmword_1DCC58D20;
  *(_QWORD *)(v6 + 44) = 0x3F00000040000000;
  *(_QWORD *)v6 = &off_1EA574448;
  sub_1DCB89308(v6 + 56, a2);
  *(_DWORD *)(a1 + 152) = 1056964608;
  return a1;
}

void sub_1DCB88A54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCB87DE0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB88A6C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;

  if (*(float *)(a1 + 152) == 0.0)
    return objc_msgSend_translation(*(void **)(a1 + 16), a2, a3);
  arc4random();
  arc4random();
  arc4random();
  return objc_msgSend_translation(*(void **)(a1 + 16), v4, v5);
}

unint64_t sub_1DCB88B48(uint64_t a1, float a2)
{
  float *v2;
  float v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  float v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;

  v2 = *(float **)a1;
  v3 = **(float **)a1;
  if (v3 <= a2)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(float *)(v6 - 4);
    v8 = (unint64_t)(v6 - (_QWORD)v2) >> 2;
    v4 = v8 - 1;
    if (v7 >= a2)
    {
      if ((int)v8 < 3)
      {
        v9 = 0;
      }
      else
      {
        v9 = 0;
        do
        {
          v10 = v4 + v9;
          if ((int)(v4 + v9) < 0 != __OFADD__(v4, v9))
            ++v10;
          v11 = v10 >> 1;
          if (v2[v11] >= a2)
            v4 = v11;
          else
            v9 = v11;
        }
        while ((int)(v4 - v9) > 1);
        v3 = v2[v9];
      }
      v5 = (unint64_t)COERCE_UNSIGNED_INT((float)(v2[v4] - a2) / (float)(v2[v4] - v3)) << 32;
      v4 = v9;
    }
    else
    {
      v5 = 0x3F80000000000000;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0x3F80000000000000;
  }
  return v5 | v4;
}

float sub_1DCB88C1C(uint64_t a1, const char *a2, uint64_t a3, float32x4_t a4)
{
  float32x4_t v5;
  const char *v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  const char *v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x2_t v35;
  float32x2_t v36;
  int32x4_t v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  float v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float *v49;
  float v50;
  uint64_t v51;
  float v53;
  unint64_t v56;
  uint64_t v57;
  int v58;
  float v59;
  float32x4_t v61;
  float32x4_t v62;

  objc_msgSend_translation(*(void **)(a1 + 16), a2, a3);
  v62 = v5;
  objc_msgSend_rotationMatrixAtTime_(*(void **)(a1 + 16), v6, v7, 0.0);
  v10 = vmlaq_f32(vmulq_f32(v8, (float32x4_t)0), (float32x4_t)0, v9);
  __asm { FMOV            V1.4S, #-1.0 }
  v17 = vmlaq_f32(vmlaq_f32(v10, _Q1, v15), (float32x4_t)0, v16);
  v18 = (int32x4_t)vmulq_f32(v17, v17);
  v18.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2)).u32[0];
  *(float32x2_t *)v15.f32 = vrsqrte_f32((float32x2_t)v18.u32[0]);
  *(float32x2_t *)v15.f32 = vmul_f32(vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32)), *(float32x2_t *)v15.f32);
  v61 = vmulq_n_f32(v17, vmul_f32(*(float32x2_t *)v15.f32, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32))).f32[0]);
  objc_msgSend_rotationMatrixAtTime_(*(void **)(a1 + 16), v19, v20, 0.0);
  v25 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v22, (float32x4_t)0, v21), (float32x4_t)0, v23), (float32x4_t)0, v24);
  v26 = (int32x4_t)vmulq_f32(v25, v25);
  v26.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v26, 2)).u32[0];
  *(float32x2_t *)v23.f32 = vrsqrte_f32((float32x2_t)v26.u32[0]);
  *(float32x2_t *)v23.f32 = vmul_f32(vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32)), *(float32x2_t *)v23.f32);
  v23.i32[0] = vmul_f32(*(float32x2_t *)v23.f32, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32))).u32[0];
  v27 = vsubq_f32(a4, v62);
  v28 = (int32x4_t)vmulq_f32(v27, v27);
  v28.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v28, 2)).u32[0];
  v29 = vrsqrte_f32((float32x2_t)v28.u32[0]);
  v30 = vmul_f32(vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v29, v29)), v29);
  v31 = vmulq_n_f32(v27, vmul_f32(v30, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v30, v30))).f32[0]);
  v32 = (int32x4_t)vmulq_f32(v31, v61);
  v32.i64[0] = vaddq_f32(vaddq_f32((float32x4_t)v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.i8, 1)), (float32x4_t)vdupq_laneq_s32(v32, 2)).u64[0];
  v33 = vmlsq_lane_f32(v31, v61, *(float32x2_t *)v32.i8, 0);
  v34 = (int32x4_t)vmulq_f32(v33, v33);
  v34.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2)).u32[0];
  v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
  v36 = vmul_f32(vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)), v35);
  v37 = (int32x4_t)vmulq_f32(vmulq_n_f32(vmulq_n_f32(v25, v23.f32[0]), vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]), v33);
  v38 = fminf(fmaxf(vaddq_f32(vaddq_f32((float32x4_t)v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.i8, 1)), (float32x4_t)vdupq_laneq_s32(v37, 2)).f32[0], -1.0), 1.0);
  v39 = acosf(*(float *)v32.i32) * 57.2957795;
  v40 = acosf(v38);
  v41 = *(float **)(a1 + 64);
  v42 = 0.0;
  _ZF = v39 < 0.0 && *v41 == 0.0;
  v44 = -v39;
  if (!_ZF)
    v44 = v39;
  v46 = sub_1DCB88B48(a1 + 64, v44);
  if ((_DWORD)v46 != -1)
  {
    v47 = v45;
    v49 = *(float **)(a1 + 88);
    v48 = *(_QWORD *)(a1 + 96);
    if (v48 - (_QWORD)v49 == 4)
    {
      return (float)(*(float *)(*(_QWORD *)(a1 + 112) + 4 * (int)v46) * *((float *)&v46 + 1))
           + (float)(*(float *)(*(_QWORD *)(a1 + 112) + 4 * (int)v45) * *((float *)&v45 + 1));
    }
    else
    {
      v50 = v40 * 57.2957795;
      v51 = (*(_QWORD *)(a1 + 72) - (_QWORD)v41) >> 2;
      if (v50 < 0.0 && *v49 == 0.0)
        v50 = -v50;
      v53 = *(float *)(v48 - 4);
      if (v50 > 180.0 && v53 <= 180.0)
        v50 = 360.0 - v50;
      if (v50 > 90.0 && v53 <= 90.0)
        v50 = 180.0 - v50;
      v56 = sub_1DCB88B48(a1 + 88, v50);
      v57 = *(_QWORD *)(a1 + 112);
      return (float)((float)((float)(*(float *)(v57 + 4 * ((int)v56 * (int)v51 + (int)v46)) * *((float *)&v46 + 1))
                           + (float)(*(float *)(v57 + 4 * ((int)v56 * (int)v51 + (int)v47)) * *((float *)&v47 + 1)))
                   * *((float *)&v56 + 1))
           + (float)((float)((float)(*(float *)(v57 + 4 * (v58 * (int)v51 + (int)v46)) * *((float *)&v46 + 1))
                           + (float)(*(float *)(v57 + 4 * (v58 * (int)v51 + (int)v47)) * *((float *)&v47 + 1)))
                   * v59);
    }
  }
  return v42;
}

CGColorRef sub_1DCB88F3C(uint64_t a1, const char *a2, uint64_t a3, float32x4_t a4)
{
  const char *v5;
  uint64_t v6;
  float32x4_t v7;
  float v8;
  float32x4_t v9;
  int32x4_t v10;
  float v11;
  float v12;
  const CGFloat *v13;
  uint64_t v14;
  CGColorSpace *ColorSpace;
  CGColorRef v16;
  CGFloat components[2];
  double v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  objc_msgSend_translation(*(void **)(a1 + 16), a2, a3);
  v8 = *(float *)(a1 + 40);
  if (v8 == 0.0)
  {
    v11 = 1.0;
  }
  else
  {
    v9 = vsubq_f32(a4, v7);
    v10 = (int32x4_t)vmulq_f32(v9, v9);
    v11 = powf(fminf(fmaxf((float)(v8- sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 1)), (float32x4_t)vdupq_laneq_s32(v10, 2)).f32[0]))/ (float)(v8 - *(float *)(a1 + 36)), 0.0), 1.0), *(float *)(a1 + 44));
  }
  v12 = (float)(sub_1DCB88C1C(a1, v5, v6, a4) * v11) * *(float *)(a1 + 140);
  v13 = CGColorGetComponents(*(CGColorRef *)(a1 + 8));
  *(float64x2_t *)components = vmulq_n_f64(*(float64x2_t *)v13, v12);
  v14 = *((_QWORD *)v13 + 3);
  v20 = v13[2] * v12;
  v21 = v14;
  ColorSpace = CGColorGetColorSpace(*(CGColorRef *)(a1 + 8));
  v16 = CGColorCreate(ColorSpace, components);
  CFRelease(ColorSpace);
  return v16;
}

CGColorRef sub_1DCB89060(uint64_t a1, char *a2, uint64_t a3, float32x4_t a4)
{
  const char *v6;
  uint64_t v7;
  float32x4_t v8;
  float v9;
  float32x4_t v10;
  int32x4_t v11;
  float v12;
  float v13;
  const CGFloat *v14;
  uint64_t v15;
  CGFloat components[2];
  double v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  objc_msgSend_translation(*(void **)(a1 + 16), a2, a3);
  v9 = *(float *)(a1 + 40);
  if (v9 == 0.0)
  {
    v12 = 1.0;
  }
  else
  {
    v10 = vsubq_f32(a4, v8);
    v11 = (int32x4_t)vmulq_f32(v10, v10);
    v12 = powf(fminf(fmaxf((float)(v9- sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.i8, 1)), (float32x4_t)vdupq_laneq_s32(v11, 2)).f32[0]))/ (float)(v9 - *(float *)(a1 + 36)), 0.0), 1.0), *(float *)(a1 + 44));
  }
  v13 = (float)(sub_1DCB88C1C(a1, v6, v7, a4) * v12) * *(float *)(a1 + 140);
  v14 = CGColorGetComponents(*(CGColorRef *)(a1 + 8));
  *(float64x2_t *)components = vmulq_n_f64(*(float64x2_t *)v14, v13);
  v15 = *((_QWORD *)v14 + 3);
  v19 = v14[2] * v13;
  v20 = v15;
  return CGColorCreate((CGColorSpaceRef)a2, components);
}

double sub_1DCB89170(uint64_t a1, const char *a2, uint64_t a3, float32x4_t a4, float32x4_t a5)
{
  const char *v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  float32x4_t v11;
  int32x4_t v12;
  float v13;
  float v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int32x4_t v19;
  int32x2_t v20;
  double result;
  float32x4_t v22;

  objc_msgSend_translation(*(void **)(a1 + 16), a2, a3);
  v9 = v8;
  v10 = *(float *)(a1 + 40);
  if (v10 == 0.0)
  {
    v14 = 1.0;
  }
  else
  {
    v11 = vsubq_f32(a4, v9);
    v12 = (int32x4_t)vmulq_f32(v11, v11);
    v22 = v9;
    v13 = powf(fminf(fmaxf((float)(v10- sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.i8, 1)), (float32x4_t)vdupq_laneq_s32(v12, 2)).f32[0]))/ (float)(v10 - *(float *)(a1 + 36)), 0.0), 1.0), *(float *)(a1 + 44));
    v9 = v22;
    v14 = v13;
  }
  v15 = vsubq_f32(v9, a4);
  v16 = (int32x4_t)vmulq_f32(v15, v15);
  v16.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v16, 2)).u32[0];
  v17 = vrsqrte_f32((float32x2_t)v16.u32[0]);
  v18 = vmul_f32(vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v17, v17)), v17);
  v19 = (int32x4_t)vmulq_f32(vmulq_n_f32(v15, vmul_f32(v18, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v18, v18))).f32[0]), a5);
  *(float *)v20.i32 = (float)((float)(sub_1DCB88C1C(a1, v6, v7, a4) * v14) * *(float *)(a1 + 140))
                    * fmaxf(vaddq_f32(vaddq_f32((float32x4_t)v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 1)), (float32x4_t)vdupq_laneq_s32(v19, 2)).f32[0], 0.0);
  *(_QWORD *)&result = vdupq_lane_s32(v20, 0).u64[0];
  return result;
}

void sub_1DCB89294(uint64_t a1)
{
  sub_1DCB87DE0(a1);
  JUMPOUT(0x1DF0D228CLL);
}

void sub_1DCB892BC(uint64_t a1)
{
  sub_1DCB87DE0(a1);
  JUMPOUT(0x1DF0D228CLL);
}

void sub_1DCB892E4(_QWORD *a1)
{
  sub_1DCB893E0(a1);
  JUMPOUT(0x1DF0D228CLL);
}

uint64_t sub_1DCB89308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1DCB2ECD4((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_1DCB2ECD4((_QWORD *)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1DCB2ECD4((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  v4 = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v4;
  return a1;
}

void sub_1DCB893AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCB893E0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_1EA574448;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[8];
  if (v4)
  {
    a1[9] = v4;
    operator delete(v4);
  }
  return sub_1DCB87DE0((uint64_t)a1);
}

id sub_1DCB8943C(uint64_t a1, int a2, double a3, double a4)
{
  uint64_t String;
  __int128 v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  pxrInternal__aapl__pxrReserved__::TfToken *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  void *v25;
  id v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  void *v30;
  const char *v31;
  void **v32;
  unsigned int v33;
  const char *v34;
  MDLPackedJointAnimation *v35;
  void *v36;
  const char *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  id v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  void *v67;
  __int128 v68;
  __int128 v69;
  void *__p[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t *v74;
  void *__dst[2];
  uint64_t v76;
  _QWORD v77[3];
  _QWORD v78[4];

  v78[2] = *MEMORY[0x1E0C80C00];
  v77[1] = 0;
  v77[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v77[0] = MEMORY[0x1E0DF3110] + 16;
  __dst[0] = 0;
  __dst[1] = 0;
  v76 = 0;
  sub_1DCB2FD04(a1, &v72);
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v72);
  if (*(char *)(String + 23) < 0)
  {
    sub_1DCACA658(__dst, *(void **)String, *(_QWORD *)(String + 8));
  }
  else
  {
    v8 = *(_OWORD *)String;
    v76 = *(_QWORD *)(String + 16);
    *(_OWORD *)__dst = v8;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v72);
  v67 = (void *)objc_opt_new();
  v78[0] = 0;
  v78[1] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetJointsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)v77);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
  if ((BYTE8(v73) & 7) != 0)
  {
    v9 = (unsigned int *)(*((_QWORD *)&v73 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v73);
  if (*((_QWORD *)&v72 + 1))
    sub_1DCAEED94(*((uint64_t *)&v72 + 1));
  if (!sub_1DCB89B74((pxrInternal__aapl__pxrReserved__::VtValue *)v78))
    goto LABEL_51;
  v74 = 0;
  v72 = 0u;
  v73 = 0u;
  v11 = sub_1DCB89BAC((pxrInternal__aapl__pxrReserved__::VtValue *)v78);
  v12 = *(_OWORD *)(v11 + 16);
  v72 = *(_OWORD *)v11;
  v73 = v12;
  v13 = *(uint64_t **)(v11 + 32);
  v74 = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 - 2);
    if (*((_QWORD *)&v73 + 1))
      v14 = (unint64_t *)*((_QWORD *)&v73 + 1);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  sub_1DCB8A7E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v72);
  v16 = v74;
  sub_1DCB8A7E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v72);
  v18 = &v74[v72];
  if (v16 == v18)
  {
LABEL_50:
    sub_1DCB8A720(&v72);
LABEL_51:
    v35 = [MDLPackedJointAnimation alloc];
    if (v76 >= 0)
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v34, (uint64_t)__dst);
    else
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v34, (uint64_t)__dst[0]);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = (void *)objc_msgSend_initWithName_jointPaths_(v35, v37, (uint64_t)v36, v67);

    v72 = 0u;
    v73 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetTranslationsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)v77);
    *(_OWORD *)__p = 0u;
    v71 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetRotationsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)v77);
    v68 = 0u;
    v69 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetScalesAttr((pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)v77);
    objc_msgSend_translations(v38, v39, v40);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    if (a2)
    {
      objc_msgSend_resetWithUsdAttribute_timeScale_(v42, v41, (uint64_t)&v72, a3);

      objc_msgSend_rotations(v38, v43, v44);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_resetWithUsdAttribute_timeScale_(v45, v46, (uint64_t)__p, a3);

      objc_msgSend_scales(v38, v47, v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_resetWithUsdAttribute_timeScale_(v49, v50, (uint64_t)&v68, a3);
    }
    else
    {
      objc_msgSend_resetWithUsdAttribute_timeScale_time_(v42, v41, (uint64_t)&v72, a3, a4);

      objc_msgSend_rotations(v38, v51, v52);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_resetWithUsdAttribute_timeScale_time_(v53, v54, (uint64_t)__p, a3, a4);

      objc_msgSend_scales(v38, v55, v56);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_resetWithUsdAttribute_timeScale_time_(v49, v57, (uint64_t)&v68, a3, a4);
    }

    v58 = v38;
    if ((BYTE8(v69) & 7) != 0)
    {
      v59 = (unsigned int *)(*((_QWORD *)&v69 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v60 = __ldxr(v59);
      while (__stlxr(v60 - 2, v59));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v69);
    if (*((_QWORD *)&v68 + 1))
      sub_1DCAEED94(*((uint64_t *)&v68 + 1));
    if ((BYTE8(v71) & 7) != 0)
    {
      v61 = (unsigned int *)(*((_QWORD *)&v71 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v62 = __ldxr(v61);
      while (__stlxr(v62 - 2, v61));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v71);
    if (__p[1])
      sub_1DCAEED94((uint64_t)__p[1]);
    if ((BYTE8(v73) & 7) != 0)
    {
      v63 = (unsigned int *)(*((_QWORD *)&v73 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v64 = __ldxr(v63);
      while (__stlxr(v64 - 2, v63));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v73);
    if (*((_QWORD *)&v72 + 1))
      sub_1DCAEED94(*((uint64_t *)&v72 + 1));

    goto LABEL_73;
  }
  while (1)
  {
    v19 = *v16;
    if ((*v16 & 7) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 2, v20));
      if ((v21 & 1) == 0)
        v19 &= 0xFFFFFFFFFFFFFFF8;
    }
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v71 = 0;
    v22 = v19 & 0xFFFFFFFFFFFFFFF8;
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) != 0 ? v22 + 16 : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
    if (*(char *)(v23 + 23) < 0)
    {
      sub_1DCACA658(__p, *(void **)v23, *(_QWORD *)(v23 + 8));
    }
    else
    {
      v24 = *(_OWORD *)v23;
      *(_QWORD *)&v71 = *(_QWORD *)(v23 + 16);
      *(_OWORD *)__p = v24;
    }
    v25 = (SBYTE7(v71) & 0x80u) == 0 ? (void *)BYTE7(v71) : __p[1];
    if (v25)
    {
      v26 = objc_alloc(MEMORY[0x1E0CB3940]);
      if ((SBYTE7(v71) & 0x80u) == 0)
        v28 = objc_msgSend_initWithUTF8String_(v26, v27, (uint64_t)__p);
      else
        v28 = objc_msgSend_initWithUTF8String_(v26, v27, (uint64_t)__p[0]);
      v30 = (void *)v28;
      if (v28)
        objc_msgSend_addObject_(v67, v29, v28);

    }
    else
    {
      if (v22)
      {
        v31 = (const char *)(v22 + 16);
        if (*(char *)(v22 + 39) < 0)
          v31 = *(const char **)v31;
      }
      else
      {
        v31 = "";
      }
      v32 = v76 >= 0 ? __dst : (void **)__dst[0];
      NSLog(CFSTR("Illegal joint path <%s> in animation: %s. Skipping."), v31, v32);
    }
    if (SBYTE7(v71) < 0)
      operator delete(__p[0]);
    if ((v19 & 7) != 0)
    {
      do
        v33 = __ldxr((unsigned int *)v22);
      while (__stlxr(v33 - 2, (unsigned int *)v22));
    }
    if (!v25)
      break;
    if (++v16 == v18)
      goto LABEL_50;
  }
  sub_1DCB8A720(&v72);
  v58 = 0;
LABEL_73:
  sub_1DCAEEE2C((uint64_t)v78);

  if (SHIBYTE(v76) < 0)
    operator delete(__dst[0]);
  MEMORY[0x1DF0D0F6C](v77);
  return v58;
}

void sub_1DCB899DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a2)
    sub_1DCAE4C58(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCB89B74(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 60)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573B88);
  else
    return 0;
}

uint64_t sub_1DCB89BAC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCB89B74(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

id sub_1DCB89C14(_DWORD *a1, double a2)
{
  unint64_t v4;
  const char *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *i;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  id v21;
  const char *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  unsigned int v28;
  MDLSkeleton *v29;
  const char *v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  id v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t *v52;
  _QWORD v53[3];
  _QWORD v54[4];

  v54[2] = *MEMORY[0x1E0C80C00];
  v53[1] = 0;
  v53[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v53[0] = MEMORY[0x1E0DF30F0] + 16;
  v4 = *(_QWORD *)sub_1DCAEEC08(a1) & 0xFFFFFFFFFFFFFFF8;
  if (v4)
  {
    v5 = (const char *)(v4 + 16);
    if (*(char *)(v4 + 39) < 0)
      v5 = *(const char **)v5;
  }
  else
  {
    v5 = "";
  }
  v6 = (void *)objc_opt_new();
  v54[0] = 0;
  v54[1] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetJointsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v53);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
  if ((BYTE8(v51) & 7) != 0)
  {
    v7 = (unsigned int *)(*((_QWORD *)&v51 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v51);
  if (*((_QWORD *)&v50 + 1))
    sub_1DCAEED94(*((uint64_t *)&v50 + 1));
  if (sub_1DCB89B74((pxrInternal__aapl__pxrReserved__::VtValue *)v54))
  {
    v52 = 0;
    v50 = 0u;
    v51 = 0u;
    v11 = sub_1DCB89BAC((pxrInternal__aapl__pxrReserved__::VtValue *)v54);
    v12 = *(_OWORD *)(v11 + 16);
    v50 = *(_OWORD *)v11;
    v51 = v12;
    v13 = *(uint64_t **)(v11 + 32);
    v52 = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 - 2);
      if (*((_QWORD *)&v51 + 1))
        v14 = (unint64_t *)*((_QWORD *)&v51 + 1);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    sub_1DCB8A7E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v50);
    v16 = v52;
    sub_1DCB8A7E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v50);
    for (i = &v52[v50]; v16 != i; ++v16)
    {
      v18 = *v16;
      if ((*v16 & 7) != 0)
      {
        v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 2, v19));
        if ((v20 & 1) == 0)
          v18 &= 0xFFFFFFFFFFFFFFF8;
      }
      if (!v18)
      {
        NSLog(CFSTR("Illegal joint path %s in skeleton: %s. Skipping."), "", v5);
LABEL_49:
        sub_1DCB8A720(&v50);
LABEL_50:
        v42 = 0;
        goto LABEL_51;
      }
      v21 = objc_alloc(MEMORY[0x1E0CB3940]);
      v23 = v18 & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v24 = (uint64_t *)(v23 + 16);
        if (*(char *)(v23 + 39) < 0)
        {
          v25 = objc_msgSend_initWithUTF8String_(v21, v22, *v24);
          goto LABEL_27;
        }
      }
      else
      {
        v24 = (uint64_t *)"";
      }
      v25 = objc_msgSend_initWithUTF8String_(v21, v22, (uint64_t)v24);
LABEL_27:
      v27 = (void *)v25;
      if (v25)
        objc_msgSend_addObject_(v6, v26, v25);
      else
        NSLog(CFSTR("Illegal joint path in skeleton: %s. Skipping."), v5);

      if ((v18 & 7) != 0)
      {
        do
          v28 = __ldxr((unsigned int *)v23);
        while (__stlxr(v28 - 2, (unsigned int *)v23));
      }
      if (!v27)
        goto LABEL_49;
    }
    sub_1DCB8A720(&v50);
  }
  if (!objc_msgSend_count(v6, v9, v10))
  {
    NSLog(CFSTR("No joint paths exist in skeleton %s. Skipping."), v5);
    goto LABEL_50;
  }
  v29 = [MDLSkeleton alloc];
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v30, (uint64_t)v5);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = (void *)objc_msgSend_initWithName_jointPaths_(v29, v32, (uint64_t)v31, v6);

  v50 = 0u;
  v51 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetBindTransformsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v53);
  objc_msgSend_jointBindTransforms(v33, v34, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_resetWithUsdAttribute_time_(v36, v37, (uint64_t)&v50, a2);

  v48 = 0u;
  v49 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetRestTransformsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v53);
  objc_msgSend_jointRestTransforms(v33, v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_resetWithUsdAttribute_time_(v40, v41, (uint64_t)&v48, a2);

  v42 = v33;
  if ((BYTE8(v49) & 7) != 0)
  {
    v43 = (unsigned int *)(*((_QWORD *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v49);
  if (*((_QWORD *)&v48 + 1))
    sub_1DCAEED94(*((uint64_t *)&v48 + 1));
  if ((BYTE8(v51) & 7) != 0)
  {
    v45 = (unsigned int *)(*((_QWORD *)&v51 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v51);
  if (*((_QWORD *)&v50 + 1))
    sub_1DCAEED94(*((uint64_t *)&v50 + 1));

LABEL_51:
  sub_1DCAEEE2C((uint64_t)v54);

  MEMORY[0x1DF0D0EDC](v53);
  return v42;
}

void sub_1DCB8A020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v18 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  if ((v8 & 7) != 0)
  {
    v10 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  sub_1DCB8A720((uint64_t *)va);
  sub_1DCAEEE2C((uint64_t)va2);

  MEMORY[0x1DF0D0EDC]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1DCB8A130(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  id v60;
  const char *v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  const char *v65;
  void *v66;
  unsigned int v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  int v72;
  int v73;
  void *v74;
  const char *v75;
  const char *v76;
  const char *v77;
  const char *v78;
  uint64_t v79;
  __int128 v80;
  unsigned int *v81;
  unsigned int v82;
  id v83;
  uint64_t v84;
  _OWORD var20[3];

  a42 = *MEMORY[0x1E0C80C00];
  v83 = a3;
  v84 = a4;
  v46 = a5;
  a40 = 0;
  a41 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointsAttr(a2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
  if ((BYTE8(a30) & 7) != 0)
  {
    v47 = (unsigned int *)(*((_QWORD *)&a30 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&a30);
  if (*((_QWORD *)&a29 + 1))
    sub_1DCAEED94(*((uint64_t *)&a29 + 1));
  if (sub_1DCB89B74((pxrInternal__aapl__pxrReserved__::VtValue *)&a40))
  {
    *(_QWORD *)&a31 = 0;
    a29 = 0u;
    a30 = 0u;
    v49 = sub_1DCB89BAC((pxrInternal__aapl__pxrReserved__::VtValue *)&a40);
    v50 = *(_OWORD *)(v49 + 16);
    a29 = *(_OWORD *)v49;
    a30 = v50;
    v51 = *(_QWORD *)(v49 + 32);
    *(_QWORD *)&a31 = v51;
    if (v51)
    {
      v52 = (unint64_t *)(v51 - 16);
      if (*((_QWORD *)&a30 + 1))
        v52 = (unint64_t *)*((_QWORD *)&a30 + 1);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    v54 = (void *)objc_opt_new();
    sub_1DCB8A7E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&a29);
    v55 = (uint64_t *)a31;
    sub_1DCB8A7E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&a29);
    v56 = (uint64_t *)(a31 + 8 * a29);
    if (v55 != v56)
    {
      while (1)
      {
        v57 = *v55;
        if ((*v55 & 7) != 0)
        {
          v58 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 2, v58));
          if ((v59 & 1) == 0)
            v57 &= 0xFFFFFFFFFFFFFFF8;
        }
        if (!v57)
        {
          sub_1DCB2FD04(a1, &a37);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&a37);
          NSLog(CFSTR("Illegal joint path %s in skeleton: %s. Skipping."));
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&a37);
          objc_msgSend_removeAllObjects(v54, v68, v69);
          goto LABEL_29;
        }
        v60 = objc_alloc(MEMORY[0x1E0CB3940]);
        v62 = v57 & 0xFFFFFFFFFFFFFFF8;
        if ((v57 & 0xFFFFFFFFFFFFFFF8) == 0)
          break;
        v63 = (uint64_t *)(v62 + 16);
        if ((*(char *)(v62 + 39) & 0x80000000) == 0)
          goto LABEL_22;
        v64 = objc_msgSend_initWithUTF8String_(v60, v61, *v63);
LABEL_23:
        v66 = (void *)v64;
        objc_msgSend_addObject_(v54, v65, v64);

        if ((v57 & 7) != 0)
        {
          do
            v67 = __ldxr((unsigned int *)v62);
          while (__stlxr(v67 - 2, (unsigned int *)v62));
        }
        if (++v55 == v56)
          goto LABEL_29;
      }
      v63 = (uint64_t *)"";
LABEL_22:
      v64 = objc_msgSend_initWithUTF8String_(v60, v61, (uint64_t)v63);
      goto LABEL_23;
    }
LABEL_29:
    sub_1DCB8A720(&a29);
  }
  else
  {
    v54 = 0;
  }
  a37 = 0u;
  a38 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetGeomBindTransformAttr(a2);
  v72 = sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&a37);
  if (v84 | v46 || (objc_msgSend_count(v54, v70, v71) ? (v73 = 1) : (v73 = v72), v73 == 1))
  {
    v74 = (void *)objc_opt_new();
    objc_msgSend_setSkeleton_(v74, v75, v84);
    objc_msgSend_setJointAnimation_(v74, v76, v46);
    a35 = 0u;
    a36 = 0u;
    a33 = 0u;
    a34 = 0u;
    a31 = 0u;
    a32 = 0u;
    a29 = 0u;
    a30 = 0u;
    if (v72
      && pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>())
    {
      a21 = a29;
      a22 = a30;
      a23 = a31;
      a24 = a32;
      a25 = a33;
      a26 = a34;
      a27 = a35;
      a28 = a36;
      objc_msgSend_setGeometryBindTransform_(v74, v77, (uint64_t)&a21);
    }
    else
    {
      v80 = *(_OWORD *)(MEMORY[0x1E0C83FD8] + 16);
      var20[0] = *MEMORY[0x1E0C83FD8];
      var20[1] = v80;
      var20[2] = *(_OWORD *)(MEMORY[0x1E0C83FD8] + 32);
      objc_msgSend_setGeometryBindTransform_(v74, v77, (uint64_t)var20);
    }
    if (v54 && objc_msgSend_count(v54, v78, v79))
      objc_msgSend_setJointPaths_(v74, v78, (uint64_t)v54);
    objc_msgSend_setComponent_forProtocol_(v83, v78, (uint64_t)v74, &unk_1F03B6758);

  }
  if ((BYTE8(a38) & 7) != 0)
  {
    v81 = (unsigned int *)(*((_QWORD *)&a38 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&a38);
  if (*((_QWORD *)&a37 + 1))
    sub_1DCAEED94(*((uint64_t *)&a37 + 1));
  sub_1DCAEEE2C((uint64_t)&a40);

}

void sub_1DCB8A574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  void *v72;
  void *v73;
  uint64_t v74;
  unsigned int *v76;
  unsigned int v77;

  if ((v74 & 7) != 0)
  {
    v76 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v77 = __ldxr(v76);
    while (__stlxr(v77 - 2, v76));
  }
  sub_1DCB8A720(&a51);

  sub_1DCAEEE2C((uint64_t)&a72);
  _Unwind_Resume(a1);
}

double sub_1DCB8A680@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_1DCB8A6D8;
  a1[2] = (uint64_t)&stru_1EA573B88;
  return result;
}

_QWORD *sub_1DCB8A6D8(_QWORD *result)
{
  if (result)
  {
    sub_1DCB8A720(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

void sub_1DCB8A720(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);

  v1 = a1[4];
  if (v1)
  {
    v3 = a1 + 3;
    v2 = (unint64_t *)a1[3];
    if (v2)
    {
      do
      {
        v11 = __ldxr(v2);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v2));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v3 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v4 = (unint64_t *)(v1 - 16);
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        __dmb(9u);
        v7 = (_QWORD *)a1[4];
        if (*a1)
        {
          v8 = &v7[*a1];
          do
          {
            if ((*v7 & 7) != 0)
            {
              v9 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFFFF8);
              do
                v10 = __ldxr(v9);
              while (__stlxr(v10 - 2, v9));
            }
            ++v7;
          }
          while (v7 != v8);
          v7 = (_QWORD *)a1[4];
        }
        operator delete(v7 - 2);
      }
    }
    *v3 = 0;
    v3[1] = 0;
  }
}

void sub_1DCB8A7E0(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::TfToken]");
      v4 = sub_1DCB8A850((uint64_t)this, *((uint64_t **)this + 4), *(_QWORD *)this, *(_QWORD *)this);
      sub_1DCB8A720(this);
      *((_QWORD *)this + 4) = v4;
    }
  }
}

uint64_t *sub_1DCB8A850(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t *result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  result = sub_1DCB8A8C8(a1, a3);
  if (a4)
  {
    v7 = &a2[a4];
    v8 = result;
    do
    {
      v9 = *a2;
      *v8 = *a2;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          *v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++a2;
      ++v8;
    }
    while (a2 != v7);
  }
  return result;
}

_QWORD *sub_1DCB8A8C8(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCB8A950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_1DCB8A968(void *a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  void *v28;
  const char *v29;
  unint64_t v30;
  uint64_t *v31;
  id v32;
  MDLMesh *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  void *v37;
  void *v38;
  const char *v39;
  void *v40;
  const char *v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  __CFString *v52;
  __CFString *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v57;
  const char *v58;
  __int128 v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  void *v64;
  const char *v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _BYTE *v71;
  int v72;
  _BYTE *v73;
  unint64_t v74;
  uint64_t v75;
  int64_t v76;
  unint64_t v77;
  size_t v78;
  char *v79;
  char *v80;
  char *v81;
  _BYTE *v82;
  char v83;
  int v84;
  _BYTE *v85;
  unint64_t v86;
  uint64_t v87;
  int64_t v88;
  unint64_t v89;
  size_t v90;
  void *v91;
  char *v92;
  _BYTE *v93;
  _BYTE *v94;
  char v95;
  int v96;
  _BYTE *v97;
  unint64_t v98;
  uint64_t v99;
  int64_t v100;
  unint64_t v101;
  size_t v102;
  void *v103;
  char *v104;
  _BYTE *v105;
  char v106;
  unint64_t v107;
  uint64_t v108;
  int64_t v109;
  unint64_t v110;
  size_t v111;
  void *v112;
  _BYTE *v113;
  char v114;
  uint64_t v115;
  int v116;
  int v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  float *v121;
  char *v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  int64_t v126;
  unint64_t v127;
  size_t v128;
  char *v129;
  char *v130;
  char *v131;
  char v132;
  char *v133;
  unint64_t v134;
  uint64_t v135;
  int64_t v136;
  unint64_t v137;
  size_t v138;
  void *v139;
  char *v140;
  char *v141;
  char v142;
  char *v143;
  unint64_t v144;
  uint64_t v145;
  int64_t v146;
  unint64_t v147;
  size_t v148;
  void *v149;
  char *v150;
  char v151;
  unint64_t v152;
  uint64_t v153;
  int64_t v154;
  unint64_t v155;
  size_t v156;
  void *v157;
  char *v158;
  char *v159;
  char v160;
  void *v161;
  void *v162;
  const char *v163;
  void *v164;
  const char *v165;
  int v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  int v178;
  int v179;
  int v180;
  void *v181;
  const char *v182;
  void *v183;
  const char *v184;
  void *v185;
  MDLMaterial *v186;
  const char *v187;
  void *v188;
  void *v189;
  const char *v190;
  void *v191;
  const char *v192;
  id v193;
  const char *v194;
  void *v195;
  const char *v196;
  MDLSubmesh *v197;
  const char *v198;
  void *v199;
  const char *v200;
  id v201;
  const char *v202;
  const char *v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int *v206;
  unsigned int v207;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  id v214;
  char v215;
  void *v216;
  int v217;
  int v218;
  int v219;
  void *v220;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v221;
  void *__p[2];
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v226;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *v227;
  uint64_t v228;
  _QWORD v229[3];
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  _OWORD v233[2];
  uint64_t v234;
  _OWORD v235[2];
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _OWORD v241[2];
  uint64_t v242;
  _OWORD v243[2];
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD v249[3];
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;

  v252 = *MEMORY[0x1E0C80C00];
  v214 = a1;
  v249[1] = 0;
  v249[2] = 0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v248 = 0;
  v249[0] = MEMORY[0x1E0DF3118] + 16;
  v246 = 0;
  v247 = 0;
  v244 = 0;
  v245 = 0;
  memset(v243, 0, sizeof(v243));
  v242 = 0;
  memset(v241, 0, sizeof(v241));
  v239 = 0;
  v240 = 0;
  v237 = 0;
  v238 = 0;
  v236 = 0;
  memset(v235, 0, sizeof(v235));
  v234 = 0;
  memset(v233, 0, sizeof(v233));
  pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetUVertexCountAttr(v3);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<int>();
  if ((BYTE8(v231) & 7) != 0)
  {
    v4 = (unsigned int *)(*((_QWORD *)&v231 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v231);
  if (*((_QWORD *)&v230 + 1))
    sub_1DCAEED94(*((uint64_t *)&v230 + 1));
  pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetVVertexCountAttr((pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *)v249);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<int>();
  if ((BYTE8(v231) & 7) != 0)
  {
    v6 = (unsigned int *)(*((_QWORD *)&v231 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v231);
  if (*((_QWORD *)&v230 + 1))
    sub_1DCAEED94(*((uint64_t *)&v230 + 1));
  pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetUOrderAttr((pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *)v249);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<int>();
  if ((BYTE8(v231) & 7) != 0)
  {
    v8 = (unsigned int *)(*((_QWORD *)&v231 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v231);
  if (*((_QWORD *)&v230 + 1))
    sub_1DCAEED94(*((uint64_t *)&v230 + 1));
  pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetVOrderAttr((pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *)v249);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<int>();
  if ((BYTE8(v231) & 7) != 0)
  {
    v10 = (unsigned int *)(*((_QWORD *)&v231 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v231);
  if (*((_QWORD *)&v230 + 1))
    sub_1DCAEED94(*((uint64_t *)&v230 + 1));
  pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetUKnotsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *)v249);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<double>>();
  if ((BYTE8(v231) & 7) != 0)
  {
    v12 = (unsigned int *)(*((_QWORD *)&v231 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v231);
  if (*((_QWORD *)&v230 + 1))
    sub_1DCAEED94(*((uint64_t *)&v230 + 1));
  pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetVKnotsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *)v249);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<double>>();
  if ((BYTE8(v231) & 7) != 0)
  {
    v14 = (unsigned int *)(*((_QWORD *)&v231 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v231);
  if (*((_QWORD *)&v230 + 1))
    sub_1DCAEED94(*((uint64_t *)&v230 + 1));
  pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetURangeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *)v249);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2d>();
  if ((BYTE8(v231) & 7) != 0)
  {
    v16 = (unsigned int *)(*((_QWORD *)&v231 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v231);
  if (*((_QWORD *)&v230 + 1))
    sub_1DCAEED94(*((uint64_t *)&v230 + 1));
  pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetVRangeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *)v249);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2d>();
  if ((BYTE8(v231) & 7) != 0)
  {
    v18 = (unsigned int *)(*((_QWORD *)&v231 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v231);
  if (*((_QWORD *)&v230 + 1))
    sub_1DCAEED94(*((uint64_t *)&v230 + 1));
  pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetPointWeightsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *)v249);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
  if ((BYTE8(v231) & 7) != 0)
  {
    v20 = (unsigned int *)(*((_QWORD *)&v231 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v231);
  if (*((_QWORD *)&v230 + 1))
    sub_1DCAEED94(*((uint64_t *)&v230 + 1));
  pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetUFormAttr((pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *)v249);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  if ((BYTE8(v231) & 7) != 0)
  {
    v22 = (unsigned int *)(*((_QWORD *)&v231 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v231);
  if (*((_QWORD *)&v230 + 1))
    sub_1DCAEED94(*((uint64_t *)&v230 + 1));
  pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetVFormAttr((pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *)v249);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  if ((BYTE8(v231) & 7) != 0)
  {
    v24 = (unsigned int *)(*((_QWORD *)&v231 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v231);
  if (*((_QWORD *)&v230 + 1))
    sub_1DCAEED94(*((uint64_t *)&v230 + 1));
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v249);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
  if ((BYTE8(v231) & 7) != 0)
  {
    v26 = (unsigned int *)(*((_QWORD *)&v231 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v231);
  if (*((_QWORD *)&v230 + 1))
    sub_1DCAEED94(*((uint64_t *)&v230 + 1));
  if (!*(_QWORD *)&v235[0] || *(_QWORD *)&v235[0] != (int)v246 * (uint64_t)SHIDWORD(v246))
  {
    v32 = 0;
    goto LABEL_288;
  }
  v232 = 0;
  v230 = 0u;
  v231 = 0u;
  v28 = (void *)MEMORY[0x1E0CB3940];
  v30 = *(_QWORD *)sub_1DCAEEC08(a2) & 0xFFFFFFFFFFFFFFF8;
  if (!v30)
  {
    v31 = (uint64_t *)"";
    goto LABEL_68;
  }
  v31 = (uint64_t *)(v30 + 16);
  if ((*(char *)(v30 + 39) & 0x80000000) == 0)
  {
LABEL_68:
    objc_msgSend_stringWithUTF8String_(v28, v29, (uint64_t)v31);
    goto LABEL_69;
  }
  objc_msgSend_stringWithUTF8String_(v28, v29, *v31);
LABEL_69:
  v220 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = [MDLMesh alloc];
  v216 = (void *)objc_msgSend_initWithBufferAllocator_(v33, v34, (uint64_t)v214);
  objc_msgSend_setName_(v216, v35, (uint64_t)v220);
  if (*(_QWORD *)&v235[0])
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v36, (uint64_t)CFSTR("%@-%@"), v220, CFSTR("position"));
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = (void *)MEMORY[0x1E0C99D50];
    sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v235);
    objc_msgSend_dataWithBytes_length_(v38, v39, v236, 12 * *(_QWORD *)&v235[0]);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addAttributeWithName_format_type_data_stride_(v216, v41, (uint64_t)v37, 786435, CFSTR("position"), v40, 12);

  }
  memset(v229, 0, sizeof(v229));
  v42 = atomic_load((unsigned __int8 *)&qword_1F03B5108);
  if ((v42 & 1) == 0 && __cxa_guard_acquire((__guard *)&qword_1F03B5108))
  {
    v209 = operator new();
    MEMORY[0x1DF0D1254](v209, "st");
    qword_1F03B5100 = v209;
    __cxa_guard_release((__guard *)&qword_1F03B5108);
  }
  v43 = atomic_load((unsigned __int8 *)&qword_1F03B5118);
  if ((v43 & 1) == 0 && __cxa_guard_acquire((__guard *)&qword_1F03B5118))
  {
    v210 = operator new();
    MEMORY[0x1DF0D1254](v210, "menvTextureCoords");
    qword_1F03B5110 = v210;
    __cxa_guard_release((__guard *)&qword_1F03B5118);
  }
  v44 = atomic_load((unsigned __int8 *)&qword_1F03B5128);
  if ((v44 & 1) == 0 && __cxa_guard_acquire((__guard *)&qword_1F03B5128))
  {
    v211 = operator new();
    MEMORY[0x1DF0D1254](v211, "primvars:Texture_uv");
    qword_1F03B5120 = v211;
    __cxa_guard_release((__guard *)&qword_1F03B5128);
  }
  v45 = atomic_load((unsigned __int8 *)&qword_1F03B5138);
  if ((v45 & 1) == 0 && __cxa_guard_acquire((__guard *)&qword_1F03B5138))
  {
    v212 = operator new();
    MEMORY[0x1DF0D1254](v212, "displayColor");
    qword_1F03B5130 = v212;
    __cxa_guard_release((__guard *)&qword_1F03B5138);
  }
  v46 = atomic_load((unsigned __int8 *)&qword_1F03B5148);
  if ((v46 & 1) == 0 && __cxa_guard_acquire((__guard *)&qword_1F03B5148))
  {
    v213 = operator new();
    MEMORY[0x1DF0D1254](v213, "primvars:displayColor");
    qword_1F03B5140 = v213;
    __cxa_guard_release((__guard *)&qword_1F03B5148);
  }
  v226 = 0;
  v227 = 0;
  v228 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  *((_QWORD *)&v223 + 1) = 0;
  __p[0] = (void *)(MEMORY[0x1E0DF3138] + 16);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvars((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)__p);
  MEMORY[0x1DF0D102C](__p);
  v47 = v226;
  v221 = v227;
  while (v47 != v221)
  {
    v48 = *(_QWORD *)sub_1DCAEEC08(v47);
    if ((v48 & 7) != 0)
    {
      v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 2, v49));
      if ((v50 & 1) == 0)
        v48 &= 0xFFFFFFFFFFFFFFF8;
    }
    v51 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
    v52 = CFSTR("textureCoordinate");
    if ((v48 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)qword_1F03B5100 & 0xFFFFFFFFFFFFFFF8))
    {
      v52 = CFSTR("textureCoordinate");
      if (v51 != (unsigned int *)(*(_QWORD *)qword_1F03B5110 & 0xFFFFFFFFFFFFFFF8))
      {
        v52 = CFSTR("textureCoordinate");
        if (v51 != (unsigned int *)(*(_QWORD *)qword_1F03B5120 & 0xFFFFFFFFFFFFFFF8))
        {
          v52 = CFSTR("color");
          if (v51 != (unsigned int *)(*(_QWORD *)qword_1F03B5130 & 0xFFFFFFFFFFFFFFF8))
          {
            v52 = CFSTR("color");
            if (v51 != (unsigned int *)(*(_QWORD *)qword_1F03B5140 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_271;
          }
        }
      }
    }
    v53 = v52;
    v250 = 0;
    v251 = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
    v225 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation(v47);
    if (!v251)
      goto LABEL_267;
    if (v53 != CFSTR("color"))
      goto LABEL_89;
    v215 = v48;
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v223 = 0;
    v68 = atomic_load(MEMORY[0x1E0DF24F8]);
    if (!v68)
      v68 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
    if ((v225 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v68 + 1224) & 0xFFFFFFFFFFFFFFF8))
    {
      if (sub_1DCB26964((pxrInternal__aapl__pxrReserved__::VtValue *)&v250))
      {
        v69 = (_QWORD *)sub_1DCB23B80((pxrInternal__aapl__pxrReserved__::VtValue *)&v250);
        if (*v69)
        {
          v70 = 0;
          v71 = __p[1];
          while (1)
          {
            v72 = (int)(float)(*(float *)(v69[4] + 12 * v70) * 255.0);
            if ((unint64_t)v71 >= (unint64_t)v223)
            {
              v74 = (unint64_t)__p[0];
              v75 = v71 - (char *)__p[0];
              v76 = v71 - (char *)__p[0] + 1;
              if (v76 < 0)
                sub_1DCAE4C44();
              v77 = v223 - (unint64_t)__p[0];
              if (2 * ((unint64_t)v223 - (unint64_t)__p[0]) > v76)
                v76 = 2 * v77;
              if (v77 >= 0x3FFFFFFFFFFFFFFFLL)
                v78 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v78 = v76;
              if (v78)
                v79 = (char *)operator new(v78);
              else
                v79 = 0;
              v80 = &v79[v75];
              v81 = &v79[v75];
              *v81 = v72;
              v73 = v81 + 1;
              if (v71 != (_BYTE *)v74)
              {
                v82 = &v71[~v74];
                do
                {
                  v83 = *--v71;
                  (v82--)[(_QWORD)v79] = v83;
                }
                while (v71 != (_BYTE *)v74);
                v71 = __p[0];
                v80 = v79;
              }
              __p[0] = v80;
              __p[1] = v73;
              *(_QWORD *)&v223 = &v79[v78];
              if (v71)
                operator delete(v71);
            }
            else
            {
              *v71 = v72;
              v73 = v71 + 1;
            }
            __p[1] = v73;
            v84 = (int)(float)(*(float *)(v69[4] + 12 * v70 + 4) * 255.0);
            if ((unint64_t)v73 < (unint64_t)v223)
            {
              *v73 = v84;
              v85 = v73 + 1;
              goto LABEL_144;
            }
            v86 = (unint64_t)__p[0];
            v87 = v73 - (char *)__p[0];
            v88 = v73 - (char *)__p[0] + 1;
            if (v88 < 0)
              sub_1DCAE4C44();
            v89 = v223 - (unint64_t)__p[0];
            if (2 * ((unint64_t)v223 - (unint64_t)__p[0]) > v88)
              v88 = 2 * v89;
            v90 = v89 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v88;
            v91 = v90 ? operator new(v90) : 0;
            v92 = (char *)v91 + v87;
            v93 = (char *)v91 + v87;
            *v93 = v84;
            v85 = v93 + 1;
            if (v73 == (_BYTE *)v86)
              break;
            v94 = &v73[~v86];
            do
            {
              v95 = *--v73;
              (v94--)[(_QWORD)v91] = v95;
            }
            while (v73 != (_BYTE *)v86);
            v73 = __p[0];
            __p[0] = v91;
            __p[1] = v85;
            *(_QWORD *)&v223 = (char *)v91 + v90;
            if (v73)
              goto LABEL_143;
LABEL_144:
            __p[1] = v85;
            v96 = (int)(float)(*(float *)(v69[4] + 12 * v70 + 8) * 255.0);
            if ((unint64_t)v85 < (unint64_t)v223)
            {
              *v85 = v96;
              v97 = v85 + 1;
              goto LABEL_162;
            }
            v98 = (unint64_t)__p[0];
            v99 = v85 - (char *)__p[0];
            v100 = v85 - (char *)__p[0] + 1;
            if (v100 < 0)
              sub_1DCAE4C44();
            v101 = v223 - (unint64_t)__p[0];
            if (2 * ((unint64_t)v223 - (unint64_t)__p[0]) > v100)
              v100 = 2 * v101;
            if (v101 >= 0x3FFFFFFFFFFFFFFFLL)
              v102 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v102 = v100;
            if (v102)
              v103 = operator new(v102);
            else
              v103 = 0;
            v104 = (char *)v103 + v102;
            *((_BYTE *)v103 + v99) = v96;
            v97 = (char *)v103 + v99 + 1;
            if (v85 == (_BYTE *)v98)
            {
              __p[0] = (char *)v103 + v99;
              __p[1] = (char *)v103 + v99 + 1;
              *(_QWORD *)&v223 = v104;
LABEL_161:
              operator delete(v85);
              goto LABEL_162;
            }
            v105 = &v85[~v98];
            do
            {
              v106 = *--v85;
              (v105--)[(_QWORD)v103] = v106;
            }
            while (v85 != (_BYTE *)v98);
            v85 = __p[0];
            __p[0] = v103;
            __p[1] = (char *)v103 + v99 + 1;
            *(_QWORD *)&v223 = v104;
            if (v85)
              goto LABEL_161;
LABEL_162:
            __p[1] = v97;
            if ((unint64_t)v97 >= (unint64_t)v223)
            {
              v107 = (unint64_t)__p[0];
              v108 = v97 - (char *)__p[0];
              v109 = v97 - (char *)__p[0] + 1;
              if (v109 < 0)
                sub_1DCAE4C44();
              v110 = v223 - (unint64_t)__p[0];
              if (2 * ((unint64_t)v223 - (unint64_t)__p[0]) > v109)
                v109 = 2 * v110;
              if (v110 >= 0x3FFFFFFFFFFFFFFFLL)
                v111 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v111 = v109;
              if (v111)
                v112 = operator new(v111);
              else
                v112 = 0;
              *((_BYTE *)v112 + v108) = -1;
              v71 = (char *)v112 + v108 + 1;
              if (v97 == (_BYTE *)v107)
              {
                __p[0] = (char *)v112 + v108;
                __p[1] = (char *)v112 + v108 + 1;
                *(_QWORD *)&v223 = (char *)v112 + v111;
              }
              else
              {
                v113 = &v97[~v107];
                do
                {
                  v114 = *--v97;
                  (v113--)[(_QWORD)v112] = v114;
                }
                while (v97 != (_BYTE *)v107);
                v97 = __p[0];
                __p[0] = v112;
                __p[1] = (char *)v112 + v108 + 1;
                *(_QWORD *)&v223 = (char *)v112 + v111;
                if (!v97)
                  goto LABEL_180;
              }
              operator delete(v97);
            }
            else
            {
              *v97 = -1;
              v71 = v97 + 1;
            }
LABEL_180:
            __p[1] = v71;
            if ((unint64_t)++v70 >= *v69)
              goto LABEL_181;
          }
          __p[0] = v92;
          __p[1] = v85;
          *(_QWORD *)&v223 = (char *)v91 + v90;
LABEL_143:
          operator delete(v73);
          goto LABEL_144;
        }
      }
    }
LABEL_181:
    v115 = atomic_load(MEMORY[0x1E0DF24F8]);
    if (!v115)
      v115 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
    if ((v225 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v115 + 136) & 0xFFFFFFFFFFFFFFF8)
      && sub_1DCB26964((pxrInternal__aapl__pxrReserved__::VtValue *)&v250))
    {
      v117 = v246;
      v116 = HIDWORD(v246);
      v118 = (_QWORD *)sub_1DCB23B80((pxrInternal__aapl__pxrReserved__::VtValue *)&v250);
      if (!*v118)
      {
        v166 = 3;
        LOBYTE(v48) = v215;
LABEL_262:
        v161 = __p[0];
        if (!__p[0])
          goto LABEL_264;
LABEL_263:
        __p[1] = v161;
        operator delete(v161);
        goto LABEL_264;
      }
      v119 = v117 * (uint64_t)v116;
      if ((_DWORD)v119)
      {
        v120 = 0;
        v121 = (float *)v118[4];
        v218 = (int)(float)(v121[1] * 255.0);
        v219 = (int)(float)(*v121 * 255.0);
        v217 = (int)(float)(v121[2] * 255.0);
        v122 = (char *)__p[1];
        while (1)
        {
          if ((unint64_t)v122 >= (unint64_t)v223)
          {
            v124 = (unint64_t)__p[0];
            v125 = v122 - (char *)__p[0];
            v126 = v122 - (char *)__p[0] + 1;
            if (v126 < 0)
              sub_1DCAE4C44();
            v127 = v223 - (unint64_t)__p[0];
            if (2 * ((unint64_t)v223 - (unint64_t)__p[0]) > v126)
              v126 = 2 * v127;
            if (v127 >= 0x3FFFFFFFFFFFFFFFLL)
              v128 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v128 = v126;
            if (v128)
              v129 = (char *)operator new(v128);
            else
              v129 = 0;
            v130 = &v129[v125];
            v129[v125] = v219;
            v123 = &v129[v125 + 1];
            if (v122 != (char *)v124)
            {
              v131 = &v122[~v124];
              do
              {
                v132 = *--v122;
                (v131--)[(_QWORD)v129] = v132;
              }
              while (v122 != (char *)v124);
              v122 = (char *)__p[0];
              v130 = v129;
            }
            __p[0] = v130;
            __p[1] = &v129[v125 + 1];
            *(_QWORD *)&v223 = &v129[v128];
            if (v122)
              operator delete(v122);
          }
          else
          {
            *v122 = v219;
            v123 = v122 + 1;
          }
          __p[1] = v123;
          if ((unint64_t)v123 < (unint64_t)v223)
          {
            *v123 = v218;
            v133 = v123 + 1;
            goto LABEL_223;
          }
          v134 = (unint64_t)__p[0];
          v135 = v123 - (char *)__p[0];
          v136 = v123 - (char *)__p[0] + 1;
          if (v136 < 0)
            sub_1DCAE4C44();
          v137 = v223 - (unint64_t)__p[0];
          if (2 * ((unint64_t)v223 - (unint64_t)__p[0]) > v136)
            v136 = 2 * v137;
          v138 = v137 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v136;
          v139 = v138 ? operator new(v138) : 0;
          v140 = (char *)v139 + v138;
          *((_BYTE *)v139 + v135) = v218;
          v133 = (char *)v139 + v135 + 1;
          if (v123 == (char *)v134)
            break;
          v141 = &v123[~v134];
          do
          {
            v142 = *--v123;
            (v141--)[(_QWORD)v139] = v142;
          }
          while (v123 != (char *)v134);
          v123 = (char *)__p[0];
          __p[0] = v139;
          __p[1] = (char *)v139 + v135 + 1;
          *(_QWORD *)&v223 = v140;
          if (v123)
            goto LABEL_222;
LABEL_223:
          __p[1] = v133;
          if ((unint64_t)v133 < (unint64_t)v223)
          {
            *v133 = v217;
            v143 = v133 + 1;
            goto LABEL_241;
          }
          v144 = (unint64_t)__p[0];
          v145 = v133 - (char *)__p[0];
          v146 = v133 - (char *)__p[0] + 1;
          if (v146 < 0)
            sub_1DCAE4C44();
          v147 = v223 - (unint64_t)__p[0];
          if (2 * ((unint64_t)v223 - (unint64_t)__p[0]) > v146)
            v146 = 2 * v147;
          if (v147 >= 0x3FFFFFFFFFFFFFFFLL)
            v148 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v148 = v146;
          if (v148)
            v149 = operator new(v148);
          else
            v149 = 0;
          *((_BYTE *)v149 + v145) = v217;
          v143 = (char *)v149 + v145 + 1;
          if (v133 == (char *)v144)
          {
            __p[0] = (char *)v149 + v145;
            __p[1] = (char *)v149 + v145 + 1;
            *(_QWORD *)&v223 = (char *)v149 + v148;
LABEL_240:
            operator delete(v133);
            goto LABEL_241;
          }
          v150 = &v133[~v144];
          do
          {
            v151 = *--v133;
            (v150--)[(_QWORD)v149] = v151;
          }
          while (v133 != (char *)v144);
          v133 = (char *)__p[0];
          __p[0] = v149;
          __p[1] = (char *)v149 + v145 + 1;
          *(_QWORD *)&v223 = (char *)v149 + v148;
          if (v133)
            goto LABEL_240;
LABEL_241:
          __p[1] = v143;
          if ((unint64_t)v143 >= (unint64_t)v223)
          {
            v152 = (unint64_t)__p[0];
            v153 = v143 - (char *)__p[0];
            v154 = v143 - (char *)__p[0] + 1;
            if (v154 < 0)
              sub_1DCAE4C44();
            v155 = v223 - (unint64_t)__p[0];
            if (2 * ((unint64_t)v223 - (unint64_t)__p[0]) > v154)
              v154 = 2 * v155;
            if (v155 >= 0x3FFFFFFFFFFFFFFFLL)
              v156 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v156 = v154;
            if (v156)
              v157 = operator new(v156);
            else
              v157 = 0;
            v158 = (char *)v157 + v156;
            *((_BYTE *)v157 + v153) = -1;
            v122 = (char *)v157 + v153 + 1;
            if (v143 == (char *)v152)
            {
              __p[0] = (char *)v157 + v153;
              __p[1] = (char *)v157 + v153 + 1;
              *(_QWORD *)&v223 = v158;
            }
            else
            {
              v159 = &v143[~v152];
              do
              {
                v160 = *--v143;
                (v159--)[(_QWORD)v157] = v160;
              }
              while (v143 != (char *)v152);
              v143 = (char *)__p[0];
              __p[0] = v157;
              __p[1] = (char *)v157 + v153 + 1;
              *(_QWORD *)&v223 = v158;
              if (!v143)
                goto LABEL_259;
            }
            operator delete(v143);
          }
          else
          {
            *v143 = -1;
            v122 = v143 + 1;
          }
LABEL_259:
          __p[1] = v122;
          if (++v120 == v119)
            goto LABEL_260;
        }
        __p[0] = (char *)v139 + v135;
        __p[1] = (char *)v139 + v135 + 1;
        *(_QWORD *)&v223 = v140;
LABEL_222:
        operator delete(v123);
        goto LABEL_223;
      }
    }
LABEL_260:
    v161 = __p[1];
    if (__p[1] != __p[0])
    {
      LOBYTE(v48) = v215;
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v54, (uint64_t)CFSTR("%@-%@"), v220, CFSTR("color"));
      v162 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v163, (uint64_t)__p[0], (char *)__p[1] - (char *)__p[0]);
      v164 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addAttributeWithName_format_type_data_stride_(v216, v165, (uint64_t)v162, 65540, CFSTR("color"), v164, 4);

      v166 = 0;
      goto LABEL_262;
    }
    v166 = 3;
    LOBYTE(v48) = v215;
    if (__p[1])
      goto LABEL_263;
LABEL_264:
    if (!v166)
    {
LABEL_89:
      v55 = atomic_load(MEMORY[0x1E0DF24F8]);
      if (!v55)
        v55 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
      if ((v225 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v55 + 1224) & 0xFFFFFFFFFFFFFFF8)
        && v53 == CFSTR("textureCoordinate"))
      {
        v224 = 0;
        *(_OWORD *)__p = 0u;
        v223 = 0u;
        v57 = sub_1DCB24C90((pxrInternal__aapl__pxrReserved__::VtValue *)&v250);
        v59 = *(_OWORD *)(v57 + 16);
        *(_OWORD *)__p = *(_OWORD *)v57;
        v223 = v59;
        v60 = *(_QWORD *)(v57 + 32);
        v224 = v60;
        if (v60)
        {
          v61 = (unint64_t *)(v60 - 16);
          if (*((_QWORD *)&v223 + 1))
            v61 = (unint64_t *)*((_QWORD *)&v223 + 1);
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
        }
        if (__p[0])
        {
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v58, (uint64_t)CFSTR("%@-%@"), v220, CFSTR("textureCoordinate"));
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          v64 = (void *)MEMORY[0x1E0C99D50];
          sub_1DCB8C6E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p);
          objc_msgSend_dataWithBytes_length_(v64, v65, v224, 8 * (uint64_t)__p[0]);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addAttributeWithName_format_type_data_stride_(v216, v67, (uint64_t)v63, 786434, CFSTR("textureCoordinate"), v66, 8);

        }
        sub_1DCAEEE78((uint64_t)__p);
      }
    }
LABEL_267:
    if ((v225 & 7) != 0)
    {
      v167 = (unsigned int *)(v225 & 0xFFFFFFFFFFFFFFF8);
      do
        v168 = __ldxr(v167);
      while (__stlxr(v168 - 2, v167));
    }
    sub_1DCAEEE2C((uint64_t)&v250);

LABEL_271:
    if ((v48 & 7) != 0)
    {
      do
        v169 = __ldxr(v51);
      while (__stlxr(v169 - 2, v51));
    }
    v47 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)v47 + 48);
  }
  __p[0] = &v226;
  sub_1DCB8C5D8((void ***)__p);
  v224 = 0;
  *(_OWORD *)__p = 0u;
  v223 = 0u;
  sub_1DCB23B10((uint64_t)__p, (6 * HIDWORD(v246) - 6) * ((int)v246 - 1));
  v170 = v246;
  if ((int)v246 >= 2)
  {
    v171 = 0;
    v172 = 0;
    v173 = HIDWORD(v246);
    do
    {
      if (v173 >= 2)
      {
        v174 = 0;
        v175 = 0;
        v176 = 4 * v172;
        do
        {
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p);
          v177 = v175 + v171 * v173;
          *(_DWORD *)(v224 + v176 + 4 * v174) = v177;
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p);
          *(_DWORD *)(v224 + v176 + 4 * v174 + 4) = v177 + 1;
          v178 = HIDWORD(v246);
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p);
          *(_DWORD *)(v224 + v176 + 4 * v174 + 8) = v175 + v178 + v171 * v173 + 1;
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p);
          *(_DWORD *)(v224 + v176 + 4 * v174 + 12) = v177;
          v179 = HIDWORD(v246);
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p);
          *(_DWORD *)(v224 + v176 + 4 * v174 + 16) = v175 + v179 + v171 * v173 + 1;
          v180 = HIDWORD(v246);
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p);
          *(_DWORD *)(v224 + v176 + 4 * v174 + 20) = v175 + v180 + v171 * v173;
          ++v175;
          v173 = HIDWORD(v246);
          v174 += 6;
        }
        while (v175 < HIDWORD(v246) - 1);
        v172 += v174;
        v170 = v246;
      }
      ++v171;
    }
    while (v171 < v170 - 1);
  }
  v181 = (void *)MEMORY[0x1E0C99D50];
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p);
  objc_msgSend_dataWithBytes_length_(v181, v182, v224, 4 * (uint64_t)__p[0]);
  v183 = (void *)objc_claimAutoreleasedReturnValue();
  v185 = (void *)objc_msgSend_newBufferWithData_type_(v214, v184, (uint64_t)v183, 2);
  v186 = [MDLMaterial alloc];
  objc_msgSend_stringByAppendingString_(v220, v187, (uint64_t)CFSTR("-Material"));
  v188 = (void *)objc_claimAutoreleasedReturnValue();
  v189 = (void *)objc_opt_new();
  v191 = (void *)objc_msgSend_initWithName_scatteringFunction_(v186, v190, (uint64_t)v188, v189);

  if (objc_msgSend_conformsToProtocol_(v185, v192, (uint64_t)&unk_1F03B6D88))
  {
    v193 = v185;
    objc_msgSend_stringByAppendingString_(v220, v194, (uint64_t)CFSTR("-Indices"));
    v195 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v193, v196, (uint64_t)v195);

  }
  v197 = [MDLSubmesh alloc];
  v199 = (void *)objc_msgSend_initWithName_indexBuffer_indexCount_indexType_geometryType_material_(v197, v198, (uint64_t)CFSTR("submesh"), v185, __p[0], 32, 2, v191);
  objc_msgSend_setVertexCount_(v216, v200, v230);
  v201 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend_addObject_(v201, v202, (uint64_t)v199);
  objc_msgSend_setSubmeshes_(v216, v203, (uint64_t)v201);
  v32 = v216;

  sub_1DCAEEE78((uint64_t)__p);
  __p[0] = v229;
  sub_1DCB8C4F0((void ***)__p);

  sub_1DCAEEE78((uint64_t)&v230);
LABEL_288:
  sub_1DCAEEE78((uint64_t)v233);
  sub_1DCAEEE78((uint64_t)v235);
  sub_1DCAEEE78((uint64_t)v241);
  sub_1DCAEEE78((uint64_t)v243);
  if ((v247 & 7) != 0)
  {
    v204 = (unsigned int *)(v247 & 0xFFFFFFFFFFFFFFF8);
    do
      v205 = __ldxr(v204);
    while (__stlxr(v205 - 2, v204));
  }
  if ((v248 & 7) != 0)
  {
    v206 = (unsigned int *)(v248 & 0xFFFFFFFFFFFFFFF8);
    do
      v207 = __ldxr(v206);
    while (__stlxr(v207 - 2, v206));
  }
  MEMORY[0x1DF0D0FA8](v249);

  return v32;
}

void sub_1DCB8C050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;

  MEMORY[0x1DF0D228C](v55, 0x60C4044C4A2DFLL);
  __cxa_guard_abort(&qword_1F03B5148);
  __p = &a30;
  sub_1DCB8C4F0((void ***)&__p);

  sub_1DCAEEE78((uint64_t)&a33);
  sub_1DCAEEE78((uint64_t)&a39);
  sub_1DCAEEE78((uint64_t)&a45);
  sub_1DCAEEE78((uint64_t)&a55);
  sub_1DCAEEE78(v56 - 224);
  v58 = *(_QWORD *)(v56 - 168);
  if ((v58 & 7) != 0)
  {
    v59 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
    do
      v60 = __ldxr(v59);
    while (__stlxr(v60 - 2, v59));
  }
  v61 = *(_QWORD *)(v56 - 160);
  if ((v61 & 7) != 0)
  {
    v62 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
    do
      v63 = __ldxr(v62);
    while (__stlxr(v63 - 2, v62));
  }
  MEMORY[0x1DF0D0FA8](v56 - 152);

  _Unwind_Resume(a1);
}

void sub_1DCB8C4F0(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_1DCB8C574((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1DCB8C574(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34(a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  if (result)
    return sub_1DCAEED94(result);
  return result;
}

void sub_1DCB8C5D8(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 6;
        sub_1DCB8C65C((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1DCB8C65C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t result;

  v3 = a2[4];
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  v6 = a2[3];
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)(a2 + 2));
  result = a2[1];
  if (result)
    return sub_1DCAEED94(result);
  return result;
}

void sub_1DCB8C6E0(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2f]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_1DCB8C774((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 8 * v5;
        v9 = v6;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      sub_1DCAEEE78((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

_QWORD *sub_1DCB8C774(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCB8C7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_1DCB8C814(float64x2_t *a1)
{
  double result;

  *(_QWORD *)&result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a1), a1[1]).u64[0];
  return result;
}

uint64_t sub_1DCB8C848(char *a1, _QWORD *a2, char *a3)
{
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::locale v11;
  void *__p[2];
  char v13;

  for (i = 0; i != 84; i += 3)
  {
    sub_1DCB0345C(__p, (&off_1F03B48D8)[i]);
    MEMORY[0x1DF0D21FC](&v11);
    v7 = sub_1DCB8C98C(a1, (uint64_t)__p, &v11);
    std::locale::~locale(&v11);
    if (v13 < 0)
      operator delete(__p[0]);
    if ((v7 & 0x8000000000000000) == 0)
    {
      *a2 = (&off_1F03B48D8)[i + 1];
      v9 = (char *)&(&off_1F03B48D8)[i + 2];
      goto LABEL_10;
    }
  }
  sub_1DCB0345C(__p, (char *)qword_1F03B4B78);
  MEMORY[0x1DF0D21FC](&v11);
  v8 = sub_1DCB8C98C(a1, (uint64_t)__p, &v11);
  std::locale::~locale(&v11);
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (v8 < 0)
      return 0;
LABEL_8:
    v9 = &byte_1F03B4B88;
    *a2 = qword_1F03B4B80;
LABEL_10:
    *a3 = *v9;
    return 1;
  }
  if ((v8 & 0x8000000000000000) == 0)
    goto LABEL_8;
  return 0;
}

void sub_1DCB8C964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::locale::~locale((std::locale *)&a9);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB8C98C(char *a1, uint64_t a2, const std::locale *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v13;
  const std::locale *v14;

  v3 = a1;
  v4 = a1[23];
  v5 = *((_QWORD *)a1 + 1);
  if ((v4 & 0x80u) != 0)
  {
    a1 = *(char **)a1;
    v4 = v5;
  }
  v6 = (uint64_t)&a1[v4];
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a2;
  else
    v8 = *(char **)a2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  v14 = a3;
  v13 = 0;
  v9 = sub_1DCB9B800(a1, v6, v8, &v8[v7], &v14, (uint64_t)&v13, (uint64_t)&v13);
  if (v3[23] < 0)
  {
    v11 = v3;
    v3 = *(char **)v3;
    v10 = *((_QWORD *)v11 + 1);
  }
  else
  {
    v10 = v3[23];
  }
  if (&v3[v10] == v9)
    return -1;
  else
    return v9 - v3;
}

void sub_1DCB8CA38(void *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::UsdShadeInput *a4, uint64_t a5)
{
  id v9;
  id v10;
  int v11;
  uint64_t v12;
  int v13;
  void *v14;
  const char *v15;
  unint64_t v16;
  uint64_t *v17;
  const char *v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  MDLMaterialProperty *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  double v33;
  const char *v34;
  uint64_t v35;
  double *v36;
  const char *v37;
  uint64_t v38;
  double *v39;
  const char *v40;
  uint64_t v41;
  __int128 v42;
  id v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  void *v47;
  void *__p[2];
  void *v49;
  void *__dst[2];
  void *v51[5];
  _QWORD v52[3];

  v52[2] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a3;
  v52[0] = 0;
  v52[1] = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get() & 1) == 0)
    goto LABEL_46;
  v11 = sub_1DCB8CE70((pxrInternal__aapl__pxrReserved__::VtValue *)v52);
  if (v11)
    v12 = 7;
  else
    v12 = 0;
  if ((sub_1DCB8CEA8((pxrInternal__aapl__pxrReserved__::VtValue *)v52) & 1) != 0)
  {
    v12 = 8;
    goto LABEL_12;
  }
  if ((sub_1DCB8CEE0((pxrInternal__aapl__pxrReserved__::VtValue *)v52) & 1) != 0)
  {
    v12 = 5;
    goto LABEL_12;
  }
  v13 = sub_1DCB8CF18((pxrInternal__aapl__pxrReserved__::VtValue *)v52);
  if (v13)
    v12 = 3;
  if ((v13 | v11) == 1)
  {
LABEL_12:
    v14 = (void *)MEMORY[0x1E0CB3940];
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(a4);
    v16 = (unint64_t)__dst[0] & 0xFFFFFFFFFFFFFFF8;
    if (((unint64_t)__dst[0] & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v17 = (uint64_t *)(v16 + 16);
      if (*(char *)(v16 + 39) < 0)
      {
        objc_msgSend_stringWithUTF8String_(v14, v15, *v17);
LABEL_17:
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (((uint64_t)__dst[0] & 7) != 0)
        {
          v20 = (unsigned int *)((unint64_t)__dst[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v21 = __ldxr(v20);
          while (__stlxr(v21 - 2, v20));
        }
        objc_msgSend_propertyNamed_(v9, v18, (uint64_t)v19);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = v22;
        if (!v22 || objc_msgSend_semantic(v22, v23, v24) != a2)
        {
          v27 = [MDLMaterialProperty alloc];
          v29 = objc_msgSend_initWithName_semantic_(v27, v28, (uint64_t)v19, a2);

          v25 = (void *)v29;
        }
        switch(v12)
        {
          case 1:
          case 3:
            memset(v51, 0, 32);
            *(_OWORD *)__dst = 0u;
            v30 = sub_1DCB8CF88((pxrInternal__aapl__pxrReserved__::VtValue *)v52);
            v31 = v30;
            if (*(char *)(v30 + 23) < 0)
            {
              sub_1DCACA658(__dst, *(void **)v30, *(_QWORD *)(v30 + 8));
            }
            else
            {
              v32 = *(_OWORD *)v30;
              v51[0] = *(void **)(v30 + 16);
              *(_OWORD *)__dst = v32;
            }
            if (*(char *)(v31 + 47) < 0)
            {
              sub_1DCACA658(&v51[1], *(void **)(v31 + 24), *(_QWORD *)(v31 + 32));
            }
            else
            {
              v42 = *(_OWORD *)(v31 + 24);
              v51[3] = *(void **)(v31 + 40);
              *(_OWORD *)&v51[1] = v42;
            }
            __p[0] = 0;
            __p[1] = 0;
            v49 = 0;
            if (SHIBYTE(v51[3]) < 0)
            {
              sub_1DCACA658(__p, v51[1], (unint64_t)v51[2]);
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)&v51[1];
              v49 = v51[3];
            }
            sub_1DCAD3738(a5, (unsigned __int8 *)__p, (uint64_t)__p);
            v43 = objc_alloc(MEMORY[0x1E0CB3940]);
            if (SHIBYTE(v49) >= 0)
              v45 = objc_msgSend_initWithCString_encoding_(v43, v44, (uint64_t)__p, 4, __p[0], __p[1], v49);
            else
              v45 = objc_msgSend_initWithCString_encoding_(v43, v44, (uint64_t)__p[0], 4, __p[0], __p[1], v49);
            v47 = (void *)v45;
            objc_msgSend_setStringValue_(v25, v46, v45);

            if (SHIBYTE(v49) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v51[3]) < 0)
              operator delete(v51[1]);
            if (SHIBYTE(v51[0]) < 0)
              operator delete(__dst[0]);
            break;
          case 5:
            LODWORD(v33) = *(_DWORD *)sub_1DCB8D100((pxrInternal__aapl__pxrReserved__::VtValue *)v52);
            objc_msgSend_setFloatValue_(v25, v34, v35, v33);
            break;
          case 7:
            v36 = (double *)sub_1DCB8D098((pxrInternal__aapl__pxrReserved__::VtValue *)v52);
            objc_msgSend_setFloat3Value_(v25, v37, v38, *v36);
            break;
          case 8:
            v39 = (double *)sub_1DCB8D030((pxrInternal__aapl__pxrReserved__::VtValue *)v52);
            objc_msgSend_setFloat4Value_(v25, v40, v41, *v39);
            break;
          default:
            break;
        }
        objc_msgSend_setProperty_(v9, v26, (uint64_t)v25);

        goto LABEL_46;
      }
    }
    else
    {
      v17 = (uint64_t *)"";
    }
    objc_msgSend_stringWithUTF8String_(v14, v15, (uint64_t)v17);
    goto LABEL_17;
  }
LABEL_46:
  sub_1DCAEEE2C((uint64_t)v52);

}

void sub_1DCB8CDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  sub_1DCB8CFF0((uint64_t)&__p);

  sub_1DCAEEE2C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB8CE70(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 68)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573A38);
  else
    return 0;
}

uint64_t sub_1DCB8CEA8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 67)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573A68);
  else
    return 0;
}

uint64_t sub_1DCB8CEE0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 10)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x1E0DE4EE0]);
  else
    return 0;
}

uint64_t sub_1DCB8CF18(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfAssetPathE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573940);
}

uint64_t sub_1DCB8CF88(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCB8CF18(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_1DCB8CFF0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1DCB8D030(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCB8CEA8(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_1DCB8D098(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCB8CE70(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_1DCB8D100(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_1DCB8CEE0(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t sub_1DCB8D168(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *a1)
{
  __int128 v2;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x1E0C80C00];
  v2 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(a1);
  v3[0] = 0;
  v3[1] = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
  sub_1DCAEEE2C((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v2);
  return 0;
}

void sub_1DCB8D4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_1DCB245BC(va1);
  sub_1DCAEEE2C(v7 - 72);
  sub_1DCAEEA6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB8D5E4(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *a1)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  v4 = 0u;
  v5 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsAttr(a1);
  v6[0] = 0;
  v6[1] = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
  sub_1DCAEEE2C((uint64_t)v6);
  if ((BYTE8(v5) & 7) != 0)
  {
    v1 = (unsigned int *)(*((_QWORD *)&v5 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v2 = __ldxr(v1);
    while (__stlxr(v2 - 2, v1));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v5);
  result = *((_QWORD *)&v4 + 1);
  if (*((_QWORD *)&v4 + 1))
    return sub_1DCAEED94(*((uint64_t *)&v4 + 1));
  return result;
}

void sub_1DCB8D9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v10 = v8;
  *(_QWORD *)(v7 + 16) = v10;
  sub_1DCB245BC(va1);
  sub_1DCAEEE2C(v9 - 72);
  sub_1DCAEEA6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB8DAC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  v5 = *(_QWORD *)(v3 - 8);
  if (v5 >= v4)
  {
    result = sub_1DCB9C094(a1, a2);
  }
  else
  {
    sub_1DCB27848(v3, *(_QWORD **)(v3 - 8), a2);
    result = v5 + 96;
    a1[1] = v5 + 96;
  }
  a1[1] = result;
  return result;
}

void sub_1DCB8DB14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB8DB1C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v5;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t v10;
  unsigned int *v11;
  BOOL v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  const void **EmptyString;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = a2;
  v5 = (unint64_t *)MEMORY[0x1E0DF2618];
  if (!atomic_load(MEMORY[0x1E0DF2618]))
    sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return 1;
  if (!atomic_load(v5))
    sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  result = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
  if ((_DWORD)result)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x1DF0D1254](v18, "st");
    v10 = v18[0];
    if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (v18[0] & 0xFFFFFFFFFFFFFFF8))
    {
      v12 = 1;
    }
    else
    {
      v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x1DF0D1254](&v17, "Texture_uv");
      v11 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      v12 = (*a1 & 0xFFFFFFFFFFFFFFF8) == (v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 7) != 0)
      {
        do
          v13 = __ldxr(v11);
        while (__stlxr(v13 - 2, v11));
      }
      v10 = v18[0];
    }
    if ((v10 & 7) != 0)
    {
      v14 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    if (v12)
      return 1;
    if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (const void **)((*a1 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    return a3 + 8 != sub_1DCAD34E8(a3, EmptyString);
  }
  return result;
}

uint64_t sub_1DCB8DC98(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, uint64_t a2, _QWORD *a3, uint64_t **a4, int *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  _BOOL4 v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  int v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  _BOOL4 v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  const VtValue *v39;
  const VtValue *v41;
  pxrInternal__aapl__pxrReserved__::TfToken *v42;
  unsigned int *v43;
  unsigned int v44;
  int v45;
  __int128 *v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  __CFString *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v60;
  unsigned int v61;
  unint64_t v62;
  const char *v63;
  unint64_t v64;
  const char *v65;
  unint64_t v66;
  const char *v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ValueTypeNameForValue;
  __int128 v77;
  _OWORD v78[2];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v80 = 0u;
  v81 = 0u;
  v79 = 0u;
  v77 = 0u;
  memset(v78, 0, sizeof(v78));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)((char *)&v80 + 8));
  *(_QWORD *)&v81 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetDeclarationInfo(a1, (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)&v79 + 8), (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)((char *)&v80 + 8), (pxrInternal__aapl__pxrReserved__::TfToken *)&v81, (int *)&v81 + 2);
  MEMORY[0x1DF0D1254](&ValueTypeNameForValue, "displayColor");
  v9 = ValueTypeNameForValue;
  if ((*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8) == (ValueTypeNameForValue & 0xFFFFFFFFFFFFFFF8))
  {
    v13 = 1;
  }
  else
  {
    MEMORY[0x1DF0D1254](&v75, "primvars:displayColor");
    v10 = v75;
    if ((*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8) == (v75 & 0xFFFFFFFFFFFFFFF8))
    {
      v13 = 1;
    }
    else
    {
      MEMORY[0x1DF0D1254](&v74, "displayOpacity");
      v11 = v74;
      if ((*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8) == (v74 & 0xFFFFFFFFFFFFFFF8))
      {
        v13 = 1;
      }
      else
      {
        MEMORY[0x1DF0D1254](&v73, "primvars:displayOpacity");
        v12 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
        v13 = (*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8) == (v73 & 0xFFFFFFFFFFFFFFF8);
        if ((v73 & 7) != 0)
        {
          do
            v14 = __ldxr(v12);
          while (__stlxr(v14 - 2, v12));
        }
        v11 = v74;
      }
      if ((v11 & 7) != 0)
      {
        v15 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      v10 = v75;
    }
    if ((v10 & 7) != 0)
    {
      v17 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    v9 = ValueTypeNameForValue;
  }
  if ((v9 & 7) != 0)
  {
    v19 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  v21 = *((_QWORD *)&v79 + 1);
  v72 = *((_QWORD *)&v79 + 1);
  if ((BYTE8(v79) & 7) != 0)
  {
    v22 = (unsigned int *)(*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 2, v22));
    if ((v23 & 1) == 0)
    {
      v72 = v21 & 0xFFFFFFFFFFFFFFF8;
      v21 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v24 = sub_1DCB8DB1C(&v72, *((uint64_t *)&v80 + 1), (uint64_t)a4);
  if ((v21 & 7) != 0)
  {
    v25 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  MEMORY[0x1DF0D1254](&ValueTypeNameForValue, "normals");
  v27 = ValueTypeNameForValue;
  if ((*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8) == (ValueTypeNameForValue & 0xFFFFFFFFFFFFFFF8))
  {
    v29 = 1;
  }
  else
  {
    if (!atomic_load(MEMORY[0x1E0DF2618]))
      sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    v29 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
    v27 = ValueTypeNameForValue;
  }
  if ((v27 & 7) != 0)
  {
    v30 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  MEMORY[0x1DF0D1254](&ValueTypeNameForValue, "skinJointIndices");
  v32 = ValueTypeNameForValue;
  if ((*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8) == (ValueTypeNameForValue & 0xFFFFFFFFFFFFFFF8))
  {
    v34 = 1;
  }
  else
  {
    MEMORY[0x1DF0D1254](&v75, "skinJointWeights");
    v33 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFFFF8);
    v34 = (*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8) == (v75 & 0xFFFFFFFFFFFFFFF8);
    if ((v75 & 7) != 0)
    {
      do
        v35 = __ldxr(v33);
      while (__stlxr(v35 - 2, v33));
    }
    v32 = ValueTypeNameForValue;
  }
  if ((v32 & 7) != 0)
  {
    v36 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  if (v13 || v34 || ((v24 | v29) & 1) == 0)
    goto LABEL_80;
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::Get<pxrInternal__aapl__pxrReserved__::VtValue>() & 1) == 0)
  {
    v47 = *a3 & 0xFFFFFFFFFFFFFFF8;
    if (v47)
    {
      v48 = (const char *)(v47 + 16);
      if (*(char *)(v47 + 39) < 0)
        v48 = *(const char **)v48;
    }
    else
    {
      v48 = "";
    }
    v49 = *((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8;
    if ((*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8) == 0)
    {
      NSLog(CFSTR("Warning: %s : Skipping attribute %s, couldn't get the primvar contents"), v48, "");
      goto LABEL_80;
    }
    v50 = v49 + 16;
    v51 = *(char *)(v49 + 39);
    v52 = CFSTR("Warning: %s : Skipping attribute %s, couldn't get the primvar contents");
    if ((v51 & 0x80000000) == 0)
      goto LABEL_79;
LABEL_78:
    v50 = *(_QWORD *)v50;
LABEL_79:
    NSLog(&v52->isa, v48, v50);
    goto LABEL_80;
  }
  if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIndexed(a1))
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  sub_1DCACA6EC((uint64_t)&v77, a3);
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_1DCACE514((uint64_t)&v77, a3);
  if (!(_DWORD)EmptyString
    || (EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_1DCACF620((pxrInternal__aapl__pxrReserved__::VtValue *)&v77),
        !(_DWORD)EmptyString))
  {
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v48 = (const char *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else
    {
      EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
      v48 = (const char *)EmptyString;
    }
    if (v48[23] < 0)
      v48 = *(const char **)v48;
    if ((*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
      v50 = (*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8) + 16;
    else
      v50 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v52 = CFSTR("Warning: %s : Skipping attribute %s\n");
    if ((*(char *)(v50 + 23) & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_78;
  }
  if (!v24)
  {
    MEMORY[0x1DF0D1254](&ValueTypeNameForValue, "normals");
    if ((v80 & 7) != 0)
    {
      v60 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
      do
        v61 = __ldxr(v60);
      while (__stlxr(v61 - 2, v60));
    }
    *(_QWORD *)&v80 = ValueTypeNameForValue;
    goto LABEL_107;
  }
  ValueTypeNameForValue = pxrInternal__aapl__pxrReserved__::SdfGetValueTypeNameForValue((pxrInternal__aapl__pxrReserved__ *)&v77, v39);
  if (!atomic_load(MEMORY[0x1E0DF2618]))
    sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
  {
    v42 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x1DF0D1254](&ValueTypeNameForValue, "textureCoordinates");
    if ((v80 & 7) != 0)
    {
      v43 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stlxr(v44 - 2, v43));
    }
    *(_QWORD *)&v80 = ValueTypeNameForValue;
    v45 = *a5;
    if ((*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
      v46 = (__int128 *)((*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v46 = (__int128 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v42);
    ValueTypeNameForValue = (uint64_t)v46;
    *((_DWORD *)sub_1DCAD33AC(a4, (const void **)v46, (uint64_t)&unk_1DCC58300, (__int128 **)&ValueTypeNameForValue) + 14) = v45;
    ++*a5;
LABEL_107:
    v68 = a3[2];
    if (v68 >= a3[3])
    {
      v69 = sub_1DCB9C094(a3 + 1, (uint64_t)&v77);
    }
    else
    {
      sub_1DCB27848((uint64_t)(a3 + 3), (_QWORD *)a3[2], (uint64_t)&v77);
      v69 = v68 + 96;
      a3[2] = v68 + 96;
    }
    a3[2] = v69;
    goto LABEL_80;
  }
  v62 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if (v62)
  {
    v63 = (const char *)(v62 + 16);
    if (*(char *)(v62 + 39) < 0)
      v63 = *(const char **)v63;
  }
  else
  {
    v63 = "";
  }
  v64 = *((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8;
  if ((*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v65 = (const char *)(v64 + 16);
    if (*(char *)(v64 + 39) < 0)
      v65 = *(const char **)v65;
  }
  else
  {
    v65 = "";
  }
  v75 = pxrInternal__aapl__pxrReserved__::SdfGetValueTypeNameForValue((pxrInternal__aapl__pxrReserved__ *)&v77, v41);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v75);
  v66 = ValueTypeNameForValue & 0xFFFFFFFFFFFFFFF8;
  if ((ValueTypeNameForValue & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v67 = (const char *)(v66 + 16);
    if (*(char *)(v66 + 39) < 0)
      v67 = *(const char **)v67;
  }
  else
  {
    v67 = "";
  }
  NSLog(CFSTR("Warning: %s : Skipping attribute %s with invalid value type %s\n"), v63, v65, v67, v72);
  if ((ValueTypeNameForValue & 7) != 0)
  {
    v70 = (unsigned int *)(ValueTypeNameForValue & 0xFFFFFFFFFFFFFFF8);
    do
      v71 = __ldxr(v70);
    while (__stlxr(v71 - 2, v70));
  }
LABEL_80:
  if ((v81 & 7) != 0)
  {
    v53 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
    do
      v54 = __ldxr(v53);
    while (__stlxr(v54 - 2, v53));
  }
  if ((v80 & 7) != 0)
  {
    v55 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v56 = __ldxr(v55);
    while (__stlxr(v56 - 2, v55));
  }
  if ((BYTE8(v79) & 7) != 0)
  {
    v57 = (unsigned int *)(*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  sub_1DCAEEE78((uint64_t)v78);
  return sub_1DCAEEE2C((uint64_t)&v77);
}

void sub_1DCB8E3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  unsigned int *v10;
  unsigned int v11;
  va_list va;

  va_start(va, a9);
  if ((a9 & 7) != 0)
  {
    v10 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  sub_1DCB245BC(va);
  _Unwind_Resume(a1);
}

void sub_1DCB8E550(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  char v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  void **v37;
  std::type_info **v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  memset(v36, 0, sizeof(v36));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v4 = MEMORY[0x1E0DF3158];
  *((_QWORD *)&v39 + 1) = 0;
  v37 = (void **)(MEMORY[0x1E0DF3158] + 16);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v37);
  MEMORY[0x1DF0D1164](&v37);
  v32 = 0uLL;
  *(_QWORD *)&v33 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  *((_QWORD *)&v39 + 1) = 0;
  v37 = (void **)(v4 + 16);
  if (!atomic_load(MEMORY[0x1E0DF2580]))
    sub_1DCB9C22C(MEMORY[0x1E0DF2580]);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
  MEMORY[0x1DF0D1164](&v37);
  sub_1DCB4FB38((uint64_t)&v37, (uint64_t *)&v32 + 1, &v33);
  v6 = sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v37);
  if ((BYTE8(v39) & 7) != 0)
  {
    v7 = (unsigned int *)(*((_QWORD *)&v39 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v39);
  if (v38)
    sub_1DCAEED94((uint64_t)v38);
  MEMORY[0x1DF0D0F54](&v32);
  if ((v6 & 1) == 0)
  {
    v35 = 0;
    v44 = 0;
    v45 = 0;
    sub_1DCB2EEE0(a1, &v35, &v44);
    if (v45)
    {
      v34 = 0;
      v32 = 0u;
      v33 = 0u;
      v9 = sub_1DCAEEACC((pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
      v10 = *(_OWORD *)(v9 + 16);
      v32 = *(_OWORD *)v9;
      v33 = v10;
      v11 = *(_QWORD *)(v9 + 32);
      v34 = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 - 16);
        if (*((_QWORD *)&v33 + 1))
          v12 = (unint64_t *)*((_QWORD *)&v33 + 1);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      if ((_QWORD)v32)
      {
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v37 = 0;
        v39 = 0u;
        v38 = &off_1EA575B08;
        sub_1DCB272BC((uint64_t *)&v37, (uint64_t)&v32);
        *(_QWORD *)&v41 = 0;
        v39 = 0u;
        v40 = 0u;
        MEMORY[0x1DF0D1254]((char *)&v41 + 8, "displayColor");
        MEMORY[0x1DF0D1254](&v42, "color");
        v14 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
        if (!v14)
          v14 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
        *((_QWORD *)&v42 + 1) = *((_QWORD *)v14 + 78);
        *(_QWORD *)&v43 = v35;
        if ((v35 & 7) != 0)
        {
          v15 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 2, v15));
          if ((v16 & 1) == 0)
            *(_QWORD *)&v43 = v43 & 0xFFFFFFFFFFFFFFF8;
        }
        DWORD2(v43) = 1;
        sub_1DCACA6EC((uint64_t)&v37, a3);
        EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_1DCACE514((uint64_t)&v37, a3);
        if ((_DWORD)EmptyString)
        {
          v18 = a3;
          v19 = (_QWORD *)a3[2];
          if ((unint64_t)v19 >= a3[3])
          {
            v20 = sub_1DCB9C094(a3 + 1, (uint64_t)&v37);
          }
          else
          {
            sub_1DCB27848((uint64_t)(a3 + 3), v19, (uint64_t)&v37);
            v20 = (uint64_t)(v19 + 12);
            v18 = a3;
            a3[2] = v19 + 12;
          }
          v18[2] = v20;
        }
        else
        {
          if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v21 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
            v21 = (unint64_t)EmptyString;
          }
          if (*(char *)(v21 + 23) < 0)
            v21 = *(_QWORD *)v21;
          if ((*((_QWORD *)&v41 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
            v22 = (*((_QWORD *)&v41 + 1) & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v22 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          if (*(char *)(v22 + 23) < 0)
            v22 = *(_QWORD *)v22;
          NSLog(CFSTR("Warning: %s : Skipping attribute %s\n"), v21, v22);
        }
        if ((v43 & 7) != 0)
        {
          v23 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
          do
            v24 = __ldxr(v23);
          while (__stlxr(v24 - 2, v23));
        }
        if ((v42 & 7) != 0)
        {
          v25 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stlxr(v26 - 2, v25));
        }
        if ((BYTE8(v41) & 7) != 0)
        {
          v27 = (unsigned int *)(*((_QWORD *)&v41 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v28 = __ldxr(v27);
          while (__stlxr(v28 - 2, v27));
        }
        sub_1DCAEEE78((uint64_t)&v39);
        sub_1DCAEEE2C((uint64_t)&v37);
      }
      sub_1DCAEEE78((uint64_t)&v32);
    }
    sub_1DCAEEE2C((uint64_t)&v44);
    if ((v35 & 7) != 0)
    {
      v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
  }
  v37 = (void **)v36;
  sub_1DCB9C1A0(&v37);
}

void sub_1DCB8EACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;

  if ((a33 & 7) != 0)
  {
    v36 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  if ((a32 & 7) != 0)
  {
    v38 = (unsigned int *)(a32 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  sub_1DCAEEE78(v33);
  sub_1DCAEEE2C((uint64_t)&a25);
  sub_1DCAEEE78((uint64_t)&a15);
  sub_1DCAEEE2C(v34 - 120);
  if ((a21 & 7) != 0)
  {
    v40 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  a25 = (void **)&a22;
  sub_1DCB9C1A0(&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB8EC68(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr(a1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
  if ((v9 & 7) != 0)
  {
    v2 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v8);
  if (v7)
    sub_1DCAEED94(v7);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr(a1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
  if ((v9 & 7) != 0)
  {
    v4 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v8);
  result = v7;
  if (v7)
    return sub_1DCAEED94(v7);
  return result;
}

void sub_1DCB8ED54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEA6C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB8ED70(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, pxrInternal__aapl__pxrReserved__::UsdGeomMesh *a2)
{
  int HasAttribute;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t result;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  MEMORY[0x1DF0D1254](&v29, "cornerIndices");
  HasAttribute = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29);
  if ((v29 & 7) != 0)
  {
    v5 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if (HasAttribute)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCornerIndicesAttr(a2);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
    if ((v32 & 7) != 0)
    {
      v7 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v31);
    if (v30)
      sub_1DCAEED94(v30);
  }
  MEMORY[0x1DF0D1254](&v29, "cornerSharpnesses");
  v9 = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29);
  if ((v29 & 7) != 0)
  {
    v10 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  if (v9)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCornerSharpnessesAttr(a2);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
    if ((v32 & 7) != 0)
    {
      v12 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v31);
    if (v30)
      sub_1DCAEED94(v30);
  }
  MEMORY[0x1DF0D1254](&v29, "creaseIndices");
  v14 = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29);
  if ((v29 & 7) != 0)
  {
    v15 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if (v14)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseIndicesAttr(a2);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
    if ((v32 & 7) != 0)
    {
      v17 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v31);
    if (v30)
      sub_1DCAEED94(v30);
  }
  MEMORY[0x1DF0D1254](&v29, "creaseLengths");
  v19 = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29);
  if ((v29 & 7) != 0)
  {
    v20 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if (v19)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseLengthsAttr(a2);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
    if ((v32 & 7) != 0)
    {
      v22 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v31);
    if (v30)
      sub_1DCAEED94(v30);
  }
  MEMORY[0x1DF0D1254](&v29, "creaseSharpnesses");
  result = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29);
  if ((v29 & 7) != 0)
  {
    v25 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseSharpnessesAttr(a2);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
    if ((v32 & 7) != 0)
    {
      v27 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stlxr(v28 - 2, v27));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v31);
    result = v30;
    if (v30)
      return sub_1DCAEED94(v30);
  }
  return result;
}

void sub_1DCB8F0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEA6C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DCB8F0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;
  unsigned int v10;

  if ((a9 & 7) != 0)
  {
    v9 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  JUMPOUT(0x1DCB8F0ECLL);
}

void sub_1DCB8F11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;
  unsigned int v10;

  if ((a9 & 7) != 0)
  {
    v9 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  JUMPOUT(0x1DCB8F0ECLL);
}

void sub_1DCB8F144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;
  unsigned int v10;

  if ((a9 & 7) != 0)
  {
    v9 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  JUMPOUT(0x1DCB8F0ECLL);
}

void sub_1DCB8F16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;
  unsigned int v10;

  if ((a9 & 7) != 0)
  {
    v9 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  JUMPOUT(0x1DCB8F0ECLL);
}

void sub_1DCB8F194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;
  unsigned int v10;

  if ((a9 & 7) != 0)
  {
    v9 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  JUMPOUT(0x1DCB8F0ECLL);
}

void sub_1DCB8F1BC(uint64_t a1, uint64_t *a2, float64x2_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  uint64_t Text;
  const char *v21;
  void *v22;
  const char *v23;
  MDLSkinDeformer *v24;
  void *v25;
  double v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  void *__p;
  void *v33;
  uint64_t v34;

  v5 = *a2;
  v4 = a2[1];
  v6 = (v4 - *a2) >> 3;
  if (v6 == *a4)
  {
    v9 = (void *)objc_opt_new();
    __p = 0;
    v33 = 0;
    v34 = 0;
    sub_1DCB9C7DC(&__p, v6, MEMORY[0x1E0C83FF0]);
    if (v4 != v5)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = v6;
      do
      {
        *(double *)&v14 = sub_1DCB8C814((float64x2_t *)(a4[4] + v12));
        v15 = (char *)__p + v11;
        *v15 = v14;
        v15[1] = v16;
        v15[2] = v17;
        v15[3] = v18;
        v19 = (void *)MEMORY[0x1E0CB3940];
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*a2 + v10));
        objc_msgSend_stringWithUTF8String_(v19, v21, Text);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v9, v23, (uint64_t)v22);

        v12 += 128;
        v11 += 64;
        v10 += 8;
        --v13;
      }
      while (v13);
    }
    v24 = [MDLSkinDeformer alloc];
    v25 = __p;
    v26 = sub_1DCB8C814(a3);
    v28 = objc_msgSend_initWithJointPaths_jointBindTransforms_count_meshBindTransform_(v24, v27, (uint64_t)v9, v25, v6, v26);
    v29 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v28;

    if (__p)
    {
      v33 = __p;
      operator delete(__p);
    }

  }
  else
  {
    NSLog(CFSTR("Warning: joint paths and bind transforms have different sizes. Skipping MDLSkinDeformer.\n"));
  }
}

void sub_1DCB8F32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1DCB8F368(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6, double a7)
{
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::UsdStage *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v24;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t Name;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  MDLAnimatedScalarArray *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  unsigned int v54;
  __CFString *v55;
  uint64_t v56;
  uint64_t v57;
  int v59;
  uint64_t v60;
  _OWORD v61[2];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  _QWORD v65[3];
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  _OWORD v69[2];
  uint64_t v70;
  void **v71;
  std::type_info **v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v70 = 0;
  memset(v69, 0, sizeof(v69));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
  v14 = *(_DWORD **)a3;
  v13 = *(_DWORD **)(a3 + 8);
  v15 = (uint64_t)v13 - *(_QWORD *)a3;
  if (!(v15 >> 3))
    goto LABEL_2;
  v50 = *a5;
  if (*a5)
  {
    v51 = 0;
    v52 = (unsigned int *)a5[4];
    v53 = 4 * v50;
    do
    {
      v54 = *v52++;
      v51 += v54;
      v53 -= 4;
    }
    while (v53);
  }
  else
  {
    v51 = 0;
  }
  v55 = CFSTR("Warning: corrupt channelTargetCounts attribute. Skipping MDLBlendShapeDeformer.\n");
  if (v50 != *(_QWORD *)&v69[0] || (v56 = v15 >> 3, v56 != v51))
  {
LABEL_70:
    NSLog(&v55->isa);
    goto LABEL_71;
  }
  if (*a6 != v56)
  {
    v55 = CFSTR("Warning: corrupt channelTargetWeights attribute. Skipping MDLBlendShapeDeformer.\n");
    goto LABEL_70;
  }
LABEL_2:
  v57 = *(_QWORD *)&v69[0];
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  if (v14 != v13)
  {
    v16 = MEMORY[0x1E0DF3140] + 16;
    do
    {
      v68 = 0;
      sub_1DCB30114(&v68, v14);
      sub_1DCB30164((_DWORD *)&v68 + 1, v14 + 1);
      v66 = 0u;
      v67 = 0u;
      memset(v65, 0, sizeof(v65));
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2);
      v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCB8FB94((uint64_t *)v61);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v68);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v65[0] = v16;
      if ((BYTE8(v73) & 7) != 0)
      {
        v18 = (unsigned int *)(*((_QWORD *)&v73 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v73);
      if (v72)
        sub_1DCAEED94((uint64_t)v72);
      v20 = *((_QWORD *)&v61[0] + 1);
      if (*((_QWORD *)&v61[0] + 1))
      {
        v21 = (unsigned int *)(*((_QWORD *)&v61[0] + 1) + 8);
        do
        {
          v22 = __ldxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      }
      v63 = 0u;
      v64 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::GetPointsAttr((pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *)v65);
      if ((sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v63) & 1) != 0)
      {
        v62 = 0;
        memset(v61, 0, sizeof(v61));
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v71 = 0;
        v73 = 0u;
        v72 = &off_1EA575998;
        sub_1DCB272BC((uint64_t *)&v71, (uint64_t)v61);
        *(_QWORD *)&v75 = 0;
        v73 = 0u;
        v74 = 0u;
        MEMORY[0x1DF0D1254]((char *)&v75 + 8, "points");
        MEMORY[0x1DF0D1254](&v76, "points");
        v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
        if (!v24)
          v24 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
        *((_QWORD *)&v76 + 1) = *((_QWORD *)v24 + 77);
        MEMORY[0x1DF0D1254](&v77, "vertex");
        DWORD2(v77) = 1;
        EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_1DCACE514((uint64_t)&v71, (_QWORD *)a1);
        if ((_DWORD)EmptyString)
        {
          v26 = v67;
          if ((unint64_t)v67 >= *((_QWORD *)&v67 + 1))
          {
            v27 = sub_1DCB9C094((uint64_t *)&v66 + 1, (uint64_t)&v71);
          }
          else
          {
            sub_1DCB27848((uint64_t)&v67 + 8, (_QWORD *)v67, (uint64_t)&v71);
            v27 = v26 + 96;
          }
          *(_QWORD *)&v67 = v27;
        }
        else
        {
          if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v28 = (*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
            v28 = (unint64_t)EmptyString;
          }
          if (*(char *)(v28 + 23) < 0)
            v28 = *(_QWORD *)v28;
          if ((*((_QWORD *)&v75 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
            v29 = (*((_QWORD *)&v75 + 1) & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v29 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          if (*(char *)(v29 + 23) < 0)
            v29 = *(_QWORD *)v29;
          NSLog(CFSTR("Warning: %s : Skipping target %s\n"), v28, v29);
        }
        sub_1DCB8FC30((uint64_t)v65, &v59);
        Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v59);
        MEMORY[0x1DF0D1260](&v60, Name);
        if ((v66 & 7) != 0)
        {
          v31 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
          do
            v32 = __ldxr(v31);
          while (__stlxr(v32 - 2, v31));
        }
        *(_QWORD *)&v66 = v60;
        v60 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v59);
        v33 = *((_QWORD *)&v78 + 1);
        if (*((_QWORD *)&v78 + 1) >= (unint64_t)v79)
        {
          v34 = sub_1DCB9C8D8((uint64_t *)&v78, (uint64_t *)&v66);
        }
        else
        {
          sub_1DCB9B084((uint64_t)&v79, *((uint64_t **)&v78 + 1), (uint64_t *)&v66);
          v34 = v33 + 32;
        }
        *((_QWORD *)&v78 + 1) = v34;
        if ((v77 & 7) != 0)
        {
          v35 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        if ((v76 & 7) != 0)
        {
          v37 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
        if ((BYTE8(v75) & 7) != 0)
        {
          v39 = (unsigned int *)(*((_QWORD *)&v75 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v40 = __ldxr(v39);
          while (__stlxr(v40 - 2, v39));
        }
        sub_1DCAEEE78((uint64_t)&v73);
        sub_1DCAEEE2C((uint64_t)&v71);
        sub_1DCAEEE78((uint64_t)v61);
      }
      if ((BYTE8(v64) & 7) != 0)
      {
        v41 = (unsigned int *)(*((_QWORD *)&v64 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v64);
      if (*((_QWORD *)&v63 + 1))
        sub_1DCAEED94(*((uint64_t *)&v63 + 1));
      MEMORY[0x1DF0D10E0](v65);
      v71 = (void **)&v66 + 1;
      sub_1DCB448C4(&v71);
      if ((v66 & 7) != 0)
      {
        v43 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v68);
      v14 += 2;
    }
    while (v14 != v13);
  }
  sub_1DCB8FCC0((uint64_t *)&v80 + 1, (uint64_t)a5);
  sub_1DCB46998((uint64_t *)&v79 + 1, (uint64_t)a6);
  v45 = [MDLAnimatedScalarArray alloc];
  v47 = objc_msgSend_initWithElementCount_(v45, v46, v57);
  v48 = (void *)*((_QWORD *)&v81 + 1);
  *((_QWORD *)&v81 + 1) = v47;

  objc_msgSend_resetWithUsdAttribute_timeScale_(*((void **)&v81 + 1), v49, a4, a7);
  if ((__int128 *)(a1 + 32) != &v78)
    sub_1DCB9AE3C(a1 + 32, (uint64_t *)v78, *((uint64_t **)&v78 + 1), (uint64_t)(*((_QWORD *)&v78 + 1) - v78) >> 5);
  sub_1DCB9AD14((_QWORD *)(a1 + 56), (_QWORD *)&v79 + 1);
  sub_1DCB9AD14((_QWORD *)(a1 + 72), (_QWORD *)&v80 + 1);
  objc_storeStrong((id *)(a1 + 88), *((id *)&v81 + 1));

  sub_1DCAEEE2C((uint64_t)&v80 + 8);
  sub_1DCAEEE2C((uint64_t)&v79 + 8);
  v71 = (void **)&v78;
  sub_1DCB9AC5C(&v71);
LABEL_71:
  sub_1DCAEEE78((uint64_t)v69);
}

void sub_1DCB8F9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_1DCAEEE78((uint64_t)&a47);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB8FB94(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_1DCB9B780(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    sub_1DCB9AC0C((unint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

_DWORD *sub_1DCB8FC30@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  _DWORD *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;

  v4 = (_DWORD *)(a1 + 16);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if ((_DWORD)v5)
  {
    sub_1DCB30114(a2, v4);
    v6 = a2 + 1;
    v7 = (_DWORD *)(a1 + 20);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
    {
      sub_1DCB30114(a2, (_DWORD *)(v8 + 16));
      v7 = (_DWORD *)(v8 + 20);
    }
    else
    {
      v9 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v5);
      sub_1DCB30114(a2, v9);
      v7 = v9 + 1;
    }
    v6 = a2 + 1;
  }
  return sub_1DCB30164(v6, v7);
}

uint64_t *sub_1DCB8FCC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6 = 0;
  sub_1DCB25FE8((uint64_t)&v5, (uint64_t)a1);
  a1[1] = (uint64_t)&off_1EA575EA0;
  sub_1DCB45564(a1, a2);
  if (v6)
    (*(void (**)(uint64_t *))(v6 + 32))(&v5);
  return a1;
}

void sub_1DCB8FD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

void **sub_1DCB8FD8C(void **a1)
{
  void **v3;

  sub_1DCAEEE2C((uint64_t)(a1 + 5));
  sub_1DCAEEE2C((uint64_t)(a1 + 3));
  v3 = a1;
  sub_1DCB9AC5C(&v3);
  return a1;
}

void sub_1DCB8FDD8(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float32x2_t *v23;
  float v24;
  float32x2_t v25;
  float32x2_t v26;
  float v27;
  float32x2_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  float v32;
  float32x2_t v33;
  float32x2_t v34;
  float v35;
  float32x2_t *v36;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = sub_1DCB23B80(*(pxrInternal__aapl__pxrReserved__::VtValue **)(a2 + 8));
  v4 = *(_OWORD *)(v3 + 16);
  v41 = *(_OWORD *)v3;
  v42 = v4;
  v5 = *(_QWORD *)(v3 + 32);
  v43 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*((_QWORD *)&v42 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v38 = v41;
    v39 = v42;
    v40 = v43;
    if (v43)
    {
      v8 = (unint64_t *)(v43 - 16);
      if (*((_QWORD *)&v39 + 1))
        v8 = (unint64_t *)*((_QWORD *)&v39 + 1);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  else
  {
    v38 = v41;
    v39 = v42;
    v40 = 0;
  }
  MEMORY[0x1DF0D1254](&v44, "points");
  v10 = a1[7] & 0xFFFFFFFFFFFFFFF8;
  v11 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
  if ((v44 & 7) != 0)
  {
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  if ((unsigned int *)v10 == v11)
  {
    v13 = sub_1DCB23B80((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    v14 = *(_OWORD *)(v13 + 16);
    v44 = *(_OWORD *)v13;
    v45 = v14;
    v15 = *(_QWORD *)(v13 + 32);
    v46 = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 - 16);
      if (*((_QWORD *)&v45 + 1))
        v16 = (unint64_t *)*((_QWORD *)&v45 + 1);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = a1[2];
    if ((unint64_t)v44 >= v18)
    {
      if (v18)
      {
        v19 = 0;
        v20 = 0;
        do
        {
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 2));
          v21 = *(int *)(a1[6] + 4 * v20);
          if ((unint64_t)v38 > v21)
          {
            sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
            v22 = v40;
            sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v44);
            v23 = (float32x2_t *)(v22 + 12 * (int)v21);
            v24 = v23[1].f32[0];
            v25 = *v23;
            v26 = *(float32x2_t *)(v46 + v19);
            v27 = *(float *)(v46 + v19 + 8);
            sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
            v28 = (float32x2_t *)(v40 + 12 * (int)v21);
            *v28 = vadd_f32(v26, v25);
            v28[1].f32[0] = v27 + v24;
          }
          ++v20;
          v19 += 12;
        }
        while (v20 < a1[2]);
      }
      else if ((_QWORD)v44 && (_QWORD)v38)
      {
        v29 = 0;
        v30 = 1;
        do
        {
          sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          v31 = v40;
          sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v44);
          v32 = *(float *)(v31 + v29 + 8);
          v33 = *(float32x2_t *)(v31 + v29);
          v34 = *(float32x2_t *)(v46 + v29);
          v35 = *(float *)(v46 + v29 + 8);
          sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          v36 = (float32x2_t *)(v40 + v29);
          *v36 = vadd_f32(v34, v33);
          v36[1].f32[0] = v35 + v32;
          if (v30 >= (unint64_t)v44)
            break;
          v29 += 12;
        }
        while (v30++ < (unint64_t)v38);
      }
    }
    sub_1DCAEEE78((uint64_t)&v44);
  }
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = &off_1EA575998;
  sub_1DCB272BC((uint64_t *)&v44, (uint64_t)&v38);
  sub_1DCB25844(a1, &v44);
  sub_1DCAEEFD4(a1 + 2);
  sub_1DCAEEE2C((uint64_t)&v44);
  sub_1DCAEEE78((uint64_t)&v38);
  sub_1DCAEEE78((uint64_t)&v41);
}

void sub_1DCB900C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

uint64_t sub_1DCB9013C(unint64_t *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, unint64_t *a3)
{
  unint64_t v4;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  int v15;
  int *v16;

  v4 = *a1;
  if (!*a1)
    return 0;
  if (*(_QWORD *)this == v4)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      sub_1DCB8A7E0(this);
      v9 = *((_QWORD *)this + 4);
      sub_1DCB8A7E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1);
      v8 |= (*(_QWORD *)(v9 + 8 * v7) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(a1[4] + 8 * v7) & 0xFFFFFFFFFFFFFFF8);
      ++v7;
    }
    while (*(_QWORD *)this > v7);
    if ((v8 & 1) != 0)
    {
      v4 = *a1;
      goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  v15 = 0;
  v16 = &v15;
  sub_1DCB267B0(a3, v4, &v16);
  if (*a1)
  {
    v10 = 0;
    do
    {
      sub_1DCB8A7E0(this);
      v11 = (_QWORD *)*((_QWORD *)this + 4);
      sub_1DCB8A7E0(this);
      v12 = *((_QWORD *)this + 4) + 8 * *(_QWORD *)this;
      sub_1DCB8A7E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1);
      if (v11 != (_QWORD *)v12)
      {
        while ((*v11 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(a1[4] + 8 * v10) & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v11 == (_QWORD *)v12)
          {
            v11 = (_QWORD *)v12;
            break;
          }
        }
      }
      sub_1DCB8A7E0(this);
      if (v11 == (_QWORD *)(*((_QWORD *)this + 4) + 8 * *(_QWORD *)this))
      {
        LODWORD(v13) = -1;
      }
      else
      {
        sub_1DCB8A7E0(this);
        v13 = ((unint64_t)v11 - *((_QWORD *)this + 4)) >> 3;
      }
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
      *(_DWORD *)(a3[4] + 4 * v10++) = v13;
    }
    while (v10 < *a1);
  }
  return 1;
}

void sub_1DCB902C4(void *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  id v11;
  void *__p;
  void *v13;
  uint64_t v14;

  v11 = a1;
  if (*(_QWORD *)a3)
  {
    v4 = 0;
    while (1)
    {
      sub_1DCAF0F78(a3);
      if (*(int *)(*((_QWORD *)a3 + 4) + 4 * v4) >= 1)
        break;
      if ((unint64_t)++v4 >= *(_QWORD *)a3)
        goto LABEL_8;
    }
    v7 = objc_msgSend_elementCount(v11, v5, v6);
    __p = 0;
    v13 = 0;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
    v8 = operator new[]();
    objc_msgSend_getFloatArray_maxCount_(v11, v9, v8, v7);
    v10 = operator new[]();
    MEMORY[0x1DF0D2274](v8, 0x1000C8052888210);
    MEMORY[0x1DF0D2274](v10, 0x1000C8052888210);
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
  }
LABEL_8:

}

void sub_1DCB904E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1DCB90534(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::UsdObject *a4, double *a5, double a6)
{
  uint64_t v10;
  _DWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  pxrInternal__aapl__pxrReserved__::UsdStage *v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  const char *v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unint64_t v40;
  const char *v41;
  unint64_t v42;
  const char *v43;
  unint64_t v44;
  const char *v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unint64_t *v59;
  unint64_t v60;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  const char *v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  __CFString *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  int v86;
  unint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unint64_t v101;
  const char *v102;
  MDLAnimatedScalarArray *v103;
  const char *v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  const char *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  void *v114;
  const char *v115;
  pxrInternal__aapl__pxrReserved__::UsdObject *v116;
  double *v117;
  char v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _OWORD v154[2];
  uint64_t v155;
  _OWORD v156[2];
  uint64_t v157;
  _OWORD v158[2];
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v174 = 0u;
  v175 = 0u;
  v172 = 0u;
  v173 = 0u;
  v159 = 0;
  memset(v158, 0, sizeof(v158));
  v157 = 0;
  memset(v156, 0, sizeof(v156));
  v11 = (_DWORD *)*a3;
  v10 = a3[1];
  v155 = 0;
  memset(v154, 0, sizeof(v154));
  v166 = 0u;
  v167 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  *((_QWORD *)&v161 + 1) = 0;
  *(_QWORD *)&v160 = MEMORY[0x1E0DF3128] + 16;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapesAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v160);
  MEMORY[0x1DF0D0FF0](&v160);
  if (sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v166))
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
  if ((BYTE8(v167) & 7) != 0)
  {
    v12 = (unsigned int *)(*((_QWORD *)&v167 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v167);
  if (*((_QWORD *)&v166 + 1))
    sub_1DCAEED94(*((uint64_t *)&v166 + 1));
  v15 = (_DWORD *)*a3;
  v14 = (_DWORD *)a3[1];
  if (*(_QWORD *)&v154[0] != ((uint64_t)v14 - *a3) >> 3)
  {
    v101 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v101)
    {
      v102 = (const char *)(v101 + 16);
      if (*(char *)(v101 + 39) < 0)
        v102 = *(const char **)v102;
    }
    else
    {
      v102 = "";
    }
    NSLog(CFSTR("Warning: %s: Mismatch blendshape name size and blendshape target size \n"), v102);
    goto LABEL_213;
  }
  if (v15 == v14)
    goto LABEL_187;
  v116 = a4;
  v118 = 0;
  v121 = MEMORY[0x1E0DF3130] + 16;
  v117 = a5;
  do
  {
    v153 = 0;
    sub_1DCB30114(&v153, v15);
    sub_1DCB30164((_DWORD *)&v153 + 1, v15 + 1);
    v151 = 0;
    v150 = 0;
    v152 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2);
    v16 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCB8FB94((uint64_t *)&v160);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v153);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v150 = v121;
    if ((BYTE8(v167) & 7) != 0)
    {
      v17 = (unsigned int *)(*((_QWORD *)&v167 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v167);
    if (*((_QWORD *)&v166 + 1))
      sub_1DCAEED94(*((uint64_t *)&v166 + 1));
    v19 = *((_QWORD *)&v160 + 1);
    if (*((_QWORD *)&v160 + 1))
    {
      v20 = (unsigned int *)(*((_QWORD *)&v160 + 1) + 8);
      do
      {
        v21 = __ldxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    v148 = 0u;
    v149 = 0u;
    sub_1DCB4FB38((uint64_t)&v166, &v151, &v152);
    v23 = (_QWORD *)sub_1DCAEEC08(&v166);
    sub_1DCAEEBA4(&v148, v23);
    if ((BYTE8(v167) & 7) != 0)
    {
      v24 = (unsigned int *)(*((_QWORD *)&v167 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v167);
    if (*((_QWORD *)&v166 + 1))
      sub_1DCAEED94(*((uint64_t *)&v166 + 1));
    if (v151
      && (*(_BYTE *)(v151 + 57) & 8) == 0
      && ((*(uint64_t (**)(uint64_t *))(v150 + 32))(&v150) & 1) != 0)
    {
      v146 = 0u;
      v147 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetOffsetsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)&v150);
      if ((sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146) & 1) != 0)
      {
        v145 = 0;
        v143 = 0u;
        v144 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
        v142 = 0;
        v140 = 0u;
        v141 = 0u;
        v138 = 0u;
        v139 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetPointIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)&v150);
        if (sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v138))
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        *(_QWORD *)&v166 = 0;
        v167 = 0u;
        *((_QWORD *)&v166 + 1) = &off_1EA575998;
        sub_1DCB272BC((uint64_t *)&v166, (uint64_t)&v143);
        v167 = v140;
        v168 = v141;
        *(_QWORD *)&v169 = v142;
        if (v142)
        {
          v26 = (unint64_t *)(v142 - 16);
          if (*((_QWORD *)&v168 + 1))
            v26 = (unint64_t *)*((_QWORD *)&v168 + 1);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        MEMORY[0x1DF0D1254]((char *)&v169 + 8, "points");
        MEMORY[0x1DF0D1254](&v170, "points");
        v28 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
        if (!v28)
          v28 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
        *((_QWORD *)&v170 + 1) = *((_QWORD *)v28 + 77);
        MEMORY[0x1DF0D1254](&v171, "vertex");
        DWORD2(v171) = 1;
        sub_1DCB8FDD8(&v166, a1);
        if (sub_1DCACE514((uint64_t)&v166, (_QWORD *)a1))
        {
          v29 = v149;
          if ((unint64_t)v149 >= *((_QWORD *)&v149 + 1))
          {
            v30 = sub_1DCB9C094((uint64_t *)&v148 + 1, (uint64_t)&v166);
          }
          else
          {
            sub_1DCB27848((uint64_t)&v149 + 8, (_QWORD *)v149, (uint64_t)&v166);
            v30 = v29 + 96;
          }
          *(_QWORD *)&v149 = v30;
          v135 = 0;
          v136 = 0;
          v137 = 0;
          pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetInbetweens((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)&v150);
          v48 = v135;
          v120 = v136;
          if (v135 != v136)
          {
            v119 = 0;
            while (1)
            {
              v133 = 0u;
              v134 = 0u;
              LODWORD(v133) = *(_DWORD *)v48;
              v49 = *(_QWORD *)(v48 + 8);
              *((_QWORD *)&v133 + 1) = v49;
              if (v49)
              {
                v50 = (unint64_t *)(v49 + 48);
                do
                  v51 = __ldxr(v50);
                while (__stxr(v51 + 1, v50));
              }
              sub_1DCB30114(&v134, (_DWORD *)(v48 + 16));
              sub_1DCB30164((_DWORD *)&v134 + 1, (_DWORD *)(v48 + 20));
              v52 = *(_QWORD *)(v48 + 24);
              *((_QWORD *)&v134 + 1) = v52;
              if ((v52 & 7) != 0)
              {
                v53 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
                do
                  v54 = __ldxr(v53);
                while (__stxr(v54 + 2, v53));
                if ((v54 & 1) == 0)
                  *((_QWORD *)&v134 + 1) &= 0xFFFFFFFFFFFFFFF8;
              }
              v131 = 0u;
              v132 = 0u;
              v130 = 0u;
              v128 = v133;
              v129 = *((_QWORD *)&v133 + 1);
              if (*((_QWORD *)&v133 + 1))
              {
                v55 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 48);
                do
                  v56 = __ldxr(v55);
                while (__stxr(v56 + 1, v55));
              }
              sub_1DCB30114(&v130, &v134);
              sub_1DCB30164((_DWORD *)&v130 + 1, (_DWORD *)&v134 + 1);
              *((_QWORD *)&v130 + 1) = *((_QWORD *)&v134 + 1);
              if ((BYTE8(v134) & 7) != 0)
              {
                v57 = (unsigned int *)(*((_QWORD *)&v134 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v58 = __ldxr(v57);
                while (__stxr(v58 + 2, v57));
                if ((v58 & 1) == 0)
                  *((_QWORD *)&v130 + 1) &= 0xFFFFFFFFFFFFFFF8;
              }
              v127 = 0;
              pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetWeight((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)&v128, (float *)&v127);
              v126 = 0;
              v124 = 0u;
              v125 = 0u;
              pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetOffsets();
              v164 = 0u;
              v165 = 0u;
              v162 = 0u;
              v163 = 0u;
              *(_QWORD *)&v160 = 0;
              v161 = 0u;
              *((_QWORD *)&v160 + 1) = &off_1EA575998;
              sub_1DCB272BC((uint64_t *)&v160, (uint64_t)&v124);
              v161 = v140;
              v162 = v141;
              *(_QWORD *)&v163 = v142;
              if (v142)
              {
                v59 = (unint64_t *)(v142 - 16);
                if (*((_QWORD *)&v162 + 1))
                  v59 = (unint64_t *)*((_QWORD *)&v162 + 1);
                do
                  v60 = __ldxr(v59);
                while (__stxr(v60 + 1, v59));
              }
              MEMORY[0x1DF0D1254]((char *)&v163 + 8, "points");
              MEMORY[0x1DF0D1254](&v164, "points");
              v61 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
              if (!v61)
                v61 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
              *((_QWORD *)&v164 + 1) = *((_QWORD *)v61 + 77);
              MEMORY[0x1DF0D1254](&v165, "vertex");
              DWORD2(v165) = 1;
              if ((_QWORD)v124 == (_QWORD)v143)
              {
                sub_1DCB8FDD8(&v160, a1);
                if (sub_1DCACE514((uint64_t)&v160, (_QWORD *)a1))
                {
                  v62 = v132;
                  if ((unint64_t)v132 >= *((_QWORD *)&v132 + 1))
                  {
                    v63 = sub_1DCB9C094((uint64_t *)&v131 + 1, (uint64_t)&v160);
                  }
                  else
                  {
                    sub_1DCB27848((uint64_t)&v132 + 8, (_QWORD *)v132, (uint64_t)&v160);
                    v63 = v62 + 96;
                  }
                  *(_QWORD *)&v132 = v63;
                  v70 = (_QWORD *)sub_1DCAEEC08(&v128);
                  sub_1DCAEEBA4(&v131, v70);
                  v71 = *((_QWORD *)&v172 + 1);
                  if (*((_QWORD *)&v172 + 1) >= (unint64_t)v173)
                  {
                    v72 = sub_1DCB9D09C((uint64_t *)&v172, (uint64_t *)&v131);
                  }
                  else
                  {
                    sub_1DCB9D188((uint64_t)&v173, *((uint64_t **)&v172 + 1), (uint64_t *)&v131);
                    v72 = v71 + 32;
                  }
                  *((_QWORD *)&v172 + 1) = v72;
                  sub_1DCB45AD4((uint64_t)v156, &v127);
                  ++v119;
                  goto LABEL_127;
                }
                v66 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
                if (v66)
                {
                  v65 = (const char *)(v66 + 16);
                  if (*(char *)(v66 + 39) < 0)
                    v65 = *(const char **)v65;
                }
                else
                {
                  v65 = "";
                }
                v73 = *((_QWORD *)&v163 + 1) & 0xFFFFFFFFFFFFFFF8;
                if ((*((_QWORD *)&v163 + 1) & 0xFFFFFFFFFFFFFFF8) == 0)
                {
                  v69 = CFSTR("Warning: %s : Skipping target %s\n");
                  goto LABEL_125;
                }
                v68 = (const char *)(v73 + 16);
                v69 = CFSTR("Warning: %s : Skipping target %s\n");
                if (*(char *)(v73 + 39) < 0)
                  goto LABEL_123;
              }
              else
              {
                v64 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
                if (v64)
                {
                  v65 = (const char *)(v64 + 16);
                  if (*(char *)(v64 + 39) < 0)
                    v65 = *(const char **)v65;
                }
                else
                {
                  v65 = "";
                }
                v67 = *((_QWORD *)&v169 + 1) & 0xFFFFFFFFFFFFFFF8;
                if ((*((_QWORD *)&v169 + 1) & 0xFFFFFFFFFFFFFFF8) == 0)
                {
                  v69 = CFSTR("Warning: %s : Skipping target %s. Mismatch inbetween target offset size and blendshape target offset size.");
LABEL_125:
                  v68 = "";
                  goto LABEL_126;
                }
                v68 = (const char *)(v67 + 16);
                v69 = CFSTR("Warning: %s : Skipping target %s. Mismatch inbetween target offset size and blendshape target offset size.");
                if (*(char *)(v67 + 39) < 0)
LABEL_123:
                  v68 = *(const char **)v68;
              }
LABEL_126:
              NSLog(&v69->isa, v65, v68);
LABEL_127:
              if ((v165 & 7) != 0)
              {
                v74 = (unsigned int *)(v165 & 0xFFFFFFFFFFFFFFF8);
                do
                  v75 = __ldxr(v74);
                while (__stlxr(v75 - 2, v74));
              }
              if ((v164 & 7) != 0)
              {
                v76 = (unsigned int *)(v164 & 0xFFFFFFFFFFFFFFF8);
                do
                  v77 = __ldxr(v76);
                while (__stlxr(v77 - 2, v76));
              }
              if ((BYTE8(v163) & 7) != 0)
              {
                v78 = (unsigned int *)(*((_QWORD *)&v163 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v79 = __ldxr(v78);
                while (__stlxr(v79 - 2, v78));
              }
              sub_1DCAEEE78((uint64_t)&v161);
              sub_1DCAEEE2C((uint64_t)&v160);
              sub_1DCAEEE78((uint64_t)&v124);
              if ((BYTE8(v130) & 7) != 0)
              {
                v80 = (unsigned int *)(*((_QWORD *)&v130 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v81 = __ldxr(v80);
                while (__stlxr(v81 - 2, v80));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_1DCAEEC34((uint64_t)&v130);
              if (v129)
                sub_1DCAEED94(v129);
              *(_QWORD *)&v160 = (char *)&v131 + 8;
              sub_1DCB448C4((void ***)&v160);
              if ((v131 & 7) != 0)
              {
                v82 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
                do
                  v83 = __ldxr(v82);
                while (__stlxr(v83 - 2, v82));
              }
              if ((BYTE8(v134) & 7) != 0)
              {
                v84 = (unsigned int *)(*((_QWORD *)&v134 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v85 = __ldxr(v84);
                while (__stlxr(v85 - 2, v84));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_1DCAEEC34((uint64_t)&v134);
              if (*((_QWORD *)&v133 + 1))
                sub_1DCAEED94(*((uint64_t *)&v133 + 1));
              v48 += 32;
              if (v48 == v120)
              {
                v118 = 1;
                v86 = v119;
                goto LABEL_158;
              }
            }
          }
          v86 = 0;
LABEL_158:
          v89 = *((_QWORD *)&v172 + 1);
          a5 = v117;
          if (*((_QWORD *)&v172 + 1) >= (unint64_t)v173)
          {
            v90 = sub_1DCB9D09C((uint64_t *)&v172, (uint64_t *)&v148);
          }
          else
          {
            sub_1DCB9D188((uint64_t)&v173, *((uint64_t **)&v172 + 1), (uint64_t *)&v148);
            v90 = v89 + 32;
          }
          *((_QWORD *)&v172 + 1) = v90;
          LODWORD(v160) = 1065353216;
          sub_1DCB4FC54((uint64_t)v156, &v160);
          LODWORD(v160) = v86 + 1;
          sub_1DCB9D224((uint64_t)v158, &v160);
          *(_QWORD *)&v160 = &v135;
          sub_1DCB9CFB4((void ***)&v160);
        }
        else
        {
          v42 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
          if (v42)
          {
            v43 = (const char *)(v42 + 16);
            if (*(char *)(v42 + 39) < 0)
              v43 = *(const char **)v43;
          }
          else
          {
            v43 = "";
          }
          v87 = *((_QWORD *)&v169 + 1) & 0xFFFFFFFFFFFFFFF8;
          if ((*((_QWORD *)&v169 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v88 = (const char *)(v87 + 16);
            if (*(char *)(v87 + 39) < 0)
              v88 = *(const char **)v88;
          }
          else
          {
            v88 = "";
          }
          NSLog(CFSTR("Warning: %s : Skipping target %s\n"), v43, v88);
        }
        if ((v171 & 7) != 0)
        {
          v91 = (unsigned int *)(v171 & 0xFFFFFFFFFFFFFFF8);
          do
            v92 = __ldxr(v91);
          while (__stlxr(v92 - 2, v91));
        }
        if ((v170 & 7) != 0)
        {
          v93 = (unsigned int *)(v170 & 0xFFFFFFFFFFFFFFF8);
          do
            v94 = __ldxr(v93);
          while (__stlxr(v94 - 2, v93));
        }
        if ((BYTE8(v169) & 7) != 0)
        {
          v95 = (unsigned int *)(*((_QWORD *)&v169 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v96 = __ldxr(v95);
          while (__stlxr(v96 - 2, v95));
        }
        sub_1DCAEEE78((uint64_t)&v167);
        sub_1DCAEEE2C((uint64_t)&v166);
        if ((BYTE8(v139) & 7) != 0)
        {
          v97 = (unsigned int *)(*((_QWORD *)&v139 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v98 = __ldxr(v97);
          while (__stlxr(v98 - 2, v97));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v139);
        if (*((_QWORD *)&v138 + 1))
          sub_1DCAEED94(*((uint64_t *)&v138 + 1));
        sub_1DCAEEE78((uint64_t)&v140);
        sub_1DCAEEE78((uint64_t)&v143);
      }
      else
      {
        v40 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
        if (v40)
        {
          v41 = (const char *)(v40 + 16);
          if (*(char *)(v40 + 39) < 0)
            v41 = *(const char **)v41;
        }
        else
        {
          v41 = "";
        }
        sub_1DCB4FB38((uint64_t)&v166, &v151, &v152);
        v44 = *(_QWORD *)sub_1DCAEEC08(&v166) & 0xFFFFFFFFFFFFFFF8;
        if (v44)
        {
          v45 = (const char *)(v44 + 16);
          if (*(char *)(v44 + 39) < 0)
            v45 = *(const char **)v45;
        }
        else
        {
          v45 = "";
        }
        NSLog(CFSTR("Warning: %s : Skipping target %s\n"), v41, v45);
        if ((BYTE8(v167) & 7) != 0)
        {
          v46 = (unsigned int *)(*((_QWORD *)&v167 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v47 = __ldxr(v46);
          while (__stlxr(v47 - 2, v46));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v167);
        if (*((_QWORD *)&v166 + 1))
          sub_1DCAEED94(*((uint64_t *)&v166 + 1));
      }
      if ((BYTE8(v147) & 7) != 0)
      {
        v99 = (unsigned int *)(*((_QWORD *)&v147 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v100 = __ldxr(v99);
        while (__stlxr(v100 - 2, v99));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v147);
      v37 = *((_QWORD *)&v146 + 1);
      if (*((_QWORD *)&v146 + 1))
LABEL_53:
        sub_1DCAEED94(v37);
    }
    else
    {
      v31 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
      if (v31)
      {
        v32 = (const char *)(v31 + 16);
        if (*(char *)(v31 + 39) < 0)
          v32 = *(const char **)v32;
      }
      else
      {
        v32 = "";
      }
      sub_1DCB4FB38((uint64_t)&v166, &v151, &v152);
      v33 = *(_QWORD *)sub_1DCAEEC08(&v166) & 0xFFFFFFFFFFFFFFF8;
      if (v33)
      {
        v34 = (const char *)(v33 + 16);
        if (*(char *)(v33 + 39) < 0)
          v34 = *(const char **)v34;
      }
      else
      {
        v34 = "";
      }
      NSLog(CFSTR("Warning: %s : Skipping target %s\n"), v32, v34);
      if ((BYTE8(v167) & 7) != 0)
      {
        v35 = (unsigned int *)(*((_QWORD *)&v167 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v167);
      v37 = *((_QWORD *)&v166 + 1);
      if (*((_QWORD *)&v166 + 1))
        goto LABEL_53;
    }
    *(_QWORD *)&v166 = (char *)&v148 + 8;
    sub_1DCB448C4((void ***)&v166);
    if ((v148 & 7) != 0)
    {
      v38 = (unsigned int *)(v148 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stlxr(v39 - 2, v38));
    }
    MEMORY[0x1DF0D0FFC](&v150);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v153);
    v15 += 2;
  }
  while (v15 != v14);
  a4 = v116;
  if ((v118 & 1) != 0)
  {
    sub_1DCB8FCC0((uint64_t *)&v174 + 1, (uint64_t)v158);
    sub_1DCB46998((uint64_t *)&v173 + 1, (uint64_t)v156);
    goto LABEL_188;
  }
LABEL_187:
  *(_QWORD *)&v168 = 0;
  v166 = 0u;
  v167 = 0u;
  sub_1DCB8FCC0((uint64_t *)&v174 + 1, (uint64_t)&v166);
  sub_1DCAEEE78((uint64_t)&v166);
  *(_QWORD *)&v168 = 0;
  v166 = 0u;
  v167 = 0u;
  sub_1DCB46998((uint64_t *)&v173 + 1, (uint64_t)&v166);
  sub_1DCAEEE78((uint64_t)&v166);
LABEL_188:
  v103 = [MDLAnimatedScalarArray alloc];
  v105 = objc_msgSend_initWithElementCount_(v103, v104, (v10 - (uint64_t)v11) >> 3);
  v106 = (void *)*((_QWORD *)&v175 + 1);
  *((_QWORD *)&v175 + 1) = v105;

  if (sub_1DCB4F88C(a4))
  {
    v124 = 0uLL;
    *(_QWORD *)&v125 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(_QWORD *)&v124 = MEMORY[0x1E0DF3110] + 16;
    v143 = 0u;
    v144 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetBlendShapesAttr((pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)&v124);
    v140 = 0u;
    v141 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetBlendShapeWeightsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)&v124);
    if (sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v143)
      && sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v140))
    {
      *(_QWORD *)&v168 = 0;
      v166 = 0u;
      v167 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
      *(_QWORD *)&v162 = 0;
      v160 = 0u;
      v161 = 0u;
      if (sub_1DCB9013C((unint64_t *)v154, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v166, (unint64_t *)&v160))sub_1DCB902C4(*((void **)&v175 + 1), (uint64_t)&v140, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v160);
      else
        objc_msgSend_resetWithUsdAttribute_timeScale_(*((void **)&v175 + 1), v109, (uint64_t)&v140, a6);
      sub_1DCAEEE78((uint64_t)&v160);
      sub_1DCB8A720(&v166);
    }
    if ((BYTE8(v141) & 7) != 0)
    {
      v110 = (unsigned int *)(*((_QWORD *)&v141 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v111 = __ldxr(v110);
      while (__stlxr(v111 - 2, v110));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v141);
    if (*((_QWORD *)&v140 + 1))
      sub_1DCAEED94(*((uint64_t *)&v140 + 1));
    if ((BYTE8(v144) & 7) != 0)
    {
      v112 = (unsigned int *)(*((_QWORD *)&v144 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v113 = __ldxr(v112);
      while (__stlxr(v113 - 2, v112));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v144);
    if (*((_QWORD *)&v143 + 1))
      sub_1DCAEED94(*((uint64_t *)&v143 + 1));
    MEMORY[0x1DF0D0F6C](&v124);
  }
  if (!objc_msgSend_timeSampleCount(*((void **)&v175 + 1), v107, v108))
  {
    v114 = (void *)operator new[]();
    bzero(v114, (v10 - (uint64_t)v11) >> 1);
    objc_msgSend_setFloatArray_count_atTime_(*((void **)&v175 + 1), v115, (uint64_t)v114, (v10 - (uint64_t)v11) >> 3, *a5);
  }
  if ((__int128 *)(a1 + 32) != &v172)
    sub_1DCB9AE3C(a1 + 32, (uint64_t *)v172, *((uint64_t **)&v172 + 1), (uint64_t)(*((_QWORD *)&v172 + 1) - v172) >> 5);
  sub_1DCB9AD14((_QWORD *)(a1 + 56), (_QWORD *)&v173 + 1);
  sub_1DCB9AD14((_QWORD *)(a1 + 72), (_QWORD *)&v174 + 1);
  objc_storeStrong((id *)(a1 + 88), *((id *)&v175 + 1));
LABEL_213:
  sub_1DCB8A720(v154);
  sub_1DCAEEE78((uint64_t)v156);
  sub_1DCAEEE78((uint64_t)v158);

  sub_1DCAEEE2C((uint64_t)&v174 + 8);
  sub_1DCAEEE2C((uint64_t)&v173 + 8);
  *(_QWORD *)&v166 = &v172;
  sub_1DCB9AC5C((void ***)&v166);
}

void sub_1DCB91628(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1DCAE4C58(a1);
}

uint64_t sub_1DCB91A48(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_1DCAEED94(v5);
  return a1;
}

uint64_t sub_1DCB91AA8(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *a1)
{
  unsigned int *v1;
  unsigned int v2;
  pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *v4;
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  _QWORD v13[3];
  __int128 v14;
  __int128 v15;
  _QWORD v16[3];

  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI() & 1) != 0)
  {
    memset(v12, 0, sizeof(v12));
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(_QWORD *)&v12[0] = MEMORY[0x1E0DF3128] + 16;
    v10 = 0u;
    v11 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapeTargetsRel((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v12);
    if (sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v10))
    {
      v8 = 0uLL;
      *(_QWORD *)&v9 = 0;
      pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets();
      *(_QWORD *)&v7 = &v8;
      sub_1DCB9B6D0((void ***)&v7);
    }
    if ((BYTE8(v11) & 7) != 0)
    {
      v1 = (unsigned int *)(*((_QWORD *)&v11 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v2 = __ldxr(v1);
      while (__stlxr(v2 - 2, v1));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v11);
    if (*((_QWORD *)&v10 + 1))
      sub_1DCAEED94(*((uint64_t *)&v10 + 1));
    return MEMORY[0x1DF0D0FF0](v12);
  }
  else
  {
    v16[1] = 0;
    v16[2] = 0;
    v4 = (pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v16[0] = MEMORY[0x1E0DF3150] + 16;
    v14 = 0u;
    v15 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetMorphTargetBlendShapesRel(v4);
    memset(v13, 0, sizeof(v13));
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets();
    *(_QWORD *)&v12[0] = v13;
    sub_1DCB9B6D0((void ***)v12);
    if ((BYTE8(v15) & 7) != 0)
    {
      v5 = (unsigned int *)(*((_QWORD *)&v15 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v15);
    if (*((_QWORD *)&v14 + 1))
      sub_1DCAEED94(*((uint64_t *)&v14 + 1));
    return MEMORY[0x1DF0D1140](v16);
  }
}

uint64_t sub_1DCB92124(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_1DCAEED94(v5);
  return a1;
}

uint64_t sub_1DCB92184(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int ElementSize;
  int v5;
  int v6;
  uint64_t NumElements;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  __int128 *v9;
  unint64_t *v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  uint64_t v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  unint64_t *v16;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v17;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::TfToken *v21;
  uint64_t EmptyString;
  __CFString *v23;
  pxrInternal__aapl__pxrReserved__::TfToken *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  float64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  pxrInternal__aapl__pxrReserved__::VtValue *v56;
  __int128 *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  float64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  pxrInternal__aapl__pxrReserved__::VtValue *v70;
  __int128 *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  pxrInternal__aapl__pxrReserved__::VtValue *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v84;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v85;
  pxrInternal__aapl__pxrReserved__::TfToken *v86;
  uint64_t v87;
  pxrInternal__aapl__pxrReserved__::TfToken *v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t result;
  _QWORD v93[3];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _QWORD v120[2];
  float64x2_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v116 = 0u;
  v117 = 0u;
  LODWORD(v116) = 4;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_QWORD *)&v117 + 1) = 0;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v110 = 0u;
  v111 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v112 = 0;
  *(_QWORD *)&v110 = MEMORY[0x1E0DF3128] + 16;
  v109 = 0;
  v107 = 0u;
  v108 = 0u;
  v106 = 0;
  v104 = 0u;
  v105 = 0u;
  v102 = 0u;
  v103 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v110);
  v101 = 0u;
  v99 = 0u;
  v100 = 0u;
  MEMORY[0x1DF0D0E4C](&v99, &v102);
  ElementSize = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v99);
  v93[0] = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v99);
  v97 = 0u;
  v98 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointWeightsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v110);
  v95 = 0u;
  v96 = 0u;
  v94 = 0u;
  MEMORY[0x1DF0D0E4C](&v94, &v97);
  v5 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v94);
  v120[0] = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v94);
  v6 = 1;
  if (ElementSize >= 1 && ElementSize == v5)
  {
    v118 = 0uLL;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
    if (!pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)&v118)
      || !(_QWORD)v104
      || (NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)&v118),
          NumElements != (_QWORD)v104))
    {
      sub_1DCAEEE2C((uint64_t)&v118);
      goto LABEL_70;
    }
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_1DCB93624((pxrInternal__aapl__pxrReserved__::VtValue *)&v118);
    v9 = (__int128 *)sub_1DCB4370C(v8);
    sub_1DCB936AC((uint64_t)&v107, v9);
    v10 = (unint64_t *)MEMORY[0x1E0DF24F8];
    v11 = atomic_load(MEMORY[0x1E0DF24F8]);
    if (!v11)
      v11 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
    if ((v93[0] & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v11 + 1224) & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_15;
    v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(v10);
    if (!v12)
      v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
    if ((v93[0] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v12 + 17) & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_15:
      v14 = atomic_load(v10);
      if (!v14)
        v14 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
      if ((v120[0] & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v14 + 1224) & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_23;
      v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(v10);
      if (!v15)
        v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
      if ((v120[0] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 17) & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_23:
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v121.f64[0] = 0.0;
        v122 = 0u;
        *(_QWORD *)&v121.f64[1] = &off_1EA575F58;
        sub_1DCB45564((uint64_t *)&v121, (uint64_t)&v107);
        *(_QWORD *)&v124 = 0;
        v122 = 0u;
        v123 = 0u;
        MEMORY[0x1DF0D1254]((char *)&v124 + 8, "jointIndices");
        MEMORY[0x1DF0D1254](&v125, "jointIndices");
        v16 = (unint64_t *)MEMORY[0x1E0DF2618];
        v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
        if (!v17)
          v17 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
        *((_QWORD *)&v125 + 1) = *((_QWORD *)v17 + 59);
        *(_QWORD *)&v126 = v93[0];
        DWORD2(v126) = ElementSize;
        v133 = 0u;
        v134 = 0u;
        v131 = 0u;
        v132 = 0u;
        *(_QWORD *)&v129 = 0;
        v130 = 0u;
        *((_QWORD *)&v129 + 1) = &off_1EA575D30;
        sub_1DCB46DC8((uint64_t *)&v129, (uint64_t)&v104);
        *(_QWORD *)&v132 = 0;
        v130 = 0u;
        v131 = 0u;
        MEMORY[0x1DF0D1254]((char *)&v132 + 8, "jointWeights");
        MEMORY[0x1DF0D1254](&v133, "jointWeights");
        v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v16);
        if (!v18)
          v18 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
        *((_QWORD *)&v133 + 1) = *((_QWORD *)v18 + 64);
        *(_QWORD *)&v134 = v120[0];
        if ((v120[0] & 7) != 0)
        {
          v19 = (unsigned int *)(v120[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 2, v19));
          if ((v20 & 1) == 0)
            *(_QWORD *)&v134 = v134 & 0xFFFFFFFFFFFFFFF8;
        }
        DWORD2(v134) = ElementSize;
        sub_1DCACA6EC((uint64_t)&v121, a3);
        sub_1DCACA6EC((uint64_t)&v129, a3);
        v21 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_1DCACE514((uint64_t)&v121, a3);
        if ((_DWORD)v21
          && (v21 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_1DCACE514((uint64_t)&v129, a3), (_DWORD)v21))
        {
          sub_1DCB8DAC0(a3 + 1, (uint64_t)&v121);
          sub_1DCB8DAC0(a3 + 1, (uint64_t)&v129);
        }
        else
        {
          if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v21);
          if (*(char *)(EmptyString + 23) < 0)
            EmptyString = *(_QWORD *)EmptyString;
          NSLog(CFSTR("Warning: %s : Skipping joint indices\n"), EmptyString);
          if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
            v25 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v25 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v24);
          if (*(char *)(v25 + 23) < 0)
            v25 = *(_QWORD *)v25;
          NSLog(CFSTR("Warning: %s : Skipping joint weights\n"), v25);
        }
        if ((v134 & 7) != 0)
        {
          v26 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
          do
            v27 = __ldxr(v26);
          while (__stlxr(v27 - 2, v26));
        }
        if ((v133 & 7) != 0)
        {
          v28 = (unsigned int *)(v133 & 0xFFFFFFFFFFFFFFF8);
          do
            v29 = __ldxr(v28);
          while (__stlxr(v29 - 2, v28));
        }
        if ((BYTE8(v132) & 7) != 0)
        {
          v30 = (unsigned int *)(*((_QWORD *)&v132 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v31 = __ldxr(v30);
          while (__stlxr(v31 - 2, v30));
        }
        sub_1DCAEEE78((uint64_t)&v130);
        sub_1DCAEEE2C((uint64_t)&v129);
        if ((v126 & 7) != 0)
        {
          v32 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        if ((v125 & 7) != 0)
        {
          v34 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
          do
            v35 = __ldxr(v34);
          while (__stlxr(v35 - 2, v34));
        }
        if ((BYTE8(v124) & 7) != 0)
        {
          v36 = (unsigned int *)(*((_QWORD *)&v124 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v37 = __ldxr(v36);
          while (__stlxr(v37 - 2, v36));
        }
        sub_1DCAEEE78((uint64_t)&v122);
        sub_1DCAEEE2C((uint64_t)&v121);
        goto LABEL_69;
      }
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
        v13 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
      v23 = CFSTR("Warning: %s : Invalid joint weights interpolation. Skipping joint indices\n");
      if ((*(char *)(v13 + 23) & 0x80000000) == 0)
      {
LABEL_40:
        NSLog(&v23->isa, v13);
LABEL_69:
        sub_1DCAEEE2C((uint64_t)&v118);
        v6 = 0;
        goto LABEL_70;
      }
    }
    else
    {
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
        v13 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      v23 = CFSTR("Warning: %s : Invalid joint indices interpolation. Skipping joint indices\n");
      if ((*(char *)(v13 + 23) & 0x80000000) == 0)
        goto LABEL_40;
    }
    v13 = *(_QWORD *)v13;
    goto LABEL_40;
  }
LABEL_70:
  if ((v120[0] & 7) != 0)
  {
    v38 = (unsigned int *)(v120[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  if ((v96 & 7) != 0)
  {
    v40 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  if ((BYTE8(v95) & 7) != 0)
  {
    v42 = (unsigned int *)(*((_QWORD *)&v95 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v95);
  if (*((_QWORD *)&v94 + 1))
    sub_1DCAEED94(*((uint64_t *)&v94 + 1));
  if ((BYTE8(v98) & 7) != 0)
  {
    v44 = (unsigned int *)(*((_QWORD *)&v98 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v98);
  if (*((_QWORD *)&v97 + 1))
    sub_1DCAEED94(*((uint64_t *)&v97 + 1));
  if ((v101 & 7) != 0)
  {
    v46 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v47 = __ldxr(v46);
    while (__stlxr(v47 - 2, v46));
  }
  if ((BYTE8(v100) & 7) != 0)
  {
    v48 = (unsigned int *)(*((_QWORD *)&v100 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v100);
  if (*((_QWORD *)&v99 + 1))
    sub_1DCAEED94(*((uint64_t *)&v99 + 1));
  if ((BYTE8(v103) & 7) != 0)
  {
    v50 = (unsigned int *)(*((_QWORD *)&v103 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stlxr(v51 - 2, v50));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v103);
  if (*((_QWORD *)&v102 + 1))
    sub_1DCAEED94(*((uint64_t *)&v102 + 1));
  sub_1DCAEEE78((uint64_t)&v104);
  sub_1DCAEEE78((uint64_t)&v107);
  if (v6)
  {
    *(_QWORD *)&v101 = 0;
    v99 = 0u;
    v100 = 0u;
    *(_QWORD *)&v96 = 0;
    v94 = 0u;
    v95 = 0u;
    v93[1] = 0;
    v93[2] = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v93[0] = MEMORY[0x1E0DF3150] + 16;
    pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinTargetJointsRel((pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *)v93);
    LODWORD(v116) = LODWORD(v121.f64[0]);
    v52 = v121.f64[1];
    v121.f64[1] = 0.0;
    v53 = *((_QWORD *)&v116 + 1);
    *((float64_t *)&v116 + 1) = v52;
    if (v53)
      sub_1DCAEED94(v53);
    sub_1DCB4FA2C((uint64_t)&v117, (int *)&v122);
    sub_1DCB4FA80((uint64_t)&v117 + 4);
    if ((BYTE8(v117) & 7) != 0)
    {
      v54 = (unsigned int *)(*((_QWORD *)&v117 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v55 = __ldxr(v54);
      while (__stlxr(v55 - 2, v54));
    }
    *((_QWORD *)&v117 + 1) = *((_QWORD *)&v122 + 1);
    *((_QWORD *)&v122 + 1) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v122);
    if (*(_QWORD *)&v121.f64[1])
      sub_1DCAEED94(*(uint64_t *)&v121.f64[1]);
    if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets() && v113 != v114)
    {
      v107 = 0u;
      v108 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinJointIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *)v93);
      v118 = 0uLL;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
      v56 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_1DCB93624((pxrInternal__aapl__pxrReserved__::VtValue *)&v118);
      v57 = (__int128 *)sub_1DCB4370C(v56);
      sub_1DCB936AC((uint64_t)&v99, v57);
      v104 = 0u;
      v105 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinJointWeightsAttr((pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *)v93);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
      v102 = 0u;
      v103 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinBindTransformsAttr((pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *)v93);
      *(_QWORD *)&v131 = 0;
      v129 = 0u;
      v130 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>();
      v97 = 0u;
      v98 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinMeshBindTransformAttr((pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *)v93);
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v121 = 0u;
      v122 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
      sub_1DCB8F1BC((uint64_t)a3, &v113, &v121, &v129);
      if ((BYTE8(v98) & 7) != 0)
      {
        v58 = (unsigned int *)(*((_QWORD *)&v98 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stlxr(v59 - 2, v58));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v98);
      if (*((_QWORD *)&v97 + 1))
        sub_1DCAEED94(*((uint64_t *)&v97 + 1));
      sub_1DCAEEE78((uint64_t)&v129);
      if ((BYTE8(v103) & 7) != 0)
      {
        v60 = (unsigned int *)(*((_QWORD *)&v103 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v103);
      if (*((_QWORD *)&v102 + 1))
        sub_1DCAEED94(*((uint64_t *)&v102 + 1));
      if ((BYTE8(v105) & 7) != 0)
      {
        v62 = (unsigned int *)(*((_QWORD *)&v105 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v105);
      if (*((_QWORD *)&v104 + 1))
        sub_1DCAEED94(*((uint64_t *)&v104 + 1));
      sub_1DCAEEE2C((uint64_t)&v118);
      if ((BYTE8(v108) & 7) != 0)
      {
        v64 = (unsigned int *)(*((_QWORD *)&v108 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v108);
      if (*((_QWORD *)&v107 + 1))
        sub_1DCAEED94(*((uint64_t *)&v107 + 1));
    }
    v107 = 0u;
    v108 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *((_QWORD *)&v108 + 1) = 0;
    *(_QWORD *)&v107 = MEMORY[0x1E0DF3160] + 16;
    pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinTargetJointsRel((pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *)&v107);
    LODWORD(v116) = LODWORD(v121.f64[0]);
    v66 = v121.f64[1];
    v121.f64[1] = 0.0;
    v67 = *((_QWORD *)&v116 + 1);
    *((float64_t *)&v116 + 1) = v66;
    if (v67)
      sub_1DCAEED94(v67);
    sub_1DCB4FA2C((uint64_t)&v117, (int *)&v122);
    sub_1DCB4FA80((uint64_t)&v117 + 4);
    if ((BYTE8(v117) & 7) != 0)
    {
      v68 = (unsigned int *)(*((_QWORD *)&v117 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v69 = __ldxr(v68);
      while (__stlxr(v69 - 2, v68));
    }
    *((_QWORD *)&v117 + 1) = *((_QWORD *)&v122 + 1);
    *((_QWORD *)&v122 + 1) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v122);
    if (*(_QWORD *)&v121.f64[1])
      sub_1DCAEED94(*(uint64_t *)&v121.f64[1]);
    if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets() && v113 != v114)
    {
      v104 = 0u;
      v105 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinJointIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *)&v107);
      v120[0] = 0;
      v120[1] = 0;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
      v70 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_1DCB93624((pxrInternal__aapl__pxrReserved__::VtValue *)v120);
      v71 = (__int128 *)sub_1DCB4370C(v70);
      sub_1DCB936AC((uint64_t)&v99, v71);
      v102 = 0u;
      v103 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinJointWeightsAttr((pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *)&v107);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
      v97 = 0u;
      v98 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinBindTransformsAttr((pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *)&v107);
      *(_QWORD *)&v131 = 0;
      v129 = 0u;
      v130 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>();
      v118 = 0u;
      v119 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinMeshBindTransformAttr((pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *)&v107);
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v121 = 0u;
      v122 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
      sub_1DCB8F1BC((uint64_t)a3, &v113, &v121, &v129);
      if ((BYTE8(v119) & 7) != 0)
      {
        v72 = (unsigned int *)(*((_QWORD *)&v119 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v119);
      if (*((_QWORD *)&v118 + 1))
        sub_1DCAEED94(*((uint64_t *)&v118 + 1));
      sub_1DCAEEE78((uint64_t)&v129);
      if ((BYTE8(v98) & 7) != 0)
      {
        v74 = (unsigned int *)(*((_QWORD *)&v98 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v98);
      if (*((_QWORD *)&v97 + 1))
        sub_1DCAEED94(*((uint64_t *)&v97 + 1));
      if ((BYTE8(v103) & 7) != 0)
      {
        v76 = (unsigned int *)(*((_QWORD *)&v103 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v103);
      if (*((_QWORD *)&v102 + 1))
        sub_1DCAEED94(*((uint64_t *)&v102 + 1));
      sub_1DCAEEE2C((uint64_t)v120);
      if ((BYTE8(v105) & 7) != 0)
      {
        v78 = (unsigned int *)(*((_QWORD *)&v105 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v105);
      if (*((_QWORD *)&v104 + 1))
        sub_1DCAEED94(*((uint64_t *)&v104 + 1));
    }
    if ((_QWORD)v99)
    {
      if ((_QWORD)v94)
      {
        if ((_QWORD)v99 == (_QWORD)v94)
        {
          v80 = (pxrInternal__aapl__pxrReserved__::VtValue *)a3[1];
          if ((pxrInternal__aapl__pxrReserved__::VtValue *)a3[2] != v80)
          {
            if (*((_QWORD *)v80 + 1))
            {
              v81 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(v80);
              v82 = (unint64_t)v99 / v81;
              if ((unint64_t)v99 / v81 * v81 == (_QWORD)v99)
              {
                v125 = 0u;
                v126 = 0u;
                v123 = 0u;
                v124 = 0u;
                v121.f64[0] = 0.0;
                v122 = 0u;
                *(_QWORD *)&v121.f64[1] = &off_1EA575F58;
                sub_1DCB45564((uint64_t *)&v121, (uint64_t)&v99);
                *(_QWORD *)&v124 = 0;
                v122 = 0u;
                v123 = 0u;
                MEMORY[0x1DF0D1254]((char *)&v124 + 8, "jointIndices");
                MEMORY[0x1DF0D1254](&v125, "jointIndices");
                v83 = (unint64_t *)MEMORY[0x1E0DF2618];
                v84 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
                if (!v84)
                  v84 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
                *((_QWORD *)&v125 + 1) = *((_QWORD *)v84 + 59);
                MEMORY[0x1DF0D1254](&v126, "vertex");
                DWORD2(v126) = v82;
                v133 = 0u;
                v134 = 0u;
                v131 = 0u;
                v132 = 0u;
                *(_QWORD *)&v129 = 0;
                v130 = 0u;
                *((_QWORD *)&v129 + 1) = &off_1EA575D30;
                sub_1DCB46DC8((uint64_t *)&v129, (uint64_t)&v94);
                *(_QWORD *)&v132 = 0;
                v130 = 0u;
                v131 = 0u;
                MEMORY[0x1DF0D1254]((char *)&v132 + 8, "jointWeights");
                MEMORY[0x1DF0D1254](&v133, "jointWeights");
                v85 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v83);
                if (!v85)
                  v85 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
                *((_QWORD *)&v133 + 1) = *((_QWORD *)v85 + 64);
                MEMORY[0x1DF0D1254](&v134, "vertex");
                DWORD2(v134) = v82;
                v86 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_1DCACE514((uint64_t)&v121, a3);
                if ((_DWORD)v86
                  && (v86 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_1DCACE514((uint64_t)&v129, a3), (_DWORD)v86))
                {
                  sub_1DCB8DAC0(a3 + 1, (uint64_t)&v121);
                  sub_1DCB8DAC0(a3 + 1, (uint64_t)&v129);
                }
                else
                {
                  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
                    v87 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
                  else
                    v87 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v86);
                  if (*(char *)(v87 + 23) < 0)
                    v87 = *(_QWORD *)v87;
                  NSLog(CFSTR("Warning: %s : Skipping joint indices\n"), v87);
                  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
                    v89 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
                  else
                    v89 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v88);
                  if (*(char *)(v89 + 23) < 0)
                    v89 = *(_QWORD *)v89;
                  NSLog(CFSTR("Warning: %s : Skipping joint weights\n"), v89);
                }
                sub_1DCB245BC(&v129);
                sub_1DCB245BC(&v121);
              }
            }
          }
        }
      }
    }
    MEMORY[0x1DF0D117C](&v107);
    MEMORY[0x1DF0D1140](v93);
    sub_1DCAEEE78((uint64_t)&v94);
    sub_1DCAEEE78((uint64_t)&v99);
  }
  MEMORY[0x1DF0D0FF0](&v110);
  *(_QWORD *)&v121.f64[0] = &v113;
  sub_1DCB9B6D0((void ***)&v121);
  if ((BYTE8(v117) & 7) != 0)
  {
    v90 = (unsigned int *)(*((_QWORD *)&v117 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v117);
  result = *((_QWORD *)&v116 + 1);
  if (*((_QWORD *)&v116 + 1))
    return sub_1DCAEED94(*((uint64_t *)&v116 + 1));
  return result;
}

void sub_1DCB931BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a65;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;

  v68 = *(_QWORD *)(v66 - 144);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *(_QWORD *)(v66 - 152);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  sub_1DCAEEE78(v65);
  sub_1DCAEEE2C(v66 - 208);
  sub_1DCB245BC(&a65);
  sub_1DCAEEE2C((uint64_t)&a59);
  if ((a63 & 7) != 0)
  {
    v74 = (unsigned int *)(a63 & 0xFFFFFFFFFFFFFFF8);
    do
      v75 = __ldxr(v74);
    while (__stlxr(v75 - 2, v74));
  }
  sub_1DCB2FE14(&a15);
  sub_1DCAEEA6C((uint64_t)&a21);
  if ((a12 & 7) != 0)
  {
    v76 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v77 = __ldxr(v76);
    while (__stlxr(v77 - 2, v76));
  }
  sub_1DCB2FE14(&a25);
  sub_1DCAEEA6C((uint64_t)&a31);
  sub_1DCAEEE78((uint64_t)&a35);
  sub_1DCAEEE78((uint64_t)&a41);
  MEMORY[0x1DF0D0FF0](&a47);
  a65 = (void **)&a52;
  sub_1DCB9B6D0(&a65);
  sub_1DCB92124((uint64_t)&a55);
  _Unwind_Resume(a1);
}

std::type_info *sub_1DCB93624(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCB4635C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573C30, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_1DCB936AC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_1DCAEEE78(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_1DCAEEE78((uint64_t)&v9);
  }
  return a1;
}

void sub_1DCB93748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB93764(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 13)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573A88);
  else
    return 0;
}

uint64_t sub_1DCB9379C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_1DCB93764(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

void sub_1DCB93804(pxrInternal__aapl__pxrReserved__::UsdShadeShader *a1, void *a2, uint64_t **a3)
{
  id v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  _BYTE v29[8];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = a2;
  MEMORY[0x1DF0D1254](&v41, "varname");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v41);
  if ((v41 & 7) != 0)
  {
    v6 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if (sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)v43)
    && (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) != 0)
  {
    v41 = 0u;
    v42 = 0u;
    MEMORY[0x1DF0D1254](&v39, "result");
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v39);
    if ((v39 & 7) != 0)
    {
      v8 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    if ((pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput() & 1) != 0)
    {
      *(_QWORD *)&v39 = MEMORY[0x1DF0D19D4](&v41);
      if (!atomic_load(MEMORY[0x1E0DF2618]))
        sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
      {
        if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource())
        {
          v39 = 0u;
          v40 = 0u;
          v35 = 1;
          v36 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          v38 = 0;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          *((_QWORD *)&v40 + 1) = 0;
          *(_QWORD *)&v39 = MEMORY[0x1E0DF3148] + 16;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v37);
          v34 = 0;
          v33 = 0;
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v39, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34);
          if (sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v35)
            && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
          {
            v11 = sub_1DCB93D50((uint64_t)&v35, a3);
          }
          else
          {
            MEMORY[0x1DF0D1254](&v28, "frame:stPrimvarName");
            pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v39, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28);
            if ((v28 & 7) != 0)
            {
              v12 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
              do
                v13 = __ldxr(v12);
              while (__stlxr(v13 - 2, v12));
            }
            if (sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)v29)
              && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
            {
              v11 = sub_1DCB93D50((uint64_t)v29, a3);
            }
            else
            {
              v11 = -1;
            }
            if ((v32 & 7) != 0)
            {
              v14 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
              do
                v15 = __ldxr(v14);
              while (__stlxr(v15 - 2, v14));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_1DCAEEC34((uint64_t)&v31);
            if (v30)
              sub_1DCAEED94(v30);
          }
          if ((v38 & 7) != 0)
          {
            v16 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
            do
              v17 = __ldxr(v16);
            while (__stlxr(v17 - 2, v16));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v37);
          if (v36)
            sub_1DCAEED94(v36);
          if ((v34 & 7) != 0)
          {
            v18 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
            do
              v19 = __ldxr(v18);
            while (__stlxr(v19 - 2, v18));
          }
          MEMORY[0x1DF0D1104](&v39);
        }
        else
        {
          v11 = sub_1DCB93D50((uint64_t)v43, a3);
        }
        if (v11 != -1)
        {
          sub_1DCAD3574(v5);
          objc_msgSend_textureSamplerValue(v5, v20, v21);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setMappingChannel_(v22, v23, v11);

        }
      }
    }
    if ((BYTE8(v42) & 7) != 0)
    {
      v24 = (unsigned int *)(*((_QWORD *)&v42 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v42);
    if (*((_QWORD *)&v41 + 1))
      sub_1DCAEED94(*((uint64_t *)&v41 + 1));
  }
  if ((v46 & 7) != 0)
  {
    v26 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v45);
  if (v44)
    sub_1DCAEED94(v44);

}

void sub_1DCB93C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  if ((a3 & 7) != 0)
  {
    v12 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  sub_1DCB93EA0((uint64_t)va);
  if ((a9 & 7) != 0)
  {
    v14 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  MEMORY[0x1DF0D1104]((uint64_t *)va1);
  sub_1DCB93F00(v10 - 112);
  sub_1DCB93EA0(v10 - 80);

  _Unwind_Resume(a1);
}

uint64_t sub_1DCB93D50(uint64_t a1, uint64_t **a2)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v3;
  const std::string *EmptyString;
  uint64_t v5;
  std::string __p;
  std::string *p_p;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v9[0] = 0;
  v9[1] = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get();
  memset(&__p, 0, sizeof(__p));
  if (sub_1DCB93764((pxrInternal__aapl__pxrReserved__::VtValue *)v9))
  {
    v3 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_1DCB9379C((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
    if ((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (const std::string *)((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  else
  {
    if (!sub_1DCB9B4E0((pxrInternal__aapl__pxrReserved__::VtValue *)v9))
      goto LABEL_8;
    EmptyString = (const std::string *)sub_1DCB9B518((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  std::string::operator=(&__p, EmptyString);
LABEL_8:
  if (a2 + 1 == (uint64_t **)sub_1DCAD34E8((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_))
  {
    v5 = 0xFFFFFFFFLL;
  }
  else
  {
    p_p = &__p;
    v5 = *((unsigned int *)sub_1DCAD33AC(a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1DCC58300, (__int128 **)&p_p)+ 14);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_1DCAEEE2C((uint64_t)v9);
  return v5;
}

void sub_1DCB93E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1DCAEEE2C((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB93EA0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_1DCAEED94(v5);
  return a1;
}

uint64_t sub_1DCB93F00(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_1DCAEED94(v5);
  return a1;
}

double sub_1DCB93F60(float *a1)
{
  double v2;
  uint64_t v3;
  _OWORD v5[8];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[4];

  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetScale();
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *a1;
  v6 = 0;
  v7 = 0;
  v8 = 0x3FF0000000000000;
  v9 = v2;
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotate();
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslate();
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
  memset(v5, 0, sizeof(v5));
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
  v3 = 0;
  memset(v18, 0, sizeof(v18));
  do
  {
    v18[v3] = v5[v3];
    ++v3;
  }
  while (v3 != 4);
  return *(double *)v18;
}

void sub_1DCB94078(pxrInternal__aapl__pxrReserved__::UsdShadeShader *a1, void *a2, uint64_t **a3)
{
  id v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  MDLTransform *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  unsigned int *v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v26;
  int IsA;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  double v46;
  double v47;
  double v48;
  double v49;
  _QWORD v50[3];
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;

  v5 = a2;
  v68 = 0u;
  v69 = 0u;
  MEMORY[0x1DF0D1254](&v66, "rotation");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v66);
  if ((v66 & 7) != 0)
  {
    v6 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v66 = 0u;
  v67 = 0u;
  MEMORY[0x1DF0D1254](&v64, "scale");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v64);
  if ((v64 & 7) != 0)
  {
    v8 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v64 = 0u;
  v65 = 0u;
  MEMORY[0x1DF0D1254](&v59, "translation");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v59);
  if ((v59 & 7) != 0)
  {
    v10 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  v63 = 0;
  if (sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v68)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
  }
  v62 = 0x3F8000003F800000;
  if (sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v66)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2f>();
  }
  v61 = 0;
  if (sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v64)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2f>();
  }
  v12 = sub_1DCB93F60((float *)&v63);
  v48 = v13;
  v49 = v12;
  v46 = v15;
  v47 = v14;
  sub_1DCAD3574(v5);
  v16 = [MDLTransform alloc];
  v19 = (void *)objc_msgSend_initWithMatrix_(v16, v17, v18, v49, v48, v47, v46);
  objc_msgSend_textureSamplerValue(v5, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setTransform_(v22, v23, (uint64_t)v19);

  v59 = 0u;
  v60 = 0u;
  MEMORY[0x1DF0D1254](&v57, "in");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v57);
  if ((v57 & 7) != 0)
  {
    v24 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource())
  {
    v57 = 0u;
    v58 = 0u;
    LODWORD(v53) = 1;
    v54 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v56 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *((_QWORD *)&v58 + 1) = 0;
    *(_QWORD *)&v57 = MEMORY[0x1E0DF3148] + 16;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v55);
    v52 = 0;
    v51 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
    v26 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)sub_1DCB4FB38((uint64_t)&v53, (uint64_t *)&v57 + 1, &v58);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v26);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if ((v56 & 7) != 0)
    {
      v28 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v55);
    if (v54)
      sub_1DCAEED94(v54);
    if (IsA)
    {
      v50[1] = 0;
      v50[2] = 0;
      sub_1DCB4FB38((uint64_t)&v53, (uint64_t *)&v57 + 1, &v58);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v50[0] = MEMORY[0x1E0DF30E0] + 16;
      if ((v56 & 7) != 0)
      {
        v30 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v55);
      if (v54)
        sub_1DCAEED94(v54);
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v50);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
      if ((v56 & 7) != 0)
      {
        v32 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v55);
      if (v54)
        sub_1DCAEED94(v54);
      MEMORY[0x1DF0D1254](&v53, "UsdPrimvarReader_float2");
      v34 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
      if ((v53 & 7) != 0)
      {
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      if (!v34)
        sub_1DCB93804((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v50, v5, a3);
      MEMORY[0x1DF0D0EA0](v50);
    }
    if ((v52 & 7) != 0)
    {
      v36 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
      do
        v37 = __ldxr(v36);
      while (__stlxr(v37 - 2, v36));
    }
    MEMORY[0x1DF0D1104](&v57);
  }
  if ((BYTE8(v60) & 7) != 0)
  {
    v38 = (unsigned int *)(*((_QWORD *)&v60 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v60);
  if (*((_QWORD *)&v59 + 1))
    sub_1DCAEED94(*((uint64_t *)&v59 + 1));
  if ((BYTE8(v65) & 7) != 0)
  {
    v40 = (unsigned int *)(*((_QWORD *)&v65 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v65);
  if (*((_QWORD *)&v64 + 1))
    sub_1DCAEED94(*((uint64_t *)&v64 + 1));
  if ((BYTE8(v67) & 7) != 0)
  {
    v42 = (unsigned int *)(*((_QWORD *)&v67 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v67);
  if (*((_QWORD *)&v66 + 1))
    sub_1DCAEED94(*((uint64_t *)&v66 + 1));
  if ((BYTE8(v69) & 7) != 0)
  {
    v44 = (unsigned int *)(*((_QWORD *)&v69 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v69);
  if (*((_QWORD *)&v68 + 1))
    sub_1DCAEED94(*((uint64_t *)&v68 + 1));

}

void sub_1DCB94688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  uint64_t v32;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;

  if ((a17 & 7) != 0)
  {
    v34 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  MEMORY[0x1DF0D0EA0](&a18);
  if ((a22 & 7) != 0)
  {
    v36 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  MEMORY[0x1DF0D1104](&a27);
  sub_1DCB93EA0((uint64_t)&a31);
  sub_1DCB93EA0(v32 - 160);
  sub_1DCB93EA0(v32 - 128);
  sub_1DCB93EA0(v32 - 96);

  _Unwind_Resume(a1);
}

void sub_1DCB94864(pxrInternal__aapl__pxrReserved__::UsdShadeShader *a1, _QWORD *a2, void *a3, uint64_t **a4, uint64_t a5, uint64_t a6, _OWORD *a7)
{
  unint64_t Inputs;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *v9;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *v10;
  pxrInternal__aapl__pxrReserved__::TfToken *BaseName;
  __int128 v12;
  unsigned int *v13;
  unsigned int v14;
  void **v17;
  void *v18;
  int v21;
  int v22;
  unsigned int *v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v26;
  int IsA;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  _BOOL4 v37;
  unsigned int v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t *p_dst;
  const char *v55;
  uint64_t v56;
  void **v57;
  int v58;
  int v59;
  void *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  unsigned int v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  uint64_t EmptyString;
  __int128 v82;
  unsigned __int16 *v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  BOOL v87;
  int v88;
  int v90;
  int v91;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 *v95;
  int v96;
  int v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  uint64_t v104;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD v113[3];
  int v114;
  uint64_t v115;
  void *__p[2];
  uint64_t v117;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *v118;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 __dst;
  __int128 v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v109 = a3;
  Inputs = pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(a1);
  v9 = v118;
  v10 = v119;
  if (v118 != v119)
  {
    v108 = MEMORY[0x1E0DF3148] + 16;
    v104 = MEMORY[0x1E0DF30E0] + 16;
    while (1)
    {
      __p[0] = 0;
      __p[1] = 0;
      v117 = 0;
      BaseName = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(v9);
      if ((__dst & 0xFFFFFFFFFFFFFFF8) != 0)
        Inputs = (__dst & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        Inputs = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(BaseName);
      if (*(char *)(Inputs + 23) < 0)
      {
        Inputs = (unint64_t)sub_1DCACA658(__p, *(void **)Inputs, *(_QWORD *)(Inputs + 8));
      }
      else
      {
        v12 = *(_OWORD *)Inputs;
        v117 = *(_QWORD *)(Inputs + 16);
        *(_OWORD *)__p = v12;
      }
      if ((__dst & 7) != 0)
      {
        v13 = (unsigned int *)(__dst & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      if (v117 < 0)
        break;
      switch(HIBYTE(v117))
      {
        case 2u:
          if (LOWORD(__p[0]) != 30325 && LOWORD(__p[0]) != 29811)
            goto LABEL_144;
LABEL_51:
          Inputs = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource();
          if ((_DWORD)Inputs)
          {
            __dst = 0u;
            v125 = 0u;
            LODWORD(v120) = 1;
            v121 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            v123 = 0;
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            *((_QWORD *)&v125 + 1) = 0;
            *(_QWORD *)&__dst = v108;
            if ((v123 & 7) != 0)
            {
              v24 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
              do
                v25 = __ldxr(v24);
              while (__stlxr(v25 - 2, v24));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_1DCAEEC34((uint64_t)&v122);
            if (v121)
              sub_1DCAEED94(v121);
            v115 = 0;
            v114 = 0;
            pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
            v26 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)sub_1DCB4FB38((uint64_t)&v120, (uint64_t *)&__dst + 1, &v125);
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v26);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
            if ((v123 & 7) != 0)
            {
              v28 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
              do
                v29 = __ldxr(v28);
              while (__stlxr(v29 - 2, v28));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_1DCAEEC34((uint64_t)&v122);
            if (v121)
              sub_1DCAEED94(v121);
            if (IsA)
            {
              memset(v113, 0, sizeof(v113));
              sub_1DCB4FB38((uint64_t)&v120, (uint64_t *)&__dst + 1, &v125);
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              v113[0] = v104;
              if ((v123 & 7) != 0)
              {
                v30 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
                do
                  v31 = __ldxr(v30);
                while (__stlxr(v31 - 2, v30));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_1DCAEEC34((uint64_t)&v122);
              if (v121)
                sub_1DCAEED94(v121);
              v112 = 0;
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v113);
              pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
              if ((v123 & 7) != 0)
              {
                v32 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
                do
                  v33 = __ldxr(v32);
                while (__stlxr(v33 - 2, v32));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_1DCAEEC34((uint64_t)&v122);
              if (v121)
                sub_1DCAEED94(v121);
              MEMORY[0x1DF0D1254](&v120, "PxrPrimvarReader");
              v34 = v120;
              if ((v112 & 0xFFFFFFFFFFFFFFF8) == (v120 & 0xFFFFFFFFFFFFFFF8))
              {
                v37 = 1;
              }
              else
              {
                MEMORY[0x1DF0D1254](&v111, "PxrPrimvarReader_float2");
                v35 = v111;
                if ((v112 & 0xFFFFFFFFFFFFFFF8) == (v111 & 0xFFFFFFFFFFFFFFF8))
                {
                  v37 = 1;
                }
                else
                {
                  MEMORY[0x1DF0D1254](&v110, "UsdPrimvarReader_float2");
                  v36 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
                  v37 = (v112 & 0xFFFFFFFFFFFFFFF8) == (v110 & 0xFFFFFFFFFFFFFFF8);
                  if ((v110 & 7) != 0)
                  {
                    do
                      v38 = __ldxr(v36);
                    while (__stlxr(v38 - 2, v36));
                  }
                  v35 = v111;
                }
                if ((v35 & 7) != 0)
                {
                  v70 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v71 = __ldxr(v70);
                  while (__stlxr(v71 - 2, v70));
                }
                v34 = v120;
              }
              if ((v34 & 7) != 0)
              {
                v72 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
                do
                  v73 = __ldxr(v72);
                while (__stlxr(v73 - 2, v72));
              }
              if (v37)
              {
                sub_1DCB93804((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v113, v109, a4);
              }
              else
              {
                MEMORY[0x1DF0D1254](&v120, "UsdTransform2d");
                v74 = v112;
                v75 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
                if ((v120 & 7) != 0)
                {
                  do
                    v76 = __ldxr(v75);
                  while (__stlxr(v76 - 2, v75));
                }
                if ((unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8) == v75)
                  sub_1DCB94078((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v113, v109, a4);
              }
              if ((v112 & 7) != 0)
              {
                v77 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
                do
                  v78 = __ldxr(v77);
                while (__stlxr(v78 - 2, v77));
              }
              MEMORY[0x1DF0D0EA0](v113);
            }
            if ((v115 & 7) != 0)
            {
              v79 = (unsigned int *)(v115 & 0xFFFFFFFFFFFFFFF8);
              do
                v80 = __ldxr(v79);
              while (__stlxr(v80 - 2, v79));
            }
            Inputs = MEMORY[0x1DF0D1104](&__dst);
          }
          goto LABEL_144;
        case 4u:
          if (LODWORD(__p[0]) != 1701603686)
            goto LABEL_144;
LABEL_79:
          v120 = 0;
          v121 = 0;
          if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get())
          {
            sub_1DCAD3574(v109);
            __dst = 0uLL;
            *(_QWORD *)&v125 = 0;
            v39 = sub_1DCB8CF88((pxrInternal__aapl__pxrReserved__::VtValue *)&v120);
            if (*(char *)(v39 + 47) < 0)
            {
              sub_1DCACA658(&__dst, *(void **)(v39 + 24), *(_QWORD *)(v39 + 32));
            }
            else
            {
              __dst = *(_OWORD *)(v39 + 24);
              *(_QWORD *)&v125 = *(_QWORD *)(v39 + 40);
            }
            if ((SBYTE7(v125) & 0x80u) == 0)
              objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v40, (uint64_t)&__dst, 4);
            else
              objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v40, __dst, 4);
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setStringValue_(v109, v53, (uint64_t)v52);

            sub_1DCAD3738(a6, (unsigned __int8 *)&__dst, (uint64_t)&__dst);
            if (SBYTE7(v125) < 0)
              operator delete((void *)__dst);
          }
          p_dst = &v120;
          goto LABEL_119;
        case 5u:
          if ((LODWORD(__p[0]) != 1885434487 || BYTE4(__p[0]) != 83)
            && (LODWORD(__p[0]) != 1885434487 || BYTE4(__p[0]) != 84))
          {
            v17 = __p;
            goto LABEL_41;
          }
LABEL_82:
          __dst = 0uLL;
          if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get())
          {
            v41 = *(_QWORD *)sub_1DCB9379C((pxrInternal__aapl__pxrReserved__::VtValue *)&__dst);
            if ((v41 & 7) != 0)
            {
              v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
              do
                v43 = __ldxr(v42);
              while (__stxr(v43 + 2, v42));
              if ((v43 & 1) == 0)
                v41 &= 0xFFFFFFFFFFFFFFF8;
            }
            MEMORY[0x1DF0D1254](&v120, "repeat");
            v44 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
            if ((v120 & 7) != 0)
            {
              do
                v45 = __ldxr(v44);
              while (__stlxr(v45 - 2, v44));
            }
            v46 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
            if (v44 == (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8))
            {
              v51 = 1;
            }
            else
            {
              MEMORY[0x1DF0D1254](&v120, "clamp");
              v47 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
              if ((v120 & 7) != 0)
              {
                do
                  v48 = __ldxr(v47);
                while (__stlxr(v48 - 2, v47));
              }
              if (v47 == v46)
              {
                v51 = 0;
              }
              else
              {
                MEMORY[0x1DF0D1254](&v120, "mirror");
                v49 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
                if ((v120 & 7) != 0)
                {
                  do
                    v50 = __ldxr(v49);
                  while (__stlxr(v50 - 2, v49));
                }
                v51 = 2 * (v49 == v46);
              }
            }
            sub_1DCAD367C(v109);
            if ((SHIBYTE(v117) & 0x80000000) == 0)
            {
              if (SHIBYTE(v117) == 5)
              {
                v57 = __p;
                goto LABEL_111;
              }
              goto LABEL_115;
            }
            if (__p[1] != (void *)5)
              goto LABEL_115;
            v57 = (void **)__p[0];
LABEL_111:
            v58 = *(_DWORD *)v57;
            v59 = *((unsigned __int8 *)v57 + 4);
            if (v58 == 1885434487 && v59 == 83)
            {
              objc_msgSend_textureSamplerValue(v109, v55, v56);
              v61 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_hardwareFilter(v61, v67, v68);
              v64 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setSWrapMode_(v64, v69, v51);
            }
            else
            {
LABEL_115:
              objc_msgSend_textureSamplerValue(v109, v55, v56);
              v61 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_hardwareFilter(v61, v62, v63);
              v64 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setTWrapMode_(v64, v65, v51);
            }

            if ((v41 & 7) != 0)
            {
              do
                v66 = __ldxr(v46);
              while (__stlxr(v66 - 2, v46));
            }
          }
LABEL_118:
          p_dst = (uint64_t *)&__dst;
LABEL_119:
          Inputs = sub_1DCAEEE2C((uint64_t)p_dst);
LABEL_144:
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          break;
      }
      v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)((char *)v9 + 32);
      if (v9 == v10)
        goto LABEL_147;
    }
    v18 = __p[1];
    if (__p[1] == (void *)2)
    {
      if (*(_WORD *)__p[0] == 30325)
        goto LABEL_51;
      v18 = __p[1];
      if (*(_WORD *)__p[0] == 29811)
        goto LABEL_51;
    }
    else if (__p[1] == (void *)4 && *(_DWORD *)__p[0] == 1701603686)
    {
      goto LABEL_79;
    }
    if (v18 == (void *)5)
    {
      v17 = (void **)__p[0];
      if (*(_DWORD *)__p[0] == 1885434487 && *((_BYTE *)__p[0] + 4) == 83)
        goto LABEL_82;
      if (__p[1] == (void *)5)
      {
        if (*(_DWORD *)__p[0] == 1885434487 && *((_BYTE *)__p[0] + 4) == 84)
          goto LABEL_82;
LABEL_41:
        v21 = *(_DWORD *)v17;
        v22 = *((unsigned __int8 *)v17 + 4);
        if (v21 == 1818321779 && v22 == 101)
        {
          __dst = 0uLL;
          if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get()
            && sub_1DCB8CEA8((pxrInternal__aapl__pxrReserved__::VtValue *)&__dst))
          {
            *a7 = *(_OWORD *)sub_1DCB8D030((pxrInternal__aapl__pxrReserved__::VtValue *)&__dst);
          }
          goto LABEL_118;
        }
      }
    }
    goto LABEL_144;
  }
LABEL_147:
  __dst = 0uLL;
  *(_QWORD *)&v125 = 0;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)Inputs);
  if (*(char *)(EmptyString + 23) < 0)
  {
    sub_1DCACA658(&__dst, *(void **)EmptyString, *(_QWORD *)(EmptyString + 8));
  }
  else
  {
    v82 = *(_OWORD *)EmptyString;
    *(_QWORD *)&v125 = *(_QWORD *)(EmptyString + 16);
    __dst = v82;
  }
  if (SBYTE7(v125) < 0)
  {
    v85 = *((_QWORD *)&__dst + 1);
    v83 = (unsigned __int16 *)__dst;
    if (*((_QWORD *)&__dst + 1) == 1)
    {
      v86 = *(unsigned __int8 *)__dst - 98;
      v87 = v86 > 0x10;
      v88 = (1 << v86) & 0x10021;
      if (!v87 && v88 != 0)
        goto LABEL_185;
      v85 = *((_QWORD *)&__dst + 1);
      v83 = (unsigned __int16 *)__dst;
      if (*(_BYTE *)__dst == 97)
        goto LABEL_185;
      if ((BYTE7(v125) & 0x80) == 0)
        goto LABEL_183;
    }
    if (v85 != 3)
      goto LABEL_180;
    goto LABEL_174;
  }
  if (BYTE7(v125) != 1)
  {
    v83 = (unsigned __int16 *)&__dst;
    if (BYTE7(v125) != 3)
    {
      if (BYTE7(v125) == 4)
      {
        if ((_DWORD)__dst == 1633838962)
        {
          v84 = 4;
          goto LABEL_186;
        }
        goto LABEL_183;
      }
LABEL_184:
      NSLog(CFSTR("Warning: Invalid texture component ':%s'."), v83);
      v84 = BYTE7(v125);
      goto LABEL_186;
    }
LABEL_174:
    v90 = *v83;
    v91 = *((unsigned __int8 *)v83 + 2);
    if (v90 != 26482 || v91 != 98)
    {
      if ((BYTE7(v125) & 0x80) == 0)
        goto LABEL_183;
      v85 = *((_QWORD *)&__dst + 1);
      v83 = (unsigned __int16 *)__dst;
LABEL_180:
      if (v85 != 4)
        goto LABEL_184;
      if (*(_DWORD *)v83 != 1633838962)
      {
        if ((BYTE7(v125) & 0x80) != 0)
          goto LABEL_184;
LABEL_183:
        v83 = (unsigned __int16 *)&__dst;
        goto LABEL_184;
      }
    }
LABEL_185:
    v84 = BYTE7(v125);
    goto LABEL_186;
  }
  if (__dst == 98)
    goto LABEL_185;
  v84 = 1;
  if (__dst != 103 && __dst != 114)
  {
    v83 = (unsigned __int16 *)&__dst;
    if (__dst == 97)
    {
      v84 = 1;
      goto LABEL_186;
    }
    goto LABEL_184;
  }
LABEL_186:
  v93 = *((_QWORD *)&__dst + 1);
  if ((v84 & 0x80u) == 0)
    v93 = v84;
  if ((unint64_t)(v93 - 1) <= 3)
  {
    v94 = 0;
    v95 = (unsigned __int8 *)&__dst;
    if ((v84 & 0x80u) != 0)
      v95 = (unsigned __int8 *)__dst;
    do
    {
      v97 = *v95++;
      v96 = v97;
      if (v97 > 102)
      {
        if (v96 == 114)
        {
          v98 = 1;
        }
        else
        {
          if (v96 != 103)
            goto LABEL_203;
          v98 = 2;
        }
      }
      else if (v96 == 97)
      {
        v98 = 8;
      }
      else
      {
        if (v96 != 98)
          goto LABEL_203;
        v98 = 4;
      }
      v94 |= v98;
      --v93;
    }
    while (v93);
    if (v94 != 15)
    {
      sub_1DCAD3574(v109);
      objc_msgSend_textureSamplerValue(v109, v99, v100);
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setTextureComponents_(v101, v102, v94);

      LOBYTE(v84) = BYTE7(v125);
    }
  }
LABEL_203:
  if ((v84 & 0x80) != 0)
    operator delete((void *)__dst);
  *(_QWORD *)&__dst = &v118;
  sub_1DCB9D414((void ***)&__dst);

}

void sub_1DCB953E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  uint64_t v33;

  sub_1DCAEEE2C(v33 - 128);
  if (a32 < 0)
    operator delete(__p);
  *(_QWORD *)(v33 - 128) = &a33;
  sub_1DCB9D414((void ***)(v33 - 128));

  _Unwind_Resume(a1);
}

void sub_1DCB95648(void *a1, uint64_t a2, float32x4_t a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  CGColorRef v9;
  const char *v10;
  const char *v11;
  CGFloat components[2];
  float64x2_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v7 = v4;
  if (*(_QWORD *)(a2 + 72) && (v8 = objc_msgSend_semantic(v4, v5, v6), v8 <= 0xD) && ((1 << v8) & 0x2209) != 0)
  {
    *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)a3.f32);
    v14 = vcvt_hight_f64_f32(a3);
    v9 = CGColorCreate(*(CGColorSpaceRef *)(a2 + 72), components);
    objc_msgSend_setColor_(v7, v10, (uint64_t)v9);
    objc_msgSend_setType_(v7, v11, 4);
    CFRelease(v9);
  }
  else
  {
    objc_msgSend_setFloat4Value_(v7, v5, v6, *(double *)a3.i64, *(_OWORD *)&a3);
  }

}

void sub_1DCB95724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB95740(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v8;
  uint64_t v9;
  __n128 v10;
  float32x4_t *v11;
  double v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  id v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  void *__p[2];
  void *v25;
  void *__dst[2];
  void *v27[5];
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v28[0] = 0;
  v28[1] = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get() & 1) != 0)
  {
    if ((sub_1DCB8CE70((pxrInternal__aapl__pxrReserved__::VtValue *)v28) & 1) != 0)
    {
      v9 = sub_1DCB8D098((pxrInternal__aapl__pxrReserved__::VtValue *)v28);
      v10.n128_u64[0] = *(_QWORD *)v9;
      v10.n128_u32[2] = *(_DWORD *)(v9 + 8);
      sub_1DCAD11D8(v8, a6, v10);
    }
    else if ((sub_1DCB8CEA8((pxrInternal__aapl__pxrReserved__::VtValue *)v28) & 1) != 0)
    {
      v11 = (float32x4_t *)sub_1DCB8D030((pxrInternal__aapl__pxrReserved__::VtValue *)v28);
      sub_1DCB95648(v8, a6, *v11);
    }
    else if ((sub_1DCB8CEE0((pxrInternal__aapl__pxrReserved__::VtValue *)v28) & 1) != 0)
    {
      LODWORD(v12) = *(_DWORD *)sub_1DCB8D100((pxrInternal__aapl__pxrReserved__::VtValue *)v28);
      objc_msgSend_setFloatValue_(v8, v13, v14, v12);
    }
    else if (sub_1DCB8CF18((pxrInternal__aapl__pxrReserved__::VtValue *)v28))
    {
      memset(v27, 0, 32);
      *(_OWORD *)__dst = 0u;
      v15 = sub_1DCB8CF88((pxrInternal__aapl__pxrReserved__::VtValue *)v28);
      v16 = v15;
      if (*(char *)(v15 + 23) < 0)
      {
        sub_1DCACA658(__dst, *(void **)v15, *(_QWORD *)(v15 + 8));
      }
      else
      {
        v17 = *(_OWORD *)v15;
        v27[0] = *(void **)(v15 + 16);
        *(_OWORD *)__dst = v17;
      }
      if (*(char *)(v16 + 47) < 0)
      {
        sub_1DCACA658(&v27[1], *(void **)(v16 + 24), *(_QWORD *)(v16 + 32));
      }
      else
      {
        v18 = *(_OWORD *)(v16 + 24);
        v27[3] = *(void **)(v16 + 40);
        *(_OWORD *)&v27[1] = v18;
      }
      __p[0] = 0;
      __p[1] = 0;
      v25 = 0;
      if (SHIBYTE(v27[3]) < 0)
      {
        sub_1DCACA658(__p, v27[1], (unint64_t)v27[2]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)&v27[1];
        v25 = v27[3];
      }
      v19 = objc_alloc(MEMORY[0x1E0CB3940]);
      if (SHIBYTE(v25) >= 0)
        v21 = objc_msgSend_initWithCString_encoding_(v19, v20, (uint64_t)__p, 4, __p[0], __p[1], v25);
      else
        v21 = objc_msgSend_initWithCString_encoding_(v19, v20, (uint64_t)__p[0], 4, __p[0], __p[1], v25);
      v22 = (void *)v21;
      sub_1DCAD3738(a5, (unsigned __int8 *)__p, (uint64_t)__p);
      objc_msgSend_setStringValue_(v8, v23, (uint64_t)v22);

      if (SHIBYTE(v25) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v27[3]) < 0)
        operator delete(v27[1]);
      if (SHIBYTE(v27[0]) < 0)
        operator delete(__dst[0]);
    }
  }
  sub_1DCAEEE2C((uint64_t)v28);

}

void sub_1DCB95980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  uint64_t v22;

  sub_1DCB8CFF0((uint64_t)&__p);
  sub_1DCAEEE2C(v22 - 72);

  _Unwind_Resume(a1);
}

void sub_1DCB95A04(void *a1, uint64_t a2, void *a3, uint64_t **a4, uint64_t a5, uint64_t a6, _OWORD *a7, uint64_t a8)
{
  id v15;
  id v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v18;
  int IsA;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  _BOOL4 v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  BOOL v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;

  v15 = a1;
  v16 = a3;
  if (!pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource())
  {
LABEL_47:
    sub_1DCB95740(v15, a2, v17, a5, a6, a8);
    goto LABEL_48;
  }
  v55 = 0u;
  v56 = 0uLL;
  LODWORD(v51) = 1;
  v52 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v54 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  *(_QWORD *)&v55 = MEMORY[0x1E0DF3148] + 16;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v53);
  v50 = 0;
  v49 = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
  v18 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)sub_1DCB4FB38((uint64_t)&v51, (uint64_t *)&v55 + 1, &v56);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v18);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((v54 & 7) != 0)
  {
    v20 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v53);
  if (v52)
    sub_1DCAEED94(v52);
  if (!IsA)
  {
LABEL_43:
    if ((v50 & 7) != 0)
    {
      v42 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
      do
        v43 = __ldxr(v42);
      while (__stlxr(v43 - 2, v42));
    }
    MEMORY[0x1DF0D1104](&v55);
    goto LABEL_47;
  }
  v48[1] = 0;
  v48[2] = 0;
  sub_1DCB4FB38((uint64_t)&v51, (uint64_t *)&v55 + 1, &v56);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v48[0] = MEMORY[0x1E0DF30E0] + 16;
  if ((v54 & 7) != 0)
  {
    v22 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v53);
  if (v52)
    sub_1DCAEED94(v52);
  v47 = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v48);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  if ((v54 & 7) != 0)
  {
    v24 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v53);
  if (v52)
    sub_1DCAEED94(v52);
  MEMORY[0x1DF0D1254](&v51, "PxrUVTexture");
  v26 = v51;
  if ((v51 & 0xFFFFFFFFFFFFFFF8) == (v47 & 0xFFFFFFFFFFFFFFF8))
  {
    v28 = 1;
  }
  else
  {
    MEMORY[0x1DF0D1254](&v46, "UsdUVTexture");
    v27 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
    v28 = (v46 & 0xFFFFFFFFFFFFFFF8) == (v47 & 0xFFFFFFFFFFFFFFF8);
    if ((v46 & 7) != 0)
    {
      do
        v29 = __ldxr(v27);
      while (__stlxr(v29 - 2, v27));
    }
    v26 = v51;
  }
  if ((v26 & 7) != 0)
  {
    v30 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  if (!v28)
  {
    MEMORY[0x1DF0D1254](&v51, "PxrPrimvarReader");
    v34 = v51;
    if ((v51 & 0xFFFFFFFFFFFFFFF8) == (v47 & 0xFFFFFFFFFFFFFFF8))
    {
      v36 = 0;
    }
    else
    {
      MEMORY[0x1DF0D1254](&v46, "UsdPrimvarReader");
      v35 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
      v36 = (v46 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8);
      if ((v46 & 7) != 0)
      {
        do
          v37 = __ldxr(v35);
        while (__stlxr(v37 - 2, v35));
      }
      v34 = v51;
    }
    if ((v34 & 7) != 0)
    {
      v38 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stlxr(v39 - 2, v38));
    }
    if ((v47 & 7) != 0)
    {
      v40 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
      do
        v41 = __ldxr(v40);
      while (__stlxr(v41 - 2, v40));
    }
    MEMORY[0x1DF0D0EA0](v48);
    if (!v36)
      goto LABEL_49;
    goto LABEL_43;
  }
  sub_1DCB94864((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v48, &v50, v15, a4, a5, a6, a7);
  if ((v47 & 7) != 0)
  {
    v32 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  MEMORY[0x1DF0D0EA0](v48);
LABEL_49:
  if ((v50 & 7) != 0)
  {
    v44 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  MEMORY[0x1DF0D1104](&v55);
LABEL_48:

}

void sub_1DCB95EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);
  v22 = va_arg(va1, _QWORD);
  v23 = va_arg(va1, _QWORD);
  if ((v20 & 7) != 0)
  {
    v8 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  if ((a6 & 7) != 0)
  {
    v10 = (unsigned int *)(a6 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  MEMORY[0x1DF0D0EA0]((uint64_t *)va);
  if ((v19 & 7) != 0)
  {
    v12 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  MEMORY[0x1DF0D1104](va1);

  _Unwind_Resume(a1);
}

id sub_1DCB95FC4(_DWORD *a1, void *a2, pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::TfToken *BaseName;
  char *EmptyString;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  void *v24;
  const char *v25;
  unint64_t v26;
  uint64_t *v27;
  void *v28;
  MDLMaterial *v29;
  void *v30;
  const char *v31;
  void *v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  pxrInternal__aapl__pxrReserved__::TfToken *v41;
  char *v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v7 = a2;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs(a3);
  v8 = v54;
  v9 = v55;
  if (v54 != v55)
  {
    v10 = 0;
    do
    {
      v52 = 0u;
      v53 = 0u;
      LODWORD(v52) = *(_DWORD *)v8;
      v11 = *(_QWORD *)(v8 + 8);
      *((_QWORD *)&v52 + 1) = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 48);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      sub_1DCB30114(&v53, (_DWORD *)(v8 + 16));
      sub_1DCB30164((_DWORD *)&v53 + 1, (_DWORD *)(v8 + 20));
      v14 = *(_QWORD *)(v8 + 24);
      *((_QWORD *)&v53 + 1) = v14;
      if ((v14 & 7) != 0)
      {
        v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 2, v15));
        if ((v16 & 1) == 0)
          *((_QWORD *)&v53 + 1) &= 0xFFFFFFFFFFFFFFF8;
      }
      v51 = 0x8000;
      v50 = 0;
      BaseName = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v52);
      if ((v49 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (char *)((v49 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = (char *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(BaseName);
      v19 = sub_1DCB8C848(EmptyString, &v51, (char *)&v50);
      if ((v49 & 7) != 0)
      {
        v20 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
      if (v19)
        v10 = (v50 | v10) != 0;
      if ((BYTE8(v53) & 7) != 0)
      {
        v22 = (unsigned int *)(*((_QWORD *)&v53 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v53);
      if (*((_QWORD *)&v52 + 1))
        sub_1DCAEED94(*((uint64_t *)&v52 + 1));
      v8 += 32;
    }
    while (v8 != v9);
  }
  v24 = (void *)MEMORY[0x1E0CB3940];
  v26 = *(_QWORD *)sub_1DCAEEC08(a1) & 0xFFFFFFFFFFFFFFF8;
  if (v26)
  {
    v27 = (uint64_t *)(v26 + 16);
    if (*(char *)(v26 + 39) < 0)
    {
      objc_msgSend_stringWithUTF8String_(v24, v25, *v27);
      goto LABEL_30;
    }
  }
  else
  {
    v27 = (uint64_t *)"";
  }
  objc_msgSend_stringWithUTF8String_(v24, v25, (uint64_t)v27);
LABEL_30:
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = [MDLMaterial alloc];
  v30 = (void *)objc_opt_new();
  v32 = (void *)objc_msgSend_initWithName_scatteringFunction_(v29, v31, (uint64_t)v28, v30);

  v34 = v54;
  for (i = v55; v34 != i; v34 += 32)
  {
    v52 = 0u;
    v53 = 0u;
    LODWORD(v52) = *(_DWORD *)v34;
    v35 = *(_QWORD *)(v34 + 8);
    *((_QWORD *)&v52 + 1) = v35;
    if (v35)
    {
      v36 = (unint64_t *)(v35 + 48);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    sub_1DCB30114(&v53, (_DWORD *)(v34 + 16));
    sub_1DCB30164((_DWORD *)&v53 + 1, (_DWORD *)(v34 + 20));
    v38 = *(_QWORD *)(v34 + 24);
    *((_QWORD *)&v53 + 1) = v38;
    if ((v38 & 7) != 0)
    {
      v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 2, v39));
      if ((v40 & 1) == 0)
        *((_QWORD *)&v53 + 1) &= 0xFFFFFFFFFFFFFFF8;
    }
    v51 = 0x8000;
    v50 = 0;
    v41 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v52);
    if ((v49 & 0xFFFFFFFFFFFFFFF8) != 0)
      v42 = (char *)((v49 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v42 = (char *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v41);
    v43 = sub_1DCB8C848(v42, &v51, (char *)&v50);
    if ((v49 & 7) != 0)
    {
      v44 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stlxr(v45 - 2, v44));
    }
    if (v43)
      sub_1DCB8CA38(v32, v51, v7, (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v52, a4);
    if ((BYTE8(v53) & 7) != 0)
    {
      v46 = (unsigned int *)(*((_QWORD *)&v53 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v47 = __ldxr(v46);
      while (__stlxr(v47 - 2, v46));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v53);
    if (*((_QWORD *)&v52 + 1))
      sub_1DCAEED94(*((uint64_t *)&v52 + 1));
  }

  *(_QWORD *)&v52 = &v54;
  sub_1DCB9D414((void ***)&v52);

  return v32;
}

void sub_1DCB963A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;

  a13 = (void **)&a18;
  sub_1DCB9D414(&a13);

  _Unwind_Resume(a1);
}

id sub_1DCB9646C(pxrInternal__aapl__pxrReserved__::UsdObject *a1, void *a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  unint64_t v9;
  uint64_t *v10;
  MDLMaterial *v11;
  void *v12;
  const char *v13;
  id v14;
  uint64_t i;
  char HasConnectedSource;
  uint64_t v17;
  char v18;
  void *v19;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  void *v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  _BOOL4 v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  double v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  double v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  double v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  double v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  MDLMaterial *v78;
  const char *v79;
  uint64_t v80;
  MDLMaterial *v81;
  const char *v82;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *v83;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *v84;
  unsigned __int8 v85;
  pxrInternal__aapl__pxrReserved__::TfToken *v86;
  const char *v87;
  uint64_t v88;
  void *v89;
  unint64_t EmptyString;
  void *v91;
  const char *v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  void *v96;
  MDLMaterialProperty *v97;
  const char *v98;
  uint64_t v99;
  const char *v100;
  const char *v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  MDLMaterialProperty *v108;
  const char *v109;
  uint64_t v110;
  const char *v111;
  unsigned int *v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float32x4_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int *v153;
  unsigned int v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int *v163;
  unsigned int v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int *v167;
  unsigned int v168;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  __n128 v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  double v187;
  id v192;
  float32x4_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD v210[3];
  uint64_t v211;
  int v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD v218[3];
  float32x4_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD v222[2];
  _QWORD v223[2];
  _QWORD v224[2];
  _QWORD v225[2];
  _QWORD v226[2];
  _QWORD v227[2];
  _QWORD v228[2];
  _QWORD v229[2];
  _QWORD v230[2];
  _QWORD v231[2];
  _QWORD v232[2];
  _QWORD v233[2];
  _QWORD v234[2];
  _QWORD v235[4];

  v235[1] = *MEMORY[0x1E0C80C00];
  v192 = a2;
  if ((sub_1DCB4F88C(a1) & 1) == 0)
  {
    v11 = [MDLMaterial alloc];
    v12 = (void *)objc_opt_new();
    v14 = (id)objc_msgSend_initWithName_scatteringFunction_(v11, v13, (uint64_t)CFSTR("material"), v12);

    goto LABEL_135;
  }
  v218[1] = 0;
  v218[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v218[0] = MEMORY[0x1E0DF3108] + 16;
  v7 = (void *)MEMORY[0x1E0CB3940];
  v9 = *(_QWORD *)sub_1DCAEEC08(a1) & 0xFFFFFFFFFFFFFFF8;
  if (v9)
  {
    v10 = (uint64_t *)(v9 + 16);
    if (*(char *)(v9 + 39) < 0)
    {
      objc_msgSend_stringWithUTF8String_(v7, v8, *v10);
      goto LABEL_8;
    }
  }
  else
  {
    v10 = (uint64_t *)"";
  }
  objc_msgSend_stringWithUTF8String_(v7, v8, (uint64_t)v10);
LABEL_8:
  v185 = (void *)objc_claimAutoreleasedReturnValue();
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v218);
  for (i = v216; ; i += 32)
  {
    if (i == v217)
      goto LABEL_133;
    HasConnectedSource = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource();
    if ((HasConnectedSource & 1) != 0)
      break;
  }
  v17 = v216;
  v186 = v217;
  v18 = HasConnectedSource ^ 1;
  if (v217 == v216)
    v18 = 1;
  if ((v18 & 1) != 0)
  {
LABEL_133:
    sub_1DCB95FC4(a1, v192, (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v218, a5);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_134;
  }
  v19 = 0;
  v180 = v223;
  v181 = v222;
  v178 = v225;
  v179 = v224;
  v176 = v227;
  v177 = v226;
  v174 = v229;
  v175 = v228;
  v172 = v231;
  v173 = v230;
  v170 = v233;
  v171 = v232;
  v182 = v234;
  v184 = MEMORY[0x1E0DF3148] + 16;
  v183 = (__n128)vdupq_n_s32(0x3E3851ECu);
  __asm { FMOV            V0.4S, #1.0 }
  v193 = _Q0;
  do
  {
    if ((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource() & 1) != 0)
    {
      v214 = 0u;
      v215 = 0u;
      v219.i32[0] = 1;
      v219.i64[1] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v221 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *((_QWORD *)&v215 + 1) = 0;
      *(_QWORD *)&v214 = v184;
      if ((v221 & 7) != 0)
      {
        v25 = (unsigned int *)(v221 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v220);
      if (v219.i64[1])
        sub_1DCAEED94(v219.i64[1]);
      v213 = 0;
      v212 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
      MEMORY[0x1DF0D1254](&v219, "surface");
      v27 = v213;
      v28 = (unsigned int *)(v219.i64[0] & 0xFFFFFFFFFFFFFFF8);
      if ((v219.i8[0] & 7) != 0)
      {
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if ((unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8) == v28)
      {
        v211 = 0;
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::UsdShadeShader();
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v210);
        v31 = sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v219);
        if ((v221 & 7) != 0)
        {
          v32 = (unsigned int *)(v221 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v220);
        if (v219.i64[1])
          sub_1DCAEED94(v219.i64[1]);
        MEMORY[0x1DF0D0EA0](v210);
        if (v31)
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::UsdShadeShader();
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v210);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
          if ((v221 & 7) != 0)
          {
            v34 = (unsigned int *)(v221 & 0xFFFFFFFFFFFFFFF8);
            do
              v35 = __ldxr(v34);
            while (__stlxr(v35 - 2, v34));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v220);
          if (v219.i64[1])
            sub_1DCAEED94(v219.i64[1]);
          MEMORY[0x1DF0D0EA0](v210);
        }
        MEMORY[0x1DF0D1254](&v219, "PxrPreviewSurface");
        v36 = v219.i64[0];
        if ((v211 & 0xFFFFFFFFFFFFFFF8) == (v219.i64[0] & 0xFFFFFFFFFFFFFFF8))
        {
          v38 = 1;
        }
        else
        {
          MEMORY[0x1DF0D1254](v210, "UsdPreviewSurface");
          v37 = (unsigned int *)(v210[0] & 0xFFFFFFFFFFFFFFF8);
          v38 = (v211 & 0xFFFFFFFFFFFFFFF8) == (v210[0] & 0xFFFFFFFFFFFFFFF8);
          if ((v210[0] & 7) != 0)
          {
            do
              v39 = __ldxr(v37);
            while (__stlxr(v39 - 2, v37));
          }
          v36 = v219.i64[0];
        }
        if ((v36 & 7) != 0)
        {
          v40 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stlxr(v41 - 2, v40));
        }
        if (v38)
        {
          v42 = (void *)objc_opt_new();
          objc_msgSend_baseColor(v42, v43, v44);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1DCAD11D8(v45, a6, v183);

          objc_msgSend_emission(v42, v46, v47);
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1DCAD11D8(v48, a6, (__n128)0);

          objc_msgSend_metallic(v42, v49, v50);
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(v52) = 0;
          objc_msgSend_setFloatValue_(v51, v53, v54, v52);

          objc_msgSend_roughness(v42, v55, v56);
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(v58) = 0.5;
          objc_msgSend_setFloatValue_(v57, v59, v60, v58);

          objc_msgSend_clearcoat(v42, v61, v62);
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(v64) = 0;
          objc_msgSend_setFloatValue_(v63, v65, v66, v64);

          objc_msgSend_clearcoatGloss(v42, v67, v68);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(v70) = 1065185444;
          objc_msgSend_setFloatValue_(v69, v71, v72, v70);

          objc_msgSend_normal(v42, v73, v74);
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setFloat3Value_(v75, v76, v77, 0.0);

          v78 = [MDLMaterial alloc];
          v80 = objc_msgSend_initWithName_scatteringFunction_(v78, v79, (uint64_t)v185, v42);
        }
        else
        {
          v81 = [MDLMaterial alloc];
          v42 = (void *)objc_opt_new();
          v80 = objc_msgSend_initWithName_scatteringFunction_(v81, v82, (uint64_t)v185, v42, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182);
        }
        v30 = (void *)v80;

        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v214);
        v84 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v210[0];
        v83 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v210[1];
        while (v84 != v83)
        {
          v209 = 0;
          pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(v84);
          v85 = atomic_load((unsigned __int8 *)&qword_1F03B5158);
          if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_1F03B5158))
          {
            v114 = operator new();
            MEMORY[0x1DF0D1254](&v208, "clearcoat");
            v115 = v208;
            v208 = 0;
            v219.i64[0] = v115;
            v219.i64[1] = 11;
            MEMORY[0x1DF0D1254](&v207, "clearcoatRoughness");
            v116 = v207;
            v207 = 0;
            v220 = v116;
            v221 = 0x8000;
            MEMORY[0x1DF0D1254](&v206, "diffuseColor");
            v117 = v206;
            v206 = 0;
            v222[0] = v117;
            v222[1] = 0;
            MEMORY[0x1DF0D1254](&v205, "displacement");
            v118 = v205;
            v205 = 0;
            v223[0] = v118;
            v223[1] = 20;
            MEMORY[0x1DF0D1254](&v204, "emissive");
            v119 = v204;
            v204 = 0;
            v224[0] = v119;
            v224[1] = 13;
            MEMORY[0x1DF0D1254](&v203, "emissiveColor");
            v120 = v203;
            v203 = 0;
            v225[0] = v120;
            v225[1] = 13;
            MEMORY[0x1DF0D1254](&v202, "ior");
            v121 = v202;
            v202 = 0;
            v226[0] = v121;
            v226[1] = 17;
            MEMORY[0x1DF0D1254](&v201, "metallic");
            v122 = v201;
            v201 = 0;
            v227[0] = v122;
            v227[1] = 2;
            MEMORY[0x1DF0D1254](&v200, "normal");
            v123 = v200;
            v200 = 0;
            v228[0] = v123;
            v228[1] = 19;
            MEMORY[0x1DF0D1254](&v199, "occlusion");
            v124 = v199;
            v199 = 0;
            v229[0] = v124;
            v229[1] = 22;
            MEMORY[0x1DF0D1254](&v198, "opacity");
            v125 = v198;
            v198 = 0;
            v230[0] = v125;
            v230[1] = 15;
            MEMORY[0x1DF0D1254](&v197, "roughness");
            v126 = v197;
            v197 = 0;
            v231[0] = v126;
            v231[1] = 6;
            MEMORY[0x1DF0D1254](&v196, "specularColor");
            v127 = v196;
            v196 = 0;
            v232[0] = v127;
            v232[1] = 3;
            MEMORY[0x1DF0D1254](&v195, "useSpecularPipeline");
            v128 = v195;
            v195 = 0;
            v233[0] = v128;
            v233[1] = 0x8000;
            MEMORY[0x1DF0D1254](&v194, "useSpecularWorkflow");
            v129 = v194;
            v194 = 0;
            v234[0] = v129;
            v234[1] = 0x8000;
            sub_1DCB9D5E4(v114, (uint64_t *)&v219, 15);
            v130 = (float32x4_t *)v235;
            do
            {
              v132 = v130[-1].i64[0];
              --v130;
              v131 = v132;
              if ((v132 & 7) != 0)
              {
                v133 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
                do
                  v134 = __ldxr(v133);
                while (__stlxr(v134 - 2, v133));
              }
            }
            while (v130 != &v219);
            if ((v194 & 7) != 0)
            {
              v135 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
              do
                v136 = __ldxr(v135);
              while (__stlxr(v136 - 2, v135));
            }
            if ((v195 & 7) != 0)
            {
              v137 = (unsigned int *)(v195 & 0xFFFFFFFFFFFFFFF8);
              do
                v138 = __ldxr(v137);
              while (__stlxr(v138 - 2, v137));
            }
            if ((v196 & 7) != 0)
            {
              v139 = (unsigned int *)(v196 & 0xFFFFFFFFFFFFFFF8);
              do
                v140 = __ldxr(v139);
              while (__stlxr(v140 - 2, v139));
            }
            if ((v197 & 7) != 0)
            {
              v141 = (unsigned int *)(v197 & 0xFFFFFFFFFFFFFFF8);
              do
                v142 = __ldxr(v141);
              while (__stlxr(v142 - 2, v141));
            }
            if ((v198 & 7) != 0)
            {
              v143 = (unsigned int *)(v198 & 0xFFFFFFFFFFFFFFF8);
              do
                v144 = __ldxr(v143);
              while (__stlxr(v144 - 2, v143));
            }
            if ((v199 & 7) != 0)
            {
              v145 = (unsigned int *)(v199 & 0xFFFFFFFFFFFFFFF8);
              do
                v146 = __ldxr(v145);
              while (__stlxr(v146 - 2, v145));
            }
            if ((v200 & 7) != 0)
            {
              v147 = (unsigned int *)(v200 & 0xFFFFFFFFFFFFFFF8);
              do
                v148 = __ldxr(v147);
              while (__stlxr(v148 - 2, v147));
            }
            if ((v201 & 7) != 0)
            {
              v149 = (unsigned int *)(v201 & 0xFFFFFFFFFFFFFFF8);
              do
                v150 = __ldxr(v149);
              while (__stlxr(v150 - 2, v149));
            }
            if ((v202 & 7) != 0)
            {
              v151 = (unsigned int *)(v202 & 0xFFFFFFFFFFFFFFF8);
              do
                v152 = __ldxr(v151);
              while (__stlxr(v152 - 2, v151));
            }
            if ((v203 & 7) != 0)
            {
              v153 = (unsigned int *)(v203 & 0xFFFFFFFFFFFFFFF8);
              do
                v154 = __ldxr(v153);
              while (__stlxr(v154 - 2, v153));
            }
            if ((v204 & 7) != 0)
            {
              v155 = (unsigned int *)(v204 & 0xFFFFFFFFFFFFFFF8);
              do
                v156 = __ldxr(v155);
              while (__stlxr(v156 - 2, v155));
            }
            if ((v205 & 7) != 0)
            {
              v157 = (unsigned int *)(v205 & 0xFFFFFFFFFFFFFFF8);
              do
                v158 = __ldxr(v157);
              while (__stlxr(v158 - 2, v157));
            }
            if ((v206 & 7) != 0)
            {
              v159 = (unsigned int *)(v206 & 0xFFFFFFFFFFFFFFF8);
              do
                v160 = __ldxr(v159);
              while (__stlxr(v160 - 2, v159));
            }
            if ((v207 & 7) != 0)
            {
              v161 = (unsigned int *)(v207 & 0xFFFFFFFFFFFFFFF8);
              do
                v162 = __ldxr(v161);
              while (__stlxr(v162 - 2, v161));
            }
            if ((v208 & 7) != 0)
            {
              v163 = (unsigned int *)(v208 & 0xFFFFFFFFFFFFFFF8);
              do
                v164 = __ldxr(v163);
              while (__stlxr(v164 - 2, v163));
            }
            qword_1F03B5150 = v114;
            __cxa_guard_release(&qword_1F03B5158);
          }
          v86 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_1DCB44B94(qword_1F03B5150, &v209);
          if ((pxrInternal__aapl__pxrReserved__::TfToken *)(qword_1F03B5150 + 8) != v86)
          {
            v88 = *((_QWORD *)v86 + 5);
            v89 = (void *)MEMORY[0x1E0CB3940];
            if ((v209 & 0xFFFFFFFFFFFFFFF8) != 0)
              EmptyString = (v209 & 0xFFFFFFFFFFFFFFF8) + 16;
            else
              EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v86);
            if (*(char *)(EmptyString + 23) < 0)
              EmptyString = *(_QWORD *)EmptyString;
            objc_msgSend_stringWithUTF8String_(v89, v87, EmptyString, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182);
            v91 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_propertyNamed_(v30, v92, (uint64_t)v91);
            v93 = (void *)objc_claimAutoreleasedReturnValue();
            v96 = v93;
            if (!v93 || objc_msgSend_semantic(v93, v94, v95) != v88)
            {
              v97 = [MDLMaterialProperty alloc];
              v99 = objc_msgSend_initWithName_semantic_(v97, v98, (uint64_t)v91, v88);

              v96 = (void *)v99;
            }
            v219 = v193;
            sub_1DCB95A04(v96, (uint64_t)v84, v192, a3, a4, a5, &v219, a6);
            objc_msgSend_setProperty_(v30, v100, (uint64_t)v96);
            if (v88 == 20)
            {
              v187 = *(double *)v219.i64;
              if ((vminvq_u32((uint32x4_t)vceqq_f32(v219, v193)) & 0x80000000) == 0)
              {
                objc_msgSend_propertyNamed_(v30, v101, (uint64_t)CFSTR("displacementscale"));
                v102 = (void *)objc_claimAutoreleasedReturnValue();
                v105 = v102;
                if (!v102 || objc_msgSend_semantic(v102, v103, v104) != 21)
                {
                  v108 = [MDLMaterialProperty alloc];
                  v110 = objc_msgSend_initWithName_semantic_(v108, v109, (uint64_t)CFSTR("displacementscale"), 21);

                  v105 = (void *)v110;
                }
                objc_msgSend_setFloat4Value_(v105, v106, v107, v187);
                objc_msgSend_setProperty_(v30, v111, (uint64_t)v105);

              }
            }

          }
          if ((v209 & 7) != 0)
          {
            v112 = (unsigned int *)(v209 & 0xFFFFFFFFFFFFFFF8);
            do
              v113 = __ldxr(v112);
            while (__stlxr(v113 - 2, v112));
          }
          v84 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)((char *)v84 + 32);
        }
        v219.i64[0] = (uint64_t)v210;
        sub_1DCB9D414((void ***)&v219);
        if ((v211 & 7) != 0)
        {
          v165 = (unsigned int *)(v211 & 0xFFFFFFFFFFFFFFF8);
          do
            v166 = __ldxr(v165);
          while (__stlxr(v166 - 2, v165));
        }
      }
      else
      {
        v30 = v19;
      }
      if ((v213 & 7) != 0)
      {
        v167 = (unsigned int *)(v213 & 0xFFFFFFFFFFFFFFF8);
        do
          v168 = __ldxr(v167);
        while (__stlxr(v168 - 2, v167));
      }
      MEMORY[0x1DF0D1104](&v214);
      v19 = v30;
    }
    v17 += 32;
  }
  while (v17 != v186);
  v14 = v19;

LABEL_134:
  v219.i64[0] = (uint64_t)&v216;
  sub_1DCB9D4FC((void ***)&v219);

  MEMORY[0x1DF0D0F54](v218);
LABEL_135:

  return v14;
}

void sub_1DCB9711C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a71;
  uint64_t v71;
  _QWORD *v72;
  void *v73;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int v117;

  while (1)
  {
    v77 = *(a22 - 2);
    a22 -= 2;
    v76 = v77;
    if ((v77 & 7) != 0)
    {
      v78 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
      do
        v79 = __ldxr(v78);
      while (__stlxr(v79 - 2, v78));
    }
    if (a22 == &STACK[0x220])
    {
      if ((a45 & 7) != 0)
      {
        v80 = (unsigned int *)(a45 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((a46 & 7) != 0)
      {
        v82 = (unsigned int *)(a46 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((a47 & 7) != 0)
      {
        v84 = (unsigned int *)(a47 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((a48 & 7) != 0)
      {
        v86 = (unsigned int *)(a48 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((a49 & 7) != 0)
      {
        v88 = (unsigned int *)(a49 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((a50 & 7) != 0)
      {
        v90 = (unsigned int *)(a50 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((a51 & 7) != 0)
      {
        v92 = (unsigned int *)(a51 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((a52 & 7) != 0)
      {
        v94 = (unsigned int *)(a52 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((a53 & 7) != 0)
      {
        v96 = (unsigned int *)(a53 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      if ((a54 & 7) != 0)
      {
        v98 = (unsigned int *)(a54 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      if ((a55 & 7) != 0)
      {
        v100 = (unsigned int *)(a55 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      if ((a56 & 7) != 0)
      {
        v102 = (unsigned int *)(a56 & 0xFFFFFFFFFFFFFFF8);
        do
          v103 = __ldxr(v102);
        while (__stlxr(v103 - 2, v102));
      }
      if ((a57 & 7) != 0)
      {
        v104 = (unsigned int *)(a57 & 0xFFFFFFFFFFFFFFF8);
        do
          v105 = __ldxr(v104);
        while (__stlxr(v105 - 2, v104));
      }
      if ((a58 & 7) != 0)
      {
        v106 = (unsigned int *)(a58 & 0xFFFFFFFFFFFFFFF8);
        do
          v107 = __ldxr(v106);
        while (__stlxr(v107 - 2, v106));
      }
      if ((a59 & 7) != 0)
      {
        v108 = (unsigned int *)(a59 & 0xFFFFFFFFFFFFFFF8);
        do
          v109 = __ldxr(v108);
        while (__stlxr(v109 - 2, v108));
      }
      MEMORY[0x1DF0D228C](v71, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_1F03B5158);
      if ((a60 & 7) != 0)
      {
        v110 = (unsigned int *)(a60 & 0xFFFFFFFFFFFFFFF8);
        do
          v111 = __ldxr(v110);
        while (__stlxr(v111 - 2, v110));
      }
      v72[16] = &a61;
      sub_1DCB9D414((void ***)&STACK[0x220]);
      v112 = v72[3];
      if ((v112 & 7) != 0)
      {
        v113 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
        do
          v114 = __ldxr(v113);
        while (__stlxr(v114 - 2, v113));
      }
      v115 = v72[5];
      if ((v115 & 7) != 0)
      {
        v116 = (unsigned int *)(v115 & 0xFFFFFFFFFFFFFFF8);
        do
          v117 = __ldxr(v116);
        while (__stlxr(v117 - 2, v116));
      }
      MEMORY[0x1DF0D1104](&a67);

      v72[16] = &a71;
      sub_1DCB9D4FC((void ***)&STACK[0x220]);

      MEMORY[0x1DF0D0F54](&STACK[0x208]);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_1DCB976FC(pxrInternal__aapl__pxrReserved__::UsdShadeShader *a1, uint64_t **a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;
  __int128 *EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  const void **v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t result;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[8];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  MEMORY[0x1DF0D1254](&v31, "varname");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31);
  if ((v31 & 7) != 0)
  {
    v4 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if (sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)v33)
    && (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) != 0)
  {
    v31 = 0u;
    v32 = 0u;
    MEMORY[0x1DF0D1254](&v28, "result");
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28);
    if ((v28 & 7) != 0)
    {
      v6 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    if ((pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput() & 1) != 0)
    {
      *(_QWORD *)&v28 = MEMORY[0x1DF0D19D4](&v31);
      if (!atomic_load(MEMORY[0x1E0DF2618]))
        sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
      {
        v30 = 0;
        if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource())
        {
          v28 = 0u;
          v29 = 0u;
          v24 = 1;
          v25 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          v27 = 0;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          *((_QWORD *)&v29 + 1) = 0;
          *(_QWORD *)&v28 = MEMORY[0x1E0DF3148] + 16;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v26);
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
          MEMORY[0x1DF0D1254](&v37, "frame:stPrimvarName");
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v28, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v37);
          if ((v37 & 7) != 0)
          {
            v9 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
            do
              v10 = __ldxr(v9);
            while (__stlxr(v10 - 2, v9));
          }
          if (sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v24))
          {
            if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
            {
              v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
              if ((_DWORD)v11)
              {
                if ((v30 & 0xFFFFFFFFFFFFFFF8) != 0)
                  EmptyString = (__int128 *)((v30 & 0xFFFFFFFFFFFFFFF8) + 16);
                else
                  EmptyString = (__int128 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
                v37 = (unint64_t)EmptyString;
                *((_DWORD *)sub_1DCAD33AC(a2, (const void **)EmptyString, (uint64_t)&unk_1DCC58300, (__int128 **)&v37)
                + 14) = -1;
              }
            }
          }
          if ((v27 & 7) != 0)
          {
            v15 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
            do
              v16 = __ldxr(v15);
            while (__stlxr(v16 - 2, v15));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v26);
          if (v25)
            sub_1DCAEED94(v25);
          MEMORY[0x1DF0D1104](&v28);
        }
        else
        {
          v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
          if ((_DWORD)v13)
          {
            if ((v30 & 0xFFFFFFFFFFFFFFF8) != 0)
              v14 = (const void **)((v30 & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v14 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
            *(_QWORD *)&v28 = v14;
            *((_DWORD *)sub_1DCAD33AC(a2, v14, (uint64_t)&unk_1DCC58300, (__int128 **)&v28) + 14) = -1;
          }
        }
        if ((v30 & 7) != 0)
        {
          v17 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
      }
    }
    if ((BYTE8(v32) & 7) != 0)
    {
      v19 = (unsigned int *)(*((_QWORD *)&v32 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v32);
    if (*((_QWORD *)&v31 + 1))
      sub_1DCAEED94(*((uint64_t *)&v31 + 1));
  }
  if ((v36 & 7) != 0)
  {
    v21 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v35);
  result = v34;
  if (v34)
    return sub_1DCAEED94(v34);
  return result;
}

void sub_1DCB97AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  va_list va;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v17 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);
  v22 = va_arg(va1, _QWORD);
  v23 = va_arg(va1, _QWORD);
  v10 = *(_QWORD *)(v7 + 40);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  if ((a3 & 7) != 0)
  {
    v13 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  MEMORY[0x1DF0D1104]((uint64_t *)va);
  if ((v23 & 7) != 0)
  {
    v15 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  sub_1DCB93F00((uint64_t)va1);
  sub_1DCB93EA0(v8 - 96);
  _Unwind_Resume(a1);
}

void sub_1DCB97C24(pxrInternal__aapl__pxrReserved__::UsdShadeShader *a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v8;
  int IsA;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  _BOOL4 v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(a1);
  v2 = v44;
  v3 = v45;
  if (v44 != v45)
  {
    v4 = MEMORY[0x1E0DF3148] + 16;
    v5 = MEMORY[0x1E0DF30E0] + 16;
    do
    {
      if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource())
      {
        v42 = 0u;
        v43 = 0u;
        LODWORD(v38) = 1;
        v39 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v41 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        *((_QWORD *)&v43 + 1) = 0;
        *(_QWORD *)&v42 = v4;
        if ((v41 & 7) != 0)
        {
          v6 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
          do
            v7 = __ldxr(v6);
          while (__stlxr(v7 - 2, v6));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v40);
        if (v39)
          sub_1DCAEED94(v39);
        v37 = 0;
        v36 = 0;
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
        v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)sub_1DCB4FB38((uint64_t)&v38, (uint64_t *)&v42 + 1, &v43);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v8);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
        if ((v41 & 7) != 0)
        {
          v10 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
          do
            v11 = __ldxr(v10);
          while (__stlxr(v11 - 2, v10));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v40);
        if (v39)
          sub_1DCAEED94(v39);
        if (IsA)
        {
          memset(v35, 0, sizeof(v35));
          sub_1DCB4FB38((uint64_t)&v38, (uint64_t *)&v42 + 1, &v43);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v35[0] = v5;
          if ((v41 & 7) != 0)
          {
            v12 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
            do
              v13 = __ldxr(v12);
            while (__stlxr(v13 - 2, v12));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v40);
          if (v39)
            sub_1DCAEED94(v39);
          v34 = 0;
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v35);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
          if ((v41 & 7) != 0)
          {
            v14 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
            do
              v15 = __ldxr(v14);
            while (__stlxr(v15 - 2, v14));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v40);
          if (v39)
            sub_1DCAEED94(v39);
          MEMORY[0x1DF0D1254](&v38, "PxrPrimvarReader");
          v16 = v38;
          if ((v34 & 0xFFFFFFFFFFFFFFF8) == (v38 & 0xFFFFFFFFFFFFFFF8))
          {
            v19 = 1;
          }
          else
          {
            MEMORY[0x1DF0D1254](v32, "PxrPrimvarReader_float2");
            v17 = v32[0];
            if ((v34 & 0xFFFFFFFFFFFFFFF8) == (v32[0] & 0xFFFFFFFFFFFFFFF8))
            {
              v19 = 1;
            }
            else
            {
              MEMORY[0x1DF0D1254](&v33, "UsdPrimvarReader_float2");
              v18 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
              v19 = (v34 & 0xFFFFFFFFFFFFFFF8) == (v33 & 0xFFFFFFFFFFFFFFF8);
              if ((v33 & 7) != 0)
              {
                do
                  v20 = __ldxr(v18);
                while (__stlxr(v20 - 2, v18));
              }
              v17 = v32[0];
            }
            if ((v17 & 7) != 0)
            {
              v21 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
              do
                v22 = __ldxr(v21);
              while (__stlxr(v22 - 2, v21));
            }
            v16 = v38;
          }
          if ((v16 & 7) != 0)
          {
            v23 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
            do
              v24 = __ldxr(v23);
            while (__stlxr(v24 - 2, v23));
          }
          if (v19)
          {
            sub_1DCB4FB38((uint64_t)&v38, (uint64_t *)&v42 + 1, &v43);
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            v32[0] = MEMORY[0x1E0DF30E0] + 16;
            sub_1DCB976FC((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v32, a2);
            MEMORY[0x1DF0D0EA0](v32);
            if ((v41 & 7) != 0)
            {
              v25 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
              do
                v26 = __ldxr(v25);
              while (__stlxr(v26 - 2, v25));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_1DCAEEC34((uint64_t)&v40);
            if (v39)
              sub_1DCAEED94(v39);
          }
          if ((v34 & 7) != 0)
          {
            v27 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
            do
              v28 = __ldxr(v27);
            while (__stlxr(v28 - 2, v27));
          }
          MEMORY[0x1DF0D0EA0](v35);
        }
        if ((v37 & 7) != 0)
        {
          v29 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
          do
            v30 = __ldxr(v29);
          while (__stlxr(v30 - 2, v29));
        }
        MEMORY[0x1DF0D1104](&v42);
      }
      v2 += 32;
    }
    while (v2 != v3);
  }
  *(_QWORD *)&v42 = &v44;
  sub_1DCB9D414((void ***)&v42);
}

