void sub_1DCB98050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  uint64_t v25;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;

  if ((a11 & 7) != 0)
  {
    v27 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((a21 & 7) != 0)
  {
    v29 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  if ((a15 & 7) != 0)
  {
    v31 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  MEMORY[0x1DF0D0EA0](&a16);
  if ((a20 & 7) != 0)
  {
    v33 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  MEMORY[0x1DF0D1104](&a25);
  a25 = (void **)(v25 - 112);
  sub_1DCB9D414(&a25);
  _Unwind_Resume(a1);
}

void sub_1DCB98194(pxrInternal__aapl__pxrReserved__::UsdShadeShader *a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD v13[3];
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(a1);
  v3 = v22;
  v4 = v23;
  if (v22 != v23)
  {
    v5 = MEMORY[0x1E0DF3148] + 16;
    v6 = MEMORY[0x1E0DF30E0] + 16;
    do
    {
      if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource())
      {
        v20 = 0u;
        v21 = 0u;
        v16 = 1;
        v17 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v19 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        *((_QWORD *)&v21 + 1) = 0;
        *(_QWORD *)&v20 = v5;
        if ((v19 & 7) != 0)
        {
          v7 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stlxr(v8 - 2, v7));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v18);
        if (v17)
          sub_1DCAEED94(v17);
        v15 = 0;
        v14 = 0;
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
        sub_1DCB4FB38((uint64_t)&v16, (uint64_t *)&v20 + 1, &v21);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v13[0] = v6;
        sub_1DCB97C24((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v13, a2);
        MEMORY[0x1DF0D0EA0](v13);
        if ((v19 & 7) != 0)
        {
          v9 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
          do
            v10 = __ldxr(v9);
          while (__stlxr(v10 - 2, v9));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v18);
        if (v17)
          sub_1DCAEED94(v17);
        if ((v15 & 7) != 0)
        {
          v11 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
        MEMORY[0x1DF0D1104](&v20);
      }
      v3 += 32;
    }
    while (v3 != v4);
  }
  *(_QWORD *)&v20 = &v22;
  sub_1DCB9D414((void ***)&v20);
}

uint64_t sub_1DCB9840C(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t **a2)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];

  result = sub_1DCB4F88C(a1);
  if ((_DWORD)result)
  {
    v29[1] = 0;
    v29[2] = 0;
    v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v29[0] = MEMORY[0x1E0DF3108] + 16;
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs(v4);
    v5 = v27;
    v6 = v28;
    if (v27 != v28)
    {
      v7 = MEMORY[0x1E0DF3148] + 16;
      v8 = MEMORY[0x1E0DF30E0] + 16;
      do
      {
        if ((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource() & 1) != 0)
        {
          v25 = 0u;
          v26 = 0u;
          LODWORD(v21) = 1;
          v22 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          v24 = 0;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          *((_QWORD *)&v26 + 1) = 0;
          *(_QWORD *)&v25 = v7;
          if ((v24 & 7) != 0)
          {
            v9 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
            do
              v10 = __ldxr(v9);
            while (__stlxr(v10 - 2, v9));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v23);
          if (v22)
            sub_1DCAEED94(v22);
          v20 = 0;
          v19 = 0;
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
          MEMORY[0x1DF0D1254](&v21, "surface");
          v11 = v20;
          v12 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
          if ((v21 & 7) != 0)
          {
            do
              v13 = __ldxr(v12);
            while (__stlxr(v13 - 2, v12));
          }
          if ((unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8) == v12)
          {
            sub_1DCB4FB38((uint64_t)&v21, (uint64_t *)&v25 + 1, &v26);
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            v18[0] = v8;
            sub_1DCB98194((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v18, a2);
            MEMORY[0x1DF0D0EA0](v18);
            if ((v24 & 7) != 0)
            {
              v14 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
              do
                v15 = __ldxr(v14);
              while (__stlxr(v15 - 2, v14));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_1DCAEEC34((uint64_t)&v23);
            if (v22)
              sub_1DCAEED94(v22);
          }
          if ((v20 & 7) != 0)
          {
            v16 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
            do
              v17 = __ldxr(v16);
            while (__stlxr(v17 - 2, v16));
          }
          MEMORY[0x1DF0D1104](&v25);
        }
        v5 += 32;
      }
      while (v5 != v6);
    }
    *(_QWORD *)&v25 = &v27;
    sub_1DCB9D4FC((void ***)&v25);
    return MEMORY[0x1DF0D0F54](v29);
  }
  return result;
}

void sub_1DCB98674(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D0F54](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_1DCB98710(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  *((_QWORD *)&v18 + 1) = 0;
  *(_QWORD *)&v17 = MEMORY[0x1E0DF3158] + 16;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v17);
  MEMORY[0x1DF0D1164](&v17);
  v4 = v27;
  v3 = v28;
  if (v28 == v27)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *((_QWORD *)&v18 + 1) = 0;
    *(_QWORD *)&v17 = MEMORY[0x1E0DF3158] + 16;
    if (!atomic_load(MEMORY[0x1E0DF2580]))
      sub_1DCB9C22C(MEMORY[0x1E0DF2580]);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
    MEMORY[0x1DF0D1164](&v17);
    sub_1DCB4FB38((uint64_t)&v17, &v21, &v22);
    sub_1DCB9840C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v17, a2);
    if ((BYTE8(v18) & 7) != 0)
    {
      v15 = (unsigned int *)(*((_QWORD *)&v18 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v18);
    if (*((_QWORD *)&v17 + 1))
      sub_1DCAEED94(*((uint64_t *)&v17 + 1));
    MEMORY[0x1DF0D0F54](&v20);
  }
  else
  {
    v5 = MEMORY[0x1E0DF3158] + 16;
    do
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_1DCB4FB38((uint64_t)&v20, (uint64_t *)(v4 + 8), (_DWORD *)(v4 + 16));
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *((_QWORD *)&v18 + 1) = 0;
      *(_QWORD *)&v17 = v5;
      if (!atomic_load(MEMORY[0x1E0DF2580]))
        sub_1DCB9C22C(MEMORY[0x1E0DF2580]);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
      MEMORY[0x1DF0D1164](&v17);
      if ((v23 & 7) != 0)
      {
        v7 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stlxr(v8 - 2, v7));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v22);
      if (v21)
        sub_1DCAEED94(v21);
      sub_1DCB4FB38((uint64_t)&v17, &v25, &v26);
      sub_1DCB9840C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v17, a2);
      if ((BYTE8(v18) & 7) != 0)
      {
        v9 = (unsigned int *)(*((_QWORD *)&v18 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v18);
      if (*((_QWORD *)&v17 + 1))
        sub_1DCAEED94(*((uint64_t *)&v17 + 1));
      MEMORY[0x1DF0D0F54](&v24);
      v4 += 24;
    }
    while (v4 != v3);
    if (v28 != v27)
    {
      v17 = 0u;
      v18 = 0u;
      v19 = 0;
      v20 = 0xFFEFFFFFFFFFFFFFLL;
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetUnassignedIndices();
      if ((_QWORD)v17)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v23 = 0;
        v20 = MEMORY[0x1E0DF3158] + 16;
        if (!atomic_load(MEMORY[0x1E0DF2580]))
          sub_1DCB9C22C(MEMORY[0x1E0DF2580]);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
        MEMORY[0x1DF0D1164](&v20);
        sub_1DCB4FB38((uint64_t)&v20, &v25, &v26);
        sub_1DCB9840C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v20, a2);
        if ((v23 & 7) != 0)
        {
          v12 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
          do
            v13 = __ldxr(v12);
          while (__stlxr(v13 - 2, v12));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v22);
        if (v21)
          sub_1DCAEED94(v21);
        MEMORY[0x1DF0D0F54](&v24);
      }
      sub_1DCAEEE78((uint64_t)&v17);
    }
  }
  *(_QWORD *)&v17 = &v27;
  sub_1DCB9C1A0((void ***)&v17);
}

void sub_1DCB98BF0(uint64_t a1, void *a2, uint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  const char *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  id v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  unsigned int *v40;
  unsigned int v41;
  void *v43;
  unsigned int *v44;
  unsigned int v45;
  const char *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  id v50;
  void *v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  __int128 v56;
  uint64_t v57;
  void *v59;
  unsigned int *v60;
  unsigned int v61;
  const char *v62;
  id v63;
  void *v64;
  uint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t v94;
  void **v95;
  uint64_t *v96;
  uint64_t v97;
  id v101;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  unint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t *v123;

  v101 = a2;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  *(_QWORD *)&v113 = 0;
  v111 = MEMORY[0x1E0DF3158] + 16;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v111);
  MEMORY[0x1DF0D1164](&v111);
  v115 = 0;
  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v119 = (void *)(MEMORY[0x1E0DF30A8] + 16);
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDoubleSidedAttr(v8);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>();
  if ((v113 & 7) != 0)
  {
    v9 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v112 + 8);
  if ((_QWORD)v112)
    sub_1DCAEED94(v112);
  MEMORY[0x1DF0D0CE4](&v119);
  v11 = v116;
  v97 = v117;
  if (v117 == v116)
  {
    v103 = 0u;
    v104 = 0uLL;
    LODWORD(v103) = 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v109 = 0uLL;
    *(_QWORD *)&v110 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(_QWORD *)&v113 = 0;
    v111 = MEMORY[0x1E0DF3158] + 16;
    if (!atomic_load(MEMORY[0x1E0DF2580]))
      sub_1DCB9C22C(MEMORY[0x1E0DF2580]);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
    MEMORY[0x1DF0D1164](&v111);
    sub_1DCB4FB38((uint64_t)&v111, (uint64_t *)&v109 + 1, &v110);
    sub_1DCB9646C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v111, v101, a4, a5, a6, a7);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    if ((v113 & 7) != 0)
    {
      v60 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
      do
        v61 = __ldxr(v60);
      while (__stlxr(v61 - 2, v60));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v112 + 8);
    if ((_QWORD)v112)
      sub_1DCAEED94(v112);
    if (v115)
      objc_msgSend_setMaterialFace_(v59, v62, 2);
    v111 = 2;
    v112 = 0u;
    v113 = 0u;
    *(_QWORD *)&v114 = 0;
    v63 = v59;
    v64 = v63;
    *((_QWORD *)&v114 + 1) = v63;
    v65 = a3;
    v66 = a3[56];
    v67 = a3[57];
    if (v66 >= v67)
    {
      v71 = a3[55];
      v72 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v66 - v71) >> 3);
      v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) > 0x492492492492492)
        sub_1DCAE4C44();
      v74 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v67 - v71) >> 3);
      if (2 * v74 > v73)
        v73 = 2 * v74;
      if (v74 >= 0x249249249249249)
        v75 = 0x492492492492492;
      else
        v75 = v73;
      v123 = a3 + 57;
      v76 = (char *)sub_1DCB871FC((uint64_t)(a3 + 57), v75);
      v77 = (uint64_t)&v76[56 * v72];
      v119 = v76;
      v120 = v77;
      v122 = &v76[56 * v78];
      *(_QWORD *)v77 = v111;
      v79 = v112;
      *(_OWORD *)(v77 + 24) = v113;
      *(_OWORD *)(v77 + 8) = v79;
      v112 = 0u;
      v113 = 0u;
      v80 = v114;
      *((_QWORD *)&v114 + 1) = 0;
      *(_OWORD *)(v77 + 40) = v80;
      *(_QWORD *)&v114 = 0;
      v121 = v77 + 56;
      sub_1DCACB638(a3 + 55, &v119);
      v70 = a3[56];
      sub_1DCACB6AC(&v119);
      v65 = a3;
      v68 = (void *)*((_QWORD *)&v114 + 1);
    }
    else
    {
      v68 = 0;
      *(_QWORD *)v66 = 2;
      v69 = v112;
      *(_OWORD *)(v66 + 24) = v113;
      *(_OWORD *)(v66 + 8) = v69;
      v112 = 0u;
      v113 = 0u;
      *(_QWORD *)(v66 + 40) = 0;
      v114 = 0uLL;
      *(_QWORD *)(v66 + 48) = v63;
      v70 = v66 + 56;
    }
    v65[56] = v70;

    sub_1DCAEEE78((uint64_t)&v112);
    MEMORY[0x1DF0D0F54](&v109);
    if ((BYTE8(v104) & 7) != 0)
    {
      v81 = (unsigned int *)(*((_QWORD *)&v104 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v82 = __ldxr(v81);
      while (__stlxr(v82 - 2, v81));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v104);
    if (*((_QWORD *)&v103 + 1))
      sub_1DCAEED94(*((uint64_t *)&v103 + 1));
  }
  else
  {
    v96 = a3 + 55;
    v94 = (uint64_t)(a3 + 57);
    v95 = (void **)(MEMORY[0x1E0DF3158] + 16);
    do
    {
      v109 = 0u;
      v110 = 0u;
      LODWORD(v109) = 1;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      *((_QWORD *)&v110 + 1) = 0;
      v106 = 0;
      v107 = 0;
      v108 = 0;
      sub_1DCB4FB38((uint64_t)&v119, (uint64_t *)(v11 + 8), (_DWORD *)(v11 + 16));
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *(_QWORD *)&v113 = 0;
      v111 = (unint64_t)v95;
      if (!atomic_load(MEMORY[0x1E0DF2580]))
        sub_1DCB9C22C(MEMORY[0x1E0DF2580]);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
      MEMORY[0x1DF0D1164](&v111);
      if ((v122 & 7) != 0)
      {
        v13 = (unsigned int *)((unint64_t)v122 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v121);
      if (v120)
        sub_1DCAEED94(v120);
      sub_1DCB4FB38((uint64_t)&v111, &v107, &v108);
      sub_1DCB9646C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v111, v101, a4, a5, a6, a7);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if ((v113 & 7) != 0)
      {
        v16 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v112 + 8);
      if ((_QWORD)v112)
        sub_1DCAEED94(v112);
      v105 = 0;
      v103 = 0u;
      v104 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v11);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
      if ((v113 & 7) != 0)
      {
        v18 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v112 + 8);
      if ((_QWORD)v112)
        sub_1DCAEED94(v112);
      if (v115)
        objc_msgSend_setMaterialFace_(v15, v20, 2);
      v21 = a5;
      v112 = v103;
      v113 = v104;
      v111 = 5;
      *(_QWORD *)&v114 = v105;
      if (v105)
      {
        v22 = (unint64_t *)(v105 - 16);
        if (*((_QWORD *)&v113 + 1))
          v22 = (unint64_t *)*((_QWORD *)&v113 + 1);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = v15;
      *((_QWORD *)&v114 + 1) = v24;
      v25 = a3;
      v26 = a3[56];
      v27 = a3[57];
      if (v26 >= v27)
      {
        v31 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v26 - *v96) >> 3);
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) > 0x492492492492492)
          sub_1DCAE4C44();
        v33 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v27 - *v96) >> 3);
        if (2 * v33 > v32)
          v32 = 2 * v33;
        if (v33 >= 0x249249249249249)
          v34 = 0x492492492492492;
        else
          v34 = v32;
        v123 = a3 + 57;
        v35 = (char *)sub_1DCB871FC(v94, v34);
        v36 = (uint64_t)&v35[56 * v31];
        v119 = v35;
        v120 = v36;
        v122 = &v35[56 * v37];
        *(_QWORD *)v36 = v111;
        v38 = v112;
        *(_OWORD *)(v36 + 24) = v113;
        *(_OWORD *)(v36 + 8) = v38;
        v112 = 0u;
        v113 = 0u;
        v39 = v114;
        *((_QWORD *)&v114 + 1) = 0;
        *(_OWORD *)(v36 + 40) = v39;
        *(_QWORD *)&v114 = 0;
        v121 = v36 + 56;
        sub_1DCACB638(v96, &v119);
        v30 = a3[56];
        sub_1DCACB6AC(&v119);
        v25 = a3;
      }
      else
      {
        *(_QWORD *)v26 = v111;
        v28 = v112;
        *(_OWORD *)(v26 + 24) = v113;
        *(_OWORD *)(v26 + 8) = v28;
        v112 = 0u;
        v113 = 0u;
        v29 = v114;
        *((_QWORD *)&v114 + 1) = 0;
        *(_OWORD *)(v26 + 40) = v29;
        *(_QWORD *)&v114 = 0;
        v30 = v26 + 56;
      }
      v25[56] = v30;

      sub_1DCAEEE78((uint64_t)&v112);
      sub_1DCAEEE78((uint64_t)&v103);

      MEMORY[0x1DF0D0F54](&v106);
      if ((BYTE8(v110) & 7) != 0)
      {
        v40 = (unsigned int *)(*((_QWORD *)&v110 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      a5 = v21;
      sub_1DCAEEC34((uint64_t)&v110);
      if (*((_QWORD *)&v109 + 1))
        sub_1DCAEED94(*((uint64_t *)&v109 + 1));
      v11 += 24;
    }
    while (v11 != v97);
    if (v117 != v116)
    {
      v105 = 0;
      v103 = 0u;
      v104 = 0u;
      v111 = 0xFFEFFFFFFFFFFFFFLL;
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetUnassignedIndices();
      if ((_QWORD)v103)
      {
        v109 = 0u;
        v110 = 0u;
        LODWORD(v109) = 1;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        *((_QWORD *)&v110 + 1) = 0;
        v106 = 0;
        v107 = 0;
        v108 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        *(_QWORD *)&v113 = 0;
        v111 = MEMORY[0x1E0DF3158] + 16;
        if (!atomic_load(MEMORY[0x1E0DF2580]))
          sub_1DCB9C22C(MEMORY[0x1E0DF2580]);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
        MEMORY[0x1DF0D1164](&v111);
        sub_1DCB4FB38((uint64_t)&v111, &v107, &v108);
        sub_1DCB9646C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v111, v101, a4, v21, a6, a7);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        if ((v113 & 7) != 0)
        {
          v44 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
          do
            v45 = __ldxr(v44);
          while (__stlxr(v45 - 2, v44));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v112 + 8);
        if ((_QWORD)v112)
          sub_1DCAEED94(v112);
        if (v115)
          objc_msgSend_setMaterialFace_(v43, v46, 2);
        v111 = 5;
        v112 = v103;
        v113 = v104;
        v47 = v105;
        *(_QWORD *)&v114 = v105;
        if (v105)
        {
          v48 = (unint64_t *)*((_QWORD *)&v113 + 1);
          if (!*((_QWORD *)&v113 + 1))
            v48 = (unint64_t *)(v105 - 16);
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        v50 = v43;
        v51 = v50;
        *((_QWORD *)&v114 + 1) = v50;
        v52 = a3;
        v54 = a3[56];
        v53 = a3[57];
        if (v54 >= v53)
        {
          v83 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v54 - *v96) >> 3);
          v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) > 0x492492492492492)
            sub_1DCAE4C44();
          v85 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v53 - *v96) >> 3);
          if (2 * v85 > v84)
            v84 = 2 * v85;
          if (v85 >= 0x249249249249249)
            v86 = 0x492492492492492;
          else
            v86 = v84;
          v123 = a3 + 57;
          v87 = (char *)sub_1DCB871FC(v94, v86);
          v88 = (uint64_t)&v87[56 * v83];
          v119 = v87;
          v120 = v88;
          v122 = &v87[56 * v89];
          *(_QWORD *)v88 = v111;
          v90 = v112;
          *(_OWORD *)(v88 + 24) = v113;
          *(_OWORD *)(v88 + 8) = v90;
          v112 = 0u;
          v113 = 0u;
          v91 = v114;
          *((_QWORD *)&v114 + 1) = 0;
          *(_OWORD *)(v88 + 40) = v91;
          *(_QWORD *)&v114 = 0;
          v121 = v88 + 56;
          sub_1DCACB638(v96, &v119);
          v57 = a3[56];
          sub_1DCACB6AC(&v119);
          v52 = a3;
          v55 = (void *)*((_QWORD *)&v114 + 1);
        }
        else
        {
          v55 = 0;
          *(_QWORD *)v54 = 5;
          v56 = v112;
          *(_OWORD *)(v54 + 24) = v113;
          *(_OWORD *)(v54 + 8) = v56;
          v112 = 0u;
          v113 = 0u;
          *(_QWORD *)(v54 + 40) = v47;
          v114 = 0uLL;
          *(_QWORD *)(v54 + 48) = v50;
          v57 = v54 + 56;
        }
        v52[56] = v57;

        sub_1DCAEEE78((uint64_t)&v112);
        MEMORY[0x1DF0D0F54](&v106);
        if ((BYTE8(v110) & 7) != 0)
        {
          v92 = (unsigned int *)(*((_QWORD *)&v110 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v93 = __ldxr(v92);
          while (__stlxr(v93 - 2, v92));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v110);
        if (*((_QWORD *)&v109 + 1))
          sub_1DCAEED94(*((uint64_t *)&v109 + 1));
      }
      sub_1DCAEEE78((uint64_t)&v103);
    }
  }
  v111 = (unint64_t)&v116;
  sub_1DCB9C1A0((void ***)&v111);

}

void sub_1DCB99794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35)
{
  void *v35;
  uint64_t v36;

  sub_1DCACB6AC((void **)(v36 - 136));
  sub_1DCB43F88((uint64_t)&a35);

  MEMORY[0x1DF0D0F54](&a28);
  sub_1DCB4FAD8((uint64_t)&a31);
  sub_1DCAEEE78((uint64_t)&a23);
  a35 = (void **)(v36 - 160);
  sub_1DCB9C1A0(&a35);

  _Unwind_Resume(a1);
}

void sub_1DCB999AC(uint64_t a1@<X0>, void *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdPrim *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  id v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::VtValue *v15;
  _QWORD v16[3];
  char **v17;
  char *v18[2];
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];

  v11 = a2;
  v23[1] = 0;
  v23[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v23[0] = MEMORY[0x1E0DF3098] + 16;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_OWORD *)(a6 + 176) = 0u;
  *(_OWORD *)(a6 + 192) = 0u;
  *(_OWORD *)(a6 + 208) = 0u;
  *(_OWORD *)(a6 + 224) = 0u;
  *(_OWORD *)(a6 + 240) = 0u;
  *(_OWORD *)(a6 + 256) = 0u;
  *(_OWORD *)(a6 + 272) = 0u;
  *(_OWORD *)(a6 + 288) = 0u;
  *(_OWORD *)(a6 + 304) = 0u;
  *(_OWORD *)(a6 + 320) = 0u;
  *(_OWORD *)(a6 + 336) = 0u;
  *(_OWORD *)(a6 + 352) = 0u;
  *(_OWORD *)(a6 + 368) = 0u;
  *(_OWORD *)(a6 + 384) = 0u;
  *(_OWORD *)(a6 + 400) = 0u;
  *(_OWORD *)(a6 + 416) = 0u;
  *(_OWORD *)(a6 + 432) = 0u;
  *(_OWORD *)(a6 + 448) = 0u;
  v12 = (_QWORD *)sub_1DCAEEC08(a3);
  sub_1DCAEEBA4((_QWORD *)a6, v12);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetSubdivisionSchemeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v23);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  if ((v22 & 7) != 0)
  {
    v13 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v21);
  if (v20)
    sub_1DCAEED94(v20);
  if (sub_1DCB8D168((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v23)
    && ((v15 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(a6 + 8),
         *(pxrInternal__aapl__pxrReserved__::VtValue **)(a6 + 16) == v15)
     || pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(v15)))
  {
    sub_1DCB8EC68((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v23);
    sub_1DCB8D5E4((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v23);
    v18[0] = 0;
    v18[1] = 0;
    v17 = v18;
    sub_1DCB98710((uint64_t)a3, (uint64_t **)&v17);
    memset(v16, 0, sizeof(v16));
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v22 = 0;
    v19 = (void **)(MEMORY[0x1E0DF3138] + 16);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvars((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v19);
    MEMORY[0x1DF0D102C](&v19);
    LODWORD(v19) = 0;
    sub_1DCB8E550((uint64_t)a3, a1, (_QWORD *)a6);
    sub_1DCB8ED70(a3, (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v23);
    sub_1DCB92184((uint64_t)a3, a1, (_QWORD *)a6);
    sub_1DCB91AA8(a3);
    sub_1DCB98BF0((uint64_t)a3, v11, (uint64_t *)a6, (uint64_t **)&v17, a1, a4, a5);
    v19 = (void **)v16;
    sub_1DCB8C5D8(&v19);
    sub_1DCACB5E8((uint64_t)&v17, v18[0]);
  }
  else
  {
    NSLog(CFSTR("USDMeshPrim does not contain mesh data. Skipping\n"));
  }
  MEMORY[0x1DF0D0C78](v23);

}

id sub_1DCB99CE4(void *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::UsdPrim *a4, uint64_t a5, void *a6)
{
  id v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _BOOL4 v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  unsigned int *v29;
  unsigned int v30;
  float v32;
  __int128 *v33;
  int v34;
  void **p_dst;
  id v36;
  id v37;
  __int128 v38;
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;
  void *__p;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v36 = a1;
  v11 = a3;
  v37 = a6;
  v54 = *(_QWORD *)(a2 + 64);
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v55 = 0u;
  sub_1DCB999AC((uint64_t)&v54, v11, a4, a5, a2, (uint64_t)&v55);
  v53[1] = 0;
  v53[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v52 = 0;
  v53[0] = MEMORY[0x1E0DF3098] + 16;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetOrientationAttr((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)v53);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  if ((v51 & 7) != 0)
  {
    v12 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v50);
  if (v49)
    sub_1DCAEED94(v49);
  v14 = atomic_load(MEMORY[0x1E0DF24F8]);
  if (!v14)
    v14 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
  if ((_QWORD)v56 == *((_QWORD *)&v55 + 1) || !*(_QWORD *)(*((_QWORD *)&v55 + 1) + 8))
    goto LABEL_35;
  v15 = v52;
  v16 = *(_QWORD *)(v14 + 528);
  v17 = 0;
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(*((pxrInternal__aapl__pxrReserved__::VtValue **)&v55
                                                                   + 1))
    || !(_QWORD)v62
    || !*((_QWORD *)&v64 + 1))
  {
    goto LABEL_36;
  }
  if (!sub_1DCACE3D8((pxrInternal__aapl__pxrReserved__::TfToken *)&v55))
    goto LABEL_35;
  v18 = sub_1DCACB13C((uint64_t)&v55);
  v19 = v18;
  if (v18)
  {
    v20 = *((_QWORD *)&v55 + 1);
    if ((_QWORD)v56 != *((_QWORD *)&v55 + 1))
    {
      v21 = 0;
      while (1)
      {
        MEMORY[0x1DF0D1254](&v48, "normals");
        v22 = *(_QWORD *)(v20 + 96 * v21 + 56);
        v23 = (unsigned int *)((unint64_t)v48 & 0xFFFFFFFFFFFFFFF8);
        if ((v48 & 7) != 0)
        {
          do
            v24 = __ldxr(v23);
          while (__stlxr(v24 - 2, v23));
        }
        if ((unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8) == v23)
          break;
        ++v21;
        v20 = *((_QWORD *)&v55 + 1);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - *((_QWORD *)&v55 + 1)) >> 5) <= v21)
          goto LABEL_23;
      }
      sub_1DCB9A2E0((uint64_t)&v55 + 8, *((_QWORD *)&v55 + 1) + 96 * v21);
    }
  }
LABEL_23:
  if (sub_1DCACB4C4(&v55, (_BYTE *)a2, v19) && !sub_1DCAD4070((uint64_t)&v55))
  {
LABEL_35:
    v17 = 0;
    goto LABEL_36;
  }
  v25 = v15 & 0xFFFFFFFFFFFFFFF8;
  v26 = v16 & 0xFFFFFFFFFFFFFFF8;
  if ((v19 & 1) == 0)
  {
    if (!*(_BYTE *)(a2 + 32) || !sub_1DCACEEFC((uint64_t)&v55))
    {
      if (*(_BYTE *)(a2 + 27))
      {
        sub_1DCB2412C((uint64_t)&v55, 0);
      }
      else if (*(_BYTE *)(a2 + 26))
      {
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        __p = 0;
        v43 = 0;
        v44 = 0;
        sub_1DCB22D30((uint64_t)&v55, (uint64_t *)&v48, (uint64_t *)&v45, (uint64_t *)&__p);
        sub_1DCB23418((uint64_t)&v55, &v48, (uint64_t *)&v45, (uint64_t *)&__p, v25 == v26, *(float *)(a2 + 28));
        if (__p)
        {
          v43 = __p;
          operator delete(__p);
        }
        if (v45)
        {
          v46 = v45;
          operator delete(v45);
        }
        if (v48)
          operator delete(v48);
      }
    }
    if (*(_BYTE *)(a2 + 33))
    {
      if (!sub_1DCACEEFC((uint64_t)&v55))
      {
        v27 = v55 & 0xFFFFFFFFFFFFFFF8;
        if ((v55 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v28 = (const char *)(v27 + 16);
          if (*(char *)(v27 + 39) < 0)
            v28 = *(const char **)v28;
        }
        else
        {
          v28 = "";
        }
        NSLog(CFSTR("Warning: %s does not contain normal or have compute normal options specified.To compute tangent, face normal will be computed first.\n"), v28);
        sub_1DCB2412C((uint64_t)&v55, 0);
      }
      v32 = *(float *)(a2 + 36);
      v33 = (__int128 *)(a2 + 40);
      v34 = *(char *)(a2 + 63);
      if (*(_BYTE *)(a2 + 34))
      {
        if (v34 < 0)
        {
          sub_1DCACA658(&__dst, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
        }
        else
        {
          __dst = *v33;
          v41 = *(_QWORD *)(a2 + 56);
        }
        sub_1DCB25A98((uint64_t *)&v55, 0, (uint64_t)&__dst, v32);
        if ((SHIBYTE(v41) & 0x80000000) == 0)
          goto LABEL_61;
        p_dst = (void **)&__dst;
      }
      else
      {
        if (v34 < 0)
        {
          sub_1DCACA658(&v38, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
        }
        else
        {
          v38 = *v33;
          v39 = *(_QWORD *)(a2 + 56);
        }
        sub_1DCB25A98((uint64_t *)&v55, 1, (uint64_t)&v38, v32);
        if ((SHIBYTE(v39) & 0x80000000) == 0)
          goto LABEL_61;
        p_dst = (void **)&v38;
      }
      operator delete(*p_dst);
    }
  }
LABEL_61:
  if (!*(_BYTE *)(a2 + 1))
    sub_1DCACCD78((uint64_t)&v55);
  if (v25 == v26)
    sub_1DCB43E34((uint64_t)&v55);
  sub_1DCACB7FC((uint64_t)&v55, v37, v36, *(_BYTE *)a2, *(unsigned __int8 *)(a2 + 1));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_36:
  if ((v52 & 7) != 0)
  {
    v29 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  MEMORY[0x1DF0D0C78](v53);
  sub_1DCACB6DC((uint64_t)&v55);

  return v17;
}

void sub_1DCB9A1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  unsigned int *v43;
  unsigned int v44;

  if (a18 < 0)
    operator delete(__p);
  if ((a36 & 7) != 0)
  {
    v43 = (unsigned int *)(a36 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  MEMORY[0x1DF0D0C78](&a37);
  sub_1DCACB6DC((uint64_t)&a41);

  _Unwind_Resume(a1);
}

uint64_t sub_1DCB9A2E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v8;

  sub_1DCB9D858((uint64_t)&v8, a2 + 96, *(_QWORD *)(a1 + 8), a2);
  v5 = v4;
  v6 = *(_QWORD **)(a1 + 8);
  if (v6 != v4)
  {
    do
    {
      v6 -= 12;
      sub_1DCB279D4(a1 + 16, v6);
    }
    while (v6 != v5);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a2;
}

void sub_1DCB9A360(uint64_t a1@<X0>, void *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdPrim *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  id v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::UsdGeomCube *v15;
  pxrInternal__aapl__pxrReserved__::UsdGeomCone *IsA;
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *v17;
  pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *v18;
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere *v19;
  _QWORD v20[3];
  char **v21;
  char *v22[2];
  void **v23;
  pxrInternal__aapl__pxrReserved__::UsdGeomCube *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];

  v11 = a2;
  v27[1] = 0;
  v27[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v27[0] = MEMORY[0x1E0DF3098] + 16;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_OWORD *)(a6 + 176) = 0u;
  *(_OWORD *)(a6 + 192) = 0u;
  *(_OWORD *)(a6 + 208) = 0u;
  *(_OWORD *)(a6 + 224) = 0u;
  *(_OWORD *)(a6 + 240) = 0u;
  *(_OWORD *)(a6 + 256) = 0u;
  *(_OWORD *)(a6 + 272) = 0u;
  *(_OWORD *)(a6 + 288) = 0u;
  *(_OWORD *)(a6 + 304) = 0u;
  *(_OWORD *)(a6 + 320) = 0u;
  *(_OWORD *)(a6 + 336) = 0u;
  *(_OWORD *)(a6 + 352) = 0u;
  *(_OWORD *)(a6 + 368) = 0u;
  *(_OWORD *)(a6 + 384) = 0u;
  *(_OWORD *)(a6 + 400) = 0u;
  *(_OWORD *)(a6 + 416) = 0u;
  *(_OWORD *)(a6 + 432) = 0u;
  *(_OWORD *)(a6 + 448) = 0u;
  v12 = (_QWORD *)sub_1DCAEEC08(a3);
  sub_1DCAEEBA4((_QWORD *)a6, v12);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetSubdivisionSchemeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v27);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  if ((v26 & 7) != 0)
  {
    v13 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v25);
  v15 = v24;
  if (v24)
    v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomCube *)sub_1DCAEED94((uint64_t)v24);
  pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType(v15);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomCone *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((_DWORD)IsA)
  {
    sub_1DCBBD36C((_QWORD *)a6);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType(IsA);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if ((_DWORD)v17)
    {
      sub_1DCBBD7EC((_QWORD *)a6);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(v17);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if ((_DWORD)v18)
      {
        sub_1DCBBE928((_QWORD *)a6);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType(v18);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
        if ((_DWORD)v19)
        {
          sub_1DCBBDFD4((_QWORD *)a6);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(v19);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
            sub_1DCBBF314(a6);
        }
      }
    }
  }
  sub_1DCB8D5E4((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v27);
  v22[0] = 0;
  v22[1] = 0;
  v21 = v22;
  sub_1DCB98710((uint64_t)a3, (uint64_t **)&v21);
  memset(v20, 0, sizeof(v20));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v26 = 0;
  v23 = (void **)(MEMORY[0x1E0DF3138] + 16);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvars((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v23);
  MEMORY[0x1DF0D102C](&v23);
  LODWORD(v23) = 0;
  sub_1DCB8E550((uint64_t)a3, a1, (_QWORD *)a6);
  sub_1DCB8ED70(a3, (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v27);
  sub_1DCB92184((uint64_t)a3, a1, (_QWORD *)a6);
  sub_1DCB91AA8(a3);
  sub_1DCB98BF0((uint64_t)a3, v11, (uint64_t *)a6, (uint64_t **)&v21, a1, a4, a5);
  v23 = (void **)v20;
  sub_1DCB8C5D8(&v23);
  sub_1DCACB5E8((uint64_t)&v21, v22[0]);
  MEMORY[0x1DF0D0C78](v27);

}

id sub_1DCB9A724(void *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::UsdPrim *a4, uint64_t a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  BOOL v22;
  unint64_t v23;
  const char *v24;
  void *v25;
  float v26;
  __int128 *v27;
  int v28;
  void **p_dst;
  unsigned int *v30;
  unsigned int v31;
  __int128 v33;
  uint64_t v34;
  __int128 __dst;
  uint64_t v36;
  void *__p;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  _OWORD v50[29];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a3;
  v13 = a6;
  v49 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a2 + 26) = 1;
  memset(v50, 0, sizeof(v50));
  sub_1DCB9A360((uint64_t)&v49, v12, a4, a5, a2, (uint64_t)v50);
  v48[1] = 0;
  v48[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v47 = 0;
  v48[0] = MEMORY[0x1E0DF3098] + 16;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetOrientationAttr((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)v48);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  if ((v46 & 7) != 0)
  {
    v14 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v45);
  if (v44)
    sub_1DCAEED94(v44);
  v16 = atomic_load(MEMORY[0x1E0DF24F8]);
  if (!v16)
    v16 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
  v17 = v47;
  v18 = *(_QWORD *)(v16 + 528);
  if ((sub_1DCACE3D8((pxrInternal__aapl__pxrReserved__::TfToken *)v50) & 1) == 0
    || sub_1DCACB4C4(v50, (_BYTE *)a2, 0) && !sub_1DCAD4070((uint64_t)v50))
  {
    v25 = 0;
    goto LABEL_47;
  }
  v19 = v17 & 0xFFFFFFFFFFFFFFF8;
  v20 = v18 & 0xFFFFFFFFFFFFFFF8;
  if (!*(_BYTE *)(a2 + 32)
    || ((v21 = sub_1DCACEEFC((uint64_t)v50), !*(_BYTE *)(a2 + 26)) ? (v22 = v21) : (v22 = 0), !v22))
  {
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    __p = 0;
    v38 = 0;
    v39 = 0;
    sub_1DCB22D30((uint64_t)v50, (uint64_t *)&v43, (uint64_t *)&v40, (uint64_t *)&__p);
    sub_1DCB23418((uint64_t)v50, &v43, (uint64_t *)&v40, (uint64_t *)&__p, v19 == v20, 0.7854);
    if (__p)
    {
      v38 = __p;
      operator delete(__p);
    }
    if (v40)
    {
      v41 = v40;
      operator delete(v40);
    }
    if (v43)
      operator delete(v43);
  }
  if (*(_BYTE *)(a2 + 33))
  {
    if (!sub_1DCACEEFC((uint64_t)v50))
    {
      v23 = *(_QWORD *)&v50[0] & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)&v50[0] & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v24 = (const char *)(v23 + 16);
        if (*(char *)(v23 + 39) < 0)
          v24 = *(const char **)v24;
      }
      else
      {
        v24 = "";
      }
      NSLog(CFSTR("Warning: %s does not contain normal or have compute normal options specified.To compute tangent, face normal will be computed first.\n"), v24);
      sub_1DCB2412C((uint64_t)v50, 0);
    }
    v26 = *(float *)(a2 + 36);
    v27 = (__int128 *)(a2 + 40);
    v28 = *(char *)(a2 + 63);
    if (*(_BYTE *)(a2 + 34))
    {
      if (v28 < 0)
      {
        sub_1DCACA658(&__dst, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
      }
      else
      {
        __dst = *v27;
        v36 = *(_QWORD *)(a2 + 56);
      }
      sub_1DCB25A98((uint64_t *)v50, 0, (uint64_t)&__dst, v26);
      if ((SHIBYTE(v36) & 0x80000000) == 0)
        goto LABEL_42;
      p_dst = (void **)&__dst;
    }
    else
    {
      if (v28 < 0)
      {
        sub_1DCACA658(&v33, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
      }
      else
      {
        v33 = *v27;
        v34 = *(_QWORD *)(a2 + 56);
      }
      sub_1DCB25A98((uint64_t *)v50, 1, (uint64_t)&v33, v26);
      if ((SHIBYTE(v34) & 0x80000000) == 0)
        goto LABEL_42;
      p_dst = (void **)&v33;
    }
    operator delete(*p_dst);
  }
LABEL_42:
  if (!*(_BYTE *)(a2 + 1))
    sub_1DCACCD78((uint64_t)v50);
  if (v19 == v20)
    sub_1DCB43E34((uint64_t)v50);
  sub_1DCACB7FC((uint64_t)v50, v13, v11, *(_BYTE *)a2, *(unsigned __int8 *)(a2 + 1));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_47:
  if ((v47 & 7) != 0)
  {
    v30 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  MEMORY[0x1DF0D0C78](v48);
  sub_1DCACB6DC((uint64_t)v50);

  return v25;
}

void sub_1DCB9AB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void *v39;
  void *v40;
  void *v41;
  unsigned int *v43;
  unsigned int v44;

  if (a16 < 0)
    operator delete(__p);
  if ((a34 & 7) != 0)
  {
    v43 = (unsigned int *)(a34 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  MEMORY[0x1DF0D0C78](&a35);
  sub_1DCACB6DC((uint64_t)&a39);

  _Unwind_Resume(a1);
}

unint64_t sub_1DCB9AC0C(unint64_t result, uint64_t a2, unsigned __int8 a3)
{
  unsigned __int8 *v3;

  if (a2)
  {
    if (a2 == result)
    {
      return a2 + 1;
    }
    else
    {
      v3 = (unsigned __int8 *)(a2 - 1);
      if (a2 - 1 > result)
      {
        while (*v3 != a3)
        {
          if (--v3 == (unsigned __int8 *)result)
            goto LABEL_10;
        }
        result = (unint64_t)v3;
      }
LABEL_10:
      ++result;
    }
  }
  return result;
}

void sub_1DCB9AC5C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1DCB9AC9C((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void sub_1DCB9AC9C(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  void **v9;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 32)
  {
    v9 = (void **)(i - 24);
    sub_1DCB448C4(&v9);
    v6 = *(_QWORD *)(i - 32);
    v5 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

_QWORD *sub_1DCB9AD14(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1 != a2)
  {
    if (a2[1])
    {
      v8 = 0;
      v9 = 0;
      sub_1DCB25FE8((uint64_t)&v8, (uint64_t)a1);
      v4 = a2[1];
      a1[1] = v4;
      if ((~*((_DWORD *)a2 + 2) & 3) != 0)
        (*(void (**)(_QWORD *, _QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 24))(a2, a1);
      else
        *a1 = *a2;
      if (v9)
        (*(void (**)(uint64_t *))(v9 + 32))(&v8);
    }
    else
    {
      v5 = a1[1];
      if (v5)
        v6 = (a1[1] & 3) == 3;
      else
        v6 = 1;
      if (!v6)
        (*(void (**)(_QWORD *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      a1[1] = 0;
    }
  }
  return a1;
}

void sub_1DCB9AE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(char *))(a11 + 32))(&a10);
  _Unwind_Resume(exception_object);
}

void sub_1DCB9AE3C(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(_QWORD **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    sub_1DCB9AF68((uint64_t *)a1);
    if (a4 >> 59)
      sub_1DCAE4C44();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_1DCB9AFA0((_QWORD *)a1, v12);
    v13 = sub_1DCB9AFE0(v8, a2, a3, *(uint64_t **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5;
  if (v14 < a4)
  {
    v15 = &a2[4 * v14];
    sub_1DCB9B1D0((uint64_t)&v17, a2, v15, v9);
    v13 = sub_1DCB9AFE0(v8, v15, a3, *(uint64_t **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  sub_1DCB9B1D0((uint64_t)&v18, a2, a3, v9);
  sub_1DCB9AC9C(a1, v16);
}

void sub_1DCB9AF58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DCB9AF60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DCB9AF68(uint64_t *a1)
{
  if (*a1)
  {
    sub_1DCB9AC9C((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_1DCB9AFA0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    sub_1DCAE4C44();
  result = (char *)sub_1DCAF116C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t *sub_1DCB9AFE0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_1DCB9B084(a1, v4, v6);
      v6 += 4;
      v4 = v12 + 4;
      v12 += 4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  sub_1DCB9B120((uint64_t)v9);
  return v4;
}

void sub_1DCB9B070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCB9B120((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCB9B084(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a3;
  *a2 = *a3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  return sub_1DCB446C8(a2 + 1, a3[1], a3[2], 0xAAAAAAAAAAAAAAABLL * ((a3[2] - a3[1]) >> 5));
}

uint64_t sub_1DCB9B120(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1DCB9B168(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

void sub_1DCB9B168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void **v5;
  void **v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  void **v13[5];

  if (a3 != a5)
  {
    v13[3] = v5;
    v13[4] = v6;
    v8 = a3;
    do
    {
      v13[0] = (void **)(v8 - 24);
      sub_1DCB448C4(v13);
      v10 = *(_QWORD *)(v8 - 32);
      v8 -= 32;
      v9 = v10;
      if ((v10 & 7) != 0)
      {
        v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
    }
    while (v8 != a5);
  }
}

_QWORD *sub_1DCB9B1D0(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      sub_1DCAEEBA4(a4, v5);
      if (v5 != a4)
        sub_1DCB9B254((uint64_t)(a4 + 1), v5[1], v5[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[2] - v5[1]) >> 5));
      v5 += 4;
      a4 += 4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_1DCB9B254(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(_QWORD *)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) < a4)
  {
    sub_1DCB9B3D4((_QWORD *)a1);
    if (a4 > 0x2AAAAAAAAAAAAAALL)
      sub_1DCAE4C44();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) >= 0x155555555555555)
      v11 = 0x2AAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_1DCB4474C((_QWORD *)a1, v11);
    result = (uint64_t)sub_1DCB4479C(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 8) - v9) >> 5) < a4)
  {
    v13 = a2 + 32 * ((*(_QWORD *)(a1 + 8) - v9) >> 5);
    sub_1DCB9B440((uint64_t)&v17, a2, v13, v9);
    result = (uint64_t)sub_1DCB4479C(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = sub_1DCB9B440((uint64_t)&v18, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD **)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 12;
      result = sub_1DCB279D4(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_1DCB9B3C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DCB9B3CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DCB9B3D4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 12;
        sub_1DCB279D4((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1DCB9B440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_1DCB9AD14((_QWORD *)a4, (_QWORD *)v5);
    sub_1DCB24648(a4 + 16, (__int128 *)(v5 + 16));
    sub_1DCAEEBA4((_QWORD *)(a4 + 56), (_QWORD *)(v5 + 56));
    sub_1DCAEEBA4((_QWORD *)(a4 + 64), (_QWORD *)(v5 + 64));
    *(_QWORD *)(a4 + 72) = *(_QWORD *)(v5 + 72);
    sub_1DCAEEBA4((_QWORD *)(a4 + 80), (_QWORD *)(v5 + 80));
    *(_DWORD *)(a4 + 88) = *(_DWORD *)(v5 + 88);
    a4 += 96;
    v5 += 96;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_1DCB9B4E0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 12)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, (const std::type_info *)&unk_1EA574018);
  else
    return 0;
}

uint64_t sub_1DCB9B518(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCB9B4E0(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

_QWORD *sub_1DCB9B580@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  *a1 = result;
  a1[1] = sub_1DCB9B5D4;
  a1[2] = &unk_1EA574018;
  return result;
}

uint64_t sub_1DCB9B5D4(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 23) < 0)
      operator delete(*(void **)result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

void sub_1DCB9B61C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_1DCB9B6A0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1DCB9B6A0(uint64_t a1, uint64_t a2)
{

  sub_1DCAEEE78(a2 + 8);
}

void sub_1DCB9B6D0(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 8;
        sub_1DCB9B754((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1DCB9B754(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_1DCAEEC34(a2);
}

uint64_t sub_1DCB9B780(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    sub_1DCB9AC0C((unint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3 = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    return sub_1DCB9B800(v3);
  }
  return result;
}

char *sub_1DCB9B800(char *result, uint64_t a2, char *a3, char *a4, const std::locale **a5, uint64_t a6, uint64_t a7)
{
  if (a4 != a3)
  {
    if (a2 - (uint64_t)result >= a4 - a3)
      return sub_1DCB9B840(result, a2, a3, a4, a5, a6, a7, a2 - (_QWORD)result, a4 - a3);
    else
      return (char *)a2;
  }
  return result;
}

char *sub_1DCB9B840(char *a1, uint64_t a2, char *a3, char *a4, const std::locale **a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;

  v10 = (uint64_t)&a1[a8 - a9 + 1];
  if ((char *)v10 != a1)
  {
    v14 = a1;
    v15 = a3 + 1;
    while (!sub_1DCB9B900(a5, *v14, *a3))
    {
LABEL_7:
      if (++v14 == (char *)v10)
        return (char *)a2;
    }
    v16 = v14 + 1;
    v17 = v15;
    while (v17 != a4)
    {
      v19 = *v16++;
      v18 = v19;
      v20 = *v17++;
      if (!sub_1DCB9B900(a5, v18, v20))
        goto LABEL_7;
    }
    return v14;
  }
  return (char *)a2;
}

BOOL sub_1DCB9B900(const std::locale **a1, uint64_t a2, uint64_t a3)
{
  std::locale::id *v6;
  const std::locale::facet *v7;
  const std::locale::facet *v8;

  v6 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  v7 = std::locale::use_facet(*a1, MEMORY[0x1E0DE4A90]);
  LODWORD(a2) = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[1].~facet)(v7, a2);
  v8 = std::locale::use_facet(*a1, v6);
  return (_DWORD)a2 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v8->__vftable[1].~facet)(v8, a3);
}

uint64_t sub_1DCB9B97C@<X0>(uint64_t a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath *v4[2];

  sub_1DCB9B9CC(v4);
  v2 = v4[1];
  *(pxrInternal__aapl__pxrReserved__::SdfAssetPath **)a1 = v4[0];
  *(_QWORD *)(a1 + 8) = v2;
  v4[0] = 0;
  *(_QWORD *)(a1 + 16) = &stru_1EA573940;
  return ((uint64_t (*)(_QWORD))v2)(0);
}

uint64_t sub_1DCB9B9CC@<X0>(pxrInternal__aapl__pxrReserved__::SdfAssetPath **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath *v2;
  uint64_t result;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)operator new();
  result = pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v2);
  *a1 = v2;
  a1[1] = (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)sub_1DCB9BA38;
  return result;
}

void sub_1DCB9BA14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D228C](v1, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB9BA38(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (*(char *)(result + 47) < 0)
      operator delete(*(void **)(result + 24));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

unint64_t sub_1DCB9BA90(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return sub_1DCB9BB70((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t sub_1DCB9BACC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unint64_t sub_1DCB9BB70(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_1DCB9BF1C(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_1DCB9BE70(a2, a3);
  }
  else
  {
    return sub_1DCB9BD78(a2, a3);
  }
}

unint64_t sub_1DCB9BD78(_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_1DCB9BE70(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_1DCB9BF1C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void sub_1DCB9BFDC(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_DWORD *sub_1DCB9C028@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = (_DWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = sub_1DCB9C078;
  a1[2] = MEMORY[0x1E0DE4EE0];
  return result;
}

uint64_t sub_1DCB9C078(uint64_t result)
{
  if (result)
    JUMPOUT(0x1DF0D228CLL);
  return result;
}

uint64_t sub_1DCB9C094(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_1DCAE4C44();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_1DCB27740((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[96 * v3];
  v13 = &v7[96 * v6];
  sub_1DCB27848((uint64_t)(a1 + 2), v11, a2);
  v12 = v11 + 96;
  sub_1DCACB098(a1, &v10);
  v8 = a1[1];
  sub_1DCACB10C(&v10);
  return v8;
}

void sub_1DCB9C18C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCACB10C((void **)va);
  _Unwind_Resume(a1);
}

void sub_1DCB9C1A0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 24;
      v7 = v4 - 24;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1DCB9C22C(unint64_t *a1)
{
  uint64_t result;
  uint64_t v4;

  result = sub_1DCB9C284();
  while (!__ldaxr(a1))
  {
    if (!__stlxr(result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = sub_1DCB9C2E4(result);
    MEMORY[0x1DF0D228C](v4, 0x60C4005C00B59);
  }
  return atomic_load(a1);
}

uint64_t sub_1DCB9C284()
{
  uint64_t v0;

  v0 = operator new();
  MEMORY[0x1DF0D1038]();
  return v0;
}

void sub_1DCB9C2C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D228C](v1, 0x60C4005C00B59);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB9C2E4(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  void **v116;

  v116 = (void **)(a1 + 304);
  sub_1DCAF0DD0(&v116);
  v2 = *(_QWORD *)(a1 + 296);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 288);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 280);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 272);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 264);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 256);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 248);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 240);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(a1 + 232);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *(_QWORD *)(a1 + 224);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *(_QWORD *)(a1 + 216);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 208);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(a1 + 200);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *(_QWORD *)(a1 + 192);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *(_QWORD *)(a1 + 184);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *(_QWORD *)(a1 + 176);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *(_QWORD *)(a1 + 168);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *(_QWORD *)(a1 + 160);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *(_QWORD *)(a1 + 152);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *(_QWORD *)(a1 + 144);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *(_QWORD *)(a1 + 136);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *(_QWORD *)(a1 + 128);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *(_QWORD *)(a1 + 120);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *(_QWORD *)(a1 + 112);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *(_QWORD *)(a1 + 104);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *(_QWORD *)(a1 + 96);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *(_QWORD *)(a1 + 88);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *(_QWORD *)(a1 + 80);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *(_QWORD *)(a1 + 72);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *(_QWORD *)(a1 + 64);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *(_QWORD *)(a1 + 56);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *(_QWORD *)(a1 + 48);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *(_QWORD *)(a1 + 40);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  v101 = *(_QWORD *)(a1 + 32);
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  v104 = *(_QWORD *)(a1 + 24);
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v107 = *(_QWORD *)(a1 + 16);
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  v110 = *(_QWORD *)(a1 + 8);
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v113 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v114 = __ldxr(v113);
    while (__stlxr(v114 - 2, v113));
  }
  return a1;
}

_QWORD *sub_1DCB9C7DC(_QWORD *a1, unint64_t a2, __int128 *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DCB9C864(a1, a2);
    v6 = (_OWORD *)a1[1];
    v7 = &v6[4 * a2];
    v8 = a2 << 6;
    do
    {
      v9 = *a3;
      v10 = a3[1];
      v11 = a3[3];
      v6[2] = a3[2];
      v6[3] = v11;
      *v6 = v9;
      v6[1] = v10;
      v6 += 4;
      v8 -= 64;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DCB9C848(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DCB9C864(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    sub_1DCAE4C44();
  result = (char *)sub_1DCB9C8A4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *sub_1DCB9C8A4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    sub_1DCAE4CDC();
  return operator new(a2 << 6);
}

uint64_t sub_1DCB9C8D8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_1DCAE4C44();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_1DCAF116C((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = (uint64_t *)&v8[32 * v3];
  v14 = &v8[32 * v7];
  sub_1DCB9B084((uint64_t)(a1 + 2), v12, a2);
  v13 = v12 + 4;
  sub_1DCB9C9C4(a1, &v11);
  v9 = a1[1];
  sub_1DCB9CC14((uint64_t)&v11);
  return v9;
}

void sub_1DCB9C9B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCB9CC14((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB9C9C4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1DCB9CA38((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1DCB9CA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 32);
      a3 -= 32;
      *(_QWORD *)(v7 - 32) = v8;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  LOBYTE(v12) = 1;
  sub_1DCB9CAE4((uint64_t)v11);
  return v9;
}

uint64_t sub_1DCB9CAE4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1DCB9CB18((uint64_t *)a1);
  return a1;
}

void sub_1DCB9CB18(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  sub_1DCB9CB8C(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_1DCB9CB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  unsigned int *v6;
  unsigned int v7;
  void **v8;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    v8 = (void **)(i + 8);
    sub_1DCB448C4(&v8);
    if ((*(_QWORD *)i & 7) != 0)
    {
      v6 = (unsigned int *)(*(_QWORD *)i & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    i = *(_QWORD *)(a2 + 32) + 32;
  }
}

uint64_t sub_1DCB9CC14(uint64_t a1)
{
  sub_1DCB9CC48(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1DCB9CC48(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void **v8;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    v8 = (void **)(i - 24);
    sub_1DCB448C4(&v8);
    v5 = *(_QWORD *)(i - 32);
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
}

uint64_t *sub_1DCB9CCC8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCB9CCF0(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCB9CE7C(a1);
}

uint64_t sub_1DCB9CD00()
{
  return 1;
}

unint64_t sub_1DCB9CD08(uint64_t *a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v1 = *a1;
  v3[1] = 1;
  v3[0] = *(_QWORD *)v1;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v3, *(const char **)(v1 + 32));
  return bswap64(0x9E3779B97F4A7C55 * v3[0]);
}

uint64_t sub_1DCB9CD60(uint64_t *a1, uint64_t *a2)
{
  return sub_1DCB45428(*a1, *a2);
}

uint64_t sub_1DCB9CD6C(uint64_t *a1, uint64_t a2)
{
  return sub_1DCB45428(*a1, a2);
}

uint64_t sub_1DCB9CD78()
{
  return 0;
}

uint64_t sub_1DCB9CD84(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_1DCB9CDCC()
{
  return &unk_1EA573C18;
}

uint64_t sub_1DCB9CDD8()
{
  return 1;
}

uint64_t sub_1DCB9CDE0()
{
  return MEMORY[0x1E0DE4EF8];
}

uint64_t sub_1DCB9CDEC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCB9CDF4(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_1DCB9CE00(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIjEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCB9CE30(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573C18, a2);
}

void *sub_1DCB9CE50()
{
  return &unk_1EA573C18;
}

uint64_t sub_1DCB9CE5C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCB9CE64@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA575EA0;
  return sub_1DCB45564(a2, v2);
}

uint64_t *sub_1DCB9CE7C(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_1DCAEEE78(v2);
      MEMORY[0x1DF0D228C](v2, 0x1030C404A96FE9ALL);
    }
  }
  return a1;
}

uint64_t sub_1DCB9CEE4(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_1DCB9CE7C((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t sub_1DCB9CF9C(_QWORD *a1)
{
  *a1 += 4;
  return std::ostream::operator<<();
}

void sub_1DCB9CFB4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_1DCB9D038((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1DCB9D038(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34(a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  if (result)
    return sub_1DCAEED94(result);
  return result;
}

uint64_t sub_1DCB9D09C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_1DCAE4C44();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_1DCAF116C((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = (uint64_t *)&v8[32 * v3];
  v14 = &v8[32 * v7];
  sub_1DCB9D188((uint64_t)(a1 + 2), v12, a2);
  v13 = v12 + 4;
  sub_1DCB9C9C4(a1, &v11);
  v9 = a1[1];
  sub_1DCB9CC14((uint64_t)&v11);
  return v9;
}

void sub_1DCB9D174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCB9CC14((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCB9D188(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a3;
  *a2 = *a3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  return sub_1DCB446C8(a2 + 1, a3[1], a3[2], 0xAAAAAAAAAAAAAAABLL * ((a3[2] - a3[1]) >> 5));
}

void sub_1DCB9D224(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(int **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_1DCB4516C(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 4 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_1DCAEEE78(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

_QWORD *sub_1DCB9D388@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = sub_1DCB9D3D8;
  a1[2] = &stru_1EA573A88;
  return result;
}

_QWORD *sub_1DCB9D3D8(_QWORD *result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    if ((*result & 7) != 0)
    {
      v1 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
      do
        v2 = __ldxr(v1);
      while (__stlxr(v2 - 2, v1));
    }
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

void sub_1DCB9D414(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_1DCB9D498((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1DCB9D498(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34(a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  if (result)
    return sub_1DCAEED94(result);
  return result;
}

void sub_1DCB9D4FC(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_1DCB9D580((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1DCB9D580(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34(a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  if (result)
    return sub_1DCAEED94(result);
  return result;
}

uint64_t sub_1DCB9D5E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_1DCB440A8((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_1DCB9D648(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCB444B4(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB9D660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 56;
      sub_1DCB9D724(a1, v7 - 56, v9);
      v7 = *((_QWORD *)&v16 + 1) - 56;
      *((_QWORD *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    v11 = v16;
  }
  LOBYTE(v14) = 1;
  sub_1DCB9D790((uint64_t)v13);
  return v11;
}

void sub_1DCB9D710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCB9D790((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_1DCB9D724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  id result;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  v4 = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = v4;
  v5 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*(_QWORD *)(a2 + 32))
      v6 = *(unint64_t **)(a2 + 32);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = *(id *)(a3 + 48);
  *(_QWORD *)(a2 + 48) = result;
  return result;
}

uint64_t sub_1DCB9D790(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1DCB9D7C4((uint64_t *)a1);
  return a1;
}

void sub_1DCB9D7C4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_1DCB9B6A0(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void sub_1DCB9D814(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    sub_1DCB9B6A0(v4, i - 56);
  }
}

uint64_t sub_1DCB9D858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      sub_1DCB273D4((_QWORD *)a4, (_QWORD *)v5);
      if (a4 != v5)
      {
        sub_1DCAEEE78(a4 + 16);
        v7 = *(_OWORD *)(v5 + 32);
        *(_OWORD *)(a4 + 16) = *(_OWORD *)(v5 + 16);
        *(_OWORD *)(a4 + 32) = v7;
        *(_OWORD *)(v5 + 16) = 0u;
        *(_OWORD *)(v5 + 32) = 0u;
        *(_QWORD *)(a4 + 48) = *(_QWORD *)(v5 + 48);
        *(_QWORD *)(v5 + 48) = 0;
        v8 = *(_QWORD *)(a4 + 56);
        if ((v8 & 7) != 0)
        {
          v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
          do
            v10 = __ldxr(v9);
          while (__stlxr(v10 - 2, v9));
        }
        *(_QWORD *)(a4 + 56) = *(_QWORD *)(v5 + 56);
        *(_QWORD *)(v5 + 56) = 0;
        v11 = *(_QWORD *)(a4 + 64);
        if ((v11 & 7) != 0)
        {
          v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
          do
            v13 = __ldxr(v12);
          while (__stlxr(v13 - 2, v12));
        }
        *(_QWORD *)(a4 + 64) = *(_QWORD *)(v5 + 64);
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(a4 + 72) = *(_QWORD *)(v5 + 72);
        v14 = *(_QWORD *)(a4 + 80);
        if ((v14 & 7) != 0)
        {
          v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stlxr(v16 - 2, v15));
        }
        *(_QWORD *)(a4 + 80) = *(_QWORD *)(v5 + 80);
        *(_QWORD *)(v5 + 80) = 0;
      }
      *(_DWORD *)(a4 + 88) = *(_DWORD *)(v5 + 88);
      v5 += 96;
      a4 += 96;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_1DCB9D974(_QWORD *a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v5;
  char **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  float32x4_t ****v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  float32x4_t ****v23;
  char **v24;
  float32x4_t ***v25;
  float v26;
  BOOL v28;
  unint64_t v29;
  float32x4_t ****v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  float32x4_t ****v36;
  char *v37;
  char *v38;
  float32x4_t ***v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  char *v43;
  int64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  id v49;

  if (*(_QWORD *)(a2 + 16))
  {
    v5 = a2;
    v6 = (char **)(a1 + 9);
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 16);
      v8 = (uint64_t *)operator new();
      sub_1DCBEA8A0((uint64_t)v8, v7, a1 + 15);
      v9 = *v8;
      if (v8[1] != *v8)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          sub_1DCB9DCDC(v5, (_QWORD *)(v9 + v10));
          ++v11;
          v9 = *v8;
          v10 += 8;
        }
        while (v11 < (v8[1] - *v8) >> 3);
      }
      v13 = (uint64_t **)a1[10];
      v12 = a1[11];
      if ((unint64_t)v13 >= v12)
      {
        v15 = ((char *)v13 - *v6) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          sub_1DCAE4C44();
        v16 = v12 - (_QWORD)*v6;
        v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          a2 = 0x1FFFFFFFFFFFFFFFLL;
        else
          a2 = v17;
        if (a2)
          v18 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 11), a2);
        else
          v18 = 0;
        v19 = &v18[8 * v15];
        *(_QWORD *)v19 = v8;
        v14 = (float32x4_t ****)(v19 + 8);
        v21 = (char *)a1[9];
        v20 = (char *)a1[10];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v6;
        }
        a1[9] = v19;
        a1[10] = v14;
        a1[11] = &v18[8 * a2];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v13 = v8;
        v14 = (float32x4_t ****)(v13 + 1);
      }
      a1[10] = v14;
    }
    while (*(_QWORD *)(v5 + 16));
  }
  else
  {
    v14 = (float32x4_t ****)a1[10];
  }
  v23 = (float32x4_t ****)a1[9];
  if (v23 != v14)
  {
    v24 = (char **)(a1 + 12);
    do
    {
      v25 = *v23;
      sub_1DCBEAC60(*v23, a4);
      sub_1DCBEAA24((float32x2_t ***)v25);
      sub_1DCBEB5C0((uint64_t)v25);
      a4.n128_u64[0] = (unint64_t)v25[4];
      v28 = fabsf(a4.n128_f32[0]) == INFINITY;
      a4.n128_u32[0] = a4.n128_u32[1];
      v26 = fabsf(a4.n128_f32[1]);
      v28 = v28 || v26 == INFINITY;
      if (v28)
      {
        v30 = (float32x4_t ****)a1[13];
        v29 = a1[14];
        if ((unint64_t)v30 >= v29)
        {
          v32 = ((char *)v30 - *v24) >> 3;
          if ((unint64_t)(v32 + 1) >> 61)
            sub_1DCAE4C44();
          v33 = v29 - (_QWORD)*v24;
          v34 = v33 >> 2;
          if (v33 >> 2 <= (unint64_t)(v32 + 1))
            v34 = v32 + 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            a2 = 0x1FFFFFFFFFFFFFFFLL;
          else
            a2 = v34;
          if (a2)
            v35 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 14), a2);
          else
            v35 = 0;
          v36 = (float32x4_t ****)&v35[8 * v32];
          *v36 = v25;
          v31 = v36 + 1;
          v38 = (char *)a1[12];
          v37 = (char *)a1[13];
          if (v37 != v38)
          {
            do
            {
              v39 = (float32x4_t ***)*((_QWORD *)v37 - 1);
              v37 -= 8;
              *--v36 = v39;
            }
            while (v37 != v38);
            v37 = *v24;
          }
          a1[12] = v36;
          a1[13] = v31;
          a1[14] = &v35[8 * a2];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v30 = v25;
          v31 = v30 + 1;
        }
        a1[13] = v31;
      }
      ++v23;
    }
    while (v23 != v14);
  }
  v40 = (_QWORD *)a1[12];
  v41 = (_QWORD *)a1[13];
  if (v40 != v41)
  {
    v42 = (char *)a1[10];
    do
    {
      v43 = v42;
      if ((char *)a1[9] != v42)
      {
        v43 = (char *)a1[9];
        while (*(_QWORD *)v43 != *v40)
        {
          v43 += 8;
          if (v43 == v42)
          {
            v43 = v42;
            break;
          }
        }
      }
      a2 = (unint64_t)(v43 + 8);
      v44 = v42 - (v43 + 8);
      if (v42 != v43 + 8)
        memmove(v43, (const void *)a2, v42 - (v43 + 8));
      v42 = &v43[v44];
      a1[10] = &v43[v44];
      ++v40;
    }
    while (v40 != v41);
  }
  objc_msgSend_currentProgress(MEMORY[0x1E0CB38A8], (const char *)a2, a3);
  v49 = (id)objc_claimAutoreleasedReturnValue();
  v47 = objc_msgSend_completedUnitCount(v49, v45, v46);
  objc_msgSend_setCompletedUnitCount_(v49, v48, v47 + 6);

}

void sub_1DCB9DCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *sub_1DCB9DCDC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10[3];

  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 != (_QWORD *)a1)
  {
    do
    {
      v6 = (_QWORD *)v2[1];
      v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (_QWORD *)a1)
        {
          v8 = 1;
LABEL_8:
          v6 = (_QWORD *)a1;
        }
        else
        {
          while (1)
          {
            v7 = v6[2];
            v8 = v7 == v5;
            if (v7 != v5)
              break;
            v6 = (_QWORD *)v6[1];
            if (v6 == (_QWORD *)a1)
              goto LABEL_8;
          }
        }
        sub_1DCBA485C((uint64_t)v10, v10, a1, v2, v6);
        if (!v8)
          v6 = (_QWORD *)v6[1];
      }
      v2 = v6;
    }
    while (v6 != (_QWORD *)a1);
  }
  return sub_1DCB032E4(v10);
}

void sub_1DCB9DD94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCB032E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB9DDA8(uint64_t result)
{
  int8x16_t ****v1;
  _QWORD *v2;
  int8x16_t **v3;
  int8x16_t **v4;
  int8x16_t *v5;
  float v6;
  __int128 v7;
  float32x4_t v8;
  float v9;
  __int128 v10;
  float32x4_t v11;
  float v12;
  __int128 v13;
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  uint64_t v18;
  float32x4_t *v19;
  _QWORD *v20;
  __int128 v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  int8x16_t ****v25;
  int8x16_t ****v26;
  float32x4_t v27;
  __int128 v28;
  float32x4_t v29;
  __int128 v30;
  float32x4_t v31;
  __int128 v32;
  _OWORD v33[8];
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  int8x16_t v40;
  int8x16_t *v41;
  int8x16_t v42;
  __int8 *v43;
  int8x16_t v44;
  int8x16_t *v45;
  _OWORD v46[6];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v1 = *(int8x16_t *****)(result + 96);
  v25 = *(int8x16_t *****)(result + 104);
  if (v1 != v25)
  {
    v2 = (_QWORD *)(result + 120);
    do
    {
      v26 = v1;
      v4 = **v1;
      v3 = (*v1)[1];
      while (v4 != v3)
      {
        v5 = *v4;
        memset(v33, 0, 32);
        sub_1DCB3F1FC(v33);
        v31 = 0u;
        v32 = 0u;
        sub_1DCB3F1F8((int8x16_t *)&v31, v5[4], v5[5]);
        v29 = 0u;
        v30 = 0u;
        sub_1DCB3F1F8((int8x16_t *)&v29, v5[5], v5[6]);
        v27 = 0u;
        v28 = 0u;
        sub_1DCB3F1F8((int8x16_t *)&v27, v5[6], v5[4]);
        v6 = sub_1DCB3F254(&v31);
        if (v6 < sub_1DCB3F254(&v29))
        {
          v8 = v31;
          v7 = v32;
          v31 = v29;
          v32 = v30;
          v29 = v8;
          v30 = v7;
        }
        v9 = sub_1DCB3F254(&v31);
        if (v9 < sub_1DCB3F254(&v27))
        {
          v11 = v31;
          v10 = v32;
          v31 = v27;
          v32 = v28;
          v27 = v11;
          v28 = v10;
        }
        v12 = sub_1DCB3F254(&v29);
        if (v12 < sub_1DCB3F254(&v27))
        {
          v14 = v29;
          v13 = v30;
          v29 = v27;
          v30 = v28;
          v27 = v14;
          v28 = v13;
        }
        v15 = 0;
        v46[0] = v31;
        v46[1] = v32;
        v46[2] = v29;
        v46[3] = v30;
        v46[4] = v27;
        v46[5] = v28;
        while (1)
        {
          result = sub_1DCB3F9AC((uint64_t)v5, v2, (float32x4_t)v46[v15], (float32x4_t)v46[v15 + 1]);
          if (result)
            break;
          v15 += 2;
          if (v15 == 6)
            goto LABEL_21;
        }
        v16 = 0;
        v17 = v5[5];
        v40 = v5[4];
        v41 = v5 + 1;
        v42 = v17;
        v43 = &v5[1].i8[8];
        v44 = v5[6];
        v45 = v5 + 2;
        do
        {
          v18 = 0;
          v19 = (float32x4_t *)(&v40 + 2 * v16);
          v20 = (_QWORD *)v19[1].i64[0];
          *v20 = *(_QWORD *)(result + 16);
          v21 = *(_OWORD *)(result + 80);
          v34 = *(_OWORD *)(result + 64);
          v22 = *v19;
          v35 = result + 16;
          v36 = v21;
          v37 = result + 24;
          v38 = *(_OWORD *)(result + 96);
          v39 = result + 32;
          do
          {
            v23 = vsubq_f32(*(float32x4_t *)((char *)&v34 + v18), v22);
            v24 = (int32x4_t)vmulq_f32(v23, v23);
            if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1)), (float32x4_t)vdupq_laneq_s32(v24, 2)).f32[0]) < 0.000001)*v20 = **(_QWORD **)((char *)&v34 + v18 + 16);
            v18 += 32;
          }
          while (v18 != 96);
          ++v16;
        }
        while (v16 != 3);
LABEL_21:
        ++v4;
      }
      v1 = v26 + 1;
    }
    while (v26 + 1 != v25);
  }
  return result;
}

uint64_t sub_1DCB9E058(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  int v4;
  uint64_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x4_t v10;
  int32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  int32x4_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  std::locale v26;

  v2 = (uint64_t *)a2[1];
  if (v2 == a2)
    goto LABEL_11;
  v4 = 0;
  do
  {
    v5 = v2[2];
    v25 = *(float32x4_t *)(v5 + 64);
    v23 = *(float32x4_t *)(v5 + 80);
    v24 = *(float32x4_t *)(v5 + 96);
    sub_1DCB3FAA8((__n128 *)v5);
    v6 = vsubq_f32(v23, v25);
    v7 = (int32x4_t)vmulq_f32(v6, v6);
    v7.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2)).u32[0];
    v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
    v9 = vmul_f32(vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)), v8);
    v7.i32[0] = vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).u32[0];
    v10 = vsubq_f32(v24, v25);
    v11 = (int32x4_t)vmulq_f32(v10, v10);
    v11.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2)).u32[0];
    v12 = vrsqrte_f32((float32x2_t)v11.u32[0]);
    v13 = vmul_f32(vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)), v12);
    v14 = (int32x4_t)vmulq_n_f32(vmulq_n_f32(vmulq_f32(v10, v6), *(float *)v7.i32), vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).f32[0]);
    if (fabsf(vaddq_f32(vaddq_f32((float32x4_t)v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 1)), (float32x4_t)vdupq_laneq_s32(v14, 2)).f32[0]) == 1.0|| sub_1DCB3F39C((float32x4_t *)v5) < 0.000001)
    {
      v15 = *v2;
      v16 = (uint64_t *)v2[1];
      *(_QWORD *)(v15 + 8) = v16;
      *(_QWORD *)v2[1] = v15;
      --a2[2];
      operator delete(v2);
      ++v4;
    }
    else
    {
      v16 = (uint64_t *)v2[1];
    }
    v2 = v16;
  }
  while (v16 != a2);
  if (!v4)
  {
LABEL_11:
    v20 = sub_1DCB03734(MEMORY[0x1E0DE4A60], (uint64_t)"No bad triangles found.", 23);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
    v21 = std::locale::use_facet(&v26, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  }
  else
  {
    sub_1DCB03734(MEMORY[0x1E0DE4A60], (uint64_t)"Removed ", 8);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = sub_1DCB03734(v17, (uint64_t)" bad triangles", 14);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
    v19 = std::locale::use_facet(&v26, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  }
  std::locale::~locale(&v26);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1DCB9E2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16)
{
  std::locale::~locale(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB9E2BC@<X0>(uint64_t *a1@<X1>, void **a2@<X8>)
{
  uint64_t *v3;
  float32x4_t *v5;
  float32x4_t *v6;
  float32x4_t *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  float32x4_t *v25;
  _OWORD v26[2];
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  float32x4_t *v30;

  memset(v28, 0, sizeof(v28));
  v29 = 1065353216;
  memset(v26, 0, sizeof(v26));
  v27 = 1065353216;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v3 = (uint64_t *)a1[1];
  if (v3 != a1)
  {
    do
    {
      v25 = (float32x4_t *)v3[2];
      v5 = sub_1DCBA48D4(v28, v25);
      v6 = v25;
      if (v5)
      {
        v30 = v25;
        v7 = sub_1DCBA49CC((uint64_t)v28, v25, (uint64_t)&unk_1DCC58300, (uint64_t *)&v30);
        v25[16].i64[1] = v7[18].i64[0];
        sub_1DCB07770((uint64_t)v26, &v25, &v25);
        v9 = a2[1];
        v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          v11 = ((char *)v9 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v11 + 1) >> 61)
            sub_1DCAE4C44();
          v12 = v8 - (_QWORD)*a2;
          v13 = v12 >> 2;
          if (v12 >> 2 <= (unint64_t)(v11 + 1))
            v13 = v11 + 1;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v13;
          if (v14)
            v15 = (char *)sub_1DCAE79A4((uint64_t)(a2 + 2), v14);
          else
            v15 = 0;
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = v25;
          v10 = v16 + 8;
          v18 = (char *)*a2;
          v17 = (char *)a2[1];
          if (v17 != *a2)
          {
            do
            {
              v19 = *((_QWORD *)v17 - 1);
              v17 -= 8;
              *((_QWORD *)v16 - 1) = v19;
              v16 -= 8;
            }
            while (v17 != v18);
            v17 = (char *)*a2;
          }
          *a2 = v16;
          a2[1] = v10;
          a2[2] = &v15[8 * v14];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v9 = v25;
          v10 = v9 + 1;
        }
        a2[1] = v10;
      }
      else
      {
        v30 = v25;
        sub_1DCBA49CC((uint64_t)v28, v25, (uint64_t)&unk_1DCC58300, (uint64_t *)&v30)[18].i64[0] = (uint64_t)v6;
      }
      v3 = (uint64_t *)v3[1];
    }
    while (v3 != a1);
    v20 = (uint64_t *)a1[1];
    if (v20 != a1)
    {
      do
      {
        v21 = sub_1DCB09B88(v26, v20 + 2);
        v22 = (uint64_t *)v20[1];
        if (v21)
        {
          v23 = *v20;
          *(_QWORD *)(v23 + 8) = v22;
          *(_QWORD *)v20[1] = v23;
          --a1[2];
          operator delete(v20);
        }
        v20 = v22;
      }
      while (v22 != a1);
    }
  }
  sub_1DCAE6B78((uint64_t)v26);
  return sub_1DCAE6B78((uint64_t)v28);
}

void sub_1DCB9E4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v5 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  sub_1DCAE6B78((uint64_t)va);
  sub_1DCAE6B78((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1DCB9E50C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  float32x4_t ***v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  uint64_t v20;
  float v21;
  int32x2_t v22;
  float v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  uint64_t (*v36)(uint64_t, uint64_t);
  char **v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  uint64_t (*v55)(uint64_t, uint64_t);
  char *v56;

  v2 = a1[9];
  v3 = (uint64_t *)a1[10];
  v4 = 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3);
  v54 = (uint64_t (*)(uint64_t, uint64_t))sub_1DCB9E8B0;
  if (v3 == (uint64_t *)v2)
    v5 = 0;
  else
    v5 = v4;
  sub_1DCBA4CD4(v2, v3, &v54, v5, 1);
  v6 = *(float32x4_t ****)(a1[9] + (((uint64_t)(a1[10] - a1[9]) >> 1) & 0xFFFFFFFFFFFFFFF8));
  v7 = sub_1DCBEB528(v6);
  v8 = sub_1DCBEB56C((uint64_t)v6);
  v9 = a1[9];
  v10 = a1[10];
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v11 = v10 - v9;
  if (v11)
  {
    v12 = 0;
    v13 = v11 >> 3;
    v14 = v8 * (float)(1.0 / v7);
    __asm { FMOV            V10.2S, #1.0 }
    do
    {
      v20 = *(_QWORD *)(v9 + 8 * v12);
      v21 = sub_1DCBEB528((float32x4_t ***)v20);
      v23 = v21 / sub_1DCBEB56C(v20);
      if (v12 > v13)
        v23 = v23 / sqrtf(v21 / sub_1DCBEB528(*(float32x4_t ****)(a1[9] + 8 * v13)));
      *(float *)v22.i32 = sqrtf(v23 * v14);
      sub_1DCBEA9CC(v20, (float32x2_t)vdup_lane_s32(v22, 0));
      *(_QWORD *)(v20 + 64) = _D10;
      v24 = *(_QWORD *)(v20 + 32);
      if (fabsf(*(float *)&v24) == INFINITY || fabsf(*((float *)&v24 + 1)) == INFINITY)
      {
        v25 = v55;
        if ((char *)v55 >= v56)
        {
          v27 = ((char *)v55 - (char *)v54) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            sub_1DCAE4C44();
          v28 = (v56 - (char *)v54) >> 2;
          if (v28 <= v27 + 1)
            v28 = v27 + 1;
          if ((unint64_t)(v56 - (char *)v54) >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          if (v29)
            v30 = (char *)sub_1DCAE79A4((uint64_t)&v56, v29);
          else
            v30 = 0;
          v31 = (uint64_t (*)(uint64_t, uint64_t))&v30[8 * v27];
          *(_QWORD *)v31 = v20;
          v26 = (uint64_t (*)(uint64_t, uint64_t))((char *)v31 + 8);
          v33 = v54;
          v32 = v55;
          if (v55 != v54)
          {
            do
            {
              v34 = *((_QWORD *)v32 - 1);
              v32 = (uint64_t (*)(uint64_t, uint64_t))((char *)v32 - 8);
              *((_QWORD *)v31 - 1) = v34;
              v31 = (uint64_t (*)(uint64_t, uint64_t))((char *)v31 - 8);
            }
            while (v32 != v33);
            v32 = v54;
          }
          v54 = v31;
          v55 = v26;
          v56 = &v30[8 * v29];
          if (v32)
            operator delete(v32);
        }
        else
        {
          *(_QWORD *)v55 = v20;
          v26 = (uint64_t (*)(uint64_t, uint64_t))((char *)v25 + 8);
        }
        v55 = v26;
      }
      ++v12;
      v9 = a1[9];
    }
    while (v12 < (a1[10] - v9) >> 3);
    v36 = v54;
    v35 = v55;
    if (v54 != v55)
    {
      v37 = (char **)(a1 + 12);
      do
      {
        v38 = *(_QWORD *)v36;
        v40 = (_QWORD *)a1[13];
        v39 = a1[14];
        if ((unint64_t)v40 >= v39)
        {
          v42 = ((char *)v40 - *v37) >> 3;
          if ((unint64_t)(v42 + 1) >> 61)
            sub_1DCAE4C44();
          v43 = v39 - (_QWORD)*v37;
          v44 = v43 >> 2;
          if (v43 >> 2 <= (unint64_t)(v42 + 1))
            v44 = v42 + 1;
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v44;
          if (v45)
            v46 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 14), v45);
          else
            v46 = 0;
          v47 = &v46[8 * v42];
          *(_QWORD *)v47 = v38;
          v41 = v47 + 8;
          v49 = (char *)a1[12];
          v48 = (char *)a1[13];
          if (v48 != v49)
          {
            do
            {
              v50 = *((_QWORD *)v48 - 1);
              v48 -= 8;
              *((_QWORD *)v47 - 1) = v50;
              v47 -= 8;
            }
            while (v48 != v49);
            v48 = *v37;
          }
          a1[12] = v47;
          a1[13] = v41;
          a1[14] = &v46[8 * v45];
          if (v48)
            operator delete(v48);
        }
        else
        {
          *v40 = v38;
          v41 = v40 + 1;
        }
        a1[13] = v41;
        v52 = (char *)a1[9];
        v51 = (char *)a1[10];
        if (v52 != v51)
        {
          while (*(_QWORD *)v52 != v38)
          {
            v52 += 8;
            if (v52 == v51)
            {
              v52 = (char *)a1[10];
              break;
            }
          }
        }
        v53 = v51 - (v52 + 8);
        if (v51 != v52 + 8)
          memmove(v52, v52 + 8, v51 - (v52 + 8));
        a1[10] = &v52[v53];
        v36 = (uint64_t (*)(uint64_t, uint64_t))((char *)v36 + 8);
      }
      while (v36 != v35);
      v35 = v54;
    }
    if (v35)
    {
      v55 = v35;
      operator delete(v35);
    }
  }
}

void sub_1DCB9E880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1DCB9E8B0(float32x4_t ***a1, float32x4_t ***a2)
{
  float v3;

  v3 = sub_1DCBEB528(a1);
  return v3 < sub_1DCBEB528(a2);
}

float sub_1DCB9E8EC(float32x4_t ***a1, float a2)
{
  float32x4_t **v3;
  float32x4_t **v4;
  float v5;
  float32x4_t *v6;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0.0;
  while (v3 != v4)
  {
    v6 = *v3;
    sub_1DCB3F39C(*v3);
    v5 = sub_1DCB3F39C(v6) + v5;
    ++v3;
  }
  return sqrtf(v5 / (float)((float)(dword_1F03B51A8 * dword_1F03B51A8) * a2));
}

void sub_1DCB9E970(int a1@<W0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>, __n128 a5@<Q0>)
{
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  __n128 v13;
  unsigned int v14;
  float v15;
  uint64_t v16;
  float v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  float v29;
  float v30;
  float v31;
  float v32;
  __float2 v33;
  __float2 v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v42;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_1DCBA51B8(a4, a1);
  v9 = atomic_load((unsigned __int8 *)&qword_1F03B5168);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1F03B5168))
  {
    dword_1F03B5160 = 1;
    __cxa_guard_release(&qword_1F03B5168);
  }
  v10 = atomic_load((unsigned __int8 *)&qword_1F03B5178);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1F03B5178))
  {
    dword_1F03B5170 = 1065353216;
    __cxa_guard_release(&qword_1F03B5178);
  }
  v11 = (int)sqrt((double)a1);
  if (v11)
  {
    v12 = 0;
    v13 = a5;
    v13.n128_u32[3] = 0;
    v42 = (float32x4_t)v13;
    v14 = dword_1F03B5160;
    v15 = *(float *)&dword_1F03B5170 * 4.6566e-10;
    if ((v11 * v11) <= 1)
      v16 = 1;
    else
      v16 = (v11 * v11);
    v17 = 1.0 / (float)v11;
    do
    {
      if (a3)
      {
        v18 = 48271 * (v14 % 0xADC8);
        v19 = 3399 * (v14 / 0xADC8);
        v20 = v18 >= v19;
        v21 = v18 - v19;
        if (v20)
          v22 = 0;
        else
          v22 = 0x7FFFFFFF;
        v23 = v22 + v21;
        v24 = (float)(v23 - 1);
        v25 = v23 / 0xADC8;
        v26 = 48271 * (v23 % 0xADC8);
        v25 *= 3399;
        v20 = v26 >= v25;
        v27 = v26 - v25;
        if (v20)
          v28 = 0;
        else
          v28 = 0x7FFFFFFF;
        v14 = v28 + v27;
        dword_1F03B5160 = v28 + v27;
        v29 = (float)((int)v12 % v11) + (float)(v15 * v24);
        v30 = (float)((int)v12 / v11) + (float)(v15 * (float)(v28 + v27 - 1));
      }
      else
      {
        v29 = (double)((int)v12 % v11) + 0.5;
        v30 = (double)((int)v12 / v11) + 0.5;
      }
      v31 = (float)(v29 * v17) * 6.28318531;
      v32 = acosf((float)((float)(v30 + v30) * v17) + -1.0);
      v33 = __sincosf_stret(v32);
      v34 = __sincosf_stret(v31);
      v35.f32[0] = v34.__cosval * v33.__sinval;
      v35.f32[1] = v34.__sinval * v33.__sinval;
      v35.i64[1] = LODWORD(v33.__cosval);
      v36 = (int8x16_t)vmulq_f32(v35, v35);
      *(float32x2_t *)v36.i8 = vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
      v36.i32[0] = vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1)).u32[0];
      v37 = vrsqrte_f32((float32x2_t)v36.u32[0]);
      v38 = vmul_f32(vrsqrts_f32((float32x2_t)v36.u32[0], vmul_f32(v37, v37)), v37);
      v39 = vmulq_n_f32(v35, vmul_f32(v38, vrsqrts_f32((float32x2_t)v36.u32[0], vmul_f32(v38, v38))).f32[0]);
      if (a2)
      {
        v40 = (int8x16_t)vmulq_f32(v39, v42);
        if (vaddv_f32(vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL))) < 0.0)
          v39 = vnegq_f32(v39);
      }
      *(float32x4_t *)(*a4 + 16 * v12++) = v39;
    }
    while (v16 != v12);
  }
}

float sub_1DCB9EC3C(double a1, __n128 a2, float a3, uint64_t a4, uint64_t **a5, int a6, int a7)
{
  float v8;
  float v9;
  double v10;
  int v11;
  char *v12;
  char *v13;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  __n128 v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  char *v31;
  char *v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  v8 = 1.0;
  if (a3 <= 1.0)
    v8 = a3;
  if (v8 >= 0.0)
    v9 = v8;
  else
    v9 = 0.0;
  v10 = sqrt((double)a6);
  v11 = (int)v10 * (int)v10;
  sub_1DCB9E970(v11, 1, a7, &v31, a2);
  v12 = v31;
  v13 = v32;
  if (v31 != v32)
  {
    __asm { FMOV            V10.2S, #1.0 }
    do
    {
      v19 = *a5;
      v20 = a5[1];
      while (v19 != v20)
      {
        v21 = *v19;
        v22 = (std::__shared_weak_count *)v19[1];
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
        }
        v40 = 0u;
        v38 = 0u;
        v39 = 0u;
        v34 = 0u;
        LODWORD(v34) = 2139095039;
        v41 = 0uLL;
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        *(_QWORD *)&v38 = 0;
        sub_1DCAF1160(v21);
        if ((_QWORD)v38)
        {
          v25.n128_u32[0] = v34;
          if (*(float *)&v34 < (float)((float)(v9 * -50.0) + 50.5))
          {
            ++v33;
            if (v22)
            {
              v28 = (unint64_t *)&v22->__shared_owners_;
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v22->__on_zero_shared)(v22, v25);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            break;
          }
        }
        if (v22)
        {
          v26 = (unint64_t *)&v22->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v19 += 2;
      }
      v12 += 16;
    }
    while (v12 != v13);
    v12 = v31;
  }
  if (v12)
  {
    v32 = v12;
    operator delete(v12);
  }
  return 1.0 - powf(1.0 - (float)((float)(v11 - v33) / (float)v11), (float)(v9 * 2.0) + 1.0);
}

void sub_1DCB9EEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  _Unwind_Resume(exception_object);
}

double sub_1DCB9EF20(uint64_t **a1, uint64_t **a2, uint64_t a3, __n128 a4, __n128 a5)
{
  uint64_t *v5;
  int v11;
  int i;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __n128 v19;
  unint64_t *v20;
  unint64_t v21;
  float v22;
  float v23;
  int v24;
  int j;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __n128 v32;
  unint64_t *v33;
  unint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  double result;
  uint64_t *v38;
  float v40;
  uint64_t *v41;
  float32x4_t v42;
  uint64_t v45;

  v5 = *a1;
  v38 = a1[1];
  if (*a1 != v38)
  {
    __asm { FMOV            V10.2S, #1.0 }
    v42 = 0u;
    while (2)
    {
      v41 = v5;
      v45 = *v5;
      switch(*(_DWORD *)(*v5 + 24))
      {
        case 0:
        case 3:
          v11 = 0;
          for (i = 0; i != 60; ++i)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 32))(v45);
            v14 = *a2;
            v13 = a2[1];
            if (*a2 != v13)
            {
              do
              {
                v15 = *v14;
                v16 = (std::__shared_weak_count *)v14[1];
                if (v16)
                {
                  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                  do
                    v18 = __ldxr(p_shared_owners);
                  while (__stxr(v18 + 1, p_shared_owners));
                }
                sub_1DCAF1160(v15);
                v19.n128_u32[0] = 2139095039;
                if (v16)
                {
                  v20 = (unint64_t *)&v16->__shared_owners_;
                  do
                    v21 = __ldaxr(v20);
                  while (__stlxr(v21 - 1, v20));
                  if (!v21)
                  {
                    ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v19);
                    std::__shared_weak_count::__release_weak(v16);
                  }
                }
                v14 += 2;
              }
              while (v14 != v13);
            }
            ++v11;
          }
          v22 = (float)v11;
          goto LABEL_31;
        case 1:
          v24 = 0;
          for (j = 0; j != 60; ++j)
          {
            sub_1DCB87FE8(v45, (const char *)a2, a3, 0.05);
            v26 = *a2;
            v27 = a2[1];
            if (*a2 != v27)
            {
              do
              {
                v28 = *v26;
                v29 = (std::__shared_weak_count *)v26[1];
                if (v29)
                {
                  v30 = (unint64_t *)&v29->__shared_owners_;
                  do
                    v31 = __ldxr(v30);
                  while (__stxr(v31 + 1, v30));
                }
                sub_1DCAF1160(v28);
                v32.n128_u32[0] = 2139095039;
                if (v29)
                {
                  v33 = (unint64_t *)&v29->__shared_owners_;
                  do
                    v34 = __ldaxr(v33);
                  while (__stlxr(v34 - 1, v33));
                  if (!v34)
                  {
                    ((void (*)(std::__shared_weak_count *, __n128))v29->__on_zero_shared)(v29, v32);
                    std::__shared_weak_count::__release_weak(v29);
                  }
                }
                v26 += 2;
              }
              while (v26 != v27);
            }
            ++v24;
          }
          v22 = (float)v24;
LABEL_31:
          v23 = v22 * 0.016667;
          goto LABEL_32;
        case 2:
          v40 = sub_1DCB9EC3C(a4.n128_f64[0], a5, 0.15, (uint64_t)a1, a2, 121, 1);
          goto LABEL_34;
        default:
          v23 = 0.0;
LABEL_32:
          v40 = v23;
LABEL_34:
          *(double *)v35.i64 = (*(double (**)(uint64_t, __n128, __n128))(*(_QWORD *)v45 + 40))(v45, a4, a5);
          v42 = vmlaq_n_f32(v42, v35, v40);
          v5 = v41 + 1;
          if (v41 + 1 == v38)
            goto LABEL_37;
          continue;
      }
    }
  }
  v42 = 0u;
LABEL_37:
  v36 = v42;
  v36.i32[3] = 0;
  *(_QWORD *)&result = vminnmq_f32(v36, (float32x4_t)xmmword_1DCC57D20).u64[0];
  return result;
}

void sub_1DCB9F410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(exception_object);
}

void sub_1DCB9F430(void *a1@<X0>, _QWORD *a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>, float32x4_t a5@<Q2>, float32x4_t a6@<Q3>)
{
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  unint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  BOOL v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t j;
  uint64_t v72;
  char *v73;
  int v74;
  int v75;
  int v76;
  const char *v77;
  uint64_t v78;
  int v79;
  const char *v80;
  uint64_t v81;
  int v82;
  const char *v83;
  uint64_t v84;
  int v85;
  const char *v86;
  uint64_t v87;
  unsigned int v88;
  const char *v89;
  uint64_t v90;
  int32x4_t v91;
  uint32x4_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  float *v97;
  float32x4_t v98;
  _QWORD *v99;
  uint64_t v100;
  void *v101;
  void *v102;
  id v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t k;
  uint64_t v108;
  uint64_t v109;
  float32x4_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  id v114;
  void *v115;
  id v116;
  id obj;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t i;
  _QWORD *v122;
  char *v123;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  void *__p[2];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _BYTE v140[132];
  _DWORD v141[2];
  int v142;
  _BYTE v143[128];
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v116 = a1;
  objc_msgSend_transform(v116, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  v115 = v9;
  if (v9)
  {
    objc_msgSend_matrix(v9, v10, v11);
    v12 = 0;
    *(_OWORD *)__p = v13;
    v137 = v14;
    v138 = v15;
    v139 = v16;
    v144 = 0u;
    v145 = 0u;
    v146 = 0u;
    v147 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v144 + v12 * 8) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(*(_OWORD *)&__p[v12])), a4, (float32x2_t)__p[v12], 1), a5, *(float32x4_t *)&__p[v12], 2), a6, *(float32x4_t *)&__p[v12], 3);
      v12 += 2;
    }
    while (v12 != 8);
    a4 = v145;
    a3 = v144;
    a6 = v147;
    a5 = v146;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v114 = v116;
    if ((objc_msgSend_makeVerticesUniqueAndReturnError_(v114, v19, 0) & 1) != 0)
    {
      objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v114, v20, (uint64_t)CFSTR("position"), 786435);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      objc_msgSend_submeshes(v114, v22, v23);
      obj = (id)objc_claimAutoreleasedReturnValue();
      v119 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v24, (uint64_t)&v132, v143, 16);
      if (!v119)
        goto LABEL_32;
      v118 = *(_QWORD *)v133;
      v122 = a2;
      while (1)
      {
        for (i = 0; i != v119; ++i)
        {
          if (*(_QWORD *)v133 != v118)
            objc_enumerationMutation(obj);
          v27 = *(void **)(*((_QWORD *)&v132 + 1) + 8 * i);
          objc_msgSend_indexBuffer(v27, v25, v26);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_map(v28, v29, v30);
          v120 = (void *)objc_claimAutoreleasedReturnValue();

          v123 = (char *)objc_msgSend_bytes(v120, v31, v32);
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v137 = 0;
          if (objc_msgSend_geometryType(v27, v33, v34) != 2 || objc_msgSend_indexType(v27, v35, v36) != 32)
          {
            v37 = objc_msgSend_indexCount(v27, v35, v36);
            sub_1DCB231F4((uint64_t)__p, v37);
            if (objc_msgSend_geometryType(v27, v38, v39) != 5)
              goto LABEL_18;
            objc_msgSend_topology(v27, v40, v41);
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            if (v42)
            {
              objc_msgSend_topology(v27, v40, v41);
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_faceTopology(v43, v44, v45);
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              v47 = v46 == 0;

              if (!v47)
              {
                objc_msgSend_topology(v27, v40, v41);
                v48 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_faceTopology(v48, v49, v50);
                v51 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_map(v51, v52, v53);
                v54 = (void *)objc_claimAutoreleasedReturnValue();

                v42 = (void *)objc_msgSend_bytes(v54, v55, v56);
                objc_msgSend_topology(v27, v57, v58);
                v59 = (void *)objc_claimAutoreleasedReturnValue();
                v62 = objc_msgSend_faceCount(v59, v60, v61);

LABEL_20:
                v63 = objc_msgSend_indexCount(v27, v40, v41);
                v66 = objc_msgSend_indexType(v27, v64, v65);
                v69 = objc_msgSend_geometryType(v27, v67, v68);
                sub_1DCC1903C(__p, v123, v63, v42, v62, v66, v69, 2);
                v123 = (char *)__p[0];

                goto LABEL_21;
              }
LABEL_18:
              v42 = 0;
            }
            v54 = 0;
            v62 = 0;
            goto LABEL_20;
          }
LABEL_21:
          v70 = objc_msgSend_indexCount(v27, v35, v36);
          if (v70)
          {
            for (j = 0; j < v70; j += 3)
            {
              v72 = operator new();
              sub_1DCB3F434((_QWORD *)v72);
              v73 = &v123[4 * j];
              v75 = *((_DWORD *)v73 + 1);
              v141[0] = *(_DWORD *)v73;
              v74 = v141[0];
              v141[1] = v75;
              v142 = *((_DWORD *)v73 + 2);
              v76 = v142;
              v79 = objc_msgSend_stride(v21, v77, v78);
              v82 = objc_msgSend_stride(v21, v80, v81);
              v85 = objc_msgSend_stride(v21, v83, v84);
              v88 = objc_msgSend_bufferSize(v21, v86, v87);
              v91.i32[0] = v74 * v79;
              v91.i32[1] = v75 * v82;
              v91.i32[2] = v76 * v85;
              v92 = (uint32x4_t)vcgeq_s32(v91, vdupq_n_s32(v88));
              v92.i32[3] = v92.i32[2];
              if ((vmaxvq_u32(v92) & 0x80000000) == 0)
              {
                v93 = 0;
                *(_DWORD *)v72 = v74;
                *(_DWORD *)(v72 + 4) = v75;
                *(_DWORD *)(v72 + 8) = v76;
                v145 = 0u;
                v146 = 0u;
                v144 = 0u;
                do
                {
                  v94 = objc_msgSend_dataStart(v21, v89, v90);
                  v97 = (float *)(v94 + objc_msgSend_stride(v21, v95, v96) * v141[v93]);
                  *(&v144 + v93++) = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(a6, a3, *v97), a4, v97[1]), a5, v97[2]);
                }
                while (v93 != 3);
                v98 = v145;
                *(float32x4_t *)(v72 + 64) = v144;
                *(float32x4_t *)(v72 + 80) = v98;
                *(float32x4_t *)(v72 + 96) = v146;
                *(_DWORD *)(v72 + 12) = v122[2];
                sub_1DCB3F440(v72);
                v99 = operator new(0x18uLL);
                v99[1] = v122;
                v99[2] = v72;
                v100 = *v122;
                *v99 = *v122;
                *(_QWORD *)(v100 + 8) = v99;
                *v122 = v99;
                ++v122[2];
              }
            }
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }

          a2 = v122;
        }
        v119 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v25, (uint64_t)&v132, v143, 16);
        if (!v119)
        {
LABEL_32:

          goto LABEL_33;
        }
      }
    }

  }
  else
  {
LABEL_33:
    objc_msgSend_children(v116, v17, v18);
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    v102 = v101;
    if (v101)
    {
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      v103 = v101;
      v105 = objc_msgSend_countByEnumeratingWithState_objects_count_(v103, v104, (uint64_t)&v128, v140, 16);
      if (v105)
      {
        v106 = *(_QWORD *)v129;
        do
        {
          for (k = 0; k != v105; ++k)
          {
            if (*(_QWORD *)v129 != v106)
              objc_enumerationMutation(v103);
            v108 = *(_QWORD *)(*((_QWORD *)&v128 + 1) + 8 * k);
            v144 = 0uLL;
            v145.i64[0] = 0;
            sub_1DCB9F430(&v144, v108, (__n128)a3, (__n128)a4, (__n128)a5, (__n128)a6);
            v109 = v145.i64[0];
            if (v145.i64[0])
            {
              v110 = v144;
              v111 = *(_QWORD *)v144.i64[1];
              *(_QWORD *)(v111 + 8) = *(_QWORD *)(v144.i64[0] + 8);
              **(_QWORD **)(v110.i64[0] + 8) = v111;
              v112 = *a2;
              *(_QWORD *)(v112 + 8) = v110.i64[1];
              *(_QWORD *)v110.i64[1] = v112;
              *a2 = v110.i64[0];
              *(_QWORD *)(v110.i64[0] + 8) = a2;
              a2[2] += v109;
              v145.i64[0] = 0;
            }
            sub_1DCB032E4(&v144);
          }
          v105 = objc_msgSend_countByEnumeratingWithState_objects_count_(v103, v113, (uint64_t)&v128, v140, 16);
        }
        while (v105);
      }

    }
  }

}

void sub_1DCB9FA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  void *v44;
  _QWORD *v45;

  sub_1DCB032E4(v45);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB9FBC8(float32x4_t ***a1)
{
  float32x4_t **v1;
  float32x4_t **v2;
  float32x4_t *v3;
  float32x4_t *v4;
  _QWORD *v5;
  uint64_t v6;
  float32x4_t *v7;
  _QWORD *v8;
  uint64_t v9;
  float32x4_t *v10;
  _QWORD *v11;
  uint64_t v12;
  float32x4_t *v13;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  int32x4_t v25;
  _QWORD *v26;
  int32x4_t v27;
  uint64_t v28;
  float32x4_t v29;
  int32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  int32x4_t v33;
  _QWORD *v34;
  _QWORD *v35;
  float32x4_t *v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v43;
  float32x4_t v44;
  __n128 v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  float32x4_t *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = 1065353216;
  v55 = 0u;
  v56 = 0u;
  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    do
    {
      v3 = *v1;
      v52 = *v1 + 4;
      v4 = sub_1DCBA52A0((uint64_t)&v55, v52, (uint64_t)&unk_1DCC58300, (_OWORD **)&v52);
      v5 = operator new(0x18uLL);
      v5[2] = v3;
      v6 = v4[2].i64[0];
      v4 += 2;
      *v5 = v6;
      v5[1] = v4;
      *(_QWORD *)(v6 + 8) = v5;
      v4->i64[0] = (uint64_t)v5;
      ++v4[1].i64[0];
      v52 = v3 + 5;
      v7 = sub_1DCBA52A0((uint64_t)&v55, v3 + 5, (uint64_t)&unk_1DCC58300, (_OWORD **)&v52);
      v8 = operator new(0x18uLL);
      v8[2] = v3;
      v9 = v7[2].i64[0];
      v7 += 2;
      *v8 = v9;
      v8[1] = v7;
      *(_QWORD *)(v9 + 8) = v8;
      v7->i64[0] = (uint64_t)v8;
      ++v7[1].i64[0];
      v52 = v3 + 6;
      v10 = sub_1DCBA52A0((uint64_t)&v55, v3 + 6, (uint64_t)&unk_1DCC58300, (_OWORD **)&v52);
      v11 = operator new(0x18uLL);
      v11[2] = v3;
      v12 = v10[2].i64[0];
      v10 += 2;
      *v11 = v12;
      v11[1] = v10;
      *(_QWORD *)(v12 + 8) = v11;
      v10->i64[0] = (uint64_t)v11;
      ++v10[1].i64[0];
      ++v1;
    }
    while (v1 != v2);
    v13 = (float32x4_t *)v56;
    if ((_QWORD)v56)
    {
      __asm { FMOV            V0.4S, #1.0 }
      v43 = _Q0;
      do
      {
        v46 = v13[1];
        v52 = 0;
        v53 = 0;
        v54 = 0;
        sub_1DCBA5584(&v52, (uint64_t)&v13[2]);
        while (v54)
        {
          v19 = v53;
          v20 = *(_QWORD *)(v53 + 16);
          v21 = vsubq_f32(*(float32x4_t *)(v20 + 64), v46);
          v22 = (int32x4_t)vmulq_f32(v21, v21);
          if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1)), (float32x4_t)vdupq_laneq_s32(v22, 2)).f32[0]) >= 0.000001)
          {
            v24 = vsubq_f32(*(float32x4_t *)(v20 + 80), v46);
            v25 = (int32x4_t)vmulq_f32(v24, v24);
            if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.i8, 1)), (float32x4_t)vdupq_laneq_s32(v25, 2)).f32[0]) >= 0.000001)v23 = (float32x4_t *)(v20 + 240);
            else
              v23 = (float32x4_t *)(v20 + 224);
          }
          else
          {
            v23 = (float32x4_t *)(v20 + 208);
          }
          v47 = *v23;
          v49 = &v49;
          v50 = &v49;
          v51 = 0;
          v26 = operator new(0x18uLL);
          v26[1] = &v49;
          v26[2] = v20;
          *v26 = &v49;
          v49 = v26;
          v50 = v26;
          v51 = 1;
          if ((float32x4_t **)v19 == &v52)
            goto LABEL_24;
          do
          {
            v28 = *(_QWORD *)(v19 + 16);
            if (v28 != v20)
            {
              v29 = vsubq_f32(*(float32x4_t *)(v28 + 64), v46);
              v30 = (int32x4_t)vmulq_f32(v29, v29);
              if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.i8, 1)), (float32x4_t)vdupq_laneq_s32(v30, 2)).f32[0]) >= 0.000001)
              {
                v32 = vsubq_f32(*(float32x4_t *)(v28 + 80), v46);
                v33 = (int32x4_t)vmulq_f32(v32, v32);
                v31 = (float32x4_t *)(sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.i8, 1)), (float32x4_t)vdupq_laneq_s32(v33, 2)).f32[0]) >= 0.000001? v28 + 240: v28 + 224);
              }
              else
              {
                v31 = (float32x4_t *)(v28 + 208);
              }
              v44 = *v31;
              v45 = sub_1DCB3FAA8((__n128 *)v20);
              v27 = (int32x4_t)vmulq_f32((float32x4_t)sub_1DCB3FAA8((__n128 *)v28), (float32x4_t)v45);
              v27.i64[0] = vaddq_f32(vaddq_f32((float32x4_t)v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.i8, 1)), (float32x4_t)vdupq_laneq_s32(v27, 2)).u64[0];
              if (*(float *)v27.i32 > 0.75)
              {
                v34 = operator new(0x18uLL);
                v34[1] = &v49;
                v34[2] = v28;
                v35 = v49;
                *v34 = v49;
                v35[1] = v34;
                v49 = v34;
                ++v51;
                v27 = (int32x4_t)vaddq_f32(v44, v47);
                v47 = (float32x4_t)v27;
              }
            }
            v19 = *(_QWORD *)(v19 + 8);
          }
          while ((float32x4_t **)v19 != &v52);
          v26 = v50;
          if (v50 != &v49)
          {
            *(float *)v27.i32 = (float)v51;
            v47 = vmulq_f32(v47, vdivq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.i8, 0)));
            do
            {
LABEL_24:
              v36 = (float32x4_t *)v26[2];
              v48 = v36;
              v37 = vsubq_f32(v36[4], v46);
              v38 = (int32x4_t)vmulq_f32(v37, v37);
              if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.i8, 1)), (float32x4_t)vdupq_laneq_s32(v38, 2)).f32[0]) >= 0.000001)
              {
                v40 = vsubq_f32(v36[5], v46);
                v41 = (int32x4_t)vmulq_f32(v40, v40);
                if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.i8, 1)), (float32x4_t)vdupq_laneq_s32(v41, 2)).f32[0]) >= 0.000001)v39 = v36 + 15;
                else
                  v39 = v36 + 14;
              }
              else
              {
                v39 = v36 + 13;
              }
              *v39 = v47;
              sub_1DCB9DCDC((uint64_t)&v52, &v48);
              v26 = (_QWORD *)v26[1];
            }
            while (v26 != &v49);
          }
          sub_1DCB032E4(&v49);
        }
        sub_1DCB032E4(&v52);
        v13 = (float32x4_t *)v13->i64[0];
      }
      while (v13);
    }
  }
  return sub_1DCBA522C((uint64_t)&v55);
}

void sub_1DCB9FFDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCBA522C(v1 - 128);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCBA0014@<X0>(_QWORD *a1@<X0>, int *a2@<X1>, unint64_t a3@<X2>, float32x2_t **a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t i;
  int8x16_t *v10;
  float32x4_t *v11;
  int8x16_t **v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int8x16_t **v21;
  char *v22;
  char *v23;
  int8x16_t *v24;
  float32x4_t *v25;
  int8x16_t **v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  int8x16_t **v35;
  char *v36;
  char *v37;
  int8x16_t *v38;
  float32x4_t *v39;
  int8x16_t **v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  int8x16_t **v49;
  char *v50;
  char *v51;
  int8x16_t *v52;
  const char *v53;
  uint64_t v54;
  int v55;
  float32x2_t *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  _QWORD *v67;
  const std::locale::facet *v68;
  int v69;
  _QWORD *v70;
  _QWORD *result;
  _QWORD *v72;
  std::locale::id *v73;
  unsigned int v79;
  float v80;
  __int128 v81;
  float v82;
  float v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  float32x2_t *v87;
  double v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  _QWORD *v103;
  _QWORD *v104;
  const std::locale::facet *v105;
  char v106;
  _QWORD *v107;
  _QWORD *v108;
  const std::locale::facet *v109;
  __int128 v110;
  BOOL v111;
  char v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  const std::locale::facet *v116;
  int v117;
  char v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  __int128 v125;
  float32x2_t v126;
  uint64_t v127;
  int8x16_t v128[2];
  int8x16_t v129[2];
  std::locale v130[2];
  __int128 v131;
  float32x4_t *v132[2];

  if (*(_QWORD *)(a3 + 16))
  {
    for (i = *(_QWORD *)(a3 + 8); i != a3; i = *(_QWORD *)(i + 8))
    {
      v10 = *(int8x16_t **)(i + 16);
      *(_OWORD *)&v130[0].__locale_ = 0u;
      v131 = 0u;
      sub_1DCB3F1F8((int8x16_t *)v130, v10[4], v10[5]);
      memset(v129, 0, sizeof(v129));
      sub_1DCB3F1F8(v129, v10[4], v10[6]);
      memset(v128, 0, sizeof(v128));
      sub_1DCB3F1F8(v128, v10[5], v10[6]);
      v132[0] = (float32x4_t *)v130;
      v11 = sub_1DCBA561C((uint64_t)(a1 + 15), (float32x4_t *)v130, (uint64_t)&unk_1DCC58300, v132);
      v12 = (int8x16_t **)v11[3].i64[1];
      v13 = v11[4].u64[0];
      if ((unint64_t)v12 >= v13)
      {
        v15 = v11[3].i64[0];
        v16 = ((uint64_t)v12 - v15) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          goto LABEL_101;
        v17 = v13 - v15;
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)sub_1DCAE79A4((uint64_t)&v11[4], v19);
        else
          v20 = 0;
        v21 = (int8x16_t **)&v20[8 * v16];
        *v21 = v10;
        v14 = v21 + 1;
        v23 = (char *)v11[3].i64[0];
        v22 = (char *)v11[3].i64[1];
        if (v22 != v23)
        {
          do
          {
            v24 = (int8x16_t *)*((_QWORD *)v22 - 1);
            v22 -= 8;
            *--v21 = v24;
          }
          while (v22 != v23);
          v22 = (char *)v11[3].i64[0];
        }
        v11[3].i64[0] = (uint64_t)v21;
        v11[3].i64[1] = (uint64_t)v14;
        v11[4].i64[0] = (uint64_t)&v20[8 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v12 = v10;
        v14 = v12 + 1;
      }
      v11[3].i64[1] = (uint64_t)v14;
      v132[0] = (float32x4_t *)v129;
      v25 = sub_1DCBA561C((uint64_t)(a1 + 15), (float32x4_t *)v129, (uint64_t)&unk_1DCC58300, v132);
      v26 = (int8x16_t **)v25[3].i64[1];
      v27 = v25[4].u64[0];
      if ((unint64_t)v26 >= v27)
      {
        v29 = v25[3].i64[0];
        v30 = ((uint64_t)v26 - v29) >> 3;
        if ((unint64_t)(v30 + 1) >> 61)
          goto LABEL_101;
        v31 = v27 - v29;
        v32 = v31 >> 2;
        if (v31 >> 2 <= (unint64_t)(v30 + 1))
          v32 = v30 + 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        if (v33)
          v34 = (char *)sub_1DCAE79A4((uint64_t)&v25[4], v33);
        else
          v34 = 0;
        v35 = (int8x16_t **)&v34[8 * v30];
        *v35 = v10;
        v28 = v35 + 1;
        v37 = (char *)v25[3].i64[0];
        v36 = (char *)v25[3].i64[1];
        if (v36 != v37)
        {
          do
          {
            v38 = (int8x16_t *)*((_QWORD *)v36 - 1);
            v36 -= 8;
            *--v35 = v38;
          }
          while (v36 != v37);
          v36 = (char *)v25[3].i64[0];
        }
        v25[3].i64[0] = (uint64_t)v35;
        v25[3].i64[1] = (uint64_t)v28;
        v25[4].i64[0] = (uint64_t)&v34[8 * v33];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *v26 = v10;
        v28 = v26 + 1;
      }
      v25[3].i64[1] = (uint64_t)v28;
      v132[0] = (float32x4_t *)v128;
      v39 = sub_1DCBA561C((uint64_t)(a1 + 15), (float32x4_t *)v128, (uint64_t)&unk_1DCC58300, v132);
      v40 = (int8x16_t **)v39[3].i64[1];
      v41 = v39[4].u64[0];
      if ((unint64_t)v40 >= v41)
      {
        v43 = v39[3].i64[0];
        v44 = ((uint64_t)v40 - v43) >> 3;
        if ((unint64_t)(v44 + 1) >> 61)
LABEL_101:
          sub_1DCAE4C44();
        v45 = v41 - v43;
        v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1))
          v46 = v44 + 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        if (v47)
          v48 = (char *)sub_1DCAE79A4((uint64_t)&v39[4], v47);
        else
          v48 = 0;
        v49 = (int8x16_t **)&v48[8 * v44];
        *v49 = v10;
        v42 = v49 + 1;
        v51 = (char *)v39[3].i64[0];
        v50 = (char *)v39[3].i64[1];
        if (v50 != v51)
        {
          do
          {
            v52 = (int8x16_t *)*((_QWORD *)v50 - 1);
            v50 -= 8;
            *--v49 = v52;
          }
          while (v50 != v51);
          v50 = (char *)v39[3].i64[0];
        }
        v39[3].i64[0] = (uint64_t)v49;
        v39[3].i64[1] = (uint64_t)v42;
        v39[4].i64[0] = (uint64_t)&v48[8 * v47];
        if (v50)
          operator delete(v50);
      }
      else
      {
        *v40 = v10;
        v42 = v40 + 1;
      }
      v39[3].i64[1] = (uint64_t)v42;
    }
    sub_1DCB9D974(a1, a3, a3, a5);
    if (a1[10] == a1[9])
    {
      result = sub_1DCB0345C(v130, "Unable to pack a map for AO baking");
      *a4 = 0;
      *(_OWORD *)(a4 + 1) = *(_OWORD *)&v130[0].__locale_;
      a4[3] = (float32x2_t *)v131;
    }
    else
    {
      sub_1DCB9E50C(a1);
      sub_1DCB9DDA8((uint64_t)a1);
      v55 = *a2;
      if (*a2 <= 4096)
      {
        v56 = 0;
        v72 = (_QWORD *)MEMORY[0x1E0DE4A60];
        v73 = (std::locale::id *)MEMORY[0x1E0DE4A90];
        __asm { FMOV            V0.2S, #1.0 }
        v127 = _D0;
        do
        {
          sub_1DCB3EB18(v55);
          v79 = 0;
          v80 = 0.0;
          LODWORD(v81) = 1.0;
          v125 = v81;
          v82 = -1.0;
          v83 = 0.5;
          while (1)
          {
            if (v56)
            {
              sub_1DCBEB914(v56);
              MEMORY[0x1DF0D228C](v56, 0x1020C4084B17629);
            }
            v56 = (float32x2_t *)operator new();
            sub_1DCBEB904((uint64_t)v56, COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&v125, 0)));
            v85 = (uint64_t *)a1[9];
            v84 = (uint64_t *)a1[10];
            v86 = (uint64_t)v85;
            if (v85 != v84)
            {
              do
              {
                v87 = (float32x2_t *)*v85;
                sub_1DCBEA8B8(*v85);
                *(float *)&v88 = *(float *)&v125 / (float)*a2;
                v89 = (float32x2_t)sub_1DCBEB5B0(v88);
                v90 = v87[4];
                if ((vcgt_f32(v89, v90).u8[0] & 1) != 0)
                {
                  v91.i32[0] = vdiv_f32(v89, v90).u32[0];
                  v91.i32[1] = 1.0;
                  v126 = v89;
                  sub_1DCBEA9CC((uint64_t)v87, v91);
                  v92 = v87[4];
                  v93 = vdiv_f32(v126, v92).f32[0];
                  v94 = (float)(40.0 * v92.f32[0]) / v92.f32[1];
                  if (v93 >= v94)
                    v93 = v94;
                  sub_1DCBEA9CC((uint64_t)v87, (float32x2_t)__PAIR64__(LODWORD(v93), v127));
                  v89.i32[1] = v126.i32[1];
                  v95 = v87[4].f32[1];
                }
                else
                {
                  LODWORD(v95) = HIDWORD(*(_QWORD *)&v87[4]);
                }
                v96 = v89.f32[1];
                if (v95 < v89.f32[1])
                {
                  sub_1DCBEA9CC((uint64_t)v87, (float32x2_t)__PAIR64__(v89.f32[1] / v95, v127));
                  v97 = v96 / COERCE_FLOAT(HIDWORD(*(_QWORD *)&v87[4]));
                  v98 = vmuls_lane_f32(40.0, v87[4], 1) / COERCE_FLOAT(*(_QWORD *)&v87[4]);
                  if (v97 >= v98)
                    v97 = v98;
                  sub_1DCBEA9CC((uint64_t)v87, (float32x2_t)__PAIR64__(HIDWORD(v127), LODWORD(v97)));
                }
                ++v85;
              }
              while (v85 != v84);
              v86 = a1[9];
              v85 = (uint64_t *)a1[10];
            }
            v99 = 126 - 2 * __clz(((uint64_t)v85 - v86) >> 3);
            v130[0].__locale_ = (std::locale::__imp *)sub_1DCBA0998;
            v100 = v85 == (uint64_t *)v86 ? 0 : v99;
            sub_1DCBA4CD4(v86, v85, (uint64_t (**)(uint64_t, uint64_t))v130, v100, 1);
            v101 = (uint64_t *)a1[9];
            v102 = (uint64_t *)a1[10];
            while (1)
            {
              if (v101 == v102)
              {
                sub_1DCB03734(v72, (uint64_t)"Successful insertion in a tree of size ", 39);
                v103 = (_QWORD *)std::ostream::operator<<();
                sub_1DCB03734(v103, (uint64_t)" with disp ", 11);
                v104 = (_QWORD *)std::ostream::operator<<();
                std::ios_base::getloc((const std::ios_base *)((char *)v104 + *(_QWORD *)(*v104 - 24)));
                v105 = std::locale::use_facet(v130, v73);
                ((void (*)(const std::locale::facet *, uint64_t))v105->__vftable[2].~facet_0)(v105, 10);
                std::locale::~locale(v130);
                std::ostream::put();
                v106 = 1;
                v82 = *(float *)&v125;
                goto LABEL_84;
              }
              if ((sub_1DCBEB6D4(v56, *v101) & 1) == 0)
                break;
              ++v101;
            }
            sub_1DCB03734(v72, (uint64_t)"Fail insertion in a tree of size ", 33);
            v107 = (_QWORD *)std::ostream::operator<<();
            sub_1DCB03734(v107, (uint64_t)" with disp ", 11);
            v108 = (_QWORD *)std::ostream::operator<<();
            std::ios_base::getloc((const std::ios_base *)((char *)v108 + *(_QWORD *)(*v108 - 24)));
            v109 = std::locale::use_facet(v130, v73);
            ((void (*)(const std::locale::facet *, uint64_t))v109->__vftable[2].~facet_0)(v109, 10);
            std::locale::~locale(v130);
            std::ostream::put();
            v106 = 0;
            v80 = *(float *)&v125;
LABEL_84:
            std::ostream::flush();
            if (v79 >= 0x28 && v82 == -1.0)
              break;
            v110 = v125;
            *(float *)&v110 = *(float *)&v125 + v83;
            if (v82 == -1.0)
              v83 = v83 + v83;
            else
              *(float *)&v110 = (float)(v82 + v80) * 0.5;
            if (v79 > 0x27)
              *(float *)&v110 = v82;
            v125 = v110;
            v111 = v79++ > 0xE;
            if (v111)
              v112 = v106;
            else
              v112 = 0;
            if ((v112 & 1) != 0)
              goto LABEL_55;
          }
          sub_1DCB03734(v72, (uint64_t)"This model can't be inserted in a texture of size ", 50);
          v113 = (_QWORD *)std::ostream::operator<<();
          sub_1DCB03734(v113, (uint64_t)". Switching to ", 15);
          v114 = (_QWORD *)std::ostream::operator<<();
          v115 = sub_1DCB03734(v114, (uint64_t)".", 1);
          std::ios_base::getloc((const std::ios_base *)((char *)v115 + *(_QWORD *)(*v115 - 24)));
          v116 = std::locale::use_facet(v130, v73);
          ((void (*)(const std::locale::facet *, uint64_t))v116->__vftable[2].~facet_0)(v116, 10);
          std::locale::~locale(v130);
          std::ostream::put();
          std::ostream::flush();
          v117 = *a2;
          v55 = 2 * *a2;
          *a2 = v55;
          v111 = v117 < 2049;
          v118 = v106 ^ 1;
          if (!v111)
            v118 = 0;
        }
        while ((v118 & 1) != 0);
      }
      else
      {
        v56 = 0;
      }
LABEL_55:
      objc_msgSend_currentProgress(MEMORY[0x1E0CB38A8], v53, v54);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v60 = objc_msgSend_completedUnitCount(v57, v58, v59);
      objc_msgSend_setCompletedUnitCount_(v57, v61, v60 + 4);

      sub_1DCB03734(MEMORY[0x1E0DE4A60], (uint64_t)"Fraction completed : ", 21);
      objc_msgSend_currentProgress(MEMORY[0x1E0CB38A8], v62, v63);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fractionCompleted(v64, v65, v66);
      v67 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v67 + *(_QWORD *)(*v67 - 24)));
      v68 = std::locale::use_facet(v130, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 10);
      std::locale::~locale(v130);
      std::ostream::put();
      std::ostream::flush();

      v69 = *a2;
      v70 = a4 + 1;
      if (v69 <= 4096)
      {
        sub_1DCBEB9D4(v56);
        *(float32x2_t *)&v119 = sub_1DCBEB988(v56);
        sub_1DCBEB878(v56, v119, v120, v121, v122, v123);
        *a4 = v56;
        return sub_1DCB0345C(v70, "");
      }
      else
      {
        result = sub_1DCB0345C(v130, "Too many triangles to pack in a maximum size texture");
        *a4 = 0;
        *(_OWORD *)v70 = *(_OWORD *)&v130[0].__locale_;
        a4[3] = (float32x2_t *)v131;
      }
    }
  }
  else
  {
    result = sub_1DCB0345C(v130, "No triangles to map");
    *a4 = 0;
    *(_OWORD *)(a4 + 1) = *(_OWORD *)&v130[0].__locale_;
    a4[3] = (float32x2_t *)v131;
  }
  return result;
}

void sub_1DCBA093C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25)
{
  std::locale::~locale(&a25);
  _Unwind_Resume(a1);
}

BOOL sub_1DCBA0998(uint64_t a1, uint64_t a2)
{
  float v3;

  v3 = sub_1DCBEA8A4(a1);
  return v3 > sub_1DCBEA8A4(a2);
}

uint64_t sub_1DCBA09D8(float a1)
{
  return (int)(a1 * 255.0);
}

void sub_1DCBA09F0(void *a1, void *a2, void *a3, void *a4, const void **a5, uint64_t a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  const char *v15;
  uint64_t v16;
  id v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  char v36;
  const char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int **v41;
  int ***v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  char v50;
  const char *v51;
  unsigned int v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  int **v57;
  int *v58;
  int v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  int32x4_t v64;
  uint32x4_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  _DWORD *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  _DWORD *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  _DWORD *v81;
  void *v82;
  id v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t j;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  void *v91;
  int32x4_t v92;
  int v93;
  void *v94;
  void *v95;
  int **v96;
  char v97;
  int **v98;
  id v99;
  id v100;
  void *v101;
  void *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int **v108[3];
  void *__p[3];
  int **v110[3];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _BYTE v115[128];
  _BYTE v116[128];
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v95 = v11;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_60;
  v17 = v11;
  v99 = v17;
  if (v12)
  {
    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    objc_msgSend_submeshes(v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v111, v116, 16);
    if (v24)
    {
      v25 = *(_QWORD *)v112;
      do
      {
        for (i = 0; i != v24; ++i)
        {
          if (*(_QWORD *)v112 != v25)
            objc_enumerationMutation(v20);
          objc_msgSend_material(*(void **)(*((_QWORD *)&v111 + 1) + 8 * i), v22, v23);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setProperty_(v27, v28, (uint64_t)v12);

        }
        v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v22, (uint64_t)&v111, v116, 16);
      }
      while (v24);
    }

    v17 = v99;
  }
  objc_msgSend_vertexAttributeDataForAttributeNamed_(v17, v18, (uint64_t)v14);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = v29;
  if (v29)
  {
    if (objc_msgSend_format(v29, v30, v31) == 786435)
    {
      v33 = 0;
      v97 = a6;
      goto LABEL_23;
    }
    v33 = objc_msgSend_format(v32, v30, v31);
    objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v99, v34, (uint64_t)v14, v33);
    v35 = objc_claimAutoreleasedReturnValue();

    v32 = (void *)v35;
  }
  else
  {
    v33 = 0;
  }
  if (v32)
    v36 = a6;
  else
    v36 = 0;
  v97 = v36;
  if (!v32 && (_DWORD)a6)
  {
    objc_msgSend_addAttributeWithName_format_(v99, v30, (uint64_t)v14, 786435);
    objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v99, v37, (uint64_t)v14, 786435);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v97 = 1;
  }
  if (v32)
  {
LABEL_23:
    v39 = objc_msgSend_format(v32, v30, v31) & 0x1F;
    if (!v39)
      goto LABEL_36;
    v40 = objc_msgSend_format(v32, v30, v38) & 0xFFFF0000;
    if ((int)v40 >= 720896)
    {
      if ((_DWORD)v40 == 720896)
      {
        memset(__p, 0, sizeof(__p));
        sub_1DCB3FDF0(__p, *a5, (uint64_t)a5[1], ((_BYTE *)a5[1] - (_BYTE *)*a5) >> 3);
        sub_1DCBA14A8(v32, (int ***)__p, v99, v39, sub_1DCC1EE14);
        v41 = (int **)__p[0];
        if (!__p[0])
          goto LABEL_36;
        v42 = (int ***)__p;
        goto LABEL_35;
      }
      if ((_DWORD)v40 == 786432)
      {
        memset(v110, 0, sizeof(v110));
        sub_1DCB3FDF0(v110, *a5, (uint64_t)a5[1], ((_BYTE *)a5[1] - (_BYTE *)*a5) >> 3);
        sub_1DCBA11A4(v32, v110, v99, v39, (float (*)(float))nullsub_10);
        v41 = v110[0];
        if (v110[0])
        {
          v42 = v110;
          goto LABEL_35;
        }
      }
    }
    else if ((_DWORD)v40 == 0x10000 || (_DWORD)v40 == 196608)
    {
      memset(v108, 0, sizeof(v108));
      sub_1DCB3FDF0(v108, *a5, (uint64_t)a5[1], ((_BYTE *)a5[1] - (_BYTE *)*a5) >> 3);
      sub_1DCBA17AC(v32, v108, v99, v39, sub_1DCBA09D8);
      v41 = v108[0];
      if (v108[0])
      {
        v42 = v108;
LABEL_35:
        v42[1] = v41;
        operator delete(v41);
      }
    }
LABEL_36:
    if (v33)
      objc_msgSend_updateAttributeNamed_withData_(v99, v30, (uint64_t)v14, v32);
  }
  objc_msgSend_vertexAttributeDataForAttributeNamed_(v99, v30, (uint64_t)v13);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = v43;
  if (!v43)
  {
    v47 = 0;
    goto LABEL_43;
  }
  if (objc_msgSend_format(v43, v44, v45) != 786434)
  {
    v47 = objc_msgSend_format(v46, v44, v45);
    objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v99, v48, (uint64_t)v13, 786434);
    v49 = objc_claimAutoreleasedReturnValue();

    v46 = (void *)v49;
LABEL_43:
    if (v46)
      v50 = 1;
    else
      v50 = v97;
    if ((v50 & 1) == 0)
    {
      objc_msgSend_addAttributeWithName_format_(v99, v44, (uint64_t)v13, 786434);
      objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v99, v51, (uint64_t)v13, 786434);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_48;
  }
  v47 = 0;
LABEL_48:
  v94 = v46;
  v52 = objc_msgSend_bufferSize(v46, v44, v45);
  v93 = objc_msgSend_stride(v46, v53, v54);
  if (v46)
  {
    v90 = v47;
    v91 = v32;
    v57 = (int **)*a5;
    v96 = (int **)a5[1];
    if (*a5 != v96)
    {
      v92 = vdupq_n_s32(v52);
      do
      {
        v98 = v57;
        v58 = *v57;
        v59 = (*v57)[1];
        v60 = **v57;
        v61 = (*v57)[2];
        if (objc_msgSend_vertexCount(v99, v55, v56, v90, v91) > v60)
        {
          v62 = v58[1];
          if (objc_msgSend_vertexCount(v99, v55, v56) > v62)
          {
            v63 = v58[2];
            if (objc_msgSend_vertexCount(v99, v55, v56) > v63)
            {
              v64.i32[0] = v60 * v93;
              v64.i32[1] = v59 * v93;
              v64.i32[2] = v61 * v93;
              v65 = (uint32x4_t)vcgeq_s32(v64, v92);
              v65.i32[3] = v65.i32[2];
              if ((vmaxvq_u32(v65) & 0x80000000) == 0)
              {
                v66 = objc_msgSend_dataStart(v94, v55, v56);
                v69 = (_DWORD *)(v66 + objc_msgSend_stride(v94, v67, v68) * *v58);
                *v69 = *((_QWORD *)v58 + 2);
                v69[1] = v58[5];
                v72 = objc_msgSend_dataStart(v94, v70, v71);
                v75 = (_DWORD *)(v72 + objc_msgSend_stride(v94, v73, v74) * v58[1]);
                *v75 = *((_QWORD *)v58 + 3);
                v75[1] = v58[7];
                v78 = objc_msgSend_dataStart(v94, v76, v77);
                v81 = (_DWORD *)(v78 + objc_msgSend_stride(v94, v79, v80) * v58[2]);
                *v81 = *((_QWORD *)v58 + 4);
                v81[1] = v58[9];
              }
            }
          }
        }
        v57 = v98 + 1;
      }
      while (v98 + 1 != v96);
    }
    v32 = v91;
    v46 = v94;
    if (v90)
      objc_msgSend_updateAttributeNamed_withData_(v99, v55, (uint64_t)v13, v94);
  }

LABEL_60:
  objc_msgSend_children(v95, v15, v16, v90, v91);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  if (v82)
  {
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v100 = v82;
    v83 = v82;
    v85 = objc_msgSend_countByEnumeratingWithState_objects_count_(v83, v84, (uint64_t)&v104, v115, 16);
    if (v85)
    {
      v86 = *(_QWORD *)v105;
      do
      {
        for (j = 0; j != v85; ++j)
        {
          if (*(_QWORD *)v105 != v86)
            objc_enumerationMutation(v83);
          v88 = *(_QWORD *)(*((_QWORD *)&v104 + 1) + 8 * j);
          v102 = 0;
          v103 = 0;
          v101 = 0;
          sub_1DCB3FDF0(&v101, *a5, (uint64_t)a5[1], ((_BYTE *)a5[1] - (_BYTE *)*a5) >> 3);
          sub_1DCBA09F0(v88, v12, v13, v14, &v101, a6);
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
        }
        v85 = objc_msgSend_countByEnumeratingWithState_objects_count_(v83, v89, (uint64_t)&v104, v115, 16);
      }
      while (v85);
    }

    v82 = v100;
  }

}

void sub_1DCBA1088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1DCBA11A4(void *a1, int ***a2, void *a3, int a4, float (*a5)(float))
{
  id v8;
  const char *v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  int **v17;
  int **v18;
  int v19;
  __n128 *v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int32x4_t v26;
  uint32x4_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  int32x4_t v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  id v64;

  v64 = a1;
  v8 = a3;
  v11 = objc_msgSend_bufferSize(v64, v9, v10);
  v14 = objc_msgSend_stride(v64, v12, v13);
  v17 = *a2;
  v18 = a2[1];
  if (*a2 != v18)
  {
    v19 = v14;
    v59 = vdupq_n_s32(v11);
    do
    {
      v20 = (__n128 *)*v17;
      v21 = (*v17)[1];
      v22 = **v17;
      v23 = (*v17)[2];
      if (objc_msgSend_vertexCount(v8, v15, v16, *(_OWORD *)&v59) > v22)
      {
        v24 = v20->n128_i32[1];
        if (objc_msgSend_vertexCount(v8, v15, v16) > v24)
        {
          v25 = v20->n128_i32[2];
          if (objc_msgSend_vertexCount(v8, v15, v16) > v25)
          {
            v26.i32[0] = v22 * v19;
            v26.i32[1] = v21 * v19;
            v26.i32[2] = v23 * v19;
            v27 = (uint32x4_t)vcgeq_s32(v26, v59);
            v27.i32[3] = v27.i32[2];
            if ((vmaxvq_u32(v27) & 0x80000000) == 0)
            {
              v28 = objc_msgSend_dataStart(v64, v15, v16);
              v31 = objc_msgSend_stride(v64, v29, v30);
              v32 = v20->n128_i32[0];
              v60 = v20[13];
              v35 = objc_msgSend_format(v64, v33, v34);
              if (a4 >= 1)
              {
                v38 = (float *)(v28 + v31 * v32);
                *v38 = ((float (*)(uint64_t, __n128))a5)(v35, v60);
                if (a4 != 1)
                {
                  v38[1] = a5(v60.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v38[2] = a5(v60.n128_f32[2]);
                    if (a4 != 3)
                      v38[3] = a5(1.0);
                  }
                }
              }
              v39 = objc_msgSend_dataStart(v64, v36, v37);
              v42 = objc_msgSend_stride(v64, v40, v41);
              v43 = v20->n128_i32[1];
              v61 = v20[14];
              v46 = objc_msgSend_format(v64, v44, v45);
              if (a4 >= 1)
              {
                v49 = (float *)(v39 + v42 * v43);
                *v49 = ((float (*)(uint64_t, __n128))a5)(v46, v61);
                if (a4 != 1)
                {
                  v49[1] = a5(v61.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v49[2] = a5(v61.n128_f32[2]);
                    if (a4 != 3)
                      v49[3] = a5(1.0);
                  }
                }
              }
              v50 = objc_msgSend_dataStart(v64, v47, v48);
              v53 = objc_msgSend_stride(v64, v51, v52);
              v54 = v20->n128_i32[2];
              v62 = v20[15];
              v57 = objc_msgSend_format(v64, v55, v56);
              if (a4 >= 1)
              {
                v58 = (float *)(v50 + v53 * v54);
                *v58 = ((float (*)(uint64_t, __n128))a5)(v57, v62);
                if (a4 != 1)
                {
                  v58[1] = a5(v62.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v58[2] = a5(v62.n128_f32[2]);
                    if (a4 != 3)
                      v58[3] = a5(1.0);
                  }
                }
              }
            }
          }
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }

}

void sub_1DCBA1484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1DCBA14A8(void *a1, int ***a2, void *a3, int a4, uint64_t (*a5)(float))
{
  id v8;
  const char *v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  int **v17;
  int **v18;
  int v19;
  __n128 *v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int32x4_t v26;
  uint32x4_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _WORD *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  _WORD *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  _WORD *v58;
  int32x4_t v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  id v64;

  v64 = a1;
  v8 = a3;
  v11 = objc_msgSend_bufferSize(v64, v9, v10);
  v14 = objc_msgSend_stride(v64, v12, v13);
  v17 = *a2;
  v18 = a2[1];
  if (*a2 != v18)
  {
    v19 = v14;
    v59 = vdupq_n_s32(v11);
    do
    {
      v20 = (__n128 *)*v17;
      v21 = (*v17)[1];
      v22 = **v17;
      v23 = (*v17)[2];
      if (objc_msgSend_vertexCount(v8, v15, v16, *(_OWORD *)&v59) > v22)
      {
        v24 = v20->n128_i32[1];
        if (objc_msgSend_vertexCount(v8, v15, v16) > v24)
        {
          v25 = v20->n128_i32[2];
          if (objc_msgSend_vertexCount(v8, v15, v16) > v25)
          {
            v26.i32[0] = v22 * v19;
            v26.i32[1] = v21 * v19;
            v26.i32[2] = v23 * v19;
            v27 = (uint32x4_t)vcgeq_s32(v26, v59);
            v27.i32[3] = v27.i32[2];
            if ((vmaxvq_u32(v27) & 0x80000000) == 0)
            {
              v28 = objc_msgSend_dataStart(v64, v15, v16);
              v31 = objc_msgSend_stride(v64, v29, v30);
              v32 = v20->n128_i32[0];
              v60 = v20[13];
              v35 = objc_msgSend_format(v64, v33, v34);
              if (a4 >= 1)
              {
                v38 = (_WORD *)(v28 + v31 * v32);
                *v38 = ((uint64_t (*)(uint64_t, __n128))a5)(v35, v60);
                if (a4 != 1)
                {
                  v38[1] = a5(v60.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v38[2] = a5(v60.n128_f32[2]);
                    if (a4 != 3)
                      v38[3] = a5(1.0);
                  }
                }
              }
              v39 = objc_msgSend_dataStart(v64, v36, v37);
              v42 = objc_msgSend_stride(v64, v40, v41);
              v43 = v20->n128_i32[1];
              v61 = v20[14];
              v46 = objc_msgSend_format(v64, v44, v45);
              if (a4 >= 1)
              {
                v49 = (_WORD *)(v39 + v42 * v43);
                *v49 = ((uint64_t (*)(uint64_t, __n128))a5)(v46, v61);
                if (a4 != 1)
                {
                  v49[1] = a5(v61.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v49[2] = a5(v61.n128_f32[2]);
                    if (a4 != 3)
                      v49[3] = a5(1.0);
                  }
                }
              }
              v50 = objc_msgSend_dataStart(v64, v47, v48);
              v53 = objc_msgSend_stride(v64, v51, v52);
              v54 = v20->n128_i32[2];
              v62 = v20[15];
              v57 = objc_msgSend_format(v64, v55, v56);
              if (a4 >= 1)
              {
                v58 = (_WORD *)(v50 + v53 * v54);
                *v58 = ((uint64_t (*)(uint64_t, __n128))a5)(v57, v62);
                if (a4 != 1)
                {
                  v58[1] = a5(v62.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v58[2] = a5(v62.n128_f32[2]);
                    if (a4 != 3)
                      v58[3] = a5(1.0);
                  }
                }
              }
            }
          }
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }

}

void sub_1DCBA1788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1DCBA17AC(void *a1, int ***a2, void *a3, int a4, uint64_t (*a5)(float))
{
  id v8;
  const char *v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  int **v17;
  int **v18;
  int v19;
  __n128 *v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int32x4_t v26;
  uint32x4_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  int32x4_t v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  id v64;

  v64 = a1;
  v8 = a3;
  v11 = objc_msgSend_bufferSize(v64, v9, v10);
  v14 = objc_msgSend_stride(v64, v12, v13);
  v17 = *a2;
  v18 = a2[1];
  if (*a2 != v18)
  {
    v19 = v14;
    v59 = vdupq_n_s32(v11);
    do
    {
      v20 = (__n128 *)*v17;
      v21 = (*v17)[1];
      v22 = **v17;
      v23 = (*v17)[2];
      if (objc_msgSend_vertexCount(v8, v15, v16, *(_OWORD *)&v59) > v22)
      {
        v24 = v20->n128_i32[1];
        if (objc_msgSend_vertexCount(v8, v15, v16) > v24)
        {
          v25 = v20->n128_i32[2];
          if (objc_msgSend_vertexCount(v8, v15, v16) > v25)
          {
            v26.i32[0] = v22 * v19;
            v26.i32[1] = v21 * v19;
            v26.i32[2] = v23 * v19;
            v27 = (uint32x4_t)vcgeq_s32(v26, v59);
            v27.i32[3] = v27.i32[2];
            if ((vmaxvq_u32(v27) & 0x80000000) == 0)
            {
              v28 = objc_msgSend_dataStart(v64, v15, v16);
              v31 = objc_msgSend_stride(v64, v29, v30);
              v32 = v20->n128_i32[0];
              v60 = v20[13];
              v35 = objc_msgSend_format(v64, v33, v34);
              if (a4 >= 1)
              {
                v38 = (_BYTE *)(v28 + v31 * v32);
                *v38 = ((uint64_t (*)(uint64_t, __n128))a5)(v35, v60);
                if (a4 != 1)
                {
                  v38[1] = a5(v60.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v38[2] = a5(v60.n128_f32[2]);
                    if (a4 != 3)
                      v38[3] = a5(1.0);
                  }
                }
              }
              v39 = objc_msgSend_dataStart(v64, v36, v37);
              v42 = objc_msgSend_stride(v64, v40, v41);
              v43 = v20->n128_i32[1];
              v61 = v20[14];
              v46 = objc_msgSend_format(v64, v44, v45);
              if (a4 >= 1)
              {
                v49 = (_BYTE *)(v39 + v42 * v43);
                *v49 = ((uint64_t (*)(uint64_t, __n128))a5)(v46, v61);
                if (a4 != 1)
                {
                  v49[1] = a5(v61.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v49[2] = a5(v61.n128_f32[2]);
                    if (a4 != 3)
                      v49[3] = a5(1.0);
                  }
                }
              }
              v50 = objc_msgSend_dataStart(v64, v47, v48);
              v53 = objc_msgSend_stride(v64, v51, v52);
              v54 = v20->n128_i32[2];
              v62 = v20[15];
              v57 = objc_msgSend_format(v64, v55, v56);
              if (a4 >= 1)
              {
                v58 = (_BYTE *)(v50 + v53 * v54);
                *v58 = ((uint64_t (*)(uint64_t, __n128))a5)(v57, v62);
                if (a4 != 1)
                {
                  v58[1] = a5(v62.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v58[2] = a5(v62.n128_f32[2]);
                    if (a4 != 3)
                      v58[3] = a5(1.0);
                  }
                }
              }
            }
          }
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }

}

void sub_1DCBA1A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1DCBA1AB0(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  void *__p;
  void *v16;
  uint64_t v17;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v16 = 0;
  v17 = 0;
  __p = 0;
  sub_1DCB3FDF0(&__p, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3);
  sub_1DCBA09F0(v11, v12, v13, v14, (const void **)&__p, a6);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }

}

void sub_1DCBA1B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_1DCBA1BA0(_QWORD *a1, void *a2, signed int a3, void *a4, int a5)
{
  id v9;
  id v10;
  MDLTexture *v11;
  id v12;
  const char *v13;
  void *v14;
  const char *v15;
  void *isCube;
  id v17;
  unsigned int v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  const char *v27;
  uint64_t v28;
  MDLTexture *v29;
  id v30;
  const char *v31;
  void *v32;
  const char *v33;
  void *v34;
  const char *v35;
  MDLMaterialProperty *v36;
  const char *v37;
  void *v38;
  const char *v39;
  uint64_t v41;
  uint64_t v42;

  v9 = a2;
  v10 = a4;
  if (*a1 == a1[1])
  {
    v17 = objc_alloc(MEMORY[0x1E0C99DF0]);
    v18 = a3 * a3;
    v14 = (void *)objc_msgSend_initWithLength_(v17, v19, (a3 * a3));
    if (a3)
    {
      v20 = 0;
      if (v18 <= 1)
        v21 = 1;
      else
        v21 = v18;
      do
      {
        v22 = objc_retainAutorelease(v14);
        v25 = objc_msgSend_bytes(v22, v23, v24);
        v26 = objc_retainAutorelease(v9);
        *(_BYTE *)(v25 + v20) = *(_BYTE *)(objc_msgSend_bytes(v26, v27, v28) + (4 * v20));
        ++v20;
      }
      while (v20 != v21);
    }
    v29 = [MDLTexture alloc];
    v30 = objc_alloc(MEMORY[0x1E0CB3940]);
    v32 = (void *)objc_msgSend_initWithFormat_(v30, v31, (uint64_t)CFSTR("$ao-%lu"), a5);
    LOBYTE(v42) = 0;
    isCube = (void *)objc_msgSend_initWithData_topLeftOrigin_name_dimensions_rowStride_channelCount_channelEncoding_isCube_(v29, v33, (uint64_t)v14, 1, v32, a3, 1, 1, COERCE_DOUBLE(vdup_n_s32(a3)), v42);

  }
  else
  {
    v11 = [MDLTexture alloc];
    v12 = objc_alloc(MEMORY[0x1E0CB3940]);
    v14 = (void *)objc_msgSend_initWithFormat_(v12, v13, (uint64_t)CFSTR("$ao-%lu"), a5);
    LOBYTE(v41) = 0;
    isCube = (void *)objc_msgSend_initWithData_topLeftOrigin_name_dimensions_rowStride_channelCount_channelEncoding_isCube_(v11, v15, (uint64_t)v9, 1, v14, 4 * a3, 4, 1, COERCE_DOUBLE(vdup_n_s32(a3)), v41);
  }

  v34 = (void *)objc_opt_new();
  objc_msgSend_setTexture_(v34, v35, (uint64_t)isCube);
  v36 = [MDLMaterialProperty alloc];
  v38 = (void *)objc_msgSend_initWithName_semantic_(v36, v37, (uint64_t)v10, 22);
  objc_msgSend_setTextureSamplerValue_(v38, v39, (uint64_t)v34);

  return v38;
}

void sub_1DCBA1D84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1DCBA1DE8(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      v4 = *v2;
      v5 = (std::__shared_weak_count *)v2[1];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      sub_1DCAF1160(v4);
      if (v5)
      {
        v8 = (unint64_t *)&v5->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_1DCBA1F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCB0546C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DCBA1F6C(uint64_t a1, uint64_t **a2, uint64_t a3, int a4, uint64_t *a5)
{
  char *v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v19;
  int v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  _OWORD *__p;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v25 = 0uLL;
  if (a4)
  {
    sub_1DCB9E970(64, 1, 1, &v26, *(__n128 *)(a3 + 64));
    v8 = 0;
    v9 = (_OWORD *)v26;
    __p = (_OWORD *)v26;
    *((_QWORD *)&v25 + 1) = v27;
    v10 = (_OWORD *)*((_QWORD *)&v26 + 1);
  }
  else
  {
    v9 = sub_1DCAFBD5C((uint64_t)&v25 + 8, 1uLL);
    v12 = &v9[v11];
    *v9 = *(_OWORD *)(a3 + 16);
    v10 = v9 + 1;
    v8 = (char *)v25;
    if ((_QWORD)v25)
    {
      do
      {
        v13 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *--v9 = v13;
      }
      while (v8);
      v8 = 0;
    }
    __p = v9;
    *((_QWORD *)&v25 + 1) = v12;
    if (v8)
      operator delete(v8);
  }
  if (v9 != v10)
  {
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v38 = 0u;
      LODWORD(v38) = 2139095039;
      *(_QWORD *)&v45 = 0;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      *(_QWORD *)&v42 = 0;
      sub_1DCBA1DE8((uint64_t)v8, a2);
      if ((_QWORD)v42)
      {
        v19 = *(_OWORD *)(a3 + 16);
        v26 = v43;
        v27 = v19;
        v29 = v38;
        v30 = v39;
        v31 = v40;
        v20 = *(_DWORD *)(a3 + 176) + 1;
        v28 = *(_QWORD *)(a3 + 32);
        v32 = v41;
        v33 = v42;
        v34 = v43;
        v35 = v44;
        v36 = v45;
        v37 = v20;
        v21 = a5[1];
        if (v21 >= a5[2])
        {
          v8 = (char *)sub_1DCBA58D8(a5, &v26);
        }
        else
        {
          v22 = v26;
          v23 = v27;
          *(_QWORD *)(v21 + 32) = v28;
          *(_OWORD *)v21 = v22;
          *(_OWORD *)(v21 + 16) = v23;
          *(_DWORD *)(v21 + 48) = v29;
          *(_OWORD *)(v21 + 64) = v30;
          *(_OWORD *)(v21 + 80) = v31;
          *(_OWORD *)(v21 + 96) = v32;
          *(_QWORD *)(v21 + 112) = v33;
          *(_OWORD *)(v21 + 128) = v34;
          *(_OWORD *)(v21 + 144) = v35;
          *(_QWORD *)(v21 + 160) = v36;
          *(_DWORD *)(v21 + 176) = v37;
          v8 = (char *)(v21 + 192);
        }
        a5[1] = (uint64_t)v8;
      }
      ++v9;
    }
    while (v9 != v10);
    v10 = __p;
  }
  if (v10)
    operator delete(v10);
}

void sub_1DCBA2250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1DCBA2278(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _OWORD v51[2];
  uint64_t v52;
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    v16 = 0;
    v15 = 0;
  }
  else
  {
    do
    {
      v6 = *(_QWORD **)v4;
      if (*(_DWORD *)(*(_QWORD *)v4 + 24) == 3)
      {
        v33 = 0;
        v34 = 0;
        v35 = 0;
        sub_1DCB9E970(128, 0, 1, &v33, (__n128)0);
        v7 = v33;
        v8 = v34;
        if (v33 != v34)
        {
          do
          {
            v32 = *v7;
            *(double *)&v9 = (*(double (**)(_QWORD *))(*v6 + 32))(v6);
            v72 = 0u;
            v73 = 0u;
            v70 = 0u;
            v71 = 0u;
            v68 = 0u;
            v69 = 0u;
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v62 = 0u;
            v63 = 0u;
            v10 = v6[1];
            v62 = v9;
            v63 = v32;
            *(_QWORD *)&v64 = v10;
            LODWORD(v65) = 2139095039;
            v70 = 0u;
            v66 = 0u;
            v67 = 0u;
            v68 = 0u;
            *(_QWORD *)&v69 = 0;
            v11 = a1[21];
            if (v11 >= a1[22])
            {
              v14 = sub_1DCBA5BA0(a1 + 20, &v62);
            }
            else
            {
              v12 = v62;
              v13 = v63;
              *(_QWORD *)(v11 + 32) = v64;
              *(_OWORD *)v11 = v12;
              *(_OWORD *)(v11 + 16) = v13;
              *(_DWORD *)(v11 + 48) = v65;
              *(_OWORD *)(v11 + 64) = v66;
              *(_OWORD *)(v11 + 80) = v67;
              *(_OWORD *)(v11 + 96) = v68;
              *(_QWORD *)(v11 + 112) = v69;
              *(_OWORD *)(v11 + 128) = v70;
              *(_OWORD *)(v11 + 144) = v71;
              *(_QWORD *)(v11 + 160) = v72;
              *(_DWORD *)(v11 + 176) = v73;
              v14 = v11 + 192;
            }
            a1[21] = v14;
            v51[0] = v62;
            v51[1] = v63;
            v52 = v64;
            v53 = v65;
            v54 = v66;
            v55 = v67;
            v56 = v68;
            v57 = v69;
            v58 = v70;
            v59 = v71;
            v60 = v72;
            v61 = v73;
            sub_1DCBA1F6C(v14, a2, (uint64_t)v51, 0, (uint64_t *)&v36);
            ++v7;
          }
          while (v7 != v8);
          v7 = v33;
        }
        if (v7)
        {
          v34 = v7;
          operator delete(v7);
        }
      }
      v4 += 8;
    }
    while (v4 != v5);
    v15 = (uint64_t)v36;
    v16 = v37;
  }
  v17 = a1 + 20;
  v18 = sub_1DCBA5D58((uint64_t)(a1 + 20), (__int128 *)a1[21], v15, v16, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v16 - v15) >> 6));
  v19 = v36;
  v20 = v37;
  if (v36 != v37)
  {
    do
    {
      v21 = *((_DWORD *)v19 + 12);
      v22 = v19[4];
      v23 = v19[5];
      v24 = v19[6];
      v25 = *((_QWORD *)v19 + 14);
      v26 = v19[8];
      v27 = *((_QWORD *)v19 + 18);
      v28 = *((_QWORD *)v19 + 19);
      v29 = *((_QWORD *)v19 + 20);
      v30 = *((_DWORD *)v19 + 44);
      v31 = v19[1];
      v39[0] = *v19;
      v39[1] = v31;
      v40 = *((_QWORD *)v19 + 4);
      v41 = v21;
      v42 = v22;
      v43 = v23;
      v44 = v24;
      v45 = v25;
      v46 = v26;
      v47 = v27;
      v48 = v28;
      v49 = v29;
      v50 = v30;
      sub_1DCBA1F6C((uint64_t)v18, a2, (uint64_t)v39, 1, v17);
      v19 += 12;
    }
    while (v19 != v20);
    v19 = v36;
  }
  if (v19)
  {
    v37 = v19;
    operator delete(v19);
  }
}

void sub_1DCBA2584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1DCBA25C8(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, int a6@<W5>, int a7@<W6>, unsigned int a8@<W7>, uint64_t a9@<X8>, float a10@<S0>)
{
  id v18;
  const char *v19;
  void *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  const char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  char **v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  id v52;
  const char *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float32x2_t **v58;
  uint64_t v59;
  _QWORD *v60;
  const std::locale::facet *v61;
  _BYTE *v62;
  int v63;
  uint64_t v64;
  id v65;
  id v66;
  uint64_t v67;
  int v68;
  const void *v69;
  uint64_t v70;
  float v71;
  _QWORD *v72;
  _QWORD *v73;
  const std::locale::facet *v74;
  MDLTexture *v75;
  id v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  void *v81;
  const char *v82;
  void *isCube;
  const char *v84;
  void *v85;
  const char *v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  int v90;
  void *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  id v101;
  id v102;
  id v103;
  id v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  id v108;
  NSObject *queue;
  NSObject *group;
  float32x2_t *v112;
  void *v113;
  int v114;
  void *v115;
  void *v116;
  uint64_t v117;
  void *__p;
  void *v119;
  uint64_t v120;
  _QWORD block[4];
  id v122;
  id v123;
  __int128 *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  float32x2_t *v130;
  char v131[24];
  uint64_t v132;
  int v133;
  int v134;
  float v135;
  _QWORD v136[3];
  int v137;
  _QWORD v138[3];
  int v139;
  _QWORD v140[3];
  int v141;
  __int128 v142;
  uint64_t v143;
  int v144;
  float32x2_t *v145[5];
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  char *v153;
  char *v154;
  uint64_t v155;
  int v156;
  std::locale v157;
  _BYTE v158[128];
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  v18 = a2;
  v106 = a3;
  v102 = a4;
  v103 = a5;
  v156 = a7;
  objc_msgSend_progressWithTotalUnitCount_(MEMORY[0x1E0CB38A8], v19, 70);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v100 = a8;
  objc_msgSend_setCancellable_(v20, v21, 1);
  objc_msgSend_setPausable_(v20, v22, 0);
  v154 = 0;
  v153 = 0;
  v155 = 0;
  v113 = v20;
  v25 = objc_msgSend_count(v18, v23, v24);
  sub_1DCBA3234(&v153, v25);
  v149 = 0u;
  v150 = 0u;
  v151 = 0u;
  v152 = 0u;
  v26 = v18;
  v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v27, (uint64_t)&v149, v158, 16);
  if (v28)
  {
    v29 = *(_QWORD *)v150;
    do
    {
      for (i = 0; i != v28; ++i)
      {
        if (*(_QWORD *)v150 != v29)
          objc_enumerationMutation(v26);
        v145[0] = 0;
        v145[0] = *(float32x2_t **)(*((_QWORD *)&v149 + 1) + 8 * i);
        v142 = 0uLL;
        LODWORD(v140[0]) = 6;
        sub_1DCBA63C8(v145, (unsigned int *)v140, &v142);
        sub_1DCBFF1B0(v142);
        sub_1DCBA32E8(&v153, &v142);
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
        if (*((_QWORD *)&v142 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
      v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v31, (uint64_t)&v149, v158, 16);
    }
    while (v28);
  }
  v105 = a9;

  objc_msgSend_becomeCurrentWithPendingUnitCount_(v113, v35, 70);
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
    sub_1DCBA2278((uint64_t *)a1, (uint64_t **)&v153);
  v104 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v147 = 0;
  v146 = 0;
  v148 = 0;
  sub_1DCB9F430(v106, &v146, *MEMORY[0x1E0C83FF0], *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16), *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32), *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48));
  if (v148)
  {
    sub_1DCB9E058(v36, &v146);
    sub_1DCB9E2BC(&v146, (void **)&v142);
    v37 = *(void **)(a1 + 48);
    if (v37)
    {
      *(_QWORD *)(a1 + 56) = v37;
      operator delete(v37);
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
    }
    *(_OWORD *)(a1 + 48) = v142;
    *(_QWORD *)(a1 + 64) = v143;
    v38 = v147;
    if (v147 != &v146)
    {
      v39 = (char **)(a1 + 24);
      v40 = (_QWORD *)(a1 + 40);
      v41 = *(uint64_t **)(a1 + 32);
      do
      {
        v42 = v38[2];
        if ((unint64_t)v41 >= *v40)
        {
          v43 = ((char *)v41 - *v39) >> 3;
          if ((unint64_t)(v43 + 1) >> 61)
            sub_1DCAE4C44();
          v44 = *v40 - (_QWORD)*v39;
          v45 = v44 >> 2;
          if (v44 >> 2 <= (unint64_t)(v43 + 1))
            v45 = v43 + 1;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
            v46 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v46 = v45;
          if (v46)
            v47 = (char *)sub_1DCAE79A4(a1 + 40, v46);
          else
            v47 = 0;
          v48 = (uint64_t *)&v47[8 * v43];
          *v48 = v42;
          v41 = v48 + 1;
          v50 = *(char **)(a1 + 24);
          v49 = *(char **)(a1 + 32);
          if (v49 != v50)
          {
            do
            {
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
              *--v48 = v51;
            }
            while (v49 != v50);
            v49 = *v39;
          }
          *(_QWORD *)(a1 + 24) = v48;
          *(_QWORD *)(a1 + 32) = v41;
          *(_QWORD *)(a1 + 40) = &v47[8 * v46];
          if (v49)
            operator delete(v49);
        }
        else
        {
          *v41++ = v42;
        }
        *(_QWORD *)(a1 + 32) = v41;
        v38 = (uint64_t *)v38[1];
      }
      while (v38 != &v146);
    }
    memset(v145, 0, 32);
    sub_1DCBA0014((_QWORD *)a1, &v156, (unint64_t)&v146, v145, (__n128)0);
    v112 = v145[0];
    if (v145[0])
    {
      v52 = objc_alloc(MEMORY[0x1E0C99DF0]);
      v114 = v156;
      v99 = v114 * v114;
      v101 = objc_retainAutorelease((id)objc_msgSend_initWithLength_(v52, v53, (4 * v114 * v114)));
      v107 = objc_msgSend_mutableBytes(v101, v54, v55);
      srand(0x1337u);
      group = dispatch_group_create();
      dispatch_get_global_queue(0, 0);
      queue = objc_claimAutoreleasedReturnValue();
      v108 = objc_alloc_init(MEMORY[0x1E0CB3740]);
      *(_QWORD *)&v142 = 0;
      *((_QWORD *)&v142 + 1) = &v142;
      v143 = 0x3020000000;
      v144 = 0;
      v56 = operator new();
      *(_OWORD *)(v56 + 16) = 0u;
      *(_OWORD *)(v56 + 32) = 0u;
      *(_OWORD *)v56 = 0u;
      LODWORD(v140[0]) = 0;
      if (v114 < 1)
      {
        LODWORD(v57) = 0;
      }
      else
      {
        do
        {
          sub_1DCBA64C8((_QWORD *)v56, v140);
          ++LODWORD(v140[0]);
        }
        while (SLODWORD(v140[0]) < v114);
        v57 = *(_QWORD *)(v56 + 40);
      }
      v140[0] = 0;
      v140[1] = v140;
      v140[2] = 0x2020000000;
      v141 = v57;
      v138[0] = 0;
      v138[1] = v138;
      v138[2] = 0x2020000000;
      v139 = 0;
      v136[0] = 0;
      v136[1] = v136;
      v136[2] = 0x2020000000;
      v63 = 16;
      v137 = 0;
      v64 = MEMORY[0x1E0C809B0];
      do
      {
        block[0] = v64;
        block[1] = 3321888768;
        block[2] = sub_1DCBA342C;
        block[3] = &unk_1EA5763E8;
        v128 = a1;
        v65 = v108;
        v122 = v65;
        v133 = v114;
        v129 = v56;
        v130 = v112;
        memset(v131, 0, sizeof(v131));
        sub_1DCBA68BC(v131, v153, v154, (v154 - v153) >> 4);
        v134 = a6;
        v135 = a10;
        v132 = v107;
        v124 = &v142;
        v125 = v136;
        v126 = v140;
        v127 = v138;
        v66 = v113;
        v123 = v66;
        dispatch_group_async(group, queue, block);

        v157.__locale_ = (std::locale::__imp *)v131;
        sub_1DCBA630C((void ***)&v157);

        --v63;
      }
      while (v63);
      dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
      v67 = sub_1DCBA477C((_QWORD *)v56);
      MEMORY[0x1DF0D228C](v67, 0x1080C40BE8D5F09);
      v68 = *(_DWORD *)(*((_QWORD *)&v142 + 1) + 40);
      v69 = *(const void **)(a1 + 24);
      v70 = *(_QWORD *)(a1 + 32);
      v119 = 0;
      v120 = 0;
      __p = 0;
      sub_1DCB3FDF0(&__p, v69, v70, (v70 - (uint64_t)v69) >> 3);
      v71 = sub_1DCB9E8EC((float32x4_t ***)&__p, fmaxf(1.0 - (float)((float)v68 / (float)v99), 0.0));
      if (__p)
      {
        v119 = __p;
        operator delete(__p);
      }
      sub_1DCB03734(MEMORY[0x1E0DE4A60], (uint64_t)"Texture filling efficiency ", 27);
      v72 = (_QWORD *)std::ostream::operator<<();
      v73 = sub_1DCB03734(v72, (uint64_t)"%", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v73 + *(_QWORD *)(*v73 - 24)));
      v74 = std::locale::use_facet(&v157, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)(v74, 10);
      std::locale::~locale(&v157);
      std::ostream::put();
      std::ostream::flush();
      v75 = [MDLTexture alloc];
      v76 = objc_alloc(MEMORY[0x1E0CB3940]);
      v79 = objc_msgSend_count(v104, v77, v78);
      v81 = (void *)objc_msgSend_initWithFormat_(v76, v80, (uint64_t)CFSTR("$ao-%lu"), v79);
      LOBYTE(v98) = 0;
      isCube = (void *)objc_msgSend_initWithData_topLeftOrigin_name_dimensions_rowStride_channelCount_channelEncoding_isCube_(v75, v82, (uint64_t)v101, 1, v81, 4 * v114, 4, 1, COERCE_DOUBLE(vdup_n_s32(v114)), v98);

      objc_msgSend_URLWithString_(MEMORY[0x1E0C99E98], v84, (uint64_t)CFSTR("file:///tmp/originalAOTexture.png"));
      v85 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_writeToURL_(isCube, v86, (uint64_t)v85);

      sub_1DCB06748(v101, v112, v71, v100, a1 + 120, (float32x4_t ***)(a1 + 24), a1 + 72, v99 - *(_DWORD *)(*((_QWORD *)&v142 + 1) + 40));
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      v90 = objc_msgSend_count(v104, v88, v89);
      sub_1DCBA1BA0((_QWORD *)a1, v87, v114, v103, v90);
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1DCBA695C(a1 + 24, *(_QWORD *)(a1 + 32), *(char **)(a1 + 48), *(char **)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
      v92 = *(uint64_t **)(a1 + 48);
      v93 = *(uint64_t **)(a1 + 56);
      while (v92 != v93)
      {
        v94 = *v92++;
        v95 = *(_QWORD *)(v94 + 264);
        *(_QWORD *)(v94 + 16) = *(_QWORD *)(v95 + 16);
        *(_QWORD *)(v94 + 24) = *(_QWORD *)(v95 + 24);
        *(_QWORD *)(v94 + 32) = *(_QWORD *)(v95 + 32);
        *(_OWORD *)(v94 + 208) = *(_OWORD *)(v95 + 208);
        *(_OWORD *)(v94 + 224) = *(_OWORD *)(v95 + 224);
        *(_OWORD *)(v94 + 240) = *(_OWORD *)(v95 + 240);
      }
      v115 = 0;
      v116 = 0;
      v117 = 0;
      sub_1DCB3FDF0(&v115, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
      sub_1DCBA1AB0(v106, v91, v102, 0, (uint64_t)&v115, 0);
      if (v115)
      {
        v116 = v115;
        operator delete(v115);
      }
      MEMORY[0x1DF0D228C](v112, 0x1020C4084B17629);
      if (v66)
        objc_msgSend_resignCurrent(v66, v96, v97);
      *(_BYTE *)v105 = 1;
      sub_1DCB0345C((_QWORD *)(v105 + 8), "");

      _Block_object_dispose(v136, 8);
      _Block_object_dispose(v138, 8);
      _Block_object_dispose(v140, 8);
      _Block_object_dispose(&v142, 8);

    }
    else
    {
      if (SHIBYTE(v145[3]) >= 0)
        v58 = &v145[1];
      else
        v58 = (float32x2_t **)v145[1];
      if (SHIBYTE(v145[3]) >= 0)
        v59 = HIBYTE(v145[3]);
      else
        v59 = (uint64_t)v145[2];
      v60 = sub_1DCB03734(MEMORY[0x1E0DE4A50], (uint64_t)v58, v59);
      std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(_QWORD *)(*v60 - 24)));
      v61 = std::locale::use_facet((const std::locale *)&v142, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
      std::locale::~locale((std::locale *)&v142);
      std::ostream::put();
      std::ostream::flush();
      *(_BYTE *)a9 = 0;
      v62 = (_BYTE *)(a9 + 8);
      if (SHIBYTE(v145[3]) < 0)
      {
        sub_1DCACA658(v62, v145[1], (unint64_t)v145[2]);
      }
      else
      {
        *(_OWORD *)v62 = *(_OWORD *)&v145[1];
        *(float32x2_t **)(a9 + 24) = v145[3];
      }
    }
    if (SHIBYTE(v145[3]) < 0)
      operator delete(v145[1]);
  }
  else
  {
    *(_BYTE *)a9 = 0;
    sub_1DCB0345C((_QWORD *)(a9 + 8), "Couldn't parse triangles from supplied meshes");
  }
  sub_1DCB032E4(&v146);

  *(_QWORD *)&v142 = &v153;
  sub_1DCBA630C((void ***)&v142);

}

void sub_1DCBA3038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  void *__p;

  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(__p);
  sub_1DCB032E4(&STACK[0x218]);

  a71 = (uint64_t)&STACK[0x270];
  sub_1DCBA630C((void ***)&a71);

  _Unwind_Resume(a1);
}

uint64_t sub_1DCBA3234(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      sub_1DCAE4C44();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)sub_1DCAFBD5C(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 16;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[16 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return sub_1DCBA637C((uint64_t)&v14);
  }
  return result;
}

char *sub_1DCBA32E8(char **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_1DCAE4C44();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v32 = v4;
    v16 = (char *)sub_1DCAFBD5C(v4, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v30 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v31 = v27;
    v29 = v26.i64[0];
    sub_1DCBA637C((uint64_t)&v29);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return v11 - 16;
}

uint64_t sub_1DCBA342C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  float v5;
  const char *v6;
  uint64_t v7;
  int32x2_t v8;
  _QWORD *v9;
  uint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int v13;
  int v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  int32x2_t v19;
  int v20;
  int i;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t *v24;
  float32x2_t ***v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  float32x4_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _BYTE *v34;
  int v35;
  unsigned int v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  const char *v41;
  int32x2_t v42;
  const char *v43;
  uint64_t v44;
  __n128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unsigned int v51;

  v4 = *(_QWORD *)(a1 + 80);
  v51 = 0;
  atomic_store(0, &v51);
  v5 = *(float *)&dword_1F03B51AC;
  objc_msgSend_lock(*(void **)(a1 + 32), a2, a3);
  v9 = *(_QWORD **)(a1 + 88);
  v10 = v9[5];
  if (v10)
  {
    *(float *)v8.i32 = v5 * 0.5;
    v11 = (float32x2_t)vdup_lane_s32(v8, 0);
    v12 = (float32x2_t)vdup_n_s32(0x437F0000u);
    do
    {
      v13 = *(_DWORD *)(*(_QWORD *)(v9[1] + ((v9[4] >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v9[4] & 0x3FFLL));
      if (v13 + 1 < *(_DWORD *)(a1 + 136))
        v14 = v13 + 1;
      else
        v14 = *(_DWORD *)(a1 + 136);
      ++v9[4];
      v9[5] = v10 - 1;
      sub_1DCBA6860((uint64_t)v9, 1);
      objc_msgSend_unlock(*(void **)(a1 + 32), v15, v16);
      if (v13 < v14)
      {
        v20 = *(_DWORD *)(a1 + 136);
        do
        {
          if (v20 >= 1)
          {
            for (i = 0; i < v20; ++i)
            {
              v22.f32[0] = (float)i;
              *(float *)v19.i32 = (float)v20;
              v22.f32[1] = (float)v13;
              v23 = vdiv_f32(v22, (float32x2_t)vdup_lane_s32(v19, 0));
              v24 = sub_1DCBEB9E4(*(_QWORD **)(a1 + 96), *(double *)&v23);
              if (v24 && (v25 = (float32x2_t ***)v24, sub_1DCBEAFD0(v24, v23)))
              {
                v49 = 0uLL;
                v50 = 0;
                sub_1DCBEB1B0(v25, &v49, COERCE_DOUBLE(vadd_f32(v23, v11)));
                v26 = v50;
                if (!v50)
                {
                  sub_1DCBEB1B0(v25, &v47, *(double *)&v23);
                  v26 = v48;
                  v50 = v48;
                  v49 = v47;
                }
                v46 = (__n128)vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v26 + 64), *(float *)&v49), *(float32x4_t *)(v26 + 80), *((float *)&v49 + 1)), *(float32x4_t *)(v26 + 96), *((float *)&v49 + 2));
                v29 = sub_1DCB3FAA8((__n128 *)v26);
                if (*(_QWORD *)v4 == *(_QWORD *)(v4 + 8))
                {
                  v31 = (int)(float)(sub_1DCB9EC3C(v46.n128_f64[0], v29, *(float *)(a1 + 144), v27, (uint64_t **)(a1 + 104), *(_DWORD *)(a1 + 140), 1)* 255.0);
                  v19 = vdup_n_s32(v31);
                }
                else
                {
                  *(double *)v30.i64 = sub_1DCB9EF20((uint64_t **)v4, (uint64_t **)(a1 + 104), v28, v46, v29);
                  v19 = vcvt_s32_f32(vmul_f32(*(float32x2_t *)v30.f32, v12));
                  v31 = (int)vmuls_lane_f32(255.0, v30, 2);
                }
                LOBYTE(v33) = -1;
              }
              else
              {
                do
                {
                  v32 = __ldaxr(&v51);
                  v33 = __stlxr(v32 + 1, &v51);
                }
                while (v33);
                LOBYTE(v31) = 0;
                v19.i8[0] = 0;
                v19.i32[1] = 0;
              }
              v34 = (_BYTE *)(*(_QWORD *)(a1 + 128) + 4 * (i + *(_DWORD *)(a1 + 136) * v13));
              *v34 = v19.i8[0];
              v34[1] = v19.i8[4];
              v34[2] = v31;
              v34[3] = v33;
              v20 = *(_DWORD *)(a1 + 136);
            }
          }
          ++v13;
        }
        while (v13 != v14);
      }
      v35 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      do
        v36 = __ldaxr(&v51);
      while (__stlxr(v36 + v35, &v51));
      objc_msgSend_lock(*(void **)(a1 + 32), v17, v18);
      if ((float)((float)(int)++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24)
                 / (float)*(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24)) > (float)((float)*(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24)
                                                                                            * 0.022222))
      {
        v39 = *(void **)(a1 + 40);
        v40 = objc_msgSend_completedUnitCount(v39, v37, v38);
        objc_msgSend_setCompletedUnitCount_(v39, v41, v40 + 1);
        ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
      }
      objc_msgSend_unlock(*(void **)(a1 + 32), v37, v38, v46.n128_u64[0]);
      v51 = 0;
      atomic_store(0, &v51);
      *(float *)v42.i32 = *(float *)&dword_1F03B51AC * 0.5;
      v11 = (float32x2_t)vdup_lane_s32(v42, 0);
      objc_msgSend_lock(*(void **)(a1 + 32), v43, v44);
      v9 = *(_QWORD **)(a1 + 88);
      v10 = v9[5];
    }
    while (v10);
  }
  return objc_msgSend_unlock(*(void **)(a1 + 32), v6, v7);
}

char *sub_1DCBA3780(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v2 = a1 + 104;
  *(_QWORD *)(v2 + 16) = 0;
  return sub_1DCBA68BC((char *)v2, *(_QWORD **)(a2 + 104), *(_QWORD **)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 4);
}

void sub_1DCBA379C(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 104);
  sub_1DCBA630C(&v1);
}

void sub_1DCBA37C4(_QWORD *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t *v10;
  char **v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void *v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *__p;
  void *v33;
  uint64_t v34;
  void *v35[5];
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  std::locale v40;

  v7 = a2;
  v8 = a3;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  sub_1DCB9F430(v7, &v37, *MEMORY[0x1E0C83FF0], *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16), *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32), *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48));
  if (v39)
  {
    v30 = v8;
    v31 = v7;
    sub_1DCB9E058(v9, &v37);
    v10 = v38;
    if (v38 != &v37)
    {
      v11 = (char **)(a1 + 3);
      v12 = a1 + 5;
      v13 = (uint64_t *)a1[4];
      do
      {
        v14 = v10[2];
        if ((unint64_t)v13 >= *v12)
        {
          v15 = ((char *)v13 - *v11) >> 3;
          if ((unint64_t)(v15 + 1) >> 61)
            sub_1DCAE4C44();
          v16 = *v12 - (_QWORD)*v11;
          v17 = v16 >> 2;
          if (v16 >> 2 <= (unint64_t)(v15 + 1))
            v17 = v15 + 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          if (v18)
            v19 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 5), v18);
          else
            v19 = 0;
          v20 = (uint64_t *)&v19[8 * v15];
          *v20 = v14;
          v13 = v20 + 1;
          v22 = (char *)a1[3];
          v21 = (char *)a1[4];
          if (v21 != v22)
          {
            do
            {
              v23 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *--v20 = v23;
            }
            while (v21 != v22);
            v21 = *v11;
          }
          a1[3] = v20;
          a1[4] = v13;
          a1[5] = &v19[8 * v18];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v13++ = v14;
        }
        a1[4] = v13;
        v10 = (uint64_t *)v10[1];
      }
      while (v10 != &v37);
    }
    v36 = 4096;
    memset(v35, 0, 32);
    sub_1DCBA0014(a1, &v36, (unint64_t)&v37, (float32x2_t **)v35, (__n128)0);
    v24 = v35[0];
    v8 = v30;
    v7 = v31;
    if (v35[0])
    {
      __p = 0;
      v33 = 0;
      v34 = 0;
      sub_1DCB3FDF0(&__p, (const void *)a1[3], a1[4], (uint64_t)(a1[4] - a1[3]) >> 3);
      sub_1DCBA1AB0(v31, 0, v30, 0, (uint64_t)&__p, 0);
      if (__p)
      {
        v33 = __p;
        operator delete(__p);
      }
      MEMORY[0x1DF0D228C](v24, 0x1020C4084B17629);
      *(_BYTE *)a4 = 1;
      sub_1DCB0345C((_QWORD *)(a4 + 8), "");
    }
    else
    {
      if (SHIBYTE(v35[3]) >= 0)
        v25 = &v35[1];
      else
        v25 = (void **)v35[1];
      if (SHIBYTE(v35[3]) >= 0)
        v26 = HIBYTE(v35[3]);
      else
        v26 = (uint64_t)v35[2];
      v27 = sub_1DCB03734(MEMORY[0x1E0DE4A50], (uint64_t)v25, v26);
      std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
      v28 = std::locale::use_facet(&v40, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
      std::locale::~locale(&v40);
      std::ostream::put();
      std::ostream::flush();
      *(_BYTE *)a4 = 0;
      v29 = a4 + 8;
      if (SHIBYTE(v35[3]) < 0)
      {
        sub_1DCACA658((_BYTE *)v29, v35[1], (unint64_t)v35[2]);
      }
      else
      {
        *(_OWORD *)v29 = *(_OWORD *)&v35[1];
        *(void **)(v29 + 16) = v35[3];
      }
    }
    if (SHIBYTE(v35[3]) < 0)
      operator delete(v35[1]);
  }
  else
  {
    *(_BYTE *)a4 = 0;
    sub_1DCB0345C((_QWORD *)(a4 + 8), "Couldn't parse triangles from supplied meshes");
  }
  sub_1DCB032E4(&v37);

}

void sub_1DCBA3AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a21 < 0)
    operator delete(__p);
  sub_1DCB032E4(&a24);

  _Unwind_Resume(a1);
}

void sub_1DCBA3B5C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>, float a7@<S0>)
{
  id v11;
  id v12;
  id v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  const std::locale::facet *v32;
  _BYTE *v33;
  _BYTE *v34;
  const char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  const char *v42;
  id v43;
  int v44;
  uint64_t v45;
  id v46;
  id v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  unint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  NSObject *v59;
  NSObject *group;
  void *v61;
  void *v62;
  uint64_t v63;
  _QWORD block[4];
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  void *__p;
  void *v70;
  uint64_t v71;
  char v72[24];
  int v73;
  float v74;
  void *v75[3];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  std::locale v86;
  _BYTE v87[128];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v54 = v11;
  v55 = v12;
  sub_1DCB9F430(v12, &v83, *MEMORY[0x1E0C83FF0], *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16), *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32), *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48));
  if (v85)
  {
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v53 = v13;
    v16 = objc_msgSend_count(v11, v14, v15);
    sub_1DCBA3234(&v80, v16);
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v17 = v11;
    v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v76, v87, 16);
    if (v19)
    {
      v20 = *(_QWORD *)v77;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v77 != v20)
            objc_enumerationMutation(v17);
          v22 = *(_QWORD *)(*((_QWORD *)&v76 + 1) + 8 * i);
          v75[0] = 0;
          v75[1] = 0;
          v23 = operator new();
          sub_1DCBFF148(v23, v22, 6);
          sub_1DCBA6C2C(v75, v23);
          sub_1DCBA32E8(&v80, (__int128 *)v75);
          sub_1DCBFF1B0((uint64_t)v75[0]);
          v25 = (std::__shared_weak_count *)v75[1];
          if (v75[1])
          {
            v26 = (unint64_t *)((char *)v75[1] + 8);
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
        }
        v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v24, (uint64_t)&v76, v87, 16);
      }
      while (v19);
    }

    memset(v75, 0, sizeof(v75));
    if (v84 == &v83)
    {
      v28 = 0;
    }
    else
    {
      v28 = 0;
      v29 = v84;
      do
      {
        ++v28;
        v29 = (uint64_t *)v29[1];
      }
      while (v29 != &v83);
    }
    sub_1DCBA6D20((char *)v75, (uint64_t)v84, (uint64_t)&v83, v28);
    sub_1DCB03734(MEMORY[0x1E0DE4A60], (uint64_t)"Computing vertex bake information for ", 38);
    v30 = (_QWORD *)std::ostream::operator<<();
    v31 = sub_1DCB03734(v30, (uint64_t)" triangles", 10);
    std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(_QWORD *)(*v31 - 24)));
    v32 = std::locale::use_facet(&v86, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
    std::locale::~locale(&v86);
    std::ostream::put();
    std::ostream::flush();
    group = dispatch_group_create();
    dispatch_get_global_queue(0, 0);
    v59 = objc_claimAutoreleasedReturnValue();
    v34 = v75[0];
    v33 = v75[1];
    v36 = operator new();
    *(_OWORD *)(v36 + 16) = 0u;
    *(_OWORD *)(v36 + 32) = 0u;
    *(_OWORD *)v36 = 0u;
    LODWORD(v86.__locale_) = 0;
    if (v75[1] == v75[0])
    {
      LODWORD(v38) = 0;
    }
    else
    {
      do
      {
        sub_1DCBA64C8((_QWORD *)v36, &v86);
        v37 = SLODWORD(v86.__locale_) + 250;
        LODWORD(v86.__locale_) += 250;
      }
      while (v37 < ((char *)v75[1] - (char *)v75[0]) >> 3);
      v38 = *(_QWORD *)(v36 + 40);
    }
    v39 = (int)v38;
    objc_msgSend_progressWithTotalUnitCount_(MEMORY[0x1E0CB38A8], v35, (int)v38);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setCancellable_(v56, v40, 1);
    objc_msgSend_setPausable_(v56, v41, 0);
    objc_msgSend_becomeCurrentWithPendingUnitCount_(v56, v42, v39);
    v43 = objc_alloc_init(MEMORY[0x1E0CB3740]);
    v52 = ((v33 - v34) >> 3) - 21;
    v44 = 16;
    v45 = MEMORY[0x1E0C809B0];
    do
    {
      block[0] = v45;
      block[1] = 3321888768;
      block[2] = sub_1DCBA426C;
      block[3] = &unk_1EA5763B0;
      v67 = a1;
      v46 = v43;
      v65 = v46;
      v68 = v36;
      v70 = 0;
      v71 = 0;
      __p = 0;
      sub_1DCB3FDF0(&__p, v75[0], (uint64_t)v75[1], ((char *)v75[1] - (char *)v75[0]) >> 3);
      memset(v72, 0, sizeof(v72));
      sub_1DCBA68BC(v72, v80, v81, (v81 - v80) >> 4);
      v73 = a5;
      v74 = a7;
      v47 = v56;
      v66 = v47;
      dispatch_group_async(group, v59, block);

      v86.__locale_ = (std::locale::__imp *)v72;
      sub_1DCBA630C((void ***)&v86);
      if (__p)
      {
        v70 = __p;
        operator delete(__p);
      }

      --v44;
    }
    while (v44);
    if (v52 >= 0xFFFFFFFFFFFFFFECLL)
    {
      v50 = objc_msgSend_completedUnitCount(v47, v48, v49);
      objc_msgSend_setCompletedUnitCount_(v47, v51, v50 + v39);
    }
    if (v47)
      objc_msgSend_resignCurrent(v47, v48, v49);
    dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
    sub_1DCB9FBC8((float32x4_t ***)v75);
    v61 = 0;
    v62 = 0;
    v63 = 0;
    sub_1DCB3FDF0(&v61, v75[0], (uint64_t)v75[1], ((char *)v75[1] - (char *)v75[0]) >> 3);
    sub_1DCBA1AB0(v55, 0, 0, v53, (uint64_t)&v61, 1);
    if (v61)
    {
      v62 = v61;
      operator delete(v61);
    }
    *(_BYTE *)a6 = 1;
    sub_1DCB0345C((_QWORD *)(a6 + 8), "");

    v13 = v53;
    if (v75[0])
    {
      v75[1] = v75[0];
      operator delete(v75[0]);
    }
    v75[0] = &v80;
    sub_1DCBA630C((void ***)v75);
  }
  else
  {
    *(_BYTE *)a6 = 0;
    sub_1DCB0345C((_QWORD *)(a6 + 8), "Couldn't parse triangles from supplied meshes");
  }
  sub_1DCB032E4(&v83);

}

void sub_1DCBA4120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  void *v52;

  sub_1DCB032E4(&a52);

  _Unwind_Resume(a1);
}

uint64_t sub_1DCBA426C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t i;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  __int128 v20;
  __n128 v21;
  uint64_t v22;
  __int128 v23;
  __n128 v24;
  uint64_t v25;
  int32x4_t v26;
  int v27;
  __n128 v28;
  uint64_t v29;
  int32x2_t v30;
  int v31;
  __n128 v32;
  uint64_t v33;
  int32x2_t v34;
  int v35;
  __n128 v36;
  uint64_t v37;
  int32x2_t v38;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend_lock(*(void **)(a1 + 32), a2, a3);
  v7 = *(_QWORD **)(a1 + 56);
  for (i = v7[5]; i; i = v7[5])
  {
    v9 = *(unsigned int *)(*(_QWORD *)(v7[1] + ((v7[4] >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v7[4] & 0x3FFLL));
    ++v7[4];
    v7[5] = i - 1;
    sub_1DCBA6860((uint64_t)v7, 1);
    objc_msgSend_unlock(*(void **)(a1 + 32), v10, v11);
    if ((v9 & 0x80000000) == 0)
    {
      v14 = v9 + 250;
      if ((int)v9 + 250 >= (int)((*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3))
        v14 = (*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
      if ((int)v9 < v14)
      {
        v15 = 8 * v9;
        v16 = v9 - v14;
        do
        {
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + v15);
          if (*(_QWORD *)v4 == *(_QWORD *)(v4 + 8))
          {
            v27 = *(_DWORD *)(a1 + 112);
            v54 = *(_OWORD *)(v17 + 64);
            v28 = sub_1DCB3FAA8((__n128 *)v17);
            *(float *)v30.i32 = sub_1DCB9EC3C(*(double *)&v54, v28, *(float *)(a1 + 116), v29, (uint64_t **)(a1 + 88), v27, 0);
            *(int32x4_t *)(v17 + 208) = vdupq_lane_s32(v30, 0);
            v31 = *(_DWORD *)(a1 + 112);
            v55 = *(_OWORD *)(v17 + 80);
            v32 = sub_1DCB3FAA8((__n128 *)v17);
            *(float *)v34.i32 = sub_1DCB9EC3C(*(double *)&v55, v32, *(float *)(a1 + 116), v33, (uint64_t **)(a1 + 88), v31, 0);
            *(int32x4_t *)(v17 + 224) = vdupq_lane_s32(v34, 0);
            v35 = *(_DWORD *)(a1 + 112);
            v56 = *(_OWORD *)(v17 + 96);
            v36 = sub_1DCB3FAA8((__n128 *)v17);
            *(float *)v38.i32 = sub_1DCB9EC3C(*(double *)&v56, v36, *(float *)(a1 + 116), v37, (uint64_t **)(a1 + 88), v35, 0);
            v26 = vdupq_lane_s32(v38, 0);
          }
          else
          {
            v51 = *(__n128 *)(v17 + 64);
            v18 = sub_1DCB3FAA8((__n128 *)v17);
            *(double *)&v20 = sub_1DCB9EF20((uint64_t **)v4, (uint64_t **)(a1 + 88), v19, v51, v18);
            *(_OWORD *)(v17 + 208) = v20;
            v52 = *(__n128 *)(v17 + 80);
            v21 = sub_1DCB3FAA8((__n128 *)v17);
            *(double *)&v23 = sub_1DCB9EF20((uint64_t **)v4, (uint64_t **)(a1 + 88), v22, v52, v21);
            *(_OWORD *)(v17 + 224) = v23;
            v53 = *(__n128 *)(v17 + 96);
            v24 = sub_1DCB3FAA8((__n128 *)v17);
            *(double *)v26.i64 = sub_1DCB9EF20((uint64_t **)v4, (uint64_t **)(a1 + 88), v25, v53, v24);
          }
          *(int32x4_t *)(v17 + 240) = v26;
          v15 += 8;
        }
        while (!__CFADD__(v16++, 1));
      }
      objc_msgSend_lock(*(void **)(a1 + 32), v12, v13);
      objc_msgSend_fractionCompleted(*(void **)(a1 + 40), v40, v41);
      NSLog(CFSTR("Fraction completed : %f"), v42);
      v43 = *(void **)(a1 + 40);
      v46 = objc_msgSend_completedUnitCount(v43, v44, v45);
      objc_msgSend_setCompletedUnitCount_(v43, v47, v46 + 1);
      objc_msgSend_unlock(*(void **)(a1 + 32), v48, v49);
    }
    objc_msgSend_lock(*(void **)(a1 + 32), v12, v13);
    v7 = *(_QWORD **)(a1 + 56);
  }
  return objc_msgSend_unlock(*(void **)(a1 + 32), v5, v6);
}

char *sub_1DCBA44C4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  sub_1DCB3FDF0((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  return sub_1DCBA68BC((char *)(a1 + 88), *(_QWORD **)(a2 + 88), *(_QWORD **)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 4);
}

void sub_1DCBA452C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DCBA4548(uint64_t a1)
{
  void *v2;
  void **v3;

  v3 = (void **)(a1 + 88);
  sub_1DCBA630C(&v3);
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
}

void sub_1DCBA458C(char **a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  a1[1] = *a1;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v4 = v3;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v24, v28, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v25 != v9)
          objc_enumerationMutation(v4);
        v11 = objc_msgSend_rtLight(*(void **)(*((_QWORD *)&v24 + 1) + 8 * i), (const char *)v6, v7, (_QWORD)v24);
        v12 = v11;
        v14 = (uint64_t *)a1[1];
        v13 = (unint64_t)a1[2];
        if ((unint64_t)v14 >= v13)
        {
          v16 = ((char *)v14 - *a1) >> 3;
          if ((unint64_t)(v16 + 1) >> 61)
            sub_1DCAE4C44();
          v17 = v13 - (_QWORD)*a1;
          v18 = v17 >> 2;
          if (v17 >> 2 <= (unint64_t)(v16 + 1))
            v18 = v16 + 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v6 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v6 = v18;
          if (v6)
            v19 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), v6);
          else
            v19 = 0;
          v20 = (uint64_t *)&v19[8 * v16];
          *v20 = v12;
          v15 = (char *)(v20 + 1);
          v22 = *a1;
          v21 = a1[1];
          if (v21 != *a1)
          {
            do
            {
              v23 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *--v20 = v23;
            }
            while (v21 != v22);
            v21 = *a1;
          }
          *a1 = (char *)v20;
          a1[1] = v15;
          a1[2] = &v19[8 * v6];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v14 = v11;
          v15 = (char *)(v14 + 1);
        }
        a1[1] = v15;
      }
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, (const char *)v6, (uint64_t)&v24, v28, 16);
    }
    while (v8);
  }

}

void sub_1DCBA4750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCBA477C(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_1DCBA4810((uint64_t)a1);
}

uint64_t sub_1DCBA4810(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t sub_1DCBA485C(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4 != a5)
  {
    v5 = (_QWORD *)*a5;
    if (result != a3)
    {
      v6 = 1;
      if (v5 != a4)
      {
        v7 = a4;
        do
        {
          v7 = (_QWORD *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(_QWORD *)(a3 + 16) -= v6;
      *(_QWORD *)(result + 16) += v6;
    }
    v8 = *a4;
    *(_QWORD *)(v8 + 8) = v5[1];
    *(_QWORD *)v5[1] = v8;
    v9 = *a2;
    *(_QWORD *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

float32x4_t *sub_1DCBA48D4(_QWORD *a1, float32x4_t *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  float32x4_t **v10;
  float32x4_t *i;
  unint64_t v12;

  v4 = sub_1DCB3FB60(a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(float32x4_t ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (float32x4_t *)i->i64[0])
  {
    v12 = i->u64[1];
    if (v12 == v6)
    {
      if (sub_1DCB3FBEC(i + 1, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

float32x4_t *sub_1DCBA49CC(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  float32x4_t **v13;
  float32x4_t *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = sub_1DCB3FB60(a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = (float32x4_t *)i->i64[0])
      {
        v15 = i->u64[1];
        if (v15 == v8)
        {
          if (sub_1DCB3FBEC(i + 1, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9)
              v15 %= v9;
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  memset(v25, 0, sizeof(v25));
  sub_1DCBA4C50(a1, v8, a4, v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_1DCAD4EF4(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9)
          v23 %= v9;
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (float32x4_t *)v25[0];
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1DCBA4C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBA4C50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = operator new(0x130uLL);
  *a4 = v8;
  a4[1] = v7;
  *((_BYTE *)a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_1DCB3F600((uint64_t)(v8 + 2), *a3);
  v8[36] = 0;
  *((_BYTE *)a4 + 16) = 1;
  return result;
}

void sub_1DCBA4CBC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBA4CD4(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(*(a2 - 1), *v9);
        if ((_DWORD)result)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return sub_1DCB08F7C(v9, v9 + 1, a2 - 1, (unsigned int (**)(_QWORD))a3);
      case 4uLL:
        return sub_1DCB09430(v9, v9 + 1, v9 + 2, a2 - 1, (unsigned int (**)(_QWORD))a3);
      case 5uLL:
        return sub_1DCB094E0(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, (unsigned int (**)(_QWORD))a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return sub_1DCB08E28((uint64_t)v9, a2, a3);
          else
            return sub_1DCB08EE8((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            sub_1DCB08F7C(&v9[v13 >> 1], v9, a2 - 1, (unsigned int (**)(_QWORD))a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_1DCB08F7C(v9, &v9[v13 >> 1], a2 - 1, (unsigned int (**)(_QWORD))a3);
            sub_1DCB08F7C(v9 + 1, v15 - 1, a2 - 2, (unsigned int (**)(_QWORD))a3);
            sub_1DCB08F7C(v9 + 2, &v9[v14 + 1], a2 - 3, (unsigned int (**)(_QWORD))a3);
            sub_1DCB08F7C(v15 - 1, v15, &v9[v14 + 1], (unsigned int (**)(_QWORD))a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(*(v9 - 1), *v9) & 1) == 0)
          {
            result = (uint64_t)sub_1DCB09068(v9, a2, a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = sub_1DCB09174(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = sub_1DCBA5014(v9, v17, (unsigned int (**)(_QWORD))a3);
          v9 = v17 + 1;
          result = sub_1DCBA5014(v17 + 1, a2, (unsigned int (**)(_QWORD))a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = sub_1DCBA4CD4(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_1DCB095B8((char *)v9, (char *)a2, a2, a3);
        return result;
    }
  }
}

BOOL sub_1DCBA5014(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_1DCB08F7C(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1DCB09430(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1DCB094E0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      sub_1DCB08F7C(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

_QWORD *sub_1DCBA51B8(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DCB02EAC(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1DCBA5210(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBA522C(uint64_t a1)
{
  void *v2;

  sub_1DCBA5264(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1DCBA5264(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1DCB032E4(v2 + 4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

float32x4_t *sub_1DCBA52A0(uint64_t a1, float32x4_t *a2, uint64_t a3, _OWORD **a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  float32x4_t **v14;
  float32x4_t *i;
  unint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[2];
  uint64_t v28;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_1DCB3EDC8(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v13 = v8;
      if (v8 >= v10)
        v13 = v8 % v10;
    }
    else
    {
      v13 = (v10 - 1) & v8;
    }
    v14 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      for (i = *v14; i; i = (float32x4_t *)i->i64[0])
      {
        v16 = i->u64[1];
        if (v16 == v9)
        {
          if (sub_1DCB3EDD8(a1 + 32, i + 1, a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10)
              v16 %= v10;
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13)
            break;
        }
      }
    }
  }
  else
  {
    v13 = 0;
  }
  v28 = 0;
  v17 = operator new(0x40uLL);
  v27[0] = v17;
  v27[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v9;
  *((_OWORD *)v17 + 1) = **a4;
  v17[4] = v17 + 4;
  v17[5] = v17 + 4;
  v17[6] = 0;
  LOBYTE(v28) = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_1DCAD4EF4(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v13 = v9 % v10;
      else
        v13 = v9;
    }
    else
    {
      v13 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v25 >= v10)
          v25 %= v10;
      }
      else
      {
        v25 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (float32x4_t *)v27[0];
  v27[0] = 0;
  ++*v7;
  sub_1DCBA5540((uint64_t)v27, 0);
  return i;
}

void sub_1DCBA5528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCBA5540((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_1DCBA5540(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1DCB032E4(v2 + 4);
    operator delete(v2);
  }
}

_QWORD *sub_1DCBA5584(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1DCBA5608(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1DCB032E4(v1);
  _Unwind_Resume(a1);
}

float32x4_t *sub_1DCBA561C(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t **a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  float32x4_t *v14;
  unint64_t v15;
  float32x4_t **v16;
  float32x4_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  float32x4_t **v25;
  unint64_t v26;

  v7 = sub_1DCB3F208(a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = (float32x4_t *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14->u64[1];
          if (v15 == v8)
          {
            if (sub_1DCB3F278(v14 + 1, a2))
              return v14;
          }
          else
          {
            if (v11 > 1)
            {
              if (v15 >= v9)
                v15 %= v9;
            }
            else
            {
              v15 &= v9 - 1;
            }
            if (v15 != v12)
              break;
          }
          v14 = (float32x4_t *)v14->i64[0];
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v16 = (float32x4_t **)(a1 + 16);
  v14 = (float32x4_t *)operator new(0x50uLL);
  v14->i64[0] = 0;
  v14->i64[1] = v8;
  v17 = (*a4)[1];
  v14[1] = **a4;
  v14[2] = v17;
  v14[3].i64[1] = 0;
  v14[4].i64[0] = 0;
  v14[3].i64[0] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_1DCAD4EF4(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v12);
  if (v25)
  {
    v14->i64[0] = (uint64_t)*v25;
LABEL_38:
    *v25 = v14;
    goto LABEL_39;
  }
  v14->i64[0] = (uint64_t)*v16;
  *v16 = v14;
  *(_QWORD *)(v24 + 8 * v12) = v16;
  if (v14->i64[0])
  {
    v26 = *(_QWORD *)(v14->i64[0] + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (float32x4_t **)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1DCBA5870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_1DCBA588C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_1DCBA588C(uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[6];
    if (v3)
    {
      __p[7] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_1DCBA58D8(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555)
    sub_1DCAE4C44();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xAAAAAAAAAAAAAALL)
    v9 = 0x155555555555555;
  else
    v9 = v5;
  v21 = a1 + 2;
  v10 = (char *)sub_1DCBA5B5C(v7, v9);
  v11 = &v10[192 * v4];
  __p = v10;
  v18 = v11;
  v20 = &v10[192 * v12];
  v13 = *a2;
  v14 = a2[1];
  *((_QWORD *)v11 + 4) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v11 = v13;
  *((_OWORD *)v11 + 1) = v14;
  *((_DWORD *)v11 + 12) = *((_DWORD *)a2 + 12);
  *((_OWORD *)v11 + 4) = a2[4];
  *((_OWORD *)v11 + 5) = a2[5];
  *((_OWORD *)v11 + 6) = a2[6];
  *((_QWORD *)v11 + 14) = *((_QWORD *)a2 + 14);
  *((_OWORD *)v11 + 8) = a2[8];
  *((_QWORD *)v11 + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)v11 + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)v11 + 20) = *((_QWORD *)a2 + 20);
  *((_DWORD *)v11 + 44) = *((_DWORD *)a2 + 44);
  v19 = v11 + 192;
  sub_1DCBA5A90(a1, &__p);
  v15 = a1[1];
  if (v19 != v18)
    v19 = &v18[(v19 - v18 - 192) % 0xC0uLL];
  if (__p)
    operator delete(__p);
  return v15;
}

void sub_1DCBA5A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1DCBA5A90(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = *(_OWORD *)(v2 + v5 - 192);
      v8 = *(_OWORD *)(v2 + v5 - 176);
      *(_QWORD *)(v6 - 160) = *(_QWORD *)(v2 + v5 - 160);
      *(_OWORD *)(v6 - 192) = v7;
      *(_OWORD *)(v6 - 176) = v8;
      *(_DWORD *)(v6 - 144) = *(_DWORD *)(v2 + v5 - 144);
      *(_OWORD *)(v6 - 128) = *(_OWORD *)(v2 + v5 - 128);
      *(_OWORD *)(v6 - 112) = *(_OWORD *)(v2 + v5 - 112);
      *(_OWORD *)(v6 - 96) = *(_OWORD *)(v2 + v5 - 96);
      *(_QWORD *)(v6 - 80) = *(_QWORD *)(v2 + v5 - 80);
      *(_OWORD *)(v6 - 64) = *(_OWORD *)(v2 + v5 - 64);
      *(_QWORD *)(v6 - 48) = *(_QWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_DWORD *)(v6 - 16) = *(_DWORD *)(v2 + v5 - 16);
      v5 -= 192;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void *sub_1DCBA5B5C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556)
    sub_1DCAE4CDC();
  return operator new(192 * a2);
}

uint64_t sub_1DCBA5BA0(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555)
    sub_1DCAE4C44();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xAAAAAAAAAAAAAALL)
    v9 = 0x155555555555555;
  else
    v9 = v5;
  v21 = a1 + 2;
  v10 = (char *)sub_1DCBA5B5C(v7, v9);
  v11 = &v10[192 * v4];
  __p = v10;
  v18 = v11;
  v20 = &v10[192 * v12];
  v13 = *a2;
  v14 = a2[1];
  *((_QWORD *)v11 + 4) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v11 = v13;
  *((_OWORD *)v11 + 1) = v14;
  *((_DWORD *)v11 + 12) = *((_DWORD *)a2 + 12);
  *((_OWORD *)v11 + 4) = a2[4];
  *((_OWORD *)v11 + 5) = a2[5];
  *((_OWORD *)v11 + 6) = a2[6];
  *((_QWORD *)v11 + 14) = *((_QWORD *)a2 + 14);
  *((_OWORD *)v11 + 8) = a2[8];
  *((_QWORD *)v11 + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)v11 + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)v11 + 20) = *((_QWORD *)a2 + 20);
  *((_DWORD *)v11 + 44) = *((_DWORD *)a2 + 44);
  v19 = v11 + 192;
  sub_1DCBA5A90(a1, &__p);
  v15 = a1[1];
  if (v19 != v18)
    v19 = &v18[(v19 - v18 - 192) % 0xC0uLL];
  if (__p)
    operator delete(__p);
  return v15;
}

void sub_1DCBA5D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *sub_1DCBA5D58(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  __int128 *v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  void *__p;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = *(_QWORD *)(a1 + 16);
    v9 = a1 + 16;
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 6)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 6)) >= a5)
      {
        v21 = (__int128 *)(a3 + 192 * a5);
      }
      else
      {
        v21 = (__int128 *)(a3 + ((uint64_t)(v12 - (_QWORD)a2) >> 6 << 6));
        *(_QWORD *)(a1 + 8) = sub_1DCBA6290(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_1DCBA6038(a1, (uint64_t)v5, v12, (uint64_t)&v5[12 * a5]);
      if (v21 != (__int128 *)v7)
      {
        v22 = v5;
        do
        {
          v23 = *(_OWORD *)v7;
          v24 = *(_OWORD *)(v7 + 16);
          v25 = *(_OWORD *)(v7 + 48);
          v22[2] = *(_OWORD *)(v7 + 32);
          v22[3] = v25;
          *v22 = v23;
          v22[1] = v24;
          v26 = *(_OWORD *)(v7 + 64);
          v27 = *(_OWORD *)(v7 + 80);
          v28 = *(_OWORD *)(v7 + 112);
          v22[6] = *(_OWORD *)(v7 + 96);
          v22[7] = v28;
          v22[4] = v26;
          v22[5] = v27;
          v29 = *(_OWORD *)(v7 + 128);
          v30 = *(_OWORD *)(v7 + 144);
          v31 = *(_OWORD *)(v7 + 160);
          *((_DWORD *)v22 + 44) = *(_DWORD *)(v7 + 176);
          v22[9] = v30;
          v22[10] = v31;
          v22[8] = v29;
          v7 += 192;
          v22 += 12;
        }
        while ((__int128 *)v7 != v21);
      }
    }
    else
    {
      v13 = *(__int128 **)a1;
      v39 = 0;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - (_QWORD)v13) >> 6);
      if (v14 > 0x155555555555555)
        sub_1DCAE4C44();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v13) >> 6);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v13) >> 6);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - (_QWORD)v13) >> 6);
      if (v16 >= 0xAAAAAAAAAAAAAALL)
        v18 = 0x155555555555555;
      else
        v18 = v17;
      v41 = v9;
      if (v18)
        v19 = (char *)sub_1DCBA5B5C(v9, v18);
      else
        v19 = 0;
      v32 = &v19[192 * v15];
      __p = v19;
      v38 = v32;
      v40 = &v19[192 * v18];
      v33 = &v32[192 * a5];
      do
      {
        v34 = *(_OWORD *)v7;
        v35 = *(_OWORD *)(v7 + 16);
        *((_QWORD *)v32 + 4) = *(_QWORD *)(v7 + 32);
        *(_OWORD *)v32 = v34;
        *((_OWORD *)v32 + 1) = v35;
        *((_DWORD *)v32 + 12) = *(_DWORD *)(v7 + 48);
        *((_OWORD *)v32 + 4) = *(_OWORD *)(v7 + 64);
        *((_OWORD *)v32 + 5) = *(_OWORD *)(v7 + 80);
        *((_OWORD *)v32 + 6) = *(_OWORD *)(v7 + 96);
        *((_QWORD *)v32 + 14) = *(_QWORD *)(v7 + 112);
        *((_OWORD *)v32 + 8) = *(_OWORD *)(v7 + 128);
        *((_QWORD *)v32 + 18) = *(_QWORD *)(v7 + 144);
        *((_QWORD *)v32 + 19) = *(_QWORD *)(v7 + 152);
        *((_QWORD *)v32 + 20) = *(_QWORD *)(v7 + 160);
        *((_DWORD *)v32 + 44) = *(_DWORD *)(v7 + 176);
        v32 += 192;
        v7 += 192;
      }
      while (v32 != v33);
      v39 = v33;
      v5 = sub_1DCBA6134((__int128 **)a1, &__p, v5);
      if (v39 != v38)
        v39 = &v38[(v39 - v38 - 192) % 0xC0uLL];
      if (__p)
        operator delete(__p);
    }
  }
  return v5;
}

void sub_1DCBA5FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

__n128 sub_1DCBA6038(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = v4 - a4;
  v6 = a2 + v4 - a4;
  v7 = v4;
  while (v6 < a3)
  {
    result = *(__n128 *)v6;
    v8 = *(_OWORD *)(v6 + 16);
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v6 + 32);
    *(__n128 *)v7 = result;
    *(_OWORD *)(v7 + 16) = v8;
    *(_DWORD *)(v7 + 48) = *(_DWORD *)(v6 + 48);
    *(_OWORD *)(v7 + 64) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(v7 + 80) = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(v7 + 96) = *(_OWORD *)(v6 + 96);
    *(_QWORD *)(v7 + 112) = *(_QWORD *)(v6 + 112);
    *(_OWORD *)(v7 + 128) = *(_OWORD *)(v6 + 128);
    *(_QWORD *)(v7 + 144) = *(_QWORD *)(v6 + 144);
    result.n128_u64[0] = *(_QWORD *)(v6 + 152);
    *(_QWORD *)(v7 + 152) = result.n128_u64[0];
    *(_QWORD *)(v7 + 160) = *(_QWORD *)(v6 + 160);
    *(_DWORD *)(v7 + 176) = *(_DWORD *)(v6 + 176);
    v7 += 192;
    v6 += 192;
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    v10 = v4 - 192;
    v11 = v5 >> 6 << 6;
    v12 = a2 - 192;
    do
    {
      v13 = *(_OWORD *)(v12 + v11);
      v14 = *(_OWORD *)(v12 + v11 + 16);
      v15 = *(_OWORD *)(v12 + v11 + 48);
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(v12 + v11 + 32);
      *(_OWORD *)(v10 + 48) = v15;
      *(_OWORD *)v10 = v13;
      *(_OWORD *)(v10 + 16) = v14;
      v16 = *(_OWORD *)(v12 + v11 + 64);
      v17 = *(_OWORD *)(v12 + v11 + 80);
      v18 = *(_OWORD *)(v12 + v11 + 112);
      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v12 + v11 + 96);
      *(_OWORD *)(v10 + 112) = v18;
      *(_OWORD *)(v10 + 64) = v16;
      *(_OWORD *)(v10 + 80) = v17;
      result = *(__n128 *)(v12 + v11 + 128);
      v19 = *(_OWORD *)(v12 + v11 + 144);
      v20 = *(_OWORD *)(v12 + v11 + 160);
      *(_DWORD *)(v10 + 176) = *(_DWORD *)(v12 + v11 + 176);
      *(_OWORD *)(v10 + 144) = v19;
      *(_OWORD *)(v10 + 160) = v20;
      *(__n128 *)(v10 + 128) = result;
      v10 -= 192;
      v11 -= 192;
    }
    while (v11);
  }
  return result;
}

__int128 *sub_1DCBA6134(__int128 **a1, _QWORD *a2, __int128 *a3)
{
  __int128 *result;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;

  result = (__int128 *)a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = 0;
    do
    {
      v8 = &result[v7];
      v9 = a3[v7 - 12];
      v10 = a3[v7 - 11];
      *((_QWORD *)v8 - 20) = *(_QWORD *)&a3[v7 - 10];
      *(v8 - 12) = v9;
      *(v8 - 11) = v10;
      *((_DWORD *)v8 - 36) = a3[v7 - 9];
      *(v8 - 8) = a3[v7 - 8];
      *(v8 - 7) = a3[v7 - 7];
      *(v8 - 6) = a3[v7 - 6];
      *((_QWORD *)v8 - 10) = *(_QWORD *)&a3[v7 - 5];
      *(v8 - 4) = a3[v7 - 4];
      *((_QWORD *)v8 - 6) = *(_QWORD *)&a3[v7 - 3];
      *((_QWORD *)v8 - 5) = *((_QWORD *)&a3[v7 - 2] - 1);
      *((_QWORD *)v8 - 4) = *(_QWORD *)&a3[v7 - 2];
      *((_DWORD *)v8 - 4) = a3[v7 - 1];
      v7 -= 12;
    }
    while (&a3[v7] != v5);
    v6 = &result[v7];
  }
  a2[1] = v6;
  v11 = a1[1];
  v12 = a2[2];
  if (v11 != a3)
  {
    do
    {
      v13 = *a3;
      v14 = a3[1];
      *(_QWORD *)(v12 + 32) = *((_QWORD *)a3 + 4);
      *(_OWORD *)v12 = v13;
      *(_OWORD *)(v12 + 16) = v14;
      *(_DWORD *)(v12 + 48) = *((_DWORD *)a3 + 12);
      *(_OWORD *)(v12 + 64) = a3[4];
      *(_OWORD *)(v12 + 80) = a3[5];
      *(_OWORD *)(v12 + 96) = a3[6];
      *(_QWORD *)(v12 + 112) = *((_QWORD *)a3 + 14);
      *(_OWORD *)(v12 + 128) = a3[8];
      *(_QWORD *)(v12 + 144) = *((_QWORD *)a3 + 18);
      *(_QWORD *)(v12 + 152) = *((_QWORD *)a3 + 19);
      *(_QWORD *)(v12 + 160) = *((_QWORD *)a3 + 20);
      *(_DWORD *)(v12 + 176) = *((_DWORD *)a3 + 44);
      v12 += 192;
      a3 += 12;
    }
    while (a3 != v11);
    v6 = (__int128 *)a2[1];
  }
  a2[2] = v12;
  v15 = *a1;
  *a1 = v6;
  a2[1] = v15;
  v16 = a1[1];
  a1[1] = (__int128 *)a2[2];
  a2[2] = v16;
  v17 = a1[2];
  a1[2] = (__int128 *)a2[3];
  a2[3] = v17;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1DCBA6290(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;

  result = a4;
  while (a2 != a3)
  {
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(result + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)result = v5;
    *(_OWORD *)(result + 16) = v6;
    *(_DWORD *)(result + 48) = *((_DWORD *)a2 + 12);
    *(_OWORD *)(result + 64) = a2[4];
    *(_OWORD *)(result + 80) = a2[5];
    *(_OWORD *)(result + 96) = a2[6];
    *(_QWORD *)(result + 112) = *((_QWORD *)a2 + 14);
    *(_OWORD *)(result + 128) = a2[8];
    *(_QWORD *)(result + 144) = *((_QWORD *)a2 + 18);
    *(_QWORD *)(result + 152) = *((_QWORD *)a2 + 19);
    *(_QWORD *)(result + 160) = *((_QWORD *)a2 + 20);
    *(_DWORD *)(result + 176) = *((_DWORD *)a2 + 44);
    result += 192;
    a2 += 12;
  }
  return result;
}

void sub_1DCBA630C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_1DCB0546C(v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1DCBA637C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    sub_1DCB0546C(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1DCBA63C8@<X0>(_QWORD *a1@<X1>, unsigned int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x80uLL);
  result = sub_1DCBA6428(v6, a1, a2);
  *a3 = v6 + 4;
  a3[1] = v6;
  return result;
}

void sub_1DCBA6414(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCBA6428(_QWORD *a1, _QWORD *a2, unsigned int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA574808;
  sub_1DCBFF148(a1 + 4, *a2, *a3);
  return a1;
}

void sub_1DCBA6464(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBA6478(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA574808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DCBA6488(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA574808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0D228CLL);
}

uint64_t sub_1DCBA64B8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
}

void sub_1DCBA64C8(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1DCBA654C(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1DCBA654C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_1DCAE79A4(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1DCB0868C(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_1DCB087A0((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_1DCAE79A4((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_1DCB088BC(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1DCB089D0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1DCBA6814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBA6860(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x400)
    a2 = 1;
  if (v2 < 0x800)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

char *sub_1DCBA68BC(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = sub_1DCB02EAC(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1DCBA6948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1DCBA630C(&a9);
  _Unwind_Resume(a1);
}

char *sub_1DCBA695C(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      sub_1DCAE4C44();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_1DCAE79A4(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = sub_1DCBA6B68((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1DCBA6B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_1DCBA6B68(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

_QWORD *sub_1DCBA6C2C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1EA5748B0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DCBA6C80(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1DCBA6CA4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0D228CLL);
}

uint64_t sub_1DCBA6CC8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1DCBA6CE0(uint64_t a1, uint64_t a2)
{
  if (sub_1DCAE69FC(a2, (uint64_t)&unk_1EA573FE8))
    return a1 + 24;
  else
    return 0;
}

char *sub_1DCBA6D20(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;

  if (a4)
  {
    v6 = result;
    result = sub_1DCAE7964(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7++ = *(_QWORD *)(a2 + 16);
      a2 = *(_QWORD *)(a2 + 8);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1DCBA6D78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DCBA6EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);

  sub_1DCB8CFF0((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1DCBA72E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1DCBA7434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1DCBA7508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DCBA77A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1DCBA7D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1DCBA821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1DCBA83FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1DCBA8418(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unsigned int v5;

  NSLog(CFSTR("Indices"));
  if (a2)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      printf("%d ", *(unsigned __int8 *)(a1 + v4));
      if (!v5)
        putchar(10);
      v4 = v5++;
    }
    while (v4 < a2);
  }
  return putchar(10);
}

uint64_t sub_1DCBA8498(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unsigned int v5;

  NSLog(CFSTR("Indices"));
  if (a2)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      printf("%d ", *(unsigned __int16 *)(a1 + 2 * v4));
      if (!v5)
        putchar(10);
      v4 = v5++;
    }
    while (v4 < a2);
  }
  return putchar(10);
}

uint64_t sub_1DCBA8518(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unsigned int v5;

  NSLog(CFSTR("Indices"));
  if (a2)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      printf("%d ", *(_DWORD *)(a1 + 4 * v4));
      if (!v5)
        putchar(10);
      v4 = v5++;
    }
    while (v4 < a2);
  }
  return putchar(10);
}

void sub_1DCBA878C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCBA8924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCBA8A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCBA8BDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCBA8BF0(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      sub_1DCAE4C44();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

BOOL sub_1DCBA8D08(char *a1, void *a2)
{
  id v3;
  unint64_t *v4;
  unint64_t v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  const char *v11;
  _BOOL8 v12;
  int v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  int v20;
  char *v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _DWORD v28[4];
  _DWORD v29[4];
  void **v30;
  int v31;
  void *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[3];
  uint64_t v42;
  void *__p[2];
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  _OWORD v48[3];
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  memset(v48, 0, sizeof(v48));
  Alembic::AbcCoreOgawa::v12::WriteArchive::WriteArchive((Alembic::AbcCoreOgawa::v12::WriteArchive *)&v47);
  sub_1DCB0345C(__p, a1);
  LODWORD(v41[0]) = 0;
  DWORD2(v41[0]) = 0;
  LODWORD(v32) = 0;
  LODWORD(v33) = 0;
  sub_1DCBBD10C((uint64_t)v48, (uint64_t)__p, (uint64_t **)v41, (uint64_t **)&v32);
  if (SBYTE7(v44) < 0)
    operator delete(__p[0]);
  v46 = 0;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)__p = 0u;
  Alembic::Abc::v12::OArchive::getTop((Alembic::Abc::v12::OArchive *)v48);
  v42 = 0;
  memset(v41, 0, sizeof(v41));
  v36 = (int)__p[1];
  if (SBYTE7(v45) < 0)
  {
    sub_1DCACA658(&v37, (void *)v44, *((unint64_t *)&v44 + 1));
  }
  else
  {
    v37 = v44;
    v38 = v45;
  }
  v35 = MEMORY[0x1E0DF3168] + 16;
  v39 = *((_QWORD *)&v45 + 1);
  v40 = v46;
  if (v46)
  {
    v4 = (unint64_t *)(v46 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_1DCB0345C(&v32, "materials");
  LODWORD(v30) = 0;
  v31 = 0;
  v29[0] = 0;
  v29[2] = 0;
  v28[0] = 0;
  v28[2] = 0;
  MEMORY[0x1DF0D147C](v41, &v35, &v32, &v30, v29, v28);
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v35);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v6 = v3;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v24, v49, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v25 != v9)
          objc_enumerationMutation(v6);
        sub_1DCBA9200(*(void **)(*((_QWORD *)&v24 + 1) + 8 * i), (uint64_t)__p);
      }
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v11, (uint64_t)&v24, v49, 16);
    }
    while (v8);
  }

  v12 = v32 == v33;
  if (v32 != v33)
  {
    v13 = *((char *)v32 + 23);
    v14 = v13 >= 0 ? v32 : *(void **)v32;
    v15 = v13 >= 0 ? *((unsigned __int8 *)v32 + 23) : *((_QWORD *)v32 + 1);
    sub_1DCB03734(MEMORY[0x1E0DE4A50], (uint64_t)v14, v15);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v33 - (_BYTE *)v32) >> 3);
    if (v16 >= 2)
    {
      v17 = 0;
      v18 = v16 - 1;
      v19 = (_QWORD *)MEMORY[0x1E0DE4A50];
      do
      {
        sub_1DCB03734(v19, (uint64_t)"\n", 1);
        v20 = *((char *)v32 + v17 + 47);
        if (v20 >= 0)
          v21 = (char *)v32 + v17 + 24;
        else
          v21 = *(char **)((char *)v32 + v17 + 24);
        if (v20 >= 0)
          v22 = *((unsigned __int8 *)v32 + v17 + 47);
        else
          v22 = *(_QWORD *)((char *)v32 + v17 + 32);
        sub_1DCB03734(v19, (uint64_t)v21, v22);
        v17 += 24;
        --v18;
      }
      while (v18);
    }
  }
  v30 = &v32;
  sub_1DCB2ED4C(&v30);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v41);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)__p);
  MEMORY[0x1DF0D14AC](v48);

  return v12;
}

void sub_1DCBA9038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **__p,uint64_t a45,int a46,__int16 a47,char a48,unsigned __int8 a49)
{
  void *v49;
  char *v50;
  uint64_t v51;
  void *v54;
  _QWORD *v55;
  void **p_p;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  const char *v60;
  size_t v61;
  _QWORD *v62;

  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&__p);
  MEMORY[0x1DF0D14AC](v51 - 256);
  if (a2 == 1)
  {
    v54 = __cxa_begin_catch(a1);
    v55 = sub_1DCB03734(MEMORY[0x1E0DE4A50], (uint64_t)"Failed to save ", 15);
    sub_1DCB0345C(&__p, v50);
    if ((a49 & 0x80u) == 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    if ((a49 & 0x80u) == 0)
      v57 = a49;
    else
      v57 = a45;
    v58 = sub_1DCB03734(v55, (uint64_t)p_p, v57);
    v59 = sub_1DCB03734(v58, (uint64_t)" because ", 9);
    v60 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v54 + 16))(v54);
    v61 = strlen(v60);
    v62 = sub_1DCB03734(v59, (uint64_t)v60, v61);
    sub_1DCBA987C(v62);
    if ((char)a49 < 0)
      operator delete(__p);
    __cxa_end_catch();
    JUMPOUT(0x1DCBA8FF8);
  }

  _Unwind_Resume(a1);
}

void sub_1DCBA9200(void *a1, uint64_t a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  _BOOL4 v7;
  const char *v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  const char *v29;
  uint64_t v30;
  id v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  void *v41;
  char *v42;
  char *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t j;
  const char *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  void *v59;
  int v60;
  char v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  void *__p[2];
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  _OWORD v74[3];
  uint64_t *v75;
  int v76;
  uint64_t v77;
  int v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD v83[32];
  __int128 v84;
  _OWORD v85[4];
  void *v86[2];
  __int128 v87;
  __int128 v88;
  _OWORD v89[9];
  uint64_t v90;
  _BYTE v91[128];
  _BYTE v92[128];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (v3)
  {
    v90 = 0;
    memset(v89, 0, sizeof(v89));
    v88 = 0u;
    v87 = 0u;
    *(_OWORD *)v86 = 0u;
    memset(v85, 0, sizeof(v85));
    v84 = 0u;
    sub_1DCB86A2C((uint64_t)&v84);
    objc_msgSend_name(v3, v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6 == 0;

    if (v7)
    {
      sub_1DCB03734(v85, (uint64_t)"mdlabc_", 7);
      ++dword_1F03B5180;
      std::ostream::operator<<();
    }
    else
    {
      objc_msgSend_name(v3, v8, v9);
      v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v13 = (const char *)objc_msgSend_UTF8String(v10, v11, v12);
      v14 = strlen(v13);
      v15 = sub_1DCB03734(v85, (uint64_t)v13, v14);
      sub_1DCB03734(v15, (uint64_t)"_", 1);
      ++dword_1F03B5180;
      std::ostream::operator<<();

    }
    memset(v83, 0, sizeof(v83));
    v78 = *(_DWORD *)(a2 + 8);
    if (*(char *)(a2 + 39) < 0)
    {
      sub_1DCACA658(&v79, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      v79 = *(_OWORD *)(a2 + 16);
      v80 = *(_QWORD *)(a2 + 32);
    }
    v17 = *(_QWORD *)(a2 + 40);
    v16 = *(_QWORD *)(a2 + 48);
    v77 = MEMORY[0x1E0DF3168] + 16;
    v81 = v17;
    v82 = v16;
    if (v16)
    {
      v18 = (unint64_t *)(v16 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    std::stringbuf::str();
    LODWORD(v74[0]) = 0;
    DWORD2(v74[0]) = 0;
    LODWORD(v59) = 0;
    v60 = 0;
    LODWORD(v75) = 0;
    v76 = 0;
    sub_1DCBB0BB4((uint64_t)v83, (uint64_t)&v77, (__int128 *)__p, (uint64_t **)v74, (uint64_t **)&v59, &v75);
    if (SHIBYTE(v67.f64[0]) < 0)
      operator delete(__p[0]);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v77);
    memset(v74, 0, sizeof(v74));
    Alembic::AbcGeom::v12::XformSample::XformSample((Alembic::AbcGeom::v12::XformSample *)v74);
    objc_msgSend_transform(v3, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_localTransformAtTime_(v22, v23, v24, 0.0);
    v51 = v25;
    v52 = v26;
    v53 = v27;
    v54 = v28;

    *(float64x2_t *)__p = vcvtq_f64_f32(*(float32x2_t *)v51.f32);
    v67 = vcvt_hight_f64_f32(v51);
    v68 = vcvtq_f64_f32(*(float32x2_t *)v52.f32);
    v69 = vcvt_hight_f64_f32(v52);
    v70 = vcvtq_f64_f32(*(float32x2_t *)v53.f32);
    v71 = vcvt_hight_f64_f32(v53);
    v72 = vcvtq_f64_f32(*(float32x2_t *)v54.f32);
    v73 = vcvt_hight_f64_f32(v54);
    Alembic::AbcGeom::v12::XformSample::setMatrix();
    Alembic::AbcGeom::v12::OXformSchema::set((Alembic::AbcGeom::v12::OXformSchema *)((char *)&v83[3] + 8), (Alembic::AbcGeom::v12::XformSample *)v74);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v31 = v3;
      v62 = 0u;
      v63 = 0u;
      v64 = 0u;
      v65 = 0u;
      objc_msgSend_submeshes(v31, v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v34, v35, (uint64_t)&v62, v92, 16);
      if (v38)
      {
        v39 = *(_QWORD *)v63;
        do
        {
          for (i = 0; i != v38; ++i)
          {
            if (*(_QWORD *)v63 != v39)
              objc_enumerationMutation(v34);
            v41 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * i);
            if (objc_msgSend_geometryType(v41, v36, v37, *(_OWORD *)&v51, *(_OWORD *)&v52, *(_OWORD *)&v53, *(_OWORD *)&v54) == 5)
            {
              std::stringbuf::str();
              if (v61 >= 0)
                v42 = (char *)&v59;
              else
                v42 = (char *)v59;
              sub_1DCBA990C(v31, v41, v42, (uint64_t)v83);
            }
            else
            {
              std::stringbuf::str();
              if (v61 >= 0)
                v43 = (char *)&v59;
              else
                v43 = (char *)v59;
              sub_1DCBAD684(v31, v41, v43, (uint64_t)v83);
            }
            if (v61 < 0)
              operator delete(v59);
          }
          v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v34, v36, (uint64_t)&v62, v92, 16);
        }
        while (v38);
      }

    }
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    objc_msgSend_children(v3, v29, v30, *(_OWORD *)&v51, *(_OWORD *)&v52, *(_OWORD *)&v53, *(_OWORD *)&v54, 0);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = objc_msgSend_countByEnumeratingWithState_objects_count_(v44, v45, (uint64_t)&v55, v91, 16);
    if (v46)
    {
      v47 = *(_QWORD *)v56;
      do
      {
        for (j = 0; j != v46; ++j)
        {
          if (*(_QWORD *)v56 != v47)
            objc_enumerationMutation(v44);
          sub_1DCBA9200(*(_QWORD *)(*((_QWORD *)&v55 + 1) + 8 * j), v83);
        }
        v46 = objc_msgSend_countByEnumeratingWithState_objects_count_(v44, v49, (uint64_t)&v55, v91, 16);
      }
      while (v46);
    }

    __p[0] = (char *)v74 + 8;
    sub_1DCBBD088((void ***)__p);
    *(_QWORD *)&v83[0] = &off_1EA574248;
    sub_1DCBB2764((uint64_t)&v83[3] + 8);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v83);
    *(_QWORD *)&v84 = *MEMORY[0x1E0DE4F50];
    v50 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)&v85[-1] + *(_QWORD *)(v84 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    *(_QWORD *)&v85[0] = v50;
    *((_QWORD *)&v85[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v87) < 0)
      operator delete(v86[1]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1DF0D2238](v89);
  }

}

void sub_1DCBA9770(_Unwind_Exception *a1)
{
  void *v1;

  sub_1DCB28D6C((uint64_t)&STACK[0x3E0]);

  _Unwind_Resume(a1);
}

_QWORD *sub_1DCBA987C(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1DCBA98F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_1DCBA990C(void *a1, void *a2, char *a3, uint64_t a4)
{
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int v47;
  uint64_t v48;
  char *v49;
  int v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  int v71;
  unint64_t v72;
  char *v73;
  int v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  int v84;
  uint64_t v85;
  int v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  int v95;
  int v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  int v105;
  int v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  int v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  int v126;
  uint64_t v127;
  char *v128;
  int v129;
  char *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  int v150;
  unint64_t v151;
  char *v152;
  int v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  int v163;
  int v164;
  char *v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  int v173;
  int v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  char *v180;
  char *v181;
  int v182;
  const char *v183;
  uint64_t v184;
  void *v185;
  void *v186;
  const char *v187;
  uint64_t v188;
  const char *v189;
  uint64_t v190;
  void *v191;
  void *v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  uint64_t v197;
  void *v198;
  const char *v199;
  uint64_t v200;
  unint64_t v201;
  const char *v202;
  uint64_t v203;
  void *v204;
  const char *v205;
  uint64_t v206;
  void *v207;
  const char *v208;
  uint64_t v209;
  void *v210;
  const char *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t i;
  void *v217;
  const char *v218;
  uint64_t v219;
  unint64_t v220;
  int v221;
  char *v222;
  char *v223;
  char *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  int v230;
  char *v231;
  char *v232;
  unint64_t v233;
  int v234;
  uint64_t v235;
  char *v236;
  int v237;
  char *v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  char *v244;
  char *v245;
  int v246;
  char *v248;
  unint64_t v249;
  _DWORD *v250;
  int v251;
  std::string *v252;
  __int128 v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  __int128 *v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  id v266;
  const char *v267;
  uint64_t v268;
  void *v269;
  const char *v270;
  uint64_t v271;
  void *v272;
  const char *v273;
  uint64_t v274;
  const char *v275;
  uint64_t v276;
  void *v277;
  void *v278;
  const char *v279;
  uint64_t v280;
  uint64_t v281;
  const char *v282;
  uint64_t v283;
  void *v284;
  const char *v285;
  uint64_t v286;
  void *v287;
  const char *v288;
  uint64_t v289;
  const char *v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t j;
  void *v296;
  const char *v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  char *v301;
  _DWORD *v302;
  char *v303;
  uint64_t v304;
  unint64_t v305;
  int64_t v306;
  char *v307;
  char *v308;
  int v309;
  unint64_t v310;
  void *v311;
  const char *v312;
  uint64_t v313;
  unint64_t v314;
  char *v315;
  _DWORD *v316;
  char *v317;
  uint64_t v318;
  unint64_t v319;
  int64_t v320;
  char *v321;
  char *v322;
  int v323;
  void *v324;
  const char *v325;
  uint64_t v326;
  void *v327;
  const char *v328;
  uint64_t v329;
  void *v330;
  const char *v331;
  uint64_t v332;
  void *v333;
  const char *v334;
  uint64_t v335;
  void *v336;
  void *v337;
  const char *v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t k;
  void *v344;
  const char *v345;
  uint64_t v346;
  unint64_t v347;
  char *v348;
  _DWORD *v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  int64_t v353;
  char *v354;
  char *v355;
  int v356;
  void *v357;
  const char *v358;
  uint64_t v359;
  const char *v360;
  uint64_t v361;
  void *v362;
  void *v363;
  const char *v364;
  uint64_t v365;
  uint64_t v366;
  const char *v367;
  uint64_t v368;
  void *v369;
  const char *v370;
  uint64_t v371;
  void *v372;
  const char *v373;
  uint64_t v374;
  const char *v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t m;
  void *v381;
  const char *v382;
  uint64_t v383;
  unint64_t v384;
  int v385;
  char *v386;
  _DWORD *v387;
  char *v388;
  uint64_t v389;
  unint64_t v390;
  int64_t v391;
  char *v392;
  char *v393;
  int v394;
  void *v395;
  const char *v396;
  uint64_t v397;
  void *v398;
  const char *v399;
  uint64_t v400;
  void *v401;
  const char *v402;
  uint64_t v403;
  void *v404;
  const char *v405;
  uint64_t v406;
  void *v407;
  const char *v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t n;
  void *v414;
  const char *v415;
  uint64_t v416;
  unint64_t v417;
  char *v418;
  _DWORD *v419;
  char *v420;
  uint64_t v421;
  unint64_t v422;
  int64_t v423;
  char *v424;
  char *v425;
  int v426;
  const char *v427;
  void *v428;
  const char *v429;
  uint64_t v430;
  const char *v431;
  uint64_t v432;
  uint64_t v433;
  const char *v434;
  uint64_t v435;
  uint64_t v436;
  const char *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t ii;
  uint64_t v441;
  unint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  char *v447;
  char *v448;
  char *v449;
  char *v450;
  uint64_t v451;
  const char *v452;
  void *v453;
  const char *v454;
  uint64_t v455;
  const char *v456;
  uint64_t v457;
  uint64_t v458;
  const char *v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t jj;
  int v466;
  char *v467;
  _DWORD *v468;
  char *v469;
  uint64_t v470;
  unint64_t v471;
  int64_t v472;
  char *v473;
  char *v474;
  int v475;
  unint64_t *v476;
  unint64_t v477;
  char *v478;
  void *v479;
  const char *v480;
  uint64_t v481;
  const char *v482;
  uint64_t v483;
  uint64_t v484;
  const char *v485;
  uint64_t v486;
  uint64_t v487;
  const char *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unsigned int v493;
  unsigned int v494;
  int v495;
  unint64_t v496;
  uint64_t v497;
  unint64_t *v498;
  unint64_t v499;
  char *v500;
  void *v501;
  const char *v502;
  uint64_t v503;
  const char *v504;
  uint64_t v505;
  uint64_t v506;
  const char *v507;
  uint64_t v508;
  uint64_t v509;
  const char *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unsigned int v515;
  unsigned int v516;
  int v517;
  unint64_t v518;
  uint64_t v519;
  unint64_t *v520;
  unint64_t v521;
  char *v522;
  void *v523;
  const char *v524;
  uint64_t v525;
  const char *v526;
  uint64_t v527;
  uint64_t v528;
  const char *v529;
  uint64_t v530;
  uint64_t v531;
  const char *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  unsigned int v537;
  unsigned int v538;
  int v539;
  unint64_t v540;
  uint64_t v541;
  unint64_t *v542;
  unint64_t v543;
  char *v544;
  void *v545;
  const char *v546;
  uint64_t v547;
  uint64_t v548;
  const char *v549;
  void *v550;
  const char *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  const char *v555;
  uint64_t v556;
  uint64_t v557;
  unint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t kk;
  int v562;
  char *v563;
  _DWORD *v564;
  char *v565;
  uint64_t v566;
  unint64_t v567;
  int64_t v568;
  char *v569;
  char *v570;
  int v571;
  void *v572;
  const char *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  const char *v577;
  uint64_t v578;
  uint64_t v579;
  const char *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t mm;
  uint64_t v584;
  unint64_t v585;
  _QWORD *v586;
  uint64_t v587;
  unint64_t v588;
  unint64_t v589;
  char *v590;
  char *v591;
  char *v592;
  char *v593;
  uint64_t v594;
  unint64_t *v595;
  unint64_t v596;
  char *v597;
  Alembic::Abc::v12::OCompoundProperty *v598;
  unint64_t *v599;
  unint64_t v600;
  char *v601;
  void *v602;
  const char *v603;
  uint64_t v604;
  const char *v605;
  uint64_t v606;
  const char *v607;
  void *v608;
  const char *v609;
  uint64_t v610;
  const char *v611;
  uint64_t v612;
  uint64_t v613;
  const char *v614;
  uint64_t v615;
  uint64_t v616;
  unint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t nn;
  int v621;
  char *v622;
  _DWORD *v623;
  char *v624;
  uint64_t v625;
  unint64_t v626;
  int64_t v627;
  char *v628;
  char *v629;
  int v630;
  const char *v631;
  uint64_t v632;
  const char *v633;
  uint64_t v634;
  uint64_t v635;
  const char *v636;
  uint64_t v637;
  uint64_t v638;
  const char *v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  unsigned int v643;
  unsigned int v644;
  int v645;
  unint64_t v646;
  uint64_t v647;
  unint64_t *v648;
  unint64_t v649;
  char *v650;
  Alembic::Abc::v12::OCompoundProperty *v651;
  unint64_t *v652;
  unint64_t v653;
  char *v654;
  void *v655;
  void *v656;
  void *v657;
  id v659;
  id v660;
  void *v661;
  id v663;
  uint64_t v664;
  int v665;
  __int128 v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  int v670;
  __int128 v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  int v675;
  __int128 v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  int v680;
  __int128 v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  int v685;
  __int128 v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  int v690;
  __int128 v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  int v695;
  __int128 v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t *v700;
  int v701;
  void *v702;
  void *v703;
  void *v704;
  void *v705;
  uint64_t *v706;
  int v707;
  int v708;
  __int128 v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  void *__dst;
  int v714;
  void *v715;
  _QWORD v716[4];
  void *v717;
  void *v718;
  _BYTE v719[56];
  _BYTE v720[48];
  uint64_t v721;
  __int128 __src;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t *v726;
  uint64_t v727;
  void *v728;
  void *v729;
  uint64_t v730;
  void *v731;
  unint64_t v732;
  void *v733;
  void *v734;
  uint64_t v735;
  void *v736;
  unint64_t v737;
  void *v738;
  void *v739;
  uint64_t v740;
  void *v741;
  unint64_t v742;
  void *v743;
  void *v744;
  uint64_t v745;
  void *v746;
  unint64_t v747;
  void *v748;
  void *v749;
  uint64_t v750;
  void *v751;
  unint64_t v752;
  void *v753;
  void *v754;
  uint64_t v755;
  __int128 v756;
  uint64_t v757;
  uint64_t v758;
  int v759;
  __int128 v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  __int128 v764;
  _OWORD v765[4];
  void *__p[2];
  __int128 v767;
  __int128 v768;
  _OWORD v769[9];
  uint64_t v770;
  __int128 v771;
  int64_t v772;
  char *v773;
  char *v774;
  char *v775;
  _DWORD *v776;
  void *v777;
  uint64_t v778;
  char *v779;
  char *v780;
  char *v781;
  _DWORD *v782;
  _DWORD *v783;
  unint64_t v784;

  v5 = a1;
  v660 = a2;
  v782 = 0;
  v783 = 0;
  v784 = 0;
  v664 = objc_msgSend_vertexCount(v5, v6, v7);
  objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v5, v8, (uint64_t)CFSTR("position"), 786435);
  v661 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_dataStart(v661, v9, v10);
  v14 = objc_msgSend_stride(v661, v12, v13);
  if (v664)
  {
    v17 = v14;
    v18 = 0;
    v19 = v664;
    do
    {
      if (v18 + 12 <= (unint64_t)objc_msgSend_bufferSize(v661, v15, v16))
      {
        v20 = *(_DWORD *)(v11 + v18);
        v21 = *(_DWORD *)(v11 + v18 + 4);
        v22 = *(_DWORD *)(v11 + v18 + 8);
        *(_QWORD *)&v764 = __PAIR64__(v21, v20);
        DWORD2(v764) = v22;
        v23 = v783;
        if ((unint64_t)v783 >= v784)
        {
          v24 = sub_1DCBB37F8((uint64_t *)&v782, (uint64_t)&v764);
        }
        else
        {
          *v783 = v20;
          v23[1] = v21;
          v24 = (uint64_t)(v23 + 3);
          v23[2] = v22;
        }
        v783 = (_DWORD *)v24;
      }
      v18 += v17;
      --v19;
    }
    while (v19);
  }
  objc_msgSend_indexBufferAsIndexType_(v660, v15, 32);
  v657 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_map(v657, v25, v26);
  v656 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend_bytes(v656, v27, v28);
  v32 = objc_msgSend_indexCount(v660, v30, v31);
  v779 = 0;
  v780 = 0;
  v781 = 0;
  v776 = 0;
  v777 = 0;
  v778 = 0;
  v773 = 0;
  v774 = 0;
  v775 = 0;
  v659 = v5;
  switch(objc_msgSend_geometryType(v660, v33, v34))
  {
    case 0:
      sub_1DCB01460((void **)&v779, v32);
      sub_1DCB01460((void **)&v773, v32);
      if (v32)
      {
        v37 = 0;
        v38 = v774;
        do
        {
          if (v38 >= v775)
          {
            v40 = v773;
            v41 = (v38 - v773) >> 2;
            v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 62)
              sub_1DCAE4C44();
            v43 = v775 - v773;
            if ((v775 - v773) >> 1 > v42)
              v42 = v43 >> 1;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
              v44 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
            {
              v45 = (char *)sub_1DCAE4D04((uint64_t)&v775, v44);
              v40 = v773;
              v38 = v774;
            }
            else
            {
              v45 = 0;
            }
            v46 = &v45[4 * v41];
            *(_DWORD *)v46 = 1;
            v39 = v46 + 4;
            while (v38 != v40)
            {
              v47 = *((_DWORD *)v38 - 1);
              v38 -= 4;
              *((_DWORD *)v46 - 1) = v47;
              v46 -= 4;
            }
            v773 = v46;
            v774 = v39;
            v775 = &v45[4 * v44];
            if (v40)
              operator delete(v40);
          }
          else
          {
            *(_DWORD *)v38 = 1;
            v39 = v38 + 4;
          }
          v774 = v39;
          ++v37;
          v38 = v39;
        }
        while (v37 != v32);
        v48 = 0;
        v49 = v780;
        do
        {
          v50 = *(_DWORD *)(v29 + 4 * v48);
          if (v49 >= v781)
          {
            v52 = v779;
            v53 = (v49 - v779) >> 2;
            v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 62)
              sub_1DCAE4C44();
            v55 = v781 - v779;
            if ((v781 - v779) >> 1 > v54)
              v54 = v55 >> 1;
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
              v56 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v56 = v54;
            if (v56)
            {
              v57 = (char *)sub_1DCAE4D04((uint64_t)&v781, v56);
              v52 = v779;
              v49 = v780;
            }
            else
            {
              v57 = 0;
            }
            v58 = &v57[4 * v53];
            *(_DWORD *)v58 = v50;
            v51 = v58 + 4;
            while (v49 != v52)
            {
              v59 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *((_DWORD *)v58 - 1) = v59;
              v58 -= 4;
            }
            v779 = v58;
            v780 = v51;
            v781 = &v57[4 * v56];
            if (v52)
              operator delete(v52);
          }
          else
          {
            *(_DWORD *)v49 = v50;
            v51 = v49 + 4;
          }
          v780 = v51;
          ++v48;
          v49 = v51;
        }
        while (v48 != v32);
      }
      goto LABEL_301;
    case 1:
      sub_1DCB01460((void **)&v779, v32);
      v115 = v32 >> 1;
      sub_1DCB01460((void **)&v773, v32 >> 1);
      if (v32 >= 2)
      {
        v116 = 0;
        if (v115 <= 1)
          v115 = 1;
        v117 = v774;
        do
        {
          if (v117 >= v775)
          {
            v119 = v773;
            v120 = (v117 - v773) >> 2;
            v121 = v120 + 1;
            if ((unint64_t)(v120 + 1) >> 62)
              sub_1DCAE4C44();
            v122 = v775 - v773;
            if ((v775 - v773) >> 1 > v121)
              v121 = v122 >> 1;
            if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL)
              v123 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v123 = v121;
            if (v123)
            {
              v124 = (char *)sub_1DCAE4D04((uint64_t)&v775, v123);
              v119 = v773;
              v117 = v774;
            }
            else
            {
              v124 = 0;
            }
            v125 = &v124[4 * v120];
            *(_DWORD *)v125 = 2;
            v118 = v125 + 4;
            while (v117 != v119)
            {
              v126 = *((_DWORD *)v117 - 1);
              v117 -= 4;
              *((_DWORD *)v125 - 1) = v126;
              v125 -= 4;
            }
            v773 = v125;
            v774 = v118;
            v775 = &v124[4 * v123];
            if (v119)
              operator delete(v119);
          }
          else
          {
            *(_DWORD *)v117 = 2;
            v118 = v117 + 4;
          }
          v774 = v118;
          ++v116;
          v117 = v118;
        }
        while (v116 != v115);
      }
      if (v32)
      {
        v127 = 0;
        v128 = v780;
        do
        {
          v129 = *(_DWORD *)(v29 + 4 * v127);
          if (v128 >= v781)
          {
            v131 = v779;
            v132 = (v128 - v779) >> 2;
            v133 = v132 + 1;
            if ((unint64_t)(v132 + 1) >> 62)
              sub_1DCAE4C44();
            v134 = v781 - v779;
            if ((v781 - v779) >> 1 > v133)
              v133 = v134 >> 1;
            if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
              v135 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v135 = v133;
            if (v135)
            {
              v136 = (char *)sub_1DCAE4D04((uint64_t)&v781, v135);
              v131 = v779;
              v128 = v780;
            }
            else
            {
              v136 = 0;
            }
            v137 = &v136[4 * v132];
            *(_DWORD *)v137 = v129;
            v130 = v137 + 4;
            while (v128 != v131)
            {
              v138 = *((_DWORD *)v128 - 1);
              v128 -= 4;
              *((_DWORD *)v137 - 1) = v138;
              v137 -= 4;
            }
            v779 = v137;
            v780 = v130;
            v781 = &v136[4 * v135];
            if (v131)
              operator delete(v131);
          }
          else
          {
            *(_DWORD *)v128 = v129;
            v130 = v128 + 4;
          }
          v780 = v130;
          ++v127;
          v128 = v130;
        }
        while (v127 != v32);
      }
      goto LABEL_301;
    case 2:
      sub_1DCB01460((void **)&v779, v32);
      v139 = v32 / 3;
      sub_1DCB01460((void **)&v773, v32 / 3);
      if (v32 >= 3)
      {
        v140 = 0;
        if (v139 <= 1)
          v139 = 1;
        v141 = v774;
        do
        {
          if (v141 >= v775)
          {
            v143 = v773;
            v144 = (v141 - v773) >> 2;
            v145 = v144 + 1;
            if ((unint64_t)(v144 + 1) >> 62)
              sub_1DCAE4C44();
            v146 = v775 - v773;
            if ((v775 - v773) >> 1 > v145)
              v145 = v146 >> 1;
            if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL)
              v147 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v147 = v145;
            if (v147)
            {
              v148 = (char *)sub_1DCAE4D04((uint64_t)&v775, v147);
              v143 = v773;
              v141 = v774;
            }
            else
            {
              v148 = 0;
            }
            v149 = &v148[4 * v144];
            *(_DWORD *)v149 = 3;
            v142 = v149 + 4;
            while (v141 != v143)
            {
              v150 = *((_DWORD *)v141 - 1);
              v141 -= 4;
              *((_DWORD *)v149 - 1) = v150;
              v149 -= 4;
            }
            v773 = v149;
            v774 = v142;
            v775 = &v148[4 * v147];
            if (v143)
              operator delete(v143);
          }
          else
          {
            *(_DWORD *)v141 = 3;
            v142 = v141 + 4;
          }
          v774 = v142;
          ++v140;
          v141 = v142;
        }
        while (v140 != v139);
      }
      if (v32)
      {
        v151 = 0;
        v152 = v780;
        do
        {
          v153 = *(_DWORD *)(v29 + 4 * v151);
          v154 = v781;
          if (v152 >= v781)
          {
            v156 = v779;
            v157 = (v152 - v779) >> 2;
            v158 = v157 + 1;
            if ((unint64_t)(v157 + 1) >> 62)
              sub_1DCAE4C44();
            v159 = v781 - v779;
            if ((v781 - v779) >> 1 > v158)
              v158 = v159 >> 1;
            if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL)
              v160 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v160 = v158;
            if (v160)
            {
              v161 = (char *)sub_1DCAE4D04((uint64_t)&v781, v160);
              v156 = v779;
              v152 = v780;
            }
            else
            {
              v161 = 0;
            }
            v162 = &v161[4 * v157];
            *(_DWORD *)v162 = v153;
            v155 = v162 + 4;
            while (v152 != v156)
            {
              v163 = *((_DWORD *)v152 - 1);
              v152 -= 4;
              *((_DWORD *)v162 - 1) = v163;
              v162 -= 4;
            }
            v154 = &v161[4 * v160];
            v779 = v162;
            v780 = v155;
            v781 = v154;
            if (v156)
            {
              operator delete(v156);
              v154 = v781;
            }
          }
          else
          {
            *(_DWORD *)v152 = v153;
            v155 = v152 + 4;
          }
          v780 = v155;
          v164 = *(_DWORD *)(v29 + 4 * v151 + 8);
          if (v155 >= v154)
          {
            v166 = v779;
            v167 = (v155 - v779) >> 2;
            v168 = v167 + 1;
            if ((unint64_t)(v167 + 1) >> 62)
              sub_1DCAE4C44();
            v169 = v154 - v779;
            if (v169 >> 1 > v168)
              v168 = v169 >> 1;
            if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL)
              v170 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v170 = v168;
            if (v170)
            {
              v171 = (char *)sub_1DCAE4D04((uint64_t)&v781, v170);
              v166 = v779;
              v155 = v780;
            }
            else
            {
              v171 = 0;
            }
            v172 = &v171[4 * v167];
            *(_DWORD *)v172 = v164;
            v165 = v172 + 4;
            while (v155 != v166)
            {
              v173 = *((_DWORD *)v155 - 1);
              v155 -= 4;
              *((_DWORD *)v172 - 1) = v173;
              v172 -= 4;
            }
            v154 = &v171[4 * v170];
            v779 = v172;
            v780 = v165;
            v781 = v154;
            if (v166)
            {
              operator delete(v166);
              v154 = v781;
            }
          }
          else
          {
            *(_DWORD *)v155 = v164;
            v165 = v155 + 4;
          }
          v780 = v165;
          v174 = *(_DWORD *)(v29 + 4 * v151 + 4);
          if (v165 >= v154)
          {
            v175 = v779;
            v176 = (v165 - v779) >> 2;
            v177 = v176 + 1;
            if ((unint64_t)(v176 + 1) >> 62)
              sub_1DCAE4C44();
            v178 = v154 - v779;
            if (v178 >> 1 > v177)
              v177 = v178 >> 1;
            if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL)
              v179 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v179 = v177;
            if (v179)
            {
              v180 = (char *)sub_1DCAE4D04((uint64_t)&v781, v179);
              v175 = v779;
              v165 = v780;
            }
            else
            {
              v180 = 0;
            }
            v181 = &v180[4 * v176];
            *(_DWORD *)v181 = v174;
            v152 = v181 + 4;
            while (v165 != v175)
            {
              v182 = *((_DWORD *)v165 - 1);
              v165 -= 4;
              *((_DWORD *)v181 - 1) = v182;
              v181 -= 4;
            }
            v779 = v181;
            v780 = v152;
            v781 = &v180[4 * v179];
            if (v175)
              operator delete(v175);
          }
          else
          {
            *(_DWORD *)v165 = v174;
            v152 = v165 + 4;
          }
          v780 = v152;
          v151 += 3;
        }
        while (v32 > v151);
      }
      goto LABEL_301;
    case 3:
      goto LABEL_794;
    case 4:
      sub_1DCB01460((void **)&v779, v32);
      v60 = v32 >> 2;
      sub_1DCB01460((void **)&v773, v32 >> 2);
      if (v32 >= 4)
      {
        v61 = 0;
        if (v60 <= 1)
          v60 = 1;
        v62 = v774;
        do
        {
          if (v62 >= v775)
          {
            v64 = v773;
            v65 = (v62 - v773) >> 2;
            v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62)
              sub_1DCAE4C44();
            v67 = v775 - v773;
            if ((v775 - v773) >> 1 > v66)
              v66 = v67 >> 1;
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
              v68 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v68 = v66;
            if (v68)
            {
              v69 = (char *)sub_1DCAE4D04((uint64_t)&v775, v68);
              v64 = v773;
              v62 = v774;
            }
            else
            {
              v69 = 0;
            }
            v70 = &v69[4 * v65];
            *(_DWORD *)v70 = 4;
            v63 = v70 + 4;
            while (v62 != v64)
            {
              v71 = *((_DWORD *)v62 - 1);
              v62 -= 4;
              *((_DWORD *)v70 - 1) = v71;
              v70 -= 4;
            }
            v773 = v70;
            v774 = v63;
            v775 = &v69[4 * v68];
            if (v64)
              operator delete(v64);
          }
          else
          {
            *(_DWORD *)v62 = 4;
            v63 = v62 + 4;
          }
          v774 = v63;
          ++v61;
          v62 = v63;
        }
        while (v61 != v60);
      }
      if (v32)
      {
        v72 = 0;
        v73 = v780;
        do
        {
          v74 = *(_DWORD *)(v29 + 4 * v72);
          v75 = v781;
          if (v73 >= v781)
          {
            v77 = v779;
            v78 = (v73 - v779) >> 2;
            v79 = v78 + 1;
            if ((unint64_t)(v78 + 1) >> 62)
              sub_1DCAE4C44();
            v80 = v781 - v779;
            if ((v781 - v779) >> 1 > v79)
              v79 = v80 >> 1;
            if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
              v81 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v81 = v79;
            if (v81)
            {
              v82 = (char *)sub_1DCAE4D04((uint64_t)&v781, v81);
              v77 = v779;
              v73 = v780;
            }
            else
            {
              v82 = 0;
            }
            v83 = &v82[4 * v78];
            *(_DWORD *)v83 = v74;
            v76 = v83 + 4;
            while (v73 != v77)
            {
              v84 = *((_DWORD *)v73 - 1);
              v73 -= 4;
              *((_DWORD *)v83 - 1) = v84;
              v83 -= 4;
            }
            v75 = &v82[4 * v81];
            v779 = v83;
            v780 = v76;
            v781 = v75;
            if (v77)
            {
              operator delete(v77);
              v75 = v781;
            }
          }
          else
          {
            *(_DWORD *)v73 = v74;
            v76 = v73 + 4;
          }
          v780 = v76;
          v85 = 4 * v72;
          v86 = *(_DWORD *)(v29 + ((4 * v72) | 0xC));
          if (v76 >= v75)
          {
            v88 = v779;
            v89 = (v76 - v779) >> 2;
            v90 = v89 + 1;
            if ((unint64_t)(v89 + 1) >> 62)
              sub_1DCAE4C44();
            v91 = v75 - v779;
            if (v91 >> 1 > v90)
              v90 = v91 >> 1;
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
              v92 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v92 = v90;
            if (v92)
            {
              v93 = (char *)sub_1DCAE4D04((uint64_t)&v781, v92);
              v88 = v779;
              v76 = v780;
            }
            else
            {
              v93 = 0;
            }
            v94 = &v93[4 * v89];
            *(_DWORD *)v94 = v86;
            v87 = v94 + 4;
            while (v76 != v88)
            {
              v95 = *((_DWORD *)v76 - 1);
              v76 -= 4;
              *((_DWORD *)v94 - 1) = v95;
              v94 -= 4;
            }
            v75 = &v93[4 * v92];
            v779 = v94;
            v780 = v87;
            v781 = v75;
            if (v88)
            {
              operator delete(v88);
              v75 = v781;
            }
          }
          else
          {
            *(_DWORD *)v76 = v86;
            v87 = v76 + 4;
          }
          v780 = v87;
          v96 = *(_DWORD *)(v29 + (v85 | 8));
          if (v87 >= v75)
          {
            v98 = v779;
            v99 = (v87 - v779) >> 2;
            v100 = v99 + 1;
            if ((unint64_t)(v99 + 1) >> 62)
              sub_1DCAE4C44();
            v101 = v75 - v779;
            if (v101 >> 1 > v100)
              v100 = v101 >> 1;
            if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
              v102 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v102 = v100;
            if (v102)
            {
              v103 = (char *)sub_1DCAE4D04((uint64_t)&v781, v102);
              v98 = v779;
              v87 = v780;
            }
            else
            {
              v103 = 0;
            }
            v104 = &v103[4 * v99];
            *(_DWORD *)v104 = v96;
            v97 = v104 + 4;
            while (v87 != v98)
            {
              v105 = *((_DWORD *)v87 - 1);
              v87 -= 4;
              *((_DWORD *)v104 - 1) = v105;
              v104 -= 4;
            }
            v75 = &v103[4 * v102];
            v779 = v104;
            v780 = v97;
            v781 = v75;
            if (v98)
            {
              operator delete(v98);
              v75 = v781;
            }
          }
          else
          {
            *(_DWORD *)v87 = v96;
            v97 = v87 + 4;
          }
          v780 = v97;
          v106 = *(_DWORD *)(v29 + (v85 | 4));
          if (v97 >= v75)
          {
            v107 = v779;
            v108 = (v97 - v779) >> 2;
            v109 = v108 + 1;
            if ((unint64_t)(v108 + 1) >> 62)
              sub_1DCAE4C44();
            v110 = v75 - v779;
            if (v110 >> 1 > v109)
              v109 = v110 >> 1;
            if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL)
              v111 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v111 = v109;
            if (v111)
            {
              v112 = (char *)sub_1DCAE4D04((uint64_t)&v781, v111);
              v107 = v779;
              v97 = v780;
            }
            else
            {
              v112 = 0;
            }
            v113 = &v112[4 * v108];
            *(_DWORD *)v113 = v106;
            v73 = v113 + 4;
            while (v97 != v107)
            {
              v114 = *((_DWORD *)v97 - 1);
              v97 -= 4;
              *((_DWORD *)v113 - 1) = v114;
              v113 -= 4;
            }
            v779 = v113;
            v780 = v73;
            v781 = &v112[4 * v111];
            if (v107)
              operator delete(v107);
          }
          else
          {
            *(_DWORD *)v97 = v106;
            v73 = v97 + 4;
          }
          v780 = v73;
          v72 += 4;
        }
        while (v32 > v72);
      }
      goto LABEL_301;
    case 5:
      objc_msgSend_topology(v660, v35, v36);
      v185 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v185)
        goto LABEL_301;
      objc_msgSend_topology(v660, v183, v184);
      v186 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_faceTopology(v186, v187, v188);
      v191 = (void *)objc_claimAutoreleasedReturnValue();
      if (v191)
      {
        objc_msgSend_topology(v660, v189, v190);
        v192 = (void *)objc_claimAutoreleasedReturnValue();
        v195 = objc_msgSend_faceCount(v192, v193, v194);

        if (!v195)
          goto LABEL_301;
        objc_msgSend_topology(v660, v196, v197);
        v198 = (void *)objc_claimAutoreleasedReturnValue();
        v201 = objc_msgSend_faceCount(v198, v199, v200);
        sub_1DCB01460((void **)&v773, v201);

        objc_msgSend_topology(v660, v202, v203);
        v204 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_faceTopology(v204, v205, v206);
        v207 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_map(v207, v208, v209);
        v210 = (void *)objc_claimAutoreleasedReturnValue();

        v655 = v210;
        v215 = objc_msgSend_bytes(v210, v211, v212);
        for (i = 0; ; ++i)
        {
          objc_msgSend_topology(v660, (const char *)v213, v214);
          v217 = (void *)objc_claimAutoreleasedReturnValue();
          v220 = objc_msgSend_faceCount(v217, v218, v219);

          if (v220 <= i)
            break;
          v221 = *(unsigned __int8 *)(v215 + i);
          v222 = v774;
          if (v774 >= v775)
          {
            v224 = v773;
            v225 = (v774 - v773) >> 2;
            v226 = v225 + 1;
            if ((unint64_t)(v225 + 1) >> 62)
              sub_1DCAE4C44();
            v227 = v775 - v773;
            if ((v775 - v773) >> 1 > v226)
              v226 = v227 >> 1;
            if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFFCLL)
              v213 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v213 = v226;
            if (v213)
            {
              v228 = (char *)sub_1DCAE4D04((uint64_t)&v775, v213);
              v224 = v773;
              v222 = v774;
            }
            else
            {
              v228 = 0;
            }
            v229 = &v228[4 * v225];
            *(_DWORD *)v229 = v221;
            v223 = v229 + 4;
            while (v222 != v224)
            {
              v230 = *((_DWORD *)v222 - 1);
              v222 -= 4;
              *((_DWORD *)v229 - 1) = v230;
              v229 -= 4;
            }
            v773 = v229;
            v774 = v223;
            v775 = &v228[4 * v213];
            if (v224)
              operator delete(v224);
          }
          else
          {
            *(_DWORD *)v774 = v221;
            v223 = v222 + 4;
          }
          v774 = v223;
        }
        v231 = v773;
        v232 = v774;
        if (v774 != v773)
        {
          v233 = 0;
          v234 = 0;
          do
          {
            v235 = *(unsigned int *)&v231[4 * v233];
            if ((int)v235 >= 1)
            {
              v236 = v780;
              do
              {
                v237 = *(_DWORD *)(v29 + 4 * (v235 - 1 + v234));
                if (v236 >= v781)
                {
                  v239 = v779;
                  v240 = (v236 - v779) >> 2;
                  v241 = v240 + 1;
                  if ((unint64_t)(v240 + 1) >> 62)
                    sub_1DCAE4C44();
                  v242 = v781 - v779;
                  if ((v781 - v779) >> 1 > v241)
                    v241 = v242 >> 1;
                  if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFFCLL)
                    v243 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v243 = v241;
                  if (v243)
                  {
                    v244 = (char *)sub_1DCAE4D04((uint64_t)&v781, v243);
                    v239 = v779;
                    v236 = v780;
                  }
                  else
                  {
                    v244 = 0;
                  }
                  v245 = &v244[4 * v240];
                  *(_DWORD *)v245 = v237;
                  v238 = v245 + 4;
                  while (v236 != v239)
                  {
                    v246 = *((_DWORD *)v236 - 1);
                    v236 -= 4;
                    *((_DWORD *)v245 - 1) = v246;
                    v245 -= 4;
                  }
                  v779 = v245;
                  v780 = v238;
                  v781 = &v244[4 * v243];
                  if (v239)
                    operator delete(v239);
                }
                else
                {
                  *(_DWORD *)v236 = v237;
                  v238 = v236 + 4;
                }
                v780 = v238;
                v236 = v238;
              }
              while (v235-- > 1);
              v231 = v773;
              v232 = v774;
              LODWORD(v235) = *(_DWORD *)&v773[4 * v233];
            }
            v234 += v235;
            ++v233;
          }
          while (v233 < (v232 - v231) >> 2);
        }
        v185 = v655;
      }
      else
      {

      }
LABEL_301:
      sub_1DCB231F4((uint64_t)&v776, (v780 - v779) >> 2);
      v248 = v779;
      if (v780 != v779)
      {
        v249 = (v780 - v779) >> 2;
        v250 = v776;
        if (v249 <= 1)
          v249 = 1;
        do
        {
          v251 = *(_DWORD *)v248;
          v248 += 4;
          *v250++ = v251;
          --v249;
        }
        while (v249);
      }
      v771 = 0uLL;
      v772 = 0;
      sub_1DCB0345C(&v764, a3);
      v252 = std::string::append((std::string *)&v764, "_geo");
      v253 = *(_OWORD *)&v252->__r_.__value_.__l.__data_;
      v772 = v252->__r_.__value_.__r.__words[2];
      v771 = v253;
      v252->__r_.__value_.__l.__size_ = 0;
      v252->__r_.__value_.__r.__words[2] = 0;
      v252->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v765[0]) < 0)
        operator delete((void *)v764);
      v254 = 0;
      v255 = *MEMORY[0x1E0DE4F50];
      v257 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v256 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v258 = MEMORY[0x1E0DE4FB8] + 16;
      while (Alembic::Abc::v12::OObject::getChildHeader())
      {
        v770 = 0;
        memset(v769, 0, sizeof(v769));
        v768 = 0u;
        v767 = 0u;
        *(_OWORD *)__p = 0u;
        memset(v765, 0, sizeof(v765));
        v764 = 0u;
        sub_1DCB86A2C((uint64_t)&v764);
        if (v772 >= 0)
          v259 = &v771;
        else
          v259 = (__int128 *)v771;
        if (v772 >= 0)
          v260 = HIBYTE(v772);
        else
          v260 = *((_QWORD *)&v771 + 1);
        sub_1DCB03734(v765, (uint64_t)v259, v260);
        std::ostream::operator<<();
        std::stringbuf::str();
        if (SHIBYTE(v772) < 0)
          operator delete((void *)v771);
        v771 = v756;
        v772 = v757;
        *(_QWORD *)&v764 = v255;
        *(_QWORD *)((char *)&v765[-1] + *(_QWORD *)(v255 - 24)) = v257;
        *(_QWORD *)&v765[0] = v256;
        *((_QWORD *)&v765[0] + 1) = v258;
        if (SHIBYTE(v767) < 0)
          operator delete(__p[1]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1DF0D2238](v769);
        ++v254;
      }
      bzero(&v764, 0x4C8uLL);
      v759 = *(_DWORD *)(a4 + 8);
      if (*(char *)(a4 + 39) < 0)
      {
        v261 = v659;
        sub_1DCACA658(&v760, *(void **)(a4 + 16), *(_QWORD *)(a4 + 24));
      }
      else
      {
        v760 = *(_OWORD *)(a4 + 16);
        v761 = *(_QWORD *)(a4 + 32);
        v261 = v659;
      }
      v263 = *(_QWORD *)(a4 + 40);
      v262 = *(_QWORD *)(a4 + 48);
      v758 = MEMORY[0x1E0DF3168] + 16;
      v762 = v263;
      v763 = v262;
      if (v262)
      {
        v264 = (unint64_t *)(v262 + 8);
        do
          v265 = __ldxr(v264);
        while (__stxr(v265 + 1, v264));
      }
      LODWORD(v756) = 0;
      DWORD2(v756) = 0;
      LODWORD(__dst) = 0;
      v714 = 0;
      LODWORD(v700) = 0;
      v701 = 0;
      sub_1DCBB3960((uint64_t)&v764, (uint64_t)&v758, &v771, (uint64_t **)&v756, (uint64_t **)&__dst, &v700);
      Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v758);
      bzero(&v756, 0x240uLL);
      sub_1DCBB5654(&__dst, (uint64_t *)&v782);
      sub_1DCBB57F8(&v700, (uint64_t *)&v779);
      sub_1DCBB57F8(&v721, (uint64_t *)&v773);
      v751 = 0;
      v752 = 0x100000006;
      v755 = 0;
      v753 = 0;
      v754 = 0;
      v746 = 0;
      v747 = 0x100000006;
      v750 = 0;
      v748 = 0;
      v749 = 0;
      v741 = 0;
      v742 = 0x10000000ALL;
      v745 = 0;
      v743 = 0;
      v744 = 0;
      v736 = 0;
      v737 = 0x100000006;
      v740 = 0;
      v738 = 0;
      v739 = 0;
      v731 = 0;
      v732 = 0x10000000ALL;
      v735 = 0;
      v733 = 0;
      v734 = 0;
      v726 = 0;
      v727 = 0x100000006;
      v730 = 0;
      v728 = 0;
      v729 = 0;
      sub_1DCBB5898((uint64_t)&v756, (uint64_t *)&__dst, (uint64_t *)&v700, &v721, (uint64_t *)&v751, (uint64_t *)&v746, (uint64_t *)&v741, (uint64_t *)&v736, (uint64_t *)&v731, (uint64_t *)&v726);
      if (v728)
      {
        v729 = v728;
        operator delete(v728);
      }
      if (v733)
      {
        v734 = v733;
        operator delete(v733);
      }
      if (v738)
      {
        v739 = v738;
        operator delete(v738);
      }
      if (v743)
      {
        v744 = v743;
        operator delete(v743);
      }
      if (v748)
      {
        v749 = v748;
        operator delete(v748);
      }
      if (v753)
      {
        v754 = v753;
        operator delete(v753);
      }
      if (*((_QWORD *)&__src + 1))
      {
        v723 = *((_QWORD *)&__src + 1);
        operator delete(*((void **)&__src + 1));
      }
      if (v702)
      {
        v703 = v702;
        operator delete(v702);
      }
      if (v715)
      {
        v716[0] = v715;
        operator delete(v715);
      }
      v663 = v261;
      v266 = v660;
      v752 = 0;
      v751 = 0;
      v753 = 0;
      v747 = 0;
      v746 = 0;
      v748 = 0;
      v742 = 0;
      v741 = 0;
      v743 = 0;
      v737 = 0;
      v736 = 0;
      v738 = 0;
      v732 = 0;
      v731 = 0;
      v733 = 0;
      objc_msgSend_topology(v266, v267, v268);
      v269 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v269)
        goto LABEL_460;
      objc_msgSend_topology(v266, v270, v271);
      v272 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_edgeCreaseIndices(v272, v273, v274);
      v277 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v277)
        goto LABEL_412;
      objc_msgSend_topology(v266, v275, v276);
      v278 = (void *)objc_claimAutoreleasedReturnValue();
      v281 = objc_msgSend_edgeCreaseCount(v278, v279, v280);

      if (v281)
      {
        objc_msgSend_topology(v266, v282, v283);
        v284 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_edgeCreaseIndices(v284, v285, v286);
        v287 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_map(v287, v288, v289);
        v272 = (void *)objc_claimAutoreleasedReturnValue();

        v294 = objc_msgSend_bytes(v272, v290, v291);
        for (j = 0; ; ++j)
        {
          objc_msgSend_topology(v266, (const char *)v292, v293);
          v296 = (void *)objc_claimAutoreleasedReturnValue();
          v299 = objc_msgSend_edgeCreaseCount(v296, v297, v298);

          if (j >= 2 * v299)
            break;
          v300 = *(_DWORD *)(v294 + 4 * j);
          v301 = (char *)v752;
          if (v752 >= (unint64_t)v753)
          {
            v303 = (char *)v751;
            v304 = (uint64_t)(v752 - (_QWORD)v751) >> 2;
            v305 = v304 + 1;
            if ((unint64_t)(v304 + 1) >> 62)
              sub_1DCAE4C44();
            v306 = (_BYTE *)v753 - (_BYTE *)v751;
            if (((_BYTE *)v753 - (_BYTE *)v751) >> 1 > v305)
              v305 = v306 >> 1;
            if ((unint64_t)v306 >= 0x7FFFFFFFFFFFFFFCLL)
              v292 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v292 = v305;
            if (v292)
            {
              v307 = (char *)sub_1DCAE4D04((uint64_t)&v753, v292);
              v301 = (char *)v752;
              v303 = (char *)v751;
            }
            else
            {
              v307 = 0;
            }
            v308 = &v307[4 * v304];
            *(_DWORD *)v308 = v300;
            v302 = v308 + 4;
            while (v301 != v303)
            {
              v309 = *((_DWORD *)v301 - 1);
              v301 -= 4;
              *((_DWORD *)v308 - 1) = v309;
              v308 -= 4;
            }
            v751 = v308;
            v752 = (unint64_t)v302;
            v753 = &v307[4 * v292];
            if (v303)
              operator delete(v303);
          }
          else
          {
            *(_DWORD *)v752 = v300;
            v302 = v301 + 4;
          }
          v752 = (unint64_t)v302;
        }
        v310 = 0;
        v752 = (unint64_t)v751;
        while (1)
        {
          objc_msgSend_topology(v266, (const char *)v292, v293);
          v311 = (void *)objc_claimAutoreleasedReturnValue();
          v314 = objc_msgSend_edgeCreaseCount(v311, v312, v313);

          if (v314 <= v310)
            break;
          v315 = (char *)v747;
          if (v747 >= (unint64_t)v748)
          {
            v317 = (char *)v746;
            v318 = (uint64_t)(v747 - (_QWORD)v746) >> 2;
            v319 = v318 + 1;
            if ((unint64_t)(v318 + 1) >> 62)
              sub_1DCAE4C44();
            v320 = (_BYTE *)v748 - (_BYTE *)v746;
            if (((_BYTE *)v748 - (_BYTE *)v746) >> 1 > v319)
              v319 = v320 >> 1;
            if ((unint64_t)v320 >= 0x7FFFFFFFFFFFFFFCLL)
              v292 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v292 = v319;
            if (v292)
            {
              v321 = (char *)sub_1DCAE4D04((uint64_t)&v748, v292);
              v315 = (char *)v747;
              v317 = (char *)v746;
            }
            else
            {
              v321 = 0;
            }
            v322 = &v321[4 * v318];
            *(_DWORD *)v322 = 2;
            v316 = v322 + 4;
            while (v315 != v317)
            {
              v323 = *((_DWORD *)v315 - 1);
              v315 -= 4;
              *((_DWORD *)v322 - 1) = v323;
              v322 -= 4;
            }
            v746 = v322;
            v747 = (unint64_t)v316;
            v748 = &v321[4 * v292];
            if (v317)
              operator delete(v317);
          }
          else
          {
            *(_DWORD *)v747 = 2;
            v316 = v315 + 4;
          }
          v747 = (unint64_t)v316;
          ++v310;
        }
        objc_msgSend_topology(v266, (const char *)v292, v293);
        v324 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_edgeCreases(v324, v325, v326);
        v327 = (void *)objc_claimAutoreleasedReturnValue();

        if (v327)
        {
          objc_msgSend_topology(v266, v328, v329);
          v330 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_edgeCreases(v330, v331, v332);
          v333 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_map(v333, v334, v335);
          v336 = (void *)objc_claimAutoreleasedReturnValue();

          v337 = v336;
          v342 = objc_msgSend_bytes(v336, v338, v339);
          for (k = 0; ; ++k)
          {
            objc_msgSend_topology(v266, (const char *)v340, v341);
            v344 = (void *)objc_claimAutoreleasedReturnValue();
            v347 = objc_msgSend_edgeCreaseCount(v344, v345, v346);

            if (v347 <= k)
              break;
            v348 = (char *)v742;
            if (v742 >= (unint64_t)v743)
            {
              v350 = (char *)v741;
              v351 = (uint64_t)(v742 - (_QWORD)v741) >> 2;
              v352 = v351 + 1;
              if ((unint64_t)(v351 + 1) >> 62)
                sub_1DCAE4C44();
              v353 = (_BYTE *)v743 - (_BYTE *)v741;
              if (((_BYTE *)v743 - (_BYTE *)v741) >> 1 > v352)
                v352 = v353 >> 1;
              if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFFCLL)
                v340 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v340 = v352;
              if (v340)
              {
                v354 = (char *)sub_1DCAE4D04((uint64_t)&v743, v340);
                v348 = (char *)v742;
                v350 = (char *)v741;
              }
              else
              {
                v354 = 0;
              }
              v355 = &v354[4 * v351];
              *(_DWORD *)v355 = *(_DWORD *)(v342 + 4 * k);
              v349 = v355 + 4;
              while (v348 != v350)
              {
                v356 = *((_DWORD *)v348 - 1);
                v348 -= 4;
                *((_DWORD *)v355 - 1) = v356;
                v355 -= 4;
              }
              v741 = v355;
              v742 = (unint64_t)v349;
              v743 = &v354[4 * v340];
              if (v350)
                operator delete(v350);
            }
            else
            {
              *(_DWORD *)v742 = *(_DWORD *)(v342 + 4 * k);
              v349 = v348 + 4;
            }
            v742 = (unint64_t)v349;
          }

        }
        sub_1DCBB57F8(&__dst, (uint64_t *)&v751);
        sub_1DCBB57F8(&v700, (uint64_t *)&v746);
        sub_1DCBB8010(&v721, (uint64_t *)&v741);
        sub_1DCBB5C24((char *)&v756, (uint64_t)&__dst, (uint64_t)&v700, (uint64_t)&v721);
        if (*((_QWORD *)&__src + 1))
        {
          v723 = *((_QWORD *)&__src + 1);
          operator delete(*((void **)&__src + 1));
        }
        if (v702)
        {
          v703 = v702;
          operator delete(v702);
        }
        if (v715)
        {
          v716[0] = v715;
          operator delete(v715);
        }
LABEL_412:

      }
      objc_msgSend_topology(v266, v282, v283);
      v357 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_vertexCreaseIndices(v357, v358, v359);
      v362 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v362)
        goto LABEL_459;
      objc_msgSend_topology(v266, v360, v361);
      v363 = (void *)objc_claimAutoreleasedReturnValue();
      v366 = objc_msgSend_vertexCreaseCount(v363, v364, v365);

      if (v366)
      {
        objc_msgSend_topology(v266, v367, v368);
        v369 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_vertexCreaseIndices(v369, v370, v371);
        v372 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_map(v372, v373, v374);
        v357 = (void *)objc_claimAutoreleasedReturnValue();

        v379 = objc_msgSend_bytes(v357, v375, v376);
        for (m = 0; ; ++m)
        {
          objc_msgSend_topology(v266, (const char *)v377, v378);
          v381 = (void *)objc_claimAutoreleasedReturnValue();
          v384 = objc_msgSend_vertexCreaseCount(v381, v382, v383);

          if (v384 <= m)
            break;
          v385 = *(_DWORD *)(v379 + 4 * m);
          v386 = (char *)v737;
          if (v737 >= (unint64_t)v738)
          {
            v388 = (char *)v736;
            v389 = (uint64_t)(v737 - (_QWORD)v736) >> 2;
            v390 = v389 + 1;
            if ((unint64_t)(v389 + 1) >> 62)
              sub_1DCAE4C44();
            v391 = (_BYTE *)v738 - (_BYTE *)v736;
            if (((_BYTE *)v738 - (_BYTE *)v736) >> 1 > v390)
              v390 = v391 >> 1;
            if ((unint64_t)v391 >= 0x7FFFFFFFFFFFFFFCLL)
              v377 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v377 = v390;
            if (v377)
            {
              v392 = (char *)sub_1DCAE4D04((uint64_t)&v738, v377);
              v386 = (char *)v737;
              v388 = (char *)v736;
            }
            else
            {
              v392 = 0;
            }
            v393 = &v392[4 * v389];
            *(_DWORD *)v393 = v385;
            v387 = v393 + 4;
            while (v386 != v388)
            {
              v394 = *((_DWORD *)v386 - 1);
              v386 -= 4;
              *((_DWORD *)v393 - 1) = v394;
              v393 -= 4;
            }
            v736 = v393;
            v737 = (unint64_t)v387;
            v738 = &v392[4 * v377];
            if (v388)
              operator delete(v388);
          }
          else
          {
            *(_DWORD *)v737 = v385;
            v387 = v386 + 4;
          }
          v737 = (unint64_t)v387;
        }
        objc_msgSend_topology(v266, (const char *)v377, v378);
        v395 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_vertexCreases(v395, v396, v397);
        v398 = (void *)objc_claimAutoreleasedReturnValue();

        if (v398)
        {
          objc_msgSend_topology(v266, v399, v400);
          v401 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_vertexCreases(v401, v402, v403);
          v404 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_map(v404, v405, v406);
          v407 = (void *)objc_claimAutoreleasedReturnValue();

          v412 = objc_msgSend_bytes(v407, v408, v409);
          for (n = 0; ; ++n)
          {
            objc_msgSend_topology(v266, (const char *)v410, v411);
            v414 = (void *)objc_claimAutoreleasedReturnValue();
            v417 = objc_msgSend_vertexCreaseCount(v414, v415, v416);

            if (v417 <= n)
              break;
            v418 = (char *)v732;
            if (v732 >= (unint64_t)v733)
            {
              v420 = (char *)v731;
              v421 = (uint64_t)(v732 - (_QWORD)v731) >> 2;
              v422 = v421 + 1;
              if ((unint64_t)(v421 + 1) >> 62)
                sub_1DCAE4C44();
              v423 = (_BYTE *)v733 - (_BYTE *)v731;
              if (((_BYTE *)v733 - (_BYTE *)v731) >> 1 > v422)
                v422 = v423 >> 1;
              if ((unint64_t)v423 >= 0x7FFFFFFFFFFFFFFCLL)
                v410 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v410 = v422;
              if (v410)
              {
                v424 = (char *)sub_1DCAE4D04((uint64_t)&v733, v410);
                v418 = (char *)v732;
                v420 = (char *)v731;
              }
              else
              {
                v424 = 0;
              }
              v425 = &v424[4 * v421];
              *(_DWORD *)v425 = *(_DWORD *)(v412 + 4 * n);
              v419 = v425 + 4;
              while (v418 != v420)
              {
                v426 = *((_DWORD *)v418 - 1);
                v418 -= 4;
                *((_DWORD *)v425 - 1) = v426;
                v425 -= 4;
              }
              v731 = v425;
              v732 = (unint64_t)v419;
              v733 = &v424[4 * v410];
              if (v420)
                operator delete(v420);
            }
            else
            {
              *(_DWORD *)v732 = *(_DWORD *)(v412 + 4 * n);
              v419 = v418 + 4;
            }
            v732 = (unint64_t)v419;
          }

        }
        sub_1DCBB57F8(&__dst, (uint64_t *)&v736);
        sub_1DCBB8010(&v700, (uint64_t *)&v731);
        sub_1DCBB5CF0((char *)&v756, (uint64_t *)&__dst, (uint64_t *)&v700);
        if (v702)
        {
          v703 = v702;
          operator delete(v702);
        }
        if (v715)
        {
          v716[0] = v715;
          operator delete(v715);
        }
LABEL_459:

      }
LABEL_460:
      Alembic::AbcGeom::v12::OSubDSchema::set();
      if (v731)
      {
        v732 = (unint64_t)v731;
        operator delete(v731);
      }
      if (v736)
      {
        v737 = (unint64_t)v736;
        operator delete(v736);
      }
      if (v741)
      {
        v742 = (unint64_t)v741;
        operator delete(v741);
      }
      if (v746)
      {
        v747 = (unint64_t)v746;
        operator delete(v746);
      }
      if (v751)
      {
        v752 = (unint64_t)v751;
        operator delete(v751);
      }

      objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v663, v427, (uint64_t)CFSTR("textureCoordinate"), 786434);
      v428 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_format(v428, v429, v430))
      {
        v752 = 0;
        v751 = 0;
        v753 = 0;
        v433 = objc_msgSend_dataStart(v428, v431, v432);
        v436 = objc_msgSend_stride(v428, v434, v435);
        if (v664)
        {
          v439 = v436;
          for (ii = 0; ii != v664; ++ii)
          {
            if (ii * v439 + 4 <= (unint64_t)objc_msgSend_bufferSize(v428, v437, v438))
            {
              v441 = *(_QWORD *)(v433 + ii * v439);
              v442 = v752;
              if (v752 >= (unint64_t)v753)
              {
                v444 = (uint64_t)(v752 - (_QWORD)v751) >> 3;
                if ((unint64_t)(v444 + 1) >> 61)
                  sub_1DCAE4C44();
                v445 = ((_BYTE *)v753 - (_BYTE *)v751) >> 2;
                if (v445 <= v444 + 1)
                  v445 = v444 + 1;
                if ((unint64_t)((_BYTE *)v753 - (_BYTE *)v751) >= 0x7FFFFFFFFFFFFFF8)
                  v446 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v446 = v445;
                v447 = (char *)sub_1DCAE79A4((uint64_t)&v753, v446);
                v448 = &v447[8 * v444];
                *(_QWORD *)v448 = v441;
                v443 = v448 + 8;
                v449 = (char *)v752;
                v450 = (char *)v751;
                while (v449 != v450)
                {
                  v451 = *((_QWORD *)v449 - 1);
                  v449 -= 8;
                  *((_QWORD *)v448 - 1) = v451;
                  v448 -= 8;
                }
                v751 = v448;
                v752 = (unint64_t)v443;
                v753 = &v447[8 * (_QWORD)v437];
                if (v450)
                  operator delete(v450);
              }
              else
              {
                *(_QWORD *)v752 = v441;
                v443 = (_QWORD *)(v442 + 8);
              }
              v752 = (unint64_t)v443;
            }
          }
        }
        sub_1DCBB5D7C(&v700, (uint64_t *)&v751);
        sub_1DCBB5E1C(&v721, (uint64_t *)&v776);
        sub_1DCBB5EBC((uint64_t)&__dst, (uint64_t *)&v700, &v721, 4);
        sub_1DCBB2910((char *)&v756, (char *)&__dst);
        if (v717)
        {
          v718 = v717;
          operator delete(v717);
        }
        if (v715)
        {
          v716[0] = v715;
          operator delete(v715);
        }
        if (*((_QWORD *)&__src + 1))
        {
          v723 = *((_QWORD *)&__src + 1);
          operator delete(*((void **)&__src + 1));
        }
        if (v702)
        {
          v703 = v702;
          operator delete(v702);
        }
        if (v751)
        {
          v752 = (unint64_t)v751;
          operator delete(v751);
        }
      }
      sub_1DCBB29E8((uint64_t)&v765[2] + 8, (uint64_t)&v721);
      objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v663, v452, (uint64_t)CFSTR("anisotropy"), 786433);
      v453 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_format(v453, v454, v455))
      {
        v742 = 0;
        v741 = 0;
        v743 = 0;
        v458 = objc_msgSend_dataStart(v453, v456, v457);
        v461 = objc_msgSend_stride(v453, v459, v460);
        if (v664)
        {
          v464 = v461;
          for (jj = 0; jj != v664; ++jj)
          {
            if (jj * v464 + 4 <= (unint64_t)objc_msgSend_bufferSize(v453, (const char *)v462, v463))
            {
              v466 = *(_DWORD *)(v458 + jj * v464);
              v467 = (char *)v742;
              if (v742 >= (unint64_t)v743)
              {
                v469 = (char *)v741;
                v470 = (uint64_t)(v742 - (_QWORD)v741) >> 2;
                v471 = v470 + 1;
                if ((unint64_t)(v470 + 1) >> 62)
                  sub_1DCAE4C44();
                v472 = (_BYTE *)v743 - (_BYTE *)v741;
                if (((_BYTE *)v743 - (_BYTE *)v741) >> 1 > v471)
                  v471 = v472 >> 1;
                if ((unint64_t)v472 >= 0x7FFFFFFFFFFFFFFCLL)
                  v462 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v462 = v471;
                if (v462)
                {
                  v473 = (char *)sub_1DCAE4D04((uint64_t)&v743, v462);
                  v467 = (char *)v742;
                  v469 = (char *)v741;
                }
                else
                {
                  v473 = 0;
                }
                v474 = &v473[4 * v470];
                *(_DWORD *)v474 = v466;
                v468 = v474 + 4;
                while (v467 != v469)
                {
                  v475 = *((_DWORD *)v467 - 1);
                  v467 -= 4;
                  *((_DWORD *)v474 - 1) = v475;
                  v474 -= 4;
                }
                v741 = v474;
                v742 = (unint64_t)v468;
                v743 = &v473[4 * v462];
                if (v469)
                  operator delete(v469);
              }
              else
              {
                *(_DWORD *)v742 = v466;
                v468 = v467 + 4;
              }
              v742 = (unint64_t)v468;
            }
          }
        }
        v708 = v721;
        if (SHIBYTE(v723) < 0)
        {
          sub_1DCACA658(&v709, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v709 = __src;
          v710 = v723;
        }
        v711 = v724;
        v712 = v725;
        if (v725)
        {
          v476 = (unint64_t *)(v725 + 8);
          do
            v477 = __ldxr(v476);
          while (__stxr(v477 + 1, v476));
        }
        v478 = (char *)objc_msgSend_UTF8String(CFSTR("anisotropy"), (const char *)v462, v463);
        sub_1DCB0345C(&v736, v478);
        LODWORD(v731) = 0;
        LODWORD(v732) = 0;
        LODWORD(v726) = 0;
        LODWORD(v727) = 0;
        LODWORD(v706) = 0;
        v707 = 0;
        sub_1DCBB5F6C((char *)&__dst, (uint64_t)&v708, (uint64_t)&v736, 1, 4, 1, (uint64_t **)&v731, &v726, &v706);
        sub_1DCBB8010(&v751, (uint64_t *)&v741);
        sub_1DCBB5E1C(&v746, (uint64_t *)&v776);
        sub_1DCBB80B0((uint64_t)&v700, (uint64_t *)&v751, (uint64_t *)&v746, 4);
        sub_1DCBB2C34((uint64_t)&__dst, (uint64_t)&v700);
        if (v704)
        {
          v705 = v704;
          operator delete(v704);
        }
        if (v702)
        {
          v703 = v702;
          operator delete(v702);
        }
        if (v748)
        {
          v749 = v748;
          operator delete(v748);
        }
        if (v753)
        {
          v754 = v753;
          operator delete(v753);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v720);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v719);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v716);
        if (SHIBYTE(v715) < 0)
          operator delete(__dst);
        if (SHIBYTE(v738) < 0)
          operator delete(v736);
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v708);
        if (v741)
        {
          v742 = (unint64_t)v741;
          operator delete(v741);
        }
      }
      objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v663, v456, (uint64_t)CFSTR("binormal"), 786435);
      v479 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend_format(v479, v480, v481))
      {
        v742 = 0;
        v741 = 0;
        v743 = 0;
        v484 = objc_msgSend_dataStart(v479, v482, v483);
        v487 = objc_msgSend_stride(v479, v485, v486);
        if (v664)
        {
          v490 = v487;
          v491 = 0;
          v492 = v664;
          do
          {
            if (v491 + 12 <= (unint64_t)objc_msgSend_bufferSize(v479, v488, v489))
            {
              v493 = *(_DWORD *)(v484 + v491);
              v494 = *(_DWORD *)(v484 + v491 + 4);
              v495 = *(_DWORD *)(v484 + v491 + 8);
              __dst = (void *)__PAIR64__(v494, v493);
              v714 = v495;
              v496 = v742;
              if (v742 >= (unint64_t)v743)
              {
                v497 = sub_1DCBB37F8((uint64_t *)&v741, (uint64_t)&__dst);
              }
              else
              {
                *(_DWORD *)v742 = v493;
                *(_DWORD *)(v496 + 4) = v494;
                v497 = v496 + 12;
                *(_DWORD *)(v496 + 8) = v495;
              }
              v742 = v497;
            }
            v491 += v490;
            --v492;
          }
          while (v492);
        }
        v695 = v721;
        if (SHIBYTE(v723) < 0)
        {
          sub_1DCACA658(&v696, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v696 = __src;
          v697 = v723;
        }
        v698 = v724;
        v699 = v725;
        if (v725)
        {
          v498 = (unint64_t *)(v725 + 8);
          do
            v499 = __ldxr(v498);
          while (__stxr(v499 + 1, v498));
        }
        v500 = (char *)objc_msgSend_UTF8String(CFSTR("binormal"), v488, v489);
        sub_1DCB0345C(&v736, v500);
        LODWORD(v731) = 0;
        LODWORD(v732) = 0;
        LODWORD(v726) = 0;
        LODWORD(v727) = 0;
        LODWORD(v706) = 0;
        v707 = 0;
        sub_1DCBB8160((char *)&__dst, (uint64_t)&v695, (uint64_t)&v736, 1, 4, 1, (uint64_t **)&v731, &v726, &v706);
        sub_1DCBB990C(&v751, (uint64_t *)&v741);
        sub_1DCBB5E1C(&v746, (uint64_t *)&v776);
        sub_1DCBB99B8((uint64_t)&v700, (uint64_t *)&v751, (uint64_t *)&v746, 4);
        sub_1DCBB3040((uint64_t)&__dst, (uint64_t)&v700);
        if (v704)
        {
          v705 = v704;
          operator delete(v704);
        }
        if (v702)
        {
          v703 = v702;
          operator delete(v702);
        }
        if (v748)
        {
          v749 = v748;
          operator delete(v748);
        }
        if (v753)
        {
          v754 = v753;
          operator delete(v753);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v720);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v719);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v716);
        if (SHIBYTE(v715) < 0)
          operator delete(__dst);
        if (SHIBYTE(v738) < 0)
          operator delete(v736);
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v695);
        if (v741)
        {
          v742 = (unint64_t)v741;
          operator delete(v741);
        }
      }
      objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v663, v482, (uint64_t)CFSTR("bitangent"), 786435);
      v501 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend_format(v501, v502, v503))
      {
        v742 = 0;
        v741 = 0;
        v743 = 0;
        v506 = objc_msgSend_dataStart(v501, v504, v505);
        v509 = objc_msgSend_stride(v501, v507, v508);
        if (v664)
        {
          v512 = v509;
          v513 = 0;
          v514 = v664;
          do
          {
            if (v513 + 12 <= (unint64_t)objc_msgSend_bufferSize(v501, v510, v511))
            {
              v515 = *(_DWORD *)(v506 + v513);
              v516 = *(_DWORD *)(v506 + v513 + 4);
              v517 = *(_DWORD *)(v506 + v513 + 8);
              __dst = (void *)__PAIR64__(v516, v515);
              v714 = v517;
              v518 = v742;
              if (v742 >= (unint64_t)v743)
              {
                v519 = sub_1DCBB37F8((uint64_t *)&v741, (uint64_t)&__dst);
              }
              else
              {
                *(_DWORD *)v742 = v515;
                *(_DWORD *)(v518 + 4) = v516;
                v519 = v518 + 12;
                *(_DWORD *)(v518 + 8) = v517;
              }
              v742 = v519;
            }
            v513 += v512;
            --v514;
          }
          while (v514);
        }
        v690 = v721;
        if (SHIBYTE(v723) < 0)
        {
          sub_1DCACA658(&v691, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v691 = __src;
          v692 = v723;
        }
        v693 = v724;
        v694 = v725;
        if (v725)
        {
          v520 = (unint64_t *)(v725 + 8);
          do
            v521 = __ldxr(v520);
          while (__stxr(v521 + 1, v520));
        }
        v522 = (char *)objc_msgSend_UTF8String(CFSTR("bitangent"), v510, v511);
        sub_1DCB0345C(&v736, v522);
        LODWORD(v731) = 0;
        LODWORD(v732) = 0;
        LODWORD(v726) = 0;
        LODWORD(v727) = 0;
        LODWORD(v706) = 0;
        v707 = 0;
        sub_1DCBB8160((char *)&__dst, (uint64_t)&v690, (uint64_t)&v736, 1, 4, 1, (uint64_t **)&v731, &v726, &v706);
        sub_1DCBB990C(&v751, (uint64_t *)&v741);
        sub_1DCBB5E1C(&v746, (uint64_t *)&v776);
        sub_1DCBB99B8((uint64_t)&v700, (uint64_t *)&v751, (uint64_t *)&v746, 4);
        sub_1DCBB3040((uint64_t)&__dst, (uint64_t)&v700);
        if (v704)
        {
          v705 = v704;
          operator delete(v704);
        }
        if (v702)
        {
          v703 = v702;
          operator delete(v702);
        }
        if (v748)
        {
          v749 = v748;
          operator delete(v748);
        }
        if (v753)
        {
          v754 = v753;
          operator delete(v753);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v720);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v719);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v716);
        if (SHIBYTE(v715) < 0)
          operator delete(__dst);
        if (SHIBYTE(v738) < 0)
          operator delete(v736);
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v690);
        if (v741)
        {
          v742 = (unint64_t)v741;
          operator delete(v741);
        }
      }
      objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v663, v504, (uint64_t)CFSTR("tangent"), 786435);
      v523 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend_format(v523, v524, v525))
      {
        v742 = 0;
        v741 = 0;
        v743 = 0;
        v528 = objc_msgSend_dataStart(v523, v526, v527);
        v531 = objc_msgSend_stride(v523, v529, v530);
        if (v664)
        {
          v534 = v531;
          v535 = 0;
          v536 = v664;
          do
          {
            if (v535 + 12 <= (unint64_t)objc_msgSend_bufferSize(v523, v532, v533))
            {
              v537 = *(_DWORD *)(v528 + v535);
              v538 = *(_DWORD *)(v528 + v535 + 4);
              v539 = *(_DWORD *)(v528 + v535 + 8);
              __dst = (void *)__PAIR64__(v538, v537);
              v714 = v539;
              v540 = v742;
              if (v742 >= (unint64_t)v743)
              {
                v541 = sub_1DCBB37F8((uint64_t *)&v741, (uint64_t)&__dst);
              }
              else
              {
                *(_DWORD *)v742 = v537;
                *(_DWORD *)(v540 + 4) = v538;
                v541 = v540 + 12;
                *(_DWORD *)(v540 + 8) = v539;
              }
              v742 = v541;
            }
            v535 += v534;
            --v536;
          }
          while (v536);
        }
        v685 = v721;
        if (SHIBYTE(v723) < 0)
        {
          sub_1DCACA658(&v686, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v686 = __src;
          v687 = v723;
        }
        v688 = v724;
        v689 = v725;
        if (v725)
        {
          v542 = (unint64_t *)(v725 + 8);
          do
            v543 = __ldxr(v542);
          while (__stxr(v543 + 1, v542));
        }
        v544 = (char *)objc_msgSend_UTF8String(CFSTR("tangent"), v532, v533);
        sub_1DCB0345C(&v736, v544);
        LODWORD(v731) = 0;
        LODWORD(v732) = 0;
        LODWORD(v726) = 0;
        LODWORD(v727) = 0;
        LODWORD(v706) = 0;
        v707 = 0;
        sub_1DCBB8160((char *)&__dst, (uint64_t)&v685, (uint64_t)&v736, 1, 4, 1, (uint64_t **)&v731, &v726, &v706);
        sub_1DCBB990C(&v751, (uint64_t *)&v741);
        sub_1DCBB5E1C(&v746, (uint64_t *)&v776);
        sub_1DCBB99B8((uint64_t)&v700, (uint64_t *)&v751, (uint64_t *)&v746, 4);
        sub_1DCBB3040((uint64_t)&__dst, (uint64_t)&v700);
        if (v704)
        {
          v705 = v704;
          operator delete(v704);
        }
        if (v702)
        {
          v703 = v702;
          operator delete(v702);
        }
        if (v748)
        {
          v749 = v748;
          operator delete(v748);
        }
        if (v753)
        {
          v754 = v753;
          operator delete(v753);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v720);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v719);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v716);
        if (SHIBYTE(v715) < 0)
          operator delete(__dst);
        if (SHIBYTE(v738) < 0)
          operator delete(v736);
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v685);
        if (v741)
        {
          v742 = (unint64_t)v741;
          operator delete(v741);
        }
      }
      objc_msgSend_vertexAttributeDataForAttributeNamed_(v663, v526, (uint64_t)CFSTR("occlusionValue"));
      v545 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v545)
      {
        v572 = 0;
        goto LABEL_715;
      }
      if (!objc_msgSend_format(v545, v546, v547))
      {
        v572 = v545;
        goto LABEL_715;
      }
      if ((objc_msgSend_format(v545, v546, v548) & 0xF) == 1)
      {
        objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v663, v549, (uint64_t)CFSTR("occlusionValue"), 786433);
        v550 = (void *)objc_claimAutoreleasedReturnValue();

        if (!objc_msgSend_format(v550, v551, v552))
          goto LABEL_714;
        v742 = 0;
        v741 = 0;
        v743 = 0;
        v554 = objc_msgSend_dataStart(v550, v546, v553);
        v557 = objc_msgSend_stride(v550, v555, v556);
        if (v664)
        {
          v560 = v557;
          for (kk = 0; kk != v664; ++kk)
          {
            if (kk * v560 + 4 <= (unint64_t)objc_msgSend_bufferSize(v550, (const char *)v558, v559))
            {
              v562 = *(_DWORD *)(v554 + kk * v560);
              v563 = (char *)v742;
              if (v742 >= (unint64_t)v743)
              {
                v565 = (char *)v741;
                v566 = (uint64_t)(v742 - (_QWORD)v741) >> 2;
                v567 = v566 + 1;
                if ((unint64_t)(v566 + 1) >> 62)
                  sub_1DCAE4C44();
                v568 = (_BYTE *)v743 - (_BYTE *)v741;
                if (((_BYTE *)v743 - (_BYTE *)v741) >> 1 > v567)
                  v567 = v568 >> 1;
                if ((unint64_t)v568 >= 0x7FFFFFFFFFFFFFFCLL)
                  v558 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v558 = v567;
                if (v558)
                {
                  v569 = (char *)sub_1DCAE4D04((uint64_t)&v743, v558);
                  v563 = (char *)v742;
                  v565 = (char *)v741;
                }
                else
                {
                  v569 = 0;
                }
                v570 = &v569[4 * v566];
                *(_DWORD *)v570 = v562;
                v564 = v570 + 4;
                while (v563 != v565)
                {
                  v571 = *((_DWORD *)v563 - 1);
                  v563 -= 4;
                  *((_DWORD *)v570 - 1) = v571;
                  v570 -= 4;
                }
                v741 = v570;
                v742 = (unint64_t)v564;
                v743 = &v569[4 * v558];
                if (v565)
                  operator delete(v565);
              }
              else
              {
                *(_DWORD *)v742 = v562;
                v564 = v563 + 4;
              }
              v742 = (unint64_t)v564;
            }
          }
        }
        v680 = v721;
        if (SHIBYTE(v723) < 0)
        {
          sub_1DCACA658(&v681, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v681 = __src;
          v682 = v723;
        }
        v683 = v724;
        v684 = v725;
        if (v725)
        {
          v595 = (unint64_t *)(v725 + 8);
          do
            v596 = __ldxr(v595);
          while (__stxr(v596 + 1, v595));
        }
        v597 = (char *)objc_msgSend_UTF8String(CFSTR("occlusionValue"), (const char *)v558, v559);
        sub_1DCB0345C(&v736, v597);
        LODWORD(v731) = 0;
        LODWORD(v732) = 0;
        LODWORD(v726) = 0;
        LODWORD(v727) = 0;
        LODWORD(v706) = 0;
        v707 = 0;
        sub_1DCBB5F6C((char *)&__dst, (uint64_t)&v680, (uint64_t)&v736, 1, 4, 1, (uint64_t **)&v731, &v726, &v706);
        sub_1DCBB8010(&v751, (uint64_t *)&v741);
        sub_1DCBB5E1C(&v746, (uint64_t *)&v776);
        sub_1DCBB80B0((uint64_t)&v700, (uint64_t *)&v751, (uint64_t *)&v746, 4);
        sub_1DCBB2C34((uint64_t)&__dst, (uint64_t)&v700);
        if (v704)
        {
          v705 = v704;
          operator delete(v704);
        }
        if (v702)
        {
          v703 = v702;
          operator delete(v702);
        }
        if (v748)
        {
          v749 = v748;
          operator delete(v748);
        }
        if (v753)
        {
          v754 = v753;
          operator delete(v753);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v720);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v719);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v716);
        if (SHIBYTE(v715) < 0)
          operator delete(__dst);
        if (SHIBYTE(v738) < 0)
          operator delete(v736);
        v598 = (Alembic::Abc::v12::OCompoundProperty *)&v680;
      }
      else
      {
        objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v663, v549, (uint64_t)CFSTR("occlusionValue"), 786434);
        v550 = (void *)objc_claimAutoreleasedReturnValue();

        if (!objc_msgSend_format(v550, v573, v574))
          goto LABEL_714;
        v742 = 0;
        v741 = 0;
        v743 = 0;
        v576 = objc_msgSend_dataStart(v550, v546, v575);
        v579 = objc_msgSend_stride(v550, v577, v578);
        if (v664)
        {
          v582 = v579;
          for (mm = 0; mm != v664; ++mm)
          {
            if (mm * v582 + 8 <= (unint64_t)objc_msgSend_bufferSize(v550, v580, v581))
            {
              v584 = *(_QWORD *)(v576 + mm * v582);
              v585 = v742;
              if (v742 >= (unint64_t)v743)
              {
                v587 = (uint64_t)(v742 - (_QWORD)v741) >> 3;
                if ((unint64_t)(v587 + 1) >> 61)
                  sub_1DCAE4C44();
                v588 = ((_BYTE *)v743 - (_BYTE *)v741) >> 2;
                if (v588 <= v587 + 1)
                  v588 = v587 + 1;
                if ((unint64_t)((_BYTE *)v743 - (_BYTE *)v741) >= 0x7FFFFFFFFFFFFFF8)
                  v589 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v589 = v588;
                v590 = (char *)sub_1DCAE79A4((uint64_t)&v743, v589);
                v591 = &v590[8 * v587];
                *(_QWORD *)v591 = v584;
                v586 = v591 + 8;
                v592 = (char *)v742;
                v593 = (char *)v741;
                while (v592 != v593)
                {
                  v594 = *((_QWORD *)v592 - 1);
                  v592 -= 8;
                  *((_QWORD *)v591 - 1) = v594;
                  v591 -= 8;
                }
                v741 = v591;
                v742 = (unint64_t)v586;
                v743 = &v590[8 * (_QWORD)v580];
                if (v593)
                  operator delete(v593);
              }
              else
              {
                *(_QWORD *)v742 = v584;
                v586 = (_QWORD *)(v585 + 8);
              }
              v742 = (unint64_t)v586;
            }
          }
        }
        v675 = v721;
        if (SHIBYTE(v723) < 0)
        {
          sub_1DCACA658(&v676, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v676 = __src;
          v677 = v723;
        }
        v678 = v724;
        v679 = v725;
        if (v725)
        {
          v599 = (unint64_t *)(v725 + 8);
          do
            v600 = __ldxr(v599);
          while (__stxr(v600 + 1, v599));
        }
        v601 = (char *)objc_msgSend_UTF8String(CFSTR("occlusionValue"), v580, v581);
        sub_1DCB0345C(&v736, v601);
        LODWORD(v731) = 0;
        LODWORD(v732) = 0;
        LODWORD(v726) = 0;
        LODWORD(v727) = 0;
        LODWORD(v706) = 0;
        v707 = 0;
        sub_1DCBB9A68((char *)&__dst, (uint64_t)&v675, (uint64_t)&v736, 1, 4, 1, (uint64_t **)&v731, &v726, &v706);
        sub_1DCBB5D7C(&v751, (uint64_t *)&v741);
        sub_1DCBB5E1C(&v746, (uint64_t *)&v776);
        sub_1DCBB5EBC((uint64_t)&v700, (uint64_t *)&v751, (uint64_t *)&v746, 4);
        sub_1DCBB3404((uint64_t)&__dst, (uint64_t)&v700);
        if (v704)
        {
          v705 = v704;
          operator delete(v704);
        }
        if (v702)
        {
          v703 = v702;
          operator delete(v702);
        }
        if (v748)
        {
          v749 = v748;
          operator delete(v748);
        }
        if (v753)
        {
          v754 = v753;
          operator delete(v753);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v720);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v719);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v716);
        if (SHIBYTE(v715) < 0)
          operator delete(__dst);
        if (SHIBYTE(v738) < 0)
          operator delete(v736);
        v598 = (Alembic::Abc::v12::OCompoundProperty *)&v675;
      }
      Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v598);
      if (v741)
      {
        v742 = (unint64_t)v741;
        operator delete(v741);
      }
LABEL_714:
      v572 = v550;
LABEL_715:
      objc_msgSend_vertexAttributeDataForAttributeNamed_(v663, v546, (uint64_t)CFSTR("color"));
      v602 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v602)
      {
        v608 = 0;
        goto LABEL_791;
      }
      if (!objc_msgSend_format(v602, v603, v604))
      {
        v608 = v602;
        goto LABEL_791;
      }
      if ((objc_msgSend_format(v602, v605, v606) & 0xF) == 1)
      {
        objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v663, v607, (uint64_t)CFSTR("color"), 786433);
        v608 = (void *)objc_claimAutoreleasedReturnValue();

        if (!objc_msgSend_format(v608, v609, v610))
          goto LABEL_791;
        v742 = 0;
        v741 = 0;
        v743 = 0;
        v613 = objc_msgSend_dataStart(v608, v611, v612);
        v616 = objc_msgSend_stride(v608, v614, v615);
        if (v664)
        {
          v619 = v616;
          for (nn = 0; nn != v664; ++nn)
          {
            if (nn * v619 + 4 <= (unint64_t)objc_msgSend_bufferSize(v608, (const char *)v617, v618))
            {
              v621 = *(_DWORD *)(v613 + nn * v619);
              v622 = (char *)v742;
              if (v742 >= (unint64_t)v743)
              {
                v624 = (char *)v741;
                v625 = (uint64_t)(v742 - (_QWORD)v741) >> 2;
                v626 = v625 + 1;
                if ((unint64_t)(v625 + 1) >> 62)
                  sub_1DCAE4C44();
                v627 = (_BYTE *)v743 - (_BYTE *)v741;
                if (((_BYTE *)v743 - (_BYTE *)v741) >> 1 > v626)
                  v626 = v627 >> 1;
                if ((unint64_t)v627 >= 0x7FFFFFFFFFFFFFFCLL)
                  v617 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v617 = v626;
                if (v617)
                {
                  v628 = (char *)sub_1DCAE4D04((uint64_t)&v743, v617);
                  v622 = (char *)v742;
                  v624 = (char *)v741;
                }
                else
                {
                  v628 = 0;
                }
                v629 = &v628[4 * v625];
                *(_DWORD *)v629 = v621;
                v623 = v629 + 4;
                while (v622 != v624)
                {
                  v630 = *((_DWORD *)v622 - 1);
                  v622 -= 4;
                  *((_DWORD *)v629 - 1) = v630;
                  v629 -= 4;
                }
                v741 = v629;
                v742 = (unint64_t)v623;
                v743 = &v628[4 * v617];
                if (v624)
                  operator delete(v624);
              }
              else
              {
                *(_DWORD *)v742 = v621;
                v623 = v622 + 4;
              }
              v742 = (unint64_t)v623;
            }
          }
        }
        v670 = v721;
        if (SHIBYTE(v723) < 0)
        {
          sub_1DCACA658(&v671, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v671 = __src;
          v672 = v723;
        }
        v673 = v724;
        v674 = v725;
        if (v725)
        {
          v652 = (unint64_t *)(v725 + 8);
          do
            v653 = __ldxr(v652);
          while (__stxr(v653 + 1, v652));
        }
        v654 = (char *)objc_msgSend_UTF8String(CFSTR("color"), (const char *)v617, v618);
        sub_1DCB0345C(&v736, v654);
        LODWORD(v731) = 0;
        LODWORD(v732) = 0;
        LODWORD(v726) = 0;
        LODWORD(v727) = 0;
        LODWORD(v706) = 0;
        v707 = 0;
        sub_1DCBB5F6C((char *)&__dst, (uint64_t)&v670, (uint64_t)&v736, 1, 4, 1, (uint64_t **)&v731, &v726, &v706);
        sub_1DCBB8010(&v751, (uint64_t *)&v741);
        sub_1DCBB5E1C(&v746, (uint64_t *)&v776);
        sub_1DCBB80B0((uint64_t)&v700, (uint64_t *)&v751, (uint64_t *)&v746, 4);
        sub_1DCBB2C34((uint64_t)&__dst, (uint64_t)&v700);
        if (v704)
        {
          v705 = v704;
          operator delete(v704);
        }
        if (v702)
        {
          v703 = v702;
          operator delete(v702);
        }
        if (v748)
        {
          v749 = v748;
          operator delete(v748);
        }
        if (v753)
        {
          v754 = v753;
          operator delete(v753);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v720);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v719);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v716);
        if (SHIBYTE(v715) < 0)
          operator delete(__dst);
        if (SHIBYTE(v738) < 0)
          operator delete(v736);
        v651 = (Alembic::Abc::v12::OCompoundProperty *)&v670;
      }
      else
      {
        objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v663, v607, (uint64_t)CFSTR("color"), 786435);
        v608 = (void *)objc_claimAutoreleasedReturnValue();

        if (!objc_msgSend_format(v608, v631, v632))
          goto LABEL_791;
        v742 = 0;
        v741 = 0;
        v743 = 0;
        v635 = objc_msgSend_dataStart(v608, v633, v634);
        v638 = objc_msgSend_stride(v608, v636, v637);
        if (v664)
        {
          v641 = v638;
          v642 = 0;
          do
          {
            if (v642 + 12 <= (unint64_t)objc_msgSend_bufferSize(v608, v639, v640))
            {
              v643 = *(_DWORD *)(v635 + v642);
              v644 = *(_DWORD *)(v635 + v642 + 4);
              v645 = *(_DWORD *)(v635 + v642 + 8);
              __dst = (void *)__PAIR64__(v644, v643);
              v714 = v645;
              v646 = v742;
              if (v742 >= (unint64_t)v743)
              {
                v647 = sub_1DCBB37F8((uint64_t *)&v741, (uint64_t)&__dst);
              }
              else
              {
                *(_DWORD *)v742 = v643;
                *(_DWORD *)(v646 + 4) = v644;
                v647 = v646 + 12;
                *(_DWORD *)(v646 + 8) = v645;
              }
              v742 = v647;
            }
            v642 += v641;
            --v664;
          }
          while (v664);
        }
        v665 = v721;
        if (SHIBYTE(v723) < 0)
        {
          sub_1DCACA658(&v666, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v666 = __src;
          v667 = v723;
        }
        v668 = v724;
        v669 = v725;
        if (v725)
        {
          v648 = (unint64_t *)(v725 + 8);
          do
            v649 = __ldxr(v648);
          while (__stxr(v649 + 1, v648));
        }
        v650 = (char *)objc_msgSend_UTF8String(CFSTR("color"), v639, v640);
        sub_1DCB0345C(&v736, v650);
        LODWORD(v731) = 0;
        LODWORD(v732) = 0;
        LODWORD(v726) = 0;
        LODWORD(v727) = 0;
        LODWORD(v706) = 0;
        v707 = 0;
        sub_1DCBB8160((char *)&__dst, (uint64_t)&v665, (uint64_t)&v736, 1, 4, 1, (uint64_t **)&v731, &v726, &v706);
        sub_1DCBB990C(&v751, (uint64_t *)&v741);
        sub_1DCBB5E1C(&v746, (uint64_t *)&v776);
        sub_1DCBB99B8((uint64_t)&v700, (uint64_t *)&v751, (uint64_t *)&v746, 4);
        sub_1DCBB3040((uint64_t)&__dst, (uint64_t)&v700);
        if (v704)
        {
          v705 = v704;
          operator delete(v704);
        }
        if (v702)
        {
          v703 = v702;
          operator delete(v702);
        }
        if (v748)
        {
          v749 = v748;
          operator delete(v748);
        }
        if (v753)
        {
          v754 = v753;
          operator delete(v753);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v720);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v719);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v716);
        if (SHIBYTE(v715) < 0)
          operator delete(__dst);
        if (SHIBYTE(v738) < 0)
          operator delete(v736);
        v651 = (Alembic::Abc::v12::OCompoundProperty *)&v665;
      }
      Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v651);
      if (v741)
      {
        v742 = (unint64_t)v741;
        operator delete(v741);
      }
LABEL_791:

      Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v721);
      sub_1DCBBB214((uint64_t)&v756);
      *(_QWORD *)&v764 = &off_1EA574228;
      sub_1DCBB5538((uint64_t)&v765[2] + 8);
      Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v764);
      if (SHIBYTE(v772) < 0)
        operator delete((void *)v771);
      v5 = v659;
LABEL_794:
      if (v773)
      {
        v774 = v773;
        operator delete(v773);
      }
      if (v776)
      {
        v777 = v776;
        operator delete(v776);
      }
      if (v779)
      {
        v780 = v779;
        operator delete(v779);
      }

      if (v782)
      {
        v783 = v782;
        operator delete(v782);
      }

      return;
    default:
      goto LABEL_301;
  }
}

void sub_1DCBACCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  uint64_t v18;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v20 = *(void **)(v18 - 200);
  if (v20)
  {
    *(_QWORD *)(v18 - 192) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(v18 - 176);
  if (v21)
  {
    *(_QWORD *)(v18 - 168) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(v18 - 152);
  if (v22)
  {
    *(_QWORD *)(v18 - 144) = v22;
    operator delete(v22);
  }

  v23 = *(void **)(v18 - 128);
  if (v23)
  {
    *(_QWORD *)(v18 - 120) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

void sub_1DCBAD684(void *a1, void *a2, char *a3, uint64_t a4)
{
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int v47;
  uint64_t v48;
  char *v49;
  int v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  int v71;
  unint64_t v72;
  char *v73;
  int v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  int v84;
  uint64_t v85;
  int v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  int v95;
  int v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  int v105;
  int v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  int v126;
  uint64_t v127;
  char *v128;
  int v129;
  char *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  int v150;
  unint64_t v151;
  char *v152;
  int v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  int v163;
  int v164;
  char *v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  int v173;
  int v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  char *v180;
  char *v181;
  int v182;
  const char *v183;
  uint64_t v184;
  void *v185;
  void *v186;
  const char *v187;
  uint64_t v188;
  const char *v189;
  uint64_t v190;
  void *v191;
  void *v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  uint64_t v197;
  void *v198;
  const char *v199;
  uint64_t v200;
  unint64_t v201;
  const char *v202;
  uint64_t v203;
  void *v204;
  const char *v205;
  uint64_t v206;
  void *v207;
  const char *v208;
  uint64_t v209;
  void *v210;
  const char *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t i;
  void *v217;
  const char *v218;
  uint64_t v219;
  unint64_t v220;
  int v221;
  char *v222;
  char *v223;
  char *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  int v230;
  char *v231;
  char *v232;
  unint64_t v233;
  int v234;
  uint64_t v235;
  char *v236;
  int v237;
  char *v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  char *v244;
  char *v245;
  int v246;
  char *v248;
  unint64_t v249;
  _DWORD *v250;
  int v251;
  std::string *v252;
  __int128 v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  __int128 *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  id v265;
  id v266;
  const char *v267;
  void *v268;
  const char *v269;
  uint64_t v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  const char *v274;
  uint64_t v275;
  const char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t j;
  const char *v281;
  uint64_t v282;
  unsigned int v283;
  unsigned int v284;
  int v285;
  char *v286;
  uint64_t v287;
  const char *v288;
  const char *v289;
  uint64_t v290;
  const char *v291;
  uint64_t v292;
  uint64_t v293;
  const char *v294;
  uint64_t v295;
  uint64_t v296;
  const char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t k;
  uint64_t v301;
  char *v302;
  char *v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  uint64_t v311;
  const char *v312;
  void *v313;
  const char *v314;
  uint64_t v315;
  const char *v316;
  uint64_t v317;
  uint64_t v318;
  const char *v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t m;
  int v326;
  char *v327;
  char *v328;
  char *v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  char *v333;
  char *v334;
  int v335;
  unint64_t *v336;
  unint64_t v337;
  char *v338;
  void *v339;
  const char *v340;
  uint64_t v341;
  const char *v342;
  uint64_t v343;
  uint64_t v344;
  const char *v345;
  uint64_t v346;
  uint64_t v347;
  const char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int v353;
  unsigned int v354;
  int v355;
  char *v356;
  uint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  char *v360;
  void *v361;
  const char *v362;
  uint64_t v363;
  const char *v364;
  uint64_t v365;
  uint64_t v366;
  const char *v367;
  uint64_t v368;
  uint64_t v369;
  const char *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unsigned int v375;
  unsigned int v376;
  int v377;
  char *v378;
  uint64_t v379;
  unint64_t *v380;
  unint64_t v381;
  char *v382;
  void *v383;
  const char *v384;
  uint64_t v385;
  const char *v386;
  uint64_t v387;
  uint64_t v388;
  const char *v389;
  uint64_t v390;
  uint64_t v391;
  const char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unsigned int v397;
  unsigned int v398;
  int v399;
  char *v400;
  uint64_t v401;
  unint64_t *v402;
  unint64_t v403;
  char *v404;
  void *v405;
  const char *v406;
  uint64_t v407;
  uint64_t v408;
  const char *v409;
  void *v410;
  const char *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  const char *v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t n;
  int v422;
  char *v423;
  char *v424;
  char *v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  char *v429;
  char *v430;
  int v431;
  void *v432;
  const char *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  const char *v437;
  uint64_t v438;
  uint64_t v439;
  const char *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t ii;
  uint64_t v444;
  char *v445;
  char *v446;
  uint64_t v447;
  unint64_t v448;
  unint64_t v449;
  char *v450;
  char *v451;
  char *v452;
  char *v453;
  uint64_t v454;
  unint64_t *v455;
  unint64_t v456;
  char *v457;
  Alembic::Abc::v12::OCompoundProperty *v458;
  unint64_t *v459;
  unint64_t v460;
  char *v461;
  void *v462;
  const char *v463;
  uint64_t v464;
  const char *v465;
  uint64_t v466;
  const char *v467;
  void *v468;
  const char *v469;
  uint64_t v470;
  const char *v471;
  uint64_t v472;
  uint64_t v473;
  const char *v474;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t jj;
  int v481;
  char *v482;
  char *v483;
  char *v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  char *v488;
  char *v489;
  int v490;
  const char *v491;
  uint64_t v492;
  const char *v493;
  uint64_t v494;
  uint64_t v495;
  const char *v496;
  uint64_t v497;
  uint64_t v498;
  const char *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unsigned int v503;
  unsigned int v504;
  int v505;
  char *v506;
  uint64_t v507;
  unint64_t *v508;
  unint64_t v509;
  char *v510;
  Alembic::Abc::v12::OCompoundProperty *v511;
  unint64_t *v512;
  unint64_t v513;
  char *v514;
  void *v515;
  void *v516;
  void *v517;
  id v519;
  id v520;
  void *v521;
  void *v523;
  uint64_t v524;
  int v525;
  __int128 v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  __int128 v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  __int128 v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  __int128 v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  int v545;
  __int128 v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  int v550;
  __int128 v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  int v555;
  __int128 v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t *v560;
  int v561;
  uint64_t *v562;
  int v563;
  uint64_t *v564;
  int v565;
  void *v566[2];
  char v567;
  int v568;
  __int128 v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  void *__dst;
  uint64_t v574;
  __int128 v575;
  __int128 v576;
  uint64_t v577;
  void *v578;
  void *v579;
  uint64_t v580;
  int v581;
  _BYTE v582[48];
  void *v583;
  char *v584;
  char *v585;
  uint64_t v586;
  __int128 __src;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t *v591;
  uint64_t v592;
  __int128 v593;
  __int128 v594;
  uint64_t v595;
  void *v596;
  void *v597;
  uint64_t v598;
  int v599;
  uint64_t v600[2];
  void *v601;
  void *v602;
  void *v603;
  char *v604;
  void *v605;
  void *v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  uint64_t v631;
  int v632;
  __int128 v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  __int128 v637;
  _QWORD v638[8];
  __int128 v639;
  __int128 v640;
  __int128 v641;
  _BYTE v642[144];
  uint64_t v643;
  __int128 v644;
  int64_t v645;
  char *v646;
  char *v647;
  char *v648;
  _DWORD *v649;
  void *v650;
  uint64_t v651;
  char *v652;
  char *v653;
  char *v654;
  _DWORD *v655;
  _DWORD *v656;
  unint64_t v657;

  v5 = a1;
  v519 = a2;
  v655 = 0;
  v656 = 0;
  v657 = 0;
  v524 = objc_msgSend_vertexCount(v5, v6, v7);
  objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v5, v8, (uint64_t)CFSTR("position"), 786435);
  v521 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_dataStart(v521, v9, v10);
  v14 = objc_msgSend_stride(v521, v12, v13);
  if (v524)
  {
    v17 = v14;
    v18 = 0;
    v19 = v524;
    do
    {
      if (v18 + 12 <= (unint64_t)objc_msgSend_bufferSize(v521, v15, v16))
      {
        v20 = *(_DWORD *)(v11 + v18);
        v21 = *(_DWORD *)(v11 + v18 + 4);
        v22 = *(_DWORD *)(v11 + v18 + 8);
        *(_QWORD *)&v637 = __PAIR64__(v21, v20);
        DWORD2(v637) = v22;
        v23 = v656;
        if ((unint64_t)v656 >= v657)
        {
          v24 = sub_1DCBB37F8((uint64_t *)&v655, (uint64_t)&v637);
        }
        else
        {
          *v656 = v20;
          v23[1] = v21;
          v24 = (uint64_t)(v23 + 3);
          v23[2] = v22;
        }
        v656 = (_DWORD *)v24;
      }
      v18 += v17;
      --v19;
    }
    while (v19);
  }
  objc_msgSend_indexBufferAsIndexType_(v519, v15, 32);
  v517 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_map(v517, v25, v26);
  v516 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend_bytes(v516, v27, v28);
  v520 = v5;
  v32 = objc_msgSend_indexCount(v519, v30, v31);
  v652 = 0;
  v653 = 0;
  v654 = 0;
  v649 = 0;
  v650 = 0;
  v651 = 0;
  v646 = 0;
  v647 = 0;
  v648 = 0;
  switch(objc_msgSend_geometryType(v519, v33, v34))
  {
    case 0:
      sub_1DCB01460((void **)&v652, v32);
      sub_1DCB01460((void **)&v646, v32);
      if (v32)
      {
        v37 = 0;
        v38 = v647;
        do
        {
          if (v38 >= v648)
          {
            v40 = v646;
            v41 = (v38 - v646) >> 2;
            v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 62)
              sub_1DCAE4C44();
            v43 = v648 - v646;
            if ((v648 - v646) >> 1 > v42)
              v42 = v43 >> 1;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
              v44 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
            {
              v45 = (char *)sub_1DCAE4D04((uint64_t)&v648, v44);
              v40 = v646;
              v38 = v647;
            }
            else
            {
              v45 = 0;
            }
            v46 = &v45[4 * v41];
            *(_DWORD *)v46 = 1;
            v39 = v46 + 4;
            while (v38 != v40)
            {
              v47 = *((_DWORD *)v38 - 1);
              v38 -= 4;
              *((_DWORD *)v46 - 1) = v47;
              v46 -= 4;
            }
            v646 = v46;
            v647 = v39;
            v648 = &v45[4 * v44];
            if (v40)
              operator delete(v40);
          }
          else
          {
            *(_DWORD *)v38 = 1;
            v39 = v38 + 4;
          }
          v647 = v39;
          ++v37;
          v38 = v39;
        }
        while (v37 != v32);
        v48 = 0;
        v49 = v653;
        do
        {
          v50 = *(_DWORD *)(v29 + 4 * v48);
          if (v49 >= v654)
          {
            v52 = v652;
            v53 = (v49 - v652) >> 2;
            v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 62)
              sub_1DCAE4C44();
            v55 = v654 - v652;
            if ((v654 - v652) >> 1 > v54)
              v54 = v55 >> 1;
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
              v56 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v56 = v54;
            if (v56)
            {
              v57 = (char *)sub_1DCAE4D04((uint64_t)&v654, v56);
              v52 = v652;
              v49 = v653;
            }
            else
            {
              v57 = 0;
            }
            v58 = &v57[4 * v53];
            *(_DWORD *)v58 = v50;
            v51 = v58 + 4;
            while (v49 != v52)
            {
              v59 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *((_DWORD *)v58 - 1) = v59;
              v58 -= 4;
            }
            v652 = v58;
            v653 = v51;
            v654 = &v57[4 * v56];
            if (v52)
              operator delete(v52);
          }
          else
          {
            *(_DWORD *)v49 = v50;
            v51 = v49 + 4;
          }
          v653 = v51;
          ++v48;
          v49 = v51;
        }
        while (v48 != v32);
      }
      goto LABEL_303;
    case 1:
      sub_1DCB01460((void **)&v652, v32);
      sub_1DCB01460((void **)&v646, v32 >> 1);
      if (v32 >= 2)
      {
        v115 = 0;
        if (v32 >> 1 <= 1)
          v116 = 1;
        else
          v116 = v32 >> 1;
        v117 = v647;
        do
        {
          if (v117 >= v648)
          {
            v119 = v646;
            v120 = (v117 - v646) >> 2;
            v121 = v120 + 1;
            if ((unint64_t)(v120 + 1) >> 62)
              sub_1DCAE4C44();
            v122 = v648 - v646;
            if ((v648 - v646) >> 1 > v121)
              v121 = v122 >> 1;
            if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL)
              v123 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v123 = v121;
            if (v123)
            {
              v124 = (char *)sub_1DCAE4D04((uint64_t)&v648, v123);
              v119 = v646;
              v117 = v647;
            }
            else
            {
              v124 = 0;
            }
            v125 = &v124[4 * v120];
            *(_DWORD *)v125 = 2;
            v118 = v125 + 4;
            while (v117 != v119)
            {
              v126 = *((_DWORD *)v117 - 1);
              v117 -= 4;
              *((_DWORD *)v125 - 1) = v126;
              v125 -= 4;
            }
            v646 = v125;
            v647 = v118;
            v648 = &v124[4 * v123];
            if (v119)
              operator delete(v119);
          }
          else
          {
            *(_DWORD *)v117 = 2;
            v118 = v117 + 4;
          }
          v647 = v118;
          ++v115;
          v117 = v118;
        }
        while (v115 != v116);
      }
      if (v32)
      {
        v127 = 0;
        v128 = v653;
        do
        {
          v129 = *(_DWORD *)(v29 + 4 * v127);
          if (v128 >= v654)
          {
            v131 = v652;
            v132 = (v128 - v652) >> 2;
            v133 = v132 + 1;
            if ((unint64_t)(v132 + 1) >> 62)
              sub_1DCAE4C44();
            v134 = v654 - v652;
            if ((v654 - v652) >> 1 > v133)
              v133 = v134 >> 1;
            if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
              v135 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v135 = v133;
            if (v135)
            {
              v136 = (char *)sub_1DCAE4D04((uint64_t)&v654, v135);
              v131 = v652;
              v128 = v653;
            }
            else
            {
              v136 = 0;
            }
            v137 = &v136[4 * v132];
            *(_DWORD *)v137 = v129;
            v130 = v137 + 4;
            while (v128 != v131)
            {
              v138 = *((_DWORD *)v128 - 1);
              v128 -= 4;
              *((_DWORD *)v137 - 1) = v138;
              v137 -= 4;
            }
            v652 = v137;
            v653 = v130;
            v654 = &v136[4 * v135];
            if (v131)
              operator delete(v131);
          }
          else
          {
            *(_DWORD *)v128 = v129;
            v130 = v128 + 4;
          }
          v653 = v130;
          ++v127;
          v128 = v130;
        }
        while (v127 != v32);
      }
      goto LABEL_303;
    case 2:
      sub_1DCB01460((void **)&v652, v32);
      sub_1DCB01460((void **)&v646, v32 / 3);
      if (v32 >= 3)
      {
        v139 = 0;
        if (v32 / 3 <= 1)
          v140 = 1;
        else
          v140 = v32 / 3;
        v141 = v647;
        do
        {
          if (v141 >= v648)
          {
            v143 = v646;
            v144 = (v141 - v646) >> 2;
            v145 = v144 + 1;
            if ((unint64_t)(v144 + 1) >> 62)
              sub_1DCAE4C44();
            v146 = v648 - v646;
            if ((v648 - v646) >> 1 > v145)
              v145 = v146 >> 1;
            if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL)
              v147 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v147 = v145;
            if (v147)
            {
              v148 = (char *)sub_1DCAE4D04((uint64_t)&v648, v147);
              v143 = v646;
              v141 = v647;
            }
            else
            {
              v148 = 0;
            }
            v149 = &v148[4 * v144];
            *(_DWORD *)v149 = 3;
            v142 = v149 + 4;
            while (v141 != v143)
            {
              v150 = *((_DWORD *)v141 - 1);
              v141 -= 4;
              *((_DWORD *)v149 - 1) = v150;
              v149 -= 4;
            }
            v646 = v149;
            v647 = v142;
            v648 = &v148[4 * v147];
            if (v143)
              operator delete(v143);
          }
          else
          {
            *(_DWORD *)v141 = 3;
            v142 = v141 + 4;
          }
          v647 = v142;
          ++v139;
          v141 = v142;
        }
        while (v139 != v140);
      }
      if (v32)
      {
        v151 = 0;
        v152 = v653;
        do
        {
          v153 = *(_DWORD *)(v29 + 4 * v151);
          v154 = v654;
          if (v152 >= v654)
          {
            v156 = v652;
            v157 = (v152 - v652) >> 2;
            v158 = v157 + 1;
            if ((unint64_t)(v157 + 1) >> 62)
              sub_1DCAE4C44();
            v159 = v654 - v652;
            if ((v654 - v652) >> 1 > v158)
              v158 = v159 >> 1;
            if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL)
              v160 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v160 = v158;
            if (v160)
            {
              v161 = (char *)sub_1DCAE4D04((uint64_t)&v654, v160);
              v156 = v652;
              v152 = v653;
            }
            else
            {
              v161 = 0;
            }
            v162 = &v161[4 * v157];
            *(_DWORD *)v162 = v153;
            v155 = v162 + 4;
            while (v152 != v156)
            {
              v163 = *((_DWORD *)v152 - 1);
              v152 -= 4;
              *((_DWORD *)v162 - 1) = v163;
              v162 -= 4;
            }
            v154 = &v161[4 * v160];
            v652 = v162;
            v653 = v155;
            v654 = v154;
            if (v156)
            {
              operator delete(v156);
              v154 = v654;
            }
          }
          else
          {
            *(_DWORD *)v152 = v153;
            v155 = v152 + 4;
          }
          v653 = v155;
          v164 = *(_DWORD *)(v29 + 4 * v151 + 8);
          if (v155 >= v154)
          {
            v166 = v652;
            v167 = (v155 - v652) >> 2;
            v168 = v167 + 1;
            if ((unint64_t)(v167 + 1) >> 62)
              sub_1DCAE4C44();
            v169 = v154 - v652;
            if (v169 >> 1 > v168)
              v168 = v169 >> 1;
            if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL)
              v170 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v170 = v168;
            if (v170)
            {
              v171 = (char *)sub_1DCAE4D04((uint64_t)&v654, v170);
              v166 = v652;
              v155 = v653;
            }
            else
            {
              v171 = 0;
            }
            v172 = &v171[4 * v167];
            *(_DWORD *)v172 = v164;
            v165 = v172 + 4;
            while (v155 != v166)
            {
              v173 = *((_DWORD *)v155 - 1);
              v155 -= 4;
              *((_DWORD *)v172 - 1) = v173;
              v172 -= 4;
            }
            v154 = &v171[4 * v170];
            v652 = v172;
            v653 = v165;
            v654 = v154;
            if (v166)
            {
              operator delete(v166);
              v154 = v654;
            }
          }
          else
          {
            *(_DWORD *)v155 = v164;
            v165 = v155 + 4;
          }
          v653 = v165;
          v174 = *(_DWORD *)(v29 + 4 * v151 + 4);
          if (v165 >= v154)
          {
            v175 = v652;
            v176 = (v165 - v652) >> 2;
            v177 = v176 + 1;
            if ((unint64_t)(v176 + 1) >> 62)
              sub_1DCAE4C44();
            v178 = v154 - v652;
            if (v178 >> 1 > v177)
              v177 = v178 >> 1;
            if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL)
              v179 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v179 = v177;
            if (v179)
            {
              v180 = (char *)sub_1DCAE4D04((uint64_t)&v654, v179);
              v175 = v652;
              v165 = v653;
            }
            else
            {
              v180 = 0;
            }
            v181 = &v180[4 * v176];
            *(_DWORD *)v181 = v174;
            v152 = v181 + 4;
            while (v165 != v175)
            {
              v182 = *((_DWORD *)v165 - 1);
              v165 -= 4;
              *((_DWORD *)v181 - 1) = v182;
              v181 -= 4;
            }
            v652 = v181;
            v653 = v152;
            v654 = &v180[4 * v179];
            if (v175)
              operator delete(v175);
          }
          else
          {
            *(_DWORD *)v165 = v174;
            v152 = v165 + 4;
          }
          v653 = v152;
          v151 += 3;
        }
        while (v32 > v151);
      }
      goto LABEL_303;
    case 3:
      goto LABEL_684;
    case 4:
      sub_1DCB01460((void **)&v652, v32);
      sub_1DCB01460((void **)&v646, v32 >> 2);
      if (v32 >= 4)
      {
        v60 = 0;
        if (v32 >> 2 <= 1)
          v61 = 1;
        else
          v61 = v32 >> 2;
        v62 = v647;
        do
        {
          if (v62 >= v648)
          {
            v64 = v646;
            v65 = (v62 - v646) >> 2;
            v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62)
              sub_1DCAE4C44();
            v67 = v648 - v646;
            if ((v648 - v646) >> 1 > v66)
              v66 = v67 >> 1;
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
              v68 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v68 = v66;
            if (v68)
            {
              v69 = (char *)sub_1DCAE4D04((uint64_t)&v648, v68);
              v64 = v646;
              v62 = v647;
            }
            else
            {
              v69 = 0;
            }
            v70 = &v69[4 * v65];
            *(_DWORD *)v70 = 4;
            v63 = v70 + 4;
            while (v62 != v64)
            {
              v71 = *((_DWORD *)v62 - 1);
              v62 -= 4;
              *((_DWORD *)v70 - 1) = v71;
              v70 -= 4;
            }
            v646 = v70;
            v647 = v63;
            v648 = &v69[4 * v68];
            if (v64)
              operator delete(v64);
          }
          else
          {
            *(_DWORD *)v62 = 4;
            v63 = v62 + 4;
          }
          v647 = v63;
          ++v60;
          v62 = v63;
        }
        while (v60 != v61);
      }
      if (v32)
      {
        v72 = 0;
        v73 = v653;
        do
        {
          v74 = *(_DWORD *)(v29 + 4 * v72);
          v75 = v654;
          if (v73 >= v654)
          {
            v77 = v652;
            v78 = (v73 - v652) >> 2;
            v79 = v78 + 1;
            if ((unint64_t)(v78 + 1) >> 62)
              sub_1DCAE4C44();
            v80 = v654 - v652;
            if ((v654 - v652) >> 1 > v79)
              v79 = v80 >> 1;
            if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
              v81 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v81 = v79;
            if (v81)
            {
              v82 = (char *)sub_1DCAE4D04((uint64_t)&v654, v81);
              v77 = v652;
              v73 = v653;
            }
            else
            {
              v82 = 0;
            }
            v83 = &v82[4 * v78];
            *(_DWORD *)v83 = v74;
            v76 = v83 + 4;
            while (v73 != v77)
            {
              v84 = *((_DWORD *)v73 - 1);
              v73 -= 4;
              *((_DWORD *)v83 - 1) = v84;
              v83 -= 4;
            }
            v75 = &v82[4 * v81];
            v652 = v83;
            v653 = v76;
            v654 = v75;
            if (v77)
            {
              operator delete(v77);
              v75 = v654;
            }
          }
          else
          {
            *(_DWORD *)v73 = v74;
            v76 = v73 + 4;
          }
          v653 = v76;
          v85 = 4 * v72;
          v86 = *(_DWORD *)(v29 + ((4 * v72) | 0xC));
          if (v76 >= v75)
          {
            v88 = v652;
            v89 = (v76 - v652) >> 2;
            v90 = v89 + 1;
            if ((unint64_t)(v89 + 1) >> 62)
              sub_1DCAE4C44();
            v91 = v75 - v652;
            if (v91 >> 1 > v90)
              v90 = v91 >> 1;
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
              v92 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v92 = v90;
            if (v92)
            {
              v93 = (char *)sub_1DCAE4D04((uint64_t)&v654, v92);
              v88 = v652;
              v76 = v653;
            }
            else
            {
              v93 = 0;
            }
            v94 = &v93[4 * v89];
            *(_DWORD *)v94 = v86;
            v87 = v94 + 4;
            while (v76 != v88)
            {
              v95 = *((_DWORD *)v76 - 1);
              v76 -= 4;
              *((_DWORD *)v94 - 1) = v95;
              v94 -= 4;
            }
            v75 = &v93[4 * v92];
            v652 = v94;
            v653 = v87;
            v654 = v75;
            if (v88)
            {
              operator delete(v88);
              v75 = v654;
            }
          }
          else
          {
            *(_DWORD *)v76 = v86;
            v87 = v76 + 4;
          }
          v653 = v87;
          v96 = *(_DWORD *)(v29 + (v85 | 8));
          if (v87 >= v75)
          {
            v98 = v652;
            v99 = (v87 - v652) >> 2;
            v100 = v99 + 1;
            if ((unint64_t)(v99 + 1) >> 62)
              sub_1DCAE4C44();
            v101 = v75 - v652;
            if (v101 >> 1 > v100)
              v100 = v101 >> 1;
            if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
              v102 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v102 = v100;
            if (v102)
            {
              v103 = (char *)sub_1DCAE4D04((uint64_t)&v654, v102);
              v98 = v652;
              v87 = v653;
            }
            else
            {
              v103 = 0;
            }
            v104 = &v103[4 * v99];
            *(_DWORD *)v104 = v96;
            v97 = v104 + 4;
            while (v87 != v98)
            {
              v105 = *((_DWORD *)v87 - 1);
              v87 -= 4;
              *((_DWORD *)v104 - 1) = v105;
              v104 -= 4;
            }
            v75 = &v103[4 * v102];
            v652 = v104;
            v653 = v97;
            v654 = v75;
            if (v98)
            {
              operator delete(v98);
              v75 = v654;
            }
          }
          else
          {
            *(_DWORD *)v87 = v96;
            v97 = v87 + 4;
          }
          v653 = v97;
          v106 = *(_DWORD *)(v29 + (v85 | 4));
          if (v97 >= v75)
          {
            v107 = v652;
            v108 = (v97 - v652) >> 2;
            v109 = v108 + 1;
            if ((unint64_t)(v108 + 1) >> 62)
              sub_1DCAE4C44();
            v110 = v75 - v652;
            if (v110 >> 1 > v109)
              v109 = v110 >> 1;
            if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL)
              v111 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v111 = v109;
            if (v111)
            {
              v112 = (char *)sub_1DCAE4D04((uint64_t)&v654, v111);
              v107 = v652;
              v97 = v653;
            }
            else
            {
              v112 = 0;
            }
            v113 = &v112[4 * v108];
            *(_DWORD *)v113 = v106;
            v73 = v113 + 4;
            while (v97 != v107)
            {
              v114 = *((_DWORD *)v97 - 1);
              v97 -= 4;
              *((_DWORD *)v113 - 1) = v114;
              v113 -= 4;
            }
            v652 = v113;
            v653 = v73;
            v654 = &v112[4 * v111];
            if (v107)
              operator delete(v107);
          }
          else
          {
            *(_DWORD *)v97 = v106;
            v73 = v97 + 4;
          }
          v653 = v73;
          v72 += 4;
        }
        while (v32 > v72);
      }
      goto LABEL_303;
    case 5:
      objc_msgSend_topology(v519, v35, v36);
      v185 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v185)
        goto LABEL_303;
      objc_msgSend_topology(v519, v183, v184);
      v186 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_faceTopology(v186, v187, v188);
      v191 = (void *)objc_claimAutoreleasedReturnValue();
      if (v191)
      {
        objc_msgSend_topology(v519, v189, v190);
        v192 = (void *)objc_claimAutoreleasedReturnValue();
        v195 = objc_msgSend_faceCount(v192, v193, v194);

        if (!v195)
          goto LABEL_303;
        objc_msgSend_topology(v519, v196, v197);
        v198 = (void *)objc_claimAutoreleasedReturnValue();
        v201 = objc_msgSend_faceCount(v198, v199, v200);
        sub_1DCB01460((void **)&v646, v201);

        objc_msgSend_topology(v519, v202, v203);
        v204 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_faceTopology(v204, v205, v206);
        v207 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_map(v207, v208, v209);
        v210 = (void *)objc_claimAutoreleasedReturnValue();

        v515 = v210;
        v215 = objc_msgSend_bytes(v210, v211, v212);
        for (i = 0; ; ++i)
        {
          objc_msgSend_topology(v519, (const char *)v213, v214);
          v217 = (void *)objc_claimAutoreleasedReturnValue();
          v220 = objc_msgSend_faceCount(v217, v218, v219);

          if (v220 <= i)
            break;
          v221 = *(unsigned __int8 *)(v215 + i);
          v222 = v647;
          if (v647 >= v648)
          {
            v224 = v646;
            v225 = (v647 - v646) >> 2;
            v226 = v225 + 1;
            if ((unint64_t)(v225 + 1) >> 62)
              sub_1DCAE4C44();
            v227 = v648 - v646;
            if ((v648 - v646) >> 1 > v226)
              v226 = v227 >> 1;
            if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFFCLL)
              v213 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v213 = v226;
            if (v213)
            {
              v228 = (char *)sub_1DCAE4D04((uint64_t)&v648, v213);
              v224 = v646;
              v222 = v647;
            }
            else
            {
              v228 = 0;
            }
            v229 = &v228[4 * v225];
            *(_DWORD *)v229 = v221;
            v223 = v229 + 4;
            while (v222 != v224)
            {
              v230 = *((_DWORD *)v222 - 1);
              v222 -= 4;
              *((_DWORD *)v229 - 1) = v230;
              v229 -= 4;
            }
            v646 = v229;
            v647 = v223;
            v648 = &v228[4 * v213];
            if (v224)
              operator delete(v224);
          }
          else
          {
            *(_DWORD *)v647 = v221;
            v223 = v222 + 4;
          }
          v647 = v223;
        }
        v231 = v646;
        v232 = v647;
        if (v647 != v646)
        {
          v233 = 0;
          v234 = 0;
          do
          {
            v235 = *(unsigned int *)&v231[4 * v233];
            if ((int)v235 >= 1)
            {
              v236 = v653;
              do
              {
                v237 = *(_DWORD *)(v29 + 4 * (v235 - 1 + v234));
                if (v236 >= v654)
                {
                  v239 = v652;
                  v240 = (v236 - v652) >> 2;
                  v241 = v240 + 1;
                  if ((unint64_t)(v240 + 1) >> 62)
                    sub_1DCAE4C44();
                  v242 = v654 - v652;
                  if ((v654 - v652) >> 1 > v241)
                    v241 = v242 >> 1;
                  if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFFCLL)
                    v243 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v243 = v241;
                  if (v243)
                  {
                    v244 = (char *)sub_1DCAE4D04((uint64_t)&v654, v243);
                    v239 = v652;
                    v236 = v653;
                  }
                  else
                  {
                    v244 = 0;
                  }
                  v245 = &v244[4 * v240];
                  *(_DWORD *)v245 = v237;
                  v238 = v245 + 4;
                  while (v236 != v239)
                  {
                    v246 = *((_DWORD *)v236 - 1);
                    v236 -= 4;
                    *((_DWORD *)v245 - 1) = v246;
                    v245 -= 4;
                  }
                  v652 = v245;
                  v653 = v238;
                  v654 = &v244[4 * v243];
                  if (v239)
                    operator delete(v239);
                }
                else
                {
                  *(_DWORD *)v236 = v237;
                  v238 = v236 + 4;
                }
                v653 = v238;
                v236 = v238;
              }
              while (v235-- > 1);
              v231 = v646;
              v232 = v647;
              LODWORD(v235) = *(_DWORD *)&v646[4 * v233];
            }
            v234 += v235;
            ++v233;
          }
          while (v233 < (v232 - v231) >> 2);
        }
        v185 = v515;
      }
      else
      {

      }
LABEL_303:
      sub_1DCB231F4((uint64_t)&v649, (v653 - v652) >> 2);
      v248 = v652;
      if (v653 != v652)
      {
        v249 = (v653 - v652) >> 2;
        v250 = v649;
        if (v249 <= 1)
          v249 = 1;
        do
        {
          v251 = *(_DWORD *)v248;
          v248 += 4;
          *v250++ = v251;
          --v249;
        }
        while (v249);
      }
      v644 = 0uLL;
      v645 = 0;
      sub_1DCB0345C(&v637, a3);
      v252 = std::string::append((std::string *)&v637, "_geo");
      v253 = *(_OWORD *)&v252->__r_.__value_.__l.__data_;
      v645 = v252->__r_.__value_.__r.__words[2];
      v644 = v253;
      v252->__r_.__value_.__l.__size_ = 0;
      v252->__r_.__value_.__r.__words[2] = 0;
      v252->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v638[0]) < 0)
        operator delete((void *)v637);
      v254 = 0;
      v255 = *MEMORY[0x1E0DE4F50];
      v256 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v257 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v258 = MEMORY[0x1E0DE4FB8] + 16;
      while (Alembic::Abc::v12::OObject::getChildHeader())
      {
        v643 = 0;
        v641 = 0u;
        memset(v642, 0, sizeof(v642));
        v639 = 0u;
        v640 = 0u;
        memset(v638, 0, sizeof(v638));
        v637 = 0u;
        sub_1DCB86A2C((uint64_t)&v637);
        if (v645 >= 0)
          v259 = &v644;
        else
          v259 = (__int128 *)v644;
        if (v645 >= 0)
          v260 = HIBYTE(v645);
        else
          v260 = *((_QWORD *)&v644 + 1);
        sub_1DCB03734(v638, (uint64_t)v259, v260);
        std::ostream::operator<<();
        std::stringbuf::str();
        if (SHIBYTE(v645) < 0)
          operator delete((void *)v644);
        v644 = v607;
        v645 = v608;
        *(_QWORD *)&v637 = v255;
        *(_QWORD *)((char *)&v638[-2] + *(_QWORD *)(v255 - 24)) = v256;
        v638[0] = v257;
        v638[1] = v258;
        if (SHIBYTE(v640) < 0)
          operator delete(*((void **)&v639 + 1));
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1DF0D2238](v642);
        ++v254;
      }
      bzero(&v637, 0x398uLL);
      v632 = *(_DWORD *)(a4 + 8);
      if (*(char *)(a4 + 39) < 0)
      {
        v5 = v520;
        sub_1DCACA658(&v633, *(void **)(a4 + 16), *(_QWORD *)(a4 + 24));
      }
      else
      {
        v633 = *(_OWORD *)(a4 + 16);
        v634 = *(_QWORD *)(a4 + 32);
        v5 = v520;
      }
      v262 = *(_QWORD *)(a4 + 40);
      v261 = *(_QWORD *)(a4 + 48);
      v631 = MEMORY[0x1E0DF3168] + 16;
      v635 = v262;
      v636 = v261;
      if (v261)
      {
        v263 = (unint64_t *)(v261 + 8);
        do
          v264 = __ldxr(v263);
        while (__stxr(v264 + 1, v263));
      }
      LODWORD(v607) = 0;
      DWORD2(v607) = 0;
      LODWORD(__dst) = 0;
      LODWORD(v574) = 0;
      LODWORD(v591) = 0;
      LODWORD(v592) = 0;
      sub_1DCBBB610((uint64_t)&v637, (uint64_t)&v631, &v644, (uint64_t **)&v607, (uint64_t **)&__dst, &v591);
      Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v631);
      v629 = 0u;
      v630 = 0u;
      v627 = 0u;
      v628 = 0u;
      v625 = 0u;
      v626 = 0u;
      v623 = 0u;
      v624 = 0u;
      v621 = 0u;
      v622 = 0u;
      v619 = 0u;
      v620 = 0u;
      v617 = 0u;
      v618 = 0u;
      v615 = 0u;
      v616 = 0u;
      v613 = 0u;
      v614 = 0u;
      v611 = 0u;
      v612 = 0u;
      v609 = 0u;
      v610 = 0u;
      v607 = 0u;
      v608 = 0u;
      sub_1DCBB5654(&v586, (uint64_t *)&v655);
      sub_1DCBB57F8(&v603, (uint64_t *)&v652);
      sub_1DCBB57F8(v600, (uint64_t *)&v646);
      __dst = 0;
      v574 = 0x20000000ALL;
      v575 = 0u;
      v576 = 0u;
      v577 = 0x100000005;
      v578 = 0;
      v580 = 0;
      v579 = 0;
      v581 = 127;
      v591 = 0;
      v592 = 0x30000000ALL;
      v593 = 0u;
      v594 = 0u;
      v595 = 0x100000005;
      v596 = 0;
      v598 = 0;
      v597 = 0;
      v599 = 127;
      sub_1DCBBC9FC((uint64_t)&v607, &v586, (uint64_t *)&v603, v600, (uint64_t)&__dst, (uint64_t *)&v591);
      if (v596)
      {
        v597 = v596;
        operator delete(v596);
      }
      if ((_QWORD)v593)
      {
        *((_QWORD *)&v593 + 1) = v593;
        operator delete((void *)v593);
      }
      if (v578)
      {
        v579 = v578;
        operator delete(v578);
      }
      if ((_QWORD)v575)
      {
        *((_QWORD *)&v575 + 1) = v575;
        operator delete((void *)v575);
      }
      if (v601)
      {
        v602 = v601;
        operator delete(v601);
      }
      if (v605)
      {
        v606 = v605;
        operator delete(v605);
      }
      if (*((_QWORD *)&__src + 1))
      {
        v588 = *((_QWORD *)&__src + 1);
        operator delete(*((void **)&__src + 1));
      }
      v265 = v5;
      v266 = v519;
      v604 = 0;
      v603 = 0;
      v605 = 0;
      objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v265, v267, (uint64_t)CFSTR("normal"), 786435);
      v268 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_format(v268, v269, v270))
      {
        v273 = objc_msgSend_dataStart(v268, v271, v272);
        v278 = objc_msgSend_stride(v268, v274, v275);
        v279 = 0;
        for (j = 0; j < objc_msgSend_vertexCount(v265, v276, v277); ++j)
        {
          if (v279 + 12 <= (unint64_t)objc_msgSend_bufferSize(v268, v281, v282))
          {
            v283 = *(_DWORD *)(v273 + v279);
            v284 = *(_DWORD *)(v273 + v279 + 4);
            v285 = *(_DWORD *)(v273 + v279 + 8);
            __dst = (void *)__PAIR64__(v284, v283);
            LODWORD(v574) = v285;
            v286 = v604;
            if (v604 >= v605)
            {
              v287 = sub_1DCBBCD24((uint64_t *)&v603, (uint64_t)&__dst);
            }
            else
            {
              *(_DWORD *)v604 = v283;
              *((_DWORD *)v286 + 1) = v284;
              v287 = (uint64_t)(v286 + 12);
              *((_DWORD *)v286 + 2) = v285;
            }
            v604 = (char *)v287;
          }
          v279 += v278;
        }
        sub_1DCBBCE8C(&v591, (uint64_t *)&v603);
        sub_1DCBB5E1C(&v586, (uint64_t *)&v649);
        sub_1DCBBCF38((uint64_t)&__dst, (uint64_t *)&v591, &v586, 4);
        sub_1DCBBCC8C((char *)&v607, (char *)&__dst);
        if (v578)
        {
          v579 = v578;
          operator delete(v578);
        }
        if ((_QWORD)v575)
        {
          *((_QWORD *)&v575 + 1) = v575;
          operator delete((void *)v575);
        }
        if (*((_QWORD *)&__src + 1))
        {
          v588 = *((_QWORD *)&__src + 1);
          operator delete(*((void **)&__src + 1));
        }
        if ((_QWORD)v593)
        {
          *((_QWORD *)&v593 + 1) = v593;
          operator delete((void *)v593);
        }
      }
      Alembic::AbcGeom::v12::OPolyMeshSchema::set();

      if (v603)
      {
        v604 = (char *)v603;
        operator delete(v603);
      }

      objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v265, v288, (uint64_t)CFSTR("textureCoordinate"), 786434);
      v523 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_format(v523, v289, v290))
      {
        v604 = 0;
        v603 = 0;
        v605 = 0;
        v293 = objc_msgSend_dataStart(v523, v291, v292);
        v296 = objc_msgSend_stride(v523, v294, v295);
        if (v524)
        {
          v299 = v296;
          for (k = 0; k != v524; ++k)
          {
            if (k * v299 + 4 <= (unint64_t)objc_msgSend_bufferSize(v523, v297, v298))
            {
              v301 = *(_QWORD *)(v293 + k * v299);
              v302 = v604;
              if (v604 >= v605)
              {
                v304 = (v604 - (_BYTE *)v603) >> 3;
                if ((unint64_t)(v304 + 1) >> 61)
                  sub_1DCAE4C44();
                v305 = ((_BYTE *)v605 - (_BYTE *)v603) >> 2;
                if (v305 <= v304 + 1)
                  v305 = v304 + 1;
                if ((unint64_t)((_BYTE *)v605 - (_BYTE *)v603) >= 0x7FFFFFFFFFFFFFF8)
                  v306 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v306 = v305;
                v307 = (char *)sub_1DCAE79A4((uint64_t)&v605, v306);
                v308 = &v307[8 * v304];
                *(_QWORD *)v308 = v301;
                v303 = v308 + 8;
                v309 = v604;
                v310 = (char *)v603;
                while (v309 != v310)
                {
                  v311 = *((_QWORD *)v309 - 1);
                  v309 -= 8;
                  *((_QWORD *)v308 - 1) = v311;
                  v308 -= 8;
                }
                v603 = v308;
                v604 = v303;
                v605 = &v307[8 * (_QWORD)v297];
                if (v310)
                  operator delete(v310);
              }
              else
              {
                *(_QWORD *)v604 = v301;
                v303 = v302 + 8;
              }
              v604 = v303;
            }
          }
        }
        sub_1DCBB5D7C(&v591, (uint64_t *)&v603);
        sub_1DCBB5E1C(&v586, (uint64_t *)&v649);
        sub_1DCBB5EBC((uint64_t)&__dst, (uint64_t *)&v591, &v586, 4);
        sub_1DCBBB304((char *)&v607, (uint64_t)&__dst);
        if (v578)
        {
          v579 = v578;
          operator delete(v578);
        }
        if ((_QWORD)v575)
        {
          *((_QWORD *)&v575 + 1) = v575;
          operator delete((void *)v575);
        }
        if (*((_QWORD *)&__src + 1))
        {
          v588 = *((_QWORD *)&__src + 1);
          operator delete(*((void **)&__src + 1));
        }
        if ((_QWORD)v593)
        {
          *((_QWORD *)&v593 + 1) = v593;
          operator delete((void *)v593);
        }
        if (v603)
        {
          v604 = (char *)v603;
          operator delete(v603);
        }
      }
      sub_1DCBBB394((uint64_t)&v638[5], (uint64_t)&v586);
      objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v265, v312, (uint64_t)CFSTR("anisotropy"), 786433);
      v313 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_format(v313, v314, v315))
      {
        v584 = 0;
        v583 = 0;
        v585 = 0;
        v318 = objc_msgSend_dataStart(v313, v316, v317);
        v321 = objc_msgSend_stride(v313, v319, v320);
        if (v524)
        {
          v324 = v321;
          for (m = 0; m != v524; ++m)
          {
            if (m * v324 + 4 <= (unint64_t)objc_msgSend_bufferSize(v313, (const char *)v322, v323))
            {
              v326 = *(_DWORD *)(v318 + m * v324);
              v327 = v584;
              if (v584 >= v585)
              {
                v329 = (char *)v583;
                v330 = (v584 - (_BYTE *)v583) >> 2;
                v331 = v330 + 1;
                if ((unint64_t)(v330 + 1) >> 62)
                  sub_1DCAE4C44();
                v332 = v585 - (_BYTE *)v583;
                if ((v585 - (_BYTE *)v583) >> 1 > v331)
                  v331 = v332 >> 1;
                if ((unint64_t)v332 >= 0x7FFFFFFFFFFFFFFCLL)
                  v322 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v322 = v331;
                if (v322)
                {
                  v333 = (char *)sub_1DCAE4D04((uint64_t)&v585, v322);
                  v327 = v584;
                  v329 = (char *)v583;
                }
                else
                {
                  v333 = 0;
                }
                v334 = &v333[4 * v330];
                *(_DWORD *)v334 = v326;
                v328 = v334 + 4;
                while (v327 != v329)
                {
                  v335 = *((_DWORD *)v327 - 1);
                  v327 -= 4;
                  *((_DWORD *)v334 - 1) = v335;
                  v334 -= 4;
                }
                v583 = v334;
                v584 = v328;
                v585 = &v333[4 * v322];
                if (v329)
                  operator delete(v329);
              }
              else
              {
                *(_DWORD *)v584 = v326;
                v328 = v327 + 4;
              }
              v584 = v328;
              v5 = v520;
            }
          }
        }
        v568 = v586;
        if (SHIBYTE(v588) < 0)
        {
          sub_1DCACA658(&v569, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v569 = __src;
          v570 = v588;
        }
        v571 = v589;
        v572 = v590;
        if (v590)
        {
          v336 = (unint64_t *)(v590 + 8);
          do
            v337 = __ldxr(v336);
          while (__stxr(v337 + 1, v336));
        }
        v338 = (char *)objc_msgSend_UTF8String(CFSTR("anisotropy"), (const char *)v322, v323);
        sub_1DCB0345C(v566, v338);
        LODWORD(v564) = 0;
        v565 = 0;
        LODWORD(v562) = 0;
        v563 = 0;
        LODWORD(v560) = 0;
        v561 = 0;
        sub_1DCBB5F6C((char *)&__dst, (uint64_t)&v568, (uint64_t)v566, 1, 4, 1, &v564, &v562, &v560);
        sub_1DCBB8010(&v603, (uint64_t *)&v583);
        sub_1DCBB5E1C(v600, (uint64_t *)&v649);
        sub_1DCBB80B0((uint64_t)&v591, (uint64_t *)&v603, v600, 4);
        sub_1DCBB2C34((uint64_t)&__dst, (uint64_t)&v591);
        if (v596)
        {
          v597 = v596;
          operator delete(v596);
        }
        if ((_QWORD)v593)
        {
          *((_QWORD *)&v593 + 1) = v593;
          operator delete((void *)v593);
        }
        if (v601)
        {
          v602 = v601;
          operator delete(v601);
        }
        if (v605)
        {
          v606 = v605;
          operator delete(v605);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v582);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v580);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)((char *)&v575 + 8));
        if (SBYTE7(v575) < 0)
          operator delete(__dst);
        if (v567 < 0)
          operator delete(v566[0]);
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v568);
        if (v583)
        {
          v584 = (char *)v583;
          operator delete(v583);
        }
      }
      objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v265, v316, (uint64_t)CFSTR("binormal"), 786435);
      v339 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend_format(v339, v340, v341))
      {
        v584 = 0;
        v583 = 0;
        v585 = 0;
        v344 = objc_msgSend_dataStart(v339, v342, v343);
        v347 = objc_msgSend_stride(v339, v345, v346);
        if (v524)
        {
          v350 = v347;
          v351 = 0;
          v352 = v524;
          do
          {
            if (v351 + 12 <= (unint64_t)objc_msgSend_bufferSize(v339, v348, v349))
            {
              v353 = *(_DWORD *)(v344 + v351);
              v354 = *(_DWORD *)(v344 + v351 + 4);
              v355 = *(_DWORD *)(v344 + v351 + 8);
              __dst = (void *)__PAIR64__(v354, v353);
              LODWORD(v574) = v355;
              v356 = v584;
              if (v584 >= v585)
              {
                v357 = sub_1DCBB37F8((uint64_t *)&v583, (uint64_t)&__dst);
              }
              else
              {
                *(_DWORD *)v584 = v353;
                *((_DWORD *)v356 + 1) = v354;
                v357 = (uint64_t)(v356 + 12);
                *((_DWORD *)v356 + 2) = v355;
              }
              v584 = (char *)v357;
            }
            v351 += v350;
            --v352;
          }
          while (v352);
        }
        v555 = v586;
        if (SHIBYTE(v588) < 0)
        {
          sub_1DCACA658(&v556, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v556 = __src;
          v557 = v588;
        }
        v558 = v589;
        v559 = v590;
        if (v590)
        {
          v358 = (unint64_t *)(v590 + 8);
          do
            v359 = __ldxr(v358);
          while (__stxr(v359 + 1, v358));
        }
        v360 = (char *)objc_msgSend_UTF8String(CFSTR("binormal"), v348, v349);
        sub_1DCB0345C(v566, v360);
        LODWORD(v564) = 0;
        v565 = 0;
        LODWORD(v562) = 0;
        v563 = 0;
        LODWORD(v560) = 0;
        v561 = 0;
        sub_1DCBB8160((char *)&__dst, (uint64_t)&v555, (uint64_t)v566, 1, 4, 1, &v564, &v562, &v560);
        sub_1DCBB990C(&v603, (uint64_t *)&v583);
        sub_1DCBB5E1C(v600, (uint64_t *)&v649);
        sub_1DCBB99B8((uint64_t)&v591, (uint64_t *)&v603, v600, 4);
        sub_1DCBB3040((uint64_t)&__dst, (uint64_t)&v591);
        if (v596)
        {
          v597 = v596;
          operator delete(v596);
        }
        if ((_QWORD)v593)
        {
          *((_QWORD *)&v593 + 1) = v593;
          operator delete((void *)v593);
        }
        if (v601)
        {
          v602 = v601;
          operator delete(v601);
        }
        if (v605)
        {
          v606 = v605;
          operator delete(v605);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v582);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v580);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)((char *)&v575 + 8));
        if (SBYTE7(v575) < 0)
          operator delete(__dst);
        if (v567 < 0)
          operator delete(v566[0]);
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v555);
        if (v583)
        {
          v584 = (char *)v583;
          operator delete(v583);
        }
      }
      objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v265, v342, (uint64_t)CFSTR("bitangent"), 786435);
      v361 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend_format(v361, v362, v363))
      {
        v584 = 0;
        v583 = 0;
        v585 = 0;
        v366 = objc_msgSend_dataStart(v361, v364, v365);
        v369 = objc_msgSend_stride(v361, v367, v368);
        if (v524)
        {
          v372 = v369;
          v373 = 0;
          v374 = v524;
          do
          {
            if (v373 + 12 <= (unint64_t)objc_msgSend_bufferSize(v361, v370, v371))
            {
              v375 = *(_DWORD *)(v366 + v373);
              v376 = *(_DWORD *)(v366 + v373 + 4);
              v377 = *(_DWORD *)(v366 + v373 + 8);
              __dst = (void *)__PAIR64__(v376, v375);
              LODWORD(v574) = v377;
              v378 = v584;
              if (v584 >= v585)
              {
                v379 = sub_1DCBB37F8((uint64_t *)&v583, (uint64_t)&__dst);
              }
              else
              {
                *(_DWORD *)v584 = v375;
                *((_DWORD *)v378 + 1) = v376;
                v379 = (uint64_t)(v378 + 12);
                *((_DWORD *)v378 + 2) = v377;
              }
              v584 = (char *)v379;
            }
            v373 += v372;
            --v374;
          }
          while (v374);
        }
        v550 = v586;
        if (SHIBYTE(v588) < 0)
        {
          sub_1DCACA658(&v551, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v551 = __src;
          v552 = v588;
        }
        v553 = v589;
        v554 = v590;
        if (v590)
        {
          v380 = (unint64_t *)(v590 + 8);
          do
            v381 = __ldxr(v380);
          while (__stxr(v381 + 1, v380));
        }
        v382 = (char *)objc_msgSend_UTF8String(CFSTR("bitangent"), v370, v371);
        sub_1DCB0345C(v566, v382);
        LODWORD(v564) = 0;
        v565 = 0;
        LODWORD(v562) = 0;
        v563 = 0;
        LODWORD(v560) = 0;
        v561 = 0;
        sub_1DCBB8160((char *)&__dst, (uint64_t)&v550, (uint64_t)v566, 1, 4, 1, &v564, &v562, &v560);
        sub_1DCBB990C(&v603, (uint64_t *)&v583);
        sub_1DCBB5E1C(v600, (uint64_t *)&v649);
        sub_1DCBB99B8((uint64_t)&v591, (uint64_t *)&v603, v600, 4);
        sub_1DCBB3040((uint64_t)&__dst, (uint64_t)&v591);
        if (v596)
        {
          v597 = v596;
          operator delete(v596);
        }
        if ((_QWORD)v593)
        {
          *((_QWORD *)&v593 + 1) = v593;
          operator delete((void *)v593);
        }
        if (v601)
        {
          v602 = v601;
          operator delete(v601);
        }
        if (v605)
        {
          v606 = v605;
          operator delete(v605);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v582);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v580);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)((char *)&v575 + 8));
        if (SBYTE7(v575) < 0)
          operator delete(__dst);
        if (v567 < 0)
          operator delete(v566[0]);
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v550);
        if (v583)
        {
          v584 = (char *)v583;
          operator delete(v583);
        }
      }
      objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v265, v364, (uint64_t)CFSTR("tangent"), 786435);
      v383 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend_format(v383, v384, v385))
      {
        v584 = 0;
        v583 = 0;
        v585 = 0;
        v388 = objc_msgSend_dataStart(v383, v386, v387);
        v391 = objc_msgSend_stride(v383, v389, v390);
        if (v524)
        {
          v394 = v391;
          v395 = 0;
          v396 = v524;
          do
          {
            if (v395 + 12 <= (unint64_t)objc_msgSend_bufferSize(v383, v392, v393))
            {
              v397 = *(_DWORD *)(v388 + v395);
              v398 = *(_DWORD *)(v388 + v395 + 4);
              v399 = *(_DWORD *)(v388 + v395 + 8);
              __dst = (void *)__PAIR64__(v398, v397);
              LODWORD(v574) = v399;
              v400 = v584;
              if (v584 >= v585)
              {
                v401 = sub_1DCBB37F8((uint64_t *)&v583, (uint64_t)&__dst);
              }
              else
              {
                *(_DWORD *)v584 = v397;
                *((_DWORD *)v400 + 1) = v398;
                v401 = (uint64_t)(v400 + 12);
                *((_DWORD *)v400 + 2) = v399;
              }
              v584 = (char *)v401;
            }
            v395 += v394;
            --v396;
          }
          while (v396);
        }
        v545 = v586;
        if (SHIBYTE(v588) < 0)
        {
          sub_1DCACA658(&v546, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v546 = __src;
          v547 = v588;
        }
        v548 = v589;
        v549 = v590;
        if (v590)
        {
          v402 = (unint64_t *)(v590 + 8);
          do
            v403 = __ldxr(v402);
          while (__stxr(v403 + 1, v402));
        }
        v404 = (char *)objc_msgSend_UTF8String(CFSTR("tangent"), v392, v393);
        sub_1DCB0345C(v566, v404);
        LODWORD(v564) = 0;
        v565 = 0;
        LODWORD(v562) = 0;
        v563 = 0;
        LODWORD(v560) = 0;
        v561 = 0;
        sub_1DCBB8160((char *)&__dst, (uint64_t)&v545, (uint64_t)v566, 1, 4, 1, &v564, &v562, &v560);
        sub_1DCBB990C(&v603, (uint64_t *)&v583);
        sub_1DCBB5E1C(v600, (uint64_t *)&v649);
        sub_1DCBB99B8((uint64_t)&v591, (uint64_t *)&v603, v600, 4);
        sub_1DCBB3040((uint64_t)&__dst, (uint64_t)&v591);
        if (v596)
        {
          v597 = v596;
          operator delete(v596);
        }
        if ((_QWORD)v593)
        {
          *((_QWORD *)&v593 + 1) = v593;
          operator delete((void *)v593);
        }
        if (v601)
        {
          v602 = v601;
          operator delete(v601);
        }
        if (v605)
        {
          v606 = v605;
          operator delete(v605);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v582);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v580);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)((char *)&v575 + 8));
        if (SBYTE7(v575) < 0)
          operator delete(__dst);
        if (v567 < 0)
          operator delete(v566[0]);
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v545);
        if (v583)
        {
          v584 = (char *)v583;
          operator delete(v583);
        }
      }
      objc_msgSend_vertexAttributeDataForAttributeNamed_(v265, v386, (uint64_t)CFSTR("occlusionValue"));
      v405 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v405)
      {
        v432 = 0;
        goto LABEL_606;
      }
      if (!objc_msgSend_format(v405, v406, v407))
      {
        v432 = v405;
        goto LABEL_606;
      }
      if ((objc_msgSend_format(v405, v406, v408) & 0xF) == 1)
      {
        objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v265, v409, (uint64_t)CFSTR("occlusionValue"), 786433);
        v410 = (void *)objc_claimAutoreleasedReturnValue();

        if (!objc_msgSend_format(v410, v411, v412))
          goto LABEL_605;
        v584 = 0;
        v583 = 0;
        v585 = 0;
        v414 = objc_msgSend_dataStart(v410, v406, v413);
        v417 = objc_msgSend_stride(v410, v415, v416);
        if (v524)
        {
          v420 = v417;
          for (n = 0; n != v524; ++n)
          {
            if (n * v420 + 4 <= (unint64_t)objc_msgSend_bufferSize(v410, (const char *)v418, v419))
            {
              v422 = *(_DWORD *)(v414 + n * v420);
              v423 = v584;
              if (v584 >= v585)
              {
                v425 = (char *)v583;
                v426 = (v584 - (_BYTE *)v583) >> 2;
                v427 = v426 + 1;
                if ((unint64_t)(v426 + 1) >> 62)
                  sub_1DCAE4C44();
                v428 = v585 - (_BYTE *)v583;
                if ((v585 - (_BYTE *)v583) >> 1 > v427)
                  v427 = v428 >> 1;
                if ((unint64_t)v428 >= 0x7FFFFFFFFFFFFFFCLL)
                  v418 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v418 = v427;
                if (v418)
                {
                  v429 = (char *)sub_1DCAE4D04((uint64_t)&v585, v418);
                  v423 = v584;
                  v425 = (char *)v583;
                }
                else
                {
                  v429 = 0;
                }
                v430 = &v429[4 * v426];
                *(_DWORD *)v430 = v422;
                v424 = v430 + 4;
                while (v423 != v425)
                {
                  v431 = *((_DWORD *)v423 - 1);
                  v423 -= 4;
                  *((_DWORD *)v430 - 1) = v431;
                  v430 -= 4;
                }
                v583 = v430;
                v584 = v424;
                v585 = &v429[4 * v418];
                if (v425)
                  operator delete(v425);
              }
              else
              {
                *(_DWORD *)v584 = v422;
                v424 = v423 + 4;
              }
              v584 = v424;
              v5 = v520;
            }
          }
        }
        v540 = v586;
        if (SHIBYTE(v588) < 0)
        {
          sub_1DCACA658(&v541, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v541 = __src;
          v542 = v588;
        }
        v543 = v589;
        v544 = v590;
        if (v590)
        {
          v455 = (unint64_t *)(v590 + 8);
          do
            v456 = __ldxr(v455);
          while (__stxr(v456 + 1, v455));
        }
        v457 = (char *)objc_msgSend_UTF8String(CFSTR("occlusionValue"), (const char *)v418, v419);
        sub_1DCB0345C(v566, v457);
        LODWORD(v564) = 0;
        v565 = 0;
        LODWORD(v562) = 0;
        v563 = 0;
        LODWORD(v560) = 0;
        v561 = 0;
        sub_1DCBB5F6C((char *)&__dst, (uint64_t)&v540, (uint64_t)v566, 1, 4, 1, &v564, &v562, &v560);
        sub_1DCBB8010(&v603, (uint64_t *)&v583);
        sub_1DCBB5E1C(v600, (uint64_t *)&v649);
        sub_1DCBB80B0((uint64_t)&v591, (uint64_t *)&v603, v600, 4);
        sub_1DCBB2C34((uint64_t)&__dst, (uint64_t)&v591);
        if (v596)
        {
          v597 = v596;
          operator delete(v596);
        }
        if ((_QWORD)v593)
        {
          *((_QWORD *)&v593 + 1) = v593;
          operator delete((void *)v593);
        }
        if (v601)
        {
          v602 = v601;
          operator delete(v601);
        }
        if (v605)
        {
          v606 = v605;
          operator delete(v605);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v582);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v580);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)((char *)&v575 + 8));
        if (SBYTE7(v575) < 0)
          operator delete(__dst);
        if (v567 < 0)
          operator delete(v566[0]);
        v458 = (Alembic::Abc::v12::OCompoundProperty *)&v540;
      }
      else
      {
        objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v265, v409, (uint64_t)CFSTR("occlusionValue"), 786434);
        v410 = (void *)objc_claimAutoreleasedReturnValue();

        if (!objc_msgSend_format(v410, v433, v434))
          goto LABEL_605;
        v584 = 0;
        v583 = 0;
        v585 = 0;
        v436 = objc_msgSend_dataStart(v410, v406, v435);
        v439 = objc_msgSend_stride(v410, v437, v438);
        if (v524)
        {
          v442 = v439;
          for (ii = 0; ii != v524; ++ii)
          {
            if (ii * v442 + 8 <= (unint64_t)objc_msgSend_bufferSize(v410, v440, v441))
            {
              v444 = *(_QWORD *)(v436 + ii * v442);
              v445 = v584;
              if (v584 >= v585)
              {
                v447 = (v584 - (_BYTE *)v583) >> 3;
                if ((unint64_t)(v447 + 1) >> 61)
                  sub_1DCAE4C44();
                v448 = (v585 - (_BYTE *)v583) >> 2;
                if (v448 <= v447 + 1)
                  v448 = v447 + 1;
                if ((unint64_t)(v585 - (_BYTE *)v583) >= 0x7FFFFFFFFFFFFFF8)
                  v449 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v449 = v448;
                v450 = (char *)sub_1DCAE79A4((uint64_t)&v585, v449);
                v451 = &v450[8 * v447];
                *(_QWORD *)v451 = v444;
                v446 = v451 + 8;
                v452 = v584;
                v453 = (char *)v583;
                while (v452 != v453)
                {
                  v454 = *((_QWORD *)v452 - 1);
                  v452 -= 8;
                  *((_QWORD *)v451 - 1) = v454;
                  v451 -= 8;
                }
                v583 = v451;
                v584 = v446;
                v585 = &v450[8 * (_QWORD)v440];
                if (v453)
                  operator delete(v453);
              }
              else
              {
                *(_QWORD *)v584 = v444;
                v446 = v445 + 8;
              }
              v584 = v446;
            }
          }
        }
        v535 = v586;
        if (SHIBYTE(v588) < 0)
        {
          sub_1DCACA658(&v536, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v536 = __src;
          v537 = v588;
        }
        v538 = v589;
        v539 = v590;
        if (v590)
        {
          v459 = (unint64_t *)(v590 + 8);
          do
            v460 = __ldxr(v459);
          while (__stxr(v460 + 1, v459));
        }
        v461 = (char *)objc_msgSend_UTF8String(CFSTR("occlusionValue"), v440, v441);
        sub_1DCB0345C(v566, v461);
        LODWORD(v564) = 0;
        v565 = 0;
        LODWORD(v562) = 0;
        v563 = 0;
        LODWORD(v560) = 0;
        v561 = 0;
        sub_1DCBB9A68((char *)&__dst, (uint64_t)&v535, (uint64_t)v566, 1, 4, 1, &v564, &v562, &v560);
        sub_1DCBB5D7C(&v603, (uint64_t *)&v583);
        sub_1DCBB5E1C(v600, (uint64_t *)&v649);
        sub_1DCBB5EBC((uint64_t)&v591, (uint64_t *)&v603, v600, 4);
        sub_1DCBB3404((uint64_t)&__dst, (uint64_t)&v591);
        if (v596)
        {
          v597 = v596;
          operator delete(v596);
        }
        if ((_QWORD)v593)
        {
          *((_QWORD *)&v593 + 1) = v593;
          operator delete((void *)v593);
        }
        if (v601)
        {
          v602 = v601;
          operator delete(v601);
        }
        if (v605)
        {
          v606 = v605;
          operator delete(v605);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v582);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v580);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)((char *)&v575 + 8));
        if (SBYTE7(v575) < 0)
          operator delete(__dst);
        if (v567 < 0)
          operator delete(v566[0]);
        v458 = (Alembic::Abc::v12::OCompoundProperty *)&v535;
      }
      Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v458);
      if (v583)
      {
        v584 = (char *)v583;
        operator delete(v583);
      }
LABEL_605:
      v432 = v410;
LABEL_606:
      objc_msgSend_vertexAttributeDataForAttributeNamed_(v265, v406, (uint64_t)CFSTR("color"));
      v462 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v462)
      {
        v468 = 0;
        goto LABEL_682;
      }
      if (!objc_msgSend_format(v462, v463, v464))
      {
        v468 = v462;
        goto LABEL_682;
      }
      if ((objc_msgSend_format(v462, v465, v466) & 0xF) == 1)
      {
        objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v265, v467, (uint64_t)CFSTR("color"), 786433);
        v468 = (void *)objc_claimAutoreleasedReturnValue();

        if (!objc_msgSend_format(v468, v469, v470))
          goto LABEL_682;
        v584 = 0;
        v583 = 0;
        v585 = 0;
        v473 = objc_msgSend_dataStart(v468, v471, v472);
        v476 = objc_msgSend_stride(v468, v474, v475);
        if (v524)
        {
          v479 = v476;
          for (jj = 0; jj != v524; ++jj)
          {
            if (jj * v479 + 4 <= (unint64_t)objc_msgSend_bufferSize(v468, (const char *)v477, v478))
            {
              v481 = *(_DWORD *)(v473 + jj * v479);
              v482 = v584;
              if (v584 >= v585)
              {
                v484 = (char *)v583;
                v485 = (v584 - (_BYTE *)v583) >> 2;
                v486 = v485 + 1;
                if ((unint64_t)(v485 + 1) >> 62)
                  sub_1DCAE4C44();
                v487 = v585 - (_BYTE *)v583;
                if ((v585 - (_BYTE *)v583) >> 1 > v486)
                  v486 = v487 >> 1;
                if ((unint64_t)v487 >= 0x7FFFFFFFFFFFFFFCLL)
                  v477 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v477 = v486;
                if (v477)
                {
                  v488 = (char *)sub_1DCAE4D04((uint64_t)&v585, v477);
                  v482 = v584;
                  v484 = (char *)v583;
                }
                else
                {
                  v488 = 0;
                }
                v489 = &v488[4 * v485];
                *(_DWORD *)v489 = v481;
                v483 = v489 + 4;
                while (v482 != v484)
                {
                  v490 = *((_DWORD *)v482 - 1);
                  v482 -= 4;
                  *((_DWORD *)v489 - 1) = v490;
                  v489 -= 4;
                }
                v583 = v489;
                v584 = v483;
                v585 = &v488[4 * v477];
                if (v484)
                  operator delete(v484);
              }
              else
              {
                *(_DWORD *)v584 = v481;
                v483 = v482 + 4;
              }
              v584 = v483;
              v5 = v520;
            }
          }
        }
        v530 = v586;
        if (SHIBYTE(v588) < 0)
        {
          sub_1DCACA658(&v531, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v531 = __src;
          v532 = v588;
        }
        v533 = v589;
        v534 = v590;
        if (v590)
        {
          v512 = (unint64_t *)(v590 + 8);
          do
            v513 = __ldxr(v512);
          while (__stxr(v513 + 1, v512));
        }
        v514 = (char *)objc_msgSend_UTF8String(CFSTR("color"), (const char *)v477, v478);
        sub_1DCB0345C(v566, v514);
        LODWORD(v564) = 0;
        v565 = 0;
        LODWORD(v562) = 0;
        v563 = 0;
        LODWORD(v560) = 0;
        v561 = 0;
        sub_1DCBB5F6C((char *)&__dst, (uint64_t)&v530, (uint64_t)v566, 1, 4, 1, &v564, &v562, &v560);
        sub_1DCBB8010(&v603, (uint64_t *)&v583);
        sub_1DCBB5E1C(v600, (uint64_t *)&v649);
        sub_1DCBB80B0((uint64_t)&v591, (uint64_t *)&v603, v600, 4);
        sub_1DCBB2C34((uint64_t)&__dst, (uint64_t)&v591);
        if (v596)
        {
          v597 = v596;
          operator delete(v596);
        }
        if ((_QWORD)v593)
        {
          *((_QWORD *)&v593 + 1) = v593;
          operator delete((void *)v593);
        }
        if (v601)
        {
          v602 = v601;
          operator delete(v601);
        }
        if (v605)
        {
          v606 = v605;
          operator delete(v605);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v582);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v580);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)((char *)&v575 + 8));
        if (SBYTE7(v575) < 0)
          operator delete(__dst);
        if (v567 < 0)
          operator delete(v566[0]);
        v511 = (Alembic::Abc::v12::OCompoundProperty *)&v530;
      }
      else
      {
        objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v265, v467, (uint64_t)CFSTR("color"), 786435);
        v468 = (void *)objc_claimAutoreleasedReturnValue();

        if (!objc_msgSend_format(v468, v491, v492))
          goto LABEL_682;
        v584 = 0;
        v583 = 0;
        v585 = 0;
        v495 = objc_msgSend_dataStart(v468, v493, v494);
        v498 = objc_msgSend_stride(v468, v496, v497);
        if (v524)
        {
          v501 = v498;
          v502 = 0;
          do
          {
            if (v502 + 12 <= (unint64_t)objc_msgSend_bufferSize(v468, v499, v500))
            {
              v503 = *(_DWORD *)(v495 + v502);
              v504 = *(_DWORD *)(v495 + v502 + 4);
              v505 = *(_DWORD *)(v495 + v502 + 8);
              __dst = (void *)__PAIR64__(v504, v503);
              LODWORD(v574) = v505;
              v506 = v584;
              if (v584 >= v585)
              {
                v507 = sub_1DCBB37F8((uint64_t *)&v583, (uint64_t)&__dst);
              }
              else
              {
                *(_DWORD *)v584 = v503;
                *((_DWORD *)v506 + 1) = v504;
                v507 = (uint64_t)(v506 + 12);
                *((_DWORD *)v506 + 2) = v505;
              }
              v584 = (char *)v507;
            }
            v502 += v501;
            --v524;
          }
          while (v524);
        }
        v525 = v586;
        if (SHIBYTE(v588) < 0)
        {
          sub_1DCACA658(&v526, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v526 = __src;
          v527 = v588;
        }
        v528 = v589;
        v529 = v590;
        if (v590)
        {
          v508 = (unint64_t *)(v590 + 8);
          do
            v509 = __ldxr(v508);
          while (__stxr(v509 + 1, v508));
        }
        v510 = (char *)objc_msgSend_UTF8String(CFSTR("color"), v499, v500);
        sub_1DCB0345C(v566, v510);
        LODWORD(v564) = 0;
        v565 = 0;
        LODWORD(v562) = 0;
        v563 = 0;
        LODWORD(v560) = 0;
        v561 = 0;
        sub_1DCBB8160((char *)&__dst, (uint64_t)&v525, (uint64_t)v566, 1, 4, 1, &v564, &v562, &v560);
        sub_1DCBB990C(&v603, (uint64_t *)&v583);
        sub_1DCBB5E1C(v600, (uint64_t *)&v649);
        sub_1DCBB99B8((uint64_t)&v591, (uint64_t *)&v603, v600, 4);
        sub_1DCBB3040((uint64_t)&__dst, (uint64_t)&v591);
        if (v596)
        {
          v597 = v596;
          operator delete(v596);
        }
        if ((_QWORD)v593)
        {
          *((_QWORD *)&v593 + 1) = v593;
          operator delete((void *)v593);
        }
        if (v601)
        {
          v602 = v601;
          operator delete(v601);
        }
        if (v605)
        {
          v606 = v605;
          operator delete(v605);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v582);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v580);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)((char *)&v575 + 8));
        if (SBYTE7(v575) < 0)
          operator delete(__dst);
        if (v567 < 0)
          operator delete(v566[0]);
        v511 = (Alembic::Abc::v12::OCompoundProperty *)&v525;
      }
      Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v511);
      if (v583)
      {
        v584 = (char *)v583;
        operator delete(v583);
      }
LABEL_682:

      Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v586);
      sub_1DCBBCFE8(&v607);
      *(_QWORD *)&v637 = &off_1EA574288;
      sub_1DCBBC90C((uint64_t)&v638[5]);
      Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v637);
      if (SHIBYTE(v645) < 0)
        operator delete((void *)v644);
LABEL_684:
      if (v646)
      {
        v647 = v646;
        operator delete(v646);
      }
      if (v649)
      {
        v650 = v649;
        operator delete(v649);
      }
      if (v652)
      {
        v653 = v652;
        operator delete(v652);
      }

      if (v655)
      {
        v656 = v655;
        operator delete(v655);
      }

      return;
    default:
      goto LABEL_303;
  }
}

void sub_1DCBB031C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  v19 = *(void **)(v17 - 208);
  if (v19)
  {
    *(_QWORD *)(v17 - 200) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v17 - 184);
  if (v20)
  {
    *(_QWORD *)(v17 - 176) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(v17 - 160);
  if (v21)
  {
    *(_QWORD *)(v17 - 152) = v21;
    operator delete(v21);
  }

  v22 = *(void **)(v17 - 136);
  if (v22)
  {
    *(_QWORD *)(v17 - 128) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

void sub_1DCBB0B84(Alembic::Abc::v12::OObject *a1)
{
  *(_QWORD *)a1 = &off_1EA574248;
  sub_1DCBB2764((uint64_t)a1 + 56);
  Alembic::Abc::v12::OObject::~OObject(a1);
}

uint64_t sub_1DCBB0BB4(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  _DWORD *v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *exception;
  _QWORD *v47;
  _DWORD v48[4];
  int v49;
  uint64_t **v50;
  _DWORD v51[4];
  void **v52;
  int v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  void *__p[2];
  _OWORD v57[16];
  uint64_t v58;
  std::string v59;
  void **v60;
  _QWORD *v61[2];
  __int128 v62;
  __int128 __str;
  __int128 __str_16;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  _DWORD *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;

  *(_DWORD *)(a1 + 8) = 2;
  v12 = (_DWORD *)(a1 + 8);
  sub_1DCB0345C((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1EA574248;
  sub_1DCBB18F8(a1 + 56);
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v13 = *(_DWORD *)(a2 + 8);
  __p[1] = 0;
  *(_QWORD *)&v57[0] = 0;
  __p[0] = &__p[1];
  v74 = 0;
  v75 = 0;
  LODWORD(v76) = v13;
  sub_1DCBB20A4((uint64_t)&v76 + 8, (const void ***)__p);
  v78 = 0uLL;
  LODWORD(v79) = 0;
  *(_QWORD *)((char *)&v79 + 4) = 1;
  sub_1DCAD5CA8((uint64_t)__p, (_QWORD *)__p[1]);
  sub_1DCBB1454(a4, (uint64_t)&v76);
  sub_1DCBB1454(a5, (uint64_t)&v76);
  sub_1DCBB1454(a6, (uint64_t)&v76);
  *v12 = v76;
  v72 = v12;
  v73 = "OSchemaObject::OSchemaObject( OObject)";
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(std::__shared_weak_count **)(a2 + 48);
  v70 = v15;
  v71 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (!v15)
  {
    v58 = 0;
    memset(v57, 0, sizeof(v57));
    *(_OWORD *)__p = 0u;
    sub_1DCB86A2C((uint64_t)__p);
    sub_1DCB03734(v57, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    __str = 0u;
    __str_16 = 0u;
    std::stringbuf::str();
    sub_1DCBB1F8C(&__str, &v68);
    if (SHIBYTE(v69) < 0)
      operator delete((void *)v68);
    exception = __cxa_allocate_exception(0x20uLL);
    v47 = sub_1DCBB2028(exception, (uint64_t)&__str);
    __cxa_throw(v47, (struct type_info *)&unk_1EA573D98, (void (*)(void *))sub_1DCBB14D4);
  }
  v68 = 0uLL;
  v69 = 0;
  sub_1DCBB20A4((uint64_t)&v68, (const void ***)&v76 + 1);
  if (DWORD2(v79) == 1)
  {
    v18 = 1;
  }
  else
  {
    sub_1DCB0345C(__p, "schema");
    sub_1DCB0345C(&__str, "AbcGeom_Xform_v3");
    v60 = __p;
    v19 = sub_1DCBB23B4((uint64_t **)&v68, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)&v60);
    std::string::operator=((std::string *)(v19 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0)
      operator delete((void *)__str);
    if (SBYTE7(v57[0]) < 0)
      operator delete(__p[0]);
    sub_1DCB0345C(__p, "schemaObjTitle");
    sub_1DCBB14D8((std::string *)&__str);
    v60 = __p;
    v20 = sub_1DCBB23B4((uint64_t **)&v68, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)&v60);
    std::string::operator=((std::string *)(v20 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0)
      operator delete((void *)__str);
    if (SBYTE7(v57[0]) < 0)
      operator delete(__p[0]);
    v18 = 0;
  }
  v67 = 0;
  v65 = 0u;
  v66 = 0u;
  __str = 0u;
  __str_16 = 0u;
  sub_1DCBB2504(&__str, a3, (const void ***)&v68);
  (*(void (**)(void **__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v15 + 80))(__p, v15, &__str);
  sub_1DCB4FEF4(a1 + 40, (__int128 *)__p);
  v21 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v22 = (unint64_t *)((char *)__p[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v78;
  v62 = v78;
  if (*((_QWORD *)&v78 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  if (v24)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v70 + 24))(__p);
    v27 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p[0] + 48))(__p[0], v24);
    v28 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v29 = (unint64_t *)((char *)__p[1] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  else
  {
    v27 = v79;
  }
  v61[1] = 0;
  v61[0] = 0;
  v60 = (void **)v61;
  if (DWORD2(v79) == 1)
  {
    sub_1DCB0345C(__p, "replace");
    sub_1DCB0345C(&v59, "1");
    v52 = __p;
    v31 = sub_1DCBB23B4((uint64_t **)&v60, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)&v52);
    std::string::operator=((std::string *)(v31 + 7), &v59);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SBYTE7(v57[0]) < 0)
      operator delete(__p[0]);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 40))(&v54);
  sub_1DCB0345C(&v59, ".xform");
  v32 = *v12;
  LODWORD(v52) = 1;
  v53 = v32;
  v51[0] = 2;
  v51[2] = v27;
  v49 = 3;
  v50 = (uint64_t **)&v60;
  v48[0] = 6;
  v48[2] = v18;
  MEMORY[0x1DF0D1500](__p, &v54, &v59, &v52, v51, &v49, v48);
  sub_1DCBB15B4(a1 + 56, (uint64_t)__p);
  sub_1DCBB2764((uint64_t)__p);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  v33 = v55;
  if (v55)
  {
    v34 = (unint64_t *)&v55->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v60, v61[0]);
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v66, *((_QWORD **)&v66 + 1));
  if (SHIBYTE(v65) < 0)
    operator delete(*((void **)&__str_16 + 1));
  if (SBYTE7(__str_16) < 0)
    operator delete((void *)__str);
  sub_1DCAD5CA8((uint64_t)&v68, *((_QWORD **)&v68 + 1));
  v39 = v71;
  if (v71)
  {
    v40 = (unint64_t *)&v71->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v76 + 8, (_QWORD *)v77);
  return a1;
}

void sub_1DCBB1228(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v13;
  va_list __p;

  va_start(__p, a12);
  sub_1DCBB2070((std::exception *)&STACK[0x260]);
  sub_1DCB28D6C((uint64_t)__p);
  sub_1DCB0546C(v13 - 208);
  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_1DCBB1770(v12);
  sub_1DCBB1770(v12);
}

void sub_1DCBB1380()
{
  uint64_t v0;

  sub_1DCBB17A8(v0 - 192);
  __cxa_end_catch();
  JUMPOUT(0x1DCBB1118);
}

void sub_1DCBB139C()
{
  __cxa_end_catch();
  JUMPOUT(0x1DCBB1434);
}

void sub_1DCBB13A8()
{
  __cxa_end_catch();
  JUMPOUT(0x1DCBB1434);
}

void sub_1DCBB13BC()
{
  JUMPOUT(0x1DCBB132CLL);
}

void sub_1DCBB13D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1DCBB1334);
}

void sub_1DCBB140C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20)
{
  uint64_t v20;

  sub_1DCB0546C(v20 - 176);
  sub_1DCAD5CA8((uint64_t)&a19, a20);
  JUMPOUT(0x1DCBB143CLL);
}

void sub_1DCBB1428()
{
  JUMPOUT(0x1DCBB1444);
}

void sub_1DCBB1430(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OObject *v1;
  uint64_t v2;
  uint64_t v3;

  sub_1DCBB1880(v3 - 160);
  sub_1DCBB2764(v2);
  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1DCBB1454(uint64_t **result, uint64_t a2)
{
  uint64_t *v2;

  switch(*(_DWORD *)result)
  {
    case 1:
      *(_DWORD *)a2 = *((_DWORD *)result + 2);
      break;
    case 2:
      *(_DWORD *)(a2 + 48) = *((_DWORD *)result + 2);
      break;
    case 3:
      v2 = result[1];
      result = (uint64_t **)(a2 + 8);
      if ((uint64_t *)(a2 + 8) != v2)
        result = sub_1DCBB1B08(result, (__int128 *)*v2, (__int128 *)(v2 + 1));
      break;
    case 4:
      result = (uint64_t **)sub_1DCB50788((_QWORD *)(a2 + 32), result[1]);
      break;
    case 5:
      *(_DWORD *)(a2 + 52) = *((_DWORD *)result + 2);
      break;
    case 6:
      *(_DWORD *)(a2 + 56) = *((_DWORD *)result + 2);
      break;
    default:
      return result;
  }
  return result;
}

void sub_1DCBB14D8(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_1DCB0345C(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_Xform_v3");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".xform");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1DCBB1580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBB15B4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  sub_1DCB50788((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
  v4 = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = v4;
  if (a1 != a2)
    sub_1DCBB25B0((char *)(a1 + 88), *(char **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  sub_1DCB50788((_QWORD *)(a1 + 144), (uint64_t *)(a2 + 144));
  sub_1DCB4FEF4(a1 + 160, (__int128 *)(a2 + 160));
  sub_1DCB4FEF4(a1 + 176, (__int128 *)(a2 + 176));
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)(a2 + 200));
  sub_1DCB50788((_QWORD *)(a1 + 224), (uint64_t *)(a2 + 224));
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 248));
  sub_1DCB50788((_QWORD *)(a1 + 272), (uint64_t *)(a2 + 272));
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  sub_1DCBB26B8((void **)(a1 + 296));
  v5 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = v5;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  sub_1DCB50788((_QWORD *)(a1 + 376), (uint64_t *)(a2 + 376));
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  sub_1DCB50788((_QWORD *)(a1 + 424), (uint64_t *)(a2 + 424));
  sub_1DCB4FEF4(a1 + 440, (__int128 *)(a2 + 440));
  return a1;
}

uint64_t sub_1DCBB1724(uint64_t a1)
{
  sub_1DCAD5CA8(a1 + 48, *(_QWORD **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1DCBB1770(uint64_t a1)
{
  sub_1DCBB2804(a1 + 56);
}

void sub_1DCBB1788()
{
  uint64_t v0;

  sub_1DCBB28B4((_QWORD *)(v0 + 40));
  JUMPOUT(0x1DF0D201CLL);
}

void sub_1DCBB17A8(uint64_t a1)
{
  void *__p;
  char v2;

  sub_1DCB0345C(&__p, *(char **)(a1 + 8));
  Alembic::Abc::v12::ErrorHandler::operator()();
  if (v2 < 0)
    operator delete(__p);
}

void sub_1DCBB17F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1DCBB1814(uint64_t a1)
{
  void *__p;
  char v2;

  sub_1DCB0345C(&__p, *(char **)(a1 + 8));
  Alembic::Abc::v12::ErrorHandler::operator()();
  if (v2 < 0)
    operator delete(__p);
}

void sub_1DCBB1864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBB1880(uint64_t a1)
{
  sub_1DCB0546C(a1 + 32);
  sub_1DCAD5CA8(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_1DCBB18B4(Alembic::Abc::v12::OObject *a1)
{
  *(_QWORD *)a1 = &off_1EA574248;
  sub_1DCBB2764((uint64_t)a1 + 56);
  Alembic::Abc::v12::OObject::~OObject(a1);
  JUMPOUT(0x1DF0D228CLL);
}

uint64_t sub_1DCBB18F8(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_1EA574300;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = 127;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 120), "");
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 2;
  *(_OWORD *)(a1 + 144) = 0u;
  sub_1DCB0345C((_QWORD *)(a1 + 200), "");
  *(_DWORD *)(a1 + 240) = 2;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  sub_1DCB0345C((_QWORD *)(a1 + 248), "");
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  Alembic::AbcGeom::v12::XformSample::XformSample((Alembic::AbcGeom::v12::XformSample *)(a1 + 288));
  *(_BYTE *)(a1 + 336) = 1;
  *(_DWORD *)(a1 + 344) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 400), "");
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_BYTE *)(a1 + 336) = 1;
  return a1;
}

void sub_1DCBB1A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  Alembic::Abc::v12::OCompoundProperty *v11;
  Alembic::Abc::v12::OScalarProperty *v12;
  uint64_t v13;
  uint64_t v14;
  Alembic::Abc::v12::OScalarProperty *v15;
  Alembic::Abc::v12::OScalarProperty *v16;
  void **v17;
  Alembic::Abc::v12::OCompoundProperty *v18;
  void *v20;

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v18);
  a10 = v10 + 296;
  sub_1DCBBD088((void ***)&a10);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v16);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v15);
  sub_1DCB0546C(v14);
  sub_1DCB0546C(v13);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v12);
  v20 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v10 + 96) = v20;
    operator delete(v20);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v11);
  _Unwind_Resume(a1);
}

void sub_1DCBB1ADC()
{
  JUMPOUT(0x1DCBB1ABCLL);
}

void sub_1DCBB1AE4(uint64_t a1)
{
  sub_1DCBB2764(a1);
  JUMPOUT(0x1DF0D228CLL);
}

uint64_t **sub_1DCBB1B08(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **v10;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = sub_1DCBB1D10((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          v18 = 0;
          v10 = (uint64_t **)sub_1DCBB1C98((uint64_t)v5, &v18, v17 + 4);
          sub_1DCACAE54(v5, v18, v10, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = sub_1DCBB1D10((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)sub_1DCBB1D64((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_1DCBB1DB8(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1DCBB1C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCBB1D64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCBB1C98(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if (!sub_1DCB00BBC(v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

_QWORD *sub_1DCBB1D10(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t sub_1DCBB1D64(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_1DCAD5CA8(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_1DCAD5CA8(*(_QWORD *)a1, v2);
  }
  return a1;
}

char *sub_1DCBB1DB8(uint64_t **a1, __int128 *a2)
{
  uint64_t **v3;
  char *v4;
  uint64_t v6;
  char *v7[3];

  memset(v7, 0, sizeof(v7));
  sub_1DCBB1E44((uint64_t)a1, a2, v7);
  v6 = 0;
  v3 = (uint64_t **)sub_1DCBB1C98((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_1DCACAE54(a1, v6, v3, (uint64_t *)v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  sub_1DCBB1F48((uint64_t)v7, 0);
  return v4;
}

void sub_1DCBB1E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCBB1F48((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_1DCBB1E44@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, char **a3@<X8>)
{
  char *v5;
  char *v6;
  char *result;

  v5 = (char *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = sub_1DCBB1EB4(v6 + 32, a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1DCBB1E9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCBB1F48(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_1DCBB1EB4(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1DCACA658(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1DCACA658(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_1DCBB1F2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1DCBB1F48(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1DCAFBF08((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_QWORD *sub_1DCBB1F8C(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;

  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1DCACA658(v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *a1 = &off_1EA5742A8;
  return a1;
}

void sub_1DCBB1FE8(std::exception *a1)
{
  sub_1DCBB2070(a1);
  JUMPOUT(0x1DF0D228CLL);
}

uint64_t sub_1DCBB200C(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

_QWORD *sub_1DCBB2028(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  char *v4;
  char *v5;
  char *v6;

  v3 = a1 + 1;
  v6 = *(char **)(a2 + 8);
  v4 = (char *)(a2 + 8);
  v5 = v6;
  if (v4[23] < 0)
    v4 = v5;
  sub_1DCB0345C(v3, v4);
  *a1 = &off_1EA5742A8;
  return a1;
}

std::exception *sub_1DCBB2070(std::exception *a1)
{
  uint64_t v2;

  std::exception::~exception(a1);
  if (*(char *)(v2 + 31) < 0)
    operator delete(a1[1].__vftable);
  return a1;
}

uint64_t sub_1DCBB20A4(uint64_t a1, const void ***a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_1DCBB20F8((char *)a1, *a2, a2 + 1);
  return a1;
}

void sub_1DCBB20E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAD5CA8(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_1DCBB20F8(char *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)(result + 8);
    do
    {
      result = sub_1DCBB217C(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

char *sub_1DCBB217C(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  char *v7;
  uint64_t **v8;
  char *v10[3];
  uint64_t v11;
  const void **v12;

  v11 = 0;
  v12 = 0;
  v6 = sub_1DCBB221C(a1, a2, &v12, &v11, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_1DCBB1E44((uint64_t)a1, a4, v10);
    sub_1DCACAE54(a1, (uint64_t)v12, v8, (uint64_t *)v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1DCBB1F48((uint64_t)v10, 0);
  }
  return v7;
}

const void **sub_1DCBB221C(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || sub_1DCB00BBC((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (sub_1DCB00BBC((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)sub_1DCAD344C((uint64_t)a1, a3, a5);
  }
  if (sub_1DCB00BBC((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_1DCB00BBC((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)sub_1DCAD344C((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

uint64_t *sub_1DCBB23B4(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)sub_1DCAD344C((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_1DCBB2468((uint64_t)a1, a4, v10);
    sub_1DCACAE54(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1DCBB1F48((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_1DCBB2468@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_1DCACA658(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1DCBB24EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCBB1F48(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCBB2504(_QWORD *__dst, __int128 *a2, const void ***a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1DCACA658(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_1DCB0345C(__dst + 3, "");
  sub_1DCBB20A4((uint64_t)(__dst + 6), a3);
  return __dst;
}

void sub_1DCBB257C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_1DCBB25B0(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      sub_1DCAE4C44();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1DCAE7964(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void sub_1DCBB26B8(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        sub_1DCBB2724((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1DCBB2724(uint64_t a1, uint64_t a2)
{
  void *v3;

  sub_1DCAE4E44(a2 + 32, *(_QWORD **)(a2 + 40));
  v3 = *(void **)(a2 + 8);
  if (v3)
  {
    *(_QWORD *)(a2 + 16) = v3;
    operator delete(v3);
  }
}

uint64_t sub_1DCBB2764(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &unk_1EA574300;
  sub_1DCB0546C(a1 + 440);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 392));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 344));
  v4 = (void **)(a1 + 296);
  sub_1DCBBD088(&v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 240));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 192));
  sub_1DCB0546C(a1 + 176);
  sub_1DCB0546C(a1 + 160);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 112));
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  return a1;
}

void sub_1DCBB2804(uint64_t a1)
{
  sub_1DCBB28B4((_QWORD *)(a1 + 144));
  MEMORY[0x1DF0D201C](a1 + 120, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 224));
  MEMORY[0x1DF0D201C](a1 + 200, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 160));
  sub_1DCBB28B4((_QWORD *)(a1 + 176));
  Alembic::AbcGeom::v12::XformSample::reset((Alembic::AbcGeom::v12::XformSample *)(a1 + 288));
  sub_1DCBB28B4((_QWORD *)(a1 + 440));
  sub_1DCBB28B4((_QWORD *)(a1 + 376));
  MEMORY[0x1DF0D201C](a1 + 352, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 424));
  MEMORY[0x1DF0D201C](a1 + 400, "");
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 336) = 1;
  sub_1DCBB28B4((_QWORD *)(a1 + 40));
  JUMPOUT(0x1DF0D201CLL);
}

void sub_1DCBB28B4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

char *sub_1DCBB2910(char *result, char *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD *)a2;
  *(_QWORD *)(result + 493) = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 61) = v4;
  if (result + 488 == a2)
  {
    v6 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(result + 533) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)result + 66) = v6;
  }
  else
  {
    sub_1DCBB25B0(result + 504, *((char **)a2 + 2), *((_QWORD *)a2 + 3), (uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3);
    v5 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v3 + 533) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)v3 + 66) = v5;
    result = sub_1DCBB25B0(v3 + 544, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  *((_DWORD *)v3 + 142) = *((_DWORD *)a2 + 20);
  return result;
}

_QWORD *sub_1DCBB29A8(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

_BYTE *sub_1DCBB29E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  std::string v22;
  uint64_t v23[4];

  v23[2] = a1 + 8;
  v23[3] = (uint64_t)"OGeomBaseSchema::getArbGeomParams()";
  v4 = *(char *)(a1 + 183);
  if (v4 < 0)
  {
    if (!*(_QWORD *)(a1 + 168))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 183))
  {
LABEL_5:
    if (*(_QWORD *)(a1 + 184))
      goto LABEL_17;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 40);
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_1DCB0345C(__p, ".arbGeomParams");
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  MEMORY[0x1DF0D144C](&v21, &v19, __p, v16, v15);
  *(_DWORD *)(a1 + 152) = v21;
  std::string::operator=((std::string *)(a1 + 160), &v22);
  sub_1DCB50788((_QWORD *)(a1 + 184), v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LOBYTE(v4) = *(_BYTE *)(a1 + 183);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 152);
  result = (_BYTE *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    result = sub_1DCACA658(result, *(void **)(a1 + 160), *(_QWORD *)(a1 + 168));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 176);
  }
  v12 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_1DCBB2B6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_1DCBB1814(v23 - 48);
  else
    sub_1DCBB17A8(v23 - 48);
  __cxa_end_catch();
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)v22 = 0u;
  *(_DWORD *)v22 = 2;
  sub_1DCB0345C((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x1DCBB2B58);
}

void sub_1DCBB2C14(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1DCBB2C34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t (*v13)();
  uint64_t (*v14)();
  _BYTE v15[13];
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[13];
  void *__p;
  void *v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;

  v33 = a1 + 24;
  v34 = "OTypedGeomParam::set()";
  if (!Alembic::Abc::v12::OArrayProperty::getNumSamples((Alembic::Abc::v12::OArrayProperty *)(a1 + 24)))
  {
    Alembic::Abc::v12::OArrayProperty::set();
    if (*(_BYTE *)(a1 + 120))
      Alembic::Abc::v12::OArrayProperty::set();
    return;
  }
  v28 = *(_DWORD *)(a1 + 24);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_1DCACA658(&v29, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    v29 = *(_OWORD *)(a1 + 32);
    v30 = *(_QWORD *)(a1 + 48);
  }
  v4 = *(_QWORD *)(a1 + 64);
  v31 = *(_QWORD *)(a1 + 56);
  v32 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 5);
  *(_QWORD *)v24 = *(_QWORD *)a2;
  *(_QWORD *)&v24[5] = v7;
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_1DCBB5780(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  if (SHIBYTE(v30) < 0)
  {
    if (*((_QWORD *)&v29 + 1))
      goto LABEL_12;
  }
  else if (HIBYTE(v30))
  {
LABEL_12:
    v8 = 0;
    goto LABEL_17;
  }
  if (v31)
    v8 = nullsub_11;
  else
    v8 = 0;
LABEL_17:
  if (v8)
  {
    if (*(_DWORD *)&v24[8] == 127 || !*(_QWORD *)v24 && v26 == __p)
      v9 = 0;
    else
      v9 = nullsub_12;
    if (v9)
      Alembic::Abc::v12::OArrayProperty::set();
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v28);
  }
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v28);
  if (*(_BYTE *)(a1 + 120))
  {
    v19 = *(_DWORD *)(a1 + 72);
    if (*(char *)(a1 + 103) < 0)
    {
      sub_1DCACA658(&v20, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v20 = *(_OWORD *)(a1 + 80);
      v21 = *(_QWORD *)(a1 + 96);
    }
    v10 = *(_QWORD *)(a1 + 112);
    v22 = *(_QWORD *)(a1 + 104);
    v23 = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *(_QWORD *)v15 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)&v15[5] = *(_QWORD *)(a2 + 45);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    sub_1DCBB5780(&v16, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    if (SHIBYTE(v21) < 0)
    {
      if (*((_QWORD *)&v20 + 1))
        goto LABEL_37;
    }
    else if (HIBYTE(v21))
    {
LABEL_37:
      v13 = 0;
LABEL_42:
      if (v13)
      {
        if (*(_DWORD *)&v15[8] == 127 || !*(_QWORD *)v15 && v17 == v16)
          v14 = 0;
        else
          v14 = nullsub_13;
        if (v14)
          Alembic::Abc::v12::OArrayProperty::set();
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v19);
      }
      if (v16)
      {
        v17 = v16;
        operator delete(v16);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v19);
      return;
    }
    if (v22)
      v13 = nullsub_11;
    else
      v13 = 0;
    goto LABEL_42;
  }
}

void sub_1DCBB2F2C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;

  if (__p)
    operator delete(__p);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&a14);
  __cxa_begin_catch(a1);
  sub_1DCBB4F54(v23);
  if (a2 == 2)
    sub_1DCBB1814(v24 - 48);
  else
    sub_1DCBB17A8(v24 - 48);
  __cxa_end_catch();
  JUMPOUT(0x1DCBB2F18);
}

void sub_1DCBB2FD8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBB2FF8(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 128));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 72));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1DCBB3040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t (*v13)();
  uint64_t (*v14)();
  _BYTE v15[13];
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[13];
  void *__p;
  void *v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;

  v33 = a1 + 24;
  v34 = "OTypedGeomParam::set()";
  if (!Alembic::Abc::v12::OArrayProperty::getNumSamples((Alembic::Abc::v12::OArrayProperty *)(a1 + 24)))
  {
    Alembic::Abc::v12::OArrayProperty::set();
    if (*(_BYTE *)(a1 + 120))
      Alembic::Abc::v12::OArrayProperty::set();
    return;
  }
  v28 = *(_DWORD *)(a1 + 24);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_1DCACA658(&v29, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    v29 = *(_OWORD *)(a1 + 32);
    v30 = *(_QWORD *)(a1 + 48);
  }
  v4 = *(_QWORD *)(a1 + 64);
  v31 = *(_QWORD *)(a1 + 56);
  v32 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 5);
  *(_QWORD *)v24 = *(_QWORD *)a2;
  *(_QWORD *)&v24[5] = v7;
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_1DCBB5780(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  if (SHIBYTE(v30) < 0)
  {
    if (*((_QWORD *)&v29 + 1))
      goto LABEL_12;
  }
  else if (HIBYTE(v30))
  {
LABEL_12:
    v8 = 0;
    goto LABEL_17;
  }
  if (v31)
    v8 = nullsub_11;
  else
    v8 = 0;
LABEL_17:
  if (v8)
  {
    if (*(_DWORD *)&v24[8] == 127 || !*(_QWORD *)v24 && v26 == __p)
      v9 = 0;
    else
      v9 = nullsub_14;
    if (v9)
      Alembic::Abc::v12::OArrayProperty::set();
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v28);
  }
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v28);
  if (*(_BYTE *)(a1 + 120))
  {
    v19 = *(_DWORD *)(a1 + 72);
    if (*(char *)(a1 + 103) < 0)
    {
      sub_1DCACA658(&v20, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v20 = *(_OWORD *)(a1 + 80);
      v21 = *(_QWORD *)(a1 + 96);
    }
    v10 = *(_QWORD *)(a1 + 112);
    v22 = *(_QWORD *)(a1 + 104);
    v23 = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *(_QWORD *)v15 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)&v15[5] = *(_QWORD *)(a2 + 45);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    sub_1DCBB5780(&v16, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    if (SHIBYTE(v21) < 0)
    {
      if (*((_QWORD *)&v20 + 1))
        goto LABEL_37;
    }
    else if (HIBYTE(v21))
    {
LABEL_37:
      v13 = 0;
LABEL_42:
      if (v13)
      {
        if (*(_DWORD *)&v15[8] == 127 || !*(_QWORD *)v15 && v17 == v16)
          v14 = 0;
        else
          v14 = nullsub_13;
        if (v14)
          Alembic::Abc::v12::OArrayProperty::set();
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v19);
      }
      if (v16)
      {
        v17 = v16;
        operator delete(v16);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v19);
      return;
    }
    if (v22)
      v13 = nullsub_11;
    else
      v13 = 0;
    goto LABEL_42;
  }
}

void sub_1DCBB3338(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;

  if (__p)
    operator delete(__p);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&a14);
  __cxa_begin_catch(a1);
  sub_1DCBB4F54(v23);
  if (a2 == 2)
    sub_1DCBB1814(v24 - 48);
  else
    sub_1DCBB17A8(v24 - 48);
  __cxa_end_catch();
  JUMPOUT(0x1DCBB3324);
}

void sub_1DCBB33E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1DCBB3404(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t (*v13)();
  uint64_t (*v14)();
  _BYTE v15[13];
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[13];
  void *__p;
  void *v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;

  v33 = a1 + 24;
  v34 = "OTypedGeomParam::set()";
  if (!Alembic::Abc::v12::OArrayProperty::getNumSamples((Alembic::Abc::v12::OArrayProperty *)(a1 + 24)))
  {
    Alembic::Abc::v12::OArrayProperty::set();
    if (*(_BYTE *)(a1 + 120))
      Alembic::Abc::v12::OArrayProperty::set();
    return;
  }
  v28 = *(_DWORD *)(a1 + 24);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_1DCACA658(&v29, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    v29 = *(_OWORD *)(a1 + 32);
    v30 = *(_QWORD *)(a1 + 48);
  }
  v4 = *(_QWORD *)(a1 + 64);
  v31 = *(_QWORD *)(a1 + 56);
  v32 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 5);
  *(_QWORD *)v24 = *(_QWORD *)a2;
  *(_QWORD *)&v24[5] = v7;
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_1DCBB5780(&__p, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  if (SHIBYTE(v30) < 0)
  {
    if (*((_QWORD *)&v29 + 1))
      goto LABEL_12;
  }
  else if (HIBYTE(v30))
  {
LABEL_12:
    v8 = 0;
    goto LABEL_17;
  }
  if (v31)
    v8 = nullsub_11;
  else
    v8 = 0;
LABEL_17:
  if (v8)
  {
    if (*(_DWORD *)&v24[8] == 127 || !*(_QWORD *)v24 && v26 == __p)
      v9 = 0;
    else
      v9 = nullsub_15;
    if (v9)
      Alembic::Abc::v12::OArrayProperty::set();
    else
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v28);
  }
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v28);
  if (*(_BYTE *)(a1 + 120))
  {
    v19 = *(_DWORD *)(a1 + 72);
    if (*(char *)(a1 + 103) < 0)
    {
      sub_1DCACA658(&v20, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v20 = *(_OWORD *)(a1 + 80);
      v21 = *(_QWORD *)(a1 + 96);
    }
    v10 = *(_QWORD *)(a1 + 112);
    v22 = *(_QWORD *)(a1 + 104);
    v23 = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *(_QWORD *)v15 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)&v15[5] = *(_QWORD *)(a2 + 45);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    sub_1DCBB5780(&v16, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    if (SHIBYTE(v21) < 0)
    {
      if (*((_QWORD *)&v20 + 1))
        goto LABEL_37;
    }
    else if (HIBYTE(v21))
    {
LABEL_37:
      v13 = 0;
LABEL_42:
      if (v13)
      {
        if (*(_DWORD *)&v15[8] == 127 || !*(_QWORD *)v15 && v17 == v16)
          v14 = 0;
        else
          v14 = nullsub_13;
        if (v14)
          Alembic::Abc::v12::OArrayProperty::set();
        else
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v19);
      }
      if (v16)
      {
        v17 = v16;
        operator delete(v16);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v19);
      return;
    }
    if (v22)
      v13 = nullsub_11;
    else
      v13 = 0;
    goto LABEL_42;
  }
}

void sub_1DCBB36FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;

  if (__p)
    operator delete(__p);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&a14);
  __cxa_begin_catch(a1);
  sub_1DCBB4F54(v23);
  if (a2 == 2)
    sub_1DCBB1814(v24 - 48);
  else
    sub_1DCBB17A8(v24 - 48);
  __cxa_end_catch();
  JUMPOUT(0x1DCBB36E8);
}

void sub_1DCBB37A8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1DCBB37C8(Alembic::Abc::v12::OObject *a1)
{
  *(_QWORD *)a1 = &off_1EA574228;
  sub_1DCBB5538((uint64_t)a1 + 56);
  Alembic::Abc::v12::OObject::~OObject(a1);
}

uint64_t sub_1DCBB37F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    sub_1DCAE4C44();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xAAAAAAAAAAAAAAALL)
    v9 = 0x1555555555555555;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)sub_1DCB011C0(v7, v9);
  v11 = &v10[12 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[12 * v12];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  v17 = v11 + 12;
  sub_1DCB87714(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 12) % 0xCuLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_1DCBB3914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBB3960(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  _DWORD *v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *exception;
  _QWORD *v47;
  _DWORD v48[4];
  int v49;
  __int128 **v50;
  _DWORD v51[4];
  _DWORD v52[4];
  void *v53[2];
  char v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *__p[2];
  _OWORD v58[16];
  uint64_t v59;
  void **v60;
  _QWORD *v61[2];
  __int128 v62;
  __int128 __str;
  __int128 __str_16;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  _DWORD *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;

  *(_DWORD *)(a1 + 8) = 2;
  v12 = (_DWORD *)(a1 + 8);
  sub_1DCB0345C((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1EA574228;
  sub_1DCBB46AC(a1 + 56);
  v79 = 0u;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v13 = *(_DWORD *)(a2 + 8);
  __p[1] = 0;
  *(_QWORD *)&v58[0] = 0;
  __p[0] = &__p[1];
  v74 = 0;
  v75 = 0;
  LODWORD(v76) = v13;
  sub_1DCBB20A4((uint64_t)&v76 + 8, (const void ***)__p);
  v78 = 0uLL;
  LODWORD(v79) = 0;
  *(_QWORD *)((char *)&v79 + 4) = 1;
  sub_1DCAD5CA8((uint64_t)__p, (_QWORD *)__p[1]);
  sub_1DCBB1454(a4, (uint64_t)&v76);
  sub_1DCBB1454(a5, (uint64_t)&v76);
  sub_1DCBB1454(a6, (uint64_t)&v76);
  *v12 = v76;
  v72 = v12;
  v73 = "OSchemaObject::OSchemaObject( OObject)";
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(std::__shared_weak_count **)(a2 + 48);
  v70 = v15;
  v71 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (!v15)
  {
    v59 = 0;
    *(_OWORD *)__p = 0u;
    memset(v58, 0, sizeof(v58));
    sub_1DCB86A2C((uint64_t)__p);
    sub_1DCB03734(v58, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    __str_16 = 0u;
    __str = 0u;
    std::stringbuf::str();
    sub_1DCBB1F8C(&__str, &v68);
    if (SHIBYTE(v69) < 0)
      operator delete((void *)v68);
    exception = __cxa_allocate_exception(0x20uLL);
    v47 = sub_1DCBB2028(exception, (uint64_t)&__str);
    __cxa_throw(v47, (struct type_info *)&unk_1EA573D98, (void (*)(void *))sub_1DCBB14D4);
  }
  v68 = 0uLL;
  v69 = 0;
  sub_1DCBB20A4((uint64_t)&v68, (const void ***)&v76 + 1);
  if (DWORD2(v79) == 1)
  {
    v18 = 1;
  }
  else
  {
    sub_1DCB0345C(__p, "schema");
    sub_1DCB0345C(&__str, "AbcGeom_SubD_v1");
    v60 = __p;
    v19 = sub_1DCBB23B4((uint64_t **)&v68, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)&v60);
    std::string::operator=((std::string *)(v19 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0)
      operator delete((void *)__str);
    if (SBYTE7(v58[0]) < 0)
      operator delete(__p[0]);
    sub_1DCB0345C(__p, "schemaObjTitle");
    sub_1DCBB41D8((std::string *)&__str);
    v60 = __p;
    v20 = sub_1DCBB23B4((uint64_t **)&v68, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)&v60);
    std::string::operator=((std::string *)(v20 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0)
      operator delete((void *)__str);
    if (SBYTE7(v58[0]) < 0)
      operator delete(__p[0]);
    sub_1DCB0345C(__p, "schemaBaseType");
    sub_1DCB0345C(&__str, "AbcGeom_GeomBase_v1");
    v60 = __p;
    v21 = sub_1DCBB23B4((uint64_t **)&v68, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)&v60);
    std::string::operator=((std::string *)(v21 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0)
      operator delete((void *)__str);
    if (SBYTE7(v58[0]) < 0)
      operator delete(__p[0]);
    v18 = 0;
  }
  v67 = 0;
  v66 = 0u;
  v65 = 0u;
  __str_16 = 0u;
  __str = 0u;
  sub_1DCBB2504(&__str, a3, (const void ***)&v68);
  (*(void (**)(void **__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v15 + 80))(__p, v15, &__str);
  sub_1DCB4FEF4(a1 + 40, (__int128 *)__p);
  v22 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v23 = (unint64_t *)((char *)__p[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v78;
  v62 = v78;
  if (*((_QWORD *)&v78 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if (v25)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v70 + 24))(__p);
    v28 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p[0] + 48))(__p[0], v25);
    v29 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v30 = (unint64_t *)((char *)__p[1] + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    v28 = v79;
  }
  v61[1] = 0;
  v61[0] = 0;
  v60 = (void **)v61;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 40))(&v55);
  sub_1DCB0345C(v53, ".geom");
  v32 = *v12;
  v52[0] = 1;
  v52[2] = v32;
  v51[0] = 2;
  v51[2] = v28;
  v49 = 3;
  v50 = (__int128 **)&v60;
  v48[0] = 6;
  v48[2] = v18;
  MEMORY[0x1DF0D14C4](__p, &v55, v53, v52, v51, &v49, v48);
  sub_1DCBB42B4(a1 + 56, (uint64_t)__p);
  sub_1DCBB5538((uint64_t)__p);
  if (v54 < 0)
    operator delete(v53[0]);
  v33 = v56;
  if (v56)
  {
    v34 = (unint64_t *)&v56->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v60, v61[0]);
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v66, *((_QWORD **)&v66 + 1));
  if (SHIBYTE(v65) < 0)
    operator delete(*((void **)&__str_16 + 1));
  if (SBYTE7(__str_16) < 0)
    operator delete((void *)__str);
  sub_1DCAD5CA8((uint64_t)&v68, *((_QWORD **)&v68 + 1));
  v39 = v71;
  if (v71)
  {
    v40 = (unint64_t *)&v71->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v76 + 8, (_QWORD *)v77);
  return a1;
}

void sub_1DCBB3FDC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  va_list __p;

  va_start(__p, a16);
  sub_1DCBB2070((std::exception *)&STACK[0x530]);
  sub_1DCB28D6C((uint64_t)__p);
  sub_1DCB0546C(v17 - 208);
  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_1DCBB4630(v16);
  sub_1DCBB4630(v16);
}

void sub_1DCBB414C()
{
  uint64_t v0;

  sub_1DCBB17A8(v0 - 192);
  __cxa_end_catch();
  JUMPOUT(0x1DCBB3EC8);
}

void sub_1DCBB4168()
{
  __cxa_end_catch();
  JUMPOUT(0x1DCBB41B8);
}

void sub_1DCBB4174()
{
  __cxa_end_catch();
  JUMPOUT(0x1DCBB41B8);
}

void sub_1DCBB4190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24)
{
  uint64_t v24;

  sub_1DCB0546C(v24 - 176);
  sub_1DCAD5CA8((uint64_t)&a23, a24);
  JUMPOUT(0x1DCBB41C0);
}

void sub_1DCBB41AC()
{
  JUMPOUT(0x1DCBB41C8);
}

void sub_1DCBB41B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Alembic::Abc::v12::OObject *v9;
  uint64_t v10;

  sub_1DCBB1880(v10 - 160);
  sub_1DCBB5538(a9);
  Alembic::Abc::v12::OObject::~OObject(v9);
  _Unwind_Resume(a1);
}

void sub_1DCBB41D8(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_1DCB0345C(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_SubD_v1");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1DCBB4280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBB42B4(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;
  void **v6;
  __int128 v7;
  __int128 v8;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  sub_1DCB50788((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  sub_1DCB50788((_QWORD *)(a1 + 88), (uint64_t *)(a2 + 88));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  sub_1DCB50788((_QWORD *)(a1 + 136), (uint64_t *)(a2 + 136));
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  sub_1DCB50788((_QWORD *)(a1 + 184), (uint64_t *)(a2 + 184));
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  sub_1DCB50788((_QWORD *)(a1 + 232), (uint64_t *)(a2 + 232));
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  sub_1DCB50788((_QWORD *)(a1 + 280), (uint64_t *)(a2 + 280));
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  sub_1DCB50788((_QWORD *)(a1 + 328), (uint64_t *)(a2 + 328));
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  sub_1DCB50788((_QWORD *)(a1 + 376), (uint64_t *)(a2 + 376));
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  sub_1DCB50788((_QWORD *)(a1 + 424), (uint64_t *)(a2 + 424));
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
  std::string::operator=((std::string *)(a1 + 448), (const std::string *)(a2 + 448));
  sub_1DCB50788((_QWORD *)(a1 + 472), (uint64_t *)(a2 + 472));
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  std::string::operator=((std::string *)(a1 + 496), (const std::string *)(a2 + 496));
  sub_1DCB50788((_QWORD *)(a1 + 520), (uint64_t *)(a2 + 520));
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a2 + 536);
  std::string::operator=((std::string *)(a1 + 544), (const std::string *)(a2 + 544));
  sub_1DCB50788((_QWORD *)(a1 + 568), (uint64_t *)(a2 + 568));
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  std::string::operator=((std::string *)(a1 + 592), (const std::string *)(a2 + 592));
  sub_1DCB50788((_QWORD *)(a1 + 616), (uint64_t *)(a2 + 616));
  *(_DWORD *)(a1 + 632) = *(_DWORD *)(a2 + 632);
  std::string::operator=((std::string *)(a1 + 640), (const std::string *)(a2 + 640));
  sub_1DCB50788((_QWORD *)(a1 + 664), (uint64_t *)(a2 + 664));
  *(_DWORD *)(a1 + 680) = *(_DWORD *)(a2 + 680);
  std::string::operator=((std::string *)(a1 + 688), (const std::string *)(a2 + 688));
  sub_1DCB50788((_QWORD *)(a1 + 712), (uint64_t *)(a2 + 712));
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  std::string::operator=((std::string *)(a1 + 736), (const std::string *)(a2 + 736));
  sub_1DCB50788((_QWORD *)(a1 + 760), (uint64_t *)(a2 + 760));
  *(_DWORD *)(a1 + 776) = *(_DWORD *)(a2 + 776);
  std::string::operator=((std::string *)(a1 + 784), (const std::string *)(a2 + 784));
  sub_1DCB50788((_QWORD *)(a1 + 808), (uint64_t *)(a2 + 808));
  *(_DWORD *)(a1 + 824) = *(_DWORD *)(a2 + 824);
  std::string::operator=((std::string *)(a1 + 832), (const std::string *)(a2 + 832));
  sub_1DCB50788((_QWORD *)(a1 + 856), (uint64_t *)(a2 + 856));
  *(_DWORD *)(a1 + 872) = *(_DWORD *)(a2 + 872);
  std::string::operator=((std::string *)(a1 + 880), (const std::string *)(a2 + 880));
  sub_1DCB50788((_QWORD *)(a1 + 904), (uint64_t *)(a2 + 904));
  v4 = (void **)(a1 + 920);
  if (*(char *)(a1 + 943) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 920);
  *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 943) = 0;
  *(_BYTE *)(a2 + 920) = 0;
  *(_DWORD *)(a1 + 944) = *(_DWORD *)(a2 + 944);
  std::string::operator=((std::string *)(a1 + 952), (const std::string *)(a2 + 952));
  sub_1DCB50788((_QWORD *)(a1 + 976), (uint64_t *)(a2 + 976));
  *(_DWORD *)(a1 + 992) = *(_DWORD *)(a2 + 992);
  std::string::operator=((std::string *)(a1 + 1000), (const std::string *)(a2 + 1000));
  sub_1DCB50788((_QWORD *)(a1 + 1024), (uint64_t *)(a2 + 1024));
  *(_QWORD *)(a1 + 1040) = *(_QWORD *)(a2 + 1040);
  *(_DWORD *)(a1 + 1048) = *(_DWORD *)(a2 + 1048);
  std::string::operator=((std::string *)(a1 + 1056), (const std::string *)(a2 + 1056));
  sub_1DCB50788((_QWORD *)(a1 + 1080), (uint64_t *)(a2 + 1080));
  v6 = (void **)(a1 + 1096);
  if (*(char *)(a1 + 1119) < 0)
    operator delete(*v6);
  v7 = *(_OWORD *)(a2 + 1096);
  *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a2 + 1112);
  *(_OWORD *)v6 = v7;
  *(_BYTE *)(a2 + 1119) = 0;
  *(_BYTE *)(a2 + 1096) = 0;
  sub_1DCBB54D0(a1 + 1120, (_QWORD *)(a2 + 1120));
  v8 = *(_OWORD *)(a2 + 1144);
  *(_DWORD *)(a1 + 1160) = *(_DWORD *)(a2 + 1160);
  *(_OWORD *)(a1 + 1144) = v8;
  return a1;
}

void sub_1DCBB4630(uint64_t a1)
{
  sub_1DCBB4B1C(a1 + 56);
}

void sub_1DCBB4648()
{
  uint64_t v0;

  sub_1DCBB28B4((_QWORD *)(v0 + 40));
  JUMPOUT(0x1DF0D201CLL);
}

void sub_1DCBB4668(Alembic::Abc::v12::OObject *a1)
{
  *(_QWORD *)a1 = &off_1EA574228;
  sub_1DCBB5538((uint64_t)a1 + 56);
  Alembic::Abc::v12::OObject::~OObject(a1);
  JUMPOUT(0x1DF0D228CLL);
}

uint64_t sub_1DCBB46AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1DCBB4990(a1);
  *(_QWORD *)v2 = &unk_1EA5742D0;
  *(_DWORD *)(v2 + 248) = 2;
  sub_1DCB0345C((_QWORD *)(v2 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 400), "");
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 448), "");
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 496), "");
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 536) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 544), "");
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 584) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 592), "");
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_DWORD *)(a1 + 632) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 640), "");
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_DWORD *)(a1 + 680) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 688), "");
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 728) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 736), "");
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_DWORD *)(a1 + 776) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 784), "");
  *(_QWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 824) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 832), "");
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 872) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 880), "");
  *(_QWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  sub_1DCBB4E88(a1 + 920);
  *(_QWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_QWORD *)(a1 + 1120) = a1 + 1128;
  *(_BYTE *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_DWORD *)(a1 + 1160) = 0;
  return a1;
}

void sub_1DCBB4898(_Unwind_Exception *a1)
{
  _QWORD *v1;
  Alembic::Abc::v12::OArrayProperty *v2;
  Alembic::Abc::v12::OArrayProperty *v3;
  Alembic::Abc::v12::OArrayProperty *v4;

  v4 = v3;
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v1 + 103));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 97));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 91));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 85));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 79));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 73));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 67));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v1 + 61));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v1 + 55));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v1 + 49));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 43));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_1DCBB4AA0(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBB4940()
{
  JUMPOUT(0x1DCBB48E8);
}

void sub_1DCBB4948()
{
  JUMPOUT(0x1DCBB48F0);
}

void sub_1DCBB4950()
{
  JUMPOUT(0x1DCBB48F8);
}

void sub_1DCBB4958()
{
  JUMPOUT(0x1DCBB4900);
}

void sub_1DCBB4960()
{
  JUMPOUT(0x1DCBB4908);
}

void sub_1DCBB4968()
{
  JUMPOUT(0x1DCBB4910);
}

void sub_1DCBB4970()
{
  JUMPOUT(0x1DCBB4918);
}

void sub_1DCBB4978()
{
  JUMPOUT(0x1DCBB4920);
}

void sub_1DCBB4980()
{
  JUMPOUT(0x1DCBB4928);
}

void sub_1DCBB4988()
{
  JUMPOUT(0x1DCBB4930);
}

uint64_t sub_1DCBB4990(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1EA574350;
  *(_DWORD *)(a1 + 56) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_1DCB0345C((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_1DCB0345C((_QWORD *)(a1 + 160), "");
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  return a1;
}

void sub_1DCBB4A5C(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OCompoundProperty *v1;
  Alembic::Abc::v12::OScalarProperty *v2;
  Alembic::Abc::v12::OScalarProperty *v3;
  Alembic::Abc::v12::OCompoundProperty *v4;

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCBB4AA0(_QWORD *a1)
{
  Alembic::Abc::v12::OCompoundProperty *v2;

  *a1 = &off_1EA574350;
  v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_1DCBB4AF8(uint64_t a1)
{
  sub_1DCBB5538(a1);
  JUMPOUT(0x1DF0D228CLL);
}

void sub_1DCBB4B1C(uint64_t a1)
{
  sub_1DCBB28B4((_QWORD *)(a1 + 280));
  MEMORY[0x1DF0D201C](a1 + 256, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 328));
  MEMORY[0x1DF0D201C](a1 + 304, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 376));
  MEMORY[0x1DF0D201C](a1 + 352, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 424));
  MEMORY[0x1DF0D201C](a1 + 400, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 472));
  MEMORY[0x1DF0D201C](a1 + 448, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 520));
  MEMORY[0x1DF0D201C](a1 + 496, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 568));
  MEMORY[0x1DF0D201C](a1 + 544, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 616));
  MEMORY[0x1DF0D201C](a1 + 592, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 664));
  MEMORY[0x1DF0D201C](a1 + 640, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 712));
  MEMORY[0x1DF0D201C](a1 + 688, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 760));
  MEMORY[0x1DF0D201C](a1 + 736, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 808));
  MEMORY[0x1DF0D201C](a1 + 784, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 856));
  MEMORY[0x1DF0D201C](a1 + 832, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 904));
  MEMORY[0x1DF0D201C](a1 + 880, "");
  sub_1DCBB4F54(a1 + 920);
  sub_1DCBB4FC8(a1 + 1120, *(_QWORD **)(a1 + 1128));
  *(_QWORD *)(a1 + 1120) = a1 + 1128;
  *(_QWORD *)(a1 + 1136) = 0;
  *(_QWORD *)(a1 + 1128) = 0;
  sub_1DCBB4DD8((_QWORD *)a1);
}

uint64_t sub_1DCBB4C80(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return *(_BYTE *)(a1 + 1144) != 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return *(_BYTE *)(a1 + 1144) != 0;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    if (*(char *)(a1 + 279) < 0)
    {
      if (*(_QWORD *)(a1 + 264))
        return *(_BYTE *)(a1 + 1144) != 0;
    }
    else if (*(_BYTE *)(a1 + 279))
    {
      return *(_BYTE *)(a1 + 1144) != 0;
    }
    if (*(_QWORD *)(a1 + 280))
    {
      if (*(char *)(a1 + 327) < 0)
      {
        if (*(_QWORD *)(a1 + 312))
          return *(_BYTE *)(a1 + 1144) != 0;
      }
      else if (*(_BYTE *)(a1 + 327))
      {
        return *(_BYTE *)(a1 + 1144) != 0;
      }
      if (*(_QWORD *)(a1 + 328))
      {
        if (*(char *)(a1 + 375) < 0)
        {
          if (*(_QWORD *)(a1 + 360))
            return *(_BYTE *)(a1 + 1144) != 0;
        }
        else if (*(_BYTE *)(a1 + 375))
        {
          return *(_BYTE *)(a1 + 1144) != 0;
        }
        if (*(_QWORD *)(a1 + 376))
          return 1;
      }
    }
  }
  return *(_BYTE *)(a1 + 1144) != 0;
}

_QWORD *sub_1DCBB4D18(_QWORD *a1)
{
  Alembic::Abc::v12::OCompoundProperty *v2;

  *a1 = &off_1EA574350;
  v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_1DCBB4D70(_QWORD *a1)
{
  Alembic::Abc::v12::OCompoundProperty *v2;

  *a1 = &off_1EA574350;
  v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  JUMPOUT(0x1DF0D228CLL);
}

void sub_1DCBB4DD8(_QWORD *a1)
{
  sub_1DCBB28B4(a1 + 11);
  MEMORY[0x1DF0D201C](a1 + 8, "");
  sub_1DCBB28B4(a1 + 17);
  MEMORY[0x1DF0D201C](a1 + 14, "");
  sub_1DCBB28B4(a1 + 23);
  MEMORY[0x1DF0D201C](a1 + 20, "");
  sub_1DCBB28B4(a1 + 29);
  MEMORY[0x1DF0D201C](a1 + 26, "");
  sub_1DCBB28B4(a1 + 5);
  JUMPOUT(0x1DF0D201CLL);
}

BOOL sub_1DCBB4E5C(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 40) != 0;
}

uint64_t sub_1DCBB4E88(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 32), "");
  *(_DWORD *)(a1 + 72) = 2;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_1DCB0345C((_QWORD *)(a1 + 80), "");
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 124) = 0x20000007FLL;
  sub_1DCB0345C((_QWORD *)(a1 + 136), "");
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  return a1;
}

void sub_1DCBB4F18(_Unwind_Exception *a1)
{
  uint64_t v1;
  Alembic::Abc::v12::OArrayProperty *v2;
  Alembic::Abc::v12::OArrayProperty *v3;

  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBB4F54(uint64_t a1)
{
  uint64_t result;

  MEMORY[0x1DF0D201C](a1, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 56));
  MEMORY[0x1DF0D201C](a1 + 32, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 104));
  MEMORY[0x1DF0D201C](a1 + 80, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 160));
  result = MEMORY[0x1DF0D201C](a1 + 136, "");
  *(_DWORD *)(a1 + 124) = 127;
  *(_BYTE *)(a1 + 120) = 0;
  return result;
}

void sub_1DCBB4FC8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1DCBB4FC8(a1, *a2);
    sub_1DCBB4FC8(a1, a2[1]);
    sub_1DCBB5010((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1DCBB5010(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 24) = &off_1EA574268;
  v2 = (_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 80) = &unk_1EA574320;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 376));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v2 + 38));
  v2[7] = &off_1EA574380;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v2 + 32));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v2 + 26));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v2 + 20));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v2 + 14));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v2 + 8));
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v2);
  if (*((char *)v2 - 1) < 0)
    operator delete(*(void **)a1);
}

void sub_1DCBB50B0(_QWORD *a1)
{
  *a1 = &off_1EA574268;
  a1[7] = &unk_1EA574320;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 44));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 38));
  a1[7] = &off_1EA574380;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 32));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 26));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 20));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 14));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)a1);
}

_QWORD *sub_1DCBB5130(_QWORD *a1)
{
  Alembic::Abc::v12::OScalarProperty *v2;

  *a1 = &unk_1EA574320;
  v2 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 7);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 31));
  *a1 = &off_1EA574380;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 1));
  return a1;
}

void sub_1DCBB51B4(_QWORD *a1)
{
  *a1 = &off_1EA574268;
  a1[7] = &unk_1EA574320;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 44));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 38));
  a1[7] = &off_1EA574380;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 32));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 26));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 20));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 14));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)a1);
  JUMPOUT(0x1DF0D228CLL);
}

void sub_1DCBB5248(_QWORD *a1)
{
  Alembic::Abc::v12::OScalarProperty *v2;

  *a1 = &unk_1EA574320;
  v2 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 7);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 31));
  *a1 = &off_1EA574380;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 1));
  JUMPOUT(0x1DF0D228CLL);
}

void sub_1DCBB52DC(_QWORD *a1)
{
  sub_1DCBB28B4(a1 + 35);
  MEMORY[0x1DF0D201C](a1 + 32, "");
  sub_1DCBB5420(a1);
}

BOOL sub_1DCBB5314(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(_QWORD *)(a1 + 24))
      goto LABEL_5;
    return 0;
  }
  if (*(_BYTE *)(a1 + 39))
    return 0;
LABEL_5:
  if (!*(_QWORD *)(a1 + 40))
    return 0;
  if (*(char *)(a1 + 279) < 0)
  {
    if (*(_QWORD *)(a1 + 264))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 279))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 280) != 0;
}

_QWORD *sub_1DCBB5360(_QWORD *a1)
{
  Alembic::Abc::v12::OCompoundProperty *v2;

  *a1 = &off_1EA574380;
  v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_1DCBB53B8(_QWORD *a1)
{
  Alembic::Abc::v12::OCompoundProperty *v2;

  *a1 = &off_1EA574380;
  v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  JUMPOUT(0x1DF0D228CLL);
}

void sub_1DCBB5420(_QWORD *a1)
{
  sub_1DCBB28B4(a1 + 11);
  MEMORY[0x1DF0D201C](a1 + 8, "");
  sub_1DCBB28B4(a1 + 17);
  MEMORY[0x1DF0D201C](a1 + 14, "");
  sub_1DCBB28B4(a1 + 23);
  MEMORY[0x1DF0D201C](a1 + 20, "");
  sub_1DCBB28B4(a1 + 29);
  MEMORY[0x1DF0D201C](a1 + 26, "");
  sub_1DCBB28B4(a1 + 5);
  JUMPOUT(0x1DF0D201CLL);
}

BOOL sub_1DCBB54A4(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 40) != 0;
}

void sub_1DCBB54D0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  sub_1DCBB4FC8(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

uint64_t sub_1DCBB5538(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1EA5742D0;
  sub_1DCBB4FC8(a1 + 1120, *(_QWORD **)(a1 + 1128));
  if (*(char *)(a1 + 1119) < 0)
    operator delete(*(void **)(a1 + 1096));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 1048));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 992));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 944));
  if (*(char *)(a1 + 943) < 0)
    operator delete(*(void **)(a1 + 920));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 872));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 824));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 776));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 728));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 680));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 632));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 584));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 536));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 488));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 440));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 248));
  *(_QWORD *)a1 = &off_1EA574350;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  return a1;
}

_QWORD *sub_1DCBB5654(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;
  void *__p;
  _BYTE *v7;

  if (a2[1] == *a2)
    v3 = 0;
  else
    v3 = *a2;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  sub_1DCBB5700(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x30000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_1DCBB5780(a1 + 2, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1DCBB56E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1DCBB5700(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DCAE7964(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DCBB5764(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1DCBB5780(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1DCAE7964(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DCBB57DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1DCBB57F8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  void *__p;
  _BYTE *v7;

  if (a2[1] == *a2)
    v3 = 0;
  else
    v3 = *a2;
  v5 = (a2[1] - *a2) >> 2;
  sub_1DCBB5700(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x100000006;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_1DCBB5780(a1 + 2, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1DCBB587C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBB5898(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v17 = *a2;
  *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  v18 = *a3;
  v19 = *(uint64_t *)((char *)a3 + 5);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 45) = v19;
  *(_QWORD *)(a1 + 40) = v18;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  v20 = *a4;
  v21 = *(uint64_t *)((char *)a4 + 5);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 85) = v21;
  *(_QWORD *)(a1 + 80) = v20;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 96), (const void *)a4[2], a4[3], (a4[3] - a4[2]) >> 3);
  *(_QWORD *)(a1 + 120) = 0xC0000000C0000000;
  *(_DWORD *)(a1 + 128) = -1073741824;
  v22 = *a5;
  v23 = *(uint64_t *)((char *)a5 + 5);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 141) = v23;
  *(_QWORD *)(a1 + 136) = v22;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 152), (const void *)a5[2], a5[3], (a5[3] - a5[2]) >> 3);
  v24 = *a6;
  v25 = *(uint64_t *)((char *)a6 + 5);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 181) = v25;
  *(_QWORD *)(a1 + 176) = v24;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 192), (const void *)a6[2], a6[3], (a6[3] - a6[2]) >> 3);
  v26 = *a7;
  v27 = *(uint64_t *)((char *)a7 + 5);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 221) = v27;
  *(_QWORD *)(a1 + 216) = v26;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 232), (const void *)a7[2], a7[3], (a7[3] - a7[2]) >> 3);
  v28 = *a8;
  *(_QWORD *)(a1 + 261) = *(uint64_t *)((char *)a8 + 5);
  *(_QWORD *)(a1 + 256) = v28;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 272), (const void *)a8[2], a8[3], (a8[3] - a8[2]) >> 3);
  v29 = *a9;
  *(_QWORD *)(a1 + 301) = *(uint64_t *)((char *)a9 + 5);
  *(_QWORD *)(a1 + 296) = v29;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 312), (const void *)a9[2], a9[3], (a9[3] - a9[2]) >> 3);
  v30 = *a10;
  *(_QWORD *)(a1 + 341) = *(uint64_t *)((char *)a10 + 5);
  *(_QWORD *)(a1 + 336) = v30;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 352), (const void *)a10[2], a10[3], (a10[3] - a10[2]) >> 3);
  sub_1DCB0345C((_QWORD *)(a1 + 376), "catmull-clark");
  *(int64x2_t *)(a1 + 400) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 416) = xmmword_1DCC59570;
  *(int64x2_t *)(a1 + 432) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0x30000000ALL;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_QWORD *)(a1 + 496) = 0x20000000ALL;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_QWORD *)(a1 + 536) = 0x100000005;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 568) = 127;
  return a1;
}

void sub_1DCBB5B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _QWORD *v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  v20 = *v17;
  if (*v17)
  {
    v10[45] = v20;
    operator delete(v20);
  }
  v21 = *v19;
  if (*v19)
  {
    v10[40] = v21;
    operator delete(v21);
  }
  v22 = *v18;
  if (*v18)
  {
    v10[35] = v22;
    operator delete(v22);
  }
  v23 = *v16;
  if (*v16)
  {
    v10[30] = v23;
    operator delete(v23);
  }
  v24 = *v15;
  if (*v15)
  {
    v10[25] = v24;
    operator delete(v24);
  }
  v25 = *v14;
  if (*v14)
  {
    v10[20] = v25;
    operator delete(v25);
  }
  v26 = *v13;
  if (*v13)
  {
    v10[13] = v26;
    operator delete(v26);
  }
  v27 = *v12;
  if (*v12)
  {
    v10[8] = v27;
    operator delete(v27);
  }
  v28 = *v11;
  if (*v11)
  {
    v10[3] = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

char *sub_1DCBB5C24(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = result;
  v7 = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 17) = *(_QWORD *)a2;
  *(_QWORD *)(result + 141) = v7;
  if (result + 136 != (char *)a2)
    result = sub_1DCBB25B0(result + 152, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  v8 = *(_QWORD *)(a3 + 5);
  *((_QWORD *)v6 + 22) = *(_QWORD *)a3;
  *(_QWORD *)(v6 + 181) = v8;
  if (v6 + 176 != (char *)a3)
    result = sub_1DCBB25B0(v6 + 192, *(char **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 3);
  v9 = *(_QWORD *)(a4 + 5);
  *((_QWORD *)v6 + 27) = *(_QWORD *)a4;
  *(_QWORD *)(v6 + 221) = v9;
  if (v6 + 216 != (char *)a4)
    return sub_1DCBB25B0(v6 + 232, *(char **)(a4 + 16), *(_QWORD *)(a4 + 24), (uint64_t)(*(_QWORD *)(a4 + 24) - *(_QWORD *)(a4 + 16)) >> 3);
  return result;
}

char *sub_1DCBB5CF0(char *result, uint64_t *a2, uint64_t *a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = result;
  v5 = *a2;
  *(_QWORD *)(result + 261) = *(uint64_t *)((char *)a2 + 5);
  *((_QWORD *)result + 32) = v5;
  if (result + 256 != (char *)a2)
    result = sub_1DCBB25B0(result + 272, (char *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  v6 = *a3;
  *(_QWORD *)(v4 + 301) = *(uint64_t *)((char *)a3 + 5);
  *((_QWORD *)v4 + 37) = v6;
  if (v4 + 296 != (char *)a3)
    return sub_1DCBB25B0(v4 + 312, (char *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  return result;
}

_QWORD *sub_1DCBB5D7C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  void *__p;
  _BYTE *v7;

  if (a2[1] == *a2)
    v3 = 0;
  else
    v3 = *a2;
  v5 = (a2[1] - *a2) >> 3;
  sub_1DCBB5700(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x20000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_1DCBB5780(a1 + 2, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1DCBB5E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1DCBB5E1C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  void *__p;
  _BYTE *v7;

  if (a2[1] == *a2)
    v3 = 0;
  else
    v3 = *a2;
  v5 = (a2[1] - *a2) >> 2;
  sub_1DCBB5700(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x100000005;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_1DCBB5780(a1 + 2, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1DCBB5EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBB5EBC(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *a2;
  *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  v8 = *a3;
  v9 = *(uint64_t *)((char *)a3 + 5);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 45) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  *(_DWORD *)(a1 + 80) = a4;
  return a1;
}

void sub_1DCBB5F50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DCBB5F6C(char *__dst, uint64_t a2, uint64_t a3, char a4, int a5, int a6, uint64_t **a7, uint64_t **a8, uint64_t **a9)
{
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string *v24;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *__p[2];
  uint64_t v29;
  int v30;
  std::string v31;
  uint64_t v32;
  int v33;
  std::string v34;
  uint64_t v35[3];
  int v36;
  std::string v37;
  uint64_t v38[3];

  if (*(char *)(a3 + 23) < 0)
  {
    sub_1DCACA658(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v16 = *(_OWORD *)a3;
    *((_QWORD *)__dst + 2) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  v24 = (std::string *)sub_1DCB0345C((_QWORD *)__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = 0;
  sub_1DCB0345C((_QWORD *)__dst + 10, "");
  *((_DWORD *)__dst + 32) = 2;
  *((_QWORD *)__dst + 13) = 0;
  *((_QWORD *)__dst + 14) = 0;
  __dst[120] = a4;
  *((_DWORD *)__dst + 31) = a5;
  sub_1DCB0345C((_QWORD *)__dst + 17, "");
  *((_QWORD *)__dst + 20) = 0;
  *((_QWORD *)__dst + 21) = 0;
  v17 = *(std::__shared_weak_count **)(a2 + 40);
  v26 = *(_QWORD *)(a2 + 32);
  v27 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  sub_1DCBB6238((char *)__p, &v26, a3, a4, a5, a6, a7, a8, a9);
  if (__dst[23] < 0)
    operator delete(*(void **)__dst);
  *(_OWORD *)__dst = *(_OWORD *)__p;
  *((_QWORD *)__dst + 2) = v29;
  HIBYTE(v29) = 0;
  LOBYTE(__p[0]) = 0;
  *((_DWORD *)__dst + 6) = v30;
  std::string::operator=(v24, &v31);
  sub_1DCB50788((_QWORD *)__dst + 7, &v32);
  *((_DWORD *)__dst + 18) = v33;
  std::string::operator=((std::string *)(__dst + 80), &v34);
  sub_1DCB50788((_QWORD *)__dst + 13, v35);
  *((_QWORD *)__dst + 15) = v35[2];
  *((_DWORD *)__dst + 32) = v36;
  std::string::operator=((std::string *)(__dst + 136), &v37);
  sub_1DCB50788((_QWORD *)__dst + 20, v38);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v36);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v33);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v30);
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return __dst;
}

void sub_1DCBB61D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, Alembic::Abc::v12::OArrayProperty *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  uint64_t v20;
  Alembic::Abc::v12::OArrayProperty *v21;
  Alembic::Abc::v12::OCompoundProperty *v22;

  sub_1DCB0546C((uint64_t)&a18);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v22);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v21);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a11);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(a1);
}

char *sub_1DCBB6238(char *__dst, uint64_t *a2, uint64_t a3, char a4, int a5, int a6, uint64_t **a7, uint64_t **a8, uint64_t **a9)
{
  __int128 v16;
  std::string *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  std::string::size_type v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  std::__shared_weak_count *size;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::string *v75;
  _QWORD *v76;
  std::string *v77;
  _DWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  int v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  int v87;
  uint64_t *v88;
  int v89;
  int v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void *v97;
  std::string v98;
  uint64_t v99[2];
  uint64_t *v100;
  uint64_t **v101;
  __int128 v102;
  std::string v103;
  std::string v104;
  _BYTE __str[32];
  __int128 v106;
  __int128 v107;
  void *v108[2];
  __int128 v109;
  __int128 v110;
  _OWORD v111[9];
  uint64_t v112;
  std::string v113;
  void *__p[2];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  void *v118[2];
  __int128 v119;
  __int128 v120;
  _OWORD v121[9];
  uint64_t v122;
  std::string v123;
  uint64_t *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_1DCACA658(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v16 = *(_OWORD *)a3;
    *((_QWORD *)__dst + 2) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  v78 = __dst + 24;
  v17 = (std::string *)sub_1DCB0345C((_QWORD *)__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  *((_QWORD *)__dst + 7) = 0;
  v76 = __dst + 56;
  v77 = v17;
  *((_QWORD *)__dst + 8) = 0;
  sub_1DCB0345C((_QWORD *)__dst + 10, "");
  *((_DWORD *)__dst + 32) = 2;
  *((_QWORD *)__dst + 13) = 0;
  *((_QWORD *)__dst + 14) = 0;
  __dst[120] = a4;
  *((_DWORD *)__dst + 31) = a5;
  v75 = (std::string *)(__dst + 136);
  sub_1DCB0345C((_QWORD *)__dst + 17, "");
  *((_QWORD *)__dst + 20) = 0;
  *((_QWORD *)__dst + 21) = 0;
  v133 = 0u;
  v134 = 0u;
  v131 = 0u;
  v132 = 0u;
  v18 = (std::__shared_weak_count *)a2[1];
  v129 = *a2;
  v130 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  *(_QWORD *)&v115 = 0;
  __p[1] = 0;
  __p[0] = &__p[1];
  v127 = 0;
  v128 = 0;
  LODWORD(v131) = 2;
  sub_1DCBB20A4((uint64_t)&v131 + 8, (const void ***)__p);
  v133 = 0uLL;
  LODWORD(v134) = 0;
  *(_QWORD *)((char *)&v134 + 4) = 1;
  sub_1DCAD5CA8((uint64_t)__p, (_QWORD *)__p[1]);
  if (v18)
  {
    v21 = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  sub_1DCBB1454(a7, (uint64_t)&v131);
  sub_1DCBB1454(a8, (uint64_t)&v131);
  sub_1DCBB1454(a9, (uint64_t)&v131);
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v23 = (uint64_t **)sub_1DCBB20A4((uint64_t)&v124, (const void ***)&v131 + 1);
  sub_1DCBB6F84(v23, a5);
  sub_1DCB0345C(__p, "isGeomParam");
  sub_1DCB0345C(__str, "true");
  v97 = __p;
  v24 = sub_1DCBB23B4(&v124, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)&v97);
  std::string::operator=((std::string *)(v24 + 7), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (SBYTE7(v115) < 0)
    operator delete(__p[0]);
  memset(&v123, 0, sizeof(v123));
  sub_1DCB0345C(&v123, "float32_t");
  sub_1DCB0345C(__p, "podName");
  *(_QWORD *)__str = __p;
  v25 = sub_1DCBB23B4(&v124, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)__str);
  std::string::operator=((std::string *)(v25 + 7), &v123);
  if (SBYTE7(v115) < 0)
    operator delete(__p[0]);
  v122 = 0;
  v120 = 0u;
  memset(v121, 0, sizeof(v121));
  *(_OWORD *)v118 = 0u;
  v119 = 0u;
  v116 = 0u;
  v117 = 0u;
  *(_OWORD *)__p = 0u;
  v115 = 0u;
  sub_1DCBB71E0((uint64_t)__p);
  std::ostream::operator<<();
  memset(&v113, 0, sizeof(v113));
  std::stringbuf::str();
  sub_1DCB0345C(__str, "podExtent");
  v97 = __str;
  v26 = sub_1DCBB23B4(&v124, (const void **)__str, (uint64_t)&unk_1DCC58300, (__int128 **)&v97);
  std::string::operator=((std::string *)(v26 + 7), &v113);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v112 = 0;
  v110 = 0u;
  memset(v111, 0, sizeof(v111));
  *(_OWORD *)v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  memset(__str, 0, sizeof(__str));
  sub_1DCBB71E0((uint64_t)__str);
  std::ostream::operator<<();
  memset(&v104, 0, sizeof(v104));
  std::stringbuf::str();
  sub_1DCB0345C(&v97, "arrayExtent");
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
  v27 = sub_1DCBB23B4(&v124, (const void **)&v97, (uint64_t)&unk_1DCC58300, (__int128 **)&v103);
  std::string::operator=((std::string *)(v27 + 7), &v104);
  if (v98.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v97);
  sub_1DCB0345C(&v97, "interpretation");
  sub_1DCB0345C(&v103, "");
  *(_QWORD *)&v102 = &v97;
  v28 = sub_1DCBB23B4(&v124, (const void **)&v97, (uint64_t)&unk_1DCC58300, (__int128 **)&v102);
  std::string::operator=((std::string *)(v28 + 7), &v103);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  if (v98.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v97);
  v29 = v131;
  v30 = v133;
  v102 = v133;
  if (*((_QWORD *)&v133 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  if (v30)
  {
    v33 = (void *)*a2;
    v34 = a2[1];
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v97 = v33;
    v98.__r_.__value_.__r.__words[0] = v34;
    (*(void (**)(uint64_t **__return_ptr))(*(_QWORD *)v33 + 24))(&v100);
    (*(void (**)(std::string *__return_ptr))(*v100 + 24))(&v103);
    v37 = (*(uint64_t (**)(std::string::size_type, uint64_t))(*(_QWORD *)v103.__r_.__value_.__l.__data_ + 48))(v103.__r_.__value_.__r.__words[0], v30);
    size = (std::__shared_weak_count *)v103.__r_.__value_.__l.__size_;
    if (v103.__r_.__value_.__l.__size_)
    {
      v39 = (unint64_t *)(v103.__r_.__value_.__l.__size_ + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v41 = (std::__shared_weak_count *)v101;
    if (v101)
    {
      v42 = (unint64_t *)(v101 + 1);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = (std::__shared_weak_count *)v98.__r_.__value_.__r.__words[0];
    if (v98.__r_.__value_.__r.__words[0])
    {
      v45 = (unint64_t *)(v98.__r_.__value_.__r.__words[0] + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }
  else
  {
    v37 = v134;
  }
  if (__dst[120])
  {
    v47 = (std::__shared_weak_count *)a2[1];
    v95 = *a2;
    v96 = v47;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    LODWORD(v103.__r_.__value_.__l.__data_) = 3;
    v103.__r_.__value_.__l.__size_ = (std::string::size_type)&v124;
    LODWORD(v100) = 1;
    LODWORD(v101) = v29;
    MEMORY[0x1DF0D144C](&v97, &v95, a3, &v103, &v100);
    *((_DWORD *)__dst + 32) = (_DWORD)v97;
    std::string::operator=(v75, &v98);
    sub_1DCB50788((_QWORD *)__dst + 20, v99);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v97);
    v50 = v96;
    if (v96)
    {
      v51 = (unint64_t *)&v96->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v90 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_1DCACA658(&v91, *((void **)__dst + 17), *((_QWORD *)__dst + 18));
    }
    else
    {
      v91 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v92 = *((_QWORD *)__dst + 19);
    }
    v59 = *((_QWORD *)__dst + 21);
    v93 = *((_QWORD *)__dst + 20);
    v94 = v59;
    if (v59)
    {
      v60 = (unint64_t *)(v59 + 8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    sub_1DCB0345C(&v103, ".vals");
    LODWORD(v100) = 3;
    v101 = &v124;
    LODWORD(v88) = 1;
    v89 = v29;
    LODWORD(v86) = 2;
    v87 = v37;
    sub_1DCBB7350((uint64_t)&v97, &v90, (uint64_t)&v103, &v100, &v88, &v86);
    *v78 = (_DWORD)v97;
    std::string::operator=(v77, &v98);
    sub_1DCB50788(v76, v99);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v97);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v90);
    v81 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_1DCACA658(&v82, *((void **)__dst + 17), *((_QWORD *)__dst + 18));
    }
    else
    {
      v82 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v83 = *((_QWORD *)__dst + 19);
    }
    v62 = *((_QWORD *)__dst + 21);
    v84 = *((_QWORD *)__dst + 20);
    v85 = v62;
    if (v62)
    {
      v63 = (unint64_t *)(v62 + 8);
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    sub_1DCB0345C(&v103, ".indices");
    LODWORD(v100) = 2;
    LODWORD(v101) = v37;
    LODWORD(v88) = 0;
    v89 = 0;
    LODWORD(v86) = 0;
    v87 = 0;
    sub_1DCBB7928((uint64_t)&v97, &v81, (uint64_t)&v103, &v100, &v88, &v86);
    *((_DWORD *)__dst + 18) = (_DWORD)v97;
    std::string::operator=((std::string *)(__dst + 80), &v98);
    sub_1DCB50788((_QWORD *)__dst + 13, v99);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v97);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v81);
  }
  else
  {
    v53 = (std::__shared_weak_count *)a2[1];
    v79 = *a2;
    v80 = v53;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    LODWORD(v103.__r_.__value_.__l.__data_) = 3;
    v103.__r_.__value_.__l.__size_ = (std::string::size_type)&v124;
    LODWORD(v100) = 1;
    LODWORD(v101) = v29;
    LODWORD(v88) = 2;
    v89 = v37;
    LODWORD(v86) = 0;
    v87 = 0;
    sub_1DCBB7F00((uint64_t)&v97, &v79, a3, (uint64_t **)&v103, &v100, &v88, &v86);
    *v78 = (_DWORD)v97;
    std::string::operator=(v77, &v98);
    sub_1DCB50788(v76, v99);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v97);
    v56 = v80;
    if (v80)
    {
      v57 = (unint64_t *)&v80->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  v68 = (_QWORD *)*MEMORY[0x1E0DE4F60];
  *(_QWORD *)__str = v68;
  v69 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&__str[*(v68 - 3)] = v69;
  v70 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&__str[8] = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v109) < 0)
    operator delete(v108[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0D2238](v111);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  __p[0] = v68;
  *(void **)((char *)__p + *(v68 - 3)) = v69;
  __p[1] = (void *)(v70 + 16);
  if (SHIBYTE(v119) < 0)
    operator delete(v118[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0D2238](v121);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  sub_1DCAD5CA8((uint64_t)&v124, v125);
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
  if (*((_QWORD *)&v133 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v131 + 8, (_QWORD *)v132);
  return __dst;
}

void sub_1DCBB6CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, Alembic::Abc::v12::OArrayProperty *a13, uint64_t a14, uint64_t a15, uint64_t a16, Alembic::Abc::v12::OArrayProperty *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  uint64_t v58;
  Alembic::Abc::v12::OCompoundProperty *v59;
  uint64_t v60;

  sub_1DCB0546C((uint64_t)&a47);
  if (a57 < 0)
    operator delete(__p);
  sub_1DCBB72CC((uint64_t)&a58);
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  sub_1DCBB72CC((uint64_t)&STACK[0x290]);
  if (*(char *)(v60 - 217) < 0)
    operator delete(*(void **)(v60 - 240));
  sub_1DCAD5CA8(v60 - 216, *(_QWORD **)(v60 - 208));
  sub_1DCBB1880(v60 - 160);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v59);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a13);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a17);
  if (*(char *)(v58 + 23) < 0)
    operator delete(*(void **)v58);
  _Unwind_Resume(a1);
}

void sub_1DCBB6F28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
    operator delete(__p);
  JUMPOUT(0x1DCBB6EBCLL);
}

void sub_1DCBB6F40()
{
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  JUMPOUT(0x1DCBB6ED4);
}

void sub_1DCBB6F58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    JUMPOUT(0x1DCBB6EE0);
  JUMPOUT(0x1DCBB6EE4);
}

void sub_1DCBB6F84(uint64_t **a1, int a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  std::string __p;
  void *v9[2];
  char v10;
  void **v11;

  switch(a2)
  {
    case 0:
      sub_1DCB0345C(v9, "geoScope");
      sub_1DCB0345C(&__p, "con");
      v11 = v9;
      v3 = sub_1DCBB23B4(a1, (const void **)v9, (uint64_t)&unk_1DCC58300, (__int128 **)&v11);
      std::string::operator=((std::string *)(v3 + 7), &__p);
      goto LABEL_7;
    case 1:
      sub_1DCB0345C(v9, "geoScope");
      sub_1DCB0345C(&__p, "uni");
      v11 = v9;
      v7 = sub_1DCBB23B4(a1, (const void **)v9, (uint64_t)&unk_1DCC58300, (__int128 **)&v11);
      std::string::operator=((std::string *)(v7 + 7), &__p);
      goto LABEL_7;
    case 2:
      sub_1DCB0345C(v9, "geoScope");
      sub_1DCB0345C(&__p, "var");
      v11 = v9;
      v4 = sub_1DCBB23B4(a1, (const void **)v9, (uint64_t)&unk_1DCC58300, (__int128 **)&v11);
      std::string::operator=((std::string *)(v4 + 7), &__p);
      goto LABEL_7;
    case 3:
      sub_1DCB0345C(v9, "geoScope");
      sub_1DCB0345C(&__p, "vtx");
      v11 = v9;
      v5 = sub_1DCBB23B4(a1, (const void **)v9, (uint64_t)&unk_1DCC58300, (__int128 **)&v11);
      std::string::operator=((std::string *)(v5 + 7), &__p);
      goto LABEL_7;
    case 4:
      sub_1DCB0345C(v9, "geoScope");
      sub_1DCB0345C(&__p, "fvr");
      v11 = v9;
      v6 = sub_1DCBB23B4(a1, (const void **)v9, (uint64_t)&unk_1DCC58300, (__int128 **)&v11);
      std::string::operator=((std::string *)(v6 + 7), &__p);
LABEL_7:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v10 < 0)
        operator delete(v9[0]);
      break;
    default:
      return;
  }
}

void sub_1DCBB718C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBB71E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1DCBB72A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1DF0D2238](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBB72CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0D2238](a1 + 112);
  return a1;
}

uint64_t sub_1DCBB7350(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  *(_DWORD *)a1 = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v22 = *((_QWORD *)a2 + 4);
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = *a2;
  LODWORD(v20) = 1;
  v21 = v15;
  sub_1DCBB7458((_DWORD *)a1, &v22, a3, &v20, a4, a5, a6);
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return a1;
}

void sub_1DCBB743C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  Alembic::Abc::v12::OArrayProperty *v3;
  va_list va;

  va_start(va, a3);
  sub_1DCB0546C((uint64_t)va);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  _Unwind_Resume(a1);
}

void sub_1DCBB7458(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *exception;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  _OWORD v40[2];
  __int128 v41;
  _OWORD v42[16];
  uint64_t v43;
  _DWORD *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  *((_QWORD *)&v41 + 1) = 0;
  *(_QWORD *)&v42[0] = 0;
  *(_QWORD *)&v41 = (char *)&v41 + 8;
  LODWORD(v48) = 2;
  v46 = 0;
  v47 = 0;
  sub_1DCBB20A4((uint64_t)&v48 + 8, (const void ***)&v41);
  v50 = 0uLL;
  LODWORD(v51) = 0;
  *(_QWORD *)((char *)&v51 + 4) = 1;
  sub_1DCAD5CA8((uint64_t)&v41, *((_QWORD **)&v41 + 1));
  sub_1DCBB1454(a4, (uint64_t)&v48);
  sub_1DCBB1454(a5, (uint64_t)&v48);
  sub_1DCBB1454(a6, (uint64_t)&v48);
  sub_1DCBB1454(a7, (uint64_t)&v48);
  *a1 = v48;
  v44 = a1;
  v45 = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    v43 = 0;
    v41 = 0u;
    memset(v42, 0, sizeof(v42));
    sub_1DCB86A2C((uint64_t)&v41);
    sub_1DCB03734(v42, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    memset(v40, 0, sizeof(v40));
    std::stringbuf::str();
    sub_1DCBB1F8C(v40, (__int128 *)__p);
    if (v39 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v35 = sub_1DCBB2028(exception, (uint64_t)v40);
    __cxa_throw(v35, (struct type_info *)&unk_1EA573D98, (void (*)(void *))sub_1DCBB14D4);
  }
  v41 = 0uLL;
  *(_QWORD *)&v42[0] = 0;
  sub_1DCBB20A4((uint64_t)&v41, (const void ***)&v48 + 1);
  v14 = v50;
  v40[0] = v50;
  if (*((_QWORD *)&v50 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *a2;
  if (v14)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v17 + 24))(&v36);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v36 + 24))(__p);
    v18 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p[0] + 48))(__p[0], v14);
    v19 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v20 = (unint64_t *)((char *)__p[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = *a2;
  }
  else
  {
    v18 = v51;
  }
  v36 = 0x10000000ALL;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t))(*(_QWORD *)v17 + 104))(__p, v17, a3, &v41, &v36, v18);
  sub_1DCB4FEF4((uint64_t)(a1 + 8), (__int128 *)__p);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v26 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v40[0] + 1);
  if (*((_QWORD *)&v40[0] + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v40[0] + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v41, *((_QWORD **)&v41 + 1));
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v48 + 8, (_QWORD *)v49);
}

void sub_1DCBB77F0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  std::exception v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_1DCBB2070((std::exception *)va);
  sub_1DCB28D6C((uint64_t)va1);
  __cxa_begin_catch(a1);
  sub_1DCBB28B4((_QWORD *)(v8 + 32));
  MEMORY[0x1DF0D201C](v8 + 8, "");
  if (a2 == 2)
    sub_1DCBB1814(v9 - 176);
  else
    sub_1DCBB17A8(v9 - 176);
  __cxa_end_catch();
  JUMPOUT(0x1DCBB76E4);
}

void sub_1DCBB78D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCBB1880(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBB7928(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  *(_DWORD *)a1 = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v22 = *((_QWORD *)a2 + 4);
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = *a2;
  LODWORD(v20) = 1;
  v21 = v15;
  sub_1DCBB7A30((_DWORD *)a1, &v22, a3, &v20, a4, a5, a6);
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return a1;
}

void sub_1DCBB7A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  Alembic::Abc::v12::OArrayProperty *v3;
  va_list va;

  va_start(va, a3);
  sub_1DCB0546C((uint64_t)va);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  _Unwind_Resume(a1);
}

void sub_1DCBB7A30(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *exception;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  _OWORD v40[2];
  __int128 v41;
  _OWORD v42[16];
  uint64_t v43;
  _DWORD *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  *((_QWORD *)&v41 + 1) = 0;
  *(_QWORD *)&v42[0] = 0;
  *(_QWORD *)&v41 = (char *)&v41 + 8;
  LODWORD(v48) = 2;
  v46 = 0;
  v47 = 0;
  sub_1DCBB20A4((uint64_t)&v48 + 8, (const void ***)&v41);
  v50 = 0uLL;
  LODWORD(v51) = 0;
  *(_QWORD *)((char *)&v51 + 4) = 1;
  sub_1DCAD5CA8((uint64_t)&v41, *((_QWORD **)&v41 + 1));
  sub_1DCBB1454(a4, (uint64_t)&v48);
  sub_1DCBB1454(a5, (uint64_t)&v48);
  sub_1DCBB1454(a6, (uint64_t)&v48);
  sub_1DCBB1454(a7, (uint64_t)&v48);
  *a1 = v48;
  v44 = a1;
  v45 = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    v43 = 0;
    v41 = 0u;
    memset(v42, 0, sizeof(v42));
    sub_1DCB86A2C((uint64_t)&v41);
    sub_1DCB03734(v42, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    memset(v40, 0, sizeof(v40));
    std::stringbuf::str();
    sub_1DCBB1F8C(v40, (__int128 *)__p);
    if (v39 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v35 = sub_1DCBB2028(exception, (uint64_t)v40);
    __cxa_throw(v35, (struct type_info *)&unk_1EA573D98, (void (*)(void *))sub_1DCBB14D4);
  }
  v41 = 0uLL;
  *(_QWORD *)&v42[0] = 0;
  sub_1DCBB20A4((uint64_t)&v41, (const void ***)&v48 + 1);
  v14 = v50;
  v40[0] = v50;
  if (*((_QWORD *)&v50 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *a2;
  if (v14)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v17 + 24))(&v36);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v36 + 24))(__p);
    v18 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p[0] + 48))(__p[0], v14);
    v19 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v20 = (unint64_t *)((char *)__p[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = *a2;
  }
  else
  {
    v18 = v51;
  }
  v36 = 0x100000005;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t))(*(_QWORD *)v17 + 104))(__p, v17, a3, &v41, &v36, v18);
  sub_1DCB4FEF4((uint64_t)(a1 + 8), (__int128 *)__p);
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v26 = (unint64_t *)((char *)__p[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v40[0] + 1);
  if (*((_QWORD *)&v40[0] + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v40[0] + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v41, *((_QWORD **)&v41 + 1));
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v48 + 8, (_QWORD *)v49);
}

void sub_1DCBB7DC8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  std::exception v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_1DCBB2070((std::exception *)va);
  sub_1DCB28D6C((uint64_t)va1);
  __cxa_begin_catch(a1);
  sub_1DCBB28B4((_QWORD *)(v8 + 32));
  MEMORY[0x1DF0D201C](v8 + 8, "");
  if (a2 == 2)
    sub_1DCBB1814(v9 - 176);
  else
    sub_1DCBB17A8(v9 - 176);
  __cxa_end_catch();
  JUMPOUT(0x1DCBB7CBCLL);
}

void sub_1DCBB7EAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCBB1880(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBB7F00(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_1DCBB7458((_DWORD *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_1DCBB7FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Alembic::Abc::v12::OArrayProperty *v9;

  sub_1DCB0546C((uint64_t)&a9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCBB8010(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  void *__p;
  _BYTE *v7;

  if (a2[1] == *a2)
    v3 = 0;
  else
    v3 = *a2;
  v5 = (a2[1] - *a2) >> 2;
  sub_1DCBB5700(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x10000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_1DCBB5780(a1 + 2, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1DCBB8094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBB80B0(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *a2;
  *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  v8 = *a3;
  v9 = *(uint64_t *)((char *)a3 + 5);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 45) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  *(_DWORD *)(a1 + 80) = a4;
  return a1;
}

void sub_1DCBB8144(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DCBB8160(char *__dst, uint64_t a2, uint64_t a3, char a4, int a5, int a6, uint64_t **a7, uint64_t **a8, uint64_t **a9)
{
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string *v24;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *__p[2];
  uint64_t v29;
  int v30;
  std::string v31;
  uint64_t v32;
  int v33;
  std::string v34;
  uint64_t v35[3];
  int v36;
  std::string v37;
  uint64_t v38[3];

  if (*(char *)(a3 + 23) < 0)
  {
    sub_1DCACA658(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v16 = *(_OWORD *)a3;
    *((_QWORD *)__dst + 2) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  v24 = (std::string *)sub_1DCB0345C((_QWORD *)__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = 0;
  sub_1DCB0345C((_QWORD *)__dst + 10, "");
  *((_DWORD *)__dst + 32) = 2;
  *((_QWORD *)__dst + 13) = 0;
  *((_QWORD *)__dst + 14) = 0;
  __dst[120] = a4;
  *((_DWORD *)__dst + 31) = a5;
  sub_1DCB0345C((_QWORD *)__dst + 17, "");
  *((_QWORD *)__dst + 20) = 0;
  *((_QWORD *)__dst + 21) = 0;
  v17 = *(std::__shared_weak_count **)(a2 + 40);
  v26 = *(_QWORD *)(a2 + 32);
  v27 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  sub_1DCBB842C((char *)__p, &v26, a3, a4, a5, a6, a7, a8, a9);
  if (__dst[23] < 0)
    operator delete(*(void **)__dst);
  *(_OWORD *)__dst = *(_OWORD *)__p;
  *((_QWORD *)__dst + 2) = v29;
  HIBYTE(v29) = 0;
  LOBYTE(__p[0]) = 0;
  *((_DWORD *)__dst + 6) = v30;
  std::string::operator=(v24, &v31);
  sub_1DCB50788((_QWORD *)__dst + 7, &v32);
  *((_DWORD *)__dst + 18) = v33;
  std::string::operator=((std::string *)(__dst + 80), &v34);
  sub_1DCB50788((_QWORD *)__dst + 13, v35);
  *((_QWORD *)__dst + 15) = v35[2];
  *((_DWORD *)__dst + 32) = v36;
  std::string::operator=((std::string *)(__dst + 136), &v37);
  sub_1DCB50788((_QWORD *)__dst + 20, v38);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v36);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v33);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v30);
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return __dst;
}

void sub_1DCBB83C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, Alembic::Abc::v12::OArrayProperty *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  uint64_t v20;
  Alembic::Abc::v12::OArrayProperty *v21;
  Alembic::Abc::v12::OCompoundProperty *v22;

  sub_1DCB0546C((uint64_t)&a18);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v22);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v21);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a11);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(a1);
}

char *sub_1DCBB842C(char *__dst, uint64_t *a2, uint64_t a3, char a4, int a5, int a6, uint64_t **a7, uint64_t **a8, uint64_t **a9)
{
  __int128 v16;
  std::string *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  std::string::size_type v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  std::__shared_weak_count *size;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::string *v75;
  _QWORD *v76;
  std::string *v77;
  _DWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  int v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  int v87;
  uint64_t *v88;
  int v89;
  int v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void *v97;
  std::string v98;
  uint64_t v99[2];
  uint64_t *v100;
  uint64_t **v101;
  __int128 v102;
  std::string v103;
  std::string v104;
  _BYTE __str[32];
  __int128 v106;
  __int128 v107;
  void *v108[2];
  __int128 v109;
  __int128 v110;
  _OWORD v111[9];
  uint64_t v112;
  std::string v113;
  void *__p[2];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  void *v118[2];
  __int128 v119;
  __int128 v120;
  _OWORD v121[9];
  uint64_t v122;
  std::string v123;
  uint64_t *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_1DCACA658(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v16 = *(_OWORD *)a3;
    *((_QWORD *)__dst + 2) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  v78 = __dst + 24;
  v17 = (std::string *)sub_1DCB0345C((_QWORD *)__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  *((_QWORD *)__dst + 7) = 0;
  v76 = __dst + 56;
  v77 = v17;
  *((_QWORD *)__dst + 8) = 0;
  sub_1DCB0345C((_QWORD *)__dst + 10, "");
  *((_DWORD *)__dst + 32) = 2;
  *((_QWORD *)__dst + 13) = 0;
  *((_QWORD *)__dst + 14) = 0;
  __dst[120] = a4;
  *((_DWORD *)__dst + 31) = a5;
  v75 = (std::string *)(__dst + 136);
  sub_1DCB0345C((_QWORD *)__dst + 17, "");
  *((_QWORD *)__dst + 20) = 0;
  *((_QWORD *)__dst + 21) = 0;
  v133 = 0u;
  v134 = 0u;
  v131 = 0u;
  v132 = 0u;
  v18 = (std::__shared_weak_count *)a2[1];
  v129 = *a2;
  v130 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  *(_QWORD *)&v115 = 0;
  __p[1] = 0;
  __p[0] = &__p[1];
  v127 = 0;
  v128 = 0;
  LODWORD(v131) = 2;
  sub_1DCBB20A4((uint64_t)&v131 + 8, (const void ***)__p);
  v133 = 0uLL;
  LODWORD(v134) = 0;
  *(_QWORD *)((char *)&v134 + 4) = 1;
  sub_1DCAD5CA8((uint64_t)__p, (_QWORD *)__p[1]);
  if (v18)
  {
    v21 = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  sub_1DCBB1454(a7, (uint64_t)&v131);
  sub_1DCBB1454(a8, (uint64_t)&v131);
  sub_1DCBB1454(a9, (uint64_t)&v131);
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v23 = (uint64_t **)sub_1DCBB20A4((uint64_t)&v124, (const void ***)&v131 + 1);
  sub_1DCBB6F84(v23, a5);
  sub_1DCB0345C(__p, "isGeomParam");
  sub_1DCB0345C(__str, "true");
  v97 = __p;
  v24 = sub_1DCBB23B4(&v124, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)&v97);
  std::string::operator=((std::string *)(v24 + 7), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (SBYTE7(v115) < 0)
    operator delete(__p[0]);
  memset(&v123, 0, sizeof(v123));
  sub_1DCB0345C(&v123, "float32_t");
  sub_1DCB0345C(__p, "podName");
  *(_QWORD *)__str = __p;
  v25 = sub_1DCBB23B4(&v124, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)__str);
  std::string::operator=((std::string *)(v25 + 7), &v123);
  if (SBYTE7(v115) < 0)
    operator delete(__p[0]);
  v122 = 0;
  v120 = 0u;
  memset(v121, 0, sizeof(v121));
  *(_OWORD *)v118 = 0u;
  v119 = 0u;
  v116 = 0u;
  v117 = 0u;
  *(_OWORD *)__p = 0u;
  v115 = 0u;
  sub_1DCBB71E0((uint64_t)__p);
  std::ostream::operator<<();
  memset(&v113, 0, sizeof(v113));
  std::stringbuf::str();
  sub_1DCB0345C(__str, "podExtent");
  v97 = __str;
  v26 = sub_1DCBB23B4(&v124, (const void **)__str, (uint64_t)&unk_1DCC58300, (__int128 **)&v97);
  std::string::operator=((std::string *)(v26 + 7), &v113);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v112 = 0;
  v110 = 0u;
  memset(v111, 0, sizeof(v111));
  *(_OWORD *)v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  memset(__str, 0, sizeof(__str));
  sub_1DCBB71E0((uint64_t)__str);
  std::ostream::operator<<();
  memset(&v104, 0, sizeof(v104));
  std::stringbuf::str();
  sub_1DCB0345C(&v97, "arrayExtent");
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
  v27 = sub_1DCBB23B4(&v124, (const void **)&v97, (uint64_t)&unk_1DCC58300, (__int128 **)&v103);
  std::string::operator=((std::string *)(v27 + 7), &v104);
  if (v98.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v97);
  sub_1DCB0345C(&v97, "interpretation");
  sub_1DCB0345C(&v103, "vector");
  *(_QWORD *)&v102 = &v97;
  v28 = sub_1DCBB23B4(&v124, (const void **)&v97, (uint64_t)&unk_1DCC58300, (__int128 **)&v102);
  std::string::operator=((std::string *)(v28 + 7), &v103);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  if (v98.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v97);
  v29 = v131;
  v30 = v133;
  v102 = v133;
  if (*((_QWORD *)&v133 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  if (v30)
  {
    v33 = (void *)*a2;
    v34 = a2[1];
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v97 = v33;
    v98.__r_.__value_.__r.__words[0] = v34;
    (*(void (**)(uint64_t **__return_ptr))(*(_QWORD *)v33 + 24))(&v100);
    (*(void (**)(std::string *__return_ptr))(*v100 + 24))(&v103);
    v37 = (*(uint64_t (**)(std::string::size_type, uint64_t))(*(_QWORD *)v103.__r_.__value_.__l.__data_ + 48))(v103.__r_.__value_.__r.__words[0], v30);
    size = (std::__shared_weak_count *)v103.__r_.__value_.__l.__size_;
    if (v103.__r_.__value_.__l.__size_)
    {
      v39 = (unint64_t *)(v103.__r_.__value_.__l.__size_ + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v41 = (std::__shared_weak_count *)v101;
    if (v101)
    {
      v42 = (unint64_t *)(v101 + 1);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = (std::__shared_weak_count *)v98.__r_.__value_.__r.__words[0];
    if (v98.__r_.__value_.__r.__words[0])
    {
      v45 = (unint64_t *)(v98.__r_.__value_.__r.__words[0] + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }
  else
  {
    v37 = v134;
  }
  if (__dst[120])
  {
    v47 = (std::__shared_weak_count *)a2[1];
    v95 = *a2;
    v96 = v47;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    LODWORD(v103.__r_.__value_.__l.__data_) = 3;
    v103.__r_.__value_.__l.__size_ = (std::string::size_type)&v124;
    LODWORD(v100) = 1;
    LODWORD(v101) = v29;
    MEMORY[0x1DF0D144C](&v97, &v95, a3, &v103, &v100);
    *((_DWORD *)__dst + 32) = (_DWORD)v97;
    std::string::operator=(v75, &v98);
    sub_1DCB50788((_QWORD *)__dst + 20, v99);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v97);
    v50 = v96;
    if (v96)
    {
      v51 = (unint64_t *)&v96->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v90 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_1DCACA658(&v91, *((void **)__dst + 17), *((_QWORD *)__dst + 18));
    }
    else
    {
      v91 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v92 = *((_QWORD *)__dst + 19);
    }
    v59 = *((_QWORD *)__dst + 21);
    v93 = *((_QWORD *)__dst + 20);
    v94 = v59;
    if (v59)
    {
      v60 = (unint64_t *)(v59 + 8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    sub_1DCB0345C(&v103, ".vals");
    LODWORD(v100) = 3;
    v101 = &v124;
    LODWORD(v88) = 1;
    v89 = v29;
    LODWORD(v86) = 2;
    v87 = v37;
    sub_1DCBB9178((uint64_t)&v97, &v90, (uint64_t)&v103, &v100, &v88, &v86);
    *v78 = (_DWORD)v97;
    std::string::operator=(v77, &v98);
    sub_1DCB50788(v76, v99);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v97);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v90);
    v81 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_1DCACA658(&v82, *((void **)__dst + 17), *((_QWORD *)__dst + 18));
    }
    else
    {
      v82 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v83 = *((_QWORD *)__dst + 19);
    }
    v62 = *((_QWORD *)__dst + 21);
    v84 = *((_QWORD *)__dst + 20);
    v85 = v62;
    if (v62)
    {
      v63 = (unint64_t *)(v62 + 8);
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    sub_1DCB0345C(&v103, ".indices");
    LODWORD(v100) = 2;
    LODWORD(v101) = v37;
    LODWORD(v88) = 0;
    v89 = 0;
    LODWORD(v86) = 0;
    v87 = 0;
    sub_1DCBB7928((uint64_t)&v97, &v81, (uint64_t)&v103, &v100, &v88, &v86);
    *((_DWORD *)__dst + 18) = (_DWORD)v97;
    std::string::operator=((std::string *)(__dst + 80), &v98);
    sub_1DCB50788((_QWORD *)__dst + 13, v99);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v97);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v81);
  }
  else
  {
    v53 = (std::__shared_weak_count *)a2[1];
    v79 = *a2;
    v80 = v53;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    LODWORD(v103.__r_.__value_.__l.__data_) = 3;
    v103.__r_.__value_.__l.__size_ = (std::string::size_type)&v124;
    LODWORD(v100) = 1;
    LODWORD(v101) = v29;
    LODWORD(v88) = 2;
    v89 = v37;
    LODWORD(v86) = 0;
    v87 = 0;
    sub_1DCBB9804((uint64_t)&v97, &v79, a3, (uint64_t **)&v103, &v100, &v88, &v86);
    *v78 = (_DWORD)v97;
    std::string::operator=(v77, &v98);
    sub_1DCB50788(v76, v99);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v97);
    v56 = v80;
    if (v80)
    {
      v57 = (unint64_t *)&v80->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  v68 = (_QWORD *)*MEMORY[0x1E0DE4F60];
  *(_QWORD *)__str = v68;
  v69 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&__str[*(v68 - 3)] = v69;
  v70 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&__str[8] = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v109) < 0)
    operator delete(v108[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0D2238](v111);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  __p[0] = v68;
  *(void **)((char *)__p + *(v68 - 3)) = v69;
  __p[1] = (void *)(v70 + 16);
  if (SHIBYTE(v119) < 0)
    operator delete(v118[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0D2238](v121);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  sub_1DCAD5CA8((uint64_t)&v124, v125);
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
  if (*((_QWORD *)&v133 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v131 + 8, (_QWORD *)v132);
  return __dst;
}

void sub_1DCBB8EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, Alembic::Abc::v12::OArrayProperty *a13, uint64_t a14, uint64_t a15, uint64_t a16, Alembic::Abc::v12::OArrayProperty *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  uint64_t v58;
  Alembic::Abc::v12::OCompoundProperty *v59;
  uint64_t v60;

  sub_1DCB0546C((uint64_t)&a47);
  if (a57 < 0)
    operator delete(__p);
  sub_1DCBB72CC((uint64_t)&a58);
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  sub_1DCBB72CC((uint64_t)&STACK[0x290]);
  if (*(char *)(v60 - 217) < 0)
    operator delete(*(void **)(v60 - 240));
  sub_1DCAD5CA8(v60 - 216, *(_QWORD **)(v60 - 208));
  sub_1DCBB1880(v60 - 160);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v59);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a13);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a17);
  if (*(char *)(v58 + 23) < 0)
    operator delete(*(void **)v58);
  _Unwind_Resume(a1);
}

void sub_1DCBB911C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
    operator delete(__p);
  JUMPOUT(0x1DCBB90B0);
}

void sub_1DCBB9134()
{
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  JUMPOUT(0x1DCBB90C8);
}

void sub_1DCBB914C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    JUMPOUT(0x1DCBB90D4);
  JUMPOUT(0x1DCBB90D8);
}

uint64_t sub_1DCBB9178(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  *(_DWORD *)a1 = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v22 = *((_QWORD *)a2 + 4);
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = *a2;
  LODWORD(v20) = 1;
  v21 = v15;
  sub_1DCBB9280((_DWORD *)a1, &v22, a3, &v20, a4, a5, a6);
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return a1;
}

void sub_1DCBB9264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  Alembic::Abc::v12::OArrayProperty *v3;
  va_list va;

  va_start(va, a3);
  sub_1DCB0546C((uint64_t)va);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  _Unwind_Resume(a1);
}

void sub_1DCBB9280(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *exception;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::string __str;
  void *__p[2];
  __int128 v41;
  __int128 v42;
  _OWORD v43[16];
  uint64_t v44;
  _DWORD *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  *((_QWORD *)&v42 + 1) = 0;
  *(_QWORD *)&v43[0] = 0;
  *(_QWORD *)&v42 = (char *)&v42 + 8;
  LODWORD(v49) = 2;
  v47 = 0;
  v48 = 0;
  sub_1DCBB20A4((uint64_t)&v49 + 8, (const void ***)&v42);
  v51 = 0uLL;
  LODWORD(v52) = 0;
  *(_QWORD *)((char *)&v52 + 4) = 1;
  sub_1DCAD5CA8((uint64_t)&v42, *((_QWORD **)&v42 + 1));
  sub_1DCBB1454(a4, (uint64_t)&v49);
  sub_1DCBB1454(a5, (uint64_t)&v49);
  sub_1DCBB1454(a6, (uint64_t)&v49);
  sub_1DCBB1454(a7, (uint64_t)&v49);
  *a1 = v49;
  v45 = a1;
  v46 = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    v44 = 0;
    v42 = 0u;
    memset(v43, 0, sizeof(v43));
    sub_1DCB86A2C((uint64_t)&v42);
    sub_1DCB03734(v43, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    *(_OWORD *)__p = 0u;
    v41 = 0u;
    std::stringbuf::str();
    sub_1DCBB1F8C(__p, (__int128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v36 = sub_1DCBB2028(exception, (uint64_t)__p);
    __cxa_throw(v36, (struct type_info *)&unk_1EA573D98, (void (*)(void *))sub_1DCBB14D4);
  }
  v42 = 0uLL;
  *(_QWORD *)&v43[0] = 0;
  sub_1DCBB20A4((uint64_t)&v42, (const void ***)&v49 + 1);
  sub_1DCB0345C(__p, "interpretation");
  sub_1DCB0345C(&__str, "vector");
  v37 = (uint64_t)__p;
  v14 = sub_1DCBB23B4((uint64_t **)&v42, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)&v37);
  std::string::operator=((std::string *)(v14 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SBYTE7(v41) < 0)
    operator delete(__p[0]);
  v15 = v51;
  *(_OWORD *)__p = v51;
  if (*((_QWORD *)&v51 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *a2;
  if (v15)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v18 + 24))(&v37);
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v37 + 24))(&__str);
    v19 = (*(uint64_t (**)(std::string::size_type, uint64_t))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 48))(__str.__r_.__value_.__r.__words[0], v15);
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v21 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v23 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v18 = *a2;
  }
  else
  {
    v19 = v52;
  }
  v37 = 0x30000000ALL;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t))(*(_QWORD *)v18 + 104))(&__str, v18, a3, &v42, &v37, v19);
  sub_1DCB4FEF4((uint64_t)(a1 + 8), (__int128 *)&__str);
  v26 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v27 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v30 = (unint64_t *)((char *)__p[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v42, *((_QWORD **)&v42 + 1));
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v49 + 8, (_QWORD *)v50);
}

void sub_1DCBB9688(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;

  sub_1DCBB2070((std::exception *)&__p);
  sub_1DCB28D6C((uint64_t)&a25);
  __cxa_begin_catch(a1);
  sub_1DCBB28B4((_QWORD *)(v26 + 32));
  MEMORY[0x1DF0D201C](v26 + 8, "");
  if (a2 == 2)
    sub_1DCBB1814(v27 - 192);
  else
    sub_1DCBB17A8(v27 - 192);
  __cxa_end_catch();
  JUMPOUT(0x1DCBB957CLL);
}

void sub_1DCBB97CC()
{
  uint64_t v0;

  sub_1DCBB1880(v0 - 160);
  JUMPOUT(0x1DCBB97FCLL);
}

uint64_t sub_1DCBB9804(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_1DCBB9280((_DWORD *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_1DCBB98EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Alembic::Abc::v12::OArrayProperty *v9;

  sub_1DCB0546C((uint64_t)&a9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCBB990C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;
  void *__p;
  _BYTE *v7;

  if (a2[1] == *a2)
    v3 = 0;
  else
    v3 = *a2;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  sub_1DCBB5700(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x30000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_1DCBB5780(a1 + 2, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1DCBB999C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBB99B8(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *a2;
  *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  v8 = *a3;
  v9 = *(uint64_t *)((char *)a3 + 5);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 45) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  *(_DWORD *)(a1 + 80) = a4;
  return a1;
}

void sub_1DCBB9A4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DCBB9A68(char *__dst, uint64_t a2, uint64_t a3, char a4, int a5, int a6, uint64_t **a7, uint64_t **a8, uint64_t **a9)
{
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string *v24;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *__p[2];
  uint64_t v29;
  int v30;
  std::string v31;
  uint64_t v32;
  int v33;
  std::string v34;
  uint64_t v35[3];
  int v36;
  std::string v37;
  uint64_t v38[3];

  if (*(char *)(a3 + 23) < 0)
  {
    sub_1DCACA658(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v16 = *(_OWORD *)a3;
    *((_QWORD *)__dst + 2) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  v24 = (std::string *)sub_1DCB0345C((_QWORD *)__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = 0;
  sub_1DCB0345C((_QWORD *)__dst + 10, "");
  *((_DWORD *)__dst + 32) = 2;
  *((_QWORD *)__dst + 13) = 0;
  *((_QWORD *)__dst + 14) = 0;
  __dst[120] = a4;
  *((_DWORD *)__dst + 31) = a5;
  sub_1DCB0345C((_QWORD *)__dst + 17, "");
  *((_QWORD *)__dst + 20) = 0;
  *((_QWORD *)__dst + 21) = 0;
  v17 = *(std::__shared_weak_count **)(a2 + 40);
  v26 = *(_QWORD *)(a2 + 32);
  v27 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  sub_1DCBB9D34((char *)__p, &v26, a3, a4, a5, a6, a7, a8, a9);
  if (__dst[23] < 0)
    operator delete(*(void **)__dst);
  *(_OWORD *)__dst = *(_OWORD *)__p;
  *((_QWORD *)__dst + 2) = v29;
  HIBYTE(v29) = 0;
  LOBYTE(__p[0]) = 0;
  *((_DWORD *)__dst + 6) = v30;
  std::string::operator=(v24, &v31);
  sub_1DCB50788((_QWORD *)__dst + 7, &v32);
  *((_DWORD *)__dst + 18) = v33;
  std::string::operator=((std::string *)(__dst + 80), &v34);
  sub_1DCB50788((_QWORD *)__dst + 13, v35);
  *((_QWORD *)__dst + 15) = v35[2];
  *((_DWORD *)__dst + 32) = v36;
  std::string::operator=((std::string *)(__dst + 136), &v37);
  sub_1DCB50788((_QWORD *)__dst + 20, v38);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v36);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v33);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v30);
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return __dst;
}

void sub_1DCBB9CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, Alembic::Abc::v12::OArrayProperty *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  uint64_t v20;
  Alembic::Abc::v12::OArrayProperty *v21;
  Alembic::Abc::v12::OCompoundProperty *v22;

  sub_1DCB0546C((uint64_t)&a18);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v22);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v21);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a11);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(a1);
}

char *sub_1DCBB9D34(char *__dst, uint64_t *a2, uint64_t a3, char a4, int a5, int a6, uint64_t **a7, uint64_t **a8, uint64_t **a9)
{
  __int128 v16;
  std::string *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  std::string::size_type v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  std::__shared_weak_count *size;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::string *v75;
  _QWORD *v76;
  std::string *v77;
  _DWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  int v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  int v87;
  uint64_t *v88;
  int v89;
  int v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void *v97;
  std::string v98;
  uint64_t v99[2];
  uint64_t *v100;
  uint64_t **v101;
  __int128 v102;
  std::string v103;
  std::string v104;
  _BYTE __str[32];
  __int128 v106;
  __int128 v107;
  void *v108[2];
  __int128 v109;
  __int128 v110;
  _OWORD v111[9];
  uint64_t v112;
  std::string v113;
  void *__p[2];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  void *v118[2];
  __int128 v119;
  __int128 v120;
  _OWORD v121[9];
  uint64_t v122;
  std::string v123;
  uint64_t *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_1DCACA658(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v16 = *(_OWORD *)a3;
    *((_QWORD *)__dst + 2) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  v78 = __dst + 24;
  v17 = (std::string *)sub_1DCB0345C((_QWORD *)__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  *((_QWORD *)__dst + 7) = 0;
  v76 = __dst + 56;
  v77 = v17;
  *((_QWORD *)__dst + 8) = 0;
  sub_1DCB0345C((_QWORD *)__dst + 10, "");
  *((_DWORD *)__dst + 32) = 2;
  *((_QWORD *)__dst + 13) = 0;
  *((_QWORD *)__dst + 14) = 0;
  __dst[120] = a4;
  *((_DWORD *)__dst + 31) = a5;
  v75 = (std::string *)(__dst + 136);
  sub_1DCB0345C((_QWORD *)__dst + 17, "");
  *((_QWORD *)__dst + 20) = 0;
  *((_QWORD *)__dst + 21) = 0;
  v133 = 0u;
  v134 = 0u;
  v131 = 0u;
  v132 = 0u;
  v18 = (std::__shared_weak_count *)a2[1];
  v129 = *a2;
  v130 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  *(_QWORD *)&v115 = 0;
  __p[1] = 0;
  __p[0] = &__p[1];
  v127 = 0;
  v128 = 0;
  LODWORD(v131) = 2;
  sub_1DCBB20A4((uint64_t)&v131 + 8, (const void ***)__p);
  v133 = 0uLL;
  LODWORD(v134) = 0;
  *(_QWORD *)((char *)&v134 + 4) = 1;
  sub_1DCAD5CA8((uint64_t)__p, (_QWORD *)__p[1]);
  if (v18)
  {
    v21 = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  sub_1DCBB1454(a7, (uint64_t)&v131);
  sub_1DCBB1454(a8, (uint64_t)&v131);
  sub_1DCBB1454(a9, (uint64_t)&v131);
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v23 = (uint64_t **)sub_1DCBB20A4((uint64_t)&v124, (const void ***)&v131 + 1);
  sub_1DCBB6F84(v23, a5);
  sub_1DCB0345C(__p, "isGeomParam");
  sub_1DCB0345C(__str, "true");
  v97 = __p;
  v24 = sub_1DCBB23B4(&v124, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)&v97);
  std::string::operator=((std::string *)(v24 + 7), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (SBYTE7(v115) < 0)
    operator delete(__p[0]);
  memset(&v123, 0, sizeof(v123));
  sub_1DCB0345C(&v123, "float32_t");
  sub_1DCB0345C(__p, "podName");
  *(_QWORD *)__str = __p;
  v25 = sub_1DCBB23B4(&v124, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)__str);
  std::string::operator=((std::string *)(v25 + 7), &v123);
  if (SBYTE7(v115) < 0)
    operator delete(__p[0]);
  v122 = 0;
  v120 = 0u;
  memset(v121, 0, sizeof(v121));
  *(_OWORD *)v118 = 0u;
  v119 = 0u;
  v116 = 0u;
  v117 = 0u;
  *(_OWORD *)__p = 0u;
  v115 = 0u;
  sub_1DCBB71E0((uint64_t)__p);
  std::ostream::operator<<();
  memset(&v113, 0, sizeof(v113));
  std::stringbuf::str();
  sub_1DCB0345C(__str, "podExtent");
  v97 = __str;
  v26 = sub_1DCBB23B4(&v124, (const void **)__str, (uint64_t)&unk_1DCC58300, (__int128 **)&v97);
  std::string::operator=((std::string *)(v26 + 7), &v113);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v112 = 0;
  v110 = 0u;
  memset(v111, 0, sizeof(v111));
  *(_OWORD *)v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  memset(__str, 0, sizeof(__str));
  sub_1DCBB71E0((uint64_t)__str);
  std::ostream::operator<<();
  memset(&v104, 0, sizeof(v104));
  std::stringbuf::str();
  sub_1DCB0345C(&v97, "arrayExtent");
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
  v27 = sub_1DCBB23B4(&v124, (const void **)&v97, (uint64_t)&unk_1DCC58300, (__int128 **)&v103);
  std::string::operator=((std::string *)(v27 + 7), &v104);
  if (v98.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v97);
  sub_1DCB0345C(&v97, "interpretation");
  sub_1DCB0345C(&v103, "vector");
  *(_QWORD *)&v102 = &v97;
  v28 = sub_1DCBB23B4(&v124, (const void **)&v97, (uint64_t)&unk_1DCC58300, (__int128 **)&v102);
  std::string::operator=((std::string *)(v28 + 7), &v103);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  if (v98.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v97);
  v29 = v131;
  v30 = v133;
  v102 = v133;
  if (*((_QWORD *)&v133 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  if (v30)
  {
    v33 = (void *)*a2;
    v34 = a2[1];
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v97 = v33;
    v98.__r_.__value_.__r.__words[0] = v34;
    (*(void (**)(uint64_t **__return_ptr))(*(_QWORD *)v33 + 24))(&v100);
    (*(void (**)(std::string *__return_ptr))(*v100 + 24))(&v103);
    v37 = (*(uint64_t (**)(std::string::size_type, uint64_t))(*(_QWORD *)v103.__r_.__value_.__l.__data_ + 48))(v103.__r_.__value_.__r.__words[0], v30);
    size = (std::__shared_weak_count *)v103.__r_.__value_.__l.__size_;
    if (v103.__r_.__value_.__l.__size_)
    {
      v39 = (unint64_t *)(v103.__r_.__value_.__l.__size_ + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v41 = (std::__shared_weak_count *)v101;
    if (v101)
    {
      v42 = (unint64_t *)(v101 + 1);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = (std::__shared_weak_count *)v98.__r_.__value_.__r.__words[0];
    if (v98.__r_.__value_.__r.__words[0])
    {
      v45 = (unint64_t *)(v98.__r_.__value_.__r.__words[0] + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }
  else
  {
    v37 = v134;
  }
  if (__dst[120])
  {
    v47 = (std::__shared_weak_count *)a2[1];
    v95 = *a2;
    v96 = v47;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    LODWORD(v103.__r_.__value_.__l.__data_) = 3;
    v103.__r_.__value_.__l.__size_ = (std::string::size_type)&v124;
    LODWORD(v100) = 1;
    LODWORD(v101) = v29;
    MEMORY[0x1DF0D144C](&v97, &v95, a3, &v103, &v100);
    *((_DWORD *)__dst + 32) = (_DWORD)v97;
    std::string::operator=(v75, &v98);
    sub_1DCB50788((_QWORD *)__dst + 20, v99);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v97);
    v50 = v96;
    if (v96)
    {
      v51 = (unint64_t *)&v96->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v90 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_1DCACA658(&v91, *((void **)__dst + 17), *((_QWORD *)__dst + 18));
    }
    else
    {
      v91 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v92 = *((_QWORD *)__dst + 19);
    }
    v59 = *((_QWORD *)__dst + 21);
    v93 = *((_QWORD *)__dst + 20);
    v94 = v59;
    if (v59)
    {
      v60 = (unint64_t *)(v59 + 8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    sub_1DCB0345C(&v103, ".vals");
    LODWORD(v100) = 3;
    v101 = &v124;
    LODWORD(v88) = 1;
    v89 = v29;
    LODWORD(v86) = 2;
    v87 = v37;
    sub_1DCBBAA80((uint64_t)&v97, &v90, (uint64_t)&v103, &v100, &v88, &v86);
    *v78 = (_DWORD)v97;
    std::string::operator=(v77, &v98);
    sub_1DCB50788(v76, v99);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v97);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v90);
    v81 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_1DCACA658(&v82, *((void **)__dst + 17), *((_QWORD *)__dst + 18));
    }
    else
    {
      v82 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v83 = *((_QWORD *)__dst + 19);
    }
    v62 = *((_QWORD *)__dst + 21);
    v84 = *((_QWORD *)__dst + 20);
    v85 = v62;
    if (v62)
    {
      v63 = (unint64_t *)(v62 + 8);
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    sub_1DCB0345C(&v103, ".indices");
    LODWORD(v100) = 2;
    LODWORD(v101) = v37;
    LODWORD(v88) = 0;
    v89 = 0;
    LODWORD(v86) = 0;
    v87 = 0;
    sub_1DCBB7928((uint64_t)&v97, &v81, (uint64_t)&v103, &v100, &v88, &v86);
    *((_DWORD *)__dst + 18) = (_DWORD)v97;
    std::string::operator=((std::string *)(__dst + 80), &v98);
    sub_1DCB50788((_QWORD *)__dst + 13, v99);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v97);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v81);
  }
  else
  {
    v53 = (std::__shared_weak_count *)a2[1];
    v79 = *a2;
    v80 = v53;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    LODWORD(v103.__r_.__value_.__l.__data_) = 3;
    v103.__r_.__value_.__l.__size_ = (std::string::size_type)&v124;
    LODWORD(v100) = 1;
    LODWORD(v101) = v29;
    LODWORD(v88) = 2;
    v89 = v37;
    LODWORD(v86) = 0;
    v87 = 0;
    sub_1DCBBB10C((uint64_t)&v97, &v79, a3, (uint64_t **)&v103, &v100, &v88, &v86);
    *v78 = (_DWORD)v97;
    std::string::operator=(v77, &v98);
    sub_1DCB50788(v76, v99);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v97);
    v56 = v80;
    if (v80)
    {
      v57 = (unint64_t *)&v80->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  v68 = (_QWORD *)*MEMORY[0x1E0DE4F60];
  *(_QWORD *)__str = v68;
  v69 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&__str[*(v68 - 3)] = v69;
  v70 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&__str[8] = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v109) < 0)
    operator delete(v108[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0D2238](v111);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  __p[0] = v68;
  *(void **)((char *)__p + *(v68 - 3)) = v69;
  __p[1] = (void *)(v70 + 16);
  if (SHIBYTE(v119) < 0)
    operator delete(v118[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0D2238](v121);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  sub_1DCAD5CA8((uint64_t)&v124, v125);
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
  if (*((_QWORD *)&v133 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v131 + 8, (_QWORD *)v132);
  return __dst;
}

void sub_1DCBBA7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, Alembic::Abc::v12::OArrayProperty *a13, uint64_t a14, uint64_t a15, uint64_t a16, Alembic::Abc::v12::OArrayProperty *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  uint64_t v58;
  Alembic::Abc::v12::OCompoundProperty *v59;
  uint64_t v60;

  sub_1DCB0546C((uint64_t)&a47);
  if (a57 < 0)
    operator delete(__p);
  sub_1DCBB72CC((uint64_t)&a58);
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  sub_1DCBB72CC((uint64_t)&STACK[0x290]);
  if (*(char *)(v60 - 217) < 0)
    operator delete(*(void **)(v60 - 240));
  sub_1DCAD5CA8(v60 - 216, *(_QWORD **)(v60 - 208));
  sub_1DCBB1880(v60 - 160);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v59);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a13);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a17);
  if (*(char *)(v58 + 23) < 0)
    operator delete(*(void **)v58);
  _Unwind_Resume(a1);
}

void sub_1DCBBAA24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
    operator delete(__p);
  JUMPOUT(0x1DCBBA9B8);
}

void sub_1DCBBAA3C()
{
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  JUMPOUT(0x1DCBBA9D0);
}

void sub_1DCBBAA54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    JUMPOUT(0x1DCBBA9DCLL);
  JUMPOUT(0x1DCBBA9E0);
}

uint64_t sub_1DCBBAA80(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  *(_DWORD *)a1 = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v22 = *((_QWORD *)a2 + 4);
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = *a2;
  LODWORD(v20) = 1;
  v21 = v15;
  sub_1DCBBAB88((_DWORD *)a1, &v22, a3, &v20, a4, a5, a6);
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return a1;
}

void sub_1DCBBAB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  Alembic::Abc::v12::OArrayProperty *v3;
  va_list va;

  va_start(va, a3);
  sub_1DCB0546C((uint64_t)va);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  _Unwind_Resume(a1);
}

void sub_1DCBBAB88(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *exception;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::string __str;
  void *__p[2];
  __int128 v41;
  __int128 v42;
  _OWORD v43[16];
  uint64_t v44;
  _DWORD *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  *((_QWORD *)&v42 + 1) = 0;
  *(_QWORD *)&v43[0] = 0;
  *(_QWORD *)&v42 = (char *)&v42 + 8;
  LODWORD(v49) = 2;
  v47 = 0;
  v48 = 0;
  sub_1DCBB20A4((uint64_t)&v49 + 8, (const void ***)&v42);
  v51 = 0uLL;
  LODWORD(v52) = 0;
  *(_QWORD *)((char *)&v52 + 4) = 1;
  sub_1DCAD5CA8((uint64_t)&v42, *((_QWORD **)&v42 + 1));
  sub_1DCBB1454(a4, (uint64_t)&v49);
  sub_1DCBB1454(a5, (uint64_t)&v49);
  sub_1DCBB1454(a6, (uint64_t)&v49);
  sub_1DCBB1454(a7, (uint64_t)&v49);
  *a1 = v49;
  v45 = a1;
  v46 = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    v44 = 0;
    v42 = 0u;
    memset(v43, 0, sizeof(v43));
    sub_1DCB86A2C((uint64_t)&v42);
    sub_1DCB03734(v43, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    *(_OWORD *)__p = 0u;
    v41 = 0u;
    std::stringbuf::str();
    sub_1DCBB1F8C(__p, (__int128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v36 = sub_1DCBB2028(exception, (uint64_t)__p);
    __cxa_throw(v36, (struct type_info *)&unk_1EA573D98, (void (*)(void *))sub_1DCBB14D4);
  }
  v42 = 0uLL;
  *(_QWORD *)&v43[0] = 0;
  sub_1DCBB20A4((uint64_t)&v42, (const void ***)&v49 + 1);
  sub_1DCB0345C(__p, "interpretation");
  sub_1DCB0345C(&__str, "vector");
  v37 = (uint64_t)__p;
  v14 = sub_1DCBB23B4((uint64_t **)&v42, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)&v37);
  std::string::operator=((std::string *)(v14 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SBYTE7(v41) < 0)
    operator delete(__p[0]);
  v15 = v51;
  *(_OWORD *)__p = v51;
  if (*((_QWORD *)&v51 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *a2;
  if (v15)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v18 + 24))(&v37);
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v37 + 24))(&__str);
    v19 = (*(uint64_t (**)(std::string::size_type, uint64_t))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 48))(__str.__r_.__value_.__r.__words[0], v15);
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v21 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v23 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v18 = *a2;
  }
  else
  {
    v19 = v52;
  }
  v37 = 0x20000000ALL;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t))(*(_QWORD *)v18 + 104))(&__str, v18, a3, &v42, &v37, v19);
  sub_1DCB4FEF4((uint64_t)(a1 + 8), (__int128 *)&__str);
  v26 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v27 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v30 = (unint64_t *)((char *)__p[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v42, *((_QWORD **)&v42 + 1));
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v49 + 8, (_QWORD *)v50);
}

void sub_1DCBBAF90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;

  sub_1DCBB2070((std::exception *)&__p);
  sub_1DCB28D6C((uint64_t)&a25);
  __cxa_begin_catch(a1);
  sub_1DCBB28B4((_QWORD *)(v26 + 32));
  MEMORY[0x1DF0D201C](v26 + 8, "");
  if (a2 == 2)
    sub_1DCBB1814(v27 - 192);
  else
    sub_1DCBB17A8(v27 - 192);
  __cxa_end_catch();
  JUMPOUT(0x1DCBBAE84);
}

void sub_1DCBBB0D4()
{
  uint64_t v0;

  sub_1DCBB1880(v0 - 160);
  JUMPOUT(0x1DCBBB104);
}

uint64_t sub_1DCBBB10C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)a1 = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_1DCBBAB88((_DWORD *)a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_1DCBBB1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Alembic::Abc::v12::OArrayProperty *v9;

  sub_1DCB0546C((uint64_t)&a9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBBB214(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(void **)(a1 + 544);
  if (v2)
  {
    *(_QWORD *)(a1 + 552) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 504);
  if (v3)
  {
    *(_QWORD *)(a1 + 512) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 464);
  if (v4)
  {
    *(_QWORD *)(a1 + 472) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(_QWORD *)(a1 + 360) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 312);
  if (v6)
  {
    *(_QWORD *)(a1 + 320) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 272);
  if (v7)
  {
    *(_QWORD *)(a1 + 280) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 232);
  if (v8)
  {
    *(_QWORD *)(a1 + 240) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 192);
  if (v9)
  {
    *(_QWORD *)(a1 + 200) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 152);
  if (v10)
  {
    *(_QWORD *)(a1 + 160) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 96);
  if (v11)
  {
    *(_QWORD *)(a1 + 104) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 56);
  if (v12)
  {
    *(_QWORD *)(a1 + 64) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(_QWORD *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

char *sub_1DCBBB304(char *result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 26) = *(_QWORD *)a2;
  *(_QWORD *)(result + 213) = v4;
  if (result + 208 == (char *)a2)
  {
    v6 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(result + 253) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)result + 31) = v6;
  }
  else
  {
    sub_1DCBB25B0(result + 224, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
    v5 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(v3 + 253) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)v3 + 31) = v5;
    result = sub_1DCBB25B0(v3 + 264, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  }
  *((_DWORD *)v3 + 72) = *(_DWORD *)(a2 + 80);
  return result;
}

_BYTE *sub_1DCBBB394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  std::string v22;
  uint64_t v23[4];

  v23[2] = a1 + 8;
  v23[3] = (uint64_t)"OGeomBaseSchema::getArbGeomParams()";
  v4 = *(char *)(a1 + 183);
  if (v4 < 0)
  {
    if (!*(_QWORD *)(a1 + 168))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 183))
  {
LABEL_5:
    if (*(_QWORD *)(a1 + 184))
      goto LABEL_17;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 40);
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_1DCB0345C(__p, ".arbGeomParams");
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  MEMORY[0x1DF0D144C](&v21, &v19, __p, v16, v15);
  *(_DWORD *)(a1 + 152) = v21;
  std::string::operator=((std::string *)(a1 + 160), &v22);
  sub_1DCB50788((_QWORD *)(a1 + 184), v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LOBYTE(v4) = *(_BYTE *)(a1 + 183);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 152);
  result = (_BYTE *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    result = sub_1DCACA658(result, *(void **)(a1 + 160), *(_QWORD *)(a1 + 168));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 176);
  }
  v12 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_1DCBBB518(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_1DCBB1814(v23 - 48);
  else
    sub_1DCBB17A8(v23 - 48);
  __cxa_end_catch();
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)v22 = 0u;
  *(_DWORD *)v22 = 2;
  sub_1DCB0345C((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x1DCBBB504);
}

void sub_1DCBBB5C0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1DCBBB5E0(Alembic::Abc::v12::OObject *a1)
{
  *(_QWORD *)a1 = &off_1EA574288;
  sub_1DCBBC90C((uint64_t)a1 + 56);
  Alembic::Abc::v12::OObject::~OObject(a1);
}

uint64_t sub_1DCBBB610(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  _DWORD *v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *exception;
  _QWORD *v47;
  _DWORD v48[4];
  int v49;
  __int128 **v50;
  _DWORD v51[4];
  _DWORD v52[4];
  void *v53[2];
  char v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *__p[2];
  _OWORD v58[16];
  uint64_t v59;
  void **v60;
  _QWORD *v61[2];
  __int128 v62;
  __int128 __str;
  __int128 __str_16;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  _DWORD *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;

  *(_DWORD *)(a1 + 8) = 2;
  v12 = (_DWORD *)(a1 + 8);
  sub_1DCB0345C((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1EA574288;
  sub_1DCBBC2A4(a1 + 56);
  v79 = 0u;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v13 = *(_DWORD *)(a2 + 8);
  __p[1] = 0;
  *(_QWORD *)&v58[0] = 0;
  __p[0] = &__p[1];
  v74 = 0;
  v75 = 0;
  LODWORD(v76) = v13;
  sub_1DCBB20A4((uint64_t)&v76 + 8, (const void ***)__p);
  v78 = 0uLL;
  LODWORD(v79) = 0;
  *(_QWORD *)((char *)&v79 + 4) = 1;
  sub_1DCAD5CA8((uint64_t)__p, (_QWORD *)__p[1]);
  sub_1DCBB1454(a4, (uint64_t)&v76);
  sub_1DCBB1454(a5, (uint64_t)&v76);
  sub_1DCBB1454(a6, (uint64_t)&v76);
  *v12 = v76;
  v72 = v12;
  v73 = "OSchemaObject::OSchemaObject( OObject)";
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(std::__shared_weak_count **)(a2 + 48);
  v70 = v15;
  v71 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (!v15)
  {
    v59 = 0;
    *(_OWORD *)__p = 0u;
    memset(v58, 0, sizeof(v58));
    sub_1DCB86A2C((uint64_t)__p);
    sub_1DCB03734(v58, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    __str = 0u;
    __str_16 = 0u;
    std::stringbuf::str();
    sub_1DCBB1F8C(&__str, &v68);
    if (SHIBYTE(v69) < 0)
      operator delete((void *)v68);
    exception = __cxa_allocate_exception(0x20uLL);
    v47 = sub_1DCBB2028(exception, (uint64_t)&__str);
    __cxa_throw(v47, (struct type_info *)&unk_1EA573D98, (void (*)(void *))sub_1DCBB14D4);
  }
  v68 = 0uLL;
  v69 = 0;
  sub_1DCBB20A4((uint64_t)&v68, (const void ***)&v76 + 1);
  if (DWORD2(v79) == 1)
  {
    v18 = 1;
  }
  else
  {
    sub_1DCB0345C(__p, "schema");
    sub_1DCB0345C(&__str, "AbcGeom_PolyMesh_v1");
    v60 = __p;
    v19 = sub_1DCBB23B4((uint64_t **)&v68, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)&v60);
    std::string::operator=((std::string *)(v19 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0)
      operator delete((void *)__str);
    if (SBYTE7(v58[0]) < 0)
      operator delete(__p[0]);
    sub_1DCB0345C(__p, "schemaObjTitle");
    sub_1DCBBBE7C((std::string *)&__str);
    v60 = __p;
    v20 = sub_1DCBB23B4((uint64_t **)&v68, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)&v60);
    std::string::operator=((std::string *)(v20 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0)
      operator delete((void *)__str);
    if (SBYTE7(v58[0]) < 0)
      operator delete(__p[0]);
    sub_1DCB0345C(__p, "schemaBaseType");
    sub_1DCB0345C(&__str, "AbcGeom_GeomBase_v1");
    v60 = __p;
    v21 = sub_1DCBB23B4((uint64_t **)&v68, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)&v60);
    std::string::operator=((std::string *)(v21 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0)
      operator delete((void *)__str);
    if (SBYTE7(v58[0]) < 0)
      operator delete(__p[0]);
    v18 = 0;
  }
  v67 = 0;
  v65 = 0u;
  v66 = 0u;
  __str = 0u;
  __str_16 = 0u;
  sub_1DCBB2504(&__str, a3, (const void ***)&v68);
  (*(void (**)(void **__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v15 + 80))(__p, v15, &__str);
  sub_1DCB4FEF4(a1 + 40, (__int128 *)__p);
  v22 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v23 = (unint64_t *)((char *)__p[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v78;
  v62 = v78;
  if (*((_QWORD *)&v78 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if (v25)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v70 + 24))(__p);
    v28 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)__p[0] + 48))(__p[0], v25);
    v29 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v30 = (unint64_t *)((char *)__p[1] + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    v28 = v79;
  }
  v61[1] = 0;
  v61[0] = 0;
  v60 = (void **)v61;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 40))(&v55);
  sub_1DCB0345C(v53, ".geom");
  v32 = *v12;
  v52[0] = 1;
  v52[2] = v32;
  v51[0] = 2;
  v51[2] = v28;
  v49 = 3;
  v50 = (__int128 **)&v60;
  v48[0] = 6;
  v48[2] = v18;
  MEMORY[0x1DF0D1518](__p, &v55, v53, v52, v51, &v49, v48);
  sub_1DCBBBF58(a1 + 56, (uint64_t)__p);
  sub_1DCBBC90C((uint64_t)__p);
  if (v54 < 0)
    operator delete(v53[0]);
  v33 = v56;
  if (v56)
  {
    v34 = (unint64_t *)&v56->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v60, v61[0]);
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v66, *((_QWORD **)&v66 + 1));
  if (SHIBYTE(v65) < 0)
    operator delete(*((void **)&__str_16 + 1));
  if (SBYTE7(__str_16) < 0)
    operator delete((void *)__str);
  sub_1DCAD5CA8((uint64_t)&v68, *((_QWORD **)&v68 + 1));
  v39 = v71;
  if (v71)
  {
    v40 = (unint64_t *)&v71->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v76 + 8, (_QWORD *)v77);
  return a1;
}

void sub_1DCBBBC80(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  va_list __p;

  va_start(__p, a16);
  sub_1DCBB2070((std::exception *)&STACK[0x400]);
  sub_1DCB28D6C((uint64_t)__p);
  sub_1DCB0546C(v17 - 208);
  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_1DCBBC228(v16);
  sub_1DCBBC228(v16);
}

void sub_1DCBBBDF0()
{
  uint64_t v0;

  sub_1DCBB17A8(v0 - 192);
  __cxa_end_catch();
  JUMPOUT(0x1DCBBBB70);
}

void sub_1DCBBBE0C()
{
  __cxa_end_catch();
  JUMPOUT(0x1DCBBBE5CLL);
}

void sub_1DCBBBE18()
{
  __cxa_end_catch();
  JUMPOUT(0x1DCBBBE5CLL);
}

void sub_1DCBBBE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24)
{
  uint64_t v24;

  sub_1DCB0546C(v24 - 176);
  sub_1DCAD5CA8((uint64_t)&a23, a24);
  JUMPOUT(0x1DCBBBE64);
}

void sub_1DCBBBE50()
{
  JUMPOUT(0x1DCBBBE6CLL);
}

void sub_1DCBBBE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Alembic::Abc::v12::OObject *v9;
  uint64_t v10;

  sub_1DCBB1880(v10 - 160);
  sub_1DCBBC90C(a9);
  Alembic::Abc::v12::OObject::~OObject(v9);
  _Unwind_Resume(a1);
}

void sub_1DCBBBE7C(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_1DCB0345C(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_PolyMesh_v1");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1DCBBBF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBBBF58(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;
  void **v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  __int128 v10;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  sub_1DCB50788((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  sub_1DCB50788((_QWORD *)(a1 + 88), (uint64_t *)(a2 + 88));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  sub_1DCB50788((_QWORD *)(a1 + 136), (uint64_t *)(a2 + 136));
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  sub_1DCB50788((_QWORD *)(a1 + 184), (uint64_t *)(a2 + 184));
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  sub_1DCB50788((_QWORD *)(a1 + 232), (uint64_t *)(a2 + 232));
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  sub_1DCB50788((_QWORD *)(a1 + 280), (uint64_t *)(a2 + 280));
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  sub_1DCB50788((_QWORD *)(a1 + 328), (uint64_t *)(a2 + 328));
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  sub_1DCB50788((_QWORD *)(a1 + 376), (uint64_t *)(a2 + 376));
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  sub_1DCB50788((_QWORD *)(a1 + 424), (uint64_t *)(a2 + 424));
  sub_1DCBB54D0(a1 + 440, (_QWORD *)(a2 + 440));
  v4 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 487) = 0;
  *(_BYTE *)(a2 + 464) = 0;
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  std::string::operator=((std::string *)(a1 + 496), (const std::string *)(a2 + 496));
  sub_1DCB50788((_QWORD *)(a1 + 520), (uint64_t *)(a2 + 520));
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a2 + 536);
  std::string::operator=((std::string *)(a1 + 544), (const std::string *)(a2 + 544));
  sub_1DCB50788((_QWORD *)(a1 + 568), (uint64_t *)(a2 + 568));
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_DWORD *)(a1 + 592) = *(_DWORD *)(a2 + 592);
  std::string::operator=((std::string *)(a1 + 600), (const std::string *)(a2 + 600));
  sub_1DCB50788((_QWORD *)(a1 + 624), (uint64_t *)(a2 + 624));
  v6 = (void **)(a1 + 640);
  if (*(char *)(a1 + 663) < 0)
    operator delete(*v6);
  v7 = *(_OWORD *)(a2 + 640);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  *(_OWORD *)v6 = v7;
  *(_BYTE *)(a2 + 663) = 0;
  *(_BYTE *)(a2 + 640) = 0;
  *(_DWORD *)(a1 + 664) = *(_DWORD *)(a2 + 664);
  std::string::operator=((std::string *)(a1 + 672), (const std::string *)(a2 + 672));
  sub_1DCB50788((_QWORD *)(a1 + 696), (uint64_t *)(a2 + 696));
  *(_DWORD *)(a1 + 712) = *(_DWORD *)(a2 + 712);
  std::string::operator=((std::string *)(a1 + 720), (const std::string *)(a2 + 720));
  sub_1DCB50788((_QWORD *)(a1 + 744), (uint64_t *)(a2 + 744));
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
  *(_DWORD *)(a1 + 768) = *(_DWORD *)(a2 + 768);
  std::string::operator=((std::string *)(a1 + 776), (const std::string *)(a2 + 776));
  sub_1DCB50788((_QWORD *)(a1 + 800), (uint64_t *)(a2 + 800));
  v8 = (void **)(a1 + 816);
  if (*(char *)(a1 + 839) < 0)
    operator delete(*v8);
  v9 = *(_OWORD *)(a2 + 816);
  *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
  *(_OWORD *)v8 = v9;
  *(_BYTE *)(a2 + 839) = 0;
  *(_BYTE *)(a2 + 816) = 0;
  v10 = *(_OWORD *)(a2 + 840);
  *(_DWORD *)(a1 + 856) = *(_DWORD *)(a2 + 856);
  *(_OWORD *)(a1 + 840) = v10;
  return a1;
}

void sub_1DCBBC228(uint64_t a1)
{
  sub_1DCBBC598(a1 + 56);
}

void sub_1DCBBC240()
{
  uint64_t v0;

  sub_1DCBB28B4((_QWORD *)(v0 + 40));
  JUMPOUT(0x1DF0D201CLL);
}

void sub_1DCBBC260(Alembic::Abc::v12::OObject *a1)
{
  *(_QWORD *)a1 = &off_1EA574288;
  sub_1DCBBC90C((uint64_t)a1 + 56);
  Alembic::Abc::v12::OObject::~OObject(a1);
  JUMPOUT(0x1DF0D228CLL);
}

uint64_t sub_1DCBBC2A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1DCBBC40C(a1);
  *(_QWORD *)v2 = &unk_1EA5743E0;
  *(_DWORD *)(v2 + 248) = 2;
  sub_1DCB0345C((_QWORD *)(v2 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 400), "");
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 440) = a1 + 448;
  sub_1DCBB4E88(a1 + 464);
  sub_1DCBBC840(a1 + 640);
  *(_QWORD *)(a1 + 848) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_BYTE *)(a1 + 840) = 0;
  return a1;
}

void sub_1DCBBC388(_Unwind_Exception *a1)
{
  _QWORD *v1;
  Alembic::Abc::v12::OArrayProperty *v2;
  uint64_t v3;
  _QWORD **v4;
  uint64_t v5;

  v5 = v3;
  sub_1DCBB2FF8(v5);
  sub_1DCBB4FC8((uint64_t)(v1 + 55), *v4);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 49));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 43));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_1DCBBC51C(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBBC404()
{
  JUMPOUT(0x1DCBBC3F4);
}

uint64_t sub_1DCBBC40C(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1EA5743B0;
  *(_DWORD *)(a1 + 56) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_1DCB0345C((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_1DCB0345C((_QWORD *)(a1 + 160), "");
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  return a1;
}

void sub_1DCBBC4D8(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OCompoundProperty *v1;
  Alembic::Abc::v12::OScalarProperty *v2;
  Alembic::Abc::v12::OScalarProperty *v3;
  Alembic::Abc::v12::OCompoundProperty *v4;

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCBBC51C(_QWORD *a1)
{
  Alembic::Abc::v12::OCompoundProperty *v2;

  *a1 = &off_1EA5743B0;
  v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_1DCBBC574(uint64_t a1)
{
  sub_1DCBBC90C(a1);
  JUMPOUT(0x1DF0D228CLL);
}

void sub_1DCBBC598(uint64_t a1)
{
  sub_1DCBB28B4((_QWORD *)(a1 + 280));
  MEMORY[0x1DF0D201C](a1 + 256, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 328));
  MEMORY[0x1DF0D201C](a1 + 304, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 376));
  MEMORY[0x1DF0D201C](a1 + 352, "");
  sub_1DCBB28B4((_QWORD *)(a1 + 424));
  MEMORY[0x1DF0D201C](a1 + 400, "");
  sub_1DCBB4F54(a1 + 464);
  sub_1DCBB4F54(a1 + 640);
  sub_1DCBB4FC8(a1 + 440, *(_QWORD **)(a1 + 448));
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 440) = a1 + 448;
  sub_1DCBBC790((_QWORD *)a1);
}

uint64_t sub_1DCBBC638(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return *(_BYTE *)(a1 + 840) != 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return *(_BYTE *)(a1 + 840) != 0;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    if (*(char *)(a1 + 279) < 0)
    {
      if (*(_QWORD *)(a1 + 264))
        return *(_BYTE *)(a1 + 840) != 0;
    }
    else if (*(_BYTE *)(a1 + 279))
    {
      return *(_BYTE *)(a1 + 840) != 0;
    }
    if (*(_QWORD *)(a1 + 280))
    {
      if (*(char *)(a1 + 375) < 0)
      {
        if (*(_QWORD *)(a1 + 360))
          return *(_BYTE *)(a1 + 840) != 0;
      }
      else if (*(_BYTE *)(a1 + 375))
      {
        return *(_BYTE *)(a1 + 840) != 0;
      }
      if (*(_QWORD *)(a1 + 376))
      {
        if (*(char *)(a1 + 423) < 0)
        {
          if (*(_QWORD *)(a1 + 408))
            return *(_BYTE *)(a1 + 840) != 0;
        }
        else if (*(_BYTE *)(a1 + 423))
        {
          return *(_BYTE *)(a1 + 840) != 0;
        }
        if (*(_QWORD *)(a1 + 424))
          return 1;
      }
    }
  }
  return *(_BYTE *)(a1 + 840) != 0;
}

_QWORD *sub_1DCBBC6D0(_QWORD *a1)
{
  Alembic::Abc::v12::OCompoundProperty *v2;

  *a1 = &off_1EA5743B0;
  v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_1DCBBC728(_QWORD *a1)
{
  Alembic::Abc::v12::OCompoundProperty *v2;

  *a1 = &off_1EA5743B0;
  v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  JUMPOUT(0x1DF0D228CLL);
}

void sub_1DCBBC790(_QWORD *a1)
{
  sub_1DCBB28B4(a1 + 11);
  MEMORY[0x1DF0D201C](a1 + 8, "");
  sub_1DCBB28B4(a1 + 17);
  MEMORY[0x1DF0D201C](a1 + 14, "");
  sub_1DCBB28B4(a1 + 23);
  MEMORY[0x1DF0D201C](a1 + 20, "");
  sub_1DCBB28B4(a1 + 29);
  MEMORY[0x1DF0D201C](a1 + 26, "");
  sub_1DCBB28B4(a1 + 5);
  JUMPOUT(0x1DF0D201CLL);
}

BOOL sub_1DCBBC814(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 40) != 0;
}

uint64_t sub_1DCBBC840(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 32), "");
  *(_DWORD *)(a1 + 72) = 2;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_1DCB0345C((_QWORD *)(a1 + 80), "");
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 124) = 0x20000007FLL;
  sub_1DCB0345C((_QWORD *)(a1 + 136), "");
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  return a1;
}

void sub_1DCBBC8D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  Alembic::Abc::v12::OArrayProperty *v2;
  Alembic::Abc::v12::OArrayProperty *v3;

  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBBC90C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1EA5743E0;
  if (*(char *)(a1 + 839) < 0)
    operator delete(*(void **)(a1 + 816));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 768));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 712));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 664));
  if (*(char *)(a1 + 663) < 0)
    operator delete(*(void **)(a1 + 640));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 592));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 536));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 488));
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  sub_1DCBB4FC8(a1 + 440, *(_QWORD **)(a1 + 448));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 248));
  *(_QWORD *)a1 = &off_1EA5743B0;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  return a1;
}

uint64_t sub_1DCBBC9FC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v11 = *a2;
  *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  v12 = *a3;
  v13 = *(uint64_t *)((char *)a3 + 5);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 45) = v13;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  v14 = *a4;
  v15 = *(uint64_t *)((char *)a4 + 5);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 85) = v15;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 96), (const void *)a4[2], a4[3], (a4[3] - a4[2]) >> 3);
  *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 136) = xmmword_1DCC59570;
  *(int64x2_t *)(a1 + 152) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0x30000000ALL;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v16 = *(_QWORD *)(a5 + 5);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)a5;
  *(_QWORD *)(a1 + 213) = v16;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 224), *(const void **)(a5 + 16), *(_QWORD *)(a5 + 24), (uint64_t)(*(_QWORD *)(a5 + 24) - *(_QWORD *)(a5 + 16)) >> 3);
  v17 = *(_QWORD *)(a5 + 40);
  *(_QWORD *)(a1 + 253) = *(_QWORD *)(a5 + 45);
  *(_QWORD *)(a1 + 248) = v17;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 264), *(const void **)(a5 + 56), *(_QWORD *)(a5 + 64), (uint64_t)(*(_QWORD *)(a5 + 64) - *(_QWORD *)(a5 + 56)) >> 3);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a5 + 80);
  v18 = *a6;
  *(_QWORD *)(a1 + 301) = *(uint64_t *)((char *)a6 + 5);
  *(_QWORD *)(a1 + 296) = v18;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 312), (const void *)a6[2], a6[3], (a6[3] - a6[2]) >> 3);
  v19 = a6[5];
  *(_QWORD *)(a1 + 341) = *(uint64_t *)((char *)a6 + 45);
  *(_QWORD *)(a1 + 336) = v19;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 352), (const void *)a6[7], a6[8], (a6[8] - a6[7]) >> 3);
  *(_DWORD *)(a1 + 376) = *((_DWORD *)a6 + 20);
  return a1;
}

void sub_1DCBBCBF0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  _QWORD *v6;
  void **v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v9 = *v5;
  if (*v5)
  {
    v1[40] = v9;
    operator delete(v9);
  }
  sub_1DCBB29A8(v6);
  v10 = *v7;
  if (*v7)
  {
    v1[24] = v10;
    operator delete(v10);
  }
  v11 = *v4;
  if (*v4)
  {
    v1[13] = v11;
    operator delete(v11);
  }
  v12 = *v3;
  if (*v3)
  {
    v1[8] = v12;
    operator delete(v12);
  }
  v13 = *v2;
  if (*v2)
  {
    v1[3] = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

char *sub_1DCBBCC8C(char *result, char *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD *)a2;
  *(_QWORD *)(result + 301) = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 37) = v4;
  if (result + 296 == a2)
  {
    v6 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(result + 341) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)result + 42) = v6;
  }
  else
  {
    sub_1DCBB25B0(result + 312, *((char **)a2 + 2), *((_QWORD *)a2 + 3), (uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3);
    v5 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v3 + 341) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)v3 + 42) = v5;
    result = sub_1DCBB25B0(v3 + 352, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  *((_DWORD *)v3 + 94) = *((_DWORD *)a2 + 20);
  return result;
}

uint64_t sub_1DCBBCD24(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    sub_1DCAE4C44();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xAAAAAAAAAAAAAAALL)
    v9 = 0x1555555555555555;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)sub_1DCB011C0(v7, v9);
  v11 = &v10[12 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[12 * v12];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  v17 = v11 + 12;
  sub_1DCB87714(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 12) % 0xCuLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_1DCBBCE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1DCBBCE8C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;
  void *__p;
  _BYTE *v7;

  if (a2[1] == *a2)
    v3 = 0;
  else
    v3 = *a2;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  sub_1DCBB5700(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x30000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_1DCBB5780(a1 + 2, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1DCBBCF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBBCF38(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *a2;
  *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  v8 = *a3;
  v9 = *(uint64_t *)((char *)a3 + 5);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 45) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1DCBB5780((_QWORD *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  *(_DWORD *)(a1 + 80) = a4;
  return a1;
}

void sub_1DCBBCFCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1DCBBCFE8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)a1[44];
  if (v2)
  {
    a1[45] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[39];
  if (v3)
  {
    a1[40] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[33];
  if (v4)
  {
    a1[34] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[28];
  if (v5)
  {
    a1[29] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[23];
  if (v6)
  {
    a1[24] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[12];
  if (v7)
  {
    a1[13] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[7];
  if (v8)
  {
    a1[8] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[2];
  if (v9)
  {
    a1[3] = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_1DCBBD088(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_1DCBB2724((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1DCBBD10C(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  const void **v17;
  _QWORD *v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  *(_DWORD *)a1 = 2;
  sub_1DCB0345C((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18[0] = 0;
  v18[1] = 0;
  v16 = 0;
  v17 = (const void **)v18;
  v15 = 0;
  LODWORD(v19) = 2;
  sub_1DCBB20A4((uint64_t)&v19 + 8, &v17);
  v21 = 0uLL;
  LODWORD(v22) = 0;
  *(_QWORD *)((char *)&v22 + 4) = 1;
  sub_1DCAD5CA8((uint64_t)&v17, v18[0]);
  sub_1DCBB1454(a3, (uint64_t)&v19);
  sub_1DCBB1454(a4, (uint64_t)&v19);
  *(_DWORD *)a1 = v19;
  v17 = (const void **)a1;
  v18[0] = "OArchive::OArchive( iFileName)";
  Alembic::AbcCoreOgawa::v12::WriteArchive::operator()();
  sub_1DCB4FEF4(a1 + 32, &v14);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_1DCAD5CA8((uint64_t)&v19 + 8, (_QWORD *)v20);
  return a1;
}

void sub_1DCBBD29C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  _QWORD *v8;
  va_list va;

  va_start(va, a7);
  __cxa_begin_catch(a1);
  sub_1DCBB28B4(v8);
  MEMORY[0x1DF0D201C](v7, "");
  if (a2 == 2)
    sub_1DCBB1814((uint64_t)va);
  else
    sub_1DCBB17A8((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x1DCBBD238);
}

void sub_1DCBBD300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void **v10;
  uint64_t v11;
  va_list va;

  va_start(va, a9);
  sub_1DCBB1880((uint64_t)va);
  sub_1DCB0546C(v11);
  if (*(char *)(v9 + 31) < 0)
    operator delete(*v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBBD36C(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  float *v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD v23[2];
  __int128 *v24;
  double v25;
  _QWORD v26[3];
  int v27;
  _DWORD *v28[2];
  _OWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  float32x4x3_t v42;
  float32x4x3_t v43;

  v41 = *MEMORY[0x1E0C80C00];
  v26[1] = 0;
  v26[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v25 = 2.0;
  v26[0] = MEMORY[0x1E0DF3090] + 16;
  pxrInternal__aapl__pxrReserved__::UsdGeomCube::GetSizeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCube *)v26);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
  if ((BYTE8(v36) & 7) != 0)
  {
    v2 = (unsigned int *)(*((_QWORD *)&v36 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v36);
  if (*((_QWORD *)&v35 + 1))
    sub_1DCAEED94(*((uint64_t *)&v35 + 1));
  v4 = 0;
  v37 = xmmword_1DCC595C0;
  v38 = unk_1DCC595D0;
  v39 = xmmword_1DCC595E0;
  v40 = unk_1DCC595F0;
  v35 = xmmword_1DCC595A0;
  v36 = unk_1DCC595B0;
  do
  {
    v5 = (float *)((char *)&v35 + v4);
    v42 = vld3q_f32(v5);
    v43.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v42.val[0].f32), v25)), vmulq_n_f64(vcvt_hight_f64_f32(v42.val[0]), v25));
    v43.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v42.val[1].f32), v25)), vmulq_n_f64(vcvt_hight_f64_f32(v42.val[1]), v25));
    v43.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v42.val[2].f32), v25)), vmulq_n_f64(vcvt_hight_f64_f32(v42.val[2]), v25));
    vst3q_f32(v5, v43);
    v4 += 48;
  }
  while (v4 != 96);
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  sub_1DCB2525C((uint64_t)v23, 8uLL);
  sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23);
  v6 = v24;
  v7 = v40;
  v9 = v37;
  v8 = v38;
  v24[4] = v39;
  v6[5] = v7;
  v6[2] = v9;
  v6[3] = v8;
  v10 = v36;
  *v6 = v35;
  v6[1] = v10;
  v28[1] = &off_1EA575998;
  sub_1DCB272BC((uint64_t *)v28, (uint64_t)v23);
  v30 = 0;
  memset(v29, 0, sizeof(v29));
  MEMORY[0x1DF0D1254](&v31, "points");
  MEMORY[0x1DF0D1254](v32, "points");
  v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
  if (!v11)
    v11 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  v32[1] = *((_QWORD *)v11 + 77);
  MEMORY[0x1DF0D1254](&v33, "vertex");
  v34 = 1;
  v12 = a1[2];
  if (v12 >= a1[3])
  {
    v13 = sub_1DCB274E0(a1 + 1, (uint64_t)v28);
  }
  else
  {
    sub_1DCB275EC((uint64_t)(a1 + 3), (_QWORD *)a1[2], (uint64_t)v28);
    v13 = v12 + 96;
    a1[2] = v12 + 96;
  }
  a1[2] = v13;
  if ((v33 & 7) != 0)
  {
    v14 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  if ((v32[0] & 7) != 0)
  {
    v16 = (unsigned int *)(v32[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  if ((v31 & 7) != 0)
  {
    v18 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  sub_1DCAEEE78((uint64_t)v29);
  sub_1DCAEEE2C((uint64_t)v28);
  v27 = 0;
  v28[0] = &v27;
  sub_1DCB267B0(a1 + 19, 0x18uLL, v28);
  v27 = 0;
  v28[0] = &v27;
  sub_1DCB267B0(a1 + 14, 6uLL, v28);
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 14));
  v20 = a1[18];
  *(_OWORD *)v20 = xmmword_1DCC59600;
  *(_QWORD *)(v20 + 16) = 0x400000004;
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 19));
  v21 = (_OWORD *)a1[23];
  v21[2] = xmmword_1DCC59638;
  v21[3] = unk_1DCC59648;
  v21[4] = xmmword_1DCC59658;
  v21[5] = unk_1DCC59668;
  *v21 = xmmword_1DCC59618;
  v21[1] = unk_1DCC59628;
  sub_1DCAEEE78((uint64_t)v23);
  return MEMORY[0x1DF0D0C54](v26);
}

void sub_1DCBBD6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  sub_1DCB245BC(&a19);
  sub_1DCAEEE78((uint64_t)&a9);
  MEMORY[0x1DF0D0C54](&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBBD7EC(_QWORD *a1)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  int64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  float v18;
  __float2 v19;
  char *v20;
  uint64_t v21;
  float32x2_t *v22;
  float64x2_t v23;
  float v24;
  float64x2_t v25;
  double v26;
  char *v27;
  float v28;
  float v29;
  float32x2_t v30;
  float32x2_t *v31;
  float v32;
  float32x2_t v33;
  float v34;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  unsigned int *v54;
  unsigned int v55;
  float32x2_t v57;
  int64x2_t v58;
  _OWORD v59[2];
  float32x2_t *v60;
  void *__p;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  _QWORD v67[3];
  int v68;
  int *v69;
  std::type_info **v70;
  _QWORD v71[5];
  uint64_t v72;
  _QWORD v73[2];
  uint64_t v74;
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v67[1] = 0;
  v67[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v66 = 0x3FF0000000000000;
  v67[0] = MEMORY[0x1E0DF3088] + 16;
  v64 = 0;
  v65 = 2.0;
  v2 = (unint64_t *)MEMORY[0x1E0DF24F8];
  v3 = atomic_load(MEMORY[0x1E0DF24F8]);
  if (!v3)
    v3 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
  v4 = *(_QWORD *)(v3 + 1352);
  v64 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCone *)v67);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
  if ((v71[1] & 7) != 0)
  {
    v7 = (unsigned int *)(v71[1] & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)v71);
  if (v70)
    sub_1DCAEED94((uint64_t)v70);
  pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetHeightAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCone *)v67);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
  if ((v71[1] & 7) != 0)
  {
    v9 = (unsigned int *)(v71[1] & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)v71);
  if (v70)
    sub_1DCAEED94((uint64_t)v70);
  pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetAxisAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCone *)v67);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  if ((v71[1] & 7) != 0)
  {
    v11 = (unsigned int *)(v71[1] & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)v71);
  if (v70)
    sub_1DCAEED94((uint64_t)v70);
  v14 = atomic_load(v2);
  if (!v14)
    v14 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
  if ((v64 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v14 + 1328) & 0xFFFFFFFFFFFFFFF8))
  {
    v57 = 0;
    v13.i64[0] = 1.0;
  }
  else
  {
    v15 = atomic_load(v2);
    if (!v15)
      v15 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
    v57 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32((v64 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v15 + 1344) & 0xFFFFFFFFFFFFFFF8)), 0x1FuLL)), (int8x8_t)1065353216, (int8x8_t)0x3F80000000000000);
    v13.i64[0] = 0;
  }
  v58 = v13;
  __p = 0;
  v62 = 0;
  v63 = 0;
  sub_1DCBBF76C(&__p, 0xAuLL);
  v16 = 0;
  for (i = 0; i != 10; ++i)
  {
    v18 = (double)(int)i * 6.28318531;
    v19 = __sincosf_stret(v18 * 0.1);
    v20 = (char *)__p + v16;
    *(float *)v20 = (float)(v19.__cosval * v57.f32[1]) + (float)(v19.__sinval * v57.f32[0]);
    *(float32x2_t *)(v20 + 4) = vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32((float32x2_t)__PAIR64__(LODWORD(v19.__sinval), LODWORD(v19.__cosval)), v57)), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v19.__sinval), LODWORD(v19.__cosval))), *(double *)v58.i64)));
    v16 += 12;
  }
  v60 = 0;
  memset(v59, 0, sizeof(v59));
  sub_1DCB2525C((uint64_t)v59, 0xCuLL);
  sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v59);
  v21 = 0;
  v22 = v60;
  v23 = vcvtq_f64_f32(v57);
  v24 = vmuld_lane_f64(-v65, v23, 1);
  v25 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23.f64[0], 0);
  *(_QWORD *)&v25.f64[0] = v58.i64[0];
  *v60 = vmul_f32(vcvt_f32_f64(vmulq_n_f64(v25, -v65)), (float32x2_t)0x3F0000003F000000);
  v22[1].f32[0] = v24 * 0.5;
  v26 = *(double *)&v66;
  v27 = (char *)__p;
  v28 = -(v65 * *(double *)v58.i64);
  v29 = v28 * 0.5;
  v30 = vmul_f32(vcvt_f32_f64(vmulq_n_f64(v23, -v65)), (float32x2_t)0x3F0000003F000000);
  do
  {
    v31 = (float32x2_t *)((char *)v22 + v21);
    v32 = v26 * *(float *)&v27[v21];
    v33 = vadd_f32(v30, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)&v27[v21 + 4]), v26)));
    v31[1].f32[1] = v29 + v32;
    v31[2] = v33;
    v21 += 12;
  }
  while (v21 != 120);
  v34 = v65 * v23.f64[1];
  *(float32x2_t *)((char *)v22 + 132) = vmul_f32(vcvt_f32_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v58, (int64x2_t)v23), v65)), (float32x2_t)0x3F0000003F000000);
  v22[17].f32[1] = v34 * 0.5;
  v70 = &off_1EA575998;
  sub_1DCB272BC((uint64_t *)&v69, (uint64_t)v59);
  memset(v71, 0, sizeof(v71));
  MEMORY[0x1DF0D1254](&v72, "points");
  MEMORY[0x1DF0D1254](v73, "points");
  v35 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
  if (!v35)
    v35 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  v73[1] = *((_QWORD *)v35 + 77);
  MEMORY[0x1DF0D1254](&v74, "vertex");
  v75 = 1;
  v36 = a1[2];
  if (v36 >= a1[3])
  {
    v37 = sub_1DCB274E0(a1 + 1, (uint64_t)&v69);
  }
  else
  {
    sub_1DCB275EC((uint64_t)(a1 + 3), (_QWORD *)a1[2], (uint64_t)&v69);
    v37 = v36 + 96;
    a1[2] = v36 + 96;
  }
  a1[2] = v37;
  if ((v74 & 7) != 0)
  {
    v38 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  if ((v73[0] & 7) != 0)
  {
    v40 = (unsigned int *)(v73[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  if ((v72 & 7) != 0)
  {
    v42 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  sub_1DCAEEE78((uint64_t)v71);
  sub_1DCAEEE2C((uint64_t)&v69);
  v68 = 0;
  v69 = &v68;
  sub_1DCB267B0(a1 + 14, 0x14uLL, &v69);
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 14));
  v44 = a1[18];
  v68 = 0;
  v69 = &v68;
  sub_1DCB267B0(a1 + 19, 0x3CuLL, &v69);
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 19));
  v45 = 0;
  v46 = a1[23];
  v47 = (_DWORD *)(v46 + 8);
  do
  {
    *(_DWORD *)(v44 + 4 * v45) = 3;
    v48 = v45 + 1;
    if ((_DWORD)v45 == 9)
      v49 = 1;
    else
      v49 = v45 + 2;
    *(v47 - 2) = v49;
    *(v47 - 1) = v48;
    *v47 = 0;
    v47 += 3;
    v45 = v48;
  }
  while (v48 != 10);
  v50 = 0;
  v51 = (_DWORD *)(v46 + 128);
  do
  {
    *(_DWORD *)(v44 + 40 + 4 * v50) = 3;
    v52 = v50 + 1;
    if ((_DWORD)v50 == 9)
      v53 = 1;
    else
      v53 = v50 + 2;
    *(v51 - 2) = v52;
    *(v51 - 1) = v53;
    *v51 = 11;
    v51 += 3;
    v50 = v52;
  }
  while ((_DWORD)v52 != 10);
  sub_1DCAEEE78((uint64_t)v59);
  if (__p)
  {
    v62 = __p;
    operator delete(__p);
  }
  if ((v64 & 7) != 0)
  {
    v54 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  return MEMORY[0x1DF0D0C3C](v67);
}

void sub_1DCBBDE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  MEMORY[0x1DF0D0C3C](&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBBDFD4(_QWORD *a1)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  int64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  float v18;
  __float2 v19;
  char *v20;
  uint64_t v21;
  float32x2_t *v22;
  float64x2_t v23;
  double v24;
  float v25;
  float64x2_t v26;
  double v27;
  char *v28;
  float v29;
  float v30;
  float32x2_t v31;
  float32x2_t *v32;
  uint64_t v33;
  float v34;
  float32x2_t v35;
  float32x2_t *v36;
  double v37;
  char v38;
  double v39;
  uint64_t v40;
  char v41;
  float32x2_t *v42;
  float v43;
  float32_t v44;
  float v45;
  float32x2_t v46;
  float32x2_t *v47;
  float v48;
  uint64_t v49;
  float64x2_t v50;
  float32x2_t *v51;
  float v52;
  float v53;
  float v54;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  int32x4_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  _DWORD *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  unsigned int *v79;
  unsigned int v80;
  int64x2_t v82;
  float32x2_t v83;
  _OWORD v84[2];
  float32x2_t *v85;
  void *__p;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  _QWORD v92[3];
  int v93;
  int *v94;
  std::type_info **v95;
  _QWORD v96[5];
  uint64_t v97;
  _QWORD v98[2];
  uint64_t v99;
  int v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v92[1] = 0;
  v92[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v91 = 2.0;
  v92[0] = MEMORY[0x1E0DF30E8] + 16;
  v89 = 0;
  v90 = 1.0;
  v2 = (unint64_t *)MEMORY[0x1E0DF24F8];
  v3 = atomic_load(MEMORY[0x1E0DF24F8]);
  if (!v3)
    v3 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
  v4 = *(_QWORD *)(v3 + 1352);
  v89 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v89 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)v92);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
  if ((v96[1] & 7) != 0)
  {
    v7 = (unsigned int *)(v96[1] & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)v96);
  if (v95)
    sub_1DCAEED94((uint64_t)v95);
  pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetHeightAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)v92);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
  if ((v96[1] & 7) != 0)
  {
    v9 = (unsigned int *)(v96[1] & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)v96);
  if (v95)
    sub_1DCAEED94((uint64_t)v95);
  pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetAxisAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)v92);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  if ((v96[1] & 7) != 0)
  {
    v11 = (unsigned int *)(v96[1] & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)v96);
  if (v95)
    sub_1DCAEED94((uint64_t)v95);
  v14 = atomic_load(v2);
  if (!v14)
    v14 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
  if ((v89 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v14 + 1328) & 0xFFFFFFFFFFFFFFF8))
  {
    v83 = 0;
    v13.i64[0] = 1.0;
  }
  else
  {
    v15 = atomic_load(v2);
    if (!v15)
      v15 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
    v83 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32((v89 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v15 + 1344) & 0xFFFFFFFFFFFFFFF8)), 0x1FuLL)), (int8x8_t)1065353216, (int8x8_t)0x3F80000000000000);
    v13.i64[0] = 0;
  }
  v82 = v13;
  __p = 0;
  v87 = 0;
  v88 = 0;
  sub_1DCBBF76C(&__p, 0xAuLL);
  v16 = 0;
  for (i = 0; i != 10; ++i)
  {
    v18 = (double)(int)i * 6.28318531;
    v19 = __sincosf_stret(v18 * 0.1);
    v20 = (char *)__p + v16;
    *(float *)v20 = (float)(v19.__cosval * v83.f32[1]) + (float)(v19.__sinval * v83.f32[0]);
    *(float32x2_t *)(v20 + 4) = vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32((float32x2_t)__PAIR64__(LODWORD(v19.__sinval), LODWORD(v19.__cosval)), v83)), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v19.__sinval), LODWORD(v19.__cosval))), *(double *)v82.i64)));
    v16 += 12;
  }
  v85 = 0;
  memset(v84, 0, sizeof(v84));
  sub_1DCB2525C((uint64_t)v84, 0x2AuLL);
  sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v84);
  v21 = 0;
  v22 = v85;
  v23 = vcvtq_f64_f32(v83);
  v24 = v23.f64[1];
  v25 = vmuld_lane_f64(-v91, v23, 1);
  v26 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23.f64[0], 0);
  *(_QWORD *)&v26.f64[0] = v82.i64[0];
  *v85 = vmul_f32(vcvt_f32_f64(vmulq_n_f64(v26, -v91)), (float32x2_t)0x3F0000003F000000);
  v22[1].f32[0] = v25 * 0.5;
  v27 = v90;
  v28 = (char *)__p;
  v29 = -(v91 * *(double *)v82.i64);
  v30 = v29 * 0.5;
  v31 = vmul_f32(vcvt_f32_f64(vmulq_n_f64(v23, -v91)), (float32x2_t)0x3F0000003F000000);
  v32 = (float32x2_t *)((char *)v22 + 12);
  do
  {
    v33 = (uint64_t)v32 + v21;
    v34 = v27 * *(float *)&v28[v21];
    v35 = vadd_f32(v31, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)&v28[v21 + 4]), v27)));
    *(float *)v33 = v30 + v34;
    *(float32x2_t *)(v33 + 4) = v35;
    v21 += 12;
  }
  while (v21 != 120);
  v36 = v32 + 15;
  v37 = -0.5;
  v38 = 1;
  v39 = *(double *)v82.i64;
  do
  {
    v40 = 0;
    v41 = v38;
    v42 = v36;
    v43 = v91 * v37;
    v46.f32[0] = v39 * v43;
    v44 = v83.f32[0] * v43;
    v45 = v83.f32[1] * v43;
    v46.f32[1] = v44;
    do
    {
      v47 = (float32x2_t *)((char *)v42 + v40);
      v48 = v90 * *(float *)((char *)__p + v40 + 8);
      *v47 = vadd_f32(v46, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)__p + v40)), v90)));
      v47[1].f32[0] = v45 + v48;
      v40 += 12;
    }
    while (v40 != 120);
    v38 = 0;
    v36 = v42 + 15;
    v37 = 0.5;
    v39 = *(double *)v82.i64;
  }
  while ((v41 & 1) != 0);
  v49 = 0;
  v50 = (float64x2_t)vzip1q_s64(v82, (int64x2_t)v23);
  do
  {
    v51 = (float32x2_t *)((char *)v42 + v49 + 120);
    v52 = v90 * *(float *)((char *)__p + v49 + 8);
    v53 = v91 * v24;
    *v51 = vmla_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)__p + v49)), v90)), (float32x2_t)0x3F0000003F000000, vcvt_f32_f64(vmulq_n_f64(v50, v91)));
    v51[1].f32[0] = v52 + (float)(v53 * 0.5);
    v49 += 12;
  }
  while (v49 != 120);
  v54 = v91 * v24;
  v42[30] = vmul_f32(vcvt_f32_f64(vmulq_n_f64(v50, v91)), (float32x2_t)0x3F0000003F000000);
  v42[31].f32[0] = v54 * 0.5;
  v95 = &off_1EA575998;
  sub_1DCB272BC((uint64_t *)&v94, (uint64_t)v84);
  memset(v96, 0, sizeof(v96));
  MEMORY[0x1DF0D1254](&v97, "points");
  MEMORY[0x1DF0D1254](v98, "points");
  v55 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
  if (!v55)
    v55 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  v98[1] = *((_QWORD *)v55 + 77);
  MEMORY[0x1DF0D1254](&v99, "vertex");
  v100 = 1;
  v56 = a1[2];
  if (v56 >= a1[3])
  {
    v57 = sub_1DCB274E0(a1 + 1, (uint64_t)&v94);
  }
  else
  {
    sub_1DCB275EC((uint64_t)(a1 + 3), (_QWORD *)a1[2], (uint64_t)&v94);
    v57 = v56 + 96;
    a1[2] = v56 + 96;
  }
  a1[2] = v57;
  if ((v99 & 7) != 0)
  {
    v58 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
    do
      v59 = __ldxr(v58);
    while (__stlxr(v59 - 2, v58));
  }
  if ((v98[0] & 7) != 0)
  {
    v60 = (unsigned int *)(v98[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  if ((v97 & 7) != 0)
  {
    v62 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
    do
      v63 = __ldxr(v62);
    while (__stlxr(v63 - 2, v62));
  }
  sub_1DCAEEE78((uint64_t)v96);
  sub_1DCAEEE2C((uint64_t)&v94);
  v93 = 0;
  v94 = &v93;
  sub_1DCB267B0(a1 + 14, 0x1EuLL, &v94);
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 14));
  v64 = a1[18];
  v93 = 0;
  v94 = &v93;
  sub_1DCB267B0(a1 + 19, 0x64uLL, &v94);
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 19));
  v66 = 0;
  v67 = a1[23];
  v68 = (_DWORD *)(v67 + 8);
  do
  {
    *(_DWORD *)(v64 + 4 * v66) = 3;
    v69 = v66 + 1;
    if ((_DWORD)v66 == 9)
      v70 = 1;
    else
      v70 = v66 + 2;
    *(v68 - 2) = v70;
    *(v68 - 1) = v69;
    *v68 = 0;
    v68 += 3;
    v66 = v69;
  }
  while (v69 != 10);
  v71 = 0;
  do
  {
    v72 = v71 + 1;
    if ((_DWORD)v71 == 9)
      v73 = 0;
    else
      v73 = v71 + 1;
    *(_DWORD *)(v64 + 40 + 4 * v71) = 4;
    *(float32x2_t *)v65.i8 = vcvt_f32_s32((int32x2_t)__PAIR64__(v73, v71));
    v65 = vcvtq_s32_f32(vaddq_f32((float32x4_t)vzip1q_s32(v65, vrev64q_s32(v65)), (float32x4_t)xmmword_1DCC59590));
    *(int32x4_t *)(v67 + 120 + 16 * v71++) = v65;
  }
  while (v72 != 10);
  v74 = (_DWORD *)(v67 + 288);
  v75 = 20;
  do
  {
    *(_DWORD *)(v64 + 4 * v75) = 3;
    v76 = v75 + 11;
    v77 = v75 + 1;
    if ((_DWORD)v75 == 29)
      v78 = 31;
    else
      v78 = v75 + 12;
    *(v74 - 2) = v76;
    *(v74 - 1) = v78;
    *v74 = 41;
    v74 += 3;
    v75 = v77;
  }
  while ((_DWORD)v77 != 30);
  sub_1DCAEEE78((uint64_t)v84);
  if (__p)
  {
    v87 = __p;
    operator delete(__p);
  }
  if ((v89 & 7) != 0)
  {
    v79 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v80 = __ldxr(v79);
    while (__stlxr(v80 - 2, v79));
  }
  return MEMORY[0x1DF0D0EC4](v92);
}

void sub_1DCBBE7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  MEMORY[0x1DF0D0EC4](&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBBE928(_QWORD *a1)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  int64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  float v18;
  __float2 v19;
  char *v20;
  int v21;
  float *v22;
  double v23;
  float v24;
  float64x2_t v25;
  float *v26;
  double v27;
  double v28;
  __float2 v29;
  uint64_t v30;
  double v31;
  float v32;
  double v33;
  float32x2_t v34;
  float32x2_t *v35;
  double v36;
  float v37;
  float32_t v38;
  double v39;
  char v40;
  uint64_t v41;
  char v42;
  float v43;
  float32_t v44;
  float v45;
  float32x2_t v46;
  float32x2_t *v47;
  float v48;
  int v49;
  double v50;
  __float2 v51;
  uint64_t v52;
  double v53;
  float v54;
  double v55;
  float32x2_t v56;
  float32x2_t *v57;
  double v58;
  float v59;
  float32_t v60;
  double v61;
  float v62;
  float v63;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t v73;
  float32x4_t v74;
  int32x4_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  _DWORD *v92;
  int v93;
  unsigned int *v94;
  unsigned int v95;
  double v97;
  float32x2_t v98;
  int64x2_t v99;
  float64x2_t v100;
  _OWORD v101[2];
  float *v102;
  void *__p;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  double v108;
  _QWORD v109[3];
  int v110;
  int *v111;
  std::type_info **v112;
  _QWORD v113[5];
  uint64_t v114;
  _QWORD v115[2];
  uint64_t v116;
  int v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v109[1] = 0;
  v109[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v108 = 0.5;
  v109[0] = MEMORY[0x1E0DF30D8] + 16;
  v106 = 0;
  v107 = 1.0;
  v2 = (unint64_t *)MEMORY[0x1E0DF24F8];
  v3 = atomic_load(MEMORY[0x1E0DF24F8]);
  if (!v3)
    v3 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
  v4 = *(_QWORD *)(v3 + 1352);
  v106 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v106 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)v109);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
  if ((v113[1] & 7) != 0)
  {
    v7 = (unsigned int *)(v113[1] & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)v113);
  if (v112)
    sub_1DCAEED94((uint64_t)v112);
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetHeightAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)v109);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
  if ((v113[1] & 7) != 0)
  {
    v9 = (unsigned int *)(v113[1] & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)v113);
  if (v112)
    sub_1DCAEED94((uint64_t)v112);
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetAxisAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)v109);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  if ((v113[1] & 7) != 0)
  {
    v11 = (unsigned int *)(v113[1] & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)v113);
  if (v112)
    sub_1DCAEED94((uint64_t)v112);
  v14 = atomic_load(v2);
  if (!v14)
    v14 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
  if ((v106 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v14 + 1328) & 0xFFFFFFFFFFFFFFF8))
  {
    v98 = 0;
    v13.i64[0] = 1.0;
  }
  else
  {
    v15 = atomic_load(v2);
    if (!v15)
      v15 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
    v98 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32((v106 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v15 + 1344) & 0xFFFFFFFFFFFFFFF8)), 0x1FuLL)), (int8x8_t)1065353216, (int8x8_t)0x3F80000000000000);
    v13.i64[0] = 0;
  }
  v99 = v13;
  __p = 0;
  v104 = 0;
  v105 = 0;
  sub_1DCBBF76C(&__p, 0xAuLL);
  v16 = 0;
  for (i = 0; i != 10; ++i)
  {
    v18 = (double)(int)i * 6.28318531;
    v19 = __sincosf_stret(v18 * 0.1);
    v20 = (char *)__p + v16;
    *(float *)v20 = (float)(v19.__cosval * v98.f32[1]) + (float)(v19.__sinval * v98.f32[0]);
    *(float32x2_t *)(v20 + 4) = vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32((float32x2_t)__PAIR64__(LODWORD(v19.__sinval), LODWORD(v19.__cosval)), v98)), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v19.__sinval), LODWORD(v19.__cosval))), *(double *)v99.i64)));
    v16 += 12;
  }
  v102 = 0;
  memset(v101, 0, sizeof(v101));
  sub_1DCB2525C((uint64_t)v101, 0x52uLL);
  sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v101);
  v21 = 0;
  v22 = v102;
  v23 = -(v108 - v107 * -0.5);
  v24 = v23 * *(double *)v99.i64;
  v25 = vcvtq_f64_f32(v98);
  *v102 = v24;
  *(float32x2_t *)(v22 + 1) = vcvt_f32_f64(vmulq_n_f64(v25, v23));
  v26 = v22 + 3;
  v27 = v25.f64[1];
  v97 = v25.f64[0];
  v100 = (float64x2_t)vzip1q_s64(v99, (int64x2_t)v25);
  do
  {
    ++v21;
    v28 = v108;
    v29 = __sincosf_stret((float)((float)v21 * -0.3927) + 1.5708);
    v30 = 0;
    v31 = v28 * v29.__cosval;
    *(float *)&v31 = v31;
    v32 = v28 * v29.__sinval;
    v33 = v32;
    v34 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v31, 0);
    do
    {
      v35 = (float32x2_t *)&v26[v30];
      v36 = -(v33 - v107 * -0.5);
      v37 = v36 * v27;
      v38 = v37 + (float)(*(float *)((char *)__p + v30 * 4 + 8) * *(float *)&v31);
      *v35 = vmla_f32(vcvt_f32_f64(vmulq_n_f64(v100, v36)), v34, *(float32x2_t *)((char *)__p + v30 * 4));
      v35[1].f32[0] = v38;
      v30 += 3;
    }
    while (v30 != 30);
    v26 += 30;
  }
  while (v21 != 3);
  v39 = -0.5;
  v40 = 1;
  do
  {
    v41 = 0;
    v42 = v40;
    v43 = v107 * v39;
    v46.f32[0] = *(double *)v99.i64 * v43;
    v44 = v98.f32[0] * v43;
    v45 = v98.f32[1] * v43;
    v46.f32[1] = v44;
    do
    {
      v47 = (float32x2_t *)&v26[v41];
      v48 = v108 * *(float *)((char *)__p + v41 * 4 + 8);
      *v47 = vadd_f32(v46, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)__p + v41 * 4)), v108)));
      v47[1].f32[0] = v45 + v48;
      v41 += 3;
    }
    while (v41 != 30);
    v40 = 0;
    v26 += 30;
    v39 = 0.5;
  }
  while ((v42 & 1) != 0);
  v49 = 0;
  do
  {
    ++v49;
    v50 = v108;
    v51 = __sincosf_stret((float)v49 * 0.3927);
    v52 = 0;
    v53 = v50 * v51.__cosval;
    *(float *)&v53 = v53;
    v54 = v50 * v51.__sinval;
    v55 = v54;
    v56 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v53, 0);
    do
    {
      v57 = (float32x2_t *)&v26[v52];
      v58 = v55 + v107 * 0.5;
      v59 = v58 * v27;
      v60 = v59 + (float)(*(float *)((char *)__p + v52 * 4 + 8) * *(float *)&v53);
      *v57 = vmla_f32(vcvt_f32_f64(vmulq_n_f64(v100, v58)), v56, *(float32x2_t *)((char *)__p + v52 * 4));
      v57[1].f32[0] = v60;
      v52 += 3;
    }
    while (v52 != 30);
    v26 += 30;
  }
  while (v49 != 3);
  v61 = v108 + v107 * 0.5;
  v62 = v61 * *(double *)v99.i64;
  v63 = v61 * v97;
  *(float *)&v61 = v61 * v27;
  *v26 = v62;
  v26[1] = v63;
  v26[2] = *(float *)&v61;
  v112 = &off_1EA575998;
  sub_1DCB272BC((uint64_t *)&v111, (uint64_t)v101);
  memset(v113, 0, sizeof(v113));
  MEMORY[0x1DF0D1254](&v114, "points");
  MEMORY[0x1DF0D1254](v115, "points");
  v64 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
  if (!v64)
    v64 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  v115[1] = *((_QWORD *)v64 + 77);
  MEMORY[0x1DF0D1254](&v116, "vertex");
  v117 = 1;
  v65 = a1[2];
  if (v65 >= a1[3])
  {
    v66 = sub_1DCB274E0(a1 + 1, (uint64_t)&v111);
  }
  else
  {
    sub_1DCB275EC((uint64_t)(a1 + 3), (_QWORD *)a1[2], (uint64_t)&v111);
    v66 = v65 + 96;
    a1[2] = v65 + 96;
  }
  a1[2] = v66;
  if ((v116 & 7) != 0)
  {
    v67 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v68 = __ldxr(v67);
    while (__stlxr(v68 - 2, v67));
  }
  if ((v115[0] & 7) != 0)
  {
    v69 = (unsigned int *)(v115[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  if ((v114 & 7) != 0)
  {
    v71 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFFFF8);
    do
      v72 = __ldxr(v71);
    while (__stlxr(v72 - 2, v71));
  }
  sub_1DCAEEE78((uint64_t)v113);
  sub_1DCAEEE2C((uint64_t)&v111);
  v110 = 0;
  v111 = &v110;
  sub_1DCB267B0(a1 + 14, 0x5AuLL, &v111);
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 14));
  v73 = a1[18];
  v110 = 0;
  v111 = &v110;
  sub_1DCB267B0(a1 + 19, 0x154uLL, &v111);
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 19));
  v76 = 0;
  v77 = a1[23];
  v78 = (_DWORD *)(v77 + 8);
  do
  {
    *(_DWORD *)(v73 + 4 * v76) = 3;
    v79 = v76 + 1;
    if ((_DWORD)v76 == 9)
      v80 = 1;
    else
      v80 = v76 + 2;
    *(v78 - 2) = v80;
    *(v78 - 1) = v79;
    *v78 = 0;
    v78 += 3;
    v76 = v79;
  }
  while (v79 != 10);
  v81 = 0;
  v82 = 10;
  v83 = 30;
  v84 = 1;
  do
  {
    v85 = 0;
    v86 = v82;
    v74.f32[0] = (float)v84;
    v74.f32[1] = (float)v84 + 10.0;
    v74 = (float32x4_t)vzip1q_s32((int32x4_t)v74, (int32x4_t)v74);
    v87 = v73 + 4 * v82;
    v88 = v77 + 4 * v83;
    do
    {
      v83 += 4;
      v89 = v85 + 1;
      if ((_DWORD)v85 == 9)
        v90 = 0;
      else
        v90 = v85 + 1;
      *(_DWORD *)(v87 + 4 * v85) = 4;
      *(float32x2_t *)v75.i8 = vcvt_f32_s32((int32x2_t)__PAIR64__(v90, v85));
      v75 = vcvtq_s32_f32(vaddq_f32((float32x4_t)vzip1q_s32(v75, vrev64q_s32(v75)), v74));
      *(int32x4_t *)(v88 + 16 * v85++) = v75;
    }
    while (v89 != 10);
    v82 = v86 + v85;
    v84 += 10;
    ++v81;
  }
  while (v81 != 7);
  v91 = 0;
  v92 = (_DWORD *)(v77 + 4 * v83 + 8);
  do
  {
    *(_DWORD *)(v73 + 4 * (v86 + 10) + 4 * v91) = 3;
    v93 = v91 + 72;
    if ((_DWORD)v91 == 9)
      v93 = 71;
    *(v92 - 2) = v91 + 71;
    *(v92 - 1) = v93;
    *v92 = 81;
    v92 += 3;
    ++v91;
  }
  while ((_DWORD)v91 != 10);
  sub_1DCAEEE78((uint64_t)v101);
  if (__p)
  {
    v104 = __p;
    operator delete(__p);
  }
  if ((v106 & 7) != 0)
  {
    v94 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFFFF8);
    do
      v95 = __ldxr(v94);
    while (__stlxr(v95 - 2, v94));
  }
  return MEMORY[0x1DF0D0E40](v109);
}

void sub_1DCBBF1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  MEMORY[0x1DF0D0E40](&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBBF314(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t i;
  float *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  _OWORD v16[2];
  void *v17;
  double v18;
  _QWORD v19[3];
  int v20;
  _DWORD *v21[2];
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  int v27;
  uint64_t __dst[139];
  float32x4x3_t v29;
  float32x4x3_t v30;

  __dst[138] = *MEMORY[0x1E0C80C00];
  v19[1] = 0;
  v19[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v18 = 1.0;
  v19[0] = MEMORY[0x1E0DF30D0] + 16;
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)v19);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
  if ((__dst[3] & 7) != 0)
  {
    v2 = (unsigned int *)(__dst[3] & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&__dst[2]);
  if (__dst[1])
    sub_1DCAEED94(__dst[1]);
  memcpy(__dst, &unk_1DCC59678, 0x450uLL);
  for (i = 0; i != 138; i += 6)
  {
    v5 = (float *)&__dst[i];
    v29 = vld3q_f32(v5);
    v30.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v29.val[0].f32), v18)), vmulq_n_f64(vcvt_hight_f64_f32(v29.val[0]), v18));
    v30.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v29.val[1].f32), v18)), vmulq_n_f64(vcvt_hight_f64_f32(v29.val[1]), v18));
    v30.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v29.val[2].f32), v18)), vmulq_n_f64(vcvt_hight_f64_f32(v29.val[2]), v18));
    vst3q_f32(v5, v30);
  }
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  sub_1DCB2525C((uint64_t)v16, 0x5CuLL);
  sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
  memcpy(v17, __dst, 0x450uLL);
  v21[1] = &off_1EA575998;
  sub_1DCB272BC((uint64_t *)v21, (uint64_t)v16);
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  MEMORY[0x1DF0D1254](&v24, "points");
  MEMORY[0x1DF0D1254](v25, "points");
  v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
  if (!v6)
    v6 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  v25[1] = *((_QWORD *)v6 + 77);
  MEMORY[0x1DF0D1254](&v26, "vertex");
  v27 = 1;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7 >= *(_QWORD *)(a1 + 24))
  {
    v8 = sub_1DCB274E0((uint64_t *)(a1 + 8), (uint64_t)v21);
  }
  else
  {
    sub_1DCB275EC(a1 + 24, *(_QWORD **)(a1 + 16), (uint64_t)v21);
    v8 = v7 + 96;
    *(_QWORD *)(a1 + 16) = v7 + 96;
  }
  *(_QWORD *)(a1 + 16) = v8;
  if ((v26 & 7) != 0)
  {
    v9 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if ((v25[0] & 7) != 0)
  {
    v11 = (unsigned int *)(v25[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  if ((v24 & 7) != 0)
  {
    v13 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  sub_1DCAEEE78((uint64_t)v22);
  sub_1DCAEEE2C((uint64_t)v21);
  v20 = 0;
  v21[0] = &v20;
  sub_1DCB267B0((unint64_t *)(a1 + 152), 0x17CuLL, v21);
  v20 = 0;
  v21[0] = &v20;
  sub_1DCB267B0((unint64_t *)(a1 + 112), 0x64uLL, v21);
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112));
  memcpy(*(void **)(a1 + 144), &unk_1DCC59AC8, 0x190uLL);
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 152));
  memcpy(*(void **)(a1 + 184), &unk_1DCC59C58, 0x5F0uLL);
  sub_1DCAEEE78((uint64_t)v16);
  return MEMORY[0x1DF0D0DC8](v19);
}

void sub_1DCBBF678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1DCB245BC(&a20);
  sub_1DCAEEE78((uint64_t)&a9);
  MEMORY[0x1DF0D0DC8](&a16);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCBBF76C(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DCBBF804(a1, a2);
    v4 = (char *)a1[1];
    v5 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1DCBBF7E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DCBBF804(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    sub_1DCAE4C44();
  result = (char *)sub_1DCB011C0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void sub_1DCBBF9A4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v4 = v3;

  MEMORY[0x1DF0D228C](v2, 0x10A1C40CD2B3A6BLL);
  _Unwind_Resume(a1);
}

void sub_1DCBBFB9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCBC0268(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCBC0A34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCBC0E3C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  simd_float4x4 v16;

  v3 = a2;
  *(_QWORD *)a1 = &off_1EA574688;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v4 = v3;
  *(_QWORD *)(a1 + 56) = v4;
  v5 = MEMORY[0x1E0C83FF0];
  _Q0 = *MEMORY[0x1E0C83FF0];
  v7 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
  *(_OWORD *)(a1 + 64) = *MEMORY[0x1E0C83FF0];
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(v5 + 32);
  v9 = *(_OWORD *)(v5 + 48);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = _Q0;
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 160) = v8;
  *(_OWORD *)(a1 + 176) = v9;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 1112010548;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 208) = _Q0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = xmmword_1DCC5A2E0;
  *(_QWORD *)(a1 + 240) = 1069547520;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 272) = 0x447A00003DCCCCCDLL;
  *(_QWORD *)(a1 + 280) = _Q0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 288) = _Q0;
  sub_1DCBC0F48(a1, 16);
  sub_1DCB56828((simd_float4x4 *)a1, *(float *)(a1 + 236));
  v16.columns[0].f32[0] = sub_1DCBC1DE8(a1);
  *(simd_float4x4 *)(a1 + 64) = v16;
  *(simd_float4x4 *)(a1 + 128) = __invert_f4(v16);

  return a1;
}

void sub_1DCBC0F30(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCBC0F48(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (a2 <= 1)
    v3 = 1;
  else
    v3 = a2;
  *(_DWORD *)(a1 + 32) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    MEMORY[0x1DF0D2274](v4, 0x1000C8052888210);
  result = operator new[]();
  *(_QWORD *)(a1 + 40) = result;
  if (*(int *)(a1 + 32) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      *(float *)(*(_QWORD *)(a1 + 40) + v6) = (float)((float)arc4random_uniform(0x800000u) * 0.00000011897) + -0.499;
      result = arc4random_uniform(0x800000u);
      *(float *)(*(_QWORD *)(a1 + 40) + v6 + 4) = (float)((float)result * 0.00000011897) + -0.499;
      ++v7;
      v6 += 8;
    }
    while (v7 < *(int *)(a1 + 32));
  }
  return result;
}

void sub_1DCBC1034(simd_float4x4 *a1)
{
  simd_float4x4 v2;

  v2.columns[0].f32[0] = sub_1DCBC1DE8((uint64_t)a1);
  a1[1] = v2;
  a1[2] = __invert_f4(v2);
}

uint64_t sub_1DCBC106C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  simd_float4x4 v12;

  *(_QWORD *)a1 = &off_1EA574688;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(id *)(a2 + 56);
  v4 = *(_OWORD *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v5;
  v7 = *(_OWORD *)(a2 + 160);
  v8 = *(_OWORD *)(a2 + 176);
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 176) = v8;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v10 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v10;
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  sub_1DCB56828((simd_float4x4 *)a1, *((float *)&v10 + 3));
  v12.columns[0].f32[0] = sub_1DCBC1DE8(a1);
  *(simd_float4x4 *)(a1 + 64) = v12;
  *(simd_float4x4 *)(a1 + 128) = __invert_f4(v12);
  return a1;
}

uint64_t sub_1DCBC1164(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1EA574688;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    MEMORY[0x1DF0D2274](v2, 0x1000C8052888210);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    MEMORY[0x1DF0D2274](v3, 0x80C80B8603338);
  v4 = *(_QWORD *)(a1 + 192);
  if (v4)
    MEMORY[0x1DF0D2274](v4, 0x1000C800285BD98);

  return a1;
}

void sub_1DCBC11F0(uint64_t a1)
{
  sub_1DCBC1164(a1);
  JUMPOUT(0x1DF0D228CLL);
}

void sub_1DCBC1214(uint64_t a1, __n128 a2)
{
  simd_float4x4 v3;

  sub_1DCBC1264((__n128 **)(*(_QWORD *)(a1 + 56) + 16), a2);
  v3.columns[0].f32[0] = sub_1DCBC1DE8(a1);
  *(simd_float4x4 *)(a1 + 64) = v3;
  *(simd_float4x4 *)(a1 + 128) = __invert_f4(v3);
}

void sub_1DCBC1264(__n128 **a1, __n128 a2)
{
  __n128 *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __n128 *v11;
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  __n128 v16;

  v3 = *a1;
  a1[1] = *a1;
  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  if ((unint64_t)v3 >= v6)
  {
    v8 = v5 - (_QWORD)v3;
    v9 = v8 >> 4;
    if ((unint64_t)(v8 >> 4) <= 1)
      v9 = 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v11 = (__n128 *)sub_1DCAF116C(v4, v10);
    v13 = &v11[2 * v12];
    v11->n128_u64[0] = 0x7FEFFFFFFFFFFFFFLL;
    v11[1] = a2;
    v7 = v11 + 2;
    v15 = *a1;
    v14 = a1[1];
    if (v14 != *a1)
    {
      do
      {
        v16 = v14[-1];
        v11[-2] = v14[-2];
        v11[-1] = v16;
        v11 -= 2;
        v14 -= 2;
      }
      while (v14 != v15);
      v14 = *a1;
    }
    *a1 = v11;
    a1[1] = v7;
    a1[2] = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    v3->n128_u64[0] = 0x7FEFFFFFFFFFFFFFLL;
    v3[1] = a2;
    v7 = v3 + 2;
  }
  a1[1] = v7;
  sub_1DCB47B94((uint64_t)a1);
}

void sub_1DCBC1334(__n128 *a1, float32x4_t a2, float a3, float a4, float a5)
{
  __float2 v7;
  __float2 v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  __n128 v14;
  _OWORD v15[4];
  float v16[3];
  float v17[3];
  _BYTE v18[32];
  _BYTE v19[32];

  a1[15].n128_f32[1] = a5;
  a1[15].n128_f32[2] = a4;
  a1[16] = (__n128)a2;
  v7 = __sincosf_stret(a4);
  v8 = __sincosf_stret(a5);
  v9.f32[0] = v8.__cosval * v7.__cosval;
  v10 = v9;
  v10.i32[1] = LODWORD(v7.__sinval);
  v10.f32[2] = v8.__sinval * v7.__cosval;
  v14 = (__n128)vmlaq_n_f32(a2, v10, a3);
  v11 = -1.0;
  if (v7.__cosval > 0.0)
    v11 = 1.0;
  *(_DWORD *)v18 = 1065353216;
  *(_OWORD *)&v18[4] = 0uLL;
  *(_DWORD *)&v18[20] = 1065353216;
  *(_QWORD *)&v18[24] = 0;
  *(_QWORD *)v19 = 0;
  *(_QWORD *)&v19[20] = 0;
  *(_QWORD *)&v19[12] = 0;
  *(_DWORD *)&v19[8] = 1065353216;
  *(_DWORD *)&v19[28] = 1065353216;
  v17[0] = v8.__cosval * v7.__cosval;
  v17[1] = v7.__sinval;
  v17[2] = v8.__sinval * v7.__cosval;
  v16[0] = 0.0;
  v16[1] = v11;
  v16[2] = 0.0;
  sub_1DCBC1458((uint64_t)v18, v17, v16);
  v15[0] = *(_OWORD *)v18;
  v15[1] = *(_OWORD *)&v18[16];
  v15[2] = *(_OWORD *)v19;
  v15[3] = *(_OWORD *)&v19[16];
  sub_1DCB47EA4(a1[3].n128_u64[1] + 16, v15);
  sub_1DCBC1264((__n128 **)(a1[3].n128_u64[1] + 16), v14);
}

uint64_t sub_1DCBC1458(uint64_t result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  BOOL v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = (float)((float)(v3 * v3) + (float)(v4 * v4)) + (float)(v5 * v5);
  if (v6 >= 2.351e-38)
  {
    v7 = sqrtf(v6);
    goto LABEL_3;
  }
  v54 = -v3;
  if (v3 >= 0.0)
    v54 = *a2;
  v55 = -v4;
  if (v4 >= 0.0)
    v55 = a2[1];
  if (v5 >= 0.0)
    v56 = a2[2];
  else
    v56 = -v5;
  if (v54 >= v55)
    v57 = v54;
  else
    v57 = v55;
  if (v57 < v56)
    v57 = v56;
  if (v57 != 0.0)
  {
    v7 = sqrtf((float)((float)((float)(v55 * (float)(1.0 / v57)) * (float)(v55 * (float)(1.0 / v57)))+ (float)((float)(v54 * (float)(1.0 / v57)) * (float)(v54 * (float)(1.0 / v57))))+ (float)((float)(v56 * (float)(1.0 / v57)) * (float)(v56 * (float)(1.0 / v57))))* v57;
LABEL_3:
    if (v7 != 0.0)
      goto LABEL_5;
  }
  *(_QWORD *)a2 = 0;
  a2[2] = 1.0;
  v5 = 1.0;
  v3 = 0.0;
  v4 = 0.0;
LABEL_5:
  v8 = *a3;
  v9 = a3[1];
  v10 = a3[2];
  v11 = (float)((float)(v8 * v8) + (float)(v9 * v9)) + (float)(v10 * v10);
  if (v11 >= 2.351e-38)
  {
    v12 = sqrtf(v11);
    goto LABEL_7;
  }
  v58 = -v8;
  if (v8 >= 0.0)
    v58 = *a3;
  v59 = -v9;
  if (v9 >= 0.0)
    v59 = a3[1];
  if (v10 >= 0.0)
    v60 = a3[2];
  else
    v60 = -v10;
  if (v58 >= v59)
    v61 = v58;
  else
    v61 = v59;
  if (v61 < v60)
    v61 = v60;
  if (v61 != 0.0)
  {
    v12 = sqrtf((float)((float)((float)(v59 * (float)(1.0 / v61)) * (float)(v59 * (float)(1.0 / v61)))+ (float)((float)(v58 * (float)(1.0 / v61)) * (float)(v58 * (float)(1.0 / v61))))+ (float)((float)(v60 * (float)(1.0 / v61)) * (float)(v60 * (float)(1.0 / v61))))* v61;
LABEL_7:
    if (v12 != 0.0)
      goto LABEL_9;
  }
  *(_QWORD *)a3 = 0x3F80000000000000;
  a3[2] = 0.0;
  v4 = a2[1];
  v5 = a2[2];
  v3 = *a2;
  v9 = 1.0;
  v8 = 0.0;
  v10 = 0.0;
LABEL_9:
  v13 = -(float)((float)(v4 * v10) - (float)(v5 * v9));
  v14 = -(float)((float)(v8 * v5) - (float)(v3 * v10));
  v15 = -(float)((float)(v3 * v9) - (float)(v8 * v4));
  v16 = (float)((float)(v13 * v13) + (float)(v14 * v14)) + (float)(v15 * v15);
  if (v16 < 2.351e-38)
  {
    if (v13 < 0.0)
      v13 = -v13;
    if (v14 < 0.0)
      v14 = -v14;
    v62 = -v15;
    if (v15 >= 0.0)
      v62 = -(float)((float)(v3 * v9) - (float)(v8 * v4));
    if (v13 >= v14)
      v63 = v13;
    else
      v63 = v14;
    if (v63 < v62)
      v63 = v62;
    if (v63 == 0.0)
      goto LABEL_12;
    v17 = sqrtf((float)((float)((float)(v14 * (float)(1.0 / v63)) * (float)(v14 * (float)(1.0 / v63)))+ (float)((float)(v13 * (float)(1.0 / v63)) * (float)(v13 * (float)(1.0 / v63))))+ (float)((float)(v62 * (float)(1.0 / v63)) * (float)(v62 * (float)(1.0 / v63))))* v63;
  }
  else
  {
    v17 = sqrtf(v16);
  }
  if (v17 != 0.0)
    goto LABEL_16;
LABEL_12:
  v8 = (float)(v4 - v5) * 0.0;
  v18 = v3 * 0.0;
  v9 = v5 - v18;
  v10 = v18 - v4;
  *a3 = v8;
  a3[1] = v5 - v18;
  a3[2] = v18 - v4;
  v19 = (float)((float)(v8 * v8) + (float)(v9 * v9)) + (float)(v10 * v10);
  if (v19 >= 2.351e-38)
  {
    v20 = sqrtf(v19);
    goto LABEL_14;
  }
  v76 = -v8;
  if (v8 >= 0.0)
    v76 = (float)(v4 - v5) * 0.0;
  v77 = -v9;
  if (v9 >= 0.0)
    v77 = v9;
  if (v10 >= 0.0)
    v78 = v10;
  else
    v78 = -v10;
  if (v76 >= v77)
    v79 = v76;
  else
    v79 = v77;
  if (v79 < v78)
    v79 = v78;
  if (v79 != 0.0)
  {
    v20 = sqrtf((float)((float)((float)(v77 * (float)(1.0 / v79)) * (float)(v77 * (float)(1.0 / v79)))+ (float)((float)(v76 * (float)(1.0 / v79)) * (float)(v76 * (float)(1.0 / v79))))+ (float)((float)(v78 * (float)(1.0 / v79)) * (float)(v78 * (float)(1.0 / v79))))* v79;
LABEL_14:
    if (v20 != 0.0)
      goto LABEL_16;
  }
  v21 = a2[1];
  v22 = a2[2] * 0.0;
  v8 = v21 - v22;
  v9 = v22 - *a2;
  v10 = (float)(*a2 - v21) * 0.0;
  *a3 = v21 - v22;
  a3[1] = v9;
  a3[2] = v10;
LABEL_16:
  v24 = a2[1];
  v23 = a2[2];
  v25 = *a2;
  v26 = -(float)((float)(v24 * v10) - (float)(v23 * v9));
  v27 = -(float)((float)(v8 * v23) - (float)(*a2 * v10));
  v28 = -(float)((float)(*a2 * v9) - (float)(v8 * v24));
  v29 = -(float)((float)(v28 * *a2) - (float)(v26 * v23));
  v30 = -(float)((float)(v27 * v23) - (float)(v28 * v24));
  v31 = -(float)((float)(v26 * v24) - (float)(v27 * *a2));
  v32 = (float)((float)(v26 * v26) + (float)(v27 * v27)) + (float)(v28 * v28);
  if (v32 < 2.351e-38)
  {
    v64 = -v26;
    if (v26 >= 0.0)
      v64 = v26;
    v65 = -v27;
    if (v27 >= 0.0)
      v65 = v27;
    if (v28 >= 0.0)
      v66 = v28;
    else
      v66 = -v28;
    if (v64 >= v65)
      v67 = v64;
    else
      v67 = v65;
    if (v67 < v66)
      v67 = v66;
    if (v67 == 0.0)
    {
      v39 = 0.0;
      v40 = 0.0;
      v41 = 0.0;
      goto LABEL_27;
    }
    v33 = sqrtf((float)((float)((float)(v65 * (float)(1.0 / v67)) * (float)(v65 * (float)(1.0 / v67)))+ (float)((float)(v64 * (float)(1.0 / v67)) * (float)(v64 * (float)(1.0 / v67))))+ (float)((float)(v66 * (float)(1.0 / v67)) * (float)(v66 * (float)(1.0 / v67))))* v67;
  }
  else
  {
    v33 = sqrtf(v32);
  }
  v34 = v33 == 0.0;
  v35 = 1.0 / v33;
  v36 = v26 * v35;
  v37 = v27 * v35;
  v38 = v28 * v35;
  if (v34)
    v39 = 0.0;
  else
    v39 = v36;
  if (v34)
    v40 = 0.0;
  else
    v40 = v37;
  if (v34)
    v41 = 0.0;
  else
    v41 = v38;
LABEL_27:
  v42 = (float)((float)(v30 * v30) + (float)(v29 * v29)) + (float)(v31 * v31);
  if (v42 < 2.351e-38)
  {
    v68 = -v30;
    if (v30 >= 0.0)
      v68 = v30;
    v69 = -v29;
    if (v29 >= 0.0)
      v69 = v29;
    if (v31 >= 0.0)
      v70 = v31;
    else
      v70 = -v31;
    if (v68 >= v69)
      v71 = v68;
    else
      v71 = v69;
    if (v71 < v70)
      v71 = v70;
    if (v71 == 0.0)
      goto LABEL_119;
    v43 = sqrtf((float)((float)((float)(v69 * (float)(1.0 / v71)) * (float)(v69 * (float)(1.0 / v71)))+ (float)((float)(v68 * (float)(1.0 / v71)) * (float)(v68 * (float)(1.0 / v71))))+ (float)((float)(v70 * (float)(1.0 / v71)) * (float)(v70 * (float)(1.0 / v71))))* v71;
  }
  else
  {
    v43 = sqrtf(v42);
  }
  if (v43 != 0.0)
  {
    v44 = 1.0 / v43;
    v45 = v30 * v44;
    v46 = v29 * v44;
    v47 = v31 * v44;
    goto LABEL_31;
  }
LABEL_119:
  v45 = 0.0;
  v46 = 0.0;
  v47 = 0.0;
LABEL_31:
  v48 = (float)((float)(v23 * v23) + (float)(v24 * v24)) + (float)(v25 * v25);
  if (v48 < 2.351e-38)
  {
    v72 = -v25;
    if (v25 >= 0.0)
      v72 = *a2;
    v73 = -v24;
    if (v24 >= 0.0)
      v73 = a2[1];
    if (v23 >= 0.0)
      v74 = a2[2];
    else
      v74 = -v23;
    if (v72 >= v73)
      v75 = v72;
    else
      v75 = v73;
    if (v75 < v74)
      v75 = v74;
    if (v75 == 0.0)
      goto LABEL_120;
    v49 = sqrtf((float)((float)((float)(v73 * (float)(1.0 / v75)) * (float)(v73 * (float)(1.0 / v75)))+ (float)((float)(v72 * (float)(1.0 / v75)) * (float)(v72 * (float)(1.0 / v75))))+ (float)((float)(v74 * (float)(1.0 / v75)) * (float)(v74 * (float)(1.0 / v75))))* v75;
  }
  else
  {
    v49 = sqrtf(v48);
  }
  if (v49 == 0.0)
  {
LABEL_120:
    v51 = 0.0;
    v52 = 0.0;
    v53 = 0.0;
    goto LABEL_35;
  }
  v50 = 1.0 / v49;
  v51 = v25 * v50;
  v52 = v24 * v50;
  v53 = v23 * v50;
LABEL_35:
  *(float *)result = v39;
  *(float *)(result + 4) = v40;
  *(float *)(result + 8) = v41;
  *(_DWORD *)(result + 12) = 0;
  *(float *)(result + 16) = v45;
  *(float *)(result + 20) = v46;
  *(float *)(result + 24) = v47;
  *(_DWORD *)(result + 28) = 0;
  *(float *)(result + 32) = v51;
  *(float *)(result + 36) = v52;
  *(float *)(result + 40) = v53;
  *(_QWORD *)(result + 52) = 0;
  *(_QWORD *)(result + 44) = 0;
  *(_DWORD *)(result + 60) = 1065353216;
  return result;
}

void sub_1DCBC19BC(float32x4_t *a1, float32x4_t a2)
{
  float32x4_t v3;
  float32x4_t v4;
  int32x4_t v5;
  float32x4_t v11;
  __n128 v12;
  _OWORD v13[4];
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int32 v17;
  _BYTE v18[32];
  _BYTE v19[32];

  a1[16] = a2;
  *(double *)v3.i64 = sub_1DCB4793C((float32x4_t **)(a1[3].i64[1] + 16), 0.0);
  v12 = (__n128)v3;
  v4 = vsubq_f32(v3, a1[16]);
  v5 = (int32x4_t)vmulq_f32(v4, v4);
  v5.i64[0] = vaddq_f32(vaddq_f32((float32x4_t)v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.i8, 1)), (float32x4_t)vdupq_laneq_s32(v5, 2)).u64[0];
  *(float *)v5.i32 = sqrtf(*(float *)v5.i32);
  *(_DWORD *)v18 = 1065353216;
  *(_OWORD *)&v18[4] = 0uLL;
  __asm { FMOV            V2.4S, #1.0 }
  v11 = vmulq_f32(v4, vdivq_f32(_Q2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.i8, 0)));
  *(_DWORD *)&v18[20] = 1065353216;
  *(_QWORD *)&v18[24] = 0;
  *(_QWORD *)v19 = 0;
  *(_QWORD *)&v19[20] = 0;
  *(_QWORD *)&v19[12] = 0;
  *(_DWORD *)&v19[8] = 1065353216;
  *(_DWORD *)&v19[28] = 1065353216;
  v16 = v11.i64[0];
  v17 = v11.i32[2];
  v14 = 0x3F80000000000000;
  v15 = 0;
  sub_1DCBC1458((uint64_t)v18, (float *)&v16, (float *)&v14);
  v13[0] = *(_OWORD *)v18;
  v13[1] = *(_OWORD *)&v18[16];
  v13[2] = *(_OWORD *)v19;
  v13[3] = *(_OWORD *)&v19[16];
  sub_1DCB47EA4(a1[3].i64[1] + 16, v13);
  sub_1DCBC1264((__n128 **)(a1[3].i64[1] + 16), v12);
}

void sub_1DCBC1AD0(float32x4_t *a1, float32x4_t a2, __n128 a3)
{
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  float32x4_t v12;
  __n128 v14;
  _OWORD v15[4];
  unint64_t v16;
  unsigned __int32 v17;
  uint64_t v18;
  __int32 v19;
  _BYTE v20[32];
  _BYTE v21[32];

  a1[16] = a2;
  *(double *)v4.i64 = sub_1DCB4793C((float32x4_t **)(a1[3].i64[1] + 16), 0.0);
  v14 = (__n128)v4;
  v5 = vsubq_f32(v4, a1[16]);
  v6 = (int32x4_t)vmulq_f32(v5, v5);
  v6.i64[0] = vaddq_f32(vaddq_f32((float32x4_t)v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.i8, 1)), (float32x4_t)vdupq_laneq_s32(v6, 2)).u64[0];
  *(float *)v6.i32 = sqrtf(*(float *)v6.i32);
  *(_DWORD *)v20 = 1065353216;
  *(_OWORD *)&v20[4] = 0uLL;
  *(_DWORD *)&v20[20] = 1065353216;
  __asm { FMOV            V2.4S, #1.0 }
  *(_QWORD *)&v20[24] = 0;
  *(_QWORD *)v21 = 0;
  *(_QWORD *)&v21[20] = 0;
  *(_QWORD *)&v21[12] = 0;
  v12 = vmulq_f32(v5, vdivq_f32(_Q2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.i8, 0)));
  *(_DWORD *)&v21[8] = 1065353216;
  *(_DWORD *)&v21[28] = 1065353216;
  v19 = v12.i32[2];
  v18 = v12.i64[0];
  v16 = a3.n128_u64[0];
  v17 = a3.n128_u32[2];
  sub_1DCBC1458((uint64_t)v20, (float *)&v18, (float *)&v16);
  v15[0] = *(_OWORD *)v20;
  v15[1] = *(_OWORD *)&v20[16];
  v15[2] = *(_OWORD *)v21;
  v15[3] = *(_OWORD *)&v21[16];
  sub_1DCB47EA4(a1[3].i64[1] + 16, v15);
  sub_1DCBC1264((__n128 **)(a1[3].i64[1] + 16), v14);
}

__n128 sub_1DCBC1BEC(uint64_t a1, float a2)
{
  uint64_t v2;
  float32x4_t v3;
  float32x4_t v4;
  __int128 v7;
  void *v8[2];
  void *v9[2];
  __int128 v10;
  void *v11[2];
  void *__p[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  *(_OWORD *)__p = 0u;
  v13 = 0u;
  v10 = 0u;
  *(_OWORD *)v11 = 0u;
  v2 = *(_QWORD *)(a1 + 56) + 16;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)v9 = 0u;
  sub_1DCBC1F60((uint64_t)v8, v2);
  v3 = 0uLL;
  v4 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v24, a2), (float32x4_t)0, v25), (float32x4_t)0, v26), (float32x4_t)0, v27);
  if (v8[1] != v8[0])
    v3 = *((float32x4_t *)v8[0] + 1);
  sub_1DCBC1264((__n128 **)v8, (__n128)vaddq_f32(v3, v4));
  v7 = v16;
  if (__p[1])
  {
    *(void **)&v13 = __p[1];
    operator delete(__p[1]);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
  if (v9[1])
  {
    *(void **)&v10 = v9[1];
    operator delete(v9[1]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
  return (__n128)v7;
}

void sub_1DCBC1D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1DCBC1D14((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBC1D14(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

double sub_1DCBC1D74(uint64_t a1, float a2)
{
  __int128 v2;

  if (fabsf(a2) >= 0.00000011921)
    *(_QWORD *)&v2 = sub_1DCBC1BEC(a1, a2).n128_u64[0];
  else
    v2 = *(_OWORD *)(*(_QWORD *)(a1 + 56) + 144);
  return *(double *)&v2;
}

float sub_1DCBC1DB8(uint64_t a1, float a2)
{
  __int128 v2;

  if (fabsf(a2) >= 0.00000011921)
    return sub_1DCBC1DE8(a1);
  v2 = *(_OWORD *)(a1 + 64);
  return *(float *)&v2;
}

float sub_1DCBC1DE8(uint64_t a1)
{
  float v1;

  v1 = *(float *)(a1 + 236) * 0.00872664626;
  return (float)((float)(1.0 / tanf(v1)) * COERCE_FLOAT(*(_QWORD *)(a1 + 208))) / *(float *)(a1 + 240);
}

double sub_1DCBC1EB8(float32x4_t *a1, double a2, double a3)
{
  float32x4_t v3;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x2_t v13;
  double result;

  v3 = vmlaq_n_f32(vmlaq_n_f32(a1[11], a1[8], (float)((float)(*(float *)&a2 + *(float *)&a2) / *(float *)&a3) + -1.0), a1[9], 1.0 - (float)((float)(*((float *)&a2 + 1) + *((float *)&a2 + 1)) / *((float *)&a3 + 1)));
  __asm { FMOV            V0.4S, #-1.0 }
  v9 = vmlaq_f32(v3, _Q0, a1[10]);
  v10 = vdivq_f32(v9, (float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 3));
  v11 = vmlaq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(a1[3].i64[1] + 144), v10.f32[0]), *(float32x4_t *)(a1[3].i64[1] + 160), *(float32x2_t *)v10.f32, 1), *(float32x4_t *)(a1[3].i64[1] + 176), v10, 2), (float32x4_t)0, *(float32x4_t *)(a1[3].i64[1] + 192));
  v12 = (int32x4_t)vmulq_f32(v11, v11);
  v12.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2)).u32[0];
  v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
  *(_QWORD *)&result = vmulq_n_f32(v11, vmul_f32(vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)), v13).f32[0]).u64[0];
  return result;
}

uint64_t sub_1DCBC1F60(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 113) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  sub_1DCBC1FF8(a1, a2);
  return a1;
}

void sub_1DCBC1FCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *(void **)(v1 + 72);
  if (v5)
  {
    *(_QWORD *)(v1 + 80) = v5;
    operator delete(v5);
  }
  sub_1DCC31E34(v2, v3, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBC1FF8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  if (a1 != a2)
  {
    sub_1DCBC208C((_QWORD *)a1, *(__int128 **)a2, *(__int128 **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
    sub_1DCBC208C((_QWORD *)(a1 + 24), *(__int128 **)(a2 + 24), *(__int128 **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 5);
    sub_1DCBC208C((_QWORD *)(a1 + 48), *(__int128 **)(a2 + 48), *(__int128 **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 5);
    sub_1DCBC208C((_QWORD *)(a1 + 72), *(__int128 **)(a2 + 72), *(__int128 **)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 5);
  }
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  sub_1DCB47B94(a1);
  return a1;
}

_OWORD *sub_1DCBC208C(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  unint64_t v11;
  _OWORD **v12;
  _OWORD *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 *v20;
  char *v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  int64_t v25;
  _OWORD *v26;

  v6 = a2;
  v8 = a1[2];
  result = (_OWORD *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 5)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59)
      sub_1DCAE4C44();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    sub_1DCB9AFA0(a1, v11);
    v13 = (_OWORD *)a1[1];
    v12 = (_OWORD **)(a1 + 1);
    result = v13;
    v14 = (char *)v13;
    if (v6 != a3)
    {
      v14 = (char *)result;
      do
      {
        v15 = *v6;
        v16 = v6[1];
        v6 += 2;
        *(_OWORD *)v14 = v15;
        *((_OWORD *)v14 + 1) = v16;
        v14 += 32;
      }
      while (v6 != a3);
    }
LABEL_25:
    v25 = v14 - (char *)result;
    goto LABEL_26;
  }
  v18 = (_OWORD *)a1[1];
  v12 = (_OWORD **)(a1 + 1);
  v17 = v18;
  v19 = ((char *)v18 - (char *)result) >> 5;
  if (v19 >= a4)
  {
    v14 = (char *)result;
    if (a2 != a3)
    {
      v26 = result;
      do
      {
        *(_QWORD *)v26 = *(_QWORD *)v6;
        v26[1] = v6[1];
        v14 += 32;
        v6 += 2;
        v26 += 2;
      }
      while (v6 != a3);
    }
    goto LABEL_25;
  }
  v20 = &a2[2 * v19];
  if (v17 != result)
  {
    do
    {
      *(_QWORD *)result = *(_QWORD *)v6;
      result[1] = v6[1];
      v6 += 2;
      result += 2;
    }
    while (v6 != v20);
    result = *v12;
  }
  v21 = (char *)result;
  if (v20 != a3)
  {
    v21 = (char *)result;
    v22 = result;
    do
    {
      v23 = *v20;
      v24 = v20[1];
      v20 += 2;
      *v22 = v23;
      v22[1] = v24;
      v22 += 2;
      v21 += 32;
    }
    while (v20 != a3);
  }
  v25 = v21 - (char *)result;
LABEL_26:
  *v12 = (_OWORD *)((char *)result + v25);
  return result;
}

void sub_1DCBC21F8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1EA574168;
  sub_1DCB0546C(a1 + 40);
  *(_QWORD *)a1 = &off_1EA574198;
  sub_1DCAD5CA8(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x1DF0D228CLL);
}

uint64_t sub_1DCBC2250(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4, uint64_t **a5, unsigned int a6)
{
  uint64_t *v10;
  int v11;
  unint64_t *v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unsigned int *v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__ *v26;
  uint64_t v27;
  const void **String;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  pxrInternal__aapl__pxrReserved__ *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t *v51;
  pxrInternal__aapl__pxrReserved__ *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v63;
  uint64_t **v64;
  uint64_t **v66;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  pxrInternal__aapl__pxrReserved__ *v78[2];
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  int v83;
  __int16 v84;
  _QWORD v85[2];
  uint64_t v86;
  int v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  char v90[8];
  uint64_t v91;
  uint64_t v92;
  __int128 *v93[2];

  v10 = (uint64_t *)sub_1DCBC3F20((uint64_t)v90, a1);
  sub_1DCBC2B88(v10, (uint64_t)v85);
  v80 = v91;
  v81 = v90;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v83 = 0;
  v84 = 0;
  v63 = a6;
  v11 = a6 ^ 1;
  v64 = a4 + 1;
  v12 = (unint64_t *)MEMORY[0x1E0DF24F8];
  v66 = a4;
  while ((char *)v85[1] != v81
       || v85[0] != v80
       || v86 != v82
       || v87 != v83
       || v88 != v84
       || v89 != HIBYTE(v84))
  {
    *(_OWORD *)v78 = 0u;
    v79 = 0u;
    sub_1DCBC2C20((uint64_t)v85, (uint64_t)v78);
    if (!sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)v78))
      goto LABEL_93;
    v77 = 0;
    if (LODWORD(v78[0]) == *(_DWORD *)a1
      && v78[1] == *(pxrInternal__aapl__pxrReserved__ **)(a1 + 8)
      && (_QWORD)v79 == *(_QWORD *)(a1 + 16)
      && (*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8))
    {
      v16 = 0;
      v74 = 0;
    }
    else
    {
      v14 = atomic_load(v12);
      if (!v14)
        v14 = sub_1DCAEF3C0(v12);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v78, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v14 + 1256));
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>())
      {
        v15 = atomic_load(v12);
        if (!v15)
          v15 = sub_1DCAEF3C0(v12);
        v16 = (v77 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v15 + 496) & 0xFFFFFFFFFFFFFFF8);
      }
      else
      {
        v16 = 0;
      }
      if ((BYTE8(v76) & 7) != 0)
      {
        v17 = (unsigned int *)(*((_QWORD *)&v76 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v76);
      if (*((_QWORD *)&v75 + 1))
        sub_1DCAEED94(*((uint64_t *)&v75 + 1));
      v19 = *(_DWORD *)a1;
      v74 = 0;
      if (LODWORD(v78[0]) != v19)
      {
LABEL_29:
        v20 = atomic_load(v12);
        if (!v20)
          v20 = sub_1DCAEF3C0(v12);
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v78, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v20 + 912));
        if (pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>())
        {
          v21 = atomic_load(v12);
          if (!v21)
            v21 = sub_1DCAEF3C0(v12);
          if ((v74 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v21 + 392) & 0xFFFFFFFFFFFFFFF8))
          {
            v23 = 1;
          }
          else
          {
            v22 = atomic_load(v12);
            if (!v22)
              v22 = sub_1DCAEF3C0(v12);
            v23 = (v74 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v22 + 952) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        else
        {
          v23 = 0;
        }
        if ((BYTE8(v76) & 7) != 0)
        {
          v24 = (unsigned int *)(*((_QWORD *)&v76 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v25 = __ldxr(v24);
          while (__stlxr(v25 - 2, v24));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v76);
        if (*((_QWORD *)&v75 + 1))
          sub_1DCAEED94(*((uint64_t *)&v75 + 1));
        goto LABEL_45;
      }
    }
    if (v78[1] != *(pxrInternal__aapl__pxrReserved__ **)(a1 + 8)
      || (_QWORD)v79 != *(_QWORD *)(a1 + 16)
      || (*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8))
    {
      goto LABEL_29;
    }
    v23 = 0;
LABEL_45:
    if ((v16 & v11 & 1) == 0 && !v23)
    {
      v26 = v78[1];
      if (!v78[1] || (v27 = *((_QWORD *)v78[1] + 7), (v27 & 0x800) != 0))
      {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v78[1], v13);
        v27 = *((_QWORD *)v26 + 7);
      }
      if ((v27 & 0x100) != 0)
      {
        v75 = 0u;
        v76 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)v78);
        sub_1DCB2FD04((uint64_t)&v75, v93);
        String = (const void **)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v93);
        v29 = sub_1DCAD34E8((uint64_t)v66, String);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)v93);
        if (v64 == (uint64_t **)v29)
        {
          v69 = v75;
          v70 = *((_QWORD *)&v75 + 1);
          if (*((_QWORD *)&v75 + 1))
          {
            v30 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 48);
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
          }
          sub_1DCB30114(&v71, &v76);
          sub_1DCB30164(&v72, (_DWORD *)&v76 + 1);
          v73 = *((_QWORD *)&v76 + 1);
          if ((BYTE8(v76) & 7) != 0)
          {
            v32 = (unsigned int *)(*((_QWORD *)&v76 + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 2, v32));
            if ((v33 & 1) == 0)
              v73 &= 0xFFFFFFFFFFFFFFF8;
          }
          sub_1DCBC2250(&v69, a2, a3, v66, a5, v63);
          if ((v73 & 7) != 0)
          {
            v34 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
            do
              v35 = __ldxr(v34);
            while (__stlxr(v35 - 2, v34));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v71);
          if (v70)
            sub_1DCAEED94(v70);
          sub_1DCB2FD04((uint64_t)&v75, &v68);
          v93[0] = (__int128 *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v68);
          v36 = sub_1DCBC6B0C(v66, (const void **)v93[0], (uint64_t)&unk_1DCC58300, v93);
          v37 = v36;
          *((_DWORD *)v36 + 14) = v75;
          v38 = *((_QWORD *)&v75 + 1);
          if (*((_QWORD *)&v75 + 1))
          {
            v39 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 48);
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
          }
          v41 = v36[8];
          v37[8] = v38;
          if (v41)
            sub_1DCAEED94(v41);
          sub_1DCBC41BC((uint64_t)(v37 + 9), &v76);
          sub_1DCBC4210((uint64_t)v37 + 76, (_DWORD *)&v76 + 1);
          sub_1DCAEEBA4(v37 + 10, (_QWORD *)&v76 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v68);
        }
        sub_1DCB2FD04((uint64_t)v78, &v68);
        v93[0] = (__int128 *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v68);
        v42 = sub_1DCBC6B0C(a5, (const void **)v93[0], (uint64_t)&unk_1DCC58300, v93);
        v43 = v42;
        *((_DWORD *)v42 + 14) = v78[0];
        v44 = v78[1];
        if (v78[1])
        {
          v45 = (unint64_t *)((char *)v78[1] + 48);
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        v47 = v42[8];
        v43[8] = (uint64_t)v44;
        if (v47)
          sub_1DCAEED94(v47);
        sub_1DCBC41BC((uint64_t)(v43 + 9), &v79);
        sub_1DCBC4210((uint64_t)v43 + 76, (_DWORD *)&v79 + 1);
        sub_1DCAEEBA4(v43 + 10, (_QWORD *)&v79 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v68);
        if ((BYTE8(v76) & 7) != 0)
        {
          v48 = (unsigned int *)(*((_QWORD *)&v76 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v49 = __ldxr(v48);
          while (__stlxr(v49 - 2, v48));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v76);
        if (*((_QWORD *)&v75 + 1))
          sub_1DCAEED94(*((uint64_t *)&v75 + 1));
      }
      sub_1DCB2FD04((uint64_t)v78, v93);
      *(_QWORD *)&v75 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v93);
      v50 = sub_1DCBC6B0C(a3, (const void **)v75, (uint64_t)&unk_1DCC58300, (__int128 **)&v75);
      v51 = v50;
      *((_DWORD *)v50 + 14) = v78[0];
      v52 = v78[1];
      if (v78[1])
      {
        v53 = (unint64_t *)((char *)v78[1] + 48);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v55 = v50[8];
      v51[8] = (uint64_t)v52;
      if (v55)
        sub_1DCAEED94(v55);
      sub_1DCBC41BC((uint64_t)(v51 + 9), &v79);
      sub_1DCBC4210((uint64_t)v51 + 76, (_DWORD *)&v79 + 1);
      sub_1DCAEEBA4(v51 + 10, (_QWORD *)&v79 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)v93);
    }
    if ((v74 & 7) != 0)
    {
      v56 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
      do
        v57 = __ldxr(v56);
      while (__stlxr(v57 - 2, v56));
    }
    if ((v77 & 7) != 0)
    {
      v58 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
      do
        v59 = __ldxr(v58);
      while (__stlxr(v59 - 2, v58));
    }
LABEL_93:
    if ((BYTE8(v79) & 7) != 0)
    {
      v60 = (unsigned int *)(*((_QWORD *)&v79 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v61 = __ldxr(v60);
      while (__stlxr(v61 - 2, v60));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v79);
    if (v78[1])
      sub_1DCAEED94((uint64_t)v78[1]);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v85);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v82);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v86);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_1DCAEEC34((uint64_t)&v92);
}

void sub_1DCBC2A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCBC2CCC(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBC2B88@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  int v7;
  int v8;

  v4 = *a1;
  sub_1DCB30114(&v7, (_DWORD *)a1 + 4);
  sub_1DCB30164(&v8, (_DWORD *)a1 + 5);
  v5 = *((_DWORD *)a1 + 12);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = a1;
  sub_1DCB30114((_DWORD *)(a2 + 16), &v7);
  sub_1DCB30164((_DWORD *)(a2 + 20), &v8);
  *(_DWORD *)(a2 + 24) = v5;
  *(_WORD *)(a2 + 28) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_1DCAEEC34((uint64_t)&v7);
}

uint64_t sub_1DCBC2C20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = *(_QWORD *)a1;
  v8 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_1DCB4FB38(a2, &v8, (_DWORD *)(a1 + 16));
  result = v8;
  if (v8)
    return sub_1DCAEED94(v8);
  return result;
}

void sub_1DCBC2C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_1DCAEED94(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBC2C98(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34(a1 + 16);
  return a1;
}

uint64_t sub_1DCBC2CCC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34(a1 + 16);
  return a1;
}

void sub_1DCBC2D00(void *a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, _QWORD *a5@<X8>)
{
  id v9;
  id v10;
  id v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  char *v22;
  MDLArchiveAssetResolver *v23;
  const char *v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  const char *v29;
  pxrInternal__aapl__pxrReserved__ *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  pxrInternal__aapl__pxrReserved__::TfToken *v37;
  const char *v38;
  uint64_t v39;
  uint64_t EmptyString;
  int v41;
  double v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  pxrInternal__aapl__pxrReserved__::UsdStage *v49;
  double v50;
  double v51;
  const char *v52;
  uint64_t v53;
  double v54;
  const char *v55;
  uint64_t v56;
  pxrInternal__aapl__pxrReserved__::UsdStage *v57;
  double v58;
  const char *v59;
  uint64_t v60;
  pxrInternal__aapl__pxrReserved__::UsdStage *v61;
  double v62;
  const char *v63;
  uint64_t v64;
  unsigned int **v65;
  uint64_t *i;
  _OWORD *v67;
  uint64_t v68;
  const char *v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  void *v73;
  void *v74;
  const char *v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  void *v81;
  id v82;
  void *v83[2];
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  void *__dst[2];
  uint64_t v88;
  unsigned int *v89;
  void *__p[2];
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  _QWORD v95[3];
  void *v96[2];
  uint64_t v97;

  v9 = a1;
  v10 = a2;
  v11 = a4;
  if (!v11)
  {
    sub_1DCB0345C(a5, "Cannot import into nil asset");
    goto LABEL_55;
  }
  sub_1DCAD5E24();
  v12 = objc_retainAutorelease(v10);
  v15 = objc_msgSend_bytes(v12, v13, v14);
  v18 = objc_msgSend_length(v12, v16, v17);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v19, (uint64_t)CFSTR("%@?address=%lx&size=%ld"), v9, v15, v18);
  v96[0] = 0;
  v96[1] = 0;
  v97 = 0;
  v82 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v22 = (char *)objc_msgSend_UTF8String(v82, v20, v21);
  sub_1DCB0345C(v96, v22);
  v23 = [MDLArchiveAssetResolver alloc];
  objc_msgSend_fileURLWithPath_(MEMORY[0x1E0C99E98], v24, (uint64_t)v9);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = (void *)objc_msgSend_initWithURL_(v23, v26, (uint64_t)v25);

  objc_msgSend_setData_(v27, v28, (uint64_t)v12);
  objc_msgSend_setResolver_(v11, v29, (uint64_t)v27);
  sub_1DCB0345C(__p, "ArMemoryResolver");
  v30 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArSetPreferredResolver();
  if (SBYTE7(v91) < 0)
    operator delete(__p[0]);
  memset(v95, 0, sizeof(v95));
  pxrInternal__aapl__pxrReserved__::ArGetResolver(v30);
  pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset();
  v94 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::Open();
  if (v94)
  {
    v93 = 0;
    v81 = v27;
    sub_1DCBC6D7C((uint64_t *)__p, (uint64_t *)&v94);
    pxrInternal__aapl__pxrReserved__::UsdGeomGetStageUpAxis();
    v33 = __p[1];
    if (__p[1])
    {
      v34 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v35 = __ldxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
        (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
    }
    v37 = (pxrInternal__aapl__pxrReserved__::TfToken *)objc_msgSend_setUpAxis_(v11, v31, v32, 0.0078125);
    if ((v93 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (v93 & 0xFFFFFFFFFFFFFFF8) + 16;
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v37);
    v41 = *(char *)(EmptyString + 23);
    if (v41 < 0)
    {
      if (*(_QWORD *)(EmptyString + 8) != 1)
        goto LABEL_22;
      EmptyString = *(_QWORD *)EmptyString;
    }
    else if (v41 != 1)
    {
LABEL_22:
      sub_1DCBC6D7C((uint64_t *)__p, (uint64_t *)&v94);
      pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
      *(float *)&v42 = v42;
      objc_msgSend_setMetersPerUnit_(v11, v43, v44, v42);
      v45 = __p[1];
      if (__p[1])
      {
        v46 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v47 = __ldxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48)
          (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
      }
      v49 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428((uint64_t *)&v94);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v49);
      v51 = v50;
      objc_msgSend_set_timeCodesPerSecond_(v11, v52, v53);
      v54 = 1.0 / v51;
      objc_msgSend_setFrameInterval_(v11, v55, v56, v54);
      v57 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428((uint64_t *)&v94);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v57);
      objc_msgSend_setStartTime_(v11, v59, v60, v58 * v54);
      v61 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428((uint64_t *)&v94);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(v61);
      objc_msgSend_setEndTime_(v11, v63, v64, v62 * v54);
      *(_OWORD *)__p = 0u;
      v91 = 0u;
      v92 = 1065353216;
      v89 = v94;
      sub_1DCBC6EF0((uint64_t *)&v89);
      sub_1DCBC34A8(v11, (uint64_t *)&v89, a3, (uint64_t)__p);
      v65 = sub_1DCBC6CA4(&v89);
      pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v65);
      for (i = (uint64_t *)v91; i; i = (uint64_t *)*i)
      {
        __dst[0] = 0;
        __dst[1] = 0;
        v88 = 0;
        v67 = i + 2;
        if (*((char *)i + 39) < 0)
        {
          sub_1DCACA658(__dst, (void *)i[2], i[3]);
        }
        else
        {
          *(_OWORD *)__dst = *v67;
          v88 = i[4];
        }
        v85 = 0;
        v86 = 0;
        if (SHIBYTE(v88) < 0)
        {
          sub_1DCACA658(v83, __dst[0], (unint64_t)__dst[1]);
        }
        else
        {
          *(_OWORD *)v83 = *(_OWORD *)__dst;
          v84 = v88;
        }
        pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
        if (SHIBYTE(v84) < 0)
          operator delete(v83[0]);
        if (v85)
        {
          v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 16))(v85);
          (*(void (**)(uint64_t))(*(_QWORD *)v85 + 40))(v85);
          v70 = v69;
          objc_msgSend_resolver(v11, v69, v71);
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          if (*((char *)i + 39) < 0)
            v67 = *(_OWORD **)v67;
          objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v72, (uint64_t)v67);
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addResolvedAssetNamed_offset_fileSize_(v73, v75, (uint64_t)v74, v70, v68);

        }
        v76 = v86;
        if (v86)
        {
          p_shared_owners = (unint64_t *)&v86->__shared_owners_;
          do
            v78 = __ldaxr(p_shared_owners);
          while (__stlxr(v78 - 1, p_shared_owners));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        if (SHIBYTE(v88) < 0)
          operator delete(__dst[0]);
      }
      sub_1DCB0345C(a5, "");
      sub_1DCAD5D10((uint64_t)__p);
      if ((v93 & 7) != 0)
      {
        v79 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFF8);
        do
          v80 = __ldxr(v79);
        while (__stlxr(v80 - 2, v79));
      }
      v27 = v81;
      goto LABEL_52;
    }
    if (*(_BYTE *)EmptyString == 90)
      objc_msgSend_setUpAxis_(v11, v38, v39, 0.0);
    goto LABEL_22;
  }
  sub_1DCB0345C(a5, "Could not import USD file");
LABEL_52:
  sub_1DCBC6CA4(&v94);
  __p[0] = v95;
  sub_1DCBA630C((void ***)__p);

  if (SHIBYTE(v97) < 0)
    operator delete(v96[0]);

LABEL_55:
}

void sub_1DCBC3238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;

  sub_1DCBC6CA4((unsigned int **)(v39 - 160));
  __p = (void *)(v39 - 152);
  sub_1DCBA630C((void ***)&__p);

  if (*(char *)(v39 - 105) < 0)
    operator delete(*(void **)(v39 - 128));

  _Unwind_Resume(a1);
}

void sub_1DCBC3410(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x1DCBC3388);
}

uint64_t sub_1DCBC3428(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    sub_1DCB9AC0C((unint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3 = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    return sub_1DCBC34A8(v3);
  }
  return result;
}

void sub_1DCBC34A8(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  pxrInternal__aapl__pxrReserved__::UsdStage *v8;
  unsigned int *v9;
  unsigned int v10;
  __int128 *v11;
  _BYTE *v12;
  id v13;
  const char *v14;
  int v15;
  const char *v16;
  uint64_t v17;
  id v18;
  id v19;
  const char *v20;
  void **v21;
  const char *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  const char *v26;
  _BOOL4 v28;
  const char *v29;
  const char *v30;
  void *v31;
  __int128 *v32;
  __int128 *v33;
  uint64_t *v34;
  uint64_t v35;
  const void **String;
  uint64_t v37;
  id v38;
  id v39;
  const char *v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t *v44;
  std::string v45;
  _BYTE __str[32];
  void *v47[2];
  void *__p[2];
  __int128 v49;
  __int128 *v50[3];
  __int128 *v51;
  _QWORD *v52[2];
  char v53[8];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58[2];
  uint64_t *v59;
  _QWORD *v60[2];
  uint64_t *v61;
  _QWORD *v62[2];
  char v63[9];

  v7 = a1;
  v62[0] = 0;
  v62[1] = 0;
  v60[1] = 0;
  v61 = (uint64_t *)v62;
  v59 = (uint64_t *)v60;
  v60[0] = 0;
  v58[0] = 0;
  v58[1] = 0;
  v57 = (uint64_t *)v58;
  v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v8);
  *(_QWORD *)__str = *(_QWORD *)(a3 + 64);
  sub_1DCBC2250((uint64_t)v53, (uint64_t)__str, &v57, &v59, &v61, 1u);
  if ((v56 & 7) != 0)
  {
    v9 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v55);
  if (v54)
    sub_1DCAEED94(v54);
  v52[0] = 0;
  v52[1] = 0;
  v51 = (__int128 *)v52;
  sub_1DCBC6644((uint64_t *)v50, (const void ***)&v57);
  sub_1DCBC4258(v7, a3, v50, (uint64_t)&v51, a4);
  sub_1DCBC68E4((uint64_t)v50, (_QWORD *)v50[1]);
  v11 = v51;
  if (v51 != (__int128 *)v52)
  {
    do
    {
      *(_OWORD *)__p = 0u;
      v49 = 0u;
      *(_OWORD *)v47 = 0u;
      memset(__str, 0, sizeof(__str));
      sub_1DCBC692C(__str, v11 + 2);
      if ((__str[23] & 0x80000000) != 0)
      {
        if (*(_QWORD *)&__str[8] != 1)
          goto LABEL_13;
        v12 = *(_BYTE **)__str;
      }
      else
      {
        if (__str[23] != 1)
          goto LABEL_13;
        v12 = __str;
      }
      if (*v12 == 47)
        goto LABEL_46;
LABEL_13:
      v13 = *(id *)&__str[24];
      v15 = objc_msgSend_conformsToProtocol_(v13, v14, (uint64_t)&unk_1F03BDC20);

      if (v15)
      {
        objc_msgSend_animations(v7, v16, v17);
        v18 = (id)objc_claimAutoreleasedReturnValue();
        v19 = *(id *)&__str[24];
        objc_msgSend_addObject_(v18, v20, (uint64_t)v19);
        goto LABEL_42;
      }
      if (SHIBYTE(__p[0]) < 0)
      {
        if (!v47[1])
          goto LABEL_23;
        if (v47[1] == (void *)1)
        {
          v21 = (void **)v47[0];
LABEL_22:
          if (*(_BYTE *)v21 == 47)
          {
LABEL_23:
            std::string::basic_string(&v45, (const std::string *)__str, 0, 9uLL, (std::allocator<char> *)v63);
            if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v45.__r_.__value_.__l.__size_ != 9)
              {
                operator delete(v45.__r_.__value_.__l.__data_);
                goto LABEL_44;
              }
              v28 = *(_QWORD *)v45.__r_.__value_.__l.__data_ != 0x657473614D5F5F2FLL
                 || *(_BYTE *)(v45.__r_.__value_.__r.__words[0] + 8) != 114;
              operator delete(v45.__r_.__value_.__l.__data_);
              if (!v28)
                goto LABEL_41;
LABEL_44:
              v18 = *(id *)&__str[24];
              objc_msgSend_addObject_(v7, v30, (uint64_t)v18);
            }
            else
            {
              if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) != 9)
                goto LABEL_44;
              v24 = v45.__r_.__value_.__r.__words[0] == 0x657473614D5F5F2FLL && v45.__r_.__value_.__s.__data_[8] == 114;
              if (!v24)
                goto LABEL_44;
LABEL_41:
              objc_msgSend_masters(v7, v22, v23);
              v18 = (id)objc_claimAutoreleasedReturnValue();
              v19 = *(id *)&__str[24];
              objc_msgSend_addObject_(v18, v29, (uint64_t)v19);
LABEL_42:

            }
            goto LABEL_46;
          }
        }
      }
      else
      {
        if (!HIBYTE(__p[0]))
          goto LABEL_23;
        v21 = v47;
        if (HIBYTE(__p[0]) == 1)
          goto LABEL_22;
      }
      v25 = sub_1DCAD34E8((uint64_t)&v51, (const void **)v47);
      if (v52 != (_QWORD **)v25)
      {
        v18 = *(id *)(v25 + 56);
        v19 = *(id *)&__str[24];
        objc_msgSend_addChild_(v18, v26, (uint64_t)v19);
        goto LABEL_42;
      }
LABEL_46:
      if (SHIBYTE(v49) < 0)
        operator delete(__p[1]);
      if (SHIBYTE(__p[0]) < 0)
        operator delete(v47[0]);
      v31 = *(void **)&__str[24];
      *(_QWORD *)&__str[24] = 0;

      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      v32 = (__int128 *)*((_QWORD *)v11 + 1);
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = *(__int128 **)v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (__int128 *)*((_QWORD *)v11 + 2);
          v24 = *(_QWORD *)v33 == (_QWORD)v11;
          v11 = v33;
        }
        while (!v24);
      }
      v11 = v33;
    }
    while (v33 != (__int128 *)v52);
  }
  v34 = v61;
  if (v61 != (uint64_t *)v62)
  {
    do
    {
      memset(__str, 0, sizeof(__str));
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v34 + 7));
      v35 = sub_1DCAD34E8((uint64_t)&v51, (const void **)v34 + 4);
      if (v52 != (_QWORD **)v35)
      {
        sub_1DCB2FD04((uint64_t)__str, &v45);
        String = (const void **)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
        v37 = sub_1DCAD34E8((uint64_t)&v51, String);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v45);
        if (v52 != (_QWORD **)v37)
        {
          v38 = *(id *)(v37 + 56);
          v39 = *(id *)(v35 + 56);
          objc_msgSend_setInstance_(v39, v40, (uint64_t)v38);

        }
      }
      if ((__str[24] & 7) != 0)
      {
        v41 = (unsigned int *)(*(_QWORD *)&__str[24] & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&__str[16]);
      if (*(_QWORD *)&__str[8])
        sub_1DCAEED94(*(uint64_t *)&__str[8]);
      v43 = (uint64_t *)v34[1];
      if (v43)
      {
        do
        {
          v44 = v43;
          v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v44 = (uint64_t *)v34[2];
          v24 = *v44 == (_QWORD)v34;
          v34 = v44;
        }
        while (!v24);
      }
      v34 = v44;
    }
    while (v44 != (uint64_t *)v62);
  }
  sub_1DCAC90C4((uint64_t)&v51, v52[0]);
  sub_1DCBC68E4((uint64_t)&v57, v58[0]);
  sub_1DCBC68E4((uint64_t)&v59, v60[0]);
  sub_1DCBC68E4((uint64_t)&v61, v62[0]);

}

void sub_1DCBC39AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,_QWORD *a28)
{
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;

  sub_1DCBC5DB8((uint64_t)&a13);
  sub_1DCAC90C4((uint64_t)&a27, a28);
  sub_1DCBC68E4(v31 - 168, *(_QWORD **)(v31 - 160));
  sub_1DCBC68E4(v31 - 144, *(_QWORD **)(v31 - 136));
  sub_1DCBC68E4(v31 - 120, *(_QWORD **)(v31 - 112));

  _Unwind_Resume(a1);
}

id sub_1DCBC3A9C(uint64_t *a1, void *a2)
{
  id v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  uint64_t v5;
  MDLAnimatedVector3Array *v6;
  const char *v7;
  void *v8;
  pxrInternal__aapl__pxrReserved__::UsdStage *v9;
  double v10;
  double i;
  pxrInternal__aapl__pxrReserved__::UsdStage *v12;
  float v13;
  double v14;
  double v15;
  uint64_t v16;
  float64x2_t v17;
  unsigned int v18;
  __int128 v19;
  unsigned int v20;
  const char *v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD v25[3];
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  float64x2_t v31;
  _BYTE v32[24];
  double v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v29 = 0u;
  v30 = 0u;
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v4);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v5 = atomic_load(MEMORY[0x1E0DF24F8]);
  if (!v5)
    v5 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
  v27 = (uint64_t *)sub_1DCBC6F58(&v26, (uint64_t *)(v5 + 232));
  v6 = [MDLAnimatedVector3Array alloc];
  v8 = (void *)objc_msgSend_initWithElementCount_(v6, v7, 2);
  v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v9);
  for (i = v10; ; i = v14 + 1.0)
  {
    v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(v12);
    v13 = i;
    v14 = v13;
    if (v15 < v13)
      break;
    v16 = operator new();
    memset(v25, 0, sizeof(v25));
    sub_1DCBC70E8(v25, (uint64_t *)v26, v27, ((char *)v27 - v26) >> 3);
    MEMORY[0x1DF0D0F0C](v16, v25, 1, 0, v14);
    *(_QWORD *)&v31.f64[0] = v25;
    sub_1DCAF0DD0((void ***)&v31);
    pxrInternal__aapl__pxrReserved__::UsdGeomBBoxCache::ComputeWorldBound();
    *(float32x2_t *)&v17.f64[0] = vcvt_f32_f64(v31);
    *(float *)&v18 = *(double *)v32;
    *(_QWORD *)&v17.f64[1] = __PAIR64__(HIDWORD(v31.f64[1]), v18);
    *(float32x2_t *)&v19 = vcvt_f32_f64(*(float64x2_t *)&v32[8]);
    *(float *)&v20 = v33;
    *((_QWORD *)&v19 + 1) = __PAIR64__(*(unsigned int *)&v32[20], v20);
    v31 = v17;
    *(_OWORD *)v32 = v19;
    objc_msgSend_setFloat3Array_count_atTime_(v8, v21, (uint64_t)&v31, 2, v14);
  }
  *(_QWORD *)&v31.f64[0] = &v26;
  sub_1DCAF0DD0((void ***)&v31);
  if ((BYTE8(v30) & 7) != 0)
  {
    v22 = (unsigned int *)(*((_QWORD *)&v30 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v30);
  if (*((_QWORD *)&v29 + 1))
    sub_1DCAEED94(*((uint64_t *)&v29 + 1));

  return v8;
}

void sub_1DCBC3CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  void *v19;

  a19 = (void **)&a12;
  sub_1DCAF0DD0(&a19);
  sub_1DCB4FAD8((uint64_t)&a15);

  _Unwind_Resume(a1);
}

BOOL sub_1DCBC3D9C(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;

  v3 = 0x2000;
  if (!a3)
    v3 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 56) & 0xFFFFFFFFFFFFDFFFLL | v3;
  v5 = *a1;
  v6 = a1[1];
  v9 = *a1 & v4;
  v8 = v6 & v5;
  return *((unsigned __int8 *)a1 + 16) != sub_1DCBC3E1C(&v9, 0, (uint64_t)&v9, 0xFu, &v8);
}

uint64_t sub_1DCBC3E1C(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, _QWORD *a5)
{
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;

  v5 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2))
        v6 = 64 - a2;
      else
        v6 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0)
        return 0;
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        v7 = v5 - 64;
        ++a1;
        ++a5;
        v8 = v5 <= 127;
        v5 -= 64;
        if (v8)
          goto LABEL_14;
      }
      return 0;
    }
    v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7)
      return 0;
  }
  return 1;
}

BOOL sub_1DCBC3EE8(uint64_t *a1, uint64_t a2)
{
  int v4;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_1DCBC3D9C(a1, a2, v4);
}

uint64_t sub_1DCBC3F20(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__ *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v10;
  BOOL v12;
  _QWORD *UsdPrimDefaultPredicate;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  v4 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
    goto LABEL_20;
  v6 = *(_QWORD *)(v5 + 40) & 7;
  v7 = *(_QWORD *)(v5 + 40) & 0xFFFFFFFFFFFFFFF8;
  if (v7)
    v8 = v6 == 0;
  else
    v8 = 0;
  if (v8)
    goto LABEL_21;
  if (!v6 || v7 == 0)
  {
LABEL_20:
    v7 = 0;
    goto LABEL_21;
  }
  while (1)
  {
    v10 = *(_QWORD *)(v7 + 40);
    v7 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 7) == 0 && v7 != 0)
      break;
    if (v7)
      v12 = (v10 & 7) == 0;
    else
      v12 = 1;
    if (v12)
      goto LABEL_20;
  }
LABEL_21:
  UsdPrimDefaultPredicate = (_QWORD *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v4);
  sub_1DCBC3FFC(a1, v5, v7, (_DWORD *)(a2 + 16), UsdPrimDefaultPredicate);
  return a1;
}

void sub_1DCBC3FE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCB2FDE8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBC3FFC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  sub_1DCBC41BC(a1 + 16, a4);
  sub_1DCBC4210(a1 + 20, a4 + 1);
  v8 = *a5;
  v9 = a5[1];
  if (*(_QWORD *)a1)
  {
    v10 = a5[2];
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v8 & 0x2000) != 0 || (v9 & 0x2000) == 0))
    {
      v8 |= 0x2000uLL;
      v9 &= ~0x2000uLL;
    }
  }
  else
  {
    LOBYTE(v10) = *((_BYTE *)a5 + 16);
  }
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v12 = 0u;
  v13 = 0u;
  sub_1DCBC2B88((uint64_t *)a1, (uint64_t)&v12);
  if ((_QWORD)v12 != *(_QWORD *)(a1 + 8) && !sub_1DCBC3EE8((uint64_t *)(a1 + 24), (uint64_t)&v12))
  {
    BYTE12(v13) = 1;
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v12);
    sub_1DCBC4124(a1, (uint64_t)&v12);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_1DCAEEC34((uint64_t)&v13);
}

void sub_1DCBC4110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCBC2C98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBC4124(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a2 + 29))
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_1DCBC41BC(a1 + 16, (_DWORD *)(a2 + 16));
  result = sub_1DCBC4210(a1 + 20, (_DWORD *)(a2 + 20));
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t sub_1DCBC41BC(uint64_t a1, _DWORD *a2)
{
  int v5;

  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==() & 1) == 0)
  {
    sub_1DCB30114(&v5, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
    sub_1DCAEEC34((uint64_t)&v5);
  }
  return a1;
}

uint64_t sub_1DCBC4210(uint64_t a1, _DWORD *a2)
{
  int v4;

  sub_1DCB30164(&v4, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return a1;
}

void sub_1DCBC4258(void *a1, uint64_t a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  id v7;
  void *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t String;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdGeomScope *IsPrimPath;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdGeomXform *IsA;
  pxrInternal__aapl__pxrReserved__::TfToken *v26;
  uint64_t EmptyString;
  uint64_t v28;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *v29;
  MDLObject *v30;
  const char *v31;
  void *v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  int v38;
  BOOL v39;
  const char *v40;
  const char *v41;
  MDLObject *v42;
  uint64_t *v43;
  void **v44;
  void **v45;
  int v46;
  void *v47;
  unsigned int *v48;
  unsigned int v49;
  __int128 *v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v54;
  unint64_t *v55;
  unint64_t v56;
  const char *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  void *v63;
  const char *v64;
  const char *v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  MDLObject *v81;
  MDLObject *v82;
  const char *v83;
  void *v84;
  const char *v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  __int128 v90;
  int v91;
  uint64_t v92;
  __int128 v93;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v94;
  uint64_t v95;
  __int128 v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *v103;
  uint64_t v104;
  __int128 v105;
  id v106;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  const char *v113;
  uint64_t v114;
  void *v115;
  const char *v116;
  uint64_t v117;
  const char *v118;
  void *v119;
  const char *v120;
  const char *v121;
  uint64_t v122;
  const char *v123;
  const char *v124;
  uint64_t v125;
  double v126;
  void *v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  double v131;
  void *v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  void *v136;
  const char *v137;
  MDLObject *v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  const char *v144;
  uint64_t v145;
  void *v146;
  void *v147;
  const char *v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  double v158;
  void *v159;
  id v160;
  uint64_t *v161;
  void **v162;
  void **v163;
  int v164;
  void *v165;
  id v166;
  unsigned int *v167;
  unsigned int v168;
  const char *v169;
  uint64_t v170;
  void *v171;
  const char *v172;
  uint64_t v173;
  void *v174;
  const char *v175;
  uint64_t v176;
  const char *v177;
  uint64_t v178;
  void *v179;
  const char *v180;
  void *v181;
  const char *v182;
  const char *v183;
  uint64_t v184;
  const char *v185;
  unsigned int *v186;
  unsigned int v187;
  id v188;
  uint64_t *v189;
  void **v190;
  void **v191;
  int v192;
  void *v193;
  unsigned int *v194;
  unsigned int v195;
  uint64_t *v196;
  id v197;
  unsigned int *v198;
  unsigned int v199;
  const char *v200;
  uint64_t v201;
  void *v202;
  const char *v203;
  uint64_t v204;
  const char *v205;
  void *v206;
  const char *v207;
  const char *v208;
  uint64_t v209;
  void *v210;
  const char *v211;
  const char *v212;
  const char *v213;
  void *v214;
  uint64_t v215;
  char *v216;
  uint64_t *v217;
  uint64_t *v218;
  uint64_t v219;
  _BYTE *v220;
  __int128 *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  _BYTE obj[32];
  __int128 v234;
  __int128 v235;
  void *v236[2];
  __int128 v237;
  void *__p[2];
  __int128 v239;
  __int128 v240;
  __int128 v241;
  void *v242[2];
  uint64_t v243;
  uint64_t v244;
  __int128 v245;
  __int128 v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  __int128 __dst;
  uint64_t v254;
  uint64_t v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  __int128 *v260[2];

  v224 = a5;
  *(_QWORD *)&v227 = a4;
  v7 = a1;
  v8 = v7;
  v9 = *a3;
  *((_QWORD *)&v229 + 1) = a3 + 1;
  if (*a3 != (__int128 *)(a3 + 1))
  {
    *(_QWORD *)&v228 = (char *)&v245 + 4;
    *(_QWORD *)&v230 = &obj[16];
    *((_QWORD *)&v230 + 1) = &obj[20];
    v223 = v227 + 8;
    v222 = (char *)&v241 + 4;
    v220 = &obj[4];
    v221 = &v241;
    v217 = &v243;
    v218 = (uint64_t *)&v242[1];
    v216 = (char *)v260 + 4;
    v225 = &v249;
    *(_QWORD *)&v226 = (char *)&v249 + 4;
    *((_QWORD *)&v228 + 1) = (char *)&v258 + 8;
    *(_QWORD *)&v229 = (char *)&v258 + 12;
    *((_QWORD *)&v227 + 1) = (char *)&v255 + 4;
    v10 = 0uLL;
    v219 = MEMORY[0x1E0DF3128] + 16;
    *((_QWORD *)&v226 + 1) = v7;
    do
    {
      v259 = 0;
      v257 = v10;
      v258 = v10;
      v256 = v10;
      sub_1DCBC6358(&v256, v9 + 2);
      v255 = 0;
      sub_1DCB2FD04((uint64_t)&v257 + 8, &v255);
      __dst = 0uLL;
      v254 = 0;
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v255);
      if (*(char *)(String + 23) < 0)
      {
        sub_1DCACA658(&__dst, *(void **)String, *(_QWORD *)(String + 8));
      }
      else
      {
        v12 = *(_OWORD *)String;
        v254 = *(_QWORD *)(String + 16);
        __dst = v12;
      }
      v251 = 0uLL;
      v252 = 0;
      sub_1DCBC5E1C((uint64_t)&v257 + 8, (uint64_t)obj);
      sub_1DCB2FD04((uint64_t)obj, &v245);
      v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v245);
      if (*(char *)(v13 + 23) < 0)
      {
        sub_1DCACA658(&v251, *(void **)v13, *(_QWORD *)(v13 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v13;
        v252 = *(_QWORD *)(v13 + 16);
        v251 = v14;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v245);
      if ((obj[24] & 7) != 0)
      {
        v15 = (unsigned int *)(*(_QWORD *)&obj[24] & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34(v230);
      if (*(_QWORD *)&obj[8])
        sub_1DCAEED94(*(uint64_t *)&obj[8]);
      *(_QWORD *)&v245 = 0;
      IsPrimPath = (pxrInternal__aapl__pxrReserved__::UsdGeomScope *)pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v255);
      if ((_DWORD)IsPrimPath)
      {
        v18 = atomic_load(MEMORY[0x1E0DF24F8]);
        if (!v18)
          v18 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)((char *)&v257 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)(v18 + 1256));
        if (pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>())
        {
          v19 = atomic_load(MEMORY[0x1E0DF24F8]);
          if (!v19)
            v19 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
          v20 = (v245 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v19 + 496) & 0xFFFFFFFFFFFFFFF8);
        }
        else
        {
          v20 = 0;
        }
        if ((obj[24] & 7) != 0)
        {
          v21 = (unsigned int *)(*(_QWORD *)&obj[24] & 0xFFFFFFFFFFFFFFF8);
          do
            v22 = __ldxr(v21);
          while (__stlxr(v22 - 2, v21));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34(v230);
        IsPrimPath = *(pxrInternal__aapl__pxrReserved__::UsdGeomScope **)&obj[8];
        if (*(_QWORD *)&obj[8])
          IsPrimPath = (pxrInternal__aapl__pxrReserved__::UsdGeomScope *)sub_1DCAEED94(*(uint64_t *)&obj[8]);
        if ((v245 & 7) != 0)
        {
          v23 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFFFF8);
          do
            v24 = __ldxr(v23);
          while (__stlxr(v24 - 2, v23));
        }
      }
      else
      {
        v20 = 0;
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomScope::_GetStaticTfType(IsPrimPath);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomXform *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if ((_DWORD)IsA)
      {
        v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_1DCAEEC08((_DWORD *)&v257 + 2);
        if ((*(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (*(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v26);
        v38 = *(char *)(EmptyString + 23);
        if (v38 < 0)
        {
          if (*(_QWORD *)(EmptyString + 8) != 9)
            goto LABEL_47;
          EmptyString = *(_QWORD *)EmptyString;
        }
        else if (v38 != 9)
        {
          goto LABEL_47;
        }
        v39 = *(_QWORD *)EmptyString == 0x6C6169726574614DLL && *(_BYTE *)(EmptyString + 8) == 115;
        if (!v39)
        {
LABEL_47:
          v30 = objc_alloc_init(MDLObject);
          objc_msgSend_setHidden_(v30, v40, v20);
          sub_1DCBC5EF8((_DWORD *)&v257 + 2);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setName_(v30, v41, (uint64_t)v36);
          goto LABEL_48;
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomXform::_GetStaticTfType(IsA);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        v28 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
        if ((v28 & 1) != 0
          || (pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)v28),
              pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(),
              v29 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA(),
              (_DWORD)v29))
        {
          v30 = objc_alloc_init(MDLObject);
          objc_msgSend_setHidden_(v30, v31, v20);
          sub_1DCBC5EF8((_DWORD *)&v257 + 2);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setName_(v30, v33, (uint64_t)v32);

          objc_msgSend_frameInterval(v8, v34, v35);
          sub_1DCB4E1E8();
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setTransform_(v30, v37, (uint64_t)v36);
          goto LABEL_48;
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(v29);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        v52 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
        if ((v52 & 1) == 0)
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v52);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          v53 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
          if ((v53 & 1) == 0)
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomCamera::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)v53);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            v54 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
            if ((_DWORD)v54)
            {
              v247 = DWORD2(v257);
              v248 = v258;
              if ((_QWORD)v258)
              {
                v55 = (unint64_t *)(v258 + 48);
                do
                  v56 = __ldxr(v55);
                while (__stxr(v56 + 1, v55));
              }
              sub_1DCB30114(v225, *((_DWORD **)&v228 + 1));
              sub_1DCB30164((_DWORD *)v226, (_DWORD *)v229);
              v250 = v259;
              if ((v259 & 7) != 0)
              {
                v59 = (unsigned int *)(v259 & 0xFFFFFFFFFFFFFFF8);
                do
                  v60 = __ldxr(v59);
                while (__stxr(v60 + 2, v59));
                if ((v60 & 1) == 0)
                  v250 &= 0xFFFFFFFFFFFFFFF8;
              }
              objc_msgSend_frameInterval(v8, v57, v58);
              sub_1DCC31110(&v247);
              v30 = (MDLObject *)objc_claimAutoreleasedReturnValue();
              if ((v250 & 7) != 0)
              {
                v61 = (unsigned int *)(v250 & 0xFFFFFFFFFFFFFFF8);
                do
                  v62 = __ldxr(v61);
                while (__stlxr(v62 - 2, v61));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_1DCAEEC34((uint64_t)v225);
              if (v248)
                sub_1DCAEED94(v248);
              sub_1DCBC5EF8((_DWORD *)&v257 + 2);
              v63 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setName_(v30, v64, (uint64_t)v63);

              objc_msgSend_setHidden_(v30, v65, v20);
              objc_msgSend_frameInterval(v8, v66, v67);
              sub_1DCB4E1E8();
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setTransform_(v30, v68, (uint64_t)v36);
LABEL_48:

              goto LABEL_49;
            }
            pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v54);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            v69 = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
            if ((_DWORD)v69)
            {
              objc_msgSend_bufferAllocator(v8, v70, v71);
              v72 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_resolver(v8, v73, v74);
              v75 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_frameInterval(v8, v76, v77);
              objc_msgSend_vertexDescriptor(v8, v78, v79);
              v80 = (void *)objc_claimAutoreleasedReturnValue();
              sub_1DCB99CE4(v72, a2, v75, (pxrInternal__aapl__pxrReserved__::UsdPrim *)((char *)&v257 + 8), v224, v80);
              v81 = (MDLObject *)objc_claimAutoreleasedReturnValue();

              if (!v81)
                v81 = objc_alloc_init(MDLObject);
              v82 = v81;
              objc_msgSend_setHidden_(v82, v83, v20);
              sub_1DCBC5EF8((_DWORD *)&v257 + 2);
              v84 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setName_(v82, v85, (uint64_t)v84);

              objc_msgSend_frameInterval(*((void **)&v226 + 1), v86, v87);
              sub_1DCB4E1E8();
              v88 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setTransform_(v82, v89, (uint64_t)v88);

              v30 = v82;
              v245 = 0u;
              v246 = 0u;
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              *((_QWORD *)&v246 + 1) = 0;
              *(_QWORD *)&v245 = v219;
              v242[0] = 0;
              v242[1] = 0;
              v243 = 0;
              v8 = (void *)*((_QWORD *)&v226 + 1);
              pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v245);
              v90 = 0uLL;
              if (v242[1]
                && (*((_BYTE *)v242[1] + 57) & 8) == 0
                && (v91 = (*((uint64_t (**)(void **, __n128))v242[0] + 4))(v242, (__n128)0), v90 = 0uLL, v91))
              {
                v240 = 0uLL;
                v241 = 0uLL;
                sub_1DCB4FB38((uint64_t)&v240, v218, v217);
                __p[0] = 0;
                __p[1] = 0;
                *(_QWORD *)&v239 = 0;
                sub_1DCB2FD04((uint64_t)&v240, obj);
                v92 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)obj);
                if (*(char *)(v92 + 23) < 0)
                {
                  sub_1DCACA658(__p, *(void **)v92, *(_QWORD *)(v92 + 8));
                }
                else
                {
                  v93 = *(_OWORD *)v92;
                  *(_QWORD *)&v239 = *(_QWORD *)(v92 + 16);
                  *(_OWORD *)__p = v93;
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                sub_1DCAEEC34((uint64_t)obj);
                v141 = sub_1DCAD34E8(v227, (const void **)__p);
                v142 = v141;
                if (v223 == v141)
                {
                  sub_1DCB89C14(&v240, *(double *)(a2 + 64));
                  v146 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v146)
                  {
                    objc_msgSend_frameInterval(*((void **)&v226 + 1), v144, v145);
                    sub_1DCB4E1E8();
                    v147 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_setTransform_(v146, v148, (uint64_t)v147);

                  }
                  v236[0] = 0;
                  v236[1] = 0;
                  *(_QWORD *)&v237 = 0;
                  sub_1DCBC5E1C((uint64_t)&v240, (uint64_t)obj);
                  v8 = (void *)*((_QWORD *)&v226 + 1);
                  sub_1DCB2FD04((uint64_t)obj, v260);
                  v149 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v260);
                  if (*(char *)(v149 + 23) < 0)
                  {
                    sub_1DCACA658(v236, *(void **)v149, *(_QWORD *)(v149 + 8));
                  }
                  else
                  {
                    v150 = *(_OWORD *)v149;
                    *(_QWORD *)&v237 = *(_QWORD *)(v149 + 16);
                    *(_OWORD *)v236 = v150;
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  sub_1DCAEEC34((uint64_t)v260);
                  if ((obj[24] & 7) != 0)
                  {
                    v186 = (unsigned int *)(*(_QWORD *)&obj[24] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v187 = __ldxr(v186);
                    while (__stlxr(v187 - 2, v186));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  sub_1DCAEEC34(v230);
                  if (*(_QWORD *)&obj[8])
                    sub_1DCAEED94(*(uint64_t *)&obj[8]);
                  v188 = v146;
                  *(_QWORD *)obj = v188;
                  if (SBYTE7(v237) < 0)
                  {
                    sub_1DCACA658(&obj[8], v236[0], (unint64_t)v236[1]);
                  }
                  else
                  {
                    *(_OWORD *)&obj[8] = *(_OWORD *)v236;
                    *(_QWORD *)&obj[24] = v237;
                  }
                  if (SBYTE7(v239) < 0)
                  {
                    sub_1DCACA658(&v234, __p[0], (unint64_t)__p[1]);
                  }
                  else
                  {
                    v234 = *(_OWORD *)__p;
                    *(_QWORD *)&v235 = v239;
                  }
                  v215 = (uint64_t)v188;
                  v260[0] = (__int128 *)__p;
                  v189 = sub_1DCACADA0((uint64_t **)v227, (const void **)__p, (uint64_t)&unk_1DCC58300, v260);
                  objc_storeStrong((id *)v189 + 7, *(id *)obj);
                  v190 = (void **)(v189 + 8);
                  if (*((char *)v189 + 87) < 0)
                    operator delete(*v190);
                  v189[10] = *(_QWORD *)&obj[24];
                  *(_OWORD *)v190 = *(_OWORD *)&obj[8];
                  obj[31] = 0;
                  obj[8] = 0;
                  v191 = (void **)(v189 + 11);
                  if (*((char *)v189 + 111) < 0)
                  {
                    operator delete(*v191);
                    v192 = obj[31];
                    *(_OWORD *)v191 = v234;
                    v189[13] = v235;
                    BYTE7(v235) = 0;
                    LOBYTE(v234) = 0;
                    if (v192 < 0)
                      operator delete(*(void **)&obj[8]);
                  }
                  else
                  {
                    *(_OWORD *)v191 = v234;
                    v189[13] = v235;
                    BYTE7(v235) = 0;
                    LOBYTE(v234) = 0;
                  }
                  v193 = *(void **)obj;
                  *(_QWORD *)obj = 0;

                  v97 = (id)v215;
                  if (SBYTE7(v237) < 0)
                    operator delete(v236[0]);
                }
                else
                {
                  v143 = *(id *)(v141 + 56);
                  objc_opt_class();
                  v8 = (void *)*((_QWORD *)&v226 + 1);
                  if ((objc_opt_isKindOfClass() & 1) != 0)
                    v97 = *(id *)(v142 + 56);
                  else
                    v97 = 0;

                }
                if (SBYTE7(v239) < 0)
                  operator delete(__p[0]);
                if ((BYTE8(v241) & 7) != 0)
                {
                  v194 = (unsigned int *)(*((_QWORD *)&v241 + 1) & 0xFFFFFFFFFFFFFFF8);
                  do
                    v195 = __ldxr(v194);
                  while (__stlxr(v195 - 2, v194));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                sub_1DCAEEC34((uint64_t)v221);
                if (*((_QWORD *)&v240 + 1))
                  sub_1DCAEED94(*((uint64_t *)&v240 + 1));
                v90 = 0uLL;
              }
              else
              {
                v97 = 0;
              }
              v240 = v90;
              v241 = v90;
              pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedAnimationSource((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v245);
              if (sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v240))
              {
                __p[0] = 0;
                __p[1] = 0;
                *(_QWORD *)&v239 = 0;
                sub_1DCB2FD04((uint64_t)&v240, obj);
                v101 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)obj);
                if (*(char *)(v101 + 23) < 0)
                {
                  sub_1DCACA658(__p, *(void **)v101, *(_QWORD *)(v101 + 8));
                }
                else
                {
                  v102 = *(_OWORD *)v101;
                  *(_QWORD *)&v239 = *(_QWORD *)(v101 + 16);
                  *(_OWORD *)__p = v102;
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                sub_1DCAEEC34((uint64_t)obj);
                v128 = sub_1DCAD34E8(v227, (const void **)__p);
                if (v223 == v128)
                {
                  objc_msgSend_frameInterval(v8, v129, v130);
                  sub_1DCB8943C((uint64_t)&v240, *(unsigned __int8 *)(a2 + 35), v131, *(double *)(a2 + 64));
                  v132 = (void *)objc_claimAutoreleasedReturnValue();
                  v106 = v132;
                  if (v132)
                  {
                    *(_QWORD *)obj = v132;
                    v214 = *(void **)obj;
                    v215 = (uint64_t)v97;
                    sub_1DCB0345C(&obj[8], "");
                    if (SBYTE7(v239) < 0)
                    {
                      sub_1DCACA658(&v234, __p[0], (unint64_t)__p[1]);
                    }
                    else
                    {
                      v234 = *(_OWORD *)__p;
                      *(_QWORD *)&v235 = v239;
                    }
                    v236[0] = __p;
                    v161 = sub_1DCACADA0((uint64_t **)v227, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)v236);
                    objc_storeStrong((id *)v161 + 7, *(id *)obj);
                    v162 = (void **)(v161 + 8);
                    if (*((char *)v161 + 87) < 0)
                      operator delete(*v162);
                    v161[10] = *(_QWORD *)&obj[24];
                    *(_OWORD *)v162 = *(_OWORD *)&obj[8];
                    obj[31] = 0;
                    obj[8] = 0;
                    v163 = (void **)(v161 + 11);
                    if (*((char *)v161 + 111) < 0)
                    {
                      operator delete(*v163);
                      v164 = obj[31];
                      *(_OWORD *)v163 = v234;
                      v161[13] = v235;
                      BYTE7(v235) = 0;
                      LOBYTE(v234) = 0;
                      v97 = (id)v215;
                      if (v164 < 0)
                        operator delete(*(void **)&obj[8]);
                    }
                    else
                    {
                      *(_OWORD *)v163 = v234;
                      v161[13] = v235;
                      BYTE7(v235) = 0;
                      LOBYTE(v234) = 0;
                      v97 = (id)v215;
                    }
                    v165 = *(void **)obj;
                    *(_QWORD *)obj = 0;

                    v166 = v214;
                    v8 = (void *)*((_QWORD *)&v226 + 1);
                  }

                }
                else
                {
                  v106 = *(id *)(v128 + 56);
                }
                if (SBYTE7(v239) < 0)
                  operator delete(__p[0]);
              }
              else
              {
                v106 = 0;
              }
              sub_1DCB8A130((uint64_t)&v257 + 8, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v245, v30, v97, v106, v98, v99, v100, (uint64_t)v214, v215, (uint64_t)v216, (uint64_t)v217, (uint64_t)v218, v219, (uint64_t)v220, (uint64_t)v221, (uint64_t)v222, v223, v224,
                (uint64_t)v225,
                v226,
                v227,
                v228,
                v229,
                v230,
                v231,
                v232,
                *(__int128 *)obj,
                *(__int128 *)&obj[16],
                v234,
                v235,
                *(__int128 *)v236,
                v237,
                *(__int128 *)__p,
                v239,
                v240,
                v241,
                *(__int128 *)v242,
                v243,
                v244,
                v245,
                *((uint64_t *)&v245 + 1));

              if ((BYTE8(v241) & 7) != 0)
              {
                v167 = (unsigned int *)(*((_QWORD *)&v241 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v168 = __ldxr(v167);
                while (__stlxr(v168 - 2, v167));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_1DCAEEC34((uint64_t)v221);
              if (*((_QWORD *)&v240 + 1))
                sub_1DCAEED94(*((uint64_t *)&v240 + 1));

              MEMORY[0x1DF0D0EDC](v242);
              MEMORY[0x1DF0D0FF0](&v245);

              goto LABEL_49;
            }
            pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(v69);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            v94 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
            if ((_DWORD)v94)
            {
              memset(obj, 0, 24);
              sub_1DCB2FD04((uint64_t)&v257 + 8, &v245);
              v95 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v245);
              if (*(char *)(v95 + 23) < 0)
              {
                sub_1DCACA658(obj, *(void **)v95, *(_QWORD *)(v95 + 8));
              }
              else
              {
                v96 = *(_OWORD *)v95;
                *(_QWORD *)&obj[16] = *(_QWORD *)(v95 + 16);
                *(_OWORD *)obj = v96;
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_1DCAEEC34((uint64_t)&v245);
              if (v223 == sub_1DCAD34E8(v227, (const void **)obj))
              {
                objc_msgSend_frameInterval(v8, v124, v125);
                sub_1DCB8943C((uint64_t)&v257 + 8, *(unsigned __int8 *)(a2 + 35), v126, *(double *)(a2 + 64));
                v30 = (MDLObject *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v30 = 0;
              }
              if ((obj[23] & 0x80000000) != 0)
              {
                v127 = *(void **)obj;
                goto LABEL_227;
              }
              goto LABEL_49;
            }
            pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(v94);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            v103 = (pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
            if ((_DWORD)v103)
            {
              v242[0] = 0;
              v242[1] = 0;
              v243 = 0;
              sub_1DCB2FD04((uint64_t)&v257 + 8, obj);
              v104 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)obj);
              if (*(char *)(v104 + 23) < 0)
              {
                sub_1DCACA658(v242, *(void **)v104, *(_QWORD *)(v104 + 8));
              }
              else
              {
                v105 = *(_OWORD *)v104;
                v243 = *(_QWORD *)(v104 + 16);
                *(_OWORD *)v242 = v105;
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_1DCAEEC34((uint64_t)obj);
              v133 = sub_1DCAD34E8(v227, (const void **)v242);
              if (v223 == v133)
              {
                sub_1DCB89C14((_DWORD *)&v257 + 2, *(double *)(a2 + 64));
                v30 = (MDLObject *)objc_claimAutoreleasedReturnValue();
                if (v30)
                {
                  objc_msgSend_frameInterval(v8, v134, v135);
                  sub_1DCB4E1E8();
                  v136 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_setTransform_(v30, v137, (uint64_t)v136);

                  v138 = v30;
                }

              }
              else
              {
                v30 = (MDLObject *)*(id *)(v133 + 56);
              }
              v245 = 0u;
              v246 = 0u;
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              *((_QWORD *)&v246 + 1) = 0;
              *(_QWORD *)&v245 = MEMORY[0x1E0DF3128] + 16;
              v240 = 0u;
              v241 = 0u;
              pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedAnimationSource((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v245);
              if (sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v240))
              {
                __p[0] = 0;
                __p[1] = 0;
                *(_QWORD *)&v239 = 0;
                sub_1DCB2FD04((uint64_t)&v240, obj);
                v139 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)obj);
                if (*(char *)(v139 + 23) < 0)
                {
                  sub_1DCACA658(__p, *(void **)v139, *(_QWORD *)(v139 + 8));
                }
                else
                {
                  v140 = *(_OWORD *)v139;
                  *(_QWORD *)&v239 = *(_QWORD *)(v139 + 16);
                  *(_OWORD *)__p = v140;
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                sub_1DCAEEC34((uint64_t)obj);
                v151 = sub_1DCAD34E8(v227, (const void **)__p);
                if (v223 == v151)
                {
                  objc_msgSend_frameInterval(v8, v152, v153);
                  sub_1DCB8943C((uint64_t)&v240, *(unsigned __int8 *)(a2 + 35), v158, *(double *)(a2 + 64));
                  v159 = (void *)objc_claimAutoreleasedReturnValue();
                  v157 = v159;
                  if (v159)
                  {
                    v160 = v159;
                    *(_QWORD *)obj = v160;
                    sub_1DCB0345C(&obj[8], "");
                    if (SBYTE7(v239) < 0)
                    {
                      sub_1DCACA658(&v234, __p[0], (unint64_t)__p[1]);
                    }
                    else
                    {
                      v234 = *(_OWORD *)__p;
                      *(_QWORD *)&v235 = v239;
                    }
                    v236[0] = __p;
                    v196 = sub_1DCACADA0((uint64_t **)v227, (const void **)__p, (uint64_t)&unk_1DCC58300, (__int128 **)v236);
                    sub_1DCBC6078((uint64_t)(v196 + 7), (uint64_t)obj);
                    sub_1DCBC6108((uint64_t)obj);
                    v197 = v160;
                  }

                }
                else
                {
                  v157 = *(id *)(v151 + 56);
                }
                sub_1DCB8A130((uint64_t)&v257 + 8, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v245, v30, 0, v157, v154, v155, v156, (uint64_t)v214, v215, (uint64_t)v216, (uint64_t)v217, (uint64_t)v218, v219, (uint64_t)v220, (uint64_t)v221, (uint64_t)v222, v223, v224,
                  (uint64_t)v225,
                  v226,
                  v227,
                  v228,
                  v229,
                  v230,
                  v231,
                  v232,
                  *(__int128 *)obj,
                  *(__int128 *)&obj[16],
                  v234,
                  v235,
                  *(__int128 *)v236,
                  v237,
                  *(__int128 *)__p,
                  v239,
                  v240,
                  v241,
                  *(__int128 *)v242,
                  v243,
                  v244,
                  v245,
                  *((uint64_t *)&v245 + 1));
                if (SBYTE7(v239) < 0)
                  operator delete(__p[0]);

              }
              if ((BYTE8(v241) & 7) != 0)
              {
                v198 = (unsigned int *)(*((_QWORD *)&v241 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v199 = __ldxr(v198);
                while (__stlxr(v199 - 2, v198));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_1DCAEEC34((uint64_t)v221);
              if (*((_QWORD *)&v240 + 1))
                sub_1DCAEED94(*((uint64_t *)&v240 + 1));
              MEMORY[0x1DF0D0FF0](&v245);
              if ((SHIBYTE(v243) & 0x80000000) == 0)
                goto LABEL_49;
              v127 = v242[0];
LABEL_227:
              operator delete(v127);
LABEL_49:
              if (v30)
              {
                v42 = v30;
                *(_QWORD *)obj = v42;
                if (SHIBYTE(v252) < 0)
                {
                  sub_1DCACA658(&obj[8], (void *)v251, *((unint64_t *)&v251 + 1));
                }
                else
                {
                  *(_OWORD *)&obj[8] = v251;
                  *(_QWORD *)&obj[24] = v252;
                }
                if (SHIBYTE(v254) < 0)
                {
                  sub_1DCACA658(&v234, (void *)__dst, *((unint64_t *)&__dst + 1));
                }
                else
                {
                  v234 = __dst;
                  *(_QWORD *)&v235 = v254;
                }
                *(_QWORD *)&v245 = &__dst;
                v43 = sub_1DCACADA0((uint64_t **)v227, (const void **)&__dst, (uint64_t)&unk_1DCC58300, (__int128 **)&v245);
                objc_storeStrong((id *)v43 + 7, *(id *)obj);
                v44 = (void **)(v43 + 8);
                if (*((char *)v43 + 87) < 0)
                  operator delete(*v44);
                v43[10] = *(_QWORD *)&obj[24];
                *(_OWORD *)v44 = *(_OWORD *)&obj[8];
                obj[31] = 0;
                obj[8] = 0;
                v45 = (void **)(v43 + 11);
                if (*((char *)v43 + 111) < 0)
                {
                  operator delete(*v45);
                  v46 = obj[31];
                  *(_OWORD *)v45 = v234;
                  v43[13] = v235;
                  BYTE7(v235) = 0;
                  LOBYTE(v234) = 0;
                  if (v46 < 0)
                    operator delete(*(void **)&obj[8]);
                }
                else
                {
                  *(_OWORD *)v45 = v234;
                  v43[13] = v235;
                  BYTE7(v235) = 0;
                  LOBYTE(v234) = 0;
                }
                v47 = *(void **)obj;
                *(_QWORD *)obj = 0;

                v8 = (void *)*((_QWORD *)&v226 + 1);
              }
              goto LABEL_63;
            }
            pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::_GetStaticTfType(v103);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) != 0)
              goto LABEL_63;
            v108 = v258;
            if (!(_QWORD)v258 || (*(_BYTE *)(v258 + 57) & 8) != 0)
              pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v258, v107);
            v109 = *(uint64_t **)(v108 + 24);
            MEMORY[0x1DF0D1254](obj, "BlendShape");
            v110 = *v109;
            v111 = (unsigned int *)(*(_QWORD *)obj & 0xFFFFFFFFFFFFFFF8);
            if ((obj[0] & 7) != 0)
            {
              do
                v112 = __ldxr(v111);
              while (__stlxr(v112 - 2, v111));
            }
            if ((unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8) == v111)
              goto LABEL_63;
            if (sub_1DCBC615C((pxrInternal__aapl__pxrReserved__::UsdGeomCurves *)((char *)&v257 + 8)))
            {
              objc_msgSend_bufferAllocator(v8, v113, v114);
              v115 = (void *)objc_claimAutoreleasedReturnValue();
              sub_1DCB4F754((uint64_t)&v231, (uint64_t)&v257 + 8);
              objc_msgSend_frameInterval(v8, v116, v117);
              sub_1DCAEDA84(v115, &v231);
              v30 = (MDLObject *)objc_claimAutoreleasedReturnValue();
              sub_1DCB4FAD8((uint64_t)&v231);

              objc_msgSend_setHidden_(v30, v118, v20);
              sub_1DCBC5EF8((_DWORD *)&v257 + 2);
              v119 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setName_(v30, v120, (uint64_t)v119);

              objc_msgSend_frameInterval(v8, v121, v122);
              sub_1DCB4E1E8();
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setTransform_(v30, v123, (uint64_t)v36);
              goto LABEL_48;
            }
            if ((sub_1DCBC6188((pxrInternal__aapl__pxrReserved__::UsdGeomCube *)((char *)&v257 + 8)) & 1) != 0
              || (sub_1DCBC61B4((pxrInternal__aapl__pxrReserved__::UsdGeomCone *)((char *)&v257 + 8)) & 1) != 0
              || (sub_1DCBC61E0((pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)((char *)&v257 + 8)) & 1) != 0
              || (sub_1DCBC620C((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)((char *)&v257 + 8)) & 1) != 0
              || sub_1DCBC6238((pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)((char *)&v257 + 8)))
            {
              objc_msgSend_bufferAllocator(v8, v169, v170);
              v171 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_resolver(v8, v172, v173);
              v174 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_frameInterval(v8, v175, v176);
              objc_msgSend_vertexDescriptor(v8, v177, v178);
              v179 = (void *)objc_claimAutoreleasedReturnValue();
              sub_1DCB9A724(v171, a2, v174, (pxrInternal__aapl__pxrReserved__::UsdPrim *)((char *)&v257 + 8), v224, v179);
              v30 = (MDLObject *)objc_claimAutoreleasedReturnValue();

              v8 = (void *)*((_QWORD *)&v226 + 1);
              objc_msgSend_setHidden_(v30, v180, v20);
              sub_1DCBC5EF8((_DWORD *)&v257 + 2);
              v181 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setName_(v30, v182, (uint64_t)v181);

              objc_msgSend_frameInterval(*((void **)&v226 + 1), v183, v184);
              sub_1DCB4E1E8();
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setTransform_(v30, v185, (uint64_t)v36);
              goto LABEL_48;
            }
            if ((sub_1DCBC6264((pxrInternal__aapl__pxrReserved__::UsdGeomPoints *)((char *)&v257 + 8)) & 1) == 0)
            {
              if (sub_1DCBC6290((pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *)((char *)&v257 + 8)))
              {
                if (*(_BYTE *)(a2 + 25))
                {
                  objc_msgSend_bufferAllocator(v8, v200, v201);
                  v202 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_frameInterval(*((void **)&v226 + 1), v203, v204);
                  sub_1DCB8A968(v202, (_DWORD *)&v257 + 2);
                  v30 = (MDLObject *)objc_claimAutoreleasedReturnValue();

                  objc_msgSend_setHidden_(v30, v205, v20);
                  sub_1DCBC5EF8((_DWORD *)&v257 + 2);
                  v206 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_setName_(v30, v207, (uint64_t)v206);

                  objc_msgSend_frameInterval(*((void **)&v226 + 1), v208, v209);
                  sub_1DCB4E1E8();
                  v210 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_setTransform_(v30, v211, (uint64_t)v210);
                  goto LABEL_234;
                }
              }
              else if ((sub_1DCBC62BC((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)((char *)&v257 + 8)) & 1) == 0)
              {
                v30 = objc_alloc_init(MDLObject);
                objc_msgSend_setHidden_(v30, v212, v20);
                sub_1DCBC5EF8((_DWORD *)&v257 + 2);
                v210 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_setName_(v30, v213, (uint64_t)v210);
LABEL_234:

                v8 = (void *)*((_QWORD *)&v226 + 1);
                goto LABEL_49;
              }
            }
          }
        }
      }
LABEL_63:
      if (SHIBYTE(v252) < 0)
        operator delete((void *)v251);
      if (SHIBYTE(v254) < 0)
        operator delete((void *)__dst);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v255);
      if ((v259 & 7) != 0)
      {
        v48 = (unsigned int *)(v259 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34(*((uint64_t *)&v228 + 1));
      if ((_QWORD)v258)
        sub_1DCAEED94(v258);
      if (SBYTE7(v257) < 0)
        operator delete((void *)v256);
      v50 = (__int128 *)*((_QWORD *)v9 + 1);
      if (v50)
      {
        do
        {
          v51 = v50;
          v50 = *(__int128 **)v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          v51 = (__int128 *)*((_QWORD *)v9 + 2);
          v39 = *(_QWORD *)v51 == (_QWORD)v9;
          v9 = v51;
        }
        while (!v39);
      }
      v9 = v51;
      v10 = 0uLL;
    }
    while (v51 != *((__int128 **)&v229 + 1));
  }

}

void sub_1DCBC5848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  uint64_t v24;

  if (*(char *)(v24 - 217) < 0)
    operator delete(*(void **)(v24 - 240));
  if (*(char *)(v24 - 185) < 0)
    operator delete(*(void **)(v24 - 208));
  sub_1DCB2FDE8(v24 - 184);
  sub_1DCBC62E8(v24 - 176);

  _Unwind_Resume(a1);
}

uint64_t sub_1DCBC5DB8(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v2 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1DCBC5E1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  unint64_t *v5;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;

  v4 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  v9 = 0;
  v10 = v4;
  sub_1DCB30114(&v9, (_DWORD *)(a1 + 16));
  sub_1DCB30164((_DWORD *)&v9 + 1, (_DWORD *)(a1 + 20));
  sub_1DCBC6418(&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v9);
  v8 = v10;
  if (v10)
  {
    v5 = (unint64_t *)((char *)v10 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_1DCB4FB38(a2, (uint64_t *)&v8, &v9);
  if (v8)
    sub_1DCAEED94((uint64_t)v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_1DCAEEC34((uint64_t)&v9);
}

void sub_1DCBC5ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    sub_1DCAEED94(a3);
  sub_1DCB2FDE8((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1DCBC5EF8(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v1;
  uint64_t EmptyString;
  __int128 v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  std::string v8;
  std::string __str;
  char v10;

  memset(&__str, 0, sizeof(__str));
  v1 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_1DCAEEC08(a1);
  if ((*(_QWORD *)v1 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (*(_QWORD *)v1 & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v1);
  if (*(char *)(EmptyString + 23) < 0)
  {
    sub_1DCACA658(&__str, *(void **)EmptyString, *(_QWORD *)(EmptyString + 8));
  }
  else
  {
    v3 = *(_OWORD *)EmptyString;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(EmptyString + 16);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v3;
  }
  std::string::basic_string(&v8, &__str, 0, 8uLL, (std::allocator<char> *)&v10);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v8.__r_.__value_.__l.__size_ != 8)
    {
      operator delete(v8.__r_.__value_.__l.__data_);
      goto LABEL_17;
    }
    v5 = *(_QWORD *)v8.__r_.__value_.__l.__data_;
    operator delete(v8.__r_.__value_.__l.__data_);
    if (v5 != 0x72657473614D5F5FLL)
      goto LABEL_17;
  }
  else if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) != 8 || v8.__r_.__value_.__r.__words[0] != 0x72657473614D5F5FLL)
  {
    goto LABEL_17;
  }
  std::operator+<char>();
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str = v8;
LABEL_17:
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v4, (uint64_t)&__str, 4);
  else
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v4, (uint64_t)__str.__r_.__value_.__l.__data_, 4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1DCBC6054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBC6078(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;

  v4 = (__int128 *)(a2 + 8);
  objc_storeStrong((id *)a1, *(id *)a2);
  v5 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v5);
  v6 = *v4;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)v4 + 2);
  *(_OWORD *)v5 = v6;
  *(_BYTE *)(a2 + 31) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  v7 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v7);
  v8 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)v7 = v8;
  *(_BYTE *)(a2 + 55) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  return a1;
}

uint64_t sub_1DCBC6108(uint64_t a1)
{
  id v2;

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  v2 = *(id *)a1;
  *(_QWORD *)a1 = 0;

  return a1;
}

uint64_t sub_1DCBC615C(pxrInternal__aapl__pxrReserved__::UsdGeomCurves *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCurves::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_1DCBC6188(pxrInternal__aapl__pxrReserved__::UsdGeomCube *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_1DCBC61B4(pxrInternal__aapl__pxrReserved__::UsdGeomCone *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_1DCBC61E0(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_1DCBC620C(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_1DCBC6238(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_1DCBC6264(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPoints::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_1DCBC6290(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_1DCBC62BC(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_1DCBC62E8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    sub_1DCAEED94(v5);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1DCBC6358(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1DCACA658(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  v5 = *((_QWORD *)a2 + 4);
  __dst[4] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_1DCB30114((_DWORD *)__dst + 10, (_DWORD *)a2 + 10);
  sub_1DCB30164((_DWORD *)__dst + 11, (_DWORD *)a2 + 11);
  v8 = *((_QWORD *)a2 + 6);
  __dst[6] = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      __dst[6] &= 0xFFFFFFFFFFFFFFF8;
  }
  return __dst;
}

pxrInternal__aapl__pxrReserved__::Usd_PrimData *sub_1DCBC6418(pxrInternal__aapl__pxrReserved__::Usd_PrimData **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *result;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  uint64_t Text;
  const char *v7;
  _QWORD v8[4];
  char v9;

  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent(*a1);
  result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2);
    sub_1DCB4FA2C((uint64_t)a2, (int *)v8);
    sub_1DCB4FA80((uint64_t)a2 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_1DCAEEC34((uint64_t)v8);
    v5 = *a1;
    if (*a1)
    {
      if ((*((_BYTE *)v5 + 57) & 0x10) != 0)
      {
        result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v5 + 16));
        if ((_DWORD)result)
        {
          result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(*a1, a2);
          *a1 = result;
          if (!result)
          {
            v8[0] = "usd/primData.h";
            v8[1] = "Usd_MoveToParent";
            v8[2] = 527;
            v8[3] = "void pxrInternal__aapl__pxrReserved__::Usd_MoveToParent(PrimDataPtr &, SdfPath &) [PrimDataPtr = con"
                    "st pxrInternal__aapl__pxrReserved__::Usd_PrimData *]";
            v9 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
            pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No prim at <%s>", v7, Text);
            result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
            if (!(_DWORD)result)
              return result;
            result = *a1;
          }
          if (*((_QWORD *)result + 2) == *(_QWORD *)a2)
          {
            v8[0] = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            sub_1DCB4FA2C((uint64_t)a2, (int *)v8);
            sub_1DCB4FA80((uint64_t)a2 + 4);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            return (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_1DCAEEC34((uint64_t)v8);
          }
        }
      }
    }
  }
  return result;
}

void sub_1DCBC6598(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1DCBC65DC((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_1DCBC65DC(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v2 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *sub_1DCBC6644(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1DCBC6698(a1, *a2, a2 + 1);
  return a1;
}

void sub_1DCBC6680(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCBC68E4(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCBC6698(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1DCBC671C(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1DCBC671C(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v11 = 0;
  v12 = 0;
  v6 = sub_1DCBB221C(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_1DCBC67BC((uint64_t)a1, a4, v10);
    sub_1DCACAE54(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1DCBC682C((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_1DCBC67BC@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x58uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = sub_1DCBC6358(v6 + 4, a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1DCBC6814(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCBC682C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1DCBC682C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1DCBC6870((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_1DCBC6870(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    sub_1DCAEED94(v5);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1DCBC68E4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1DCBC68E4(a1, *a2);
    sub_1DCBC68E4(a1, a2[1]);
    sub_1DCBC6870((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

char *sub_1DCBC692C(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1DCACA658(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *((_QWORD *)__dst + 3) = *((id *)a2 + 3);
  if (*((char *)a2 + 55) < 0)
  {
    sub_1DCACA658(__dst + 32, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = a2[2];
    *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)__dst + 2) = v5;
  }
  v6 = __dst + 56;
  if (*((char *)a2 + 79) < 0)
  {
    sub_1DCACA658(v6, *((void **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 56);
    *((_QWORD *)__dst + 9) = *((_QWORD *)a2 + 9);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

void sub_1DCBC69E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  v4 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCBC6A30(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1EA574878;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DCBC6A84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x1DF0D228C](v1, 0xC400A2AC0F1);
  _Unwind_Resume(exception_object);
}

void sub_1DCBC6AAC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0D228CLL);
}

uint64_t sub_1DCBC6AD0(uint64_t a1, uint64_t a2)
{
  if (sub_1DCAE69FC(a2, (uint64_t)&unk_1EA573FD0))
    return a1 + 24;
  else
    return 0;
}

uint64_t *sub_1DCBC6B0C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)sub_1DCAD344C((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_1DCBC6BC0((uint64_t)a1, a4, v10);
    sub_1DCACAE54(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1DCBC682C((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_1DCBC6BC0@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x58uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = sub_1DCBC6C30(v6 + 4, *a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1DCBC6C18(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCBC682C(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCBC6C30(_QWORD *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1DCACA658(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  *((_DWORD *)__dst + 6) = 1;
  __dst[4] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  __dst[6] = 0;
  return __dst;
}

unsigned int **sub_1DCBC6CA4(unsigned int **a1)
{
  sub_1DCBC6CD0((uint64_t)a1, *a1);
  return a1;
}

void sub_1DCBC6CD0(uint64_t a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (!a2)
    return;
  v3 = a2 + 2;
  v4 = a2[2];
  if ((v4 & 0x80000000) != 0)
  {
    if (v4 == -2)
      goto LABEL_15;
    v7 = __ldxr(v3);
    if (v7 == v4)
    {
      if (!__stlxr(v4 + 1, v3))
      {
        v8 = 1;
        goto LABEL_12;
      }
    }
    else
    {
      __clrex();
    }
    v8 = 0;
LABEL_12:
    if (v8)
    {
      if (v4 != -1)
        return;
      goto LABEL_16;
    }
LABEL_15:
    if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked() & 1) == 0)
      return;
LABEL_16:
    (*(void (**)(unsigned int *))(*(_QWORD *)a2 + 8))(a2);
    return;
  }
  do
  {
    v5 = __ldxr(v3);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v3));
  if (!v6)
    goto LABEL_16;
}

uint64_t *sub_1DCBC6D7C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_1DCBC6E38((unint64_t *)(v3 + 16), &v13);
    v4 = (unsigned int *)a1[1];
    a1[1] = v13;
    v13 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      v8 = v13;
      if (v13)
      {
        v9 = (unsigned int *)(v13 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(unint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  return a1;
}

void sub_1DCBC6E20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_1DCC31E8C(v3);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1DCBC6E38@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  result = atomic_load(a1);
  if (!result)
  {
    result = operator new();
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)result = MEMORY[0x1E0DF3080] + 16;
    *(_WORD *)(result + 12) = 0;
    *(_BYTE *)(result + 14) = 1;
    while (1)
    {
      v5 = __ldaxr(a1);
      if (v5)
        break;
      if (!__stlxr(result, a1))
        goto LABEL_7;
    }
    __clrex();
    (*(void (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    result = v5;
  }
LABEL_7:
  *a2 = result;
  v6 = (unsigned int *)(result + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_1DCBC6EF0(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  char v6;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 8);
    v3 = *(_DWORD *)(result + 8);
    if ((v3 & 0x80000000) == 0)
    {
      do
        v4 = __ldxr(v2);
      while (__stxr(v4 + 1, v2));
      return result;
    }
    if (v3 == -1)
      return pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
    v5 = __ldxr(v2);
    if (v5 == v3)
    {
      if (!__stxr(v3 - 1, v2))
      {
        v6 = 1;
        goto LABEL_12;
      }
    }
    else
    {
      __clrex();
    }
    v6 = 0;
LABEL_12:
    if ((v6 & 1) != 0)
      return result;
    return pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
  }
  return result;
}

char *sub_1DCBC6F58(char **a1, uint64_t *a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  _QWORD *v26;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    sub_1DCAE4C44();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v26 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1DCAE79A4(v7, v9);
  else
    v10 = 0;
  v23 = 0;
  v24.i64[0] = 0;
  v11 = &v10[8 * v4];
  v12 = &v10[8 * v9];
  v25 = v12;
  v13 = *a2;
  *(_QWORD *)v11 = *a2;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *(_QWORD *)v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  v16 = v11 + 8;
  v24.i64[1] = (uint64_t)(v11 + 8);
  v18 = *a1;
  v17 = a1[1];
  if (v17 == *a1)
  {
    v20 = vdupq_n_s64((unint64_t)v17);
  }
  else
  {
    do
    {
      v19 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      *((_QWORD *)v11 - 1) = v19;
      v11 -= 8;
      *(_QWORD *)v17 = 0;
    }
    while (v17 != v18);
    v20 = *(int64x2_t *)a1;
    v16 = (char *)v24.i64[1];
    v12 = v25;
  }
  *a1 = v11;
  a1[1] = v16;
  v24 = v20;
  v21 = a1[2];
  a1[2] = v12;
  v25 = v21;
  v23 = v20.i64[0];
  sub_1DCBC7084((uint64_t)&v23);
  return v16;
}

uint64_t sub_1DCBC7084(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  while (v3 != v2)
  {
    v5 = *(_QWORD *)(v3 - 8);
    v3 -= 8;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v3;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
      v3 = *(_QWORD *)(a1 + 16);
    }
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v8);
  return a1;
}

_QWORD *sub_1DCBC70E8(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    sub_1DCAE7964(result, a4);
    return (_QWORD *)sub_1DCBC715C(v6, a2, a3);
  }
  return result;
}

void sub_1DCBC7148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1DCAF0DD0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBC715C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v3 = *(uint64_t **)(result + 8);
  while (a2 != a3)
  {
    v4 = *a2;
    *v3 = *a2;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 2, v5));
      if ((v6 & 1) == 0)
        *v3 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++a2;
    ++v3;
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

_QWORD *sub_1DCBC71B0(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8[2];

  if (*(_BYTE *)(a3 + 112))
  {
    v4 = result;
    v5 = 0;
    v6 = a3 + 48;
    do
    {
      if (*(_QWORD *)(v6 + v5))
        result = (_QWORD *)sub_1DCBC71B0(v4, a2);
      v5 += 8;
    }
    while (v5 != 64);
  }
  else
  {
    v7 = *(unsigned int *)(a3 + 196);
    v8[0] = *(_QWORD *)(a3 + 8);
    v8[1] = v7;
    return sub_1DCBD1A20(a2, v8, (uint64_t)v8);
  }
  return result;
}

void sub_1DCBC77D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCBC7B74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x1DF0D228C](v3, 0x1030C40CB177E38);

  _Unwind_Resume(a1);
}

void sub_1DCBC7FD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCBC87C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCBC87D0(int32x4_t *a1, int32x4_t a2)
{
  int16x4_t v2;
  int32x4_t v3;
  int16x4_t v4;
  __int8 v5;

  v2 = vmovn_s32(vcgtq_s32(*a1, a2));
  if ((v2.i8[0] & 1) != 0 || (v3 = a1[1], v4 = vmovn_s32(vcgtq_s32(a2, v3)), (v4.i8[0] & 1) != 0))
  {
LABEL_3:
    v5 = 0;
    return v5 & 1;
  }
  v5 = 0;
  if ((v2.i8[2] & 1) == 0 && (v4.i8[2] & 1) == 0)
  {
    v5 = 0;
    if ((v2.i8[4] & 1) == 0 && (v4.i8[4] & 1) == 0)
    {
      if ((v2.i8[6] & 1) == 0)
      {
        v5 = vmovn_s32(vcgeq_s32(v3, a2)).i8[6];
        return v5 & 1;
      }
      goto LABEL_3;
    }
  }
  return v5 & 1;
}

void sub_1DCBC8A7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCBC8DD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCBC8F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  sub_1DCAE6B78((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1DCBC90AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  sub_1DCAE6B78((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1DCBC91E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  sub_1DCAE6B78((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1DCBC93B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAE6B78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DCBC94C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCBC95C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCBC96A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAE6B78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DCBC984C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCBCA1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  v19 = *(void **)(v17 - 184);
  if (v19)
  {
    *(_QWORD *)(v17 - 176) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v17 - 160);
  if (v20)
  {
    *(_QWORD *)(v17 - 152) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(v17 - 136);
  if (v21)
  {
    *(_QWORD *)(v17 - 128) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(v17 - 112);
  if (v22)
  {
    *(_QWORD *)(v17 - 104) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DCBCA2FC(int a1, int a2, char a3, int a4, char **a5, uint64_t a6, char **a7, uint64_t a8, __n128 a9, __n128 a10)
{
  uint64_t v12;
  char **v13;
  char v14;
  int v15;
  int v16;
  char *v18;
  char **v19;
  unsigned __int32 *v20;
  __n128 v21;
  unsigned __int32 *v22;
  unsigned __int32 *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  unsigned __int32 v32;
  unsigned __int32 *v33;
  unsigned __int32 *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  unsigned __int32 *v40;
  unsigned __int32 v41;
  unsigned __int32 v42;
  unsigned __int32 *v43;
  unsigned __int32 *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unsigned __int32 *v50;
  unsigned __int32 v51;
  unsigned __int32 *v52;
  unsigned __int32 *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  int v60;
  unsigned __int32 *v61;
  unsigned __int32 *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  unsigned __int32 *v68;
  unsigned __int32 v69;
  unsigned __int32 *v70;
  unsigned __int32 *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  unsigned __int32 *v77;
  unsigned __int32 v78;
  unsigned __int32 *v79;
  unsigned __int32 *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  int v88;
  unsigned __int32 *v89;
  unsigned __int32 *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  int v97;
  unsigned __int32 *v98;
  unsigned __int32 *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  unsigned __int32 *v105;
  unsigned __int32 v106;
  unsigned __int32 *v107;
  unsigned __int32 *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  int v115;
  unsigned __int32 *v116;
  unsigned __int32 *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  int v124;
  _DWORD *v125;
  unsigned __int32 *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  unsigned __int32 *v132;
  char *v133;
  unsigned __int32 v134;
  int v135;
  _QWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  _DWORD *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  int v146;
  int v147;
  char **v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  int v159;
  char *v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  int v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  int v176;
  char *v177;
  char **v178;
  char *v179;
  int v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  int v189;
  int v190;
  char *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  char *v198;
  int v199;
  int v200;
  char *v201;
  char *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  char *v208;
  int v209;
  char *v210;
  char *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  int v218;
  char *v219;
  char *v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  int v227;
  int v228;
  char *v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  int v238;
  char *v239;
  char **v240;
  unsigned __int32 *v241;
  __n128 v242;
  unsigned __int32 *v243;
  unsigned __int32 *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  char *v250;
  char *v251;
  int v252;
  unsigned __int32 v253;
  unsigned __int32 *v254;
  unsigned __int32 *v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  char *v260;
  unsigned __int32 *v261;
  unsigned __int32 v262;
  unsigned __int32 v263;
  unsigned __int32 *v264;
  unsigned __int32 *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  char *v270;
  unsigned __int32 *v271;
  unsigned __int32 v272;
  unsigned __int32 *v273;
  unsigned __int32 *v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  char *v279;
  char *v280;
  char *v281;
  int v282;
  unsigned __int32 *v283;
  unsigned __int32 *v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  int v291;
  unsigned __int32 *v292;
  unsigned __int32 *v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char *v298;
  unsigned __int32 *v299;
  unsigned __int32 v300;
  unsigned __int32 *v301;
  unsigned __int32 *v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  char *v307;
  char *v308;
  char *v309;
  int v310;
  unsigned __int32 *v311;
  unsigned __int32 *v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  char *v317;
  unsigned __int32 *v318;
  unsigned __int32 v319;
  unsigned __int32 *v320;
  unsigned __int32 *v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  char *v326;
  char *v327;
  int v328;
  unsigned __int32 *v329;
  unsigned __int32 *v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t v334;
  char *v335;
  char *v336;
  char *v337;
  int v338;
  unsigned __int32 *v339;
  unsigned __int32 *v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  char *v345;
  char *v346;
  int v347;
  _DWORD *v348;
  unsigned __int32 *v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  char *v354;
  char *v355;
  char *v356;
  int v357;
  int v358;
  _QWORD *v359;
  _DWORD *v360;
  _DWORD *v361;
  _DWORD *v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  char *v367;
  char *v368;
  int v369;
  int v370;
  char **v371;
  char *v372;
  char *v373;
  char *v374;
  char *v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  char *v380;
  char *v381;
  int v382;
  char *v383;
  char *v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t v388;
  char *v389;
  char *v390;
  int v391;
  char *v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  unint64_t v396;
  char *v397;
  char *v398;
  int v399;
  int v400;
  char *v401;
  char **v402;
  char *v403;
  char *v404;
  char *v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  unint64_t v409;
  char *v410;
  char *v411;
  int v412;
  int v413;
  char *v414;
  char *v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v419;
  char *v420;
  char *v421;
  int v422;
  char **v423;
  int v424;
  char *v425;
  char *v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v429;
  unint64_t v430;
  char *v431;
  char *v432;
  int v433;
  char *v434;
  char *v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  unint64_t v439;
  char *v440;
  char *v441;
  int v442;
  char *v443;
  char *v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t v447;
  unint64_t v448;
  char *v449;
  char *v450;
  int v451;
  int v452;
  char *v453;
  char *v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  unint64_t v458;
  char *v459;
  char *v460;
  char *v461;
  int v462;
  char *v463;
  char **v464;
  unsigned __int32 *v465;
  unsigned __int32 v466;
  unsigned __int32 *v467;
  unsigned __int32 *v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  char *v473;
  char *v474;
  int v475;
  unsigned __int32 v476;
  unsigned __int32 *v477;
  unsigned __int32 *v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t v481;
  unint64_t v482;
  char *v483;
  unsigned __int32 *v484;
  unsigned __int32 v485;
  unsigned __int32 v486;
  unsigned __int32 *v487;
  unsigned __int32 *v488;
  uint64_t v489;
  unint64_t v490;
  uint64_t v491;
  unint64_t v492;
  char *v493;
  unsigned __int32 *v494;
  unsigned __int32 v495;
  unsigned __int32 v496;
  unsigned __int32 *v497;
  unsigned __int32 *v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  unint64_t v502;
  char *v503;
  char *v504;
  int v505;
  unsigned __int32 *v506;
  unsigned __int32 *v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  char *v512;
  unsigned __int32 *v513;
  unsigned __int32 v514;
  unsigned __int32 *v515;
  unsigned __int32 *v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  unint64_t v520;
  char *v521;
  unsigned __int32 *v522;
  unsigned __int32 v523;
  unsigned __int32 *v524;
  unsigned __int32 *v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  unint64_t v529;
  char *v530;
  char *v531;
  unsigned __int32 *v532;
  unsigned __int32 v533;
  unsigned __int32 *v534;
  unsigned __int32 *v535;
  uint64_t v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  char *v540;
  char *v541;
  int v542;
  unsigned __int32 *v543;
  unsigned __int32 *v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  unint64_t v548;
  char *v549;
  unsigned __int32 *v550;
  unsigned __int32 v551;
  unsigned __int32 *v552;
  unsigned __int32 *v553;
  uint64_t v554;
  unint64_t v555;
  uint64_t v556;
  unint64_t v557;
  char *v558;
  char *v559;
  int v560;
  unsigned __int32 *v561;
  unsigned __int32 *v562;
  uint64_t v563;
  unint64_t v564;
  uint64_t v565;
  unint64_t v566;
  char *v567;
  char *v568;
  int v569;
  _DWORD *v570;
  unsigned __int32 *v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  unint64_t v575;
  char *v576;
  unsigned __int32 *v577;
  char *v578;
  unsigned __int32 v579;
  int v580;
  _QWORD *v581;
  _DWORD *v582;
  _DWORD *v583;
  _DWORD *v584;
  uint64_t v585;
  unint64_t v586;
  uint64_t v587;
  unint64_t v588;
  char *v589;
  char *v590;
  int v591;
  int v592;
  char **v593;
  char *v594;
  char *v595;
  char *v596;
  char *v597;
  uint64_t v598;
  unint64_t v599;
  uint64_t v600;
  unint64_t v601;
  char *v602;
  char *v603;
  int v604;
  char *v605;
  char *v606;
  uint64_t v607;
  unint64_t v608;
  uint64_t v609;
  unint64_t v610;
  char *v611;
  char *v612;
  int v613;
  char *v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  unint64_t v618;
  char *v619;
  char *v620;
  int v621;
  int v622;
  char *v623;
  char **v624;
  char *v625;
  char *v626;
  char *v627;
  uint64_t v628;
  unint64_t v629;
  uint64_t v630;
  unint64_t v631;
  char *v632;
  char *v633;
  int v634;
  int v635;
  char *v636;
  char *v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v640;
  unint64_t v641;
  char *v642;
  char *v643;
  int v644;
  int v645;
  char *v646;
  char *v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t v650;
  unint64_t v651;
  char *v652;
  char *v653;
  int v654;
  char *v655;
  char *v656;
  uint64_t v657;
  unint64_t v658;
  uint64_t v659;
  unint64_t v660;
  char *v661;
  char *v662;
  int v663;
  int v664;
  char *v665;
  char *v666;
  uint64_t v667;
  unint64_t v668;
  uint64_t v669;
  unint64_t v670;
  char *v671;
  char *v672;
  int v673;
  char *v674;
  char *v675;
  uint64_t v676;
  unint64_t v677;
  uint64_t v678;
  unint64_t v679;
  char *v680;
  char *v681;
  char *v682;
  int v683;
  char *v684;
  char **v685;
  unsigned __int32 *v686;
  unsigned __int32 *v687;
  unsigned __int32 *v688;
  uint64_t v689;
  unint64_t v690;
  uint64_t v691;
  unint64_t v692;
  char *v693;
  char *v694;
  char *v695;
  int v696;
  unsigned __int32 v697;
  unsigned __int32 *v698;
  unsigned __int32 *v699;
  uint64_t v700;
  unint64_t v701;
  uint64_t v702;
  unint64_t v703;
  char *v704;
  char *v705;
  int v706;
  unsigned __int32 v707;
  unsigned __int32 *v708;
  unsigned __int32 *v709;
  uint64_t v710;
  unint64_t v711;
  uint64_t v712;
  unint64_t v713;
  char *v714;
  unsigned __int32 *v715;
  unsigned __int32 v716;
  unsigned __int32 v717;
  unsigned __int32 *v718;
  unsigned __int32 *v719;
  uint64_t v720;
  unint64_t v721;
  uint64_t v722;
  unint64_t v723;
  char *v724;
  char *v725;
  int v726;
  unsigned __int32 v727;
  unsigned __int32 *v728;
  unsigned __int32 *v729;
  uint64_t v730;
  unint64_t v731;
  uint64_t v732;
  unint64_t v733;
  char *v734;
  char *v735;
  int v736;
  unsigned __int32 *v737;
  unsigned __int32 *v738;
  uint64_t v739;
  unint64_t v740;
  uint64_t v741;
  unint64_t v742;
  char *v743;
  unsigned __int32 *v744;
  unsigned __int32 v745;
  unsigned __int32 *v746;
  unsigned __int32 *v747;
  uint64_t v748;
  unint64_t v749;
  uint64_t v750;
  unint64_t v751;
  char *v752;
  char *v753;
  int v754;
  unsigned __int32 *v755;
  unsigned __int32 *v756;
  uint64_t v757;
  unint64_t v758;
  uint64_t v759;
  unint64_t v760;
  char *v761;
  char *v762;
  int v763;
  unsigned __int32 *v764;
  unsigned __int32 *v765;
  uint64_t v766;
  unint64_t v767;
  uint64_t v768;
  unint64_t v769;
  char *v770;
  char *v771;
  int v772;
  unsigned __int32 *v773;
  unsigned __int32 *v774;
  uint64_t v775;
  unint64_t v776;
  uint64_t v777;
  unint64_t v778;
  char *v779;
  char *v780;
  int v781;
  unsigned __int32 *v782;
  unsigned __int32 *v783;
  uint64_t v784;
  unint64_t v785;
  uint64_t v786;
  unint64_t v787;
  char *v788;
  char *v789;
  int v790;
  _DWORD *v791;
  unsigned __int32 *v792;
  uint64_t v793;
  unint64_t v794;
  uint64_t v795;
  unint64_t v796;
  char *v797;
  char *v798;
  char *v799;
  int v800;
  int v801;
  _QWORD *v802;
  _DWORD *v803;
  _DWORD *v804;
  _DWORD *v805;
  uint64_t v806;
  unint64_t v807;
  uint64_t v808;
  unint64_t v809;
  char *v810;
  char *v811;
  int v812;
  int v813;
  char **v814;
  char *v815;
  char *v816;
  char *v817;
  char *v818;
  uint64_t v819;
  unint64_t v820;
  uint64_t v821;
  unint64_t v822;
  char *v823;
  char *v824;
  int v825;
  char *v826;
  char *v827;
  uint64_t v828;
  unint64_t v829;
  uint64_t v830;
  unint64_t v831;
  char *v832;
  char *v833;
  int v834;
  char *v835;
  uint64_t v836;
  unint64_t v837;
  uint64_t v838;
  unint64_t v839;
  char *v840;
  char *v841;
  int v842;
  int v843;
  char *v844;
  char **v845;
  char *v846;
  char *v847;
  char *v848;
  uint64_t v849;
  unint64_t v850;
  uint64_t v851;
  unint64_t v852;
  char *v853;
  char *v854;
  int v855;
  int v856;
  char *v857;
  char *v858;
  uint64_t v859;
  unint64_t v860;
  uint64_t v861;
  unint64_t v862;
  char *v863;
  char *v864;
  int v865;
  int v866;
  char *v867;
  char *v868;
  uint64_t v869;
  unint64_t v870;
  uint64_t v871;
  unint64_t v872;
  char *v873;
  char *v874;
  int v875;
  char *v876;
  char *v877;
  uint64_t v878;
  unint64_t v879;
  uint64_t v880;
  unint64_t v881;
  char *v882;
  char *v883;
  int v884;
  int v885;
  char *v886;
  char *v887;
  uint64_t v888;
  unint64_t v889;
  uint64_t v890;
  unint64_t v891;
  char *v892;
  char *v893;
  int v894;
  char *v895;
  char *v896;
  uint64_t v897;
  unint64_t v898;
  uint64_t v899;
  unint64_t v900;
  char *v901;
  char *v902;
  char *v903;
  int v904;
  char *v905;
  char **v906;
  unsigned __int32 *v907;
  __n128 v908;
  unsigned __int32 *v909;
  unsigned __int32 *v910;
  uint64_t v911;
  unint64_t v912;
  uint64_t v913;
  unint64_t v914;
  char *v915;
  char *v916;
  char *v917;
  int v918;
  unsigned __int32 v919;
  unsigned __int32 *v920;
  unsigned __int32 *v921;
  uint64_t v922;
  unint64_t v923;
  uint64_t v924;
  unint64_t v925;
  char *v926;
  unsigned __int32 *v927;
  unsigned __int32 v928;
  unsigned __int32 v929;
  unsigned __int32 *v930;
  unsigned __int32 *v931;
  uint64_t v932;
  unint64_t v933;
  uint64_t v934;
  unint64_t v935;
  char *v936;
  unsigned __int32 *v937;
  unsigned __int32 v938;
  unsigned __int32 *v939;
  unsigned __int32 *v940;
  uint64_t v941;
  unint64_t v942;
  uint64_t v943;
  unint64_t v944;
  char *v945;
  char *v946;
  int v947;
  unsigned __int32 *v948;
  unsigned __int32 *v949;
  uint64_t v950;
  unint64_t v951;
  uint64_t v952;
  unint64_t v953;
  char *v954;
  unsigned __int32 *v955;
  unsigned __int32 v956;
  unsigned __int32 *v957;
  unsigned __int32 *v958;
  uint64_t v959;
  unint64_t v960;
  uint64_t v961;
  unint64_t v962;
  char *v963;
  unsigned __int32 *v964;
  unsigned __int32 v965;
  unsigned __int32 *v966;
  unsigned __int32 *v967;
  uint64_t v968;
  unint64_t v969;
  uint64_t v970;
  unint64_t v971;
  char *v972;
  char *v973;
  char *v974;
  int v975;
  unsigned __int32 *v976;
  unsigned __int32 *v977;
  uint64_t v978;
  unint64_t v979;
  uint64_t v980;
  unint64_t v981;
  char *v982;
  unsigned __int32 *v983;
  unsigned __int32 v984;
  unsigned __int32 *v985;
  unsigned __int32 *v986;
  uint64_t v987;
  unint64_t v988;
  uint64_t v989;
  unint64_t v990;
  char *v991;
  char *v992;
  int v993;
  unsigned __int32 *v994;
  unsigned __int32 *v995;
  uint64_t v996;
  unint64_t v997;
  uint64_t v998;
  unint64_t v999;
  char *v1000;
  char *v1001;
  int v1002;
  unsigned __int32 *v1003;
  unsigned __int32 *v1004;
  uint64_t v1005;
  unint64_t v1006;
  uint64_t v1007;
  unint64_t v1008;
  char *v1009;
  unsigned __int32 *v1010;
  unsigned __int32 v1011;
  _DWORD *v1012;
  unsigned __int32 *v1013;
  uint64_t v1014;
  unint64_t v1015;
  uint64_t v1016;
  unint64_t v1017;
  char *v1018;
  char *v1019;
  char *v1020;
  int v1021;
  int v1022;
  _QWORD *v1023;
  _DWORD *v1024;
  _DWORD *v1025;
  _DWORD *v1026;
  uint64_t v1027;
  unint64_t v1028;
  uint64_t v1029;
  unint64_t v1030;
  char *v1031;
  char *v1032;
  int v1033;
  int v1034;
  char **v1035;
  char *v1036;
  char *v1037;
  char *v1038;
  char *v1039;
  uint64_t v1040;
  unint64_t v1041;
  uint64_t v1042;
  unint64_t v1043;
  char *v1044;
  char *v1045;
  int v1046;
  char *v1047;
  char *v1048;
  uint64_t v1049;
  unint64_t v1050;
  uint64_t v1051;
  unint64_t v1052;
  char *v1053;
  char *v1054;
  int v1055;
  char *v1056;
  uint64_t v1057;
  unint64_t v1058;
  uint64_t v1059;
  unint64_t v1060;
  char *v1061;
  char *v1062;
  int v1063;
  int v1064;
  char *v1065;
  char **v1066;
  char *v1067;
  char *v1068;
  char *v1069;
  uint64_t v1070;
  unint64_t v1071;
  uint64_t v1072;
  unint64_t v1073;
  char *v1074;
  char *v1075;
  int v1076;
  int v1077;
  char *v1078;
  char *v1079;
  uint64_t v1080;
  unint64_t v1081;
  uint64_t v1082;
  unint64_t v1083;
  char *v1084;
  char *v1085;
  int v1086;
  int v1087;
  char *v1088;
  char *v1089;
  uint64_t v1090;
  unint64_t v1091;
  uint64_t v1092;
  unint64_t v1093;
  char *v1094;
  char *v1095;
  int v1096;
  char *v1097;
  char *v1098;
  uint64_t v1099;
  unint64_t v1100;
  uint64_t v1101;
  unint64_t v1102;
  char *v1103;
  char *v1104;
  int v1105;
  char *v1106;
  char *v1107;
  uint64_t v1108;
  unint64_t v1109;
  uint64_t v1110;
  unint64_t v1111;
  char *v1112;
  char *v1113;
  int v1114;
  int v1115;
  char *v1116;
  char v1117;
  char *v1118;
  uint64_t v1119;
  unint64_t v1120;
  uint64_t v1121;
  unint64_t v1122;
  char *v1123;
  char *v1124;
  char *v1125;
  int v1126;
  char *v1127;
  char **v1128;
  unsigned __int32 *v1129;
  unsigned __int32 *v1130;
  unsigned __int32 *v1131;
  uint64_t v1132;
  unint64_t v1133;
  uint64_t v1134;
  unint64_t v1135;
  char *v1136;
  char *v1137;
  int v1138;
  unsigned __int32 v1139;
  unsigned __int32 *v1140;
  unsigned __int32 *v1141;
  uint64_t v1142;
  unint64_t v1143;
  uint64_t v1144;
  unint64_t v1145;
  char *v1146;
  unsigned __int32 *v1147;
  unsigned __int32 v1148;
  unsigned __int32 v1149;
  unsigned __int32 *v1150;
  unsigned __int32 *v1151;
  uint64_t v1152;
  unint64_t v1153;
  uint64_t v1154;
  unint64_t v1155;
  char *v1156;
  char *v1157;
  int v1158;
  unsigned __int32 *v1159;
  unsigned __int32 *v1160;
  uint64_t v1161;
  unint64_t v1162;
  uint64_t v1163;
  unint64_t v1164;
  char *v1165;
  char *v1166;
  int v1167;
  unsigned __int32 *v1168;
  unsigned __int32 *v1169;
  uint64_t v1170;
  unint64_t v1171;
  uint64_t v1172;
  unint64_t v1173;
  char *v1174;
  unsigned __int32 *v1175;
  unsigned __int32 v1176;
  unsigned __int32 *v1177;
  unsigned __int32 *v1178;
  uint64_t v1179;
  unint64_t v1180;
  uint64_t v1181;
  unint64_t v1182;
  char *v1183;
  char *v1184;
  int v1185;
  unsigned __int32 *v1186;
  unsigned __int32 *v1187;
  uint64_t v1188;
  unint64_t v1189;
  uint64_t v1190;
  unint64_t v1191;
  char *v1192;
  char *v1193;
  unsigned __int32 *v1194;
  unsigned __int32 v1195;
  unsigned __int32 *v1196;
  unsigned __int32 *v1197;
  uint64_t v1198;
  unint64_t v1199;
  uint64_t v1200;
  unint64_t v1201;
  char *v1202;
  unsigned __int32 *v1203;
  unsigned __int32 v1204;
  unsigned __int32 *v1205;
  unsigned __int32 *v1206;
  uint64_t v1207;
  unint64_t v1208;
  uint64_t v1209;
  unint64_t v1210;
  char *v1211;
  char *v1212;
  int v1213;
  unsigned __int32 *v1214;
  unsigned __int32 *v1215;
  uint64_t v1216;
  unint64_t v1217;
  uint64_t v1218;
  unint64_t v1219;
  char *v1220;
  char *v1221;
  int v1222;
  unsigned __int32 *v1223;
  unsigned __int32 *v1224;
  uint64_t v1225;
  unint64_t v1226;
  uint64_t v1227;
  unint64_t v1228;
  char *v1229;
  unsigned __int32 *v1230;
  unsigned __int32 v1231;
  _DWORD *v1232;
  int v1233;
  unsigned __int32 *v1234;
  uint64_t v1235;
  unint64_t v1236;
  uint64_t v1237;
  unint64_t v1238;
  char *v1239;
  char *v1240;
  char *v1241;
  int v1242;
  int v1243;
  _QWORD *v1244;
  _DWORD *v1245;
  _DWORD *v1246;
  _DWORD *v1247;
  uint64_t v1248;
  unint64_t v1249;
  uint64_t v1250;
  unint64_t v1251;
  char *v1252;
  char *v1253;
  int v1254;
  int v1255;
  char **v1256;
  char *v1257;
  char *v1258;
  char *v1259;
  char *v1260;
  uint64_t v1261;
  unint64_t v1262;
  uint64_t v1263;
  unint64_t v1264;
  char *v1265;
  char *v1266;
  int v1267;
  char *v1268;
  char *v1269;
  uint64_t v1270;
  unint64_t v1271;
  uint64_t v1272;
  unint64_t v1273;
  char *v1274;
  char *v1275;
  int v1276;
  char *v1277;
  uint64_t v1278;
  unint64_t v1279;
  uint64_t v1280;
  unint64_t v1281;
  char *v1282;
  char *v1283;
  int v1284;
  int v1285;
  char *v1286;
  char **v1287;
  char *v1288;
  char *v1289;
  char *v1290;
  uint64_t v1291;
  unint64_t v1292;
  uint64_t v1293;
  unint64_t v1294;
  char *v1295;
  char *v1296;
  int v1297;
  int v1298;
  char *v1299;
  char *v1300;
  uint64_t v1301;
  unint64_t v1302;
  uint64_t v1303;
  unint64_t v1304;
  char *v1305;
  char *v1306;
  int v1307;
  int v1308;
  char *v1309;
  char *v1310;
  uint64_t v1311;
  unint64_t v1312;
  uint64_t v1313;
  unint64_t v1314;
  char *v1315;
  char *v1316;
  int v1317;
  char *v1318;
  char *v1319;
  uint64_t v1320;
  unint64_t v1321;
  uint64_t v1322;
  unint64_t v1323;
  char *v1324;
  char *v1325;
  int v1326;
  char *v1327;
  char *v1328;
  uint64_t v1329;
  unint64_t v1330;
  uint64_t v1331;
  unint64_t v1332;
  char *v1333;
  char *v1334;
  int v1335;
  int v1336;
  char *v1337;
  char *v1338;
  uint64_t v1339;
  unint64_t v1340;
  uint64_t v1341;
  unint64_t v1342;
  char *v1343;
  char *v1344;
  char *v1345;
  int v1346;
  int v1347;
  int v1353;
  int v1354;
  int v1355;
  int v1356;
  int v1357;
  __n128 v1360;

  if (!a6)
    return 0;
  v12 = a6;
  v13 = a5;
  v14 = a3;
  v15 = a2;
  v1360 = a10;
  if ((a3 & 0x20) != 0)
  {
    v19 = (char **)(a6 + 16);
    v18 = *(char **)(a6 + 16);
    v20 = *(unsigned __int32 **)(a6 + 8);
    if (v20 >= (unsigned __int32 *)v18)
    {
      v23 = *(unsigned __int32 **)a6;
      v24 = ((uint64_t)v20 - *(_QWORD *)a6) >> 2;
      v25 = v24 + 1;
      v21 = a9;
      if ((unint64_t)(v24 + 1) >> 62)
        goto LABEL_2264;
      v26 = v18 - (char *)v23;
      if (v26 >> 1 > v25)
        v25 = v26 >> 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
        v27 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        v28 = (char *)sub_1DCAE4D04(a6 + 16, v27);
        v21 = a9;
        v29 = v28;
        v23 = *(unsigned __int32 **)v12;
        v20 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v29 = 0;
      }
      v30 = &v29[4 * v24];
      v18 = &v29[4 * v27];
      *(_DWORD *)v30 = v21.n128_u32[0];
      v22 = (unsigned __int32 *)(v30 + 4);
      while (v20 != v23)
      {
        v31 = *--v20;
        *((_DWORD *)v30 - 1) = v31;
        v30 -= 4;
      }
      *(_QWORD *)v12 = v30;
      *(_QWORD *)(v12 + 8) = v22;
      *(_QWORD *)(v12 + 16) = v18;
      if (v23)
      {
        operator delete(v23);
        v21 = a9;
        v18 = *v19;
      }
    }
    else
    {
      v21 = a9;
      *v20 = a9.n128_u32[0];
      v22 = v20 + 1;
    }
    *(_QWORD *)(v12 + 8) = v22;
    v32 = v21.n128_u32[1];
    if (v22 >= (unsigned __int32 *)v18)
    {
      v34 = *(unsigned __int32 **)v12;
      v35 = ((uint64_t)v22 - *(_QWORD *)v12) >> 2;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 62)
        goto LABEL_2264;
      v37 = v18 - (char *)v34;
      if (v37 >> 1 > v36)
        v36 = v37 >> 1;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
        v38 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
      {
        v39 = (char *)sub_1DCAE4D04(v12 + 16, v38);
        v34 = *(unsigned __int32 **)v12;
        v22 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v39 = 0;
      }
      v40 = (unsigned __int32 *)&v39[4 * v35];
      v18 = &v39[4 * v38];
      *v40 = v32;
      v33 = v40 + 1;
      while (v22 != v34)
      {
        v41 = *--v22;
        *--v40 = v41;
      }
      *(_QWORD *)v12 = v40;
      *(_QWORD *)(v12 + 8) = v33;
      *(_QWORD *)(v12 + 16) = v18;
      if (v34)
      {
        operator delete(v34);
        v18 = *v19;
      }
      v21 = a9;
    }
    else
    {
      *v22 = v21.n128_u32[1];
      v33 = v22 + 1;
    }
    *(_QWORD *)(v12 + 8) = v33;
    v42 = v21.n128_u32[2];
    if (v33 >= (unsigned __int32 *)v18)
    {
      v44 = *(unsigned __int32 **)v12;
      v45 = ((uint64_t)v33 - *(_QWORD *)v12) >> 2;
      v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 62)
        goto LABEL_2264;
      v47 = v18 - (char *)v44;
      if (v47 >> 1 > v46)
        v46 = v47 >> 1;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
        v48 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (v48)
      {
        v49 = (char *)sub_1DCAE4D04(v12 + 16, v48);
        v44 = *(unsigned __int32 **)v12;
        v33 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v49 = 0;
      }
      v50 = (unsigned __int32 *)&v49[4 * v45];
      v18 = &v49[4 * v48];
      *v50 = v42;
      v43 = v50 + 1;
      while (v33 != v44)
      {
        v51 = *--v33;
        *--v50 = v51;
      }
      *(_QWORD *)v12 = v50;
      *(_QWORD *)(v12 + 8) = v43;
      *(_QWORD *)(v12 + 16) = v18;
      if (v44)
      {
        operator delete(v44);
        v18 = *v19;
      }
      v21.n128_u32[0] = a9.n128_u32[0];
    }
    else
    {
      *v33 = v21.n128_u32[2];
      v43 = v33 + 1;
    }
    *(_QWORD *)(v12 + 8) = v43;
    if (v43 >= (unsigned __int32 *)v18)
    {
      v53 = *(unsigned __int32 **)v12;
      v54 = ((uint64_t)v43 - *(_QWORD *)v12) >> 2;
      v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 62)
        goto LABEL_2264;
      v56 = v18 - (char *)v53;
      if (v56 >> 1 > v55)
        v55 = v56 >> 1;
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
        v57 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v57 = v55;
      if (v57)
      {
        v58 = (char *)sub_1DCAE4D04(v12 + 16, v57);
        v53 = *(unsigned __int32 **)v12;
        v43 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v58 = 0;
      }
      v59 = &v58[4 * v54];
      v18 = &v58[4 * v57];
      *(_DWORD *)v59 = v1360.n128_u32[0];
      v52 = (unsigned __int32 *)(v59 + 4);
      while (v43 != v53)
      {
        v60 = *--v43;
        *((_DWORD *)v59 - 1) = v60;
        v59 -= 4;
      }
      *(_QWORD *)v12 = v59;
      *(_QWORD *)(v12 + 8) = v52;
      *(_QWORD *)(v12 + 16) = v18;
      if (v53)
      {
        operator delete(v53);
        v18 = *v19;
      }
      v21.n128_u32[0] = a9.n128_u32[0];
    }
    else
    {
      *v43 = v1360.n128_u32[0];
      v52 = v43 + 1;
    }
    *(_QWORD *)(v12 + 8) = v52;
    if (v52 >= (unsigned __int32 *)v18)
    {
      v62 = *(unsigned __int32 **)v12;
      v63 = ((uint64_t)v52 - *(_QWORD *)v12) >> 2;
      v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 62)
        goto LABEL_2264;
      v65 = v18 - (char *)v62;
      if (v65 >> 1 > v64)
        v64 = v65 >> 1;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
        v66 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v66 = v64;
      if (v66)
      {
        v67 = (char *)sub_1DCAE4D04(v12 + 16, v66);
        v62 = *(unsigned __int32 **)v12;
        v52 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v67 = 0;
      }
      v68 = (unsigned __int32 *)&v67[4 * v63];
      v18 = &v67[4 * v66];
      *v68 = v32;
      v61 = v68 + 1;
      while (v52 != v62)
      {
        v69 = *--v52;
        *--v68 = v69;
      }
      *(_QWORD *)v12 = v68;
      *(_QWORD *)(v12 + 8) = v61;
      *(_QWORD *)(v12 + 16) = v18;
      if (v62)
      {
        operator delete(v62);
        v18 = *v19;
      }
      v21.n128_u32[0] = a9.n128_u32[0];
    }
    else
    {
      *v52 = v32;
      v61 = v52 + 1;
    }
    *(_QWORD *)(v12 + 8) = v61;
    if (v61 >= (unsigned __int32 *)v18)
    {
      v71 = *(unsigned __int32 **)v12;
      v72 = ((uint64_t)v61 - *(_QWORD *)v12) >> 2;
      v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 62)
        goto LABEL_2264;
      v74 = v18 - (char *)v71;
      if (v74 >> 1 > v73)
        v73 = v74 >> 1;
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
        v75 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v75 = v73;
      if (v75)
      {
        v76 = (char *)sub_1DCAE4D04(v12 + 16, v75);
        v71 = *(unsigned __int32 **)v12;
        v61 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v76 = 0;
      }
      v77 = (unsigned __int32 *)&v76[4 * v72];
      v18 = &v76[4 * v75];
      *v77 = v42;
      v70 = v77 + 1;
      while (v61 != v71)
      {
        v78 = *--v61;
        *--v77 = v78;
      }
      *(_QWORD *)v12 = v77;
      *(_QWORD *)(v12 + 8) = v70;
      *(_QWORD *)(v12 + 16) = v18;
      if (v71)
      {
        operator delete(v71);
        v18 = *v19;
      }
      v21.n128_u32[0] = a9.n128_u32[0];
    }
    else
    {
      *v61 = v42;
      v70 = v61 + 1;
    }
    *(_QWORD *)(v12 + 8) = v70;
    if (v70 >= (unsigned __int32 *)v18)
    {
      v80 = *(unsigned __int32 **)v12;
      v81 = ((uint64_t)v70 - *(_QWORD *)v12) >> 2;
      v82 = v81 + 1;
      if ((unint64_t)(v81 + 1) >> 62)
        goto LABEL_2264;
      v83 = v18 - (char *)v80;
      if (v83 >> 1 > v82)
        v82 = v83 >> 1;
      if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
        v84 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v84 = v82;
      if (v84)
      {
        v85 = (char *)sub_1DCAE4D04(v12 + 16, v84);
        v21.n128_u32[0] = a9.n128_u32[0];
        v86 = v85;
        v80 = *(unsigned __int32 **)v12;
        v70 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v86 = 0;
      }
      v87 = &v86[4 * v81];
      v18 = &v86[4 * v84];
      *(_DWORD *)v87 = v21.n128_u32[0];
      v79 = (unsigned __int32 *)(v87 + 4);
      while (v70 != v80)
      {
        v88 = *--v70;
        *((_DWORD *)v87 - 1) = v88;
        v87 -= 4;
      }
      *(_QWORD *)v12 = v87;
      *(_QWORD *)(v12 + 8) = v79;
      *(_QWORD *)(v12 + 16) = v18;
      if (v80)
      {
        operator delete(v80);
        v18 = *v19;
      }
    }
    else
    {
      *v70 = v21.n128_u32[0];
      v79 = v70 + 1;
    }
    *(_QWORD *)(v12 + 8) = v79;
    if (v79 >= (unsigned __int32 *)v18)
    {
      v90 = *(unsigned __int32 **)v12;
      v91 = ((uint64_t)v79 - *(_QWORD *)v12) >> 2;
      v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 62)
        goto LABEL_2264;
      v93 = v18 - (char *)v90;
      if (v93 >> 1 > v92)
        v92 = v93 >> 1;
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
        v94 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v94 = v92;
      if (v94)
      {
        v95 = (char *)sub_1DCAE4D04(v12 + 16, v94);
        v90 = *(unsigned __int32 **)v12;
        v79 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v95 = 0;
      }
      v96 = &v95[4 * v91];
      v18 = &v95[4 * v94];
      *(_DWORD *)v96 = v1360.n128_u32[1];
      v89 = (unsigned __int32 *)(v96 + 4);
      while (v79 != v90)
      {
        v97 = *--v79;
        *((_DWORD *)v96 - 1) = v97;
        v96 -= 4;
      }
      *(_QWORD *)v12 = v96;
      *(_QWORD *)(v12 + 8) = v89;
      *(_QWORD *)(v12 + 16) = v18;
      if (v90)
      {
        operator delete(v90);
        v18 = *v19;
      }
    }
    else
    {
      *v79 = v1360.n128_u32[1];
      v89 = v79 + 1;
    }
    *(_QWORD *)(v12 + 8) = v89;
    if (v89 >= (unsigned __int32 *)v18)
    {
      v99 = *(unsigned __int32 **)v12;
      v100 = ((uint64_t)v89 - *(_QWORD *)v12) >> 2;
      v101 = v100 + 1;
      if ((unint64_t)(v100 + 1) >> 62)
        goto LABEL_2264;
      v102 = v18 - (char *)v99;
      if (v102 >> 1 > v101)
        v101 = v102 >> 1;
      if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
        v103 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v103 = v101;
      if (v103)
      {
        v104 = (char *)sub_1DCAE4D04(v12 + 16, v103);
        v99 = *(unsigned __int32 **)v12;
        v89 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v104 = 0;
      }
      v105 = (unsigned __int32 *)&v104[4 * v100];
      v18 = &v104[4 * v103];
      *v105 = v42;
      v98 = v105 + 1;
      while (v89 != v99)
      {
        v106 = *--v89;
        *--v105 = v106;
      }
      *(_QWORD *)v12 = v105;
      *(_QWORD *)(v12 + 8) = v98;
      *(_QWORD *)(v12 + 16) = v18;
      if (v99)
      {
        operator delete(v99);
        v18 = *v19;
      }
    }
    else
    {
      *v89 = v42;
      v98 = v89 + 1;
    }
    *(_QWORD *)(v12 + 8) = v98;
    if (v98 >= (unsigned __int32 *)v18)
    {
      v108 = *(unsigned __int32 **)v12;
      v109 = ((uint64_t)v98 - *(_QWORD *)v12) >> 2;
      v110 = v109 + 1;
      if ((unint64_t)(v109 + 1) >> 62)
        goto LABEL_2264;
      v111 = v18 - (char *)v108;
      if (v111 >> 1 > v110)
        v110 = v111 >> 1;
      if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL)
        v112 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v112 = v110;
      if (v112)
      {
        v113 = (char *)sub_1DCAE4D04(v12 + 16, v112);
        v108 = *(unsigned __int32 **)v12;
        v98 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v113 = 0;
      }
      v114 = &v113[4 * v109];
      v18 = &v113[4 * v112];
      *(_DWORD *)v114 = v1360.n128_u32[0];
      v107 = (unsigned __int32 *)(v114 + 4);
      while (v98 != v108)
      {
        v115 = *--v98;
        *((_DWORD *)v114 - 1) = v115;
        v114 -= 4;
      }
      *(_QWORD *)v12 = v114;
      *(_QWORD *)(v12 + 8) = v107;
      *(_QWORD *)(v12 + 16) = v18;
      if (v108)
      {
        operator delete(v108);
        v18 = *v19;
      }
    }
    else
    {
      *v98 = v1360.n128_u32[0];
      v107 = v98 + 1;
    }
    *(_QWORD *)(v12 + 8) = v107;
    if (v107 >= (unsigned __int32 *)v18)
    {
      v117 = *(unsigned __int32 **)v12;
      v118 = ((uint64_t)v107 - *(_QWORD *)v12) >> 2;
      v119 = v118 + 1;
      if ((unint64_t)(v118 + 1) >> 62)
        goto LABEL_2264;
      v120 = v18 - (char *)v117;
      if (v120 >> 1 > v119)
        v119 = v120 >> 1;
      if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL)
        v121 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v121 = v119;
      if (v121)
      {
        v122 = (char *)sub_1DCAE4D04(v12 + 16, v121);
        v117 = *(unsigned __int32 **)v12;
        v107 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v122 = 0;
      }
      v123 = &v122[4 * v118];
      v18 = &v122[4 * v121];
      *(_DWORD *)v123 = v1360.n128_u32[1];
      v116 = (unsigned __int32 *)(v123 + 4);
      while (v107 != v117)
      {
        v124 = *--v107;
        *((_DWORD *)v123 - 1) = v124;
        v123 -= 4;
      }
      *(_QWORD *)v12 = v123;
      *(_QWORD *)(v12 + 8) = v116;
      *(_QWORD *)(v12 + 16) = v18;
      if (v117)
      {
        operator delete(v117);
        v18 = *v19;
      }
    }
    else
    {
      *v107 = v1360.n128_u32[1];
      v116 = v107 + 1;
    }
    *(_QWORD *)(v12 + 8) = v116;
    if (v116 >= (unsigned __int32 *)v18)
    {
      v126 = *(unsigned __int32 **)v12;
      v127 = ((uint64_t)v116 - *(_QWORD *)v12) >> 2;
      v128 = v127 + 1;
      if ((unint64_t)(v127 + 1) >> 62)
        goto LABEL_2264;
      v129 = v18 - (char *)v126;
      if (v129 >> 1 > v128)
        v128 = v129 >> 1;
      if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL)
        v130 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v130 = v128;
      if (v130)
      {
        v131 = (char *)sub_1DCAE4D04(v12 + 16, v130);
        v126 = *(unsigned __int32 **)v12;
        v116 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v131 = 0;
      }
      v132 = (unsigned __int32 *)&v131[4 * v127];
      v133 = &v131[4 * v130];
      *v132 = v42;
      v125 = v132 + 1;
      while (v116 != v126)
      {
        v134 = *--v116;
        *--v132 = v134;
      }
      *(_QWORD *)v12 = v132;
      *(_QWORD *)(v12 + 8) = v125;
      *(_QWORD *)(v12 + 16) = v133;
      if (v126)
        operator delete(v126);
    }
    else
    {
      *v116 = v42;
      v125 = v116 + 1;
    }
    a10 = v1360;
    *(_QWORD *)(v12 + 8) = v125;
    if (a8 && a1)
    {
      v135 = 0;
      v136 = (_QWORD *)(a8 + 16);
      v137 = *(_DWORD **)(a8 + 8);
      do
      {
        if ((unint64_t)v137 >= *v136)
        {
          v139 = *(_DWORD **)a8;
          v140 = ((uint64_t)v137 - *(_QWORD *)a8) >> 2;
          v141 = v140 + 1;
          if ((unint64_t)(v140 + 1) >> 62)
LABEL_2263:
            sub_1DCAE4C44();
          v142 = *v136 - (_QWORD)v139;
          if (v142 >> 1 > v141)
            v141 = v142 >> 1;
          if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL)
            v143 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v143 = v141;
          if (v143)
          {
            v144 = (char *)sub_1DCAE4D04(a8 + 16, v143);
            v139 = *(_DWORD **)a8;
            v137 = *(_DWORD **)(a8 + 8);
          }
          else
          {
            v144 = 0;
          }
          v145 = &v144[4 * v140];
          *(_DWORD *)v145 = v15;
          v138 = v145 + 4;
          while (v137 != v139)
          {
            v146 = *--v137;
            *((_DWORD *)v145 - 1) = v146;
            v145 -= 4;
          }
          *(_QWORD *)a8 = v145;
          *(_QWORD *)(a8 + 8) = v138;
          *(_QWORD *)(a8 + 16) = &v144[4 * v143];
          if (v139)
            operator delete(v139);
          a10 = v1360;
        }
        else
        {
          *v137 = v15;
          v138 = v137 + 1;
        }
        *(_QWORD *)(a8 + 8) = v138;
        ++v135;
        v137 = v138;
      }
      while (v135 != 4);
    }
    if (a7)
    {
      v147 = 0;
      v148 = a7 + 2;
      v149 = a7[1];
      do
      {
        v150 = *v148;
        if (v149 >= *v148)
        {
          v152 = *a7;
          v153 = (v149 - *a7) >> 2;
          v154 = v153 + 1;
          if ((unint64_t)(v153 + 1) >> 62)
            goto LABEL_2262;
          v155 = v150 - v152;
          if (v155 >> 1 > v154)
            v154 = v155 >> 1;
          if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFFCLL)
            v156 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v156 = v154;
          if (v156)
          {
            v157 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v156);
            v152 = *a7;
            v149 = a7[1];
          }
          else
          {
            v157 = 0;
          }
          v158 = &v157[4 * v153];
          *(_DWORD *)v158 = -1082130432;
          v151 = v158 + 4;
          while (v149 != v152)
          {
            v159 = *((_DWORD *)v149 - 1);
            v149 -= 4;
            *((_DWORD *)v158 - 1) = v159;
            v158 -= 4;
          }
          v150 = &v157[4 * v156];
          *a7 = v158;
          a7[1] = v151;
          a7[2] = v150;
          if (v152)
          {
            operator delete(v152);
            v150 = *v148;
          }
          a10 = v1360;
        }
        else
        {
          *(_DWORD *)v149 = -1082130432;
          v151 = v149 + 4;
        }
        a7[1] = v151;
        if (v151 >= v150)
        {
          v161 = *a7;
          v162 = (v151 - *a7) >> 2;
          v163 = v162 + 1;
          if ((unint64_t)(v162 + 1) >> 62)
            goto LABEL_2262;
          v164 = v150 - v161;
          if (v164 >> 1 > v163)
            v163 = v164 >> 1;
          if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFFCLL)
            v165 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v165 = v163;
          if (v165)
          {
            v166 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v165);
            v161 = *a7;
            v151 = a7[1];
          }
          else
          {
            v166 = 0;
          }
          v167 = &v166[4 * v162];
          *(_DWORD *)v167 = 0;
          v160 = v167 + 4;
          while (v151 != v161)
          {
            v168 = *((_DWORD *)v151 - 1);
            v151 -= 4;
            *((_DWORD *)v167 - 1) = v168;
            v167 -= 4;
          }
          v150 = &v166[4 * v165];
          *a7 = v167;
          a7[1] = v160;
          a7[2] = v150;
          if (v161)
          {
            operator delete(v161);
            v150 = *v148;
          }
          a10 = v1360;
        }
        else
        {
          *(_DWORD *)v151 = 0;
          v160 = v151 + 4;
        }
        a7[1] = v160;
        if (v160 >= v150)
        {
          v169 = *a7;
          v170 = (v160 - *a7) >> 2;
          v171 = v170 + 1;
          if ((unint64_t)(v170 + 1) >> 62)
LABEL_2262:
            sub_1DCAE4C44();
          v172 = v150 - v169;
          if (v172 >> 1 > v171)
            v171 = v172 >> 1;
          if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL)
            v173 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v173 = v171;
          if (v173)
          {
            v174 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v173);
            v169 = *a7;
            v160 = a7[1];
          }
          else
          {
            v174 = 0;
          }
          v175 = &v174[4 * v170];
          *(_DWORD *)v175 = 0;
          v149 = v175 + 4;
          while (v160 != v169)
          {
            v176 = *((_DWORD *)v160 - 1);
            v160 -= 4;
            *((_DWORD *)v175 - 1) = v176;
            v175 -= 4;
          }
          *a7 = v175;
          a7[1] = v149;
          a7[2] = &v174[4 * v173];
          if (v169)
            operator delete(v169);
          a10 = v1360;
        }
        else
        {
          *(_DWORD *)v160 = 0;
          v149 = v160 + 4;
        }
        a7[1] = v149;
        ++v147;
      }
      while (v147 != 4);
    }
    v13 = a5;
    v178 = a5 + 2;
    v177 = a5[2];
    v179 = a5[1];
    if (v179 >= v177)
    {
      v182 = *a5;
      v183 = (v179 - *a5) >> 2;
      v184 = v183 + 1;
      if ((unint64_t)(v183 + 1) >> 62)
        goto LABEL_2265;
      v185 = v177 - v182;
      if (v185 >> 1 > v184)
        v184 = v185 >> 1;
      if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL)
        v186 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v186 = v184;
      v12 = a6;
      if (v186)
      {
        v187 = (char *)sub_1DCAE4D04((uint64_t)(a5 + 2), v186);
        v182 = *a5;
        v179 = a5[1];
      }
      else
      {
        v187 = 0;
      }
      v188 = &v187[4 * v183];
      v177 = &v187[4 * v186];
      *(_DWORD *)v188 = a4;
      v181 = v188 + 4;
      while (v179 != v182)
      {
        v189 = *((_DWORD *)v179 - 1);
        v179 -= 4;
        *((_DWORD *)v188 - 1) = v189;
        v188 -= 4;
      }
      *a5 = v188;
      a5[1] = v181;
      a5[2] = v177;
      if (v182)
      {
        operator delete(v182);
        v177 = *v178;
      }
      v180 = a4;
      a10 = v1360;
    }
    else
    {
      v180 = a4;
      *(_DWORD *)v179 = a4;
      v181 = v179 + 4;
      v12 = a6;
    }
    a5[1] = v181;
    v190 = v180 + 2;
    if (v181 >= v177)
    {
      v192 = *a5;
      v193 = (v181 - *a5) >> 2;
      v194 = v193 + 1;
      if ((unint64_t)(v193 + 1) >> 62)
        goto LABEL_2265;
      v195 = v177 - v192;
      if (v195 >> 1 > v194)
        v194 = v195 >> 1;
      if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFFCLL)
        v196 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v196 = v194;
      if (v196)
      {
        v197 = (char *)sub_1DCAE4D04((uint64_t)v178, v196);
        v192 = *a5;
        v181 = a5[1];
      }
      else
      {
        v197 = 0;
      }
      v198 = &v197[4 * v193];
      v177 = &v197[4 * v196];
      *(_DWORD *)v198 = v190;
      v191 = v198 + 4;
      while (v181 != v192)
      {
        v199 = *((_DWORD *)v181 - 1);
        v181 -= 4;
        *((_DWORD *)v198 - 1) = v199;
        v198 -= 4;
      }
      *a5 = v198;
      a5[1] = v191;
      a5[2] = v177;
      if (v192)
      {
        operator delete(v192);
        v177 = *v178;
      }
      a10 = v1360;
    }
    else
    {
      *(_DWORD *)v181 = v190;
      v191 = v181 + 4;
    }
    a5[1] = v191;
    v200 = a4 + 1;
    if (v191 >= v177)
    {
      v202 = *a5;
      v203 = (v191 - *a5) >> 2;
      v204 = v203 + 1;
      if ((unint64_t)(v203 + 1) >> 62)
        goto LABEL_2265;
      v205 = v177 - v202;
      if (v205 >> 1 > v204)
        v204 = v205 >> 1;
      if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFFCLL)
        v206 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v206 = v204;
      if (v206)
      {
        v207 = (char *)sub_1DCAE4D04((uint64_t)v178, v206);
        v202 = *a5;
        v191 = a5[1];
      }
      else
      {
        v207 = 0;
      }
      v208 = &v207[4 * v203];
      v177 = &v207[4 * v206];
      *(_DWORD *)v208 = v200;
      v201 = v208 + 4;
      while (v191 != v202)
      {
        v209 = *((_DWORD *)v191 - 1);
        v191 -= 4;
        *((_DWORD *)v208 - 1) = v209;
        v208 -= 4;
      }
      *a5 = v208;
      a5[1] = v201;
      a5[2] = v177;
      if (v202)
      {
        operator delete(v202);
        v177 = *v178;
      }
      a10 = v1360;
    }
    else
    {
      *(_DWORD *)v191 = v200;
      v201 = v191 + 4;
    }
    a5[1] = v201;
    if (v201 >= v177)
    {
      v211 = *a5;
      v212 = (v201 - *a5) >> 2;
      v213 = v212 + 1;
      if ((unint64_t)(v212 + 1) >> 62)
        goto LABEL_2265;
      v214 = v177 - v211;
      if (v214 >> 1 > v213)
        v213 = v214 >> 1;
      if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL)
        v215 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v215 = v213;
      if (v215)
      {
        v216 = (char *)sub_1DCAE4D04((uint64_t)v178, v215);
        v211 = *a5;
        v201 = a5[1];
      }
      else
      {
        v216 = 0;
      }
      v217 = &v216[4 * v212];
      v177 = &v216[4 * v215];
      *(_DWORD *)v217 = v200;
      v210 = v217 + 4;
      if (v201 == v211)
      {
        v14 = a3;
      }
      else
      {
        v14 = a3;
        do
        {
          v218 = *((_DWORD *)v201 - 1);
          v201 -= 4;
          *((_DWORD *)v217 - 1) = v218;
          v217 -= 4;
        }
        while (v201 != v211);
      }
      *a5 = v217;
      a5[1] = v210;
      a5[2] = v177;
      if (v211)
      {
        operator delete(v211);
        v177 = *v178;
      }
      a10 = v1360;
    }
    else
    {
      *(_DWORD *)v201 = v200;
      v210 = v201 + 4;
      v14 = a3;
    }
    a5[1] = v210;
    if (v210 >= v177)
    {
      v220 = *a5;
      v221 = (v210 - *a5) >> 2;
      v222 = v221 + 1;
      if ((unint64_t)(v221 + 1) >> 62)
        goto LABEL_2265;
      v223 = v177 - v220;
      if (v223 >> 1 > v222)
        v222 = v223 >> 1;
      if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL)
        v224 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v224 = v222;
      if (v224)
      {
        v225 = (char *)sub_1DCAE4D04((uint64_t)v178, v224);
        v220 = *a5;
        v210 = a5[1];
      }
      else
      {
        v225 = 0;
      }
      v226 = &v225[4 * v221];
      v177 = &v225[4 * v224];
      *(_DWORD *)v226 = v190;
      v219 = v226 + 4;
      while (v210 != v220)
      {
        v227 = *((_DWORD *)v210 - 1);
        v210 -= 4;
        *((_DWORD *)v226 - 1) = v227;
        v226 -= 4;
      }
      *a5 = v226;
      a5[1] = v219;
      a5[2] = v177;
      if (v220)
      {
        operator delete(v220);
        v177 = *v178;
      }
      v15 = a2;
      a10 = v1360;
    }
    else
    {
      *(_DWORD *)v210 = v190;
      v219 = v210 + 4;
      v15 = a2;
    }
    a5[1] = v219;
    v228 = a4 + 3;
    if (v219 >= v177)
    {
      v230 = *a5;
      v231 = (v219 - *a5) >> 2;
      v232 = v231 + 1;
      if ((unint64_t)(v231 + 1) >> 62)
        goto LABEL_2265;
      v233 = v177 - v230;
      if (v233 >> 1 > v232)
        v232 = v233 >> 1;
      if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFFCLL)
        v234 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v234 = v232;
      if (v234)
      {
        v235 = (char *)sub_1DCAE4D04((uint64_t)v178, v234);
        v230 = *a5;
        v219 = a5[1];
      }
      else
      {
        v235 = 0;
      }
      v236 = &v235[4 * v231];
      v237 = &v235[4 * v234];
      *(_DWORD *)v236 = v228;
      v229 = v236 + 4;
      while (v219 != v230)
      {
        v238 = *((_DWORD *)v219 - 1);
        v219 -= 4;
        *((_DWORD *)v236 - 1) = v238;
        v236 -= 4;
      }
      *a5 = v236;
      a5[1] = v229;
      a5[2] = v237;
      if (v230)
        operator delete(v230);
      a10 = v1360;
    }
    else
    {
      *(_DWORD *)v219 = v228;
      v229 = v219 + 4;
    }
    a5[1] = v229;
    v16 = 4;
    if ((v14 & 2) == 0)
    {
LABEL_4:
      if ((v14 & 0x10) == 0)
        goto LABEL_5;
      goto LABEL_765;
    }
  }
  else
  {
    v16 = 0;
    if ((a3 & 2) == 0)
      goto LABEL_4;
  }
  v240 = (char **)(v12 + 16);
  v239 = *(char **)(v12 + 16);
  v241 = *(unsigned __int32 **)(v12 + 8);
  if (v241 >= (unsigned __int32 *)v239)
  {
    v244 = *(unsigned __int32 **)v12;
    v245 = ((uint64_t)v241 - *(_QWORD *)v12) >> 2;
    v246 = v245 + 1;
    v242 = a9;
    if ((unint64_t)(v245 + 1) >> 62)
      goto LABEL_2264;
    v247 = v239 - (char *)v244;
    if (v247 >> 1 > v246)
      v246 = v247 >> 1;
    if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL)
      v248 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v248 = v246;
    if (v248)
    {
      v249 = (char *)sub_1DCAE4D04(v12 + 16, v248);
      v242 = a9;
      v250 = v249;
      v244 = *(unsigned __int32 **)v12;
      v241 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v250 = 0;
    }
    v251 = &v250[4 * v245];
    v239 = &v250[4 * v248];
    *(_DWORD *)v251 = v242.n128_u32[0];
    v243 = (unsigned __int32 *)(v251 + 4);
    while (v241 != v244)
    {
      v252 = *--v241;
      *((_DWORD *)v251 - 1) = v252;
      v251 -= 4;
    }
    *(_QWORD *)v12 = v251;
    *(_QWORD *)(v12 + 8) = v243;
    *(_QWORD *)(v12 + 16) = v239;
    if (v244)
    {
      operator delete(v244);
      v242 = a9;
      v239 = *v240;
    }
  }
  else
  {
    v242 = a9;
    *v241 = a9.n128_u32[0];
    v243 = v241 + 1;
  }
  *(_QWORD *)(v12 + 8) = v243;
  v253 = v242.n128_u32[1];
  v1353 = v16;
  if (v243 >= (unsigned __int32 *)v239)
  {
    v255 = *(unsigned __int32 **)v12;
    v256 = ((uint64_t)v243 - *(_QWORD *)v12) >> 2;
    v257 = v256 + 1;
    if ((unint64_t)(v256 + 1) >> 62)
      goto LABEL_2264;
    v258 = v239 - (char *)v255;
    if (v258 >> 1 > v257)
      v257 = v258 >> 1;
    if ((unint64_t)v258 >= 0x7FFFFFFFFFFFFFFCLL)
      v259 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v259 = v257;
    if (v259)
    {
      v260 = (char *)sub_1DCAE4D04(v12 + 16, v259);
      v255 = *(unsigned __int32 **)v12;
      v243 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v260 = 0;
    }
    v261 = (unsigned __int32 *)&v260[4 * v256];
    v239 = &v260[4 * v259];
    *v261 = v253;
    v254 = v261 + 1;
    while (v243 != v255)
    {
      v262 = *--v243;
      *--v261 = v262;
    }
    *(_QWORD *)v12 = v261;
    *(_QWORD *)(v12 + 8) = v254;
    *(_QWORD *)(v12 + 16) = v239;
    if (v255)
    {
      operator delete(v255);
      v239 = *v240;
    }
    v242 = a9;
  }
  else
  {
    *v243 = v242.n128_u32[1];
    v254 = v243 + 1;
  }
  *(_QWORD *)(v12 + 8) = v254;
  v263 = v242.n128_u32[2];
  if (v254 >= (unsigned __int32 *)v239)
  {
    v265 = *(unsigned __int32 **)v12;
    v266 = ((uint64_t)v254 - *(_QWORD *)v12) >> 2;
    v267 = v266 + 1;
    if ((unint64_t)(v266 + 1) >> 62)
      goto LABEL_2264;
    v268 = v239 - (char *)v265;
    if (v268 >> 1 > v267)
      v267 = v268 >> 1;
    if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFFCLL)
      v269 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v269 = v267;
    if (v269)
    {
      v270 = (char *)sub_1DCAE4D04(v12 + 16, v269);
      v265 = *(unsigned __int32 **)v12;
      v254 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v270 = 0;
    }
    v271 = (unsigned __int32 *)&v270[4 * v266];
    v239 = &v270[4 * v269];
    *v271 = v263;
    v264 = v271 + 1;
    while (v254 != v265)
    {
      v272 = *--v254;
      *--v271 = v272;
    }
    *(_QWORD *)v12 = v271;
    *(_QWORD *)(v12 + 8) = v264;
    *(_QWORD *)(v12 + 16) = v239;
    if (v265)
    {
      operator delete(v265);
      v239 = *v240;
    }
    v242.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    *v254 = v242.n128_u32[2];
    v264 = v254 + 1;
  }
  *(_QWORD *)(v12 + 8) = v264;
  if (v264 >= (unsigned __int32 *)v239)
  {
    v274 = *(unsigned __int32 **)v12;
    v275 = ((uint64_t)v264 - *(_QWORD *)v12) >> 2;
    v276 = v275 + 1;
    if ((unint64_t)(v275 + 1) >> 62)
      goto LABEL_2264;
    v277 = v239 - (char *)v274;
    if (v277 >> 1 > v276)
      v276 = v277 >> 1;
    if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFFCLL)
      v278 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v278 = v276;
    if (v278)
    {
      v279 = (char *)sub_1DCAE4D04(v12 + 16, v278);
      v242.n128_u32[0] = a9.n128_u32[0];
      v280 = v279;
      v274 = *(unsigned __int32 **)v12;
      v264 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v280 = 0;
    }
    v281 = &v280[4 * v275];
    v239 = &v280[4 * v278];
    *(_DWORD *)v281 = v242.n128_u32[0];
    v273 = (unsigned __int32 *)(v281 + 4);
    while (v264 != v274)
    {
      v282 = *--v264;
      *((_DWORD *)v281 - 1) = v282;
      v281 -= 4;
    }
    *(_QWORD *)v12 = v281;
    *(_QWORD *)(v12 + 8) = v273;
    *(_QWORD *)(v12 + 16) = v239;
    if (v274)
    {
      operator delete(v274);
      v242.n128_u32[0] = a9.n128_u32[0];
      v239 = *v240;
    }
  }
  else
  {
    *v264 = v242.n128_u32[0];
    v273 = v264 + 1;
  }
  *(_QWORD *)(v12 + 8) = v273;
  if (v273 >= (unsigned __int32 *)v239)
  {
    v284 = *(unsigned __int32 **)v12;
    v285 = ((uint64_t)v273 - *(_QWORD *)v12) >> 2;
    v286 = v285 + 1;
    if ((unint64_t)(v285 + 1) >> 62)
      goto LABEL_2264;
    v287 = v239 - (char *)v284;
    if (v287 >> 1 > v286)
      v286 = v287 >> 1;
    if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFFCLL)
      v288 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v288 = v286;
    if (v288)
    {
      v289 = (char *)sub_1DCAE4D04(v12 + 16, v288);
      v284 = *(unsigned __int32 **)v12;
      v273 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v289 = 0;
    }
    v290 = &v289[4 * v285];
    v239 = &v289[4 * v288];
    *(_DWORD *)v290 = v1360.n128_u32[1];
    v283 = (unsigned __int32 *)(v290 + 4);
    while (v273 != v284)
    {
      v291 = *--v273;
      *((_DWORD *)v290 - 1) = v291;
      v290 -= 4;
    }
    *(_QWORD *)v12 = v290;
    *(_QWORD *)(v12 + 8) = v283;
    *(_QWORD *)(v12 + 16) = v239;
    if (v284)
    {
      operator delete(v284);
      v239 = *v240;
    }
    v242.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    *v273 = v1360.n128_u32[1];
    v283 = v273 + 1;
  }
  *(_QWORD *)(v12 + 8) = v283;
  if (v283 >= (unsigned __int32 *)v239)
  {
    v293 = *(unsigned __int32 **)v12;
    v294 = ((uint64_t)v283 - *(_QWORD *)v12) >> 2;
    v295 = v294 + 1;
    if ((unint64_t)(v294 + 1) >> 62)
      goto LABEL_2264;
    v296 = v239 - (char *)v293;
    if (v296 >> 1 > v295)
      v295 = v296 >> 1;
    if ((unint64_t)v296 >= 0x7FFFFFFFFFFFFFFCLL)
      v297 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v297 = v295;
    if (v297)
    {
      v298 = (char *)sub_1DCAE4D04(v12 + 16, v297);
      v293 = *(unsigned __int32 **)v12;
      v283 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v298 = 0;
    }
    v299 = (unsigned __int32 *)&v298[4 * v294];
    v239 = &v298[4 * v297];
    *v299 = v263;
    v292 = v299 + 1;
    while (v283 != v293)
    {
      v300 = *--v283;
      *--v299 = v300;
    }
    *(_QWORD *)v12 = v299;
    *(_QWORD *)(v12 + 8) = v292;
    *(_QWORD *)(v12 + 16) = v239;
    if (v293)
    {
      operator delete(v293);
      v239 = *v240;
    }
    v242.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    *v283 = v263;
    v292 = v283 + 1;
  }
  *(_QWORD *)(v12 + 8) = v292;
  if (v292 >= (unsigned __int32 *)v239)
  {
    v302 = *(unsigned __int32 **)v12;
    v303 = ((uint64_t)v292 - *(_QWORD *)v12) >> 2;
    v304 = v303 + 1;
    if ((unint64_t)(v303 + 1) >> 62)
      goto LABEL_2264;
    v305 = v239 - (char *)v302;
    if (v305 >> 1 > v304)
      v304 = v305 >> 1;
    if ((unint64_t)v305 >= 0x7FFFFFFFFFFFFFFCLL)
      v306 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v306 = v304;
    if (v306)
    {
      v307 = (char *)sub_1DCAE4D04(v12 + 16, v306);
      v242.n128_u32[0] = a9.n128_u32[0];
      v308 = v307;
      v302 = *(unsigned __int32 **)v12;
      v292 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v308 = 0;
    }
    v309 = &v308[4 * v303];
    v239 = &v308[4 * v306];
    *(_DWORD *)v309 = v242.n128_u32[0];
    v301 = (unsigned __int32 *)(v309 + 4);
    while (v292 != v302)
    {
      v310 = *--v292;
      *((_DWORD *)v309 - 1) = v310;
      v309 -= 4;
    }
    *(_QWORD *)v12 = v309;
    *(_QWORD *)(v12 + 8) = v301;
    *(_QWORD *)(v12 + 16) = v239;
    if (v302)
    {
      operator delete(v302);
      v242.n128_u32[0] = a9.n128_u32[0];
      v239 = *v240;
    }
  }
  else
  {
    *v292 = v242.n128_u32[0];
    v301 = v292 + 1;
  }
  *(_QWORD *)(v12 + 8) = v301;
  if (v301 >= (unsigned __int32 *)v239)
  {
    v312 = *(unsigned __int32 **)v12;
    v313 = ((uint64_t)v301 - *(_QWORD *)v12) >> 2;
    v314 = v313 + 1;
    if ((unint64_t)(v313 + 1) >> 62)
      goto LABEL_2264;
    v315 = v239 - (char *)v312;
    if (v315 >> 1 > v314)
      v314 = v315 >> 1;
    if ((unint64_t)v315 >= 0x7FFFFFFFFFFFFFFCLL)
      v316 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v316 = v314;
    if (v316)
    {
      v317 = (char *)sub_1DCAE4D04(v12 + 16, v316);
      v312 = *(unsigned __int32 **)v12;
      v301 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v317 = 0;
    }
    v318 = (unsigned __int32 *)&v317[4 * v313];
    v239 = &v317[4 * v316];
    *v318 = v253;
    v311 = v318 + 1;
    while (v301 != v312)
    {
      v319 = *--v301;
      *--v318 = v319;
    }
    *(_QWORD *)v12 = v318;
    *(_QWORD *)(v12 + 8) = v311;
    *(_QWORD *)(v12 + 16) = v239;
    if (v312)
    {
      operator delete(v312);
      v239 = *v240;
    }
    v242.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    *v301 = v253;
    v311 = v301 + 1;
  }
  *(_QWORD *)(v12 + 8) = v311;
  if (v311 >= (unsigned __int32 *)v239)
  {
    v321 = *(unsigned __int32 **)v12;
    v322 = ((uint64_t)v311 - *(_QWORD *)v12) >> 2;
    v323 = v322 + 1;
    if ((unint64_t)(v322 + 1) >> 62)
      goto LABEL_2264;
    v324 = v239 - (char *)v321;
    if (v324 >> 1 > v323)
      v323 = v324 >> 1;
    if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFFCLL)
      v325 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v325 = v323;
    if (v325)
    {
      v326 = (char *)sub_1DCAE4D04(v12 + 16, v325);
      v321 = *(unsigned __int32 **)v12;
      v311 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v326 = 0;
    }
    v327 = &v326[4 * v322];
    v239 = &v326[4 * v325];
    *(_DWORD *)v327 = v1360.n128_u32[2];
    v320 = (unsigned __int32 *)(v327 + 4);
    while (v311 != v321)
    {
      v328 = *--v311;
      *((_DWORD *)v327 - 1) = v328;
      v327 -= 4;
    }
    *(_QWORD *)v12 = v327;
    *(_QWORD *)(v12 + 8) = v320;
    *(_QWORD *)(v12 + 16) = v239;
    if (v321)
    {
      operator delete(v321);
      v239 = *v240;
    }
    v242.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    *v311 = v1360.n128_u32[2];
    v320 = v311 + 1;
  }
  *(_QWORD *)(v12 + 8) = v320;
  if (v320 >= (unsigned __int32 *)v239)
  {
    v330 = *(unsigned __int32 **)v12;
    v331 = ((uint64_t)v320 - *(_QWORD *)v12) >> 2;
    v332 = v331 + 1;
    if ((unint64_t)(v331 + 1) >> 62)
      goto LABEL_2264;
    v333 = v239 - (char *)v330;
    if (v333 >> 1 > v332)
      v332 = v333 >> 1;
    if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFFCLL)
      v334 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v334 = v332;
    if (v334)
    {
      v335 = (char *)sub_1DCAE4D04(v12 + 16, v334);
      v242.n128_u32[0] = a9.n128_u32[0];
      v336 = v335;
      v330 = *(unsigned __int32 **)v12;
      v320 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v336 = 0;
    }
    v337 = &v336[4 * v331];
    v239 = &v336[4 * v334];
    *(_DWORD *)v337 = v242.n128_u32[0];
    v329 = (unsigned __int32 *)(v337 + 4);
    while (v320 != v330)
    {
      v338 = *--v320;
      *((_DWORD *)v337 - 1) = v338;
      v337 -= 4;
    }
    *(_QWORD *)v12 = v337;
    *(_QWORD *)(v12 + 8) = v329;
    *(_QWORD *)(v12 + 16) = v239;
    if (v330)
    {
      operator delete(v330);
      v239 = *v240;
    }
  }
  else
  {
    *v320 = v242.n128_u32[0];
    v329 = v320 + 1;
  }
  *(_QWORD *)(v12 + 8) = v329;
  if (v329 >= (unsigned __int32 *)v239)
  {
    v340 = *(unsigned __int32 **)v12;
    v341 = ((uint64_t)v329 - *(_QWORD *)v12) >> 2;
    v342 = v341 + 1;
    if ((unint64_t)(v341 + 1) >> 62)
      goto LABEL_2264;
    v343 = v239 - (char *)v340;
    if (v343 >> 1 > v342)
      v342 = v343 >> 1;
    if ((unint64_t)v343 >= 0x7FFFFFFFFFFFFFFCLL)
      v344 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v344 = v342;
    if (v344)
    {
      v345 = (char *)sub_1DCAE4D04(v12 + 16, v344);
      v340 = *(unsigned __int32 **)v12;
      v329 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v345 = 0;
    }
    v346 = &v345[4 * v341];
    v239 = &v345[4 * v344];
    *(_DWORD *)v346 = v1360.n128_u32[1];
    v339 = (unsigned __int32 *)(v346 + 4);
    while (v329 != v340)
    {
      v347 = *--v329;
      *((_DWORD *)v346 - 1) = v347;
      v346 -= 4;
    }
    *(_QWORD *)v12 = v346;
    *(_QWORD *)(v12 + 8) = v339;
    *(_QWORD *)(v12 + 16) = v239;
    if (v340)
    {
      operator delete(v340);
      v239 = *v240;
    }
  }
  else
  {
    *v329 = v1360.n128_u32[1];
    v339 = v329 + 1;
  }
  *(_QWORD *)(v12 + 8) = v339;
  if (v339 >= (unsigned __int32 *)v239)
  {
    v349 = *(unsigned __int32 **)v12;
    v350 = ((uint64_t)v339 - *(_QWORD *)v12) >> 2;
    v351 = v350 + 1;
    if ((unint64_t)(v350 + 1) >> 62)
      goto LABEL_2264;
    v352 = v239 - (char *)v349;
    if (v352 >> 1 > v351)
      v351 = v352 >> 1;
    if ((unint64_t)v352 >= 0x7FFFFFFFFFFFFFFCLL)
      v353 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v353 = v351;
    if (v353)
    {
      v354 = (char *)sub_1DCAE4D04(v12 + 16, v353);
      v349 = *(unsigned __int32 **)v12;
      v339 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v354 = 0;
    }
    v355 = &v354[4 * v350];
    v356 = &v354[4 * v353];
    *(_DWORD *)v355 = v1360.n128_u32[2];
    v348 = v355 + 4;
    while (v339 != v349)
    {
      v357 = *--v339;
      *((_DWORD *)v355 - 1) = v357;
      v355 -= 4;
    }
    *(_QWORD *)v12 = v355;
    *(_QWORD *)(v12 + 8) = v348;
    *(_QWORD *)(v12 + 16) = v356;
    if (v349)
      operator delete(v349);
  }
  else
  {
    *v339 = v1360.n128_u32[2];
    v348 = v339 + 1;
  }
  a10 = v1360;
  *(_QWORD *)(v12 + 8) = v348;
  if (a8 && a1)
  {
    v358 = 0;
    v359 = (_QWORD *)(a8 + 16);
    v360 = *(_DWORD **)(a8 + 8);
    do
    {
      if ((unint64_t)v360 >= *v359)
      {
        v362 = *(_DWORD **)a8;
        v363 = ((uint64_t)v360 - *(_QWORD *)a8) >> 2;
        v364 = v363 + 1;
        if ((unint64_t)(v363 + 1) >> 62)
          goto LABEL_2263;
        v365 = *v359 - (_QWORD)v362;
        if (v365 >> 1 > v364)
          v364 = v365 >> 1;
        if ((unint64_t)v365 >= 0x7FFFFFFFFFFFFFFCLL)
          v366 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v366 = v364;
        if (v366)
        {
          v367 = (char *)sub_1DCAE4D04(a8 + 16, v366);
          v362 = *(_DWORD **)a8;
          v360 = *(_DWORD **)(a8 + 8);
        }
        else
        {
          v367 = 0;
        }
        v368 = &v367[4 * v363];
        *(_DWORD *)v368 = v15;
        v361 = v368 + 4;
        while (v360 != v362)
        {
          v369 = *--v360;
          *((_DWORD *)v368 - 1) = v369;
          v368 -= 4;
        }
        *(_QWORD *)a8 = v368;
        *(_QWORD *)(a8 + 8) = v361;
        *(_QWORD *)(a8 + 16) = &v367[4 * v366];
        if (v362)
          operator delete(v362);
        a10 = v1360;
      }
      else
      {
        *v360 = v15;
        v361 = v360 + 1;
      }
      *(_QWORD *)(a8 + 8) = v361;
      ++v358;
      v360 = v361;
    }
    while (v358 != 4);
  }
  if (a7)
  {
    v370 = 0;
    v371 = a7 + 2;
    v372 = a7[1];
    do
    {
      v373 = *v371;
      if (v372 >= *v371)
      {
        v375 = *a7;
        v376 = (v372 - *a7) >> 2;
        v377 = v376 + 1;
        if ((unint64_t)(v376 + 1) >> 62)
          goto LABEL_2262;
        v378 = v373 - v375;
        if (v378 >> 1 > v377)
          v377 = v378 >> 1;
        if ((unint64_t)v378 >= 0x7FFFFFFFFFFFFFFCLL)
          v379 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v379 = v377;
        if (v379)
        {
          v380 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v379);
          v375 = *a7;
          v372 = a7[1];
        }
        else
        {
          v380 = 0;
        }
        v381 = &v380[4 * v376];
        *(_DWORD *)v381 = 0;
        v374 = v381 + 4;
        while (v372 != v375)
        {
          v382 = *((_DWORD *)v372 - 1);
          v372 -= 4;
          *((_DWORD *)v381 - 1) = v382;
          v381 -= 4;
        }
        v373 = &v380[4 * v379];
        *a7 = v381;
        a7[1] = v374;
        a7[2] = v373;
        if (v375)
        {
          operator delete(v375);
          v373 = *v371;
        }
        a10 = v1360;
      }
      else
      {
        *(_DWORD *)v372 = 0;
        v374 = v372 + 4;
      }
      a7[1] = v374;
      if (v374 >= v373)
      {
        v384 = *a7;
        v385 = (v374 - *a7) >> 2;
        v386 = v385 + 1;
        if ((unint64_t)(v385 + 1) >> 62)
          goto LABEL_2262;
        v387 = v373 - v384;
        if (v387 >> 1 > v386)
          v386 = v387 >> 1;
        if ((unint64_t)v387 >= 0x7FFFFFFFFFFFFFFCLL)
          v388 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v388 = v386;
        if (v388)
        {
          v389 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v388);
          v384 = *a7;
          v374 = a7[1];
        }
        else
        {
          v389 = 0;
        }
        v390 = &v389[4 * v385];
        *(_DWORD *)v390 = 0;
        v383 = v390 + 4;
        while (v374 != v384)
        {
          v391 = *((_DWORD *)v374 - 1);
          v374 -= 4;
          *((_DWORD *)v390 - 1) = v391;
          v390 -= 4;
        }
        v373 = &v389[4 * v388];
        *a7 = v390;
        a7[1] = v383;
        a7[2] = v373;
        if (v384)
        {
          operator delete(v384);
          v373 = *v371;
        }
        a10 = v1360;
      }
      else
      {
        *(_DWORD *)v374 = 0;
        v383 = v374 + 4;
      }
      a7[1] = v383;
      if (v383 >= v373)
      {
        v392 = *a7;
        v393 = (v383 - *a7) >> 2;
        v394 = v393 + 1;
        if ((unint64_t)(v393 + 1) >> 62)
          goto LABEL_2262;
        v395 = v373 - v392;
        if (v395 >> 1 > v394)
          v394 = v395 >> 1;
        if ((unint64_t)v395 >= 0x7FFFFFFFFFFFFFFCLL)
          v396 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v396 = v394;
        if (v396)
        {
          v397 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v396);
          v392 = *a7;
          v383 = a7[1];
        }
        else
        {
          v397 = 0;
        }
        v398 = &v397[4 * v393];
        *(_DWORD *)v398 = -1082130432;
        v372 = v398 + 4;
        while (v383 != v392)
        {
          v399 = *((_DWORD *)v383 - 1);
          v383 -= 4;
          *((_DWORD *)v398 - 1) = v399;
          v398 -= 4;
        }
        *a7 = v398;
        a7[1] = v372;
        a7[2] = &v397[4 * v396];
        if (v392)
          operator delete(v392);
        a10 = v1360;
      }
      else
      {
        *(_DWORD *)v383 = -1082130432;
        v372 = v383 + 4;
      }
      a7[1] = v372;
      ++v370;
    }
    while (v370 != 4);
  }
  v400 = v1353 + a4;
  v402 = a5 + 2;
  v401 = a5[2];
  v403 = a5[1];
  if (v403 >= v401)
  {
    v405 = *a5;
    v406 = (v403 - *a5) >> 2;
    v407 = v406 + 1;
    if ((unint64_t)(v406 + 1) >> 62)
      goto LABEL_2266;
    v408 = v401 - v405;
    if (v408 >> 1 > v407)
      v407 = v408 >> 1;
    if ((unint64_t)v408 >= 0x7FFFFFFFFFFFFFFCLL)
      v409 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v409 = v407;
    if (v409)
    {
      v410 = (char *)sub_1DCAE4D04((uint64_t)(a5 + 2), v409);
      v405 = *a5;
      v403 = a5[1];
    }
    else
    {
      v410 = 0;
    }
    v411 = &v410[4 * v406];
    v401 = &v410[4 * v409];
    *(_DWORD *)v411 = v400;
    v404 = v411 + 4;
    while (v403 != v405)
    {
      v412 = *((_DWORD *)v403 - 1);
      v403 -= 4;
      *((_DWORD *)v411 - 1) = v412;
      v411 -= 4;
    }
    *a5 = v411;
    a5[1] = v404;
    a5[2] = v401;
    if (v405)
    {
      operator delete(v405);
      v401 = *v402;
    }
    a10 = v1360;
  }
  else
  {
    *(_DWORD *)v403 = v400;
    v404 = v403 + 4;
  }
  a5[1] = v404;
  v413 = v400 + 2;
  if (v404 >= v401)
  {
    v415 = *a5;
    v416 = (v404 - *a5) >> 2;
    v417 = v416 + 1;
    if ((unint64_t)(v416 + 1) >> 62)
      goto LABEL_2266;
    v418 = v401 - v415;
    if (v418 >> 1 > v417)
      v417 = v418 >> 1;
    if ((unint64_t)v418 >= 0x7FFFFFFFFFFFFFFCLL)
      v419 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v419 = v417;
    if (v419)
    {
      v420 = (char *)sub_1DCAE4D04((uint64_t)v402, v419);
      v415 = *a5;
      v404 = a5[1];
    }
    else
    {
      v420 = 0;
    }
    v421 = &v420[4 * v416];
    v401 = &v420[4 * v419];
    *(_DWORD *)v421 = v413;
    v414 = v421 + 4;
    while (v404 != v415)
    {
      v422 = *((_DWORD *)v404 - 1);
      v404 -= 4;
      *((_DWORD *)v421 - 1) = v422;
      v421 -= 4;
    }
    *a5 = v421;
    a5[1] = v414;
    a5[2] = v401;
    if (v415)
    {
      operator delete(v415);
      v401 = *v402;
    }
    a10 = v1360;
  }
  else
  {
    *(_DWORD *)v404 = v413;
    v414 = v404 + 4;
  }
  v423 = a5;
  a5[1] = v414;
  v424 = v400 + 1;
  if (v414 >= v401)
  {
    v426 = *a5;
    v427 = (v414 - *a5) >> 2;
    v428 = v427 + 1;
    if ((unint64_t)(v427 + 1) >> 62)
      goto LABEL_2267;
    v429 = v401 - v426;
    if (v429 >> 1 > v428)
      v428 = v429 >> 1;
    if ((unint64_t)v429 >= 0x7FFFFFFFFFFFFFFCLL)
      v430 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v430 = v428;
    if (v430)
    {
      v431 = (char *)sub_1DCAE4D04((uint64_t)v402, v430);
      v426 = *a5;
      v414 = a5[1];
    }
    else
    {
      v431 = 0;
    }
    v432 = &v431[4 * v427];
    v401 = &v431[4 * v430];
    *(_DWORD *)v432 = v424;
    v425 = v432 + 4;
    while (v414 != v426)
    {
      v433 = *((_DWORD *)v414 - 1);
      v414 -= 4;
      *((_DWORD *)v432 - 1) = v433;
      v432 -= 4;
    }
    v423 = a5;
    *a5 = v432;
    a5[1] = v425;
    a5[2] = v401;
    if (v426)
    {
      operator delete(v426);
      v401 = *v402;
    }
    a10 = v1360;
  }
  else
  {
    *(_DWORD *)v414 = v424;
    v425 = v414 + 4;
  }
  v423[1] = v425;
  if (v425 >= v401)
  {
    v435 = *v423;
    v436 = (v425 - *v423) >> 2;
    v437 = v436 + 1;
    if ((unint64_t)(v436 + 1) >> 62)
      goto LABEL_2266;
    v438 = v401 - v435;
    if (v438 >> 1 > v437)
      v437 = v438 >> 1;
    if ((unint64_t)v438 >= 0x7FFFFFFFFFFFFFFCLL)
      v439 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v439 = v437;
    if (v439)
    {
      v440 = (char *)sub_1DCAE4D04((uint64_t)v402, v439);
      v435 = *v423;
      v425 = v423[1];
    }
    else
    {
      v440 = 0;
    }
    v12 = a6;
    v441 = &v440[4 * v436];
    v401 = &v440[4 * v439];
    *(_DWORD *)v441 = v424;
    v434 = v441 + 4;
    if (v425 == v435)
    {
      v15 = a2;
    }
    else
    {
      v15 = a2;
      do
      {
        v442 = *((_DWORD *)v425 - 1);
        v425 -= 4;
        *((_DWORD *)v441 - 1) = v442;
        v441 -= 4;
      }
      while (v425 != v435);
    }
    *a5 = v441;
    a5[1] = v434;
    a5[2] = v401;
    if (v435)
    {
      operator delete(v435);
      v401 = *v402;
    }
    a10 = v1360;
  }
  else
  {
    *(_DWORD *)v425 = v424;
    v434 = v425 + 4;
    v12 = a6;
    v15 = a2;
  }
  a5[1] = v434;
  if (v434 >= v401)
  {
    v444 = *a5;
    v445 = (v434 - *a5) >> 2;
    v446 = v445 + 1;
    if ((unint64_t)(v445 + 1) >> 62)
      goto LABEL_2267;
    v447 = v401 - v444;
    if (v447 >> 1 > v446)
      v446 = v447 >> 1;
    if ((unint64_t)v447 >= 0x7FFFFFFFFFFFFFFCLL)
      v448 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v448 = v446;
    if (v448)
    {
      v449 = (char *)sub_1DCAE4D04((uint64_t)v402, v448);
      v444 = *a5;
      v434 = a5[1];
    }
    else
    {
      v449 = 0;
    }
    v450 = &v449[4 * v445];
    v401 = &v449[4 * v448];
    *(_DWORD *)v450 = v413;
    v443 = v450 + 4;
    while (v434 != v444)
    {
      v451 = *((_DWORD *)v434 - 1);
      v434 -= 4;
      *((_DWORD *)v450 - 1) = v451;
      v450 -= 4;
    }
    v13 = a5;
    *a5 = v450;
    a5[1] = v443;
    a5[2] = v401;
    if (v444)
    {
      operator delete(v444);
      v401 = *v402;
    }
    a10 = v1360;
  }
  else
  {
    *(_DWORD *)v434 = v413;
    v443 = v434 + 4;
    v13 = a5;
  }
  v13[1] = v443;
  v452 = v400 + 3;
  if (v443 >= v401)
  {
    v454 = *v13;
    v455 = (v443 - *v13) >> 2;
    v456 = v455 + 1;
    v14 = a3;
    if ((unint64_t)(v455 + 1) >> 62)
      goto LABEL_2265;
    v457 = v401 - v454;
    if (v457 >> 1 > v456)
      v456 = v457 >> 1;
    if ((unint64_t)v457 >= 0x7FFFFFFFFFFFFFFCLL)
      v458 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v458 = v456;
    if (v458)
    {
      v459 = (char *)sub_1DCAE4D04((uint64_t)v402, v458);
      v454 = *v13;
      v443 = v13[1];
    }
    else
    {
      v459 = 0;
    }
    v460 = &v459[4 * v455];
    v461 = &v459[4 * v458];
    *(_DWORD *)v460 = v452;
    v453 = v460 + 4;
    while (v443 != v454)
    {
      v462 = *((_DWORD *)v443 - 1);
      v443 -= 4;
      *((_DWORD *)v460 - 1) = v462;
      v460 -= 4;
    }
    *v13 = v460;
    v13[1] = v453;
    v13[2] = v461;
    if (v454)
      operator delete(v454);
    a10 = v1360;
  }
  else
  {
    *(_DWORD *)v443 = v452;
    v453 = v443 + 4;
    v14 = a3;
  }
  v13[1] = v453;
  v16 = v1353 + 4;
  if ((v14 & 0x10) != 0)
  {
LABEL_765:
    v464 = (char **)(v12 + 16);
    v463 = *(char **)(v12 + 16);
    v465 = *(unsigned __int32 **)(v12 + 8);
    if (v465 >= (unsigned __int32 *)v463)
    {
      v468 = *(unsigned __int32 **)v12;
      v469 = ((uint64_t)v465 - *(_QWORD *)v12) >> 2;
      v470 = v469 + 1;
      if ((unint64_t)(v469 + 1) >> 62)
        goto LABEL_2264;
      v471 = v463 - (char *)v468;
      if (v471 >> 1 > v470)
        v470 = v471 >> 1;
      if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFFCLL)
        v472 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v472 = v470;
      if (v472)
      {
        v473 = (char *)sub_1DCAE4D04(v12 + 16, v472);
        v468 = *(unsigned __int32 **)v12;
        v465 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v473 = 0;
      }
      v474 = &v473[4 * v469];
      v463 = &v473[4 * v472];
      *(_DWORD *)v474 = a9.n128_u32[0];
      v467 = (unsigned __int32 *)(v474 + 4);
      while (v465 != v468)
      {
        v475 = *--v465;
        *((_DWORD *)v474 - 1) = v475;
        v474 -= 4;
      }
      *(_QWORD *)v12 = v474;
      *(_QWORD *)(v12 + 8) = v467;
      *(_QWORD *)(v12 + 16) = v463;
      if (v468)
      {
        operator delete(v468);
        v463 = *v464;
      }
      v466 = a9.n128_u32[1];
      a10.n128_u32[2] = v1360.n128_u32[2];
    }
    else
    {
      v466 = a9.n128_u32[1];
      *v465 = a9.n128_u32[0];
      v467 = v465 + 1;
    }
    *(_QWORD *)(v12 + 8) = v467;
    v476 = v466;
    v1354 = v16;
    if (v467 >= (unsigned __int32 *)v463)
    {
      v478 = *(unsigned __int32 **)v12;
      v479 = ((uint64_t)v467 - *(_QWORD *)v12) >> 2;
      v480 = v479 + 1;
      if ((unint64_t)(v479 + 1) >> 62)
        goto LABEL_2264;
      v481 = v463 - (char *)v478;
      if (v481 >> 1 > v480)
        v480 = v481 >> 1;
      if ((unint64_t)v481 >= 0x7FFFFFFFFFFFFFFCLL)
        v482 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v482 = v480;
      if (v482)
      {
        v483 = (char *)sub_1DCAE4D04(v12 + 16, v482);
        v478 = *(unsigned __int32 **)v12;
        v467 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v483 = 0;
      }
      v484 = (unsigned __int32 *)&v483[4 * v479];
      v463 = &v483[4 * v482];
      *v484 = v476;
      v477 = v484 + 1;
      while (v467 != v478)
      {
        v485 = *--v467;
        *--v484 = v485;
      }
      *(_QWORD *)v12 = v484;
      *(_QWORD *)(v12 + 8) = v477;
      *(_QWORD *)(v12 + 16) = v463;
      if (v478)
      {
        operator delete(v478);
        v463 = *v464;
      }
      a10.n128_u32[2] = v1360.n128_u32[2];
    }
    else
    {
      *v467 = v466;
      v477 = v467 + 1;
    }
    *(_QWORD *)(v12 + 8) = v477;
    v486 = a10.n128_u32[2];
    if (v477 >= (unsigned __int32 *)v463)
    {
      v488 = *(unsigned __int32 **)v12;
      v489 = ((uint64_t)v477 - *(_QWORD *)v12) >> 2;
      v490 = v489 + 1;
      if ((unint64_t)(v489 + 1) >> 62)
        goto LABEL_2264;
      v491 = v463 - (char *)v488;
      if (v491 >> 1 > v490)
        v490 = v491 >> 1;
      if ((unint64_t)v491 >= 0x7FFFFFFFFFFFFFFCLL)
        v492 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v492 = v490;
      if (v492)
      {
        v493 = (char *)sub_1DCAE4D04(v12 + 16, v492);
        v488 = *(unsigned __int32 **)v12;
        v477 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v493 = 0;
      }
      v494 = (unsigned __int32 *)&v493[4 * v489];
      v463 = &v493[4 * v492];
      *v494 = v486;
      v487 = v494 + 1;
      while (v477 != v488)
      {
        v495 = *--v477;
        *--v494 = v495;
      }
      *(_QWORD *)v12 = v494;
      *(_QWORD *)(v12 + 8) = v487;
      *(_QWORD *)(v12 + 16) = v463;
      if (v488)
      {
        operator delete(v488);
        v463 = *v464;
      }
    }
    else
    {
      *v477 = a10.n128_u32[2];
      v487 = v477 + 1;
    }
    v496 = a9.n128_u32[0];
    *(_QWORD *)(v12 + 8) = v487;
    if (v487 >= (unsigned __int32 *)v463)
    {
      v498 = *(unsigned __int32 **)v12;
      v499 = ((uint64_t)v487 - *(_QWORD *)v12) >> 2;
      v500 = v499 + 1;
      if ((unint64_t)(v499 + 1) >> 62)
        goto LABEL_2264;
      v501 = v463 - (char *)v498;
      if (v501 >> 1 > v500)
        v500 = v501 >> 1;
      if ((unint64_t)v501 >= 0x7FFFFFFFFFFFFFFCLL)
        v502 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v502 = v500;
      if (v502)
      {
        v503 = (char *)sub_1DCAE4D04(v12 + 16, v502);
        v498 = *(unsigned __int32 **)v12;
        v487 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v503 = 0;
      }
      v504 = &v503[4 * v499];
      v463 = &v503[4 * v502];
      *(_DWORD *)v504 = v1360.n128_u32[0];
      v497 = (unsigned __int32 *)(v504 + 4);
      while (v487 != v498)
      {
        v505 = *--v487;
        *((_DWORD *)v504 - 1) = v505;
        v504 -= 4;
      }
      *(_QWORD *)v12 = v504;
      *(_QWORD *)(v12 + 8) = v497;
      *(_QWORD *)(v12 + 16) = v463;
      if (v498)
      {
        operator delete(v498);
        v463 = *v464;
      }
      v496 = a9.n128_u32[0];
    }
    else
    {
      *v487 = v1360.n128_u32[0];
      v497 = v487 + 1;
    }
    *(_QWORD *)(v12 + 8) = v497;
    if (v497 >= (unsigned __int32 *)v463)
    {
      v507 = *(unsigned __int32 **)v12;
      v508 = ((uint64_t)v497 - *(_QWORD *)v12) >> 2;
      v509 = v508 + 1;
      if ((unint64_t)(v508 + 1) >> 62)
        goto LABEL_2264;
      v510 = v463 - (char *)v507;
      if (v510 >> 1 > v509)
        v509 = v510 >> 1;
      if ((unint64_t)v510 >= 0x7FFFFFFFFFFFFFFCLL)
        v511 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v511 = v509;
      if (v511)
      {
        v512 = (char *)sub_1DCAE4D04(v12 + 16, v511);
        v507 = *(unsigned __int32 **)v12;
        v497 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v512 = 0;
      }
      v513 = (unsigned __int32 *)&v512[4 * v508];
      v463 = &v512[4 * v511];
      *v513 = v476;
      v506 = v513 + 1;
      while (v497 != v507)
      {
        v514 = *--v497;
        *--v513 = v514;
      }
      *(_QWORD *)v12 = v513;
      *(_QWORD *)(v12 + 8) = v506;
      *(_QWORD *)(v12 + 16) = v463;
      if (v507)
      {
        operator delete(v507);
        v463 = *v464;
      }
      v496 = a9.n128_u32[0];
    }
    else
    {
      *v497 = v476;
      v506 = v497 + 1;
    }
    *(_QWORD *)(v12 + 8) = v506;
    if (v506 >= (unsigned __int32 *)v463)
    {
      v516 = *(unsigned __int32 **)v12;
      v517 = ((uint64_t)v506 - *(_QWORD *)v12) >> 2;
      v518 = v517 + 1;
      if ((unint64_t)(v517 + 1) >> 62)
        goto LABEL_2264;
      v519 = v463 - (char *)v516;
      if (v519 >> 1 > v518)
        v518 = v519 >> 1;
      if ((unint64_t)v519 >= 0x7FFFFFFFFFFFFFFCLL)
        v520 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v520 = v518;
      if (v520)
      {
        v521 = (char *)sub_1DCAE4D04(v12 + 16, v520);
        v516 = *(unsigned __int32 **)v12;
        v506 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v521 = 0;
      }
      v522 = (unsigned __int32 *)&v521[4 * v517];
      v463 = &v521[4 * v520];
      *v522 = v486;
      v515 = v522 + 1;
      while (v506 != v516)
      {
        v523 = *--v506;
        *--v522 = v523;
      }
      *(_QWORD *)v12 = v522;
      *(_QWORD *)(v12 + 8) = v515;
      *(_QWORD *)(v12 + 16) = v463;
      if (v516)
      {
        operator delete(v516);
        v463 = *v464;
      }
      v496 = a9.n128_u32[0];
    }
    else
    {
      *v506 = v486;
      v515 = v506 + 1;
    }
    *(_QWORD *)(v12 + 8) = v515;
    if (v515 >= (unsigned __int32 *)v463)
    {
      v525 = *(unsigned __int32 **)v12;
      v526 = ((uint64_t)v515 - *(_QWORD *)v12) >> 2;
      v527 = v526 + 1;
      if ((unint64_t)(v526 + 1) >> 62)
        goto LABEL_2264;
      v528 = v463 - (char *)v525;
      if (v528 >> 1 > v527)
        v527 = v528 >> 1;
      if ((unint64_t)v528 >= 0x7FFFFFFFFFFFFFFCLL)
        v529 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v529 = v527;
      if (v529)
      {
        v530 = (char *)sub_1DCAE4D04(v12 + 16, v529);
        v496 = a9.n128_u32[0];
        v531 = v530;
        v525 = *(unsigned __int32 **)v12;
        v515 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v531 = 0;
      }
      v532 = (unsigned __int32 *)&v531[4 * v526];
      v463 = &v531[4 * v529];
      *v532 = v496;
      v524 = v532 + 1;
      while (v515 != v525)
      {
        v533 = *--v515;
        *--v532 = v533;
      }
      *(_QWORD *)v12 = v532;
      *(_QWORD *)(v12 + 8) = v524;
      *(_QWORD *)(v12 + 16) = v463;
      if (v525)
      {
        operator delete(v525);
        v463 = *v464;
      }
    }
    else
    {
      *v515 = v496;
      v524 = v515 + 1;
    }
    *(_QWORD *)(v12 + 8) = v524;
    if (v524 >= (unsigned __int32 *)v463)
    {
      v535 = *(unsigned __int32 **)v12;
      v536 = ((uint64_t)v524 - *(_QWORD *)v12) >> 2;
      v537 = v536 + 1;
      if ((unint64_t)(v536 + 1) >> 62)
        goto LABEL_2264;
      v538 = v463 - (char *)v535;
      if (v538 >> 1 > v537)
        v537 = v538 >> 1;
      if ((unint64_t)v538 >= 0x7FFFFFFFFFFFFFFCLL)
        v539 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v539 = v537;
      if (v539)
      {
        v540 = (char *)sub_1DCAE4D04(v12 + 16, v539);
        v535 = *(unsigned __int32 **)v12;
        v524 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v540 = 0;
      }
      v541 = &v540[4 * v536];
      v463 = &v540[4 * v539];
      *(_DWORD *)v541 = v1360.n128_u32[1];
      v534 = (unsigned __int32 *)(v541 + 4);
      while (v524 != v535)
      {
        v542 = *--v524;
        *((_DWORD *)v541 - 1) = v542;
        v541 -= 4;
      }
      *(_QWORD *)v12 = v541;
      *(_QWORD *)(v12 + 8) = v534;
      *(_QWORD *)(v12 + 16) = v463;
      if (v535)
      {
        operator delete(v535);
        v463 = *v464;
      }
    }
    else
    {
      *v524 = v1360.n128_u32[1];
      v534 = v524 + 1;
    }
    *(_QWORD *)(v12 + 8) = v534;
    if (v534 >= (unsigned __int32 *)v463)
    {
      v544 = *(unsigned __int32 **)v12;
      v545 = ((uint64_t)v534 - *(_QWORD *)v12) >> 2;
      v546 = v545 + 1;
      if ((unint64_t)(v545 + 1) >> 62)
        goto LABEL_2264;
      v547 = v463 - (char *)v544;
      if (v547 >> 1 > v546)
        v546 = v547 >> 1;
      if ((unint64_t)v547 >= 0x7FFFFFFFFFFFFFFCLL)
        v548 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v548 = v546;
      if (v548)
      {
        v549 = (char *)sub_1DCAE4D04(v12 + 16, v548);
        v544 = *(unsigned __int32 **)v12;
        v534 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v549 = 0;
      }
      v550 = (unsigned __int32 *)&v549[4 * v545];
      v463 = &v549[4 * v548];
      *v550 = v486;
      v543 = v550 + 1;
      while (v534 != v544)
      {
        v551 = *--v534;
        *--v550 = v551;
      }
      *(_QWORD *)v12 = v550;
      *(_QWORD *)(v12 + 8) = v543;
      *(_QWORD *)(v12 + 16) = v463;
      if (v544)
      {
        operator delete(v544);
        v463 = *v464;
      }
    }
    else
    {
      *v534 = v486;
      v543 = v534 + 1;
    }
    *(_QWORD *)(v12 + 8) = v543;
    if (v543 >= (unsigned __int32 *)v463)
    {
      v553 = *(unsigned __int32 **)v12;
      v554 = ((uint64_t)v543 - *(_QWORD *)v12) >> 2;
      v555 = v554 + 1;
      if ((unint64_t)(v554 + 1) >> 62)
        goto LABEL_2264;
      v556 = v463 - (char *)v553;
      if (v556 >> 1 > v555)
        v555 = v556 >> 1;
      if ((unint64_t)v556 >= 0x7FFFFFFFFFFFFFFCLL)
        v557 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v557 = v555;
      if (v557)
      {
        v558 = (char *)sub_1DCAE4D04(v12 + 16, v557);
        v553 = *(unsigned __int32 **)v12;
        v543 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v558 = 0;
      }
      v559 = &v558[4 * v554];
      v463 = &v558[4 * v557];
      *(_DWORD *)v559 = v1360.n128_u32[0];
      v552 = (unsigned __int32 *)(v559 + 4);
      while (v543 != v553)
      {
        v560 = *--v543;
        *((_DWORD *)v559 - 1) = v560;
        v559 -= 4;
      }
      *(_QWORD *)v12 = v559;
      *(_QWORD *)(v12 + 8) = v552;
      *(_QWORD *)(v12 + 16) = v463;
      if (v553)
      {
        operator delete(v553);
        v463 = *v464;
      }
    }
    else
    {
      *v543 = v1360.n128_u32[0];
      v552 = v543 + 1;
    }
    *(_QWORD *)(v12 + 8) = v552;
    if (v552 >= (unsigned __int32 *)v463)
    {
      v562 = *(unsigned __int32 **)v12;
      v563 = ((uint64_t)v552 - *(_QWORD *)v12) >> 2;
      v564 = v563 + 1;
      if ((unint64_t)(v563 + 1) >> 62)
        goto LABEL_2264;
      v565 = v463 - (char *)v562;
      if (v565 >> 1 > v564)
        v564 = v565 >> 1;
      if ((unint64_t)v565 >= 0x7FFFFFFFFFFFFFFCLL)
        v566 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v566 = v564;
      if (v566)
      {
        v567 = (char *)sub_1DCAE4D04(v12 + 16, v566);
        v562 = *(unsigned __int32 **)v12;
        v552 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v567 = 0;
      }
      v568 = &v567[4 * v563];
      v463 = &v567[4 * v566];
      *(_DWORD *)v568 = v1360.n128_u32[1];
      v561 = (unsigned __int32 *)(v568 + 4);
      while (v552 != v562)
      {
        v569 = *--v552;
        *((_DWORD *)v568 - 1) = v569;
        v568 -= 4;
      }
      *(_QWORD *)v12 = v568;
      *(_QWORD *)(v12 + 8) = v561;
      *(_QWORD *)(v12 + 16) = v463;
      if (v562)
      {
        operator delete(v562);
        v463 = *v464;
      }
    }
    else
    {
      *v552 = v1360.n128_u32[1];
      v561 = v552 + 1;
    }
    *(_QWORD *)(v12 + 8) = v561;
    if (v561 >= (unsigned __int32 *)v463)
    {
      v571 = *(unsigned __int32 **)v12;
      v572 = ((uint64_t)v561 - *(_QWORD *)v12) >> 2;
      v573 = v572 + 1;
      if ((unint64_t)(v572 + 1) >> 62)
        goto LABEL_2264;
      v574 = v463 - (char *)v571;
      if (v574 >> 1 > v573)
        v573 = v574 >> 1;
      if ((unint64_t)v574 >= 0x7FFFFFFFFFFFFFFCLL)
        v575 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v575 = v573;
      if (v575)
      {
        v576 = (char *)sub_1DCAE4D04(v12 + 16, v575);
        v571 = *(unsigned __int32 **)v12;
        v561 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v576 = 0;
      }
      v577 = (unsigned __int32 *)&v576[4 * v572];
      v578 = &v576[4 * v575];
      *v577 = v486;
      v570 = v577 + 1;
      while (v561 != v571)
      {
        v579 = *--v561;
        *--v577 = v579;
      }
      *(_QWORD *)v12 = v577;
      *(_QWORD *)(v12 + 8) = v570;
      *(_QWORD *)(v12 + 16) = v578;
      if (v571)
        operator delete(v571);
    }
    else
    {
      *v561 = v486;
      v570 = v561 + 1;
    }
    a10.n128_u64[0] = v1360.n128_u64[0];
    *(_QWORD *)(v12 + 8) = v570;
    if (a8 && a1)
    {
      v580 = 0;
      v581 = (_QWORD *)(a8 + 16);
      v582 = *(_DWORD **)(a8 + 8);
      do
      {
        if ((unint64_t)v582 >= *v581)
        {
          v584 = *(_DWORD **)a8;
          v585 = ((uint64_t)v582 - *(_QWORD *)a8) >> 2;
          v586 = v585 + 1;
          if ((unint64_t)(v585 + 1) >> 62)
            goto LABEL_2263;
          v587 = *v581 - (_QWORD)v584;
          if (v587 >> 1 > v586)
            v586 = v587 >> 1;
          if ((unint64_t)v587 >= 0x7FFFFFFFFFFFFFFCLL)
            v588 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v588 = v586;
          if (v588)
          {
            v589 = (char *)sub_1DCAE4D04(a8 + 16, v588);
            v584 = *(_DWORD **)a8;
            v582 = *(_DWORD **)(a8 + 8);
          }
          else
          {
            v589 = 0;
          }
          v590 = &v589[4 * v585];
          *(_DWORD *)v590 = v15;
          v583 = v590 + 4;
          while (v582 != v584)
          {
            v591 = *--v582;
            *((_DWORD *)v590 - 1) = v591;
            v590 -= 4;
          }
          *(_QWORD *)a8 = v590;
          *(_QWORD *)(a8 + 8) = v583;
          *(_QWORD *)(a8 + 16) = &v589[4 * v588];
          if (v584)
            operator delete(v584);
          a10.n128_u64[0] = v1360.n128_u64[0];
        }
        else
        {
          *v582 = v15;
          v583 = v582 + 1;
        }
        *(_QWORD *)(a8 + 8) = v583;
        ++v580;
        v582 = v583;
      }
      while (v580 != 4);
    }
    if (a7)
    {
      v592 = 0;
      v593 = a7 + 2;
      v594 = a7[1];
      do
      {
        v595 = *v593;
        if (v594 >= *v593)
        {
          v597 = *a7;
          v598 = (v594 - *a7) >> 2;
          v599 = v598 + 1;
          if ((unint64_t)(v598 + 1) >> 62)
            goto LABEL_2262;
          v600 = v595 - v597;
          if (v600 >> 1 > v599)
            v599 = v600 >> 1;
          if ((unint64_t)v600 >= 0x7FFFFFFFFFFFFFFCLL)
            v601 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v601 = v599;
          if (v601)
          {
            v602 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v601);
            v597 = *a7;
            v594 = a7[1];
          }
          else
          {
            v602 = 0;
          }
          v603 = &v602[4 * v598];
          *(_DWORD *)v603 = 1065353216;
          v596 = v603 + 4;
          while (v594 != v597)
          {
            v604 = *((_DWORD *)v594 - 1);
            v594 -= 4;
            *((_DWORD *)v603 - 1) = v604;
            v603 -= 4;
          }
          v595 = &v602[4 * v601];
          *a7 = v603;
          a7[1] = v596;
          a7[2] = v595;
          if (v597)
          {
            operator delete(v597);
            v595 = *v593;
          }
          a10.n128_u64[0] = v1360.n128_u64[0];
        }
        else
        {
          *(_DWORD *)v594 = 1065353216;
          v596 = v594 + 4;
        }
        a7[1] = v596;
        if (v596 >= v595)
        {
          v606 = *a7;
          v607 = (v596 - *a7) >> 2;
          v608 = v607 + 1;
          if ((unint64_t)(v607 + 1) >> 62)
            goto LABEL_2262;
          v609 = v595 - v606;
          if (v609 >> 1 > v608)
            v608 = v609 >> 1;
          if ((unint64_t)v609 >= 0x7FFFFFFFFFFFFFFCLL)
            v610 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v610 = v608;
          if (v610)
          {
            v611 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v610);
            v606 = *a7;
            v596 = a7[1];
          }
          else
          {
            v611 = 0;
          }
          v612 = &v611[4 * v607];
          *(_DWORD *)v612 = 0;
          v605 = v612 + 4;
          while (v596 != v606)
          {
            v613 = *((_DWORD *)v596 - 1);
            v596 -= 4;
            *((_DWORD *)v612 - 1) = v613;
            v612 -= 4;
          }
          v595 = &v611[4 * v610];
          *a7 = v612;
          a7[1] = v605;
          a7[2] = v595;
          if (v606)
          {
            operator delete(v606);
            v595 = *v593;
          }
          a10.n128_u64[0] = v1360.n128_u64[0];
        }
        else
        {
          *(_DWORD *)v596 = 0;
          v605 = v596 + 4;
        }
        a7[1] = v605;
        if (v605 >= v595)
        {
          v614 = *a7;
          v615 = (v605 - *a7) >> 2;
          v616 = v615 + 1;
          if ((unint64_t)(v615 + 1) >> 62)
            goto LABEL_2262;
          v617 = v595 - v614;
          if (v617 >> 1 > v616)
            v616 = v617 >> 1;
          if ((unint64_t)v617 >= 0x7FFFFFFFFFFFFFFCLL)
            v618 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v618 = v616;
          if (v618)
          {
            v619 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v618);
            v614 = *a7;
            v605 = a7[1];
          }
          else
          {
            v619 = 0;
          }
          v620 = &v619[4 * v615];
          *(_DWORD *)v620 = 0;
          v594 = v620 + 4;
          while (v605 != v614)
          {
            v621 = *((_DWORD *)v605 - 1);
            v605 -= 4;
            *((_DWORD *)v620 - 1) = v621;
            v620 -= 4;
          }
          *a7 = v620;
          a7[1] = v594;
          a7[2] = &v619[4 * v618];
          if (v614)
            operator delete(v614);
          a10.n128_u64[0] = v1360.n128_u64[0];
        }
        else
        {
          *(_DWORD *)v605 = 0;
          v594 = v605 + 4;
        }
        a7[1] = v594;
        ++v592;
      }
      while (v592 != 4);
    }
    v622 = v1354 + a4;
    v624 = a5 + 2;
    v623 = a5[2];
    v625 = a5[1];
    if (v625 >= v623)
    {
      v627 = *a5;
      v628 = (v625 - *a5) >> 2;
      v629 = v628 + 1;
      if ((unint64_t)(v628 + 1) >> 62)
        goto LABEL_2266;
      v630 = v623 - v627;
      if (v630 >> 1 > v629)
        v629 = v630 >> 1;
      if ((unint64_t)v630 >= 0x7FFFFFFFFFFFFFFCLL)
        v631 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v631 = v629;
      if (v631)
      {
        v632 = (char *)sub_1DCAE4D04((uint64_t)(a5 + 2), v631);
        v627 = *a5;
        v625 = a5[1];
      }
      else
      {
        v632 = 0;
      }
      v633 = &v632[4 * v628];
      v623 = &v632[4 * v631];
      *(_DWORD *)v633 = v622;
      v626 = v633 + 4;
      while (v625 != v627)
      {
        v634 = *((_DWORD *)v625 - 1);
        v625 -= 4;
        *((_DWORD *)v633 - 1) = v634;
        v633 -= 4;
      }
      *a5 = v633;
      a5[1] = v626;
      a5[2] = v623;
      if (v627)
      {
        operator delete(v627);
        v623 = *v624;
      }
      a10.n128_u64[0] = v1360.n128_u64[0];
    }
    else
    {
      *(_DWORD *)v625 = v622;
      v626 = v625 + 4;
    }
    a5[1] = v626;
    v635 = v622 + 1;
    if (v626 >= v623)
    {
      v637 = *a5;
      v638 = (v626 - *a5) >> 2;
      v639 = v638 + 1;
      if ((unint64_t)(v638 + 1) >> 62)
        goto LABEL_2266;
      v640 = v623 - v637;
      if (v640 >> 1 > v639)
        v639 = v640 >> 1;
      if ((unint64_t)v640 >= 0x7FFFFFFFFFFFFFFCLL)
        v641 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v641 = v639;
      if (v641)
      {
        v642 = (char *)sub_1DCAE4D04((uint64_t)v624, v641);
        v637 = *a5;
        v626 = a5[1];
      }
      else
      {
        v642 = 0;
      }
      v643 = &v642[4 * v638];
      v623 = &v642[4 * v641];
      *(_DWORD *)v643 = v635;
      v636 = v643 + 4;
      while (v626 != v637)
      {
        v644 = *((_DWORD *)v626 - 1);
        v626 -= 4;
        *((_DWORD *)v643 - 1) = v644;
        v643 -= 4;
      }
      *a5 = v643;
      a5[1] = v636;
      a5[2] = v623;
      if (v637)
      {
        operator delete(v637);
        v623 = *v624;
      }
      a10.n128_u64[0] = v1360.n128_u64[0];
    }
    else
    {
      *(_DWORD *)v626 = v635;
      v636 = v626 + 4;
    }
    a5[1] = v636;
    v645 = v622 + 2;
    if (v636 < v623)
    {
      *(_DWORD *)v636 = v645;
      v646 = v636 + 4;
      v12 = a6;
      goto LABEL_1088;
    }
    v647 = *a5;
    v648 = (v636 - *a5) >> 2;
    v649 = v648 + 1;
    if (!((unint64_t)(v648 + 1) >> 62))
    {
      v650 = v623 - v647;
      if (v650 >> 1 > v649)
        v649 = v650 >> 1;
      if ((unint64_t)v650 >= 0x7FFFFFFFFFFFFFFCLL)
        v651 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v651 = v649;
      if (v651)
      {
        v652 = (char *)sub_1DCAE4D04((uint64_t)v624, v651);
        v647 = *a5;
        v636 = a5[1];
      }
      else
      {
        v652 = 0;
      }
      v12 = a6;
      v653 = &v652[4 * v648];
      v623 = &v652[4 * v651];
      *(_DWORD *)v653 = v645;
      v646 = v653 + 4;
      while (v636 != v647)
      {
        v654 = *((_DWORD *)v636 - 1);
        v636 -= 4;
        *((_DWORD *)v653 - 1) = v654;
        v653 -= 4;
      }
      *a5 = v653;
      a5[1] = v646;
      a5[2] = v623;
      if (v647)
      {
        operator delete(v647);
        v623 = *v624;
      }
      a10.n128_u64[0] = v1360.n128_u64[0];
LABEL_1088:
      v14 = a3;
      a5[1] = v646;
      v1347 = v622 + 2;
      if (v646 >= v623)
      {
        v656 = *a5;
        v657 = (v646 - *a5) >> 2;
        v658 = v657 + 1;
        if ((unint64_t)(v657 + 1) >> 62)
          goto LABEL_2267;
        v659 = v623 - v656;
        if (v659 >> 1 > v658)
          v658 = v659 >> 1;
        if ((unint64_t)v659 >= 0x7FFFFFFFFFFFFFFCLL)
          v660 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v660 = v658;
        if (v660)
        {
          v661 = (char *)sub_1DCAE4D04((uint64_t)v624, v660);
          v656 = *a5;
          v646 = a5[1];
        }
        else
        {
          v661 = 0;
        }
        v662 = &v661[4 * v657];
        v623 = &v661[4 * v660];
        *(_DWORD *)v662 = v635;
        v655 = v662 + 4;
        if (v646 == v656)
        {
          v15 = a2;
        }
        else
        {
          v15 = a2;
          do
          {
            v663 = *((_DWORD *)v646 - 1);
            v646 -= 4;
            *((_DWORD *)v662 - 1) = v663;
            v662 -= 4;
          }
          while (v646 != v656);
        }
        v13 = a5;
        *a5 = v662;
        a5[1] = v655;
        a5[2] = v623;
        if (v656)
        {
          operator delete(v656);
          v623 = *v624;
        }
        a10.n128_u64[0] = v1360.n128_u64[0];
      }
      else
      {
        *(_DWORD *)v646 = v635;
        v655 = v646 + 4;
        v13 = a5;
        v15 = a2;
      }
      v13[1] = v655;
      v664 = v622 + 3;
      if (v655 >= v623)
      {
        v666 = *v13;
        v667 = (v655 - *v13) >> 2;
        v668 = v667 + 1;
        if ((unint64_t)(v667 + 1) >> 62)
          goto LABEL_2265;
        v669 = v623 - v666;
        if (v669 >> 1 > v668)
          v668 = v669 >> 1;
        if ((unint64_t)v669 >= 0x7FFFFFFFFFFFFFFCLL)
          v670 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v670 = v668;
        if (v670)
        {
          v671 = (char *)sub_1DCAE4D04((uint64_t)v624, v670);
          v666 = *v13;
          v655 = v13[1];
        }
        else
        {
          v671 = 0;
        }
        v672 = &v671[4 * v667];
        v623 = &v671[4 * v670];
        *(_DWORD *)v672 = v664;
        v665 = v672 + 4;
        while (v655 != v666)
        {
          v673 = *((_DWORD *)v655 - 1);
          v655 -= 4;
          *((_DWORD *)v672 - 1) = v673;
          v672 -= 4;
        }
        *v13 = v672;
        v13[1] = v665;
        v13[2] = v623;
        if (v666)
        {
          operator delete(v666);
          v623 = *v624;
        }
        a10.n128_u64[0] = v1360.n128_u64[0];
      }
      else
      {
        *(_DWORD *)v655 = v664;
        v665 = v655 + 4;
      }
      v13[1] = v665;
      if (v665 >= v623)
      {
        v675 = *v13;
        v676 = (v665 - *v13) >> 2;
        v677 = v676 + 1;
        if ((unint64_t)(v676 + 1) >> 62)
          goto LABEL_2265;
        v678 = v623 - v675;
        if (v678 >> 1 > v677)
          v677 = v678 >> 1;
        if ((unint64_t)v678 >= 0x7FFFFFFFFFFFFFFCLL)
          v679 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v679 = v677;
        if (v679)
        {
          v680 = (char *)sub_1DCAE4D04((uint64_t)v624, v679);
          v675 = *v13;
          v665 = v13[1];
        }
        else
        {
          v680 = 0;
        }
        v681 = &v680[4 * v676];
        v682 = &v680[4 * v679];
        *(_DWORD *)v681 = v1347;
        v674 = v681 + 4;
        while (v665 != v675)
        {
          v683 = *((_DWORD *)v665 - 1);
          v665 -= 4;
          *((_DWORD *)v681 - 1) = v683;
          v681 -= 4;
        }
        *v13 = v681;
        v13[1] = v674;
        v13[2] = v682;
        if (v675)
          operator delete(v675);
        a10.n128_u64[0] = v1360.n128_u64[0];
      }
      else
      {
        *(_DWORD *)v665 = v1347;
        v674 = v665 + 4;
      }
      v13[1] = v674;
      v16 = v1354 + 4;
      if ((a3 & 1) == 0)
        goto LABEL_6;
LABEL_1142:
      v685 = (char **)(v12 + 16);
      v684 = *(char **)(v12 + 16);
      v686 = *(unsigned __int32 **)(v12 + 8);
      if (v686 >= (unsigned __int32 *)v684)
      {
        v688 = *(unsigned __int32 **)v12;
        v689 = ((uint64_t)v686 - *(_QWORD *)v12) >> 2;
        v690 = v689 + 1;
        if ((unint64_t)(v689 + 1) >> 62)
          goto LABEL_2264;
        v691 = v684 - (char *)v688;
        if (v691 >> 1 > v690)
          v690 = v691 >> 1;
        if ((unint64_t)v691 >= 0x7FFFFFFFFFFFFFFCLL)
          v692 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v692 = v690;
        if (v692)
        {
          v693 = (char *)sub_1DCAE4D04(v12 + 16, v692);
          a10.n128_u32[0] = v1360.n128_u32[0];
          v694 = v693;
          v688 = *(unsigned __int32 **)v12;
          v686 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v694 = 0;
        }
        v695 = &v694[4 * v689];
        v684 = &v694[4 * v692];
        *(_DWORD *)v695 = a10.n128_u32[0];
        v687 = (unsigned __int32 *)(v695 + 4);
        while (v686 != v688)
        {
          v696 = *--v686;
          *((_DWORD *)v695 - 1) = v696;
          v695 -= 4;
        }
        *(_QWORD *)v12 = v695;
        *(_QWORD *)(v12 + 8) = v687;
        *(_QWORD *)(v12 + 16) = v684;
        if (v688)
        {
          operator delete(v688);
          v684 = *v685;
        }
      }
      else
      {
        *v686 = a10.n128_u32[0];
        v687 = v686 + 1;
      }
      *(_QWORD *)(v12 + 8) = v687;
      v697 = a9.n128_u32[2];
      v1355 = v16;
      if (v687 >= (unsigned __int32 *)v684)
      {
        v699 = *(unsigned __int32 **)v12;
        v700 = ((uint64_t)v687 - *(_QWORD *)v12) >> 2;
        v701 = v700 + 1;
        if ((unint64_t)(v700 + 1) >> 62)
          goto LABEL_2264;
        v702 = v684 - (char *)v699;
        if (v702 >> 1 > v701)
          v701 = v702 >> 1;
        if ((unint64_t)v702 >= 0x7FFFFFFFFFFFFFFCLL)
          v703 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v703 = v701;
        if (v703)
        {
          v704 = (char *)sub_1DCAE4D04(v12 + 16, v703);
          v699 = *(unsigned __int32 **)v12;
          v687 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v704 = 0;
        }
        v705 = &v704[4 * v700];
        v684 = &v704[4 * v703];
        *(_DWORD *)v705 = a9.n128_u32[1];
        v698 = (unsigned __int32 *)(v705 + 4);
        while (v687 != v699)
        {
          v706 = *--v687;
          *((_DWORD *)v705 - 1) = v706;
          v705 -= 4;
        }
        *(_QWORD *)v12 = v705;
        *(_QWORD *)(v12 + 8) = v698;
        *(_QWORD *)(v12 + 16) = v684;
        if (v699)
        {
          operator delete(v699);
          v684 = *v685;
        }
        v697 = a9.n128_u32[2];
      }
      else
      {
        *v687 = a9.n128_u32[1];
        v698 = v687 + 1;
      }
      *(_QWORD *)(v12 + 8) = v698;
      v707 = v697;
      if (v698 >= (unsigned __int32 *)v684)
      {
        v709 = *(unsigned __int32 **)v12;
        v710 = ((uint64_t)v698 - *(_QWORD *)v12) >> 2;
        v711 = v710 + 1;
        if ((unint64_t)(v710 + 1) >> 62)
          goto LABEL_2264;
        v712 = v684 - (char *)v709;
        if (v712 >> 1 > v711)
          v711 = v712 >> 1;
        if ((unint64_t)v712 >= 0x7FFFFFFFFFFFFFFCLL)
          v713 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v713 = v711;
        if (v713)
        {
          v714 = (char *)sub_1DCAE4D04(v12 + 16, v713);
          v709 = *(unsigned __int32 **)v12;
          v698 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v714 = 0;
        }
        v715 = (unsigned __int32 *)&v714[4 * v710];
        v684 = &v714[4 * v713];
        *v715 = v707;
        v708 = v715 + 1;
        while (v698 != v709)
        {
          v716 = *--v698;
          *--v715 = v716;
        }
        *(_QWORD *)v12 = v715;
        *(_QWORD *)(v12 + 8) = v708;
        *(_QWORD *)(v12 + 16) = v684;
        if (v709)
        {
          operator delete(v709);
          v684 = *v685;
        }
      }
      else
      {
        *v698 = v697;
        v708 = v698 + 1;
      }
      *(_QWORD *)(v12 + 8) = v708;
      if (v708 >= (unsigned __int32 *)v684)
      {
        v719 = *(unsigned __int32 **)v12;
        v720 = ((uint64_t)v708 - *(_QWORD *)v12) >> 2;
        v721 = v720 + 1;
        if ((unint64_t)(v720 + 1) >> 62)
          goto LABEL_2264;
        v722 = v684 - (char *)v719;
        if (v722 >> 1 > v721)
          v721 = v722 >> 1;
        if ((unint64_t)v722 >= 0x7FFFFFFFFFFFFFFCLL)
          v723 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v723 = v721;
        if (v723)
        {
          v724 = (char *)sub_1DCAE4D04(v12 + 16, v723);
          v719 = *(unsigned __int32 **)v12;
          v708 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v724 = 0;
        }
        v725 = &v724[4 * v720];
        v684 = &v724[4 * v723];
        *(_DWORD *)v725 = v1360.n128_u32[0];
        v718 = (unsigned __int32 *)(v725 + 4);
        while (v708 != v719)
        {
          v726 = *--v708;
          *((_DWORD *)v725 - 1) = v726;
          v725 -= 4;
        }
        *(_QWORD *)v12 = v725;
        *(_QWORD *)(v12 + 8) = v718;
        *(_QWORD *)(v12 + 16) = v684;
        if (v719)
        {
          operator delete(v719);
          v684 = *v685;
        }
        v717 = v1360.n128_u32[1];
      }
      else
      {
        v717 = v1360.n128_u32[1];
        *v708 = v1360.n128_u32[0];
        v718 = v708 + 1;
      }
      *(_QWORD *)(v12 + 8) = v718;
      v727 = v717;
      if (v718 >= (unsigned __int32 *)v684)
      {
        v729 = *(unsigned __int32 **)v12;
        v730 = ((uint64_t)v718 - *(_QWORD *)v12) >> 2;
        v731 = v730 + 1;
        if ((unint64_t)(v730 + 1) >> 62)
          goto LABEL_2264;
        v732 = v684 - (char *)v729;
        if (v732 >> 1 > v731)
          v731 = v732 >> 1;
        if ((unint64_t)v732 >= 0x7FFFFFFFFFFFFFFCLL)
          v733 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v733 = v731;
        if (v733)
        {
          v734 = (char *)sub_1DCAE4D04(v12 + 16, v733);
          v729 = *(unsigned __int32 **)v12;
          v718 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v734 = 0;
        }
        v735 = &v734[4 * v730];
        v684 = &v734[4 * v733];
        *(_DWORD *)v735 = v727;
        v728 = (unsigned __int32 *)(v735 + 4);
        while (v718 != v729)
        {
          v736 = *--v718;
          *((_DWORD *)v735 - 1) = v736;
          v735 -= 4;
        }
        *(_QWORD *)v12 = v735;
        *(_QWORD *)(v12 + 8) = v728;
        *(_QWORD *)(v12 + 16) = v684;
        if (v729)
        {
          operator delete(v729);
          v684 = *v685;
        }
      }
      else
      {
        *v718 = v717;
        v728 = v718 + 1;
      }
      *(_QWORD *)(v12 + 8) = v728;
      if (v728 >= (unsigned __int32 *)v684)
      {
        v738 = *(unsigned __int32 **)v12;
        v739 = ((uint64_t)v728 - *(_QWORD *)v12) >> 2;
        v740 = v739 + 1;
        if ((unint64_t)(v739 + 1) >> 62)
          goto LABEL_2264;
        v741 = v684 - (char *)v738;
        if (v741 >> 1 > v740)
          v740 = v741 >> 1;
        if ((unint64_t)v741 >= 0x7FFFFFFFFFFFFFFCLL)
          v742 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v742 = v740;
        if (v742)
        {
          v743 = (char *)sub_1DCAE4D04(v12 + 16, v742);
          v738 = *(unsigned __int32 **)v12;
          v728 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v743 = 0;
        }
        v744 = (unsigned __int32 *)&v743[4 * v739];
        v684 = &v743[4 * v742];
        *v744 = v707;
        v737 = v744 + 1;
        while (v728 != v738)
        {
          v745 = *--v728;
          *--v744 = v745;
        }
        *(_QWORD *)v12 = v744;
        *(_QWORD *)(v12 + 8) = v737;
        *(_QWORD *)(v12 + 16) = v684;
        if (v738)
        {
          operator delete(v738);
          v684 = *v685;
        }
      }
      else
      {
        *v728 = v707;
        v737 = v728 + 1;
      }
      *(_QWORD *)(v12 + 8) = v737;
      if (v737 >= (unsigned __int32 *)v684)
      {
        v747 = *(unsigned __int32 **)v12;
        v748 = ((uint64_t)v737 - *(_QWORD *)v12) >> 2;
        v749 = v748 + 1;
        if ((unint64_t)(v748 + 1) >> 62)
          goto LABEL_2264;
        v750 = v684 - (char *)v747;
        if (v750 >> 1 > v749)
          v749 = v750 >> 1;
        if ((unint64_t)v750 >= 0x7FFFFFFFFFFFFFFCLL)
          v751 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v751 = v749;
        if (v751)
        {
          v752 = (char *)sub_1DCAE4D04(v12 + 16, v751);
          v747 = *(unsigned __int32 **)v12;
          v737 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v752 = 0;
        }
        v753 = &v752[4 * v748];
        v684 = &v752[4 * v751];
        *(_DWORD *)v753 = v1360.n128_u32[0];
        v746 = (unsigned __int32 *)(v753 + 4);
        while (v737 != v747)
        {
          v754 = *--v737;
          *((_DWORD *)v753 - 1) = v754;
          v753 -= 4;
        }
        *(_QWORD *)v12 = v753;
        *(_QWORD *)(v12 + 8) = v746;
        *(_QWORD *)(v12 + 16) = v684;
        if (v747)
        {
          operator delete(v747);
          v684 = *v685;
        }
      }
      else
      {
        *v737 = v1360.n128_u32[0];
        v746 = v737 + 1;
      }
      *(_QWORD *)(v12 + 8) = v746;
      if (v746 >= (unsigned __int32 *)v684)
      {
        v756 = *(unsigned __int32 **)v12;
        v757 = ((uint64_t)v746 - *(_QWORD *)v12) >> 2;
        v758 = v757 + 1;
        if ((unint64_t)(v757 + 1) >> 62)
          goto LABEL_2264;
        v759 = v684 - (char *)v756;
        if (v759 >> 1 > v758)
          v758 = v759 >> 1;
        if ((unint64_t)v759 >= 0x7FFFFFFFFFFFFFFCLL)
          v760 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v760 = v758;
        if (v760)
        {
          v761 = (char *)sub_1DCAE4D04(v12 + 16, v760);
          v756 = *(unsigned __int32 **)v12;
          v746 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v761 = 0;
        }
        v762 = &v761[4 * v757];
        v684 = &v761[4 * v760];
        *(_DWORD *)v762 = a9.n128_u32[1];
        v755 = (unsigned __int32 *)(v762 + 4);
        while (v746 != v756)
        {
          v763 = *--v746;
          *((_DWORD *)v762 - 1) = v763;
          v762 -= 4;
        }
        *(_QWORD *)v12 = v762;
        *(_QWORD *)(v12 + 8) = v755;
        *(_QWORD *)(v12 + 16) = v684;
        if (v756)
        {
          operator delete(v756);
          v684 = *v685;
        }
      }
      else
      {
        *v746 = a9.n128_u32[1];
        v755 = v746 + 1;
      }
      *(_QWORD *)(v12 + 8) = v755;
      if (v755 >= (unsigned __int32 *)v684)
      {
        v765 = *(unsigned __int32 **)v12;
        v766 = ((uint64_t)v755 - *(_QWORD *)v12) >> 2;
        v767 = v766 + 1;
        if ((unint64_t)(v766 + 1) >> 62)
          goto LABEL_2264;
        v768 = v684 - (char *)v765;
        if (v768 >> 1 > v767)
          v767 = v768 >> 1;
        if ((unint64_t)v768 >= 0x7FFFFFFFFFFFFFFCLL)
          v769 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v769 = v767;
        if (v769)
        {
          v770 = (char *)sub_1DCAE4D04(v12 + 16, v769);
          v765 = *(unsigned __int32 **)v12;
          v755 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v770 = 0;
        }
        v771 = &v770[4 * v766];
        v684 = &v770[4 * v769];
        *(_DWORD *)v771 = v1360.n128_u32[2];
        v764 = (unsigned __int32 *)(v771 + 4);
        while (v755 != v765)
        {
          v772 = *--v755;
          *((_DWORD *)v771 - 1) = v772;
          v771 -= 4;
        }
        *(_QWORD *)v12 = v771;
        *(_QWORD *)(v12 + 8) = v764;
        *(_QWORD *)(v12 + 16) = v684;
        if (v765)
        {
          operator delete(v765);
          v684 = *v685;
        }
      }
      else
      {
        *v755 = v1360.n128_u32[2];
        v764 = v755 + 1;
      }
      *(_QWORD *)(v12 + 8) = v764;
      if (v764 >= (unsigned __int32 *)v684)
      {
        v774 = *(unsigned __int32 **)v12;
        v775 = ((uint64_t)v764 - *(_QWORD *)v12) >> 2;
        v776 = v775 + 1;
        if ((unint64_t)(v775 + 1) >> 62)
          goto LABEL_2264;
        v777 = v684 - (char *)v774;
        if (v777 >> 1 > v776)
          v776 = v777 >> 1;
        if ((unint64_t)v777 >= 0x7FFFFFFFFFFFFFFCLL)
          v778 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v778 = v776;
        if (v778)
        {
          v779 = (char *)sub_1DCAE4D04(v12 + 16, v778);
          v774 = *(unsigned __int32 **)v12;
          v764 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v779 = 0;
        }
        v780 = &v779[4 * v775];
        v684 = &v779[4 * v778];
        *(_DWORD *)v780 = v1360.n128_u32[0];
        v773 = (unsigned __int32 *)(v780 + 4);
        while (v764 != v774)
        {
          v781 = *--v764;
          *((_DWORD *)v780 - 1) = v781;
          v780 -= 4;
        }
        *(_QWORD *)v12 = v780;
        *(_QWORD *)(v12 + 8) = v773;
        *(_QWORD *)(v12 + 16) = v684;
        if (v774)
        {
          operator delete(v774);
          v684 = *v685;
        }
      }
      else
      {
        *v764 = v1360.n128_u32[0];
        v773 = v764 + 1;
      }
      *(_QWORD *)(v12 + 8) = v773;
      if (v773 >= (unsigned __int32 *)v684)
      {
        v783 = *(unsigned __int32 **)v12;
        v784 = ((uint64_t)v773 - *(_QWORD *)v12) >> 2;
        v785 = v784 + 1;
        if ((unint64_t)(v784 + 1) >> 62)
          goto LABEL_2264;
        v786 = v684 - (char *)v783;
        if (v786 >> 1 > v785)
          v785 = v786 >> 1;
        if ((unint64_t)v786 >= 0x7FFFFFFFFFFFFFFCLL)
          v787 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v787 = v785;
        if (v787)
        {
          v788 = (char *)sub_1DCAE4D04(v12 + 16, v787);
          v783 = *(unsigned __int32 **)v12;
          v773 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v788 = 0;
        }
        v789 = &v788[4 * v784];
        v684 = &v788[4 * v787];
        *(_DWORD *)v789 = v727;
        v782 = (unsigned __int32 *)(v789 + 4);
        while (v773 != v783)
        {
          v790 = *--v773;
          *((_DWORD *)v789 - 1) = v790;
          v789 -= 4;
        }
        *(_QWORD *)v12 = v789;
        *(_QWORD *)(v12 + 8) = v782;
        *(_QWORD *)(v12 + 16) = v684;
        if (v783)
        {
          operator delete(v783);
          v684 = *v685;
        }
      }
      else
      {
        *v773 = v727;
        v782 = v773 + 1;
      }
      *(_QWORD *)(v12 + 8) = v782;
      if (v782 >= (unsigned __int32 *)v684)
      {
        v792 = *(unsigned __int32 **)v12;
        v793 = ((uint64_t)v782 - *(_QWORD *)v12) >> 2;
        v794 = v793 + 1;
        if ((unint64_t)(v793 + 1) >> 62)
          goto LABEL_2264;
        v795 = v684 - (char *)v792;
        if (v795 >> 1 > v794)
          v794 = v795 >> 1;
        if ((unint64_t)v795 >= 0x7FFFFFFFFFFFFFFCLL)
          v796 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v796 = v794;
        if (v796)
        {
          v797 = (char *)sub_1DCAE4D04(v12 + 16, v796);
          v792 = *(unsigned __int32 **)v12;
          v782 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v797 = 0;
        }
        v798 = &v797[4 * v793];
        v799 = &v797[4 * v796];
        *(_DWORD *)v798 = v1360.n128_u32[2];
        v791 = v798 + 4;
        while (v782 != v792)
        {
          v800 = *--v782;
          *((_DWORD *)v798 - 1) = v800;
          v798 -= 4;
        }
        *(_QWORD *)v12 = v798;
        *(_QWORD *)(v12 + 8) = v791;
        *(_QWORD *)(v12 + 16) = v799;
        if (v792)
          operator delete(v792);
      }
      else
      {
        *v782 = v1360.n128_u32[2];
        v791 = v782 + 1;
      }
      *(_QWORD *)(v12 + 8) = v791;
      a10.n128_u32[1] = v1360.n128_u32[1];
      if (a8 && a1)
      {
        v801 = 0;
        v802 = (_QWORD *)(a8 + 16);
        v803 = *(_DWORD **)(a8 + 8);
        do
        {
          if ((unint64_t)v803 >= *v802)
          {
            v805 = *(_DWORD **)a8;
            v806 = ((uint64_t)v803 - *(_QWORD *)a8) >> 2;
            v807 = v806 + 1;
            if ((unint64_t)(v806 + 1) >> 62)
              goto LABEL_2263;
            v808 = *v802 - (_QWORD)v805;
            if (v808 >> 1 > v807)
              v807 = v808 >> 1;
            if ((unint64_t)v808 >= 0x7FFFFFFFFFFFFFFCLL)
              v809 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v809 = v807;
            if (v809)
            {
              v810 = (char *)sub_1DCAE4D04(a8 + 16, v809);
              v805 = *(_DWORD **)a8;
              v803 = *(_DWORD **)(a8 + 8);
            }
            else
            {
              v810 = 0;
            }
            v811 = &v810[4 * v806];
            *(_DWORD *)v811 = v15;
            v804 = v811 + 4;
            while (v803 != v805)
            {
              v812 = *--v803;
              *((_DWORD *)v811 - 1) = v812;
              v811 -= 4;
            }
            *(_QWORD *)a8 = v811;
            *(_QWORD *)(a8 + 8) = v804;
            *(_QWORD *)(a8 + 16) = &v810[4 * v809];
            if (v805)
              operator delete(v805);
            a10.n128_u32[1] = v1360.n128_u32[1];
          }
          else
          {
            *v803 = v15;
            v804 = v803 + 1;
          }
          *(_QWORD *)(a8 + 8) = v804;
          ++v801;
          v803 = v804;
        }
        while (v801 != 4);
      }
      if (a7)
      {
        v813 = 0;
        v814 = a7 + 2;
        v815 = a7[1];
        do
        {
          v816 = *v814;
          if (v815 >= *v814)
          {
            v818 = *a7;
            v819 = (v815 - *a7) >> 2;
            v820 = v819 + 1;
            if ((unint64_t)(v819 + 1) >> 62)
              goto LABEL_2262;
            v821 = v816 - v818;
            if (v821 >> 1 > v820)
              v820 = v821 >> 1;
            if ((unint64_t)v821 >= 0x7FFFFFFFFFFFFFFCLL)
              v822 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v822 = v820;
            if (v822)
            {
              v823 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v822);
              v818 = *a7;
              v815 = a7[1];
            }
            else
            {
              v823 = 0;
            }
            v824 = &v823[4 * v819];
            *(_DWORD *)v824 = 0;
            v817 = v824 + 4;
            while (v815 != v818)
            {
              v825 = *((_DWORD *)v815 - 1);
              v815 -= 4;
              *((_DWORD *)v824 - 1) = v825;
              v824 -= 4;
            }
            v816 = &v823[4 * v822];
            *a7 = v824;
            a7[1] = v817;
            a7[2] = v816;
            if (v818)
            {
              operator delete(v818);
              v816 = *v814;
            }
            a10.n128_u32[1] = v1360.n128_u32[1];
          }
          else
          {
            *(_DWORD *)v815 = 0;
            v817 = v815 + 4;
          }
          a7[1] = v817;
          if (v817 >= v816)
          {
            v827 = *a7;
            v828 = (v817 - *a7) >> 2;
            v829 = v828 + 1;
            if ((unint64_t)(v828 + 1) >> 62)
              goto LABEL_2262;
            v830 = v816 - v827;
            if (v830 >> 1 > v829)
              v829 = v830 >> 1;
            if ((unint64_t)v830 >= 0x7FFFFFFFFFFFFFFCLL)
              v831 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v831 = v829;
            if (v831)
            {
              v832 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v831);
              v827 = *a7;
              v817 = a7[1];
            }
            else
            {
              v832 = 0;
            }
            v833 = &v832[4 * v828];
            *(_DWORD *)v833 = 0;
            v826 = v833 + 4;
            while (v817 != v827)
            {
              v834 = *((_DWORD *)v817 - 1);
              v817 -= 4;
              *((_DWORD *)v833 - 1) = v834;
              v833 -= 4;
            }
            v816 = &v832[4 * v831];
            *a7 = v833;
            a7[1] = v826;
            a7[2] = v816;
            if (v827)
            {
              operator delete(v827);
              v816 = *v814;
            }
            a10.n128_u32[1] = v1360.n128_u32[1];
          }
          else
          {
            *(_DWORD *)v817 = 0;
            v826 = v817 + 4;
          }
          a7[1] = v826;
          if (v826 >= v816)
          {
            v835 = *a7;
            v836 = (v826 - *a7) >> 2;
            v837 = v836 + 1;
            if ((unint64_t)(v836 + 1) >> 62)
              goto LABEL_2262;
            v838 = v816 - v835;
            if (v838 >> 1 > v837)
              v837 = v838 >> 1;
            if ((unint64_t)v838 >= 0x7FFFFFFFFFFFFFFCLL)
              v839 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v839 = v837;
            if (v839)
            {
              v840 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v839);
              v835 = *a7;
              v826 = a7[1];
            }
            else
            {
              v840 = 0;
            }
            v841 = &v840[4 * v836];
            *(_DWORD *)v841 = 1065353216;
            v815 = v841 + 4;
            while (v826 != v835)
            {
              v842 = *((_DWORD *)v826 - 1);
              v826 -= 4;
              *((_DWORD *)v841 - 1) = v842;
              v841 -= 4;
            }
            *a7 = v841;
            a7[1] = v815;
            a7[2] = &v840[4 * v839];
            if (v835)
              operator delete(v835);
            a10.n128_u32[1] = v1360.n128_u32[1];
          }
          else
          {
            *(_DWORD *)v826 = 1065353216;
            v815 = v826 + 4;
          }
          a7[1] = v815;
          ++v813;
        }
        while (v813 != 4);
      }
      v843 = v1355 + a4;
      v845 = a5 + 2;
      v844 = a5[2];
      v846 = a5[1];
      if (v846 >= v844)
      {
        v848 = *a5;
        v849 = (v846 - *a5) >> 2;
        v850 = v849 + 1;
        if ((unint64_t)(v849 + 1) >> 62)
          goto LABEL_2265;
        v851 = v844 - v848;
        if (v851 >> 1 > v850)
          v850 = v851 >> 1;
        if ((unint64_t)v851 >= 0x7FFFFFFFFFFFFFFCLL)
          v852 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v852 = v850;
        if (v852)
        {
          v853 = (char *)sub_1DCAE4D04((uint64_t)(a5 + 2), v852);
          v848 = *a5;
          v846 = a5[1];
        }
        else
        {
          v853 = 0;
        }
        v854 = &v853[4 * v849];
        v844 = &v853[4 * v852];
        *(_DWORD *)v854 = v843;
        v847 = v854 + 4;
        while (v846 != v848)
        {
          v855 = *((_DWORD *)v846 - 1);
          v846 -= 4;
          *((_DWORD *)v854 - 1) = v855;
          v854 -= 4;
        }
        *a5 = v854;
        a5[1] = v847;
        a5[2] = v844;
        if (v848)
        {
          operator delete(v848);
          v844 = *v845;
        }
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v846 = v843;
        v847 = v846 + 4;
      }
      a5[1] = v847;
      v856 = v843 + 3;
      if (v847 >= v844)
      {
        v858 = *a5;
        v859 = (v847 - *a5) >> 2;
        v860 = v859 + 1;
        if ((unint64_t)(v859 + 1) >> 62)
          goto LABEL_2265;
        v861 = v844 - v858;
        if (v861 >> 1 > v860)
          v860 = v861 >> 1;
        if ((unint64_t)v861 >= 0x7FFFFFFFFFFFFFFCLL)
          v862 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v862 = v860;
        if (v862)
        {
          v863 = (char *)sub_1DCAE4D04((uint64_t)v845, v862);
          v858 = *a5;
          v847 = a5[1];
        }
        else
        {
          v863 = 0;
        }
        v864 = &v863[4 * v859];
        v844 = &v863[4 * v862];
        *(_DWORD *)v864 = v856;
        v857 = v864 + 4;
        while (v847 != v858)
        {
          v865 = *((_DWORD *)v847 - 1);
          v847 -= 4;
          *((_DWORD *)v864 - 1) = v865;
          v864 -= 4;
        }
        *a5 = v864;
        a5[1] = v857;
        a5[2] = v844;
        if (v858)
        {
          operator delete(v858);
          v844 = *v845;
        }
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v847 = v856;
        v857 = v847 + 4;
      }
      a5[1] = v857;
      v866 = v843 + 2;
      if (v857 >= v844)
      {
        v868 = *a5;
        v869 = (v857 - *a5) >> 2;
        v870 = v869 + 1;
        if ((unint64_t)(v869 + 1) >> 62)
          goto LABEL_2265;
        v871 = v844 - v868;
        if (v871 >> 1 > v870)
          v870 = v871 >> 1;
        if ((unint64_t)v871 >= 0x7FFFFFFFFFFFFFFCLL)
          v872 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v872 = v870;
        if (v872)
        {
          v873 = (char *)sub_1DCAE4D04((uint64_t)v845, v872);
          v868 = *a5;
          v857 = a5[1];
        }
        else
        {
          v873 = 0;
        }
        v874 = &v873[4 * v869];
        v844 = &v873[4 * v872];
        *(_DWORD *)v874 = v866;
        v867 = v874 + 4;
        if (v857 == v868)
        {
          v12 = a6;
        }
        else
        {
          v12 = a6;
          do
          {
            v875 = *((_DWORD *)v857 - 1);
            v857 -= 4;
            *((_DWORD *)v874 - 1) = v875;
            v874 -= 4;
          }
          while (v857 != v868);
        }
        *a5 = v874;
        a5[1] = v867;
        a5[2] = v844;
        if (v868)
        {
          operator delete(v868);
          v844 = *v845;
        }
        v15 = a2;
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v857 = v866;
        v867 = v857 + 4;
        v12 = a6;
        v15 = a2;
      }
      a5[1] = v867;
      if (v867 >= v844)
      {
        v877 = *a5;
        v878 = (v867 - *a5) >> 2;
        v879 = v878 + 1;
        if ((unint64_t)(v878 + 1) >> 62)
          goto LABEL_2267;
        v880 = v844 - v877;
        if (v880 >> 1 > v879)
          v879 = v880 >> 1;
        if ((unint64_t)v880 >= 0x7FFFFFFFFFFFFFFCLL)
          v881 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v881 = v879;
        if (v881)
        {
          v882 = (char *)sub_1DCAE4D04((uint64_t)v845, v881);
          v877 = *a5;
          v867 = a5[1];
        }
        else
        {
          v882 = 0;
        }
        v883 = &v882[4 * v878];
        v844 = &v882[4 * v881];
        *(_DWORD *)v883 = v843;
        v876 = v883 + 4;
        while (v867 != v877)
        {
          v884 = *((_DWORD *)v867 - 1);
          v867 -= 4;
          *((_DWORD *)v883 - 1) = v884;
          v883 -= 4;
        }
        v13 = a5;
        *a5 = v883;
        a5[1] = v876;
        a5[2] = v844;
        if (v877)
        {
          operator delete(v877);
          v844 = *v845;
        }
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v867 = v843;
        v876 = v867 + 4;
        v13 = a5;
      }
      v13[1] = v876;
      v885 = v843 + 1;
      if (v876 >= v844)
      {
        v887 = *v13;
        v888 = (v876 - *v13) >> 2;
        v889 = v888 + 1;
        if ((unint64_t)(v888 + 1) >> 62)
          goto LABEL_2265;
        v890 = v844 - v887;
        if (v890 >> 1 > v889)
          v889 = v890 >> 1;
        if ((unint64_t)v890 >= 0x7FFFFFFFFFFFFFFCLL)
          v891 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v891 = v889;
        if (v891)
        {
          v892 = (char *)sub_1DCAE4D04((uint64_t)v845, v891);
          v887 = *v13;
          v876 = v13[1];
        }
        else
        {
          v892 = 0;
        }
        v893 = &v892[4 * v888];
        v844 = &v892[4 * v891];
        *(_DWORD *)v893 = v885;
        v886 = v893 + 4;
        while (v876 != v887)
        {
          v894 = *((_DWORD *)v876 - 1);
          v876 -= 4;
          *((_DWORD *)v893 - 1) = v894;
          v893 -= 4;
        }
        *v13 = v893;
        v13[1] = v886;
        v13[2] = v844;
        if (v887)
        {
          operator delete(v887);
          v844 = *v845;
        }
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v876 = v885;
        v886 = v876 + 4;
      }
      v13[1] = v886;
      if (v886 >= v844)
      {
        v896 = *v13;
        v897 = (v886 - *v13) >> 2;
        v898 = v897 + 1;
        if ((unint64_t)(v897 + 1) >> 62)
          goto LABEL_2265;
        v899 = v844 - v896;
        if (v899 >> 1 > v898)
          v898 = v899 >> 1;
        if ((unint64_t)v899 >= 0x7FFFFFFFFFFFFFFCLL)
          v900 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v900 = v898;
        if (v900)
        {
          v901 = (char *)sub_1DCAE4D04((uint64_t)v845, v900);
          v896 = *v13;
          v886 = v13[1];
        }
        else
        {
          v901 = 0;
        }
        v902 = &v901[4 * v897];
        v903 = &v901[4 * v900];
        *(_DWORD *)v902 = v856;
        v895 = v902 + 4;
        if (v886 == v896)
        {
          v14 = a3;
        }
        else
        {
          v14 = a3;
          do
          {
            v904 = *((_DWORD *)v886 - 1);
            v886 -= 4;
            *((_DWORD *)v902 - 1) = v904;
            v902 -= 4;
          }
          while (v886 != v896);
        }
        *v13 = v902;
        v13[1] = v895;
        v13[2] = v903;
        if (v896)
          operator delete(v896);
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v886 = v856;
        v895 = v886 + 4;
        v14 = a3;
      }
      v13[1] = v895;
      v16 = v1355 + 4;
      if ((v14 & 8) == 0)
        goto LABEL_7;
      goto LABEL_1518;
    }
LABEL_2266:
    sub_1DCAE4C44();
  }
LABEL_5:
  if ((v14 & 1) != 0)
    goto LABEL_1142;
LABEL_6:
  if ((v14 & 8) == 0)
  {
LABEL_7:
    if ((v14 & 4) == 0)
      return (v16 + a4);
    goto LABEL_1896;
  }
LABEL_1518:
  v906 = (char **)(v12 + 16);
  v905 = *(char **)(v12 + 16);
  v907 = *(unsigned __int32 **)(v12 + 8);
  if (v907 >= (unsigned __int32 *)v905)
  {
    v910 = *(unsigned __int32 **)v12;
    v911 = ((uint64_t)v907 - *(_QWORD *)v12) >> 2;
    v912 = v911 + 1;
    v908 = a9;
    if ((unint64_t)(v911 + 1) >> 62)
      goto LABEL_2264;
    v913 = v905 - (char *)v910;
    if (v913 >> 1 > v912)
      v912 = v913 >> 1;
    if ((unint64_t)v913 >= 0x7FFFFFFFFFFFFFFCLL)
      v914 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v914 = v912;
    if (v914)
    {
      v915 = (char *)sub_1DCAE4D04(v12 + 16, v914);
      v908 = a9;
      v916 = v915;
      v910 = *(unsigned __int32 **)v12;
      v907 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v916 = 0;
    }
    v917 = &v916[4 * v911];
    v905 = &v916[4 * v914];
    *(_DWORD *)v917 = v908.n128_u32[0];
    v909 = (unsigned __int32 *)(v917 + 4);
    while (v907 != v910)
    {
      v918 = *--v907;
      *((_DWORD *)v917 - 1) = v918;
      v917 -= 4;
    }
    *(_QWORD *)v12 = v917;
    *(_QWORD *)(v12 + 8) = v909;
    *(_QWORD *)(v12 + 16) = v905;
    if (v910)
    {
      operator delete(v910);
      v908 = a9;
      v905 = *v906;
    }
  }
  else
  {
    v908 = a9;
    *v907 = a9.n128_u32[0];
    v909 = v907 + 1;
  }
  *(_QWORD *)(v12 + 8) = v909;
  v919 = v908.n128_u32[1];
  v1356 = v16;
  if (v909 >= (unsigned __int32 *)v905)
  {
    v921 = *(unsigned __int32 **)v12;
    v922 = ((uint64_t)v909 - *(_QWORD *)v12) >> 2;
    v923 = v922 + 1;
    if ((unint64_t)(v922 + 1) >> 62)
      goto LABEL_2264;
    v924 = v905 - (char *)v921;
    if (v924 >> 1 > v923)
      v923 = v924 >> 1;
    if ((unint64_t)v924 >= 0x7FFFFFFFFFFFFFFCLL)
      v925 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v925 = v923;
    if (v925)
    {
      v926 = (char *)sub_1DCAE4D04(v12 + 16, v925);
      v921 = *(unsigned __int32 **)v12;
      v909 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v926 = 0;
    }
    v927 = (unsigned __int32 *)&v926[4 * v922];
    v905 = &v926[4 * v925];
    *v927 = v919;
    v920 = v927 + 1;
    while (v909 != v921)
    {
      v928 = *--v909;
      *--v927 = v928;
    }
    *(_QWORD *)v12 = v927;
    *(_QWORD *)(v12 + 8) = v920;
    *(_QWORD *)(v12 + 16) = v905;
    if (v921)
    {
      operator delete(v921);
      v905 = *v906;
    }
    v908 = a9;
  }
  else
  {
    *v909 = v908.n128_u32[1];
    v920 = v909 + 1;
  }
  *(_QWORD *)(v12 + 8) = v920;
  v929 = v908.n128_u32[2];
  if (v920 >= (unsigned __int32 *)v905)
  {
    v931 = *(unsigned __int32 **)v12;
    v932 = ((uint64_t)v920 - *(_QWORD *)v12) >> 2;
    v933 = v932 + 1;
    if ((unint64_t)(v932 + 1) >> 62)
      goto LABEL_2264;
    v934 = v905 - (char *)v931;
    if (v934 >> 1 > v933)
      v933 = v934 >> 1;
    if ((unint64_t)v934 >= 0x7FFFFFFFFFFFFFFCLL)
      v935 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v935 = v933;
    if (v935)
    {
      v936 = (char *)sub_1DCAE4D04(v12 + 16, v935);
      v931 = *(unsigned __int32 **)v12;
      v920 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v936 = 0;
    }
    v937 = (unsigned __int32 *)&v936[4 * v932];
    v905 = &v936[4 * v935];
    *v937 = v929;
    v930 = v937 + 1;
    while (v920 != v931)
    {
      v938 = *--v920;
      *--v937 = v938;
    }
    *(_QWORD *)v12 = v937;
    *(_QWORD *)(v12 + 8) = v930;
    *(_QWORD *)(v12 + 16) = v905;
    if (v931)
    {
      operator delete(v931);
      v905 = *v906;
    }
    v908.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    *v920 = v908.n128_u32[2];
    v930 = v920 + 1;
  }
  *(_QWORD *)(v12 + 8) = v930;
  if (v930 >= (unsigned __int32 *)v905)
  {
    v940 = *(unsigned __int32 **)v12;
    v941 = ((uint64_t)v930 - *(_QWORD *)v12) >> 2;
    v942 = v941 + 1;
    if ((unint64_t)(v941 + 1) >> 62)
      goto LABEL_2264;
    v943 = v905 - (char *)v940;
    if (v943 >> 1 > v942)
      v942 = v943 >> 1;
    if ((unint64_t)v943 >= 0x7FFFFFFFFFFFFFFCLL)
      v944 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v944 = v942;
    if (v944)
    {
      v945 = (char *)sub_1DCAE4D04(v12 + 16, v944);
      v940 = *(unsigned __int32 **)v12;
      v930 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v945 = 0;
    }
    v946 = &v945[4 * v941];
    v905 = &v945[4 * v944];
    *(_DWORD *)v946 = v1360.n128_u32[0];
    v939 = (unsigned __int32 *)(v946 + 4);
    while (v930 != v940)
    {
      v947 = *--v930;
      *((_DWORD *)v946 - 1) = v947;
      v946 -= 4;
    }
    *(_QWORD *)v12 = v946;
    *(_QWORD *)(v12 + 8) = v939;
    *(_QWORD *)(v12 + 16) = v905;
    if (v940)
    {
      operator delete(v940);
      v905 = *v906;
    }
    v908.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    *v930 = v1360.n128_u32[0];
    v939 = v930 + 1;
  }
  *(_QWORD *)(v12 + 8) = v939;
  if (v939 >= (unsigned __int32 *)v905)
  {
    v949 = *(unsigned __int32 **)v12;
    v950 = ((uint64_t)v939 - *(_QWORD *)v12) >> 2;
    v951 = v950 + 1;
    if ((unint64_t)(v950 + 1) >> 62)
      goto LABEL_2264;
    v952 = v905 - (char *)v949;
    if (v952 >> 1 > v951)
      v951 = v952 >> 1;
    if ((unint64_t)v952 >= 0x7FFFFFFFFFFFFFFCLL)
      v953 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v953 = v951;
    if (v953)
    {
      v954 = (char *)sub_1DCAE4D04(v12 + 16, v953);
      v949 = *(unsigned __int32 **)v12;
      v939 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v954 = 0;
    }
    v955 = (unsigned __int32 *)&v954[4 * v950];
    v905 = &v954[4 * v953];
    *v955 = v919;
    v948 = v955 + 1;
    while (v939 != v949)
    {
      v956 = *--v939;
      *--v955 = v956;
    }
    *(_QWORD *)v12 = v955;
    *(_QWORD *)(v12 + 8) = v948;
    *(_QWORD *)(v12 + 16) = v905;
    if (v949)
    {
      operator delete(v949);
      v905 = *v906;
    }
    v908.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    *v939 = v919;
    v948 = v939 + 1;
  }
  *(_QWORD *)(v12 + 8) = v948;
  if (v948 >= (unsigned __int32 *)v905)
  {
    v958 = *(unsigned __int32 **)v12;
    v959 = ((uint64_t)v948 - *(_QWORD *)v12) >> 2;
    v960 = v959 + 1;
    if ((unint64_t)(v959 + 1) >> 62)
      goto LABEL_2264;
    v961 = v905 - (char *)v958;
    if (v961 >> 1 > v960)
      v960 = v961 >> 1;
    if ((unint64_t)v961 >= 0x7FFFFFFFFFFFFFFCLL)
      v962 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v962 = v960;
    if (v962)
    {
      v963 = (char *)sub_1DCAE4D04(v12 + 16, v962);
      v958 = *(unsigned __int32 **)v12;
      v948 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v963 = 0;
    }
    v964 = (unsigned __int32 *)&v963[4 * v959];
    v905 = &v963[4 * v962];
    *v964 = v929;
    v957 = v964 + 1;
    while (v948 != v958)
    {
      v965 = *--v948;
      *--v964 = v965;
    }
    *(_QWORD *)v12 = v964;
    *(_QWORD *)(v12 + 8) = v957;
    *(_QWORD *)(v12 + 16) = v905;
    if (v958)
    {
      operator delete(v958);
      v905 = *v906;
    }
    v908.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    *v948 = v929;
    v957 = v948 + 1;
  }
  *(_QWORD *)(v12 + 8) = v957;
  if (v957 >= (unsigned __int32 *)v905)
  {
    v967 = *(unsigned __int32 **)v12;
    v968 = ((uint64_t)v957 - *(_QWORD *)v12) >> 2;
    v969 = v968 + 1;
    if ((unint64_t)(v968 + 1) >> 62)
      goto LABEL_2264;
    v970 = v905 - (char *)v967;
    if (v970 >> 1 > v969)
      v969 = v970 >> 1;
    if ((unint64_t)v970 >= 0x7FFFFFFFFFFFFFFCLL)
      v971 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v971 = v969;
    if (v971)
    {
      v972 = (char *)sub_1DCAE4D04(v12 + 16, v971);
      v908.n128_u32[0] = a9.n128_u32[0];
      v973 = v972;
      v967 = *(unsigned __int32 **)v12;
      v957 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v973 = 0;
    }
    v974 = &v973[4 * v968];
    v905 = &v973[4 * v971];
    *(_DWORD *)v974 = v908.n128_u32[0];
    v966 = (unsigned __int32 *)(v974 + 4);
    while (v957 != v967)
    {
      v975 = *--v957;
      *((_DWORD *)v974 - 1) = v975;
      v974 -= 4;
    }
    *(_QWORD *)v12 = v974;
    *(_QWORD *)(v12 + 8) = v966;
    *(_QWORD *)(v12 + 16) = v905;
    if (v967)
    {
      operator delete(v967);
      v905 = *v906;
    }
  }
  else
  {
    *v957 = v908.n128_u32[0];
    v966 = v957 + 1;
  }
  *(_QWORD *)(v12 + 8) = v966;
  if (v966 >= (unsigned __int32 *)v905)
  {
    v977 = *(unsigned __int32 **)v12;
    v978 = ((uint64_t)v966 - *(_QWORD *)v12) >> 2;
    v979 = v978 + 1;
    if ((unint64_t)(v978 + 1) >> 62)
      goto LABEL_2264;
    v980 = v905 - (char *)v977;
    if (v980 >> 1 > v979)
      v979 = v980 >> 1;
    if ((unint64_t)v980 >= 0x7FFFFFFFFFFFFFFCLL)
      v981 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v981 = v979;
    if (v981)
    {
      v982 = (char *)sub_1DCAE4D04(v12 + 16, v981);
      v977 = *(unsigned __int32 **)v12;
      v966 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v982 = 0;
    }
    v983 = (unsigned __int32 *)&v982[4 * v978];
    v905 = &v982[4 * v981];
    *v983 = v919;
    v976 = v983 + 1;
    while (v966 != v977)
    {
      v984 = *--v966;
      *--v983 = v984;
    }
    *(_QWORD *)v12 = v983;
    *(_QWORD *)(v12 + 8) = v976;
    *(_QWORD *)(v12 + 16) = v905;
    if (v977)
    {
      operator delete(v977);
      v905 = *v906;
    }
  }
  else
  {
    *v966 = v919;
    v976 = v966 + 1;
  }
  *(_QWORD *)(v12 + 8) = v976;
  if (v976 >= (unsigned __int32 *)v905)
  {
    v986 = *(unsigned __int32 **)v12;
    v987 = ((uint64_t)v976 - *(_QWORD *)v12) >> 2;
    v988 = v987 + 1;
    if ((unint64_t)(v987 + 1) >> 62)
      goto LABEL_2264;
    v989 = v905 - (char *)v986;
    if (v989 >> 1 > v988)
      v988 = v989 >> 1;
    if ((unint64_t)v989 >= 0x7FFFFFFFFFFFFFFCLL)
      v990 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v990 = v988;
    if (v990)
    {
      v991 = (char *)sub_1DCAE4D04(v12 + 16, v990);
      v986 = *(unsigned __int32 **)v12;
      v976 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v991 = 0;
    }
    v992 = &v991[4 * v987];
    v905 = &v991[4 * v990];
    *(_DWORD *)v992 = v1360.n128_u32[2];
    v985 = (unsigned __int32 *)(v992 + 4);
    while (v976 != v986)
    {
      v993 = *--v976;
      *((_DWORD *)v992 - 1) = v993;
      v992 -= 4;
    }
    *(_QWORD *)v12 = v992;
    *(_QWORD *)(v12 + 8) = v985;
    *(_QWORD *)(v12 + 16) = v905;
    if (v986)
    {
      operator delete(v986);
      v905 = *v906;
    }
  }
  else
  {
    *v976 = v1360.n128_u32[2];
    v985 = v976 + 1;
  }
  *(_QWORD *)(v12 + 8) = v985;
  if (v985 >= (unsigned __int32 *)v905)
  {
    v995 = *(unsigned __int32 **)v12;
    v996 = ((uint64_t)v985 - *(_QWORD *)v12) >> 2;
    v997 = v996 + 1;
    if ((unint64_t)(v996 + 1) >> 62)
      goto LABEL_2264;
    v998 = v905 - (char *)v995;
    if (v998 >> 1 > v997)
      v997 = v998 >> 1;
    if ((unint64_t)v998 >= 0x7FFFFFFFFFFFFFFCLL)
      v999 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v999 = v997;
    if (v999)
    {
      v1000 = (char *)sub_1DCAE4D04(v12 + 16, v999);
      v995 = *(unsigned __int32 **)v12;
      v985 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v1000 = 0;
    }
    v1001 = &v1000[4 * v996];
    v905 = &v1000[4 * v999];
    *(_DWORD *)v1001 = v1360.n128_u32[0];
    v994 = (unsigned __int32 *)(v1001 + 4);
    while (v985 != v995)
    {
      v1002 = *--v985;
      *((_DWORD *)v1001 - 1) = v1002;
      v1001 -= 4;
    }
    *(_QWORD *)v12 = v1001;
    *(_QWORD *)(v12 + 8) = v994;
    *(_QWORD *)(v12 + 16) = v905;
    if (v995)
    {
      operator delete(v995);
      v905 = *v906;
    }
  }
  else
  {
    *v985 = v1360.n128_u32[0];
    v994 = v985 + 1;
  }
  *(_QWORD *)(v12 + 8) = v994;
  if (v994 >= (unsigned __int32 *)v905)
  {
    v1004 = *(unsigned __int32 **)v12;
    v1005 = ((uint64_t)v994 - *(_QWORD *)v12) >> 2;
    v1006 = v1005 + 1;
    if ((unint64_t)(v1005 + 1) >> 62)
      goto LABEL_2264;
    v1007 = v905 - (char *)v1004;
    if (v1007 >> 1 > v1006)
      v1006 = v1007 >> 1;
    if ((unint64_t)v1007 >= 0x7FFFFFFFFFFFFFFCLL)
      v1008 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1008 = v1006;
    if (v1008)
    {
      v1009 = (char *)sub_1DCAE4D04(v12 + 16, v1008);
      v1004 = *(unsigned __int32 **)v12;
      v994 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v1009 = 0;
    }
    v1010 = (unsigned __int32 *)&v1009[4 * v1005];
    v905 = &v1009[4 * v1008];
    *v1010 = v919;
    v1003 = v1010 + 1;
    while (v994 != v1004)
    {
      v1011 = *--v994;
      *--v1010 = v1011;
    }
    *(_QWORD *)v12 = v1010;
    *(_QWORD *)(v12 + 8) = v1003;
    *(_QWORD *)(v12 + 16) = v905;
    if (v1004)
    {
      operator delete(v1004);
      v905 = *v906;
    }
  }
  else
  {
    *v994 = v919;
    v1003 = v994 + 1;
  }
  *(_QWORD *)(v12 + 8) = v1003;
  a10.n128_u32[1] = v1360.n128_u32[1];
  if (v1003 >= (unsigned __int32 *)v905)
  {
    v1013 = *(unsigned __int32 **)v12;
    v1014 = ((uint64_t)v1003 - *(_QWORD *)v12) >> 2;
    v1015 = v1014 + 1;
    if ((unint64_t)(v1014 + 1) >> 62)
      goto LABEL_2264;
    v1016 = v905 - (char *)v1013;
    if (v1016 >> 1 > v1015)
      v1015 = v1016 >> 1;
    if ((unint64_t)v1016 >= 0x7FFFFFFFFFFFFFFCLL)
      v1017 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1017 = v1015;
    if (v1017)
    {
      v1018 = (char *)sub_1DCAE4D04(v12 + 16, v1017);
      v1013 = *(unsigned __int32 **)v12;
      v1003 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v1018 = 0;
    }
    v1019 = &v1018[4 * v1014];
    v1020 = &v1018[4 * v1017];
    *(_DWORD *)v1019 = v1360.n128_u32[2];
    v1012 = v1019 + 4;
    while (v1003 != v1013)
    {
      v1021 = *--v1003;
      *((_DWORD *)v1019 - 1) = v1021;
      v1019 -= 4;
    }
    *(_QWORD *)v12 = v1019;
    *(_QWORD *)(v12 + 8) = v1012;
    *(_QWORD *)(v12 + 16) = v1020;
    if (v1013)
      operator delete(v1013);
    a10.n128_u32[1] = v1360.n128_u32[1];
  }
  else
  {
    *v1003 = v1360.n128_u32[2];
    v1012 = v1003 + 1;
  }
  *(_QWORD *)(v12 + 8) = v1012;
  if (a8 && a1)
  {
    v1022 = 0;
    v1023 = (_QWORD *)(a8 + 16);
    v1024 = *(_DWORD **)(a8 + 8);
    do
    {
      if ((unint64_t)v1024 >= *v1023)
      {
        v1026 = *(_DWORD **)a8;
        v1027 = ((uint64_t)v1024 - *(_QWORD *)a8) >> 2;
        v1028 = v1027 + 1;
        if ((unint64_t)(v1027 + 1) >> 62)
          goto LABEL_2263;
        v1029 = *v1023 - (_QWORD)v1026;
        if (v1029 >> 1 > v1028)
          v1028 = v1029 >> 1;
        if ((unint64_t)v1029 >= 0x7FFFFFFFFFFFFFFCLL)
          v1030 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1030 = v1028;
        if (v1030)
        {
          v1031 = (char *)sub_1DCAE4D04(a8 + 16, v1030);
          v1026 = *(_DWORD **)a8;
          v1024 = *(_DWORD **)(a8 + 8);
        }
        else
        {
          v1031 = 0;
        }
        v1032 = &v1031[4 * v1027];
        *(_DWORD *)v1032 = v15;
        v1025 = v1032 + 4;
        while (v1024 != v1026)
        {
          v1033 = *--v1024;
          *((_DWORD *)v1032 - 1) = v1033;
          v1032 -= 4;
        }
        *(_QWORD *)a8 = v1032;
        *(_QWORD *)(a8 + 8) = v1025;
        *(_QWORD *)(a8 + 16) = &v1031[4 * v1030];
        if (v1026)
          operator delete(v1026);
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *v1024 = v15;
        v1025 = v1024 + 1;
      }
      *(_QWORD *)(a8 + 8) = v1025;
      ++v1022;
      v1024 = v1025;
    }
    while (v1022 != 4);
  }
  if (a7)
  {
    v1034 = 0;
    v1035 = a7 + 2;
    v1036 = a7[1];
    do
    {
      v1037 = *v1035;
      if (v1036 >= *v1035)
      {
        v1039 = *a7;
        v1040 = (v1036 - *a7) >> 2;
        v1041 = v1040 + 1;
        if ((unint64_t)(v1040 + 1) >> 62)
          goto LABEL_2262;
        v1042 = v1037 - v1039;
        if (v1042 >> 1 > v1041)
          v1041 = v1042 >> 1;
        if ((unint64_t)v1042 >= 0x7FFFFFFFFFFFFFFCLL)
          v1043 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1043 = v1041;
        if (v1043)
        {
          v1044 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v1043);
          v1039 = *a7;
          v1036 = a7[1];
        }
        else
        {
          v1044 = 0;
        }
        v1045 = &v1044[4 * v1040];
        *(_DWORD *)v1045 = 0;
        v1038 = v1045 + 4;
        while (v1036 != v1039)
        {
          v1046 = *((_DWORD *)v1036 - 1);
          v1036 -= 4;
          *((_DWORD *)v1045 - 1) = v1046;
          v1045 -= 4;
        }
        v1037 = &v1044[4 * v1043];
        *a7 = v1045;
        a7[1] = v1038;
        a7[2] = v1037;
        if (v1039)
        {
          operator delete(v1039);
          v1037 = *v1035;
        }
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v1036 = 0;
        v1038 = v1036 + 4;
      }
      a7[1] = v1038;
      if (v1038 >= v1037)
      {
        v1048 = *a7;
        v1049 = (v1038 - *a7) >> 2;
        v1050 = v1049 + 1;
        if ((unint64_t)(v1049 + 1) >> 62)
          goto LABEL_2262;
        v1051 = v1037 - v1048;
        if (v1051 >> 1 > v1050)
          v1050 = v1051 >> 1;
        if ((unint64_t)v1051 >= 0x7FFFFFFFFFFFFFFCLL)
          v1052 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1052 = v1050;
        if (v1052)
        {
          v1053 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v1052);
          v1048 = *a7;
          v1038 = a7[1];
        }
        else
        {
          v1053 = 0;
        }
        v1054 = &v1053[4 * v1049];
        *(_DWORD *)v1054 = -1082130432;
        v1047 = v1054 + 4;
        while (v1038 != v1048)
        {
          v1055 = *((_DWORD *)v1038 - 1);
          v1038 -= 4;
          *((_DWORD *)v1054 - 1) = v1055;
          v1054 -= 4;
        }
        v1037 = &v1053[4 * v1052];
        *a7 = v1054;
        a7[1] = v1047;
        a7[2] = v1037;
        if (v1048)
        {
          operator delete(v1048);
          v1037 = *v1035;
        }
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v1038 = -1082130432;
        v1047 = v1038 + 4;
      }
      a7[1] = v1047;
      if (v1047 >= v1037)
      {
        v1056 = *a7;
        v1057 = (v1047 - *a7) >> 2;
        v1058 = v1057 + 1;
        if ((unint64_t)(v1057 + 1) >> 62)
          goto LABEL_2262;
        v1059 = v1037 - v1056;
        if (v1059 >> 1 > v1058)
          v1058 = v1059 >> 1;
        if ((unint64_t)v1059 >= 0x7FFFFFFFFFFFFFFCLL)
          v1060 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1060 = v1058;
        if (v1060)
        {
          v1061 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v1060);
          v1056 = *a7;
          v1047 = a7[1];
        }
        else
        {
          v1061 = 0;
        }
        v1062 = &v1061[4 * v1057];
        *(_DWORD *)v1062 = 0;
        v1036 = v1062 + 4;
        while (v1047 != v1056)
        {
          v1063 = *((_DWORD *)v1047 - 1);
          v1047 -= 4;
          *((_DWORD *)v1062 - 1) = v1063;
          v1062 -= 4;
        }
        *a7 = v1062;
        a7[1] = v1036;
        a7[2] = &v1061[4 * v1060];
        if (v1056)
          operator delete(v1056);
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v1047 = 0;
        v1036 = v1047 + 4;
      }
      a7[1] = v1036;
      ++v1034;
    }
    while (v1034 != 4);
  }
  v1064 = v1356 + a4;
  v1066 = a5 + 2;
  v1065 = a5[2];
  v1067 = a5[1];
  if (v1067 >= v1065)
  {
    v1069 = *a5;
    v1070 = (v1067 - *a5) >> 2;
    v1071 = v1070 + 1;
    if ((unint64_t)(v1070 + 1) >> 62)
      goto LABEL_2265;
    v1072 = v1065 - v1069;
    if (v1072 >> 1 > v1071)
      v1071 = v1072 >> 1;
    if ((unint64_t)v1072 >= 0x7FFFFFFFFFFFFFFCLL)
      v1073 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1073 = v1071;
    if (v1073)
    {
      v1074 = (char *)sub_1DCAE4D04((uint64_t)(a5 + 2), v1073);
      v1069 = *a5;
      v1067 = a5[1];
    }
    else
    {
      v1074 = 0;
    }
    v1075 = &v1074[4 * v1070];
    v1065 = &v1074[4 * v1073];
    *(_DWORD *)v1075 = v1064;
    v1068 = v1075 + 4;
    while (v1067 != v1069)
    {
      v1076 = *((_DWORD *)v1067 - 1);
      v1067 -= 4;
      *((_DWORD *)v1075 - 1) = v1076;
      v1075 -= 4;
    }
    *a5 = v1075;
    a5[1] = v1068;
    a5[2] = v1065;
    if (v1069)
    {
      operator delete(v1069);
      v1065 = *v1066;
    }
    a10.n128_u32[1] = v1360.n128_u32[1];
  }
  else
  {
    *(_DWORD *)v1067 = v1064;
    v1068 = v1067 + 4;
  }
  a5[1] = v1068;
  v1077 = v1064 + 1;
  if (v1068 >= v1065)
  {
    v1079 = *a5;
    v1080 = (v1068 - *a5) >> 2;
    v1081 = v1080 + 1;
    if ((unint64_t)(v1080 + 1) >> 62)
      goto LABEL_2265;
    v1082 = v1065 - v1079;
    if (v1082 >> 1 > v1081)
      v1081 = v1082 >> 1;
    if ((unint64_t)v1082 >= 0x7FFFFFFFFFFFFFFCLL)
      v1083 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1083 = v1081;
    if (v1083)
    {
      v1084 = (char *)sub_1DCAE4D04((uint64_t)v1066, v1083);
      v1079 = *a5;
      v1068 = a5[1];
    }
    else
    {
      v1084 = 0;
    }
    v1085 = &v1084[4 * v1080];
    v1065 = &v1084[4 * v1083];
    *(_DWORD *)v1085 = v1077;
    v1078 = v1085 + 4;
    if (v1068 == v1079)
    {
      v12 = a6;
    }
    else
    {
      v12 = a6;
      do
      {
        v1086 = *((_DWORD *)v1068 - 1);
        v1068 -= 4;
        *((_DWORD *)v1085 - 1) = v1086;
        v1085 -= 4;
      }
      while (v1068 != v1079);
    }
    *a5 = v1085;
    a5[1] = v1078;
    a5[2] = v1065;
    if (v1079)
    {
      operator delete(v1079);
      v1065 = *v1066;
    }
    a10.n128_u32[1] = v1360.n128_u32[1];
  }
  else
  {
    *(_DWORD *)v1068 = v1077;
    v1078 = v1068 + 4;
    v12 = a6;
  }
  a5[1] = v1078;
  v1087 = v1064 + 3;
  if (v1078 >= v1065)
  {
    v1089 = *a5;
    v1090 = (v1078 - *a5) >> 2;
    v1091 = v1090 + 1;
    if ((unint64_t)(v1090 + 1) >> 62)
      goto LABEL_2265;
    v1092 = v1065 - v1089;
    if (v1092 >> 1 > v1091)
      v1091 = v1092 >> 1;
    if ((unint64_t)v1092 >= 0x7FFFFFFFFFFFFFFCLL)
      v1093 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1093 = v1091;
    if (v1093)
    {
      v1094 = (char *)sub_1DCAE4D04((uint64_t)v1066, v1093);
      v1089 = *a5;
      v1078 = a5[1];
    }
    else
    {
      v1094 = 0;
    }
    v1095 = &v1094[4 * v1090];
    v1065 = &v1094[4 * v1093];
    *(_DWORD *)v1095 = v1087;
    v1088 = v1095 + 4;
    while (v1078 != v1089)
    {
      v1096 = *((_DWORD *)v1078 - 1);
      v1078 -= 4;
      *((_DWORD *)v1095 - 1) = v1096;
      v1095 -= 4;
    }
    *a5 = v1095;
    a5[1] = v1088;
    a5[2] = v1065;
    if (v1089)
    {
      operator delete(v1089);
      v1065 = *v1066;
    }
    a10.n128_u32[1] = v1360.n128_u32[1];
  }
  else
  {
    *(_DWORD *)v1078 = v1087;
    v1088 = v1078 + 4;
  }
  a5[1] = v1088;
  if (v1088 >= v1065)
  {
    v1098 = *a5;
    v1099 = (v1088 - *a5) >> 2;
    v1100 = v1099 + 1;
    if ((unint64_t)(v1099 + 1) >> 62)
      goto LABEL_2265;
    v1101 = v1065 - v1098;
    if (v1101 >> 1 > v1100)
      v1100 = v1101 >> 1;
    if ((unint64_t)v1101 >= 0x7FFFFFFFFFFFFFFCLL)
      v1102 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1102 = v1100;
    if (v1102)
    {
      v1103 = (char *)sub_1DCAE4D04((uint64_t)v1066, v1102);
      v1098 = *a5;
      v1088 = a5[1];
    }
    else
    {
      v1103 = 0;
    }
    v1104 = &v1103[4 * v1099];
    v1065 = &v1103[4 * v1102];
    *(_DWORD *)v1104 = v1064;
    v1097 = v1104 + 4;
    while (v1088 != v1098)
    {
      v1105 = *((_DWORD *)v1088 - 1);
      v1088 -= 4;
      *((_DWORD *)v1104 - 1) = v1105;
      v1104 -= 4;
    }
    *a5 = v1104;
    a5[1] = v1097;
    a5[2] = v1065;
    if (v1098)
    {
      operator delete(v1098);
      v1065 = *v1066;
    }
    a10.n128_u32[1] = v1360.n128_u32[1];
  }
  else
  {
    *(_DWORD *)v1088 = v1064;
    v1097 = v1088 + 4;
  }
  a5[1] = v1097;
  if (v1097 < v1065)
  {
    *(_DWORD *)v1097 = v1087;
    v1106 = v1097 + 4;
    v13 = a5;
    goto LABEL_1878;
  }
  v1107 = *a5;
  v1108 = (v1097 - *a5) >> 2;
  v1109 = v1108 + 1;
  if ((unint64_t)(v1108 + 1) >> 62)
LABEL_2267:
    sub_1DCAE4C44();
  v1110 = v1065 - v1107;
  if (v1110 >> 1 > v1109)
    v1109 = v1110 >> 1;
  if ((unint64_t)v1110 >= 0x7FFFFFFFFFFFFFFCLL)
    v1111 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v1111 = v1109;
  if (v1111)
  {
    v1112 = (char *)sub_1DCAE4D04((uint64_t)v1066, v1111);
    v1107 = *a5;
    v1097 = a5[1];
  }
  else
  {
    v1112 = 0;
  }
  v1113 = &v1112[4 * v1108];
  v1065 = &v1112[4 * v1111];
  *(_DWORD *)v1113 = v1087;
  v1106 = v1113 + 4;
  while (v1097 != v1107)
  {
    v1114 = *((_DWORD *)v1097 - 1);
    v1097 -= 4;
    *((_DWORD *)v1113 - 1) = v1114;
    v1113 -= 4;
  }
  v13 = a5;
  *a5 = v1113;
  a5[1] = v1106;
  a5[2] = v1065;
  if (v1107)
  {
    operator delete(v1107);
    v1065 = *v1066;
  }
  a10.n128_u32[1] = v1360.n128_u32[1];
LABEL_1878:
  v13[1] = v1106;
  v1115 = v1064 + 2;
  if (v1106 >= v1065)
  {
    v1118 = *v13;
    v1119 = (v1106 - *v13) >> 2;
    v1120 = v1119 + 1;
    v1117 = a3;
    if ((unint64_t)(v1119 + 1) >> 62)
      goto LABEL_2265;
    v1121 = v1065 - v1118;
    if (v1121 >> 1 > v1120)
      v1120 = v1121 >> 1;
    if ((unint64_t)v1121 >= 0x7FFFFFFFFFFFFFFCLL)
      v1122 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1122 = v1120;
    if (v1122)
    {
      v1123 = (char *)sub_1DCAE4D04((uint64_t)v1066, v1122);
      v1118 = *v13;
      v1106 = v13[1];
    }
    else
    {
      v1123 = 0;
    }
    v1124 = &v1123[4 * v1119];
    v1125 = &v1123[4 * v1122];
    *(_DWORD *)v1124 = v1115;
    v1116 = v1124 + 4;
    while (v1106 != v1118)
    {
      v1126 = *((_DWORD *)v1106 - 1);
      v1106 -= 4;
      *((_DWORD *)v1124 - 1) = v1126;
      v1124 -= 4;
    }
    *v13 = v1124;
    v13[1] = v1116;
    v13[2] = v1125;
    if (v1118)
      operator delete(v1118);
    a10.n128_u32[1] = v1360.n128_u32[1];
  }
  else
  {
    *(_DWORD *)v1106 = v1115;
    v1116 = v1106 + 4;
    v1117 = a3;
  }
  v13[1] = v1116;
  v16 = v1356 + 4;
  if ((v1117 & 4) != 0)
  {
LABEL_1896:
    v1128 = (char **)(v12 + 16);
    v1127 = *(char **)(v12 + 16);
    v1129 = *(unsigned __int32 **)(v12 + 8);
    if (v1129 >= (unsigned __int32 *)v1127)
    {
      v1131 = *(unsigned __int32 **)v12;
      v1132 = ((uint64_t)v1129 - *(_QWORD *)v12) >> 2;
      v1133 = v1132 + 1;
      if ((unint64_t)(v1132 + 1) >> 62)
        goto LABEL_2264;
      v1134 = v1127 - (char *)v1131;
      if (v1134 >> 1 > v1133)
        v1133 = v1134 >> 1;
      if ((unint64_t)v1134 >= 0x7FFFFFFFFFFFFFFCLL)
        v1135 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1135 = v1133;
      if (v1135)
      {
        v1136 = (char *)sub_1DCAE4D04(v12 + 16, v1135);
        v1131 = *(unsigned __int32 **)v12;
        v1129 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1136 = 0;
      }
      v1137 = &v1136[4 * v1132];
      v1127 = &v1136[4 * v1135];
      *(_DWORD *)v1137 = a9.n128_u32[0];
      v1130 = (unsigned __int32 *)(v1137 + 4);
      while (v1129 != v1131)
      {
        v1138 = *--v1129;
        *((_DWORD *)v1137 - 1) = v1138;
        v1137 -= 4;
      }
      *(_QWORD *)v12 = v1137;
      *(_QWORD *)(v12 + 8) = v1130;
      *(_QWORD *)(v12 + 16) = v1127;
      if (v1131)
      {
        operator delete(v1131);
        v1127 = *v1128;
      }
      a10.n128_u32[1] = v1360.n128_u32[1];
    }
    else
    {
      *v1129 = a9.n128_u32[0];
      v1130 = v1129 + 1;
    }
    *(_QWORD *)(v12 + 8) = v1130;
    v1139 = a10.n128_u32[1];
    v1357 = v16;
    if (v1130 >= (unsigned __int32 *)v1127)
    {
      v1141 = *(unsigned __int32 **)v12;
      v1142 = ((uint64_t)v1130 - *(_QWORD *)v12) >> 2;
      v1143 = v1142 + 1;
      if ((unint64_t)(v1142 + 1) >> 62)
        goto LABEL_2264;
      v1144 = v1127 - (char *)v1141;
      if (v1144 >> 1 > v1143)
        v1143 = v1144 >> 1;
      if ((unint64_t)v1144 >= 0x7FFFFFFFFFFFFFFCLL)
        v1145 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1145 = v1143;
      if (v1145)
      {
        v1146 = (char *)sub_1DCAE4D04(v12 + 16, v1145);
        v1141 = *(unsigned __int32 **)v12;
        v1130 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1146 = 0;
      }
      v1147 = (unsigned __int32 *)&v1146[4 * v1142];
      v1127 = &v1146[4 * v1145];
      *v1147 = v1139;
      v1140 = v1147 + 1;
      while (v1130 != v1141)
      {
        v1148 = *--v1130;
        *--v1147 = v1148;
      }
      *(_QWORD *)v12 = v1147;
      *(_QWORD *)(v12 + 8) = v1140;
      *(_QWORD *)(v12 + 16) = v1127;
      if (v1141)
      {
        operator delete(v1141);
        v1127 = *v1128;
      }
    }
    else
    {
      *v1130 = a10.n128_u32[1];
      v1140 = v1130 + 1;
    }
    v1149 = a9.n128_u32[0];
    *(_QWORD *)(v12 + 8) = v1140;
    if (v1140 >= (unsigned __int32 *)v1127)
    {
      v1151 = *(unsigned __int32 **)v12;
      v1152 = ((uint64_t)v1140 - *(_QWORD *)v12) >> 2;
      v1153 = v1152 + 1;
      if ((unint64_t)(v1152 + 1) >> 62)
        goto LABEL_2264;
      v1154 = v1127 - (char *)v1151;
      if (v1154 >> 1 > v1153)
        v1153 = v1154 >> 1;
      if ((unint64_t)v1154 >= 0x7FFFFFFFFFFFFFFCLL)
        v1155 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1155 = v1153;
      if (v1155)
      {
        v1156 = (char *)sub_1DCAE4D04(v12 + 16, v1155);
        v1151 = *(unsigned __int32 **)v12;
        v1140 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1156 = 0;
      }
      v1157 = &v1156[4 * v1152];
      v1127 = &v1156[4 * v1155];
      *(_DWORD *)v1157 = a9.n128_u32[2];
      v1150 = (unsigned __int32 *)(v1157 + 4);
      while (v1140 != v1151)
      {
        v1158 = *--v1140;
        *((_DWORD *)v1157 - 1) = v1158;
        v1157 -= 4;
      }
      *(_QWORD *)v12 = v1157;
      *(_QWORD *)(v12 + 8) = v1150;
      *(_QWORD *)(v12 + 16) = v1127;
      if (v1151)
      {
        operator delete(v1151);
        v1127 = *v1128;
      }
      v1149 = a9.n128_u32[0];
    }
    else
    {
      *v1140 = a9.n128_u32[2];
      v1150 = v1140 + 1;
    }
    *(_QWORD *)(v12 + 8) = v1150;
    if (v1150 >= (unsigned __int32 *)v1127)
    {
      v1160 = *(unsigned __int32 **)v12;
      v1161 = ((uint64_t)v1150 - *(_QWORD *)v12) >> 2;
      v1162 = v1161 + 1;
      if ((unint64_t)(v1161 + 1) >> 62)
        goto LABEL_2264;
      v1163 = v1127 - (char *)v1160;
      if (v1163 >> 1 > v1162)
        v1162 = v1163 >> 1;
      if ((unint64_t)v1163 >= 0x7FFFFFFFFFFFFFFCLL)
        v1164 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1164 = v1162;
      if (v1164)
      {
        v1165 = (char *)sub_1DCAE4D04(v12 + 16, v1164);
        v1160 = *(unsigned __int32 **)v12;
        v1150 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1165 = 0;
      }
      v1166 = &v1165[4 * v1161];
      v1127 = &v1165[4 * v1164];
      *(_DWORD *)v1166 = v1360.n128_u32[0];
      v1159 = (unsigned __int32 *)(v1166 + 4);
      while (v1150 != v1160)
      {
        v1167 = *--v1150;
        *((_DWORD *)v1166 - 1) = v1167;
        v1166 -= 4;
      }
      *(_QWORD *)v12 = v1166;
      *(_QWORD *)(v12 + 8) = v1159;
      *(_QWORD *)(v12 + 16) = v1127;
      if (v1160)
      {
        operator delete(v1160);
        v1127 = *v1128;
      }
      v1149 = a9.n128_u32[0];
    }
    else
    {
      *v1150 = v1360.n128_u32[0];
      v1159 = v1150 + 1;
    }
    *(_QWORD *)(v12 + 8) = v1159;
    if (v1159 >= (unsigned __int32 *)v1127)
    {
      v1169 = *(unsigned __int32 **)v12;
      v1170 = ((uint64_t)v1159 - *(_QWORD *)v12) >> 2;
      v1171 = v1170 + 1;
      if ((unint64_t)(v1170 + 1) >> 62)
        goto LABEL_2264;
      v1172 = v1127 - (char *)v1169;
      if (v1172 >> 1 > v1171)
        v1171 = v1172 >> 1;
      if ((unint64_t)v1172 >= 0x7FFFFFFFFFFFFFFCLL)
        v1173 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1173 = v1171;
      if (v1173)
      {
        v1174 = (char *)sub_1DCAE4D04(v12 + 16, v1173);
        v1169 = *(unsigned __int32 **)v12;
        v1159 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1174 = 0;
      }
      v1175 = (unsigned __int32 *)&v1174[4 * v1170];
      v1127 = &v1174[4 * v1173];
      *v1175 = v1139;
      v1168 = v1175 + 1;
      while (v1159 != v1169)
      {
        v1176 = *--v1159;
        *--v1175 = v1176;
      }
      *(_QWORD *)v12 = v1175;
      *(_QWORD *)(v12 + 8) = v1168;
      *(_QWORD *)(v12 + 16) = v1127;
      if (v1169)
      {
        operator delete(v1169);
        v1127 = *v1128;
      }
      v1149 = a9.n128_u32[0];
    }
    else
    {
      *v1159 = v1139;
      v1168 = v1159 + 1;
    }
    *(_QWORD *)(v12 + 8) = v1168;
    if (v1168 >= (unsigned __int32 *)v1127)
    {
      v1178 = *(unsigned __int32 **)v12;
      v1179 = ((uint64_t)v1168 - *(_QWORD *)v12) >> 2;
      v1180 = v1179 + 1;
      if ((unint64_t)(v1179 + 1) >> 62)
        goto LABEL_2264;
      v1181 = v1127 - (char *)v1178;
      if (v1181 >> 1 > v1180)
        v1180 = v1181 >> 1;
      if ((unint64_t)v1181 >= 0x7FFFFFFFFFFFFFFCLL)
        v1182 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1182 = v1180;
      if (v1182)
      {
        v1183 = (char *)sub_1DCAE4D04(v12 + 16, v1182);
        v1178 = *(unsigned __int32 **)v12;
        v1168 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1183 = 0;
      }
      v1184 = &v1183[4 * v1179];
      v1127 = &v1183[4 * v1182];
      *(_DWORD *)v1184 = a9.n128_u32[2];
      v1177 = (unsigned __int32 *)(v1184 + 4);
      while (v1168 != v1178)
      {
        v1185 = *--v1168;
        *((_DWORD *)v1184 - 1) = v1185;
        v1184 -= 4;
      }
      *(_QWORD *)v12 = v1184;
      *(_QWORD *)(v12 + 8) = v1177;
      *(_QWORD *)(v12 + 16) = v1127;
      if (v1178)
      {
        operator delete(v1178);
        v1127 = *v1128;
      }
      v1149 = a9.n128_u32[0];
    }
    else
    {
      *v1168 = a9.n128_u32[2];
      v1177 = v1168 + 1;
    }
    *(_QWORD *)(v12 + 8) = v1177;
    if (v1177 >= (unsigned __int32 *)v1127)
    {
      v1187 = *(unsigned __int32 **)v12;
      v1188 = ((uint64_t)v1177 - *(_QWORD *)v12) >> 2;
      v1189 = v1188 + 1;
      if ((unint64_t)(v1188 + 1) >> 62)
        goto LABEL_2264;
      v1190 = v1127 - (char *)v1187;
      if (v1190 >> 1 > v1189)
        v1189 = v1190 >> 1;
      if ((unint64_t)v1190 >= 0x7FFFFFFFFFFFFFFCLL)
        v1191 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1191 = v1189;
      if (v1191)
      {
        v1192 = (char *)sub_1DCAE4D04(v12 + 16, v1191);
        v1149 = a9.n128_u32[0];
        v1193 = v1192;
        v1187 = *(unsigned __int32 **)v12;
        v1177 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1193 = 0;
      }
      v1194 = (unsigned __int32 *)&v1193[4 * v1188];
      v1127 = &v1193[4 * v1191];
      *v1194 = v1149;
      v1186 = v1194 + 1;
      while (v1177 != v1187)
      {
        v1195 = *--v1177;
        *--v1194 = v1195;
      }
      *(_QWORD *)v12 = v1194;
      *(_QWORD *)(v12 + 8) = v1186;
      *(_QWORD *)(v12 + 16) = v1127;
      if (v1187)
      {
        operator delete(v1187);
        v1127 = *v1128;
      }
    }
    else
    {
      *v1177 = v1149;
      v1186 = v1177 + 1;
    }
    *(_QWORD *)(v12 + 8) = v1186;
    if (v1186 >= (unsigned __int32 *)v1127)
    {
      v1197 = *(unsigned __int32 **)v12;
      v1198 = ((uint64_t)v1186 - *(_QWORD *)v12) >> 2;
      v1199 = v1198 + 1;
      if ((unint64_t)(v1198 + 1) >> 62)
        goto LABEL_2264;
      v1200 = v1127 - (char *)v1197;
      if (v1200 >> 1 > v1199)
        v1199 = v1200 >> 1;
      if ((unint64_t)v1200 >= 0x7FFFFFFFFFFFFFFCLL)
        v1201 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1201 = v1199;
      if (v1201)
      {
        v1202 = (char *)sub_1DCAE4D04(v12 + 16, v1201);
        v1197 = *(unsigned __int32 **)v12;
        v1186 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1202 = 0;
      }
      v1203 = (unsigned __int32 *)&v1202[4 * v1198];
      v1127 = &v1202[4 * v1201];
      *v1203 = v1139;
      v1196 = v1203 + 1;
      while (v1186 != v1197)
      {
        v1204 = *--v1186;
        *--v1203 = v1204;
      }
      *(_QWORD *)v12 = v1203;
      *(_QWORD *)(v12 + 8) = v1196;
      *(_QWORD *)(v12 + 16) = v1127;
      if (v1197)
      {
        operator delete(v1197);
        v1127 = *v1128;
      }
    }
    else
    {
      *v1186 = v1139;
      v1196 = v1186 + 1;
    }
    *(_QWORD *)(v12 + 8) = v1196;
    if (v1196 >= (unsigned __int32 *)v1127)
    {
      v1206 = *(unsigned __int32 **)v12;
      v1207 = ((uint64_t)v1196 - *(_QWORD *)v12) >> 2;
      v1208 = v1207 + 1;
      if ((unint64_t)(v1207 + 1) >> 62)
        goto LABEL_2264;
      v1209 = v1127 - (char *)v1206;
      if (v1209 >> 1 > v1208)
        v1208 = v1209 >> 1;
      if ((unint64_t)v1209 >= 0x7FFFFFFFFFFFFFFCLL)
        v1210 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1210 = v1208;
      if (v1210)
      {
        v1211 = (char *)sub_1DCAE4D04(v12 + 16, v1210);
        v1206 = *(unsigned __int32 **)v12;
        v1196 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1211 = 0;
      }
      v1212 = &v1211[4 * v1207];
      v1127 = &v1211[4 * v1210];
      *(_DWORD *)v1212 = v1360.n128_u32[2];
      v1205 = (unsigned __int32 *)(v1212 + 4);
      while (v1196 != v1206)
      {
        v1213 = *--v1196;
        *((_DWORD *)v1212 - 1) = v1213;
        v1212 -= 4;
      }
      *(_QWORD *)v12 = v1212;
      *(_QWORD *)(v12 + 8) = v1205;
      *(_QWORD *)(v12 + 16) = v1127;
      if (v1206)
      {
        operator delete(v1206);
        v1127 = *v1128;
      }
    }
    else
    {
      *v1196 = v1360.n128_u32[2];
      v1205 = v1196 + 1;
    }
    *(_QWORD *)(v12 + 8) = v1205;
    if (v1205 >= (unsigned __int32 *)v1127)
    {
      v1215 = *(unsigned __int32 **)v12;
      v1216 = ((uint64_t)v1205 - *(_QWORD *)v12) >> 2;
      v1217 = v1216 + 1;
      if ((unint64_t)(v1216 + 1) >> 62)
        goto LABEL_2264;
      v1218 = v1127 - (char *)v1215;
      if (v1218 >> 1 > v1217)
        v1217 = v1218 >> 1;
      if ((unint64_t)v1218 >= 0x7FFFFFFFFFFFFFFCLL)
        v1219 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1219 = v1217;
      if (v1219)
      {
        v1220 = (char *)sub_1DCAE4D04(v12 + 16, v1219);
        v1215 = *(unsigned __int32 **)v12;
        v1205 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1220 = 0;
      }
      v1221 = &v1220[4 * v1216];
      v1127 = &v1220[4 * v1219];
      *(_DWORD *)v1221 = v1360.n128_u32[0];
      v1214 = (unsigned __int32 *)(v1221 + 4);
      while (v1205 != v1215)
      {
        v1222 = *--v1205;
        *((_DWORD *)v1221 - 1) = v1222;
        v1221 -= 4;
      }
      *(_QWORD *)v12 = v1221;
      *(_QWORD *)(v12 + 8) = v1214;
      *(_QWORD *)(v12 + 16) = v1127;
      if (v1215)
      {
        operator delete(v1215);
        v1127 = *v1128;
      }
    }
    else
    {
      *v1205 = v1360.n128_u32[0];
      v1214 = v1205 + 1;
    }
    *(_QWORD *)(v12 + 8) = v1214;
    if (v1214 >= (unsigned __int32 *)v1127)
    {
      v1224 = *(unsigned __int32 **)v12;
      v1225 = ((uint64_t)v1214 - *(_QWORD *)v12) >> 2;
      v1226 = v1225 + 1;
      if ((unint64_t)(v1225 + 1) >> 62)
        goto LABEL_2264;
      v1227 = v1127 - (char *)v1224;
      if (v1227 >> 1 > v1226)
        v1226 = v1227 >> 1;
      if ((unint64_t)v1227 >= 0x7FFFFFFFFFFFFFFCLL)
        v1228 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1228 = v1226;
      if (v1228)
      {
        v1229 = (char *)sub_1DCAE4D04(v12 + 16, v1228);
        v1224 = *(unsigned __int32 **)v12;
        v1214 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1229 = 0;
      }
      v1230 = (unsigned __int32 *)&v1229[4 * v1225];
      v1127 = &v1229[4 * v1228];
      *v1230 = v1139;
      v1223 = v1230 + 1;
      while (v1214 != v1224)
      {
        v1231 = *--v1214;
        *--v1230 = v1231;
      }
      *(_QWORD *)v12 = v1230;
      *(_QWORD *)(v12 + 8) = v1223;
      *(_QWORD *)(v12 + 16) = v1127;
      if (v1224)
      {
        operator delete(v1224);
        v1127 = *v1128;
      }
    }
    else
    {
      *v1214 = v1139;
      v1223 = v1214 + 1;
    }
    *(_QWORD *)(v12 + 8) = v1223;
    if (v1223 < (unsigned __int32 *)v1127)
    {
      *v1223 = v1360.n128_u32[2];
      v1232 = v1223 + 1;
      v1233 = a2;
      goto LABEL_2093;
    }
    v1234 = *(unsigned __int32 **)v12;
    v1235 = ((uint64_t)v1223 - *(_QWORD *)v12) >> 2;
    v1236 = v1235 + 1;
    if (!((unint64_t)(v1235 + 1) >> 62))
    {
      v1237 = v1127 - (char *)v1234;
      if (v1237 >> 1 > v1236)
        v1236 = v1237 >> 1;
      if ((unint64_t)v1237 >= 0x7FFFFFFFFFFFFFFCLL)
        v1238 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1238 = v1236;
      if (v1238)
      {
        v1239 = (char *)sub_1DCAE4D04(v12 + 16, v1238);
        v1234 = *(unsigned __int32 **)v12;
        v1223 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1239 = 0;
      }
      v1233 = a2;
      v1240 = &v1239[4 * v1235];
      v1241 = &v1239[4 * v1238];
      *(_DWORD *)v1240 = v1360.n128_u32[2];
      v1232 = v1240 + 4;
      while (v1223 != v1234)
      {
        v1242 = *--v1223;
        *((_DWORD *)v1240 - 1) = v1242;
        v1240 -= 4;
      }
      *(_QWORD *)v12 = v1240;
      *(_QWORD *)(v12 + 8) = v1232;
      *(_QWORD *)(v12 + 16) = v1241;
      if (v1234)
        operator delete(v1234);
LABEL_2093:
      *(_QWORD *)(v12 + 8) = v1232;
      if (a8 && a1)
      {
        v1243 = 0;
        v1244 = (_QWORD *)(a8 + 16);
        v1245 = *(_DWORD **)(a8 + 8);
        do
        {
          if ((unint64_t)v1245 >= *v1244)
          {
            v1247 = *(_DWORD **)a8;
            v1248 = ((uint64_t)v1245 - *(_QWORD *)a8) >> 2;
            v1249 = v1248 + 1;
            if ((unint64_t)(v1248 + 1) >> 62)
              goto LABEL_2263;
            v1250 = *v1244 - (_QWORD)v1247;
            if (v1250 >> 1 > v1249)
              v1249 = v1250 >> 1;
            if ((unint64_t)v1250 >= 0x7FFFFFFFFFFFFFFCLL)
              v1251 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v1251 = v1249;
            if (v1251)
            {
              v1252 = (char *)sub_1DCAE4D04(a8 + 16, v1251);
              v1247 = *(_DWORD **)a8;
              v1245 = *(_DWORD **)(a8 + 8);
            }
            else
            {
              v1252 = 0;
            }
            v1253 = &v1252[4 * v1248];
            *(_DWORD *)v1253 = v1233;
            v1246 = v1253 + 4;
            while (v1245 != v1247)
            {
              v1254 = *--v1245;
              *((_DWORD *)v1253 - 1) = v1254;
              v1253 -= 4;
            }
            *(_QWORD *)a8 = v1253;
            *(_QWORD *)(a8 + 8) = v1246;
            *(_QWORD *)(a8 + 16) = &v1252[4 * v1251];
            if (v1247)
              operator delete(v1247);
          }
          else
          {
            *v1245 = v1233;
            v1246 = v1245 + 1;
          }
          *(_QWORD *)(a8 + 8) = v1246;
          ++v1243;
          v1245 = v1246;
        }
        while (v1243 != 4);
      }
      if (a7)
      {
        v1255 = 0;
        v1256 = a7 + 2;
        v1257 = a7[1];
        do
        {
          v1258 = *v1256;
          if (v1257 >= *v1256)
          {
            v1260 = *a7;
            v1261 = (v1257 - *a7) >> 2;
            v1262 = v1261 + 1;
            if ((unint64_t)(v1261 + 1) >> 62)
              goto LABEL_2262;
            v1263 = v1258 - v1260;
            if (v1263 >> 1 > v1262)
              v1262 = v1263 >> 1;
            if ((unint64_t)v1263 >= 0x7FFFFFFFFFFFFFFCLL)
              v1264 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v1264 = v1262;
            if (v1264)
            {
              v1265 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v1264);
              v1260 = *a7;
              v1257 = a7[1];
            }
            else
            {
              v1265 = 0;
            }
            v1266 = &v1265[4 * v1261];
            *(_DWORD *)v1266 = 0;
            v1259 = v1266 + 4;
            while (v1257 != v1260)
            {
              v1267 = *((_DWORD *)v1257 - 1);
              v1257 -= 4;
              *((_DWORD *)v1266 - 1) = v1267;
              v1266 -= 4;
            }
            v1258 = &v1265[4 * v1264];
            *a7 = v1266;
            a7[1] = v1259;
            a7[2] = v1258;
            if (v1260)
            {
              operator delete(v1260);
              v1258 = *v1256;
            }
          }
          else
          {
            *(_DWORD *)v1257 = 0;
            v1259 = v1257 + 4;
          }
          a7[1] = v1259;
          if (v1259 >= v1258)
          {
            v1269 = *a7;
            v1270 = (v1259 - *a7) >> 2;
            v1271 = v1270 + 1;
            if ((unint64_t)(v1270 + 1) >> 62)
              goto LABEL_2262;
            v1272 = v1258 - v1269;
            if (v1272 >> 1 > v1271)
              v1271 = v1272 >> 1;
            if ((unint64_t)v1272 >= 0x7FFFFFFFFFFFFFFCLL)
              v1273 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v1273 = v1271;
            if (v1273)
            {
              v1274 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v1273);
              v1269 = *a7;
              v1259 = a7[1];
            }
            else
            {
              v1274 = 0;
            }
            v1275 = &v1274[4 * v1270];
            *(_DWORD *)v1275 = 1065353216;
            v1268 = v1275 + 4;
            while (v1259 != v1269)
            {
              v1276 = *((_DWORD *)v1259 - 1);
              v1259 -= 4;
              *((_DWORD *)v1275 - 1) = v1276;
              v1275 -= 4;
            }
            v1258 = &v1274[4 * v1273];
            *a7 = v1275;
            a7[1] = v1268;
            a7[2] = v1258;
            if (v1269)
            {
              operator delete(v1269);
              v1258 = *v1256;
            }
          }
          else
          {
            *(_DWORD *)v1259 = 1065353216;
            v1268 = v1259 + 4;
          }
          a7[1] = v1268;
          if (v1268 >= v1258)
          {
            v1277 = *a7;
            v1278 = (v1268 - *a7) >> 2;
            v1279 = v1278 + 1;
            if ((unint64_t)(v1278 + 1) >> 62)
              goto LABEL_2262;
            v1280 = v1258 - v1277;
            if (v1280 >> 1 > v1279)
              v1279 = v1280 >> 1;
            if ((unint64_t)v1280 >= 0x7FFFFFFFFFFFFFFCLL)
              v1281 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v1281 = v1279;
            if (v1281)
            {
              v1282 = (char *)sub_1DCAE4D04((uint64_t)(a7 + 2), v1281);
              v1277 = *a7;
              v1268 = a7[1];
            }
            else
            {
              v1282 = 0;
            }
            v1283 = &v1282[4 * v1278];
            *(_DWORD *)v1283 = 0;
            v1257 = v1283 + 4;
            while (v1268 != v1277)
            {
              v1284 = *((_DWORD *)v1268 - 1);
              v1268 -= 4;
              *((_DWORD *)v1283 - 1) = v1284;
              v1283 -= 4;
            }
            *a7 = v1283;
            a7[1] = v1257;
            a7[2] = &v1282[4 * v1281];
            if (v1277)
              operator delete(v1277);
          }
          else
          {
            *(_DWORD *)v1268 = 0;
            v1257 = v1268 + 4;
          }
          a7[1] = v1257;
          ++v1255;
        }
        while (v1255 != 4);
      }
      v1285 = v1357 + a4;
      v1287 = v13 + 2;
      v1286 = v13[2];
      v1288 = v13[1];
      if (v1288 >= v1286)
      {
        v1290 = *v13;
        v1291 = (v1288 - *v13) >> 2;
        v1292 = v1291 + 1;
        if ((unint64_t)(v1291 + 1) >> 62)
          goto LABEL_2265;
        v1293 = v1286 - v1290;
        if (v1293 >> 1 > v1292)
          v1292 = v1293 >> 1;
        if ((unint64_t)v1293 >= 0x7FFFFFFFFFFFFFFCLL)
          v1294 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1294 = v1292;
        if (v1294)
        {
          v1295 = (char *)sub_1DCAE4D04((uint64_t)(v13 + 2), v1294);
          v1290 = *v13;
          v1288 = v13[1];
        }
        else
        {
          v1295 = 0;
        }
        v1296 = &v1295[4 * v1291];
        v1286 = &v1295[4 * v1294];
        *(_DWORD *)v1296 = v1285;
        v1289 = v1296 + 4;
        while (v1288 != v1290)
        {
          v1297 = *((_DWORD *)v1288 - 1);
          v1288 -= 4;
          *((_DWORD *)v1296 - 1) = v1297;
          v1296 -= 4;
        }
        *v13 = v1296;
        v13[1] = v1289;
        v13[2] = v1286;
        if (v1290)
        {
          operator delete(v1290);
          v1286 = *v1287;
        }
      }
      else
      {
        *(_DWORD *)v1288 = v1285;
        v1289 = v1288 + 4;
      }
      v13[1] = v1289;
      v1298 = v1285 + 2;
      if (v1289 >= v1286)
      {
        v1300 = *v13;
        v1301 = (v1289 - *v13) >> 2;
        v1302 = v1301 + 1;
        if ((unint64_t)(v1301 + 1) >> 62)
          goto LABEL_2265;
        v1303 = v1286 - v1300;
        if (v1303 >> 1 > v1302)
          v1302 = v1303 >> 1;
        if ((unint64_t)v1303 >= 0x7FFFFFFFFFFFFFFCLL)
          v1304 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1304 = v1302;
        if (v1304)
        {
          v1305 = (char *)sub_1DCAE4D04((uint64_t)(v13 + 2), v1304);
          v1300 = *v13;
          v1289 = v13[1];
        }
        else
        {
          v1305 = 0;
        }
        v1306 = &v1305[4 * v1301];
        v1286 = &v1305[4 * v1304];
        *(_DWORD *)v1306 = v1298;
        v1299 = v1306 + 4;
        while (v1289 != v1300)
        {
          v1307 = *((_DWORD *)v1289 - 1);
          v1289 -= 4;
          *((_DWORD *)v1306 - 1) = v1307;
          v1306 -= 4;
        }
        *v13 = v1306;
        v13[1] = v1299;
        v13[2] = v1286;
        if (v1300)
        {
          operator delete(v1300);
          v1286 = *v1287;
        }
      }
      else
      {
        *(_DWORD *)v1289 = v1298;
        v1299 = v1289 + 4;
      }
      v13[1] = v1299;
      v1308 = v1285 + 1;
      if (v1299 >= v1286)
      {
        v1310 = *v13;
        v1311 = (v1299 - *v13) >> 2;
        v1312 = v1311 + 1;
        if ((unint64_t)(v1311 + 1) >> 62)
          goto LABEL_2265;
        v1313 = v1286 - v1310;
        if (v1313 >> 1 > v1312)
          v1312 = v1313 >> 1;
        if ((unint64_t)v1313 >= 0x7FFFFFFFFFFFFFFCLL)
          v1314 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1314 = v1312;
        if (v1314)
        {
          v1315 = (char *)sub_1DCAE4D04((uint64_t)(v13 + 2), v1314);
          v1310 = *v13;
          v1299 = v13[1];
        }
        else
        {
          v1315 = 0;
        }
        v1316 = &v1315[4 * v1311];
        v1286 = &v1315[4 * v1314];
        *(_DWORD *)v1316 = v1308;
        v1309 = v1316 + 4;
        while (v1299 != v1310)
        {
          v1317 = *((_DWORD *)v1299 - 1);
          v1299 -= 4;
          *((_DWORD *)v1316 - 1) = v1317;
          v1316 -= 4;
        }
        *v13 = v1316;
        v13[1] = v1309;
        v13[2] = v1286;
        if (v1310)
        {
          operator delete(v1310);
          v1286 = *v1287;
        }
      }
      else
      {
        *(_DWORD *)v1299 = v1308;
        v1309 = v1299 + 4;
      }
      v13[1] = v1309;
      if (v1309 >= v1286)
      {
        v1319 = *v13;
        v1320 = (v1309 - *v13) >> 2;
        v1321 = v1320 + 1;
        if ((unint64_t)(v1320 + 1) >> 62)
          goto LABEL_2265;
        v1322 = v1286 - v1319;
        if (v1322 >> 1 > v1321)
          v1321 = v1322 >> 1;
        if ((unint64_t)v1322 >= 0x7FFFFFFFFFFFFFFCLL)
          v1323 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1323 = v1321;
        if (v1323)
        {
          v1324 = (char *)sub_1DCAE4D04((uint64_t)(v13 + 2), v1323);
          v1319 = *v13;
          v1309 = v13[1];
        }
        else
        {
          v1324 = 0;
        }
        v1325 = &v1324[4 * v1320];
        v1286 = &v1324[4 * v1323];
        *(_DWORD *)v1325 = v1308;
        v1318 = v1325 + 4;
        while (v1309 != v1319)
        {
          v1326 = *((_DWORD *)v1309 - 1);
          v1309 -= 4;
          *((_DWORD *)v1325 - 1) = v1326;
          v1325 -= 4;
        }
        *v13 = v1325;
        v13[1] = v1318;
        v13[2] = v1286;
        if (v1319)
        {
          operator delete(v1319);
          v1286 = *v1287;
        }
      }
      else
      {
        *(_DWORD *)v1309 = v1308;
        v1318 = v1309 + 4;
      }
      v13[1] = v1318;
      if (v1318 >= v1286)
      {
        v1328 = *v13;
        v1329 = (v1318 - *v13) >> 2;
        v1330 = v1329 + 1;
        if ((unint64_t)(v1329 + 1) >> 62)
          goto LABEL_2265;
        v1331 = v1286 - v1328;
        if (v1331 >> 1 > v1330)
          v1330 = v1331 >> 1;
        if ((unint64_t)v1331 >= 0x7FFFFFFFFFFFFFFCLL)
          v1332 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1332 = v1330;
        if (v1332)
        {
          v1333 = (char *)sub_1DCAE4D04((uint64_t)(v13 + 2), v1332);
          v1328 = *v13;
          v1318 = v13[1];
        }
        else
        {
          v1333 = 0;
        }
        v1334 = &v1333[4 * v1329];
        v1286 = &v1333[4 * v1332];
        *(_DWORD *)v1334 = v1298;
        v1327 = v1334 + 4;
        while (v1318 != v1328)
        {
          v1335 = *((_DWORD *)v1318 - 1);
          v1318 -= 4;
          *((_DWORD *)v1334 - 1) = v1335;
          v1334 -= 4;
        }
        *v13 = v1334;
        v13[1] = v1327;
        v13[2] = v1286;
        if (v1328)
        {
          operator delete(v1328);
          v1286 = *v1287;
        }
      }
      else
      {
        *(_DWORD *)v1318 = v1298;
        v1327 = v1318 + 4;
      }
      v13[1] = v1327;
      v1336 = v1285 + 3;
      if (v1327 < v1286)
      {
        *(_DWORD *)v1327 = v1336;
        v1337 = v1327 + 4;
LABEL_2260:
        v13[1] = v1337;
        v16 = v1357 + 4;
        return (v16 + a4);
      }
      v1338 = *v13;
      v1339 = (v1327 - *v13) >> 2;
      v1340 = v1339 + 1;
      if (!((unint64_t)(v1339 + 1) >> 62))
      {
        v1341 = v1286 - v1338;
        if (v1341 >> 1 > v1340)
          v1340 = v1341 >> 1;
        if ((unint64_t)v1341 >= 0x7FFFFFFFFFFFFFFCLL)
          v1342 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1342 = v1340;
        if (v1342)
        {
          v1343 = (char *)sub_1DCAE4D04((uint64_t)(v13 + 2), v1342);
          v1338 = *v13;
          v1327 = v13[1];
        }
        else
        {
          v1343 = 0;
        }
        v1344 = &v1343[4 * v1339];
        v1345 = &v1343[4 * v1342];
        *(_DWORD *)v1344 = v1336;
        v1337 = v1344 + 4;
        while (v1327 != v1338)
        {
          v1346 = *((_DWORD *)v1327 - 1);
          v1327 -= 4;
          *((_DWORD *)v1344 - 1) = v1346;
          v1344 -= 4;
        }
        *v13 = v1344;
        v13[1] = v1337;
        v13[2] = v1345;
        if (v1338)
          operator delete(v1338);
        goto LABEL_2260;
      }
LABEL_2265:
      sub_1DCAE4C44();
    }
LABEL_2264:
    sub_1DCAE4C44();
  }
  return (v16 + a4);
}

void sub_1DCBD0B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;

  if (__p)
    operator delete(__p);
  if (a38)
    operator delete(a38);
  if (a41)
    operator delete(a41);

  _Unwind_Resume(a1);
}

void sub_1DCBD1064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DCBD12CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DCBD158C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1DCBD17D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1DCBD192C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  sub_1DCAE8490((_QWORD *)a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void sub_1DCBD19CC(uint64_t a1, _QWORD *a2)
{
  void *v3;

  if (a2)
  {
    sub_1DCAE5EA8(a2 + 10, 0);
    v3 = (void *)a2[6];
    if (v3)
    {
      a2[7] = v3;
      operator delete(v3);
    }
    JUMPOUT(0x1DF0D228CLL);
  }
}

_QWORD *sub_1DCBD1A20(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = *a2;
      if (v5 >= v6)
        v8 = v5 % v6;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v5)
          {
            if (v10[2] == v5)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *(_QWORD *)a3;
  *((_DWORD *)v10 + 6) = *(_DWORD *)(a3 + 8);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_1DCAD4EF4(a1, v17);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v8) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6)
        v20 %= v6;
    }
    else
    {
      v20 &= v6 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1DCBD1C30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCBD1C44(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = *a2;
      if (v5 >= v6)
        v8 = v5 % v6;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v5)
        {
          if (i[2] == v5)
            return i;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6)
              v11 %= v6;
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  else
  {
    v8 = 0;
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v5;
  *((_OWORD *)i + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_1DCAD4EF4(a1, v17);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v8) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6)
        v20 %= v6;
    }
    else
    {
      v20 &= v6 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1DCBD1E4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBD1E60(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v9 = a2[2];
      v8[2] = v9;
      *((_DWORD *)v8 + 6) = *((_DWORD *)a2 + 6);
      v10 = (uint64_t *)*v8;
      v8[1] = v9;
      v11 = sub_1DCAE7F94((uint64_t)a1, v9, v8 + 2);
      sub_1DCAE80E8(a1, v8, v11);
      a2 = (uint64_t *)*a2;
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v12 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_1DCBD1F70(a1, (_OWORD *)a2 + 1);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1DCBD1F3C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1DCBD1F5C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCBD1F70(_QWORD *a1, _OWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v4 = operator new(0x20uLL);
  *((_OWORD *)v4 + 1) = *a2;
  v5 = v4[2];
  *v4 = 0;
  v4[1] = v5;
  v6 = sub_1DCAE7F94((uint64_t)a1, v5, v4 + 2);
  sub_1DCAE80E8(a1, v4, v6);
  return v4;
}

void sub_1DCBD1FD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBD212C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const char *sub_1DCBD213C(uint64_t a1)
{
  const char *result;
  uint64_t v2;

  if (a1 <= 458752)
  {
    if (a1 > 0x40000)
    {
      switch(a1)
      {
        case 262145:
          result = "Char1Norm";
          break;
        case 262146:
          result = "Char2Norm";
          break;
        case 262147:
        case 262148:
          result = "Char3Norm";
          break;
        default:
          switch(a1)
          {
            case 327681:
              result = "UShort1";
              break;
            case 327682:
              result = "UShor2";
              break;
            case 327683:
              result = "UShor3";
              break;
            case 327684:
              result = "UShort4";
              break;
            default:
              switch(a1)
              {
                case 393217:
                  result = "Short1";
                  break;
                case 393218:
                  result = "Short2";
                  break;
                case 393219:
                  result = "Short3";
                  break;
                case 393220:
                  result = "Short4";
                  break;
                default:
LABEL_75:
                  result = 0;
                  break;
              }
              break;
          }
          break;
      }
    }
    else if (a1 <= 0x20000)
    {
      v2 = a1 - 65537;
      result = "UChar1";
      switch(v2)
      {
        case 0:
          return result;
        case 1:
          result = "UChar2";
          break;
        case 2:
          result = "UChar3";
          break;
        case 3:
          result = "UChar4";
          break;
        default:
          if ("UChar1")
            goto LABEL_75;
          result = "Invalid";
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 131073:
          result = "Char1";
          break;
        case 131074:
          result = "Char2";
          break;
        case 131075:
          result = "Char3";
          break;
        case 131076:
          result = "Char4";
          break;
        default:
          switch(a1)
          {
            case 196609:
              result = "UChar1Norm";
              break;
            case 196610:
              result = "UChar2Norm";
              break;
            case 196611:
              result = "UChar3Norm";
              break;
            case 196612:
              result = "UChar4Norm";
              break;
            default:
              goto LABEL_75;
          }
          break;
      }
    }
  }
  else if (a1 > 655360)
  {
    if (a1 <= 720896)
    {
      switch(a1)
      {
        case 655361:
          result = "Int1";
          break;
        case 655362:
          result = "Int2";
          break;
        case 655363:
          result = "Int3";
          break;
        case 655364:
          result = "Int4";
          break;
        default:
          if (a1 != 659460)
            goto LABEL_75;
          result = "Int1010102Norm";
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 720897:
          result = "Half1";
          break;
        case 720898:
          result = "Half2";
          break;
        case 720899:
          result = "Half3";
          break;
        case 720900:
          result = "Half4";
          break;
        default:
          switch(a1)
          {
            case 786433:
              result = "Float1";
              break;
            case 786434:
              result = "Float2";
              break;
            case 786435:
              result = "Float3";
              break;
            case 786436:
              result = "Float4";
              break;
            default:
              goto LABEL_75;
          }
          break;
      }
    }
  }
  else if (a1 > 589824)
  {
    switch(a1)
    {
      case 589825:
        result = "UInt1";
        break;
      case 589826:
        result = "UInt2";
        break;
      case 589827:
        result = "UInt3";
        break;
      case 589828:
        result = "UInt4";
        break;
      default:
        if (a1 != 593924)
          goto LABEL_75;
        result = "UInt1010102Norm";
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 458753:
        result = "UShort1Norm";
        break;
      case 458754:
        result = "UShort2Norm";
        break;
      case 458755:
        result = "UShort3Norm";
        break;
      case 458756:
        result = "UShort4Norm";
        break;
      default:
        switch(a1)
        {
          case 524289:
            result = "Short1Norm";
            break;
          case 524290:
            result = "Short2Norm";
            break;
          case 524291:
            result = "Short34Norm";
            break;
          case 524292:
            result = "Short4Norm";
            break;
          default:
            goto LABEL_75;
        }
        break;
    }
  }
  return result;
}

void sub_1DCBD2740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCBD288C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DCBD2994(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCBD2CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1DCBD2FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1DCBD32EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1DCBD33DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCBD3604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1DCBD379C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DCBD3A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DCBD3C64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCBD3DD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCBD3E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCBD3EFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCBD3FB0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 26)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573AB0);
  else
    return 0;
}

uint64_t sub_1DCBD3FE8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 29)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573A98);
  else
    return 0;
}

void sub_1DCBD40C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCAEEE78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBD40F8(uint64_t a1, unint64_t a2)
{
  _OWORD v5[4];
  __int128 *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_1DCAEEFD4((_QWORD *)a1);
  v6 = v5;
  sub_1DCBD4C50((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_1DCBD4154(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBD416C(uint64_t a1, unint64_t a2)
{
  _OWORD v5[8];
  __int128 *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_1DCAEEFD4((_QWORD *)a1);
  v6 = v5;
  sub_1DCBD57A8((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_1DCBD41D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE78(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBD427C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCAEEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBD431C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCAEEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBD450C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

void sub_1DCBD46A0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

void sub_1DCBD4830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

std::type_info *sub_1DCBD4878(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCBD3FB0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573AB0, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_1DCBD4900(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCBD3FB0(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

void sub_1DCBD4B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

std::type_info *sub_1DCBD4B48(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCBD3FE8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573A98, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_1DCBD4BD0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCBD3FE8(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

void sub_1DCBD4C50(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 *v26;
  unint64_t *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  unint64_t v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCBD4E44((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11 / 8];
                v13 = *(_OWORD *)(v9 + v11);
                v14 = *(_OWORD *)(v9 + v11 + 16);
                v15 = *(_OWORD *)(v9 + v11 + 48);
                *((_OWORD *)v12 + 2) = *(_OWORD *)(v9 + v11 + 32);
                *((_OWORD *)v12 + 3) = v15;
                *(_OWORD *)v12 = v13;
                *((_OWORD *)v12 + 1) = v14;
                v11 += 64;
              }
              while (v3 << 6 != v11);
            }
          }
          v16 = *a3;
          v17 = v3 << 6;
          do
          {
            v18 = (_OWORD *)((char *)v7 + v17);
            v19 = *v16;
            v20 = v16[1];
            v21 = v16[3];
            v18[2] = v16[2];
            v18[3] = v21;
            *v18 = v19;
            v18[1] = v20;
            v17 += 64;
          }
          while (a2 << 6 != v17);
        }
        v22 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v31 = a2;
    else
      v31 = *a1;
    v32 = sub_1DCBD4E44((uint64_t)a1, a2);
    v22 = v32;
    if (v31)
    {
      v33 = v31 << 6;
      v34 = v32;
      do
      {
        v35 = *(_OWORD *)v7;
        v36 = *((_OWORD *)v7 + 1);
        v37 = *((_OWORD *)v7 + 3);
        *((_OWORD *)v34 + 2) = *((_OWORD *)v7 + 2);
        *((_OWORD *)v34 + 3) = v37;
        *(_OWORD *)v34 = v35;
        *((_OWORD *)v34 + 1) = v36;
        v34 += 8;
        v7 += 8;
        v33 -= 64;
      }
      while (v33);
    }
    if (v3 < a2)
    {
      v38 = *a3;
      v39 = v3 << 6;
      do
      {
        v40 = (_OWORD *)((char *)v32 + v39);
        v41 = *v38;
        v42 = v38[1];
        v43 = v38[3];
        v40[2] = v38[2];
        v40[3] = v43;
        *v40 = v41;
        v40[1] = v42;
        v39 += 64;
      }
      while (a2 << 6 != v39);
    }
    goto LABEL_29;
  }
  v23 = a2 << 6;
  if ((a2 << 6) / a2 != 64)
  {
LABEL_18:
    sub_1DCAEEFD4(a1);
    return;
  }
  v24 = sub_1DCBD4E44((uint64_t)a1, a2);
  v22 = v24;
  v25 = 0;
  v26 = *a3;
  do
  {
    v27 = &v24[v25 / 8];
    v28 = *v26;
    v29 = v26[1];
    v30 = v26[3];
    *((_OWORD *)v27 + 2) = v26[2];
    *((_OWORD *)v27 + 3) = v30;
    *(_OWORD *)v27 = v28;
    *((_OWORD *)v27 + 1) = v29;
    v25 += 64;
  }
  while (v23 != v25);
LABEL_29:
  if (v22 != (unint64_t *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v22;
  }
  *a1 = a2;
}

_QWORD *sub_1DCBD4E44(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 >> 58)
    v3 = -1;
  else
    v3 = (a2 << 6) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCBD4EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCBD4EE0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCBD4F08(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCBD5060(a1);
}

uint64_t sub_1DCBD4F18()
{
  return 1;
}

unint64_t sub_1DCBD4F20(uint64_t **a1)
{
  char v2;

  return sub_1DCBD50C8((uint64_t)&v2, *a1);
}

uint64_t sub_1DCBD4F44(uint64_t **a1, uint64_t *a2)
{
  return sub_1DCBD562C(*a1, *a2);
}

uint64_t sub_1DCBD4F50(uint64_t **a1, uint64_t a2)
{
  return sub_1DCBD562C(*a1, a2);
}

uint64_t sub_1DCBD4F5C()
{
  return 0;
}

uint64_t sub_1DCBD4F68(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_1DCBD4FB0()
{
  return &unk_1EA573AB0;
}

uint64_t sub_1DCBD4FBC()
{
  return 1;
}

void *sub_1DCBD4FC4()
{
  return &unk_1EA573930;
}

uint64_t sub_1DCBD4FD0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBD4FD8(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_1DCBD4FE4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_10GfMatrix4fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBD5014(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573AB0, a2);
}

void *sub_1DCBD5034()
{
  return &unk_1EA573AB0;
}

uint64_t sub_1DCBD5040(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBD5048@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA575548;
  return sub_1DCB272BC(a2, v2);
}

uint64_t *sub_1DCBD5060(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_1DCAEEE78(v2);
      MEMORY[0x1DF0D228C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_1DCBD50C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (unsigned int *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 16;
      sub_1DCBD513C((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_1DCBD513C(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  result = sub_1DCBD5200((uint64_t)v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_1DCBD5200(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10, unsigned int *a11, unsigned int *a12, unsigned int *a13, unsigned int *a14, unsigned int *a15, unsigned int *a16, unsigned int *a17)
{
  uint64_t v17;

  v17 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v17 += (unint64_t)(*(_QWORD *)a1 + v17 + (*(_QWORD *)a1 + v17) * (*(_QWORD *)a1 + v17)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v17;
  return sub_1DCBD5270(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_1DCBD5270(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10, unsigned int *a11, unsigned int *a12, unsigned int *a13, unsigned int *a14, unsigned int *a15, unsigned int *a16)
{
  uint64_t v16;

  v16 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v16 += (unint64_t)(*(_QWORD *)a1 + v16 + (*(_QWORD *)a1 + v16) * (*(_QWORD *)a1 + v16)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v16;
  return sub_1DCBD52DC(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_1DCBD52DC(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10, unsigned int *a11, unsigned int *a12, unsigned int *a13, unsigned int *a14, unsigned int *a15)
{
  uint64_t v15;

  v15 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v15 += (unint64_t)(*(_QWORD *)a1 + v15 + (*(_QWORD *)a1 + v15) * (*(_QWORD *)a1 + v15)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v15;
  return sub_1DCBD5344(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_1DCBD5344(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10, unsigned int *a11, unsigned int *a12, unsigned int *a13, unsigned int *a14)
{
  uint64_t v14;

  v14 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v14 += (unint64_t)(*(_QWORD *)a1 + v14 + (*(_QWORD *)a1 + v14) * (*(_QWORD *)a1 + v14)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v14;
  return sub_1DCBD53A8(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_1DCBD53A8(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10, unsigned int *a11, unsigned int *a12, unsigned int *a13)
{
  uint64_t v13;

  v13 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v13 += (unint64_t)(*(_QWORD *)a1 + v13 + (*(_QWORD *)a1 + v13) * (*(_QWORD *)a1 + v13)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v13;
  return sub_1DCBD5408(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_1DCBD5408(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10, unsigned int *a11, unsigned int *a12)
{
  uint64_t v12;

  v12 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v12 += (unint64_t)(*(_QWORD *)a1 + v12 + (*(_QWORD *)a1 + v12) * (*(_QWORD *)a1 + v12)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v12;
  return sub_1DCBD5464(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_1DCBD5464(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10, unsigned int *a11)
{
  uint64_t v11;

  v11 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v11 += (unint64_t)(*(_QWORD *)a1 + v11 + (*(_QWORD *)a1 + v11) * (*(_QWORD *)a1 + v11)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v11;
  return sub_1DCBD54BC(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_1DCBD54BC(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10)
{
  uint64_t v10;

  v10 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v10 += (unint64_t)(*(_QWORD *)a1 + v10 + (*(_QWORD *)a1 + v10) * (*(_QWORD *)a1 + v10)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v10;
  return sub_1DCBD5510(a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1DCBD5510(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9)
{
  uint64_t v9;

  v9 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v9 += (unint64_t)(*(_QWORD *)a1 + v9 + (*(_QWORD *)a1 + v9) * (*(_QWORD *)a1 + v9)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v9;
  return sub_1DCBD5560(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1DCBD5560(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8)
{
  uint64_t v8;

  v8 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v8 += (unint64_t)(*(_QWORD *)a1 + v8 + (*(_QWORD *)a1 + v8) * (*(_QWORD *)a1 + v8)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v8;
  return sub_1DCBD55A8(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1DCBD55A8(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t v7;

  v7 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v7 += (unint64_t)(*(_QWORD *)a1 + v7 + (*(_QWORD *)a1 + v7) * (*(_QWORD *)a1 + v7)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v7;
  return sub_1DCBD55EC(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_1DCBD55EC(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v6;

  v6 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v6 += (unint64_t)(*(_QWORD *)a1 + v6 + (*(_QWORD *)a1 + v6) * (*(_QWORD *)a1 + v6)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v6;
  return sub_1DCB28070(a1, a3, a4, a5, a6);
}

uint64_t sub_1DCBD562C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_1DCB27110((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_1DCB27110((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = a1[4];
  v7 = *(_QWORD *)(a2 + 32);
  v8 = (v5 << 6) - 64;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==();
    if (!(_DWORD)result)
      break;
    v6 += 64;
    v7 += 64;
    v9 = v8;
    v8 -= 64;
  }
  while (v9);
  return result;
}

uint64_t sub_1DCBD56D8(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_1DCBD5060((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t sub_1DCBD5790(_QWORD *a1)
{
  *a1 += 64;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_1DCBD57A8(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 *v32;
  unint64_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 *v50;
  unint64_t v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCBD59F0((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11 / 8];
                v13 = *(_OWORD *)(v9 + v11);
                v14 = *(_OWORD *)(v9 + v11 + 16);
                v15 = *(_OWORD *)(v9 + v11 + 48);
                *((_OWORD *)v12 + 2) = *(_OWORD *)(v9 + v11 + 32);
                *((_OWORD *)v12 + 3) = v15;
                *(_OWORD *)v12 = v13;
                *((_OWORD *)v12 + 1) = v14;
                v16 = *(_OWORD *)(v9 + v11 + 64);
                v17 = *(_OWORD *)(v9 + v11 + 80);
                v18 = *(_OWORD *)(v9 + v11 + 112);
                *((_OWORD *)v12 + 6) = *(_OWORD *)(v9 + v11 + 96);
                *((_OWORD *)v12 + 7) = v18;
                *((_OWORD *)v12 + 4) = v16;
                *((_OWORD *)v12 + 5) = v17;
                v11 += 128;
              }
              while (v3 << 7 != v11);
            }
          }
          v19 = *a3;
          v20 = v3 << 7;
          do
          {
            v21 = (_OWORD *)((char *)v7 + v20);
            v22 = *v19;
            v23 = v19[1];
            v24 = v19[3];
            v21[2] = v19[2];
            v21[3] = v24;
            *v21 = v22;
            v21[1] = v23;
            v25 = v19[4];
            v26 = v19[5];
            v27 = v19[7];
            v21[6] = v19[6];
            v21[7] = v27;
            v21[4] = v25;
            v21[5] = v26;
            v20 += 128;
          }
          while (a2 << 7 != v20);
        }
        v28 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v40 = a2;
    else
      v40 = *a1;
    v41 = sub_1DCBD59F0((uint64_t)a1, a2);
    v28 = v41;
    if (v40)
    {
      v42 = v40 << 7;
      v43 = v41;
      do
      {
        v44 = *(_OWORD *)v7;
        v45 = *((_OWORD *)v7 + 1);
        v46 = *((_OWORD *)v7 + 3);
        *((_OWORD *)v43 + 2) = *((_OWORD *)v7 + 2);
        *((_OWORD *)v43 + 3) = v46;
        *(_OWORD *)v43 = v44;
        *((_OWORD *)v43 + 1) = v45;
        v47 = *((_OWORD *)v7 + 4);
        v48 = *((_OWORD *)v7 + 5);
        v49 = *((_OWORD *)v7 + 7);
        *((_OWORD *)v43 + 6) = *((_OWORD *)v7 + 6);
        *((_OWORD *)v43 + 7) = v49;
        *((_OWORD *)v43 + 4) = v47;
        *((_OWORD *)v43 + 5) = v48;
        v7 += 16;
        v43 += 16;
        v42 -= 128;
      }
      while (v42);
    }
    if (v3 < a2)
    {
      v50 = *a3;
      v51 = v3 << 7;
      do
      {
        v52 = (_OWORD *)((char *)v41 + v51);
        v53 = *v50;
        v54 = v50[1];
        v55 = v50[3];
        v52[2] = v50[2];
        v52[3] = v55;
        *v52 = v53;
        v52[1] = v54;
        v56 = v50[4];
        v57 = v50[5];
        v58 = v50[7];
        v52[6] = v50[6];
        v52[7] = v58;
        v52[4] = v56;
        v52[5] = v57;
        v51 += 128;
      }
      while (a2 << 7 != v51);
    }
    goto LABEL_29;
  }
  v29 = a2 << 7;
  if ((a2 << 7) / a2 != 128)
  {
LABEL_18:
    sub_1DCAEEFD4(a1);
    return;
  }
  v30 = sub_1DCBD59F0((uint64_t)a1, a2);
  v28 = v30;
  v31 = 0;
  v32 = *a3;
  do
  {
    v33 = &v30[v31 / 8];
    v34 = *v32;
    v35 = v32[1];
    v36 = v32[3];
    *((_OWORD *)v33 + 2) = v32[2];
    *((_OWORD *)v33 + 3) = v36;
    *(_OWORD *)v33 = v34;
    *((_OWORD *)v33 + 1) = v35;
    v37 = v32[4];
    v38 = v32[5];
    v39 = v32[7];
    *((_OWORD *)v33 + 6) = v32[6];
    *((_OWORD *)v33 + 7) = v39;
    *((_OWORD *)v33 + 4) = v37;
    *((_OWORD *)v33 + 5) = v38;
    v31 += 128;
  }
  while (v29 != v31);
LABEL_29:
  if (v28 != (unint64_t *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v28;
  }
  *a1 = a2;
}

_QWORD *sub_1DCBD59F0(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 >> 57)
    v3 = -1;
  else
    v3 = (a2 << 7) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCBD5A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCBD5A8C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCBD5AB4(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCBD5C0C(a1);
}

uint64_t sub_1DCBD5AC4()
{
  return 1;
}

unint64_t sub_1DCBD5ACC(uint64_t **a1)
{
  char v2;

  return sub_1DCBD5C74((uint64_t)&v2, *a1);
}

uint64_t sub_1DCBD5AF0(uint64_t **a1, uint64_t *a2)
{
  return sub_1DCBD6290(*a1, *a2);
}

uint64_t sub_1DCBD5AFC(uint64_t **a1, uint64_t a2)
{
  return sub_1DCBD6290(*a1, a2);
}

uint64_t sub_1DCBD5B08()
{
  return 0;
}

uint64_t sub_1DCBD5B14(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_1DCBD5B5C()
{
  return &unk_1EA573A98;
}

uint64_t sub_1DCBD5B68()
{
  return 1;
}

void *sub_1DCBD5B70()
{
  return &unk_1EA573920;
}

uint64_t sub_1DCBD5B7C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBD5B84(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_1DCBD5B90(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_10GfMatrix4dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBD5BC0(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573A98, a2);
}

void *sub_1DCBD5BE0()
{
  return &unk_1EA573A98;
}

uint64_t sub_1DCBD5BEC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBD5BF4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA575490;
  return sub_1DCB272BC(a2, v2);
}

uint64_t *sub_1DCBD5C0C(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_1DCAEEE78(v2);
      MEMORY[0x1DF0D228C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_1DCBD5C74(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (uint64_t *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 16;
      sub_1DCBD5CE8((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_1DCBD5CE8(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  result = sub_1DCBD5DAC((uint64_t)v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_1DCBD5DAC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, _QWORD *a17)
{
  uint64_t v17;

  v17 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v17 += (unint64_t)(*(_QWORD *)a1 + v17 + (*(_QWORD *)a1 + v17) * (*(_QWORD *)a1 + v17)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v17;
  return sub_1DCBD5E1C(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_1DCBD5E1C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, _QWORD *a16)
{
  uint64_t v16;

  v16 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v16 += (unint64_t)(*(_QWORD *)a1 + v16 + (*(_QWORD *)a1 + v16) * (*(_QWORD *)a1 + v16)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v16;
  return sub_1DCBD5E88(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_1DCBD5E88(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, _QWORD *a15)
{
  uint64_t v15;

  v15 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v15 += (unint64_t)(*(_QWORD *)a1 + v15 + (*(_QWORD *)a1 + v15) * (*(_QWORD *)a1 + v15)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v15;
  return sub_1DCBD5EF0(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_1DCBD5EF0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, _QWORD *a14)
{
  uint64_t v14;

  v14 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v14 += (unint64_t)(*(_QWORD *)a1 + v14 + (*(_QWORD *)a1 + v14) * (*(_QWORD *)a1 + v14)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v14;
  return sub_1DCBD5F54(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_1DCBD5F54(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, _QWORD *a13)
{
  uint64_t v13;

  v13 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v13 += (unint64_t)(*(_QWORD *)a1 + v13 + (*(_QWORD *)a1 + v13) * (*(_QWORD *)a1 + v13)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v13;
  return sub_1DCBD5FB4(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_1DCBD5FB4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, _QWORD *a12)
{
  uint64_t v12;

  v12 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v12 += (unint64_t)(*(_QWORD *)a1 + v12 + (*(_QWORD *)a1 + v12) * (*(_QWORD *)a1 + v12)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v12;
  return sub_1DCBD6010(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_1DCBD6010(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, _QWORD *a11)
{
  uint64_t v11;

  v11 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v11 += (unint64_t)(*(_QWORD *)a1 + v11 + (*(_QWORD *)a1 + v11) * (*(_QWORD *)a1 + v11)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v11;
  return sub_1DCBD6068(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_1DCBD6068(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, _QWORD *a10)
{
  uint64_t v10;

  v10 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v10 += (unint64_t)(*(_QWORD *)a1 + v10 + (*(_QWORD *)a1 + v10) * (*(_QWORD *)a1 + v10)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v10;
  return sub_1DCBD60BC(a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1DCBD60BC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, _QWORD *a9)
{
  uint64_t v9;

  v9 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v9 += (unint64_t)(*(_QWORD *)a1 + v9 + (*(_QWORD *)a1 + v9) * (*(_QWORD *)a1 + v9)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v9;
  return sub_1DCBD610C(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1DCBD610C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, _QWORD *a8)
{
  uint64_t v8;

  v8 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v8 += (unint64_t)(*(_QWORD *)a1 + v8 + (*(_QWORD *)a1 + v8) * (*(_QWORD *)a1 + v8)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v8;
  return sub_1DCBD6154(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1DCBD6154(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7)
{
  uint64_t v7;

  v7 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v7 += (unint64_t)(*(_QWORD *)a1 + v7 + (*(_QWORD *)a1 + v7) * (*(_QWORD *)a1 + v7)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v7;
  return sub_1DCBD6198(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_1DCBD6198(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;

  v6 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v6 += (unint64_t)(*(_QWORD *)a1 + v6 + (*(_QWORD *)a1 + v6) * (*(_QWORD *)a1 + v6)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v6;
  return sub_1DCBD61D8(a1, a3, a4, a5, a6);
}

uint64_t sub_1DCBD61D8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v5;

  v5 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v5 += (unint64_t)(*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return sub_1DCBD6214(a1, a3, a4, a5);
}

uint64_t sub_1DCBD6214(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v4;

  v4 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v4 += (unint64_t)(*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return sub_1DCBD624C(a1, a3, a4);
}

uint64_t sub_1DCBD624C(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(result + 8))
    v3 += (unint64_t)(*(_QWORD *)result + v3 + (*(_QWORD *)result + v3) * (*(_QWORD *)result + v3)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v3;
  *(_QWORD *)result = *a3 + ((unint64_t)(v3 + *a3 + (v3 + *a3) * (v3 + *a3)) >> 1);
  return result;
}

uint64_t sub_1DCBD6290(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_1DCB27110((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_1DCB27110((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = a1[4];
  v7 = *(_QWORD *)(a2 + 32);
  v8 = (v5 << 7) - 128;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
    if (!(_DWORD)result)
      break;
    v6 += 128;
    v7 += 128;
    v9 = v8;
    v8 -= 128;
  }
  while (v9);
  return result;
}

uint64_t sub_1DCBD633C(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_1DCBD5C0C((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t sub_1DCBD63F4(_QWORD *a1)
{
  *a1 += 128;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_1DCBD640C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix4f]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_1DCBD4E44((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = v5 << 6;
        v9 = v6;
        do
        {
          v10 = *v4;
          v11 = v4[1];
          v12 = v4[3];
          v9[2] = v4[2];
          v9[3] = v12;
          *v9 = v10;
          v9[1] = v11;
          v9 += 4;
          v4 += 4;
          v8 -= 64;
        }
        while (v8);
      }
      sub_1DCAEEE78((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

void sub_1DCBD64AC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_1DCBD59F0((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = v5 << 7;
        v9 = v6;
        do
        {
          v10 = *v4;
          v11 = v4[1];
          v12 = v4[3];
          v9[2] = v4[2];
          v9[3] = v12;
          *v9 = v10;
          v9[1] = v11;
          v13 = v4[4];
          v14 = v4[5];
          v15 = v4[7];
          v9[6] = v4[6];
          v9[7] = v15;
          v9[4] = v13;
          v9[5] = v14;
          v4 += 8;
          v9 += 8;
          v8 -= 128;
        }
        while (v8);
      }
      sub_1DCAEEE78((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

double sub_1DCBD6560@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_1DCBD65B8;
  a1[2] = (uint64_t)&stru_1EA573AB0;
  return result;
}

uint64_t sub_1DCBD65B8(uint64_t result)
{
  if (result)
  {
    sub_1DCAEEE78(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

double sub_1DCBD6600@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_1DCBD6658;
  a1[2] = (uint64_t)&stru_1EA573A98;
  return result;
}

uint64_t sub_1DCBD6658(uint64_t result)
{
  if (result)
  {
    sub_1DCAEEE78(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

void sub_1DCBD6704(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCBD6758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t **sub_1DCBD676C(uint64_t **a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;

  if (a1 != a2)
  {
    v4 = *a2;
    v3 = (uint64_t)a2[1];
    v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - (uint64_t)*a2) >> 3);
    v6 = (uint64_t)a1[2];
    v7 = *a1;
    if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)*a1) >> 3) < v5)
    {
      if (v7)
      {
        v8 = a1[1];
        v9 = *a1;
        if (v8 != v7)
        {
          do
          {
            v10 = v8 - 3;
            sub_1DCAEEE2C((uint64_t)(v8 - 2));
            v8 = v10;
          }
          while (v10 != v7);
          v9 = *a1;
        }
        a1[1] = v7;
        operator delete(v9);
        v6 = 0;
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      if (v5 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_30;
      v11 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= v5)
        v12 = v5;
      v13 = v11 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v12;
      if (v13 > 0xAAAAAAAAAAAAAAALL)
LABEL_30:
        sub_1DCAE4C44();
      v14 = (char *)sub_1DCBE45E4(v13);
      *a1 = (uint64_t *)v14;
      a1[1] = (uint64_t *)v14;
      a1[2] = (uint64_t *)&v14[24 * v15];
      v16 = a1;
      v17 = (uint64_t)v4;
LABEL_20:
      sub_1DCBE4780(v16, v17, v3);
      return a1;
    }
    v18 = a1[1];
    if (0xAAAAAAAAAAAAAAABLL * (v18 - v7) < v5)
    {
      v19 = &v4[v18 - v7];
      if (v18 != v7)
      {
        do
        {
          v20 = v4 + 1;
          v21 = *v4;
          v4 += 3;
          v22 = v7 + 1;
          *v7 = v21;
          v7 += 3;
          sub_1DCB9AD14(v22, v20);
        }
        while (v4 != v19);
      }
      v16 = a1;
      v17 = (uint64_t)v19;
      goto LABEL_20;
    }
    if (v4 == (uint64_t *)v3)
    {
      v23 = *a1;
    }
    else
    {
      v23 = *a1;
      do
      {
        v24 = v4 + 1;
        v25 = *v4;
        v4 += 3;
        v26 = v7 + 1;
        *v7 = v25;
        v7 += 3;
        sub_1DCB9AD14(v26, v24);
        v23 += 3;
      }
      while (v4 != (uint64_t *)v3);
      v18 = a1[1];
    }
    if (v18 != v23)
    {
      do
      {
        v27 = v18 - 3;
        sub_1DCAEEE2C((uint64_t)(v18 - 2));
        v18 = v27;
      }
      while (v27 != v23);
    }
    a1[1] = v23;
  }
  return a1;
}

void sub_1DCBD6984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCBD6B24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCBD6DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBD6DC0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 58)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573BA0);
  else
    return 0;
}

uint64_t sub_1DCBD6DF8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 56)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573BB8);
  else
    return 0;
}

void sub_1DCBD6F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_1DCAE4C58(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBD6FE0(uint64_t a1, unint64_t a2)
{
  __int16 v5;
  __int16 *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_1DCAEEFD4((_QWORD *)a1);
  v6 = &v5;
  sub_1DCBE4818((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_1DCBD7038(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE78(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBD7244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  sub_1DCAEEE2C(v16);
  sub_1DCAEEE2C((uint64_t)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCBD729C(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_1DCAE4C44();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = sub_1DCBE45E4(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    sub_1DCBE4504(v2, v5);
    return (uint64_t *)sub_1DCBE4594((uint64_t)v5);
  }
  return result;
}

uint64_t sub_1DCBD733C(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD v15[5];

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = (_QWORD *)a1[1];
  if ((unint64_t)v6 >= v5)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1DCAE4C44();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v15[4] = v4;
    if (v12)
      v12 = (unint64_t)sub_1DCBE45E4(v12);
    else
      v13 = 0;
    v14 = (_QWORD *)(v12 + 24 * v9);
    v15[0] = v12;
    v15[1] = v14;
    v15[3] = v12 + 24 * v13;
    *v14 = *a2;
    sub_1DCB27664(v14 + 1, a2 + 1);
    v15[2] = v14 + 3;
    sub_1DCBE4504(a1, v15);
    v7 = (_QWORD *)a1[1];
    result = sub_1DCBE4594((uint64_t)v15);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 3;
    result = (uint64_t)sub_1DCB27664(v6 + 1, a2 + 1);
  }
  a1[1] = (uint64_t)v7;
  return result;
}

void sub_1DCBD7520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_1DCAEEE2C(v4);
  sub_1DCAEEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBD76D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_1DCAEEE2C((uint64_t)va1);
  sub_1DCAEEE2C(v3 - 72);
  sub_1DCAEEE78((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCBD7754(uint64_t *a1, double *a2)
{
  uint64_t v4;
  double *v5;
  unint64_t v6;
  double v7;
  unint64_t v8;
  _QWORD *result;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  double *v24;
  double *v25;
  double *v26;
  double *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _BOOL4 v42;
  double *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  double v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  _QWORD *v73;
  char *v74;
  uint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t *v80;

  v4 = *a1;
  v5 = (double *)a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
  if (v5 == (double *)*a1 || (v7 = *a2, *a2 > *(v5 - 3)))
  {
    v8 = a1[2];
    if ((unint64_t)v5 < v8)
    {
      *v5 = *a2;
      result = sub_1DCB25EEC((_QWORD *)v5 + 1, (_QWORD *)a2 + 1);
      v10 = v5 + 3;
      a1[1] = (uint64_t)(v5 + 3);
LABEL_29:
      a1[1] = (uint64_t)v10;
      return result;
    }
    v11 = v6 + 1;
    if (v6 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v4) >> 3);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v11;
      v80 = a1 + 2;
      if (v13)
        v13 = (unint64_t)sub_1DCBE45E4(v13);
      else
        v14 = 0;
      v31 = (_QWORD *)(v13 + 24 * v6);
      v76 = v13;
      v77 = v31;
      v78 = v31;
      v79 = v13 + 24 * v14;
      *v31 = *(_QWORD *)a2;
      sub_1DCB25EEC(v31 + 1, (_QWORD *)a2 + 1);
      v78 += 3;
      sub_1DCBE4504(a1, &v76);
      v10 = (_QWORD *)a1[1];
      result = (_QWORD *)sub_1DCBE4594((uint64_t)&v76);
      goto LABEL_29;
    }
LABEL_75:
    sub_1DCAE4C44();
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
  do
  {
    v17 = v16 >> 1;
    v18 = (double *)(v15 + 24 * (v16 >> 1));
    v20 = *v18;
    v19 = v18 + 3;
    v16 += ~(v16 >> 1);
    if (v20 < v7)
      v15 = (unint64_t)v19;
    else
      v16 = v17;
  }
  while (v16);
  if (v5 != (double *)v15 && *(double *)v15 == v7)
  {
    *(double *)v15 = v7;
    return sub_1DCB9AD14((_QWORD *)(v15 + 8), (_QWORD *)a2 + 1);
  }
  v21 = (uint64_t)(v15 - v4) >> 3;
  v22 = 0xAAAAAAAAAAAAAAABLL * v21;
  v23 = a1[2];
  if ((unint64_t)v5 >= v23)
  {
    v32 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_75;
    v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v4) >> 3);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0x555555555555555)
      v34 = 0xAAAAAAAAAAAAAAALL;
    else
      v34 = v32;
    v75 = a1 + 2;
    if (v34)
    {
      v36 = (char *)sub_1DCBE45E4(v34);
    }
    else
    {
      v36 = 0;
      v35 = 0;
    }
    v37 = &v36[24 * v22];
    v71 = v36;
    v72 = v37;
    v73 = v37;
    v74 = &v36[24 * v35];
    if (v22 == v35)
    {
      if ((uint64_t)(v15 - v4) < 1)
      {
        if (v15 == v4)
          v44 = 1;
        else
          v44 = 2 * v22;
        v80 = a1 + 2;
        v45 = (char *)sub_1DCBE45E4(v44);
        v47 = v45;
        v48 = &v45[24 * (v44 >> 2)];
        v49 = &v45[24 * v46];
        v50 = v72;
        v51 = v73;
        v52 = v72;
        v53 = v48;
        if (v73 != v72)
        {
          v70 = &v45[24 * v46];
          v53 = &v48[24 * (((char *)v73 - (char *)v72) / 24)];
          v54 = 24 * (((char *)v73 - (char *)v72) / 24);
          v55 = &v45[24 * (v44 >> 2) + 8];
          v56 = v72 + 1;
          do
          {
            *((_QWORD *)v55 - 1) = *(v56 - 1);
            v55 = (char *)(sub_1DCB27664(v55, v56) + 3);
            v56 += 3;
            v54 -= 24;
          }
          while (v54);
          v52 = v51;
          v49 = v70;
        }
        v57 = v71;
        v58 = v74;
        v71 = v47;
        v72 = v48;
        v76 = (unint64_t)v57;
        v77 = v50;
        v73 = v53;
        v74 = v49;
        v78 = v52;
        v79 = (unint64_t)v58;
        sub_1DCBE4594((uint64_t)&v76);
        v37 = v53;
      }
      else
      {
        v38 = v22 + 2;
        if (v22 >= -1)
          v38 = v22 + 1;
        v37 -= 24 * (v38 >> 1);
        v72 = v37;
        v73 = v37;
      }
    }
    *(double *)v37 = *a2;
    sub_1DCB25EEC((_QWORD *)v37 + 1, (_QWORD *)a2 + 1);
    v59 = (uint64_t)v72;
    v60 = v73 + 3;
    v73 += 3;
    v61 = *a1;
    if (*a1 != v15)
    {
      v62 = v15;
      do
      {
        v63 = *(_QWORD *)(v62 - 24);
        v62 -= 24;
        *(_QWORD *)(v59 - 24) = v63;
        v59 -= 24;
        sub_1DCB27664((_QWORD *)(v59 + 8), (_QWORD *)(v62 + 8));
      }
      while (v62 != v61);
      v60 = v73;
    }
    v72 = (_QWORD *)v59;
    v64 = a1[1];
    if (v64 != v15)
    {
      do
      {
        v65 = (_QWORD *)(v15 + 8);
        v66 = *(double *)v15;
        v15 += 24;
        v67 = v60 + 1;
        *(double *)v60 = v66;
        v60 += 3;
        sub_1DCB27664(v67, v65);
      }
      while (v15 != v64);
      v59 = (uint64_t)v72;
      v15 = a1[1];
    }
    v68 = *a1;
    *a1 = v59;
    a1[1] = (uint64_t)v60;
    v69 = a1[2];
    a1[2] = (uint64_t)v74;
    v73 = (_QWORD *)v15;
    v74 = (char *)v69;
    v71 = (char *)v68;
    v72 = (_QWORD *)v68;
    return (_QWORD *)sub_1DCBE4594((uint64_t)&v71);
  }
  else if ((double *)v15 == v5)
  {
    *v5 = v7;
    result = sub_1DCB25EEC((_QWORD *)(v4 + 8 * v21 + 8), (_QWORD *)a2 + 1);
    a1[1] = (uint64_t)(v5 + 3);
  }
  else
  {
    v24 = (double *)(v15 + 24);
    v25 = v5 - 3;
    if ((unint64_t)v5 < 0x18)
    {
      v27 = (double *)a1[1];
    }
    else
    {
      v26 = v5 - 3;
      v27 = (double *)a1[1];
      do
      {
        v28 = v26 + 1;
        v29 = *(_QWORD *)v26;
        v26 += 3;
        v30 = v27 + 1;
        *(_QWORD *)v27 = v29;
        v27 += 3;
        sub_1DCB27664(v30, v28);
      }
      while (v26 < v5);
    }
    a1[1] = (uint64_t)v27;
    if (v5 != v24)
    {
      v39 = 8 * (v5 - v24);
      do
      {
        v40 = v25 + 1;
        *v25 = *(double *)(v15 + v39 - 24);
        v25 -= 3;
        sub_1DCB273D4(v40, (_QWORD *)(v15 + v39 - 16));
        v39 -= 24;
      }
      while (v39);
      v27 = (double *)a1[1];
    }
    v42 = v15 <= (unint64_t)a2 && v27 > a2;
    v43 = &a2[3 * v42];
    *(double *)v15 = *v43;
    return sub_1DCB9AD14((_QWORD *)(v4 + 24 * v22 + 8), (_QWORD *)v43 + 1);
  }
  return result;
}

void sub_1DCBD7C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 + 8) = v17;
  _Unwind_Resume(exception_object);
}

void sub_1DCBD7DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_1DCAEEE2C((uint64_t)va1);
  sub_1DCAEEE2C(v3 - 72);
  sub_1DCAEEE78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBD8108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

_QWORD *sub_1DCBD8170(double **a1, uint64_t a2, uint64_t a3, double a4)
{
  double *v7;
  double *v8;
  double v10;
  unint64_t v11;
  unint64_t v12;
  double *v13;
  double *v14;
  double v15;
  double *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v7 = a1[1];
  if (v7 == *a1)
  {
LABEL_11:
    v20 = 0;
    *(double *)a2 = a4;
    sub_1DCB273D4((_QWORD *)(a2 + 8), &v19);
    sub_1DCAEEE2C((uint64_t)&v19);
    v20 = 0;
    *(double *)a3 = a4;
    sub_1DCB273D4((_QWORD *)(a3 + 8), &v19);
    return (_QWORD *)sub_1DCAEEE2C((uint64_t)&v19);
  }
  v10 = *(v7 - 3);
  if (v10 <= a4)
  {
    *(double *)a2 = v10;
    sub_1DCB9AD14((_QWORD *)(a2 + 8), (_QWORD *)v7 - 2);
    v17 = a1[1];
    *(double *)a3 = *(v17 - 3);
    return sub_1DCB9AD14((_QWORD *)(a3 + 8), (_QWORD *)v17 - 2);
  }
  else
  {
    if (*v8 < a4)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * (v7 - *a1);
      v20 = 0;
      do
      {
        v12 = v11 >> 1;
        v13 = &v8[3 * (v11 >> 1)];
        v15 = *v13;
        v14 = v13 + 3;
        v11 += ~(v11 >> 1);
        if (v15 > a4)
          v11 = v12;
        else
          v8 = v14;
      }
      while (v11);
      sub_1DCAEEE2C((uint64_t)&v19);
      if (v8 != a1[1])
      {
        *(double *)a3 = *v8;
        sub_1DCB9AD14((_QWORD *)(a3 + 8), (_QWORD *)v8 + 1);
        *(double *)a2 = *(v8 - 3);
        return sub_1DCB9AD14((_QWORD *)(a2 + 8), (_QWORD *)v8 - 2);
      }
      goto LABEL_11;
    }
    *(double *)a2 = *v8;
    sub_1DCB9AD14((_QWORD *)(a2 + 8), (_QWORD *)v8 + 1);
    v18 = *a1 + 1;
    *(double *)a3 = **a1;
    return sub_1DCB9AD14((_QWORD *)(a3 + 8), v18);
  }
}

std::type_info *sub_1DCBD8360(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCB44F28(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573BD0, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

void sub_1DCBD8684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

std::type_info *sub_1DCBD86EC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCBD6DF8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573BB8, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_1DCBD8774(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCBD6DF8(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_1DCBD87DC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_1DCAEEE78(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_1DCAEEE78((uint64_t)&v9);
  }
  return a1;
}

void sub_1DCBD8878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBD8894(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 9)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x1E0DE4ED0]);
  else
    return 0;
}

void sub_1DCBD8A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

void sub_1DCBD8C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

void sub_1DCBD8E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

void sub_1DCBD907C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

void sub_1DCBD9248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBD9264(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 18)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573B58);
  else
    return 0;
}

uint64_t sub_1DCBD929C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 24)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573B28);
  else
    return 0;
}

void sub_1DCBD9408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_1DCAE4C58(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBD9484(uint64_t a1, unint64_t a2)
{
  int v5;
  __int16 v6;
  int *v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = 0;
  v5 = 0;
  sub_1DCAEEFD4((_QWORD *)a1);
  v7 = &v5;
  sub_1DCBE51F4((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_1DCBD94E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBD94F8(uint64_t a1, unint64_t a2)
{
  _QWORD v5[3];
  __int128 *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_1DCAEEFD4((_QWORD *)a1);
  v6 = (__int128 *)v5;
  sub_1DCBE59E4((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_1DCBD9554(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE78(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBD9760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  sub_1DCAEEE2C(v16);
  sub_1DCAEEE2C((uint64_t)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1DCBD9888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_1DCAEEE2C(v4);
  sub_1DCAEEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBD9A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_1DCAEEE2C((uint64_t)va1);
  sub_1DCAEEE2C(v3 - 88);
  sub_1DCAEEE78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBD9C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_1DCAEEE2C((uint64_t)va1);
  sub_1DCAEEE2C(v7 - 72);
  sub_1DCAEEE78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBDA000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

std::type_info *sub_1DCBDA06C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCB26964(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573B40, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

void sub_1DCBDA3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

std::type_info *sub_1DCBDA468(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCBD929C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573B28, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_1DCBDA4F0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCBD929C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_1DCBDA558(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_1DCAEEE78(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_1DCAEEE78((uint64_t)&v9);
  }
  return a1;
}

void sub_1DCBDA5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBDA610(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 71)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573A28);
  else
    return 0;
}

void sub_1DCBDA800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

void sub_1DCBDA9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

void sub_1DCBDAC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

void sub_1DCBDAE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

void sub_1DCBDB038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBDB054(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 41)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573AE0);
  else
    return 0;
}

uint64_t sub_1DCBDB08C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 40)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573AF8);
  else
    return 0;
}

uint64_t sub_1DCBDB0C4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 42)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573AC8);
  else
    return 0;
}

void sub_1DCBDB230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_1DCAE4C58(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBDB2AC(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_1DCAEEFD4((_QWORD *)a1);
  v6 = &v5;
  sub_1DCBE6254((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_1DCBDB300(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBDB318(uint64_t a1, unint64_t a2)
{
  char v5;
  char *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_1DCAEEFD4((_QWORD *)a1);
  v6 = &v5;
  sub_1DCBE6954((unint64_t *)a1, a2, (_OWORD **)&v6);
  return a1;
}

void sub_1DCBDB36C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBDB384(uint64_t a1, unint64_t a2)
{
  char v5;
  char *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_1DCAEEFD4((_QWORD *)a1);
  v6 = &v5;
  sub_1DCBE7060((unint64_t *)a1, a2, (_OWORD **)&v6);
  return a1;
}

void sub_1DCBDB3D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE78(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBDB5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  sub_1DCAEEE2C(v16);
  sub_1DCAEEE2C((uint64_t)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1DCBDB70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_1DCAEEE2C(v4);
  sub_1DCAEEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBDB8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_1DCAEEE2C((uint64_t)va1);
  sub_1DCAEEE2C(v5 - 72);
  sub_1DCAEEE78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBDBAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_1DCAEEE2C((uint64_t)va1);
  sub_1DCAEEE2C(v7 - 72);
  sub_1DCAEEE78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBDBE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

std::type_info *sub_1DCBDBE9C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCBDB054(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573AE0, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_1DCBDBF24(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCBDB054(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_1DCBDBF8C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_1DCAEEE78(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_1DCAEEE78((uint64_t)&v9);
  }
  return a1;
}

void sub_1DCBDC028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBDC044(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 88)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA5739D8);
  else
    return 0;
}

void sub_1DCBDC3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

std::type_info *sub_1DCBDC410(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCBDB0C4(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573AC8, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_1DCBDC498(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCBDB0C4(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_1DCBDC500(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_1DCAEEE78(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_1DCAEEE78((uint64_t)&v9);
  }
  return a1;
}

void sub_1DCBDC59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBDC5B8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 89)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA5739C8);
  else
    return 0;
}

void sub_1DCBDC5F0(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>, double a4@<D0>)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t *v7;
  float64x2_t *v8;
  float64x2_t v9;
  float64x2_t v10;
  _OWORD v11[2];
  _OWORD v12[2];
  _OWORD v13[2];
  _OWORD v14[2];

  v4 = *a2;
  v5 = a2[1];
  if (vaddvq_f64(vmlaq_f64(vmulq_f64(v5, a1[1]), *a1, *a2)) >= 0.0)
  {
    v9 = a1[1];
    v14[0] = *a1;
    v14[1] = v9;
    v10 = a2[1];
    v13[0] = *a2;
    v13[1] = v10;
    v7 = (float64x2_t *)v14;
    v8 = (float64x2_t *)v13;
  }
  else
  {
    v6 = a1[1];
    v12[0] = *a1;
    v12[1] = v6;
    v11[0] = vnegq_f64(v4);
    v11[1] = vnegq_f64(v5);
    v7 = (float64x2_t *)v12;
    v8 = (float64x2_t *)v11;
  }
  sub_1DCBE4628(v7, v8, a3, a4);
}

void sub_1DCBDC7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

void sub_1DCBDC9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

void sub_1DCBDCC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

void sub_1DCBDCE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1DCAE4C58(exception_object);
}

void sub_1DCBDCF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBDCF8C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 11)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573C48);
  else
    return 0;
}

void sub_1DCBDD0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_1DCBDD2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  sub_1DCAEEE2C(v16);
  sub_1DCAEEE2C((uint64_t)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1DCBDD3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_1DCAEEE2C(v4);
  sub_1DCAEEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBDD518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_1DCAEEE2C((uint64_t)&a9);
  sub_1DCAEEE2C((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1DCBDD66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_1DCAEEE2C((uint64_t)&a9);
  sub_1DCAEEE2C((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1DCBDD838(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1DCAEEE2C(v2 + 8);
  sub_1DCAEEE2C(v1 + 8);
  _Unwind_Resume(a1);
}

std::type_info *sub_1DCBDD854(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCB8CEE0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x1E0DE4EE0], v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

void sub_1DCBDDA5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1DCAEEE2C(v2 + 8);
  sub_1DCAEEE2C(v1 + 8);
  _Unwind_Resume(a1);
}

std::type_info *sub_1DCBDDA78(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCBD8894(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x1E0DE4ED0], v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_1DCBDDB00(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_1DCBD8894(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

void sub_1DCBDDC58(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBDDD58(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBDDE64(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1DCBDDF78(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1DCBDE07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBDE098(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 69)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573A08);
  else
    return 0;
}

uint64_t sub_1DCBDE0D0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 66)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573A18);
  else
    return 0;
}

uint64_t sub_1DCBDE108(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 72)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA5739F8);
  else
    return 0;
}

void sub_1DCBDE25C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCAEEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBDE470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  sub_1DCAEEE2C(v16);
  sub_1DCAEEE2C((uint64_t)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1DCBDE598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_1DCAEEE2C(v4);
  sub_1DCAEEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBDE6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_1DCAEEE2C((uint64_t)&a9);
  sub_1DCAEEE2C((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1DCBDE85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_1DCAEEE2C((uint64_t)va);
  sub_1DCAEEE2C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1DCBDEA30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1DCAEEE2C(v2 + 8);
  sub_1DCAEEE2C(v1 + 8);
  _Unwind_Resume(a1);
}

std::type_info *sub_1DCBDEA4C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCBDE098(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573A08, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_1DCBDEAD4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_1DCBDE098(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

void sub_1DCBDECC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1DCAEEE2C(v2 + 8);
  sub_1DCAEEE2C(v1 + 8);
  _Unwind_Resume(a1);
}

std::type_info *sub_1DCBDECE4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCBDE108(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA5739F8, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_1DCBDED6C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCBDE108(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

void sub_1DCBDEEC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBDF000(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBDF114(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1DCBDF228(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1DCBDF32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBDF348(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 65)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573A48);
  else
    return 0;
}

void sub_1DCBDF4E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCAEEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBDF6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  sub_1DCAEEE2C(v16);
  sub_1DCAEEE2C((uint64_t)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1DCBDF820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_1DCAEEE2C(v4);
  sub_1DCAEEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBDF998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_1DCAEEE2C((uint64_t)va);
  sub_1DCAEEE2C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1DCBDFB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_1DCAEEE2C((uint64_t)va);
  sub_1DCAEEE2C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1DCBDFD20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1DCAEEE2C(v2 + 8);
  sub_1DCAEEE2C(v1 + 8);
  _Unwind_Resume(a1);
}

std::type_info *sub_1DCBDFD3C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCB8CE70(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573A38, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

void sub_1DCBDFFB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1DCAEEE2C(v2 + 8);
  sub_1DCAEEE2C(v1 + 8);
  _Unwind_Resume(a1);
}

std::type_info *sub_1DCBDFFD0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCBDA610(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573A28, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_1DCBE0058(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCBDA610(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

void sub_1DCBE01F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBE0350(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBE046C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1DCBE058C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1DCBE0690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBE06AC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 64)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573A78);
  else
    return 0;
}

uint64_t sub_1DCBE06E4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 70)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573A58);
  else
    return 0;
}

void sub_1DCBE0870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCAEEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBE0A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  sub_1DCAEEE2C(v16);
  sub_1DCAEEE2C((uint64_t)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1DCBE0BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_1DCAEEE2C(v4);
  sub_1DCAEEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBE0D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_1DCAEEE2C((uint64_t)va);
  sub_1DCAEEE2C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1DCBE0EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_1DCAEEE2C((uint64_t)va);
  sub_1DCAEEE2C(v5 - 56);
  _Unwind_Resume(a1);
}

void sub_1DCBE1098(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1DCAEEE2C(v2 + 8);
  sub_1DCAEEE2C(v1 + 8);
  _Unwind_Resume(a1);
}

std::type_info *sub_1DCBE10B4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCB8CEA8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573A68, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

void sub_1DCBE1304(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1DCAEEE2C(v2 + 8);
  sub_1DCAEEE2C(v1 + 8);
  _Unwind_Resume(a1);
}

std::type_info *sub_1DCBE1320(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCBE06E4(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573A58, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_1DCBE13A8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCBE06E4(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

void sub_1DCBE153C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBE1690(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBE17A4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1DCBE18C4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1DCBE19C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBE19E4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 87)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA5739E8);
  else
    return 0;
}

void sub_1DCBE1B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCAEEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBE1D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  sub_1DCAEEE2C(v16);
  sub_1DCAEEE2C((uint64_t)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1DCBE1E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_1DCAEEE2C(v4);
  sub_1DCAEEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBE2008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_1DCAEEE2C((uint64_t)va);
  sub_1DCAEEE2C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1DCBE21A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_1DCAEEE2C((uint64_t)va);
  sub_1DCAEEE2C(v5 - 56);
  _Unwind_Resume(a1);
}

void sub_1DCBE24EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_1DCAEEE2C((uint64_t)va);
  sub_1DCAEEE2C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBE2518(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCBDC044(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *sub_1DCBE2580(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCBDC044(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA5739D8, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

void sub_1DCBE27F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  sub_1DCAEEE2C((uint64_t)va);
  sub_1DCAEEE2C(v15 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBE281C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCBDC5B8(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *sub_1DCBE2884(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCBDC5B8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA5739C8, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

void sub_1DCBE2A34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBE2B84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBE2C9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBE2DC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBE2ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBE2EF0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 73)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573930);
  else
    return 0;
}

uint64_t sub_1DCBE2F28(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 76)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573920);
  else
    return 0;
}

void sub_1DCBE30C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCAEEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBE32E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  sub_1DCAEEE2C(v16);
  sub_1DCAEEE2C((uint64_t)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1DCBE340C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_1DCAEEE2C(v4);
  sub_1DCAEEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBE3590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_1DCAEEE2C((uint64_t)va);
  sub_1DCAEEE2C(v9 - 56);
  _Unwind_Resume(a1);
}

void sub_1DCBE3770(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1 - 96);
  sub_1DCAEEE2C(v1 - 56);
  _Unwind_Resume(a1);
}

void sub_1DCBE39A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_1DCAEEE2C((uint64_t)va);
  sub_1DCAEEE2C(v11 - 56);
  _Unwind_Resume(a1);
}

std::type_info *sub_1DCBE39D0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCBE2EF0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573930, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_1DCBE3A58(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCBE2EF0(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

void sub_1DCBE3DB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1 - 96);
  sub_1DCAEEE2C(v1 - 72);
  _Unwind_Resume(a1);
}

std::type_info *sub_1DCBE3DE0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x1E0C80C00];
  if ((sub_1DCBE2F28(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_1EA573920, v1, v2);
    v1 = (std::type_info *)sub_1DCB273D4(v1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_1DCBE3E68(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCBE2F28(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

void sub_1DCBE4020(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBE41BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBE42DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1);
  _Unwind_Resume(a1);
}

void sub_1DCBE4448(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE2C(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::VtValue *sub_1DCBE446C(pxrInternal__aapl__pxrReserved__::VtValue *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t Typeid;
  const VtValue *v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  Typeid = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
  if (strcmp((const char *)(*(_QWORD *)(Typeid + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*((_QWORD *)a2 + 1) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(a2, (const std::type_info *)a1, v5);
    sub_1DCB273D4(a1, v7);
    sub_1DCAEEE2C((uint64_t)v7);
  }
  return a1;
}

uint64_t *sub_1DCBE4504(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v7 = *(_QWORD *)(v4 - 24);
    v4 -= 24;
    *(_QWORD *)(v6 - 24) = v7;
    v6 -= 24;
    result = sub_1DCB27664((_QWORD *)(v6 + 8), (_QWORD *)(v4 + 8));
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1DCBE4594(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_1DCAEEE2C(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *sub_1DCBE45E4(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    sub_1DCAE4CDC();
  return operator new(24 * a1);
}

void sub_1DCBE4628(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>, double a4@<D0>)
{
  double v6;
  double v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  long double v14;
  double v15;
  BOOL v16;
  double v17;
  double v18;
  double v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  double v23;
  long double v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  float64x2_t v29;
  float64x2_t v30;
  double v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;

  v6 = 1.0;
  v7 = 1.0 - a4;
  v8 = a1[1];
  v9 = a2[1];
  v10 = vsubq_f64(*a1, *a2);
  v11 = vsubq_f64(v8, v9);
  v10.f64[0] = sqrt(vaddvq_f64(vmlaq_f64(vmulq_f64(v11, v11), v10, v10)));
  v34 = *a1;
  v36 = *a2;
  v12 = vaddq_f64(*a2, *a1);
  v37 = v9;
  v32 = v8;
  v13 = vaddq_f64(v9, v8);
  v14 = atan2(v10.f64[0], sqrt(vaddvq_f64(vmlaq_f64(vmulq_f64(v13, v13), v12, v12))));
  v15 = v14 + v14;
  v16 = v14 + v14 == 0.0;
  v17 = 1.0;
  if (!v16)
    v17 = sin(v15) / v15;
  v18 = 1.0 / v17;
  if (v15 * v7 != 0.0)
    v6 = sin(v15 * v7) / (v15 * v7);
  v19 = v18 * v7 * v6;
  v20 = vmulq_n_f64(v32, v19);
  v21 = vmulq_n_f64(v34, v19);
  v22 = v15 * a4;
  v23 = 1.0;
  if (v22 != 0.0)
  {
    v33 = v20;
    v35 = v21;
    v24 = sin(v22);
    v20 = v33;
    v21 = v35;
    v23 = v24 / v22;
  }
  v25 = v18 * a4 * v23;
  v26 = vmlaq_n_f64(v21, v36, v25);
  v27 = vmlaq_n_f64(v20, v37, v25);
  v28 = vaddvq_f64(vmlaq_f64(vmulq_f64(v27, v27), v26, v26));
  if (v28 == 0.0)
  {
    v29 = (float64x2_t)xmmword_1DCC588A0;
    v30 = 0uLL;
  }
  else
  {
    v31 = 1.0 / sqrt(v28);
    v29 = vmulq_n_f64(v27, v31);
    v30 = vmulq_n_f64(v26, v31);
  }
  *a3 = v30;
  a3[1] = v29;
}

_QWORD *sub_1DCBE4780(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)(v4 + v7) = *(_QWORD *)(a2 + v7);
      result = sub_1DCB25EEC((_QWORD *)(v4 + v7 + 8), (_QWORD *)(a2 + v7 + 8));
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  v3[1] = v4;
  return result;
}

void sub_1DCBE47F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  for (; v3; v3 -= 24)
    sub_1DCAEEE2C(v2 - 16 + v3);
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_1DCBE4818(unint64_t *a1, unint64_t a2, _WORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  __int16 v23;
  _WORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCBE49CC((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_WORD *)((char *)v10 + v11) = *(_WORD *)(v9 + v11);
                v11 += 2;
              }
              while (2 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 2 * v3;
          do
          {
            *(_WORD *)((char *)v7 + v13) = *v12;
            v13 += 2;
          }
          while (2 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_1DCBE49CC((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 2 * v19;
      v22 = v20;
      do
      {
        v23 = *(_WORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 2);
        *(_WORD *)v22 = v23;
        v22 = (unint64_t *)((char *)v22 + 2);
        v21 -= 2;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 2 * v3;
      do
      {
        *(_WORD *)((char *)v20 + v25) = *v24;
        v25 += 2;
      }
      while (2 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 2 * a2;
  if (2 * a2 / a2 != 2)
  {
LABEL_18:
    sub_1DCAEEFD4(a1);
    return;
  }
  v16 = sub_1DCBE49CC((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_WORD *)((char *)v16 + v17) = *v18;
    v17 += 2;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_1DCBE49CC(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 > 0x7FFFFFFFFFFFFFF7)
    v3 = -1;
  else
    v3 = 2 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCBE4A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCBE4A6C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCBE4A94(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCBE4C10(a1);
}

uint64_t sub_1DCBE4AA4()
{
  return 1;
}

unint64_t sub_1DCBE4AAC(unint64_t **a1)
{
  unint64_t v1;
  unsigned __int16 *v2;
  unint64_t v3;
  unsigned int v4;

  v1 = **a1;
  if (v1)
  {
    v2 = (unsigned __int16 *)(*a1)[4];
    v3 = **a1;
    do
    {
      v4 = *v2++;
      v1 = v4 + ((v1 + v4 + (v1 + v4) * (v1 + v4)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_1DCBE4AF4(_QWORD **a1, uint64_t *a2)
{
  return sub_1DCBE4C78(*a1, *a2);
}

BOOL sub_1DCBE4B00(_QWORD **a1, uint64_t a2)
{
  return sub_1DCBE4C78(*a1, a2);
}

uint64_t sub_1DCBE4B0C()
{
  return 0;
}

uint64_t sub_1DCBE4B18(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_1DCBE4B60()
{
  return &unk_1EA573BA0;
}

uint64_t sub_1DCBE4B6C()
{
  return 1;
}

void *sub_1DCBE4B74()
{
  return &unk_1EA573C48;
}

uint64_t sub_1DCBE4B80(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE4B88(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_1DCBE4B94(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_8pxr_half4halfEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE4BC4(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573BA0, a2);
}

void *sub_1DCBE4BE4()
{
  return &unk_1EA573BA0;
}

uint64_t sub_1DCBE4BF0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE4BF8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA575BC0;
  return sub_1DCB272BC(a2, v2);
}

uint64_t *sub_1DCBE4C10(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_1DCAEEE78(v2);
      MEMORY[0x1DF0D228C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

BOOL sub_1DCBE4C78(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  unsigned int v10;
  float v11;
  BOOL v12;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_1DCB27110((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_1DCB27110((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (unsigned __int16 *)a1[4];
  v6 = *(unsigned __int16 **)(a2 + 32);
  v7 = 2 * *a1 - 2;
  do
  {
    v8 = *v5++;
    v9 = *(float *)(MEMORY[0x1E0DF28E0] + 4 * v8);
    v10 = *v6++;
    v11 = *(float *)(MEMORY[0x1E0DF28E0] + 4 * v10);
    result = v9 == v11;
    v12 = v9 != v11 || v7 == 0;
    v7 -= 2;
  }
  while (!v12);
  return result;
}

uint64_t sub_1DCBE4D24(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_1DCBE4C10((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t sub_1DCBE4DDC(_QWORD *a1)
{
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::pxr_half::operator<<();
}

uint64_t *sub_1DCBE4DF4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCBE4E1C(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCBE4F98(a1);
}

uint64_t sub_1DCBE4E2C()
{
  return 1;
}

unint64_t sub_1DCBE4E34(unint64_t **a1)
{
  unint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;

  v1 = **a1;
  if (v1)
  {
    v2 = (uint64_t *)(*a1)[4];
    v3 = **a1;
    do
    {
      v4 = *v2++;
      v1 = v4 + ((v4 + v1 + (v4 + v1) * (v4 + v1)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_1DCBE4E7C(_QWORD **a1, uint64_t *a2)
{
  return sub_1DCBE5000(*a1, *a2);
}

BOOL sub_1DCBE4E88(_QWORD **a1, uint64_t a2)
{
  return sub_1DCBE5000(*a1, a2);
}

uint64_t sub_1DCBE4E94()
{
  return 0;
}

uint64_t sub_1DCBE4EA0(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_1DCBE4EE8()
{
  return &unk_1EA573BB8;
}

uint64_t sub_1DCBE4EF4()
{
  return 1;
}

uint64_t sub_1DCBE4EFC()
{
  return MEMORY[0x1E0DE4ED0];
}

uint64_t sub_1DCBE4F08(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE4F10(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_1DCBE4F1C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIdEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE4F4C(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573BB8, a2);
}

void *sub_1DCBE4F6C()
{
  return &unk_1EA573BB8;
}

uint64_t sub_1DCBE4F78(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE4F80@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA575C78;
  return sub_1DCB46DC8(a2, v2);
}

uint64_t *sub_1DCBE4F98(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_1DCAEEE78(v2);
      MEMORY[0x1DF0D228C](v2, 0x10A0C407A159F4ELL);
    }
  }
  return a1;
}

BOOL sub_1DCBE5000(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  BOOL v11;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_1DCB27110((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_1DCB27110((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)a1[4];
  v6 = *(double **)(a2 + 32);
  v7 = 8 * *a1 - 8;
  do
  {
    v8 = *v5++;
    v9 = v8;
    v10 = *v6++;
    result = v9 == v10;
    v11 = v9 != v10 || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t sub_1DCBE509C(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_1DCBE4F98((uint64_t *)&v13);
  }
  return *a1;
}

double sub_1DCBE5154@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_1DCBE51AC;
  a1[2] = (uint64_t)&stru_1EA573BB8;
  return result;
}

uint64_t sub_1DCBE51AC(uint64_t result)
{
  if (result)
  {
    sub_1DCAEEE78(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

void sub_1DCBE51F4(unint64_t *a1, unint64_t a2, int **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  int v13;
  int *v14;
  uint64_t v15;
  char *v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int *v21;
  char *v22;
  int v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int *v29;
  uint64_t v30;
  char *v31;
  int v32;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCBE540C((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = (char *)v10 + v11;
                v13 = *(_DWORD *)(v9 + v11);
                *((_WORD *)v12 + 2) = *(_WORD *)(v9 + v11 + 4);
                *(_DWORD *)v12 = v13;
                v11 += 6;
              }
              while (6 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 6 * v3;
          do
          {
            v16 = (char *)v7 + v15;
            v17 = *v14;
            *((_WORD *)v16 + 2) = *((_WORD *)v14 + 2);
            *(_DWORD *)v16 = v17;
            v15 += 6;
          }
          while (6 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (_QWORD *)a1[4];
    }
    if (v3 >= a2)
      v24 = a2;
    else
      v24 = *a1;
    v25 = sub_1DCBE540C((uint64_t)a1, a2);
    v18 = v25;
    if (v24)
    {
      v26 = 6 * v24;
      v27 = v25;
      do
      {
        v28 = *(_DWORD *)v7;
        *((_WORD *)v27 + 2) = *((_WORD *)v7 + 2);
        *(_DWORD *)v27 = v28;
        v27 = (_QWORD *)((char *)v27 + 6);
        v7 = (_QWORD *)((char *)v7 + 6);
        v26 -= 6;
      }
      while (v26);
    }
    if (v3 < a2)
    {
      v29 = *a3;
      v30 = 6 * v3;
      do
      {
        v31 = (char *)v25 + v30;
        v32 = *v29;
        *((_WORD *)v31 + 2) = *((_WORD *)v29 + 2);
        *(_DWORD *)v31 = v32;
        v30 += 6;
      }
      while (6 * a2 != v30);
    }
    goto LABEL_29;
  }
  if (a2 >= 0x2AAAAAAAAAAAAAABLL)
  {
LABEL_18:
    sub_1DCAEEFD4(a1);
    return;
  }
  v19 = sub_1DCBE540C((uint64_t)a1, a2);
  v18 = v19;
  v20 = 0;
  v21 = *a3;
  do
  {
    v22 = (char *)v19 + v20;
    v23 = *v21;
    *((_WORD *)v22 + 2) = *((_WORD *)v21 + 2);
    *(_DWORD *)v22 = v23;
    v20 += 6;
  }
  while (6 * a2 != v20);
LABEL_29:
  if (v18 != (_QWORD *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

_QWORD *sub_1DCBE540C(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 > 0x2AAAAAAAAAAAAAA7)
    v3 = -1;
  else
    v3 = 6 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCBE549C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCBE54B4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCBE54DC(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCBE5634(a1);
}

uint64_t sub_1DCBE54EC()
{
  return 1;
}

unint64_t sub_1DCBE54F4(uint64_t **a1)
{
  char v2;

  return sub_1DCBE569C((uint64_t)&v2, *a1);
}

BOOL sub_1DCBE5518(uint64_t **a1, uint64_t *a2)
{
  return sub_1DCBE5808(*a1, *a2);
}

BOOL sub_1DCBE5524(uint64_t **a1, uint64_t a2)
{
  return sub_1DCBE5808(*a1, a2);
}

uint64_t sub_1DCBE5530()
{
  return 0;
}

uint64_t sub_1DCBE553C(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_1DCBE5584()
{
  return &unk_1EA573B58;
}

uint64_t sub_1DCBE5590()
{
  return 1;
}

void *sub_1DCBE5598()
{
  return &unk_1EA573A48;
}

uint64_t sub_1DCBE55A4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE55AC(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_1DCBE55B8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3hEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE55E8(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573B58, a2);
}

void *sub_1DCBE5608()
{
  return &unk_1EA573B58;
}

uint64_t sub_1DCBE5614(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE561C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA575A50;
  return sub_1DCB272BC(a2, v2);
}

uint64_t *sub_1DCBE5634(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_1DCAEEE78(v2);
      MEMORY[0x1DF0D228C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_1DCBE569C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (unsigned __int16 *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 3;
      sub_1DCBE5710((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_1DCBE5710(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  result = sub_1DCBE578C((uint64_t)v5, a2, a2 + 1, a2 + 2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_1DCBE578C(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t v4;

  v4 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v4 += (unint64_t)(*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return sub_1DCBE57C4(a1, a3, a4);
}

uint64_t sub_1DCBE57C4(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(result + 8))
    v3 += (unint64_t)(*(_QWORD *)result + v3 + (*(_QWORD *)result + v3) * (*(_QWORD *)result + v3)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v3;
  *(_QWORD *)result = *a3 + ((v3 + *a3 + (v3 + *a3) * (v3 + (unint64_t)*a3)) >> 1);
  return result;
}

BOOL sub_1DCBE5808(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_1DCB27110((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_1DCB27110((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (unsigned __int16 *)a1[4];
  v7 = *(unsigned __int16 **)(a2 + 32);
  v8 = 6 * v5 - 6;
  do
  {
    result = sub_1DCBE58B8(v6, v7);
    if (!result)
      break;
    v6 += 3;
    v7 += 3;
    v9 = v8;
    v8 -= 6;
  }
  while (v9);
  return result;
}

BOOL sub_1DCBE58B8(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x1E0DF28E0] + 4 * *a1) == *(float *)(MEMORY[0x1E0DF28E0] + 4 * *a2)
      && *(float *)(MEMORY[0x1E0DF28E0] + 4 * a1[1]) == *(float *)(MEMORY[0x1E0DF28E0] + 4 * a2[1])
      && *(float *)(MEMORY[0x1E0DF28E0] + 4 * a1[2]) == *(float *)(MEMORY[0x1E0DF28E0] + 4 * a2[2]);
}

uint64_t sub_1DCBE5914(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_1DCBE5634((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t sub_1DCBE59CC(_QWORD *a1)
{
  *a1 += 6;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_1DCBE59E4(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  _QWORD *v22;
  __int128 v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 *v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCBE5BFC((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11];
                v13 = *(_OWORD *)(v9 + v11 * 8);
                v12[2] = *(_QWORD *)(v9 + v11 * 8 + 16);
                *(_OWORD *)v12 = v13;
                v11 += 3;
              }
              while (3 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 3 * v3;
          do
          {
            v16 = &v7[v15];
            v17 = *v14;
            v16[2] = *((_QWORD *)v14 + 2);
            *(_OWORD *)v16 = v17;
            v15 += 3;
          }
          while (3 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (_QWORD *)a1[4];
    }
    if (v3 >= a2)
      v24 = a2;
    else
      v24 = *a1;
    v25 = sub_1DCBE5BFC((uint64_t)a1, a2);
    v18 = v25;
    if (v24)
    {
      v26 = 24 * v24;
      v27 = v25;
      do
      {
        v28 = *(_OWORD *)v7;
        v27[2] = v7[2];
        *(_OWORD *)v27 = v28;
        v27 += 3;
        v7 += 3;
        v26 -= 24;
      }
      while (v26);
    }
    if (v3 < a2)
    {
      v29 = *a3;
      v30 = 3 * v3;
      do
      {
        v31 = &v25[v30];
        v32 = *v29;
        v31[2] = *((_QWORD *)v29 + 2);
        *(_OWORD *)v31 = v32;
        v30 += 3;
      }
      while (3 * a2 != v30);
    }
    goto LABEL_29;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
  {
LABEL_18:
    sub_1DCAEEFD4(a1);
    return;
  }
  v19 = sub_1DCBE5BFC((uint64_t)a1, a2);
  v18 = v19;
  v20 = 0;
  v21 = *a3;
  do
  {
    v22 = &v19[v20];
    v23 = *v21;
    v22[2] = *((_QWORD *)v21 + 2);
    *(_OWORD *)v22 = v23;
    v20 += 3;
  }
  while (3 * a2 != v20);
LABEL_29:
  if (v18 != (_QWORD *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

_QWORD *sub_1DCBE5BFC(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 > 0xAAAAAAAAAAAAAA9)
    v3 = -1;
  else
    v3 = 24 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCBE5C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCBE5CA4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCBE5CCC(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCBE5E24(a1);
}

uint64_t sub_1DCBE5CDC()
{
  return 1;
}

unint64_t sub_1DCBE5CE4(uint64_t **a1)
{
  char v2;

  return sub_1DCBE5E8C((uint64_t)&v2, *a1);
}

BOOL sub_1DCBE5D08(_QWORD **a1, uint64_t *a2)
{
  return sub_1DCBE5F7C(*a1, *a2);
}

BOOL sub_1DCBE5D14(_QWORD **a1, uint64_t a2)
{
  return sub_1DCBE5F7C(*a1, a2);
}

uint64_t sub_1DCBE5D20()
{
  return 0;
}

uint64_t sub_1DCBE5D2C(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_1DCBE5D74()
{
  return &unk_1EA573B28;
}

uint64_t sub_1DCBE5D80()
{
  return 1;
}

void *sub_1DCBE5D88()
{
  return &unk_1EA573A28;
}

uint64_t sub_1DCBE5D94(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE5D9C(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_1DCBE5DA8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE5DD8(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573B28, a2);
}

void *sub_1DCBE5DF8()
{
  return &unk_1EA573B28;
}

uint64_t sub_1DCBE5E04(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE5E0C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA5758E0;
  return sub_1DCB272BC(a2, v2);
}

uint64_t *sub_1DCBE5E24(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_1DCAEEE78(v2);
      MEMORY[0x1DF0D228C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_1DCBE5E8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (uint64_t *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 3;
      sub_1DCBE5F00((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_1DCBE5F00(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  result = sub_1DCBD6214((uint64_t)v5, a2, a2 + 1, a2 + 2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL sub_1DCBE5F7C(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  double *v6;
  double *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_1DCB27110((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_1DCB27110((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)a1[4];
  v6 = &v5[3 * *a1];
  for (i = *(double **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t sub_1DCBE6040(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_1DCBE5E24((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t sub_1DCBE60F8(_QWORD *a1)
{
  *a1 += 24;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_1DCBE6110(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3d]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_1DCBE5BFC((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 24 * v5;
        v9 = v6;
        do
        {
          v10 = *v4;
          v9[2] = *((_QWORD *)v4 + 2);
          *(_OWORD *)v9 = v10;
          v9 += 3;
          v4 = (__int128 *)((char *)v4 + 24);
          v8 -= 24;
        }
        while (v8);
      }
      sub_1DCAEEE78((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

double sub_1DCBE61B4@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_1DCBE620C;
  a1[2] = (uint64_t)&stru_1EA573B28;
  return result;
}

uint64_t sub_1DCBE620C(uint64_t result)
{
  if (result)
  {
    sub_1DCAEEE78(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

void sub_1DCBE6254(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load((unint64_t *)v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCBE6408((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                v10[i] = *(_QWORD *)(v9 + i * 8);
            }
          }
          v12 = *a3;
          v13 = v3;
          do
            v7[v13++] = *v12;
          while (a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (uint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_1DCBE6408((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 8 * v19;
      v22 = v20;
      do
      {
        v23 = *v7++;
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = v3;
      do
        v20[v25++] = *v24;
      while (a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 8 * a2;
  if (8 * a2 / a2 != 8)
  {
LABEL_18:
    sub_1DCAEEFD4(a1);
    return;
  }
  v16 = sub_1DCBE6408((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    v16[v17 / 8] = *v18;
    v17 += 8;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (uint64_t *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_1DCBE6408(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCBE6490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCBE64A8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCBE64D0(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCBE6628(a1);
}

uint64_t sub_1DCBE64E0()
{
  return 1;
}

unint64_t sub_1DCBE64E8(uint64_t **a1)
{
  char v2;

  return sub_1DCBE6690((uint64_t)&v2, *a1);
}

BOOL sub_1DCBE650C(uint64_t **a1, uint64_t *a2)
{
  return sub_1DCBE67BC(*a1, *a2);
}

BOOL sub_1DCBE6518(uint64_t **a1, uint64_t a2)
{
  return sub_1DCBE67BC(*a1, a2);
}

uint64_t sub_1DCBE6524()
{
  return 0;
}

uint64_t sub_1DCBE6530(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_1DCBE6578()
{
  return &unk_1EA573AF8;
}

uint64_t sub_1DCBE6584()
{
  return 1;
}

void *sub_1DCBE658C()
{
  return &unk_1EA5739E8;
}

uint64_t sub_1DCBE6598(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE65A0(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_1DCBE65AC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfQuathEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE65DC(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573AF8, a2);
}

void *sub_1DCBE65FC()
{
  return &unk_1EA573AF8;
}

uint64_t sub_1DCBE6608(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE6610@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA575770;
  return sub_1DCB272BC(a2, v2);
}

uint64_t *sub_1DCBE6628(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_1DCAEEE78(v2);
      MEMORY[0x1DF0D228C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_1DCBE6690(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (unsigned __int16 *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      sub_1DCBE6704((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_1DCBE6704(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t result;
  unint64_t v4;
  unsigned __int16 v5;
  _QWORD v6[2];

  v5 = a2[3];
  v6[0] = 0;
  v6[1] = 0;
  result = sub_1DCBE6788((uint64_t)v6, &v5, a2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v6[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_1DCBE6788(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v3 += (unint64_t)(*(_QWORD *)a1 + v3 + (*(_QWORD *)a1 + v3) * (*(_QWORD *)a1 + v3)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v3;
  return sub_1DCBE5710(a1, a3);
}

BOOL sub_1DCBE67BC(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_1DCB27110((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_1DCB27110((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (unsigned __int16 *)a1[4];
  v7 = *(unsigned __int16 **)(a2 + 32);
  v8 = 8 * v5;
  v9 = MEMORY[0x1E0DF28E0];
  while (*(float *)(v9 + 4 * v6[3]) == *(float *)(v9 + 4 * v7[3]))
  {
    result = sub_1DCBE58B8(v6, v7);
    if (!result)
      return result;
    v6 += 4;
    v7 += 4;
    v8 -= 8;
    if (!v8)
      return 1;
  }
  return 0;
}

uint64_t sub_1DCBE6884(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_1DCBE6628((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t sub_1DCBE693C(_QWORD *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_1DCBE6954(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCBE6B08((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                v11 += 2;
              }
              while (2 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 2 * v3;
          do
          {
            *(_OWORD *)&v7[v13] = *v12;
            v13 += 2;
          }
          while (2 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_1DCBE6B08((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 16 * v19;
      v22 = v20;
      do
      {
        v23 = *(_OWORD *)v7;
        v7 += 2;
        *(_OWORD *)v22 = v23;
        v22 += 2;
        v21 -= 16;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 2 * v3;
      do
      {
        *(_OWORD *)&v20[v25] = *v24;
        v25 += 2;
      }
      while (2 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 16 * a2;
  if (16 * a2 / a2 != 16)
  {
LABEL_18:
    sub_1DCAEEFD4(a1);
    return;
  }
  v16 = sub_1DCBE6B08((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_OWORD *)&v16[v17 / 8] = *v18;
    v17 += 16;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_1DCBE6B08(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL)
    v3 = -1;
  else
    v3 = 16 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCBE6B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCBE6BA4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCBE6BCC(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCBE6D24(a1);
}

uint64_t sub_1DCBE6BDC()
{
  return 1;
}

unint64_t sub_1DCBE6BE4(uint64_t **a1)
{
  char v2;

  return sub_1DCBE6D8C((uint64_t)&v2, *a1);
}

BOOL sub_1DCBE6C08(_QWORD **a1, uint64_t *a2)
{
  return sub_1DCBE6EB8(*a1, *a2);
}

BOOL sub_1DCBE6C14(_QWORD **a1, uint64_t a2)
{
  return sub_1DCBE6EB8(*a1, a2);
}

uint64_t sub_1DCBE6C20()
{
  return 0;
}

uint64_t sub_1DCBE6C2C(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_1DCBE6C74()
{
  return &unk_1EA573AE0;
}

uint64_t sub_1DCBE6C80()
{
  return 1;
}

void *sub_1DCBE6C88()
{
  return &unk_1EA5739D8;
}

uint64_t sub_1DCBE6C94(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE6C9C(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_1DCBE6CA8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfQuatfEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE6CD8(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573AE0, a2);
}

void *sub_1DCBE6CF8()
{
  return &unk_1EA573AE0;
}

uint64_t sub_1DCBE6D04(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE6D0C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA5756B8;
  return sub_1DCB272BC(a2, v2);
}

uint64_t *sub_1DCBE6D24(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_1DCAEEE78(v2);
      MEMORY[0x1DF0D228C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_1DCBE6D8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (unsigned int *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      sub_1DCBE6E00((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_1DCBE6E00(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  unint64_t v4;
  unsigned int v5;
  _QWORD v6[2];

  v5 = a2[3];
  v6[0] = 0;
  v6[1] = 0;
  result = sub_1DCBE6E84((uint64_t)v6, &v5, a2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v6[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_1DCBE6E84(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v3 += (unint64_t)(*(_QWORD *)a1 + v3 + (*(_QWORD *)a1 + v3) * (*(_QWORD *)a1 + v3)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v3;
  return sub_1DCB26F54(a1, a3);
}

BOOL sub_1DCBE6EB8(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  uint64_t v6;
  float *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_1DCB27110((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_1DCB27110((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)(a1[4] + 8);
  v6 = 16 * *a1;
  for (i = (float *)(*(_QWORD *)(a2 + 32) + 8);
        v5[1] == i[1] && *(v5 - 2) == *(i - 2) && *(v5 - 1) == *(i - 1) && *v5 == *i;
        i += 4)
  {
    v5 += 4;
    v6 -= 16;
    if (!v6)
      return 1;
  }
  return 0;
}

uint64_t sub_1DCBE6F90(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_1DCBE6D24((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t sub_1DCBE7048(_QWORD *a1)
{
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_1DCBE7060(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  __int128 v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  __int128 v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _OWORD *v22;
  unint64_t *v23;
  __int128 v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  __int128 v34;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCBE7228((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11];
                v13 = *(_OWORD *)(v9 + v11 * 8 + 16);
                *(_OWORD *)v12 = *(_OWORD *)(v9 + v11 * 8);
                *((_OWORD *)v12 + 1) = v13;
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 4 * v3;
          do
          {
            v16 = &v7[v15];
            v17 = v14[1];
            *(_OWORD *)v16 = *v14;
            *((_OWORD *)v16 + 1) = v17;
            v15 += 4;
          }
          while (4 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v25 = a2;
    else
      v25 = *a1;
    v26 = sub_1DCBE7228((uint64_t)a1, a2);
    v18 = v26;
    if (v25)
    {
      v27 = 32 * v25;
      v28 = v26;
      do
      {
        v29 = *(_OWORD *)v7;
        v30 = *((_OWORD *)v7 + 1);
        v7 += 4;
        *(_OWORD *)v28 = v29;
        *((_OWORD *)v28 + 1) = v30;
        v28 += 4;
        v27 -= 32;
      }
      while (v27);
    }
    if (v3 < a2)
    {
      v31 = *a3;
      v32 = 4 * v3;
      do
      {
        v33 = &v26[v32];
        v34 = v31[1];
        *(_OWORD *)v33 = *v31;
        *((_OWORD *)v33 + 1) = v34;
        v32 += 4;
      }
      while (4 * a2 != v32);
    }
    goto LABEL_29;
  }
  v19 = 32 * a2;
  if (32 * a2 / a2 != 32)
  {
LABEL_18:
    sub_1DCAEEFD4(a1);
    return;
  }
  v20 = sub_1DCBE7228((uint64_t)a1, a2);
  v18 = v20;
  v21 = 0;
  v22 = *a3;
  do
  {
    v23 = &v20[v21 / 8];
    v24 = v22[1];
    *(_OWORD *)v23 = *v22;
    *((_OWORD *)v23 + 1) = v24;
    v21 += 32;
  }
  while (v19 != v21);
LABEL_29:
  if (v18 != (unint64_t *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

_QWORD *sub_1DCBE7228(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 >> 59)
    v3 = -1;
  else
    v3 = (32 * a2) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCBE72AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCBE72C4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCBE72EC(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCBE7444(a1);
}

uint64_t sub_1DCBE72FC()
{
  return 1;
}

unint64_t sub_1DCBE7304(uint64_t **a1)
{
  char v2;

  return sub_1DCBE74AC((uint64_t)&v2, *a1);
}

BOOL sub_1DCBE7328(_QWORD **a1, uint64_t *a2)
{
  return sub_1DCBE75D8(*a1, *a2);
}

BOOL sub_1DCBE7334(_QWORD **a1, uint64_t a2)
{
  return sub_1DCBE75D8(*a1, a2);
}

uint64_t sub_1DCBE7340()
{
  return 0;
}

uint64_t sub_1DCBE734C(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_1DCBE7394()
{
  return &unk_1EA573AC8;
}

uint64_t sub_1DCBE73A0()
{
  return 1;
}

void *sub_1DCBE73A8()
{
  return &unk_1EA5739C8;
}

uint64_t sub_1DCBE73B4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE73BC(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_1DCBE73C8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfQuatdEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE73F8(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573AC8, a2);
}

void *sub_1DCBE7418()
{
  return &unk_1EA573AC8;
}

uint64_t sub_1DCBE7424(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE742C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA575600;
  return sub_1DCB272BC(a2, v2);
}

uint64_t *sub_1DCBE7444(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_1DCAEEE78(v2);
      MEMORY[0x1DF0D228C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_1DCBE74AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (uint64_t *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      sub_1DCBE7520((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_1DCBE7520(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v5 = a2[3];
  v6[0] = 0;
  v6[1] = 0;
  result = sub_1DCBE75A4((uint64_t)v6, &v5, a2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v6[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_1DCBE75A4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v3 += (unint64_t)(*(_QWORD *)a1 + v3 + (*(_QWORD *)a1 + v3) * (*(_QWORD *)a1 + v3)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v3;
  return sub_1DCBE5F00(a1, a3);
}

BOOL sub_1DCBE75D8(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  uint64_t v6;
  double *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_1DCB27110((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_1DCB27110((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)(a1[4] + 16);
  v6 = 32 * *a1;
  for (i = (double *)(*(_QWORD *)(a2 + 32) + 16);
        v5[1] == i[1] && *(v5 - 2) == *(i - 2) && *(v5 - 1) == *(i - 1) && *v5 == *i;
        i += 4)
  {
    v5 += 4;
    v6 -= 32;
    if (!v6)
      return 1;
  }
  return 0;
}

uint64_t sub_1DCBE76B0(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_1DCBE7444((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t sub_1DCBE7768(_QWORD *a1)
{
  *a1 += 32;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_1DCBE7780(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuatf]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_1DCBE6B08((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 16 * v5;
        v9 = v6;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      sub_1DCAEEE78((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

void sub_1DCBE7814(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuatd]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_1DCBE7228((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 32 * v5;
        v9 = v6;
        do
        {
          v10 = *v4;
          v11 = v4[1];
          v4 += 2;
          *v9 = v10;
          v9[1] = v11;
          v9 += 2;
          v8 -= 32;
        }
        while (v8);
      }
      sub_1DCAEEE78((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

double sub_1DCBE78A8@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_1DCBE7900;
  a1[2] = (uint64_t)&stru_1EA573AE0;
  return result;
}

uint64_t sub_1DCBE7900(uint64_t result)
{
  if (result)
  {
    sub_1DCAEEE78(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

double sub_1DCBE7948@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_1DCBE79A0;
  a1[2] = (uint64_t)&stru_1EA573AC8;
  return result;
}

uint64_t sub_1DCBE79A0(uint64_t result)
{
  if (result)
  {
    sub_1DCAEEE78(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

_WORD *sub_1DCBE79E8(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

_WORD *sub_1DCBE79F8(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1DCBE7A04()
{
  return 1;
}

unint64_t sub_1DCBE7A0C(unsigned __int16 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_1DCBE7A2C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x1E0DF28E0] + 4 * *a1) == *(float *)(MEMORY[0x1E0DF28E0] + 4 * *a2);
}

BOOL sub_1DCBE7A50(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x1E0DF28E0] + 4 * *a1) == *(float *)(MEMORY[0x1E0DF28E0] + 4 * *a2);
}

uint64_t sub_1DCBE7A78()
{
  return 0;
}

uint64_t sub_1DCBE7A84()
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::operator<<();
}

void *sub_1DCBE7A94()
{
  return &unk_1EA573C48;
}

uint64_t sub_1DCBE7AA0()
{
  return 0;
}

uint64_t sub_1DCBE7AA8()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE7AB4()
{
  return 0;
}

uint64_t sub_1DCBE7ABC()
{
  return 0;
}

BOOL sub_1DCBE7AC4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__8pxr_half4halfE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE7AF4(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573C48, a2);
}

void *sub_1DCBE7B14()
{
  return &unk_1EA573C48;
}

_WORD *sub_1DCBE7B24@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&off_1EA576010 + 3;
  *(_WORD *)a2 = *result;
  return result;
}

float sub_1DCBE7B40(float *a1, _DWORD *a2)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

float sub_1DCBE7B50(float *a1, _DWORD *a2)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

uint64_t sub_1DCBE7B5C()
{
  return 1;
}

unint64_t sub_1DCBE7B64(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_1DCBE7B84(float *a1, float *a2)
{
  return *a1 == *a2;
}

BOOL sub_1DCBE7B98(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1DCBE7BB0()
{
  return 0;
}

uint64_t sub_1DCBE7BC0()
{
  return MEMORY[0x1E0DE4EE0];
}

uint64_t sub_1DCBE7BCC()
{
  return 0;
}

uint64_t sub_1DCBE7BD4()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE7BE0()
{
  return 0;
}

uint64_t sub_1DCBE7BE8()
{
  return 0;
}

BOOL sub_1DCBE7BF0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x1E0DE4EE0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE7C24(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x1E0DE4EE0], a2);
}

uint64_t sub_1DCBE7C44()
{
  return MEMORY[0x1E0DE4EE0];
}

float sub_1DCBE7C54@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_QWORD *)(a2 + 8) = &unk_1EA5762F3;
  result = *a1;
  *(float *)a2 = *a1;
  return result;
}

double sub_1DCBE7C70(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_1DCBE7C80(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

uint64_t sub_1DCBE7C8C()
{
  return 1;
}

unint64_t sub_1DCBE7C94(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_1DCBE7CB4(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL sub_1DCBE7CC8(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1DCBE7CE0()
{
  return 0;
}

uint64_t sub_1DCBE7CF0()
{
  return MEMORY[0x1E0DE4ED0];
}

uint64_t sub_1DCBE7CFC()
{
  return 0;
}

uint64_t sub_1DCBE7D04()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE7D10()
{
  return 0;
}

uint64_t sub_1DCBE7D18()
{
  return 0;
}

BOOL sub_1DCBE7D20(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x1E0DE4ED0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE7D54(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x1E0DE4ED0], a2);
}

uint64_t sub_1DCBE7D74()
{
  return MEMORY[0x1E0DE4ED0];
}

double sub_1DCBE7D84@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  a2[1] = &unk_1EA57623B;
  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

_QWORD *sub_1DCBE7DA0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = sub_1DCBE7DF0;
  a1[2] = MEMORY[0x1E0DE4ED0];
  return result;
}

uint64_t sub_1DCBE7DF0(uint64_t result)
{
  if (result)
    JUMPOUT(0x1DF0D228CLL);
  return result;
}

_DWORD *sub_1DCBE7E0C(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_1DCBE7E1C(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1DCBE7E28()
{
  return 1;
}

unint64_t sub_1DCBE7E30(unsigned __int16 *a1)
{
  return bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (a1[1]+ ((a1[1]+ (unint64_t)*a1+ (a1[1] + *a1) * (unint64_t)(a1[1] + *a1)) >> 1))));
}

BOOL sub_1DCBE7E68(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x1E0DF28E0] + 4 * *a1) == *(float *)(MEMORY[0x1E0DF28E0] + 4 * *a2)
      && *(float *)(MEMORY[0x1E0DF28E0] + 4 * a1[1]) == *(float *)(MEMORY[0x1E0DF28E0] + 4 * a2[1]);
}

BOOL sub_1DCBE7EAC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x1E0DF28E0] + 4 * *a1) == *(float *)(MEMORY[0x1E0DF28E0] + 4 * *a2)
      && *(float *)(MEMORY[0x1E0DF28E0] + 4 * a1[1]) == *(float *)(MEMORY[0x1E0DF28E0] + 4 * a2[1]);
}

uint64_t sub_1DCBE7EF4()
{
  return 0;
}

uint64_t sub_1DCBE7F00()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_1DCBE7F10()
{
  return &unk_1EA573A18;
}

uint64_t sub_1DCBE7F1C()
{
  return 0;
}

uint64_t sub_1DCBE7F24()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE7F30()
{
  return 0;
}

uint64_t sub_1DCBE7F38()
{
  return 0;
}

BOOL sub_1DCBE7F40(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2hE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE7F70(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573A18, a2);
}

void *sub_1DCBE7F90()
{
  return &unk_1EA573A18;
}

_DWORD *sub_1DCBE7FA0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&off_1EA574ED0 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

_QWORD *sub_1DCBE7FBC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_1DCBE7FCC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1DCBE7FD8()
{
  return 1;
}

unint64_t sub_1DCBE7FE0(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (a1[1]+ ((a1[1] + (unint64_t)*a1 + (a1[1] + (unint64_t)*a1) * (a1[1] + (unint64_t)*a1)) >> 1))));
}

BOOL sub_1DCBE8014(float *a1, float *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

BOOL sub_1DCBE8030(float *a1, float *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t sub_1DCBE8050()
{
  return 0;
}

uint64_t sub_1DCBE805C()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_1DCBE806C()
{
  return &unk_1EA573A08;
}

uint64_t sub_1DCBE8078()
{
  return 0;
}

uint64_t sub_1DCBE8080()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE808C()
{
  return 0;
}

uint64_t sub_1DCBE8094()
{
  return 0;
}

BOOL sub_1DCBE809C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE80CC(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573A08, a2);
}

void *sub_1DCBE80EC()
{
  return &unk_1EA573A08;
}

_QWORD *sub_1DCBE80FC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_1EA574E18 + 3;
  return result;
}

uint64_t *sub_1DCBE8114(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1DCBE8138(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 16);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x1DF0D228CLL);
    }
  }
  return result;
}

_QWORD *sub_1DCBE8174(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_1DCBE8184()
{
  return 1;
}

unint64_t sub_1DCBE818C(uint64_t a1)
{
  return bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (*(_QWORD *)(*(_QWORD *)a1 + 8)+ ((*(_QWORD *)(*(_QWORD *)a1 + 8)+ **(_QWORD **)a1+ (*(_QWORD *)(*(_QWORD *)a1 + 8) + **(_QWORD **)a1)* (*(_QWORD *)(*(_QWORD *)a1 + 8) + **(_QWORD **)a1)) >> 1))));
}

BOOL sub_1DCBE81C4(uint64_t a1, uint64_t a2)
{
  return *(double *)(*(_QWORD *)a1 + 8) == *(double *)(*(_QWORD *)a2 + 8) && **(double **)a1 == **(double **)a2;
}

BOOL sub_1DCBE81E8(uint64_t a1, double *a2)
{
  return *(double *)(*(_QWORD *)a1 + 8) == a2[1] && **(double **)a1 == *a2;
}

uint64_t sub_1DCBE820C()
{
  return 0;
}

uint64_t sub_1DCBE8218()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_1DCBE8228()
{
  return &unk_1EA5739F8;
}

uint64_t sub_1DCBE8234()
{
  return 0;
}

uint64_t sub_1DCBE823C()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE8248()
{
  return 0;
}

uint64_t sub_1DCBE8250()
{
  return 0;
}

BOOL sub_1DCBE8258(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE8288(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA5739F8, a2);
}

void *sub_1DCBE82A8()
{
  return &unk_1EA5739F8;
}

uint64_t sub_1DCBE82B4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE82BC@<X0>(_OWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *a1;
  a2[1] = (uint64_t)&off_1EA574D60 + 2;
  result = operator new();
  *(_OWORD *)result = *v3;
  v5 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)(result + 16));
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_1DCBE8328(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = atomic_load((unsigned int *)(*a1 + 16));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = *a1;
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    v5 = (unsigned int *)(v3 + 16);
    atomic_store(0, (unsigned int *)(v3 + 16));
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    *a1 = v3;
    v7 = (unsigned int *)(v4 + 16);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      __dmb(9u);
      MEMORY[0x1DF0D228C]();
    }
  }
  return *a1;
}

int *sub_1DCBE83D0(int *result, uint64_t a2)
{
  int v2;

  v2 = *result;
  *(_WORD *)(a2 + 4) = *((_WORD *)result + 2);
  *(_DWORD *)a2 = v2;
  return result;
}

int *sub_1DCBE83E8(int *result, uint64_t a2)
{
  int v2;

  v2 = *result;
  *(_WORD *)(a2 + 4) = *((_WORD *)result + 2);
  *(_DWORD *)a2 = v2;
  return result;
}

uint64_t sub_1DCBE83FC()
{
  return 1;
}

unint64_t sub_1DCBE8404(unsigned __int16 *a1)
{
  _QWORD v2[2];

  v2[0] = 0;
  v2[1] = 0;
  sub_1DCBE578C((uint64_t)v2, a1, a1 + 1, a1 + 2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2[0]));
}

uint64_t sub_1DCBE8464()
{
  return 0;
}

uint64_t sub_1DCBE8470()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_1DCBE8480()
{
  return &unk_1EA573A48;
}

uint64_t sub_1DCBE848C()
{
  return 0;
}

uint64_t sub_1DCBE8494()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE84A0()
{
  return 0;
}

uint64_t sub_1DCBE84A8()
{
  return 0;
}

BOOL sub_1DCBE84B0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3hE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE84E0(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573A48, a2);
}

void *sub_1DCBE8500()
{
  return &unk_1EA573A48;
}

uint64_t sub_1DCBE8510@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&off_1EA5750F8 + 3;
  *(_DWORD *)a2 = *(_DWORD *)result;
  *(_WORD *)(a2 + 4) = *(_WORD *)(result + 4);
  return result;
}

uint64_t *sub_1DCBE8534(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 12);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1DCBE8558(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 12);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x1DF0D228CLL);
    }
  }
  return result;
}

_QWORD *sub_1DCBE8594(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_1DCBE85A4()
{
  return 1;
}

unint64_t sub_1DCBE85AC(unsigned int **a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int *v3;
  _QWORD v5[2];

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v5[0] = 0;
  v5[1] = 0;
  sub_1DCB26FD0((uint64_t)v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5[0]));
}

BOOL sub_1DCBE8600(float **a1, float **a2)
{
  float *v2;
  float *v3;

  v2 = *a1;
  v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_1DCBE8644(float **a1, float *a2)
{
  float *v2;

  v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_1DCBE8688()
{
  return 0;
}

uint64_t sub_1DCBE8694()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_1DCBE86A4()
{
  return &unk_1EA573A38;
}

uint64_t sub_1DCBE86B0()
{
  return 0;
}

uint64_t sub_1DCBE86B8()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE86C4()
{
  return 0;
}

uint64_t sub_1DCBE86CC()
{
  return 0;
}

BOOL sub_1DCBE86D4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE8704(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573A38, a2);
}

void *sub_1DCBE8724()
{
  return &unk_1EA573A38;
}

uint64_t sub_1DCBE8730(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE8738@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (uint64_t)&off_1EA575040 + 2;
  result = operator new();
  v5 = *(_DWORD *)(v3 + 8);
  *(_QWORD *)result = *(_QWORD *)v3;
  *(_DWORD *)(result + 8) = v5;
  v6 = (unsigned int *)(result + 12);
  atomic_store(0, (unsigned int *)(result + 12));
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_1DCBE87AC(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = atomic_load((unsigned int *)(*a1 + 12));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = *a1;
    v5 = *(_DWORD *)(*a1 + 8);
    *(_QWORD *)v3 = *(_QWORD *)*a1;
    *(_DWORD *)(v3 + 8) = v5;
    v6 = (unsigned int *)(v3 + 12);
    atomic_store(0, (unsigned int *)(v3 + 12));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *a1 = v3;
    v8 = (unsigned int *)(v4 + 12);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      MEMORY[0x1DF0D228C]();
    }
  }
  return *a1;
}

uint64_t *sub_1DCBE885C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1DCBE8880(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 24);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x1DF0D228CLL);
    }
  }
  return result;
}

_QWORD *sub_1DCBE88BC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_1DCBE88CC()
{
  return 1;
}

unint64_t sub_1DCBE88D4(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD v5[2];

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v5[0] = 0;
  v5[1] = 0;
  sub_1DCBD6214((uint64_t)v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5[0]));
}

BOOL sub_1DCBE8928(double **a1, double **a2)
{
  double *v2;
  double *v3;

  v2 = *a1;
  v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_1DCBE896C(double **a1, double *a2)
{
  double *v2;

  v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_1DCBE89B0()
{
  return 0;
}

uint64_t sub_1DCBE89BC()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_1DCBE89CC()
{
  return &unk_1EA573A28;
}

uint64_t sub_1DCBE89D8()
{
  return 0;
}

uint64_t sub_1DCBE89E0()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE89EC()
{
  return 0;
}

uint64_t sub_1DCBE89F4()
{
  return 0;
}

BOOL sub_1DCBE89FC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE8A2C(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573A28, a2);
}

void *sub_1DCBE8A4C()
{
  return &unk_1EA573A28;
}

uint64_t sub_1DCBE8A58(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE8A60@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (uint64_t)&off_1EA574F88 + 2;
  result = operator new();
  v5 = *(_QWORD *)(v3 + 16);
  *(_OWORD *)result = *(_OWORD *)v3;
  *(_QWORD *)(result + 16) = v5;
  v6 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)(result + 24));
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_1DCBE8AD4(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = atomic_load((unsigned int *)(*a1 + 24));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = *a1;
    v5 = *(_QWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_QWORD *)(v3 + 16) = v5;
    v6 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)(v3 + 24));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *a1 = v3;
    v8 = (unsigned int *)(v4 + 24);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      MEMORY[0x1DF0D228C]();
    }
  }
  return *a1;
}

_QWORD *sub_1DCBE8B84(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_1DCBE8B94(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1DCBE8BA0()
{
  return 1;
}

unint64_t sub_1DCBE8BA8(unsigned __int16 *a1)
{
  _QWORD v2[2];

  v2[0] = 0;
  v2[1] = 0;
  sub_1DCBE8CD0((uint64_t)v2, a1, a1 + 1, a1 + 2, a1 + 3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2[0]));
}

uint64_t sub_1DCBE8C0C()
{
  return 0;
}

uint64_t sub_1DCBE8C18()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_1DCBE8C28()
{
  return &unk_1EA573A78;
}

uint64_t sub_1DCBE8C34()
{
  return 0;
}

uint64_t sub_1DCBE8C3C()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE8C48()
{
  return 0;
}

uint64_t sub_1DCBE8C50()
{
  return 0;
}

BOOL sub_1DCBE8C58(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4hE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE8C88(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573A78, a2);
}

void *sub_1DCBE8CA8()
{
  return &unk_1EA573A78;
}

_QWORD *sub_1DCBE8CB8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_1EA575320 + 3;
  return result;
}

uint64_t sub_1DCBE8CD0(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  uint64_t v5;

  v5 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v5 += (unint64_t)(*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return sub_1DCBE578C(a1, a3, a4, a5);
}

BOOL sub_1DCBE8D0C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x1E0DF28E0] + 4 * *a1) == *(float *)(MEMORY[0x1E0DF28E0] + 4 * *a2)
      && *(float *)(MEMORY[0x1E0DF28E0] + 4 * a1[1]) == *(float *)(MEMORY[0x1E0DF28E0] + 4 * a2[1])
      && *(float *)(MEMORY[0x1E0DF28E0] + 4 * a1[2]) == *(float *)(MEMORY[0x1E0DF28E0] + 4 * a2[2])
      && *(float *)(MEMORY[0x1E0DF28E0] + 4 * a1[3]) == *(float *)(MEMORY[0x1E0DF28E0] + 4 * a2[3]);
}

uint64_t *sub_1DCBE8D80(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1DCBE8DA4(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 16);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x1DF0D228CLL);
    }
  }
  return result;
}

_QWORD *sub_1DCBE8DE0(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_1DCBE8DF0()
{
  return 1;
}

unint64_t sub_1DCBE8DF8(unsigned int **a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  _QWORD v6[2];

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v4 = *a1 + 3;
  v6[0] = 0;
  v6[1] = 0;
  sub_1DCB28070((uint64_t)v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6[0]));
}

BOOL sub_1DCBE8E50(float **a1, float **a2)
{
  float *v2;
  float *v3;

  v2 = *a1;
  v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2] && v2[3] == v3[3];
}

BOOL sub_1DCBE8EA4(float **a1, float *a2)
{
  float *v2;

  v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2] && v2[3] == a2[3];
}

uint64_t sub_1DCBE8EF8()
{
  return 0;
}

uint64_t sub_1DCBE8F04()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_1DCBE8F14()
{
  return &unk_1EA573A68;
}

uint64_t sub_1DCBE8F20()
{
  return 0;
}

uint64_t sub_1DCBE8F28()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE8F34()
{
  return 0;
}

uint64_t sub_1DCBE8F3C()
{
  return 0;
}

BOOL sub_1DCBE8F44(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE8F74(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573A68, a2);
}

void *sub_1DCBE8F94()
{
  return &unk_1EA573A68;
}

uint64_t sub_1DCBE8FA0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE8FA8@<X0>(_OWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *a1;
  a2[1] = (uint64_t)&off_1EA575268 + 2;
  result = operator new();
  *(_OWORD *)result = *v3;
  v5 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)(result + 16));
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_1DCBE9014(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = atomic_load((unsigned int *)(*a1 + 16));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = *a1;
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    v5 = (unsigned int *)(v3 + 16);
    atomic_store(0, (unsigned int *)(v3 + 16));
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    *a1 = v3;
    v7 = (unsigned int *)(v4 + 16);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      __dmb(9u);
      MEMORY[0x1DF0D228C]();
    }
  }
  return *a1;
}

uint64_t *sub_1DCBE90BC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 32);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1DCBE90E0(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 32);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x1DF0D228CLL);
    }
  }
  return result;
}

_QWORD *sub_1DCBE911C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_1DCBE912C()
{
  return 1;
}

unint64_t sub_1DCBE9134(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD v6[2];

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v4 = *a1 + 3;
  v6[0] = 0;
  v6[1] = 0;
  sub_1DCBD61D8((uint64_t)v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6[0]));
}

BOOL sub_1DCBE918C(double **a1, double **a2)
{
  double *v2;
  double *v3;

  v2 = *a1;
  v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2] && v2[3] == v3[3];
}

BOOL sub_1DCBE91E0(double **a1, double *a2)
{
  double *v2;

  v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2] && v2[3] == a2[3];
}

uint64_t sub_1DCBE9234()
{
  return 0;
}

uint64_t sub_1DCBE9240()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_1DCBE9250()
{
  return &unk_1EA573A58;
}

uint64_t sub_1DCBE925C()
{
  return 0;
}

uint64_t sub_1DCBE9264()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE9270()
{
  return 0;
}

uint64_t sub_1DCBE9278()
{
  return 0;
}

BOOL sub_1DCBE9280(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE92B0(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573A58, a2);
}

void *sub_1DCBE92D0()
{
  return &unk_1EA573A58;
}

uint64_t sub_1DCBE92DC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE92E4@<X0>(_OWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (uint64_t)&off_1EA5751B0 + 2;
  result = operator new();
  v5 = v3[1];
  *(_OWORD *)result = *v3;
  *(_OWORD *)(result + 16) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)(result + 32));
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_1DCBE9350(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = atomic_load((unsigned int *)(*a1 + 32));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = *a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = (unsigned int *)(v3 + 32);
    atomic_store(0, (unsigned int *)(v3 + 32));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *a1 = v3;
    v8 = (unsigned int *)(v4 + 32);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      MEMORY[0x1DF0D228C]();
    }
  }
  return *a1;
}

_QWORD *sub_1DCBE93F8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_1DCBE9408(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1DCBE9414()
{
  return 1;
}

unint64_t sub_1DCBE941C(unsigned __int16 *a1)
{
  unsigned __int16 v2;
  _QWORD v3[2];

  v2 = a1[3];
  v3[0] = 0;
  v3[1] = 0;
  sub_1DCBE6788((uint64_t)v3, &v2, a1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

BOOL sub_1DCBE9474(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x1E0DF28E0] + 4 * a1[3]) == *(float *)(MEMORY[0x1E0DF28E0] + 4 * a2[3])
      && sub_1DCBE58B8(a1, a2);
}

BOOL sub_1DCBE94A0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x1E0DF28E0] + 4 * a1[3]) == *(float *)(MEMORY[0x1E0DF28E0] + 4 * a2[3])
      && sub_1DCBE58B8(a1, a2);
}

uint64_t sub_1DCBE94D0()
{
  return 0;
}

uint64_t sub_1DCBE94DC()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_1DCBE94EC()
{
  return &unk_1EA5739E8;
}

uint64_t sub_1DCBE94F8()
{
  return 0;
}

uint64_t sub_1DCBE9500()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE950C()
{
  return 0;
}

uint64_t sub_1DCBE9514()
{
  return 0;
}

BOOL sub_1DCBE951C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfQuathE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE954C(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA5739E8, a2);
}

void *sub_1DCBE956C()
{
  return &unk_1EA5739E8;
}

_QWORD *sub_1DCBE957C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_1EA574CA8 + 1;
  return result;
}

uint64_t *sub_1DCBE9594(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1DCBE95B8(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 16);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x1DF0D228CLL);
    }
  }
  return result;
}

_QWORD *sub_1DCBE95F4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_1DCBE9604()
{
  return 1;
}

unint64_t sub_1DCBE960C(unsigned int **a1)
{
  unsigned int *v1;
  unsigned int v3;
  _QWORD v4[2];

  v1 = *a1;
  v3 = (*a1)[3];
  v4[0] = 0;
  v4[1] = 0;
  sub_1DCBE6E84((uint64_t)v4, &v3, v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4[0]));
}

BOOL sub_1DCBE9664(float **a1, float **a2)
{
  float *v2;
  float *v3;

  v2 = *a1;
  v3 = *a2;
  return (*a1)[3] == (*a2)[3] && *v2 == *v3 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_1DCBE96B8(float **a1, float *a2)
{
  float *v2;

  v2 = *a1;
  return (*a1)[3] == a2[3] && *v2 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_1DCBE970C()
{
  return 0;
}

uint64_t sub_1DCBE9718()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_1DCBE9728()
{
  return &unk_1EA5739D8;
}

uint64_t sub_1DCBE9734()
{
  return 0;
}

uint64_t sub_1DCBE973C()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE9748()
{
  return 0;
}

uint64_t sub_1DCBE9750()
{
  return 0;
}

BOOL sub_1DCBE9758(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfQuatfE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE9788(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA5739D8, a2);
}

void *sub_1DCBE97A8()
{
  return &unk_1EA5739D8;
}

uint64_t sub_1DCBE97B4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE97BC@<X0>(_OWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *a1;
  a2[1] = (uint64_t)&off_1EA574BF0;
  result = operator new();
  *(_OWORD *)result = *v3;
  v5 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)(result + 16));
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t *sub_1DCBE9824(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 32);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1DCBE9848(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 32);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x1DF0D228CLL);
    }
  }
  return result;
}

_QWORD *sub_1DCBE9884(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_1DCBE9894()
{
  return 1;
}

unint64_t sub_1DCBE989C(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD v4[2];

  v1 = *a1;
  v3 = (*a1)[3];
  v4[0] = 0;
  v4[1] = 0;
  sub_1DCBE75A4((uint64_t)v4, &v3, v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4[0]));
}

BOOL sub_1DCBE98F4(double **a1, double **a2)
{
  double *v2;
  double *v3;

  v2 = *a1;
  v3 = *a2;
  return (*a1)[3] == (*a2)[3] && *v2 == *v3 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_1DCBE9948(double **a1, double *a2)
{
  double *v2;

  v2 = *a1;
  return (*a1)[3] == a2[3] && *v2 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_1DCBE999C()
{
  return 0;
}

uint64_t sub_1DCBE99A8()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_1DCBE99B8()
{
  return &unk_1EA5739C8;
}

uint64_t sub_1DCBE99C4()
{
  return 0;
}

uint64_t sub_1DCBE99CC()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE99D8()
{
  return 0;
}

uint64_t sub_1DCBE99E0()
{
  return 0;
}

BOOL sub_1DCBE99E8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfQuatdE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE9A18(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA5739C8, a2);
}

void *sub_1DCBE9A38()
{
  return &unk_1EA5739C8;
}

uint64_t sub_1DCBE9A44(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE9A4C@<X0>(_OWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (uint64_t)&off_1EA574B38;
  result = operator new();
  v5 = v3[1];
  *(_OWORD *)result = *v3;
  *(_OWORD *)(result + 16) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)(result + 32));
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t *sub_1DCBE9AB4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 64);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1DCBE9AD8(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 64);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x1DF0D228CLL);
    }
  }
  return result;
}

_QWORD *sub_1DCBE9B14(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_1DCBE9B24()
{
  return 1;
}

unint64_t sub_1DCBE9B2C(unsigned int **a1)
{
  char v2;

  return sub_1DCBE9C8C((uint64_t)&v2, *a1);
}

uint64_t sub_1DCBE9B50()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==();
}

uint64_t sub_1DCBE9B5C()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==();
}

uint64_t sub_1DCBE9B68()
{
  return 0;
}

uint64_t sub_1DCBE9B74()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_1DCBE9B84()
{
  return &unk_1EA573930;
}

uint64_t sub_1DCBE9B90()
{
  return 0;
}

uint64_t sub_1DCBE9B98()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE9BA4()
{
  return 0;
}

uint64_t sub_1DCBE9BAC()
{
  return 0;
}

BOOL sub_1DCBE9BB4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix4fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE9BE4(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573930, a2);
}

void *sub_1DCBE9C04()
{
  return &unk_1EA573930;
}

uint64_t sub_1DCBE9C10(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE9C18@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;

  v3 = *a1;
  a2[1] = (uint64_t)&off_1EA5749C8 + 2;
  result = operator new();
  v5 = v3[3];
  v7 = *v3;
  v6 = v3[1];
  *(_OWORD *)(result + 32) = v3[2];
  *(_OWORD *)(result + 48) = v5;
  *(_OWORD *)result = v7;
  *(_OWORD *)(result + 16) = v6;
  v8 = (unsigned int *)(result + 64);
  atomic_store(0, (unsigned int *)(result + 64));
  *a2 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

unint64_t sub_1DCBE9C8C(uint64_t a1, unsigned int *a2)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_1DCBD5200((uint64_t)v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

uint64_t sub_1DCBE9D24(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = atomic_load((unsigned int *)(*a1 + 64));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = *a1;
    v5 = *(_OWORD *)(*a1 + 48);
    v7 = *(_OWORD *)*a1;
    v6 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)(*a1 + 32);
    *(_OWORD *)(v3 + 48) = v5;
    *(_OWORD *)v3 = v7;
    *(_OWORD *)(v3 + 16) = v6;
    v8 = (unsigned int *)(v3 + 64);
    atomic_store(0, (unsigned int *)(v3 + 64));
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    *a1 = v3;
    v10 = (unsigned int *)(v4 + 64);
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      __dmb(9u);
      MEMORY[0x1DF0D228C]();
    }
  }
  return *a1;
}

uint64_t *sub_1DCBE9DD4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 128);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1DCBE9DF8(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 128);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x1DF0D228CLL);
    }
  }
  return result;
}

_QWORD *sub_1DCBE9E34(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_1DCBE9E44()
{
  return 1;
}

unint64_t sub_1DCBE9E4C(uint64_t **a1)
{
  char v2;

  return sub_1DCBE9FBC((uint64_t)&v2, *a1);
}

uint64_t sub_1DCBE9E70()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
}

uint64_t sub_1DCBE9E7C()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
}

uint64_t sub_1DCBE9E88()
{
  return 0;
}

uint64_t sub_1DCBE9E94()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_1DCBE9EA4()
{
  return &unk_1EA573920;
}

uint64_t sub_1DCBE9EB0()
{
  return 0;
}

uint64_t sub_1DCBE9EB8()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCBE9EC4()
{
  return 0;
}

uint64_t sub_1DCBE9ECC()
{
  return 0;
}

BOOL sub_1DCBE9ED4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix4dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCBE9F04(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573920, a2);
}

void *sub_1DCBE9F24()
{
  return &unk_1EA573920;
}

uint64_t sub_1DCBE9F30(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCBE9F38@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;

  v3 = *a1;
  a2[1] = (uint64_t)&off_1EA574910 + 2;
  result = operator new();
  v5 = v3[3];
  v7 = *v3;
  v6 = v3[1];
  *(_OWORD *)(result + 32) = v3[2];
  *(_OWORD *)(result + 48) = v5;
  *(_OWORD *)result = v7;
  *(_OWORD *)(result + 16) = v6;
  v8 = v3[7];
  v10 = v3[4];
  v9 = v3[5];
  *(_OWORD *)(result + 96) = v3[6];
  *(_OWORD *)(result + 112) = v8;
  *(_OWORD *)(result + 64) = v10;
  *(_OWORD *)(result + 80) = v9;
  v11 = (unsigned int *)(result + 128);
  atomic_store(0, (unsigned int *)(result + 128));
  *a2 = result;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  return result;
}

unint64_t sub_1DCBE9FBC(uint64_t a1, uint64_t *a2)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_1DCBD5DAC((uint64_t)v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

uint64_t sub_1DCBEA054(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = atomic_load((unsigned int *)(*a1 + 128));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 48);
    v7 = *(_OWORD *)*a1;
    v6 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)(*a1 + 32);
    *(_OWORD *)(v3 + 48) = v5;
    *(_OWORD *)v3 = v7;
    *(_OWORD *)(v3 + 16) = v6;
    v8 = v4[7];
    v10 = v4[4];
    v9 = v4[5];
    *(_OWORD *)(v3 + 96) = v4[6];
    *(_OWORD *)(v3 + 112) = v8;
    *(_OWORD *)(v3 + 64) = v10;
    *(_OWORD *)(v3 + 80) = v9;
    v11 = (unsigned int *)(v3 + 128);
    atomic_store(0, (unsigned int *)(v3 + 128));
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *a1 = v3;
    v13 = (unsigned int *)(v4 + 8);
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      __dmb(9u);
      MEMORY[0x1DF0D228C]();
    }
  }
  return *a1;
}

uint64_t sub_1DCBEA114(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  int i;
  __n128 **v6;
  __n128 **v7;
  unint64_t v8;
  __n128 *v9;
  int32x4_t v10;
  int32x4_t v11;
  __n128 **v12;
  __n128 **v13;
  uint64_t v14;
  float v16;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_1DCBEA26C(a1, a2, a3, 0);
  for (i = 0; i != 3; ++i)
  {
    v6 = *(__n128 ***)a1;
    v7 = *(__n128 ***)(a1 + 8);
    if (*(__n128 ***)a1 == v7)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v16 = 0.0;
      do
      {
        v9 = *v6;
        v10 = (int32x4_t)vmulq_f32(*(float32x4_t *)(a1 + 80), (float32x4_t)sub_1DCB3FAA8(*v6));
        if (vaddq_f32(vaddq_f32((float32x4_t)v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 1)), (float32x4_t)vdupq_laneq_s32(v10, 2)).f32[0] > v16)
        {
          v11 = (int32x4_t)vmulq_f32((float32x4_t)sub_1DCB3FAA8(v9), *(float32x4_t *)(a1 + 80));
          LODWORD(v16) = vaddq_f32(vaddq_f32((float32x4_t)v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.i8, 1)), (float32x4_t)vdupq_laneq_s32(v11, 2)).u32[0];
          v8 = (unint64_t)v9;
        }
        ++v6;
      }
      while (v6 != v7);
      v6 = *(__n128 ***)a1;
    }
    *(_QWORD *)(a1 + 8) = v6;
    sub_1DCBEA26C(a1, v8, a3, 0);
  }
  v12 = *(__n128 ***)a1;
  v13 = *(__n128 ***)(a1 + 8);
  while (v12 != v13)
  {
    v14 = (uint64_t)*v12++;
    *(_QWORD *)(v14 + 256) = a1;
  }
  return a1;
}

void sub_1DCBEA248(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCBEA26C(uint64_t a1, unint64_t a2, _QWORD *a3, char a4)
{
  uint64_t v8;
  float32x4_t v9;
  int32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  uint64_t *v19;
  uint64_t v20;
  __n128 *v21;
  float32x4_t **v22;
  float32x4_t **v23;
  __n128 v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  float32x4_t **v45;
  float32x4_t **v46;
  char v47;
  float32x4_t *v48;
  unint64_t v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  float32x4_t **v58;
  float32x4_t **v59;
  uint64_t v60;
  float32x4_t **v61;
  __n128 v62;
  unint64_t v63;
  int32x2_t v64;
  float v65;
  float32x4_t v66;
  uint64_t v72;
  uint64_t v73;
  float32x4_t v75;
  float32x4_t v76;
  int32x4_t v77;
  __n128 v78;
  float32x4_t v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  float32x4_t v83;
  __n128 v84;
  int8x16_t v85;
  __int128 v86;
  int8x16_t v87;
  __int128 v88;
  __n128 v89;
  __int128 v90;
  _OWORD v91[2];
  __int128 v92;
  __n128 v93;
  __int128 v94;
  int8x16_t v95;
  __int128 v96;
  int8x16_t v97;
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v92 = 0u;
  memset(v91, 0, sizeof(v91));
  v93.n128_u64[0] = a2;
  v93.n128_u64[1] = a2;
  sub_1DCBEBB24(v91, &v93);
  v79 = *(float32x4_t *)(a2 + 80);
  v76 = *(float32x4_t *)(a2 + 64);
  v81 = sub_1DCB3FAA8((__n128 *)a2);
  v78 = sub_1DCB3FAA8((__n128 *)a2);
  v8 = *((_QWORD *)&v92 + 1);
  if (*((_QWORD *)&v92 + 1))
  {
    v9 = vsubq_f32(v79, v76);
    v10 = (int32x4_t)vmulq_f32(v9, v9);
    v10.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2)).u32[0];
    v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
    v12 = vmul_f32(vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)), v11);
    v77 = (int32x4_t)vmulq_n_f32(v9, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]);
    v13 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v77, v77), (int8x16_t)v77, 0xCuLL), (float32x4_t)v81)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v81, (int32x4_t)v81), (int8x16_t)v81, 0xCuLL), (float32x4_t)v77);
    v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v13, v13), (int8x16_t)v13, 0xCuLL);
    v15 = (int32x4_t)vmulq_f32((float32x4_t)v13, (float32x4_t)v13);
    v15.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v15, 2), *(float32x2_t *)v15.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1)).u32[0];
    v16 = vrsqrte_f32((float32x2_t)v15.u32[0]);
    v17 = vmul_f32(vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v16, v16)), v16);
    v75 = vmulq_n_f32(v14, vmul_f32(v17, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v17, v17))).f32[0]);
    v18 = (float32x2_t)vdup_n_s32(0x3EAAAAABu);
    do
    {
      v19 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)&v91[0] + 1) + (((unint64_t)v92 >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * v92);
      v20 = *v19;
      v21 = (__n128 *)v19[1];
      *(_QWORD *)&v92 = v92 + 1;
      *((_QWORD *)&v92 + 1) = v8 - 1;
      if ((unint64_t)v92 >= 0x200)
      {
        operator delete(**((void ***)&v91[0] + 1));
        *((_QWORD *)&v91[0] + 1) += 8;
        *(_QWORD *)&v92 = v92 - 256;
      }
      v23 = *(float32x4_t ***)a1;
      v22 = *(float32x4_t ***)(a1 + 8);
      if (*(float32x4_t ***)a1 != v22)
      {
        while (*v23 != (float32x4_t *)v20)
        {
          if (++v23 == v22)
          {
            v23 = *(float32x4_t ***)(a1 + 8);
            break;
          }
        }
      }
      if (v23 == v22)
      {
        v82 = sub_1DCB3FAA8((__n128 *)v20);
        v80 = sub_1DCB3FAA8(v21);
        v24 = sub_1DCB3FAA8((__n128 *)v20);
        if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8)
          || (v25 = (int32x4_t)vmulq_f32((float32x4_t)v80, (float32x4_t)v82),
              v26 = vmulq_f32(*(float32x4_t *)(a1 + 80), (float32x4_t)v24),
              (float)(vaddq_f32(vaddq_f32((float32x4_t)v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.i8, 1)), (float32x4_t)vdupq_laneq_s32(v25, 2)).f32[0]+ (float)((float)(v26.f32[1] + v26.f32[0]) + v26.f32[2])) > 1.8))
        {
          v27 = *(float32x4_t *)(a2 + 64);
          v28 = *(float32x4_t *)(v20 + 64);
          v29 = *(float32x4_t *)(v20 + 80);
          v30 = (int32x4_t)vmulq_f32(vsubq_f32(v28, v27), (float32x4_t)v78);
          v31 = vsubq_f32(v28, vmlaq_n_f32(v27, (float32x4_t)v78, vaddq_f32(vaddq_f32((float32x4_t)v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.i8, 1)), (float32x4_t)vdupq_laneq_s32(v30, 2)).f32[0]));
          v32 = (int8x16_t)vmulq_f32(v31, (float32x4_t)v77);
          v33 = (int8x16_t)vmulq_f32(v31, v75);
          *(float32x2_t *)(v20 + 16) = vmul_f32(vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v32.i8, *(int32x2_t *)v33.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v32.i8, *(int32x2_t *)v33.i8)), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL))), v18);
          v34 = *(float32x4_t *)(a2 + 64);
          v35 = (int32x4_t)vmulq_f32(vsubq_f32(v29, v34), (float32x4_t)v78);
          v36 = vsubq_f32(v29, vmlaq_n_f32(v34, (float32x4_t)v78, vaddq_f32(vaddq_f32((float32x4_t)v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.i8, 1)), (float32x4_t)vdupq_laneq_s32(v35, 2)).f32[0]));
          v37 = (int8x16_t)vmulq_f32(v36, (float32x4_t)v77);
          v38 = (int8x16_t)vmulq_f32(v36, v75);
          *(float32x2_t *)(v20 + 24) = vmul_f32(vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v37.i8, *(int32x2_t *)v38.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v37.i8, *(int32x2_t *)v38.i8)), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL))), v18);
          v39 = *(float32x4_t *)(v20 + 96);
          v40 = *(float32x4_t *)(a2 + 64);
          v41 = (int32x4_t)vmulq_f32(vsubq_f32(v39, v40), (float32x4_t)v78);
          v42 = vsubq_f32(v39, vmlaq_n_f32(v40, (float32x4_t)v78, vaddq_f32(vaddq_f32((float32x4_t)v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.i8, 1)), (float32x4_t)vdupq_laneq_s32(v41, 2)).f32[0]));
          v43 = (int8x16_t)vmulq_f32(v42, (float32x4_t)v77);
          v44 = (int8x16_t)vmulq_f32(v42, v75);
          *(float32x2_t *)(v20 + 32) = vmul_f32(vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v43.i8, *(int32x2_t *)v44.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v43.i8, *(int32x2_t *)v44.i8)), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL))), v18);
          v45 = *(float32x4_t ***)a1;
          v46 = *(float32x4_t ***)(a1 + 8);
          if (*(float32x4_t ***)a1 == v46)
            goto LABEL_23;
          v47 = 0;
          do
          {
            v48 = *v45;
            sub_1DCB3F604(*v45, (uint64_t)&v93, *(double *)(v20 + 16));
            if ((_QWORD)v94 && !sub_1DCB3FAB0(v48, *(float32x4_t *)(v20 + 64))
              || (sub_1DCB3F604(v48, (uint64_t)&v89, *(double *)(v20 + 24)), (_QWORD)v90)
              && !sub_1DCB3FAB0(v48, *(float32x4_t *)(v20 + 80))
              || (sub_1DCB3F604(v48, (uint64_t)&v87, *(double *)(v20 + 32)), (_QWORD)v88)
              && !sub_1DCB3FAB0(v48, *(float32x4_t *)(v20 + 96)))
            {
              v47 = 1;
            }
            ++v45;
          }
          while (v45 != v46);
          if ((v47 & 1) == 0)
          {
LABEL_23:
            v50 = *(uint64_t **)(a1 + 8);
            v49 = *(_QWORD *)(a1 + 16);
            if ((unint64_t)v50 >= v49)
            {
              v52 = ((uint64_t)v50 - *(_QWORD *)a1) >> 3;
              if ((unint64_t)(v52 + 1) >> 61)
                sub_1DCAE4C44();
              v53 = v49 - *(_QWORD *)a1;
              v54 = v53 >> 2;
              if (v53 >> 2 <= (unint64_t)(v52 + 1))
                v54 = v52 + 1;
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
                v55 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v55 = v54;
              if (v55)
                v56 = (char *)sub_1DCAE79A4(a1 + 16, v55);
              else
                v56 = 0;
              v57 = (uint64_t *)&v56[8 * v52];
              *v57 = v20;
              v51 = (char *)(v57 + 1);
              v59 = *(float32x4_t ***)a1;
              v58 = *(float32x4_t ***)(a1 + 8);
              if (v58 != *(float32x4_t ***)a1)
              {
                do
                {
                  v60 = (uint64_t)*--v58;
                  *--v57 = v60;
                }
                while (v58 != v59);
                v58 = *(float32x4_t ***)a1;
              }
              *(_QWORD *)a1 = v57;
              *(_QWORD *)(a1 + 8) = v51;
              *(_QWORD *)(a1 + 16) = &v56[8 * v55];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *v50 = v20;
              v51 = (char *)(v50 + 1);
            }
            *(_QWORD *)(a1 + 8) = v51;
            v61 = *(float32x4_t ***)a1;
            v83 = *(float32x4_t *)(a1 + 80);
            v62 = sub_1DCB3FAA8((__n128 *)v20);
            v63 = (unint64_t)(v51 - (char *)v61) >> 3;
            *(float *)v64.i32 = (float)(int)v63;
            v65 = (double)(int)v63 + -1.0;
            v66 = vmlaq_n_f32((float32x4_t)v62, v83, v65);
            __asm { FMOV            V1.4S, #1.0 }
            *(float32x4_t *)(a1 + 80) = vmulq_f32(v66, vdivq_f32(_Q1, (float32x4_t)vdupq_lane_s32(v64, 0)));
            v89 = 0u;
            v90 = 0u;
            sub_1DCB3F1F8((int8x16_t *)&v89, *(int8x16_t *)(v20 + 64), *(int8x16_t *)(v20 + 80));
            v87 = 0u;
            v88 = 0u;
            sub_1DCB3F1F8(&v87, *(int8x16_t *)(v20 + 80), *(int8x16_t *)(v20 + 96));
            v85 = 0u;
            v86 = 0u;
            sub_1DCB3F1F8(&v85, *(int8x16_t *)(v20 + 96), *(int8x16_t *)(v20 + 64));
            v72 = 0;
            v93 = v89;
            v94 = v90;
            v95 = v87;
            v96 = v88;
            v97 = v85;
            v98 = v86;
            do
            {
              v73 = sub_1DCB3F9AC(v20, a3, *(float32x4_t *)((char *)&v93 + v72), *(float32x4_t *)((char *)&v93 + v72 + 16));
              if (v73 && ((a4 & 1) != 0 || !*(_QWORD *)(v73 + 256)))
              {
                v84.n128_u64[0] = v73;
                v84.n128_u64[1] = v20;
                sub_1DCBEBB24(v91, &v84);
              }
              v72 += 32;
            }
            while (v72 != 96);
          }
        }
      }
      v8 = *((_QWORD *)&v92 + 1);
    }
    while (*((_QWORD *)&v92 + 1));
  }
  return sub_1DCBEBA90(v91);
}

void sub_1DCBEA854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  sub_1DCBEBA90(&a37);
  _Unwind_Resume(a1);
}

float sub_1DCBEA8A4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(float *)&v1 <= *((float *)&v1 + 1))
    LODWORD(v1) = HIDWORD(*(_QWORD *)(a1 + 32));
  return *(float *)&v1;
}

void sub_1DCBEA8B8(uint64_t a1)
{
  float32x2_t v2;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t **v10;
  float32x2_t **v11;
  float32x2_t *v12;
  float32x2_t **v13;
  float32x2_t **v14;
  uint64_t v15;
  float32x2_t *v16;
  uint64_t v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  v2 = *(float32x2_t *)(a1 + 64);
  __asm { FMOV            V9.2S, #1.0 }
  v8 = vdiv_f32(_D9, v2);
  *(float32x2_t *)(a1 + 64) = vmul_f32(v8, v2);
  v9 = vmul_f32(v8, *(float32x2_t *)(a1 + 32));
  *(float32x2_t *)(a1 + 32) = v9;
  v10 = *(float32x2_t ***)a1;
  v11 = *(float32x2_t ***)(a1 + 8);
  if (*(float32x2_t ***)a1 != v11)
  {
    do
    {
      v12 = *v10++;
      sub_1DCB3F2E4(v12, v8);
    }
    while (v10 != v11);
    v9 = *(float32x2_t *)(a1 + 32);
  }
  *(float32x2_t *)(a1 + 64) = _D9;
  if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v9, 1), v9).u8[0] & 1) != 0)
  {
    *(int32x2_t *)(a1 + 32) = vrev64_s32((int32x2_t)v9);
    v13 = *(float32x2_t ***)a1;
    v14 = *(float32x2_t ***)(a1 + 8);
    if (*(float32x2_t ***)a1 != v14)
    {
      do
      {
        v15 = 0;
        v16 = *v13;
        v17 = (uint64_t)&(*v13)[3];
        v18[0] = *v13 + 2;
        v18[1] = v17;
        v18[2] = v16 + 4;
        do
        {
          *(int32x2_t *)v18[v15] = vrev64_s32(*(int32x2_t *)v18[v15]);
          ++v15;
        }
        while (v15 != 3);
        ++v13;
      }
      while (v13 != v14);
    }
  }
}

void sub_1DCBEA9CC(uint64_t a1, float32x2_t a2)
{
  float32x2_t **v3;
  float32x2_t **v4;
  float32x2_t *v5;

  *(float32x2_t *)(a1 + 64) = vmul_f32(*(float32x2_t *)(a1 + 64), a2);
  *(float32x2_t *)(a1 + 32) = vmul_f32(*(float32x2_t *)(a1 + 32), a2);
  v3 = *(float32x2_t ***)a1;
  v4 = *(float32x2_t ***)(a1 + 8);
  while (v3 != v4)
  {
    v5 = *v3++;
    sub_1DCB3F2E4(v5, a2);
  }
}

void sub_1DCBEAA24(float32x2_t ***a1)
{
  __int128 v2;
  float32x2_t **v3;
  float32x2_t **v4;
  uint64_t v5;
  float v6;
  double v7;
  float v8;
  __float2 v9;
  float32x2_t **v10;
  float32x2_t **v11;
  float32x2_t v12;
  float32x2_t *v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  float32x2_t **v17;
  float32x2_t **v18;
  uint64_t v19;
  __float2 v20;
  float32x2_t **v21;
  float32x2_t **v22;
  float32x2_t v23;
  float32x2_t *v24;
  float32x2_t v25;
  __int128 v26;

  sub_1DCBEABB0(a1);
  *(float32x2_t *)&v2 = vmul_lane_f32(*(float32x2_t *)&v2, *(float32x2_t *)&v2, 1);
  v3 = *a1;
  v4 = a1[1];
  while (v3 != v4)
  {
    v5 = (uint64_t)*v3++;
    *(_OWORD *)(v5 + 40) = *(_OWORD *)(v5 + 16);
    *(_QWORD *)(v5 + 56) = *(_QWORD *)(v5 + 32);
  }
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  do
  {
    v26 = v2;
    v9 = __sincosf_stret(v8);
    v10 = *a1;
    v11 = a1[1];
    if (*a1 != v11)
    {
      v12.f32[0] = -v9.__sinval;
      v12.i32[1] = LODWORD(v9.__cosval);
      do
      {
        v13 = *v10++;
        v14 = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v9.__sinval), LODWORD(v9.__cosval)), COERCE_FLOAT(*(_QWORD *)&v13[3])), v12, v13[3], 1);
        v13[2] = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v9.__sinval), LODWORD(v9.__cosval)), COERCE_FLOAT(*(_QWORD *)&v13[2])), v12, v13[2], 1);
        v13[3] = v14;
        v13[4] = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v9.__sinval), LODWORD(v9.__cosval)), COERCE_FLOAT(*(_QWORD *)&v13[4])), v12, v13[4], 1);
      }
      while (v10 != v11);
    }
    sub_1DCBEABB0(a1);
    v16 = vmul_lane_f32(v15, v15, 1).f32[0];
    v2 = v26;
    if (v16 < *(float *)&v26)
    {
      v6 = v8;
      *(float *)&v2 = v16;
    }
    v17 = *a1;
    v18 = a1[1];
    while (v17 != v18)
    {
      v19 = (uint64_t)*v17++;
      *(_OWORD *)(v19 + 16) = *(_OWORD *)(v19 + 40);
      *(_QWORD *)(v19 + 32) = *(_QWORD *)(v19 + 56);
    }
    v8 = v7 + 0.0436332313;
    v7 = v8;
  }
  while (v8 < 3.14159265);
  v20 = __sincosf_stret(v6);
  v21 = *a1;
  v22 = a1[1];
  if (*a1 != v22)
  {
    v23.f32[0] = -v20.__sinval;
    v23.i32[1] = LODWORD(v20.__cosval);
    do
    {
      v24 = *v21++;
      v25 = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v20.__sinval), LODWORD(v20.__cosval)), COERCE_FLOAT(*(_QWORD *)&v24[3])), v23, v24[3], 1);
      v24[2] = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v20.__sinval), LODWORD(v20.__cosval)), COERCE_FLOAT(*(_QWORD *)&v24[2])), v23, v24[2], 1);
      v24[3] = v25;
      v24[4] = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v20.__sinval), LODWORD(v20.__cosval)), COERCE_FLOAT(*(_QWORD *)&v24[4])), v23, v24[4], 1);
    }
    while (v21 != v22);
  }
}

float32x2_t ***sub_1DCBEABB0(float32x2_t ***result)
{
  float32x2_t **v1;
  float32x2_t **v2;
  float32x2_t v3;
  float32x2_t v4;
  uint64_t v5;
  float32x2_t *v6;
  float32x2_t v7;
  __int128 v8;
  float32x2_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = *result;
  v2 = result[1];
  v3 = (**result)[2];
  if (*result != v2)
  {
    v4 = (**result)[2];
    do
    {
      v5 = 0;
      v6 = *v1;
      v8 = *(_OWORD *)(*v1)[2].f32;
      v9 = v6[4];
      do
      {
        v7 = *(float32x2_t *)((char *)&v8 + v5);
        v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v7, v3), (int8x8_t)v3, (int8x8_t)v7);
        v4 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v7, v4), (int8x8_t)v7, (int8x8_t)v4);
        v5 += 8;
      }
      while (v5 != 24);
      ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1DCBEAC60(float32x4_t ***a1, __n128 a2)
{
  float32x4_t v3;
  float32x4_t **v4;
  float32x4_t **v5;
  float32x4_t *v6;
  __n128 **v7;
  float32x4_t **v8;
  float32x4_t *v9;
  float32x4_t *v15;
  int32x4_t v16;
  int32x4_t v17;
  __n128 v18;
  float32x4_t *v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  float32x4_t **v36;
  float32x4_t **v37;
  float32x4_t *v38;
  float v40;
  float32x4_t v41;
  float32x4_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  float32x4_t *v46;

  v3 = 0uLL;
  v43 = 0u;
  v44 = 0u;
  v45 = 1065353216;
  v5 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v8 = *a1;
  }
  else
  {
    do
    {
      v6 = *v5;
      v46 = *v5 + 4;
      sub_1DCB07AC4((uint64_t)&v43, v46, (uint64_t)&unk_1DCC58300, &v46)[2].i64[0] = 0;
      v46 = v6 + 5;
      sub_1DCB07AC4((uint64_t)&v43, v6 + 5, (uint64_t)&unk_1DCC58300, &v46)[2].i64[0] = 0;
      v46 = v6 + 6;
      sub_1DCB07AC4((uint64_t)&v43, v6 + 6, (uint64_t)&unk_1DCC58300, &v46)[2].i64[0] = 0;
      ++v5;
    }
    while (v5 != v4);
    v7 = (__n128 **)*a1;
    v5 = a1[1];
    if (*a1 == v5)
    {
      v8 = a1[1];
      v3 = 0uLL;
    }
    else
    {
      v3 = 0uLL;
      do
      {
        v41 = v3;
        a2 = sub_1DCB3FAA8(*v7);
        v3 = vaddq_f32((float32x4_t)a2, v41);
        ++v7;
      }
      while (v7 != (__n128 **)v5);
      v5 = *a1;
      v8 = a1[1];
    }
  }
  v9 = *v5;
  if (v8 != v5)
  {
    a2.n128_f32[0] = (float)(unint64_t)(v8 - v5);
    __asm { FMOV            V1.4S, #1.0 }
    v40 = 0.0;
    v42 = vmulq_f32(v3, vdivq_f32(_Q1, (float32x4_t)vdupq_lane_s32((int32x2_t)a2.n128_u64[0], 0)));
    do
    {
      v15 = *v5;
      v16 = (int32x4_t)vmulq_f32((float32x4_t)sub_1DCB3FAA8((__n128 *)*v5), v42);
      if (vaddq_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.i8, 1)), (float32x4_t)vdupq_laneq_s32(v16, 2)).f32[0] > v40)
      {
        v17 = (int32x4_t)vmulq_f32((float32x4_t)sub_1DCB3FAA8((__n128 *)v15), v42);
        LODWORD(v40) = vaddq_f32(vaddq_f32((float32x4_t)v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.i8, 1)), (float32x4_t)vdupq_laneq_s32(v17, 2)).u32[0];
        v9 = v15;
      }
      ++v5;
    }
    while (v5 != v8);
  }
  v18 = sub_1DCB3FAA8((__n128 *)v9);
  v19 = (float32x4_t *)v44;
  if ((_QWORD)v44)
  {
    v20 = vsubq_f32(v9[5], v9[4]);
    v21 = (int32x4_t)vmulq_f32(v20, v20);
    v21.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2)).u32[0];
    v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
    v23 = vmul_f32(vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)), v22);
    v24 = (int32x4_t)vmulq_n_f32(v20, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).f32[0]);
    v25 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL), (float32x4_t)v18)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), (float32x4_t)v24);
    v26 = (int32x4_t)vmulq_f32((float32x4_t)v25, (float32x4_t)v25);
    v26.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v26, 2), *(float32x2_t *)v26.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1)).u32[0];
    v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v25, v25), (int8x16_t)v25, 0xCuLL);
    *(float32x2_t *)v25.i8 = vrsqrte_f32((float32x2_t)v26.u32[0]);
    *(float32x2_t *)v25.i8 = vmul_f32(vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8)), *(float32x2_t *)v25.i8);
    v28 = vmulq_n_f32(v27, vmul_f32(*(float32x2_t *)v25.i8, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8))).f32[0]);
    v29 = (float32x2_t)vdup_n_s32(0x3EAAAAABu);
    do
    {
      v30 = v19[1];
      v31 = v9[4];
      v32 = (int32x4_t)vmulq_f32(vsubq_f32(v30, v31), (float32x4_t)v18);
      v33 = vsubq_f32(v30, vmlaq_n_f32(v31, (float32x4_t)v18, vaddq_f32(vaddq_f32((float32x4_t)v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.i8, 1)), (float32x4_t)vdupq_laneq_s32(v32, 2)).f32[0]));
      v34 = (int32x4_t)vmulq_f32(v33, (float32x4_t)v24);
      v35 = (int32x4_t)vmulq_f32(v28, v33);
      *(float32x2_t *)v19[2].f32 = vmul_f32(vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v34.i8, *(int32x2_t *)v35.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v34.i8, *(int32x2_t *)v35.i8)), (float32x2_t)*(_OWORD *)&vzip2q_s32(v34, v35)), v29);
      v19 = (float32x4_t *)v19->i64[0];
    }
    while (v19);
  }
  v36 = *a1;
  v37 = a1[1];
  if (*a1 != v37)
  {
    do
    {
      v38 = *v36;
      v46 = *v36 + 4;
      v38[1].i64[0] = sub_1DCB07AC4((uint64_t)&v43, v46, (uint64_t)&unk_1DCC58300, &v46)[2].i64[0];
      v46 = v38 + 5;
      v38[1].i64[1] = sub_1DCB07AC4((uint64_t)&v43, v38 + 5, (uint64_t)&unk_1DCC58300, &v46)[2].i64[0];
      v46 = v38 + 6;
      v38[2].i64[0] = sub_1DCB07AC4((uint64_t)&v43, v38 + 6, (uint64_t)&unk_1DCC58300, &v46)[2].i64[0];
      ++v36;
    }
    while (v36 != v37);
  }
  sub_1DCAE6B78((uint64_t)&v43);
  return 1;
}

void sub_1DCBEAFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1DCAE6B78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBEAFD0(float32x2_t *a1, float32x2_t a2)
{
  float32x2_t v2;
  int32x2_t v4;
  uint64_t result;
  const float *v6;
  float32x2_t v7;
  float32x2_t v8;
  _QWORD **v9;
  _QWORD **v10;
  float32x2_t **v11;
  float32x2_t **v12;
  float32x2_t *v13;
  double v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  __int128 v18;
  float32x2_t v19;
  uint64_t v20;
  float32x2_t *v21;
  float32x2_t v22;
  float32x2_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  float32x2_t v28;
  uint64_t v29;
  _QWORD v30[9];

  v30[8] = *MEMORY[0x1E0C80C00];
  v2 = a1[5];
  if ((vmvn_s8((int8x8_t)vcge_f32(a2, v2)).u8[0] & 1) != 0)
    return 0;
  v4 = vcgt_f32(vadd_f32(a1[6], v2), a2);
  if ((v4.i8[0] & 1) == 0)
    return 0;
  result = 0;
  if (a2.f32[1] < v2.f32[1] || (v4.i8[4] & 1) == 0)
    return result;
  v6 = (const float *)&dword_1F03B51AC;
  v7 = vld1_dup_f32(v6);
  v8 = vadd_f32(v7, a2);
  v30[0] = a2;
  v30[1] = __PAIR64__(v8.u32[1], a2.u32[0]);
  v30[2] = __PAIR64__(v8.u32[1], a2.u32[0]);
  v30[3] = v8;
  v24 = (uint64_t)v8;
  v30[4] = v8;
  v30[5] = __PAIR64__(a2.u32[1], v8.u32[0]);
  v30[6] = __PAIR64__(a2.u32[1], v8.u32[0]);
  v30[7] = a2;
  v9 = (_QWORD **)*a1;
  v10 = (_QWORD **)a1[1];
  if (*(_QWORD ***)a1 == v10)
    return 0;
  v25 = (uint64_t)a2;
  while (1)
  {
    sub_1DCB3F604(*v9, (uint64_t)&v26, *(double *)&a2);
    if ((_QWORD)v27)
      return 1;
    ++v9;
    a2 = (float32x2_t)v25;
    if (v9 == v10)
    {
      v11 = (float32x2_t **)*a1;
      v12 = (float32x2_t **)a1[1];
      if ((float32x2_t **)*a1 == v12)
        return 0;
      while (1)
      {
        v13 = *v11;
        v14 = sub_1DCB3FA60(*v11);
        v15.i64[0] = v25;
        *(double *)&v15.i64[1] = v14;
        v16.i64[1] = v24;
        if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v16, v15))), 0xFuLL))) & 1) == 0)
          break;
LABEL_11:
        if (++v11 == v12)
          return 0;
      }
      v17 = 0;
      v18 = *(_OWORD *)v13[3].f32;
      v19 = v13[4];
      v26 = *(_OWORD *)v13[2].f32;
      v27 = v18;
      v28 = v19;
      v29 = v26;
LABEL_14:
      v20 = 0;
      v21 = (float32x2_t *)(&v26 + v17);
      v22 = *v21;
      v23 = v21[1];
      while (!sub_1DCB3EB5C(v22, v23, (float32x2_t)v30[v20], (float32x2_t)v30[v20 + 1]))
      {
        v20 += 2;
        if (v20 == 8)
        {
          if (++v17 != 3)
            goto LABEL_14;
          goto LABEL_11;
        }
      }
      return 1;
    }
  }
}

void sub_1DCBEB1B0(float32x2_t ***a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  float32x2_t **v4;
  float32x2_t **v5;
  float32x2_t *v7;
  float32x2_t **v8;
  const float *v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t *v12;
  double v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  __int128 v17;
  float32x2_t v18;
  uint64_t v19;
  float32x2_t *v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  double v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  double v31;
  float32x2_t v32;
  float32x2_t v33;
  uint64_t v34;
  _OWORD v36[2];
  float32x2_t v37;
  uint64_t v38;
  _QWORD v39[9];

  v39[8] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    v8 = *a1;
LABEL_6:
    v9 = (const float *)&dword_1F03B51AC;
    v10 = vld1_dup_f32(v9);
    v11 = vadd_f32(v10, *(float32x2_t *)&a3);
    *(double *)v39 = a3;
    v39[1] = __PAIR64__(v11.u32[1], LODWORD(a3));
    v39[2] = __PAIR64__(HIDWORD(a3), v11.u32[0]);
    *(double *)&v39[3] = a3;
    v39[4] = __PAIR64__(v11.u32[1], LODWORD(a3));
    v39[5] = v11;
    v34 = (uint64_t)v11;
    v39[6] = v11;
    for (v39[7] = __PAIR64__(HIDWORD(a3), v11.u32[0]); v8 != v4; ++v8)
    {
      v12 = *v8;
      v13 = sub_1DCB3FA60(*v8);
      *(double *)v14.i64 = a3;
      *(double *)&v14.i64[1] = v13;
      v15.i64[1] = v34;
      if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v15, v14))), 0xFuLL))) & 1) == 0)
      {
        v16 = 0;
        v17 = *(_OWORD *)v12[3].f32;
        v18 = v12[4];
        v36[0] = *(_OWORD *)v12[2].f32;
        v36[1] = v17;
        v37 = v18;
        v38 = *(_QWORD *)&v36[0];
        while (2)
        {
          v19 = 0;
          v20 = (float32x2_t *)&v36[v16];
          v21 = *v20;
          v22 = v20[1];
          do
          {
            v23 = (float32x2_t)v39[v19];
            v24 = (float32x2_t)v39[v19 + 1];
            if (sub_1DCB3EB5C(v21, v22, v23, v24))
            {
              v25 = sub_1DCB3EBC0(v21, v22, v23, v24);
              v26 = vsub_f32(sub_1DCB3FB3C(v12), *(float32x2_t *)&v25);
              v27 = vmul_f32(v26, v26);
              v27.i32[0] = vadd_f32(v27, (float32x2_t)vdup_lane_s32((int32x2_t)v27, 1)).u32[0];
              v28 = vrsqrte_f32((float32x2_t)v27.u32[0]);
              v29 = vmul_f32(vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v28, v28)), v28);
              v30 = vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v29, v29));
              v31 = *(float *)&dword_1F03B51AC * 0.1;
              v32 = vsub_f32(*(float32x2_t *)&v25, sub_1DCB3FB3C(v12));
              v33 = vmul_f32(v32, v32);
              v33.f32[0] = sqrtf(vaddv_f32(v33));
              if (v31 < v33.f32[0])
                v33.f32[0] = v31;
              a2[1] = 0;
              a2[2] = 0;
              *a2 = 0;
              sub_1DCB3F604(v12, (uint64_t)a2, COERCE_DOUBLE(vmla_n_f32(*(float32x2_t *)&v25, v26, vmul_f32(vmul_f32(v29, v33), v30).f32[0])));
              if (!a2[2])
              {
                a2[2] = v12;
                *a2 = vdup_n_s32(0x3EA8F5C3u);
                *((_DWORD *)a2 + 2) = 1051595899;
              }
              return;
            }
            v19 += 2;
          }
          while (v19 != 8);
          if (++v16 != 3)
            continue;
          break;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    *(_DWORD *)a2 = -1082130432;
    a2[2] = 0;
  }
  else
  {
    while (1)
    {
      v7 = *v4;
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      sub_1DCB3F604(v7, (uint64_t)a2, a3);
      if (a2[2])
        break;
      if (++v4 == v5)
      {
        v8 = *a1;
        v4 = a1[1];
        goto LABEL_6;
      }
    }
  }
}

void sub_1DCBEB468(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t **v12;
  float32x2_t **v13;
  float32x2_t v15;
  float32x2_t *v16;

  v7 = *(float32x2_t *)(a1 + 24);
  v6 = *(float32x2_t *)(a1 + 32);
  LODWORD(a6) = dword_1F03B51AC;
  v8 = vmul_n_f32(vrndm_f32(vmul_n_f32(v7, (float)dword_1F03B51A8)), *(float *)&dword_1F03B51AC);
  v9 = vrndm_f32(vmul_n_f32(vadd_f32(v6, v7), (float)dword_1F03B51A8));
  v10 = vmla_n_f32(vneg_f32(v8), v9, *(float *)&dword_1F03B51AC);
  *(float32x2_t *)(a1 + 24) = v8;
  *(float32x2_t *)(a1 + 32) = v10;
  v9.f32[0] = *(float *)&a6 + *(float *)&a6;
  v11 = vsub_f32(v10, (float32x2_t)vdup_lane_s32((int32x2_t)v9, 0));
  *(float32x2_t *)(a1 + 40) = vadd_f32(v8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0));
  *(float32x2_t *)(a1 + 48) = v11;
  *(_DWORD *)(a1 + 56) = LODWORD(a6);
  v12 = *(float32x2_t ***)a1;
  v13 = *(float32x2_t ***)(a1 + 8);
  if (*(float32x2_t ***)a1 != v13)
  {
    v15 = vdiv_f32(v11, v6);
    do
    {
      v16 = *v12++;
      sub_1DCB3F2E4(v16, v15);
      sub_1DCB3F304(v16, *(float32x2_t *)(a1 + 40));
    }
    while (v12 != v13);
  }
}

float sub_1DCBEB528(float32x4_t ***a1)
{
  float32x4_t **v1;
  float32x4_t **v2;
  float v3;
  float32x4_t *v4;

  v1 = *a1;
  v2 = a1[1];
  v3 = 0.0;
  while (v1 != v2)
  {
    v4 = *v1++;
    v3 = sub_1DCB3F39C(v4) + v3;
  }
  return v3;
}

float sub_1DCBEB56C(uint64_t a1)
{
  _QWORD **v1;
  _QWORD **v2;
  float v3;
  _QWORD *v4;

  v1 = *(_QWORD ***)a1;
  v2 = *(_QWORD ***)(a1 + 8);
  v3 = 0.0;
  while (v1 != v2)
  {
    v4 = *v1++;
    v3 = sub_1DCB3F324(v4) + v3;
  }
  return v3;
}

int32x2_t sub_1DCBEB5B0(double a1)
{
  *(float *)&a1 = *(float *)&a1 * 6.0;
  return vdup_lane_s32(*(int32x2_t *)&a1, 0);
}

void sub_1DCBEB5C0(uint64_t a1)
{
  float32x2_t v2;
  uint64_t v3;
  uint64_t v4;
  float32x2_t **v5;
  float32x2_t **v6;
  float32x2_t v7;
  float32x2_t *v8;

  sub_1DCBEABB0((float32x2_t ***)a1);
  v4 = v3;
  v5 = *(float32x2_t ***)a1;
  v6 = *(float32x2_t ***)(a1 + 8);
  if (*(float32x2_t ***)a1 != v6)
  {
    v7 = vneg_f32(v2);
    do
    {
      v8 = *v5++;
      sub_1DCB3F304(v8, v7);
    }
    while (v5 != v6);
  }
  *(_QWORD *)(a1 + 32) = v4;
}

float32x2_t sub_1DCBEB61C(float32x2_t *a1, double a2)
{
  float32x2_t v3;
  float32x2_t **v4;
  float32x2_t **v5;
  float32x2_t v6;
  float32x2_t *v7;
  float32x2_t result;
  float32x2_t v9;
  __n128 v10;

  v10.n128_f64[0] = a2;
  if (*a1)
    sub_1DCBEB61C(v10);
  if (a1[1])
    sub_1DCBEB61C(v10);
  v3 = a1[2];
  if (v3)
  {
    *(float32x2_t *)(*(_QWORD *)&v3 + 64) = vmul_n_f32(*(float32x2_t *)(*(_QWORD *)&v3 + 64), v10.n128_f32[0]);
    *(float32x2_t *)(*(_QWORD *)&v3 + 32) = vmul_n_f32(*(float32x2_t *)(*(_QWORD *)&v3 + 32), v10.n128_f32[0]);
    v4 = **(float32x2_t ****)&v3;
    v5 = *(float32x2_t ***)(*(_QWORD *)&v3 + 8);
    if (**(float32x2_t ****)&v3 != v5)
    {
      v6 = (float32x2_t)vdup_lane_s32((int32x2_t)v10.n128_u64[0], 0);
      do
      {
        v7 = *v4++;
        sub_1DCB3F2E4(v7, v6);
      }
      while (v4 != v5);
    }
  }
  result = vmul_n_f32(a1[3], v10.n128_f32[0]);
  v9 = vmul_n_f32(a1[4], v10.n128_f32[0]);
  a1[3] = result;
  a1[4] = v9;
  return result;
}

uint64_t sub_1DCBEB6D4(float32x2_t *a1, uint64_t a2)
{
  float32x2_t *v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float32x2_t v15;
  uint64_t v16;
  _QWORD *v17;
  float32x2_t v18;
  float32x2_t v19;
  _QWORD v20[4];

  v3 = a1;
  v20[3] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if (v4)
  {
    while ((sub_1DCBEB6D4(*(_QWORD *)&v4, a2) & 1) == 0)
    {
      v3 = (float32x2_t *)v3[1];
      v4 = *v3;
      if (!*(_QWORD *)v3)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    v5 = v3[4];
    v6 = *(float32x2_t *)(a2 + 32);
    if ((vcgt_f32(v6, v5).u32[0] & 1) != 0 || v5.f32[1] < v6.f32[1])
    {
      if (v5.f32[0] < v6.f32[1] || v5.f32[1] < v6.f32[0])
        return 0;
      *(int32x2_t *)(a2 + 32) = vrev64_s32((int32x2_t)v6);
      v9 = *(uint64_t **)a2;
      v10 = *(uint64_t **)(a2 + 8);
      if (*(uint64_t **)a2 != v10)
      {
        do
        {
          v11 = 0;
          v12 = *v9;
          v13 = *v9 + 24;
          v20[0] = *v9 + 16;
          v20[1] = v13;
          v20[2] = v12 + 32;
          do
          {
            *(int32x2_t *)v20[v11] = vrev64_s32(*(int32x2_t *)v20[v11]);
            ++v11;
          }
          while (v11 != 3);
          ++v9;
        }
        while (v9 != v10);
      }
    }
    v14 = (_QWORD *)operator new();
    v14[1] = 0;
    v14[2] = 0;
    *v14 = 0;
    *v3 = (float32x2_t)v14;
    v15 = *(float32x2_t *)(a2 + 32);
    LODWORD(v16) = vadd_f32(v15, v3[3]).u32[0];
    HIDWORD(v16) = HIDWORD(*(_QWORD *)&v3[3]);
    v14[3] = v16;
    v15.i32[0] = vsub_f32(v3[4], v15).u32[0];
    v15.i32[1] = HIDWORD(*(_QWORD *)&v3[4]);
    v14[4] = v15;
    v17 = (_QWORD *)operator new();
    v17[1] = 0;
    v17[2] = 0;
    *v17 = 0;
    v3[1] = (float32x2_t)v17;
    v18 = v3[3];
    v19 = *(float32x2_t *)(a2 + 32);
    v18.i32[1] = vadd_f32(v19, v18).i32[1];
    v17[3] = v18;
    v19.f32[1] = v3[4].f32[1] - v19.f32[1];
    v17[4] = v19;
    v3[2] = (float32x2_t)a2;
  }
  return 1;
}

void sub_1DCBEB878(float32x2_t *a1, double a2, double a3, double a4, double a5, double a6)
{
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  double v11;
  uint64_t v12;

  v7 = a1[3];
  v8 = vadd_f32(a1[4], v7);
  LODWORD(a5) = dword_1F03B51AC;
  v9 = vmul_n_f32(vrndm_f32(vmul_n_f32(v7, (float)dword_1F03B51A8)), *(float *)&dword_1F03B51AC);
  v10 = vrndm_f32(vmul_n_f32(v8, (float)dword_1F03B51A8));
  v11 = COERCE_DOUBLE(vmla_n_f32(vneg_f32(v9), v10, *(float *)&dword_1F03B51AC));
  a1[3] = v9;
  *(double *)&a1[4] = v11;
  if (*a1)
    sub_1DCBEB878();
  if (a1[1])
    sub_1DCBEB878();
  v12 = (uint64_t)a1[2];
  if (v12)
    sub_1DCBEB468(v12, *(double *)&v9, *(double *)&v10, v11, a5, a6);
}

uint64_t sub_1DCBEB904(uint64_t result, double a2)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(double *)(result + 32) = a2;
  return result;
}

uint64_t sub_1DCBEB914(_QWORD *a1)
{
  uint64_t result;

  if (*a1)
  {
    sub_1DCBEB914();
    if (*a1)
      MEMORY[0x1DF0D228C](*a1, 0x1020C4084B17629);
  }
  result = a1[1];
  if (result)
  {
    sub_1DCBEB914();
    result = a1[1];
    if (result)
      result = MEMORY[0x1DF0D228C](result, 0x1020C4084B17629);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

float32x2_t sub_1DCBEB988(float32x2_t *a1)
{
  float32x2_t result;
  float32x2_t *v3;

  if (*a1)
    sub_1DCBEB988();
  if (a1[1])
    sub_1DCBEB988();
  v3 = (float32x2_t *)a1[2];
  if (v3)
  {
    result = vadd_f32(v3[3], a1[3]);
    v3[3] = result;
  }
  return result;
}

float32x2_t sub_1DCBEB9D4(float32x2_t *a1)
{
  double v1;

  v1 = *(double *)&a1[4];
  *(float *)&v1 = 1.0 / *(float *)&v1;
  return sub_1DCBEB61C(a1, v1);
}

float32x2_t *sub_1DCBEB9E4(_QWORD *a1, double a2)
{
  float32x2_t i;
  float32x2_t *v3;
  float32x2_t v5;
  _QWORD *v6;
  float32x2_t v7;

  for (i = (float32x2_t)a1[3]; (vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)&a2, i)).u8[0] & 1) == 0; i = (float32x2_t)a1[3])
  {
    v5 = (float32x2_t)a1[4];
    if (*(float *)&a2 >= (float)(v5.f32[0] + i.f32[0]))
      break;
    v3 = 0;
    if (*((float *)&a2 + 1) < i.f32[1])
      return v3;
    if ((vcgt_f32(vadd_f32(v5, i), *(float32x2_t *)&a2).i32[1] & 1) == 0)
      return v3;
    v3 = (float32x2_t *)a1[2];
    if (!v3)
      return v3;
    if (!*a1)
      return 0;
    v6 = (_QWORD *)a1[1];
    if (!v6)
      return 0;
    v7 = v3[4];
    a1 = (_QWORD *)*a1;
    if (*(float *)&a2 < (float)(v7.f32[0] + i.f32[0]))
    {
      a1 = v6;
      if ((vcgt_f32(vadd_f32(v7, i), *(float32x2_t *)&a2).i32[1] & 1) != 0)
        return v3;
    }
  }
  return 0;
}

uint64_t sub_1DCBEBA90(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_1DCBA4810((uint64_t)a1);
}

__n128 sub_1DCBEBB24(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1DCBEBBAC(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_1DCBEBBAC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_1DCAE79A4(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1DCB0868C(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_1DCB087A0((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_1DCAE79A4((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_1DCB088BC(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1DCB089D0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1DCBEBE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float sub_1DCBEBEC0(float a1, float a2)
{
  float v2;
  int v3;
  int v4;
  float v5;
  float v6;
  float v7;
  _BOOL4 v8;
  _BOOL4 v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  double v15;
  double v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  unsigned __int8 v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  unsigned __int8 v34;
  float v35;
  float v36;

  v2 = (float)(a2 + a1) * 0.366025403;
  v3 = (int)(float)(v2 + a1) - ((float)(v2 + a1) <= 0.0);
  v4 = (int)(float)(v2 + a2) - ((float)(v2 + a2) <= 0.0);
  v5 = (float)(v3 + v4) * 0.211324865;
  v6 = (float)(v5 - (float)v3) + a1;
  v7 = (float)(v5 - (float)v4) + a2;
  v8 = v6 > v7;
  v9 = v6 <= v7;
  v10 = 0.0;
  v11 = 1.0;
  if (v6 <= v7)
    v12 = 0.0;
  else
    v12 = 1.0;
  v13 = (float)(v6 - v12) + 0.211324865;
  if (v6 > v7)
    v11 = 0.0;
  v14 = (float)(v7 - v11) + 0.211324865;
  v15 = (float)(v6 + -1.0) + 0.42264973;
  v16 = (float)(v7 + -1.0) + 0.42264973;
  v17 = 0.5 - (float)((float)(v6 * v6) + (float)(v7 * v7));
  v18 = 0.0;
  if (v17 >= 0.0)
  {
    v19 = (float)(v17 * v17) * (float)(v17 * v17);
    if ((byte_1DCC5A968[byte_1DCC5A968[v4] + (unint64_t)v3] & 4) != 0)
      v20 = v7;
    else
      v20 = v6;
    if ((byte_1DCC5A968[byte_1DCC5A968[v4] + (unint64_t)v3] & 4) == 0)
      v6 = v7;
    v21 = -v20;
    if ((byte_1DCC5A968[byte_1DCC5A968[v4] + (unint64_t)v3] & 1) == 0)
      v21 = v20;
    v22 = -2.0;
    if ((byte_1DCC5A968[byte_1DCC5A968[v4] + (unint64_t)v3] & 2) == 0)
      v22 = 2.0;
    v18 = v19 * (float)(v21 + (float)(v6 * v22));
  }
  v23 = v15;
  v25 = 0.5 - (float)((float)(v13 * v13) + (float)(v14 * v14));
  if (v25 >= 0.0)
  {
    v26 = (float)(v25 * v25) * (float)(v25 * v25);
    v27 = byte_1DCC5A968[v3
                       + v8
                       + (unint64_t)byte_1DCC5A968[v4 + (unint64_t)v9]];
    if ((v27 & 4) != 0)
      v28 = v14;
    else
      v28 = v13;
    if ((v27 & 4) == 0)
      v13 = v14;
    v29 = -v28;
    if ((v27 & 1) == 0)
      v29 = v28;
    v30 = -2.0;
    if ((v27 & 2) == 0)
      v30 = 2.0;
    v10 = v26 * (float)(v29 + (float)(v13 * v30));
  }
  v24 = v16;
  v31 = 0.5 - (float)((float)(v23 * v23) + (float)(v24 * v24));
  v32 = 0.0;
  if (v31 >= 0.0)
  {
    v33 = (float)(v31 * v31) * (float)(v31 * v31);
    v34 = byte_1DCC5A968[v3
                       + 1
                       + (unint64_t)byte_1DCC5A968[v4 + 1]];
    if ((v34 & 4) != 0)
      v35 = v16;
    else
      v35 = v23;
    if ((v34 & 4) == 0)
      v23 = v16;
    if ((v34 & 1) != 0)
      v35 = -v35;
    v36 = -2.0;
    if ((v34 & 2) == 0)
      v36 = 2.0;
    v32 = v33 * (float)(v35 + (float)(v23 * v36));
  }
  return (float)((float)(v10 + v18) + v32) * 40.0;
}

void sub_1DCBEC1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCBEC828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1DCBEC960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCBEC9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCBECB20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCBECC6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCBECF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1DCBED08C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DCBED1F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DCBEEDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{

  _Unwind_Resume(a1);
}

void sub_1DCBEFA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCBF0184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{

  _Block_object_dispose(&a23, 8);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DCBF020C(uint64_t a1)
{
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

void sub_1DCBF0470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DCBF0628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1DCBF08A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCBF0A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DCBF0CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DCBF0EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1DCBF10D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1DCBF13D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1DCBF1410(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,unint64_t a23,uint64_t a24,const char *a25)
{
  uint64_t v28;
  unint64_t v29;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v43;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  int32x4_t v58;
  float v59;
  float v60;
  float32x2_t v61;
  float32x2_t v62;
  int32x4_t v63;
  float32x4_t v64;
  unsigned __int32 v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x4_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  float32x4_t v78;
  uint64_t v79;
  float32x4_t v80;
  int32x4_t v81;
  float32x4_t v82;
  int32x4_t v83;
  float32x4_t v84;
  int32x4_t v85;
  float v86;
  int32x4_t v87;
  float32x4_t v88;
  int32x4_t v89;
  float32x4_t v90;
  int32x4_t v91;
  float v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  float v96;
  objc_class *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int32x4_t v108;
  float32x4_t v109;
  void *v110;
  int32x4_t v111;
  void *v112;
  int32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  float32x4_t v137;
  void *v138;
  const char *v139;
  const char *v140;
  float32x4_t v141;
  float32x4_t v142;
  _OWORD v143[2];

  v143[0] = xmmword_1DCC56FD0;
  if (a2)
  {
    v28 = result;
    v29 = 0;
    result = a22;
    v36 = xmmword_1DCC583A0;
    v37 = xmmword_1DCC583A0;
    do
    {
      v38 = *(unsigned __int8 *)(v28 + v29);
      v39 = *(unsigned __int8 *)(v28 + v29 + 1);
      v40 = *(unsigned __int8 *)(v28 + v29 + 2);
      if (v38 * a4 + 12 <= a5 && v39 * a4 + 12 <= a5 && v40 * a4 + 12 <= a5)
      {
        v43 = v38 * a16 + 8 > a17 || v39 * a16 + 8 > a17;
        if (!v43 && v40 * a16 + 8 <= a17)
        {
          v45 = *(float32x2_t *)(a15 + v38 * a16);
          v46 = vsub_f32(*(float32x2_t *)(a15 + v39 * a16), v45);
          v47 = vsub_f32(*(float32x2_t *)(a15 + v40 * a16), v45);
          v48 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v47), v46);
          v49 = vsub_f32(v48, (float32x2_t)vdup_lane_s32((int32x2_t)v48, 1)).f32[0];
          if (v49 == 0.0)
          {
            v56 = 0uLL;
            v57 = 0uLL;
          }
          else
          {
            v50 = a3 + v38 * a4;
            a12.i64[0] = *(_QWORD *)v50;
            a12.i32[2] = *(_DWORD *)(v50 + 8);
            v51 = a3 + v39 * a4;
            a13.i64[0] = *(_QWORD *)v51;
            a13.i32[2] = *(_DWORD *)(v51 + 8);
            v52 = a3 + v40 * a4;
            a14.i64[0] = *(_QWORD *)v52;
            a14.i32[2] = *(_DWORD *)(v52 + 8);
            v53 = vsubq_f32(a14, a12);
            v54 = vsubq_f32(a13, a12);
            v55 = 1.0 / v49;
            v57 = vmulq_n_f32(vmlaq_lane_f32(vnegq_f32(vmulq_lane_f32(v53, v46, 1)), v54, v47, 1), 1.0 / v49);
            v56 = vmulq_n_f32(vmlaq_n_f32(vnegq_f32(vmulq_n_f32(v54, v47.f32[0])), v53, v46.f32[0]), v55);
            v57.i32[3] = 0;
          }
          v58 = (int32x4_t)vmulq_f32(v57, v57);
          v59 = vaddq_f32(vaddq_f32((float32x4_t)v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.i8, 1)), (float32x4_t)vdupq_laneq_s32(v58, 2)).f32[0];
          if (v59 <= COERCE_FLOAT(512))
          {
            a14 = (float32x4_t)v143[0];
          }
          else
          {
            v60 = v59;
            v61 = vrsqrte_f32((float32x2_t)LODWORD(v59));
            v62 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v60), vmul_f32(v61, v61)), v61);
            a14 = vmulq_n_f32(v57, vmul_f32(v62, vrsqrts_f32((float32x2_t)LODWORD(v60), vmul_f32(v62, v62))).f32[0]);
          }
          v63 = (int32x4_t)vmulq_f32(v56, v56);
          a12 = vaddq_f32(vaddq_f32((float32x4_t)v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.i8, 1)), (float32x4_t)vdupq_laneq_s32(v63, 2));
          v64 = (float32x4_t)v37;
          a13 = (float32x4_t)v36;
          if (a12.f32[0] > COERCE_FLOAT(512))
          {
            v65 = a12.i32[0];
            v66 = vrsqrte_f32((float32x2_t)a12.u32[0]);
            v67 = vmul_f32(vrsqrts_f32((float32x2_t)v65, vmul_f32(v66, v66)), v66);
            v64 = vmulq_n_f32(v56, vmul_f32(v67, vrsqrts_f32((float32x2_t)v65, vmul_f32(v67, v67))).f32[0]);
            a13 = v64;
          }
          v68 = a14;
          v68.i32[3] = v57.i32[3];
          if (a21)
          {
            if (v38 * result + 12 <= a23)
            {
              v69 = v39 * result;
              if (v39 * result + 12 <= a23)
              {
                v70 = v40 * result;
                if (v40 * result + 12 <= a23)
                {
                  v71 = a21 + v38 * result;
                  *(_QWORD *)v71 = v64.i64[0];
                  *(_DWORD *)(v71 + 8) = v64.i32[2];
                  *(_QWORD *)(a21 + v69) = v64.i64[0];
                  *(_DWORD *)(a21 + v69 + 8) = v64.i32[2];
                  *(_QWORD *)(a21 + v70) = a13.i64[0];
                  *(_DWORD *)(a21 + v70 + 8) = a13.i32[2];
                  v72 = v68;
                  v73 = v68;
                  goto LABEL_48;
                }
              }
            }
          }
          else
          {
            if (!a6)
            {
              v115 = v68;
              v117 = v37;
              v119 = v36;
              v121 = a19;
              v123 = a20;
              v125 = result;
              v127 = a23;
              v129 = a24;
              v131 = a3;
              v134 = a7;
              v136 = a8;
              v112 = (void *)MEMORY[0x1E0C99DA0];
              v140 = a25;
              v97 = (objc_class *)objc_opt_class();
              NSStringFromClass(v97);
              v138 = (void *)objc_claimAutoreleasedReturnValue();
              NSStringFromSelector(v140);
              v110 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_raise_format_(v112, v98, (uint64_t)CFSTR("ModelIOException"), CFSTR("[%@ %@]: Must provide either a valid normal pointer or bitangent pointer."), v138, v110);

              v68 = v115;
              v37 = v117;
              v72 = v115;
              v73 = v115;
              a7 = v134;
              a8 = v136;
              a3 = v131;
              a6 = 0;
              a25 = v140;
              a23 = v127;
              a24 = v129;
              a21 = 0;
              result = v125;
              a19 = v121;
              a20 = v123;
              v36 = v119;
              goto LABEL_48;
            }
            if (v38 * a7 + 12 <= a8 && v39 * a7 + 12 <= a8 && v40 * a7 + 12 <= a8)
            {
              v74 = a6 + v38 * a7;
              v57.i64[0] = *(_QWORD *)v74;
              v75 = v57;
              v75.i32[2] = *(_DWORD *)(v74 + 8);
              v76 = v75;
              v113 = (int32x4_t)v75;
              v57.i32[2] = v75.i32[2];
              v77 = a6 + v39 * a7;
              a12.i64[0] = *(_QWORD *)v77;
              v78 = a12;
              v78.i32[2] = *(_DWORD *)(v77 + 8);
              v108 = (int32x4_t)v78;
              a12.i32[2] = v78.i32[2];
              v105 = a12;
              v79 = a6 + v40 * a7;
              a12.i64[0] = *(_QWORD *)v79;
              v80 = a12;
              v80.i32[2] = *(_DWORD *)(v79 + 8);
              v111 = (int32x4_t)v80;
              a12.i32[2] = v80.i32[2];
              v106 = a12;
              v81 = (int32x4_t)vmulq_f32(v57, a14);
              v142 = vmlsq_lane_f32(a14, v76, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.i8, 1)), (float32x4_t)vdupq_laneq_s32(v81, 2)), 0);
              v139 = a25;
              v124 = result;
              v133 = a7;
              v135 = a8;
              v130 = a3;
              v132 = a6;
              v126 = a23;
              v128 = a24;
              v120 = a19;
              v122 = a20;
              v116 = v37;
              v118 = v36;
              v137 = a13;
              v107 = a14;
              v82 = sub_1DCBF93AC(&v142, (uint64_t)v143);
              v83 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82), (int8x16_t)v82, 0xCuLL), (float32x4_t)v113)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v113, v113), (int8x16_t)v113, 0xCuLL), v82);
              v84 = v82;
              v85 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v83, v83), (int8x16_t)v83, 0xCuLL), v137);
              if (vaddq_f32(vaddq_f32((float32x4_t)v85, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.i8, 1)), (float32x4_t)vdupq_laneq_s32(v85, 2)).f32[0] >= 0.0)v86 = 1.0;
              else
                v86 = -1.0;
              v84.f32[3] = v86;
              v114 = v84;
              v87 = (int32x4_t)vmulq_f32(v105, v107);
              v142 = vmlsq_lane_f32(v107, (float32x4_t)v108, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.i8, 1)), (float32x4_t)vdupq_laneq_s32(v87, 2)), 0);
              v88 = sub_1DCBF93AC(&v142, (uint64_t)v143);
              v89 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), (int8x16_t)v88, 0xCuLL), (float32x4_t)v108)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v108, v108), (int8x16_t)v108, 0xCuLL), v88);
              v90 = v88;
              v91 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v89, v89), (int8x16_t)v89, 0xCuLL), v137);
              if (vaddq_f32(vaddq_f32((float32x4_t)v91, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v91.i8, 1)), (float32x4_t)vdupq_laneq_s32(v91, 2)).f32[0] >= 0.0)v92 = 1.0;
              else
                v92 = -1.0;
              v90.f32[3] = v92;
              v109 = v90;
              v93 = (int32x4_t)vmulq_f32(v106, v107);
              v142 = vmlsq_lane_f32(v107, (float32x4_t)v111, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v93, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v93.i8, 1)), (float32x4_t)vdupq_laneq_s32(v93, 2)), 0);
              v73 = sub_1DCBF93AC(&v142, (uint64_t)v143);
              v37 = v116;
              v36 = v118;
              a19 = v120;
              a20 = v122;
              a21 = 0;
              result = v124;
              a23 = v126;
              a24 = v128;
              a25 = v139;
              a3 = v130;
              a6 = v132;
              a7 = v133;
              a8 = v135;
              v94 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v73, (int32x4_t)v73), (int8x16_t)v73, 0xCuLL), (float32x4_t)v111)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v111, v111), (int8x16_t)v111, 0xCuLL), v73);
              v95 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v94, v94), (int8x16_t)v94, 0xCuLL), v137);
              a12 = (float32x4_t)vdupq_laneq_s32(v95, 2);
              v72 = v109;
              if (vaddq_f32(vaddq_f32((float32x4_t)v95, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v95.i8, 1)), a12).f32[0] >= 0.0)
                v96 = 1.0;
              else
                v96 = -1.0;
              v73.f32[3] = v96;
              v68 = v114;
LABEL_48:
              if (v38 * a19 + 12 <= a20)
              {
                v99 = v39 * a19;
                if (v39 * a19 + 12 <= a20)
                {
                  v100 = v40 * a19;
                  if (v40 * a19 + 12 <= a20)
                  {
                    v101 = a18 + v38 * a19;
                    *(_QWORD *)v101 = v68.i64[0];
                    *(_DWORD *)(v101 + 8) = v68.i32[2];
                    if (a24 == 786436)
                    {
                      *(_DWORD *)(v101 + 12) = v68.i32[3];
                      *(float32x4_t *)(a18 + v99) = v72;
                      *(_QWORD *)(a18 + v100) = v73.i64[0];
                      v102 = (_DWORD *)(a18 + v100 + 12);
                      *(_DWORD *)(a18 + v100 + 8) = v73.i32[2];
                      v103 = 3;
                    }
                    else
                    {
                      v104 = a18 + v99;
                      *(_QWORD *)v104 = v72.i64[0];
                      *(_DWORD *)(v104 + 8) = v72.i32[2];
                      *(_QWORD *)(a18 + v100) = v73.i64[0];
                      v102 = (_DWORD *)(a18 + v100 + 8);
                      v103 = 2;
                    }
                    v141 = v73;
                    *v102 = *(_DWORD *)((unint64_t)&v141 | (4 * v103));
                  }
                }
              }
            }
          }
        }
      }
      v29 += 3;
    }
    while (v29 < a2);
  }
  return result;
}

void sub_1DCBF1AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  uint64_t v17;
  void *v18;

  v18 = *(void **)(v17 - 208);

  _Unwind_Resume(a1);
}

uint64_t sub_1DCBF1AD8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,unint64_t a23,uint64_t a24,const char *a25)
{
  uint64_t v28;
  unint64_t v29;
  __int128 v36;
  __int128 v37;
  unsigned __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v44;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  float v60;
  float v61;
  float32x2_t v62;
  float32x2_t v63;
  int32x4_t v64;
  float32x4_t v65;
  unsigned __int32 v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  uint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  uint64_t v78;
  float32x4_t v79;
  uint64_t v80;
  float32x4_t v81;
  int32x4_t v82;
  float32x4_t v83;
  int32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  float v87;
  int32x4_t v88;
  float32x4_t v89;
  int32x4_t v90;
  float32x4_t v91;
  int32x4_t v92;
  float v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  float v97;
  objc_class *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  int32x4_t v109;
  float32x4_t v110;
  void *v111;
  int32x4_t v112;
  void *v113;
  int32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  float32x4_t v138;
  void *v139;
  const char *v140;
  const char *v141;
  float32x4_t v142;
  float32x4_t v143;
  _OWORD v144[2];

  v144[0] = xmmword_1DCC56FD0;
  if (a2)
  {
    v28 = result;
    v29 = 0;
    result = a22;
    v36 = xmmword_1DCC583A0;
    v37 = xmmword_1DCC583A0;
    do
    {
      v38 = (unsigned __int16 *)(v28 + 2 * v29);
      v39 = *v38;
      v40 = v38[1];
      v41 = v38[2];
      if (v39 * a4 + 12 <= a5 && v40 * a4 + 12 <= a5 && v41 * a4 + 12 <= a5)
      {
        v44 = v39 * a16 + 8 > a17 || v40 * a16 + 8 > a17;
        if (!v44 && v41 * a16 + 8 <= a17)
        {
          v46 = *(float32x2_t *)(a15 + v39 * a16);
          v47 = vsub_f32(*(float32x2_t *)(a15 + v40 * a16), v46);
          v48 = vsub_f32(*(float32x2_t *)(a15 + v41 * a16), v46);
          v49 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v48), v47);
          v50 = vsub_f32(v49, (float32x2_t)vdup_lane_s32((int32x2_t)v49, 1)).f32[0];
          if (v50 == 0.0)
          {
            v57 = 0uLL;
            v58 = 0uLL;
          }
          else
          {
            v51 = a3 + v39 * a4;
            a12.i64[0] = *(_QWORD *)v51;
            a12.i32[2] = *(_DWORD *)(v51 + 8);
            v52 = a3 + v40 * a4;
            a13.i64[0] = *(_QWORD *)v52;
            a13.i32[2] = *(_DWORD *)(v52 + 8);
            v53 = a3 + v41 * a4;
            a14.i64[0] = *(_QWORD *)v53;
            a14.i32[2] = *(_DWORD *)(v53 + 8);
            v54 = vsubq_f32(a14, a12);
            v55 = vsubq_f32(a13, a12);
            v56 = 1.0 / v50;
            v58 = vmulq_n_f32(vmlaq_lane_f32(vnegq_f32(vmulq_lane_f32(v54, v47, 1)), v55, v48, 1), 1.0 / v50);
            v57 = vmulq_n_f32(vmlaq_n_f32(vnegq_f32(vmulq_n_f32(v55, v48.f32[0])), v54, v47.f32[0]), v56);
            v58.i32[3] = 0;
          }
          v59 = (int32x4_t)vmulq_f32(v58, v58);
          v60 = vaddq_f32(vaddq_f32((float32x4_t)v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.i8, 1)), (float32x4_t)vdupq_laneq_s32(v59, 2)).f32[0];
          if (v60 <= COERCE_FLOAT(512))
          {
            a14 = (float32x4_t)v144[0];
          }
          else
          {
            v61 = v60;
            v62 = vrsqrte_f32((float32x2_t)LODWORD(v60));
            v63 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v61), vmul_f32(v62, v62)), v62);
            a14 = vmulq_n_f32(v58, vmul_f32(v63, vrsqrts_f32((float32x2_t)LODWORD(v61), vmul_f32(v63, v63))).f32[0]);
          }
          v64 = (int32x4_t)vmulq_f32(v57, v57);
          a12 = vaddq_f32(vaddq_f32((float32x4_t)v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 1)), (float32x4_t)vdupq_laneq_s32(v64, 2));
          v65 = (float32x4_t)v37;
          a13 = (float32x4_t)v36;
          if (a12.f32[0] > COERCE_FLOAT(512))
          {
            v66 = a12.i32[0];
            v67 = vrsqrte_f32((float32x2_t)a12.u32[0]);
            v68 = vmul_f32(vrsqrts_f32((float32x2_t)v66, vmul_f32(v67, v67)), v67);
            v65 = vmulq_n_f32(v57, vmul_f32(v68, vrsqrts_f32((float32x2_t)v66, vmul_f32(v68, v68))).f32[0]);
            a13 = v65;
          }
          v69 = a14;
          v69.i32[3] = v58.i32[3];
          if (a21)
          {
            if (v39 * result + 12 <= a23)
            {
              v70 = v40 * result;
              if (v40 * result + 12 <= a23)
              {
                v71 = v41 * result;
                if (v41 * result + 12 <= a23)
                {
                  v72 = a21 + v39 * result;
                  *(_QWORD *)v72 = v65.i64[0];
                  *(_DWORD *)(v72 + 8) = v65.i32[2];
                  *(_QWORD *)(a21 + v70) = v65.i64[0];
                  *(_DWORD *)(a21 + v70 + 8) = v65.i32[2];
                  *(_QWORD *)(a21 + v71) = a13.i64[0];
                  *(_DWORD *)(a21 + v71 + 8) = a13.i32[2];
                  v73 = v69;
                  v74 = v69;
                  goto LABEL_48;
                }
              }
            }
          }
          else
          {
            if (!a6)
            {
              v116 = v69;
              v118 = v37;
              v120 = v36;
              v122 = a19;
              v124 = a20;
              v126 = result;
              v128 = a23;
              v130 = a24;
              v132 = a3;
              v135 = a7;
              v137 = a8;
              v113 = (void *)MEMORY[0x1E0C99DA0];
              v141 = a25;
              v98 = (objc_class *)objc_opt_class();
              NSStringFromClass(v98);
              v139 = (void *)objc_claimAutoreleasedReturnValue();
              NSStringFromSelector(v141);
              v111 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_raise_format_(v113, v99, (uint64_t)CFSTR("ModelIOException"), CFSTR("[%@ %@]: Must provide either a valid normal pointer or bitangent pointer."), v139, v111);

              v69 = v116;
              v37 = v118;
              v73 = v116;
              v74 = v116;
              a7 = v135;
              a8 = v137;
              a3 = v132;
              a6 = 0;
              a25 = v141;
              a23 = v128;
              a24 = v130;
              a21 = 0;
              result = v126;
              a19 = v122;
              a20 = v124;
              v36 = v120;
              goto LABEL_48;
            }
            if (v39 * a7 + 12 <= a8 && v40 * a7 + 12 <= a8 && v41 * a7 + 12 <= a8)
            {
              v75 = a6 + v39 * a7;
              v58.i64[0] = *(_QWORD *)v75;
              v76 = v58;
              v76.i32[2] = *(_DWORD *)(v75 + 8);
              v77 = v76;
              v114 = (int32x4_t)v76;
              v58.i32[2] = v76.i32[2];
              v78 = a6 + v40 * a7;
              a12.i64[0] = *(_QWORD *)v78;
              v79 = a12;
              v79.i32[2] = *(_DWORD *)(v78 + 8);
              v109 = (int32x4_t)v79;
              a12.i32[2] = v79.i32[2];
              v106 = a12;
              v80 = a6 + v41 * a7;
              a12.i64[0] = *(_QWORD *)v80;
              v81 = a12;
              v81.i32[2] = *(_DWORD *)(v80 + 8);
              v112 = (int32x4_t)v81;
              a12.i32[2] = v81.i32[2];
              v107 = a12;
              v82 = (int32x4_t)vmulq_f32(v58, a14);
              v143 = vmlsq_lane_f32(a14, v77, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v82, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.i8, 1)), (float32x4_t)vdupq_laneq_s32(v82, 2)), 0);
              v140 = a25;
              v125 = result;
              v134 = a7;
              v136 = a8;
              v131 = a3;
              v133 = a6;
              v127 = a23;
              v129 = a24;
              v121 = a19;
              v123 = a20;
              v117 = v37;
              v119 = v36;
              v138 = a13;
              v108 = a14;
              v83 = sub_1DCBF93AC(&v143, (uint64_t)v144);
              v84 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL), (float32x4_t)v114)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v114, v114), (int8x16_t)v114, 0xCuLL), v83);
              v85 = v83;
              v86 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v84, v84), (int8x16_t)v84, 0xCuLL), v138);
              if (vaddq_f32(vaddq_f32((float32x4_t)v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.i8, 1)), (float32x4_t)vdupq_laneq_s32(v86, 2)).f32[0] >= 0.0)v87 = 1.0;
              else
                v87 = -1.0;
              v85.f32[3] = v87;
              v115 = v85;
              v88 = (int32x4_t)vmulq_f32(v106, v108);
              v143 = vmlsq_lane_f32(v108, (float32x4_t)v109, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.i8, 1)), (float32x4_t)vdupq_laneq_s32(v88, 2)), 0);
              v89 = sub_1DCBF93AC(&v143, (uint64_t)v144);
              v90 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), (int8x16_t)v89, 0xCuLL), (float32x4_t)v109)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v109, v109), (int8x16_t)v109, 0xCuLL), v89);
              v91 = v89;
              v92 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v90, v90), (int8x16_t)v90, 0xCuLL), v138);
              if (vaddq_f32(vaddq_f32((float32x4_t)v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.i8, 1)), (float32x4_t)vdupq_laneq_s32(v92, 2)).f32[0] >= 0.0)v93 = 1.0;
              else
                v93 = -1.0;
              v91.f32[3] = v93;
              v110 = v91;
              v94 = (int32x4_t)vmulq_f32(v107, v108);
              v143 = vmlsq_lane_f32(v108, (float32x4_t)v112, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v94.i8, 1)), (float32x4_t)vdupq_laneq_s32(v94, 2)), 0);
              v74 = sub_1DCBF93AC(&v143, (uint64_t)v144);
              v37 = v117;
              v36 = v119;
              a19 = v121;
              a20 = v123;
              a21 = 0;
              result = v125;
              a23 = v127;
              a24 = v129;
              a25 = v140;
              a3 = v131;
              a6 = v133;
              a7 = v134;
              a8 = v136;
              v95 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), (int8x16_t)v74, 0xCuLL), (float32x4_t)v112)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v112, v112), (int8x16_t)v112, 0xCuLL), v74);
              v96 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v95, v95), (int8x16_t)v95, 0xCuLL), v138);
              a12 = (float32x4_t)vdupq_laneq_s32(v96, 2);
              v73 = v110;
              if (vaddq_f32(vaddq_f32((float32x4_t)v96, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.i8, 1)), a12).f32[0] >= 0.0)
                v97 = 1.0;
              else
                v97 = -1.0;
              v74.f32[3] = v97;
              v69 = v115;
LABEL_48:
              if (v39 * a19 + 12 <= a20)
              {
                v100 = v40 * a19;
                if (v40 * a19 + 12 <= a20)
                {
                  v101 = v41 * a19;
                  if (v41 * a19 + 12 <= a20)
                  {
                    v102 = a18 + v39 * a19;
                    *(_QWORD *)v102 = v69.i64[0];
                    *(_DWORD *)(v102 + 8) = v69.i32[2];
                    if (a24 == 786436)
                    {
                      *(_DWORD *)(v102 + 12) = v69.i32[3];
                      *(float32x4_t *)(a18 + v100) = v73;
                      *(_QWORD *)(a18 + v101) = v74.i64[0];
                      v103 = (_DWORD *)(a18 + v101 + 12);
                      *(_DWORD *)(a18 + v101 + 8) = v74.i32[2];
                      v104 = 3;
                    }
                    else
                    {
                      v105 = a18 + v100;
                      *(_QWORD *)v105 = v73.i64[0];
                      *(_DWORD *)(v105 + 8) = v73.i32[2];
                      *(_QWORD *)(a18 + v101) = v74.i64[0];
                      v103 = (_DWORD *)(a18 + v101 + 8);
                      v104 = 2;
                    }
                    v142 = v74;
                    *v103 = *(_DWORD *)((unint64_t)&v142 | (4 * v104));
                  }
                }
              }
            }
          }
        }
      }
      v29 += 3;
    }
    while (v29 < a2);
  }
  return result;
}

void sub_1DCBF2178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  uint64_t v17;
  void *v18;

  v18 = *(void **)(v17 - 208);

  _Unwind_Resume(a1);
}

uint64_t sub_1DCBF21A0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,unint64_t a23,uint64_t a24,const char *a25)
{
  uint64_t v28;
  unint64_t v29;
  __int128 v36;
  __int128 v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v44;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  float v60;
  float v61;
  float32x2_t v62;
  float32x2_t v63;
  int32x4_t v64;
  float32x4_t v65;
  unsigned __int32 v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  uint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  uint64_t v78;
  float32x4_t v79;
  uint64_t v80;
  float32x4_t v81;
  int32x4_t v82;
  float32x4_t v83;
  int32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  float v87;
  int32x4_t v88;
  float32x4_t v89;
  int32x4_t v90;
  float32x4_t v91;
  int32x4_t v92;
  float v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  float v97;
  objc_class *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  int32x4_t v109;
  float32x4_t v110;
  void *v111;
  int32x4_t v112;
  void *v113;
  int32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  float32x4_t v138;
  void *v139;
  const char *v140;
  const char *v141;
  float32x4_t v142;
  float32x4_t v143;
  _OWORD v144[2];

  v144[0] = xmmword_1DCC56FD0;
  if (a2)
  {
    v28 = result;
    v29 = 0;
    result = a22;
    v36 = xmmword_1DCC583A0;
    v37 = xmmword_1DCC583A0;
    do
    {
      v38 = (unsigned int *)(v28 + 4 * v29);
      v39 = *v38;
      v40 = v38[1];
      v41 = v38[2];
      if (v39 * a4 + 12 <= a5 && v40 * a4 + 12 <= a5 && v41 * a4 + 12 <= a5)
      {
        v44 = v39 * a16 + 8 > a17 || v40 * a16 + 8 > a17;
        if (!v44 && v41 * a16 + 8 <= a17)
        {
          v46 = *(float32x2_t *)(a15 + v39 * a16);
          v47 = vsub_f32(*(float32x2_t *)(a15 + v40 * a16), v46);
          v48 = vsub_f32(*(float32x2_t *)(a15 + v41 * a16), v46);
          v49 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v48), v47);
          v50 = vsub_f32(v49, (float32x2_t)vdup_lane_s32((int32x2_t)v49, 1)).f32[0];
          if (v50 == 0.0)
          {
            v57 = 0uLL;
            v58 = 0uLL;
          }
          else
          {
            v51 = a3 + v39 * a4;
            a12.i64[0] = *(_QWORD *)v51;
            a12.i32[2] = *(_DWORD *)(v51 + 8);
            v52 = a3 + v40 * a4;
            a13.i64[0] = *(_QWORD *)v52;
            a13.i32[2] = *(_DWORD *)(v52 + 8);
            v53 = a3 + v41 * a4;
            a14.i64[0] = *(_QWORD *)v53;
            a14.i32[2] = *(_DWORD *)(v53 + 8);
            v54 = vsubq_f32(a14, a12);
            v55 = vsubq_f32(a13, a12);
            v56 = 1.0 / v50;
            v58 = vmulq_n_f32(vmlaq_lane_f32(vnegq_f32(vmulq_lane_f32(v54, v47, 1)), v55, v48, 1), 1.0 / v50);
            v57 = vmulq_n_f32(vmlaq_n_f32(vnegq_f32(vmulq_n_f32(v55, v48.f32[0])), v54, v47.f32[0]), v56);
            v58.i32[3] = 0;
          }
          v59 = (int32x4_t)vmulq_f32(v58, v58);
          v60 = vaddq_f32(vaddq_f32((float32x4_t)v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.i8, 1)), (float32x4_t)vdupq_laneq_s32(v59, 2)).f32[0];
          if (v60 <= COERCE_FLOAT(512))
          {
            a14 = (float32x4_t)v144[0];
          }
          else
          {
            v61 = v60;
            v62 = vrsqrte_f32((float32x2_t)LODWORD(v60));
            v63 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v61), vmul_f32(v62, v62)), v62);
            a14 = vmulq_n_f32(v58, vmul_f32(v63, vrsqrts_f32((float32x2_t)LODWORD(v61), vmul_f32(v63, v63))).f32[0]);
          }
          v64 = (int32x4_t)vmulq_f32(v57, v57);
          a12 = vaddq_f32(vaddq_f32((float32x4_t)v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 1)), (float32x4_t)vdupq_laneq_s32(v64, 2));
          v65 = (float32x4_t)v37;
          a13 = (float32x4_t)v36;
          if (a12.f32[0] > COERCE_FLOAT(512))
          {
            v66 = a12.i32[0];
            v67 = vrsqrte_f32((float32x2_t)a12.u32[0]);
            v68 = vmul_f32(vrsqrts_f32((float32x2_t)v66, vmul_f32(v67, v67)), v67);
            v65 = vmulq_n_f32(v57, vmul_f32(v68, vrsqrts_f32((float32x2_t)v66, vmul_f32(v68, v68))).f32[0]);
            a13 = v65;
          }
          v69 = a14;
          v69.i32[3] = v58.i32[3];
          if (a21)
          {
            if (v39 * result + 12 <= a23)
            {
              v70 = v40 * result;
              if (v40 * result + 12 <= a23)
              {
                v71 = v41 * result;
                if (v41 * result + 12 <= a23)
                {
                  v72 = a21 + v39 * result;
                  *(_QWORD *)v72 = v65.i64[0];
                  *(_DWORD *)(v72 + 8) = v65.i32[2];
                  *(_QWORD *)(a21 + v70) = v65.i64[0];
                  *(_DWORD *)(a21 + v70 + 8) = v65.i32[2];
                  *(_QWORD *)(a21 + v71) = a13.i64[0];
                  *(_DWORD *)(a21 + v71 + 8) = a13.i32[2];
                  v73 = v69;
                  v74 = v69;
                  goto LABEL_48;
                }
              }
            }
          }
          else
          {
            if (!a6)
            {
              v116 = v69;
              v118 = v37;
              v120 = v36;
              v122 = a19;
              v124 = a20;
              v126 = result;
              v128 = a23;
              v130 = a24;
              v132 = a3;
              v135 = a7;
              v137 = a8;
              v113 = (void *)MEMORY[0x1E0C99DA0];
              v141 = a25;
              v98 = (objc_class *)objc_opt_class();
              NSStringFromClass(v98);
              v139 = (void *)objc_claimAutoreleasedReturnValue();
              NSStringFromSelector(v141);
              v111 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_raise_format_(v113, v99, (uint64_t)CFSTR("ModelIOException"), CFSTR("[%@ %@]: Must provide either a valid normal pointer or bitangent pointer."), v139, v111);

              v69 = v116;
              v37 = v118;
              v73 = v116;
              v74 = v116;
              a7 = v135;
              a8 = v137;
              a3 = v132;
              a6 = 0;
              a25 = v141;
              a23 = v128;
              a24 = v130;
              a21 = 0;
              result = v126;
              a19 = v122;
              a20 = v124;
              v36 = v120;
              goto LABEL_48;
            }
            if (v39 * a7 + 12 <= a8 && v40 * a7 + 12 <= a8 && v41 * a7 + 12 <= a8)
            {
              v75 = a6 + v39 * a7;
              v58.i64[0] = *(_QWORD *)v75;
              v76 = v58;
              v76.i32[2] = *(_DWORD *)(v75 + 8);
              v77 = v76;
              v114 = (int32x4_t)v76;
              v58.i32[2] = v76.i32[2];
              v78 = a6 + v40 * a7;
              a12.i64[0] = *(_QWORD *)v78;
              v79 = a12;
              v79.i32[2] = *(_DWORD *)(v78 + 8);
              v109 = (int32x4_t)v79;
              a12.i32[2] = v79.i32[2];
              v106 = a12;
              v80 = a6 + v41 * a7;
              a12.i64[0] = *(_QWORD *)v80;
              v81 = a12;
              v81.i32[2] = *(_DWORD *)(v80 + 8);
              v112 = (int32x4_t)v81;
              a12.i32[2] = v81.i32[2];
              v107 = a12;
              v82 = (int32x4_t)vmulq_f32(v58, a14);
              v143 = vmlsq_lane_f32(a14, v77, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v82, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.i8, 1)), (float32x4_t)vdupq_laneq_s32(v82, 2)), 0);
              v140 = a25;
              v125 = result;
              v134 = a7;
              v136 = a8;
              v131 = a3;
              v133 = a6;
              v127 = a23;
              v129 = a24;
              v121 = a19;
              v123 = a20;
              v117 = v37;
              v119 = v36;
              v138 = a13;
              v108 = a14;
              v83 = sub_1DCBF93AC(&v143, (uint64_t)v144);
              v84 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL), (float32x4_t)v114)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v114, v114), (int8x16_t)v114, 0xCuLL), v83);
              v85 = v83;
              v86 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v84, v84), (int8x16_t)v84, 0xCuLL), v138);
              if (vaddq_f32(vaddq_f32((float32x4_t)v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.i8, 1)), (float32x4_t)vdupq_laneq_s32(v86, 2)).f32[0] >= 0.0)v87 = 1.0;
              else
                v87 = -1.0;
              v85.f32[3] = v87;
              v115 = v85;
              v88 = (int32x4_t)vmulq_f32(v106, v108);
              v143 = vmlsq_lane_f32(v108, (float32x4_t)v109, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.i8, 1)), (float32x4_t)vdupq_laneq_s32(v88, 2)), 0);
              v89 = sub_1DCBF93AC(&v143, (uint64_t)v144);
              v90 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), (int8x16_t)v89, 0xCuLL), (float32x4_t)v109)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v109, v109), (int8x16_t)v109, 0xCuLL), v89);
              v91 = v89;
              v92 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v90, v90), (int8x16_t)v90, 0xCuLL), v138);
              if (vaddq_f32(vaddq_f32((float32x4_t)v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.i8, 1)), (float32x4_t)vdupq_laneq_s32(v92, 2)).f32[0] >= 0.0)v93 = 1.0;
              else
                v93 = -1.0;
              v91.f32[3] = v93;
              v110 = v91;
              v94 = (int32x4_t)vmulq_f32(v107, v108);
              v143 = vmlsq_lane_f32(v108, (float32x4_t)v112, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v94.i8, 1)), (float32x4_t)vdupq_laneq_s32(v94, 2)), 0);
              v74 = sub_1DCBF93AC(&v143, (uint64_t)v144);
              v37 = v117;
              v36 = v119;
              a19 = v121;
              a20 = v123;
              a21 = 0;
              result = v125;
              a23 = v127;
              a24 = v129;
              a25 = v140;
              a3 = v131;
              a6 = v133;
              a7 = v134;
              a8 = v136;
              v95 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), (int8x16_t)v74, 0xCuLL), (float32x4_t)v112)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v112, v112), (int8x16_t)v112, 0xCuLL), v74);
              v96 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v95, v95), (int8x16_t)v95, 0xCuLL), v138);
              a12 = (float32x4_t)vdupq_laneq_s32(v96, 2);
              v73 = v110;
              if (vaddq_f32(vaddq_f32((float32x4_t)v96, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.i8, 1)), a12).f32[0] >= 0.0)
                v97 = 1.0;
              else
                v97 = -1.0;
              v74.f32[3] = v97;
              v69 = v115;
LABEL_48:
              if (v39 * a19 + 12 <= a20)
              {
                v100 = v40 * a19;
                if (v40 * a19 + 12 <= a20)
                {
                  v101 = v41 * a19;
                  if (v41 * a19 + 12 <= a20)
                  {
                    v102 = a18 + v39 * a19;
                    *(_QWORD *)v102 = v69.i64[0];
                    *(_DWORD *)(v102 + 8) = v69.i32[2];
                    if (a24 == 786436)
                    {
                      *(_DWORD *)(v102 + 12) = v69.i32[3];
                      *(float32x4_t *)(a18 + v100) = v73;
                      *(_QWORD *)(a18 + v101) = v74.i64[0];
                      v103 = (_DWORD *)(a18 + v101 + 12);
                      *(_DWORD *)(a18 + v101 + 8) = v74.i32[2];
                      v104 = 3;
                    }
                    else
                    {
                      v105 = a18 + v100;
                      *(_QWORD *)v105 = v73.i64[0];
                      *(_DWORD *)(v105 + 8) = v73.i32[2];
                      *(_QWORD *)(a18 + v101) = v74.i64[0];
                      v103 = (_DWORD *)(a18 + v101 + 8);
                      v104 = 2;
                    }
                    v142 = v74;
                    *v103 = *(_DWORD *)((unint64_t)&v142 | (4 * v104));
                  }
                }
              }
            }
          }
        }
      }
      v29 += 3;
    }
    while (v29 < a2);
  }
  return result;
}

void sub_1DCBF283C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  uint64_t v17;
  void *v18;

  v18 = *(void **)(v17 - 208);

  _Unwind_Resume(a1);
}

void sub_1DCBF2CA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1DCBF3190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  _Unwind_Resume(a1);
}

void sub_1DCBF3674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCBF3754(float32x4_t ***a1, float a2)
{
  float32x4_t **v3;
  float32x4_t **v4;
  float32x4_t *v5;
  float32x4_t *v6;
  float32x4_t **v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  float32x4_t **v16;
  char *v17;
  char *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t **v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  float32x4_t **v30;
  char *v31;
  char *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t **v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  float32x4_t **v44;
  char *v45;
  char *v46;
  float32x4_t *v47;
  float32x4_t *v48;
  uint64_t v54;
  uint64_t v55;
  uint64_t i;
  __n128 v57;
  int32x4_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  _QWORD *v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float32x4_t v87;
  float32x4_t *v88;
  float32x4_t v89;
  int32x4_t v90;
  float32x4_t *v91;
  float32x4_t v92;
  int32x4_t v93;
  uint64_t j;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t k;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  __int128 v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  __int128 v129;
  uint64_t v130;
  float32x4_t *v131;
  uint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  float32x4_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  float32x4_t v157;
  __n128 v158;
  float32x4_t v159;
  __n128 v160;
  void *v161;
  char *v162;
  char *v163;
  void *__p;
  char *v165;
  char *v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  float32x4_t *v182;

  v181 = 1065353216;
  v179 = 0u;
  v180 = 0u;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
    return sub_1DCB07D24((uint64_t)&v179);
  do
  {
    v5 = *v3;
    *(_QWORD *)&v167 = *v3 + 4;
    v6 = sub_1DCB07DA0((uint64_t)&v179, (float32x4_t *)v167, (uint64_t)&unk_1DCC58300, (float32x4_t **)&v167);
    v7 = (float32x4_t **)v6[2].i64[1];
    v8 = v6[3].u64[0];
    if ((unint64_t)v7 >= v8)
    {
      v10 = v6[2].i64[0];
      v11 = ((uint64_t)v7 - v10) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        goto LABEL_199;
      v12 = v8 - v10;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)sub_1DCAE79A4((uint64_t)&v6[3], v14);
      else
        v15 = 0;
      v16 = (float32x4_t **)&v15[8 * v11];
      *v16 = v5;
      v9 = v16 + 1;
      v18 = (char *)v6[2].i64[0];
      v17 = (char *)v6[2].i64[1];
      if (v17 != v18)
      {
        do
        {
          v19 = (float32x4_t *)*((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v16 = v19;
        }
        while (v17 != v18);
        v17 = (char *)v6[2].i64[0];
      }
      v6[2].i64[0] = (uint64_t)v16;
      v6[2].i64[1] = (uint64_t)v9;
      v6[3].i64[0] = (uint64_t)&v15[8 * v14];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v7 = v5;
      v9 = v7 + 1;
    }
    v6[2].i64[1] = (uint64_t)v9;
    *(_QWORD *)&v167 = v5 + 5;
    v20 = sub_1DCB07DA0((uint64_t)&v179, v5 + 5, (uint64_t)&unk_1DCC58300, (float32x4_t **)&v167);
    v21 = (float32x4_t **)v20[2].i64[1];
    v22 = v20[3].u64[0];
    if ((unint64_t)v21 >= v22)
    {
      v24 = v20[2].i64[0];
      v25 = ((uint64_t)v21 - v24) >> 3;
      if ((unint64_t)(v25 + 1) >> 61)
        goto LABEL_199;
      v26 = v22 - v24;
      v27 = v26 >> 2;
      if (v26 >> 2 <= (unint64_t)(v25 + 1))
        v27 = v25 + 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v29 = (char *)sub_1DCAE79A4((uint64_t)&v20[3], v28);
      else
        v29 = 0;
      v30 = (float32x4_t **)&v29[8 * v25];
      *v30 = v5;
      v23 = v30 + 1;
      v32 = (char *)v20[2].i64[0];
      v31 = (char *)v20[2].i64[1];
      if (v31 != v32)
      {
        do
        {
          v33 = (float32x4_t *)*((_QWORD *)v31 - 1);
          v31 -= 8;
          *--v30 = v33;
        }
        while (v31 != v32);
        v31 = (char *)v20[2].i64[0];
      }
      v20[2].i64[0] = (uint64_t)v30;
      v20[2].i64[1] = (uint64_t)v23;
      v20[3].i64[0] = (uint64_t)&v29[8 * v28];
      if (v31)
        operator delete(v31);
    }
    else
    {
      *v21 = v5;
      v23 = v21 + 1;
    }
    v20[2].i64[1] = (uint64_t)v23;
    *(_QWORD *)&v167 = v5 + 6;
    v34 = sub_1DCB07DA0((uint64_t)&v179, v5 + 6, (uint64_t)&unk_1DCC58300, (float32x4_t **)&v167);
    v35 = (float32x4_t **)v34[2].i64[1];
    v36 = v34[3].u64[0];
    if ((unint64_t)v35 >= v36)
    {
      v38 = v34[2].i64[0];
      v39 = ((uint64_t)v35 - v38) >> 3;
      if ((unint64_t)(v39 + 1) >> 61)
LABEL_199:
        sub_1DCAE4C44();
      v40 = v36 - v38;
      v41 = v40 >> 2;
      if (v40 >> 2 <= (unint64_t)(v39 + 1))
        v41 = v39 + 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
        v42 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
        v43 = (char *)sub_1DCAE79A4((uint64_t)&v34[3], v42);
      else
        v43 = 0;
      v44 = (float32x4_t **)&v43[8 * v39];
      *v44 = v5;
      v37 = v44 + 1;
      v46 = (char *)v34[2].i64[0];
      v45 = (char *)v34[2].i64[1];
      if (v45 != v46)
      {
        do
        {
          v47 = (float32x4_t *)*((_QWORD *)v45 - 1);
          v45 -= 8;
          *--v44 = v47;
        }
        while (v45 != v46);
        v45 = (char *)v34[2].i64[0];
      }
      v34[2].i64[0] = (uint64_t)v44;
      v34[2].i64[1] = (uint64_t)v37;
      v34[3].i64[0] = (uint64_t)&v43[8 * v42];
      if (v45)
        operator delete(v45);
    }
    else
    {
      *v35 = v5;
      v37 = v35 + 1;
    }
    v34[2].i64[1] = (uint64_t)v37;
    ++v3;
  }
  while (v3 != v4);
  v48 = (float32x4_t *)v180;
  if (!(_QWORD)v180)
    return sub_1DCB07D24((uint64_t)&v179);
  __asm { FMOV            V0.4S, #1.0 }
  v157 = _Q0;
  do
  {
    v159 = v48[1];
    v54 = v48[2].i64[0];
    if ((unint64_t)((v48[2].i64[1] - v54) >> 3) >= 0x40)
      v55 = 64;
    else
      v55 = (v48[2].i64[1] - v54) >> 3;
    v176 = 0;
    v177 = 0;
    v178 = 0;
    if (!v55)
    {
      v173 = &v173;
      v174 = &v173;
      v175 = 0;
      v170 = 0;
      v171 = 0;
      v172 = 0;
LABEL_189:
      v177 = v176;
      goto LABEL_190;
    }
    for (i = 0; i != v55; ++i)
    {
      v57 = sub_1DCB3FAA8((__n128 *)*(_QWORD *)(v48[2].i64[0] + 8 * i));
      v58 = (int32x4_t)vmulq_f32((float32x4_t)v57, (float32x4_t)v57);
      v59 = v177;
      if (vaddq_f32(vaddq_f32((float32x4_t)v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.i8, 1)), (float32x4_t)vdupq_laneq_s32(v58, 2)).f32[0] >= 1.0e-12)
      {
        if (v177 < v178)
        {
          *(_DWORD *)v177 = 0;
          v60 = v59 + 4;
          goto LABEL_63;
        }
        v62 = v176;
        v68 = (v177 - v176) >> 2;
        v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 62)
          sub_1DCAE4C44();
        v70 = v178 - v176;
        if ((v178 - v176) >> 1 > v69)
          v69 = v70 >> 1;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
          v66 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v66 = v69;
        if (v66)
        {
          v67 = (char *)sub_1DCAE4D04((uint64_t)&v178, v66);
          v62 = v176;
          v59 = v177;
        }
        else
        {
          v67 = 0;
        }
        v71 = &v67[4 * v68];
        *(_DWORD *)v71 = 0;
        v61 = v71 + 4;
        while (v59 != v62)
        {
          v73 = *((_DWORD *)v59 - 1);
          v59 -= 4;
          *((_DWORD *)v71 - 1) = v73;
          v71 -= 4;
        }
      }
      else
      {
        if (v177 < v178)
        {
          *(_DWORD *)v177 = -1;
          v60 = v59 + 4;
LABEL_63:
          v61 = v60;
          goto LABEL_90;
        }
        v62 = v176;
        v63 = (v177 - v176) >> 2;
        v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 62)
          sub_1DCAE4C44();
        v65 = v178 - v176;
        if ((v178 - v176) >> 1 > v64)
          v64 = v65 >> 1;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
          v66 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v66 = v64;
        if (v66)
        {
          v67 = (char *)sub_1DCAE4D04((uint64_t)&v178, v66);
          v62 = v176;
          v59 = v177;
        }
        else
        {
          v67 = 0;
        }
        v71 = &v67[4 * v63];
        *(_DWORD *)v71 = -1;
        v61 = v71 + 4;
        while (v59 != v62)
        {
          v72 = *((_DWORD *)v59 - 1);
          v59 -= 4;
          *((_DWORD *)v71 - 1) = v72;
          v71 -= 4;
        }
      }
      v176 = v71;
      v177 = v61;
      v178 = &v67[4 * v66];
      if (v62)
        operator delete(v62);
LABEL_90:
      v177 = v61;
    }
    v74 = 0;
    v75 = 1;
    do
    {
      if (!*(_DWORD *)&v176[4 * v74])
      {
        *(_QWORD *)&v167 = &v167;
        *((_QWORD *)&v167 + 1) = &v167;
        *(_QWORD *)&v168 = 0;
        v158 = sub_1DCB3FAA8((__n128 *)*(_QWORD *)(v48[2].i64[0] + 8 * v74));
        v76 = v48[2].i64[0];
        v77 = operator new(0x18uLL);
        v79 = 0;
        v80 = *(_QWORD *)(v76 + 8 * v74);
        v77[1] = &v167;
        v77[2] = v80;
        v81 = v167;
        *v77 = v167;
        *(_QWORD *)(v81 + 8) = v77;
        *(_QWORD *)&v167 = v77;
        *(_QWORD *)&v168 = v168 + 1;
        *(_DWORD *)&v176[4 * v74] = v75;
        do
        {
          if (!*(_DWORD *)&v176[4 * v79])
          {
            v160 = sub_1DCB3FAA8((__n128 *)*(_QWORD *)(v48[2].i64[0] + 8 * v79));
            v78 = (__n128)vmulq_f32((float32x4_t)sub_1DCB3FAA8((__n128 *)*(_QWORD *)(v48[2].i64[0] + 8 * v74)), (float32x4_t)v160);
            v78.n128_u64[0] = vaddq_f32(vaddq_f32((float32x4_t)v78, (float32x4_t)vdupq_lane_s32((int32x2_t)v78.n128_u64[0], 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2)).u64[0];
            if (v78.n128_f32[0] > a2)
            {
              v82 = v48[2].i64[0];
              v83 = operator new(0x18uLL);
              v84 = *(_QWORD *)(v82 + 8 * v79);
              v83[1] = &v167;
              v83[2] = v84;
              v85 = v167;
              *v83 = v167;
              *(_QWORD *)(v85 + 8) = v83;
              *(_QWORD *)&v167 = v83;
              *(_QWORD *)&v168 = v168 + 1;
              v78 = sub_1DCB3FAA8((__n128 *)*(_QWORD *)(v48[2].i64[0] + 8 * v79));
              v158 = (__n128)vaddq_f32((float32x4_t)v78, (float32x4_t)v158);
              *(_DWORD *)&v176[4 * v79] = v75;
            }
          }
          ++v79;
        }
        while (v55 != v79);
        v86 = *((_QWORD *)&v167 + 1);
        if (*((__int128 **)&v167 + 1) != &v167)
        {
          v78.n128_f32[0] = (float)(unint64_t)v168;
          v87 = vmulq_f32((float32x4_t)v158, vdivq_f32(v157, (float32x4_t)vdupq_lane_s32((int32x2_t)v78.n128_u64[0], 0)));
          do
          {
            v88 = *(float32x4_t **)(v86 + 16);
            v89 = vsubq_f32(v88[4], v159);
            v90 = (int32x4_t)vmulq_f32(v89, v89);
            if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v90, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v90.i8, 1)), (float32x4_t)vdupq_laneq_s32(v90, 2)).f32[0]) >= 0.000001)
            {
              v92 = vsubq_f32(v88[5], v159);
              v93 = (int32x4_t)vmulq_f32(v92, v92);
              if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v93, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v93.i8, 1)), (float32x4_t)vdupq_laneq_s32(v93, 2)).f32[0]) >= 0.000001)v91 = v88 + 9;
              else
                v91 = v88 + 8;
            }
            else
            {
              v91 = v88 + 7;
            }
            *v91 = v87;
            v86 = *(_QWORD *)(v86 + 8);
          }
          while ((__int128 *)v86 != &v167);
        }
        ++v75;
        sub_1DCB032E4(&v167);
        sub_1DCB032E4(&v167);
      }
      ++v74;
    }
    while (v74 != v55);
    v173 = &v173;
    v174 = &v173;
    v175 = 0;
    v170 = 0;
    v171 = 0;
    v172 = 0;
    for (j = 0; j != v55; ++j)
    {
      if (*(_DWORD *)&v176[4 * j] == -1)
      {
        v95 = v48[2].i64[0];
        v96 = operator new(0x18uLL);
        v97 = *(_QWORD *)(v95 + 8 * j);
        v96[1] = &v173;
        v96[2] = v97;
        v98 = v173;
        *v96 = v173;
        v98[1] = v96;
        v173 = v96;
        ++v175;
      }
      LOBYTE(v167) = 0;
      sub_1DCB18668((uint64_t)&v170, &v167);
    }
    if (v175 == v55)
      goto LABEL_189;
    v167 = 0u;
    v168 = 0u;
    v169 = 1065353216;
    for (k = 0; k != v55; ++k)
    {
      __p = 0;
      v165 = 0;
      v166 = 0;
      v100 = *(_QWORD *)(v48[2].i64[0] + 8 * k);
      v102 = (char *)sub_1DCAFBD5C((uint64_t)&v166, 1uLL);
      *(_OWORD *)v102 = *(_OWORD *)(v100 + 64);
      v103 = v102 + 16;
      v105 = (char *)__p;
      v104 = v165;
      v106 = v102;
      if (v165 != __p)
      {
        do
        {
          v107 = *((_OWORD *)v104 - 1);
          v104 -= 16;
          *((_OWORD *)v106 - 1) = v107;
          v106 -= 16;
        }
        while (v104 != v105);
        v104 = (char *)__p;
      }
      v108 = &v102[16 * v101];
      __p = v106;
      v165 = v102 + 16;
      v166 = v108;
      if (v104)
      {
        operator delete(v104);
        v108 = v166;
      }
      v165 = v102 + 16;
      v109 = *(_QWORD *)(v48[2].i64[0] + 8 * k);
      if (v103 >= v108)
      {
        v111 = (v103 - (_BYTE *)__p) >> 4;
        if ((unint64_t)(v111 + 1) >> 60)
          goto LABEL_200;
        v112 = v108 - (_BYTE *)__p;
        v113 = v112 >> 3;
        if (v112 >> 3 <= (unint64_t)(v111 + 1))
          v113 = v111 + 1;
        if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF0)
          v114 = 0xFFFFFFFFFFFFFFFLL;
        else
          v114 = v113;
        if (v114)
          v115 = (char *)sub_1DCAFBD5C((uint64_t)&v166, v114);
        else
          v115 = 0;
        v116 = &v115[16 * v111];
        *(_OWORD *)v116 = *(_OWORD *)(v109 + 80);
        v110 = v116 + 16;
        v118 = (char *)__p;
        v117 = v165;
        if (v165 != __p)
        {
          do
          {
            v119 = *((_OWORD *)v117 - 1);
            v117 -= 16;
            *((_OWORD *)v116 - 1) = v119;
            v116 -= 16;
          }
          while (v117 != v118);
          v117 = (char *)__p;
        }
        __p = v116;
        v165 = v110;
        v166 = &v115[16 * v114];
        if (v117)
          operator delete(v117);
      }
      else
      {
        *((_OWORD *)v102 + 1) = *(_OWORD *)(v109 + 80);
        v110 = v102 + 32;
      }
      v165 = v110;
      v120 = *(_QWORD *)(v48[2].i64[0] + 8 * k);
      if (v110 >= v166)
      {
        v122 = (v110 - (_BYTE *)__p) >> 4;
        if ((unint64_t)(v122 + 1) >> 60)
LABEL_200:
          sub_1DCAE4C44();
        v123 = (v166 - (_BYTE *)__p) >> 3;
        if (v123 <= v122 + 1)
          v123 = v122 + 1;
        if ((unint64_t)(v166 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
          v124 = 0xFFFFFFFFFFFFFFFLL;
        else
          v124 = v123;
        if (v124)
          v125 = (char *)sub_1DCAFBD5C((uint64_t)&v166, v124);
        else
          v125 = 0;
        v126 = &v125[16 * v122];
        *(_OWORD *)v126 = *(_OWORD *)(v120 + 96);
        v121 = v126 + 16;
        v128 = (char *)__p;
        v127 = v165;
        if (v165 != __p)
        {
          do
          {
            v129 = *((_OWORD *)v127 - 1);
            v127 -= 16;
            *((_OWORD *)v126 - 1) = v129;
            v126 -= 16;
          }
          while (v127 != v128);
          v127 = (char *)__p;
        }
        __p = v126;
        v165 = v121;
        v166 = &v125[16 * v124];
        if (v127)
          operator delete(v127);
      }
      else
      {
        *(_OWORD *)v110 = *(_OWORD *)(v120 + 96);
        v121 = v110 + 16;
      }
      v130 = 0;
      v165 = v121;
      do
      {
        if (sub_1DCB04700(&v167, (float32x4_t *)__p + v130))
        {
          v161 = (char *)__p + 16 * v130;
          v131 = sub_1DCB07DA0((uint64_t)&v167, (float32x4_t *)v161, (uint64_t)&unk_1DCC58300, (float32x4_t **)&v161);
          v132 = v48[2].i64[0];
          v133 = (_QWORD *)v131[2].i64[1];
          v134 = v131[3].u64[0];
          if ((unint64_t)v133 >= v134)
          {
            v145 = v131[2].i64[0];
            v146 = ((uint64_t)v133 - v145) >> 3;
            if ((unint64_t)(v146 + 1) >> 61)
              sub_1DCAE4C44();
            v147 = v134 - v145;
            v148 = v147 >> 2;
            if (v147 >> 2 <= (unint64_t)(v146 + 1))
              v148 = v146 + 1;
            if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8)
              v149 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v149 = v148;
            if (v149)
              v150 = (char *)sub_1DCAE79A4((uint64_t)&v131[3], v149);
            else
              v150 = 0;
            v151 = &v150[8 * v146];
            *(_QWORD *)v151 = *(_QWORD *)(v132 + 8 * k);
            v135 = v151 + 8;
            v153 = (char *)v131[2].i64[0];
            v152 = (char *)v131[2].i64[1];
            if (v152 != v153)
            {
              do
              {
                v154 = *((_QWORD *)v152 - 1);
                v152 -= 8;
                *((_QWORD *)v151 - 1) = v154;
                v151 -= 8;
              }
              while (v152 != v153);
              v152 = (char *)v131[2].i64[0];
            }
            v131[2].i64[0] = (uint64_t)v151;
            v131[2].i64[1] = (uint64_t)v135;
            v131[3].i64[0] = (uint64_t)&v150[8 * v149];
            if (v152)
              operator delete(v152);
          }
          else
          {
            *v133 = *(_QWORD *)(v132 + 8 * k);
            v135 = v133 + 1;
          }
          v131[2].i64[1] = (uint64_t)v135;
        }
        else
        {
          v161 = 0;
          v162 = 0;
          v163 = 0;
          v136 = v48[2].i64[0];
          v137 = (char *)sub_1DCAE79A4((uint64_t)&v163, 1uLL);
          *(_QWORD *)v137 = *(_QWORD *)(v136 + 8 * k);
          v139 = v137 + 8;
          v141 = (char *)v161;
          v140 = v162;
          v142 = v137;
          if (v162 != v161)
          {
            do
            {
              v143 = *((_QWORD *)v140 - 1);
              v140 -= 8;
              *((_QWORD *)v142 - 1) = v143;
              v142 -= 8;
            }
            while (v140 != v141);
            v140 = (char *)v161;
          }
          v161 = v142;
          v162 = v137 + 8;
          v163 = &v137[8 * v138];
          if (v140)
            operator delete(v140);
          v162 = v139;
          v182 = (float32x4_t *)((char *)__p + 16 * v130);
          v144 = sub_1DCB07DA0((uint64_t)&v167, v182, (uint64_t)&unk_1DCC58300, &v182) + 2;
          if (v144 != (float32x4_t *)&v161)
            sub_1DCBB25B0((char *)v144, (char *)v161, (uint64_t)v162, (v162 - (_BYTE *)v161) >> 3);
          if (v161)
          {
            v162 = (char *)v161;
            operator delete(v161);
          }
        }
        ++v130;
      }
      while (v130 != 3);
      if (__p)
      {
        v165 = (char *)__p;
        operator delete(__p);
      }
    }
    while (v175)
    {
      v155 = v174[2];
      __p = 0;
      v165 = 0;
      v166 = 0;
      sub_1DCBF43E8(v155, (uint64_t)&v173, (uint64_t)&v167, (char **)&__p, v55, v159);
      if (__p)
      {
        v165 = (char *)__p;
        operator delete(__p);
      }
    }
    v177 = v176;
    sub_1DCB07D24((uint64_t)&v167);
LABEL_190:
    if (v170)
      operator delete(v170);
    sub_1DCB032E4(&v173);
    if (v176)
    {
      v177 = v176;
      operator delete(v176);
    }
    v48 = (float32x4_t *)v48->i64[0];
  }
  while (v48);
  return sub_1DCB07D24((uint64_t)&v179);
}

void sub_1DCBF432C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  void *v37;

  if (__p)
    operator delete(__p);
  sub_1DCB07D24((uint64_t)&a27);
  if (a32)
    operator delete(a32);
  sub_1DCB032E4(&a35);
  v37 = *(void **)(v35 - 200);
  if (v37)
  {
    *(_QWORD *)(v35 - 192) = v37;
    operator delete(v37);
  }
  sub_1DCB07D24(v35 - 176);
  _Unwind_Resume(a1);
}

void sub_1DCBF43E8(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, uint64_t a5, float32x4_t a6)
{
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  float v13;
  _OWORD *v14;
  float32x4_t v15;
  float32x4_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  _BOOL4 v20;
  float32x4_t v21;
  int32x4_t v22;
  float v23;
  int32x4_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x4_t *v32;
  _BYTE *v33;
  uint64_t v34;
  unint64_t v35;
  _OWORD *v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  float32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  float32x4_t v56;
  int32x4_t v57;
  float32x4_t *v58;
  uint64_t v59;
  unint64_t v60;
  _OWORD *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int32x4_t v77;
  float32x4_t *v78;
  float32x4_t *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  float32x4_t v85;
  int32x4_t v86;
  float32x4_t *v87;
  uint64_t v88;
  unint64_t v89;
  _OWORD *v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  float32x4_t *v99;
  float32x4_t *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  int32x4_t v106;
  _OWORD *v107;
  _OWORD *v108;
  float32x4_t *v109;
  void *__p;
  _BYTE *v112;
  uint64_t v113;
  float32x4_t v114;
  float32x4_t v115;
  _OWORD *v116;
  float32x4_t *v117;

  v10 = *(float32x4_t *)(a1 + 64);
  v11 = vsubq_f32(v10, a6);
  v12 = (int32x4_t)vmulq_f32(v11, v11);
  v116 = (_OWORD *)a1;
  v13 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.i8, 1)), (float32x4_t)vdupq_laneq_s32(v12, 2)).f32[0]);
  if (v13 < 0.000001)
  {
    v14 = (_OWORD *)(a1 + 112);
    v15 = *(float32x4_t *)(a1 + 80);
    v16 = *(float32x4_t *)(a1 + 96);
    v114 = v15;
    v115 = v16;
    v18 = a4 + 1;
    v17 = a4[1];
    v19 = (v17 - *a4) >> 3;
    if (v19 != (int)a5)
    {
      v20 = 0;
      goto LABEL_10;
    }
LABEL_25:
    *v14 = xmmword_1DCC583A0;
    sub_1DCB9DCDC(a2, &v116);
    return;
  }
  v15 = *(float32x4_t *)(a1 + 80);
  v21 = vsubq_f32(v15, a6);
  v22 = (int32x4_t)vmulq_f32(v21, v21);
  v23 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1)), (float32x4_t)vdupq_laneq_s32(v22, 2)).f32[0]);
  v20 = v23 < 0.000001;
  if (v23 < 0.000001)
    v16 = *(float32x4_t *)(a1 + 96);
  else
    v16 = *(float32x4_t *)(a1 + 80);
  v114 = v10;
  v115 = v16;
  v18 = a4 + 1;
  v17 = a4[1];
  v19 = (v17 - *a4) >> 3;
  if (v19 == (int)a5)
  {
    if (v23 >= 0.000001)
      v14 = (_OWORD *)(a1 + 144);
    else
      v14 = (_OWORD *)(a1 + 128);
    goto LABEL_25;
  }
LABEL_10:
  v24 = (int32x4_t)vmulq_f32(*(float32x4_t *)(a1 + 192), *(float32x4_t *)(a1 + 192));
  if (vaddq_f32(vaddq_f32((float32x4_t)v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1)), (float32x4_t)vdupq_laneq_s32(v24, 2)).f32[0] > 1.0e-12)return;
  if (!v19)
  {
    if (v13 >= 0.000001)
    {
      if (v20)
      {
        v44 = vsubq_f32(v15, v10);
        v45 = (int32x4_t)vmulq_f32(v44, v44);
        v46 = vsubq_f32(v15, *(float32x4_t *)(a1 + 96));
        v47 = (int32x4_t)vmulq_f32(v46, v46);
        if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.i8, 1)), (float32x4_t)vdupq_laneq_s32(v45, 2)).f32[0]) > sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.i8, 1)), (float32x4_t)vdupq_laneq_s32(v47, 2)).f32[0]))
        {
          v114 = *(float32x4_t *)(a1 + 96);
          v115 = v10;
        }
      }
      else
      {
        v53 = *(float32x4_t *)(a1 + 96);
        v54 = vsubq_f32(v53, v10);
        v55 = (int32x4_t)vmulq_f32(v54, v54);
        v56 = vsubq_f32(v53, v15);
        v57 = (int32x4_t)vmulq_f32(v56, v56);
        if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.i8, 1)), (float32x4_t)vdupq_laneq_s32(v55, 2)).f32[0]) > sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.i8, 1)), (float32x4_t)vdupq_laneq_s32(v57, 2)).f32[0]))
        {
          v114 = v15;
          v115 = v10;
        }
      }
    }
    else
    {
      v37 = vsubq_f32(v10, v15);
      v38 = (int32x4_t)vmulq_f32(v37, v37);
      v39 = vsubq_f32(v10, *(float32x4_t *)(a1 + 96));
      v40 = (int32x4_t)vmulq_f32(v39, v39);
      if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.i8, 1)), (float32x4_t)vdupq_laneq_s32(v38, 2)).f32[0]) > sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.i8, 1)), (float32x4_t)vdupq_laneq_s32(v40, 2)).f32[0]))
      {
        v114 = *(float32x4_t *)(a1 + 96);
        v115 = v15;
      }
    }
    v117 = &v115;
    v58 = sub_1DCB07DA0(a3, &v115, (uint64_t)&unk_1DCC58300, &v117);
    v112 = 0;
    v113 = 0;
    __p = 0;
    sub_1DCB3FDF0(&__p, (const void *)v58[2].i64[0], v58[2].i64[1], (v58[2].i64[1] - v58[2].i64[0]) >> 3);
    if (v112 == __p)
      goto LABEL_82;
    v59 = 0;
    v60 = (v112 - (_BYTE *)__p) >> 3;
    v61 = v116;
    if (v60 <= 1)
      v60 = 1;
    while (*((_OWORD **)__p + v59) == v116)
    {
      if (v60 == ++v59)
        goto LABEL_82;
    }
    v62 = (unint64_t)a4[2];
    v63 = a4[1];
    if ((unint64_t)v63 >= v62)
    {
      v65 = (v63 - *a4) >> 3;
      if ((unint64_t)(v65 + 1) >> 61)
        sub_1DCAE4C44();
      v66 = v62 - (_QWORD)*a4;
      v67 = v66 >> 2;
      if (v66 >> 2 <= (unint64_t)(v65 + 1))
        v67 = v65 + 1;
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
        v68 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v68 = v67;
      if (v68)
      {
        v69 = (char *)sub_1DCAE79A4((uint64_t)(a4 + 2), v68);
        v61 = v116;
      }
      else
      {
        v69 = 0;
      }
      v80 = &v69[8 * v65];
      v81 = &v69[8 * v68];
      *(_QWORD *)v80 = v61;
      v64 = v80 + 8;
      v83 = *a4;
      v82 = a4[1];
      if (v82 != *a4)
      {
        do
        {
          v84 = *((_QWORD *)v82 - 1);
          v82 -= 8;
          *((_QWORD *)v80 - 1) = v84;
          v80 -= 8;
        }
        while (v82 != v83);
        v82 = *a4;
      }
      *a4 = v80;
      a4[1] = v64;
      a4[2] = v81;
      if (v82)
        operator delete(v82);
    }
    else
    {
      *(_QWORD *)v63 = v116;
      v64 = v63 + 8;
    }
    a4[1] = v64;
    *(double *)v85.i64 = sub_1DCBF43E8(*((_QWORD *)__p + v59), a2, a3, a4, a5, (__n128)a6);
    v86 = (int32x4_t)vmulq_f32(v85, v85);
    *v18 -= 8;
    if (vaddq_f32(vaddq_f32((float32x4_t)v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.i8, 1)), (float32x4_t)vdupq_laneq_s32(v86, 2)).f32[0] == 0.0)
    {
LABEL_82:
      v117 = &v114;
      v87 = sub_1DCB07DA0(a3, &v114, (uint64_t)&unk_1DCC58300, &v117);
      if (&__p != (void **)&v87[2])
        sub_1DCBB25B0((char *)&__p, (char *)v87[2].i64[0], v87[2].i64[1], (v87[2].i64[1] - v87[2].i64[0]) >> 3);
      if (v112 == __p)
        goto LABEL_112;
      v88 = 0;
      v89 = (v112 - (_BYTE *)__p) >> 3;
      v90 = v116;
      if (v89 <= 1)
        v89 = 1;
      while (*((_OWORD **)__p + v88) == v116)
      {
        if (v89 == ++v88)
          goto LABEL_112;
      }
      v91 = (unint64_t)a4[2];
      v92 = a4[1];
      if ((unint64_t)v92 >= v91)
      {
        v94 = (v92 - *a4) >> 3;
        if ((unint64_t)(v94 + 1) >> 61)
          sub_1DCAE4C44();
        v95 = v91 - (_QWORD)*a4;
        v96 = v95 >> 2;
        if (v95 >> 2 <= (unint64_t)(v94 + 1))
          v96 = v94 + 1;
        if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
          v97 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v97 = v96;
        if (v97)
        {
          v98 = (char *)sub_1DCAE79A4((uint64_t)(a4 + 2), v97);
          v90 = v116;
        }
        else
        {
          v98 = 0;
        }
        v101 = &v98[8 * v94];
        v102 = &v98[8 * v97];
        *(_QWORD *)v101 = v90;
        v93 = v101 + 8;
        v104 = *a4;
        v103 = a4[1];
        if (v103 != *a4)
        {
          do
          {
            v105 = *((_QWORD *)v103 - 1);
            v103 -= 8;
            *((_QWORD *)v101 - 1) = v105;
            v101 -= 8;
          }
          while (v103 != v104);
          v103 = *a4;
        }
        *a4 = v101;
        a4[1] = v93;
        a4[2] = v102;
        if (v103)
          operator delete(v103);
      }
      else
      {
        *(_QWORD *)v92 = v116;
        v93 = v92 + 8;
      }
      a4[1] = v93;
      *(double *)v85.i64 = sub_1DCBF43E8(*((_QWORD *)__p + v88), a2, a3, a4, a5, (__n128)a6);
      v106 = (int32x4_t)vmulq_f32(v85, v85);
      *v18 -= 8;
      if (vaddq_f32(vaddq_f32((float32x4_t)v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.i8, 1)), (float32x4_t)vdupq_laneq_s32(v106, 2)).f32[0] == 0.0)
      {
LABEL_112:
        v107 = v116 + 9;
        if (v20)
          v107 = v116 + 8;
        v108 = v116 + 7;
        if (v13 >= 0.000001)
          v108 = v107;
        *v108 = xmmword_1DCC583A0;
        sub_1DCB9DCDC(a2, &v116);
        goto LABEL_117;
      }
      v109 = (float32x4_t *)(v116 + 9);
      if (v20)
        v109 = (float32x4_t *)(v116 + 8);
      v100 = (float32x4_t *)(v116 + 7);
      if (v13 >= 0.000001)
        v100 = v109;
    }
    else
    {
      v99 = (float32x4_t *)(v116 + 9);
      if (v20)
        v99 = (float32x4_t *)(v116 + 8);
      v100 = (float32x4_t *)(v116 + 7);
      if (v13 >= 0.000001)
        v100 = v99;
    }
    *v100 = v85;
    sub_1DCB9DCDC(a2, &v116);
    goto LABEL_117;
  }
  v25 = (float32x4_t *)*((_QWORD *)v17 - 1);
  __p = 0;
  v112 = 0;
  v113 = 0;
  v26 = vsubq_f32(v25[4], v16);
  v27 = (int32x4_t)vmulq_f32(v26, v26);
  if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.i8, 1)), (float32x4_t)vdupq_laneq_s32(v27, 2)).f32[0]) >= 0.000001&& (v28 = vsubq_f32(v25[5], v16), v29 = (int32x4_t)vmulq_f32(v28, v28), sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.i8, 1)), (float32x4_t)vdupq_laneq_s32(v29, 2)).f32[0]) >= 0.000001)&& (v30 = vsubq_f32(v25[6], v16), v31 = (int32x4_t)vmulq_f32(v30, v30), sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.i8, 1)), (float32x4_t)vdupq_laneq_s32(v31, 2)).f32[0]) >= 0.000001))
  {
    v117 = &v115;
    v32 = sub_1DCB07DA0(a3, &v115, (uint64_t)&unk_1DCC58300, &v117);
  }
  else
  {
    v117 = &v114;
    v32 = sub_1DCB07DA0(a3, &v114, (uint64_t)&unk_1DCC58300, &v117);
  }
  if (&__p != (void **)&v32[2])
    sub_1DCBB25B0((char *)&__p, (char *)v32[2].i64[0], v32[2].i64[1], (v32[2].i64[1] - v32[2].i64[0]) >> 3);
  v33 = __p;
  if (v112 != __p)
  {
    v34 = 0;
    v35 = (v112 - (_BYTE *)__p) >> 3;
    v36 = v116;
    if (v35 <= 1)
      v35 = 1;
    while (*((_OWORD **)__p + v34) == v116)
    {
      if (v35 == ++v34)
        goto LABEL_117;
    }
    v41 = (unint64_t)a4[2];
    v42 = a4[1];
    if ((unint64_t)v42 >= v41)
    {
      v48 = (v42 - *a4) >> 3;
      if ((unint64_t)(v48 + 1) >> 61)
        sub_1DCAE4C44();
      v49 = v41 - (_QWORD)*a4;
      v50 = v49 >> 2;
      if (v49 >> 2 <= (unint64_t)(v48 + 1))
        v50 = v48 + 1;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
        v51 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v51 = v50;
      if (v51)
      {
        v52 = (char *)sub_1DCAE79A4((uint64_t)(a4 + 2), v51);
        v36 = v116;
      }
      else
      {
        v52 = 0;
      }
      v70 = &v52[8 * v48];
      v71 = &v52[8 * v51];
      *(_QWORD *)v70 = v36;
      v43 = v70 + 8;
      v73 = *a4;
      v72 = a4[1];
      if (v72 != *a4)
      {
        do
        {
          v74 = *((_QWORD *)v72 - 1);
          v72 -= 8;
          *((_QWORD *)v70 - 1) = v74;
          v70 -= 8;
        }
        while (v72 != v73);
        v72 = *a4;
      }
      *a4 = v70;
      a4[1] = v43;
      a4[2] = v71;
      if (v72)
        operator delete(v72);
    }
    else
    {
      *(_QWORD *)v42 = v116;
      v43 = v42 + 8;
    }
    a4[1] = v43;
    *(double *)v75.i64 = sub_1DCBF43E8(*((_QWORD *)__p + v34), a2, a3, a4, a5, (__n128)a6);
    v76 = v75;
    *v18 -= 8;
    v77 = (int32x4_t)vmulq_f32(v75, v75);
    if (vaddq_f32(vaddq_f32((float32x4_t)v77, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.i8, 1)), (float32x4_t)vdupq_laneq_s32(v77, 2)).f32[0] != 0.0)
    {
      v78 = (float32x4_t *)(v116 + 9);
      if (v20)
        v78 = (float32x4_t *)(v116 + 8);
      v79 = (float32x4_t *)(v116 + 7);
      if (v13 >= 0.000001)
        v79 = v78;
      *v79 = v76;
      sub_1DCB9DCDC(a2, &v116);
    }
LABEL_117:
    v33 = __p;
    if (!__p)
      return;
    goto LABEL_118;
  }
  if (!__p)
    return;
LABEL_118:
  v112 = v33;
  operator delete(v33);
}

void sub_1DCBF4CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1DCBF4ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCBF4F18(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, __n128 a10)
{
  float v10;
  unint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  float v35;
  float v36;
  float32x2_t v37;
  float32x2_t v38;
  uint64_t v39;
  float32x4_t **v40;
  float32x4_t **v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  float32x4_t **v46;
  float32x4_t **v47;
  float32x4_t **v48;
  float32x4_t *v49;
  float32x4_t **v50;
  float32x4_t **v51;
  int *v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  float32x4_t v56;
  float32x4_t v57;
  __n128 v59;
  unsigned __int32 v60;
  float32x4_t v61;
  __int32 v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t **v66;
  float32x4_t **v67;
  float32x4_t **v68;

  v10 = a7.f32[0];
  v66 = 0;
  v67 = 0;
  v68 = 0;
  if (a2)
  {
    v16 = 0;
    a7.i32[0] = 897988541;
    v57 = a7;
    v17 = (float32x4_t)vdupq_n_s32(0x49742400u);
    v56 = v17;
    do
    {
      v18 = *(unsigned __int8 *)(a1 + v16);
      v19 = *(unsigned __int8 *)(a1 + v16 + 1);
      v20 = *(unsigned __int8 *)(a1 + v16 + 2);
      v21 = a3 + v18 * a4;
      v17.i64[0] = *(_QWORD *)v21;
      v64 = v17;
      v62 = *(_DWORD *)(v21 + 8);
      v17.i32[2] = v62;
      v22 = a3 + v19 * a4;
      a8.i64[0] = *(_QWORD *)v22;
      v63 = a8;
      v60 = *(_DWORD *)(v22 + 8);
      a8.i32[2] = v60;
      v23 = a3 + v20 * a4;
      a9.i64[0] = *(_QWORD *)v23;
      a10.n128_u32[0] = *(_DWORD *)(v23 + 8);
      v61 = a9;
      v59 = a10;
      a9.i32[2] = a10.n128_u32[0];
      v24 = vsubq_f32(a8, v17);
      v25 = (int32x4_t)vmulq_f32(v24, v24);
      v26 = vsubq_f32(a9, a8);
      v27 = vaddq_f32(vaddq_f32((float32x4_t)v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.i8, 1)), (float32x4_t)vdupq_laneq_s32(v25, 2));
      v28 = (int32x4_t)vmulq_f32(v26, v26);
      v29 = vaddq_f32(vaddq_f32((float32x4_t)v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.i8, 1)), (float32x4_t)vdupq_laneq_s32(v28, 2));
      if ((vmovn_s32(vcgtq_f32(v29, v27)).u8[0] & 1) == 0)
        v27.f32[0] = v29.f32[0];
      v30 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v57, v27), 0);
      v31 = (int32x4_t)vbslq_s8(v30, (int8x16_t)vmulq_f32(v26, v56), (int8x16_t)v26);
      v32 = (int32x4_t)vbslq_s8(v30, (int8x16_t)vmulq_f32(v24, v56), (int8x16_t)v24);
      v33 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v32, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v31, v31), (int8x16_t)v31, 0xCuLL))), (float32x4_t)v31, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v32, v32), (int8x16_t)v32, 0xCuLL));
      v34 = (int32x4_t)vmulq_f32((float32x4_t)v33, (float32x4_t)v33);
      v35 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v34, 2), (float32x4_t)v34), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.i8, 1)).f32[0];
      v65 = 0u;
      if (v35 > COERCE_FLOAT(512))
      {
        v36 = v35;
        v37 = vrsqrte_f32((float32x2_t)LODWORD(v35));
        v38 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v36), vmul_f32(v37, v37)), v37);
        v65 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL), vmul_f32(v38, vrsqrts_f32((float32x2_t)LODWORD(v36), vmul_f32(v38, v38))).f32[0]);
      }
      v39 = operator new();
      sub_1DCB3F434((_QWORD *)v39);
      v17 = v64;
      v17.i32[2] = v62;
      a8 = v63;
      a10 = v59;
      a8.i32[2] = v60;
      a9 = v61;
      a9.i32[2] = v59.n128_u32[0];
      *(float32x4_t *)(v39 + 64) = v17;
      *(float32x4_t *)(v39 + 80) = a8;
      *(float32x4_t *)(v39 + 96) = a9;
      *(_DWORD *)v39 = v18;
      *(_DWORD *)(v39 + 4) = v19;
      *(_DWORD *)(v39 + 8) = v20;
      v17.i64[1] = v65.i64[1];
      *(float32x4_t *)(v39 + 192) = v65;
      v40 = v67;
      if (v67 >= v68)
      {
        v42 = v67 - v66;
        if ((unint64_t)(v42 + 1) >> 61)
          sub_1DCAE4C44();
        v43 = ((char *)v68 - (char *)v66) >> 2;
        if (v43 <= v42 + 1)
          v43 = v42 + 1;
        if ((unint64_t)((char *)v68 - (char *)v66) >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
          v45 = (char *)sub_1DCAE79A4((uint64_t)&v68, v44);
        else
          v45 = 0;
        v46 = (float32x4_t **)&v45[8 * v42];
        *v46 = (float32x4_t *)v39;
        v41 = v46 + 1;
        v48 = v66;
        v47 = v67;
        if (v67 != v66)
        {
          do
          {
            v49 = *--v47;
            *--v46 = v49;
          }
          while (v47 != v48);
          v47 = v66;
        }
        v66 = v46;
        v67 = v41;
        v68 = (float32x4_t **)&v45[8 * v44];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *v67 = (float32x4_t *)v39;
        v41 = v40 + 1;
      }
      v67 = v41;
      v16 += 3;
    }
    while (v16 < a2);
  }
  sub_1DCBF3754(&v66, v10);
  v50 = v66;
  v51 = v67;
  if (v66 != v67)
  {
    do
    {
      v52 = (int *)*v50++;
      v53 = (_DWORD *)(a5 + *v52 * a6);
      *v53 = v52[28];
      v53[1] = v52[29];
      v53[2] = v52[30];
      v54 = (_DWORD *)(a5 + v52[1] * a6);
      *v54 = v52[32];
      v54[1] = v52[33];
      v54[2] = v52[34];
      v55 = (_DWORD *)(a5 + v52[2] * a6);
      *v55 = v52[36];
      v55[1] = v52[37];
      v55[2] = v52[38];
      MEMORY[0x1DF0D228C]();
    }
    while (v50 != v51);
    v50 = v66;
  }
  if (v50)
  {
    v67 = v50;
    operator delete(v50);
  }
}

void sub_1DCBF52B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(_QWORD *)(v1 - 120) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DCBF52F4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, __n128 a10)
{
  float v10;
  unint64_t v16;
  float32x4_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  float v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  uint64_t v40;
  float32x4_t **v41;
  float32x4_t **v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  float32x4_t **v47;
  float32x4_t **v48;
  float32x4_t **v49;
  float32x4_t *v50;
  float32x4_t **v51;
  float32x4_t **v52;
  int *v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  float32x4_t v57;
  float32x4_t v58;
  __n128 v60;
  unsigned __int32 v61;
  float32x4_t v62;
  __int32 v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t **v67;
  float32x4_t **v68;
  float32x4_t **v69;

  v10 = a7.f32[0];
  v67 = 0;
  v68 = 0;
  v69 = 0;
  if (a2)
  {
    v16 = 0;
    a7.i32[0] = 897988541;
    v58 = a7;
    v17 = (float32x4_t)vdupq_n_s32(0x49742400u);
    v57 = v17;
    do
    {
      v18 = (unsigned __int16 *)(a1 + 2 * v16);
      v19 = *v18;
      v20 = v18[1];
      v21 = v18[2];
      v22 = a3 + v19 * a4;
      v17.i64[0] = *(_QWORD *)v22;
      v65 = v17;
      v63 = *(_DWORD *)(v22 + 8);
      v17.i32[2] = v63;
      v23 = a3 + v20 * a4;
      a8.i64[0] = *(_QWORD *)v23;
      v64 = a8;
      v61 = *(_DWORD *)(v23 + 8);
      a8.i32[2] = v61;
      v24 = a3 + v21 * a4;
      a9.i64[0] = *(_QWORD *)v24;
      a10.n128_u32[0] = *(_DWORD *)(v24 + 8);
      v62 = a9;
      v60 = a10;
      a9.i32[2] = a10.n128_u32[0];
      v25 = vsubq_f32(a8, v17);
      v26 = (int32x4_t)vmulq_f32(v25, v25);
      v27 = vsubq_f32(a9, a8);
      v28 = vaddq_f32(vaddq_f32((float32x4_t)v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 1)), (float32x4_t)vdupq_laneq_s32(v26, 2));
      v29 = (int32x4_t)vmulq_f32(v27, v27);
      v30 = vaddq_f32(vaddq_f32((float32x4_t)v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.i8, 1)), (float32x4_t)vdupq_laneq_s32(v29, 2));
      if ((vmovn_s32(vcgtq_f32(v30, v28)).u8[0] & 1) == 0)
        v28.f32[0] = v30.f32[0];
      v31 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v58, v28), 0);
      v32 = (int32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_f32(v27, v57), (int8x16_t)v27);
      v33 = (int32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_f32(v25, v57), (int8x16_t)v25);
      v34 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v33, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v32, v32), (int8x16_t)v32, 0xCuLL))), (float32x4_t)v32, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL));
      v35 = (int32x4_t)vmulq_f32((float32x4_t)v34, (float32x4_t)v34);
      v36 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v35, 2), (float32x4_t)v35), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.i8, 1)).f32[0];
      v66 = 0u;
      if (v36 > COERCE_FLOAT(512))
      {
        v37 = v36;
        v38 = vrsqrte_f32((float32x2_t)LODWORD(v36));
        v39 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v37), vmul_f32(v38, v38)), v38);
        v66 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL), vmul_f32(v39, vrsqrts_f32((float32x2_t)LODWORD(v37), vmul_f32(v39, v39))).f32[0]);
      }
      v40 = operator new();
      sub_1DCB3F434((_QWORD *)v40);
      v17 = v65;
      v17.i32[2] = v63;
      a8 = v64;
      a10 = v60;
      a8.i32[2] = v61;
      a9 = v62;
      a9.i32[2] = v60.n128_u32[0];
      *(float32x4_t *)(v40 + 64) = v17;
      *(float32x4_t *)(v40 + 80) = a8;
      *(float32x4_t *)(v40 + 96) = a9;
      *(_DWORD *)v40 = v19;
      *(_DWORD *)(v40 + 4) = v20;
      *(_DWORD *)(v40 + 8) = v21;
      v17.i64[1] = v66.i64[1];
      *(float32x4_t *)(v40 + 192) = v66;
      v41 = v68;
      if (v68 >= v69)
      {
        v43 = v68 - v67;
        if ((unint64_t)(v43 + 1) >> 61)
          sub_1DCAE4C44();
        v44 = ((char *)v69 - (char *)v67) >> 2;
        if (v44 <= v43 + 1)
          v44 = v43 + 1;
        if ((unint64_t)((char *)v69 - (char *)v67) >= 0x7FFFFFFFFFFFFFF8)
          v45 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v45 = v44;
        if (v45)
          v46 = (char *)sub_1DCAE79A4((uint64_t)&v69, v45);
        else
          v46 = 0;
        v47 = (float32x4_t **)&v46[8 * v43];
        *v47 = (float32x4_t *)v40;
        v42 = v47 + 1;
        v49 = v67;
        v48 = v68;
        if (v68 != v67)
        {
          do
          {
            v50 = *--v48;
            *--v47 = v50;
          }
          while (v48 != v49);
          v48 = v67;
        }
        v67 = v47;
        v68 = v42;
        v69 = (float32x4_t **)&v46[8 * v45];
        if (v48)
          operator delete(v48);
      }
      else
      {
        *v68 = (float32x4_t *)v40;
        v42 = v41 + 1;
      }
      v68 = v42;
      v16 += 3;
    }
    while (v16 < a2);
  }
  sub_1DCBF3754(&v67, v10);
  v51 = v67;
  v52 = v68;
  if (v67 != v68)
  {
    do
    {
      v53 = (int *)*v51++;
      v54 = (_DWORD *)(a5 + *v53 * a6);
      *v54 = v53[28];
      v54[1] = v53[29];
      v54[2] = v53[30];
      v55 = (_DWORD *)(a5 + v53[1] * a6);
      *v55 = v53[32];
      v55[1] = v53[33];
      v55[2] = v53[34];
      v56 = (_DWORD *)(a5 + v53[2] * a6);
      *v56 = v53[36];
      v56[1] = v53[37];
      v56[2] = v53[38];
      MEMORY[0x1DF0D228C]();
    }
    while (v51 != v52);
    v51 = v67;
  }
  if (v51)
  {
    v68 = v51;
    operator delete(v51);
  }
}

void sub_1DCBF568C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(_QWORD *)(v1 - 120) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DCBF56D0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, __n128 a10)
{
  float v10;
  unint64_t v16;
  float32x4_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  float v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  uint64_t v40;
  float32x4_t **v41;
  float32x4_t **v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  float32x4_t **v47;
  float32x4_t **v48;
  float32x4_t **v49;
  float32x4_t *v50;
  float32x4_t **v51;
  float32x4_t **v52;
  int *v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  float32x4_t v57;
  float32x4_t v58;
  __n128 v60;
  unsigned __int32 v61;
  float32x4_t v62;
  __int32 v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t **v67;
  float32x4_t **v68;
  float32x4_t **v69;

  v10 = a7.f32[0];
  v67 = 0;
  v68 = 0;
  v69 = 0;
  if (a2)
  {
    v16 = 0;
    a7.i32[0] = 897988541;
    v58 = a7;
    v17 = (float32x4_t)vdupq_n_s32(0x49742400u);
    v57 = v17;
    do
    {
      v18 = (unsigned int *)(a1 + 4 * v16);
      v19 = *v18;
      v20 = v18[1];
      v21 = v18[2];
      v22 = a3 + v19 * a4;
      v17.i64[0] = *(_QWORD *)v22;
      v65 = v17;
      v63 = *(_DWORD *)(v22 + 8);
      v17.i32[2] = v63;
      v23 = a3 + v20 * a4;
      a8.i64[0] = *(_QWORD *)v23;
      v64 = a8;
      v61 = *(_DWORD *)(v23 + 8);
      a8.i32[2] = v61;
      v24 = a3 + v21 * a4;
      a9.i64[0] = *(_QWORD *)v24;
      a10.n128_u32[0] = *(_DWORD *)(v24 + 8);
      v62 = a9;
      v60 = a10;
      a9.i32[2] = a10.n128_u32[0];
      v25 = vsubq_f32(a8, v17);
      v26 = (int32x4_t)vmulq_f32(v25, v25);
      v27 = vsubq_f32(a9, a8);
      v28 = vaddq_f32(vaddq_f32((float32x4_t)v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 1)), (float32x4_t)vdupq_laneq_s32(v26, 2));
      v29 = (int32x4_t)vmulq_f32(v27, v27);
      v30 = vaddq_f32(vaddq_f32((float32x4_t)v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.i8, 1)), (float32x4_t)vdupq_laneq_s32(v29, 2));
      if ((vmovn_s32(vcgtq_f32(v30, v28)).u8[0] & 1) == 0)
        v28.f32[0] = v30.f32[0];
      v31 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v58, v28), 0);
      v32 = (int32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_f32(v27, v57), (int8x16_t)v27);
      v33 = (int32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_f32(v25, v57), (int8x16_t)v25);
      v34 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v33, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v32, v32), (int8x16_t)v32, 0xCuLL))), (float32x4_t)v32, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL));
      v35 = (int32x4_t)vmulq_f32((float32x4_t)v34, (float32x4_t)v34);
      v36 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v35, 2), (float32x4_t)v35), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.i8, 1)).f32[0];
      v66 = 0u;
      if (v36 > COERCE_FLOAT(512))
      {
        v37 = v36;
        v38 = vrsqrte_f32((float32x2_t)LODWORD(v36));
        v39 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v37), vmul_f32(v38, v38)), v38);
        v66 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL), vmul_f32(v39, vrsqrts_f32((float32x2_t)LODWORD(v37), vmul_f32(v39, v39))).f32[0]);
      }
      v40 = operator new();
      sub_1DCB3F434((_QWORD *)v40);
      v17 = v65;
      v17.i32[2] = v63;
      a8 = v64;
      a10 = v60;
      a8.i32[2] = v61;
      a9 = v62;
      a9.i32[2] = v60.n128_u32[0];
      *(float32x4_t *)(v40 + 64) = v17;
      *(float32x4_t *)(v40 + 80) = a8;
      *(float32x4_t *)(v40 + 96) = a9;
      *(_DWORD *)v40 = v19;
      *(_DWORD *)(v40 + 4) = v20;
      *(_DWORD *)(v40 + 8) = v21;
      v17.i64[1] = v66.i64[1];
      *(float32x4_t *)(v40 + 192) = v66;
      v41 = v68;
      if (v68 >= v69)
      {
        v43 = v68 - v67;
        if ((unint64_t)(v43 + 1) >> 61)
          sub_1DCAE4C44();
        v44 = ((char *)v69 - (char *)v67) >> 2;
        if (v44 <= v43 + 1)
          v44 = v43 + 1;
        if ((unint64_t)((char *)v69 - (char *)v67) >= 0x7FFFFFFFFFFFFFF8)
          v45 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v45 = v44;
        if (v45)
          v46 = (char *)sub_1DCAE79A4((uint64_t)&v69, v45);
        else
          v46 = 0;
        v47 = (float32x4_t **)&v46[8 * v43];
        *v47 = (float32x4_t *)v40;
        v42 = v47 + 1;
        v49 = v67;
        v48 = v68;
        if (v68 != v67)
        {
          do
          {
            v50 = *--v48;
            *--v47 = v50;
          }
          while (v48 != v49);
          v48 = v67;
        }
        v67 = v47;
        v68 = v42;
        v69 = (float32x4_t **)&v46[8 * v45];
        if (v48)
          operator delete(v48);
      }
      else
      {
        *v68 = (float32x4_t *)v40;
        v42 = v41 + 1;
      }
      v68 = v42;
      v16 += 3;
    }
    while (v16 < a2);
  }
  sub_1DCBF3754(&v67, v10);
  v51 = v67;
  v52 = v68;
  if (v67 != v68)
  {
    do
    {
      v53 = (int *)*v51++;
      v54 = (_DWORD *)(a5 + *v53 * a6);
      *v54 = v53[28];
      v54[1] = v53[29];
      v54[2] = v53[30];
      v55 = (_DWORD *)(a5 + v53[1] * a6);
      *v55 = v53[32];
      v55[1] = v53[33];
      v55[2] = v53[34];
      v56 = (_DWORD *)(a5 + v53[2] * a6);
      *v56 = v53[36];
      v56[1] = v53[37];
      v56[2] = v53[38];
      MEMORY[0x1DF0D228C]();
    }
    while (v51 != v52);
    v51 = v67;
  }
  if (v51)
  {
    v68 = v51;
    operator delete(v51);
  }
}

void sub_1DCBF5A64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(_QWORD *)(v1 - 120) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DCBF5FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{

  _Unwind_Resume(a1);
}

void sub_1DCBF6980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);

  _Unwind_Resume(a1);
}

void sub_1DCBF6AAC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_1DCBF9408((char **)a1, a2 - v2);
  }
}

void sub_1DCBF6CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1DCBF707C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1DCBF71C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCBF7BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,char a56,_QWORD *a57)
{

  if (__p)
    operator delete(__p);
  sub_1DCAE4E44((uint64_t)&a56, a57);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBF7DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  unint64_t v16;
  unsigned int *v17;
  _DWORD *v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v28;
  unsigned int v29;
  unsigned int *v30;

  if (a4)
  {
    v8 = 0;
    v9 = (_QWORD *)(a1 + 8);
    v28 = a2 + 16;
    do
    {
      v10 = *(unsigned __int8 *)(a3 + v8);
      v11 = *v9;
      if (!*v9)
        goto LABEL_14;
      v12 = v9;
      do
      {
        v13 = *(_DWORD *)(v11 + 28);
        v14 = v13 >= v10;
        if (v13 >= v10)
          v15 = (uint64_t *)v11;
        else
          v15 = (uint64_t *)(v11 + 8);
        if (v14)
          v12 = (_QWORD *)v11;
        v11 = *v15;
      }
      while (*v15);
      if (v12 == v9 || *((_DWORD *)v12 + 7) > v10)
      {
LABEL_14:
        v29 = *(_QWORD *)(a1 + 16);
        v30 = &v29;
        *((_DWORD *)sub_1DCBF9510((uint64_t **)a1, &v29, (uint64_t)&unk_1DCC58300, &v30) + 8) = v10;
        v10 = *(unsigned __int8 *)(a3 + v8);
      }
      v17 = *(unsigned int **)(a2 + 8);
      v16 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v17 >= v16)
      {
        v19 = *(unsigned int **)a2;
        v20 = ((uint64_t)v17 - *(_QWORD *)a2) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          sub_1DCAE4C44();
        v22 = v16 - (_QWORD)v19;
        if (v22 >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)sub_1DCAE4D04(v28, v23);
          v19 = *(unsigned int **)a2;
          v17 = *(unsigned int **)(a2 + 8);
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v20];
        *(_DWORD *)v25 = v10;
        v18 = v25 + 4;
        while (v17 != v19)
        {
          v26 = *--v17;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        *(_QWORD *)a2 = v25;
        *(_QWORD *)(a2 + 8) = v18;
        *(_QWORD *)(a2 + 16) = &v24[4 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v17 = v10;
        v18 = v17 + 1;
      }
      *(_QWORD *)(a2 + 8) = v18;
      ++v8;
    }
    while (v8 != a4);
  }
  return 1;
}

uint64_t sub_1DCBF7F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  unint64_t v16;
  unsigned int *v17;
  _DWORD *v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v28;
  unsigned int v29;
  unsigned int *v30;

  if (a4)
  {
    v8 = 0;
    v9 = (_QWORD *)(a1 + 8);
    v28 = a2 + 16;
    do
    {
      v10 = *(unsigned __int16 *)(a3 + 2 * v8);
      v11 = *v9;
      if (!*v9)
        goto LABEL_14;
      v12 = v9;
      do
      {
        v13 = *(_DWORD *)(v11 + 28);
        v14 = v13 >= v10;
        if (v13 >= v10)
          v15 = (uint64_t *)v11;
        else
          v15 = (uint64_t *)(v11 + 8);
        if (v14)
          v12 = (_QWORD *)v11;
        v11 = *v15;
      }
      while (*v15);
      if (v12 == v9 || *((_DWORD *)v12 + 7) > v10)
      {
LABEL_14:
        v29 = *(_QWORD *)(a1 + 16);
        v30 = &v29;
        *((_DWORD *)sub_1DCBF9510((uint64_t **)a1, &v29, (uint64_t)&unk_1DCC58300, &v30) + 8) = v10;
        v10 = *(unsigned __int16 *)(a3 + 2 * v8);
      }
      v17 = *(unsigned int **)(a2 + 8);
      v16 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v17 >= v16)
      {
        v19 = *(unsigned int **)a2;
        v20 = ((uint64_t)v17 - *(_QWORD *)a2) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          sub_1DCAE4C44();
        v22 = v16 - (_QWORD)v19;
        if (v22 >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)sub_1DCAE4D04(v28, v23);
          v19 = *(unsigned int **)a2;
          v17 = *(unsigned int **)(a2 + 8);
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v20];
        *(_DWORD *)v25 = v10;
        v18 = v25 + 4;
        while (v17 != v19)
        {
          v26 = *--v17;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        *(_QWORD *)a2 = v25;
        *(_QWORD *)(a2 + 8) = v18;
        *(_QWORD *)(a2 + 16) = &v24[4 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v17 = v10;
        v18 = v17 + 1;
      }
      *(_QWORD *)(a2 + 8) = v18;
      ++v8;
    }
    while (v8 != a4);
  }
  return 1;
}

uint64_t sub_1DCBF8100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  unsigned int v29;
  unsigned int *v30;

  if (a4)
  {
    v8 = 0;
    v9 = (_QWORD *)(a1 + 8);
    v10 = a2 + 16;
    do
    {
      v11 = *v9;
      v12 = *(_DWORD *)(a3 + 4 * v8);
      if (!*v9)
        goto LABEL_14;
      v13 = v9;
      do
      {
        v14 = *(_DWORD *)(v11 + 28);
        v15 = v14 >= v12;
        if (v14 >= v12)
          v16 = (uint64_t *)v11;
        else
          v16 = (uint64_t *)(v11 + 8);
        if (v15)
          v13 = (_QWORD *)v11;
        v11 = *v16;
      }
      while (*v16);
      if (v13 == v9 || v12 < *((_DWORD *)v13 + 7))
      {
LABEL_14:
        v29 = *(_QWORD *)(a1 + 16);
        v30 = &v29;
        *((_DWORD *)sub_1DCBF9510((uint64_t **)a1, &v29, (uint64_t)&unk_1DCC58300, &v30) + 8) = v12;
      }
      v18 = *(_DWORD **)(a2 + 8);
      v17 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v18 >= v17)
      {
        v20 = *(_DWORD **)a2;
        v21 = ((uint64_t)v18 - *(_QWORD *)a2) >> 2;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62)
          sub_1DCAE4C44();
        v23 = v17 - (_QWORD)v20;
        if (v23 >> 1 > v22)
          v22 = v23 >> 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v24 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)sub_1DCAE4D04(v10, v24);
          v20 = *(_DWORD **)a2;
          v18 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[4 * v21];
        *(_DWORD *)v26 = *(_DWORD *)(a3 + 4 * v8);
        v19 = v26 + 4;
        while (v18 != v20)
        {
          v27 = *--v18;
          *((_DWORD *)v26 - 1) = v27;
          v26 -= 4;
        }
        *(_QWORD *)a2 = v26;
        *(_QWORD *)(a2 + 8) = v19;
        *(_QWORD *)(a2 + 16) = &v25[4 * v24];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v18 = *(_DWORD *)(a3 + 4 * v8);
        v19 = v18 + 1;
      }
      *(_QWORD *)(a2 + 8) = v19;
      ++v8;
    }
    while (v8 != a4);
  }
  return 1;
}

void sub_1DCBF83D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCBF8500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1DCBF92A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBF85E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1DCBF92A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCBF871C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a7);
  sub_1DCBF92A8((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1DCBF8840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a5);
  sub_1DCBF92A8((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1DCBF893C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCBF8AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCBF9150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCBF92A8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
  sub_1DCBF9330(a1 + 120);
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(_QWORD *)(a1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_1DCBF9330(uint64_t a1)
{
  void *v2;

  sub_1DCBF9368(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1DCBF9368(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[6];
      if (v4)
      {
        v2[7] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

float32x4_t sub_1DCBF93AC(float32x4_t *a1, uint64_t a2)
{
  float32x4_t result;
  float32x4_t v3;
  float v4;
  float v5;
  float32x2_t v6;
  float32x2_t v7;

  result = *a1;
  v3 = vmulq_f32(result, result);
  v4 = vaddq_f32(vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2)).f32[0];
  if (v4 <= COERCE_FLOAT(512))
  {
    return *(float32x4_t *)a2;
  }
  else
  {
    v5 = v4;
    v6 = vrsqrte_f32((float32x2_t)LODWORD(v4));
    v7 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v5), vmul_f32(v6, v6)), v6);
    result.i64[0] = vmulq_n_f32(result, vmul_f32(v7, vrsqrts_f32((float32x2_t)LODWORD(v5), vmul_f32(v7, v7))).f32[0]).u64[0];
  }
  return result;
}

void sub_1DCBF9408(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      sub_1DCAE4C44();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1DCAE4D04(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t *sub_1DCBF9510(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    sub_1DCACAE54(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_1DCBF95D4(uint64_t a1, float32x4_t *a2, int32x2_t *a3, int32x2_t *a4, uint64_t a5)
{
  float32x4_t v7;
  int32x4_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  float v18;
  int32x4_t v19;
  float v20;
  int32x4_t v21;
  float v22;
  float32x2_t v28;
  float32x2_t v29;
  float v30;
  float v31;
  __int128 v32;
  uint64_t v33;
  float v34;
  float32x4_t v35;
  __int128 v36;
  uint64_t v37;
  float v38;
  float32x4_t v39;
  float v40;
  float v41;
  float32x4_t v42;
  __int128 v43;
  __int128 v44;

  v7 = vaddq_f32(a2[2], a2[3]);
  v8 = (int32x4_t)vmulq_f32(v7, v7);
  v8.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2)).u32[0];
  v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  v10 = vmul_f32(vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)), v9);
  v11 = vmulq_n_f32(v7, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).f32[0]);
  *(float32x4_t *)a5 = v11;
  v13 = a2[1];
  v12 = a2[2];
  v14 = (int32x4_t)vmulq_f32(v13, vnegq_f32(v12));
  *(float *)v14.i32 = vaddq_f32(vaddq_f32((float32x4_t)v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 1)), (float32x4_t)vdupq_laneq_s32(v14, 2)).f32[0];
  v15 = vnegq_f32(vmlaq_n_f32(v12, v13, *(float *)v14.i32 + *(float *)v14.i32));
  *(float32x4_t *)(a5 + 16) = v15;
  v16 = (int32x4_t)vmulq_f32(a2[3], a2[1]);
  *(float *)v16.i32 = vaddq_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.i8, 1)), (float32x4_t)vdupq_laneq_s32(v16, 2)).f32[0];
  if (*(float *)v16.i32 < 0.001)
    *(float *)v16.i32 = 0.001;
  *(_DWORD *)(a5 + 32) = v16.i32[0];
  v17 = (int32x4_t)vmulq_f32(a2[2], a2[1]);
  v18 = vaddq_f32(vaddq_f32((float32x4_t)v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.i8, 1)), (float32x4_t)vdupq_laneq_s32(v17, 2)).f32[0];
  if (v18 < 0.001)
    v18 = 0.001;
  *(float *)(a5 + 36) = v18;
  v19 = (int32x4_t)vmulq_f32(v11, a2[1]);
  v20 = vaddq_f32(vaddq_f32((float32x4_t)v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 1)), (float32x4_t)vdupq_laneq_s32(v19, 2)).f32[0];
  if (v20 < 0.001)
    v20 = 0.001;
  *(float *)(a5 + 40) = v20;
  v21 = (int32x4_t)vmulq_f32(a2[3], v11);
  v22 = vaddq_f32(vaddq_f32((float32x4_t)v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 1)), (float32x4_t)vdupq_laneq_s32(v21, 2)).f32[0];
  if (v22 < 0.001)
    v22 = 0.001;
  *(float *)(a5 + 44) = v22;
  *(float *)&v16.i32[1] = v18;
  __asm { FMOV            V3.2S, #1.0 }
  v28 = vsub_f32(_D3, *(float32x2_t *)v16.i8);
  *(int8x8_t *)v16.i8 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v28, _D3), (int8x8_t)_D3, (int8x8_t)v28), (int8x8_t)vcltz_f32(v28));
  v29 = vmul_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8);
  *(float32x2_t *)(a5 + 48) = vmul_f32(*(float32x2_t *)v16.i8, vmul_f32(v29, v29));
  v16.i32[0] = 1.0;
  v30 = 1.0 - v22;
  if (v30 <= 1.0)
    *(float *)v16.i32 = v30;
  if (v30 < 0.0)
    *(float *)v16.i32 = 0.0;
  v31 = *(float *)(a1 + 116);
  *(float *)(a5 + 56) = *(float *)v16.i32
                      * (float)((float)(*(float *)v16.i32 * *(float *)v16.i32)
                              * (float)(*(float *)v16.i32 * *(float *)v16.i32));
  *(float *)(a5 + 60) = v31;
  *(double *)&v32 = sub_1DCC2D570(a4, v15, v31 * 0.0);
  v43 = v32;
  *(float *)&v33 = powf(*(float *)&v32, 0.45455);
  v42.i64[0] = v33;
  v40 = powf(*((float *)&v43 + 1), 0.45455);
  v34 = powf(*((float *)&v43 + 2), 0.45455);
  v35 = v42;
  v35.f32[1] = v40;
  v35.f32[2] = v34;
  *(float32x4_t *)(a5 + 80) = vmulq_n_f32(v35, (float)(*(float *)(a5 + 60) * -0.33) + 0.99);
  *(double *)&v36 = sub_1DCC2D110(a3, *(float32x4_t *)(a5 + 16));
  v44 = v36;
  *(float *)&v37 = powf(*(float *)&v36, 0.45455);
  v42.i64[0] = v37;
  v41 = powf(*((float *)&v44 + 1), 0.45455);
  v38 = powf(*((float *)&v44 + 2), 0.45455);
  v39 = v42;
  v39.f32[1] = v41;
  v39.f32[2] = v38;
  *(float32x4_t *)(a5 + 64) = v39;
}

double sub_1DCBF9834(float32x4_t *a1, uint64_t a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  double result;

  v3 = a3[12];
  v4 = a3[15] * (float)(a3[11] * a3[11]);
  v5 = a3[13];
  v6 = (float)((float)(v5 + v3) * (float)((float)(v4 * 2.0) + -0.5)) + 2.0;
  v7 = (float)((float)((float)((float)(v4 + -1.0) * v3) + 1.0) * (float)((float)((float)(v4 + -1.0) * v5) + 1.0))
     * 1.25
     * (1.0 / (float)(a3[9] + a3[8]) + -0.5)
     + 0.625;
  v8 = (float)(v6 + (float)((float)(v7 - v6) * 0.1)) * 0.318309877;
  *(_QWORD *)&result = vmulq_n_f32(a1[3], (float)(1.0 - a1[5].f32[2]) * v8).u64[0];
  return result;
}

double sub_1DCBF98E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v5;
  float v6;
  double v7;
  float v8;
  float v9;
  float32x2_t v15;
  double result;

  v5 = (float)(*(float *)(a1 + 116) * -0.599) + 0.6;
  if (v5 >= 1.0)
  {
    v9 = 0.31831;
  }
  else
  {
    v6 = v5 * v5;
    v7 = v6 + -1.0;
    v8 = *(float *)(a3 + 40) * *(float *)(a3 + 40) * v7 + 1.0;
    v9 = v7 / (float)((float)(logf(v6) * 3.1416) * v8);
  }
  __asm { FMOV            V4.2S, #0.9375 }
  v15 = vadd_f32(vsqrt_f32(vmla_f32((float32x2_t)vdup_n_s32(0x3D800000u), _D4, vmul_f32(*(float32x2_t *)(a3 + 32), *(float32x2_t *)(a3 + 32)))), *(float32x2_t *)(a3 + 32));
  _D4.f32[0] = fminf(*(float *)(a3 + 48), 1.0);
  *(_QWORD *)&result = vmulq_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)_D4, 0), *(float32x4_t *)(a3 + 64)), (float)((float)((float)(*(float *)(a3 + 56) * 0.3) + 0.1) * (float)(v9 * *(float *)(a1 + 112)))/ vmul_lane_f32(v15, v15, 1).f32[0]).u64[0];
  return result;
}

double sub_1DCBF99F0(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  float v5;
  float v6;
  double v7;
  float v8;
  float v9;
  float v10;
  double v11;
  float32x4_t v17;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x4_t v22;
  double result;
  float v24;

  v5 = *(float *)(a1 + 100);
  v6 = *(float *)(a1 + 80);
  if (v6 >= 1.0)
  {
    v10 = 0.31831;
  }
  else
  {
    v7 = (float)(v6 * v6) + -1.0;
    v8 = a3[2].f32[2] * a3[2].f32[2] * v7 + 1.0;
    v24 = *(float *)(a1 + 80);
    v9 = logf(v6 * v6);
    v6 = v24;
    v10 = v7 / (float)((float)(v9 * 3.1416) * v8);
  }
  v11 = v5 * 0.5 + 0.5;
  *(float *)&v11 = v11;
  __asm { FMOV            V4.4S, #-1.0 }
  v17 = vaddq_f32(*(float32x4_t *)(a1 + 16), _Q4);
  __asm { FMOV            V4.4S, #1.0 }
  v19 = vmulq_n_f32(vmlaq_n_f32(_Q4, v17, COERCE_FLOAT(*(_QWORD *)(a1 + 84))), v6);
  *(float *)&v11 = (float)(*(float *)&v11 * *(float *)&v11) * (float)(*(float *)&v11 * *(float *)&v11);
  v17.i64[0] = a3[2].i64[0];
  v20 = vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
  v21 = vadd_f32(vsqrt_f32(vmls_lane_f32(vadd_f32(v20, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v11, 0)), v20, *(float32x2_t *)&v11, 0)), *(float32x2_t *)v17.f32);
  v22 = vmulq_n_f32(*(float32x4_t *)(a1 + 48), COERCE_FLOAT(*(_QWORD *)(a1 + 88)));
  *(_QWORD *)&result = vmulq_f32(vmlaq_n_f32(v22, vmulq_f32(vmlaq_n_f32(v19, vsubq_f32(_Q4, v19), COERCE_FLOAT(a3[3].i64[1])), vaddq_f32(v22, _Q4)), v10 / vmul_lane_f32(v21, v21, 1).f32[0]), a3[5]).u64[0];
  return result;
}

double sub_1DCBF9B24(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  double result;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  LODWORD(a4) = *(_DWORD *)(a3 + 32);
  v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
  v23 = *(float32x4_t *)(a3 + 80);
  v21 = vmulq_n_f32(v23, 1.0 - *(float *)&a4);
  v6 = a1 + 16;
  v24 = *(float32x4_t *)(a1 + 144);
  v27 = vmulq_f32(vmlaq_f32(v22, v24, v21), (float32x4_t)vdupq_n_s32(0x3FF1463Au));
  *(double *)v7.i64 = sub_1DCBF9834((float32x4_t *)(a1 + 16), a2, (float *)a3);
  v8 = vmulq_f32(v27, v7);
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  v25 = vmlaq_f32(v7, v7, v24);
  v26 = v8;
  v19 = *(float32x4_t *)(a1 + 64);
  *(double *)v10.i64 = sub_1DCBF98E4(v6, v9, a3);
  v20 = v10;
  *(double *)v12.i64 = sub_1DCBF99F0(v6, v11, (float32x4_t *)a3);
  v13 = vaddq_f32(v21, v22);
  v14 = *(float32x4_t *)(a1 + 112);
  v15 = vsubq_f32(v19, v13);
  v16 = vmlaq_n_f32(v13, v15, v14.f32[0]);
  v14.i64[0] = *(_QWORD *)(a3 + 52);
  v15.i64[0] = *(_QWORD *)(a1 + 108);
  v17 = vmulq_f32(v15, v14);
  v15.f32[0] = 1.0 - *(float *)(a1 + 104);
  *(_QWORD *)&result = vmlaq_f32(v26, v25, vmlaq_n_f32(vmlaq_f32(vaddq_f32(v12, v20), (float32x4_t)vdupq_n_s32(0x3DCCCCCDu), vmulq_f32(v19, v23)), vmulq_f32(v16, v27), vmulq_f32(v17, v15).f32[0])).u64[0];
  return result;
}

double sub_1DCBF9C64(float32x4_t *a1, uint64_t a2, float *a3)
{
  return sub_1DCBF9834(a1 + 1, a2, a3);
}

double sub_1DCBF9C6C(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  return sub_1DCBF99F0(a1 + 16, a2, a3);
}

double sub_1DCBF9C74()
{
  return 0.0;
}

double sub_1DCBF9C7C()
{
  return 0.0;
}

double sub_1DCBF9C88(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  double result;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  LODWORD(a4) = *(_DWORD *)(a3 + 32);
  v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
  v23 = *(float32x4_t *)(a3 + 80);
  v21 = vmulq_n_f32(v23, 1.0 - *(float *)&a4);
  v6 = a1 + 16;
  v24 = *(float32x4_t *)(a1 + 144);
  v27 = vmulq_f32(vmlaq_f32(v22, v24, v21), (float32x4_t)vdupq_n_s32(0x3FF1463Au));
  *(double *)v7.i64 = sub_1DCBF9834((float32x4_t *)(a1 + 16), a2, (float *)a3);
  v8 = vmulq_f32(v27, v7);
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  v25 = vmlaq_f32(v7, v7, v24);
  v26 = v8;
  v19 = *(float32x4_t *)(a1 + 64);
  *(double *)v10.i64 = sub_1DCBF98E4(v6, v9, a3);
  v20 = v10;
  *(double *)v12.i64 = sub_1DCBF99F0(v6, v11, (float32x4_t *)a3);
  v13 = vaddq_f32(v21, v22);
  v14 = *(float32x4_t *)(a1 + 112);
  v15 = vsubq_f32(v19, v13);
  v16 = vmlaq_n_f32(v13, v15, v14.f32[0]);
  v14.i64[0] = *(_QWORD *)(a3 + 52);
  v15.i64[0] = *(_QWORD *)(a1 + 108);
  v17 = vmulq_f32(v15, v14);
  v15.f32[0] = 1.0 - *(float *)(a1 + 104);
  *(_QWORD *)&result = vmlaq_f32(v26, v25, vmlaq_n_f32(vmlaq_f32(vaddq_f32(v12, v20), (float32x4_t)vdupq_n_s32(0x3DCCCCCDu), vmulq_f32(v19, v23)), vmulq_f32(v16, v27), vmulq_f32(v17, v15).f32[0])).u64[0];
  return result;
}

double sub_1DCBF9DC8(float32x4_t *a1, uint64_t a2, float *a3)
{
  return sub_1DCBF9834(a1 + 1, a2, a3);
}

double sub_1DCBF9DD0(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  return sub_1DCBF99F0(a1 + 16, a2, a3);
}

double sub_1DCBF9DD8(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  double result;

  LODWORD(a2) = *(_DWORD *)(a4 + 32);
  v4 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0), *(float32x4_t *)(a4 + 80), 1.0 - *(float *)&a2);
  v5 = *(float32x4_t *)(a1 + 112);
  v6 = vsubq_f32(*(float32x4_t *)(a1 + 64), v4);
  v7 = vmlaq_n_f32(v4, v6, v5.f32[0]);
  v6.i64[0] = *(_QWORD *)(a4 + 52);
  v5.i64[0] = *(_QWORD *)(a1 + 108);
  v8 = vmulq_f32(v5, v6);
  v5.f32[0] = 1.0 - *(float *)(a1 + 104);
  *(_QWORD *)&result = vmulq_n_f32(v7, vmulq_f32(v8, v5).f32[0]).u64[0];
  return result;
}

double sub_1DCBF9E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DCBF98E4(a1 + 16, a2, a3);
}

id sub_1DCBF9E3C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  __int128 v3;
  _QWORD v5[5];
  _QWORD v6[2];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5[0] = CFSTR("allocatorType");
  v5[1] = CFSTR("bridgeType");
  v2 = *(_QWORD *)(a1 + 40);
  v6[0] = *(_QWORD *)(a1 + 32);
  v6[1] = v2;
  v3 = *(_OWORD *)(a1 + 48);
  v5[2] = CFSTR("bundleIdentifier");
  v5[3] = CFSTR("fileExtension");
  v7 = v3;
  v5[4] = CFSTR("vertexDescriptor");
  v8 = *(_QWORD *)(a1 + 64);
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v6, v5, 5);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1DCBF9EE8(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;

  v1 = a1;
  sub_1DCAC6334((uint64_t)v1, v2, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v1;
  v4 = v5;
  AnalyticsSendEventLazy();

}

void sub_1DCBF9F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id sub_1DCBF9FBC(uint64_t a1, const char *a2)
{
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("bundleIdentifier");
  v4[1] = CFSTR("fileExtension");
  v2 = *(_QWORD *)(a1 + 40);
  v5[0] = *(_QWORD *)(a1 + 32);
  v5[1] = v2;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v5, v4, 2);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1DCBFA038(uint64_t a1, const char *a2, uint64_t a3)
{
  int v3;
  void *v4;
  __CFString *v5;
  id v6;
  __CFString *v7;
  __CFString *v8;
  void *v9;

  v3 = a1;
  sub_1DCAC6334(a1, a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = CFSTR("ModelIO");
  if (v3)
    v5 = CFSTR("Custom");
  v8 = v5;
  v9 = v4;
  v6 = v4;
  v7 = v8;
  AnalyticsSendEventLazy();

}

void sub_1DCBFA0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id sub_1DCBFA11C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("allocatorType");
  v4[1] = CFSTR("bundleIdentifier");
  v2 = *(_QWORD *)(a1 + 40);
  v5[0] = *(_QWORD *)(a1 + 32);
  v5[1] = v2;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v5, v4, 2);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1DCBFED50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  void *v41;
  uint64_t v42;
  void *v44;
  void *v45;
  void *v46;

  if (__p)
    operator delete(__p);
  v44 = *(void **)(v42 - 224);
  if (v44)
  {
    *(_QWORD *)(v42 - 216) = v44;
    operator delete(v44);
  }
  v45 = *(void **)(v42 - 200);
  if (v45)
  {
    *(_QWORD *)(v42 - 192) = v45;
    operator delete(v45);
  }
  v46 = *(void **)(v42 - 176);
  if (v46)
  {
    *(_QWORD *)(v42 - 168) = v46;
    operator delete(v46);
  }

  _Unwind_Resume(a1);
}

void sub_1DCBFF02C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCBFF03C(uint64_t a1, void *a2, int a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  _OWORD v20[2];

  v5 = a2;
  sub_1DCAF10AC((_QWORD *)a1);
  *(_QWORD *)a1 = off_1EA5744D8;
  *(_DWORD *)(a1 + 24) = a3;
  v6 = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  objc_msgSend_transform(v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend_transform(v6, v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v12;

  }
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(v20, a1);
  v15 = (float32x4_t)v20[0];
  v14 = (float32x4_t)v20[1];
  *(_OWORD *)(a1 + 48) = v20[0];
  *(float32x4_t *)(a1 + 64) = v14;
  v16 = vsubq_f32(v15, v14);
  v15.i64[0] = 0x3F0000003F000000;
  v15.i64[1] = 0x3F0000003F000000;
  v17 = vmulq_f32(v16, v15);
  v18 = v17.f32[1];
  if (v17.f32[1] < v17.f32[2])
    v18 = v17.f32[2];
  if (v17.f32[0] < v18)
    v17.f32[0] = v18;
  *(_DWORD *)(a1 + 16) = v17.i32[0];
  *(float *)(a1 + 20) = v17.f32[0] * v17.f32[0];

  return a1;
}

void sub_1DCBFF11C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  sub_1DCAF1130(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCBFF14C(uint64_t a1)
{

  return sub_1DCAF1130(a1);
}

void sub_1DCBFF174(uint64_t a1)
{

  sub_1DCAF1130(a1);
  JUMPOUT(0x1DF0D228CLL);
}

uint64_t sub_1DCBFF1B0(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  double v10;
  void *__p;
  void *v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[168];

  v17[167] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
    return v1;
  v3 = (unsigned int *)(a1 + 80);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  if (v4)
    return 0;
  v1 = operator new();
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 1;
  *(_OWORD *)(v1 + 16) = v5;
  *(_OWORD *)(v1 + 32) = v6;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  __p = 0;
  v13 = 0;
  v14 = 0;
  sub_1DCADEFDC(*(void **)(a1 + 32), (uint64_t *)&__p);
  bzero(v17, 0x530uLL);
  v15[0] = &off_1EA574788;
  v16 = v15;
  sub_1DCADEA14(v17, (uint64_t)v15);
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  sub_1DCADEA18((uint64_t)v17, (uint64_t *)&__p, a1 + 48, 1 << *(_DWORD *)(a1 + 24));
  sub_1DCADEA54((uint64_t)v17, (float32x4_t **)v1, v9, v10);
  *(_QWORD *)(a1 + 88) = v1;
  sub_1DCADF180((uint64_t)v17);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  return v1;
}

void sub_1DCBFF32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a16;
  if (a16 == v17)
  {
    v20 = 4;
    v19 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_1DCBFF38C@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  void *result;
  __int128 v6;
  __int128 v7;

  result = *(void **)(a1 + 32);
  if (result)
  {
    result = (void *)objc_msgSend_boundingBoxAtTime_(result, a2, a3, 0.0);
    *a4 = v6;
    a4[1] = v7;
  }
  return result;
}

BOOL sub_1DCBFF3BC(uint64_t a1, float32x4_t *a2)
{
  _BOOL4 v4;
  float32x4_t v5;
  _BOOL4 v6;
  uint64_t *v7;
  _BOOL8 result;
  unsigned __int8 v9;
  uint64_t v10;
  _OWORD v11[8];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  v9 = 0;
  v4 = MDLAABB::intersect((MDLAABB *)(a1 + 48), a2, (float *)&v10 + 1, (float *)&v10, &v9);
  v6 = *(float *)&v10 >= 0.0 && v4;
  result = 0;
  if (v6)
  {
    memset(v11, 0, sizeof(v11));
    LODWORD(v11[0]) = 2139095039;
    v7 = *(uint64_t **)(a1 + 88);
    if (v7)
    {
      if ((sub_1DCAD6E54(v7, a2, (uint64_t)v11, 0.0, v5) & 1) != 0)
        return 1;
    }
  }
  return result;
}

uint64_t sub_1DCBFF48C(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t *v7;
  double v8;
  float32x4_t v9;
  unsigned __int8 v10;
  uint64_t v11;

  result = sub_1DCBFF1B0(a1);
  if (result)
  {
    v7 = (uint64_t *)result;
    v11 = 0;
    v10 = 0;
    result = MDLAABB::intersect((MDLAABB *)(a1 + 48), a2, (float *)&v11 + 1, (float *)&v11, &v10);
    if ((_DWORD)result)
    {
      LODWORD(v8) = v11;
      if (*(float *)&v11 >= 0.0)
      {
        result = sub_1DCAD6E54(v7, a2, a3, v8, v9);
        if ((_DWORD)result)
          *(_QWORD *)(a3 + 64) = a1;
      }
    }
  }
  return result;
}

void sub_1DCBFF518()
{
  JUMPOUT(0x1DF0D228CLL);
}

_QWORD *sub_1DCBFF52C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA574788;
  return result;
}

void sub_1DCBFF550(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA574788;
}

_QWORD *sub_1DCBFF568()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  return result;
}

uint64_t sub_1DCBFF598(uint64_t a1, uint64_t a2)
{
  if (sub_1DCAE69FC(a2, (uint64_t)&unk_1EA574118))
    return a1 + 8;
  else
    return 0;
}

void *sub_1DCBFF5D4()
{
  return &unk_1EA574118;
}

void sub_1DCBFF680(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCBFF7EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1DCBFF958(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCBFFB08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1DCBFFC5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *sub_1DCBFFD2C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  int v4;
  uint64_t v5;
  void **v6;
  size_t v7;
  __int128 *v8;
  const void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  char v13[8];
  char v14[24];
  __int128 v15;
  uint64_t v16;

  v2 = result;
  v4 = result[63];
  if (v4 < 0)
    v5 = *((_QWORD *)result + 6);
  else
    v5 = result[63];
  v6 = (void **)(result + 40);
  if (v5)
  {
    if ((v4 & 0x80) == 0)
    {
LABEL_6:
      *(_OWORD *)a2 = *(_OWORD *)v6;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v2 + 7);
      return result;
    }
  }
  else
  {
    if (result[39] >= 0)
      v7 = result[39];
    else
      v7 = *((_QWORD *)result + 3);
    v16 = 0;
    v15 = 0uLL;
    v8 = &v15;
    sub_1DCB01128((uint64_t)&v15, v7 + 5);
    if (v16 < 0)
      v8 = (__int128 *)v15;
    if (v7)
    {
      if (v2[39] >= 0)
        v9 = v2 + 16;
      else
        v9 = (const void *)*((_QWORD *)v2 + 2);
      memmove(v8, v9, v7);
    }
    strcpy((char *)v8 + v7, "/Geom");
    if (v2[63] < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v15;
    *((_QWORD *)v2 + 7) = v16;
    sub_1DCBC6D7C((uint64_t *)&v15, (uint64_t *)v2 + 14);
    MEMORY[0x1DF0D123C](v13, v2 + 40);
    pxrInternal__aapl__pxrReserved__::UsdGeomScope::Define();
    MEMORY[0x1DF0D0D08](v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)v13);
    result = (char *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v15 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
    }
    if ((v2[63] & 0x80) == 0)
      goto LABEL_6;
  }
  return (char *)sub_1DCACA658((_BYTE *)a2, *((void **)v2 + 5), *((_QWORD *)v2 + 6));
}

void sub_1DCBFFEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  sub_1DCB2FDE8((uint64_t)&a10);
  v16 = a15;
  if (a15)
  {
    v17 = (unsigned int *)(a15 + 8);
    do
    {
      v18 = __ldxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  _Unwind_Resume(a1);
}

char *sub_1DCBFFF08@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  int v4;
  uint64_t v5;
  void **v6;
  size_t v7;
  __int128 *v8;
  const void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  char v13[8];
  char v14[24];
  __int128 v15;
  uint64_t v16;

  v2 = result;
  v4 = result[87];
  if (v4 < 0)
    v5 = *((_QWORD *)result + 9);
  else
    v5 = result[87];
  v6 = (void **)(result + 64);
  if (v5)
  {
    if ((v4 & 0x80) == 0)
    {
LABEL_6:
      *(_OWORD *)a2 = *(_OWORD *)v6;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v2 + 10);
      return result;
    }
  }
  else
  {
    if (result[39] >= 0)
      v7 = result[39];
    else
      v7 = *((_QWORD *)result + 3);
    v16 = 0;
    v15 = 0uLL;
    v8 = &v15;
    sub_1DCB01128((uint64_t)&v15, v7 + 10);
    if (v16 < 0)
      v8 = (__int128 *)v15;
    if (v7)
    {
      if (v2[39] >= 0)
        v9 = v2 + 16;
      else
        v9 = (const void *)*((_QWORD *)v2 + 2);
      memmove(v8, v9, v7);
    }
    strcpy((char *)v8 + v7, "/Materials");
    if (v2[87] < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v15;
    *((_QWORD *)v2 + 10) = v16;
    sub_1DCBC6D7C((uint64_t *)&v15, (uint64_t *)v2 + 14);
    MEMORY[0x1DF0D123C](v13, v2 + 64);
    pxrInternal__aapl__pxrReserved__::UsdGeomScope::Define();
    MEMORY[0x1DF0D0D08](v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)v13);
    result = (char *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v15 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
    }
    if ((v2[87] & 0x80) == 0)
      goto LABEL_6;
  }
  return (char *)sub_1DCACA658((_BYTE *)a2, *((void **)v2 + 8), *((_QWORD *)v2 + 9));
}

void sub_1DCC000A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  sub_1DCB2FDE8((uint64_t)&a10);
  v16 = a15;
  if (a15)
  {
    v17 = (unsigned int *)(a15 + 8);
    do
    {
      v18 = __ldxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  _Unwind_Resume(a1);
}

void sub_1DCC000EC(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdShadeShader *a3@<X8>)
{
  uint64_t String;
  __int128 v7;
  size_t v8;
  __int128 *v9;
  void **v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t *v21;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *__p[2];
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  __p[0] = 0;
  __p[1] = 0;
  v41 = 0;
  sub_1DCB8FC30((uint64_t)a2, &v42);
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v42);
  if (*(char *)(String + 23) < 0)
  {
    sub_1DCACA658(__p, *(void **)String, *(_QWORD *)(String + 8));
  }
  else
  {
    v7 = *(_OWORD *)String;
    v41 = *(_QWORD *)(String + 16);
    *(_OWORD *)__p = v7;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v42);
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  sub_1DCBC6D7C(&v32, (uint64_t *)(a1 + 112));
  if (v41 >= 0)
    v8 = HIBYTE(v41);
  else
    v8 = (size_t)__p[1];
  *(_QWORD *)&v43 = 0;
  v42 = 0uLL;
  v9 = &v42;
  sub_1DCB01128((uint64_t)&v42, v8 + 14);
  if (SBYTE7(v43) < 0)
    v9 = (__int128 *)v42;
  if (v8)
  {
    if (v41 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "/surfaceShader");
  MEMORY[0x1DF0D123C](&v39, &v42);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v39);
  if (SBYTE7(v43) < 0)
    operator delete((void *)v42);
  v11 = v33;
  if (v33)
  {
    v12 = (unsigned int *)(v33 + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  MEMORY[0x1DF0D1254](&v32, "UsdPreviewSurface");
  *(_QWORD *)&v42 = v32;
  *((_QWORD *)&v42 + 1) = (char *)&off_1EA5753D8 + 1;
  if ((v32 & 7) != 0)
  {
    v15 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      *(_QWORD *)&v42 = v42 & 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr(a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v42);
  if ((v38 & 7) != 0)
  {
    v17 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v37);
  if (v36)
    sub_1DCAEED94(v36);
  sub_1DCAEEE2C((uint64_t)&v42);
  if ((v32 & 7) != 0)
  {
    v19 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  v42 = 0u;
  v43 = 0u;
  MEMORY[0x1DF0D1254](&v32, "surface");
  v21 = (unint64_t *)MEMORY[0x1E0DF2618];
  if (!atomic_load(MEMORY[0x1E0DF2618]))
    sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateOutput();
  if ((v32 & 7) != 0)
  {
    v23 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  MEMORY[0x1DF0D1254](&v39, "surface");
  v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v21);
  if (!v25)
    v25 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v39, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v25 + 88));
  MEMORY[0x1DF0D19E0](&v32, &v42);
  if ((v35 & 7) != 0)
  {
    v26 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v34);
  if (v33)
    sub_1DCAEED94(v33);
  if ((v39 & 7) != 0)
  {
    v28 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  if ((BYTE8(v43) & 7) != 0)
  {
    v30 = (unsigned int *)(*((_QWORD *)&v43 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v43);
  if (*((_QWORD *)&v42 + 1))
    sub_1DCAEED94(*((uint64_t *)&v42 + 1));
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
}

void sub_1DCC004DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
    sub_1DCAE4C58(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1DCC00640(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t String;
  __int128 v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;

  v7 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  sub_1DCB8FC30(a3, &v10);
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
  if (*(char *)(String + 23) < 0)
  {
    sub_1DCACA658(__p, *(void **)String, *(_QWORD *)(String + 8));
  }
  else
  {
    v9 = *(_OWORD *)String;
    v12 = *(_QWORD *)(String + 16);
    *(_OWORD *)__p = v9;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v10);
  v10 = 19;
  sub_1DCC00834(a1, 0, &v10, v7, a4, (const void **)__p);
  v10 = 0;
  sub_1DCC00834(a1, 1, &v10, v7, a4, (const void **)__p);
  v10 = 15;
  sub_1DCC00834(a1, 2, &v10, v7, a4, (const void **)__p);
  v10 = 13;
  sub_1DCC00834(a1, 3, &v10, v7, a4, (const void **)__p);
  v10 = 2;
  sub_1DCC00834(a1, 4, &v10, v7, a4, (const void **)__p);
  v10 = 6;
  sub_1DCC00834(a1, 5, &v10, v7, a4, (const void **)__p);
  v10 = 11;
  sub_1DCC00834(a1, 7, &v10, v7, a4, (const void **)__p);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);

}

void sub_1DCC007E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1DCC00834(uint64_t a1, int a2, uint64_t *a3, void *a4, uint64_t a5, const void **a6)
{
  id v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  const char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  const char *v58;
  uint64_t v59;
  char *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  id v67;
  const char *v68;
  uint64_t v69;
  char *v70;
  std::string::size_type size;
  std::string::size_type v72;
  const char *v73;
  uint64_t v74;
  int v75;
  int v76;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  unsigned __int8 *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  BOOL v90;
  _BOOL4 v91;
  std::string::size_type v92;
  const char *v93;
  uint64_t v94;
  CGColor *v95;
  const CGFloat *Components;
  CGColorSpace *ColorSpace;
  CGColorSpaceModel Model;
  float v99;
  double v100;
  size_t NumberOfComponents;
  float32x2_t v102;
  float v103;
  id v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  size_t v109;
  __int128 *v110;
  const void *v111;
  const std::string::value_type *v112;
  std::string::size_type v113;
  std::string *v114;
  __int128 v115;
  uint64_t *v116;
  pxrInternal__aapl__pxrReserved__::UsdStage *v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int *v137;
  unsigned int v138;
  unint64_t *v139;
  unsigned int *v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int v151;
  size_t v152;
  std::string *v153;
  const void *v154;
  const std::string::value_type *v155;
  std::string::size_type v156;
  std::string *v157;
  __int128 v158;
  std::string *v159;
  __int128 v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int *v169;
  unsigned int v170;
  unint64_t *v171;
  unsigned int *v173;
  unsigned int v174;
  unsigned int *v175;
  unsigned int v176;
  unsigned int *v178;
  unsigned int v179;
  unsigned int *v180;
  unsigned int v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int *v184;
  unsigned int v185;
  uint64_t v186;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v187;
  void **v188;
  unsigned int *v189;
  unsigned int v190;
  const char *v191;
  uint64_t v192;
  unsigned int *v193;
  unsigned int v194;
  void *v195;
  const char *v196;
  uint64_t v197;
  void *v198;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  const char *v203;
  const char *v204;
  unsigned int *v205;
  unsigned int v206;
  unsigned int *v207;
  unsigned int v208;
  unsigned int *v209;
  unsigned int v210;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  const char *v215;
  const char *v216;
  unsigned int *v217;
  unsigned int v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int *v223;
  unsigned int v224;
  unsigned int *v226;
  unsigned int v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int *v232;
  unsigned int v233;
  void *v234;
  int v235;
  int32x2_t v236;
  uint64_t v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int *v241;
  unsigned int v242;
  char *v243;
  uint64_t v244;
  id v245;
  __int128 v246;
  __int128 v247;
  float64x2_t v248;
  float v249;
  id v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  std::string __str;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  char v258;
  std::string v259;
  uint64_t v260;
  std::string v261;
  uint64_t v262;
  uint64_t v263;
  void *__p;
  uint64_t v265;
  _BYTE v266[8];
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  __int128 v275;
  std::string::size_type v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  std::string::value_type *v280;
  std::string::size_type v281;
  uint64_t v282;
  __int128 v283;
  __int128 v284;
  char v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;

  v288 = *MEMORY[0x1E0C80C00];
  v10 = a4;
  objc_msgSend_propertyWithSemantic_(v10, v11, *a3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_type(v12, v13, v14) == 2)
  {
    objc_msgSend_URLValue(v12, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
      goto LABEL_337;
  }
  if (objc_msgSend_type(v12, v15, v16) == 1)
  {
    objc_msgSend_stringValue(v12, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v20)
    {
      objc_msgSend_URLValue(v12, v18, v19);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if (v21)
      {
        objc_msgSend_URLValue(v12, v22, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_path(v24, v25, v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        objc_msgSend_stringValue(v12, v22, v23);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
      }
      memset(&__str, 0, sizeof(__str));
      v245 = objc_retainAutorelease(v27);
      v60 = (char *)objc_msgSend_UTF8String(v245, v58, v59);
      sub_1DCB0345C(&__str, v60);
      v63 = *(void **)(a1 + 8);
      if (!v63)
        goto LABEL_90;
      v283 = 0uLL;
      *(_QWORD *)&v284 = 0;
      objc_msgSend_URLByDeletingLastPathComponent(v63, v61, v62);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_path(v64, v65, v66);
      v67 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v70 = (char *)objc_msgSend_UTF8String(v67, v68, v69);
      sub_1DCB0345C(&v283, v70);

      std::string::append((std::string *)&v283, "/");
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __str.__r_.__value_.__l.__size_;
      if (SBYTE7(v284) < 0)
      {
        v72 = *((_QWORD *)&v283 + 1);
        if (size <= *((_QWORD *)&v283 + 1))
          goto LABEL_89;
      }
      else
      {
        v72 = BYTE7(v284);
        if (size <= BYTE7(v284))
          goto LABEL_90;
      }
      std::string::basic_string((std::string *)&v286, &__str, 0, v72, (std::allocator<char> *)&v268);
      v62 = *((_QWORD *)&v286 + 1);
      if ((SBYTE7(v287) & 0x80u) == 0)
        v80 = BYTE7(v287);
      else
        v80 = *((_QWORD *)&v286 + 1);
      v81 = BYTE7(v284);
      v82 = BYTE7(v284);
      if (SBYTE7(v284) < 0)
        v81 = *((_QWORD *)&v283 + 1);
      if (v80 == v81)
      {
        if ((SBYTE7(v284) & 0x80u) == 0)
          v61 = (const char *)&v283;
        else
          v61 = (const char *)v283;
        if ((BYTE7(v287) & 0x80) != 0)
        {
          v234 = (void *)v286;
          v235 = memcmp((const void *)v286, v61, *((size_t *)&v286 + 1));
          operator delete(v234);
          v82 = BYTE7(v284);
          if (!v235)
            goto LABEL_75;
          goto LABEL_88;
        }
        if (!BYTE7(v287))
        {
LABEL_75:
          if ((v82 & 0x80u) == 0)
            v92 = v82;
          else
            v92 = *((_QWORD *)&v283 + 1);
          std::string::basic_string((std::string *)&v286, &__str, v92, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v268);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v286;
          __str.__r_.__value_.__r.__words[2] = v287;
          if (SBYTE7(v284) < 0)
            operator delete((void *)v283);
          goto LABEL_91;
        }
        v83 = BYTE7(v287) - 1;
        v84 = (unsigned __int8 *)&v286;
        do
        {
          v86 = *v84++;
          v85 = v86;
          v88 = *(unsigned __int8 *)v61++;
          v87 = v88;
          v90 = v83-- != 0;
          v91 = v85 == v87;
        }
        while (v85 == v87 && v90);
      }
      else
      {
        v91 = 0;
      }
      if ((BYTE7(v287) & 0x80) != 0)
      {
        operator delete((void *)v286);
        v82 = BYTE7(v284);
        if (v91)
          goto LABEL_75;
      }
      else if (v91)
      {
        goto LABEL_75;
      }
LABEL_88:
      if ((v82 & 0x80) == 0)
      {
LABEL_90:
        objc_msgSend_lastPathComponent(v245, v61, v62);
        v104 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v107 = objc_msgSend_UTF8String(v104, v105, v106);
        MEMORY[0x1DF0D201C](&__str, v107);

LABEL_91:
        v251 = 0;
        v252 = 0;
        v253 = 0;
        v250 = v12;
        v280 = 0;
        v281 = 0;
        v282 = 0;
        v108 = off_1EA577380[a2];
        sub_1DCB0345C(&v280, v108);
        v277 = 0;
        v278 = 0;
        v279 = 0;
        v243 = off_1EA5773C8[a2];
        sub_1DCB0345C(&v277, v243);
        v275 = 0uLL;
        v276 = 0;
        if (*((char *)a6 + 23) >= 0)
          v109 = *((unsigned __int8 *)a6 + 23);
        else
          v109 = (size_t)a6[1];
        *(_QWORD *)&v284 = 0;
        v283 = 0uLL;
        sub_1DCB01128((uint64_t)&v283, v109 + 10);
        if ((SBYTE7(v284) & 0x80u) == 0)
          v110 = &v283;
        else
          v110 = (__int128 *)v283;
        if (v109)
        {
          if (*((char *)a6 + 23) >= 0)
            v111 = a6;
          else
            v111 = *a6;
          memmove(v110, v111, v109);
        }
        strcpy((char *)v110 + v109, "/uvReader_");
        sub_1DCB0345C(&v286, "st");
        if ((SBYTE7(v287) & 0x80u) == 0)
          v112 = (const std::string::value_type *)&v286;
        else
          v112 = (const std::string::value_type *)v286;
        if ((SBYTE7(v287) & 0x80u) == 0)
          v113 = BYTE7(v287);
        else
          v113 = *((_QWORD *)&v286 + 1);
        v114 = std::string::append((std::string *)&v283, v112, v113);
        v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
        v276 = v114->__r_.__value_.__r.__words[2];
        v275 = v115;
        v114->__r_.__value_.__l.__size_ = 0;
        v114->__r_.__value_.__r.__words[2] = 0;
        v114->__r_.__value_.__r.__words[0] = 0;
        if (SBYTE7(v287) < 0)
          operator delete((void *)v286);
        if (SBYTE7(v284) < 0)
          operator delete((void *)v283);
        v286 = 0u;
        v287 = 0u;
        v116 = (uint64_t *)(a1 + 112);
        v117 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428(v116);
        MEMORY[0x1DF0D123C](&v283, &v275);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v117, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v283);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v283);
        v272 = 0;
        v273 = 0;
        v274 = 0;
        LODWORD(v283) = 1;
        *((_QWORD *)&v283 + 1) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        *((_QWORD *)&v284 + 1) = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v118 = MEMORY[0x1E0DF30E0];
        v272 = MEMORY[0x1E0DF30E0] + 16;
        if ((BYTE8(v284) & 7) != 0)
        {
          v119 = (unsigned int *)(*((_QWORD *)&v284 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v120 = __ldxr(v119);
          while (__stlxr(v120 - 2, v119));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v284);
        if (*((_QWORD *)&v283 + 1))
          sub_1DCAEED94(*((uint64_t *)&v283 + 1));
        if (v273 && (*(_BYTE *)(v273 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v272 + 32))(&v272))
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          *(_QWORD *)&v283 = v118 + 16;
          v121 = *((_QWORD *)&v283 + 1);
          if (*((_QWORD *)&v283 + 1))
          {
            v122 = (unint64_t *)(*((_QWORD *)&v283 + 1) + 48);
            do
              v123 = __ldxr(v122);
            while (__stxr(v123 + 1, v122));
          }
          v124 = v273;
          v273 = v121;
          if (v124)
            sub_1DCAEED94(v124);
          sub_1DCBC41BC((uint64_t)&v274, &v284);
          sub_1DCBC4210((uint64_t)&v274 + 4, (_DWORD *)&v284 + 1);
          MEMORY[0x1DF0D0EA0](&v283);
        }
        else
        {
          sub_1DCBC6D7C(&v268, v116);
          MEMORY[0x1DF0D123C](&__p, &v275);
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
          v125 = *((_QWORD *)&v283 + 1);
          if (*((_QWORD *)&v283 + 1))
          {
            v126 = (unint64_t *)(*((_QWORD *)&v283 + 1) + 48);
            do
              v127 = __ldxr(v126);
            while (__stxr(v127 + 1, v126));
          }
          v128 = v273;
          v273 = v125;
          if (v128)
            sub_1DCAEED94(v128);
          sub_1DCBC41BC((uint64_t)&v274, &v284);
          sub_1DCBC4210((uint64_t)&v274 + 4, (_DWORD *)&v284 + 1);
          MEMORY[0x1DF0D0EA0](&v283);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&__p);
          v129 = v269;
          if (v269)
          {
            v130 = (unsigned int *)(v269 + 8);
            do
            {
              v131 = __ldxr(v130);
              v132 = v131 - 1;
            }
            while (__stlxr(v132, v130));
            if (!v132)
              (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
          }
          MEMORY[0x1DF0D1254](&__p, "UsdPrimvarReader_float2");
          *(_QWORD *)&v283 = __p;
          *((_QWORD *)&v283 + 1) = (char *)&off_1EA5753D8 + 1;
          if ((__p & 7) != 0)
          {
            v133 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
            do
              v134 = __ldxr(v133);
            while (__stxr(v134 + 2, v133));
            if ((v134 & 1) == 0)
              *(_QWORD *)&v283 = v283 & 0xFFFFFFFFFFFFFFF8;
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v272, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v283);
          if ((v271 & 7) != 0)
          {
            v135 = (unsigned int *)(v271 & 0xFFFFFFFFFFFFFFF8);
            do
              v136 = __ldxr(v135);
            while (__stlxr(v136 - 2, v135));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v270);
          if (v269)
            sub_1DCAEED94(v269);
          sub_1DCAEEE2C((uint64_t)&v283);
          if ((__p & 7) != 0)
          {
            v137 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
            do
              v138 = __ldxr(v137);
            while (__stlxr(v138 - 2, v137));
          }
          v283 = 0u;
          v284 = 0u;
          MEMORY[0x1DF0D1254](&__p, "varname");
          v139 = (unint64_t *)MEMORY[0x1E0DF2618];
          if (!atomic_load(MEMORY[0x1E0DF2618]))
            sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
          if ((__p & 7) != 0)
          {
            v141 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
            do
              v142 = __ldxr(v141);
            while (__stlxr(v142 - 2, v141));
          }
          sub_1DCB0345C(&__p, "st");
          MEMORY[0x1DF0D1260](&v261, &__p);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
          if ((v261.__r_.__value_.__s.__data_[0] & 7) != 0)
          {
            v143 = (unsigned int *)(v261.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v144 = __ldxr(v143);
            while (__stlxr(v144 - 2, v143));
          }
          if ((v266[7] & 0x80000000) != 0)
            operator delete(__p);
          MEMORY[0x1DF0D1254](&v261, "result");
          if (!atomic_load(v139))
            sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateOutput();
          if ((v267 & 7) != 0)
          {
            v146 = (unsigned int *)(v267 & 0xFFFFFFFFFFFFFFF8);
            do
              v147 = __ldxr(v146);
            while (__stlxr(v147 - 2, v146));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)v266);
          if (v265)
            sub_1DCAEED94(v265);
          if ((v261.__r_.__value_.__s.__data_[0] & 7) != 0)
          {
            v148 = (unsigned int *)(v261.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v149 = __ldxr(v148);
            while (__stlxr(v149 - 2, v148));
          }
          if ((BYTE8(v284) & 7) != 0)
          {
            v150 = (unsigned int *)(*((_QWORD *)&v284 + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v151 = __ldxr(v150);
            while (__stlxr(v151 - 2, v150));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v284);
          if (*((_QWORD *)&v283 + 1))
            sub_1DCAEED94(*((uint64_t *)&v283 + 1));
        }
        v251 = 0;
        v252 = 0;
        v253 = 0;
        sub_1DCBC6D7C((uint64_t *)&v256, v116);
        if (*((char *)a6 + 23) >= 0)
          v152 = *((unsigned __int8 *)a6 + 23);
        else
          v152 = (size_t)a6[1];
        memset(&v259, 0, sizeof(v259));
        sub_1DCB01128((uint64_t)&v259, v152 + 1);
        if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v153 = &v259;
        else
          v153 = (std::string *)v259.__r_.__value_.__r.__words[0];
        if (v152)
        {
          if (*((char *)a6 + 23) >= 0)
            v154 = a6;
          else
            v154 = *a6;
          memmove(v153, v154, v152);
        }
        *(_WORD *)((char *)&v153->__r_.__value_.__l.__data_ + v152) = 47;
        if (v282 >= 0)
          v155 = (const std::string::value_type *)&v280;
        else
          v155 = v280;
        if (v282 >= 0)
          v156 = HIBYTE(v282);
        else
          v156 = v281;
        v157 = std::string::append(&v259, v155, v156);
        v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
        v261.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v158;
        v157->__r_.__value_.__l.__size_ = 0;
        v157->__r_.__value_.__r.__words[2] = 0;
        v157->__r_.__value_.__r.__words[0] = 0;
        v159 = std::string::append(&v261, "_texture");
        v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
        *(_QWORD *)&v284 = *((_QWORD *)&v159->__r_.__value_.__l + 2);
        v283 = v160;
        v159->__r_.__value_.__l.__size_ = 0;
        v159->__r_.__value_.__r.__words[2] = 0;
        v159->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1DF0D123C](&v263, &v283);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v263);
        if (SBYTE7(v284) < 0)
          operator delete((void *)v283);
        if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v261.__r_.__value_.__l.__data_);
        if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v259.__r_.__value_.__l.__data_);
        v161 = v257;
        if (v257)
        {
          v162 = (unsigned int *)(v257 + 8);
          do
          {
            v163 = __ldxr(v162);
            v164 = v163 - 1;
          }
          while (__stlxr(v164, v162));
          if (!v164)
            (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
        }
        MEMORY[0x1DF0D1254](&v259, "UsdUVTexture");
        *(_QWORD *)&v283 = v259.__r_.__value_.__r.__words[0];
        *((_QWORD *)&v283 + 1) = (char *)&off_1EA5753D8 + 1;
        if ((v259.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v165 = (unsigned int *)(v259.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v166 = __ldxr(v165);
          while (__stxr(v166 + 2, v165));
          if ((v166 & 1) == 0)
            *(_QWORD *)&v283 = v283 & 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v251, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v283);
        if ((v262 & 7) != 0)
        {
          v167 = (unsigned int *)(v262 & 0xFFFFFFFFFFFFFFF8);
          do
            v168 = __ldxr(v167);
          while (__stlxr(v168 - 2, v167));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v261.__r_.__value_.__r.__words[2]);
        if (v261.__r_.__value_.__l.__size_)
          sub_1DCAEED94(v261.__r_.__value_.__l.__size_);
        sub_1DCAEEE2C((uint64_t)&v283);
        if ((v259.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v169 = (unsigned int *)(v259.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v170 = __ldxr(v169);
          while (__stlxr(v170 - 2, v169));
        }
        MEMORY[0x1DF0D1254](&v256, "file");
        v171 = (unint64_t *)MEMORY[0x1E0DF2618];
        if (!atomic_load(MEMORY[0x1E0DF2618]))
          sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
        MEMORY[0x1DF0D0CC0](&v283, &__str);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
        if (v285 < 0)
          operator delete(*((void **)&v284 + 1));
        if (SBYTE7(v284) < 0)
          operator delete((void *)v283);
        if ((v260 & 7) != 0)
        {
          v173 = (unsigned int *)(v260 & 0xFFFFFFFFFFFFFFF8);
          do
            v174 = __ldxr(v173);
          while (__stlxr(v174 - 2, v173));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v259.__r_.__value_.__r.__words[2]);
        if (v259.__r_.__value_.__l.__size_)
          sub_1DCAEED94(v259.__r_.__value_.__l.__size_);
        if ((v256 & 7) != 0)
        {
          v175 = (unsigned int *)((unint64_t)v256 & 0xFFFFFFFFFFFFFFF8);
          do
            v176 = __ldxr(v175);
          while (__stlxr(v176 - 2, v175));
        }
        sub_1DCB0345C(&v256, "st");
        MEMORY[0x1DF0D1260](&v263, &v256);
        if (!atomic_load(v171))
          sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
        MEMORY[0x1DF0D1254](&v255, "result");
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v272, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v255);
        MEMORY[0x1DF0D192C](&v283, &v259);
        if ((v260 & 7) != 0)
        {
          v178 = (unsigned int *)(v260 & 0xFFFFFFFFFFFFFFF8);
          do
            v179 = __ldxr(v178);
          while (__stlxr(v179 - 2, v178));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v259.__r_.__value_.__r.__words[2]);
        if (v259.__r_.__value_.__l.__size_)
          sub_1DCAEED94(v259.__r_.__value_.__l.__size_);
        if ((v255 & 7) != 0)
        {
          v180 = (unsigned int *)(v255 & 0xFFFFFFFFFFFFFFF8);
          do
            v181 = __ldxr(v180);
          while (__stlxr(v181 - 2, v180));
        }
        if ((BYTE8(v284) & 7) != 0)
        {
          v182 = (unsigned int *)(*((_QWORD *)&v284 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v183 = __ldxr(v182);
          while (__stlxr(v183 - 2, v182));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v284);
        if (*((_QWORD *)&v283 + 1))
          sub_1DCAEED94(*((uint64_t *)&v283 + 1));
        if ((v263 & 7) != 0)
        {
          v184 = (unsigned int *)(v263 & 0xFFFFFFFFFFFFFFF8);
          do
            v185 = __ldxr(v184);
          while (__stlxr(v185 - 2, v184));
        }
        if (v258 < 0)
          operator delete(v256);
        v256 = 0;
        v186 = HIBYTE(v279);
        if (v279 < 0)
          v186 = v278;
        v187 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v171);
        if (v186 == 3)
        {
          if (!v187)
            v187 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
          v188 = (void **)((char *)v187 + 160);
        }
        else
        {
          if (!v187)
            v187 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
          v188 = (void **)((char *)v187 + 56);
        }
        v256 = *v188;
        MEMORY[0x1DF0D1260](&v259, &v277);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateOutput();
        if ((BYTE8(v284) & 7) != 0)
        {
          v189 = (unsigned int *)(*((_QWORD *)&v284 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v190 = __ldxr(v189);
          while (__stlxr(v190 - 2, v189));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v284);
        if (*((_QWORD *)&v283 + 1))
          sub_1DCAEED94(*((uint64_t *)&v283 + 1));
        if ((v259.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v193 = (unsigned int *)(v259.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v194 = __ldxr(v193);
          while (__stlxr(v194 - 2, v193));
        }
        objc_msgSend_textureSamplerValue(v250, v191, v192, v243);
        v195 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_hardwareFilter(v195, v196, v197);
        v198 = (void *)objc_claimAutoreleasedReturnValue();

        if (v198)
        {
          MEMORY[0x1DF0D1254](&v263, "wrapS");
          if (!atomic_load(v171))
            sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
          v202 = objc_msgSend_sWrapMode(v198, v200, v201);
          if (v202 == 1)
            v203 = "repeat";
          else
            v203 = "clamp";
          if (v202 == 2)
            v204 = "mirror";
          else
            v204 = v203;
          MEMORY[0x1DF0D1254](&v255, v204);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
          if ((v255 & 7) != 0)
          {
            v205 = (unsigned int *)(v255 & 0xFFFFFFFFFFFFFFF8);
            do
              v206 = __ldxr(v205);
            while (__stlxr(v206 - 2, v205));
          }
          if ((v260 & 7) != 0)
          {
            v207 = (unsigned int *)(v260 & 0xFFFFFFFFFFFFFFF8);
            do
              v208 = __ldxr(v207);
            while (__stlxr(v208 - 2, v207));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v259.__r_.__value_.__r.__words[2]);
          if (v259.__r_.__value_.__l.__size_)
            sub_1DCAEED94(v259.__r_.__value_.__l.__size_);
          if ((v263 & 7) != 0)
          {
            v209 = (unsigned int *)(v263 & 0xFFFFFFFFFFFFFFF8);
            do
              v210 = __ldxr(v209);
            while (__stlxr(v210 - 2, v209));
          }
          MEMORY[0x1DF0D1254](&v263, "wrapT");
          if (!atomic_load(v171))
            sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
          v214 = objc_msgSend_tWrapMode(v198, v212, v213);
          if (v214 == 1)
            v215 = "repeat";
          else
            v215 = "clamp";
          if (v214 == 2)
            v216 = "mirror";
          else
            v216 = v215;
          MEMORY[0x1DF0D1254](&v255, v216);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
          if ((v255 & 7) != 0)
          {
            v217 = (unsigned int *)(v255 & 0xFFFFFFFFFFFFFFF8);
            do
              v218 = __ldxr(v217);
            while (__stlxr(v218 - 2, v217));
          }
          if ((v260 & 7) != 0)
          {
            v219 = (unsigned int *)(v260 & 0xFFFFFFFFFFFFFFF8);
            do
              v220 = __ldxr(v219);
            while (__stlxr(v220 - 2, v219));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v259.__r_.__value_.__r.__words[2]);
          if (v259.__r_.__value_.__l.__size_)
            sub_1DCAEED94(v259.__r_.__value_.__l.__size_);
          if ((v263 & 7) != 0)
          {
            v221 = (unsigned int *)(v263 & 0xFFFFFFFFFFFFFFF8);
            do
              v222 = __ldxr(v221);
            while (__stlxr(v222 - 2, v221));
          }
        }

        MEMORY[0x1DF0D0EA0](&v272);
        if ((BYTE8(v287) & 7) != 0)
        {
          v223 = (unsigned int *)(*((_QWORD *)&v287 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v224 = __ldxr(v223);
          while (__stlxr(v224 - 2, v223));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v287);
        if (*((_QWORD *)&v286 + 1))
          sub_1DCAEED94(*((uint64_t *)&v286 + 1));
        if (SHIBYTE(v276) < 0)
          operator delete((void *)v275);
        if (SHIBYTE(v279) < 0)
          operator delete(v277);
        if (SHIBYTE(v282) < 0)
          operator delete(v280);

        MEMORY[0x1DF0D1254](&v268, v108);
        if (!atomic_load(v171))
          sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
        MEMORY[0x1DF0D1254](&__p, v244);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v251, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
        MEMORY[0x1DF0D192C](&v283, &v286);
        if ((BYTE8(v287) & 7) != 0)
        {
          v226 = (unsigned int *)(*((_QWORD *)&v287 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v227 = __ldxr(v226);
          while (__stlxr(v227 - 2, v226));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v287);
        if (*((_QWORD *)&v286 + 1))
          sub_1DCAEED94(*((uint64_t *)&v286 + 1));
        if ((__p & 7) != 0)
        {
          v228 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
          do
            v229 = __ldxr(v228);
          while (__stlxr(v229 - 2, v228));
        }
        if ((BYTE8(v284) & 7) != 0)
        {
          v230 = (unsigned int *)(*((_QWORD *)&v284 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v231 = __ldxr(v230);
          while (__stlxr(v231 - 2, v230));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v284);
        if (*((_QWORD *)&v283 + 1))
          sub_1DCAEED94(*((uint64_t *)&v283 + 1));
        if ((v268 & 7) != 0)
        {
          v232 = (unsigned int *)(v268 & 0xFFFFFFFFFFFFFFF8);
          do
            v233 = __ldxr(v232);
          while (__stlxr(v233 - 2, v232));
        }
        MEMORY[0x1DF0D0EA0](&v251);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);

        goto LABEL_337;
      }
LABEL_89:
      operator delete((void *)v283);
      goto LABEL_90;
    }
  }
  if (objc_msgSend_type(v12, v18, v19) == 3)
  {
    objc_msgSend_textureSamplerValue(v12, v28, v29);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    if (v32)
    {
      objc_msgSend_textureSamplerValue(v12, v30, v31);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_texture(v33, v34, v35);

    }
    goto LABEL_337;
  }
  if (objc_msgSend_type(v12, v28, v29) == 8)
  {
    objc_msgSend_float4Value(v12, v36, v37);
    v246 = v38;
    *((_QWORD *)&v286 + 1) = (char *)&off_1EA575040 + 2;
    v39 = operator new();
    *(_QWORD *)v39 = v246;
    *(_DWORD *)(v39 + 8) = DWORD2(v246);
    v40 = (unsigned int *)(v39 + 12);
    atomic_store(0, (unsigned int *)(v39 + 12));
    *(_QWORD *)&v286 = v39;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    MEMORY[0x1DF0D1254](&v268, off_1EA577380[a2]);
    if (!atomic_load(MEMORY[0x1E0DF2618]))
      sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
    if ((BYTE8(v284) & 7) != 0)
    {
      v43 = (unsigned int *)(*((_QWORD *)&v284 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stlxr(v44 - 2, v43));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v284);
    if (*((_QWORD *)&v283 + 1))
      sub_1DCAEED94(*((uint64_t *)&v283 + 1));
    if ((v268 & 7) != 0)
    {
      v45 = (unsigned int *)(v268 & 0xFFFFFFFFFFFFFFF8);
      do
        v46 = __ldxr(v45);
      while (__stlxr(v46 - 2, v45));
    }
LABEL_38:
    sub_1DCAEEE2C((uint64_t)&v286);
    goto LABEL_337;
  }
  if (objc_msgSend_type(v12, v36, v37) == 7)
  {
    objc_msgSend_float3Value(v12, v47, v48);
    v247 = v49;
    *((_QWORD *)&v286 + 1) = (char *)&off_1EA575040 + 2;
    v50 = operator new();
    *(_QWORD *)v50 = v247;
    *(_DWORD *)(v50 + 8) = DWORD2(v247);
    v51 = (unsigned int *)(v50 + 12);
    atomic_store(0, (unsigned int *)(v50 + 12));
    *(_QWORD *)&v286 = v50;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
    MEMORY[0x1DF0D1254](&v268, off_1EA577380[a2]);
    if (!atomic_load(MEMORY[0x1E0DF2618]))
      sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
    if ((BYTE8(v284) & 7) != 0)
    {
      v54 = (unsigned int *)(*((_QWORD *)&v284 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v55 = __ldxr(v54);
      while (__stlxr(v55 - 2, v54));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v284);
    if (*((_QWORD *)&v283 + 1))
      sub_1DCAEED94(*((uint64_t *)&v283 + 1));
    if ((v268 & 7) != 0)
    {
      v56 = (unsigned int *)(v268 & 0xFFFFFFFFFFFFFFF8);
      do
        v57 = __ldxr(v56);
      while (__stlxr(v57 - 2, v56));
    }
    goto LABEL_38;
  }
  if (objc_msgSend_type(v12, v47, v48) == 5)
  {
    objc_msgSend_floatValue(v12, v73, v74);
    v76 = v75;
    MEMORY[0x1DF0D1254](&v268, off_1EA577380[a2]);
    if (!atomic_load(MEMORY[0x1E0DF2618]))
      sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
    *((_QWORD *)&v286 + 1) = &unk_1EA5762F3;
    LODWORD(v286) = v76;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
    sub_1DCAEEE2C((uint64_t)&v286);
    sub_1DCB93EA0((uint64_t)&v283);
    if ((v268 & 7) != 0)
    {
      v78 = (unsigned int *)(v268 & 0xFFFFFFFFFFFFFFF8);
      do
        v79 = __ldxr(v78);
      while (__stlxr(v79 - 2, v78));
    }
  }
  else if (objc_msgSend_type(v12, v73, v74) == 4)
  {
    v95 = (CGColor *)objc_msgSend_color(v12, v93, v94);
    Components = CGColorGetComponents(v95);
    ColorSpace = CGColorGetColorSpace(v95);
    Model = CGColorSpaceGetModel(ColorSpace);
    v99 = 1.0;
    if (Model)
    {
      if (Model == kCGColorSpaceModelRGB)
      {
        v248 = *(float64x2_t *)Components;
        v100 = Components[2];
        NumberOfComponents = CGColorGetNumberOfComponents(v95);
        v102 = vcvt_f32_f64(v248);
        v103 = v100;
        v249 = v103;
        if (NumberOfComponents == 4)
          v99 = Components[3];
      }
      else
      {
        v102 = 0;
        v249 = 0.0;
      }
    }
    else
    {
      v236 = *(int32x2_t *)Components;
      *(float *)v236.i32 = *Components;
      v249 = *(float *)v236.i32;
      v102 = (float32x2_t)vdup_lane_s32(v236, 0);
    }
    MEMORY[0x1DF0D1254](&v268, off_1EA577380[a2]);
    if (!atomic_load(MEMORY[0x1E0DF2618]))
      sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
    *((_QWORD *)&v286 + 1) = (char *)&off_1EA575268 + 2;
    v238 = operator new();
    *(float32x2_t *)v238 = v102;
    *(float *)(v238 + 8) = v249;
    *(float *)(v238 + 12) = v99;
    v239 = (unsigned int *)(v238 + 16);
    atomic_store(0, (unsigned int *)(v238 + 16));
    *(_QWORD *)&v286 = v238;
    do
      v240 = __ldxr(v239);
    while (__stxr(v240 + 1, v239));
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
    sub_1DCAEEE2C((uint64_t)&v286);
    sub_1DCB93EA0((uint64_t)&v283);
    if ((v268 & 7) != 0)
    {
      v241 = (unsigned int *)(v268 & 0xFFFFFFFFFFFFFFF8);
      do
        v242 = __ldxr(v241);
      while (__stlxr(v242 - 2, v241));
    }
  }
LABEL_337:

}

void sub_1DCC01F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  void *v60;
  void *v61;
  uint64_t v62;

  MEMORY[0x1DF0D0EA0](&a14);
  MEMORY[0x1DF0D0EA0](&a45);
  sub_1DCB4FAD8(v62 - 176);
  if (a53 < 0)
    operator delete(__p);
  if (a60 < 0)
    operator delete(a55);
  if (*(char *)(v62 - 225) < 0)
    operator delete(*(void **)(v62 - 248));

  if (a22 < 0)
    operator delete(a17);

  _Unwind_Resume(a1);
}

void sub_1DCC026C0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  id v4;
  id v7;
  void *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string::size_type size;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  unsigned int *v36;
  unsigned int v37;
  id v38;
  std::string v39;
  std::string v40;
  void *__p[2];
  std::string::size_type v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;

  v7 = a2;
  v8 = v7;
  v9 = *(_QWORD **)(a1 + 208);
  if (!v9)
    goto LABEL_12;
  v3 = (_QWORD *)(a1 + 208);
  do
  {
    v10 = v9[4];
    v11 = v10 >= (unint64_t)v7;
    if (v10 >= (unint64_t)v7)
      v12 = v9;
    else
      v12 = v9 + 1;
    if (v11)
      v3 = v9;
    v9 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v3 != (_QWORD *)(a1 + 208) && v3[4] <= (unint64_t)v7)
  {

    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(_QWORD *)a3 = MEMORY[0x1E0DF3108] + 16;
  }
  else
  {
LABEL_12:

    v44 = 0uLL;
    v45 = 0;
    if (v8)
    {
      objc_msgSend_name(v8, v13, v14);
      v3 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      sub_1DCC02BEC(v3);
      v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v17 = (char *)objc_msgSend_UTF8String(v4, v15, v16);
    }
    else
    {
      v17 = "Default";
    }
    sub_1DCB0345C(&v44, v17);
    if (v8)
    {

    }
    v18 = HIBYTE(v45);
    if (v45 < 0)
      v18 = *((_QWORD *)&v44 + 1);
    if (v18)
    {
      sub_1DCC02D3C(&v44, (_QWORD *)(a1 + 160), (uint64_t)__p);
      if (SHIBYTE(v45) < 0)
        operator delete((void *)v44);
      v44 = *(_OWORD *)__p;
      v45 = v42;
      __p[0] = 0;
      __p[1] = 0;
      v42 = 0;
      sub_1DCBFFF08((char *)a1, (uint64_t)&v39);
      v19 = std::string::append(&v39, "/");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (v45 >= 0)
        v21 = (const std::string::value_type *)&v44;
      else
        v21 = (const std::string::value_type *)v44;
      if (v45 >= 0)
        v22 = HIBYTE(v45);
      else
        v22 = *((_QWORD *)&v44 + 1);
      v23 = std::string::append(&v40, v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v42 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      sub_1DCBC6D7C((uint64_t *)&v40, (uint64_t *)(a1 + 112));
      MEMORY[0x1DF0D123C](&v39, __p);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Define();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v39);
      size = v40.__r_.__value_.__l.__size_;
      if (v40.__r_.__value_.__l.__size_)
      {
        v26 = (unsigned int *)(v40.__r_.__value_.__l.__size_ + 8);
        do
        {
          v27 = __ldxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
          (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
      }
      memset(&v40, 0, sizeof(v40));
      sub_1DCC000EC(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)a3, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v40);
      if (v8)
        sub_1DCC00640(a1, v8, a3, (uint64_t)&v40);
      v38 = v8;
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
      v29 = sub_1DCC09E34(a1 + 200, (unint64_t *)&v38, (uint64_t)&unk_1DCC58300, (id **)&v39);
      v30 = v29;
      v31 = *(_QWORD *)(a3 + 8);
      if (v31)
      {
        v32 = (unint64_t *)(v31 + 48);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v34 = v29[6];
      v30[6] = v31;
      if (v34)
        sub_1DCAEED94(v34);
      sub_1DCBC41BC((uint64_t)(v30 + 7), (_DWORD *)(a3 + 16));
      sub_1DCBC4210((uint64_t)v30 + 60, (_DWORD *)(a3 + 20));
      v35 = v38;
      v38 = 0;

      MEMORY[0x1DF0D0EA0](&v40);
      if (SHIBYTE(v42) < 0)
        operator delete(__p[0]);
    }
    else
    {
      LODWORD(__p[0]) = 1;
      __p[1] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v43 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *(_QWORD *)a3 = MEMORY[0x1E0DF3108] + 16;
      if ((v43 & 7) != 0)
      {
        v36 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v42);
      if (__p[1])
        sub_1DCAEED94((uint64_t)__p[1]);
    }
    if (SHIBYTE(v45) < 0)
      operator delete((void *)v44);
  }

}

void sub_1DCC02A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  _Unwind_Resume(a1);
}

id *sub_1DCC02BB8(id *a1)
{
  id v2;

  v2 = *a1;
  *a1 = 0;

  return a1;
}

__CFString *sub_1DCC02BEC(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  __CFString *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  id v21;

  v1 = a1;
  if (objc_msgSend_length(v1, v2, v3))
  {
    v21 = 0;
    objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E0CB38E8], v4, (uint64_t)CFSTR("[^A-Za-z0-9]"), 1, &v21);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v21;
    v9 = objc_msgSend_length(v1, v7, v8);
    objc_msgSend_stringByReplacingMatchesInString_options_range_withTemplate_(v5, v10, (uint64_t)v1, 0, 0, v9, CFSTR("_"));
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E0CB3500], v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_characterAtIndex_(v11, v15, 0);
    if (objc_msgSend_characterIsMember_(v14, v17, v16))
    {
      objc_msgSend_stringByAppendingString_(CFSTR("_"), v18, (uint64_t)v11);
      v19 = objc_claimAutoreleasedReturnValue();

      v11 = (__CFString *)v19;
    }

  }
  else
  {
    v11 = &stru_1EA577998;
  }

  return v11;
}

void sub_1DCC02D00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

double sub_1DCC02D3C@<D0>(__int128 *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  __int128 *p_dst;
  unsigned int v10;
  int v11;
  unint64_t v12;
  __int128 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  double result;
  __int128 v23;
  _OWORD v24[4];
  void *__p[2];
  __int128 v26;
  __int128 v27;
  _OWORD v28[9];
  uint64_t v29;
  __int128 __dst;
  uint64_t v31;

  v5 = a3;
  __dst = 0uLL;
  v31 = 0;
  LODWORD(a3) = *((char *)a1 + 23);
  if ((a3 & 0x80000000) != 0)
  {
    sub_1DCACA658(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
    LOBYTE(a3) = *((_BYTE *)a1 + 23);
  }
  else
  {
    __dst = *a1;
    v31 = *((_QWORD *)a1 + 2);
  }
  a3 = a3;
  if ((a3 & 0x80u) != 0)
    a3 = *((_QWORD *)a1 + 1);
  if (a3)
  {
    v6 = 0;
    v7 = 1;
    v8 = MEMORY[0x1E0C80978];
    do
    {
      if (v31 >= 0)
        p_dst = &__dst;
      else
        p_dst = (__int128 *)__dst;
      v10 = *((char *)p_dst + v6);
      if ((v10 & 0x80000000) != 0)
        v11 = __maskrune(*((char *)p_dst + v6), 0x100uLL);
      else
        v11 = *(_DWORD *)(v8 + 4 * v10 + 60) & 0x100;
      if (!v11
        && (v7 == 1 || (v10 & 0x80000000) != 0 || (*(_DWORD *)(v8 + 4 * v10 + 60) & 0x400) == 0)
        && v10 != 47
        && v10 != 95)
      {
        if (v31 >= 0)
          v14 = &__dst;
        else
          v14 = (__int128 *)__dst;
        *((_BYTE *)v14 + v6) = 95;
      }
      v6 = v7;
      v12 = *((unsigned __int8 *)a1 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *((_QWORD *)a1 + 1);
    }
    while (v12 > v7++);
  }
  if (sub_1DCC08FB4(a2, (unsigned __int8 *)&__dst))
  {
    v15 = 0;
    v16 = *MEMORY[0x1E0DE4F50];
    v18 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v17 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v19 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      v29 = 0;
      v27 = 0u;
      memset(v28, 0, sizeof(v28));
      *(_OWORD *)__p = 0u;
      v26 = 0u;
      memset(v24, 0, sizeof(v24));
      v23 = 0u;
      sub_1DCB86A2C((uint64_t)&v23);
      v20 = v31 >= 0 ? &__dst : (__int128 *)__dst;
      v21 = v31 >= 0 ? HIBYTE(v31) : *((_QWORD *)&__dst + 1);
      sub_1DCB03734(v24, (uint64_t)v20, v21);
      std::ostream::operator<<();
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      std::stringbuf::str();
      if (!sub_1DCC08FB4(a2, (unsigned __int8 *)v5))
        break;
      if (*(char *)(v5 + 23) < 0)
        operator delete(*(void **)v5);
      *(_QWORD *)&v23 = v16;
      *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v16 - 24)) = v18;
      *(_QWORD *)&v24[0] = v17;
      *((_QWORD *)&v24[0] + 1) = v19;
      if (SHIBYTE(v26) < 0)
        operator delete(__p[1]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1DF0D2238](v28);
      ++v15;
    }
    sub_1DCAD3738((uint64_t)a2, (unsigned __int8 *)v5, v5);
    *(_QWORD *)&v23 = v16;
    *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v16 - 24)) = v18;
    *(_QWORD *)&v24[0] = v17;
    *((_QWORD *)&v24[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v26) < 0)
      operator delete(__p[1]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1DF0D2238](v28);
    if (SHIBYTE(v31) < 0)
      operator delete((void *)__dst);
  }
  else
  {
    sub_1DCAD3738((uint64_t)a2, (unsigned __int8 *)&__dst, (uint64_t)&__dst);
    result = *(double *)&__dst;
    *(_OWORD *)v5 = __dst;
    *(_QWORD *)(v5 + 16) = v31;
  }
  return result;
}

void sub_1DCC0304C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

void sub_1DCC030A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  const char *v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  BOOL v44;
  const char *v45;
  uint64_t v46;
  id v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  _BOOL4 v54;
  size_t v55;
  _BYTE *v56;
  __int128 *p_dst;
  const std::string::value_type *v58;
  std::string::size_type v59;
  std::string *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  const char *v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  unsigned __int16 *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t m;
  uint64_t v89;
  uint64_t j;
  unsigned int v91;
  uint64_t k;
  unsigned int v93;
  const char *v94;
  uint64_t v95;
  void *v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  BOOL v106;
  _QWORD *v107;
  char v108;
  uint64_t v109;
  void *v110;
  const char *v111;
  void *v112;
  unsigned int *v113;
  unsigned int v114;
  const char *v115;
  uint64_t v116;
  void *v117;
  const char *v118;
  void *v119;
  const char *v120;
  uint64_t v121;
  void *v122;
  unsigned int *v123;
  unsigned int v124;
  void *v125;
  const char *v126;
  void *v127;
  const char *v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  void *v138;
  const char *v139;
  const char *v140;
  uint64_t v141;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  void *v150;
  const char *v151;
  uint64_t v152;
  const char *v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t n;
  void *v158;
  void *v159;
  void *v160;
  const char *v161;
  int hasSuffix;
  void *v163;
  void *v164;
  const char *v165;
  const char *v166;
  uint64_t v167;
  void *v168;
  const char *v169;
  const char *v170;
  uint64_t v171;
  id v172;
  const char *v173;
  char *v174;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v175;
  uint64_t v176;
  const pxrInternal__aapl__pxrReserved__::TfToken *v177;
  unsigned int *v178;
  unsigned int v179;
  id v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  const char *v184;
  uint64_t v185;
  void *v186;
  const char *v187;
  void *v188;
  const char *v189;
  uint64_t v190;
  void *v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  void *v200;
  const char *v201;
  uint64_t v202;
  void *v203;
  const char *v204;
  void *v205;
  const char *v206;
  uint64_t v207;
  unint64_t v208;
  const char *v209;
  uint64_t v210;
  void *v211;
  const char *v212;
  void *v213;
  const char *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  int *v219;
  int v220;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v221;
  unsigned int *v222;
  unsigned int v223;
  unsigned int *v224;
  unsigned int v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int *v232;
  unsigned int v233;
  const char *v234;
  uint64_t v235;
  void *v236;
  const char *v237;
  void *v238;
  const char *v239;
  uint64_t v240;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v241;
  uint64_t v242;
  unsigned int *v243;
  unsigned int v244;
  unsigned int *v245;
  unsigned int v246;
  unsigned int *v247;
  unsigned int v248;
  void *v249;
  BOOL v250;
  const char *v251;
  uint64_t v252;
  void *v253;
  const char *v254;
  uint64_t v255;
  const char *v256;
  uint64_t v257;
  void *v258;
  void *v259;
  const char *v260;
  uint64_t v261;
  BOOL v262;
  const char *v263;
  uint64_t v264;
  void *v265;
  const char *v266;
  uint64_t v267;
  unint64_t v268;
  const char *v269;
  uint64_t v270;
  void *v271;
  const char *v272;
  uint64_t v273;
  void *v274;
  const char *v275;
  uint64_t v276;
  void *v277;
  const char *v278;
  uint64_t v279;
  const char *v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t nn;
  void *v284;
  const char *v285;
  uint64_t v286;
  BOOL v287;
  const char *v288;
  uint64_t v289;
  const char *v290;
  uint64_t v291;
  unint64_t v292;
  const char *v293;
  uint64_t v294;
  unint64_t ii;
  unsigned int *v296;
  unsigned int v297;
  void *v298;
  const char *v299;
  uint64_t v300;
  const char *v301;
  uint64_t v302;
  void *v303;
  void *v304;
  const char *v305;
  uint64_t v306;
  BOOL v307;
  const char *v308;
  uint64_t v309;
  void *v310;
  const char *v311;
  uint64_t v312;
  void *v313;
  const char *v314;
  uint64_t v315;
  void *v316;
  const char *v317;
  uint64_t v318;
  const char *v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t i1;
  void *v323;
  const char *v324;
  uint64_t v325;
  BOOL v326;
  const char *v327;
  uint64_t v328;
  unint64_t i2;
  void *v330;
  const char *v331;
  uint64_t v332;
  BOOL v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int *v336;
  unsigned int v337;
  const char *v338;
  uint64_t v339;
  void *v340;
  const char *v341;
  uint64_t v342;
  void *v343;
  BOOL v344;
  const char *v345;
  uint64_t v346;
  void *v347;
  const char *v348;
  uint64_t v349;
  void *v350;
  const char *v351;
  uint64_t v352;
  void *v353;
  const char *v354;
  uint64_t v355;
  const char *v356;
  uint64_t v357;
  _DWORD *v358;
  unint64_t i3;
  void *v360;
  const char *v361;
  uint64_t v362;
  BOOL v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int *v366;
  unsigned int v367;
  unsigned int *v368;
  unsigned int v369;
  void *v370;
  const char *v371;
  uint64_t v372;
  const char *v373;
  uint64_t v374;
  void *v375;
  void *v376;
  const char *v377;
  uint64_t v378;
  BOOL v379;
  const char *v380;
  uint64_t v381;
  void *v382;
  const char *v383;
  uint64_t v384;
  void *v385;
  const char *v386;
  uint64_t v387;
  void *v388;
  const char *v389;
  uint64_t v390;
  const char *v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t i4;
  void *v395;
  const char *v396;
  uint64_t v397;
  BOOL v398;
  const char *v399;
  uint64_t v400;
  void *v401;
  const char *v402;
  uint64_t v403;
  void *v404;
  BOOL v405;
  const char *v406;
  uint64_t v407;
  void *v408;
  const char *v409;
  uint64_t v410;
  void *v411;
  const char *v412;
  uint64_t v413;
  void *v414;
  const char *v415;
  uint64_t v416;
  const char *v417;
  uint64_t v418;
  _DWORD *v419;
  unint64_t i5;
  void *v421;
  const char *v422;
  uint64_t v423;
  BOOL v424;
  uint64_t v425;
  uint64_t v426;
  unsigned int *v427;
  unsigned int v428;
  unsigned int *v429;
  unsigned int v430;
  unint64_t v431;
  const char *v432;
  uint64_t v433;
  unint64_t mm;
  const char *v435;
  uint64_t v436;
  unint64_t v437;
  const char *v438;
  uint64_t v439;
  unint64_t jj;
  const char *v441;
  uint64_t v442;
  unint64_t v443;
  const char *v444;
  uint64_t v445;
  unint64_t kk;
  unsigned int *v447;
  unsigned int v448;
  void *v449;
  const char *v450;
  uint64_t v451;
  void *v452;
  const char *v453;
  uint64_t v454;
  unsigned __int8 *v455;
  const char *v456;
  uint64_t v457;
  uint64_t v458;
  const char *v459;
  uint64_t v460;
  unint64_t v461;
  unsigned int v462;
  unint64_t v463;
  unsigned int v464;
  unint64_t v465;
  unsigned int v466;
  int v467;
  int v468;
  int v469;
  unsigned int *v470;
  unsigned int v471;
  const char *v472;
  uint64_t v473;
  void *v474;
  unint64_t *v475;
  uint64_t v476;
  const pxrInternal__aapl__pxrReserved__::TfToken *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  id obj;
  int v485;
  void *v486;
  void *v487;
  void *v488;
  uint64_t v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t i;
  void *v493;
  id v494;
  id v495;
  id v496;
  uint64_t v497;
  uint64_t v498;
  void *v499;
  void *v500;
  _BYTE v501[32];
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  void *v509;
  char v510;
  uint64_t v511;
  void *v512[2];
  uint64_t v513;
  _QWORD v514[3];
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 __p;
  __int128 v520;
  uint64_t v521;
  __int128 __dst;
  __int128 __dst_16;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  void *v535;
  uint64_t v536;
  char v537;
  uint64_t v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  uint64_t v544;
  _BYTE v545[32];
  uint64_t v546;
  _BYTE v547[128];
  __int128 __str;
  __int128 v549;
  __int128 v550;
  _BYTE v551[128];
  uint64_t v552;

  v552 = *MEMORY[0x1E0C80C00];
  v496 = a2;
  v533 = 0;
  v534 = 0;
  LODWORD(__str) = 1;
  *((_QWORD *)&__str + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_QWORD *)&v549 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v532 = MEMORY[0x1E0DF3098] + 16;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v549);
  objc_msgSend_submeshes(v496, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v490 = objc_msgSend_count(v7, v8, v9);

  if (v490 <= 1)
  {
    sub_1DCBC6D7C((uint64_t *)&v539, (uint64_t *)(a1 + 112));
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::Define();
    v16 = *((_QWORD *)&__str + 1);
    if (*((_QWORD *)&__str + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&__str + 1) + 48);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v533 = v16;
    sub_1DCBC41BC((uint64_t)&v534, &v549);
    sub_1DCBC4210((uint64_t)&v534 + 4, (_DWORD *)&v549 + 1);
    MEMORY[0x1DF0D0C78](&__str);
    v19 = *((_QWORD *)&v539 + 1);
    if (*((_QWORD *)&v539 + 1))
    {
      v20 = (unsigned int *)(*((_QWORD *)&v539 + 1) + 8);
      do
      {
        v21 = __ldxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    sub_1DCB4FB38((uint64_t)&__str, &v533, &v534);
    *(_DWORD *)a3 = __str;
    v23 = *((_QWORD *)&__str + 1);
    *((_QWORD *)&__str + 1) = 0;
    v24 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v23;
    if (v24)
      sub_1DCAEED94(v24);
    sub_1DCB4FA2C(a3 + 16, (int *)&v549);
    sub_1DCB4FA80(a3 + 20);
    if (&__str == (__int128 *)a3)
    {
      v28 = *((_QWORD *)&v549 + 1);
    }
    else
    {
      v25 = *(_QWORD *)(a3 + 24);
      if ((v25 & 7) != 0)
      {
        v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      v28 = 0;
      *(_QWORD *)(a3 + 24) = *((_QWORD *)&v549 + 1);
      *((_QWORD *)&v549 + 1) = 0;
    }
    if ((v28 & 7) != 0)
    {
      v37 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v549);
    if (*((_QWORD *)&__str + 1))
      sub_1DCAEED94(*((uint64_t *)&__str + 1));
  }
  else
  {
    sub_1DCBC6D7C((uint64_t *)&__dst, (uint64_t *)(a1 + 112));
    pxrInternal__aapl__pxrReserved__::UsdGeomXform::Define();
    sub_1DCB4FB38((uint64_t)&__str, (uint64_t *)&v539 + 1, &v540);
    *(_DWORD *)a3 = __str;
    v10 = *((_QWORD *)&__str + 1);
    *((_QWORD *)&__str + 1) = 0;
    v11 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v10;
    if (v11)
      sub_1DCAEED94(v11);
    sub_1DCB4FA2C(a3 + 16, (int *)&v549);
    sub_1DCB4FA80(a3 + 20);
    if (&__str == (__int128 *)a3)
    {
      v15 = *((_QWORD *)&v549 + 1);
    }
    else
    {
      v12 = *(_QWORD *)(a3 + 24);
      if ((v12 & 7) != 0)
      {
        v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      v15 = 0;
      *(_QWORD *)(a3 + 24) = *((_QWORD *)&v549 + 1);
      *((_QWORD *)&v549 + 1) = 0;
    }
    if ((v15 & 7) != 0)
    {
      v29 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v549);
    if (*((_QWORD *)&__str + 1))
      sub_1DCAEED94(*((uint64_t *)&__str + 1));
    MEMORY[0x1DF0D0D2C](&v539);
    v33 = *((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v34 = (unsigned int *)(*((_QWORD *)&__dst + 1) + 8);
      do
      {
        v35 = __ldxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  v530 = 0u;
  v531 = 0u;
  v528 = 0u;
  v529 = 0u;
  objc_msgSend_submeshes(v496, v31, v32);
  obj = (id)objc_claimAutoreleasedReturnValue();
  v491 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v39, (uint64_t)&v528, v551, 16);
  if (v491)
  {
    v485 = 0;
    v489 = *(_QWORD *)v529;
    v480 = MEMORY[0x1E0DF3158] + 16;
    v479 = MEMORY[0x1E0DF30A8] + 16;
    v478 = MEMORY[0x1E0DF3138] + 16;
    do
    {
      for (i = 0; i != v491; ++i)
      {
        if (*(_QWORD *)v529 != v489)
          objc_enumerationMutation(obj);
        v493 = *(void **)(*((_QWORD *)&v528 + 1) + 8 * i);
        if (v490 >= 2)
        {
          v539 = 0uLL;
          *(_QWORD *)&v540 = 0;
          sub_1DCB0345C(&v539, "");
          objc_msgSend_name(v493, v41, v42);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          v44 = v43 == 0;

          if (!v44)
          {
            objc_msgSend_name(v493, v45, v46);
            v47 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v49 = objc_msgSend_cStringUsingEncoding_(v47, v48, 4);
            MEMORY[0x1DF0D201C](&v539, v49);

          }
          v50 = BYTE7(v540);
          if (SBYTE7(v540) < 0)
            v50 = *((_QWORD *)&v539 + 1);
          if (!v50)
            MEMORY[0x1DF0D201C](&v539, "_");
          __dst = 0uLL;
          *(_QWORD *)&__dst_16 = 0;
          if (*((char *)a5 + 23) < 0)
          {
            sub_1DCACA658(&__dst, *(void **)a5, *((_QWORD *)a5 + 1));
          }
          else
          {
            __dst = *a5;
            *(_QWORD *)&__dst_16 = *((_QWORD *)a5 + 2);
          }
          objc_msgSend_submeshes(v496, v45, v46);
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          v54 = (unint64_t)objc_msgSend_count(v51, v52, v53) > 0x10;

          if (v54)
          {
            __str = 0u;
            v549 = 0u;
            snprintf((char *)&__str, 0x20uLL, "/_%d", v485 / 16);
            std::string::append((std::string *)&__dst, (const std::string::value_type *)&__str);
          }
          __str = 0uLL;
          *(_QWORD *)&v549 = 0;
          if ((SBYTE7(__dst_16) & 0x80u) == 0)
            v55 = BYTE7(__dst_16);
          else
            v55 = *((_QWORD *)&__dst + 1);
          memset(v545, 0, 24);
          sub_1DCB01128((uint64_t)v545, v55 + 1);
          if (v545[23] >= 0)
            v56 = v545;
          else
            v56 = *(_BYTE **)v545;
          if (v55)
          {
            if ((SBYTE7(__dst_16) & 0x80u) == 0)
              p_dst = &__dst;
            else
              p_dst = (__int128 *)__dst;
            memmove(v56, p_dst, v55);
          }
          *(_WORD *)&v56[v55] = 47;
          if ((SBYTE7(v540) & 0x80u) == 0)
            v58 = (const std::string::value_type *)&v539;
          else
            v58 = (const std::string::value_type *)v539;
          if ((SBYTE7(v540) & 0x80u) == 0)
            v59 = BYTE7(v540);
          else
            v59 = *((_QWORD *)&v539 + 1);
          v60 = std::string::append((std::string *)v545, v58, v59);
          __p = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
          *(_QWORD *)&v520 = *((_QWORD *)&v60->__r_.__value_.__l + 2);
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          sub_1DCC02D3C(&__p, (_QWORD *)(a1 + 120), (uint64_t)&__str);
          if (SBYTE7(v520) < 0)
            operator delete((void *)__p);
          if ((v545[23] & 0x80000000) != 0)
            operator delete(*(void **)v545);
          sub_1DCBC6D7C((uint64_t *)v545, (uint64_t *)(a1 + 112));
          MEMORY[0x1DF0D123C](&v542, &__str);
          pxrInternal__aapl__pxrReserved__::UsdGeomMesh::Define();
          v61 = *((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1))
          {
            v62 = (unint64_t *)(*((_QWORD *)&__p + 1) + 48);
            do
              v63 = __ldxr(v62);
            while (__stxr(v63 + 1, v62));
          }
          v64 = v533;
          v533 = v61;
          if (v64)
            sub_1DCAEED94(v64);
          sub_1DCBC41BC((uint64_t)&v534, &v520);
          sub_1DCBC4210((uint64_t)&v534 + 4, (_DWORD *)&v520 + 1);
          MEMORY[0x1DF0D0C78](&__p);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v542);
          v65 = *(_QWORD *)&v545[8];
          if (*(_QWORD *)&v545[8])
          {
            v66 = (unsigned int *)(*(_QWORD *)&v545[8] + 8);
            do
            {
              v67 = __ldxr(v66);
              v68 = v67 - 1;
            }
            while (__stlxr(v68, v66));
            if (!v68)
              (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
          }
          if (SBYTE7(v549) < 0)
            operator delete((void *)__str);
          if (SBYTE7(__dst_16) < 0)
            operator delete((void *)__dst);
          if (SBYTE7(v540) < 0)
            operator delete((void *)v539);
        }
        if (v533 && (*(_BYTE *)(v533 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v532 + 32))(&v532))
        {
          MEMORY[0x1DF0D1254](&v539, "none");
          *((_QWORD *)&__str + 1) = (char *)&off_1EA5753D8 + 1;
          *(_QWORD *)&__str = v539;
          if ((v539 & 7) != 0)
          {
            v69 = (unsigned int *)(v539 & 0xFFFFFFFFFFFFFFF8);
            do
              v70 = __ldxr(v69);
            while (__stxr(v70 + 2, v69));
            if ((v70 & 1) == 0)
              *(_QWORD *)&__str = __str & 0xFFFFFFFFFFFFFFF8;
          }
          pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateSubdivisionSchemeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v532, (const pxrInternal__aapl__pxrReserved__::VtValue *)&__str);
          if ((v527 & 7) != 0)
          {
            v71 = (unsigned int *)(v527 & 0xFFFFFFFFFFFFFFF8);
            do
              v72 = __ldxr(v71);
            while (__stlxr(v72 - 2, v71));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v526);
          if (v525)
            sub_1DCAEED94(v525);
          sub_1DCAEEE2C((uint64_t)&__str);
          if ((v539 & 7) != 0)
          {
            v75 = (unsigned int *)(v539 & 0xFFFFFFFFFFFFFFF8);
            do
              v76 = __ldxr(v75);
            while (__stlxr(v76 - 2, v75));
          }
          __dst = 0u;
          __dst_16 = 0u;
          v524 = 1065353216;
          __p = 0u;
          v520 = 0u;
          v521 = 1065353216;
          objc_msgSend_indexBuffer(v493, v73, v74);
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_map(v77, v78, v79);
          v487 = (void *)objc_claimAutoreleasedReturnValue();

          v82 = (unsigned __int16 *)objc_msgSend_bytes(v487, v80, v81);
          v85 = objc_msgSend_indexType(v493, v83, v84);
          switch(v85)
          {
            case 8:
              for (j = objc_msgSend_indexCount(v493, v86, v87); j; --j)
              {
                v91 = *(unsigned __int8 *)v82;
                v82 = (unsigned __int16 *)((char *)v82 + 1);
                *(_QWORD *)&__str = v91;
                sub_1DCC0A0BC((uint64_t)&__p, (unint64_t *)&__str, &__str);
              }
              break;
            case 16:
              for (k = objc_msgSend_indexCount(v493, v86, v87); k; --k)
              {
                v93 = *v82++;
                *(_QWORD *)&__str = v93;
                sub_1DCC0A0BC((uint64_t)&__p, (unint64_t *)&__str, &__str);
              }
              break;
            case 32:
              for (m = objc_msgSend_indexCount(v493, v86, v87); m; --m)
              {
                v89 = *(int *)v82;
                v82 += 2;
                *(_QWORD *)&__str = v89;
                sub_1DCC0A0BC((uint64_t)&__p, (unint64_t *)&__str, &__str);
              }
              break;
          }
          objc_msgSend_topology(v493, v86, v87);
          v96 = (void *)objc_claimAutoreleasedReturnValue();
          if (v96)
          {
            objc_msgSend_topology(v493, v94, v95);
            v97 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_faceTopology(v97, v98, v99);
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            if (v102)
            {
              objc_msgSend_topology(v493, v100, v101);
              v103 = (void *)objc_claimAutoreleasedReturnValue();
              v106 = objc_msgSend_faceCount(v103, v104, v105) != 0;

              v107 = (_QWORD *)v520;
              if ((_QWORD)v520)
                v108 = v106;
              else
                v108 = 1;
              if ((v108 & 1) != 0)
                goto LABEL_134;
              goto LABEL_131;
            }

          }
          v107 = (_QWORD *)v520;
          if (!(_QWORD)v520)
          {
LABEL_134:
            objc_msgSend_vertexDescriptor(v496, v94, v95);
            v110 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_attributeNamed_(v110, v111, (uint64_t)CFSTR("position"));
            v112 = (void *)objc_claimAutoreleasedReturnValue();

            *(_QWORD *)&v550 = 0;
            __str = 0u;
            v549 = 0u;
            sub_1DCC062E8(v496, v112, (unint64_t *)&__str, (uint64_t)&__dst);
            v539 = 0u;
            v540 = 0u;
            *(_QWORD *)&v545[8] = &off_1EA575998;
            sub_1DCB272BC((uint64_t *)v545, (uint64_t)&__str);
            pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::CreatePointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)&v532, (const pxrInternal__aapl__pxrReserved__::VtValue *)v545);
            sub_1DCAEEE2C((uint64_t)v545);
            if ((BYTE8(v540) & 7) != 0)
            {
              v113 = (unsigned int *)(*((_QWORD *)&v540 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v114 = __ldxr(v113);
              while (__stlxr(v114 - 2, v113));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_1DCAEEC34((uint64_t)&v540);
            if (*((_QWORD *)&v539 + 1))
              sub_1DCAEED94(*((uint64_t *)&v539 + 1));
            sub_1DCAEEE78((uint64_t)&__str);
            objc_msgSend_vertexDescriptor(v496, v115, v116);
            v117 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_attributeNamed_(v117, v118, (uint64_t)CFSTR("normal"));
            v119 = (void *)objc_claimAutoreleasedReturnValue();

            v122 = v119;
            if (v119)
            {
              *(_QWORD *)&v550 = 0;
              __str = 0u;
              v549 = 0u;
              sub_1DCC062E8(v496, v119, (unint64_t *)&__str, (uint64_t)&__dst);
              v539 = 0u;
              v540 = 0u;
              *(_QWORD *)&v545[8] = &off_1EA575998;
              sub_1DCB272BC((uint64_t *)v545, (uint64_t)&__str);
              pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::CreateNormalsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)&v532, (const pxrInternal__aapl__pxrReserved__::VtValue *)v545);
              sub_1DCAEEE2C((uint64_t)v545);
              if ((BYTE8(v540) & 7) != 0)
              {
                v123 = (unsigned int *)(*((_QWORD *)&v540 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v124 = __ldxr(v123);
                while (__stlxr(v124 - 2, v123));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_1DCAEEC34((uint64_t)&v540);
              if (*((_QWORD *)&v539 + 1))
                sub_1DCAEED94(*((uint64_t *)&v539 + 1));
              sub_1DCAEEE78((uint64_t)&__str);
            }
            objc_msgSend_vertexDescriptor(v496, v120, v121);
            v125 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_attributeNamed_(v125, v126, (uint64_t)CFSTR("color"));
            v127 = (void *)objc_claimAutoreleasedReturnValue();

            v130 = v127;
            if (v127)
            {
              *(_QWORD *)&v541 = 0;
              v539 = 0u;
              v540 = 0u;
              sub_1DCC062E8(v496, v127, (unint64_t *)&v539, (uint64_t)&__dst);
              v542 = 0uLL;
              *(_QWORD *)&v543 = 0;
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              *(_QWORD *)&v542 = MEMORY[0x1E0DF30A8] + 16;
              v549 = 0u;
              v550 = 0u;
              __str = 0u;
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              *(_QWORD *)&v545[24] = 0;
              *(_QWORD *)v545 = MEMORY[0x1E0DF3138] + 16;
              v131 = atomic_load(MEMORY[0x1E0DF24F8]);
              if (!v131)
                v131 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
              v132 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
              if (!v132)
                v132 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
              v133 = atomic_load(MEMORY[0x1E0DF24F8]);
              if (!v133)
                v133 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
              pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v545, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v131 + 848), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v132 + 736), (const pxrInternal__aapl__pxrReserved__::TfToken *)(v133 + 1224));
              MEMORY[0x1DF0D102C](v545);
              pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
              if ((v550 & 7) != 0)
              {
                v134 = (unsigned int *)(v550 & 0xFFFFFFFFFFFFFFF8);
                do
                  v135 = __ldxr(v134);
                while (__stlxr(v135 - 2, v134));
              }
              if ((BYTE8(v549) & 7) != 0)
              {
                v136 = (unsigned int *)(*((_QWORD *)&v549 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v137 = __ldxr(v136);
                while (__stlxr(v137 - 2, v136));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_1DCAEEC34((uint64_t)&v549);
              if (*((_QWORD *)&__str + 1))
                sub_1DCAEED94(*((uint64_t *)&__str + 1));
              MEMORY[0x1DF0D0CE4](&v542);
              sub_1DCAEEE78((uint64_t)&v539);
            }
            objc_msgSend_vertexDescriptor(v496, v128, v129);
            v138 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_attributeNamed_(v138, v139, (uint64_t)CFSTR("textureCoordinate"));
            v486 = (void *)objc_claimAutoreleasedReturnValue();

            if (v486)
            {
              *(_QWORD *)&v541 = 0;
              v539 = 0u;
              v540 = 0u;
              sub_1DCC06850(v496, v486, (unint64_t *)&v539, (uint64_t)&__dst);
              v542 = 0uLL;
              *(_QWORD *)&v543 = 0;
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              *(_QWORD *)&v542 = MEMORY[0x1E0DF30A8] + 16;
              v549 = 0u;
              v550 = 0u;
              __str = 0u;
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              *(_QWORD *)&v545[24] = 0;
              *(_QWORD *)v545 = MEMORY[0x1E0DF3138] + 16;
              sub_1DCB0345C(&v535, "st");
              MEMORY[0x1DF0D1260](v514, &v535);
              v142 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
              if (!v142)
                v142 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
              v143 = atomic_load(MEMORY[0x1E0DF24F8]);
              if (!v143)
                v143 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
              pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v545, (const pxrInternal__aapl__pxrReserved__::TfToken *)v514, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v142 + 608), (const pxrInternal__aapl__pxrReserved__::TfToken *)(v143 + 1224));
              if ((v514[0] & 7) != 0)
              {
                v144 = (unsigned int *)(v514[0] & 0xFFFFFFFFFFFFFFF8);
                do
                  v145 = __ldxr(v144);
                while (__stlxr(v145 - 2, v144));
              }
              if (v537 < 0)
                operator delete(v535);
              MEMORY[0x1DF0D102C](v545);
              pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>();
              if ((v550 & 7) != 0)
              {
                v146 = (unsigned int *)(v550 & 0xFFFFFFFFFFFFFFF8);
                do
                  v147 = __ldxr(v146);
                while (__stlxr(v147 - 2, v146));
              }
              if ((BYTE8(v549) & 7) != 0)
              {
                v148 = (unsigned int *)(*((_QWORD *)&v549 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v149 = __ldxr(v148);
                while (__stlxr(v149 - 2, v148));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_1DCAEEC34((uint64_t)&v549);
              if (*((_QWORD *)&__str + 1))
                sub_1DCAEED94(*((uint64_t *)&__str + 1));
              MEMORY[0x1DF0D0CE4](&v542);
              sub_1DCAEEE78((uint64_t)&v539);
            }
            v517 = 0u;
            v518 = 0u;
            v515 = 0u;
            v516 = 0u;
            objc_msgSend_vertexDescriptor(v496, v140, v141);
            v150 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_attributes(v150, v151, v152);
            v494 = (id)objc_claimAutoreleasedReturnValue();

            v154 = objc_msgSend_countByEnumeratingWithState_objects_count_(v494, v153, (uint64_t)&v515, v547, 16);
            if (v154)
            {
              v497 = *(_QWORD *)v516;
              do
              {
                v498 = v154;
                for (n = 0; n != v498; ++n)
                {
                  if (*(_QWORD *)v516 != v497)
                    objc_enumerationMutation(v494);
                  v158 = *(void **)(*((_QWORD *)&v515 + 1) + 8 * n);
                  objc_msgSend_name(v158, v155, v156);
                  v159 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v159)
                  {
                    objc_msgSend_name(v158, v155, v156);
                    v160 = (void *)objc_claimAutoreleasedReturnValue();
                    hasSuffix = objc_msgSend_hasSuffix_(v160, v161, (uint64_t)CFSTR("__UV"));

                    if (hasSuffix)
                    {
                      v163 = (void *)MEMORY[0x1E0CB3940];
                      objc_msgSend_name(v158, v155, v156);
                      v164 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_stringWithFormat_(v163, v165, (uint64_t)CFSTR("%@i"), v164);
                      v500 = (void *)objc_claimAutoreleasedReturnValue();

                      objc_msgSend_vertexDescriptor(v496, v166, v167);
                      v168 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_attributeNamed_(v168, v169, (uint64_t)v500);
                      v499 = (void *)objc_claimAutoreleasedReturnValue();

                      v546 = 0;
                      memset(v545, 0, sizeof(v545));
                      sub_1DCC06850(v496, v158, (unint64_t *)v545, (uint64_t)&__dst);
                      memset(v514, 0, sizeof(v514));
                      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                      v514[0] = MEMORY[0x1E0DF30A8] + 16;
                      v512[1] = 0;
                      v512[0] = 0;
                      v513 = 0;
                      objc_msgSend_name(v158, v170, v171);
                      v172 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                      v174 = (char *)objc_msgSend_cStringUsingEncoding_(v172, v173, 4);
                      sub_1DCB0345C(v512, v174);

                      v549 = 0u;
                      v550 = 0u;
                      __str = 0u;
                      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                      *((_QWORD *)&v540 + 1) = 0;
                      *(_QWORD *)&v539 = MEMORY[0x1E0DF3138] + 16;
                      std::operator+<char>();
                      MEMORY[0x1DF0D1260](&v535, &v542);
                      v175 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
                      if (!v175)
                        v175 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
                      v176 = atomic_load(MEMORY[0x1E0DF24F8]);
                      if (v500)
                      {
                        if (!v176)
                          v176 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
                        v177 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v176 + 320);
                      }
                      else
                      {
                        if (!v176)
                          v176 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
                        v177 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v176 + 1224);
                      }
                      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v539, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v535, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v175 + 608), v177);
                      if ((v535 & 7) != 0)
                      {
                        v178 = (unsigned int *)((unint64_t)v535 & 0xFFFFFFFFFFFFFFF8);
                        do
                          v179 = __ldxr(v178);
                        while (__stlxr(v179 - 2, v178));
                      }
                      if (SBYTE7(v543) < 0)
                        operator delete((void *)v542);
                      MEMORY[0x1DF0D102C](&v539);
                      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>();
                      if (v499)
                      {
                        v544 = 0;
                        v542 = 0u;
                        v543 = 0u;
                        v180 = v496;
                        v495 = v499;
                        v183 = objc_msgSend_bufferIndex(v495, v181, v182);
                        objc_msgSend_vertexBuffers(v180, v184, v185);
                        v186 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_objectAtIndexedSubscript_(v186, v187, v183);
                        v188 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_map(v188, v189, v190);
                        v191 = (void *)objc_claimAutoreleasedReturnValue();

                        v194 = objc_msgSend_bytes(v191, v192, v193);
                        v197 = objc_msgSend_offset(v495, v195, v196);
                        objc_msgSend_vertexDescriptor(v180, v198, v199);
                        v200 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_layouts(v200, v201, v202);
                        v203 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_objectAtIndexedSubscript_(v203, v204, v183);
                        v205 = (void *)objc_claimAutoreleasedReturnValue();
                        v208 = objc_msgSend_stride(v205, v206, v207);

                        objc_msgSend_vertexBuffers(v180, v209, v210);
                        v211 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_objectAtIndexedSubscript_(v211, v212, v183);
                        v213 = (void *)objc_claimAutoreleasedReturnValue();
                        v216 = objc_msgSend_length(v213, v214, v215);

                        LODWORD(v535) = 0;
                        *(_QWORD *)&v539 = &v535;
                        v217 = v216 / v208;
                        sub_1DCB267B0((unint64_t *)&v542, v216 / v208, (_DWORD **)&v539);
                        if (v208 <= v216)
                        {
                          v218 = 0;
                          v219 = (int *)(v194 + v197);
                          if (v217 <= 1)
                            v217 = 1;
                          do
                          {
                            v220 = *v219;
                            sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v542);
                            v219 = (int *)((char *)v219 + v208);
                            *(_DWORD *)(v544 + 4 * v218++) = v220;
                          }
                          while (v217 != v218);
                        }

                        v540 = 0u;
                        v541 = 0u;
                        v539 = 0u;
                        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                        v538 = 0;
                        v535 = (void *)(MEMORY[0x1E0DF3138] + 16);
                        std::operator+<char>();
                        MEMORY[0x1DF0D1260](&v511, &v509);
                        v221 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
                        if (!v221)
                          v221 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
                        v508 = 0;
                        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v535, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v511, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v221 + 464), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v508);
                        if ((v508 & 7) != 0)
                        {
                          v222 = (unsigned int *)(v508 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v223 = __ldxr(v222);
                          while (__stlxr(v223 - 2, v222));
                        }
                        if ((v511 & 7) != 0)
                        {
                          v224 = (unsigned int *)(v511 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v225 = __ldxr(v224);
                          while (__stlxr(v225 - 2, v224));
                        }
                        if (v510 < 0)
                          operator delete(v509);
                        MEMORY[0x1DF0D102C](&v535);
                        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetIndices();
                        if ((v541 & 7) != 0)
                        {
                          v226 = (unsigned int *)(v541 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v227 = __ldxr(v226);
                          while (__stlxr(v227 - 2, v226));
                        }
                        if ((BYTE8(v540) & 7) != 0)
                        {
                          v228 = (unsigned int *)(*((_QWORD *)&v540 + 1) & 0xFFFFFFFFFFFFFFF8);
                          do
                            v229 = __ldxr(v228);
                          while (__stlxr(v229 - 2, v228));
                        }
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        sub_1DCAEEC34((uint64_t)&v540);
                        if (*((_QWORD *)&v539 + 1))
                          sub_1DCAEED94(*((uint64_t *)&v539 + 1));
                        sub_1DCAEEE78((uint64_t)&v542);
                      }
                      if ((v550 & 7) != 0)
                      {
                        v230 = (unsigned int *)(v550 & 0xFFFFFFFFFFFFFFF8);
                        do
                          v231 = __ldxr(v230);
                        while (__stlxr(v231 - 2, v230));
                      }
                      if ((BYTE8(v549) & 7) != 0)
                      {
                        v232 = (unsigned int *)(*((_QWORD *)&v549 + 1) & 0xFFFFFFFFFFFFFFF8);
                        do
                          v233 = __ldxr(v232);
                        while (__stlxr(v233 - 2, v232));
                      }
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                      sub_1DCAEEC34((uint64_t)&v549);
                      if (*((_QWORD *)&__str + 1))
                        sub_1DCAEED94(*((uint64_t *)&__str + 1));
                      if (SHIBYTE(v513) < 0)
                        operator delete(v512[0]);
                      MEMORY[0x1DF0D0CE4](v514);
                      sub_1DCAEEE78((uint64_t)v545);

                    }
                  }
                }
                v154 = objc_msgSend_countByEnumeratingWithState_objects_count_(v494, v155, (uint64_t)&v515, v547, 16);
              }
              while (v154);
            }

            objc_msgSend_vertexDescriptor(v496, v234, v235);
            v236 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_attributeNamed_(v236, v237, (uint64_t)CFSTR("aoCoord"));
            v238 = (void *)objc_claimAutoreleasedReturnValue();

            if (v238)
            {
              *(_QWORD *)&v541 = 0;
              v539 = 0u;
              v540 = 0u;
              sub_1DCC06850(v496, v238, (unint64_t *)&v539, (uint64_t)&__dst);
              v542 = 0uLL;
              *(_QWORD *)&v543 = 0;
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              *(_QWORD *)&v542 = v479;
              v549 = 0u;
              v550 = 0u;
              __str = 0u;
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              *(_QWORD *)&v545[24] = 0;
              *(_QWORD *)v545 = v478;
              MEMORY[0x1DF0D1254](&v535, "ao_map");
              v241 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
              if (!v241)
                v241 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
              v242 = atomic_load(MEMORY[0x1E0DF24F8]);
              if (!v242)
                v242 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
              pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v545, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v535, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v241 + 608), (const pxrInternal__aapl__pxrReserved__::TfToken *)(v242 + 320));
              if ((v535 & 7) != 0)
              {
                v243 = (unsigned int *)((unint64_t)v535 & 0xFFFFFFFFFFFFFFF8);
                do
                  v244 = __ldxr(v243);
                while (__stlxr(v244 - 2, v243));
              }
              MEMORY[0x1DF0D102C](v545);
              pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>();
              if ((v550 & 7) != 0)
              {
                v245 = (unsigned int *)(v550 & 0xFFFFFFFFFFFFFFF8);
                do
                  v246 = __ldxr(v245);
                while (__stlxr(v246 - 2, v245));
              }
              if ((BYTE8(v549) & 7) != 0)
              {
                v247 = (unsigned int *)(*((_QWORD *)&v549 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v248 = __ldxr(v247);
                while (__stlxr(v248 - 2, v247));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_1DCAEEC34((uint64_t)&v549);
              if (*((_QWORD *)&__str + 1))
                sub_1DCAEED94(*((uint64_t *)&__str + 1));
              MEMORY[0x1DF0D0CE4](&v542);
              sub_1DCAEEE78((uint64_t)&v539);
            }
            objc_msgSend_topology(v493, v239, v240);
            v249 = (void *)objc_claimAutoreleasedReturnValue();
            v250 = v249 == 0;

            if (v250)
            {
              *(_QWORD *)&v550 = 0;
              __str = 0u;
              v549 = 0u;
              if (objc_msgSend_geometryType(v493, v251, v252))
              {
                if (objc_msgSend_geometryType(v493, v288, v289) == 1)
                {
                  v292 = objc_msgSend_indexCount(v493, v290, v291);
                  sub_1DCB43D9C((unint64_t *)&__str, v292 >> 1);
                  for (ii = 0; ii < (unint64_t)objc_msgSend_indexCount(v493, v293, v294) >> 1; ++ii)
                  {
                    LODWORD(v539) = 2;
                    sub_1DCC0A4F8((uint64_t)&__str, &v539);
                  }
                }
                else if (objc_msgSend_geometryType(v493, v290, v291) == 2)
                {
                  v437 = objc_msgSend_indexCount(v493, v435, v436);
                  sub_1DCB43D9C((unint64_t *)&__str, v437 / 3);
                  for (jj = 0; jj < objc_msgSend_indexCount(v493, v438, v439) / 3uLL; ++jj)
                  {
                    LODWORD(v539) = 3;
                    sub_1DCC0A4F8((uint64_t)&__str, &v539);
                  }
                }
                else if (objc_msgSend_geometryType(v493, v435, v436) == 4)
                {
                  v443 = objc_msgSend_indexCount(v493, v441, v442);
                  sub_1DCB43D9C((unint64_t *)&__str, v443 >> 2);
                  for (kk = 0; kk < (unint64_t)objc_msgSend_indexCount(v493, v444, v445) >> 2; ++kk)
                  {
                    LODWORD(v539) = 4;
                    sub_1DCC0A4F8((uint64_t)&__str, &v539);
                  }
                }
              }
              else
              {
                v431 = objc_msgSend_indexCount(v493, v288, v289);
                sub_1DCB43D9C((unint64_t *)&__str, v431);
                for (mm = 0; objc_msgSend_indexCount(v493, v432, v433) > mm; ++mm)
                {
                  LODWORD(v539) = 1;
                  sub_1DCC0A4F8((uint64_t)&__str, &v539);
                }
              }
              *((_QWORD *)&v539 + 1) = &off_1EA575DE8;
              sub_1DCB45564((uint64_t *)&v539, (uint64_t)&__str);
              pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateFaceVertexCountsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v532, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v539);
              if ((v507 & 7) != 0)
              {
                v447 = (unsigned int *)(v507 & 0xFFFFFFFFFFFFFFF8);
                do
                  v448 = __ldxr(v447);
                while (__stlxr(v448 - 2, v447));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_1DCAEEC34((uint64_t)&v506);
              if (v505)
                sub_1DCAEED94(v505);
              sub_1DCAEEE2C((uint64_t)&v539);
              sub_1DCAEEE78((uint64_t)&__str);
            }
            else
            {
              objc_msgSend_topology(v493, v251, v252);
              v253 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_faceTopology(v253, v254, v255);
              v258 = (void *)objc_claimAutoreleasedReturnValue();
              if (v258)
              {
                objc_msgSend_topology(v493, v256, v257);
                v259 = (void *)objc_claimAutoreleasedReturnValue();
                v262 = objc_msgSend_faceCount(v259, v260, v261) == 0;

                if (!v262)
                {
                  *(_QWORD *)&v550 = 0;
                  __str = 0u;
                  v549 = 0u;
                  objc_msgSend_topology(v493, v263, v264);
                  v265 = (void *)objc_claimAutoreleasedReturnValue();
                  v268 = objc_msgSend_faceCount(v265, v266, v267);
                  sub_1DCB43D9C((unint64_t *)&__str, v268);

                  objc_msgSend_topology(v493, v269, v270);
                  v271 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_faceTopology(v271, v272, v273);
                  v274 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_map(v274, v275, v276);
                  v277 = (void *)objc_claimAutoreleasedReturnValue();

                  v282 = objc_msgSend_bytes(v277, v278, v279);
                  for (nn = 0; ; ++nn)
                  {
                    objc_msgSend_topology(v493, v280, v281);
                    v284 = (void *)objc_claimAutoreleasedReturnValue();
                    v287 = objc_msgSend_faceCount(v284, v285, v286) > nn;

                    if (!v287)
                      break;
                    LODWORD(v539) = *(unsigned __int8 *)(v282 + nn);
                    sub_1DCC0A4F8((uint64_t)&__str, &v539);
                  }
                  v539 = 0u;
                  v540 = 0u;
                  *(_QWORD *)&v545[8] = 0;
                  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateFaceVertexCountsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v532, (const pxrInternal__aapl__pxrReserved__::VtValue *)v545);
                  sub_1DCAEEE2C((uint64_t)v545);
                  *(_QWORD *)&v545[8] = &off_1EA575DE8;
                  sub_1DCB45564((uint64_t *)v545, (uint64_t)&__str);
                  pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
                  sub_1DCAEEE2C((uint64_t)v545);
                  if ((BYTE8(v540) & 7) != 0)
                  {
                    v296 = (unsigned int *)(*((_QWORD *)&v540 + 1) & 0xFFFFFFFFFFFFFFF8);
                    do
                      v297 = __ldxr(v296);
                    while (__stlxr(v297 - 2, v296));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  sub_1DCAEEC34((uint64_t)&v540);
                  if (*((_QWORD *)&v539 + 1))
                    sub_1DCAEED94(*((uint64_t *)&v539 + 1));

                  sub_1DCAEEE78((uint64_t)&__str);
                }
              }
              else
              {

              }
              objc_msgSend_topology(v493, v263, v264);
              v298 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_edgeCreaseIndices(v298, v299, v300);
              v303 = (void *)objc_claimAutoreleasedReturnValue();
              if (v303)
              {
                objc_msgSend_topology(v493, v301, v302);
                v304 = (void *)objc_claimAutoreleasedReturnValue();
                v307 = objc_msgSend_edgeCreaseCount(v304, v305, v306) == 0;

                if (!v307)
                {
                  *(_QWORD *)&v550 = 0;
                  __str = 0u;
                  v549 = 0u;
                  objc_msgSend_topology(v493, v308, v309);
                  v310 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_edgeCreaseIndices(v310, v311, v312);
                  v313 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_map(v313, v314, v315);
                  v316 = (void *)objc_claimAutoreleasedReturnValue();

                  v321 = objc_msgSend_bytes(v316, v317, v318);
                  for (i1 = 0; ; ++i1)
                  {
                    objc_msgSend_topology(v493, v319, v320);
                    v323 = (void *)objc_claimAutoreleasedReturnValue();
                    v326 = i1 < 2 * objc_msgSend_edgeCreaseCount(v323, v324, v325);

                    if (!v326)
                      break;
                    LODWORD(v539) = *(_DWORD *)(v321 + 4 * i1);
                    sub_1DCC0A4F8((uint64_t)&__str, &v539);
                  }
                  memset(v545, 0, sizeof(v545));
                  *((_QWORD *)&v539 + 1) = 0;
                  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateCreaseIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v532, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v539);
                  sub_1DCAEEE2C((uint64_t)&v539);
                  *((_QWORD *)&v539 + 1) = &off_1EA575DE8;
                  sub_1DCB45564((uint64_t *)&v539, (uint64_t)&__str);
                  pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
                  sub_1DCAEEE2C((uint64_t)&v539);
                  sub_1DCAEEFD4(&__str);
                  for (i2 = 0; ; ++i2)
                  {
                    objc_msgSend_topology(v493, v327, v328);
                    v330 = (void *)objc_claimAutoreleasedReturnValue();
                    v333 = objc_msgSend_edgeCreaseCount(v330, v331, v332) > i2;

                    if (!v333)
                      break;
                    LODWORD(v539) = 2;
                    sub_1DCC0A4F8((uint64_t)&__str, &v539);
                  }
                  *((_QWORD *)&v542 + 1) = 0;
                  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateCreaseLengthsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v532, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v542);
                  *(_DWORD *)v545 = v539;
                  v334 = *((_QWORD *)&v539 + 1);
                  *((_QWORD *)&v539 + 1) = 0;
                  v335 = *(_QWORD *)&v545[8];
                  *(_QWORD *)&v545[8] = v334;
                  if (v335)
                    sub_1DCAEED94(v335);
                  sub_1DCB4FA2C((uint64_t)&v545[16], (int *)&v540);
                  sub_1DCB4FA80((uint64_t)&v545[20]);
                  if ((v545[24] & 7) != 0)
                  {
                    v336 = (unsigned int *)(*(_QWORD *)&v545[24] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v337 = __ldxr(v336);
                    while (__stlxr(v337 - 2, v336));
                  }
                  *(_QWORD *)&v545[24] = *((_QWORD *)&v540 + 1);
                  *((_QWORD *)&v540 + 1) = 0;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  sub_1DCAEEC34((uint64_t)&v540);
                  if (*((_QWORD *)&v539 + 1))
                    sub_1DCAEED94(*((uint64_t *)&v539 + 1));
                  sub_1DCAEEE2C((uint64_t)&v542);
                  *((_QWORD *)&v539 + 1) = &off_1EA575DE8;
                  sub_1DCB45564((uint64_t *)&v539, (uint64_t)&__str);
                  pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
                  sub_1DCAEEE2C((uint64_t)&v539);
                  objc_msgSend_topology(v493, v338, v339);
                  v340 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_edgeCreases(v340, v341, v342);
                  v343 = (void *)objc_claimAutoreleasedReturnValue();
                  v344 = v343 == 0;

                  if (!v344)
                  {
                    *(_QWORD *)&v541 = 0;
                    v539 = 0u;
                    v540 = 0u;
                    objc_msgSend_topology(v493, v345, v346);
                    v347 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_edgeCreases(v347, v348, v349);
                    v350 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_map(v350, v351, v352);
                    v353 = (void *)objc_claimAutoreleasedReturnValue();

                    v358 = (_DWORD *)objc_msgSend_bytes(v353, v354, v355);
                    for (i3 = 0; ; ++i3)
                    {
                      objc_msgSend_topology(v493, v356, v357);
                      v360 = (void *)objc_claimAutoreleasedReturnValue();
                      v363 = objc_msgSend_edgeCreaseCount(v360, v361, v362) > i3;

                      if (!v363)
                        break;
                      sub_1DCB45AD4((uint64_t)&v539, v358++);
                    }
                    v536 = 0;
                    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateCreaseSharpnessesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v532, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v535);
                    *(_DWORD *)v545 = v542;
                    v364 = *((_QWORD *)&v542 + 1);
                    *((_QWORD *)&v542 + 1) = 0;
                    v365 = *(_QWORD *)&v545[8];
                    *(_QWORD *)&v545[8] = v364;
                    if (v365)
                      sub_1DCAEED94(v365);
                    sub_1DCB4FA2C((uint64_t)&v545[16], (int *)&v543);
                    sub_1DCB4FA80((uint64_t)&v545[20]);
                    if ((v545[24] & 7) != 0)
                    {
                      v366 = (unsigned int *)(*(_QWORD *)&v545[24] & 0xFFFFFFFFFFFFFFF8);
                      do
                        v367 = __ldxr(v366);
                      while (__stlxr(v367 - 2, v366));
                    }
                    *(_QWORD *)&v545[24] = *((_QWORD *)&v543 + 1);
                    *((_QWORD *)&v543 + 1) = 0;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    sub_1DCAEEC34((uint64_t)&v543);
                    if (*((_QWORD *)&v542 + 1))
                      sub_1DCAEED94(*((uint64_t *)&v542 + 1));
                    sub_1DCAEEE2C((uint64_t)&v535);
                    *((_QWORD *)&v542 + 1) = &off_1EA575D30;
                    sub_1DCB46DC8((uint64_t *)&v542, (uint64_t)&v539);
                    pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
                    sub_1DCAEEE2C((uint64_t)&v542);

                    sub_1DCAEEE78((uint64_t)&v539);
                  }
                  if ((v545[24] & 7) != 0)
                  {
                    v368 = (unsigned int *)(*(_QWORD *)&v545[24] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v369 = __ldxr(v368);
                    while (__stlxr(v369 - 2, v368));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  sub_1DCAEEC34((uint64_t)&v545[16]);
                  if (*(_QWORD *)&v545[8])
                    sub_1DCAEED94(*(uint64_t *)&v545[8]);

                  sub_1DCAEEE78((uint64_t)&__str);
                }
              }
              else
              {

              }
              objc_msgSend_topology(v493, v308, v309);
              v370 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_vertexCreaseIndices(v370, v371, v372);
              v375 = (void *)objc_claimAutoreleasedReturnValue();
              if (v375)
              {
                objc_msgSend_topology(v493, v373, v374);
                v376 = (void *)objc_claimAutoreleasedReturnValue();
                v379 = objc_msgSend_vertexCreaseCount(v376, v377, v378) == 0;

                if (!v379)
                {
                  *(_QWORD *)&v550 = 0;
                  __str = 0u;
                  v549 = 0u;
                  objc_msgSend_topology(v493, v380, v381);
                  v382 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_vertexCreaseIndices(v382, v383, v384);
                  v385 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_map(v385, v386, v387);
                  v388 = (void *)objc_claimAutoreleasedReturnValue();

                  v393 = objc_msgSend_bytes(v388, v389, v390);
                  for (i4 = 0; ; ++i4)
                  {
                    objc_msgSend_topology(v493, v391, v392);
                    v395 = (void *)objc_claimAutoreleasedReturnValue();
                    v398 = objc_msgSend_vertexCreaseCount(v395, v396, v397) > i4;

                    if (!v398)
                      break;
                    LODWORD(v539) = *(_DWORD *)(v393 + 4 * i4);
                    sub_1DCC0A4F8((uint64_t)&__str, &v539);
                  }
                  memset(v545, 0, sizeof(v545));
                  *((_QWORD *)&v539 + 1) = 0;
                  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateCornerIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v532, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v539);
                  sub_1DCAEEE2C((uint64_t)&v539);
                  *((_QWORD *)&v539 + 1) = &off_1EA575DE8;
                  sub_1DCB45564((uint64_t *)&v539, (uint64_t)&__str);
                  pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
                  sub_1DCAEEE2C((uint64_t)&v539);
                  sub_1DCAEEFD4(&__str);
                  objc_msgSend_topology(v493, v399, v400);
                  v401 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_vertexCreases(v401, v402, v403);
                  v404 = (void *)objc_claimAutoreleasedReturnValue();
                  v405 = v404 == 0;

                  if (!v405)
                  {
                    *(_QWORD *)&v541 = 0;
                    v539 = 0u;
                    v540 = 0u;
                    objc_msgSend_topology(v493, v406, v407);
                    v408 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_vertexCreases(v408, v409, v410);
                    v411 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_map(v411, v412, v413);
                    v414 = (void *)objc_claimAutoreleasedReturnValue();

                    v419 = (_DWORD *)objc_msgSend_bytes(v414, v415, v416);
                    for (i5 = 0; ; ++i5)
                    {
                      objc_msgSend_topology(v493, v417, v418);
                      v421 = (void *)objc_claimAutoreleasedReturnValue();
                      v424 = objc_msgSend_vertexCreaseCount(v421, v422, v423) > i5;

                      if (!v424)
                        break;
                      sub_1DCB45AD4((uint64_t)&v539, v419++);
                    }
                    v536 = 0;
                    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateCornerSharpnessesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v532, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v535);
                    *(_DWORD *)v545 = v542;
                    v425 = *((_QWORD *)&v542 + 1);
                    *((_QWORD *)&v542 + 1) = 0;
                    v426 = *(_QWORD *)&v545[8];
                    *(_QWORD *)&v545[8] = v425;
                    if (v426)
                      sub_1DCAEED94(v426);
                    sub_1DCB4FA2C((uint64_t)&v545[16], (int *)&v543);
                    sub_1DCB4FA80((uint64_t)&v545[20]);
                    if ((v545[24] & 7) != 0)
                    {
                      v427 = (unsigned int *)(*(_QWORD *)&v545[24] & 0xFFFFFFFFFFFFFFF8);
                      do
                        v428 = __ldxr(v427);
                      while (__stlxr(v428 - 2, v427));
                    }
                    *(_QWORD *)&v545[24] = *((_QWORD *)&v543 + 1);
                    *((_QWORD *)&v543 + 1) = 0;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    sub_1DCAEEC34((uint64_t)&v543);
                    if (*((_QWORD *)&v542 + 1))
                      sub_1DCAEED94(*((uint64_t *)&v542 + 1));
                    sub_1DCAEEE2C((uint64_t)&v535);
                    *((_QWORD *)&v542 + 1) = &off_1EA575D30;
                    sub_1DCB46DC8((uint64_t *)&v542, (uint64_t)&v539);
                    pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
                    sub_1DCAEEE2C((uint64_t)&v542);

                    sub_1DCAEEE78((uint64_t)&v539);
                  }
                  if ((v545[24] & 7) != 0)
                  {
                    v429 = (unsigned int *)(*(_QWORD *)&v545[24] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v430 = __ldxr(v429);
                    while (__stlxr(v430 - 2, v429));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  sub_1DCAEEC34((uint64_t)&v545[16]);
                  if (*(_QWORD *)&v545[8])
                    sub_1DCAEED94(*(uint64_t *)&v545[8]);

                  sub_1DCAEEE78((uint64_t)&__str);
                }
              }
              else
              {

              }
            }
            *(_QWORD *)&v550 = 0;
            __str = 0u;
            v549 = 0u;
            objc_msgSend_indexBuffer(v493, v380, v381);
            v449 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_map(v449, v450, v451);
            v452 = (void *)objc_claimAutoreleasedReturnValue();

            v488 = v452;
            v455 = (unsigned __int8 *)objc_msgSend_bytes(v452, v453, v454);
            v458 = objc_msgSend_indexType(v493, v456, v457);
            switch(v458)
            {
              case 8:
                v463 = objc_msgSend_indexCount(v493, v459, v460);
                sub_1DCB43D9C((unint64_t *)&__str, v463);
                if (*((_QWORD *)&__dst_16 + 1))
                {
                  for (; v463; --v463)
                  {
                    v464 = *v455++;
                    *(_QWORD *)&v539 = v464;
                    *(_DWORD *)v545 = sub_1DCC0A65C(&__dst, (unint64_t *)&v539)[3];
                    sub_1DCC0A4F8((uint64_t)&__str, v545);
                  }
                }
                else
                {
                  for (; v463; --v463)
                  {
                    v468 = *v455++;
                    LODWORD(v539) = v468;
                    sub_1DCC0A4F8((uint64_t)&__str, &v539);
                  }
                }
                break;
              case 16:
                v465 = objc_msgSend_indexCount(v493, v459, v460);
                sub_1DCB43D9C((unint64_t *)&__str, v465);
                if (*((_QWORD *)&__dst_16 + 1))
                {
                  for (; v465; --v465)
                  {
                    v466 = *(unsigned __int16 *)v455;
                    v455 += 2;
                    *(_QWORD *)&v539 = v466;
                    *(_DWORD *)v545 = sub_1DCC0A65C(&__dst, (unint64_t *)&v539)[3];
                    sub_1DCC0A4F8((uint64_t)&__str, v545);
                  }
                }
                else
                {
                  for (; v465; --v465)
                  {
                    v469 = *(unsigned __int16 *)v455;
                    v455 += 2;
                    LODWORD(v539) = v469;
                    sub_1DCC0A4F8((uint64_t)&__str, &v539);
                  }
                }
                break;
              case 32:
                v461 = objc_msgSend_indexCount(v493, v459, v460);
                sub_1DCB43D9C((unint64_t *)&__str, v461);
                if (*((_QWORD *)&__dst_16 + 1))
                {
                  for (; v461; --v461)
                  {
                    v462 = *(_DWORD *)v455;
                    v455 += 4;
                    *(_QWORD *)&v539 = v462;
                    *(_DWORD *)v545 = sub_1DCC0A65C(&__dst, (unint64_t *)&v539)[3];
                    sub_1DCC0A4F8((uint64_t)&__str, v545);
                  }
                }
                else
                {
                  for (; v461; --v461)
                  {
                    v467 = *(_DWORD *)v455;
                    v455 += 4;
                    LODWORD(v539) = v467;
                    sub_1DCC0A4F8((uint64_t)&__str, &v539);
                  }
                }
                break;
            }
            *((_QWORD *)&v539 + 1) = &off_1EA575DE8;
            sub_1DCB45564((uint64_t *)&v539, (uint64_t)&__str);
            pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateFaceVertexIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v532, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v539);
            if ((v504 & 7) != 0)
            {
              v470 = (unsigned int *)(v504 & 0xFFFFFFFFFFFFFFF8);
              do
                v471 = __ldxr(v470);
              while (__stlxr(v471 - 2, v470));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_1DCAEEC34((uint64_t)&v503);
            if (v502)
              sub_1DCAEED94(v502);
            sub_1DCAEEE2C((uint64_t)&v539);
            sub_1DCB4EE2C((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)a3);
            memset(v545, 0, 24);
            objc_msgSend_material(v493, v472, v473);
            v474 = (void *)objc_claimAutoreleasedReturnValue();
            sub_1DCC026C0(a1, v474, (uint64_t)v545);

            v539 = 0u;
            v540 = 0u;
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            *((_QWORD *)&v540 + 1) = 0;
            *(_QWORD *)&v539 = v480;
            v475 = (unint64_t *)MEMORY[0x1E0DF2580];
            v476 = atomic_load(MEMORY[0x1E0DF2580]);
            if (!v476)
            {
              v476 = sub_1DCB9C22C(MEMORY[0x1E0DF2580]);
              v475 = (unint64_t *)MEMORY[0x1E0DF2580];
            }
            v477 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(v475);
            if (!v477)
              v477 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_1DCB9C22C(v475);
            pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v539, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v545, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v476 + 40), v477);
            pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Apply();
            MEMORY[0x1DF0D1164](v501);
            MEMORY[0x1DF0D1164](&v539);
            MEMORY[0x1DF0D0F54](v545);
            sub_1DCAEEE78((uint64_t)&__str);

            ++v485;
            sub_1DCAE6B78((uint64_t)&__p);
            sub_1DCAE6B78((uint64_t)&__dst);
            continue;
          }
          do
          {
LABEL_131:
            *(_QWORD *)&v539 = v107[2];
            if (!sub_1DCAE745C(&__dst, (unint64_t *)&v539))
            {
              v109 = *((_QWORD *)&__dst_16 + 1);
              *(_QWORD *)&__str = &v539;
              sub_1DCC0A2D8((uint64_t)&__dst, (unint64_t *)&v539, (uint64_t)&unk_1DCC58300, (_QWORD **)&__str)[3] = v109;
            }
            v107 = (_QWORD *)*v107;
          }
          while (v107);
          goto LABEL_134;
        }
      }
      v491 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v40, (uint64_t)&v528, v551, 16);
    }
    while (v491);
  }

  MEMORY[0x1DF0D0C78](&v532);
}

void sub_1DCC057FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1DCAE4C58(a1);
  _Unwind_Resume(a1);
}

void sub_1DCC062E8(void *a1, void *a2, unint64_t *a3, uint64_t a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  unint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  void *v39;
  const char *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  float *v48;
  const char *v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  float v62;
  int v63;
  float v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  float v69;
  double v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  int v77;
  float v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  float v83;
  double v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t *v99;

  v7 = a1;
  v92 = a2;
  v94 = v7;
  v96 = objc_msgSend_bufferIndex(v92, v8, v9);
  objc_msgSend_vertexBuffers(v7, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v12, v13, v96);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_map(v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v95 = v17;
  v20 = objc_msgSend_bytes(v17, v18, v19);
  v23 = objc_msgSend_offset(v92, v21, v22);
  objc_msgSend_vertexDescriptor(v7, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_layouts(v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v29, v30, v96);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = objc_msgSend_stride(v31, v32, v33);

  if (v34 <= 2)
  {
    objc_msgSend_name(v92, v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    NSLog(CFSTR("Attribute %@ stride invalid (< 3). Skip copying."), v37);

    if (*a3)
      sub_1DCAEEFD4(a3);
    goto LABEL_36;
  }
  v38 = *(_QWORD *)(a4 + 24);
  if (!v38)
  {
    objc_msgSend_vertexBuffers(v7, v35, v36);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v39, v40, v96);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = objc_msgSend_length(v41, v42, v43) / v34;

  }
  v98 = 0;
  v97 = 0;
  v99 = &v97;
  sub_1DCB27B7C(a3, v38, &v99);
  v93 = objc_msgSend_format(v92, v44, v45);
  v48 = (float *)(v20 + v23);
  v91 = objc_msgSend_format(v92, v46, v47);
  if (!*(_QWORD *)(a4 + 24))
  {
    if (!v38)
      goto LABEL_36;
    v74 = 0;
    v75 = 0;
    while (v93 & 0x10000 | v91 & 0x20000)
    {
      if ((v93 & 0x10000) != 0)
      {
        v85 = *(unsigned __int8 *)v48;
        v86 = *((unsigned __int8 *)v48 + 1);
        v87 = *((unsigned __int8 *)v48 + 2);
        sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
        v83 = (double)v85 * 0.00392156863;
        v76 = (double)v86 * 0.00392156863;
        v84 = (double)v87 * 0.00392156863;
LABEL_28:
        v78 = v84;
        v88 = a3[4];
        v79 = v88 + 12 * v75;
        *(float *)(v88 + v74) = v83;
        v17 = v95;
LABEL_29:
        *(float *)(v79 + 4) = v76;
        *(float *)(v79 + 8) = v78;
        goto LABEL_30;
      }
      if ((v91 & 0x20000) != 0)
      {
        v80 = *(unsigned __int8 *)v48;
        v81 = *((unsigned __int8 *)v48 + 1);
        v82 = *((unsigned __int8 *)v48 + 2);
        sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
        v83 = (double)v80 * 0.00787401575;
        v76 = (double)v81 * 0.00787401575;
        v84 = (double)v82 * 0.00787401575;
        goto LABEL_28;
      }
LABEL_30:
      ++v75;
      v48 = (float *)((char *)v48 + v34);
      v74 += 12;
      if (!--v38)
        goto LABEL_36;
    }
    v77 = *(_DWORD *)v48;
    v76 = v48[1];
    v78 = v48[2];
    sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
    v79 = a3[4] + v74;
    *(_DWORD *)v79 = v77;
    goto LABEL_29;
  }
  v51 = *(_QWORD **)(a4 + 16);
  if (!v51)
    goto LABEL_36;
  while (1)
  {
    v52 = v51[3];
    if (v52 >= *a3)
    {
      objc_msgSend_name(v92, v49, v50);
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      NSLog(CFSTR("Corrupt %@ attribute data. Skip copying."), v89);

      if (!*a3)
        goto LABEL_36;
      goto LABEL_35;
    }
    v53 = v51[2];
    objc_msgSend_vertexBuffers(v94, v49, v50);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v54, v55, v96);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = objc_msgSend_length(v56, v57, v58);
    v60 = v53 * v34;

    if (v60 >= v59)
      break;
    v61 = (float *)((char *)v48 + v60);
    if (!(v93 & 0x10000 | v91 & 0x20000))
    {
      v63 = *(_DWORD *)v61;
      v62 = v61[1];
      v64 = v61[2];
      sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
      v65 = a3[4] + 12 * v52;
      *(_DWORD *)v65 = v63;
      goto LABEL_17;
    }
    if ((v93 & 0x10000) != 0)
    {
      v71 = *(unsigned __int8 *)v61;
      v72 = *((unsigned __int8 *)v61 + 1);
      v73 = *((unsigned __int8 *)v61 + 2);
      sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
      v69 = (double)v71 * 0.00392156863;
      v62 = (double)v72 * 0.00392156863;
      v70 = (double)v73 * 0.00392156863;
LABEL_16:
      v64 = v70;
      v65 = a3[4] + 12 * v52;
      *(float *)v65 = v69;
LABEL_17:
      v17 = v95;
      *(float *)(v65 + 4) = v62;
      *(float *)(v65 + 8) = v64;
      goto LABEL_18;
    }
    v17 = v95;
    if ((v91 & 0x20000) != 0)
    {
      v66 = *(unsigned __int8 *)v61;
      v67 = *((unsigned __int8 *)v61 + 1);
      v68 = *((unsigned __int8 *)v61 + 2);
      sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
      v69 = (double)v66 * 0.00787401575;
      v62 = (double)v67 * 0.00787401575;
      v70 = (double)v68 * 0.00787401575;
      goto LABEL_16;
    }
LABEL_18:
    v51 = (_QWORD *)*v51;
    if (!v51)
      goto LABEL_36;
  }
  v17 = v95;
  objc_msgSend_name(v92, v49, v50);
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  NSLog(CFSTR("Corrupt %@ attribute data. Skip copying."), v90);

  if (!*a3)
    goto LABEL_36;
LABEL_35:
  sub_1DCAEEFD4(a3);
LABEL_36:

}

void sub_1DCC06784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1DCC06850(void *a1, void *a2, unint64_t *a3, uint64_t a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  unint64_t v35;
  const char *v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  const char *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t i;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t *v68;

  v7 = a1;
  v65 = a2;
  v66 = v7;
  v10 = objc_msgSend_bufferIndex(v65, v8, v9);
  objc_msgSend_vertexBuffers(v7, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v13, v14, v10);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_map(v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  v64 = v18;
  v21 = objc_msgSend_bytes(v18, v19, v20);
  v24 = objc_msgSend_offset(v65, v22, v23);
  objc_msgSend_vertexDescriptor(v7, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_layouts(v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v30, v31, v10);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend_stride(v32, v33, v34);

  v38 = *(_QWORD *)(a4 + 24);
  if (!v38)
  {
    objc_msgSend_vertexBuffers(v7, v36, v37);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v39, v40, v10);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = objc_msgSend_length(v41, v42, v43) / v35;

  }
  v67 = 0;
  v68 = &v67;
  sub_1DCC090B4(a3, v38, &v68);
  v46 = (uint64_t *)(v21 + v24);
  if (*(_QWORD *)(a4 + 24))
  {
    v47 = *(_QWORD **)(a4 + 16);
    if (v47)
    {
      while (1)
      {
        v48 = v47[3];
        if (v48 >= *a3)
        {
          objc_msgSend_name(v65, v44, v45);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          NSLog(CFSTR("Corrupt %@ attribute data. Skip copying."), v62);

          if (!*a3)
            goto LABEL_17;
          goto LABEL_16;
        }
        v49 = v47[2];
        objc_msgSend_vertexBuffers(v66, v44, v45);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v50, v51, v10);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = objc_msgSend_length(v52, v53, v54);
        v56 = v49 * v35;

        if (v56 >= v55)
          break;
        v59 = *(uint64_t *)((char *)v46 + v56);
        sub_1DCB8C6E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
        *(_QWORD *)(a3[4] + 8 * v48) = v59;
        v47 = (_QWORD *)*v47;
        if (!v47)
          goto LABEL_17;
      }
      objc_msgSend_name(v65, v57, v58);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      NSLog(CFSTR("Corrupt %@ attribute data. Skip copying."), v63);

      if (!*a3)
        goto LABEL_17;
LABEL_16:
      sub_1DCAEEFD4(a3);
    }
  }
  else if (v38)
  {
    for (i = 0; i != v38; ++i)
    {
      v61 = *v46;
      sub_1DCB8C6E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
      *(_QWORD *)(a3[4] + 8 * i) = v61;
      v46 = (uint64_t *)((char *)v46 + v35);
    }
  }
LABEL_17:

}

void sub_1DCC06AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1DCC06B8C(uint64_t a1, void *a2, int a3)
{
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  const char *v11;
  char *v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  double v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  BOOL v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  id v26;
  const char *v27;
  char *v28;
  unsigned __int8 *v29;
  _BOOL4 v30;
  pxrInternal__aapl__pxrReserved__::UsdStage *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  const char *v40;
  uint64_t v41;
  pxrInternal__aapl__pxrReserved__::UsdStage *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unint64_t *v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  void *v55;
  char isKindOfClass;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;
  const char *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  double v83;
  double v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  const char *v94;
  uint64_t v95;
  unint64_t v96;
  const char *v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  void *v106;
  id v107;
  const char *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t j;
  const char *v114;
  uint64_t v115;
  double v116;
  const char *v117;
  uint64_t v118;
  float32x4_t v119;
  float64x2_t v120;
  float32x4_t v121;
  float32x4_t v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  float32x4_t v127;
  float64x2_t v128;
  float32x4_t v129;
  float32x4_t v130;
  unsigned __int8 *v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  id obj;
  uint64_t *v136;
  void *v137;
  uint64_t v138;
  uint64_t v140;
  _QWORD *v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  __int128 v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  void *__p[2];
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  __int128 v170;
  _OWORD v171[7];
  uint64_t v172;
  _QWORD v173[3];
  _BYTE v174[24];
  int v175;
  uint64_t v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  std::string __str;
  __int128 v182;
  __int128 v183;
  std::string v184;
  void *v185;
  std::string::size_type v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  _BYTE v192[128];
  _BYTE v193[128];
  _BYTE v194[128];
  uint64_t v195;

  v195 = *MEMORY[0x1E0C80C00];
  v188 = 0u;
  v189 = 0u;
  v190 = 0u;
  v191 = 0u;
  obj = a2;
  v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v188, v194, 16);
  if (v5)
  {
    v138 = *(_QWORD *)v189;
    v136 = (uint64_t *)(a1 + 112);
    v141 = (_QWORD *)(a1 + 224);
    v134 = MEMORY[0x1E0DF30B0] + 16;
    do
    {
      v8 = 0;
      v140 = v5;
      do
      {
        if (*(_QWORD *)v189 != v138)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v188 + 1) + 8 * v8);
        v186 = 0;
        v185 = 0;
        v187 = 0;
        objc_msgSend_path(v9, v6, v7);
        v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v12 = (char *)objc_msgSend_cStringUsingEncoding_(v10, v11, 4);
        sub_1DCB0345C(&v185, v12);

        sub_1DCBFFD2C((char *)a1, (uint64_t)&v170);
        if (v187 >= 0)
          v13 = (const std::string::value_type *)&v185;
        else
          v13 = (const std::string::value_type *)v185;
        if (v187 >= 0)
          v14 = HIBYTE(v187);
        else
          v14 = v186;
        v15 = std::string::append((std::string *)&v170, v13, v14);
        v184 = *v15;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (SBYTE7(v171[0]) < 0)
          operator delete((void *)v170);
        v182 = 0u;
        v183 = 0u;
        LODWORD(v182) = 1;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        *((_QWORD *)&v183 + 1) = 0;
        memset(&__str, 0, sizeof(__str));
        v16 = sub_1DCC02D3C((__int128 *)&v184, (_QWORD *)(a1 + 120), (uint64_t)&__str);
        v180 = 0;
        MEMORY[0x1DF0D123C](&v180, &__str, v16);
        objc_msgSend_instance(v9, v17, v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = v19 == 0;

        if (v20)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            sub_1DCC030A0(a1, v9, (uint64_t)&v182, (uint64_t)&v180, (__int128 *)&v184);
LABEL_72:
            v30 = 1;
            goto LABEL_73;
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v42 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428(v136);
            MEMORY[0x1DF0D1254](__p, "Camera");
            pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v180, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
            LODWORD(v182) = v170;
            v43 = *((_QWORD *)&v170 + 1);
            *((_QWORD *)&v170 + 1) = 0;
            v44 = *((_QWORD *)&v182 + 1);
            *((_QWORD *)&v182 + 1) = v43;
            if (v44)
              sub_1DCAEED94(v44);
            sub_1DCB4FA2C((uint64_t)&v183, (int *)v171);
            sub_1DCB4FA80((uint64_t)&v183 + 4);
            if ((BYTE8(v183) & 7) != 0)
            {
              v45 = (unsigned int *)(*((_QWORD *)&v183 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v46 = __ldxr(v45);
              while (__stlxr(v46 - 2, v45));
            }
            *((_QWORD *)&v183 + 1) = *((_QWORD *)&v171[0] + 1);
            *((_QWORD *)&v171[0] + 1) = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_1DCAEEC34((uint64_t)v171);
            if (*((_QWORD *)&v170 + 1))
              sub_1DCAEED94(*((uint64_t *)&v170 + 1));
            if (((uint64_t)__p[0] & 7) != 0)
            {
              v47 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
              do
                v48 = __ldxr(v47);
              while (__stlxr(v48 - 2, v47));
            }
            v175 = v182;
            v176 = *((_QWORD *)&v182 + 1);
            if (*((_QWORD *)&v182 + 1))
            {
              v49 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 48);
              do
                v50 = __ldxr(v49);
              while (__stxr(v50 + 1, v49));
            }
            sub_1DCB30114(&v177, &v183);
            sub_1DCB30164(&v178, (_DWORD *)&v183 + 1);
            v179 = *((_QWORD *)&v183 + 1);
            if ((BYTE8(v183) & 7) != 0)
            {
              v51 = (unsigned int *)(*((_QWORD *)&v183 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 2, v51));
              if ((v52 & 1) == 0)
                v179 &= 0xFFFFFFFFFFFFFFF8;
            }
            sub_1DCC317A8(v9, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v175);
            if ((v179 & 7) != 0)
            {
              v53 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFFFF8);
              do
                v54 = __ldxr(v53);
              while (__stlxr(v54 - 2, v53));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_1DCAEEC34((uint64_t)&v177);
            if (v176)
              sub_1DCAEED94(v176);
            goto LABEL_72;
          }
          objc_msgSend_transform(v9, v40, v41);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();

          if ((isKindOfClass & 1) != 0)
          {
            sub_1DCBC6D7C((uint64_t *)&v146, v136);
            pxrInternal__aapl__pxrReserved__::UsdGeomXform::Define();
            sub_1DCB4FB38((uint64_t)&v170, (uint64_t *)&__p[1], &v163);
            LODWORD(v182) = v170;
            v57 = *((_QWORD *)&v170 + 1);
            *((_QWORD *)&v170 + 1) = 0;
            v58 = *((_QWORD *)&v182 + 1);
            *((_QWORD *)&v182 + 1) = v57;
            if (v58)
              sub_1DCAEED94(v58);
            sub_1DCB4FA2C((uint64_t)&v183, (int *)v171);
            sub_1DCB4FA80((uint64_t)&v183 + 4);
            if ((BYTE8(v183) & 7) != 0)
            {
              v59 = (unsigned int *)(*((_QWORD *)&v183 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v60 = __ldxr(v59);
              while (__stlxr(v60 - 2, v59));
            }
            *((_QWORD *)&v183 + 1) = *((_QWORD *)&v171[0] + 1);
            *((_QWORD *)&v171[0] + 1) = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_1DCAEEC34((uint64_t)v171);
            if (*((_QWORD *)&v170 + 1))
              sub_1DCAEED94(*((uint64_t *)&v170 + 1));
            MEMORY[0x1DF0D0D2C](__p);
            v61 = *((_QWORD *)&v146 + 1);
            if (*((_QWORD *)&v146 + 1))
            {
              v62 = (unsigned int *)(*((_QWORD *)&v146 + 1) + 8);
              do
              {
                v63 = __ldxr(v62);
                v64 = v63 - 1;
              }
              while (__stlxr(v64, v62));
              if (!v64)
                (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
            }
            goto LABEL_72;
          }
          sub_1DCBC6D7C((uint64_t *)&v170, v136);
          pxrInternal__aapl__pxrReserved__::UsdGeomScope::Define();
          MEMORY[0x1DF0D0D08](v174);
          v123 = *((_QWORD *)&v170 + 1);
          if (*((_QWORD *)&v170 + 1))
          {
            v124 = (unsigned int *)(*((_QWORD *)&v170 + 1) + 8);
            do
            {
              v125 = __ldxr(v124);
              v126 = v125 - 1;
            }
            while (__stlxr(v126, v124));
            if (!v126)
              (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
          }
          v30 = 0;
        }
        else
        {
          __p[0] = 0;
          __p[1] = 0;
          v163.f64[0] = 0.0;
          objc_msgSend_instance(v9, v21, v22);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_path(v23, v24, v25);
          v26 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v28 = (char *)objc_msgSend_cStringUsingEncoding_(v26, v27, 4);
          sub_1DCB0345C(__p, v28);

          v29 = sub_1DCC08FB4(v141, (unsigned __int8 *)__p);
          v30 = v29 != 0;
          if (v29)
          {
            v31 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428(v136);
            *(_QWORD *)&v146 = 0;
            pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v180, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v146);
            LODWORD(v182) = v170;
            v32 = *((_QWORD *)&v170 + 1);
            *((_QWORD *)&v170 + 1) = 0;
            v33 = *((_QWORD *)&v182 + 1);
            *((_QWORD *)&v182 + 1) = v32;
            if (v33)
              sub_1DCAEED94(v33);
            sub_1DCB4FA2C((uint64_t)&v183, (int *)v171);
            sub_1DCB4FA80((uint64_t)&v183 + 4);
            if ((BYTE8(v183) & 7) != 0)
            {
              v34 = (unsigned int *)(*((_QWORD *)&v183 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v35 = __ldxr(v34);
              while (__stlxr(v35 - 2, v34));
            }
            *((_QWORD *)&v183 + 1) = *((_QWORD *)&v171[0] + 1);
            *((_QWORD *)&v171[0] + 1) = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_1DCAEEC34((uint64_t)v171);
            if (*((_QWORD *)&v170 + 1))
              sub_1DCAEED94(*((uint64_t *)&v170 + 1));
            if ((v146 & 7) != 0)
            {
              v36 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
              do
                v37 = __ldxr(v36);
              while (__stlxr(v37 - 2, v36));
            }
            sub_1DCC07B5C((uint64_t)&v182);
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v182);
            MEMORY[0x1DF0D123C](v173, __p);
            pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v146, 0.0, 1.0);
            pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_1DCAEEC34((uint64_t)v173);
            if ((BYTE8(v171[0]) & 7) != 0)
            {
              v38 = (unsigned int *)(*((_QWORD *)&v171[0] + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v39 = __ldxr(v38);
              while (__stlxr(v39 - 2, v38));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_1DCAEEC34((uint64_t)v171);
            if (*((_QWORD *)&v170 + 1))
              sub_1DCAEED94(*((uint64_t *)&v170 + 1));
          }
          if (SHIBYTE(v163.f64[0]) < 0)
            operator delete(__p[0]);
        }
LABEL_73:
        if (sub_1DCB4F88C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v182))
        {
          objc_msgSend_transform(v9, v65, v66);
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v67)
            v30 = 0;

          if (v30)
          {
            memset(v173, 0, sizeof(v173));
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            v173[0] = v134;
            v172 = 0;
            v170 = 0u;
            memset(v171, 0, sizeof(v171));
            __p[0] = 0;
            pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTransformOp();
            if (((uint64_t)__p[0] & 7) != 0)
            {
              v70 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
              do
                v71 = __ldxr(v70);
              while (__stlxr(v71 - 2, v70));
            }
            objc_msgSend_transform(v9, v68, v69);
            v137 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend_keyTimes(v137, v72, v73);
              v74 = (void *)objc_claimAutoreleasedReturnValue();
              v75 = v74;
              if (v137 && v74)
              {
                v160 = 0u;
                v161 = 0u;
                v158 = 0u;
                v159 = 0u;
                v76 = v74;
                v80 = objc_msgSend_countByEnumeratingWithState_objects_count_(v76, v77, (uint64_t)&v158, v193, 16);
                if (v80)
                {
                  v81 = *(_QWORD *)v159;
                  do
                  {
                    for (i = 0; i != v80; ++i)
                    {
                      if (*(_QWORD *)v159 != v81)
                        objc_enumerationMutation(v76);
                      objc_msgSend_doubleValue(*(void **)(*((_QWORD *)&v158 + 1) + 8 * i), v78, v79);
                      v84 = v83;
                      objc_msgSend_transform(v9, v85, v86);
                      v87 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_localTransformAtTime_(v87, v88, v89, v84);
                      v142 = v90;
                      v143 = v91;
                      v144 = v92;
                      v145 = v93;

                      v96 = objc_msgSend_count(v76, v94, v95);
                      *(float64x2_t *)__p = vcvtq_f64_f32(*(float32x2_t *)v142.f32);
                      v163 = vcvt_hight_f64_f32(v142);
                      v164 = vcvtq_f64_f32(*(float32x2_t *)v143.f32);
                      v165 = vcvt_hight_f64_f32(v143);
                      v166 = vcvtq_f64_f32(*(float32x2_t *)v144.f32);
                      v167 = vcvt_hight_f64_f32(v144);
                      v168 = vcvtq_f64_f32(*(float32x2_t *)v145.f32);
                      v169 = vcvt_hight_f64_f32(v145);
                      if (v96 >= 2)
                        objc_msgSend__timeCodesPerSecond(*(void **)a1, v97, v98);
                      sub_1DCC07C60((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&v170);
                    }
                    v80 = objc_msgSend_countByEnumeratingWithState_objects_count_(v76, v78, (uint64_t)&v158, v193, 16);
                  }
                  while (v80);
                }

                v75 = v76;
              }
              else
              {
                v119 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
                v120 = vcvt_hight_f64_f32(*MEMORY[0x1E0C83FF0]);
                *(float64x2_t *)__p = vcvtq_f64_f32(*MEMORY[0x1E0C83FF0]);
                v163 = v120;
                v164 = vcvtq_f64_f32(*(float32x2_t *)v119.f32);
                v165 = vcvt_hight_f64_f32(v119);
                v121 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
                v122 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
                v166 = vcvtq_f64_f32(*(float32x2_t *)v121.f32);
                v167 = vcvt_hight_f64_f32(v121);
                v168 = vcvtq_f64_f32(*(float32x2_t *)v122.f32);
                v169 = vcvt_hight_f64_f32(v122);
                sub_1DCC07C60((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&v170);
              }
              goto LABEL_118;
            }
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend_transform(v9, v99, v100);
              v75 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_keyTimes(v75, v101, v102);
              v103 = (void *)objc_claimAutoreleasedReturnValue();
              v106 = v103;
              if (v103 && objc_msgSend_count(v103, v104, v105))
              {
                v156 = 0u;
                v157 = 0u;
                v154 = 0u;
                v155 = 0u;
                v107 = v106;
                v111 = objc_msgSend_countByEnumeratingWithState_objects_count_(v107, v108, (uint64_t)&v154, v192, 16);
                if (v111)
                {
                  v112 = *(_QWORD *)v155;
                  do
                  {
                    for (j = 0; j != v111; ++j)
                    {
                      if (*(_QWORD *)v155 != v112)
                        objc_enumerationMutation(v107);
                      objc_msgSend_doubleValue(*(void **)(*((_QWORD *)&v154 + 1) + 8 * j), v109, v110);
                      v168 = 0u;
                      v169 = 0u;
                      v166 = 0u;
                      v167 = 0u;
                      v164 = 0u;
                      v165 = 0u;
                      *(_OWORD *)__p = 0u;
                      v163 = 0u;
                      if (v75)
                        objc_msgSend_double4x4AtTime_(v75, v114, v115, v116);
                      if ((unint64_t)objc_msgSend_count(v107, v114, v115) < 2)
                      {
                        v146 = *(_OWORD *)__p;
                        v147 = v163;
                        v148 = v164;
                        v149 = v165;
                        v150 = v166;
                        v151 = v167;
                        v152 = v168;
                        v153 = v169;
                      }
                      else
                      {
                        v146 = *(_OWORD *)__p;
                        v147 = v163;
                        v148 = v164;
                        v149 = v165;
                        v150 = v166;
                        v151 = v167;
                        v152 = v168;
                        v153 = v169;
                        objc_msgSend__timeCodesPerSecond(*(void **)a1, v117, v118);
                      }
                      sub_1DCC07C60((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&v170);
                    }
                    v111 = objc_msgSend_countByEnumeratingWithState_objects_count_(v107, v109, (uint64_t)&v154, v192, 16);
                  }
                  while (v111);
                }

              }
              else
              {
                v127 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
                v128 = vcvt_hight_f64_f32(*MEMORY[0x1E0C83FF0]);
                *(float64x2_t *)__p = vcvtq_f64_f32(*MEMORY[0x1E0C83FF0]);
                v163 = v128;
                v164 = vcvtq_f64_f32(*(float32x2_t *)v127.f32);
                v165 = vcvt_hight_f64_f32(v127);
                v129 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
                v130 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
                v166 = vcvtq_f64_f32(*(float32x2_t *)v129.f32);
                v167 = vcvt_hight_f64_f32(v129);
                v168 = vcvtq_f64_f32(*(float32x2_t *)v130.f32);
                v169 = vcvt_hight_f64_f32(v130);
                sub_1DCC07C60((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&v170);
              }

LABEL_118:
            }

            sub_1DCB4F7EC((uint64_t)&v170);
            MEMORY[0x1DF0D0D2C](v173);
          }
        }
        if (a3)
        {
          *(_QWORD *)&v170 = &v185;
          v131 = sub_1DCC0A710((uint64_t)v141, (unsigned __int8 *)&v185, (uint64_t)&unk_1DCC58300, (__int128 **)&v170);
          std::string::operator=((std::string *)(v131 + 40), &__str);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v180);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if ((BYTE8(v183) & 7) != 0)
        {
          v132 = (unsigned int *)(*((_QWORD *)&v183 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v133 = __ldxr(v132);
          while (__stlxr(v133 - 2, v132));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v183);
        if (*((_QWORD *)&v182 + 1))
          sub_1DCAEED94(*((uint64_t *)&v182 + 1));
        if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v184.__r_.__value_.__l.__data_);
        if (SHIBYTE(v187) < 0)
          operator delete(v185);
        ++v8;
      }
      while (v8 != v140);
      v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v188, v194, 16);
    }
    while (v5);
  }

}

void sub_1DCC07860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1DCC07B5C(uint64_t a1)
{
  unint64_t v2;

  v2 = atomic_load(MEMORY[0x1E0DF2438]);
  if (!v2)
    v2 = sub_1DCC099E0(MEMORY[0x1E0DF2438]);
  return sub_1DCC09268(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v2 + 200));
}

uint64_t sub_1DCC07C00(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_1DCAEED94(v5);
  return a1;
}

uint64_t sub_1DCC07C60(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;

  if (*((_BYTE *)a1 + 132))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a1);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    if ((v4 & 7) != 0)
    {
      v2 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v3 = __ldxr(v2);
      while (__stlxr(v3 - 2, v2));
    }
    return 0;
  }
  else
  {
    sub_1DCB4EDE4((uint64_t)a1);
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
  }
}

void sub_1DCC07D70(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *v3;
  const char *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdStage *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  __CFString *v17;
  int isEqualToString;
  const char *v19;
  id v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  const char *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  double v37;
  double v38;
  pxrInternal__aapl__pxrReserved__::UsdStage *v39;
  const char *v40;
  uint64_t v41;
  double v42;
  pxrInternal__aapl__pxrReserved__::UsdStage *v43;
  const char *v44;
  uint64_t v45;
  double v46;
  double v47;
  const char *v48;
  uint64_t v49;
  double v50;
  const char *v51;
  uint64_t v52;
  double v53;
  pxrInternal__aapl__pxrReserved__::UsdStage *v54;
  const char *v55;
  uint64_t v56;
  double v57;
  double v58;
  const char *v59;
  uint64_t v60;
  double v61;
  const char *v62;
  uint64_t v63;
  unint64_t v64;
  float v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  id v79;
  const char *v80;
  const std::string::value_type *v81;
  std::string *v82;
  __int128 v83;
  pxrInternal__aapl__pxrReserved__::UsdStage *v84;
  unsigned int *v85;
  unsigned int v86;
  unint64_t v87;
  const char *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  void *v93;
  id v94;
  uint64_t v95;
  id v96;
  const char *v97;
  unsigned int *v98;
  unsigned int v99;
  const char *v100;
  void *v101;
  uint64_t v102;
  const char *v103;
  void *v104;
  unsigned int *v105;
  unsigned int v106;
  id v107;
  id v108;
  id v109;
  __CFString *v111;
  __CFString *v112;
  id obj;
  uint64_t *v114;
  _QWORD v116[4];
  id v117;
  uint64_t v118;
  void *__p[2];
  std::string::size_type v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  unsigned int *v125;
  uint64_t v126;
  void *v127;
  _BYTE v128[128];
  _BYTE v129[32];
  __int128 v130;
  __int128 v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v111 = a2;
  v125 = 0;
  sub_1DCB0345C(&v130, ".usda");
  *(_OWORD *)&v129[8] = 0uLL;
  *(_QWORD *)v129 = &v129[8];
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous();
  sub_1DCAD5CA8((uint64_t)v129, *(_QWORD **)&v129[8]);
  if (SBYTE7(v131) < 0)
    operator delete((void *)v130);
  sub_1DCC0AACC((uint64_t *)&v130, (uint64_t *)&v125);
  pxrInternal__aapl__pxrReserved__::UsdStage::Open();
  v3 = *(unsigned int **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)v129;
  *(_QWORD *)v129 = 0;
  v114 = (uint64_t *)(a1 + 112);
  sub_1DCBC6CD0(a1 + 112, v3);
  sub_1DCBC6CA4((unsigned int **)v129);
  v5 = *((_QWORD *)&v130 + 1);
  if (*((_QWORD *)&v130 + 1))
  {
    v6 = (unsigned int *)(*((_QWORD *)&v130 + 1) + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  if (*v114)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v4, (uint64_t)CFSTR("Model IO export preview %.02f"), 0x3FF19999A0000000);
    v107 = (id)objc_claimAutoreleasedReturnValue();
    v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428(v114);
    MEMORY[0x1DF0D1254](v129, "customLayerData");
    MEMORY[0x1DF0D1254](__p, "creator");
    v108 = objc_retainAutorelease(v107);
    v126 = objc_msgSend_UTF8String(v108, v10, v11);
    *((_QWORD *)&v130 + 1) = 0;
    sub_1DCC0AB88((uint64_t *)&v130, (char **)&v126);
    pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadataByDictKey(v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)v129, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v130);
    sub_1DCAEEE2C((uint64_t)&v130);
    if (((uint64_t)__p[0] & 7) != 0)
    {
      v13 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    if ((v129[0] & 7) != 0)
    {
      v15 = (unsigned int *)(*(_QWORD *)v129 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    v17 = v111;
    if (!v111
      || (isEqualToString = objc_msgSend_isEqualToString_(v111, v12, (uint64_t)&stru_1EA577998),
          v17 = v111,
          isEqualToString))
    {

      v17 = CFSTR("root_node");
    }
    v112 = v17;
    sub_1DCC02BEC(v17);
    v109 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend_stringByAppendingString_(CFSTR("/"), v19, (uint64_t)v109);
    v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v23 = objc_msgSend_UTF8String(v20, v21, v22);
    MEMORY[0x1DF0D201C](a1 + 16, v23);

    v130 = 0u;
    v131 = 0u;
    sub_1DCBC6D7C((uint64_t *)__p, v114);
    MEMORY[0x1DF0D123C](&v126, a1 + 16);
    pxrInternal__aapl__pxrReserved__::UsdGeomXform::Define();
    sub_1DCB4FB38((uint64_t)&v130, (uint64_t *)&v129[8], &v129[16]);
    MEMORY[0x1DF0D0D2C](v129);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v126);
    v24 = __p[1];
    if (__p[1])
    {
      v25 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v26 = __ldxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
        (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
    }
    MEMORY[0x1DF0D1254](__p, "name");
    v111 = (__CFString *)objc_retainAutorelease(v109);
    v126 = objc_msgSend_UTF8String(v111, v28, v29);
    *(_QWORD *)&v129[8] = 0;
    sub_1DCC0AB88((uint64_t *)v129, (char **)&v126);
    pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)&v130, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)v129);
    sub_1DCAEEE2C((uint64_t)v129);
    if (((uint64_t)__p[0] & 7) != 0)
    {
      v30 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(_QWORD *)&v129[24] = 0;
    *(_QWORD *)v129 = MEMORY[0x1E0DF30A0] + 16;
    v32 = atomic_load(MEMORY[0x1E0DF23A0]);
    if (!v32)
      v32 = sub_1DCC0B024(MEMORY[0x1E0DF23A0]);
    pxrInternal__aapl__pxrReserved__::UsdModelAPI::SetKind((pxrInternal__aapl__pxrReserved__::UsdModelAPI *)v129, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v32 + 8));
    MEMORY[0x1DF0D0C84](v129);
    sub_1DCBC3428(v114);
    pxrInternal__aapl__pxrReserved__::UsdStage::SetDefaultPrim();
    objc_msgSend_endTime(*(void **)a1, v33, v34);
    if (v37 != 0.0 || (objc_msgSend_startTime(*(void **)a1, v35, v36), v38 != 0.0))
    {
      v39 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428(v114);
      objc_msgSend__timeCodesPerSecond(*(void **)a1, v40, v41);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetTimeCodesPerSecond(v39, v42);
      v43 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428(v114);
      objc_msgSend_startTime(*(void **)a1, v44, v45);
      v47 = v46;
      objc_msgSend__timeCodesPerSecond(*(void **)a1, v48, v49);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetStartTimeCode(v43, v50 * v47);
      objc_msgSend_endTime(*(void **)a1, v51, v52);
      if (v53 < 1.79769313e308)
      {
        v54 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428(v114);
        objc_msgSend_endTime(*(void **)a1, v55, v56);
        v58 = v57;
        objc_msgSend__timeCodesPerSecond(*(void **)a1, v59, v60);
        pxrInternal__aapl__pxrReserved__::UsdStage::SetEndTimeCode(v54, v61 * v58);
      }
    }
    sub_1DCBC6D7C((uint64_t *)v129, v114);
    objc_msgSend_upAxis(*(void **)a1, v62, v63);
    v64 = atomic_load(MEMORY[0x1E0DF24F8]);
    if (v65 == 0.0)
    {
      if (!v64)
        sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
    }
    else if (!v64)
    {
      sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomSetStageUpAxis();
    v68 = *(_QWORD *)&v129[8];
    if (*(_QWORD *)&v129[8])
    {
      v69 = (unsigned int *)(*(_QWORD *)&v129[8] + 8);
      do
      {
        v70 = __ldxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (!v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
    }
    v121 = 0u;
    v122 = 0u;
    v123 = 0u;
    v124 = 0u;
    objc_msgSend_masters(*(void **)a1, v66, v67);
    obj = (id)objc_claimAutoreleasedReturnValue();
    v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v72, (uint64_t)&v121, v128, 16);
    if (v73)
    {
      v74 = *(_QWORD *)v122;
      do
      {
        v75 = 0;
        do
        {
          if (*(_QWORD *)v122 != v74)
            objc_enumerationMutation(obj);
          v76 = *(void **)(*((_QWORD *)&v121 + 1) + 8 * v75);
          __p[0] = 0;
          __p[1] = 0;
          v120 = 0;
          sub_1DCB0345C(v129, "/");
          objc_msgSend_name(v76, v77, v78);
          v79 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v81 = (const std::string::value_type *)objc_msgSend_cStringUsingEncoding_(v79, v80, 4);
          v82 = std::string::append((std::string *)v129, v81);
          v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
          v120 = v82->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v83;
          v82->__r_.__value_.__l.__size_ = 0;
          v82->__r_.__value_.__r.__words[2] = 0;
          v82->__r_.__value_.__r.__words[0] = 0;

          if ((v129[23] & 0x80000000) != 0)
            operator delete(*(void **)v129);
          memset(v129, 0, sizeof(v129));
          v84 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428(v114);
          MEMORY[0x1DF0D123C](&v126, __p);
          pxrInternal__aapl__pxrReserved__::UsdStage::OverridePrim(v84, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v126);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v126);
          MEMORY[0x1DF0D1254](&v126, "Xform");
          sub_1DCC08A4C((uint64_t)v129);
          if ((v126 & 7) != 0)
          {
            v85 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFFFF8);
            do
              v86 = __ldxr(v85);
            while (__stlxr(v86 - 2, v85));
          }
          v87 = atomic_load(MEMORY[0x1E0DF2438]);
          if (!v87)
            v87 = sub_1DCC099E0(MEMORY[0x1E0DF2438]);
          MEMORY[0x1DF0D1254](&v118, "subcomponent");
          v126 = 0;
          sub_1DCC09A98((uint64_t)v129, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v87 + 208));
          if ((v126 & 7) != 0)
          {
            v89 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFFFF8);
            do
              v90 = __ldxr(v89);
            while (__stlxr(v90 - 2, v89));
          }
          if ((v118 & 7) != 0)
          {
            v91 = (unsigned int *)(v118 & 0xFFFFFFFFFFFFFFF8);
            do
              v92 = __ldxr(v91);
            while (__stlxr(v92 - 2, v91));
          }
          v127 = v76;
          objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v88, (uint64_t)&v127, 1);
          v93 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1DCC06B8C(a1, v93, 1);

          LOBYTE(v126) = 0;
          v94 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          v95 = objc_opt_class();
          v116[0] = MEMORY[0x1E0C809B0];
          v116[1] = 3221225472;
          v116[2] = sub_1DCC08AF0;
          v116[3] = &unk_1EA577160;
          v96 = v94;
          v117 = v96;
          objc_msgSend_enumerateChildObjectsOfClass_root_usingBlock_stopPointer_(v76, v97, v95, v76, v116, &v126);
          sub_1DCC06B8C(a1, v96, 0);
          sub_1DCC08AFC((uint64_t)v129);

          if ((v129[24] & 7) != 0)
          {
            v98 = (unsigned int *)(*(_QWORD *)&v129[24] & 0xFFFFFFFFFFFFFFF8);
            do
              v99 = __ldxr(v98);
            while (__stlxr(v99 - 2, v98));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v129[16]);
          if (*(_QWORD *)&v129[8])
            sub_1DCAEED94(*(uint64_t *)&v129[8]);
          if (SHIBYTE(v120) < 0)
            operator delete(__p[0]);
          ++v75;
        }
        while (v75 != v73);
        v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v100, (uint64_t)&v121, v128, 16);
      }
      while (v73);
    }

    v101 = *(void **)a1;
    v102 = objc_opt_class();
    objc_msgSend_childObjectsOfClass_(v101, v103, v102);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1DCC06B8C(a1, v104, 0);
    *a3 = *v114;
    sub_1DCBC6EF0(a3);

    if ((BYTE8(v131) & 7) != 0)
    {
      v105 = (unsigned int *)(*((_QWORD *)&v131 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v106 = __ldxr(v105);
      while (__stlxr(v106 - 2, v105));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v131);
    if (*((_QWORD *)&v130 + 1))
      sub_1DCAEED94(*((uint64_t *)&v130 + 1));

  }
  else
  {
    *a3 = 0;
    sub_1DCBC6EF0(a3);
  }
  sub_1DCC0AAA0(&v125);

}

void sub_1DCC086D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,unsigned int *a41,uint64_t a42)
{
  sub_1DCC0AAA0(&a41);

  _Unwind_Resume(a1);
}

uint64_t sub_1DCC08A4C(uint64_t a1)
{
  unint64_t v2;

  v2 = atomic_load(MEMORY[0x1E0DF2438]);
  if (!v2)
    v2 = sub_1DCC099E0(MEMORY[0x1E0DF2438]);
  return sub_1DCC09A98(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v2 + 448));
}

uint64_t sub_1DCC08AF0(uint64_t a1, const char *a2)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2);
}

uint64_t sub_1DCC08AFC(uint64_t a1)
{
  unint64_t v2;

  v2 = atomic_load(MEMORY[0x1E0DF2438]);
  if (!v2)
    v2 = sub_1DCC099E0(MEMORY[0x1E0DF2438]);
  return sub_1DCC094E0(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v2 + 312));
}

void sub_1DCC08BA0(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _BYTE v24[24];
  _QWORD *v25;
  _QWORD v26[2];
  __int128 v27;
  _BYTE v28[24];

  v7 = a1;
  v8 = a2;
  v9 = a3;
  sub_1DCAD5E24();
  *(_OWORD *)&v28[8] = 0u;
  *(_OWORD *)&v24[8] = 0u;
  v22 = 1065353216;
  v10 = v7;
  v11 = v9;
  v12[0] = v10;
  v12[1] = v11;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  v23 = 0u;
  *(_OWORD *)v24 = 0u;
  *(_DWORD *)&v24[16] = 1065353216;
  v26[0] = 0;
  v26[1] = 0;
  v25 = v26;
  *(_OWORD *)v28 = 0u;
  v27 = 0u;
  *(_DWORD *)&v28[16] = 1065353216;
  *a4 = 0;
  sub_1DCC07D70((uint64_t)v12, v8, a4);
  sub_1DCC09854((uint64_t)v12);

}

void sub_1DCC08CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);
  sub_1DCC09854((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1DCC08CDC(void *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::UsdStage *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD **v20;
  _QWORD *v21[2];
  void *__p;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27[2];
  uint64_t v28;
  unsigned int *v29;

  v5 = a1;
  v8 = a2;
  if (v8)
  {
    objc_msgSend_URLByDeletingPathExtension(v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_lastPathComponent(v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v29 = 0;
    sub_1DCC08BA0(v8, v12, v5, (uint64_t *)&v29);
    if (v29)
    {
      v27[0] = 0;
      v27[1] = 0;
      v28 = 0;
      sub_1DCAD5A0C(v5, v13, v14, v27);
      v15 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428((uint64_t *)&v29);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v15);
      sub_1DCC08F18(&v25);
      __p = 0;
      v23 = 0;
      v24 = 0;
      v21[0] = 0;
      v21[1] = 0;
      v20 = v21;
      pxrInternal__aapl__pxrReserved__::SdfLayer::Export();
      sub_1DCAD5CA8((uint64_t)&v20, v21[0]);
      if (SHIBYTE(v24) < 0)
        operator delete(__p);
      v16 = v26;
      if (v26)
      {
        v17 = (unsigned int *)(v26 + 8);
        do
        {
          v18 = __ldxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      sub_1DCB0345C(a3, "");
      if (SHIBYTE(v28) < 0)
        operator delete(v27[0]);
    }
    else
    {
      sub_1DCB0345C(a3, "Cannot create USD data for export");
    }
    sub_1DCBC6CA4(&v29);

  }
  else
  {
    sub_1DCB0345C(a3, "Cannot export nil asset");
  }

}

void sub_1DCC08E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  sub_1DCBC6CA4((unsigned int **)(v28 - 56));

  _Unwind_Resume(a1);
}

uint64_t sub_1DCC08F18(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_1DCB9B780(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    sub_1DCB9AC0C((unint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

unsigned __int8 *sub_1DCC08FB4(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_1DCB9BA90((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((sub_1DCB9BACC(v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void sub_1DCC090B4(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load((unint64_t *)v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCB8C774((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                v10[i] = *(_QWORD *)(v9 + i * 8);
            }
          }
          v12 = *a3;
          v13 = v3;
          do
            v7[v13++] = *v12;
          while (a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (uint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_1DCB8C774((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 8 * v19;
      v22 = v20;
      do
      {
        v23 = *v7++;
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = v3;
      do
        v20[v25++] = *v24;
      while (a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 8 * a2;
  if (8 * a2 / a2 != 8)
  {
LABEL_18:
    sub_1DCAEEFD4(a1);
    return;
  }
  v16 = sub_1DCB8C774((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    v16[v17 / 8] = *v18;
    v17 += 8;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (uint64_t *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

uint64_t sub_1DCC09268(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_1DCC092F0(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  BOOL v5;

  v3 = **(_BYTE **)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  *(_QWORD *)(a2 + 8) = &unk_1EA576183;
  *(_BYTE *)a2 = v3;
  return 1;
}

uint64_t sub_1DCC09350(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t result;
  uint64_t v5;

  v2 = a2;
  result = sub_1DCB4E1B4(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)v2 + 1);
    if ((v5 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    return *(unsigned __int8 *)v2 == **(unsigned __int8 **)(a1 + 8);
  }
  return result;
}

_BYTE *sub_1DCC093B0(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

_BYTE *sub_1DCC093C0(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1DCC093CC()
{
  return 1;
}

unint64_t sub_1DCC093D4(unsigned __int8 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_1DCC093F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL sub_1DCC09408(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1DCC09420()
{
  return 0;
}

uint64_t sub_1DCC09430()
{
  return MEMORY[0x1E0DE4EC0];
}

uint64_t sub_1DCC0943C()
{
  return 0;
}

uint64_t sub_1DCC09444()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCC09450()
{
  return 0;
}

uint64_t sub_1DCC09458()
{
  return 0;
}

BOOL sub_1DCC09460(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x1E0DE4EC0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCC09494(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x1E0DE4EC0], a2);
}

uint64_t sub_1DCC094B4()
{
  return MEMORY[0x1E0DE4EC0];
}

_BYTE *sub_1DCC094C4@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_1EA576183;
  *(_BYTE *)a2 = *result;
  return result;
}

uint64_t sub_1DCC094E0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_1DCC09568(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  BOOL v5;

  v3 = **(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  *(_QWORD *)(a2 + 8) = (char *)&off_1EA574A80 + 3;
  *(_DWORD *)a2 = v3;
  return 1;
}

uint64_t sub_1DCC095C8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  v2 = (uint64_t)a2;
  result = sub_1DCC097E4(a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if ((v5 & 4) != 0)
      v2 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    return *(_DWORD *)v2 == **(_DWORD **)(a1 + 8);
  }
  return result;
}

_DWORD *sub_1DCC09628(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_1DCC09638(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1DCC09644()
{
  return 1;
}

unint64_t sub_1DCC0964C(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_1DCC0966C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_1DCC09680(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1DCC09698()
{
  return 0;
}

void *sub_1DCC096A8()
{
  return &unk_1EA573950;
}

uint64_t sub_1DCC096B4()
{
  return 0;
}

uint64_t sub_1DCC096BC()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCC096C8()
{
  return 0;
}

uint64_t sub_1DCC096D0()
{
  return 0;
}

BOOL sub_1DCC096D8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfSpecifierE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCC09708(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_1EA573950, a2);
}

void *sub_1DCC09728()
{
  return &unk_1EA573950;
}

_DWORD *sub_1DCC09738@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&off_1EA574A80 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

_QWORD *sub_1DCC09754(uint64_t a1, _QWORD *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetName();
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_1DCB03734(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_1DCC097C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCC097E4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfSpecifierE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, (const std::type_info *)&unk_1EA573950);
}

uint64_t sub_1DCC09854(uint64_t a1)
{
  sub_1DCC098F0(a1 + 224);
  sub_1DCC09964(a1 + 200, *(id **)(a1 + 208));
  sub_1DCAD5D10(a1 + 160);
  sub_1DCAD5D10(a1 + 120);
  sub_1DCBC6CA4((unsigned int **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));

  return a1;
}

uint64_t sub_1DCC098F0(uint64_t a1)
{
  void *v2;

  sub_1DCC09928(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1DCC09928(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1DCAFBF08((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_1DCC09964(uint64_t a1, id *a2)
{
  if (a2)
  {
    sub_1DCC09964(a1, *a2);
    sub_1DCC09964(a1, a2[1]);
    sub_1DCC099AC(a2 + 4);
    operator delete(a2);
  }
}

void sub_1DCC099AC(id *a1)
{
  id v2;

  MEMORY[0x1DF0D0F54](a1 + 1);
  v2 = *a1;
  *a1 = 0;

}

unint64_t sub_1DCC099E0(unint64_t *a1)
{
  unint64_t result;
  uint64_t v4;

  result = sub_1DCC09A38();
  while (!__ldaxr(a1))
  {
    if (!__stlxr(result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = MEMORY[0x1DF0D1194]();
    MEMORY[0x1DF0D228C](v4, 0x60C40DF8E1979);
  }
  return atomic_load(a1);
}

uint64_t sub_1DCC09A38()
{
  uint64_t v0;

  v0 = operator new();
  MEMORY[0x1DF0D1188]();
  return v0;
}

void sub_1DCC09A74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D228C](v1, 0x60C40DF8E1979);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCC09A98(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_1DCC09B20(uint64_t a1, uint64_t *a2)
{
  sub_1DCC09BAC(a2, *(uint64_t **)(a1 + 8));
  return 1;
}

uint64_t sub_1DCC09B44(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t result;
  uint64_t v5;

  v2 = a2;
  result = sub_1DCB93764(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)v2 + 1);
    if ((v5 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    return (*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8) == (**(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  return result;
}

uint64_t *sub_1DCC09BAC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v9 = 0;
  sub_1DCB25FE8((uint64_t)&v8, (uint64_t)a1);
  a1[1] = (uint64_t)&off_1EA5753D8 + 1;
  v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  if (v9)
    (*(void (**)(uint64_t *))(v9 + 32))(&v8);
  return a1;
}

void sub_1DCC09C6C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1DCAE4C58(a1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCC09C78(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

_QWORD *sub_1DCC09CB0(_QWORD *result)
{
  unsigned int *v1;
  unsigned int v2;

  if ((*result & 7) != 0)
  {
    v1 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
    do
      v2 = __ldxr(v1);
    while (__stlxr(v2 - 2, v1));
  }
  return result;
}

_QWORD *sub_1DCC09CD4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_1DCC09CE4()
{
  return 1;
}

unint64_t sub_1DCC09CEC(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * (*a1 & 0xFFFFFFFFFFFFFFF8));
}

BOOL sub_1DCC09D10(_QWORD *a1, _QWORD *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

BOOL sub_1DCC09D2C(_QWORD *a1, _QWORD *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_1DCC09D4C()
{
  return 0;
}

uint64_t sub_1DCC09D58()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_1DCC09D68()
{
  return &unk_1EA573A88;
}

uint64_t sub_1DCC09D74()
{
  return 0;
}

uint64_t sub_1DCC09D7C()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCC09D88()
{
  return 0;
}

uint64_t sub_1DCC09D90()
{
  return 0;
}

BOOL sub_1DCC09D98(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7TfTokenE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCC09DC8(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573A88, a2);
}

void *sub_1DCC09DE8()
{
  return &unk_1EA573A88;
}

unsigned int **sub_1DCC09DF8@<X0>(unsigned int **result@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  a2[1] = (unsigned int *)((char *)&off_1EA5753D8 + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *a2 = v3;
  }
  return result;
}

uint64_t *sub_1DCC09E34(uint64_t a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = (uint64_t *)*v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = (uint64_t *)v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    memset(v11, 0, sizeof(v11));
    sub_1DCC09F04(a1, a4, v11);
    sub_1DCACAE54((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    sub_1DCC0A078((uint64_t)v11, 0);
  }
  return v8;
}

_QWORD *sub_1DCC09F04@<X0>(uint64_t a1@<X0>, id **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  id *v8;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  v8 = *a2;
  result = sub_1DCC09F88(v6 + 4, &v8);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1DCC09F70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCC0A078(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCC09F88(_QWORD *a1, id **a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;

  *a1 = **a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  a1[1] = MEMORY[0x1E0DF3108] + 16;
  if ((v7 & 7) != 0)
  {
    v3 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v6);
  return a1;
}

void sub_1DCC0A05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id *v9;

  sub_1DCB4FAD8((uint64_t)&a9);
  sub_1DCC02BB8(v9);
  _Unwind_Resume(a1);
}

void sub_1DCC0A078(uint64_t a1, uint64_t a2)
{
  id *v2;

  v2 = *(id **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1DCC099AC(v2 + 4);
    operator delete(v2);
  }
}

_QWORD *sub_1DCC0A0BC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = *a2;
      if (v5 >= v6)
        v8 = v5 % v6;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v5)
        {
          if (i[2] == v5)
            return i;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6)
              v11 %= v6;
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  else
  {
    v8 = 0;
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v5;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_1DCAD4EF4(a1, v17);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v8) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6)
        v20 %= v6;
    }
    else
    {
      v20 &= v6 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1DCC0A2C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCC0A2D8(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = *a2;
      if (v6 >= v7)
        v9 = v6 % v7;
    }
    else
    {
      v9 = (v7 - 1) & v6;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v12 >= v7)
              v12 %= v7;
          }
          else
          {
            v12 &= v7 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  else
  {
    v9 = 0;
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_1DCAD4EF4(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v9 = v6 % v7;
      else
        v9 = v6;
    }
    else
    {
      v9 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v9) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1DCC0A4E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1DCC0A4F8(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(int **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_1DCAF100C(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 4 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_1DCAEEE78(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

_QWORD *sub_1DCC0A65C(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

unsigned __int8 *sub_1DCC0A710(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_1DCB9BA90(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v13 = v8;
      if (v8 >= v10)
        v13 = v8 % v10;
    }
    else
    {
      v13 = (v10 - 1) & v8;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v9)
        {
          if ((sub_1DCB9BACC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10)
              v16 %= v10;
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13)
            break;
        }
      }
    }
  }
  else
  {
    v13 = 0;
  }
  memset(v26, 0, sizeof(v26));
  sub_1DCC0A9B4(a1, v9, a4, v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_1DCAD4EF4(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v13 = v9 % v10;
      else
        v13 = v9;
    }
    else
    {
      v13 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  sub_1DCC0AA5C((uint64_t)v26, 0);
  return i;
}

void sub_1DCC0A99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1DCC0AA5C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_1DCC0A9B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = operator new(0x40uLL);
  *a4 = v8;
  a4[1] = v7;
  *((_BYTE *)a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_1DCACA658(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *((_BYTE *)a4 + 16) = 1;
  return result;
}

void sub_1DCC0AA44(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCC0AA5C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1DCC0AA5C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1DCAFBF08((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned int **sub_1DCC0AAA0(unsigned int **a1)
{
  sub_1DCBC6CD0((uint64_t)a1, *a1);
  return a1;
}

uint64_t *sub_1DCC0AACC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_1DCBC6E38((unint64_t *)(v3 + 16), &v13);
    v4 = (unsigned int *)a1[1];
    a1[1] = v13;
    v13 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      v8 = v13;
      if (v13)
      {
        v9 = (unsigned int *)(v13 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(unint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  return a1;
}

void sub_1DCC0AB70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_1DCC31EC0(v3);
  _Unwind_Resume(exception_object);
}

void sub_1DCC0AB88(uint64_t *a1, char **a2)
{
  void *__p[2];
  char v4;

  sub_1DCB0345C(__p, *a2);
  a1[1] = (uint64_t)&off_1EA5760C8;
  sub_1DCC0AF78(a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1DCC0ABE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1DCC0ABFC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCC0AC24(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCC0AD98(a1);
}

uint64_t sub_1DCC0AC34()
{
  return 1;
}

unint64_t sub_1DCC0AC3C(uint64_t *a1)
{
  uint64_t v1;
  const char *v2;
  _QWORD v4[2];

  v1 = *a1;
  v4[0] = 0;
  v4[1] = 0;
  if (*(char *)(v1 + 23) >= 0)
    v2 = (const char *)v1;
  else
    v2 = *(const char **)v1;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v4, v2);
  return bswap64(0x9E3779B97F4A7C55 * v4[0]);
}

BOOL sub_1DCC0AC98(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return sub_1DCC0AE04(*a1, *a2);
}

BOOL sub_1DCC0ACA4(unsigned __int8 **a1, unsigned __int8 *a2)
{
  return sub_1DCC0AE04(*a1, a2);
}

uint64_t sub_1DCC0ACB0()
{
  return 0;
}

_QWORD *sub_1DCC0ACBC(uint64_t **a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((char *)*a1 + 23);
  if (v3 >= 0)
    v4 = (uint64_t)*a1;
  else
    v4 = **a1;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)*a1 + 23);
  else
    v5 = (*a1)[1];
  return sub_1DCB03734(a2, v4, v5);
}

void *sub_1DCC0ACE4()
{
  return &unk_1EA574018;
}

uint64_t sub_1DCC0ACF0()
{
  return 0;
}

uint64_t sub_1DCC0ACF8()
{
  return MEMORY[0x1E0DE4F20];
}

uint64_t sub_1DCC0AD04()
{
  return 0;
}

uint64_t sub_1DCC0AD0C()
{
  return 0;
}

BOOL sub_1DCC0AD14(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000001DCC58E4CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCC0AD4C(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_1EA574018, a2);
}

void *sub_1DCC0AD6C()
{
  return &unk_1EA574018;
}

uint64_t sub_1DCC0AD78(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCC0AD80@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA5760C8;
  return sub_1DCC0AF78(a2, v2);
}

uint64_t *sub_1DCC0AD98(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      MEMORY[0x1DF0D228C](v2, 0x1012C405C87E9CELL);
    }
  }
  return a1;
}

BOOL sub_1DCC0AE04(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t sub_1DCC0AEA4(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v10;

  v2 = atomic_load((unsigned int *)(*a1 + 24));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = v3;
    v5 = *a1;
    if (*(char *)(*a1 + 23) < 0)
    {
      sub_1DCACA658((_BYTE *)v3, *(void **)v5, *(_QWORD *)(v5 + 8));
      v5 = *a1;
    }
    else
    {
      v6 = *(_OWORD *)v5;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(v5 + 16);
      *(_OWORD *)v3 = v6;
    }
    v7 = (unsigned int *)(v4 + 24);
    atomic_store(0, (unsigned int *)(v4 + 24));
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v10 = v5;
    *a1 = v4;
    sub_1DCC0AD98(&v10);
  }
  return *a1;
}

void sub_1DCC0AF54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D228C](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCC0AF78(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  result = operator new();
  v5 = result;
  if (*(char *)(a2 + 23) < 0)
  {
    result = (uint64_t)sub_1DCACA658((_BYTE *)result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  }
  v6 = (unsigned int *)(v5 + 24);
  atomic_store(0, (unsigned int *)(v5 + 24));
  *a1 = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_1DCC0B000(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D228C](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

unint64_t sub_1DCC0B024(unint64_t *a1)
{
  unint64_t result;
  uint64_t v4;

  result = sub_1DCC0B07C();
  while (!__ldaxr(a1))
  {
    if (!__stlxr(result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = MEMORY[0x1DF0D1134]();
    MEMORY[0x1DF0D228C](v4, 0x60C4070C77B98);
  }
  return atomic_load(a1);
}

uint64_t sub_1DCC0B07C()
{
  uint64_t v0;

  v0 = operator new();
  MEMORY[0x1DF0D1128]();
  return v0;
}

void sub_1DCC0B0B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D228C](v1, 0x60C4070C77B98);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCC0B0DC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

id sub_1DCC0B0E8(void *a1, unint64_t a2, void *a3, void *a4, void *a5, void *a6, int a7)
{
  id v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t i;
  const char *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  BOOL v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  _BOOL4 v38;
  void *v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t j;
  void *v46;
  int v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t k;
  void *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  unint64_t v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t v94;
  const char *v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  id v100;
  char v101;
  void *v102;
  uint64_t n;
  void *v104;
  const char *v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  const char *v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  BOOL v115;
  unint64_t v116;
  uint64_t v117;
  const char *v118;
  unint64_t v119;
  void *v120;
  const char *v121;
  const char *v122;
  const char *v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  void *ii;
  void *v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  void *v132;
  const char *v133;
  void *v134;
  const char *v135;
  uint64_t v136;
  float *v137;
  const char *v138;
  const char *v139;
  uint64_t v140;
  void *v141;
  void *v142;
  const char *v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  float *v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  void *v153;
  const char *v154;
  uint64_t v155;
  float *v156;
  const char *v157;
  void *v158;
  const char *v159;
  uint64_t v160;
  unint64_t v161;
  const char *v162;
  void *v163;
  const char *v164;
  uint64_t v165;
  float *v166;
  id v167;
  id v169;
  const char *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t m;
  void *v176;
  void *v177;
  const char *v178;
  char isEqual;
  void *context;
  id v181;
  id v182;
  id v183;
  uint64_t v184;
  id v187;
  id v188;
  id v189;
  char v190;
  uint64_t v191;
  id obj;
  id obja;
  void *v194;
  id v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  void *__p;
  void *v210;
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  _BYTE v220[128];
  _BYTE v221[128];
  _BYTE v222[128];
  _BYTE v223[128];
  _BYTE v224[128];
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  v189 = a1;
  v195 = a3;
  v11 = a4;
  v183 = a5;
  v181 = a6;
  v194 = v11;
  v188 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v12 = MEMORY[0x1DF0D25C8]();
  v216 = 0u;
  v217 = 0u;
  v218 = 0u;
  v219 = 0u;
  objc_msgSend_layouts(v11, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v216, v224, 16);
  context = (void *)v12;
  if (!v19)
  {

LABEL_50:
    v100 = v188;
    v101 = 1;
    v102 = context;
    goto LABEL_81;
  }
  v20 = 0;
  v21 = *(_QWORD *)v217;
  do
  {
    for (i = 0; i != v19; ++i)
    {
      if (*(_QWORD *)v217 != v21)
        objc_enumerationMutation(v15);
      if (objc_msgSend_stride(*(void **)(*((_QWORD *)&v216 + 1) + 8 * i), v17, v18))
        ++v20;
    }
    v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v17, (uint64_t)&v216, v224, 16);
  }
  while (v19);

  if (!v20)
    goto LABEL_50;
  v25 = 0;
  v26 = 0;
  while (1)
  {
    objc_msgSend_layouts(v194, v23, v24);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = objc_msgSend_count(v27, v28, v29) > v25;

    if (!v30)
      break;
    objc_msgSend_layouts(v194, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v33, v34, v25);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = objc_msgSend_stride(v35, v36, v37) == 0;

    ++v25;
    if (!v38)
      v26 = v25;
  }
  v214 = 0u;
  v215 = 0u;
  v212 = 0u;
  v213 = 0u;
  objc_msgSend_attributes(v194, v31, v32);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v39, v40, (uint64_t)&v212, v223, 16);
  if (v43)
  {
    v44 = *(_QWORD *)v213;
    do
    {
      for (j = 0; j != v43; ++j)
      {
        if (*(_QWORD *)v213 != v44)
          objc_enumerationMutation(v39);
        v46 = *(void **)(*((_QWORD *)&v212 + 1) + 8 * j);
        if (objc_msgSend_format(v46, v41, v42))
        {
          v47 = objc_msgSend_bufferIndex(v46, v41, v42);
          if (v26 <= v47 + 1)
            v26 = v47 + 1;
        }
      }
      v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v39, v41, (uint64_t)&v212, v223, 16);
    }
    while (v43);
  }

  __p = 0;
  v210 = 0;
  v211 = 0;
  v208 = 0;
  v184 = v26;
  sub_1DCC0BC7C(&__p, v26, &v208);
  v204 = 0u;
  v205 = 0u;
  v206 = 0u;
  v207 = 0u;
  objc_msgSend_attributes(v194, v48, v49);
  obj = (id)objc_claimAutoreleasedReturnValue();
  v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v50, (uint64_t)&v204, v222, 16);
  if (v53)
  {
    v54 = *(_QWORD *)v205;
    v190 = 1;
    do
    {
      for (k = 0; k != v53; ++k)
      {
        if (*(_QWORD *)v205 != v54)
          objc_enumerationMutation(obj);
        v56 = *(void **)(*((_QWORD *)&v204 + 1) + 8 * k);
        v57 = objc_msgSend_bufferIndex(v56, v51, v52);
        objc_msgSend_name(v56, v58, v59);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_attributeNamed_(v195, v61, (uint64_t)v60);
        v62 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_layouts(v195, v63, v64);
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        v68 = objc_msgSend_bufferIndex(v62, v66, v67);
        objc_msgSend_objectAtIndexedSubscript_(v65, v69, v68);
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v73 = objc_msgSend_stride(v70, v71, v72);

        objc_msgSend_layouts(v194, v74, v75);
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v76, v77, v57);
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        v81 = objc_msgSend_stride(v78, v79, v80);

        if (v81)
        {
          if (!objc_msgSend_format(v56, v82, v83) || !v62)
          {
            v92 = __p;
            if (*((_QWORD *)__p + v57))
              goto LABEL_43;
            v94 = a2;
LABEL_42:
            v92[v57] = v94;
            goto LABEL_43;
          }
          v86 = objc_msgSend_bufferIndex(v62, v84, v85);
          objc_msgSend_objectAtIndexedSubscript_(v189, v87, v86);
          v88 = (void *)objc_claimAutoreleasedReturnValue();
          v91 = objc_msgSend_length(v88, v89, v90);

          v92 = __p;
          v93 = *((_QWORD *)__p + v57);
          v94 = v91 / v73;
          if (!v93)
            goto LABEL_42;
          if (v93 != v94)
          {
            if (v93 < v94)
              v94 = *((_QWORD *)__p + v57);
            *((_QWORD *)__p + v57) = v94;
            if ((v190 & 1) != 0)
              NSLog(CFSTR("Warning: Trying to interleave multiple attributes into buffer: %ul,\nbut their element counts do not agree, taking the mininum."), v57);
            v190 = 0;
          }
        }
LABEL_43:

      }
      v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v51, (uint64_t)&v204, v222, 16);
    }
    while (v53);
  }

  if (v183)
  {
    v97 = v194;
    objc_msgSend_allocator(v183, v95, v96);
    v182 = (id)objc_claimAutoreleasedReturnValue();
LABEL_47:
    if (!v182)
      v182 = (id)objc_opt_new();
    goto LABEL_53;
  }
  v97 = v194;
  if (!v181)
  {
    v202 = 0u;
    v203 = 0u;
    v200 = 0u;
    v201 = 0u;
    v169 = v189;
    v173 = objc_msgSend_countByEnumeratingWithState_objects_count_(v169, v170, (uint64_t)&v200, v221, 16);
    if (v173)
    {
      v174 = *(_QWORD *)v201;
      while (2)
      {
        for (m = 0; m != v173; ++m)
        {
          if (*(_QWORD *)v201 != v174)
            objc_enumerationMutation(v169);
          v176 = *(void **)(*((_QWORD *)&v200 + 1) + 8 * m);
          objc_msgSend_null(MEMORY[0x1E0C99E38], v171, v172);
          v177 = (void *)objc_claimAutoreleasedReturnValue();
          isEqual = objc_msgSend_isEqual_(v176, v178, (uint64_t)v177);

          if ((isEqual & 1) == 0)
          {
            objc_msgSend_allocator(v176, v171, v172);
            v182 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_94;
          }
        }
        v173 = objc_msgSend_countByEnumeratingWithState_objects_count_(v169, v171, (uint64_t)&v200, v221, 16);
        if (v173)
          continue;
        break;
      }
    }
    v182 = 0;
LABEL_94:

    v97 = v194;
    goto LABEL_47;
  }
  v182 = v181;
LABEL_53:
  if ((_DWORD)v184)
  {
    for (n = 0; v184 != n; ++n)
    {
      objc_msgSend_layouts(v97, v98, v99);
      v104 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v104, v105, n);
      v106 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_null(MEMORY[0x1E0C99E38], v107, v108);
      v109 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend_isEqual_(v106, v110, (uint64_t)v109) & 1) != 0)
      {

      }
      else
      {
        v115 = objc_msgSend_stride(v106, v111, v112) == 0;

        if (!v115)
        {
          v116 = *((_QWORD *)__p + n);
          v117 = objc_msgSend_stride(v106, v113, v114);
          v119 = a2;
          if (v116)
            v119 = v116;
          v120 = (void *)objc_msgSend_newBufferFromZone_length_type_(v182, v118, (uint64_t)v183, v119 * v117, 1);
          objc_msgSend_addObject_(v188, v121, (uint64_t)v120);
          goto LABEL_62;
        }
      }
      objc_msgSend_null(MEMORY[0x1E0C99E38], v113, v114);
      v120 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v188, v122, (uint64_t)v120);
LABEL_62:

      v97 = v194;
    }
  }
  v198 = 0u;
  v199 = 0u;
  v196 = 0u;
  v197 = 0u;
  objc_msgSend_attributes(v97, v98, v99);
  v187 = (id)objc_claimAutoreleasedReturnValue();
  v124 = objc_msgSend_countByEnumeratingWithState_objects_count_(v187, v123, (uint64_t)&v196, v220, 16);
  if (v124)
  {
    v191 = *(_QWORD *)v197;
    do
    {
      obja = (id)v124;
      for (ii = 0; ii != obja; ii = (char *)ii + 1)
      {
        if (*(_QWORD *)v197 != v191)
          objc_enumerationMutation(v187);
        v128 = *(void **)(*((_QWORD *)&v196 + 1) + 8 * (_QWORD)ii);
        if (objc_msgSend_format(v128, v125, v126))
        {
          v129 = objc_msgSend_bufferIndex(v128, v125, v126);
          objc_msgSend_layouts(v97, v130, v131);
          v132 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectAtIndexedSubscript_(v132, v133, v129);
          v134 = (void *)objc_claimAutoreleasedReturnValue();
          v137 = (float *)objc_msgSend_stride(v134, v135, v136);

          objc_msgSend_objectAtIndexedSubscript_(v188, v138, v129);
          v141 = (void *)objc_claimAutoreleasedReturnValue();
          if (v141)
          {
            objc_msgSend_name(v128, v139, v140);
            v142 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_attributeNamed_(v195, v143, (uint64_t)v142);
            v144 = (void *)objc_claimAutoreleasedReturnValue();

            v147 = (float *)*((_QWORD *)__p + v129);
            if (v144)
            {
              v148 = objc_msgSend_bufferIndex(v144, v145, v146);
              objc_msgSend_layouts(v195, v149, v150);
              v151 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_objectAtIndexedSubscript_(v151, v152, v148);
              v153 = (void *)objc_claimAutoreleasedReturnValue();
              v156 = (float *)objc_msgSend_stride(v153, v154, v155);

              objc_msgSend_objectAtIndexedSubscript_(v189, v157, v148);
              v158 = (void *)objc_claimAutoreleasedReturnValue();
              v161 = objc_msgSend_length(v141, v159, v160);
              objc_msgSend_objectAtIndexedSubscript_(v189, v162, v148);
              v163 = (void *)objc_claimAutoreleasedReturnValue();
              v166 = (float *)objc_msgSend_length(v163, v164, v165);
              sub_1DCC1F09C(v141, v137, v128, v158, v156, v144, v147, v161, v166);

            }
            else if (a7)
            {
              sub_1DCC1EE8C(v141, v137, v128, v147);
            }

          }
          v97 = v194;
        }
      }
      v124 = objc_msgSend_countByEnumeratingWithState_objects_count_(v187, v125, (uint64_t)&v196, v220, 16);
    }
    while (v124);
  }

  v102 = context;
  if (__p)
  {
    v210 = __p;
    operator delete(__p);
  }
  v101 = 0;
LABEL_81:
  objc_autoreleasePoolPop(v102);
  if ((v101 & 1) == 0)
    v167 = v188;

  return v188;
}

void sub_1DCC0B9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  void *v49;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_1DCC0BC5C(void *a1, unint64_t a2, void *a3, void *a4, void *a5, int a6)
{
  sub_1DCC0B0E8(a1, a2, a3, a4, a5, 0, a6);
  return (id)objc_claimAutoreleasedReturnValue();
}

_QWORD *sub_1DCC0BC7C(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DCAE7964(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DCC0BCE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DCC0BCFC(_QWORD *a1, unint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v6;
  uint64_t v7;
  __int128 *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  const char *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  const char *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v3 = (_QWORD *)a1[1];
  v2 = (_QWORD *)a1[2];
  if (v3 != v2)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 14);
    do
    {
      MEMORY[0x1DF0D1254](&v51, "vertex");
      v8 = (__int128 *)(v3 + 10);
      v7 = v3[10];
      v9 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      if ((v51 & 7) != 0)
      {
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      if ((unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8) != v9)
      {
        MEMORY[0x1DF0D1254](&v51, "uniform");
        v11 = *(_QWORD *)v8;
        v12 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
        if ((v51 & 7) != 0)
        {
          do
            v13 = __ldxr(v12);
          while (__stlxr(v13 - 2, v12));
        }
        if ((unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8) == v12)
        {
          v53 = 0;
          v51 = 0u;
          v52 = 0u;
          sub_1DCB23B10((uint64_t)&v51, *a2 / 3);
          if (*(_QWORD *)v6)
          {
            v22 = 0;
            v23 = 0;
            do
            {
              sub_1DCAF0F78(v6);
              v24 = *(_DWORD *)(a1[18] + 4 * v22);
              if (v24 >= 3)
              {
                v25 = 4 * v23;
                v26 = v24 - 2;
                do
                {
                  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v51);
                  *(_DWORD *)(v53 + v25) = v22;
                  v25 += 4;
                  ++v23;
                  --v26;
                }
                while (v26);
              }
              ++v22;
            }
            while (*(_QWORD *)v6 > v22);
          }
          v27 = v3 + 2;
          if (v3[2])
          {
            v50 = 0;
            v48 = 0u;
            v49 = 0u;
            sub_1DCB23B10((uint64_t)&v48, v51);
            if (*v27)
            {
              v28 = 0;
              do
              {
                sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v51);
                v29 = *(int *)(v53 + 4 * v28);
                sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v3 + 2));
                LODWORD(v29) = *(_DWORD *)(v3[6] + 4 * v29);
                sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v48);
                *(_DWORD *)(v50 + 4 * v28++) = v29;
              }
              while (*v27 > v28);
            }
            v30 = v50;
            v31 = v3[5];
            v50 = v3[6];
            v32 = v3[4];
            v3[4] = v49;
            v33 = *(_OWORD *)v27;
            *(_OWORD *)v27 = v48;
            v48 = v33;
            v3[5] = *((_QWORD *)&v49 + 1);
            v3[6] = v30;
            *(_QWORD *)&v49 = v32;
            *((_QWORD *)&v49 + 1) = v31;
            sub_1DCAEEE78((uint64_t)&v48);
          }
          else
          {
            sub_1DCB24648((uint64_t)(v3 + 2), &v51);
          }
          MEMORY[0x1DF0D1254](&v48, "uniform");
          if (&v48 == v8)
          {
            v43 = v48;
          }
          else
          {
            if ((*(_QWORD *)v8 & 7) != 0)
            {
              v41 = (unsigned int *)(*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8);
              do
                v42 = __ldxr(v41);
              while (__stlxr(v42 - 2, v41));
            }
            v43 = 0;
            *(_QWORD *)v8 = v48;
            *(_QWORD *)&v48 = 0;
          }
          if ((v43 & 7) != 0)
          {
            v44 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
            do
              v45 = __ldxr(v44);
            while (__stlxr(v45 - 2, v44));
          }
          sub_1DCAEEE78((uint64_t)&v51);
        }
        else
        {
          MEMORY[0x1DF0D1254](&v51, "faceVarying");
          v14 = *(_QWORD *)v8;
          v15 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
          if ((v51 & 7) != 0)
          {
            do
              v16 = __ldxr(v15);
            while (__stlxr(v16 - 2, v15));
          }
          if ((unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8) == v15)
          {
            v34 = (__int128 *)(v3 + 2);
            if (v3[2])
            {
              v53 = 0;
              v51 = 0u;
              v52 = 0u;
              sub_1DCB23B10((uint64_t)&v51, *a2);
              if (*a2)
              {
                v35 = 0;
                do
                {
                  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
                  v36 = *(int *)(a2[4] + 4 * v35);
                  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v3 + 2));
                  LODWORD(v36) = *(_DWORD *)(v3[6] + 4 * v36);
                  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v51);
                  *(_DWORD *)(v53 + 4 * v35++) = v36;
                }
                while (*a2 > v35);
              }
              v37 = v53;
              v38 = v3[5];
              v53 = v3[6];
              v39 = v3[4];
              v3[4] = v52;
              v40 = *v34;
              *v34 = v51;
              v51 = v40;
              v3[5] = *((_QWORD *)&v52 + 1);
              v3[6] = v37;
              *(_QWORD *)&v52 = v39;
              *((_QWORD *)&v52 + 1) = v38;
              sub_1DCAEEE78((uint64_t)&v51);
            }
            else
            {
              sub_1DCB24648((uint64_t)(v3 + 2), (__int128 *)a2);
            }
          }
          else
          {
            MEMORY[0x1DF0D1254](&v51, "constant");
            v17 = *(_QWORD *)v8;
            v18 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
            if ((v51 & 7) != 0)
            {
              do
                v19 = __ldxr(v18);
              while (__stlxr(v19 - 2, v18));
            }
            if ((unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8) != v18)
            {
              v20 = *a1 & 0xFFFFFFFFFFFFFFF8;
              if (v20)
              {
                v21 = (const char *)(v20 + 16);
                if (*(char *)(v20 + 39) < 0)
                  v21 = *(const char **)v21;
              }
              else
              {
                v21 = "";
              }
              v46 = v3[7] & 0xFFFFFFFFFFFFFFF8;
              if (v46)
              {
                v47 = (const char *)(v46 + 16);
                if (*(char *)(v46 + 39) < 0)
                  v47 = *(const char **)v47;
              }
              else
              {
                v47 = "";
              }
              NSLog(CFSTR("Warning: mesh %s has attribute %s with unknown frequency."), v21, v47);
            }
          }
        }
      }
      v3 += 12;
    }
    while (v3 != v2);
  }
}

void sub_1DCC0C144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1DCAEEE78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCC0C1A0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, _QWORD *a6, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a7, _QWORD *a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, double a12, double a13, double a14, float32x4_t a15)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  _DWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  float32x4_t v67;
  float32x4_t *v68;
  uint64_t v69;
  float32x4_t v70;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  float v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  unint64_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int32x4_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int32x4_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x4_t *v109;
  float32x4_t v110;
  int32x4_t v111;
  float32x4_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  float32x4_t v123;
  float32x2_t *v124;
  float32x4_t v125;
  uint64_t *v126;
  char *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t *v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  float32x2_t *v141;
  unint64_t v142;
  float32x2_t *v143;
  float32x2_t *v144;
  float32x2_t *v145;
  float32x2_t v146;
  float32x2_t v147;
  int32x2_t v148;
  float32x2_t *v149;
  char *v150;
  float32x2_t *v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  float32x2_t *v156;
  __int128 v157;
  char *v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  float32x2_t *v162;
  __int128 v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  unsigned __int8 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  float32x2_t *v182;
  BOOL v183;
  uint64_t *v184;
  float32x2_t *v185;
  float32x2_t *v186;
  int8x16_t v187;
  float32x2_t *v188;
  float32x2_t *v189;
  int8x16_t v190;
  int8x16_t v191;
  BOOL v192;
  uint64_t v193;
  float32x4_t v194;
  int32x4_t v195;
  float32x2_t v196;
  float32x2_t v197;
  float32x4_t v198;
  int32x4_t v199;
  float32x4_t v200;
  uint64_t v201;
  float32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  float32x2_t v205;
  int32x4_t v206;
  void **v207;
  void **v208;
  unint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  void **v216;
  int v217;
  unint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  _QWORD **v221;
  _QWORD *v222;
  _QWORD **v223;
  int v224;
  _QWORD *v225;
  void **v226;
  void **v227;
  uint64_t v228;
  uint64_t v229;
  _OWORD *v230;
  _OWORD *v231;
  uint64_t v232;
  _OWORD *v233;
  char *v234;
  char *v235;
  char *v236;
  __int128 v237;
  char *v238;
  char *v239;
  _OWORD *v240;
  _OWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char *v246;
  void **v247;
  char *v248;
  char *v249;
  char *v250;
  __int128 v251;
  uint64_t *v252;
  int v253;
  float32x4_t v255;
  float32x2_t v262;
  float v263;
  float v266;
  uint64_t *v267;
  uint64_t *v268;
  char v271;
  void **v272;
  int v273;
  int v274;
  void **v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  void **v281;
  _QWORD *v282;
  _QWORD *v283;
  int v284;
  _QWORD **v285;
  _QWORD *v286;
  _QWORD *v287;
  _QWORD **v288;
  int v289;
  uint64_t *v290;
  uint64_t v291;
  int *v292;
  int v293;
  _QWORD **v294;
  _QWORD *v295;
  _QWORD **v296;
  int v297;
  _QWORD *v298;
  void ***v299;
  void **v301;
  void **v302;
  _QWORD *v303;
  void **v304;
  void **v305;
  void **v306;
  int v307;
  int v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  void **v314;
  _QWORD *v315;
  void **v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  char *v320;
  unint64_t v321;
  float32x4_t v323;
  float v324;
  __int128 v326;
  float32x4_t v327;
  uint64_t v328;
  float v329;
  float32x4_t v331;
  float v332;
  void **v334;
  _QWORD *v335;
  void **v336;
  unint64_t v337;
  void *v338;
  char *v339;
  char *v340;
  void *__p;
  char *v342;
  char *v343;
  __int128 v344;
  __int128 v345;
  uint64_t v346;
  uint64_t *v347;
  _QWORD *v348;
  unint64_t v349;
  void **p_p;
  void **v351;
  uint64_t v352;

  if (a2 >= 3)
  {
    if (a2 != 4)
    {
      if (a2 == 3)
      {
        v21 = (*a6)++;
        sub_1DCAF0F78(this);
        *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v21) = a4;
        v22 = (*a6)++;
        sub_1DCAF0F78(this);
        *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v22) = a4 + 1;
        v23 = (*a6)++;
        sub_1DCAF0F78(this);
        *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v23) = a4 + 2;
        v24 = (*a8)++;
        sub_1DCAF0F78(a7);
        *(_DWORD *)(*((_QWORD *)a7 + 4) + 4 * v24) = 3;
        return;
      }
      v338 = 0;
      v339 = 0;
      v340 = 0;
      sub_1DCB01838(&v338, a2);
      v52 = 0;
      v335 = &v335;
      v336 = (void **)&v335;
      v337 = 0;
      v53 = v339;
      do
      {
        v54 = *(_QWORD *)(a1 + 32) + 12 * *(int *)(*(_QWORD *)(a3 + 32) + 4 * (v52 + a4));
        *(_QWORD *)&v51 = *(_QWORD *)v54;
        DWORD2(v51) = *(_DWORD *)(v54 + 8);
        if (v53 >= v340)
        {
          v326 = v51;
          v55 = (v53 - (_BYTE *)v338) >> 4;
          if ((unint64_t)(v55 + 1) >> 60)
            sub_1DCAE4C44();
          v56 = (v340 - (_BYTE *)v338) >> 3;
          if (v56 <= v55 + 1)
            v56 = v55 + 1;
          if ((unint64_t)(v340 - (_BYTE *)v338) >= 0x7FFFFFFFFFFFFFF0)
            v57 = 0xFFFFFFFFFFFFFFFLL;
          else
            v57 = v56;
          if (v57)
            v58 = (char *)sub_1DCAFBD5C((uint64_t)&v340, v57);
          else
            v58 = 0;
          v59 = &v58[16 * v55];
          *(_OWORD *)v59 = v326;
          v53 = v59 + 16;
          v61 = (char *)v338;
          v60 = v339;
          if (v339 != v338)
          {
            do
            {
              v62 = *((_OWORD *)v60 - 1);
              v60 -= 16;
              *((_OWORD *)v59 - 1) = v62;
              v59 -= 16;
            }
            while (v60 != v61);
            v60 = (char *)v338;
          }
          v338 = v59;
          v339 = v53;
          v340 = &v58[16 * v57];
          if (v60)
            operator delete(v60);
        }
        else
        {
          *(_OWORD *)v53 = v51;
          v53 += 16;
        }
        v339 = v53;
        v63 = operator new(0x18uLL);
        v63[4] = v52;
        v64 = v335;
        *(_QWORD *)v63 = v335;
        *((_QWORD *)v63 + 1) = &v335;
        v64[1] = v63;
        v335 = v63;
        ++v337;
        ++v52;
      }
      while (v52 != a2);
      v65 = (v53 - (_BYTE *)v338) >> 4;
      if (v53 == v338)
      {
        *(float *)&v51 = 0.0 / (float)v65;
        v72 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v51, 0);
        v73 = 0uLL;
      }
      else
      {
        if (v65 <= 1)
          v66 = 1;
        else
          v66 = (v53 - (_BYTE *)v338) >> 4;
        v67 = 0uLL;
        v68 = (float32x4_t *)v338;
        v69 = v66;
        do
        {
          v70 = *v68++;
          v67 = vaddq_f32(v70, v67);
          --v69;
        }
        while (v69);
        v71 = 0;
        v72 = vmulq_n_f32(v67, 1.0 / (float)v65);
        v73 = 0uLL;
        do
        {
          if (v65 - 1 == v71)
            v74 = 0;
          else
            v74 = v71 + 1;
          v75 = vsubq_f32(*((float32x4_t *)v338 + v71), v72);
          v76 = vsubq_f32(*((float32x4_t *)v338 + v74), v72);
          v77 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v76, (int32x4_t)v76), (int8x16_t)v76, 0xCuLL), v75)), v76, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), (int8x16_t)v75, 0xCuLL));
          v73 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v77, v77), (int8x16_t)v77, 0xCuLL), v73);
          ++v71;
        }
        while (v66 != v71);
      }
      v84 = vmulq_f32(v73, v73);
      v85 = vaddq_f32(vaddq_f32(v84, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v84, 2)).f32[0];
      if (v85 < 1.0e-12)
      {
        v86 = a2 - 2;
        v87 = a4 + 1;
        do
        {
          v88 = (*a6)++;
          sub_1DCAF0F78(this);
          *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v88) = a4;
          v89 = (*a6)++;
          sub_1DCAF0F78(this);
          *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v89) = v87;
          v90 = (*a6)++;
          sub_1DCAF0F78(this);
          *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v90) = v87 + 1;
          v91 = (*a8)++;
          sub_1DCAF0F78(a7);
          *(_DWORD *)(*((_QWORD *)a7 + 4) + 4 * v91) = 3;
          ++v87;
          --v86;
        }
        while (v86);
LABEL_320:
        sub_1DCB032E4(&v335);
        if (v338)
        {
          v339 = (char *)v338;
          operator delete(v338);
        }
        return;
      }
      v319 = v72;
      v321 = (v53 - (_BYTE *)v338) >> 4;
      v92 = v85;
      v93 = vrsqrte_f32((float32x2_t)LODWORD(v85));
      v94 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v92), vmul_f32(v93, v93)), v93);
      v95 = vmulq_n_f32(v73, vmul_f32(v94, vrsqrts_f32((float32x2_t)LODWORD(v92), vmul_f32(v94, v94))).f32[0]);
      v96 = *(float32x4_t *)v338;
      v97 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v95, (int32x4_t)v95), (int8x16_t)v95, 0xCuLL);
      v347 = 0;
      v348 = 0;
      v349 = 0;
      v346 = 1065353216;
      v344 = 0u;
      v345 = 0u;
      v317 = v97;
      v318 = v95;
      v320 = (char *)v338;
      if (v53 == v338)
      {
        __p = 0;
        v342 = 0;
        v343 = 0;
      }
      else
      {
        v98 = 0;
        v99 = vmlaq_f32(vnegq_f32(vmulq_f32(v95, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v96, (int32x4_t)v96), (int8x16_t)v96, 0xCuLL))), v96, v97);
        v100 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v99, (int32x4_t)v99), (int8x16_t)v99, 0xCuLL);
        v101 = (int32x4_t)vmulq_f32(v99, v99);
        v101.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v101, 2), *(float32x2_t *)v101.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v101.i8, 1)).u32[0];
        v102 = vrsqrte_f32((float32x2_t)v101.u32[0]);
        v103 = vmul_f32(vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(v102, v102)), v102);
        v327 = vmulq_n_f32(v100, vmul_f32(v103, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(v103, v103))).f32[0]);
        v104 = vmlaq_f32(vnegq_f32(vmulq_f32(v327, v97)), v95, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v327, (int32x4_t)v327), (int8x16_t)v327, 0xCuLL));
        v105 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v104, (int32x4_t)v104), (int8x16_t)v104, 0xCuLL);
        v106 = (int32x4_t)vmulq_f32(v104, v104);
        v106.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v106, 2), *(float32x2_t *)v106.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.i8, 1)).u32[0];
        v107 = vrsqrte_f32((float32x2_t)v106.u32[0]);
        v108 = vmul_f32(vrsqrts_f32((float32x2_t)v106.u32[0], vmul_f32(v107, v107)), v107);
        v323 = vmulq_n_f32(v105, vmul_f32(v108, vrsqrts_f32((float32x2_t)v106.u32[0], vmul_f32(v108, v108))).f32[0]);
        v109 = (float32x4_t *)v338;
        do
        {
          v110 = v109[v98];
          v111 = (int32x4_t)vmulq_f32(v110, v327);
          v112 = vmulq_f32(v110, v323);
          *(int32x2_t *)v112.f32 = vzip1_s32((int32x2_t)vadd_f32(vadd_f32(*(float32x2_t *)v111.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v111.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v111, 2)), (int32x2_t)vadd_f32(vadd_f32(*(float32x2_t *)v112.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v112.f32, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v112, 2)));
          __p = (void *)v112.i64[0];
          v113 = v348;
          if ((unint64_t)v348 >= v349)
          {
            v115 = v348 - v347;
            if ((unint64_t)(v115 + 1) >> 61)
              sub_1DCAE4C44();
            v116 = (uint64_t)(v349 - (_QWORD)v347) >> 2;
            if (v116 <= v115 + 1)
              v116 = v115 + 1;
            if (v349 - (unint64_t)v347 >= 0x7FFFFFFFFFFFFFF8)
              v117 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v117 = v116;
            if (v117)
            {
              v118 = (char *)sub_1DCAE79A4((uint64_t)&v349, v117);
              v112.i64[0] = (uint64_t)__p;
            }
            else
            {
              v118 = 0;
            }
            v119 = (uint64_t *)&v118[8 * v115];
            *v119 = v112.i64[0];
            v114 = v119 + 1;
            v121 = v347;
            v120 = v348;
            if (v348 != v347)
            {
              do
              {
                v122 = *--v120;
                v112.i64[0] = v122;
                *--v119 = v122;
              }
              while (v120 != v121);
              v120 = v347;
            }
            v347 = v119;
            v348 = v114;
            v349 = (unint64_t)&v118[8 * v117];
            if (v120)
              operator delete(v120);
          }
          else
          {
            *v348 = v112.i64[0];
            v114 = v113 + 1;
          }
          v348 = v114;
          if (sub_1DCB01980(&v344, (unint64_t *)&__p, v112))
          {
            p_p = &__p;
            v124 = sub_1DCB01A80((uint64_t)&v344, (unint64_t *)&__p, v123, (uint64_t)&unk_1DCC58300, (float32x2_t **)&p_p);
            ++v124[3].i32[0];
          }
          else
          {
            p_p = &__p;
            sub_1DCB01A80((uint64_t)&v344, (unint64_t *)&__p, v123, (uint64_t)&unk_1DCC58300, (float32x2_t **)&p_p)[3].i32[0] = 0;
          }
          p_p = &__p;
          if (sub_1DCB01A80((uint64_t)&v344, (unint64_t *)&__p, v125, (uint64_t)&unk_1DCC58300, (float32x2_t **)&p_p)[3].i32[0] >= 3)
          {
            v192 = 0;
            goto LABEL_157;
          }
          ++v98;
          v109 = (float32x4_t *)v338;
        }
        while (v98 < (v339 - (_BYTE *)v338) >> 4);
        v126 = v347;
        __p = 0;
        v342 = 0;
        v343 = 0;
        if (v348 != v347)
        {
          v127 = 0;
          v128 = 0;
          v129 = v348 - v347;
          do
          {
            v130 = v126[v128++];
            v131 = v126[v128 % v129];
            if (v127 >= v343)
            {
              v132 = (v127 - (_BYTE *)__p) >> 4;
              if ((unint64_t)(v132 + 1) >> 60)
                sub_1DCAE4C44();
              v133 = (v343 - (_BYTE *)__p) >> 3;
              if (v133 <= v132 + 1)
                v133 = v132 + 1;
              if ((unint64_t)(v343 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
                v134 = 0xFFFFFFFFFFFFFFFLL;
              else
                v134 = v133;
              if (v134)
                v135 = (char *)sub_1DCAFBD5C((uint64_t)&v343, v134);
              else
                v135 = 0;
              v136 = (uint64_t *)&v135[16 * v132];
              *v136 = v130;
              v136[1] = v131;
              v138 = (char *)__p;
              v137 = v342;
              v139 = (char *)v136;
              if (v342 != __p)
              {
                do
                {
                  *((_OWORD *)v139 - 1) = *((_OWORD *)v137 - 1);
                  v139 -= 16;
                  v137 -= 16;
                }
                while (v137 != v138);
                v137 = (char *)__p;
              }
              v127 = (char *)(v136 + 2);
              __p = v139;
              v342 = (char *)(v136 + 2);
              v343 = &v135[16 * v134];
              if (v137)
                operator delete(v137);
            }
            else
            {
              *(_QWORD *)v127 = v130;
              *((_QWORD *)v127 + 1) = v131;
              v127 += 16;
            }
            v342 = v127;
            v126 = v347;
            v129 = v348 - v347;
          }
          while (v129 > v128);
          v140 = (char *)__p;
          if (v127 != __p)
          {
            v141 = 0;
            v142 = 0;
            v143 = 0;
            v144 = 0;
            do
            {
              v145 = (float32x2_t *)&v140[16 * v142];
              v147 = *v145;
              v146 = v145[1];
              v148 = vcgt_f32(*v145, v146);
              if ((v148.i8[0] & 1) != 0 || (vceq_f32(v147, v146).u8[0] & 1) != 0 && (v148.i8[4] & 1) != 0)
              {
                *v145 = v146;
                *((float32x2_t *)__p + 2 * v142 + 1) = v147;
                v140 = (char *)__p;
                v149 = (float32x2_t *)((char *)__p + 16 * v142);
                v147 = *v149;
                v146 = v149[1];
              }
              v150 = &v140[16 * v142];
              if (v143 >= v141)
              {
                v152 = 0xAAAAAAAAAAAAAAABLL * (v143 - v144) + 1;
                if (v152 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_325;
                if (0x5555555555555556 * (v141 - v144) > v152)
                  v152 = 0x5555555555555556 * (v141 - v144);
                if (0xAAAAAAAAAAAAAAABLL * (v141 - v144) >= 0x555555555555555)
                  v153 = 0xAAAAAAAAAAAAAAALL;
                else
                  v153 = v152;
                if (v153)
                {
                  if (v153 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_327;
                  v154 = (char *)operator new(24 * v153);
                }
                else
                {
                  v154 = 0;
                }
                v155 = &v154[8 * (v143 - v144)];
                *(float32x2_t *)v155 = v147;
                *((_QWORD *)v155 + 1) = v150;
                v155[16] = 1;
                *(_DWORD *)(v155 + 17) = 0;
                *((_DWORD *)v155 + 5) = 0;
                if (v143 == v144)
                {
                  v144 = (float32x2_t *)&v154[8 * (v143 - v144)];
                }
                else
                {
                  v156 = (float32x2_t *)&v154[8 * (v143 - v144)];
                  do
                  {
                    v157 = *(_OWORD *)v143[-3].f32;
                    v156[-1] = v143[-1];
                    *(_OWORD *)v156[-3].f32 = v157;
                    v156 -= 3;
                    v143 -= 3;
                  }
                  while (v143 != v144);
                  v143 = v144;
                  v144 = v156;
                }
                v141 = (float32x2_t *)&v154[24 * v153];
                v151 = (float32x2_t *)(v155 + 24);
                if (v143)
                  operator delete(v143);
              }
              else
              {
                *v143 = v147;
                v143[1] = (float32x2_t)v150;
                v143[2].i8[0] = 1;
                *(__int32 *)((char *)v143[2].i32 + 1) = 0;
                v151 = v143 + 3;
                v143[2].i32[1] = 0;
              }
              if (v151 >= v141)
              {
                v158 = v150;
                v159 = 0xAAAAAAAAAAAAAAABLL * (v151 - v144) + 1;
                if (v159 > 0xAAAAAAAAAAAAAAALL)
LABEL_325:
                  sub_1DCAE4C44();
                if (0x5555555555555556 * (v141 - v144) > v159)
                  v159 = 0x5555555555555556 * (v141 - v144);
                if (0xAAAAAAAAAAAAAAABLL * (v141 - v144) >= 0x555555555555555)
                  v160 = 0xAAAAAAAAAAAAAAALL;
                else
                  v160 = v159;
                if (v160)
                {
                  if (v160 > 0xAAAAAAAAAAAAAAALL)
LABEL_327:
                    sub_1DCAE4CDC();
                  v161 = (char *)operator new(24 * v160);
                }
                else
                {
                  v161 = 0;
                }
                v162 = (float32x2_t *)&v161[8 * (v151 - v144)];
                *v162 = v146;
                v141 = (float32x2_t *)&v161[24 * v160];
                v143 = v162 + 3;
                v162[1] = (float32x2_t)v158;
                v162[2] = 0;
                if (v151 == v144)
                  goto LABEL_127;
                do
                {
                  v163 = *(_OWORD *)v151[-3].f32;
                  v162[-1] = v151[-1];
                  *(_OWORD *)v162[-3].f32 = v163;
                  v162 -= 3;
                  v151 -= 3;
                }
                while (v151 != v144);
                if (v144)
LABEL_127:
                  operator delete(v144);
                v144 = v162;
              }
              else
              {
                *v151 = v146;
                v143 = v151 + 3;
                v151[1] = (float32x2_t)v150;
                v151[2] = 0;
              }
              ++v142;
              v140 = (char *)__p;
            }
            while (v142 < (v342 - (_BYTE *)__p) >> 4);
LABEL_136:
            v176 = ((char *)v143 - (char *)v144) / 24;
            v177 = 126 - 2 * __clz(v176);
            p_p = (void **)sub_1DCC0DC68;
            if (v143 == v144)
              v178 = 0;
            else
              v178 = v177;
            sub_1DCC0DF14((uint64_t)v144, (unint64_t)v143, (uint64_t (**)(__int128 *, __int128 *))&p_p, v178, 1);
            p_p = 0;
            v351 = 0;
            v352 = 0;
            v179 = sub_1DCB4FF58(&p_p);
            if (v143 != v144)
            {
              v180 = 0;
              if (v176 <= 1)
                v181 = 1;
              else
                v181 = ((char *)v143 - (char *)v144) / 24;
              v328 = v181;
              v182 = v144 + 2;
              v183 = 1;
              while (1)
              {
                v184 = (uint64_t *)v182[-1];
                if ((v182->i8[0] & 1) != 0)
                {
                  sub_1DCB50184((uint64_t)&p_p, *(_QWORD *)&v182[-1]);
                  v188 = (float32x2_t *)sub_1DCB50C84((uint64_t)&p_p, v184);
                  v189 = (float32x2_t *)sub_1DCB50D84((uint64_t)&p_p, v184);
                  if ((sub_1DCC0DCF4(v189, (float32x2_t *)v184, v190) & 1) != 0
                    || (sub_1DCC0DCF4(v188, (float32x2_t *)v184, v191) & 1) != 0)
                  {
LABEL_152:
                    sub_1DCB50180(&p_p);
                    goto LABEL_154;
                  }
                }
                else
                {
                  v185 = (float32x2_t *)sub_1DCB50C84((uint64_t)&p_p, *(uint64_t **)&v182[-1]);
                  v186 = (float32x2_t *)sub_1DCB50D84((uint64_t)&p_p, v184);
                  if ((sub_1DCC0DCF4(v186, v185, v187) & 1) != 0)
                    goto LABEL_152;
                  sub_1DCB50800((uint64_t)&p_p, v184);
                }
                v182 += 3;
                v183 = v176 > ++v180;
                if (v328 == v180)
                {
                  sub_1DCB50180(&p_p);
                  v183 = 0;
                  goto LABEL_154;
                }
              }
            }
            sub_1DCB50180(v179);
            v183 = 0;
            if (v143)
LABEL_154:
              operator delete(v144);
            v192 = !v183;
            if (__p)
            {
              v342 = (char *)__p;
              operator delete(__p);
            }
LABEL_157:
            sub_1DCAE6B78((uint64_t)&v344);
            if (v347)
            {
              v348 = v347;
              operator delete(v347);
            }
            if (!v192)
            {
              v209 = a2 - 2;
              v210 = a4 + 1;
              do
              {
                v211 = (*a6)++;
                sub_1DCAF0F78(this);
                *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v211) = a4;
                v212 = (*a6)++;
                sub_1DCAF0F78(this);
                *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v212) = v210;
                v213 = (*a6)++;
                sub_1DCAF0F78(this);
                *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v213) = v210 + 1;
                v214 = (*a8)++;
                sub_1DCAF0F78(a7);
                *(_DWORD *)(*((_QWORD *)a7 + 4) + 4 * v214) = 3;
                ++v210;
                --v209;
              }
              while (v209);
              goto LABEL_320;
            }
            if (v53 != v320)
            {
              v193 = 0;
              v194 = vsubq_f32(*(float32x4_t *)v338, v319);
              v195 = (int32x4_t)vmulq_f32(v194, v194);
              v195.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v195.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v195.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v195, 2)).u32[0];
              v196 = vrsqrte_f32((float32x2_t)v195.u32[0]);
              v197 = vmul_f32(vrsqrts_f32((float32x2_t)v195.u32[0], vmul_f32(v196, v196)), v196);
              v198 = vmulq_n_f32(v194, vmul_f32(v197, vrsqrts_f32((float32x2_t)v195.u32[0], vmul_f32(v197, v197))).f32[0]);
              v199 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v198, (int32x4_t)v198), (int8x16_t)v198, 0xCuLL), v318)), v317, v198);
              v200 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v199, v199), (int8x16_t)v199, 0xCuLL);
              if (v321 <= 1)
                v201 = 1;
              else
                v201 = v321;
              do
              {
                v202 = vsubq_f32(*((float32x4_t *)v338 + v193), v319);
                v203 = (int32x4_t)vmulq_f32(v202, v198);
                v204 = (int32x4_t)vmulq_f32(v202, v200);
                v205 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v203.i8, *(int32x2_t *)v204.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v203.i8, *(int32x2_t *)v204.i8));
                v206 = vzip2q_s32(v203, v204);
                *(float32x2_t *)v206.i8 = vadd_f32(v205, *(float32x2_t *)v206.i8);
                v206.i32[2] = 0;
                *((int32x4_t *)v338 + v193++) = v206;
              }
              while (v201 != v193);
            }
            v348 = 0;
            v349 = 0;
            v347 = (uint64_t *)&v348;
            v207 = v336;
            *(_QWORD *)&v344 = v336;
            if (v336 == (void **)&v335)
            {
              v208 = (void **)&v335;
            }
            else
            {
              do
              {
                if (sub_1DCC0DBB4((uint64_t *)&v344, (uint64_t)&v335, &v338))
                  sub_1DCB02EEC(&v347, (uint64_t *)&v348, (int *)v207 + 4, (_DWORD *)v207 + 4);
                v207 = (void **)v207[1];
                *(_QWORD *)&v344 = v207;
              }
              while (v207 != (void **)&v335);
              v208 = v336;
            }
            __p = v208;
            v334 = (void **)&v335;
            v215 = v337;
            if (v337 < 3)
            {
LABEL_307:
              sub_1DCAE4E44((uint64_t)&v347, v348);
              v303 = 0;
              v348 = 0;
              v349 = 0;
              v347 = (uint64_t *)&v348;
              if (v337 >= 4)
              {
                v304 = v336;
                do
                {
                  v305 = v336;
                  if (v336 == v304)
                    v306 = (void **)&v335;
                  else
                    v306 = v304;
                  v307 = *((_DWORD *)*v306 + 4);
                  v308 = *((_DWORD *)v304 + 4);
                  if (v304[1] != &v335)
                    v305 = (void **)v304[1];
                  v309 = *((_DWORD *)v305 + 4);
                  v310 = (*a6)++;
                  sub_1DCAF0F78(this);
                  *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v310) = v307 + a4;
                  v311 = (*a6)++;
                  sub_1DCAF0F78(this);
                  *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v311) = v308 + a4;
                  v312 = (*a6)++;
                  sub_1DCAF0F78(this);
                  *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v312) = v309 + a4;
                  v313 = (*a8)++;
                  sub_1DCAF0F78(a7);
                  *(_DWORD *)(*((_QWORD *)a7 + 4) + 4 * v313) = 3;
                  v315 = *v304;
                  v314 = (void **)v304[1];
                  if (v314 == (void **)&v335)
                    v316 = v336;
                  else
                    v316 = (void **)v304[1];
                  v315[1] = v314;
                  *(_QWORD *)v304[1] = v315;
                  --v337;
                  operator delete(v304);
                  v304 = v316;
                }
                while (v337 > 2);
                sub_1DCB032E4(&v335);
                v303 = v348;
              }
              sub_1DCAE4E44((uint64_t)&v347, v303);
              goto LABEL_320;
            }
            if (v337 == 3)
            {
              v216 = v208;
LABEL_301:
              v301 = v336;
              if (v336 == v208)
                v302 = (void **)&v335;
              else
                v302 = v208;
              if (v216[1] != &v335)
                v301 = (void **)v216[1];
              sub_1DCC0DAF8(this, a6, a7, a8, *((_DWORD *)*v302 + 4) + a4, *((_DWORD *)v216 + 4) + a4, *((_DWORD *)v301 + 4) + a4);
              goto LABEL_307;
            }
            v217 = 0;
            v218 = v337;
            while (1)
            {
              v219 = *((int *)v208 + 4);
              v220 = v348;
              if (!v348)
                goto LABEL_187;
              v221 = &v348;
              do
              {
                v222 = v220;
                v223 = v221;
                v224 = *((_DWORD *)v220 + 7);
                v225 = v220 + 1;
                if (v224 >= (int)v219)
                {
                  v225 = v222;
                  v221 = (_QWORD **)v222;
                }
                v220 = (_QWORD *)*v225;
              }
              while (v220);
              if (v221 == &v348)
                goto LABEL_187;
              if (v224 < (int)v219)
                v222 = v223;
              if ((int)v219 >= *((_DWORD *)v222 + 7))
              {
                v247 = v336;
              }
              else
              {
LABEL_187:
                v226 = v336;
                if (v336 == v208)
                  v227 = (void **)&v335;
                else
                  v227 = v208;
                v228 = *((int *)*v227 + 4);
                if (v208[1] != &v335)
                  v226 = (void **)v208[1];
                v229 = *((int *)v226 + 4);
                v344 = 0uLL;
                *(_QWORD *)&v345 = 0;
                v230 = v338;
                v231 = operator new(0x10uLL);
                *v231 = v230[v228];
                *((_QWORD *)&v344 + 1) = v231 + 1;
                *(_QWORD *)&v345 = v231 + 1;
                *(_QWORD *)&v344 = v231;
                v233 = sub_1DCAFBD5C((uint64_t)&v345, 2uLL);
                v235 = (char *)*((_QWORD *)&v344 + 1);
                v234 = (char *)v344;
                v233[1] = v230[v219];
                v236 = (char *)(v233 + 1);
                if (v235 != v234)
                {
                  do
                  {
                    v237 = *((_OWORD *)v235 - 1);
                    v235 -= 16;
                    *((_OWORD *)v236 - 1) = v237;
                    v236 -= 16;
                  }
                  while (v235 != v234);
                  v234 = (char *)v344;
                }
                v238 = (char *)&v233[v232];
                v239 = (char *)(v233 + 2);
                *(_QWORD *)&v344 = v236;
                *((_QWORD *)&v344 + 1) = v233 + 2;
                *(_QWORD *)&v345 = v238;
                if (v234)
                {
                  operator delete(v234);
                  v238 = (char *)v345;
                }
                *((_QWORD *)&v344 + 1) = v233 + 2;
                v240 = v338;
                if (v239 >= v238)
                {
                  v242 = (uint64_t)&v239[-v344] >> 4;
                  if ((unint64_t)(v242 + 1) >> 60)
                    sub_1DCAE4C44();
                  v243 = (uint64_t)&v238[-v344];
                  v244 = v243 >> 3;
                  if (v243 >> 3 <= (unint64_t)(v242 + 1))
                    v244 = v242 + 1;
                  if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFF0)
                    v245 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v245 = v244;
                  if (v245)
                    v246 = (char *)sub_1DCAFBD5C((uint64_t)&v345, v245);
                  else
                    v246 = 0;
                  v248 = &v246[16 * v242];
                  *(_OWORD *)v248 = v240[v229];
                  v241 = v248 + 16;
                  v249 = (char *)*((_QWORD *)&v344 + 1);
                  v250 = (char *)v344;
                  if (*((_QWORD *)&v344 + 1) != (_QWORD)v344)
                  {
                    do
                    {
                      v251 = *((_OWORD *)v249 - 1);
                      v249 -= 16;
                      *((_OWORD *)v248 - 1) = v251;
                      v248 -= 16;
                    }
                    while (v249 != v250);
                    v249 = (char *)v344;
                  }
                  *(_QWORD *)&v344 = v248;
                  *((_QWORD *)&v344 + 1) = v241;
                  *(_QWORD *)&v345 = &v246[16 * v245];
                  if (v249)
                    operator delete(v249);
                }
                else
                {
                  v233[2] = *((_OWORD *)v338 + v229);
                  v241 = v233 + 3;
                }
                *((_QWORD *)&v344 + 1) = v241;
                v252 = v347;
                if (v347 != (uint64_t *)&v348)
                {
                  do
                  {
                    v253 = *((_DWORD *)v252 + 7);
                    _ZF = v253 == (_DWORD)v228 || v253 == (_DWORD)v229;
                    if (!_ZF)
                    {
                      v331 = *((float32x4_t *)v338 + v253);
                      v351 = 0;
                      v352 = 0;
                      p_p = 0;
                      sub_1DCB0311C(&p_p, (const void *)v344, *((uint64_t *)&v344 + 1), (uint64_t)(*((_QWORD *)&v344 + 1) - v344) >> 4);
                      v255 = *((float32x4_t *)p_p + 2);
                      _D2 = (int32x2_t)vsubq_f32(v331, v255).u64[0];
                      _Q0 = vsubq_f32(*((float32x4_t *)p_p + 1), v255);
                      __asm { FMLS            S4, S2, V0.S[1] }
                      if (fabsf(_S4) < 0.000001)
                        goto LABEL_222;
                      _D1 = (float32x2_t)vsubq_f32(*(float32x4_t *)p_p, v255).u64[0];
                      v262 = vmul_f32((float32x2_t)vrev64_s32(_D2), vneg_f32(_D1));
                      LODWORD(v263) = vsub_f32(v262, (float32x2_t)vdup_lane_s32((int32x2_t)v262, 1)).u32[0];
                      if (fabsf(v263) < 0.000001)
                        goto LABEL_222;
                      _S0 = _Q0.i32[1];
                      __asm { FMLS            S2, S0, V1.S[0] }
                      v266 = v263 + _S4;
                      if (vabds_f32(v263 + _S4, _S2) >= 0.000001)
                      {
                        v329 = v263;
                        v332 = _S4;
                        v351 = p_p;
                        v324 = _S2;
                        operator delete(p_p);
                        if (v324 >= 0.0)
                        {
                          if (v332 >= 0.0 && v329 >= 0.0 && v266 <= v324)
                          {
LABEL_242:
                            v271 = 0;
                            goto LABEL_244;
                          }
                        }
                        else if (v332 <= 0.0 && v329 <= 0.0 && v266 >= v324)
                        {
                          goto LABEL_242;
                        }
                      }
                      else
                      {
LABEL_222:
                        v351 = p_p;
                        operator delete(p_p);
                      }
                    }
                    v267 = (uint64_t *)v252[1];
                    if (v267)
                    {
                      do
                      {
                        v268 = v267;
                        v267 = (uint64_t *)*v267;
                      }
                      while (v267);
                    }
                    else
                    {
                      do
                      {
                        v268 = (uint64_t *)v252[2];
                        _ZF = *v268 == (_QWORD)v252;
                        v252 = v268;
                      }
                      while (!_ZF);
                    }
                    v252 = v268;
                  }
                  while (v268 != (uint64_t *)&v348);
                }
                v271 = 1;
LABEL_244:
                if ((_QWORD)v344)
                {
                  *((_QWORD *)&v344 + 1) = v344;
                  operator delete((void *)v344);
                }
                v208 = (void **)__p;
                v247 = v336;
                if ((v271 & 1) != 0)
                {
                  if (v336 == __p)
                    v272 = (void **)&v335;
                  else
                    v272 = (void **)__p;
                  v273 = *((_DWORD *)*v272 + 4);
                  v274 = *((_DWORD *)__p + 4);
                  v275 = (void **)*((_QWORD *)__p + 1);
                  if (v275 == (void **)&v335)
                    v275 = v336;
                  v276 = *((_DWORD *)v275 + 4);
                  v277 = (*a6)++;
                  sub_1DCAF0F78(this);
                  *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v277) = v273 + a4;
                  v278 = (*a6)++;
                  sub_1DCAF0F78(this);
                  *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v278) = v274 + a4;
                  v279 = (*a6)++;
                  sub_1DCAF0F78(this);
                  *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v279) = v276 + a4;
                  v280 = (*a8)++;
                  sub_1DCAF0F78(a7);
                  *(_DWORD *)(*((_QWORD *)a7 + 4) + 4 * v280) = 3;
                  v282 = *v208;
                  v281 = (void **)v208[1];
                  if (v281 == (void **)&v335)
                    v216 = v336;
                  else
                    v216 = (void **)v208[1];
                  v282[1] = v281;
                  *(_QWORD *)v208[1] = v282;
                  --v337;
                  operator delete(v208);
                  __p = v216;
                  v283 = v348;
                  if (v216 != (void **)&v335)
                  {
                    if (v348)
                    {
                      v284 = *((_DWORD *)v216 + 4);
                      v285 = &v348;
                      v286 = v348;
                      do
                      {
                        v287 = v286;
                        v288 = v285;
                        v289 = *((_DWORD *)v286 + 7);
                        if (v289 >= v284)
                          v285 = (_QWORD **)v286;
                        else
                          ++v286;
                        v286 = (_QWORD *)*v286;
                      }
                      while (v286);
                      if (v285 == &v348)
                        goto LABEL_268;
                      if (v289 < v284)
                        v287 = v288;
                      if (v284 < *((_DWORD *)v287 + 7))
                      {
LABEL_268:
                        v208 = v216;
                      }
                      else
                      {
                        v208 = v216;
                        if (!sub_1DCC0DBB4((uint64_t *)&__p, (uint64_t)&v335, &v338))
                        {
                          sub_1DCB0326C((uint64_t)&v347, (int *)v216 + 4);
                          v216 = (void **)__p;
                          v283 = v348;
                          goto LABEL_268;
                        }
                      }
LABEL_275:
                      v290 = (uint64_t *)&v335;
                      if (v336 != v208)
                        v290 = (uint64_t *)v208;
                      v291 = *v290;
                      v334 = (void **)v291;
                      if (v283)
                      {
                        v292 = (int *)(v291 + 16);
                        v293 = *(_DWORD *)(v291 + 16);
                        v294 = &v348;
                        do
                        {
                          v295 = v283;
                          v296 = v294;
                          v297 = *((_DWORD *)v283 + 7);
                          if (v297 >= v293)
                            v298 = v283;
                          else
                            v298 = v283 + 1;
                          if (v297 >= v293)
                            v294 = (_QWORD **)v283;
                          v283 = (_QWORD *)*v298;
                        }
                        while (*v298);
                        if (v294 != &v348)
                        {
                          if (v297 < v293)
                            v295 = v296;
                          if (v293 >= *((_DWORD *)v295 + 7) && !sub_1DCC0DBB4((uint64_t *)&v334, (uint64_t)&v335, &v338))
                            sub_1DCB0326C((uint64_t)&v347, v292);
                        }
                      }
                    }
                    else
                    {
                      v299 = (void ***)&v335;
                      if (v336 != v216)
                        v299 = (void ***)v216;
                      v334 = *v299;
                      v208 = v216;
                    }
                    v217 = 0;
                    v218 = v337;
                    v215 = v337;
                    goto LABEL_295;
                  }
                  v208 = v216;
                  v216 = (void **)&v335;
                  goto LABEL_275;
                }
                v218 = v337;
              }
              if (v208[1] == &v335)
                v216 = v247;
              else
                v216 = (void **)v208[1];
              __p = v216;
              ++v217;
              v208 = v216;
LABEL_295:
              if (v217 > v215 || v218 <= 2)
                goto LABEL_307;
              if (v218 == 3)
                goto LABEL_301;
            }
          }
        }
      }
      v143 = 0;
      v144 = 0;
      goto LABEL_136;
    }
    v25 = a4;
    v26 = (int *)(*(_QWORD *)(a3 + 32) + 4 * a4);
    v27 = a4 + 1;
    v28 = a4 + 2;
    v29 = *(_QWORD *)(a1 + 32);
    v30 = v29 + 12 * *v26;
    a9.i64[0] = *(_QWORD *)v30;
    a9.i32[2] = *(_DWORD *)(v30 + 8);
    v31 = v29 + 12 * v26[1];
    a15.i64[0] = *(_QWORD *)v31;
    a15.i32[2] = *(_DWORD *)(v31 + 8);
    v32 = v29 + 12 * v26[2];
    a10.i64[0] = *(_QWORD *)v32;
    a10.i32[2] = *(_DWORD *)(v32 + 8);
    v33 = v29 + 12 * v26[3];
    a11.i64[0] = *(_QWORD *)v33;
    a11.i32[2] = *(_DWORD *)(v33 + 8);
    v34 = vsubq_f32(a15, a9);
    v35 = vsubq_f32(a11, a10);
    v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL);
    v37 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL);
    v38 = vsubq_f32(a11, a15);
    v39 = vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), (int8x16_t)v38, 0xCuLL), v34)), v36, v38);
    v40 = vsubq_f32(a10, a15);
    v41 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL);
    v42 = vmlaq_f32(vnegq_f32(vmulq_f32(v37, v40)), v35, v41);
    v43 = vmulq_f32(v39, v42);
    v44 = a4 + 3;
    if (vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), v43), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1)).f32[0] < 0.0)
    {
      v45 = (*a6)++;
      sub_1DCAF0F78(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v45) = a4;
      v46 = (*a6)++;
      sub_1DCAF0F78(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v46) = v27;
      v47 = (*a6)++;
      sub_1DCAF0F78(this);
      v48 = *((_QWORD *)this + 4);
LABEL_7:
      *(_DWORD *)(v48 + 4 * v47) = v28;
      v49 = (*a8)++;
      sub_1DCAF0F78(a7);
      *(_DWORD *)(*((_QWORD *)a7 + 4) + 4 * v49) = 3;
      v50 = (*a6)++;
      sub_1DCAF0F78(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v50) = v25;
LABEL_133:
      v173 = (*a6)++;
      sub_1DCAF0F78(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v173) = v28;
      v174 = (*a6)++;
      sub_1DCAF0F78(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v174) = v44;
      v175 = (*a8)++;
      sub_1DCAF0F78(a7);
      *(_DWORD *)(*((_QWORD *)a7 + 4) + 4 * v175) = 3;
      return;
    }
    v78 = vsubq_f32(a10, a9);
    v79 = vmlaq_f32(vnegq_f32(vmulq_f32(v37, v78)), v35, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), (int8x16_t)v78, 0xCuLL));
    v80 = vmlaq_f32(vnegq_f32(vmulq_f32(v41, v34)), v40, v36);
    v81 = vmulq_f32(v79, v80);
    if (vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), v81), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1)).f32[0] >= 0.0)
    {
      v164 = (int32x4_t)vmulq_f32(v39, v39);
      v165 = (int32x4_t)vmulq_f32(v42, v42);
      v166 = (int32x4_t)vmulq_f32(v80, v80);
      v167 = (int32x4_t)vmulq_f32(v79, v79);
      *(float32x2_t *)v167.i8 = vabd_f32(vabs_f32(vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v164, v166), (float32x2_t)vzip1_s32(*(int32x2_t *)v164.i8, *(int32x2_t *)v166.i8)), (float32x2_t)vzip2_s32(*(int32x2_t *)v164.i8, *(int32x2_t *)v166.i8))), vabs_f32(vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v165, v167), (float32x2_t)vzip1_s32(*(int32x2_t *)v165.i8, *(int32x2_t *)v167.i8)), (float32x2_t)vzip2_s32(*(int32x2_t *)v165.i8, *(int32x2_t *)v167.i8))));
      v168 = vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v167.i8, 1), *(float32x2_t *)v167.i8).u8[0];
      v169 = (*a6)++;
      sub_1DCAF0F78(this);
      v25 = a4;
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v169) = a4;
      v170 = (*a6)++;
      sub_1DCAF0F78(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v170) = v27;
      v47 = (*a6)++;
      sub_1DCAF0F78(this);
      v48 = *((_QWORD *)this + 4);
      if ((v168 & 1) == 0)
        goto LABEL_7;
    }
    else
    {
      v82 = (*a6)++;
      sub_1DCAF0F78(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v82) = a4;
      v83 = (*a6)++;
      sub_1DCAF0F78(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v83) = v27;
      v47 = (*a6)++;
      sub_1DCAF0F78(this);
      v48 = *((_QWORD *)this + 4);
    }
    *(_DWORD *)(v48 + 4 * v47) = v44;
    v171 = (*a8)++;
    sub_1DCAF0F78(a7);
    *(_DWORD *)(*((_QWORD *)a7 + 4) + 4 * v171) = 3;
    v172 = (*a6)++;
    sub_1DCAF0F78(this);
    *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v172) = v27;
    goto LABEL_133;
  }
}

void sub_1DCC0D9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  uint64_t v37;

  sub_1DCAE4E44(v37 - 152, *(_QWORD **)(v37 - 144));
  sub_1DCB032E4(&a30);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1DCC0DAF8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3, _QWORD *a4, int a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v14 = (*a2)++;
  sub_1DCAF0F78(a1);
  *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v14) = a5;
  v15 = (*a2)++;
  sub_1DCAF0F78(a1);
  *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v15) = a6;
  v16 = (*a2)++;
  sub_1DCAF0F78(a1);
  *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v16) = a7;
  v17 = (*a4)++;
  sub_1DCAF0F78(a3);
  *(_DWORD *)(*((_QWORD *)a3 + 4) + 4 * v17) = 3;
}

BOOL sub_1DCC0DBB4(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v12;

  if (*(_QWORD *)(a2 + 8) == *a1)
    v3 = a2;
  else
    v3 = *a1;
  v4 = *(int *)(*(_QWORD *)v3 + 16);
  v5 = *(_QWORD *)(*a1 + 8);
  if (v5 == a2)
    v5 = *(_QWORD *)(a2 + 8);
  v6 = *(float32x4_t *)(*a3 + 16 * *(int *)(*a1 + 16));
  v7 = vsubq_f32(v6, *(float32x4_t *)(*a3 + 16 * v4));
  v8 = vsubq_f32(*(float32x4_t *)(*a3 + 16 * *(int *)(v5 + 16)), v6);
  v9 = vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), v7)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), v8);
  v10 = vmulq_f32(v9, v9);
  if (vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), v10), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1)).f32[0] < 1.0e-12)return 1;
  v12 = vmulq_f32(v9, (float32x4_t)xmmword_1DCC583A0);
  return vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), v12), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1)).f32[0] < 0.0;
}

uint64_t sub_1DCC0DC68(float32x2_t *a1, float32x2_t *a2)
{
  int32x2_t v2;
  char v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = vcgt_f32(*a2, *a1);
  if ((v2.i8[0] & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    if ((vcgt_f32(*a1, *a2).u8[0] & 1) == 0)
    {
      v4 = (uint64_t *)a1[1];
      v5 = (uint64_t *)a2[1];
      if (v4 != v5)
      {
        v6 = v4[1];
        v7 = *v5;
        v8 = v5[1];
        if (COERCE_FLOAT(*v4) == *(float *)&v6 && *(float *)&v7 != *(float *)&v8)
        {
          v3 = a1[2].i8[0] != 0;
          return v3 & 1;
        }
        if (COERCE_FLOAT(*v4) != *(float *)&v6 && *(float *)&v7 == *(float *)&v8)
        {
          v3 = a2[2].i8[0] == 0;
          return v3 & 1;
        }
      }
      v3 = v2.i8[4];
      return v3 & 1;
    }
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_1DCC0DCF4(float32x2_t *a1, float32x2_t *a2, int8x16_t a3)
{
  char v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int32x2_t v15;
  int32x2_t v16;
  int8x8_t v17;
  float32x2_t v18;
  float32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;
  int8x8_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int8x8_t v30;
  int32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x4_t v36;
  int32x2_t v37;

  v3 = 0;
  if (a1 && a2)
  {
    *(float32x2_t *)a3.i8 = *a1;
    v4 = a2[1];
    if ((vcgt_f32(*a1, v4).u8[0] & 1) != 0 || (v5 = *a2, v6 = a1[1], (vcgt_f32(*a2, v6).u8[0] & 1) != 0))
    {
LABEL_5:
      v3 = 0;
      return v3 & 1;
    }
    v8 = vsub_f32(*(float32x2_t *)a3.i8, v6);
    v9 = vsub_f32(v5, v4);
    v10 = vmul_f32(v8, (float32x2_t)vrev64_s32((int32x2_t)v9));
    v11 = vsub_f32(v10, (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1));
    if (vmul_f32(v11, v11).f32[0] < 0.000001)
      v11.f32[0] = 0.0;
    if (v11.f32[0] == 0.0)
    {
      v12 = vsub_f32(v5, v6);
      v13 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v12), v8);
      v14 = vsub_f32(v13, (float32x2_t)vdup_lane_s32((int32x2_t)v13, 1));
      if (vmul_f32(v14, v14).f32[0] < 0.000001)
        v14.f32[0] = 0.0;
      if (v14.f32[0] != 0.0)
        goto LABEL_5;
      v15 = (int32x2_t)vmul_f32(v12, vsub_f32(v5, *(float32x2_t *)a3.i8));
      v16 = (int32x2_t)vmul_f32(vsub_f32(v4, v6), vsub_f32(v4, *(float32x2_t *)a3.i8));
      v17 = vmvn_s8((int8x8_t)vcltz_f32(vadd_f32((float32x2_t)vzip1_s32(v16, v15), (float32x2_t)vzip2_s32(v16, v15))));
      if ((v17.i32[1] & v17.i32[0] & 1) != 0)
        goto LABEL_5;
    }
    else
    {
      v18 = vsub_f32(v5, *(float32x2_t *)a3.i8);
      v19 = vsub_f32(v6, *(float32x2_t *)a3.i8);
      v20 = (int32x2_t)vsub_f32(v4, *(float32x2_t *)a3.i8);
      v21 = (int32x2_t)vsub_f32(*(float32x2_t *)a3.i8, v5);
      v22 = (int32x2_t)vsub_f32(v4, v5);
      v23 = (int8x8_t)vsub_f32(v6, v5);
      v24 = vmla_f32(vneg_f32(vmul_f32((float32x2_t)vzip1_s32((int32x2_t)v19, v22), (float32x2_t)vzip2_s32(v20, v21))), (float32x2_t)vzip1_s32(v20, v21), (float32x2_t)vzip2_s32((int32x2_t)v19, v22));
      v25 = (float32x2_t)vdup_n_s32(0x358637BDu);
      v26 = (float32x2_t)vext_s8((int8x8_t)v18, (int8x8_t)v22, 4uLL);
      v18.i32[1] = v22.i32[1];
      v27 = (float32x2_t)vext_s8((int8x8_t)v19, v23, 4uLL);
      v19.i32[1] = v23.i32[1];
      v28 = vmla_f32(vneg_f32(vmul_f32(v19, v26)), v18, v27);
      v29 = vmul_f32((float32x2_t)vbic_s8((int8x8_t)v28, (int8x8_t)vcgt_f32(v25, vmul_f32(v28, v28))), (float32x2_t)vbic_s8((int8x8_t)v24, (int8x8_t)vcgt_f32(v25, vmul_f32(v24, v24))));
      if (v29.f32[0] >= 0.0 || v29.f32[1] >= 0.0)
      {
        v30 = (int8x8_t)vsub_f32(v5, v6);
        v31 = (int32x2_t)vsub_f32(v4, v6);
        *(float32x2_t *)a3.i8 = vsub_f32(*(float32x2_t *)a3.i8, v4);
        v32 = vsub_f32(v6, v4);
        *(float32x2_t *)a3.i8 = vmla_f32(vneg_f32(vmul_f32((float32x2_t)vzip1_s32((int32x2_t)v9, (int32x2_t)v8), (float32x2_t)vzip2_s32(*(int32x2_t *)a3.i8, v31))), (float32x2_t)vzip1_s32(*(int32x2_t *)a3.i8, v31), (float32x2_t)vzip2_s32((int32x2_t)v9, (int32x2_t)v8));
        v33 = (float32x2_t)vext_s8((int8x8_t)v32, (int8x8_t)v8, 4uLL);
        v32.i32[1] = v8.i32[1];
        v34 = (float32x2_t)vext_s8((int8x8_t)v9, v30, 4uLL);
        v9.i32[1] = v30.i32[1];
        v35 = vmla_f32(vneg_f32(vmul_f32(v33, v9)), v34, v32);
        *(float32x2_t *)a3.i8 = vmul_f32((float32x2_t)vbic_s8((int8x8_t)v35, (int8x8_t)vcgt_f32(v25, vmul_f32(v35, v35))), (float32x2_t)vbic_s8(*(int8x8_t *)a3.i8, (int8x8_t)vcgt_f32(v25, vmul_f32(*(float32x2_t *)a3.i8, *(float32x2_t *)a3.i8))));
        v36 = (float32x4_t)vextq_s8(a3, a3, 4uLL);
        *(float32x2_t *)&v36.i32[1] = v29;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_f32(v36))) & 1) != 0)
        {
          v37 = vcltz_f32(*(float32x2_t *)a3.i8);
          v3 = (v29.f32[0] < 0.0 || v29.f32[1] < 0.0) | v37.i8[4] | v37.i8[0];
          return v3 & 1;
        }
        goto LABEL_5;
      }
    }
    v3 = 1;
  }
  return v3 & 1;
}

void sub_1DCC0DF14(uint64_t a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  BOOL v32;
  __int128 v33;
  __int128 *v34;
  int v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 *v46;
  __int128 *v47;
  __int128 *v48;
  __n128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 *v58;
  BOOL v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  int64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 *v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  BOOL v100;
  uint64_t v101;
  __int128 *v102;
  __int128 v103;
  uint64_t v104;
  char v105;
  __int128 v106;
  __int128 *v107;
  __int128 *v108;
  unint64_t v109;
  uint64_t v110;
  int64_t v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;

BOOL sub_1DCC0E8F4(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 24);
      if ((*a3)((__int128 *)(a2 - 24), (__int128 *)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = v11;
        *v8 = v10;
        *(_QWORD *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      sub_1DCB0294C((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_1DCB02D4C(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      v19 = (__int128 *)(a1 + 24);
      v20 = (__int128 *)(a1 + 48);
      v21 = (__int128 *)(a1 + 72);
      v22 = a2 - 24;
      v23 = sub_1DCB02D4C(a1, a1 + 24, a1 + 48, a1 + 72, a3);
      if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a3)(v22, a1 + 72, v23))
      {
        v24 = *(_QWORD *)(a1 + 88);
        v25 = *v21;
        v26 = *(_QWORD *)(v22 + 16);
        *v21 = *(_OWORD *)v22;
        *(_QWORD *)(a1 + 88) = v26;
        *(_OWORD *)v22 = v25;
        *(_QWORD *)(v22 + 16) = v24;
        if ((*a3)((__int128 *)(a1 + 72), (__int128 *)(a1 + 48)))
        {
          v27 = *(_QWORD *)(a1 + 64);
          v28 = *v20;
          *v20 = *v21;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v21 = v28;
          *(_QWORD *)(a1 + 88) = v27;
          if ((*a3)((__int128 *)(a1 + 48), (__int128 *)(a1 + 24)))
          {
            v29 = *(_QWORD *)(a1 + 40);
            v30 = *v19;
            *v19 = *v20;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v20 = v30;
            *(_QWORD *)(a1 + 64) = v29;
            if ((*a3)((__int128 *)(a1 + 24), (__int128 *)a1))
            {
              v31 = *(_QWORD *)(a1 + 16);
              v32 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v19 = v32;
              *(_QWORD *)(a1 + 40) = v31;
            }
          }
        }
      }
      return 1;
    default:
      v12 = (__int128 *)(a1 + 48);
      sub_1DCB0294C((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v13, v12))
    {
      v33 = *(_OWORD *)v13;
      v34 = *(_QWORD *)(v13 + 16);
      v16 = v14;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (((*a3)(&v33, (__int128 *)(v17 + 24)) & 1) == 0)
        {
          v18 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(_OWORD *)v18 = v33;
      *(_QWORD *)(v18 + 16) = v34;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (__int128 *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n64 sub_1DCC0EBBC(float32x4_t *a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  float v25;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  __n64 result;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float v61;

  v2 = a1[1];
  v3 = a1[2];
  v4 = vsubq_f32(v3, v2);
  v5 = vmulq_f32(v4, v4);
  v6 = a1[3];
  v7 = vaddq_f32(vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2));
  v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  v9 = vmulq_n_f32(v4, vmul_f32(vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)), v8).f32[0]);
  v10 = vsubq_f32(v6, v2);
  v11 = vmulq_f32(v10, v10);
  v12 = vaddq_f32(vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2));
  v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
  v14 = vmulq_n_f32(v10, vmul_f32(vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)), v13).f32[0]);
  v15 = vsubq_f32(v6, v3);
  v16 = vmulq_f32(v15, v15);
  v17 = vaddq_f32(vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2));
  v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
  v19 = vmulq_n_f32(v15, vmul_f32(vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)), v18).f32[0]);
  v20 = vmulq_f32(v14, v9);
  v21 = fabsf(vaddq_f32(vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2)).f32[0]);
  v22 = vmulq_f32(v19, vnegq_f32(v9));
  v23 = fabsf(vaddq_f32(vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2)).f32[0]);
  v24 = vmulq_f32(v19, v14);
  v25 = fabsf(vaddq_f32(vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2)).f32[0]);
  if (v21 < v23 && v21 < v25)
  {
    v43 = vsubq_f32(a2, v2);
    v44 = vmulq_f32(v10, v4);
    v45 = vmulq_f32(v4, v43);
    v46 = vaddq_f32(vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2));
    v47 = vaddq_f32(vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2));
    v48 = vmulq_f32(v10, v43);
    v49 = vaddq_f32(vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2));
    v45.f32[0] = vmulq_f32(v12, v7).f32[0] - vmulq_f32(v46, v46).f32[0];
    v50 = vmlas_n_f32(-vmulq_f32(v46, v49).f32[0], v12.f32[0], v47.f32[0]);
    result.n64_f32[0] = 1.0
                      - (float)((float)(vmlas_n_f32(-vmulq_f32(v46, v47).f32[0], v7.f32[0], v49.f32[0]) / v45.f32[0])
                              + (float)(v50 / v45.f32[0]));
    result.n64_f32[1] = v50 / v45.f32[0];
  }
  else if (v23 < v21 && v23 < v25)
  {
    v51 = vsubq_f32(v2, v3);
    v52 = vsubq_f32(a2, v3);
    v53 = vmulq_f32(v51, v51);
    v54 = vaddq_f32(vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2));
    v55 = vmulq_f32(v15, v51);
    v56 = vmulq_f32(v51, v52);
    v57 = vaddq_f32(vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2));
    v58 = vaddq_f32(vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2));
    v59 = vmulq_f32(v15, v52);
    v60 = vaddq_f32(vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2));
    v61 = vmulq_f32(v17, v54).f32[0] - vmulq_f32(v57, v57).f32[0];
    result.n64_f32[0] = vmlas_n_f32(-vmulq_f32(v57, v60).f32[0], v17.f32[0], v58.f32[0]) / v61;
    result.n64_f32[1] = 1.0
                      - (float)((float)(vmlas_n_f32(-vmulq_f32(v57, v58).f32[0], v54.f32[0], v60.f32[0]) / v61)
                              + result.n64_f32[0]);
  }
  else
  {
    v28 = vsubq_f32(v2, v6);
    v29 = vsubq_f32(v3, v6);
    v30 = vsubq_f32(a2, v6);
    v31 = vmulq_f32(v28, v28);
    v32 = vaddq_f32(vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2));
    v33 = vmulq_f32(v28, v29);
    v34 = vaddq_f32(vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2));
    v35 = vmulq_f32(v29, v29);
    v36 = vmulq_f32(v28, v30);
    v37 = vaddq_f32(vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2));
    v38 = vaddq_f32(vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2));
    v39 = vmulq_f32(v29, v30);
    v40 = vaddq_f32(vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2));
    v41 = vmulq_f32(v32, v37).f32[0] - vmulq_f32(v34, v34).f32[0];
    result.n64_f32[0] = vmlas_n_f32(-vmulq_f32(v34, v40).f32[0], v37.f32[0], v38.f32[0]) / v41;
    result.n64_f32[1] = vmlas_n_f32(-vmulq_f32(v34, v38).f32[0], v32.f32[0], v40.f32[0]) / v41;
  }
  return result;
}

uint64_t sub_1DCC0EE94(float32x4_t *a1, float *a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  float v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  float v16;
  float v17;
  float v18;
  float v19;

  v4 = a1[7];
  v5 = vmulq_f32(v4, a4);
  v6 = vaddq_f32(vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2)).f32[0];
  if (v6 > -0.00024414)
    return 0;
  v7 = vsubq_f32(a3, a1[1]);
  v8 = vmulq_f32(v7, v4);
  v9 = vaddq_f32(vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2)).f32[0];
  if (v9 < 0.00024414)
    return 0;
  v10 = (float)-v9 / v6;
  if (v10 >= *a2)
    return 0;
  v11 = 0;
  v12 = vmlaq_n_f32(v7, a4, v10);
  v13 = vmulq_f32(a1[8], v12);
  v14 = vaddq_f32(vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2)).f32[0];
  v15 = vmulq_f32(a1[9], v12);
  LODWORD(v16) = vaddq_f32(vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2)).u32[0];
  v17 = a1[10].f32[1];
  v18 = vmlas_n_f32(-(float)(v14 * a1[10].f32[2]), v17, v16);
  if (v18 >= 0.0)
  {
    v19 = vmlas_n_f32(-(float)(v16 * a1[10].f32[0]), v17, v14);
    if (v19 >= 0.0 && (float)(v18 + v19) <= 1.0)
    {
      *a2 = v10;
      return 1;
    }
  }
  return v11;
}

void sub_1DCC0F084(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCC0F118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MDLScene;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1DCC0F310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCC0F328(uint64_t a1)
{
  uint64_t *v6;
  uint64_t *i;

  __asm { FMOV            V0.2S, #1.0 }
  v6 = *(uint64_t **)(a1 + 16);
  for (i = *(uint64_t **)(a1 + 24); v6 != i; ++v6)
    sub_1DCAF1160(*v6);
  return 0;
}

void sub_1DCC0F710(_Unwind_Exception *a1)
{
  void *v1;
  std::mutex *v2;
  uint64_t v3;

  MEMORY[0x1DF0D228C](v3, 0x10A1C4029A5C24FLL);
  std::mutex::unlock(v2);

  _Unwind_Resume(a1);
}

id sub_1DCC0F778(char **a1, id *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  id result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      sub_1DCAE4C44();
    v11 = v5 - (_QWORD)*a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v25 = v4;
    if (v13)
      v14 = (char *)sub_1DCAE79A4(v4, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v24 = v16;
    *(_QWORD *)v15 = *a2;
    v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v9 = (char *)v23.i64[1];
      v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v16;
    v24 = v21;
    v22 = v20.i64[0];
    result = (id)sub_1DCC10134((uint64_t)&v22);
  }
  else
  {
    result = *a2;
    *(_QWORD *)v7 = result;
    v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void sub_1DCC0FBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  uint64_t v22;

  MEMORY[0x1DF0D228C](v22, 0x10A1C40A30AD078);
  __cxa_guard_abort(&qword_1F03B5190);

  _Unwind_Resume(a1);
}

void sub_1DCC0FCB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int32 v9;
  int32x2_t v10;
  __int128 v11;
  __int32 v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x2_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float v27;
  float32x4_t v28;
  float v29;
  float32x4_t v30;
  float v31;
  float v32;
  int32x2_t *v33;
  float32x4_t v34;
  float v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  float v39;
  float32x4_t v40;
  int16x8_t v41;
  void *context;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  _OWORD v53[6];
  _OWORD v54[7];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v48 = *(_QWORD *)(a1 + 168);
  v3 = (int)HIDWORD(*(_QWORD *)(a1 + 168)) * a2;
  v4 = v3 >> 5;
  v5 = (v3 + (int)HIDWORD(*(_QWORD *)(a1 + 168))) >> 5;
  v6 = *(_QWORD *)(a1 + 176);
  context = (void *)MEMORY[0x1DF0D25C8]();
  if ((int)v4 < (int)v5)
  {
    v7 = 0;
    v8 = v6 + 4 * v48 * (int)v4;
    v9 = *(_DWORD *)(a1 + 172);
    v10 = *(int32x2_t *)(a1 + 168);
    v11 = 0uLL;
    v43 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    do
    {
      v12 = v10.i32[0];
      if (v10.i32[0] >= 1)
      {
        v13 = 0;
        *(float *)v10.i32 = (float)(int)v4 / (float)(v9 - 1);
        v14 = vmlaq_n_f32(*(float32x4_t *)(a1 + 32), vsubq_f32(*(float32x4_t *)(a1 + 48), *(float32x4_t *)(a1 + 32)), *(float *)v10.i32);
        v44 = vsubq_f32(vmlaq_f32(*(float32x4_t *)(a1 + 64), vsubq_f32(*(float32x4_t *)(a1 + 80), *(float32x4_t *)(a1 + 64)), (float32x4_t)vdupq_lane_s32(v10, 0)), v14);
        v45 = v14;
        do
        {
          v15 = vmlaq_n_f32(v45, v44, (float)(int)v13 / (float)(v12 - 1));
          v16 = (int32x4_t)vmulq_f32(v15, v15);
          v16.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v16, 2)).u32[0];
          v17 = vrsqrte_f32((float32x2_t)v16.u32[0]);
          v61 = v11;
          v63 = *((_QWORD *)&v11 + 1);
          v59 = *((_QWORD *)&v11 + 1);
          v60 = v11;
          v54[6] = v11;
          v62 = 0;
          v55 = v11;
          v56 = v11;
          v57 = v11;
          v58 = 0;
          v49 = vmulq_n_f32(v15, vmul_f32(vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v17, v17)), v17).f32[0]);
          sub_1DCC0F328(*(_QWORD *)(a1 + 128));
          if (v58)
          {
            v20 = qword_1F03B5188;
            v21 = *(_OWORD *)(a1 + 112);
            v54[2] = vnegq_f32(v49);
            v54[3] = v21;
            v54[4] = v56;
            v54[5] = v57;
            v54[0] = v60;
            v54[1] = v55;
            memset(v53, 0, sizeof(v53));
            v22 = objc_msgSend_textureData(*(void **)(a1 + 136), v18, v19);
            v25 = objc_msgSend_textureData(*(void **)(a1 + 144), v23, v24);
            (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v20 + 24))(v20, v54, v22, v25, v53);
            *(double *)v26.i64 = (*(double (**)(uint64_t, _OWORD *, _OWORD *))(*(_QWORD *)v20 + 16))(v20, v54, v53);
            v46 = v26;
            v27 = powf(v26.f32[0], 2.2);
            v28 = v46;
            v28.f32[0] = v27;
            v50 = v28;
            v29 = powf(v46.f32[1], 2.2);
            v30 = v50;
            v30.f32[1] = v29;
            v51 = v30;
            v31 = v46.f32[2];
            v32 = 2.2;
          }
          else
          {
            v33 = (int32x2_t *)objc_msgSend_textureData(*(void **)(a1 + 136), v18, v19);
            *(double *)v34.i64 = sub_1DCC2D110(v33, v49);
            v47 = v34;
            v35 = powf(v34.f32[0], 0.625);
            v36 = v47;
            v36.f32[0] = v35;
            v52 = v36;
            v37 = powf(v47.f32[1], 0.625);
            v38 = v52;
            v38.f32[1] = v37;
            v51 = v38;
            v31 = v47.f32[2];
            v32 = 0.625;
          }
          v39 = powf(v31, v32);
          v40 = v51;
          v40.f32[2] = v39;
          v11 = 0uLL;
          v41 = (int16x8_t)vcvtq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_f32(v40, v43), (float32x4_t)0), v43));
          *(int16x4_t *)v41.i8 = vmovn_s32((int32x4_t)v41);
          *(_DWORD *)(v8 + 4 * (v13 + v7 * *(_DWORD *)(a1 + 168))) = vmovn_s16(v41).u32[0];
          v10 = *(int32x2_t *)(a1 + 168);
          v12 = v10.i32[0];
          ++v13;
        }
        while ((int)v13 < v10.i32[0]);
      }
      v9 = v10.i32[1];
      LODWORD(v4) = v4 + 1;
      ++v7;
    }
    while ((_DWORD)v4 != (_DWORD)v5);
  }
  objc_autoreleasePoolPop(context);
  dispatch_group_async(*(dispatch_group_t *)(a1 + 152), *(dispatch_queue_t *)(a1 + 160), &unk_1EA576470);
}

void sub_1DCC10068(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1DCC100D4(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  void *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 1);
        v3 -= 8;

      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1DCC10134(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1DCC10184(uint64_t a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3)
{
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v3;
  uint64_t *v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t i;
  int v25;
  int v26;
  unint64_t *v27;
  unint64_t *v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t j;
  int v45;
  unint64_t v46;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;

  v3 = a3;
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  sub_1DCB23B10((uint64_t)&v81, *(unsigned int *)a3);
  MEMORY[0x1DF0D1254](&v80, "constant");
  v6 = (uint64_t *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8;
  v8 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
  if ((v80 & 7) != 0)
  {
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  if ((unsigned int *)v7 == v8)
  {
    if (*(_QWORD *)v3)
    {
      v19 = 0;
      do
      {
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v81);
        *(_DWORD *)(v83 + 4 * v19++) = 0;
      }
      while (*(_QWORD *)v3 > v19);
    }
  }
  else
  {
    MEMORY[0x1DF0D1254](&v80, "vertex");
    v10 = *v6 & 0xFFFFFFFFFFFFFFF8;
    v11 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    if ((v80 & 7) != 0)
    {
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    if ((unsigned int *)v10 == v11)
    {
      if (!*(_QWORD *)(a1 + 16))
        goto LABEL_32;
      if (*(_QWORD *)v3)
      {
        v20 = 0;
        do
        {
          sub_1DCAF0F78(v3);
          v21 = *(int *)(*((_QWORD *)v3 + 4) + 4 * v20);
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 16));
          LODWORD(v21) = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v21);
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v81);
          *(_DWORD *)(v83 + 4 * v20++) = v21;
        }
        while (*(_QWORD *)v3 > v20);
      }
    }
    else
    {
      MEMORY[0x1DF0D1254](&v80, "uniform");
      v13 = *v6 & 0xFFFFFFFFFFFFFFF8;
      v14 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
      if ((v80 & 7) != 0)
      {
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      if ((unsigned int *)v13 == v14)
      {
        v22 = *(_QWORD *)a2;
        if (*(_QWORD *)(a1 + 16))
        {
          if (v22)
          {
            v23 = 0;
            LODWORD(i) = 0;
            do
            {
              v25 = 0;
              for (i = (int)i; ; ++i)
              {
                sub_1DCAF0F78(a2);
                if (v25 >= *(_DWORD *)(*((_QWORD *)a2 + 4) + 4 * v23))
                  break;
                sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 16));
                v26 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v23);
                sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v81);
                *(_DWORD *)(v83 + 4 * i) = v26;
                ++v25;
              }
              ++v23;
            }
            while (*(_QWORD *)a2 > v23);
          }
        }
        else if (v22)
        {
          v43 = 0;
          LODWORD(j) = 0;
          do
          {
            v45 = 0;
            for (j = (int)j; ; ++j)
            {
              sub_1DCAF0F78(a2);
              if (v45 >= *(_DWORD *)(*((_QWORD *)a2 + 4) + 4 * v43))
                break;
              sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v81);
              *(_DWORD *)(v83 + 4 * j) = v43;
              ++v45;
            }
            ++v43;
          }
          while (*(_QWORD *)a2 > v43);
        }
      }
      else
      {
        MEMORY[0x1DF0D1254](&v80, "faceVarying");
        v16 = *v6 & 0xFFFFFFFFFFFFFFF8;
        v17 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
        if ((v80 & 7) != 0)
        {
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
        if ((unsigned int *)v16 == v17)
        {
          if (*(_QWORD *)(a1 + 16))
          {
            v3 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 16);
LABEL_32:
            sub_1DCB24648((uint64_t)&v81, (__int128 *)v3);
            goto LABEL_33;
          }
          if (*(_QWORD *)v3)
          {
            v46 = 0;
            do
            {
              sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v81);
              *(_DWORD *)(v83 + 4 * v46) = v46;
              ++v46;
            }
            while (*(_QWORD *)v3 > v46);
          }
        }
      }
    }
  }
LABEL_33:
  v27 = (unint64_t *)MEMORY[0x1E0DF2618];
  if (!atomic_load(MEMORY[0x1E0DF2618]))
    sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    goto LABEL_39;
  if (!atomic_load(v27))
    sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
LABEL_39:
    v77 = v81;
    v78 = v82;
    v79 = v83;
    if (v83)
    {
      v30 = (unint64_t *)(v83 - 16);
      if (*((_QWORD *)&v78 + 1))
        v30 = (unint64_t *)*((_QWORD *)&v78 + 1);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    sub_1DCC109A4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v77, *(int *)(a1 + 88), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    sub_1DCAEEE78((uint64_t)&v77);
  }
  else
  {
    if (!atomic_load(v27))
      sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
      goto LABEL_59;
    if (!atomic_load(v27))
      sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    {
LABEL_59:
      v74 = v81;
      v75 = v82;
      v76 = v83;
      if (v83)
      {
        v38 = (unint64_t *)(v83 - 16);
        if (*((_QWORD *)&v75 + 1))
          v38 = (unint64_t *)*((_QWORD *)&v75 + 1);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      sub_1DCC10B18((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v74, *(int *)(a1 + 88), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
      sub_1DCAEEE78((uint64_t)&v74);
    }
    else
    {
      if (!atomic_load(v27))
        sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
      {
        v71 = v81;
        v72 = v82;
        v73 = v83;
        if (v83)
        {
          v41 = (unint64_t *)(v83 - 16);
          if (*((_QWORD *)&v72 + 1))
            v41 = (unint64_t *)*((_QWORD *)&v72 + 1);
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        sub_1DCC10CA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v71, *(int *)(a1 + 88), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
        sub_1DCAEEE78((uint64_t)&v71);
      }
      else
      {
        if (!atomic_load(v27))
          sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
        {
          v68 = v81;
          v69 = v82;
          v70 = v83;
          if (v83)
          {
            v48 = (unint64_t *)(v83 - 16);
            if (*((_QWORD *)&v69 + 1))
              v48 = (unint64_t *)*((_QWORD *)&v69 + 1);
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          sub_1DCC10E0C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v68, *(int *)(a1 + 88), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
          sub_1DCAEEE78((uint64_t)&v68);
        }
        else
        {
          if (!atomic_load(v27))
            sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
          {
            v65 = v81;
            v66 = v82;
            v67 = v83;
            if (v83)
            {
              v51 = (unint64_t *)(v83 - 16);
              if (*((_QWORD *)&v66 + 1))
                v51 = (unint64_t *)*((_QWORD *)&v66 + 1);
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
            }
            sub_1DCC10F80((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v65, *(int *)(a1 + 88), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
            sub_1DCAEEE78((uint64_t)&v65);
          }
          else
          {
            if (!atomic_load(v27))
              sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
            {
              v62 = v81;
              v63 = v82;
              v64 = v83;
              if (v83)
              {
                v54 = (unint64_t *)(v83 - 16);
                if (*((_QWORD *)&v63 + 1))
                  v54 = (unint64_t *)*((_QWORD *)&v63 + 1);
                do
                  v55 = __ldxr(v54);
                while (__stxr(v55 + 1, v54));
              }
              sub_1DCC110F4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v62, *(int *)(a1 + 88), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
              sub_1DCAEEE78((uint64_t)&v62);
            }
            else
            {
              if (!atomic_load(v27))
                sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
              if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
              {
                v59 = v81;
                v60 = v82;
                v61 = v83;
                if (v83)
                {
                  v57 = (unint64_t *)(v83 - 16);
                  if (*((_QWORD *)&v60 + 1))
                    v57 = (unint64_t *)*((_QWORD *)&v60 + 1);
                  do
                    v58 = __ldxr(v57);
                  while (__stxr(v58 + 1, v57));
                }
                sub_1DCC11260((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59, *(int *)(a1 + 88), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
                sub_1DCAEEE78((uint64_t)&v59);
              }
            }
          }
        }
      }
    }
  }
  MEMORY[0x1DF0D1254](&v80, "vertex");
  if (&v80 == v6)
  {
    if ((v80 & 7) != 0)
    {
      v34 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
  }
  else
  {
    if ((*v6 & 7) != 0)
    {
      v32 = (unsigned int *)(*v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    *v6 = v80;
  }
  sub_1DCAEEFD4((_QWORD *)(a1 + 16));
  sub_1DCAEEE78((uint64_t)&v81);
}

void sub_1DCC108BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_1DCAEEE78((uint64_t)&a9);
  sub_1DCAEEE78(v9 - 128);
  _Unwind_Resume(a1);
}

void sub_1DCC109A4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __n128 v20[2];
  uint64_t v21;

  v21 = 0;
  memset(v20, 0, sizeof(v20));
  sub_1DCC14428((uint64_t)v20, (*(_DWORD *)a1 * a2));
  v6 = sub_1DCB24C90(a3);
  v7 = *(_OWORD *)(v6 + 16);
  v17 = *(_OWORD *)v6;
  v18 = v7;
  v8 = *(_QWORD *)(v6 + 32);
  v19 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 16);
    if (*((_QWORD *)&v18 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v18 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if ((_QWORD)v17)
  {
    v11 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        if (a2)
        {
          v14 = 0;
          do
          {
            sub_1DCAF0F78(a1);
            v15 = *(int *)(*((_QWORD *)a1 + 4) + 4 * v12);
            sub_1DCB8C6E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v17);
            v16 = v19;
            sub_1DCB8C6E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20);
            *(_QWORD *)(v21 + 8 * v13 + 8 * v14) = *(_QWORD *)(v16 + 8 * (v14 + v15 * a2));
            ++v14;
          }
          while (a2 != v14);
          v13 += v14;
          v11 = *(_QWORD *)a1;
        }
        ++v12;
      }
      while (v11 > v12);
    }
  }
  sub_1DCC14498((uint64_t *)a3, v20);
  sub_1DCAEEE78((uint64_t)&v17);
  sub_1DCAEEE78((uint64_t)v20);
}

void sub_1DCC10AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_1DCAEEE78((uint64_t)&a9);
  sub_1DCAEEE78((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1DCC10B18(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __n128 v24[2];
  uint64_t v25;

  v25 = 0;
  memset(v24, 0, sizeof(v24));
  sub_1DCB2525C((uint64_t)v24, (*(_DWORD *)a1 * a2));
  v6 = sub_1DCB23B80(a3);
  v7 = *(_OWORD *)(v6 + 16);
  v21 = *(_OWORD *)v6;
  v22 = v7;
  v8 = *(_QWORD *)(v6 + 32);
  v23 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 16);
    if (*((_QWORD *)&v22 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v22 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if ((_QWORD)v21)
  {
    v11 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        if (a2)
        {
          v14 = 0;
          v15 = 12 * v13;
          do
          {
            sub_1DCAF0F78(a1);
            v16 = *(int *)(*((_QWORD *)a1 + 4) + 4 * v12);
            sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v21);
            v17 = v23;
            sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v24);
            v18 = (uint64_t *)(v17 + 12 * (v14 + v16 * a2));
            v19 = v25 + v15;
            v20 = *v18;
            *(_DWORD *)(v19 + 8) = *((_DWORD *)v18 + 2);
            *(_QWORD *)v19 = v20;
            ++v14;
            v15 += 12;
          }
          while (a2 != v14);
          v13 += v14;
          v11 = *(_QWORD *)a1;
        }
        ++v12;
      }
      while (v11 > v12);
    }
  }
  sub_1DCB24508((uint64_t *)a3, v24);
  sub_1DCAEEE78((uint64_t)&v21);
  sub_1DCAEEE78((uint64_t)v24);
}

void sub_1DCC10C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_1DCAEEE78((uint64_t)&a9);
  sub_1DCAEEE78((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1DCC10CA0(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __n128 v19[2];
  uint64_t v20;

  v20 = 0;
  memset(v19, 0, sizeof(v19));
  sub_1DCB23B10((uint64_t)v19, (*(_DWORD *)a1 * a2));
  v6 = sub_1DCC14A5C(a3);
  v7 = *(_OWORD *)(v6 + 16);
  v16 = *(_OWORD *)v6;
  v17 = v7;
  v8 = *(_QWORD *)(v6 + 32);
  v18 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 16);
    if (*((_QWORD *)&v17 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v17 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if ((_QWORD)v16)
  {
    v11 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        if (a2)
        {
          v14 = 0;
          do
          {
            sub_1DCAF0F78(a1);
            v15 = *(int *)(*((_QWORD *)a1 + 4) + 4 * v12);
            sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
            LODWORD(v15) = *(_DWORD *)(v18 + 4 * (v14 + v15 * a2));
            sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
            *(_DWORD *)(v20 + 4 * v13 + 4 * v14++) = v15;
          }
          while (a2 != v14);
          v13 += v14;
          v11 = *(_QWORD *)a1;
        }
        ++v12;
      }
      while (v11 > v12);
    }
  }
  sub_1DCC14AC4((uint64_t *)a3, v19);
  sub_1DCAEEE78((uint64_t)&v16);
  sub_1DCAEEE78((uint64_t)v19);
}

void sub_1DCC10DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_1DCAEEE78((uint64_t)&a9);
  sub_1DCAEEE78((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1DCC10E0C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __n128 v21[2];
  uint64_t v22;

  v22 = 0;
  memset(v21, 0, sizeof(v21));
  sub_1DCAEEB34((uint64_t)v21, (*(_DWORD *)a1 * a2));
  v6 = sub_1DCAEEACC(a3);
  v7 = *(_OWORD *)(v6 + 16);
  v18 = *(_OWORD *)v6;
  v19 = v7;
  v8 = *(_QWORD *)(v6 + 32);
  v20 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 16);
    if (*((_QWORD *)&v19 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v19 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if ((_QWORD)v18)
  {
    v11 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        if (a2)
        {
          v14 = 0;
          v15 = 16 * v13;
          do
          {
            sub_1DCAF0F78(a1);
            v16 = *(int *)(*((_QWORD *)a1 + 4) + 4 * v12);
            sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v18);
            v17 = v20;
            sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v21);
            *(_OWORD *)(v22 + v15) = *(_OWORD *)(v17 + 16 * (v14 + v16 * a2));
            ++v14;
            v15 += 16;
          }
          while (a2 != v14);
          v13 += v14;
          v11 = *(_QWORD *)a1;
        }
        ++v12;
      }
      while (v11 > v12);
    }
  }
  sub_1DCB435E8((uint64_t *)a3, v21);
  sub_1DCAEEE78((uint64_t)&v18);
  sub_1DCAEEE78((uint64_t)v21);
}

void sub_1DCC10F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_1DCAEEE78((uint64_t)&a9);
  sub_1DCAEEE78((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1DCC10F80(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __n128 v20[2];
  uint64_t v21;

  v21 = 0;
  memset(v20, 0, sizeof(v20));
  sub_1DCB43828((uint64_t)v20, (*(_DWORD *)a1 * a2));
  v6 = sub_1DCB41744(a3);
  v7 = *(_OWORD *)(v6 + 16);
  v17 = *(_OWORD *)v6;
  v18 = v7;
  v8 = *(_QWORD *)(v6 + 32);
  v19 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 16);
    if (*((_QWORD *)&v18 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v18 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if ((_QWORD)v17)
  {
    v11 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        if (a2)
        {
          v14 = 0;
          do
          {
            sub_1DCAF0F78(a1);
            v15 = *(int *)(*((_QWORD *)a1 + 4) + 4 * v12);
            sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v17);
            v16 = *(_DWORD *)(v19 + 4 * (v14 + v15 * a2));
            sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20);
            *(_DWORD *)(v21 + 4 * v13 + 4 * v14++) = v16;
          }
          while (a2 != v14);
          v13 += v14;
          v11 = *(_QWORD *)a1;
        }
        ++v12;
      }
      while (v11 > v12);
    }
  }
  sub_1DCB43898((uint64_t *)a3, v20);
  sub_1DCAEEE78((uint64_t)&v17);
  sub_1DCAEEE78((uint64_t)v20);
}

void sub_1DCC110C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_1DCAEEE78((uint64_t)&a9);
  sub_1DCAEEE78((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1DCC110F4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __n128 v19[2];
  uint64_t v20;

  v20 = 0;
  memset(v19, 0, sizeof(v19));
  sub_1DCC14DB0((uint64_t)v19, (*(_DWORD *)a1 * a2));
  v6 = sub_1DCB417AC(a3);
  v7 = *(_OWORD *)(v6 + 16);
  v16 = *(_OWORD *)v6;
  v17 = v7;
  v8 = *(_QWORD *)(v6 + 32);
  v18 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 16);
    if (*((_QWORD *)&v17 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v17 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if ((_QWORD)v16)
  {
    v11 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        if (a2)
        {
          v14 = 0;
          do
          {
            sub_1DCAF0F78(a1);
            v15 = *(int *)(*((_QWORD *)a1 + 4) + 4 * v12);
            sub_1DCB450D8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
            LODWORD(v15) = *(_DWORD *)(v18 + 4 * (v14 + v15 * a2));
            sub_1DCB450D8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
            *(_DWORD *)(v20 + 4 * v13 + 4 * v14++) = v15;
          }
          while (a2 != v14);
          v13 += v14;
          v11 = *(_QWORD *)a1;
        }
        ++v12;
      }
      while (v11 > v12);
    }
  }
  sub_1DCC14E20((uint64_t *)a3, v19);
  sub_1DCAEEE78((uint64_t)&v16);
  sub_1DCAEEE78((uint64_t)v19);
}

void sub_1DCC11230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_1DCAEEE78((uint64_t)&a9);
  sub_1DCAEEE78((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1DCC11260(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __n128 v19[2];
  uint64_t v20;

  v20 = 0;
  memset(v19, 0, sizeof(v19));
  sub_1DCB4369C((uint64_t)v19, (*(_DWORD *)a1 * a2));
  v6 = sub_1DCB4370C(a3);
  v7 = *(_OWORD *)(v6 + 16);
  v16 = *(_OWORD *)v6;
  v17 = v7;
  v8 = *(_QWORD *)(v6 + 32);
  v18 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 16);
    if (*((_QWORD *)&v17 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v17 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if ((_QWORD)v16)
  {
    v11 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        if (a2)
        {
          v14 = 0;
          do
          {
            sub_1DCAF0F78(a1);
            v15 = *(int *)(*((_QWORD *)a1 + 4) + 4 * v12);
            sub_1DCB46434((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
            LOWORD(v15) = *(_WORD *)(v18 + 2 * (v14 + v15 * a2));
            sub_1DCB46434((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
            *(_WORD *)(v20 + 2 * v13 + 2 * v14++) = v15;
          }
          while (a2 != v14);
          v13 += v14;
          v11 = *(_QWORD *)a1;
        }
        ++v12;
      }
      while (v11 > v12);
    }
  }
  sub_1DCB43774((uint64_t *)a3, v19);
  sub_1DCAEEE78((uint64_t)&v16);
  sub_1DCAEEE78((uint64_t)v19);
}

void sub_1DCC1139C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_1DCAEEE78((uint64_t)&a9);
  sub_1DCAEEE78((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1DCC113CC(int *a1, unsigned int a2)
{
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  char *v53;

  v53 = 0;
  v51 = 0u;
  v52 = 0u;
  v3 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)sub_1DCB23B10((uint64_t)&v51, a2);
  sub_1DCAF0F78(v3);
  v4 = v53;
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v51);
  v5 = &v53[4 * v51] - v4;
  if (v5 >= 1)
    bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  v6 = (unint64_t *)MEMORY[0x1E0DF2618];
  if (!atomic_load(MEMORY[0x1E0DF2618]))
    sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    goto LABEL_9;
  if (!atomic_load(v6))
    sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
LABEL_9:
    v48 = v51;
    v49 = v52;
    v50 = v53;
    if (v53)
    {
      v9 = (unint64_t *)(v53 - 16);
      if (*((_QWORD *)&v49 + 1))
        v9 = (unint64_t *)*((_QWORD *)&v49 + 1);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_1DCC109A4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v48, a1[22], (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    sub_1DCAEEE78((uint64_t)&v48);
  }
  else
  {
    if (!atomic_load(v6))
      sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
      goto LABEL_21;
    if (!atomic_load(v6))
      sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    {
LABEL_21:
      v45 = v51;
      v46 = v52;
      v47 = v53;
      if (v53)
      {
        v13 = (unint64_t *)(v53 - 16);
        if (*((_QWORD *)&v46 + 1))
          v13 = (unint64_t *)*((_QWORD *)&v46 + 1);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      sub_1DCC10B18((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v45, a1[22], (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
      sub_1DCAEEE78((uint64_t)&v45);
    }
    else
    {
      if (!atomic_load(v6))
        sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
      {
        v42 = v51;
        v43 = v52;
        v44 = v53;
        if (v53)
        {
          v16 = (unint64_t *)(v53 - 16);
          if (*((_QWORD *)&v43 + 1))
            v16 = (unint64_t *)*((_QWORD *)&v43 + 1);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        sub_1DCC10CA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v42, a1[22], (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
        sub_1DCAEEE78((uint64_t)&v42);
      }
      else
      {
        if (!atomic_load(v6))
          sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
        {
          v39 = v51;
          v40 = v52;
          v41 = v53;
          if (v53)
          {
            v19 = (unint64_t *)(v53 - 16);
            if (*((_QWORD *)&v40 + 1))
              v19 = (unint64_t *)*((_QWORD *)&v40 + 1);
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
          }
          sub_1DCC10E0C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v39, a1[22], (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
          sub_1DCAEEE78((uint64_t)&v39);
        }
        else
        {
          if (!atomic_load(v6))
            sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
          {
            v36 = v51;
            v37 = v52;
            v38 = v53;
            if (v53)
            {
              v22 = (unint64_t *)(v53 - 16);
              if (*((_QWORD *)&v37 + 1))
                v22 = (unint64_t *)*((_QWORD *)&v37 + 1);
              do
                v23 = __ldxr(v22);
              while (__stxr(v23 + 1, v22));
            }
            sub_1DCC10F80((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v36, a1[22], (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
            sub_1DCAEEE78((uint64_t)&v36);
          }
          else
          {
            if (!atomic_load(v6))
              sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
            {
              v33 = v51;
              v34 = v52;
              v35 = v53;
              if (v53)
              {
                v25 = (unint64_t *)(v53 - 16);
                if (*((_QWORD *)&v34 + 1))
                  v25 = (unint64_t *)*((_QWORD *)&v34 + 1);
                do
                  v26 = __ldxr(v25);
                while (__stxr(v26 + 1, v25));
              }
              sub_1DCC110F4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v33, a1[22], (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
              sub_1DCAEEE78((uint64_t)&v33);
            }
            else
            {
              if (!atomic_load(v6))
                sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
              if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
              {
                v30 = v51;
                v31 = v52;
                v32 = v53;
                if (v53)
                {
                  v28 = (unint64_t *)(v53 - 16);
                  if (*((_QWORD *)&v31 + 1))
                    v28 = (unint64_t *)*((_QWORD *)&v31 + 1);
                  do
                    v29 = __ldxr(v28);
                  while (__stxr(v29 + 1, v28));
                }
                sub_1DCC11260((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v30, a1[22], (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
                sub_1DCAEEE78((uint64_t)&v30);
              }
            }
          }
        }
      }
    }
  }
  sub_1DCAEEE78((uint64_t)&v51);
}

void sub_1DCC11804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_1DCAEEE78((uint64_t)&a9);
  sub_1DCAEEE78(v9 - 80);
  _Unwind_Resume(a1);
}

void sub_1DCC118C4(unint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a4, uint64_t *a5)
{
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t i;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t j;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  int v60;

  v9 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
  v60 = 0;
  *(_QWORD *)&v57 = &v60;
  sub_1DCB267B0(a1, v10, (_DWORD **)&v57);
  sub_1DCB424DC(a5, (uint64_t)a4);
  v11 = *a2;
  if (a2[1] != *a2)
  {
    v12 = 0;
    v13 = -1;
    v56 = v9;
    do
    {
      v14 = v11 + 96 * v12;
      MEMORY[0x1DF0D1254](&v57, "vertex");
      v15 = *(_QWORD *)(v14 + 80);
      v16 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
      if ((v57 & 7) != 0)
      {
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      v18 = v15 & 0xFFFFFFFFFFFFFFF8;
      v19 = *a2;
      if ((unsigned int *)v18 == v16)
      {
        if (*(_QWORD *)(v19 + 96 * v12 + 16))
        {
          v59 = 0;
          v57 = 0u;
          v58 = 0u;
          sub_1DCB23B10((uint64_t)&v57, *(unsigned int *)a4);
          if (*(_QWORD *)a4)
          {
            v35 = 0;
            do
            {
              sub_1DCAF0F78(a4);
              v36 = *(int *)(*((_QWORD *)a4 + 4) + 4 * v35);
              v37 = *a2;
              sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(*a2 + 96 * v12 + 16));
              LODWORD(v37) = *(_DWORD *)(*(_QWORD *)(v37 + 96 * v12 + 48) + 4 * v36);
              sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v57);
              *(_DWORD *)(v59 + 4 * v35) = v37;
              v39 = *a5;
              v38 = a5[1];
              sub_1DCAF0F78(v56);
              v40 = -858993459 * ((unint64_t)(v38 - v39) >> 3);
              v9 = v56;
              *(_DWORD *)(*((_QWORD *)v56 + 4) + 4 * v12) = v40;
              ++v35;
            }
            while (*(_QWORD *)a4 > v35);
          }
          sub_1DCB424DC(a5, (uint64_t)&v57);
          sub_1DCAEEE78((uint64_t)&v57);
        }
        else
        {
          sub_1DCAF0F78(v9);
          *(_DWORD *)(*((_QWORD *)v9 + 4) + 4 * v12) = 0;
        }
      }
      else
      {
        v20 = v19 + 96 * v12;
        MEMORY[0x1DF0D1254](&v57, "uniform");
        v21 = *(_QWORD *)(v20 + 80);
        v22 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
        if ((v57 & 7) != 0)
        {
          do
            v23 = __ldxr(v22);
          while (__stlxr(v23 - 2, v22));
        }
        v24 = v21 & 0xFFFFFFFFFFFFFFF8;
        v25 = *a2;
        if ((unsigned int *)v24 == v22)
        {
          if (*(_QWORD *)(v25 + 96 * v12 + 16))
          {
            v55 = v13;
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            sub_1DCB23B10((uint64_t)&v57, *(unsigned int *)a4);
            if (*(_QWORD *)a3)
            {
              v41 = 0;
              LODWORD(i) = 0;
              do
              {
                v43 = 0;
                for (i = (int)i; ; ++i)
                {
                  sub_1DCAF0F78(a3);
                  if (v43 >= *(_DWORD *)(*((_QWORD *)a3 + 4) + 4 * v41))
                    break;
                  v44 = *a2;
                  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(*a2 + 96 * v12 + 16));
                  LODWORD(v44) = *(_DWORD *)(*(_QWORD *)(v44 + 96 * v12 + 48) + 4 * v41);
                  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v57);
                  *(_DWORD *)(v59 + 4 * i) = v44;
                  ++v43;
                }
                ++v41;
              }
              while (*(_QWORD *)a3 > v41);
            }
            v46 = *a5;
            v45 = a5[1];
            v9 = v56;
            sub_1DCAF0F78(v56);
            *(_DWORD *)(*((_QWORD *)v56 + 4) + 4 * v12) = -858993459 * ((unint64_t)(v45 - v46) >> 3);
            sub_1DCB424DC(a5, (uint64_t)&v57);
            sub_1DCAEEE78((uint64_t)&v57);
            v13 = v55;
          }
          else
          {
            if (v13 == -1)
            {
              v59 = 0;
              v57 = 0u;
              v58 = 0u;
              sub_1DCB23B10((uint64_t)&v57, *(unsigned int *)a4);
              if (*(_QWORD *)a3)
              {
                v47 = 0;
                LODWORD(j) = 0;
                do
                {
                  v49 = 0;
                  for (j = (int)j; ; ++j)
                  {
                    sub_1DCAF0F78(a3);
                    if (v49 >= *(_DWORD *)(*((_QWORD *)a3 + 4) + 4 * v47))
                      break;
                    sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v57);
                    *(_DWORD *)(v59 + 4 * j) = v47;
                    ++v49;
                  }
                  ++v47;
                }
                while (*(_QWORD *)a3 > v47);
              }
              sub_1DCB424DC(a5, (uint64_t)&v57);
              v51 = *a5;
              v50 = a5[1];
              sub_1DCAEEE78((uint64_t)&v57);
              v13 = -1 - 858993459 * ((unint64_t)(v50 - v51) >> 3);
            }
            v9 = v56;
            sub_1DCAF0F78(v56);
            *(_DWORD *)(*((_QWORD *)v56 + 4) + 4 * v12) = v13;
          }
        }
        else
        {
          v26 = v25 + 96 * v12;
          MEMORY[0x1DF0D1254](&v57, "constant");
          v27 = *(_QWORD *)(v26 + 80);
          v28 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
          if ((v57 & 7) != 0)
          {
            do
              v29 = __ldxr(v28);
            while (__stlxr(v29 - 2, v28));
          }
          if ((unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8) != v28)
          {
            v30 = *a2 + 96 * v12;
            MEMORY[0x1DF0D1254](&v57, "faceVarying");
            v31 = *(_QWORD *)(v30 + 80);
            v32 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
            if ((v57 & 7) != 0)
            {
              do
                v33 = __ldxr(v32);
              while (__stlxr(v33 - 2, v32));
            }
            if ((unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8) == v32)
            {
              if (*(_QWORD *)(*a2 + 96 * v12 + 16))
              {
                v34 = -858993459 * ((unint64_t)(a5[1] - *a5) >> 3);
                sub_1DCAF0F78(v9);
                *(_DWORD *)(*((_QWORD *)v9 + 4) + 4 * v12) = v34;
                sub_1DCB424DC(a5, *a2 + 96 * v12 + 16);
              }
              else
              {
                v59 = 0;
                v57 = 0u;
                v58 = 0u;
                sub_1DCB23B10((uint64_t)&v57, *(unsigned int *)a4);
                if (*(_QWORD *)a4)
                {
                  v52 = 0;
                  do
                  {
                    sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v57);
                    *(_DWORD *)(v59 + 4 * v52) = v52;
                    ++v52;
                  }
                  while (*(_QWORD *)a4 > v52);
                }
                v54 = *a5;
                v53 = a5[1];
                sub_1DCAF0F78(v9);
                *(_DWORD *)(*((_QWORD *)v9 + 4) + 4 * v12) = -858993459 * ((unint64_t)(v53 - v54) >> 3);
                sub_1DCB424DC(a5, *a2 + 96 * v12 + 16);
                sub_1DCAEEE78((uint64_t)&v57);
              }
            }
          }
        }
      }
      ++v12;
      v11 = *a2;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5) > v12);
  }
}

void sub_1DCC11E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1DCAEEE78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCC11E78(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, unint64_t *a2, _QWORD *a3, uint64_t **a4, unint64_t a5, int *a6)
{
  unint64_t v6;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t i;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  uint64_t k;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t j;
  int v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v63;
  unint64_t v64;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v71;
  _OWORD v73[2];
  uint64_t v74;
  _OWORD v75[2];
  uint64_t v76;
  _OWORD v77[2];
  uint64_t v78;
  _OWORD v79[2];
  int *v80;

  v6 = a5;
  v10 = 0xCCCCCCCCCCCCCCCDLL * (a4[1] - *a4);
  v11 = **a4;
  v64 = (int)v10;
  LODWORD(v77[0]) = 0;
  *(_QWORD *)&v79[0] = v77;
  sub_1DCB267B0(a2, (int)v10 * a5, (_DWORD **)v79);
  sub_1DCAF0F78(a1);
  v12 = (void *)*((_QWORD *)a1 + 4);
  sub_1DCAF0F78(a1);
  v13 = *((_QWORD *)a1 + 4) + 4 * *(_QWORD *)a1 - (_QWORD)v12;
  if (v13 >= 1)
    memset(v12, 255, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
  v15 = a2 + 4;
  v14 = (void *)a2[4];
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
  v16 = a2[4] + 4 * *a2 - (_QWORD)v14;
  if (v16 >= 1)
    memset(v14, 255, 4 * (((unint64_t)v16 >> 2) - ((unint64_t)v16 > 3)) + 4);
  v80 = 0;
  memset(v79, 0, sizeof(v79));
  sub_1DCB23B10((uint64_t)v79, v10);
  v78 = 0;
  memset(v77, 0, sizeof(v77));
  sub_1DCB23B10((uint64_t)v77, v10);
  v17 = (int)v10 + 1;
  v76 = 0;
  memset(v75, 0, sizeof(v75));
  sub_1DCB23B10((uint64_t)v75, (v10 + 1));
  v18 = v11 << 32;
  *a6 = 0;
  if (v11 << 32)
  {
    v19 = 0;
    v65 = a1;
    v66 = v10 << 32;
    v20 = (int)v11;
    v21 = (int)v10 - 1;
    v70 = v17;
    v71 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3;
    if (v64 <= 1)
      v22 = 1;
    else
      v22 = v64;
    v23 = 2;
    if (v64 > 2)
      v23 = v64;
    v68 = v23;
    v69 = a3 + 4;
    if (v20 <= 1)
      v20 = 1;
    v63 = v20;
    v61 = v6;
    v60 = 4 * v17;
    do
    {
      if (v66)
      {
        v24 = 0;
        v25 = 4;
        do
        {
          v26 = *(_DWORD *)((*a4)[v25] + 4 * v19);
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
          v80[v24++] = v26;
          v25 += 5;
        }
        while (v22 != v24);
      }
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
      v27 = *v80;
      sub_1DCAF0F78(v65);
      v28 = v27;
      *(_DWORD *)(*((_QWORD *)v65 + 4) + 4 * v19) = -1;
      if (v66)
      {
        for (i = 0; i != v22; ++i)
        {
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
          v30 = *(_DWORD *)(*v15 + 4 * v64 * v27 + 4 * i);
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v77);
          *(_DWORD *)(v78 + 4 * i) = v30;
        }
      }
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v77);
      v31 = *(_DWORD *)(v78 + 4 * v21);
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
      v67 = (int)v64 * (uint64_t)v27;
      if (*(_DWORD *)(*v15 + 4 * v67) == -1)
      {
        if (v66)
        {
          for (j = 0; j != v22; ++j)
          {
            if (v21 == j)
            {
              sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
              *(_DWORD *)(*v15 + 4 * (v21 + v67)) = -1;
            }
            else
            {
              sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
              v44 = v80[j + 1];
              sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
              *(_DWORD *)(*v15 + 4 * (j + v67)) = v44;
            }
          }
        }
        sub_1DCAF0F78(v65);
        *(_DWORD *)(*((_QWORD *)v65 + 4) + 4 * v19) = v28;
        ++*a6;
      }
      else
      {
        v32 = v27;
        v33 = 0;
        do
        {
          if (v21 == v33)
          {
            sub_1DCAF0F78(v65);
            *(_DWORD *)(*((_QWORD *)v65 + 4) + 4 * v19) = v32;
            goto LABEL_54;
          }
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
          v34 = v80[v33 + 1];
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v77);
          v35 = *(_DWORD *)(v78 + 4 * v33++);
          v36 = v34 == v35;
          v32 = v27;
        }
        while (v36);
        v37 = v31;
        if (v31 < 0)
        {
          v38 = -1;
        }
        else
        {
          while (1)
          {
            v38 = v37;
            if (v70)
            {
              for (k = 0; k != v70; ++k)
              {
                sub_1DCAF0F78(v71);
                v40 = *(_DWORD *)(*v69 + v60 * v38 + 4 * k);
                sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v75);
                *(_DWORD *)(v76 + 4 * k) = v40;
              }
            }
            sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v75);
            if (v66 < 0x100000001)
              break;
            v37 = *(_DWORD *)(v76 + 4 * v64);
            v41 = 1;
            while (1)
            {
              sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
              v42 = v80[v41];
              sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v75);
              if (v42 != *(_DWORD *)(v76 + 4 * v41))
                break;
              if (v68 == ++v41)
                goto LABEL_45;
            }
            if (v37 < 0)
              goto LABEL_46;
          }
          v38 = v31;
LABEL_45:
          sub_1DCAF0F78(v65);
          *(_DWORD *)(*((_QWORD *)v65 + 4) + 4 * v19) = v38 + v61;
        }
LABEL_46:
        sub_1DCAF0F78(v65);
        if (*(_DWORD *)(*((_QWORD *)v65 + 4) + 4 * v19) == -1)
        {
          v45 = *(int *)v71;
          if (v31 < 0)
          {
            sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
            v48 = v21 + v67;
            v46 = a2 + 4;
            v47 = v70;
          }
          else
          {
            sub_1DCAF0F78(v71);
            v46 = v69;
            v47 = v70;
            v48 = v47 + v47 * v38 - 1;
          }
          v49 = v45 / v47;
          *(_DWORD *)(*v46 + 4 * v48) = v45 / v47;
          sub_1DCAF0F78(v65);
          *(_DWORD *)(*((_QWORD *)v65 + 4) + 4 * v19) = v49 + v61;
          if (v66)
          {
            v50 = 0;
            v51 = v22;
            do
            {
              sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
              sub_1DCB45970((uint64_t)v71, &v80[v50++]);
              --v51;
            }
            while (v51);
          }
          LODWORD(v73[0]) = -1;
          sub_1DCC0A4F8((uint64_t)v71, v73);
        }
      }
LABEL_54:
      ++v19;
    }
    while (v19 != v63);
    v18 = *a6;
    v6 = v61;
    a1 = v65;
  }
  if (v18 != v6)
  {
    v74 = 0;
    memset(v73, 0, sizeof(v73));
    sub_1DCB23B10((uint64_t)v73, v6);
    if (v6)
    {
      v52 = 0;
      v53 = 0;
      v54 = 0;
      do
      {
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        if (*(_DWORD *)(*v15 + v52) != -1)
        {
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v73);
          *(_DWORD *)(v74 + 4 * v53) = v54++;
        }
        ++v53;
        v52 += 4 * v64;
      }
      while (v6 != v53);
    }
    if (*(_QWORD *)a1)
    {
      v55 = 0;
      do
      {
        sub_1DCAF0F78(a1);
        v56 = *(int *)(*((_QWORD *)a1 + 4) + 4 * v55);
        if (v56 >= v6)
        {
          sub_1DCAF0F78(a1);
          v58 = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v55);
          v59 = *a6;
          sub_1DCAF0F78(a1);
          *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v55) = v58 - v6 + v59;
        }
        else
        {
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v73);
          v57 = *(_DWORD *)(v74 + 4 * v56);
          sub_1DCAF0F78(a1);
          *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v55) = v57;
        }
        ++v55;
      }
      while (*(_QWORD *)a1 > v55);
    }
    sub_1DCAEEE78((uint64_t)v73);
  }
  sub_1DCAEEE78((uint64_t)v75);
  sub_1DCAEEE78((uint64_t)v77);
  sub_1DCAEEE78((uint64_t)v79);
}

void sub_1DCC1253C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_1DCAEEE78((uint64_t)&a29);
  sub_1DCAEEE78(v29 - 176);
  sub_1DCAEEE78(v29 - 128);
  _Unwind_Resume(a1);
}

void sub_1DCC125D8(uint64_t a1, int a2, int a3, unsigned int a4, unint64_t a5, __int128 *a6, __int128 *a7)
{
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t *v17;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  __int128 v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  __int128 v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  __int128 v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;

  MEMORY[0x1DF0D1254](&v126, "constant");
  v14 = *(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8;
  v15 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFFFF8);
  if ((v126 & 7) != 0)
  {
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((unsigned int *)v14 == v15)
  {
    sub_1DCC113CC((int *)a1, a4);
  }
  else
  {
    v17 = (unint64_t *)MEMORY[0x1E0DF2618];
    if (!atomic_load(MEMORY[0x1E0DF2618]))
      sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
      goto LABEL_10;
    if (!atomic_load(v17))
      sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    {
LABEL_10:
      v20 = a6[1];
      v123 = *a6;
      v124 = v20;
      v21 = *((_QWORD *)a6 + 4);
      v125 = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 - 16);
        if (*((_QWORD *)&v124 + 1))
          v22 = (unint64_t *)*((_QWORD *)&v124 + 1);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = a7[1];
      v120 = *a7;
      v121 = v24;
      v25 = *((_QWORD *)a7 + 4);
      v122 = v25;
      if (v25)
      {
        v26 = (unint64_t *)(v25 - 16);
        if (*((_QWORD *)&v121 + 1))
          v26 = (unint64_t *)*((_QWORD *)&v121 + 1);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      sub_1DCC12D98((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v123, (unint64_t *)&v120, a3, a4, a2, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)a1, *(_DWORD *)(a1 + 88));
      sub_1DCAEEE78((uint64_t)&v120);
      sub_1DCAEEE78((uint64_t)&v123);
    }
    else
    {
      if (!atomic_load(v17))
        sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_29;
      if (!atomic_load(v17))
        sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_29;
      if (!atomic_load(v17))
        sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
      {
LABEL_29:
        v31 = a6[1];
        v117 = *a6;
        v118 = v31;
        v32 = *((_QWORD *)a6 + 4);
        v119 = v32;
        if (v32)
        {
          v33 = (unint64_t *)(v32 - 16);
          if (*((_QWORD *)&v118 + 1))
            v33 = (unint64_t *)*((_QWORD *)&v118 + 1);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        v35 = a7[1];
        v114 = *a7;
        v115 = v35;
        v36 = *((_QWORD *)a7 + 4);
        v116 = v36;
        if (v36)
        {
          v37 = (unint64_t *)(v36 - 16);
          if (*((_QWORD *)&v115 + 1))
            v37 = (unint64_t *)*((_QWORD *)&v115 + 1);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        sub_1DCC130CC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v117, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v114, a3, a4, a2, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)a1, *(_DWORD *)(a1 + 88));
        sub_1DCAEEE78((uint64_t)&v114);
        sub_1DCAEEE78((uint64_t)&v117);
      }
      else
      {
        if (!atomic_load(v17))
          sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
        {
          v40 = a6[1];
          v111 = *a6;
          v112 = v40;
          v41 = *((_QWORD *)a6 + 4);
          v113 = v41;
          if (v41)
          {
            v42 = (unint64_t *)(v41 - 16);
            if (*((_QWORD *)&v112 + 1))
              v42 = (unint64_t *)*((_QWORD *)&v112 + 1);
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          v44 = a7[1];
          v108 = *a7;
          v109 = v44;
          v45 = *((_QWORD *)a7 + 4);
          v110 = v45;
          if (v45)
          {
            v46 = (unint64_t *)(v45 - 16);
            if (*((_QWORD *)&v109 + 1))
              v46 = (unint64_t *)*((_QWORD *)&v109 + 1);
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          sub_1DCC13430((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v111, (unint64_t *)&v108, a3, a4, a2, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)a1, *(_DWORD *)(a1 + 88));
          sub_1DCAEEE78((uint64_t)&v108);
          sub_1DCAEEE78((uint64_t)&v111);
        }
        else
        {
          if (!atomic_load(v17))
            sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
          {
            v49 = a6[1];
            v105 = *a6;
            v106 = v49;
            v50 = *((_QWORD *)a6 + 4);
            v107 = v50;
            if (v50)
            {
              v51 = (unint64_t *)(v50 - 16);
              if (*((_QWORD *)&v106 + 1))
                v51 = (unint64_t *)*((_QWORD *)&v106 + 1);
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
            }
            v53 = a7[1];
            v102 = *a7;
            v103 = v53;
            v54 = *((_QWORD *)a7 + 4);
            v104 = v54;
            if (v54)
            {
              v55 = (unint64_t *)(v54 - 16);
              if (*((_QWORD *)&v103 + 1))
                v55 = (unint64_t *)*((_QWORD *)&v103 + 1);
              do
                v56 = __ldxr(v55);
              while (__stxr(v56 + 1, v55));
            }
            sub_1DCC13764((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v105, (unint64_t *)&v102, a3, a4, a2, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)a1, *(_DWORD *)(a1 + 88));
            sub_1DCAEEE78((uint64_t)&v102);
            sub_1DCAEEE78((uint64_t)&v105);
          }
          else
          {
            if (!atomic_load(v17))
              sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
            {
              v58 = a6[1];
              v99 = *a6;
              v100 = v58;
              v59 = *((_QWORD *)a6 + 4);
              v101 = v59;
              if (v59)
              {
                v60 = (unint64_t *)(v59 - 16);
                if (*((_QWORD *)&v100 + 1))
                  v60 = (unint64_t *)*((_QWORD *)&v100 + 1);
                do
                  v61 = __ldxr(v60);
                while (__stxr(v61 + 1, v60));
              }
              v62 = a7[1];
              v96 = *a7;
              v97 = v62;
              v63 = *((_QWORD *)a7 + 4);
              v98 = v63;
              if (v63)
              {
                v64 = (unint64_t *)(v63 - 16);
                if (*((_QWORD *)&v97 + 1))
                  v64 = (unint64_t *)*((_QWORD *)&v97 + 1);
                do
                  v65 = __ldxr(v64);
                while (__stxr(v65 + 1, v64));
              }
              sub_1DCC13A98((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v99, (unint64_t *)&v96, a3, a4, a2, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)a1, *(_DWORD *)(a1 + 88));
              sub_1DCAEEE78((uint64_t)&v96);
              sub_1DCAEEE78((uint64_t)&v99);
            }
            else
            {
              if (!atomic_load(v17))
                sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
              if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
              {
                v67 = a6[1];
                v93 = *a6;
                v94 = v67;
                v68 = *((_QWORD *)a6 + 4);
                v95 = v68;
                if (v68)
                {
                  v69 = (unint64_t *)(v68 - 16);
                  if (*((_QWORD *)&v94 + 1))
                    v69 = (unint64_t *)*((_QWORD *)&v94 + 1);
                  do
                    v70 = __ldxr(v69);
                  while (__stxr(v70 + 1, v69));
                }
                v71 = a7[1];
                v90 = *a7;
                v91 = v71;
                v72 = *((_QWORD *)a7 + 4);
                v92 = v72;
                if (v72)
                {
                  v73 = (unint64_t *)(v72 - 16);
                  if (*((_QWORD *)&v91 + 1))
                    v73 = (unint64_t *)*((_QWORD *)&v91 + 1);
                  do
                    v74 = __ldxr(v73);
                  while (__stxr(v74 + 1, v73));
                }
                sub_1DCC13DC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v93, (unint64_t *)&v90, a3, a4, a2, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)a1, *(_DWORD *)(a1 + 88));
                sub_1DCAEEE78((uint64_t)&v90);
                sub_1DCAEEE78((uint64_t)&v93);
              }
              else
              {
                if (!atomic_load(v17))
                  sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
                if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
                {
                  v76 = a6[1];
                  v87 = *a6;
                  v88 = v76;
                  v77 = *((_QWORD *)a6 + 4);
                  v89 = v77;
                  if (v77)
                  {
                    v78 = (unint64_t *)(v77 - 16);
                    if (*((_QWORD *)&v88 + 1))
                      v78 = (unint64_t *)*((_QWORD *)&v88 + 1);
                    do
                      v79 = __ldxr(v78);
                    while (__stxr(v79 + 1, v78));
                  }
                  v80 = a7[1];
                  v84 = *a7;
                  v85 = v80;
                  v81 = *((_QWORD *)a7 + 4);
                  v86 = v81;
                  if (v81)
                  {
                    v82 = (unint64_t *)(v81 - 16);
                    if (*((_QWORD *)&v85 + 1))
                      v82 = (unint64_t *)*((_QWORD *)&v85 + 1);
                    do
                      v83 = __ldxr(v82);
                    while (__stxr(v83 + 1, v82));
                  }
                  sub_1DCC140F4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v87, (unint64_t *)&v84, a3, a4, a2, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)a1, *(_DWORD *)(a1 + 88));
                  sub_1DCAEEE78((uint64_t)&v84);
                  sub_1DCAEEE78((uint64_t)&v87);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1DCC12C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_1DCAEEE78((uint64_t)&a9);
  sub_1DCAEEE78((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1DCC12D98(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, unint64_t *a2, int a3, int a4, int a5, unint64_t a6, pxrInternal__aapl__pxrReserved__::VtValue *a7, int a8)
{
  int v8;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  pxrInternal__aapl__pxrReserved__::VtValue *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __n128 v47[2];
  uint64_t v48;

  v8 = a8;
  v48 = 0;
  memset(v47, 0, sizeof(v47));
  sub_1DCC14428((uint64_t)v47, (a4 * a8));
  v15 = sub_1DCB24C90(a7);
  v16 = *(_OWORD *)(v15 + 16);
  v44 = *(_OWORD *)v15;
  v45 = v16;
  v17 = *(_QWORD *)(v15 + 32);
  v46 = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 - 16);
    if (*((_QWORD *)&v45 + 1))
      v18 = (unint64_t *)*((_QWORD *)&v45 + 1);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (!(_QWORD)v44)
  {
    sub_1DCC14498((uint64_t *)a7, v47);
    goto LABEL_10;
  }
  v43 = v8;
  if (*(_QWORD *)a1 < a6)
  {
LABEL_7:
    v20 = a6 + 1;
    if (v20 <= *a2)
    {
      v29 = 0;
      v42 = a5;
      v30 = v8;
      v31 = v8 * a3;
      while (1)
      {
        v32 = a2;
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        if (v8 >= 1)
          break;
LABEL_34:
        ++v29;
        a2 = v32;
        v31 += v30;
        v8 = v43;
        if (*v32 / v20 <= v29)
          goto LABEL_8;
      }
      v33 = *(_DWORD *)(a2[4] + 4 * (v42 + v29 * v20)) * v43;
      v34 = v30;
      v35 = v31;
      while ((v31 & 0x80000000) == 0
           && (v33 & 0x80000000) == 0
           && v47[0].n128_u64[0] > v35
           && (unint64_t)v44 > v33)
      {
        sub_1DCB8C6E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v44);
        v36 = v46;
        sub_1DCB8C6E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v47);
        *(_QWORD *)(v48 + 8 * v35++) = *(_QWORD *)(v36 + 8 * v33++);
        if (!--v34)
          goto LABEL_34;
      }
    }
    else
    {
LABEL_8:
      sub_1DCC14498((uint64_t *)a7, v47);
    }
    goto LABEL_10;
  }
  v21 = 0;
  v41 = 0;
  v39 = a5 - 1;
  v40 = v8;
  v38 = a3;
  v37 = a5;
  while (1)
  {
    sub_1DCAF0F78(a1);
    if (*(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v21 * a6) != -1)
      break;
LABEL_24:
    if (*(_QWORD *)a1 / a6 <= ++v21)
      goto LABEL_7;
  }
  v22 = a2;
  if (a5)
  {
    v23 = a7;
    sub_1DCAF0F78(a1);
    v24 = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * (v39 + v21 * a6));
  }
  else
  {
    v23 = a7;
    v24 = v21;
  }
  if (v8 < 1)
  {
LABEL_23:
    ++v41;
    a7 = v23;
    a2 = v22;
    v8 = v43;
    a3 = v38;
    a5 = v37;
    goto LABEL_24;
  }
  v25 = v24 * v43;
  v26 = v40;
  v27 = v41 * v43;
  while (((v41 * v43) & 0x80000000) == 0
       && (v25 & 0x80000000) == 0
       && v47[0].n128_u64[0] > v27
       && (unint64_t)v44 > v25)
  {
    sub_1DCB8C6E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v44);
    v28 = v46;
    sub_1DCB8C6E0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v47);
    *(_QWORD *)(v48 + 8 * v27++) = *(_QWORD *)(v28 + 8 * v25++);
    if (!--v26)
      goto LABEL_23;
  }
LABEL_10:
  sub_1DCAEEE78((uint64_t)&v44);
  sub_1DCAEEE78((uint64_t)v47);
}

void sub_1DCC13080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_1DCAEEE78((uint64_t)va);
  sub_1DCAEEE78((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1DCC130CC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, int a3, int a4, int a5, unint64_t a6, pxrInternal__aapl__pxrReserved__::VtValue *a7, int a8)
{
  int v8;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::VtValue *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v31;
  unint64_t v32;
  int v33;
  pxrInternal__aapl__pxrReserved__::VtValue *v34;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __n128 v54[2];
  uint64_t v55;

  v8 = a8;
  v55 = 0;
  memset(v54, 0, sizeof(v54));
  sub_1DCB2525C((uint64_t)v54, (a4 * a8));
  v15 = sub_1DCB23B80(a7);
  v16 = *(_OWORD *)(v15 + 16);
  v51 = *(_OWORD *)v15;
  v52 = v16;
  v17 = *(_QWORD *)(v15 + 32);
  v53 = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 - 16);
    if (*((_QWORD *)&v52 + 1))
      v18 = (unint64_t *)*((_QWORD *)&v52 + 1);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (!(_QWORD)v51)
  {
    sub_1DCB24508((uint64_t *)a7, v54);
    goto LABEL_10;
  }
  v50 = v8;
  if (*(_QWORD *)a1 < a6)
  {
LABEL_7:
    v20 = a6 + 1;
    if (v20 <= *(_QWORD *)a2)
    {
      v31 = a2;
      v32 = 0;
      v49 = v8;
      v33 = v8 * a3;
      while (1)
      {
        v34 = a7;
        v35 = v31;
        sub_1DCAF0F78(v31);
        if (v8 >= 1)
          break;
LABEL_34:
        ++v32;
        v31 = v35;
        v33 += v49;
        a7 = v34;
        v8 = v50;
        if (*(_QWORD *)v35 / v20 <= v32)
          goto LABEL_8;
      }
      v36 = v49;
      v37 = *(_DWORD *)(*((_QWORD *)v35 + 4) + 4 * (a5 + v32 * v20)) * v50;
      v38 = v33;
      while ((v33 & 0x80000000) == 0
           && (v37 & 0x80000000) == 0
           && v54[0].n128_u64[0] > v38
           && (unint64_t)v51 > v37)
      {
        sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v51);
        v39 = v53;
        sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v54);
        v40 = (uint64_t *)(v39 + 12 * v37);
        v41 = *v40;
        v42 = v55 + 12 * v38;
        *(_DWORD *)(v42 + 8) = *((_DWORD *)v40 + 2);
        *(_QWORD *)v42 = v41;
        ++v37;
        ++v38;
        if (!--v36)
          goto LABEL_34;
      }
    }
    else
    {
LABEL_8:
      sub_1DCB24508((uint64_t *)a7, v54);
    }
    goto LABEL_10;
  }
  v21 = 0;
  v48 = 0;
  v46 = a5 - 1;
  v47 = v8;
  v44 = a3;
  v43 = a5;
  v45 = a2;
  while (1)
  {
    sub_1DCAF0F78(a1);
    if (*(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v21 * a6) != -1)
      break;
LABEL_24:
    if (*(_QWORD *)a1 / a6 <= ++v21)
      goto LABEL_7;
  }
  v22 = a7;
  if (a5)
  {
    sub_1DCAF0F78(a1);
    v23 = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * (v46 + v21 * a6));
  }
  else
  {
    v23 = v21;
  }
  if (v8 < 1)
  {
LABEL_23:
    ++v48;
    a7 = v22;
    v8 = v50;
    a2 = v45;
    a3 = v44;
    a5 = v43;
    goto LABEL_24;
  }
  v24 = v23 * v50;
  v25 = v47;
  v26 = v48 * v50;
  while (((v48 * v50) & 0x80000000) == 0
       && (v24 & 0x80000000) == 0
       && v54[0].n128_u64[0] > v26
       && (unint64_t)v51 > v24)
  {
    sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v51);
    v27 = v53;
    sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v54);
    v28 = (uint64_t *)(v27 + 12 * v24);
    v29 = *v28;
    v30 = v55 + 12 * v26;
    *(_DWORD *)(v30 + 8) = *((_DWORD *)v28 + 2);
    *(_QWORD *)v30 = v29;
    ++v26;
    ++v24;
    if (!--v25)
      goto LABEL_23;
  }
LABEL_10:
  sub_1DCAEEE78((uint64_t)&v51);
  sub_1DCAEEE78((uint64_t)v54);
}

void sub_1DCC133E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_1DCAEEE78((uint64_t)va);
  sub_1DCAEEE78((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1DCC13430(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, unint64_t *a2, int a3, int a4, int a5, unint64_t a6, pxrInternal__aapl__pxrReserved__::VtValue *a7, int a8)
{
  int v8;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  pxrInternal__aapl__pxrReserved__::VtValue *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __n128 v47[2];
  uint64_t v48;

  v8 = a8;
  v48 = 0;
  memset(v47, 0, sizeof(v47));
  sub_1DCB23B10((uint64_t)v47, (a4 * a8));
  v15 = sub_1DCC14A5C(a7);
  v16 = *(_OWORD *)(v15 + 16);
  v44 = *(_OWORD *)v15;
  v45 = v16;
  v17 = *(_QWORD *)(v15 + 32);
  v46 = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 - 16);
    if (*((_QWORD *)&v45 + 1))
      v18 = (unint64_t *)*((_QWORD *)&v45 + 1);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (!(_QWORD)v44)
  {
    sub_1DCC14AC4((uint64_t *)a7, v47);
    goto LABEL_10;
  }
  v43 = v8;
  if (*(_QWORD *)a1 < a6)
  {
LABEL_7:
    v20 = a6 + 1;
    if (v20 <= *a2)
    {
      v29 = 0;
      v42 = a5;
      v30 = v8;
      v31 = v8 * a3;
      while (1)
      {
        v32 = a2;
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        if (v8 >= 1)
          break;
LABEL_34:
        ++v29;
        a2 = v32;
        v31 += v30;
        v8 = v43;
        if (*v32 / v20 <= v29)
          goto LABEL_8;
      }
      v33 = *(_DWORD *)(a2[4] + 4 * (v42 + v29 * v20)) * v43;
      v34 = v30;
      v35 = v31;
      while ((v31 & 0x80000000) == 0
           && (v33 & 0x80000000) == 0
           && v47[0].n128_u64[0] > v35
           && (unint64_t)v44 > v33)
      {
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v44);
        v36 = *(_DWORD *)(v46 + 4 * v33);
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v47);
        *(_DWORD *)(v48 + 4 * v35) = v36;
        ++v33;
        ++v35;
        if (!--v34)
          goto LABEL_34;
      }
    }
    else
    {
LABEL_8:
      sub_1DCC14AC4((uint64_t *)a7, v47);
    }
    goto LABEL_10;
  }
  v21 = 0;
  v41 = 0;
  v39 = a5 - 1;
  v40 = v8;
  v38 = a3;
  v37 = a5;
  while (1)
  {
    sub_1DCAF0F78(a1);
    if (*(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v21 * a6) != -1)
      break;
LABEL_24:
    if (*(_QWORD *)a1 / a6 <= ++v21)
      goto LABEL_7;
  }
  v22 = a2;
  if (a5)
  {
    v23 = a7;
    sub_1DCAF0F78(a1);
    v24 = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * (v39 + v21 * a6));
  }
  else
  {
    v23 = a7;
    v24 = v21;
  }
  if (v8 < 1)
  {
LABEL_23:
    ++v41;
    a7 = v23;
    a2 = v22;
    v8 = v43;
    a3 = v38;
    a5 = v37;
    goto LABEL_24;
  }
  v25 = v24 * v43;
  v26 = v40;
  v27 = v41 * v43;
  while (((v41 * v43) & 0x80000000) == 0
       && (v25 & 0x80000000) == 0
       && v47[0].n128_u64[0] > v27
       && (unint64_t)v44 > v25)
  {
    sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v44);
    v28 = *(_DWORD *)(v46 + 4 * v25);
    sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v47);
    *(_DWORD *)(v48 + 4 * v27++) = v28;
    ++v25;
    if (!--v26)
      goto LABEL_23;
  }
LABEL_10:
  sub_1DCAEEE78((uint64_t)&v44);
  sub_1DCAEEE78((uint64_t)v47);
}

void sub_1DCC13718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_1DCAEEE78((uint64_t)va);
  sub_1DCAEEE78((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1DCC13764(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, unint64_t *a2, int a3, int a4, int a5, unint64_t a6, pxrInternal__aapl__pxrReserved__::VtValue *a7, int a8)
{
  int v8;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  pxrInternal__aapl__pxrReserved__::VtValue *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __n128 v47[2];
  uint64_t v48;

  v8 = a8;
  v48 = 0;
  memset(v47, 0, sizeof(v47));
  sub_1DCAEEB34((uint64_t)v47, (a4 * a8));
  v15 = sub_1DCAEEACC(a7);
  v16 = *(_OWORD *)(v15 + 16);
  v44 = *(_OWORD *)v15;
  v45 = v16;
  v17 = *(_QWORD *)(v15 + 32);
  v46 = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 - 16);
    if (*((_QWORD *)&v45 + 1))
      v18 = (unint64_t *)*((_QWORD *)&v45 + 1);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (!(_QWORD)v44)
  {
    sub_1DCB435E8((uint64_t *)a7, v47);
    goto LABEL_10;
  }
  v43 = v8;
  if (*(_QWORD *)a1 < a6)
  {
LABEL_7:
    v20 = a6 + 1;
    if (v20 <= *a2)
    {
      v29 = 0;
      v42 = a5;
      v30 = v8;
      v31 = v8 * a3;
      while (1)
      {
        v32 = a2;
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        if (v8 >= 1)
          break;
LABEL_34:
        ++v29;
        a2 = v32;
        v31 += v30;
        v8 = v43;
        if (*v32 / v20 <= v29)
          goto LABEL_8;
      }
      v33 = *(_DWORD *)(a2[4] + 4 * (v42 + v29 * v20)) * v43;
      v34 = v30;
      v35 = v31;
      while ((v31 & 0x80000000) == 0
           && (v33 & 0x80000000) == 0
           && v47[0].n128_u64[0] > v35
           && (unint64_t)v44 > v33)
      {
        sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v44);
        v36 = v46;
        sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v47);
        *(_OWORD *)(v48 + 16 * v35++) = *(_OWORD *)(v36 + 16 * v33++);
        if (!--v34)
          goto LABEL_34;
      }
    }
    else
    {
LABEL_8:
      sub_1DCB435E8((uint64_t *)a7, v47);
    }
    goto LABEL_10;
  }
  v21 = 0;
  v41 = 0;
  v39 = a5 - 1;
  v40 = v8;
  v38 = a3;
  v37 = a5;
  while (1)
  {
    sub_1DCAF0F78(a1);
    if (*(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v21 * a6) != -1)
      break;
LABEL_24:
    if (*(_QWORD *)a1 / a6 <= ++v21)
      goto LABEL_7;
  }
  v22 = a2;
  if (a5)
  {
    v23 = a7;
    sub_1DCAF0F78(a1);
    v24 = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * (v39 + v21 * a6));
  }
  else
  {
    v23 = a7;
    v24 = v21;
  }
  if (v8 < 1)
  {
LABEL_23:
    ++v41;
    a7 = v23;
    a2 = v22;
    v8 = v43;
    a3 = v38;
    a5 = v37;
    goto LABEL_24;
  }
  v25 = v24 * v43;
  v26 = v40;
  v27 = v41 * v43;
  while (((v41 * v43) & 0x80000000) == 0
       && (v25 & 0x80000000) == 0
       && v47[0].n128_u64[0] > v27
       && (unint64_t)v44 > v25)
  {
    sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v44);
    v28 = v46;
    sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v47);
    *(_OWORD *)(v48 + 16 * v27++) = *(_OWORD *)(v28 + 16 * v25++);
    if (!--v26)
      goto LABEL_23;
  }
LABEL_10:
  sub_1DCAEEE78((uint64_t)&v44);
  sub_1DCAEEE78((uint64_t)v47);
}

void sub_1DCC13A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_1DCAEEE78((uint64_t)va);
  sub_1DCAEEE78((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1DCC13A98(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, unint64_t *a2, int a3, int a4, int a5, unint64_t a6, pxrInternal__aapl__pxrReserved__::VtValue *a7, int a8)
{
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  pxrInternal__aapl__pxrReserved__::VtValue *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  int v30;
  unint64_t *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __n128 v44[2];
  uint64_t v45;

  v45 = 0;
  memset(v44, 0, sizeof(v44));
  sub_1DCB43828((uint64_t)v44, (a4 * a8));
  v15 = sub_1DCB41744(a7);
  v16 = *(_OWORD *)(v15 + 16);
  v41 = *(_OWORD *)v15;
  v42 = v16;
  v17 = *(_QWORD *)(v15 + 32);
  v43 = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 - 16);
    if (*((_QWORD *)&v42 + 1))
      v18 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (!(_QWORD)v41)
  {
    sub_1DCB43898((uint64_t *)a7, v44);
    goto LABEL_10;
  }
  if (*(_QWORD *)a1 < a6)
  {
LABEL_7:
    v20 = a6 + 1;
    if (v20 <= *a2)
    {
      v29 = 0;
      v40 = a5;
      v30 = a8 * a3;
      while (1)
      {
        v31 = a2;
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        if (a8 >= 1)
          break;
LABEL_34:
        ++v29;
        a2 = v31;
        v30 += a8;
        if (*v31 / v20 <= v29)
          goto LABEL_8;
      }
      v32 = *(_DWORD *)(a2[4] + 4 * (v40 + v29 * v20)) * a8;
      v33 = a8;
      v34 = v30;
      while ((v30 & 0x80000000) == 0
           && (v32 & 0x80000000) == 0
           && v44[0].n128_u64[0] > v34
           && (unint64_t)v41 > v32)
      {
        sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v41);
        v35 = *(_DWORD *)(v43 + 4 * v32);
        sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v44);
        *(_DWORD *)(v45 + 4 * v34) = v35;
        ++v32;
        ++v34;
        if (!--v33)
          goto LABEL_34;
      }
    }
    else
    {
LABEL_8:
      sub_1DCB43898((uint64_t *)a7, v44);
    }
    goto LABEL_10;
  }
  v21 = 0;
  v39 = 0;
  v38 = a5 - 1;
  v37 = a3;
  v36 = a5;
  while (1)
  {
    sub_1DCAF0F78(a1);
    if (*(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v21 * a6) != -1)
      break;
LABEL_24:
    if (*(_QWORD *)a1 / a6 <= ++v21)
      goto LABEL_7;
  }
  if (a5)
  {
    v22 = a2;
    v23 = a7;
    sub_1DCAF0F78(a1);
    v24 = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * (v38 + v21 * a6));
  }
  else
  {
    v22 = a2;
    v23 = a7;
    v24 = v21;
  }
  if (a8 < 1)
  {
LABEL_23:
    ++v39;
    a7 = v23;
    a2 = v22;
    a3 = v37;
    a5 = v36;
    goto LABEL_24;
  }
  v25 = v24 * a8;
  v26 = a8;
  v27 = v39 * a8;
  while (((v39 * a8) & 0x80000000) == 0
       && (v25 & 0x80000000) == 0
       && v44[0].n128_u64[0] > v27
       && (unint64_t)v41 > v25)
  {
    sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v41);
    v28 = *(_DWORD *)(v43 + 4 * v25);
    sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v44);
    *(_DWORD *)(v45 + 4 * v27++) = v28;
    ++v25;
    if (!--v26)
      goto LABEL_23;
  }
LABEL_10:
  sub_1DCAEEE78((uint64_t)&v41);
  sub_1DCAEEE78((uint64_t)v44);
}

void sub_1DCC13D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_1DCAEEE78((uint64_t)va);
  sub_1DCAEEE78((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1DCC13DC0(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, unint64_t *a2, int a3, int a4, int a5, unint64_t a6, pxrInternal__aapl__pxrReserved__::VtValue *a7, int a8)
{
  int v8;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  pxrInternal__aapl__pxrReserved__::VtValue *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __n128 v47[2];
  uint64_t v48;

  v8 = a8;
  v48 = 0;
  memset(v47, 0, sizeof(v47));
  sub_1DCC14DB0((uint64_t)v47, (a4 * a8));
  v15 = sub_1DCB417AC(a7);
  v16 = *(_OWORD *)(v15 + 16);
  v44 = *(_OWORD *)v15;
  v45 = v16;
  v17 = *(_QWORD *)(v15 + 32);
  v46 = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 - 16);
    if (*((_QWORD *)&v45 + 1))
      v18 = (unint64_t *)*((_QWORD *)&v45 + 1);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (!(_QWORD)v44)
  {
    sub_1DCC14E20((uint64_t *)a7, v47);
    goto LABEL_10;
  }
  v43 = v8;
  if (*(_QWORD *)a1 < a6)
  {
LABEL_7:
    v20 = a6 + 1;
    if (v20 <= *a2)
    {
      v29 = 0;
      v42 = a5;
      v30 = v8;
      v31 = v8 * a3;
      while (1)
      {
        v32 = a2;
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        if (v8 >= 1)
          break;
LABEL_34:
        ++v29;
        a2 = v32;
        v31 += v30;
        v8 = v43;
        if (*v32 / v20 <= v29)
          goto LABEL_8;
      }
      v33 = *(_DWORD *)(a2[4] + 4 * (v42 + v29 * v20)) * v43;
      v34 = v30;
      v35 = v31;
      while ((v31 & 0x80000000) == 0
           && (v33 & 0x80000000) == 0
           && v47[0].n128_u64[0] > v35
           && (unint64_t)v44 > v33)
      {
        sub_1DCB450D8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v44);
        v36 = *(_DWORD *)(v46 + 4 * v33);
        sub_1DCB450D8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v47);
        *(_DWORD *)(v48 + 4 * v35) = v36;
        ++v33;
        ++v35;
        if (!--v34)
          goto LABEL_34;
      }
    }
    else
    {
LABEL_8:
      sub_1DCC14E20((uint64_t *)a7, v47);
    }
    goto LABEL_10;
  }
  v21 = 0;
  v41 = 0;
  v39 = a5 - 1;
  v40 = v8;
  v38 = a3;
  v37 = a5;
  while (1)
  {
    sub_1DCAF0F78(a1);
    if (*(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v21 * a6) != -1)
      break;
LABEL_24:
    if (*(_QWORD *)a1 / a6 <= ++v21)
      goto LABEL_7;
  }
  v22 = a2;
  if (a5)
  {
    v23 = a7;
    sub_1DCAF0F78(a1);
    v24 = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * (v39 + v21 * a6));
  }
  else
  {
    v23 = a7;
    v24 = v21;
  }
  if (v8 < 1)
  {
LABEL_23:
    ++v41;
    a7 = v23;
    a2 = v22;
    v8 = v43;
    a3 = v38;
    a5 = v37;
    goto LABEL_24;
  }
  v25 = v24 * v43;
  v26 = v40;
  v27 = v41 * v43;
  while (((v41 * v43) & 0x80000000) == 0
       && (v25 & 0x80000000) == 0
       && v47[0].n128_u64[0] > v27
       && (unint64_t)v44 > v25)
  {
    sub_1DCB450D8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v44);
    v28 = *(_DWORD *)(v46 + 4 * v25);
    sub_1DCB450D8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v47);
    *(_DWORD *)(v48 + 4 * v27++) = v28;
    ++v25;
    if (!--v26)
      goto LABEL_23;
  }
LABEL_10:
  sub_1DCAEEE78((uint64_t)&v44);
  sub_1DCAEEE78((uint64_t)v47);
}

void sub_1DCC140A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_1DCAEEE78((uint64_t)va);
  sub_1DCAEEE78((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1DCC140F4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, unint64_t *a2, int a3, int a4, int a5, unint64_t a6, pxrInternal__aapl__pxrReserved__::VtValue *a7, int a8)
{
  int v8;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  pxrInternal__aapl__pxrReserved__::VtValue *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  __int16 v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  __int16 v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __n128 v47[2];
  uint64_t v48;

  v8 = a8;
  v48 = 0;
  memset(v47, 0, sizeof(v47));
  sub_1DCB4369C((uint64_t)v47, (a4 * a8));
  v15 = sub_1DCB4370C(a7);
  v16 = *(_OWORD *)(v15 + 16);
  v44 = *(_OWORD *)v15;
  v45 = v16;
  v17 = *(_QWORD *)(v15 + 32);
  v46 = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 - 16);
    if (*((_QWORD *)&v45 + 1))
      v18 = (unint64_t *)*((_QWORD *)&v45 + 1);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (!(_QWORD)v44)
  {
    sub_1DCB43774((uint64_t *)a7, v47);
    goto LABEL_10;
  }
  v43 = v8;
  if (*(_QWORD *)a1 < a6)
  {
LABEL_7:
    v20 = a6 + 1;
    if (v20 <= *a2)
    {
      v29 = 0;
      v42 = a5;
      v30 = v8;
      v31 = v8 * a3;
      while (1)
      {
        v32 = a2;
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        if (v8 >= 1)
          break;
LABEL_34:
        ++v29;
        a2 = v32;
        v31 += v30;
        v8 = v43;
        if (*v32 / v20 <= v29)
          goto LABEL_8;
      }
      v33 = *(_DWORD *)(a2[4] + 4 * (v42 + v29 * v20)) * v43;
      v34 = v30;
      v35 = v31;
      while ((v31 & 0x80000000) == 0
           && (v33 & 0x80000000) == 0
           && v47[0].n128_u64[0] > v35
           && (unint64_t)v44 > v33)
      {
        sub_1DCB46434((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v44);
        v36 = *(_WORD *)(v46 + 2 * v33);
        sub_1DCB46434((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v47);
        *(_WORD *)(v48 + 2 * v35) = v36;
        ++v33;
        ++v35;
        if (!--v34)
          goto LABEL_34;
      }
    }
    else
    {
LABEL_8:
      sub_1DCB43774((uint64_t *)a7, v47);
    }
    goto LABEL_10;
  }
  v21 = 0;
  v41 = 0;
  v39 = a5 - 1;
  v40 = v8;
  v38 = a3;
  v37 = a5;
  while (1)
  {
    sub_1DCAF0F78(a1);
    if (*(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v21 * a6) != -1)
      break;
LABEL_24:
    if (*(_QWORD *)a1 / a6 <= ++v21)
      goto LABEL_7;
  }
  v22 = a2;
  if (a5)
  {
    v23 = a7;
    sub_1DCAF0F78(a1);
    v24 = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * (v39 + v21 * a6));
  }
  else
  {
    v23 = a7;
    v24 = v21;
  }
  if (v8 < 1)
  {
LABEL_23:
    ++v41;
    a7 = v23;
    a2 = v22;
    v8 = v43;
    a3 = v38;
    a5 = v37;
    goto LABEL_24;
  }
  v25 = v24 * v43;
  v26 = v40;
  v27 = v41 * v43;
  while (((v41 * v43) & 0x80000000) == 0
       && (v25 & 0x80000000) == 0
       && v47[0].n128_u64[0] > v27
       && (unint64_t)v44 > v25)
  {
    sub_1DCB46434((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v44);
    v28 = *(_WORD *)(v46 + 2 * v25);
    sub_1DCB46434((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v47);
    *(_WORD *)(v48 + 2 * v27++) = v28;
    ++v25;
    if (!--v26)
      goto LABEL_23;
  }
LABEL_10:
  sub_1DCAEEE78((uint64_t)&v44);
  sub_1DCAEEE78((uint64_t)v47);
}

void sub_1DCC143DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_1DCAEEE78((uint64_t)va);
  sub_1DCAEEE78((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCC14428(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_1DCAEEFD4((_QWORD *)a1);
  v6 = &v5;
  sub_1DCC090B4((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_1DCC14480(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE78(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1DCC14498(uint64_t *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_1DCB27AA4((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_1DCC1454C(a1, (uint64_t)v10);
    sub_1DCAEEE78((uint64_t)v10);
  }
  v4 = (__n128 *)sub_1DCC149CC(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_1DCC14534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCC1454C(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6 = 0;
  sub_1DCB25FE8((uint64_t)&v5, (uint64_t)a1);
  a1[1] = (uint64_t)&off_1EA575828;
  sub_1DCB272BC(a1, a2);
  if (v6)
    (*(void (**)(uint64_t *))(v6 + 32))(&v5);
  return a1;
}

void sub_1DCC145E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_1DCAE4C58(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1DCC1461C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCC14644(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCC1479C(a1);
}

uint64_t sub_1DCC14654()
{
  return 1;
}

unint64_t sub_1DCC1465C(unint64_t **a1)
{
  char v2;

  return sub_1DCC14804((uint64_t)&v2, *a1);
}

BOOL sub_1DCC14680(_QWORD **a1, uint64_t *a2)
{
  return sub_1DCC1485C(*a1, *a2);
}

BOOL sub_1DCC1468C(_QWORD **a1, uint64_t a2)
{
  return sub_1DCC1485C(*a1, a2);
}

uint64_t sub_1DCC14698()
{
  return 0;
}

uint64_t sub_1DCC146A4(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_1DCC146EC()
{
  return &unk_1EA573B10;
}

uint64_t sub_1DCC146F8()
{
  return 1;
}

void *sub_1DCC14700()
{
  return &unk_1EA573A08;
}

uint64_t sub_1DCC1470C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCC14714(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_1DCC14720(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec2fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCC14750(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573B10, a2);
}

void *sub_1DCC14770()
{
  return &unk_1EA573B10;
}

uint64_t sub_1DCC1477C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCC14784@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA575828;
  return sub_1DCB272BC(a2, v2);
}

uint64_t *sub_1DCC1479C(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_1DCAEEE78(v2);
      MEMORY[0x1DF0D228C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_1DCC14804(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *a2;
  if (*a2)
  {
    v3 = (unsigned int *)a2[4];
    v4 = *a2;
    do
    {
      v5 = *v3;
      v6 = v3[1];
      v3 += 2;
      v7 = bswap64(0x9E3779B97F4A7C55 * (v6 + ((unint64_t)(v6 + v5 + (v6 + v5) * (v6 + v5)) >> 1)));
      v2 = v7 + ((v7 + v2 + (v7 + v2) * (v7 + v2)) >> 1);
      --v4;
    }
    while (v4);
    v2 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v2);
}

BOOL sub_1DCC1485C(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  float v11;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_1DCB27110((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_1DCB27110((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)a1[4];
  v6 = &v5[2 * *a1];
  v7 = *(float **)(a2 + 32);
  do
  {
    v8 = *v5;
    v9 = v5[1];
    v5 += 2;
    v10 = *v7;
    v11 = v7[1];
    v7 += 2;
    result = v9 == v11 && v8 == v10;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t sub_1DCC148FC(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_1DCC1479C((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t sub_1DCC149B4(_QWORD *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

uint64_t sub_1DCC149CC(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_1DCB273D4(a1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return sub_1DCC148FC(a1);
}

uint64_t sub_1DCC14A5C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCC14B78(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

__n128 sub_1DCC14AC4(uint64_t *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_1DCC14B78((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_1DCC14C50(a1, (uint64_t)v10);
    sub_1DCAEEE78((uint64_t)v10);
  }
  v4 = (__n128 *)sub_1DCC14D20(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_1DCC14B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCC14B78(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 52)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573C00);
  else
    return 0;
}

double sub_1DCC14BB0@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_1DCC14C08;
  a1[2] = (uint64_t)&stru_1EA573C00;
  return result;
}

uint64_t sub_1DCC14C08(uint64_t result)
{
  if (result)
  {
    sub_1DCAEEE78(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

uint64_t *sub_1DCC14C50(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6 = 0;
  sub_1DCB25FE8((uint64_t)&v5, (uint64_t)a1);
  a1[1] = (uint64_t)&off_1EA575DE8;
  sub_1DCB45564(a1, a2);
  if (v6)
    (*(void (**)(uint64_t *))(v6 + 32))(&v5);
  return a1;
}

void sub_1DCC14CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_1DCAE4C58(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCC14D20(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_1DCB273D4(a1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return sub_1DCB454AC(a1);
}

uint64_t sub_1DCC14DB0(uint64_t a1, unint64_t a2)
{
  int v5;
  int *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_1DCAEEFD4((_QWORD *)a1);
  v6 = &v5;
  sub_1DCC14ED4((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_1DCC14E08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE78(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1DCC14E20(uint64_t *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_1DCB45000((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_1DCB8FCC0(a1, (uint64_t)v10);
    sub_1DCAEEE78((uint64_t)v10);
  }
  v4 = (__n128 *)sub_1DCC15088(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_1DCC14EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DCC14ED4(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCB4516C((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 4 * v3;
          do
          {
            *(_DWORD *)((char *)v7 + v13) = *v12;
            v13 += 4;
          }
          while (4 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_1DCB4516C((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 4 * v19;
      v22 = v20;
      do
      {
        v23 = *(_DWORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 4);
        *(_DWORD *)v22 = v23;
        v22 = (unint64_t *)((char *)v22 + 4);
        v21 -= 4;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 4 * v3;
      do
      {
        *(_DWORD *)((char *)v20 + v25) = *v24;
        v25 += 4;
      }
      while (4 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 4 * a2;
  if (4 * a2 / a2 != 4)
  {
LABEL_18:
    sub_1DCAEEFD4(a1);
    return;
  }
  v16 = sub_1DCB4516C((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_DWORD *)((char *)v16 + v17) = *v18;
    v17 += 4;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

uint64_t sub_1DCC15088(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_1DCB273D4(a1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return sub_1DCB9CEE4(a1);
}

uint64_t sub_1DCC15118(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a2 - 2;
  if (a2 == 2)
    return 0;
  v4 = 0;
  result = 0;
  do
  {
    if (v4 <= v2)
      v6 = a2 - 2;
    else
      v6 = v4;
    while (v6 != v4)
    {
      v7 = a1 + v4;
      v8 = *(unsigned __int8 *)(a1 + v4++);
      if (v8 != *(unsigned __int8 *)(v7 + 1))
      {
        v6 = v4 - 1;
        break;
      }
    }
    if (v6 < a2 - 3 && *(unsigned __int8 *)(v6 + a1 + 2) == *(unsigned __int8 *)(a1 + v6 + 3))
      v6 += 3;
    ++result;
    v4 = v6 + 1;
  }
  while (v6 + 1 < v2);
  return result;
}

uint64_t sub_1DCC15198(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unsigned __int16 *v7;

  v2 = a2 - 2;
  if (a2 == 2)
    return 0;
  v4 = 0;
  result = 0;
  do
  {
    if (v4 <= v2)
      v6 = a2 - 2;
    else
      v6 = v4;
    while (v6 != v4)
    {
      v7 = (unsigned __int16 *)(a1 + 2 * v4++);
      if (*v7 != v7[1])
      {
        v6 = v4 - 1;
        break;
      }
    }
    if (v6 < a2 - 3 && *(unsigned __int16 *)(a1 + 2 * v6 + 4) == *(unsigned __int16 *)(a1 + 2 * (v6 + 3)))
      v6 += 3;
    ++result;
    v4 = v6 + 1;
  }
  while (v6 + 1 < v2);
  return result;
}

uint64_t sub_1DCC15218(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  _DWORD *v7;

  v2 = a2 - 2;
  if (a2 == 2)
    return 0;
  v4 = 0;
  result = 0;
  do
  {
    if (v4 <= v2)
      v6 = a2 - 2;
    else
      v6 = v4;
    while (v6 != v4)
    {
      v7 = (_DWORD *)(a1 + 4 * v4++);
      if (*v7 != v7[1])
      {
        v6 = v4 - 1;
        break;
      }
    }
    if (v6 < a2 - 3 && *(_DWORD *)(a1 + 4 * v6 + 8) == *(_DWORD *)(a1 + 4 * (v6 + 3)))
      v6 += 3;
    ++result;
    v4 = v6 + 1;
  }
  while (v6 + 1 < v2);
  return result;
}

void sub_1DCC15298(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8;
  char *v9;
  unint64_t v11;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  unsigned int v18;
  void *v19;
  unint64_t v20;
  unsigned __int16 *v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  char v28;
  void *v29;
  _BYTE *v30;
  int v31;
  _BYTE *v32;
  char v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  unint64_t v47;
  size_t v48;
  char *v49;
  char *v50;
  _BYTE *v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  unint64_t v56;
  _BYTE *v57;
  unint64_t v58;
  unint64_t v59;
  size_t v60;
  unint64_t v61;
  char *v62;
  _BYTE *v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  unint64_t v69;
  unint64_t v70;
  size_t v71;
  unint64_t v72;
  char *v73;
  _BYTE *v74;
  char v75;
  uint64_t v76;
  _BYTE *v77;
  __int16 v78;
  unint64_t v79;
  _BYTE *v80;
  unint64_t v81;
  _BYTE *v82;
  unint64_t v83;
  unint64_t v84;
  size_t v85;
  char *v86;
  char *v87;
  _BYTE *v88;
  _BYTE *v89;
  char v90;
  __int16 v91;
  unint64_t v92;
  _BYTE *v93;
  unint64_t v94;
  _BYTE *v95;
  unint64_t v96;
  unint64_t v97;
  size_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  _BYTE *v102;
  _BYTE *v103;
  char v104;
  __int16 v105;
  unint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  unint64_t v109;
  unint64_t v110;
  size_t v111;
  unint64_t v112;
  char *v113;
  _BYTE *v114;
  char v115;
  uint64_t v116;
  _BYTE *v117;
  int v118;
  unint64_t v119;
  _BYTE *v120;
  unint64_t v121;
  _BYTE *v122;
  unint64_t v123;
  unint64_t v124;
  size_t v125;
  char *v126;
  char *v127;
  _BYTE *v128;
  _BYTE *v129;
  char v130;
  int v131;
  unint64_t v132;
  _BYTE *v133;
  unint64_t v134;
  _BYTE *v135;
  unint64_t v136;
  unint64_t v137;
  size_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  _BYTE *v142;
  _BYTE *v143;
  char v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  _BYTE *v148;
  unint64_t v149;
  unint64_t v150;
  size_t v151;
  unint64_t v152;
  char *v153;
  _BYTE *v154;
  char v155;
  unint64_t v156;
  _BYTE *v157;
  _BYTE *v158;
  _BYTE *v159;
  unint64_t v160;
  _BYTE *v161;
  _BYTE *v162;
  _BYTE *v163;
  unint64_t v164;
  _BYTE *v165;
  _BYTE *v166;
  _BYTE *v167;
  unint64_t v168;
  _BYTE *v169;
  unint64_t v170;
  unint64_t v171;
  size_t v172;
  char *v173;
  unint64_t v174;
  _BYTE *v175;
  unint64_t v176;
  unint64_t v177;
  size_t v178;
  char *v179;
  unint64_t v180;
  _BYTE *v181;
  unint64_t v182;
  unint64_t v183;
  size_t v184;
  char *v185;
  char *v186;
  _BYTE *v187;
  char v188;
  unint64_t v189;
  _BYTE *v190;
  unint64_t v191;
  _BYTE *v192;
  unint64_t v193;
  unint64_t v194;
  size_t v195;
  unint64_t v196;
  char *v197;
  _BYTE *v198;
  char v199;
  uint64_t v200;
  unint64_t v201;
  _BYTE *v202;
  unint64_t v203;
  _BYTE *v204;
  unint64_t v205;
  unint64_t v206;
  size_t v207;
  unint64_t v208;
  char *v209;
  _BYTE *v210;
  char v211;
  uint64_t v212;
  unint64_t v213;
  _BYTE *v214;
  unint64_t v215;
  _BYTE *v216;
  unint64_t v217;
  unint64_t v218;
  size_t v219;
  unint64_t v220;
  char *v221;
  _BYTE *v222;
  char v223;
  char *v224;
  _BYTE *v225;
  char v226;
  char *v227;
  _BYTE *v228;
  char v229;
  unint64_t v230;
  unint64_t v231;
  _BYTE *v232;
  unint64_t v233;
  unint64_t v234;
  size_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  _BYTE *v240;
  unint64_t v241;
  unint64_t v242;
  size_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  _BYTE *v247;
  unint64_t v248;
  unint64_t v249;
  size_t v250;
  unint64_t v251;
  char *v252;
  _BYTE *v253;
  char v254;
  char *v255;
  _BYTE *v256;
  char v257;
  char *v258;
  _BYTE *v259;
  char v260;
  __int16 v261;
  unint64_t v262;
  _BYTE *v263;
  unint64_t v264;
  _BYTE *v265;
  unint64_t v266;
  unint64_t v267;
  size_t v268;
  char *v269;
  char *v270;
  _BYTE *v271;
  char v272;
  __int16 v273;
  unint64_t v274;
  _BYTE *v275;
  unint64_t v276;
  _BYTE *v277;
  unint64_t v278;
  unint64_t v279;
  size_t v280;
  unint64_t v281;
  char *v282;
  _BYTE *v283;
  char v284;
  __int16 v285;
  unint64_t v286;
  unint64_t v287;
  _BYTE *v288;
  unint64_t v289;
  unint64_t v290;
  size_t v291;
  unint64_t v292;
  char *v293;
  _BYTE *v294;
  char v295;
  int v296;
  unint64_t v297;
  _BYTE *v298;
  unint64_t v299;
  _BYTE *v300;
  unint64_t v301;
  unint64_t v302;
  size_t v303;
  char *v304;
  char *v305;
  _BYTE *v306;
  char v307;
  int v308;
  unint64_t v309;
  _BYTE *v310;
  unint64_t v311;
  _BYTE *v312;
  unint64_t v313;
  unint64_t v314;
  size_t v315;
  unint64_t v316;
  char *v317;
  _BYTE *v318;
  char v319;
  int v320;
  unint64_t v321;
  unint64_t v322;
  _BYTE *v323;
  unint64_t v324;
  unint64_t v325;
  size_t v326;
  unint64_t v327;
  char *v328;
  char *v329;
  _BYTE *v330;
  _BYTE *v331;
  _BYTE *v332;
  char v333;
  __int16 v334;
  unint64_t v335;
  _BYTE *v336;
  unint64_t v337;
  _BYTE *v338;
  unint64_t v339;
  unint64_t v340;
  size_t v341;
  char *v342;
  char *v343;
  _BYTE *v344;
  char v345;
  __int16 v346;
  unint64_t v347;
  _BYTE *v348;
  unint64_t v349;
  _BYTE *v350;
  unint64_t v351;
  unint64_t v352;
  size_t v353;
  unint64_t v354;
  char *v355;
  _BYTE *v356;
  char v357;
  __int16 v358;
  unint64_t v359;
  unint64_t v360;
  _BYTE *v361;
  unint64_t v362;
  unint64_t v363;
  size_t v364;
  unint64_t v365;
  char *v366;
  _BYTE *v367;
  char v368;
  int v369;
  unint64_t v370;
  _BYTE *v371;
  unint64_t v372;
  _BYTE *v373;
  unint64_t v374;
  unint64_t v375;
  size_t v376;
  char *v377;
  char *v378;
  _BYTE *v379;
  char v380;
  int v381;
  unint64_t v382;
  unint64_t v383;
  _BYTE *v384;
  unint64_t v385;
  unint64_t v386;
  size_t v387;
  unint64_t v388;
  char *v389;
  _BYTE *v390;
  char v391;
  unint64_t v392;
  unint64_t v393;
  _BYTE *v394;
  unint64_t v395;
  unint64_t v396;
  size_t v397;
  _BYTE *v398;
  _BYTE *v399;
  char v400;
  __int16 v401;
  unint64_t v402;
  _BYTE *v403;
  unint64_t v404;
  _BYTE *v405;
  unint64_t v406;
  unint64_t v407;
  size_t v408;
  char *v409;
  char *v410;
  _BYTE *v411;
  char v412;
  __int16 v413;
  unint64_t v414;
  _BYTE *v415;
  unint64_t v416;
  _BYTE *v417;
  unint64_t v418;
  unint64_t v419;
  size_t v420;
  unint64_t v421;
  char *v422;
  char *v423;
  _BYTE *v424;
  _BYTE *v425;
  char v426;
  __int16 v427;
  unint64_t v428;
  unint64_t v429;
  _BYTE *v430;
  unint64_t v431;
  unint64_t v432;
  size_t v433;
  unint64_t v434;
  char *v435;
  _BYTE *v436;
  char v437;
  int v438;
  unint64_t v439;
  _BYTE *v440;
  unint64_t v441;
  _BYTE *v442;
  unint64_t v443;
  unint64_t v444;
  size_t v445;
  char *v446;
  char *v447;
  _BYTE *v448;
  char v449;
  int v450;
  unint64_t v451;
  unint64_t v452;
  _BYTE *v453;
  unint64_t v454;
  unint64_t v455;
  size_t v456;
  unint64_t v457;
  char *v458;
  _BYTE *v459;
  char v460;
  unint64_t v461;
  unint64_t v462;
  _BYTE *v463;
  unint64_t v464;
  unint64_t v465;
  size_t v466;
  _BYTE *v467;
  _BYTE *v468;
  char v469;
  unint64_t v470;
  unint64_t v471;
  const char *v472;
  uint64_t v473;
  const void *v474;
  void *v475;
  size_t v476;
  unint64_t v477;
  unint64_t v478;
  const char *v479;
  uint64_t v480;
  const char *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  const char *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  const char *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  unsigned __int8 *v499;
  id v500;
  id v501;
  id v502;

  v8 = a3;
  v9 = (char *)a2;
  v11 = a6 & 0xFFFFFFFFFFFFFFF8;
  if ((a6 & 0xFFFFFFFFFFFFFFF8) == 8 && a7 == a8)
  {
    v19 = (void *)*a1;
    v20 = a1[1] - *a1;
    if (a3 <= v20)
    {
      if (a3 < v20)
        a1[1] = (unint64_t)v19 + a3;
    }
    else
    {
      sub_1DCAE4B1C(a1, a3 - v20);
      v19 = (void *)*a1;
    }
    memcpy(v19, v9, v8);
  }
  else
  {
    if (!a6)
    {
      NSLog(CFSTR("Couldn't copy index buffer because invalid indices"));
      return;
    }
    v14 = a4;
    v15 = __ROR8__(a6, 3);
    if (v15 == 2)
    {
      if (a3)
      {
        v21 = (unsigned __int16 *)a2;
        v22 = a3;
        do
        {
          v23 = *v21++;
          if (v23 >= 0x100)
            goto LABEL_32;
        }
        while (--v22);
      }
    }
    else if (v15 == 4 && a3)
    {
      v16 = (unsigned int *)a2;
      v17 = a3;
      while (1)
      {
        v18 = *v16++;
        if (v18 >= 0x100)
          break;
        if (!--v17)
          goto LABEL_23;
      }
LABEL_32:
      NSLog(CFSTR("Couldn't copy index buffer because indices too large"));
      return;
    }
LABEL_23:
    if (a7 == a8)
    {
      v24 = a1[1] - *a1;
      if (a3 <= v24)
      {
        if (a3 < v24)
          a1[1] = *a1 + a3;
      }
      else
      {
        sub_1DCAE4B1C(a1, a3 - v24);
      }
      if (a6 == 32)
      {
        if (v8)
        {
          v30 = (_BYTE *)*a1;
          do
          {
            v31 = *(_DWORD *)v9;
            v9 += 4;
            *v30++ = v31;
            --v8;
          }
          while (v8);
        }
      }
      else if (a6 == 16)
      {
        if (v8)
        {
          v32 = (_BYTE *)*a1;
          do
          {
            v33 = *v9;
            v9 += 2;
            *v32++ = v33;
            --v8;
          }
          while (v8);
        }
      }
      else if (a6 == 8 && v8)
      {
        v27 = (_BYTE *)*a1;
        do
        {
          v28 = *v9++;
          *v27++ = v28;
          --v8;
        }
        while (v8);
      }
      return;
    }
    if (a7 == 3 && a8 == 2)
    {
      switch(a6)
      {
        case 32:
          v25 = sub_1DCC15218(a2, a3);
          sub_1DCC1B040((uint64_t)v9, v8, v25);
          v26 = objc_claimAutoreleasedReturnValue();
          break;
        case 16:
          v25 = sub_1DCC15198(a2, a3);
          sub_1DCC1AF1C((uint64_t)v9, v8, v25);
          v26 = objc_claimAutoreleasedReturnValue();
          break;
        case 8:
          v25 = sub_1DCC15118(a2, a3);
          sub_1DCC1ADF4((uint64_t)v9, v8, v25);
          v26 = objc_claimAutoreleasedReturnValue();
          break;
        default:
          goto LABEL_734;
      }
      v500 = (id)v26;
      if (v26)
      {
        v470 = *a1;
        v471 = a1[1] - *a1;
        if (v25 <= v471)
        {
          if (v25 < v471)
            a1[1] = v470 + v25;
        }
        else
        {
          sub_1DCAE4B1C(a1, v25 - v471);
          v470 = *a1;
        }
        v501 = objc_retainAutorelease(v500);
        v474 = (const void *)objc_msgSend_bytes(v501, v472, v473);
        v475 = (void *)v470;
        v476 = v25;
        goto LABEL_739;
      }
LABEL_734:
      NSLog(CFSTR("Couldn't create buffer to copy indices"));
      return;
    }
    if (a7 == 4 && a8 == 2)
    {
      switch(a6)
      {
        case 32:
          sub_1DCC1B2F8(a2, a3);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          break;
        case 16:
          sub_1DCC1B230(a2, a3);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          break;
        case 8:
          sub_1DCC1B164(a2, a3);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          break;
        default:
          v29 = 0;
          goto LABEL_741;
      }
      v502 = v29;
      if (!v29)
      {
LABEL_741:

        return;
      }
      v477 = 3 * (v8 >> 1);
      sub_1DCC1ADCC(a1, v477);
      if (v11 != 8)
      {
        if (a6 == 32)
        {
          v501 = objc_retainAutorelease(v502);
          v488 = objc_msgSend_bytes(v501, v486, v487);
          if (v8 >= 2)
          {
            v489 = 0;
            if (v477 <= 1)
              v490 = 1;
            else
              v490 = 3 * (v8 >> 1);
            do
            {
              *(_BYTE *)(*a1 + v489) = *(_DWORD *)(v488 + 4 * v489);
              ++v489;
            }
            while (v490 != v489);
          }
        }
        else if (a6 == 16)
        {
          v501 = objc_retainAutorelease(v502);
          v493 = objc_msgSend_bytes(v501, v491, v492);
          if (v8 >= 2)
          {
            v494 = 0;
            if (v477 <= 1)
              v495 = 1;
            else
              v495 = 3 * (v8 >> 1);
            do
            {
              *(_BYTE *)(*a1 + v494) = *(_WORD *)(v493 + 2 * v494);
              ++v494;
            }
            while (v495 != v494);
          }
        }
        else
        {
          v501 = objc_retainAutorelease(v502);
          v483 = objc_msgSend_bytes(v501, v481, v482);
          if (v8 >= 2)
          {
            v484 = 0;
            if (v477 <= 1)
              v485 = 1;
            else
              v485 = 3 * (v8 >> 1);
            do
            {
              *(_BYTE *)(*a1 + v484) = *(_BYTE *)(v483 + v484);
              ++v484;
            }
            while (v485 != v484);
          }
        }
        goto LABEL_740;
      }
      v478 = *a1;
      v501 = objc_retainAutorelease(v502);
      v474 = (const void *)objc_msgSend_bytes(v501, v479, v480);
      v475 = (void *)v478;
      v476 = 3 * (v8 >> 1);
LABEL_739:
      memcpy(v475, v474, v476);
LABEL_740:
      v29 = v501;
      goto LABEL_741;
    }
    if (a7 != 5 || a8 != 2)
    {
      NSLog(CFSTR("Couldn't copy index data data due to geometry type mismatch"));
      return;
    }
    if (a5)
    {
      v34 = 0;
      v35 = 0;
      do
      {
        LODWORD(v36) = v34[v14];
        v499 = (unsigned __int8 *)v34;
        switch((_DWORD)v36)
        {
          case 3:
            switch(a6)
            {
              case 8:
                v161 = (_BYTE *)a1[1];
                v160 = a1[2];
                if ((unint64_t)v161 >= v160)
                {
                  v174 = *a1;
                  v175 = &v161[-*a1];
                  v176 = (unint64_t)(v175 + 1);
                  if ((uint64_t)(v175 + 1) < 0)
                    goto LABEL_768;
                  v177 = v160 - v174;
                  if (2 * v177 > v176)
                    v176 = 2 * v177;
                  if (v177 >= 0x3FFFFFFFFFFFFFFFLL)
                    v178 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v178 = v176;
                  if (v178)
                    v179 = (char *)operator new(v178);
                  else
                    v179 = 0;
                  v197 = &v175[(_QWORD)v179];
                  v175[(_QWORD)v179] = v9[v35];
                  v162 = &v175[(_QWORD)v179 + 1];
                  if (v161 != (_BYTE *)v174)
                  {
                    v198 = &v161[~v174];
                    do
                    {
                      v199 = *--v161;
                      (v198--)[(_QWORD)v179] = v199;
                    }
                    while (v161 != (_BYTE *)v174);
                    v161 = (_BYTE *)*a1;
                    v197 = v179;
                  }
                  *a1 = (unint64_t)v197;
                  a1[1] = (unint64_t)v162;
                  a1[2] = (unint64_t)&v179[v178];
                  if (v161)
                    operator delete(v161);
                }
                else
                {
                  *v161 = v9[v35];
                  v162 = v161 + 1;
                }
                a1[1] = (unint64_t)v162;
                v200 = v35 + 1;
                v201 = a1[2];
                if ((unint64_t)v162 < v201)
                {
                  *v162 = v9[v200];
                  v202 = v162 + 1;
                  goto LABEL_364;
                }
                v203 = *a1;
                v204 = &v162[-*a1];
                v205 = (unint64_t)(v204 + 1);
                if ((uint64_t)(v204 + 1) < 0)
                  goto LABEL_768;
                v206 = v201 - v203;
                if (2 * v206 > v205)
                  v205 = 2 * v206;
                if (v206 >= 0x3FFFFFFFFFFFFFFFLL)
                  v207 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v207 = v205;
                if (v207)
                  v208 = (unint64_t)operator new(v207);
                else
                  v208 = 0;
                v224 = (char *)(v208 + v207);
                v204[v208] = v9[v200];
                v202 = &v204[v208 + 1];
                if (v162 == (_BYTE *)v203)
                {
                  *a1 = (unint64_t)&v204[v208];
                  a1[1] = (unint64_t)v202;
                  a1[2] = (unint64_t)v224;
                }
                else
                {
                  v225 = &v162[~v203];
                  do
                  {
                    v226 = *--v162;
                    (v225--)[v208] = v226;
                  }
                  while (v162 != (_BYTE *)v203);
                  v162 = (_BYTE *)*a1;
                  *a1 = v208;
                  a1[1] = (unint64_t)v202;
                  a1[2] = (unint64_t)v224;
                  if (!v162)
                  {
LABEL_364:
                    a1[1] = (unint64_t)v202;
                    v237 = v35 + 2;
                    v238 = a1[2];
                    if ((unint64_t)v202 >= v238)
                    {
                      v239 = *a1;
                      v240 = &v202[-*a1];
                      v241 = (unint64_t)(v240 + 1);
                      if ((uint64_t)(v240 + 1) < 0)
                        goto LABEL_768;
                      v242 = v238 - v239;
                      if (2 * v242 > v241)
                        v241 = 2 * v242;
                      if (v242 >= 0x3FFFFFFFFFFFFFFFLL)
                        v243 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v243 = v241;
                      if (v243)
                        v244 = (unint64_t)operator new(v243);
                      else
                        v244 = 0;
                      v255 = (char *)(v244 + v243);
                      v240[v244] = v9[v237];
                      v163 = &v240[v244 + 1];
                      if (v202 == (_BYTE *)v239)
                      {
                        *a1 = (unint64_t)&v240[v244];
                        a1[1] = (unint64_t)v163;
                        a1[2] = (unint64_t)v255;
                      }
                      else
                      {
                        v256 = &v202[~v239];
                        do
                        {
                          v257 = *--v202;
                          (v256--)[v244] = v257;
                        }
                        while (v202 != (_BYTE *)v239);
                        v202 = (_BYTE *)*a1;
                        *a1 = v244;
                        a1[1] = (unint64_t)v163;
                        a1[2] = (unint64_t)v255;
                        if (!v202)
                          goto LABEL_512;
                      }
                      operator delete(v202);
                    }
                    else
                    {
                      *v202 = v9[v237];
                      v163 = v202 + 1;
                    }
LABEL_512:
                    a1[1] = (unint64_t)v163;
LABEL_513:
                    v334 = *(_WORD *)&v9[2 * v35];
                    v335 = a1[2];
                    if ((unint64_t)v163 >= v335)
                    {
                      v337 = *a1;
                      v338 = &v163[-*a1];
                      v339 = (unint64_t)(v338 + 1);
                      if ((uint64_t)(v338 + 1) < 0)
                        goto LABEL_768;
                      v340 = v335 - v337;
                      if (2 * v340 > v339)
                        v339 = 2 * v340;
                      if (v340 >= 0x3FFFFFFFFFFFFFFFLL)
                        v341 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v341 = v339;
                      if (v341)
                        v342 = (char *)operator new(v341);
                      else
                        v342 = 0;
                      v343 = &v338[(_QWORD)v342];
                      v338[(_QWORD)v342] = v334;
                      v336 = &v338[(_QWORD)v342 + 1];
                      if (v163 != (_BYTE *)v337)
                      {
                        v344 = &v163[~v337];
                        do
                        {
                          v345 = *--v163;
                          (v344--)[(_QWORD)v342] = v345;
                        }
                        while (v163 != (_BYTE *)v337);
                        v163 = (_BYTE *)*a1;
                        v343 = v342;
                      }
                      *a1 = (unint64_t)v343;
                      a1[1] = (unint64_t)v336;
                      a1[2] = (unint64_t)&v342[v341];
                      if (v163)
                        operator delete(v163);
                    }
                    else
                    {
                      *v163 = v334;
                      v336 = v163 + 1;
                    }
                    a1[1] = (unint64_t)v336;
                    v346 = *(_WORD *)&v9[2 * v35 + 2];
                    v347 = a1[2];
                    if ((unint64_t)v336 < v347)
                    {
                      *v336 = v346;
                      v348 = v336 + 1;
                      goto LABEL_548;
                    }
                    v349 = *a1;
                    v350 = &v336[-*a1];
                    v351 = (unint64_t)(v350 + 1);
                    if ((uint64_t)(v350 + 1) < 0)
                      goto LABEL_768;
                    v352 = v347 - v349;
                    if (2 * v352 > v351)
                      v351 = 2 * v352;
                    if (v352 >= 0x3FFFFFFFFFFFFFFFLL)
                      v353 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v353 = v351;
                    if (v353)
                      v354 = (unint64_t)operator new(v353);
                    else
                      v354 = 0;
                    v355 = (char *)(v354 + v353);
                    v350[v354] = v346;
                    v348 = &v350[v354 + 1];
                    if (v336 == (_BYTE *)v349)
                    {
                      *a1 = (unint64_t)&v350[v354];
                      a1[1] = (unint64_t)v348;
                      a1[2] = (unint64_t)v355;
                    }
                    else
                    {
                      v356 = &v336[~v349];
                      do
                      {
                        v357 = *--v336;
                        (v356--)[v354] = v357;
                      }
                      while (v336 != (_BYTE *)v349);
                      v336 = (_BYTE *)*a1;
                      *a1 = v354;
                      a1[1] = (unint64_t)v348;
                      a1[2] = (unint64_t)v355;
                      if (!v336)
                      {
LABEL_548:
                        a1[1] = (unint64_t)v348;
                        v358 = *(_WORD *)&v9[2 * v35 + 4];
                        v359 = a1[2];
                        if ((unint64_t)v348 >= v359)
                        {
                          v360 = *a1;
                          v361 = &v348[-*a1];
                          v362 = (unint64_t)(v361 + 1);
                          if ((uint64_t)(v361 + 1) < 0)
                            goto LABEL_768;
                          v363 = v359 - v360;
                          if (2 * v363 > v362)
                            v362 = 2 * v363;
                          if (v363 >= 0x3FFFFFFFFFFFFFFFLL)
                            v364 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v364 = v362;
                          if (v364)
                            v365 = (unint64_t)operator new(v364);
                          else
                            v365 = 0;
                          v366 = (char *)(v365 + v364);
                          v361[v365] = v358;
                          v38 = &v361[v365 + 1];
                          if (v348 == (_BYTE *)v360)
                          {
                            *a1 = (unint64_t)&v361[v365];
                            a1[1] = (unint64_t)v38;
                            a1[2] = (unint64_t)v366;
                          }
                          else
                          {
                            v367 = &v348[~v360];
                            do
                            {
                              v368 = *--v348;
                              (v367--)[v365] = v368;
                            }
                            while (v348 != (_BYTE *)v360);
                            v348 = (_BYTE *)*a1;
                            *a1 = v365;
                            a1[1] = (unint64_t)v38;
                            a1[2] = (unint64_t)v366;
                            if (!v348)
                              goto LABEL_566;
                          }
                          operator delete(v348);
                        }
                        else
                        {
                          *v348 = v358;
                          v38 = v348 + 1;
                        }
LABEL_566:
                        a1[1] = (unint64_t)v38;
LABEL_567:
                        v369 = *(_DWORD *)&v9[4 * v35];
                        v370 = a1[2];
                        if ((unint64_t)v38 >= v370)
                        {
                          v372 = *a1;
                          v373 = &v38[-*a1];
                          v374 = (unint64_t)(v373 + 1);
                          if ((uint64_t)(v373 + 1) < 0)
                            goto LABEL_768;
                          v375 = v370 - v372;
                          if (2 * v375 > v374)
                            v374 = 2 * v375;
                          if (v375 >= 0x3FFFFFFFFFFFFFFFLL)
                            v376 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v376 = v374;
                          if (v376)
                            v377 = (char *)operator new(v376);
                          else
                            v377 = 0;
                          v378 = &v373[(_QWORD)v377];
                          v373[(_QWORD)v377] = v369;
                          v371 = &v373[(_QWORD)v377 + 1];
                          if (v38 != (_BYTE *)v372)
                          {
                            v379 = &v38[~v372];
                            do
                            {
                              v380 = *--v38;
                              (v379--)[(_QWORD)v377] = v380;
                            }
                            while (v38 != (_BYTE *)v372);
                            v38 = (_BYTE *)*a1;
                            v378 = v377;
                          }
                          *a1 = (unint64_t)v378;
                          a1[1] = (unint64_t)v371;
                          a1[2] = (unint64_t)&v377[v376];
                          if (v38)
                            operator delete(v38);
                        }
                        else
                        {
                          *v38 = v369;
                          v371 = v38 + 1;
                        }
                        a1[1] = (unint64_t)v371;
                        v381 = *(_DWORD *)&v9[4 * v35 + 4];
                        v382 = a1[2];
                        if ((unint64_t)v371 >= v382)
                        {
                          v383 = *a1;
                          v384 = &v371[-*a1];
                          v385 = (unint64_t)(v384 + 1);
                          if ((uint64_t)(v384 + 1) < 0)
                            goto LABEL_768;
                          v386 = v382 - v383;
                          if (2 * v386 > v385)
                            v385 = 2 * v386;
                          if (v386 >= 0x3FFFFFFFFFFFFFFFLL)
                            v387 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v387 = v385;
                          if (v387)
                            v388 = (unint64_t)operator new(v387);
                          else
                            v388 = 0;
                          v389 = (char *)(v388 + v387);
                          v384[v388] = v381;
                          v310 = &v384[v388 + 1];
                          if (v371 == (_BYTE *)v383)
                          {
                            *a1 = (unint64_t)&v384[v388];
                            a1[1] = (unint64_t)v310;
                            a1[2] = (unint64_t)v389;
                          }
                          else
                          {
                            v390 = &v371[~v383];
                            do
                            {
                              v391 = *--v371;
                              (v390--)[v388] = v391;
                            }
                            while (v371 != (_BYTE *)v383);
                            v371 = (_BYTE *)*a1;
                            *a1 = v388;
                            a1[1] = (unint64_t)v310;
                            a1[2] = (unint64_t)v389;
                            if (!v371)
                              goto LABEL_602;
                          }
                          operator delete(v371);
                        }
                        else
                        {
                          *v371 = v381;
                          v310 = v371 + 1;
                        }
LABEL_602:
                        a1[1] = (unint64_t)v310;
                        v320 = *(_DWORD *)&v9[4 * v35 + 8];
                        v392 = a1[2];
                        if ((unint64_t)v310 < v392)
                          goto LABEL_709;
                        v393 = *a1;
                        v394 = &v310[-*a1];
                        v395 = (unint64_t)(v394 + 1);
                        if ((uint64_t)(v394 + 1) < 0)
                          goto LABEL_768;
                        v396 = v392 - v393;
                        if (2 * v396 > v395)
                          v395 = 2 * v396;
                        if (v396 >= 0x3FFFFFFFFFFFFFFFLL)
                          v397 = 0x7FFFFFFFFFFFFFFFLL;
                        else
                          v397 = v395;
                        if (v397)
                          v327 = (unint64_t)operator new(v397);
                        else
                          v327 = 0;
                        v328 = &v394[v327];
                        v329 = (char *)(v327 + v397);
                        v398 = &v394[v327];
                        *v398 = v320;
                        v331 = v398 + 1;
                        if (v310 == (_BYTE *)v393)
                          goto LABEL_724;
                        v399 = &v310[~v393];
                        do
                        {
                          v400 = *--v310;
                          (v399--)[v327] = v400;
                        }
                        while (v310 != (_BYTE *)v393);
LABEL_722:
                        v310 = (_BYTE *)*a1;
                        *a1 = v327;
                        a1[1] = (unint64_t)v331;
                        a1[2] = (unint64_t)v329;
                        if (!v310)
                          goto LABEL_726;
                        goto LABEL_725;
                      }
                    }
                    operator delete(v336);
                    goto LABEL_548;
                  }
                }
                operator delete(v162);
                goto LABEL_364;
              case 16:
                v163 = (_BYTE *)a1[1];
                goto LABEL_513;
              case 32:
                v38 = (_BYTE *)a1[1];
                goto LABEL_567;
            }
            break;
          case 2:
            switch(a6)
            {
              case 8:
                v165 = (_BYTE *)a1[1];
                v164 = a1[2];
                if ((unint64_t)v165 >= v164)
                {
                  v180 = *a1;
                  v181 = &v165[-*a1];
                  v182 = (unint64_t)(v181 + 1);
                  if ((uint64_t)(v181 + 1) < 0)
                    goto LABEL_768;
                  v183 = v164 - v180;
                  if (2 * v183 > v182)
                    v182 = 2 * v183;
                  if (v183 >= 0x3FFFFFFFFFFFFFFFLL)
                    v184 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v184 = v182;
                  if (v184)
                    v185 = (char *)operator new(v184);
                  else
                    v185 = 0;
                  v209 = &v181[(_QWORD)v185];
                  v181[(_QWORD)v185] = v9[v35];
                  v166 = &v181[(_QWORD)v185 + 1];
                  if (v165 != (_BYTE *)v180)
                  {
                    v210 = &v165[~v180];
                    do
                    {
                      v211 = *--v165;
                      (v210--)[(_QWORD)v185] = v211;
                    }
                    while (v165 != (_BYTE *)v180);
                    v165 = (_BYTE *)*a1;
                    v209 = v185;
                  }
                  *a1 = (unint64_t)v209;
                  a1[1] = (unint64_t)v166;
                  a1[2] = (unint64_t)&v185[v184];
                  if (v165)
                    operator delete(v165);
                }
                else
                {
                  *v165 = v9[v35];
                  v166 = v165 + 1;
                }
                a1[1] = (unint64_t)v166;
                v212 = v35 + 1;
                v213 = a1[2];
                if ((unint64_t)v166 < v213)
                {
                  *v166 = v9[v212];
                  v214 = v166 + 1;
                  goto LABEL_376;
                }
                v215 = *a1;
                v216 = &v166[-*a1];
                v217 = (unint64_t)(v216 + 1);
                if ((uint64_t)(v216 + 1) < 0)
                  goto LABEL_768;
                v218 = v213 - v215;
                if (2 * v218 > v217)
                  v217 = 2 * v218;
                if (v218 >= 0x3FFFFFFFFFFFFFFFLL)
                  v219 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v219 = v217;
                if (v219)
                  v220 = (unint64_t)operator new(v219);
                else
                  v220 = 0;
                v227 = (char *)(v220 + v219);
                v216[v220] = v9[v212];
                v214 = &v216[v220 + 1];
                if (v166 == (_BYTE *)v215)
                {
                  *a1 = (unint64_t)&v216[v220];
                  a1[1] = (unint64_t)v214;
                  a1[2] = (unint64_t)v227;
                }
                else
                {
                  v228 = &v166[~v215];
                  do
                  {
                    v229 = *--v166;
                    (v228--)[v220] = v229;
                  }
                  while (v166 != (_BYTE *)v215);
                  v166 = (_BYTE *)*a1;
                  *a1 = v220;
                  a1[1] = (unint64_t)v214;
                  a1[2] = (unint64_t)v227;
                  if (!v166)
                  {
LABEL_376:
                    a1[1] = (unint64_t)v214;
                    v245 = a1[2];
                    if ((unint64_t)v214 >= v245)
                    {
                      v246 = *a1;
                      v247 = &v214[-*a1];
                      v248 = (unint64_t)(v247 + 1);
                      if ((uint64_t)(v247 + 1) < 0)
                        goto LABEL_768;
                      v249 = v245 - v246;
                      if (2 * v249 > v248)
                        v248 = 2 * v249;
                      if (v249 >= 0x3FFFFFFFFFFFFFFFLL)
                        v250 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v250 = v248;
                      if (v250)
                        v251 = (unint64_t)operator new(v250);
                      else
                        v251 = 0;
                      v258 = (char *)(v251 + v250);
                      v247[v251] = v9[v212];
                      v167 = &v247[v251 + 1];
                      if (v214 == (_BYTE *)v246)
                      {
                        *a1 = (unint64_t)&v247[v251];
                        a1[1] = (unint64_t)v167;
                        a1[2] = (unint64_t)v258;
                      }
                      else
                      {
                        v259 = &v214[~v246];
                        do
                        {
                          v260 = *--v214;
                          (v259--)[v251] = v260;
                        }
                        while (v214 != (_BYTE *)v246);
                        v214 = (_BYTE *)*a1;
                        *a1 = v251;
                        a1[1] = (unint64_t)v167;
                        a1[2] = (unint64_t)v258;
                        if (!v214)
                          goto LABEL_618;
                      }
                      operator delete(v214);
                    }
                    else
                    {
                      *v214 = v9[v212];
                      v167 = v214 + 1;
                    }
LABEL_618:
                    a1[1] = (unint64_t)v167;
LABEL_619:
                    v401 = *(_WORD *)&v9[2 * v35];
                    v402 = a1[2];
                    if ((unint64_t)v167 >= v402)
                    {
                      v404 = *a1;
                      v405 = &v167[-*a1];
                      v406 = (unint64_t)(v405 + 1);
                      if ((uint64_t)(v405 + 1) < 0)
                        goto LABEL_768;
                      v407 = v402 - v404;
                      if (2 * v407 > v406)
                        v406 = 2 * v407;
                      if (v407 >= 0x3FFFFFFFFFFFFFFFLL)
                        v408 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v408 = v406;
                      if (v408)
                        v409 = (char *)operator new(v408);
                      else
                        v409 = 0;
                      v410 = &v405[(_QWORD)v409];
                      v405[(_QWORD)v409] = v401;
                      v403 = &v405[(_QWORD)v409 + 1];
                      if (v167 != (_BYTE *)v404)
                      {
                        v411 = &v167[~v404];
                        do
                        {
                          v412 = *--v167;
                          (v411--)[(_QWORD)v409] = v412;
                        }
                        while (v167 != (_BYTE *)v404);
                        v167 = (_BYTE *)*a1;
                        v410 = v409;
                      }
                      *a1 = (unint64_t)v410;
                      a1[1] = (unint64_t)v403;
                      a1[2] = (unint64_t)&v409[v408];
                      if (v167)
                        operator delete(v167);
                    }
                    else
                    {
                      *v167 = v401;
                      v403 = v167 + 1;
                    }
                    a1[1] = (unint64_t)v403;
                    v413 = *(_WORD *)&v9[2 * v35 + 2];
                    v414 = a1[2];
                    if ((unint64_t)v403 < v414)
                    {
                      *v403 = v413;
                      v415 = v403 + 1;
                      goto LABEL_654;
                    }
                    v416 = *a1;
                    v417 = &v403[-*a1];
                    v418 = (unint64_t)(v417 + 1);
                    if ((uint64_t)(v417 + 1) < 0)
                      goto LABEL_768;
                    v419 = v414 - v416;
                    if (2 * v419 > v418)
                      v418 = 2 * v419;
                    if (v419 >= 0x3FFFFFFFFFFFFFFFLL)
                      v420 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v420 = v418;
                    if (v420)
                      v421 = (unint64_t)operator new(v420);
                    else
                      v421 = 0;
                    v422 = &v417[v421];
                    v423 = (char *)(v421 + v420);
                    v424 = &v417[v421];
                    *v424 = v413;
                    v415 = v424 + 1;
                    if (v403 == (_BYTE *)v416)
                    {
                      *a1 = (unint64_t)v422;
                      a1[1] = (unint64_t)v415;
                      a1[2] = (unint64_t)v423;
                    }
                    else
                    {
                      v425 = &v403[~v416];
                      do
                      {
                        v426 = *--v403;
                        (v425--)[v421] = v426;
                      }
                      while (v403 != (_BYTE *)v416);
                      v403 = (_BYTE *)*a1;
                      *a1 = v421;
                      a1[1] = (unint64_t)v415;
                      a1[2] = (unint64_t)v423;
                      if (!v403)
                      {
LABEL_654:
                        a1[1] = (unint64_t)v415;
                        v427 = *(_WORD *)&v9[2 * v35 + 2];
                        v428 = a1[2];
                        if ((unint64_t)v415 >= v428)
                        {
                          v429 = *a1;
                          v430 = &v415[-*a1];
                          v431 = (unint64_t)(v430 + 1);
                          if ((uint64_t)(v430 + 1) < 0)
                            goto LABEL_768;
                          v432 = v428 - v429;
                          if (2 * v432 > v431)
                            v431 = 2 * v432;
                          if (v432 >= 0x3FFFFFFFFFFFFFFFLL)
                            v433 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v433 = v431;
                          if (v433)
                            v434 = (unint64_t)operator new(v433);
                          else
                            v434 = 0;
                          v435 = (char *)(v434 + v433);
                          v430[v434] = v427;
                          v39 = &v430[v434 + 1];
                          if (v415 == (_BYTE *)v429)
                          {
                            *a1 = (unint64_t)&v430[v434];
                            a1[1] = (unint64_t)v39;
                            a1[2] = (unint64_t)v435;
                          }
                          else
                          {
                            v436 = &v415[~v429];
                            do
                            {
                              v437 = *--v415;
                              (v436--)[v434] = v437;
                            }
                            while (v415 != (_BYTE *)v429);
                            v415 = (_BYTE *)*a1;
                            *a1 = v434;
                            a1[1] = (unint64_t)v39;
                            a1[2] = (unint64_t)v435;
                            if (!v415)
                              goto LABEL_672;
                          }
                          operator delete(v415);
                        }
                        else
                        {
                          *v415 = v427;
                          v39 = v415 + 1;
                        }
LABEL_672:
                        a1[1] = (unint64_t)v39;
LABEL_673:
                        v438 = *(_DWORD *)&v9[4 * v35];
                        v439 = a1[2];
                        if ((unint64_t)v39 >= v439)
                        {
                          v441 = *a1;
                          v442 = &v39[-*a1];
                          v443 = (unint64_t)(v442 + 1);
                          if ((uint64_t)(v442 + 1) < 0)
                            goto LABEL_768;
                          v444 = v439 - v441;
                          if (2 * v444 > v443)
                            v443 = 2 * v444;
                          if (v444 >= 0x3FFFFFFFFFFFFFFFLL)
                            v445 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v445 = v443;
                          if (v445)
                            v446 = (char *)operator new(v445);
                          else
                            v446 = 0;
                          v447 = &v442[(_QWORD)v446];
                          v442[(_QWORD)v446] = v438;
                          v440 = &v442[(_QWORD)v446 + 1];
                          if (v39 != (_BYTE *)v441)
                          {
                            v448 = &v39[~v441];
                            do
                            {
                              v449 = *--v39;
                              (v448--)[(_QWORD)v446] = v449;
                            }
                            while (v39 != (_BYTE *)v441);
                            v39 = (_BYTE *)*a1;
                            v447 = v446;
                          }
                          *a1 = (unint64_t)v447;
                          a1[1] = (unint64_t)v440;
                          a1[2] = (unint64_t)&v446[v445];
                          if (v39)
                            operator delete(v39);
                        }
                        else
                        {
                          *v39 = v438;
                          v440 = v39 + 1;
                        }
                        a1[1] = (unint64_t)v440;
                        v450 = *(_DWORD *)&v9[4 * v35 + 4];
                        v451 = a1[2];
                        if ((unint64_t)v440 < v451)
                        {
                          *v440 = v450;
                          v310 = v440 + 1;
                          goto LABEL_708;
                        }
                        v452 = *a1;
                        v453 = &v440[-*a1];
                        v454 = (unint64_t)(v453 + 1);
                        if ((uint64_t)(v453 + 1) < 0)
                          goto LABEL_768;
                        v455 = v451 - v452;
                        if (2 * v455 > v454)
                          v454 = 2 * v455;
                        if (v455 >= 0x3FFFFFFFFFFFFFFFLL)
                          v456 = 0x7FFFFFFFFFFFFFFFLL;
                        else
                          v456 = v454;
                        if (v456)
                          v457 = (unint64_t)operator new(v456);
                        else
                          v457 = 0;
                        v458 = (char *)(v457 + v456);
                        v453[v457] = v450;
                        v310 = &v453[v457 + 1];
                        if (v440 == (_BYTE *)v452)
                        {
                          *a1 = (unint64_t)&v453[v457];
                          a1[1] = (unint64_t)v310;
                          a1[2] = (unint64_t)v458;
                        }
                        else
                        {
                          v459 = &v440[~v452];
                          do
                          {
                            v460 = *--v440;
                            (v459--)[v457] = v460;
                          }
                          while (v440 != (_BYTE *)v452);
                          v440 = (_BYTE *)*a1;
                          *a1 = v457;
                          a1[1] = (unint64_t)v310;
                          a1[2] = (unint64_t)v458;
                          if (!v440)
                          {
LABEL_708:
                            a1[1] = (unint64_t)v310;
                            v320 = *(_DWORD *)&v9[4 * v35 + 4];
                            v461 = a1[2];
                            if ((unint64_t)v310 < v461)
                              goto LABEL_709;
                            v462 = *a1;
                            v463 = &v310[-*a1];
                            v464 = (unint64_t)(v463 + 1);
                            if ((uint64_t)(v463 + 1) < 0)
LABEL_768:
                              sub_1DCAE4C44();
                            v465 = v461 - v462;
                            if (2 * v465 > v464)
                              v464 = 2 * v465;
                            if (v465 >= 0x3FFFFFFFFFFFFFFFLL)
                              v466 = 0x7FFFFFFFFFFFFFFFLL;
                            else
                              v466 = v464;
                            if (v466)
                              v327 = (unint64_t)operator new(v466);
                            else
                              v327 = 0;
                            v328 = &v463[v327];
                            v329 = (char *)(v327 + v466);
                            v467 = &v463[v327];
                            *v467 = v320;
                            v331 = v467 + 1;
                            if (v310 == (_BYTE *)v462)
                              goto LABEL_724;
                            v468 = &v310[~v462];
                            do
                            {
                              v469 = *--v310;
                              (v468--)[v327] = v469;
                            }
                            while (v310 != (_BYTE *)v462);
                            goto LABEL_722;
                          }
                        }
                        operator delete(v440);
                        goto LABEL_708;
                      }
                    }
                    operator delete(v403);
                    goto LABEL_654;
                  }
                }
                operator delete(v166);
                goto LABEL_376;
              case 16:
                v167 = (_BYTE *)a1[1];
                goto LABEL_619;
              case 32:
                v39 = (_BYTE *)a1[1];
                goto LABEL_673;
            }
            break;
          case 1:
            switch(a6)
            {
              case 8:
                v157 = (_BYTE *)a1[1];
                v156 = a1[2];
                if ((unint64_t)v157 >= v156)
                {
                  v168 = *a1;
                  v169 = &v157[-*a1];
                  v170 = (unint64_t)(v169 + 1);
                  if ((uint64_t)(v169 + 1) < 0)
                    goto LABEL_768;
                  v171 = v156 - v168;
                  if (2 * v171 > v170)
                    v170 = 2 * v171;
                  if (v171 >= 0x3FFFFFFFFFFFFFFFLL)
                    v172 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v172 = v170;
                  if (v172)
                    v173 = (char *)operator new(v172);
                  else
                    v173 = 0;
                  v186 = &v169[(_QWORD)v173];
                  v169[(_QWORD)v173] = v9[v35];
                  v158 = &v169[(_QWORD)v173 + 1];
                  if (v157 != (_BYTE *)v168)
                  {
                    v187 = &v157[~v168];
                    do
                    {
                      v188 = *--v157;
                      (v187--)[(_QWORD)v173] = v188;
                    }
                    while (v157 != (_BYTE *)v168);
                    v157 = (_BYTE *)*a1;
                    v186 = v173;
                  }
                  *a1 = (unint64_t)v186;
                  a1[1] = (unint64_t)v158;
                  a1[2] = (unint64_t)&v173[v172];
                  if (v157)
                    operator delete(v157);
                }
                else
                {
                  *v157 = v9[v35];
                  v158 = v157 + 1;
                }
                a1[1] = (unint64_t)v158;
                v189 = a1[2];
                if ((unint64_t)v158 < v189)
                {
                  *v158 = v9[v35];
                  v190 = v158 + 1;
                  goto LABEL_352;
                }
                v191 = *a1;
                v192 = &v158[-*a1];
                v193 = (unint64_t)(v192 + 1);
                if ((uint64_t)(v192 + 1) < 0)
                  goto LABEL_768;
                v194 = v189 - v191;
                if (2 * v194 > v193)
                  v193 = 2 * v194;
                if (v194 >= 0x3FFFFFFFFFFFFFFFLL)
                  v195 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v195 = v193;
                if (v195)
                  v196 = (unint64_t)operator new(v195);
                else
                  v196 = 0;
                v221 = (char *)(v196 + v195);
                v192[v196] = v9[v35];
                v190 = &v192[v196 + 1];
                if (v158 == (_BYTE *)v191)
                {
                  *a1 = (unint64_t)&v192[v196];
                  a1[1] = (unint64_t)v190;
                  a1[2] = (unint64_t)v221;
                }
                else
                {
                  v222 = &v158[~v191];
                  do
                  {
                    v223 = *--v158;
                    (v222--)[v196] = v223;
                  }
                  while (v158 != (_BYTE *)v191);
                  v158 = (_BYTE *)*a1;
                  *a1 = v196;
                  a1[1] = (unint64_t)v190;
                  a1[2] = (unint64_t)v221;
                  if (!v158)
                  {
LABEL_352:
                    a1[1] = (unint64_t)v190;
                    v230 = a1[2];
                    if ((unint64_t)v190 >= v230)
                    {
                      v231 = *a1;
                      v232 = &v190[-*a1];
                      v233 = (unint64_t)(v232 + 1);
                      if ((uint64_t)(v232 + 1) < 0)
                        goto LABEL_768;
                      v234 = v230 - v231;
                      if (2 * v234 > v233)
                        v233 = 2 * v234;
                      if (v234 >= 0x3FFFFFFFFFFFFFFFLL)
                        v235 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v235 = v233;
                      if (v235)
                        v236 = (unint64_t)operator new(v235);
                      else
                        v236 = 0;
                      v252 = (char *)(v236 + v235);
                      v232[v236] = v9[v35];
                      v159 = &v232[v236 + 1];
                      if (v190 == (_BYTE *)v231)
                      {
                        *a1 = (unint64_t)&v232[v236];
                        a1[1] = (unint64_t)v159;
                        a1[2] = (unint64_t)v252;
                      }
                      else
                      {
                        v253 = &v190[~v231];
                        do
                        {
                          v254 = *--v190;
                          (v253--)[v236] = v254;
                        }
                        while (v190 != (_BYTE *)v231);
                        v190 = (_BYTE *)*a1;
                        *a1 = v236;
                        a1[1] = (unint64_t)v159;
                        a1[2] = (unint64_t)v252;
                        if (!v190)
                          goto LABEL_406;
                      }
                      operator delete(v190);
                    }
                    else
                    {
                      *v190 = v9[v35];
                      v159 = v190 + 1;
                    }
LABEL_406:
                    a1[1] = (unint64_t)v159;
LABEL_407:
                    v261 = *(_WORD *)&v9[2 * v35];
                    v262 = a1[2];
                    if ((unint64_t)v159 >= v262)
                    {
                      v264 = *a1;
                      v265 = &v159[-*a1];
                      v266 = (unint64_t)(v265 + 1);
                      if ((uint64_t)(v265 + 1) < 0)
                        goto LABEL_768;
                      v267 = v262 - v264;
                      if (2 * v267 > v266)
                        v266 = 2 * v267;
                      if (v267 >= 0x3FFFFFFFFFFFFFFFLL)
                        v268 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v268 = v266;
                      if (v268)
                        v269 = (char *)operator new(v268);
                      else
                        v269 = 0;
                      v270 = &v265[(_QWORD)v269];
                      v265[(_QWORD)v269] = v261;
                      v263 = &v265[(_QWORD)v269 + 1];
                      if (v159 != (_BYTE *)v264)
                      {
                        v271 = &v159[~v264];
                        do
                        {
                          v272 = *--v159;
                          (v271--)[(_QWORD)v269] = v272;
                        }
                        while (v159 != (_BYTE *)v264);
                        v159 = (_BYTE *)*a1;
                        v270 = v269;
                      }
                      *a1 = (unint64_t)v270;
                      a1[1] = (unint64_t)v263;
                      a1[2] = (unint64_t)&v269[v268];
                      if (v159)
                        operator delete(v159);
                    }
                    else
                    {
                      *v159 = v261;
                      v263 = v159 + 1;
                    }
                    a1[1] = (unint64_t)v263;
                    v273 = *(_WORD *)&v9[2 * v35];
                    v274 = a1[2];
                    if ((unint64_t)v263 < v274)
                    {
                      *v263 = v273;
                      v275 = v263 + 1;
                      goto LABEL_442;
                    }
                    v276 = *a1;
                    v277 = &v263[-*a1];
                    v278 = (unint64_t)(v277 + 1);
                    if ((uint64_t)(v277 + 1) < 0)
                      goto LABEL_768;
                    v279 = v274 - v276;
                    if (2 * v279 > v278)
                      v278 = 2 * v279;
                    if (v279 >= 0x3FFFFFFFFFFFFFFFLL)
                      v280 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v280 = v278;
                    if (v280)
                      v281 = (unint64_t)operator new(v280);
                    else
                      v281 = 0;
                    v282 = (char *)(v281 + v280);
                    v277[v281] = v273;
                    v275 = &v277[v281 + 1];
                    if (v263 == (_BYTE *)v276)
                    {
                      *a1 = (unint64_t)&v277[v281];
                      a1[1] = (unint64_t)v275;
                      a1[2] = (unint64_t)v282;
                    }
                    else
                    {
                      v283 = &v263[~v276];
                      do
                      {
                        v284 = *--v263;
                        (v283--)[v281] = v284;
                      }
                      while (v263 != (_BYTE *)v276);
                      v263 = (_BYTE *)*a1;
                      *a1 = v281;
                      a1[1] = (unint64_t)v275;
                      a1[2] = (unint64_t)v282;
                      if (!v263)
                      {
LABEL_442:
                        a1[1] = (unint64_t)v275;
                        v285 = *(_WORD *)&v9[2 * v35];
                        v286 = a1[2];
                        if ((unint64_t)v275 >= v286)
                        {
                          v287 = *a1;
                          v288 = &v275[-*a1];
                          v289 = (unint64_t)(v288 + 1);
                          if ((uint64_t)(v288 + 1) < 0)
                            goto LABEL_768;
                          v290 = v286 - v287;
                          if (2 * v290 > v289)
                            v289 = 2 * v290;
                          if (v290 >= 0x3FFFFFFFFFFFFFFFLL)
                            v291 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v291 = v289;
                          if (v291)
                            v292 = (unint64_t)operator new(v291);
                          else
                            v292 = 0;
                          v293 = (char *)(v292 + v291);
                          v288[v292] = v285;
                          v37 = &v288[v292 + 1];
                          if (v275 == (_BYTE *)v287)
                          {
                            *a1 = (unint64_t)&v288[v292];
                            a1[1] = (unint64_t)v37;
                            a1[2] = (unint64_t)v293;
                          }
                          else
                          {
                            v294 = &v275[~v287];
                            do
                            {
                              v295 = *--v275;
                              (v294--)[v292] = v295;
                            }
                            while (v275 != (_BYTE *)v287);
                            v275 = (_BYTE *)*a1;
                            *a1 = v292;
                            a1[1] = (unint64_t)v37;
                            a1[2] = (unint64_t)v293;
                            if (!v275)
                              goto LABEL_460;
                          }
                          operator delete(v275);
                        }
                        else
                        {
                          *v275 = v285;
                          v37 = v275 + 1;
                        }
LABEL_460:
                        a1[1] = (unint64_t)v37;
LABEL_461:
                        v296 = *(_DWORD *)&v9[4 * v35];
                        v297 = a1[2];
                        if ((unint64_t)v37 >= v297)
                        {
                          v299 = *a1;
                          v300 = &v37[-*a1];
                          v301 = (unint64_t)(v300 + 1);
                          if ((uint64_t)(v300 + 1) < 0)
                            goto LABEL_768;
                          v302 = v297 - v299;
                          if (2 * v302 > v301)
                            v301 = 2 * v302;
                          if (v302 >= 0x3FFFFFFFFFFFFFFFLL)
                            v303 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v303 = v301;
                          if (v303)
                            v304 = (char *)operator new(v303);
                          else
                            v304 = 0;
                          v305 = &v300[(_QWORD)v304];
                          v300[(_QWORD)v304] = v296;
                          v298 = &v300[(_QWORD)v304 + 1];
                          if (v37 != (_BYTE *)v299)
                          {
                            v306 = &v37[~v299];
                            do
                            {
                              v307 = *--v37;
                              (v306--)[(_QWORD)v304] = v307;
                            }
                            while (v37 != (_BYTE *)v299);
                            v37 = (_BYTE *)*a1;
                            v305 = v304;
                          }
                          *a1 = (unint64_t)v305;
                          a1[1] = (unint64_t)v298;
                          a1[2] = (unint64_t)&v304[v303];
                          if (v37)
                            operator delete(v37);
                        }
                        else
                        {
                          *v37 = v296;
                          v298 = v37 + 1;
                        }
                        a1[1] = (unint64_t)v298;
                        v308 = *(_DWORD *)&v9[4 * v35];
                        v309 = a1[2];
                        if ((unint64_t)v298 < v309)
                        {
                          *v298 = v308;
                          v310 = v298 + 1;
                          goto LABEL_496;
                        }
                        v311 = *a1;
                        v312 = &v298[-*a1];
                        v313 = (unint64_t)(v312 + 1);
                        if ((uint64_t)(v312 + 1) < 0)
                          goto LABEL_768;
                        v314 = v309 - v311;
                        if (2 * v314 > v313)
                          v313 = 2 * v314;
                        if (v314 >= 0x3FFFFFFFFFFFFFFFLL)
                          v315 = 0x7FFFFFFFFFFFFFFFLL;
                        else
                          v315 = v313;
                        if (v315)
                          v316 = (unint64_t)operator new(v315);
                        else
                          v316 = 0;
                        v317 = (char *)(v316 + v315);
                        v312[v316] = v308;
                        v310 = &v312[v316 + 1];
                        if (v298 == (_BYTE *)v311)
                        {
                          *a1 = (unint64_t)&v312[v316];
                          a1[1] = (unint64_t)v310;
                          a1[2] = (unint64_t)v317;
                        }
                        else
                        {
                          v318 = &v298[~v311];
                          do
                          {
                            v319 = *--v298;
                            (v318--)[v316] = v319;
                          }
                          while (v298 != (_BYTE *)v311);
                          v298 = (_BYTE *)*a1;
                          *a1 = v316;
                          a1[1] = (unint64_t)v310;
                          a1[2] = (unint64_t)v317;
                          if (!v298)
                          {
LABEL_496:
                            a1[1] = (unint64_t)v310;
                            v320 = *(_DWORD *)&v9[4 * v35];
                            v321 = a1[2];
                            if ((unint64_t)v310 >= v321)
                            {
                              v322 = *a1;
                              v323 = &v310[-*a1];
                              v324 = (unint64_t)(v323 + 1);
                              if ((uint64_t)(v323 + 1) < 0)
                                goto LABEL_768;
                              v325 = v321 - v322;
                              if (2 * v325 > v324)
                                v324 = 2 * v325;
                              if (v325 >= 0x3FFFFFFFFFFFFFFFLL)
                                v326 = 0x7FFFFFFFFFFFFFFFLL;
                              else
                                v326 = v324;
                              if (v326)
                                v327 = (unint64_t)operator new(v326);
                              else
                                v327 = 0;
                              v328 = &v323[v327];
                              v329 = (char *)(v327 + v326);
                              v330 = &v323[v327];
                              *v330 = v320;
                              v331 = v330 + 1;
                              if (v310 != (_BYTE *)v322)
                              {
                                v332 = &v310[~v322];
                                do
                                {
                                  v333 = *--v310;
                                  (v332--)[v327] = v333;
                                }
                                while (v310 != (_BYTE *)v322);
                                goto LABEL_722;
                              }
LABEL_724:
                              *a1 = (unint64_t)v328;
                              a1[1] = (unint64_t)v331;
                              a1[2] = (unint64_t)v329;
LABEL_725:
                              operator delete(v310);
                              goto LABEL_726;
                            }
LABEL_709:
                            *v310 = v320;
                            v331 = v310 + 1;
LABEL_726:
                            a1[1] = (unint64_t)v331;
                            goto LABEL_727;
                          }
                        }
                        operator delete(v298);
                        goto LABEL_496;
                      }
                    }
                    operator delete(v263);
                    goto LABEL_442;
                  }
                }
                operator delete(v158);
                goto LABEL_352;
              case 16:
                v159 = (_BYTE *)a1[1];
                goto LABEL_407;
              case 32:
                v37 = (_BYTE *)a1[1];
                goto LABEL_461;
            }
            break;
          default:
            if (a6 != 32)
            {
              if (a6 != 16)
              {
                if (a6 != 8 || v36 < 3)
                  break;
                v40 = 0;
                v41 = (_BYTE *)a1[1];
                while (2)
                {
                  v42 = a1[2];
                  if ((unint64_t)v41 >= v42)
                  {
                    v44 = *a1;
                    v45 = &v41[-*a1];
                    v46 = (unint64_t)(v45 + 1);
                    if ((uint64_t)(v45 + 1) < 0)
                      goto LABEL_768;
                    v47 = v42 - v44;
                    if (2 * v47 > v46)
                      v46 = 2 * v47;
                    if (v47 >= 0x3FFFFFFFFFFFFFFFLL)
                      v48 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v48 = v46;
                    if (v48)
                      v49 = (char *)operator new(v48);
                    else
                      v49 = 0;
                    v50 = &v45[(_QWORD)v49];
                    v45[(_QWORD)v49] = v9[v35];
                    v43 = &v45[(_QWORD)v49 + 1];
                    if (v41 != (_BYTE *)v44)
                    {
                      v51 = &v41[~v44];
                      do
                      {
                        v52 = *--v41;
                        (v51--)[(_QWORD)v49] = v52;
                      }
                      while (v41 != (_BYTE *)v44);
                      v41 = (_BYTE *)*a1;
                      v50 = v49;
                    }
                    *a1 = (unint64_t)v50;
                    a1[1] = (unint64_t)v43;
                    a1[2] = (unint64_t)&v49[v48];
                    if (v41)
                      operator delete(v41);
                  }
                  else
                  {
                    *v41 = v9[v35];
                    v43 = v41 + 1;
                  }
                  a1[1] = (unint64_t)v43;
                  v53 = v40 + v35 + 1;
                  v54 = a1[2];
                  if ((unint64_t)v43 < v54)
                  {
                    *v43 = v9[v53];
                    v55 = v43 + 1;
                    goto LABEL_116;
                  }
                  v56 = *a1;
                  v57 = &v43[-*a1];
                  v58 = (unint64_t)(v57 + 1);
                  if ((uint64_t)(v57 + 1) < 0)
                    goto LABEL_768;
                  v59 = v54 - v56;
                  if (2 * v59 > v58)
                    v58 = 2 * v59;
                  if (v59 >= 0x3FFFFFFFFFFFFFFFLL)
                    v60 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v60 = v58;
                  if (v60)
                    v61 = (unint64_t)operator new(v60);
                  else
                    v61 = 0;
                  v62 = (char *)(v61 + v60);
                  v57[v61] = v9[v53];
                  v55 = &v57[v61 + 1];
                  if (v43 == (_BYTE *)v56)
                  {
                    *a1 = (unint64_t)&v57[v61];
                    a1[1] = (unint64_t)v55;
                    a1[2] = (unint64_t)v62;
                    v14 = a4;
                  }
                  else
                  {
                    v63 = &v43[~v56];
                    v14 = a4;
                    do
                    {
                      v64 = *--v43;
                      (v63--)[v61] = v64;
                    }
                    while (v43 != (_BYTE *)v56);
                    v43 = (_BYTE *)*a1;
                    *a1 = v61;
                    a1[1] = (unint64_t)v55;
                    a1[2] = (unint64_t)v62;
                    if (!v43)
                    {
LABEL_116:
                      a1[1] = (unint64_t)v55;
                      v65 = v40 + v35 + 2;
                      v66 = a1[2];
                      if ((unint64_t)v55 < v66)
                      {
                        *v55 = v9[v65];
                        v41 = v55 + 1;
                        goto LABEL_134;
                      }
                      v67 = *a1;
                      v68 = &v55[-*a1];
                      v69 = (unint64_t)(v68 + 1);
                      if ((uint64_t)(v68 + 1) < 0)
                        goto LABEL_768;
                      v70 = v66 - v67;
                      if (2 * v70 > v69)
                        v69 = 2 * v70;
                      if (v70 >= 0x3FFFFFFFFFFFFFFFLL)
                        v71 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v71 = v69;
                      if (v71)
                        v72 = (unint64_t)operator new(v71);
                      else
                        v72 = 0;
                      v73 = (char *)(v72 + v71);
                      v68[v72] = v9[v65];
                      v41 = &v68[v72 + 1];
                      if (v55 == (_BYTE *)v67)
                      {
                        *a1 = (unint64_t)&v68[v72];
                        a1[1] = (unint64_t)v41;
                        a1[2] = (unint64_t)v73;
                      }
                      else
                      {
                        v74 = &v55[~v67];
                        do
                        {
                          v75 = *--v55;
                          (v74--)[v72] = v75;
                        }
                        while (v55 != (_BYTE *)v67);
                        v55 = (_BYTE *)*a1;
                        *a1 = v72;
                        a1[1] = (unint64_t)v41;
                        a1[2] = (unint64_t)v73;
                        if (!v55)
                        {
LABEL_134:
                          a1[1] = (unint64_t)v41;
                          ++v40;
                          v36 = v499[v14];
                          if (v40 >= v36 - 2)
                            goto LABEL_135;
                          continue;
                        }
                      }
                      operator delete(v55);
                      goto LABEL_134;
                    }
                  }
                  break;
                }
                operator delete(v43);
                goto LABEL_116;
              }
LABEL_135:
              if (v36 < 3)
                break;
              v76 = 0;
              v77 = (_BYTE *)a1[1];
              while (2)
              {
                v78 = *(_WORD *)&v9[2 * v35];
                v79 = a1[2];
                if ((unint64_t)v77 >= v79)
                {
                  v81 = *a1;
                  v82 = &v77[-*a1];
                  v83 = (unint64_t)(v82 + 1);
                  if ((uint64_t)(v82 + 1) < 0)
                    goto LABEL_768;
                  v84 = v79 - v81;
                  if (2 * v84 > v83)
                    v83 = 2 * v84;
                  if (v84 >= 0x3FFFFFFFFFFFFFFFLL)
                    v85 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v85 = v83;
                  if (v85)
                    v86 = (char *)operator new(v85);
                  else
                    v86 = 0;
                  v87 = &v82[(_QWORD)v86];
                  v88 = &v82[(_QWORD)v86];
                  *v88 = v78;
                  v80 = v88 + 1;
                  if (v77 != (_BYTE *)v81)
                  {
                    v89 = &v77[~v81];
                    do
                    {
                      v90 = *--v77;
                      (v89--)[(_QWORD)v86] = v90;
                    }
                    while (v77 != (_BYTE *)v81);
                    v77 = (_BYTE *)*a1;
                    v87 = v86;
                  }
                  *a1 = (unint64_t)v87;
                  a1[1] = (unint64_t)v80;
                  a1[2] = (unint64_t)&v86[v85];
                  if (v77)
                    operator delete(v77);
                }
                else
                {
                  *v77 = v78;
                  v80 = v77 + 1;
                }
                a1[1] = (unint64_t)v80;
                v91 = *(_WORD *)&v9[2 * v76 + 2 + 2 * v35];
                v92 = a1[2];
                if ((unint64_t)v80 < v92)
                {
                  *v80 = v91;
                  v93 = v80 + 1;
                  v14 = a4;
                  goto LABEL_172;
                }
                v94 = *a1;
                v95 = &v80[-*a1];
                v96 = (unint64_t)(v95 + 1);
                if ((uint64_t)(v95 + 1) < 0)
                  goto LABEL_768;
                v97 = v92 - v94;
                if (2 * v97 > v96)
                  v96 = 2 * v97;
                if (v97 >= 0x3FFFFFFFFFFFFFFFLL)
                  v98 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v98 = v96;
                if (v98)
                  v99 = (unint64_t)operator new(v98);
                else
                  v99 = 0;
                v100 = &v95[v99];
                v101 = (char *)(v99 + v98);
                v102 = &v95[v99];
                *v102 = v91;
                v93 = v102 + 1;
                if (v80 == (_BYTE *)v94)
                {
                  *a1 = (unint64_t)v100;
                  a1[1] = (unint64_t)v93;
                  a1[2] = (unint64_t)v101;
                  v14 = a4;
                }
                else
                {
                  v103 = &v80[~v94];
                  v14 = a4;
                  do
                  {
                    v104 = *--v80;
                    (v103--)[v99] = v104;
                  }
                  while (v80 != (_BYTE *)v94);
                  v80 = (_BYTE *)*a1;
                  *a1 = v99;
                  a1[1] = (unint64_t)v93;
                  a1[2] = (unint64_t)v101;
                  if (!v80)
                  {
LABEL_172:
                    a1[1] = (unint64_t)v93;
                    v105 = *(_WORD *)&v9[2 * v76 + 4 + 2 * v35];
                    v106 = a1[2];
                    if ((unint64_t)v93 < v106)
                    {
                      *v93 = v105;
                      v77 = v93 + 1;
                      goto LABEL_190;
                    }
                    v107 = *a1;
                    v108 = &v93[-*a1];
                    v109 = (unint64_t)(v108 + 1);
                    if ((uint64_t)(v108 + 1) < 0)
                      goto LABEL_768;
                    v110 = v106 - v107;
                    if (2 * v110 > v109)
                      v109 = 2 * v110;
                    if (v110 >= 0x3FFFFFFFFFFFFFFFLL)
                      v111 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v111 = v109;
                    if (v111)
                      v112 = (unint64_t)operator new(v111);
                    else
                      v112 = 0;
                    v113 = (char *)(v112 + v111);
                    v108[v112] = v105;
                    v77 = &v108[v112 + 1];
                    if (v93 == (_BYTE *)v107)
                    {
                      *a1 = (unint64_t)&v108[v112];
                      a1[1] = (unint64_t)v77;
                      a1[2] = (unint64_t)v113;
                    }
                    else
                    {
                      v114 = &v93[~v107];
                      do
                      {
                        v115 = *--v93;
                        (v114--)[v112] = v115;
                      }
                      while (v93 != (_BYTE *)v107);
                      v93 = (_BYTE *)*a1;
                      *a1 = v112;
                      a1[1] = (unint64_t)v77;
                      a1[2] = (unint64_t)v113;
                      if (!v93)
                      {
LABEL_190:
                        a1[1] = (unint64_t)v77;
                        ++v76;
                        v36 = v499[v14];
                        if (v76 >= v36 - 2)
                          goto LABEL_191;
                        continue;
                      }
                    }
                    operator delete(v93);
                    goto LABEL_190;
                  }
                }
                break;
              }
              operator delete(v80);
              goto LABEL_172;
            }
LABEL_191:
            if (v36 < 3)
              break;
            v116 = 0;
            v117 = (_BYTE *)a1[1];
LABEL_193:
            v118 = *(_DWORD *)&v9[4 * v35];
            v119 = a1[2];
            if ((unint64_t)v117 >= v119)
            {
              v121 = *a1;
              v122 = &v117[-*a1];
              v123 = (unint64_t)(v122 + 1);
              if ((uint64_t)(v122 + 1) < 0)
                goto LABEL_768;
              v124 = v119 - v121;
              if (2 * v124 > v123)
                v123 = 2 * v124;
              if (v124 >= 0x3FFFFFFFFFFFFFFFLL)
                v125 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v125 = v123;
              if (v125)
                v126 = (char *)operator new(v125);
              else
                v126 = 0;
              v127 = &v122[(_QWORD)v126];
              v128 = &v122[(_QWORD)v126];
              *v128 = v118;
              v120 = v128 + 1;
              if (v117 != (_BYTE *)v121)
              {
                v129 = &v117[~v121];
                do
                {
                  v130 = *--v117;
                  (v129--)[(_QWORD)v126] = v130;
                }
                while (v117 != (_BYTE *)v121);
                v117 = (_BYTE *)*a1;
                v127 = v126;
              }
              *a1 = (unint64_t)v127;
              a1[1] = (unint64_t)v120;
              a1[2] = (unint64_t)&v126[v125];
              if (v117)
                operator delete(v117);
            }
            else
            {
              *v117 = v118;
              v120 = v117 + 1;
            }
            a1[1] = (unint64_t)v120;
            v131 = *(_DWORD *)&v9[4 * v116 + 4 + 4 * v35];
            v132 = a1[2];
            if ((unint64_t)v120 < v132)
            {
              *v120 = v131;
              v133 = v120 + 1;
              v14 = a4;
              goto LABEL_228;
            }
            v134 = *a1;
            v135 = &v120[-*a1];
            v136 = (unint64_t)(v135 + 1);
            if ((uint64_t)(v135 + 1) < 0)
              goto LABEL_768;
            v137 = v132 - v134;
            if (2 * v137 > v136)
              v136 = 2 * v137;
            if (v137 >= 0x3FFFFFFFFFFFFFFFLL)
              v138 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v138 = v136;
            if (v138)
              v139 = (unint64_t)operator new(v138);
            else
              v139 = 0;
            v140 = &v135[v139];
            v141 = (char *)(v139 + v138);
            v142 = &v135[v139];
            *v142 = v131;
            v133 = v142 + 1;
            if (v120 == (_BYTE *)v134)
            {
              *a1 = (unint64_t)v140;
              a1[1] = (unint64_t)v133;
              a1[2] = (unint64_t)v141;
              v14 = a4;
            }
            else
            {
              v143 = &v120[~v134];
              v14 = a4;
              do
              {
                v144 = *--v120;
                (v143--)[v139] = v144;
              }
              while (v120 != (_BYTE *)v134);
              v120 = (_BYTE *)*a1;
              *a1 = v139;
              a1[1] = (unint64_t)v133;
              a1[2] = (unint64_t)v141;
              if (!v120)
              {
LABEL_228:
                a1[1] = (unint64_t)v133;
                v145 = *(_DWORD *)&v9[4 * v116 + 8 + 4 * v35];
                v146 = a1[2];
                if ((unint64_t)v133 < v146)
                {
                  *v133 = v145;
                  v117 = v133 + 1;
                  goto LABEL_246;
                }
                v147 = *a1;
                v148 = &v133[-*a1];
                v149 = (unint64_t)(v148 + 1);
                if ((uint64_t)(v148 + 1) < 0)
                  goto LABEL_768;
                v150 = v146 - v147;
                if (2 * v150 > v149)
                  v149 = 2 * v150;
                if (v150 >= 0x3FFFFFFFFFFFFFFFLL)
                  v151 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v151 = v149;
                if (v151)
                  v152 = (unint64_t)operator new(v151);
                else
                  v152 = 0;
                v153 = (char *)(v152 + v151);
                v148[v152] = v145;
                v117 = &v148[v152 + 1];
                if (v133 == (_BYTE *)v147)
                {
                  *a1 = (unint64_t)&v148[v152];
                  a1[1] = (unint64_t)v117;
                  a1[2] = (unint64_t)v153;
                }
                else
                {
                  v154 = &v133[~v147];
                  do
                  {
                    v155 = *--v133;
                    (v154--)[v152] = v155;
                  }
                  while (v133 != (_BYTE *)v147);
                  v133 = (_BYTE *)*a1;
                  *a1 = v152;
                  a1[1] = (unint64_t)v117;
                  a1[2] = (unint64_t)v153;
                  if (!v133)
                  {
LABEL_246:
                    a1[1] = (unint64_t)v117;
                    if (++v116 >= v499[v14] - 2)
                      break;
                    goto LABEL_193;
                  }
                }
                operator delete(v133);
                goto LABEL_246;
              }
            }
            operator delete(v120);
            goto LABEL_228;
        }
LABEL_727:
        v35 += v499[v14];
        v34 = (char *)(v499 + 1);
      }
      while (v499 + 1 != a5);
    }
  }
}

void sub_1DCC17310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1DCC17338(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int *v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unsigned int v17;
  _WORD *v18;
  __int16 v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  _WORD *v23;
  int v24;
  _WORD *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  __int16 v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int16 v47;
  __int16 v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  __int16 v58;
  __int16 v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  __int16 v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  __int16 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  __int16 v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  __int16 v102;
  uint64_t v103;
  char *v104;
  int v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  __int16 v116;
  int v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  __int16 v127;
  int v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  __int16 v137;
  __int16 v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  __int16 v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  __int16 v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  __int16 v175;
  __int16 v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  __int16 v186;
  __int16 v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  __int16 v197;
  __int16 v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  __int16 v208;
  __int16 v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  __int16 v218;
  __int16 v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  __int16 v228;
  __int16 v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  __int16 v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  __int16 v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  __int16 v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  char *v266;
  char *v267;
  __int16 v268;
  int v269;
  char *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  __int16 v280;
  int v281;
  char *v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  char *v289;
  char *v290;
  __int16 v291;
  int v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  char *v299;
  char *v300;
  _WORD *v301;
  __int16 v302;
  char *v303;
  __int16 v304;
  char *v305;
  char *v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  char *v313;
  char *v314;
  __int16 v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  uint64_t v323;
  char *v324;
  char *v325;
  __int16 v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  char *v334;
  char *v335;
  __int16 v336;
  int v337;
  char *v338;
  char *v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unint64_t v344;
  uint64_t v345;
  char *v346;
  char *v347;
  __int16 v348;
  int v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  uint64_t v355;
  char *v356;
  char *v357;
  __int16 v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  unint64_t v362;
  __int16 v363;
  char *v364;
  __int16 v365;
  char *v366;
  char *v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  uint64_t v373;
  char *v374;
  char *v375;
  __int16 v376;
  uint64_t v377;
  char *v378;
  char *v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  unint64_t v383;
  uint64_t v384;
  char *v385;
  char *v386;
  __int16 v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t v392;
  uint64_t v393;
  char *v394;
  char *v395;
  __int16 v396;
  int v397;
  char *v398;
  char *v399;
  char *v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  uint64_t v405;
  char *v406;
  char *v407;
  __int16 v408;
  int v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  uint64_t v415;
  char *v416;
  char *v417;
  __int16 v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  __int16 v423;
  void *v424;
  const char *v425;
  uint64_t v426;
  const void *v427;
  size_t v428;
  unint64_t v429;
  const char *v430;
  uint64_t v431;
  const char *v432;
  uint64_t v433;
  unsigned __int8 *v434;
  _WORD *v435;
  uint64_t v436;
  __int16 v437;
  const char *v438;
  uint64_t v439;
  int *v440;
  _WORD *v441;
  uint64_t v442;
  int v443;
  const char *v444;
  uint64_t v445;
  __int16 *v446;
  _WORD *v447;
  uint64_t v448;
  __int16 v449;
  id v453;
  id v454;
  id v455;

  v8 = a3;
  v9 = (int *)a2;
  v11 = a6 & 0xFFFFFFFFFFFFFFF8;
  if ((a6 & 0xFFFFFFFFFFFFFFF8) == 0x10 && a7 == a8)
  {
    sub_1DCB2A704(a1, a3);
    memcpy(*(void **)a1, v9, 2 * v8);
    return;
  }
  v13 = a6;
  if (!a6)
  {
    NSLog(CFSTR("Couldn't copy index buffer because invalid indices"));
    return;
  }
  v14 = a4;
  if (__ROR8__(a6, 3) != 4 || !a3)
  {
LABEL_11:
    if (a7 == a8)
    {
      sub_1DCB2A704(a1, a3);
      if (v13 == 32)
      {
        if (v8)
        {
          v23 = *(_WORD **)a1;
          do
          {
            v24 = *v9++;
            *v23++ = v24;
            --v8;
          }
          while (v8);
        }
      }
      else if (v13 == 16)
      {
        if (v8)
        {
          v25 = *(_WORD **)a1;
          do
          {
            v26 = *(_WORD *)v9;
            v9 = (int *)((char *)v9 + 2);
            *v25++ = v26;
            --v8;
          }
          while (v8);
        }
      }
      else if (v13 == 8 && v8)
      {
        v18 = *(_WORD **)a1;
        do
        {
          v19 = *(unsigned __int8 *)v9;
          v9 = (int *)((char *)v9 + 1);
          *v18++ = v19;
          --v8;
        }
        while (v8);
      }
      return;
    }
    if (a7 == 3 && a8 == 2)
    {
      switch(a6)
      {
        case 32:
          v20 = sub_1DCC15218(a2, a3);
          sub_1DCC1B040((uint64_t)v9, v8, 2 * v20);
          v21 = objc_claimAutoreleasedReturnValue();
          break;
        case 16:
          v20 = sub_1DCC15198(a2, a3);
          sub_1DCC1AF1C((uint64_t)v9, v8, 2 * v20);
          v21 = objc_claimAutoreleasedReturnValue();
          break;
        case 8:
          v20 = sub_1DCC15118(a2, a3);
          sub_1DCC1ADF4((uint64_t)v9, v8, 2 * v20);
          v21 = objc_claimAutoreleasedReturnValue();
          break;
        default:
          goto LABEL_698;
      }
      if (v21)
      {
        v453 = (id)v21;
        sub_1DCB2A704(a1, v20);
        v424 = *(void **)a1;
        v454 = objc_retainAutorelease(v453);
        v427 = (const void *)objc_msgSend_bytes(v454, v425, v426);
        v428 = 2 * v20;
        goto LABEL_706;
      }
LABEL_698:
      NSLog(CFSTR("Couldn't create buffer to copy indices"));
      return;
    }
    if (a7 == 4 && a8 == 2)
    {
      switch(a6)
      {
        case 32:
          sub_1DCC1B2F8(a2, a3);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          break;
        case 16:
          sub_1DCC1B230(a2, a3);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          break;
        case 8:
          sub_1DCC1B164(a2, a3);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          break;
        default:
          v22 = 0;
          goto LABEL_708;
      }
      v455 = v22;
      if (!v22)
      {
LABEL_708:

        return;
      }
      v429 = 3 * (v8 >> 1);
      sub_1DCB2A704(a1, v429);
      if (v11 != 16)
      {
        if (v13 == 32)
        {
          v454 = objc_retainAutorelease(v455);
          v440 = (int *)objc_msgSend_bytes(v454, v438, v439);
          if (v8 >= 2)
          {
            v441 = *(_WORD **)a1;
            if (v429 <= 1)
              v442 = 1;
            else
              v442 = 3 * (v8 >> 1);
            do
            {
              v443 = *v440++;
              *v441++ = v443;
              --v442;
            }
            while (v442);
          }
        }
        else if (v13 == 16)
        {
          v454 = objc_retainAutorelease(v455);
          v446 = (__int16 *)objc_msgSend_bytes(v454, v444, v445);
          if (v8 >= 2)
          {
            v447 = *(_WORD **)a1;
            if (v429 <= 1)
              v448 = 1;
            else
              v448 = 3 * (v8 >> 1);
            do
            {
              v449 = *v446++;
              *v447++ = v449;
              --v448;
            }
            while (v448);
          }
        }
        else
        {
          v454 = objc_retainAutorelease(v455);
          v434 = (unsigned __int8 *)objc_msgSend_bytes(v454, v432, v433);
          if (v8 >= 2)
          {
            v435 = *(_WORD **)a1;
            if (v429 <= 1)
              v436 = 1;
            else
              v436 = 3 * (v8 >> 1);
            do
            {
              v437 = *v434++;
              *v435++ = v437;
              --v436;
            }
            while (v436);
          }
        }
        goto LABEL_707;
      }
      v424 = *(void **)a1;
      v454 = objc_retainAutorelease(v455);
      v427 = (const void *)objc_msgSend_bytes(v454, v430, v431);
      v428 = 6 * (v8 >> 1);
LABEL_706:
      memcpy(v424, v427, v428);
LABEL_707:
      v22 = v454;
      goto LABEL_708;
    }
    if (a7 != 5 || a8 != 2)
    {
      NSLog(CFSTR("Couldn't copy index data data due to geometry type mismatch"));
      return;
    }
    if (!a5)
      return;
    v27 = 0;
    v28 = 0;
    v29 = (char **)(a1 + 16);
    while (1)
    {
      LODWORD(v30) = *(unsigned __int8 *)(v14 + v27);
      switch((_DWORD)v30)
      {
        case 3:
          switch(v13)
          {
            case 8:
              v143 = *((unsigned __int8 *)v9 + v28);
              v145 = *(char **)(a1 + 8);
              v144 = *(char **)(a1 + 16);
              if (v145 >= v144)
              {
                v160 = *(char **)a1;
                v161 = (uint64_t)&v145[-*(_QWORD *)a1];
                if (v161 <= -3)
                  goto LABEL_730;
                v162 = v161 >> 1;
                v163 = v144 - v160;
                if (v163 <= (v161 >> 1) + 1)
                  v164 = v162 + 1;
                else
                  v164 = v163;
                if (v163 >= 0x7FFFFFFFFFFFFFFELL)
                  v165 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v165 = v164;
                if (v165)
                {
                  v166 = (char *)sub_1DCB0DAEC(a1 + 16, v165);
                  v160 = *(char **)a1;
                  v145 = *(char **)(a1 + 8);
                }
                else
                {
                  v166 = 0;
                }
                v185 = &v166[2 * v162];
                *(_WORD *)v185 = v143;
                v146 = v185 + 2;
                while (v145 != v160)
                {
                  v186 = *((_WORD *)v145 - 1);
                  v145 -= 2;
                  *((_WORD *)v185 - 1) = v186;
                  v185 -= 2;
                }
                v144 = &v166[2 * v165];
                *(_QWORD *)a1 = v185;
                *(_QWORD *)(a1 + 8) = v146;
                *(_QWORD *)(a1 + 16) = v144;
                if (v160)
                {
                  operator delete(v160);
                  v144 = *v29;
                }
              }
              else
              {
                *(_WORD *)v145 = v143;
                v146 = v145 + 2;
              }
              *(_QWORD *)(a1 + 8) = v146;
              v187 = *((unsigned __int8 *)v9 + v28 + 1);
              if (v146 >= v144)
              {
                v189 = *(char **)a1;
                v190 = (uint64_t)&v146[-*(_QWORD *)a1];
                if (v190 <= -3)
                  goto LABEL_730;
                v191 = v190 >> 1;
                v192 = v144 - v189;
                if (v192 <= (v190 >> 1) + 1)
                  v193 = v191 + 1;
                else
                  v193 = v192;
                if (v192 >= 0x7FFFFFFFFFFFFFFELL)
                  v194 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v194 = v193;
                if (v194)
                {
                  v195 = (char *)sub_1DCB0DAEC(a1 + 16, v194);
                  v189 = *(char **)a1;
                  v146 = *(char **)(a1 + 8);
                }
                else
                {
                  v195 = 0;
                }
                v217 = &v195[2 * v191];
                *(_WORD *)v217 = v187;
                v188 = v217 + 2;
                while (v146 != v189)
                {
                  v218 = *((_WORD *)v146 - 1);
                  v146 -= 2;
                  *((_WORD *)v217 - 1) = v218;
                  v217 -= 2;
                }
                v144 = &v195[2 * v194];
                *(_QWORD *)a1 = v217;
                *(_QWORD *)(a1 + 8) = v188;
                *(_QWORD *)(a1 + 16) = v144;
                if (v189)
                {
                  operator delete(v189);
                  v144 = *v29;
                }
              }
              else
              {
                *(_WORD *)v146 = v187;
                v188 = v146 + 2;
              }
              *(_QWORD *)(a1 + 8) = v188;
              v219 = *((unsigned __int8 *)v9 + v28 + 2);
              if (v188 >= v144)
              {
                v220 = *(char **)a1;
                v221 = (uint64_t)&v188[-*(_QWORD *)a1];
                if (v221 <= -3)
                  goto LABEL_730;
                v222 = v221 >> 1;
                v223 = v144 - v220;
                if (v223 <= (v221 >> 1) + 1)
                  v224 = v222 + 1;
                else
                  v224 = v223;
                if (v223 >= 0x7FFFFFFFFFFFFFFELL)
                  v225 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v225 = v224;
                if (v225)
                {
                  v226 = (char *)sub_1DCB0DAEC(a1 + 16, v225);
                  v220 = *(char **)a1;
                  v188 = *(char **)(a1 + 8);
                }
                else
                {
                  v226 = 0;
                }
                v303 = &v226[2 * v222];
                *(_WORD *)v303 = v219;
                v147 = v303 + 2;
                while (v188 != v220)
                {
                  v304 = *((_WORD *)v188 - 1);
                  v188 -= 2;
                  *((_WORD *)v303 - 1) = v304;
                  v303 -= 2;
                }
                *(_QWORD *)a1 = v303;
                *(_QWORD *)(a1 + 8) = v147;
                *(_QWORD *)(a1 + 16) = &v226[2 * v225];
                if (v220)
                  operator delete(v220);
              }
              else
              {
                *(_WORD *)v188 = v219;
                v147 = v188 + 2;
              }
              *(_QWORD *)(a1 + 8) = v147;
              goto LABEL_479;
            case 16:
              v147 = *(char **)(a1 + 8);
LABEL_479:
              v305 = *v29;
              if (v147 >= *v29)
              {
                v307 = *(char **)a1;
                v308 = (uint64_t)&v147[-*(_QWORD *)a1];
                if (v308 <= -3)
                  goto LABEL_730;
                v309 = v308 >> 1;
                v310 = v305 - v307;
                if (v310 <= (v308 >> 1) + 1)
                  v311 = v309 + 1;
                else
                  v311 = v310;
                if (v310 >= 0x7FFFFFFFFFFFFFFELL)
                  v312 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v312 = v311;
                if (v312)
                {
                  v313 = (char *)sub_1DCB0DAEC(a1 + 16, v312);
                  v307 = *(char **)a1;
                  v147 = *(char **)(a1 + 8);
                }
                else
                {
                  v313 = 0;
                }
                v314 = &v313[2 * v309];
                *(_WORD *)v314 = *((_WORD *)v9 + v28);
                v306 = v314 + 2;
                while (v147 != v307)
                {
                  v315 = *((_WORD *)v147 - 1);
                  v147 -= 2;
                  *((_WORD *)v314 - 1) = v315;
                  v314 -= 2;
                }
                v305 = &v313[2 * v312];
                *(_QWORD *)a1 = v314;
                *(_QWORD *)(a1 + 8) = v306;
                *(_QWORD *)(a1 + 16) = v305;
                if (v307)
                {
                  operator delete(v307);
                  v305 = *v29;
                }
              }
              else
              {
                *(_WORD *)v147 = *((_WORD *)v9 + v28);
                v306 = v147 + 2;
              }
              *(_QWORD *)(a1 + 8) = v306;
              v316 = v28 + 1;
              if (v306 >= v305)
              {
                v318 = *(char **)a1;
                v319 = (uint64_t)&v306[-*(_QWORD *)a1];
                if (v319 <= -3)
                  goto LABEL_730;
                v320 = v319 >> 1;
                v321 = v305 - v318;
                if (v321 <= (v319 >> 1) + 1)
                  v322 = v320 + 1;
                else
                  v322 = v321;
                if (v321 >= 0x7FFFFFFFFFFFFFFELL)
                  v323 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v323 = v322;
                if (v323)
                {
                  v324 = (char *)sub_1DCB0DAEC(a1 + 16, v323);
                  v318 = *(char **)a1;
                  v306 = *(char **)(a1 + 8);
                }
                else
                {
                  v324 = 0;
                }
                v325 = &v324[2 * v320];
                *(_WORD *)v325 = *((_WORD *)v9 + v316);
                v317 = v325 + 2;
                while (v306 != v318)
                {
                  v326 = *((_WORD *)v306 - 1);
                  v306 -= 2;
                  *((_WORD *)v325 - 1) = v326;
                  v325 -= 2;
                }
                v305 = &v324[2 * v323];
                *(_QWORD *)a1 = v325;
                *(_QWORD *)(a1 + 8) = v317;
                *(_QWORD *)(a1 + 16) = v305;
                if (v318)
                {
                  operator delete(v318);
                  v305 = *v29;
                }
              }
              else
              {
                *(_WORD *)v306 = *((_WORD *)v9 + v316);
                v317 = v306 + 2;
              }
              *(_QWORD *)(a1 + 8) = v317;
              v327 = v28 + 2;
              if (v317 >= v305)
              {
                v328 = *(char **)a1;
                v329 = (uint64_t)&v317[-*(_QWORD *)a1];
                if (v329 <= -3)
                  goto LABEL_730;
                v330 = v329 >> 1;
                v331 = v305 - v328;
                if (v331 <= (v329 >> 1) + 1)
                  v332 = v330 + 1;
                else
                  v332 = v331;
                if (v331 >= 0x7FFFFFFFFFFFFFFELL)
                  v333 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v333 = v332;
                if (v333)
                {
                  v334 = (char *)sub_1DCB0DAEC(a1 + 16, v333);
                  v328 = *(char **)a1;
                  v317 = *(char **)(a1 + 8);
                }
                else
                {
                  v334 = 0;
                }
                v335 = &v334[2 * v330];
                *(_WORD *)v335 = *((_WORD *)v9 + v327);
                v32 = v335 + 2;
                while (v317 != v328)
                {
                  v336 = *((_WORD *)v317 - 1);
                  v317 -= 2;
                  *((_WORD *)v335 - 1) = v336;
                  v335 -= 2;
                }
                *(_QWORD *)a1 = v335;
                *(_QWORD *)(a1 + 8) = v32;
                *(_QWORD *)(a1 + 16) = &v334[2 * v333];
                if (v328)
                  operator delete(v328);
              }
              else
              {
                *(_WORD *)v317 = *((_WORD *)v9 + v327);
                v32 = v317 + 2;
              }
              v14 = a4;
              *(_QWORD *)(a1 + 8) = v32;
              goto LABEL_531;
            case 32:
              v32 = *(char **)(a1 + 8);
LABEL_531:
              v337 = v9[v28];
              v338 = *v29;
              if (v32 >= *v29)
              {
                v340 = *(char **)a1;
                v341 = (uint64_t)&v32[-*(_QWORD *)a1];
                if (v341 <= -3)
                  goto LABEL_730;
                v342 = v341 >> 1;
                v343 = v338 - v340;
                if (v343 <= (v341 >> 1) + 1)
                  v344 = v342 + 1;
                else
                  v344 = v343;
                if (v343 >= 0x7FFFFFFFFFFFFFFELL)
                  v345 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v345 = v344;
                if (v345)
                {
                  v346 = (char *)sub_1DCB0DAEC(a1 + 16, v345);
                  v340 = *(char **)a1;
                  v32 = *(char **)(a1 + 8);
                }
                else
                {
                  v346 = 0;
                }
                v347 = &v346[2 * v342];
                *(_WORD *)v347 = v337;
                v339 = v347 + 2;
                while (v32 != v340)
                {
                  v348 = *((_WORD *)v32 - 1);
                  v32 -= 2;
                  *((_WORD *)v347 - 1) = v348;
                  v347 -= 2;
                }
                v338 = &v346[2 * v345];
                *(_QWORD *)a1 = v347;
                *(_QWORD *)(a1 + 8) = v339;
                *(_QWORD *)(a1 + 16) = v338;
                if (v340)
                {
                  operator delete(v340);
                  v338 = *v29;
                }
              }
              else
              {
                *(_WORD *)v32 = v337;
                v339 = v32 + 2;
              }
              *(_QWORD *)(a1 + 8) = v339;
              v349 = v9[v28 + 1];
              if (v339 >= v338)
              {
                v350 = *(char **)a1;
                v351 = (uint64_t)&v339[-*(_QWORD *)a1];
                if (v351 <= -3)
                  goto LABEL_730;
                v352 = v351 >> 1;
                v353 = v338 - v350;
                if (v353 <= (v351 >> 1) + 1)
                  v354 = v352 + 1;
                else
                  v354 = v353;
                if (v353 >= 0x7FFFFFFFFFFFFFFELL)
                  v355 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v355 = v354;
                if (v355)
                {
                  v356 = (char *)sub_1DCB0DAEC(a1 + 16, v355);
                  v350 = *(char **)a1;
                  v339 = *(char **)(a1 + 8);
                }
                else
                {
                  v356 = 0;
                }
                v357 = &v356[2 * v352];
                *(_WORD *)v357 = v349;
                v282 = v357 + 2;
                while (v339 != v350)
                {
                  v358 = *((_WORD *)v339 - 1);
                  v339 -= 2;
                  *((_WORD *)v357 - 1) = v358;
                  v357 -= 2;
                }
                v338 = &v356[2 * v355];
                *(_QWORD *)a1 = v357;
                *(_QWORD *)(a1 + 8) = v282;
                *(_QWORD *)(a1 + 16) = v338;
                if (v350)
                {
                  operator delete(v350);
                  v338 = *v29;
                }
              }
              else
              {
                *(_WORD *)v339 = v349;
                v282 = v339 + 2;
              }
              *(_QWORD *)(a1 + 8) = v282;
              v292 = v9[v28 + 2];
              if (v282 < v338)
                goto LABEL_675;
              v293 = *(char **)a1;
              v359 = (uint64_t)&v282[-*(_QWORD *)a1];
              if (v359 <= -3)
                goto LABEL_730;
              v360 = v359 >> 1;
              v361 = v338 - v293;
              if (v361 <= (v359 >> 1) + 1)
                v362 = v360 + 1;
              else
                v362 = v361;
              if (v361 >= 0x7FFFFFFFFFFFFFFELL)
                v298 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v298 = v362;
              if (v298)
              {
                v299 = (char *)sub_1DCB0DAEC(a1 + 16, v298);
                v293 = *(char **)a1;
                v282 = *(char **)(a1 + 8);
              }
              else
              {
                v299 = 0;
              }
              v300 = &v299[2 * v360];
              *(_WORD *)v300 = v292;
              v301 = v300 + 2;
              while (v282 != v293)
              {
                v363 = *((_WORD *)v282 - 1);
                v282 -= 2;
                *((_WORD *)v300 - 1) = v363;
                v300 -= 2;
              }
              goto LABEL_689;
          }
          break;
        case 2:
          switch(v13)
          {
            case 8:
              v148 = *((unsigned __int8 *)v9 + v28);
              v150 = *(char **)(a1 + 8);
              v149 = *(char **)(a1 + 16);
              if (v150 >= v149)
              {
                v167 = *(char **)a1;
                v168 = (uint64_t)&v150[-*(_QWORD *)a1];
                if (v168 <= -3)
                  goto LABEL_730;
                v169 = v168 >> 1;
                v170 = v149 - v167;
                if (v170 <= (v168 >> 1) + 1)
                  v171 = v169 + 1;
                else
                  v171 = v170;
                if (v170 >= 0x7FFFFFFFFFFFFFFELL)
                  v172 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v172 = v171;
                if (v172)
                {
                  v173 = (char *)sub_1DCB0DAEC(a1 + 16, v172);
                  v167 = *(char **)a1;
                  v150 = *(char **)(a1 + 8);
                }
                else
                {
                  v173 = 0;
                }
                v196 = &v173[2 * v169];
                *(_WORD *)v196 = v148;
                v151 = v196 + 2;
                while (v150 != v167)
                {
                  v197 = *((_WORD *)v150 - 1);
                  v150 -= 2;
                  *((_WORD *)v196 - 1) = v197;
                  v196 -= 2;
                }
                v149 = &v173[2 * v172];
                *(_QWORD *)a1 = v196;
                *(_QWORD *)(a1 + 8) = v151;
                *(_QWORD *)(a1 + 16) = v149;
                if (v167)
                {
                  operator delete(v167);
                  v149 = *v29;
                }
              }
              else
              {
                *(_WORD *)v150 = v148;
                v151 = v150 + 2;
              }
              *(_QWORD *)(a1 + 8) = v151;
              v198 = *((unsigned __int8 *)v9 + v28 + 1);
              if (v151 >= v149)
              {
                v200 = *(char **)a1;
                v201 = (uint64_t)&v151[-*(_QWORD *)a1];
                if (v201 <= -3)
                  goto LABEL_730;
                v202 = v201 >> 1;
                v203 = v149 - v200;
                if (v203 <= (v201 >> 1) + 1)
                  v204 = v202 + 1;
                else
                  v204 = v203;
                if (v203 >= 0x7FFFFFFFFFFFFFFELL)
                  v205 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v205 = v204;
                if (v205)
                {
                  v206 = (char *)sub_1DCB0DAEC(a1 + 16, v205);
                  v200 = *(char **)a1;
                  v151 = *(char **)(a1 + 8);
                }
                else
                {
                  v206 = 0;
                }
                v227 = &v206[2 * v202];
                *(_WORD *)v227 = v198;
                v199 = v227 + 2;
                while (v151 != v200)
                {
                  v228 = *((_WORD *)v151 - 1);
                  v151 -= 2;
                  *((_WORD *)v227 - 1) = v228;
                  v227 -= 2;
                }
                v149 = &v206[2 * v205];
                *(_QWORD *)a1 = v227;
                *(_QWORD *)(a1 + 8) = v199;
                *(_QWORD *)(a1 + 16) = v149;
                if (v200)
                {
                  operator delete(v200);
                  v149 = *v29;
                }
              }
              else
              {
                *(_WORD *)v151 = v198;
                v199 = v151 + 2;
              }
              *(_QWORD *)(a1 + 8) = v199;
              v229 = *((unsigned __int8 *)v9 + v28 + 1);
              if (v199 >= v149)
              {
                v230 = *(char **)a1;
                v231 = (uint64_t)&v199[-*(_QWORD *)a1];
                if (v231 <= -3)
                  goto LABEL_730;
                v232 = v231 >> 1;
                v233 = v149 - v230;
                if (v233 <= (v231 >> 1) + 1)
                  v234 = v232 + 1;
                else
                  v234 = v233;
                if (v233 >= 0x7FFFFFFFFFFFFFFELL)
                  v235 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v235 = v234;
                if (v235)
                {
                  v236 = (char *)sub_1DCB0DAEC(a1 + 16, v235);
                  v230 = *(char **)a1;
                  v199 = *(char **)(a1 + 8);
                }
                else
                {
                  v236 = 0;
                }
                v364 = &v236[2 * v232];
                *(_WORD *)v364 = v229;
                v152 = v364 + 2;
                while (v199 != v230)
                {
                  v365 = *((_WORD *)v199 - 1);
                  v199 -= 2;
                  *((_WORD *)v364 - 1) = v365;
                  v364 -= 2;
                }
                *(_QWORD *)a1 = v364;
                *(_QWORD *)(a1 + 8) = v152;
                *(_QWORD *)(a1 + 16) = &v236[2 * v235];
                if (v230)
                  operator delete(v230);
              }
              else
              {
                *(_WORD *)v199 = v229;
                v152 = v199 + 2;
              }
              *(_QWORD *)(a1 + 8) = v152;
              goto LABEL_586;
            case 16:
              v152 = *(char **)(a1 + 8);
LABEL_586:
              v366 = *v29;
              if (v152 >= *v29)
              {
                v368 = *(char **)a1;
                v369 = (uint64_t)&v152[-*(_QWORD *)a1];
                if (v369 <= -3)
                  goto LABEL_730;
                v370 = v369 >> 1;
                v371 = v366 - v368;
                if (v371 <= (v369 >> 1) + 1)
                  v372 = v370 + 1;
                else
                  v372 = v371;
                if (v371 >= 0x7FFFFFFFFFFFFFFELL)
                  v373 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v373 = v372;
                if (v373)
                {
                  v374 = (char *)sub_1DCB0DAEC(a1 + 16, v373);
                  v368 = *(char **)a1;
                  v152 = *(char **)(a1 + 8);
                }
                else
                {
                  v374 = 0;
                }
                v375 = &v374[2 * v370];
                *(_WORD *)v375 = *((_WORD *)v9 + v28);
                v367 = v375 + 2;
                while (v152 != v368)
                {
                  v376 = *((_WORD *)v152 - 1);
                  v152 -= 2;
                  *((_WORD *)v375 - 1) = v376;
                  v375 -= 2;
                }
                v366 = &v374[2 * v373];
                *(_QWORD *)a1 = v375;
                *(_QWORD *)(a1 + 8) = v367;
                *(_QWORD *)(a1 + 16) = v366;
                if (v368)
                {
                  operator delete(v368);
                  v366 = *v29;
                }
              }
              else
              {
                *(_WORD *)v152 = *((_WORD *)v9 + v28);
                v367 = v152 + 2;
              }
              *(_QWORD *)(a1 + 8) = v367;
              v377 = v28 + 1;
              if (v367 >= v366)
              {
                v379 = *(char **)a1;
                v380 = (uint64_t)&v367[-*(_QWORD *)a1];
                if (v380 <= -3)
                  goto LABEL_730;
                v381 = v380 >> 1;
                v382 = v366 - v379;
                if (v382 <= (v380 >> 1) + 1)
                  v383 = v381 + 1;
                else
                  v383 = v382;
                if (v382 >= 0x7FFFFFFFFFFFFFFELL)
                  v384 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v384 = v383;
                if (v384)
                {
                  v385 = (char *)sub_1DCB0DAEC(a1 + 16, v384);
                  v379 = *(char **)a1;
                  v367 = *(char **)(a1 + 8);
                }
                else
                {
                  v385 = 0;
                }
                v386 = &v385[2 * v381];
                *(_WORD *)v386 = *((_WORD *)v9 + v377);
                v378 = v386 + 2;
                while (v367 != v379)
                {
                  v387 = *((_WORD *)v367 - 1);
                  v367 -= 2;
                  *((_WORD *)v386 - 1) = v387;
                  v386 -= 2;
                }
                v366 = &v385[2 * v384];
                *(_QWORD *)a1 = v386;
                *(_QWORD *)(a1 + 8) = v378;
                *(_QWORD *)(a1 + 16) = v366;
                if (v379)
                {
                  operator delete(v379);
                  v366 = *v29;
                }
              }
              else
              {
                *(_WORD *)v367 = *((_WORD *)v9 + v377);
                v378 = v367 + 2;
              }
              *(_QWORD *)(a1 + 8) = v378;
              if (v378 >= v366)
              {
                v388 = *(char **)a1;
                v389 = (uint64_t)&v378[-*(_QWORD *)a1];
                if (v389 <= -3)
                  goto LABEL_730;
                v390 = v389 >> 1;
                v391 = v366 - v388;
                if (v391 <= (v389 >> 1) + 1)
                  v392 = v390 + 1;
                else
                  v392 = v391;
                if (v391 >= 0x7FFFFFFFFFFFFFFELL)
                  v393 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v393 = v392;
                if (v393)
                {
                  v394 = (char *)sub_1DCB0DAEC(a1 + 16, v393);
                  v388 = *(char **)a1;
                  v378 = *(char **)(a1 + 8);
                }
                else
                {
                  v394 = 0;
                }
                v395 = &v394[2 * v390];
                *(_WORD *)v395 = *((_WORD *)v9 + v377);
                v33 = v395 + 2;
                while (v378 != v388)
                {
                  v396 = *((_WORD *)v378 - 1);
                  v378 -= 2;
                  *((_WORD *)v395 - 1) = v396;
                  v395 -= 2;
                }
                *(_QWORD *)a1 = v395;
                *(_QWORD *)(a1 + 8) = v33;
                *(_QWORD *)(a1 + 16) = &v394[2 * v393];
                if (v388)
                  operator delete(v388);
              }
              else
              {
                *(_WORD *)v378 = *((_WORD *)v9 + v377);
                v33 = v378 + 2;
              }
              *(_QWORD *)(a1 + 8) = v33;
LABEL_638:
              v397 = v9[v28];
              v398 = *v29;
              if (v33 >= *v29)
              {
                v400 = *(char **)a1;
                v401 = (uint64_t)&v33[-*(_QWORD *)a1];
                if (v401 <= -3)
                  goto LABEL_730;
                v402 = v401 >> 1;
                v403 = v398 - v400;
                if (v403 <= (v401 >> 1) + 1)
                  v404 = v402 + 1;
                else
                  v404 = v403;
                if (v403 >= 0x7FFFFFFFFFFFFFFELL)
                  v405 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v405 = v404;
                if (v405)
                {
                  v406 = (char *)sub_1DCB0DAEC(a1 + 16, v405);
                  v400 = *(char **)a1;
                  v33 = *(char **)(a1 + 8);
                }
                else
                {
                  v406 = 0;
                }
                v407 = &v406[2 * v402];
                *(_WORD *)v407 = v397;
                v399 = v407 + 2;
                while (v33 != v400)
                {
                  v408 = *((_WORD *)v33 - 1);
                  v33 -= 2;
                  *((_WORD *)v407 - 1) = v408;
                  v407 -= 2;
                }
                v398 = &v406[2 * v405];
                *(_QWORD *)a1 = v407;
                *(_QWORD *)(a1 + 8) = v399;
                *(_QWORD *)(a1 + 16) = v398;
                if (v400)
                {
                  operator delete(v400);
                  v398 = *v29;
                }
              }
              else
              {
                *(_WORD *)v33 = v397;
                v399 = v33 + 2;
              }
              *(_QWORD *)(a1 + 8) = v399;
              v409 = v9[v28 + 1];
              if (v399 >= v398)
              {
                v410 = *(char **)a1;
                v411 = (uint64_t)&v399[-*(_QWORD *)a1];
                if (v411 <= -3)
                  goto LABEL_730;
                v412 = v411 >> 1;
                v413 = v398 - v410;
                if (v413 <= (v411 >> 1) + 1)
                  v414 = v412 + 1;
                else
                  v414 = v413;
                if (v413 >= 0x7FFFFFFFFFFFFFFELL)
                  v415 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v415 = v414;
                if (v415)
                {
                  v416 = (char *)sub_1DCB0DAEC(a1 + 16, v415);
                  v410 = *(char **)a1;
                  v399 = *(char **)(a1 + 8);
                }
                else
                {
                  v416 = 0;
                }
                v417 = &v416[2 * v412];
                *(_WORD *)v417 = v409;
                v282 = v417 + 2;
                if (v399 == v410)
                {
                  v14 = a4;
                }
                else
                {
                  v14 = a4;
                  do
                  {
                    v418 = *((_WORD *)v399 - 1);
                    v399 -= 2;
                    *((_WORD *)v417 - 1) = v418;
                    v417 -= 2;
                  }
                  while (v399 != v410);
                }
                v398 = &v416[2 * v415];
                *(_QWORD *)a1 = v417;
                *(_QWORD *)(a1 + 8) = v282;
                *(_QWORD *)(a1 + 16) = v398;
                if (v410)
                {
                  operator delete(v410);
                  v398 = *v29;
                }
              }
              else
              {
                *(_WORD *)v399 = v409;
                v282 = v399 + 2;
                v14 = a4;
              }
              *(_QWORD *)(a1 + 8) = v282;
              v292 = v9[v28 + 1];
              if (v282 < v398)
              {
LABEL_675:
                *(_WORD *)v282 = v292;
                v301 = v282 + 2;
LABEL_691:
                *(_QWORD *)(a1 + 8) = v301;
                goto LABEL_692;
              }
              v293 = *(char **)a1;
              v419 = (uint64_t)&v282[-*(_QWORD *)a1];
              if (v419 <= -3)
LABEL_730:
                sub_1DCAE4C44();
              v420 = v419 >> 1;
              v421 = v398 - v293;
              if (v421 <= (v419 >> 1) + 1)
                v422 = v420 + 1;
              else
                v422 = v421;
              if (v421 >= 0x7FFFFFFFFFFFFFFELL)
                v298 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v298 = v422;
              if (v298)
              {
                v299 = (char *)sub_1DCB0DAEC(a1 + 16, v298);
                v293 = *(char **)a1;
                v282 = *(char **)(a1 + 8);
              }
              else
              {
                v299 = 0;
              }
              v300 = &v299[2 * v420];
              *(_WORD *)v300 = v292;
              v301 = v300 + 2;
              while (v282 != v293)
              {
                v423 = *((_WORD *)v282 - 1);
                v282 -= 2;
                *((_WORD *)v300 - 1) = v423;
                v300 -= 2;
              }
LABEL_689:
              *(_QWORD *)a1 = v300;
              *(_QWORD *)(a1 + 8) = v301;
              *(_QWORD *)(a1 + 16) = &v299[2 * v298];
              if (v293)
                operator delete(v293);
              goto LABEL_691;
            case 32:
              v33 = *(char **)(a1 + 8);
              goto LABEL_638;
          }
          break;
        case 1:
          switch(v13)
          {
            case 8:
              v138 = *((unsigned __int8 *)v9 + v28);
              v140 = *(char **)(a1 + 8);
              v139 = *(char **)(a1 + 16);
              if (v140 >= v139)
              {
                v153 = *(char **)a1;
                v154 = (uint64_t)&v140[-*(_QWORD *)a1];
                if (v154 <= -3)
                  goto LABEL_730;
                v155 = v154 >> 1;
                v156 = v139 - v153;
                if (v156 <= (v154 >> 1) + 1)
                  v157 = v155 + 1;
                else
                  v157 = v156;
                if (v156 >= 0x7FFFFFFFFFFFFFFELL)
                  v158 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v158 = v157;
                if (v158)
                {
                  v159 = (char *)sub_1DCB0DAEC(a1 + 16, v158);
                  v153 = *(char **)a1;
                  v140 = *(char **)(a1 + 8);
                }
                else
                {
                  v159 = 0;
                }
                v174 = &v159[2 * v155];
                *(_WORD *)v174 = v138;
                v141 = v174 + 2;
                while (v140 != v153)
                {
                  v175 = *((_WORD *)v140 - 1);
                  v140 -= 2;
                  *((_WORD *)v174 - 1) = v175;
                  v174 -= 2;
                }
                v139 = &v159[2 * v158];
                *(_QWORD *)a1 = v174;
                *(_QWORD *)(a1 + 8) = v141;
                *(_QWORD *)(a1 + 16) = v139;
                if (v153)
                {
                  operator delete(v153);
                  v139 = *v29;
                }
              }
              else
              {
                *(_WORD *)v140 = v138;
                v141 = v140 + 2;
              }
              *(_QWORD *)(a1 + 8) = v141;
              v176 = *((unsigned __int8 *)v9 + v28);
              if (v141 >= v139)
              {
                v178 = *(char **)a1;
                v179 = (uint64_t)&v141[-*(_QWORD *)a1];
                if (v179 <= -3)
                  goto LABEL_730;
                v180 = v179 >> 1;
                v181 = v139 - v178;
                if (v181 <= (v179 >> 1) + 1)
                  v182 = v180 + 1;
                else
                  v182 = v181;
                if (v181 >= 0x7FFFFFFFFFFFFFFELL)
                  v183 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v183 = v182;
                if (v183)
                {
                  v184 = (char *)sub_1DCB0DAEC(a1 + 16, v183);
                  v178 = *(char **)a1;
                  v141 = *(char **)(a1 + 8);
                }
                else
                {
                  v184 = 0;
                }
                v207 = &v184[2 * v180];
                *(_WORD *)v207 = v176;
                v177 = v207 + 2;
                while (v141 != v178)
                {
                  v208 = *((_WORD *)v141 - 1);
                  v141 -= 2;
                  *((_WORD *)v207 - 1) = v208;
                  v207 -= 2;
                }
                v139 = &v184[2 * v183];
                *(_QWORD *)a1 = v207;
                *(_QWORD *)(a1 + 8) = v177;
                *(_QWORD *)(a1 + 16) = v139;
                if (v178)
                {
                  operator delete(v178);
                  v139 = *v29;
                }
              }
              else
              {
                *(_WORD *)v141 = v176;
                v177 = v141 + 2;
              }
              *(_QWORD *)(a1 + 8) = v177;
              v209 = *((unsigned __int8 *)v9 + v28);
              if (v177 >= v139)
              {
                v210 = *(char **)a1;
                v211 = (uint64_t)&v177[-*(_QWORD *)a1];
                if (v211 <= -3)
                  goto LABEL_730;
                v212 = v211 >> 1;
                v213 = v139 - v210;
                if (v213 <= (v211 >> 1) + 1)
                  v214 = v212 + 1;
                else
                  v214 = v213;
                if (v213 >= 0x7FFFFFFFFFFFFFFELL)
                  v215 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v215 = v214;
                if (v215)
                {
                  v216 = (char *)sub_1DCB0DAEC(a1 + 16, v215);
                  v210 = *(char **)a1;
                  v177 = *(char **)(a1 + 8);
                }
                else
                {
                  v216 = 0;
                }
                v237 = &v216[2 * v212];
                *(_WORD *)v237 = v209;
                v142 = v237 + 2;
                while (v177 != v210)
                {
                  v238 = *((_WORD *)v177 - 1);
                  v177 -= 2;
                  *((_WORD *)v237 - 1) = v238;
                  v237 -= 2;
                }
                *(_QWORD *)a1 = v237;
                *(_QWORD *)(a1 + 8) = v142;
                *(_QWORD *)(a1 + 16) = &v216[2 * v215];
                if (v210)
                  operator delete(v210);
              }
              else
              {
                *(_WORD *)v177 = v209;
                v142 = v177 + 2;
              }
              *(_QWORD *)(a1 + 8) = v142;
              goto LABEL_372;
            case 16:
              v142 = *(char **)(a1 + 8);
LABEL_372:
              v239 = *v29;
              if (v142 >= *v29)
              {
                v241 = *(char **)a1;
                v242 = (uint64_t)&v142[-*(_QWORD *)a1];
                if (v242 <= -3)
                  goto LABEL_730;
                v243 = v242 >> 1;
                v244 = v239 - v241;
                if (v244 <= (v242 >> 1) + 1)
                  v245 = v243 + 1;
                else
                  v245 = v244;
                if (v244 >= 0x7FFFFFFFFFFFFFFELL)
                  v246 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v246 = v245;
                if (v246)
                {
                  v247 = (char *)sub_1DCB0DAEC(a1 + 16, v246);
                  v241 = *(char **)a1;
                  v142 = *(char **)(a1 + 8);
                }
                else
                {
                  v247 = 0;
                }
                v248 = &v247[2 * v243];
                *(_WORD *)v248 = *((_WORD *)v9 + v28);
                v240 = v248 + 2;
                while (v142 != v241)
                {
                  v249 = *((_WORD *)v142 - 1);
                  v142 -= 2;
                  *((_WORD *)v248 - 1) = v249;
                  v248 -= 2;
                }
                v239 = &v247[2 * v246];
                *(_QWORD *)a1 = v248;
                *(_QWORD *)(a1 + 8) = v240;
                *(_QWORD *)(a1 + 16) = v239;
                if (v241)
                {
                  operator delete(v241);
                  v239 = *v29;
                }
              }
              else
              {
                *(_WORD *)v142 = *((_WORD *)v9 + v28);
                v240 = v142 + 2;
              }
              *(_QWORD *)(a1 + 8) = v240;
              if (v240 >= v239)
              {
                v251 = *(char **)a1;
                v252 = (uint64_t)&v240[-*(_QWORD *)a1];
                if (v252 <= -3)
                  goto LABEL_730;
                v253 = v252 >> 1;
                v254 = v239 - v251;
                if (v254 <= (v252 >> 1) + 1)
                  v255 = v253 + 1;
                else
                  v255 = v254;
                if (v254 >= 0x7FFFFFFFFFFFFFFELL)
                  v256 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v256 = v255;
                if (v256)
                {
                  v257 = (char *)sub_1DCB0DAEC(a1 + 16, v256);
                  v251 = *(char **)a1;
                  v240 = *(char **)(a1 + 8);
                }
                else
                {
                  v257 = 0;
                }
                v258 = &v257[2 * v253];
                *(_WORD *)v258 = *((_WORD *)v9 + v28);
                v250 = v258 + 2;
                while (v240 != v251)
                {
                  v259 = *((_WORD *)v240 - 1);
                  v240 -= 2;
                  *((_WORD *)v258 - 1) = v259;
                  v258 -= 2;
                }
                v239 = &v257[2 * v256];
                *(_QWORD *)a1 = v258;
                *(_QWORD *)(a1 + 8) = v250;
                *(_QWORD *)(a1 + 16) = v239;
                if (v251)
                {
                  operator delete(v251);
                  v239 = *v29;
                }
              }
              else
              {
                *(_WORD *)v240 = *((_WORD *)v9 + v28);
                v250 = v240 + 2;
              }
              *(_QWORD *)(a1 + 8) = v250;
              if (v250 >= v239)
              {
                v260 = *(char **)a1;
                v261 = (uint64_t)&v250[-*(_QWORD *)a1];
                if (v261 <= -3)
                  goto LABEL_730;
                v262 = v261 >> 1;
                v263 = v239 - v260;
                if (v263 <= (v261 >> 1) + 1)
                  v264 = v262 + 1;
                else
                  v264 = v263;
                if (v263 >= 0x7FFFFFFFFFFFFFFELL)
                  v265 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v265 = v264;
                if (v265)
                {
                  v266 = (char *)sub_1DCB0DAEC(a1 + 16, v265);
                  v260 = *(char **)a1;
                  v250 = *(char **)(a1 + 8);
                }
                else
                {
                  v266 = 0;
                }
                v267 = &v266[2 * v262];
                *(_WORD *)v267 = *((_WORD *)v9 + v28);
                v31 = v267 + 2;
                while (v250 != v260)
                {
                  v268 = *((_WORD *)v250 - 1);
                  v250 -= 2;
                  *((_WORD *)v267 - 1) = v268;
                  v267 -= 2;
                }
                *(_QWORD *)a1 = v267;
                *(_QWORD *)(a1 + 8) = v31;
                *(_QWORD *)(a1 + 16) = &v266[2 * v265];
                if (v260)
                  operator delete(v260);
              }
              else
              {
                *(_WORD *)v250 = *((_WORD *)v9 + v28);
                v31 = v250 + 2;
              }
              *(_QWORD *)(a1 + 8) = v31;
              goto LABEL_424;
            case 32:
              v31 = *(char **)(a1 + 8);
LABEL_424:
              v269 = v9[v28];
              v270 = *v29;
              if (v31 >= *v29)
              {
                v272 = *(char **)a1;
                v273 = (uint64_t)&v31[-*(_QWORD *)a1];
                if (v273 <= -3)
                  goto LABEL_730;
                v274 = v273 >> 1;
                v275 = v270 - v272;
                if (v275 <= (v273 >> 1) + 1)
                  v276 = v274 + 1;
                else
                  v276 = v275;
                if (v275 >= 0x7FFFFFFFFFFFFFFELL)
                  v277 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v277 = v276;
                if (v277)
                {
                  v278 = (char *)sub_1DCB0DAEC(a1 + 16, v277);
                  v272 = *(char **)a1;
                  v31 = *(char **)(a1 + 8);
                }
                else
                {
                  v278 = 0;
                }
                v279 = &v278[2 * v274];
                *(_WORD *)v279 = v269;
                v271 = v279 + 2;
                while (v31 != v272)
                {
                  v280 = *((_WORD *)v31 - 1);
                  v31 -= 2;
                  *((_WORD *)v279 - 1) = v280;
                  v279 -= 2;
                }
                v270 = &v278[2 * v277];
                *(_QWORD *)a1 = v279;
                *(_QWORD *)(a1 + 8) = v271;
                *(_QWORD *)(a1 + 16) = v270;
                if (v272)
                {
                  operator delete(v272);
                  v270 = *v29;
                }
              }
              else
              {
                *(_WORD *)v31 = v269;
                v271 = v31 + 2;
              }
              *(_QWORD *)(a1 + 8) = v271;
              v281 = v9[v28];
              if (v271 >= v270)
              {
                v283 = *(char **)a1;
                v284 = (uint64_t)&v271[-*(_QWORD *)a1];
                if (v284 <= -3)
                  goto LABEL_730;
                v285 = v284 >> 1;
                v286 = v270 - v283;
                if (v286 <= (v284 >> 1) + 1)
                  v287 = v285 + 1;
                else
                  v287 = v286;
                if (v286 >= 0x7FFFFFFFFFFFFFFELL)
                  v288 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v288 = v287;
                if (v288)
                {
                  v289 = (char *)sub_1DCB0DAEC(a1 + 16, v288);
                  v283 = *(char **)a1;
                  v271 = *(char **)(a1 + 8);
                }
                else
                {
                  v289 = 0;
                }
                v290 = &v289[2 * v285];
                *(_WORD *)v290 = v281;
                v282 = v290 + 2;
                while (v271 != v283)
                {
                  v291 = *((_WORD *)v271 - 1);
                  v271 -= 2;
                  *((_WORD *)v290 - 1) = v291;
                  v290 -= 2;
                }
                v270 = &v289[2 * v288];
                *(_QWORD *)a1 = v290;
                *(_QWORD *)(a1 + 8) = v282;
                *(_QWORD *)(a1 + 16) = v270;
                if (v283)
                {
                  operator delete(v283);
                  v270 = *v29;
                }
              }
              else
              {
                *(_WORD *)v271 = v281;
                v282 = v271 + 2;
              }
              *(_QWORD *)(a1 + 8) = v282;
              v292 = v9[v28];
              if (v282 < v270)
                goto LABEL_675;
              v293 = *(char **)a1;
              v294 = (uint64_t)&v282[-*(_QWORD *)a1];
              if (v294 <= -3)
                goto LABEL_730;
              v295 = v294 >> 1;
              v296 = v270 - v293;
              if (v296 <= (v294 >> 1) + 1)
                v297 = v295 + 1;
              else
                v297 = v296;
              if (v296 >= 0x7FFFFFFFFFFFFFFELL)
                v298 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v298 = v297;
              if (v298)
              {
                v299 = (char *)sub_1DCB0DAEC(a1 + 16, v298);
                v293 = *(char **)a1;
                v282 = *(char **)(a1 + 8);
              }
              else
              {
                v299 = 0;
              }
              v300 = &v299[2 * v295];
              *(_WORD *)v300 = v292;
              v301 = v300 + 2;
              while (v282 != v293)
              {
                v302 = *((_WORD *)v282 - 1);
                v282 -= 2;
                *((_WORD *)v300 - 1) = v302;
                v300 -= 2;
              }
              goto LABEL_689;
          }
          break;
        default:
          if (v13 == 32)
            goto LABEL_172;
          if (v13 != 16)
          {
            if (v13 != 8 || v30 < 3)
              break;
            v34 = 0;
            v35 = *(char **)(a1 + 8);
            do
            {
              v36 = *((unsigned __int8 *)v9 + v28);
              v37 = *v29;
              if (v35 >= *v29)
              {
                v39 = *(char **)a1;
                v40 = (uint64_t)&v35[-*(_QWORD *)a1];
                if (v40 <= -3)
                  goto LABEL_730;
                v41 = v40 >> 1;
                v42 = v37 - v39;
                if (v42 <= (v40 >> 1) + 1)
                  v43 = v41 + 1;
                else
                  v43 = v42;
                if (v42 >= 0x7FFFFFFFFFFFFFFELL)
                  v44 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v44 = v43;
                if (v44)
                {
                  v45 = (char *)sub_1DCB0DAEC(a1 + 16, v44);
                  v39 = *(char **)a1;
                  v35 = *(char **)(a1 + 8);
                }
                else
                {
                  v45 = 0;
                }
                v46 = &v45[2 * v41];
                *(_WORD *)v46 = v36;
                v38 = v46 + 2;
                while (v35 != v39)
                {
                  v47 = *((_WORD *)v35 - 1);
                  v35 -= 2;
                  *((_WORD *)v46 - 1) = v47;
                  v46 -= 2;
                }
                v37 = &v45[2 * v44];
                *(_QWORD *)a1 = v46;
                *(_QWORD *)(a1 + 8) = v38;
                *(_QWORD *)(a1 + 16) = v37;
                if (v39)
                {
                  operator delete(v39);
                  v37 = *v29;
                }
              }
              else
              {
                *(_WORD *)v35 = v36;
                v38 = v35 + 2;
              }
              *(_QWORD *)(a1 + 8) = v38;
              v48 = *((unsigned __int8 *)v9 + v34 + v28 + 1);
              if (v38 >= v37)
              {
                v50 = *(char **)a1;
                v51 = (uint64_t)&v38[-*(_QWORD *)a1];
                if (v51 <= -3)
                  goto LABEL_730;
                v52 = v51 >> 1;
                v53 = v37 - v50;
                if (v53 <= (v51 >> 1) + 1)
                  v54 = v52 + 1;
                else
                  v54 = v53;
                if (v53 >= 0x7FFFFFFFFFFFFFFELL)
                  v55 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v55 = v54;
                if (v55)
                {
                  v56 = (char *)sub_1DCB0DAEC(a1 + 16, v55);
                  v50 = *(char **)a1;
                  v38 = *(char **)(a1 + 8);
                }
                else
                {
                  v56 = 0;
                }
                v57 = &v56[2 * v52];
                *(_WORD *)v57 = v48;
                v49 = v57 + 2;
                while (v38 != v50)
                {
                  v58 = *((_WORD *)v38 - 1);
                  v38 -= 2;
                  *((_WORD *)v57 - 1) = v58;
                  v57 -= 2;
                }
                v37 = &v56[2 * v55];
                *(_QWORD *)a1 = v57;
                *(_QWORD *)(a1 + 8) = v49;
                *(_QWORD *)(a1 + 16) = v37;
                if (v50)
                {
                  operator delete(v50);
                  v37 = *v29;
                }
              }
              else
              {
                *(_WORD *)v38 = v48;
                v49 = v38 + 2;
              }
              v14 = a4;
              *(_QWORD *)(a1 + 8) = v49;
              v59 = *((unsigned __int8 *)v9 + v34 + v28 + 2);
              if (v49 >= v37)
              {
                v60 = *(char **)a1;
                v61 = (uint64_t)&v49[-*(_QWORD *)a1];
                if (v61 <= -3)
                  goto LABEL_730;
                v62 = v61 >> 1;
                v63 = v37 - v60;
                if (v63 <= (v61 >> 1) + 1)
                  v64 = v62 + 1;
                else
                  v64 = v63;
                if (v63 >= 0x7FFFFFFFFFFFFFFELL)
                  v65 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v65 = v64;
                if (v65)
                {
                  v66 = (char *)sub_1DCB0DAEC(a1 + 16, v65);
                  v60 = *(char **)a1;
                  v49 = *(char **)(a1 + 8);
                }
                else
                {
                  v66 = 0;
                }
                v67 = &v66[2 * v62];
                *(_WORD *)v67 = v59;
                v35 = v67 + 2;
                while (v49 != v60)
                {
                  v68 = *((_WORD *)v49 - 1);
                  v49 -= 2;
                  *((_WORD *)v67 - 1) = v68;
                  v67 -= 2;
                }
                *(_QWORD *)a1 = v67;
                *(_QWORD *)(a1 + 8) = v35;
                *(_QWORD *)(a1 + 16) = &v66[2 * v65];
                if (v60)
                  operator delete(v60);
              }
              else
              {
                *(_WORD *)v49 = v59;
                v35 = v49 + 2;
              }
              *(_QWORD *)(a1 + 8) = v35;
              ++v34;
              v30 = *(unsigned __int8 *)(a4 + v27);
            }
            while (v34 < v30 - 2);
          }
          if (v30 >= 3)
          {
            v69 = 0;
            v70 = *(char **)(a1 + 8);
            do
            {
              v71 = *v29;
              if (v70 >= *v29)
              {
                v73 = *(char **)a1;
                v74 = (uint64_t)&v70[-*(_QWORD *)a1];
                if (v74 <= -3)
                  goto LABEL_730;
                v75 = v74 >> 1;
                v76 = v71 - v73;
                if (v76 <= (v74 >> 1) + 1)
                  v77 = v75 + 1;
                else
                  v77 = v76;
                if (v76 >= 0x7FFFFFFFFFFFFFFELL)
                  v78 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v78 = v77;
                if (v78)
                {
                  v79 = (char *)sub_1DCB0DAEC(a1 + 16, v78);
                  v73 = *(char **)a1;
                  v70 = *(char **)(a1 + 8);
                }
                else
                {
                  v79 = 0;
                }
                v80 = &v79[2 * v75];
                *(_WORD *)v80 = *((_WORD *)v9 + v28);
                v72 = v80 + 2;
                while (v70 != v73)
                {
                  v81 = *((_WORD *)v70 - 1);
                  v70 -= 2;
                  *((_WORD *)v80 - 1) = v81;
                  v80 -= 2;
                }
                v71 = &v79[2 * v78];
                *(_QWORD *)a1 = v80;
                *(_QWORD *)(a1 + 8) = v72;
                *(_QWORD *)(a1 + 16) = v71;
                if (v73)
                {
                  operator delete(v73);
                  v71 = *v29;
                }
              }
              else
              {
                *(_WORD *)v70 = *((_WORD *)v9 + v28);
                v72 = v70 + 2;
              }
              *(_QWORD *)(a1 + 8) = v72;
              v82 = v69 + v28 + 1;
              if (v72 >= v71)
              {
                v84 = *(char **)a1;
                v85 = (uint64_t)&v72[-*(_QWORD *)a1];
                if (v85 <= -3)
                  goto LABEL_730;
                v86 = v85 >> 1;
                v87 = v71 - v84;
                if (v87 <= (v85 >> 1) + 1)
                  v88 = v86 + 1;
                else
                  v88 = v87;
                if (v87 >= 0x7FFFFFFFFFFFFFFELL)
                  v89 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v89 = v88;
                if (v89)
                {
                  v90 = (char *)sub_1DCB0DAEC(a1 + 16, v89);
                  v84 = *(char **)a1;
                  v72 = *(char **)(a1 + 8);
                }
                else
                {
                  v90 = 0;
                }
                v91 = &v90[2 * v86];
                *(_WORD *)v91 = *((_WORD *)v9 + v82);
                v83 = v91 + 2;
                while (v72 != v84)
                {
                  v92 = *((_WORD *)v72 - 1);
                  v72 -= 2;
                  *((_WORD *)v91 - 1) = v92;
                  v91 -= 2;
                }
                v71 = &v90[2 * v89];
                *(_QWORD *)a1 = v91;
                *(_QWORD *)(a1 + 8) = v83;
                *(_QWORD *)(a1 + 16) = v71;
                if (v84)
                {
                  operator delete(v84);
                  v71 = *v29;
                }
              }
              else
              {
                *(_WORD *)v72 = *((_WORD *)v9 + v82);
                v83 = v72 + 2;
              }
              v14 = a4;
              *(_QWORD *)(a1 + 8) = v83;
              v93 = v69 + v28 + 2;
              if (v83 >= v71)
              {
                v94 = *(char **)a1;
                v95 = (uint64_t)&v83[-*(_QWORD *)a1];
                if (v95 <= -3)
                  goto LABEL_730;
                v96 = v95 >> 1;
                v97 = v71 - v94;
                if (v97 <= (v95 >> 1) + 1)
                  v98 = v96 + 1;
                else
                  v98 = v97;
                if (v97 >= 0x7FFFFFFFFFFFFFFELL)
                  v99 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v99 = v98;
                if (v99)
                {
                  v100 = (char *)sub_1DCB0DAEC(a1 + 16, v99);
                  v94 = *(char **)a1;
                  v83 = *(char **)(a1 + 8);
                }
                else
                {
                  v100 = 0;
                }
                v101 = &v100[2 * v96];
                *(_WORD *)v101 = *((_WORD *)v9 + v93);
                v70 = v101 + 2;
                while (v83 != v94)
                {
                  v102 = *((_WORD *)v83 - 1);
                  v83 -= 2;
                  *((_WORD *)v101 - 1) = v102;
                  v101 -= 2;
                }
                *(_QWORD *)a1 = v101;
                *(_QWORD *)(a1 + 8) = v70;
                *(_QWORD *)(a1 + 16) = &v100[2 * v99];
                if (v94)
                  operator delete(v94);
              }
              else
              {
                *(_WORD *)v83 = *((_WORD *)v9 + v93);
                v70 = v83 + 2;
              }
              *(_QWORD *)(a1 + 8) = v70;
              ++v69;
              v30 = *(unsigned __int8 *)(a4 + v27);
            }
            while (v69 < v30 - 2);
LABEL_172:
            if (v30 >= 3)
            {
              v103 = 0;
              v104 = *(char **)(a1 + 8);
              do
              {
                v105 = v9[v28];
                v106 = *v29;
                if (v104 >= *v29)
                {
                  v108 = *(char **)a1;
                  v109 = (uint64_t)&v104[-*(_QWORD *)a1];
                  if (v109 <= -3)
                    goto LABEL_730;
                  v110 = v109 >> 1;
                  v111 = v106 - v108;
                  if (v111 <= (v109 >> 1) + 1)
                    v112 = v110 + 1;
                  else
                    v112 = v111;
                  if (v111 >= 0x7FFFFFFFFFFFFFFELL)
                    v113 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v113 = v112;
                  if (v113)
                  {
                    v114 = (char *)sub_1DCB0DAEC(a1 + 16, v113);
                    v108 = *(char **)a1;
                    v104 = *(char **)(a1 + 8);
                  }
                  else
                  {
                    v114 = 0;
                  }
                  v115 = &v114[2 * v110];
                  *(_WORD *)v115 = v105;
                  v107 = v115 + 2;
                  while (v104 != v108)
                  {
                    v116 = *((_WORD *)v104 - 1);
                    v104 -= 2;
                    *((_WORD *)v115 - 1) = v116;
                    v115 -= 2;
                  }
                  v106 = &v114[2 * v113];
                  *(_QWORD *)a1 = v115;
                  *(_QWORD *)(a1 + 8) = v107;
                  *(_QWORD *)(a1 + 16) = v106;
                  if (v108)
                  {
                    operator delete(v108);
                    v106 = *v29;
                  }
                }
                else
                {
                  *(_WORD *)v104 = v105;
                  v107 = v104 + 2;
                }
                *(_QWORD *)(a1 + 8) = v107;
                v117 = v9[v103 + 1 + v28];
                if (v107 >= v106)
                {
                  v119 = *(char **)a1;
                  v120 = (uint64_t)&v107[-*(_QWORD *)a1];
                  if (v120 <= -3)
                    goto LABEL_730;
                  v121 = v120 >> 1;
                  v122 = v106 - v119;
                  if (v122 <= (v120 >> 1) + 1)
                    v123 = v121 + 1;
                  else
                    v123 = v122;
                  if (v122 >= 0x7FFFFFFFFFFFFFFELL)
                    v124 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v124 = v123;
                  if (v124)
                  {
                    v125 = (char *)sub_1DCB0DAEC(a1 + 16, v124);
                    v119 = *(char **)a1;
                    v107 = *(char **)(a1 + 8);
                  }
                  else
                  {
                    v125 = 0;
                  }
                  v126 = &v125[2 * v121];
                  *(_WORD *)v126 = v117;
                  v118 = v126 + 2;
                  while (v107 != v119)
                  {
                    v127 = *((_WORD *)v107 - 1);
                    v107 -= 2;
                    *((_WORD *)v126 - 1) = v127;
                    v126 -= 2;
                  }
                  v106 = &v125[2 * v124];
                  *(_QWORD *)a1 = v126;
                  *(_QWORD *)(a1 + 8) = v118;
                  *(_QWORD *)(a1 + 16) = v106;
                  if (v119)
                  {
                    operator delete(v119);
                    v106 = *v29;
                  }
                }
                else
                {
                  *(_WORD *)v107 = v117;
                  v118 = v107 + 2;
                }
                *(_QWORD *)(a1 + 8) = v118;
                v128 = v9[v103 + 2 + v28];
                if (v118 >= v106)
                {
                  v129 = *(char **)a1;
                  v130 = (uint64_t)&v118[-*(_QWORD *)a1];
                  if (v130 <= -3)
                    goto LABEL_730;
                  v131 = v130 >> 1;
                  v132 = v106 - v129;
                  if (v132 <= (v130 >> 1) + 1)
                    v133 = v131 + 1;
                  else
                    v133 = v132;
                  if (v132 >= 0x7FFFFFFFFFFFFFFELL)
                    v134 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v134 = v133;
                  if (v134)
                  {
                    v135 = (char *)sub_1DCB0DAEC(a1 + 16, v134);
                    v129 = *(char **)a1;
                    v118 = *(char **)(a1 + 8);
                  }
                  else
                  {
                    v135 = 0;
                  }
                  v136 = &v135[2 * v131];
                  *(_WORD *)v136 = v128;
                  v104 = v136 + 2;
                  while (v118 != v129)
                  {
                    v137 = *((_WORD *)v118 - 1);
                    v118 -= 2;
                    *((_WORD *)v136 - 1) = v137;
                    v136 -= 2;
                  }
                  *(_QWORD *)a1 = v136;
                  *(_QWORD *)(a1 + 8) = v104;
                  *(_QWORD *)(a1 + 16) = &v135[2 * v134];
                  if (v129)
                    operator delete(v129);
                }
                else
                {
                  *(_WORD *)v118 = v128;
                  v104 = v118 + 2;
                }
                v14 = a4;
                *(_QWORD *)(a1 + 8) = v104;
                ++v103;
              }
              while (v103 < *(unsigned __int8 *)(a4 + v27) - 2);
            }
          }
          break;
      }
LABEL_692:
      v28 += *(unsigned __int8 *)(v14 + v27++);
      v13 = a6;
      if (v27 == a5)
        return;
    }
  }
  v15 = (unsigned int *)a2;
  v16 = a3;
  while (1)
  {
    v17 = *v15++;
    if (v17 >= 0x10000)
      break;
    if (!--v16)
      goto LABEL_11;
  }
  NSLog(CFSTR("Couldn't copy index buffer because indices too large"));
}

void sub_1DCC19018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1DCC19040(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned __int16 *v9;
  unint64_t v11;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  int v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  int v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  uint64_t v63;
  char *v64;
  int v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  int v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  int v85;
  int v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  int v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  int v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  int v125;
  int v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  int v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  int v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  int v160;
  int v161;
  char *v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  int v170;
  int v171;
  char *v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  int v180;
  int v181;
  char *v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  int v190;
  int v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  char *v198;
  int v199;
  int v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  int v208;
  int v209;
  char *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  int v217;
  int v218;
  char *v219;
  char *v220;
  char *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  char *v227;
  int v228;
  int v229;
  char *v230;
  char *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  char *v236;
  char *v237;
  int v238;
  int v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  char *v245;
  char *v246;
  int v247;
  char *v248;
  char *v249;
  char *v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  char *v256;
  int v257;
  char *v258;
  char *v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  char *v264;
  char *v265;
  int v266;
  _DWORD *v267;
  char *v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  char *v273;
  char *v274;
  int v275;
  char *v276;
  int v277;
  int v278;
  char *v279;
  char *v280;
  char *v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  char *v286;
  char *v287;
  int v288;
  int v289;
  char *v290;
  char *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  char *v296;
  char *v297;
  int v298;
  int v299;
  char *v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char *v305;
  char *v306;
  int v307;
  char *v308;
  char *v309;
  char *v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  char *v315;
  char *v316;
  int v317;
  uint64_t v318;
  char *v319;
  char *v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  char *v325;
  char *v326;
  int v327;
  uint64_t v328;
  char *v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  char *v334;
  char *v335;
  int v336;
  char *v337;
  int v338;
  int v339;
  char *v340;
  char *v341;
  char *v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t v346;
  char *v347;
  char *v348;
  int v349;
  int v350;
  char *v351;
  char *v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  char *v357;
  char *v358;
  int v359;
  int v360;
  char *v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  char *v366;
  char *v367;
  int v368;
  char *v369;
  char *v370;
  char *v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  unint64_t v375;
  char *v376;
  char *v377;
  int v378;
  uint64_t v379;
  char *v380;
  char *v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  char *v386;
  char *v387;
  int v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  int v392;
  void *v393;
  const char *v394;
  uint64_t v395;
  const void *v396;
  size_t v397;
  unint64_t v398;
  const char *v399;
  uint64_t v400;
  const char *v401;
  uint64_t v402;
  unsigned __int8 *v403;
  _DWORD *v404;
  uint64_t v405;
  int v406;
  const char *v407;
  uint64_t v408;
  int *v409;
  _DWORD *v410;
  uint64_t v411;
  int v412;
  const char *v413;
  uint64_t v414;
  unsigned __int16 *v415;
  _DWORD *v416;
  uint64_t v417;
  int v418;
  id v422;
  id v423;
  id v424;

  v8 = a3;
  v9 = (unsigned __int16 *)a2;
  v11 = a6 & 0xFFFFFFFFFFFFFFF8;
  if ((a6 & 0xFFFFFFFFFFFFFFF8) == 0x20 && a7 == a8)
  {
    sub_1DCB231F4(a1, a3);
    memcpy(*(void **)a1, v9, 4 * v8);
    return;
  }
  v13 = a6;
  if (!a6)
  {
    NSLog(CFSTR("Couldn't copy index buffer because invalid indices"));
    return;
  }
  if (a7 == a8)
  {
    sub_1DCB231F4(a1, a3);
    if (v13 == 32)
    {
      if (v8)
      {
        v20 = *(_DWORD **)a1;
        do
        {
          v21 = *(_DWORD *)v9;
          v9 += 2;
          *v20++ = v21;
          --v8;
        }
        while (v8);
      }
    }
    else if (v13 == 16)
    {
      if (v8)
      {
        v22 = *(_DWORD **)a1;
        do
        {
          v23 = *v9++;
          *v22++ = v23;
          --v8;
        }
        while (v8);
      }
    }
    else if (v13 == 8 && v8)
    {
      v14 = *(_DWORD **)a1;
      do
      {
        v15 = *(unsigned __int8 *)v9;
        v9 = (unsigned __int16 *)((char *)v9 + 1);
        *v14++ = v15;
        --v8;
      }
      while (v8);
    }
    return;
  }
  v16 = a4;
  if (a7 == 3 && a8 == 2)
  {
    switch(a6)
    {
      case 32:
        v17 = sub_1DCC15218(a2, a3);
        sub_1DCC1B040((uint64_t)v9, v8, 4 * v17);
        v18 = objc_claimAutoreleasedReturnValue();
        break;
      case 16:
        v17 = sub_1DCC15198(a2, a3);
        sub_1DCC1AF1C((uint64_t)v9, v8, 4 * v17);
        v18 = objc_claimAutoreleasedReturnValue();
        break;
      case 8:
        v17 = sub_1DCC15118(a2, a3);
        sub_1DCC1ADF4((uint64_t)v9, v8, 4 * v17);
        v18 = objc_claimAutoreleasedReturnValue();
        break;
      default:
        goto LABEL_662;
    }
    if (v18)
    {
      v422 = (id)v18;
      sub_1DCB231F4(a1, v17);
      v393 = *(void **)a1;
      v423 = objc_retainAutorelease(v422);
      v396 = (const void *)objc_msgSend_bytes(v423, v394, v395);
      v397 = 4 * v17;
      goto LABEL_669;
    }
LABEL_662:
    NSLog(CFSTR("Couldn't create buffer to copy indices"));
    return;
  }
  if (a7 == 4 && a8 == 2)
  {
    switch(a6)
    {
      case 32:
        sub_1DCC1B2F8(a2, a3);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        break;
      case 16:
        sub_1DCC1B230(a2, a3);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        break;
      case 8:
        sub_1DCC1B164(a2, a3);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        break;
      default:
        v19 = 0;
        goto LABEL_671;
    }
    v424 = v19;
    if (!v19)
    {
LABEL_671:

      return;
    }
    v398 = 3 * (v8 >> 1);
    sub_1DCB231F4(a1, v398);
    if (v11 != 32)
    {
      if (v13 == 32)
      {
        v423 = objc_retainAutorelease(v424);
        v409 = (int *)objc_msgSend_bytes(v423, v407, v408);
        if (v8 >= 2)
        {
          v410 = *(_DWORD **)a1;
          if (v398 <= 1)
            v411 = 1;
          else
            v411 = 3 * (v8 >> 1);
          do
          {
            v412 = *v409++;
            *v410++ = v412;
            --v411;
          }
          while (v411);
        }
      }
      else if (v13 == 16)
      {
        v423 = objc_retainAutorelease(v424);
        v415 = (unsigned __int16 *)objc_msgSend_bytes(v423, v413, v414);
        if (v8 >= 2)
        {
          v416 = *(_DWORD **)a1;
          if (v398 <= 1)
            v417 = 1;
          else
            v417 = 3 * (v8 >> 1);
          do
          {
            v418 = *v415++;
            *v416++ = v418;
            --v417;
          }
          while (v417);
        }
      }
      else
      {
        v423 = objc_retainAutorelease(v424);
        v403 = (unsigned __int8 *)objc_msgSend_bytes(v423, v401, v402);
        if (v8 >= 2)
        {
          v404 = *(_DWORD **)a1;
          if (v398 <= 1)
            v405 = 1;
          else
            v405 = 3 * (v8 >> 1);
          do
          {
            v406 = *v403++;
            *v404++ = v406;
            --v405;
          }
          while (v405);
        }
      }
      goto LABEL_670;
    }
    v393 = *(void **)a1;
    v423 = objc_retainAutorelease(v424);
    v396 = (const void *)objc_msgSend_bytes(v423, v399, v400);
    v397 = 12 * (v8 >> 1);
LABEL_669:
    memcpy(v393, v396, v397);
LABEL_670:
    v19 = v423;
    goto LABEL_671;
  }
  if (a7 != 5 || a8 != 2)
  {
    NSLog(CFSTR("Couldn't copy index data data due to geometry type mismatch"));
    return;
  }
  if (a5)
  {
    v24 = 0;
    v25 = 0;
    v26 = (char **)(a1 + 16);
    do
    {
      LODWORD(v27) = *(unsigned __int8 *)(v16 + v24);
      switch((_DWORD)v27)
      {
        case 3:
          switch(v13)
          {
            case 8:
              v131 = *((unsigned __int8 *)v9 + v25);
              v133 = *(char **)(a1 + 8);
              v132 = *(char **)(a1 + 16);
              if (v133 >= v132)
              {
                v147 = *(char **)a1;
                v148 = (uint64_t)&v133[-*(_QWORD *)a1] >> 2;
                v149 = v148 + 1;
                if ((unint64_t)(v148 + 1) >> 62)
                  goto LABEL_693;
                v150 = v132 - v147;
                if (v150 >> 1 > v149)
                  v149 = v150 >> 1;
                if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFFCLL)
                  v151 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v151 = v149;
                if (v151)
                {
                  v152 = (char *)sub_1DCAE4D04(a1 + 16, v151);
                  v147 = *(char **)a1;
                  v133 = *(char **)(a1 + 8);
                }
                else
                {
                  v152 = 0;
                }
                v169 = &v152[4 * v148];
                *(_DWORD *)v169 = v131;
                v134 = v169 + 4;
                while (v133 != v147)
                {
                  v170 = *((_DWORD *)v133 - 1);
                  v133 -= 4;
                  *((_DWORD *)v169 - 1) = v170;
                  v169 -= 4;
                }
                v132 = &v152[4 * v151];
                *(_QWORD *)a1 = v169;
                *(_QWORD *)(a1 + 8) = v134;
                *(_QWORD *)(a1 + 16) = v132;
                if (v147)
                {
                  operator delete(v147);
                  v132 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v133 = v131;
                v134 = v133 + 4;
              }
              *(_QWORD *)(a1 + 8) = v134;
              v171 = *((unsigned __int8 *)v9 + v25 + 1);
              if (v134 >= v132)
              {
                v173 = *(char **)a1;
                v174 = (uint64_t)&v134[-*(_QWORD *)a1] >> 2;
                v175 = v174 + 1;
                if ((unint64_t)(v174 + 1) >> 62)
                  goto LABEL_693;
                v176 = v132 - v173;
                if (v176 >> 1 > v175)
                  v175 = v176 >> 1;
                if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL)
                  v177 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v177 = v175;
                if (v177)
                {
                  v178 = (char *)sub_1DCAE4D04(a1 + 16, v177);
                  v173 = *(char **)a1;
                  v134 = *(char **)(a1 + 8);
                }
                else
                {
                  v178 = 0;
                }
                v198 = &v178[4 * v174];
                *(_DWORD *)v198 = v171;
                v172 = v198 + 4;
                while (v134 != v173)
                {
                  v199 = *((_DWORD *)v134 - 1);
                  v134 -= 4;
                  *((_DWORD *)v198 - 1) = v199;
                  v198 -= 4;
                }
                v132 = &v178[4 * v177];
                *(_QWORD *)a1 = v198;
                *(_QWORD *)(a1 + 8) = v172;
                *(_QWORD *)(a1 + 16) = v132;
                if (v173)
                {
                  operator delete(v173);
                  v132 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v134 = v171;
                v172 = v134 + 4;
              }
              *(_QWORD *)(a1 + 8) = v172;
              v200 = *((unsigned __int8 *)v9 + v25 + 2);
              if (v172 >= v132)
              {
                v201 = *(char **)a1;
                v202 = (uint64_t)&v172[-*(_QWORD *)a1] >> 2;
                v203 = v202 + 1;
                if ((unint64_t)(v202 + 1) >> 62)
                  goto LABEL_693;
                v204 = v132 - v201;
                if (v204 >> 1 > v203)
                  v203 = v204 >> 1;
                if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL)
                  v205 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v205 = v203;
                if (v205)
                {
                  v206 = (char *)sub_1DCAE4D04(a1 + 16, v205);
                  v201 = *(char **)a1;
                  v172 = *(char **)(a1 + 8);
                }
                else
                {
                  v206 = 0;
                }
                v276 = &v206[4 * v202];
                *(_DWORD *)v276 = v200;
                v135 = v276 + 4;
                while (v172 != v201)
                {
                  v277 = *((_DWORD *)v172 - 1);
                  v172 -= 4;
                  *((_DWORD *)v276 - 1) = v277;
                  v276 -= 4;
                }
                *(_QWORD *)a1 = v276;
                *(_QWORD *)(a1 + 8) = v135;
                *(_QWORD *)(a1 + 16) = &v206[4 * v205];
                if (v201)
                  operator delete(v201);
              }
              else
              {
                *(_DWORD *)v172 = v200;
                v135 = v172 + 4;
              }
              *(_QWORD *)(a1 + 8) = v135;
              goto LABEL_451;
            case 16:
              v135 = *(char **)(a1 + 8);
LABEL_451:
              v278 = v9[v25];
              v279 = *v26;
              if (v135 >= *v26)
              {
                v281 = *(char **)a1;
                v282 = (uint64_t)&v135[-*(_QWORD *)a1] >> 2;
                v283 = v282 + 1;
                if ((unint64_t)(v282 + 1) >> 62)
                  goto LABEL_693;
                v284 = v279 - v281;
                if (v284 >> 1 > v283)
                  v283 = v284 >> 1;
                if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFFCLL)
                  v285 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v285 = v283;
                if (v285)
                {
                  v286 = (char *)sub_1DCAE4D04(a1 + 16, v285);
                  v281 = *(char **)a1;
                  v135 = *(char **)(a1 + 8);
                }
                else
                {
                  v286 = 0;
                }
                v287 = &v286[4 * v282];
                *(_DWORD *)v287 = v278;
                v280 = v287 + 4;
                while (v135 != v281)
                {
                  v288 = *((_DWORD *)v135 - 1);
                  v135 -= 4;
                  *((_DWORD *)v287 - 1) = v288;
                  v287 -= 4;
                }
                v279 = &v286[4 * v285];
                *(_QWORD *)a1 = v287;
                *(_QWORD *)(a1 + 8) = v280;
                *(_QWORD *)(a1 + 16) = v279;
                if (v281)
                {
                  operator delete(v281);
                  v279 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v135 = v278;
                v280 = v135 + 4;
              }
              *(_QWORD *)(a1 + 8) = v280;
              v289 = v9[v25 + 1];
              if (v280 >= v279)
              {
                v291 = *(char **)a1;
                v292 = (uint64_t)&v280[-*(_QWORD *)a1] >> 2;
                v293 = v292 + 1;
                if ((unint64_t)(v292 + 1) >> 62)
                  goto LABEL_693;
                v294 = v279 - v291;
                if (v294 >> 1 > v293)
                  v293 = v294 >> 1;
                if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFFCLL)
                  v295 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v295 = v293;
                if (v295)
                {
                  v296 = (char *)sub_1DCAE4D04(a1 + 16, v295);
                  v291 = *(char **)a1;
                  v280 = *(char **)(a1 + 8);
                }
                else
                {
                  v296 = 0;
                }
                v297 = &v296[4 * v292];
                *(_DWORD *)v297 = v289;
                v290 = v297 + 4;
                while (v280 != v291)
                {
                  v298 = *((_DWORD *)v280 - 1);
                  v280 -= 4;
                  *((_DWORD *)v297 - 1) = v298;
                  v297 -= 4;
                }
                v279 = &v296[4 * v295];
                *(_QWORD *)a1 = v297;
                *(_QWORD *)(a1 + 8) = v290;
                *(_QWORD *)(a1 + 16) = v279;
                if (v291)
                {
                  operator delete(v291);
                  v279 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v280 = v289;
                v290 = v280 + 4;
              }
              *(_QWORD *)(a1 + 8) = v290;
              v299 = v9[v25 + 2];
              if (v290 >= v279)
              {
                v300 = *(char **)a1;
                v301 = (uint64_t)&v290[-*(_QWORD *)a1] >> 2;
                v302 = v301 + 1;
                if ((unint64_t)(v301 + 1) >> 62)
                  goto LABEL_693;
                v303 = v279 - v300;
                if (v303 >> 1 > v302)
                  v302 = v303 >> 1;
                if ((unint64_t)v303 >= 0x7FFFFFFFFFFFFFFCLL)
                  v304 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v304 = v302;
                if (v304)
                {
                  v305 = (char *)sub_1DCAE4D04(a1 + 16, v304);
                  v300 = *(char **)a1;
                  v290 = *(char **)(a1 + 8);
                }
                else
                {
                  v305 = 0;
                }
                v306 = &v305[4 * v301];
                *(_DWORD *)v306 = v299;
                v29 = v306 + 4;
                while (v290 != v300)
                {
                  v307 = *((_DWORD *)v290 - 1);
                  v290 -= 4;
                  *((_DWORD *)v306 - 1) = v307;
                  v306 -= 4;
                }
                *(_QWORD *)a1 = v306;
                *(_QWORD *)(a1 + 8) = v29;
                *(_QWORD *)(a1 + 16) = &v305[4 * v304];
                if (v300)
                  operator delete(v300);
              }
              else
              {
                *(_DWORD *)v290 = v299;
                v29 = v290 + 4;
              }
              *(_QWORD *)(a1 + 8) = v29;
              goto LABEL_500;
            case 32:
              v29 = *(char **)(a1 + 8);
LABEL_500:
              v308 = *v26;
              if (v29 >= *v26)
              {
                v310 = *(char **)a1;
                v311 = (uint64_t)&v29[-*(_QWORD *)a1] >> 2;
                v312 = v311 + 1;
                if ((unint64_t)(v311 + 1) >> 62)
                  goto LABEL_693;
                v313 = v308 - v310;
                if (v313 >> 1 > v312)
                  v312 = v313 >> 1;
                if ((unint64_t)v313 >= 0x7FFFFFFFFFFFFFFCLL)
                  v314 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v314 = v312;
                if (v314)
                {
                  v315 = (char *)sub_1DCAE4D04(a1 + 16, v314);
                  v310 = *(char **)a1;
                  v29 = *(char **)(a1 + 8);
                }
                else
                {
                  v315 = 0;
                }
                v316 = &v315[4 * v311];
                *(_DWORD *)v316 = *(_DWORD *)&v9[2 * v25];
                v309 = v316 + 4;
                while (v29 != v310)
                {
                  v317 = *((_DWORD *)v29 - 1);
                  v29 -= 4;
                  *((_DWORD *)v316 - 1) = v317;
                  v316 -= 4;
                }
                v308 = &v315[4 * v314];
                *(_QWORD *)a1 = v316;
                *(_QWORD *)(a1 + 8) = v309;
                *(_QWORD *)(a1 + 16) = v308;
                if (v310)
                {
                  operator delete(v310);
                  v308 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v29 = *(_DWORD *)&v9[2 * v25];
                v309 = v29 + 4;
              }
              *(_QWORD *)(a1 + 8) = v309;
              v318 = v25 + 1;
              if (v309 >= v308)
              {
                v320 = *(char **)a1;
                v321 = (uint64_t)&v309[-*(_QWORD *)a1] >> 2;
                v322 = v321 + 1;
                if ((unint64_t)(v321 + 1) >> 62)
                  goto LABEL_693;
                v323 = v308 - v320;
                if (v323 >> 1 > v322)
                  v322 = v323 >> 1;
                if ((unint64_t)v323 >= 0x7FFFFFFFFFFFFFFCLL)
                  v324 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v324 = v322;
                if (v324)
                {
                  v325 = (char *)sub_1DCAE4D04(a1 + 16, v324);
                  v320 = *(char **)a1;
                  v309 = *(char **)(a1 + 8);
                }
                else
                {
                  v325 = 0;
                }
                v326 = &v325[4 * v321];
                *(_DWORD *)v326 = *(_DWORD *)&v9[2 * v318];
                v319 = v326 + 4;
                while (v309 != v320)
                {
                  v327 = *((_DWORD *)v309 - 1);
                  v309 -= 4;
                  *((_DWORD *)v326 - 1) = v327;
                  v326 -= 4;
                }
                v308 = &v325[4 * v324];
                *(_QWORD *)a1 = v326;
                *(_QWORD *)(a1 + 8) = v319;
                *(_QWORD *)(a1 + 16) = v308;
                if (v320)
                {
                  operator delete(v320);
                  v308 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v309 = *(_DWORD *)&v9[2 * v318];
                v319 = v309 + 4;
              }
              *(_QWORD *)(a1 + 8) = v319;
              v328 = v25 + 2;
              if (v319 >= v308)
              {
                v329 = *(char **)a1;
                v330 = (uint64_t)&v319[-*(_QWORD *)a1] >> 2;
                v331 = v330 + 1;
                if ((unint64_t)(v330 + 1) >> 62)
                  goto LABEL_693;
                v332 = v308 - v329;
                if (v332 >> 1 > v331)
                  v331 = v332 >> 1;
                if ((unint64_t)v332 >= 0x7FFFFFFFFFFFFFFCLL)
                  v333 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v333 = v331;
                if (v333)
                {
                  v334 = (char *)sub_1DCAE4D04(a1 + 16, v333);
                  v329 = *(char **)a1;
                  v319 = *(char **)(a1 + 8);
                }
                else
                {
                  v334 = 0;
                }
                v335 = &v334[4 * v330];
                *(_DWORD *)v335 = *(_DWORD *)&v9[2 * v328];
                v267 = v335 + 4;
                while (v319 != v329)
                {
                  v336 = *((_DWORD *)v319 - 1);
                  v319 -= 4;
                  *((_DWORD *)v335 - 1) = v336;
                  v335 -= 4;
                }
                *(_QWORD *)a1 = v335;
                *(_QWORD *)(a1 + 8) = v267;
                *(_QWORD *)(a1 + 16) = &v334[4 * v333];
                if (v329)
                  operator delete(v329);
              }
              else
              {
                *(_DWORD *)v319 = *(_DWORD *)&v9[2 * v328];
                v267 = v319 + 4;
              }
              v16 = a4;
              goto LABEL_655;
          }
          break;
        case 2:
          switch(v13)
          {
            case 8:
              v136 = *((unsigned __int8 *)v9 + v25);
              v138 = *(char **)(a1 + 8);
              v137 = *(char **)(a1 + 16);
              if (v138 >= v137)
              {
                v153 = *(char **)a1;
                v154 = (uint64_t)&v138[-*(_QWORD *)a1] >> 2;
                v155 = v154 + 1;
                if ((unint64_t)(v154 + 1) >> 62)
                  goto LABEL_693;
                v156 = v137 - v153;
                if (v156 >> 1 > v155)
                  v155 = v156 >> 1;
                if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL)
                  v157 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v157 = v155;
                if (v157)
                {
                  v158 = (char *)sub_1DCAE4D04(a1 + 16, v157);
                  v153 = *(char **)a1;
                  v138 = *(char **)(a1 + 8);
                }
                else
                {
                  v158 = 0;
                }
                v179 = &v158[4 * v154];
                *(_DWORD *)v179 = v136;
                v139 = v179 + 4;
                while (v138 != v153)
                {
                  v180 = *((_DWORD *)v138 - 1);
                  v138 -= 4;
                  *((_DWORD *)v179 - 1) = v180;
                  v179 -= 4;
                }
                v137 = &v158[4 * v157];
                *(_QWORD *)a1 = v179;
                *(_QWORD *)(a1 + 8) = v139;
                *(_QWORD *)(a1 + 16) = v137;
                if (v153)
                {
                  operator delete(v153);
                  v137 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v138 = v136;
                v139 = v138 + 4;
              }
              *(_QWORD *)(a1 + 8) = v139;
              v181 = *((unsigned __int8 *)v9 + v25 + 1);
              if (v139 >= v137)
              {
                v183 = *(char **)a1;
                v184 = (uint64_t)&v139[-*(_QWORD *)a1] >> 2;
                v185 = v184 + 1;
                if ((unint64_t)(v184 + 1) >> 62)
                  goto LABEL_693;
                v186 = v137 - v183;
                if (v186 >> 1 > v185)
                  v185 = v186 >> 1;
                if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL)
                  v187 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v187 = v185;
                if (v187)
                {
                  v188 = (char *)sub_1DCAE4D04(a1 + 16, v187);
                  v183 = *(char **)a1;
                  v139 = *(char **)(a1 + 8);
                }
                else
                {
                  v188 = 0;
                }
                v207 = &v188[4 * v184];
                *(_DWORD *)v207 = v181;
                v182 = v207 + 4;
                while (v139 != v183)
                {
                  v208 = *((_DWORD *)v139 - 1);
                  v139 -= 4;
                  *((_DWORD *)v207 - 1) = v208;
                  v207 -= 4;
                }
                v137 = &v188[4 * v187];
                *(_QWORD *)a1 = v207;
                *(_QWORD *)(a1 + 8) = v182;
                *(_QWORD *)(a1 + 16) = v137;
                if (v183)
                {
                  operator delete(v183);
                  v137 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v139 = v181;
                v182 = v139 + 4;
              }
              *(_QWORD *)(a1 + 8) = v182;
              v209 = *((unsigned __int8 *)v9 + v25 + 1);
              if (v182 >= v137)
              {
                v210 = *(char **)a1;
                v211 = (uint64_t)&v182[-*(_QWORD *)a1] >> 2;
                v212 = v211 + 1;
                if ((unint64_t)(v211 + 1) >> 62)
                  goto LABEL_693;
                v213 = v137 - v210;
                if (v213 >> 1 > v212)
                  v212 = v213 >> 1;
                if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFFCLL)
                  v214 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v214 = v212;
                if (v214)
                {
                  v215 = (char *)sub_1DCAE4D04(a1 + 16, v214);
                  v210 = *(char **)a1;
                  v182 = *(char **)(a1 + 8);
                }
                else
                {
                  v215 = 0;
                }
                v337 = &v215[4 * v211];
                *(_DWORD *)v337 = v209;
                v140 = v337 + 4;
                while (v182 != v210)
                {
                  v338 = *((_DWORD *)v182 - 1);
                  v182 -= 4;
                  *((_DWORD *)v337 - 1) = v338;
                  v337 -= 4;
                }
                *(_QWORD *)a1 = v337;
                *(_QWORD *)(a1 + 8) = v140;
                *(_QWORD *)(a1 + 16) = &v215[4 * v214];
                if (v210)
                  operator delete(v210);
              }
              else
              {
                *(_DWORD *)v182 = v209;
                v140 = v182 + 4;
              }
              *(_QWORD *)(a1 + 8) = v140;
              goto LABEL_556;
            case 16:
              v140 = *(char **)(a1 + 8);
LABEL_556:
              v339 = v9[v25];
              v340 = *v26;
              if (v140 >= *v26)
              {
                v342 = *(char **)a1;
                v343 = (uint64_t)&v140[-*(_QWORD *)a1] >> 2;
                v344 = v343 + 1;
                if ((unint64_t)(v343 + 1) >> 62)
                  goto LABEL_693;
                v345 = v340 - v342;
                if (v345 >> 1 > v344)
                  v344 = v345 >> 1;
                if ((unint64_t)v345 >= 0x7FFFFFFFFFFFFFFCLL)
                  v346 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v346 = v344;
                if (v346)
                {
                  v347 = (char *)sub_1DCAE4D04(a1 + 16, v346);
                  v342 = *(char **)a1;
                  v140 = *(char **)(a1 + 8);
                }
                else
                {
                  v347 = 0;
                }
                v348 = &v347[4 * v343];
                *(_DWORD *)v348 = v339;
                v341 = v348 + 4;
                while (v140 != v342)
                {
                  v349 = *((_DWORD *)v140 - 1);
                  v140 -= 4;
                  *((_DWORD *)v348 - 1) = v349;
                  v348 -= 4;
                }
                v340 = &v347[4 * v346];
                *(_QWORD *)a1 = v348;
                *(_QWORD *)(a1 + 8) = v341;
                *(_QWORD *)(a1 + 16) = v340;
                if (v342)
                {
                  operator delete(v342);
                  v340 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v140 = v339;
                v341 = v140 + 4;
              }
              *(_QWORD *)(a1 + 8) = v341;
              v350 = v9[v25 + 1];
              if (v341 >= v340)
              {
                v352 = *(char **)a1;
                v353 = (uint64_t)&v341[-*(_QWORD *)a1] >> 2;
                v354 = v353 + 1;
                if ((unint64_t)(v353 + 1) >> 62)
                  goto LABEL_693;
                v355 = v340 - v352;
                if (v355 >> 1 > v354)
                  v354 = v355 >> 1;
                if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFFCLL)
                  v356 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v356 = v354;
                if (v356)
                {
                  v357 = (char *)sub_1DCAE4D04(a1 + 16, v356);
                  v352 = *(char **)a1;
                  v341 = *(char **)(a1 + 8);
                }
                else
                {
                  v357 = 0;
                }
                v358 = &v357[4 * v353];
                *(_DWORD *)v358 = v350;
                v351 = v358 + 4;
                if (v341 == v352)
                {
                  v16 = a4;
                }
                else
                {
                  v16 = a4;
                  do
                  {
                    v359 = *((_DWORD *)v341 - 1);
                    v341 -= 4;
                    *((_DWORD *)v358 - 1) = v359;
                    v358 -= 4;
                  }
                  while (v341 != v352);
                }
                v340 = &v357[4 * v356];
                *(_QWORD *)a1 = v358;
                *(_QWORD *)(a1 + 8) = v351;
                *(_QWORD *)(a1 + 16) = v340;
                if (v352)
                {
                  operator delete(v352);
                  v340 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v341 = v350;
                v351 = v341 + 4;
                v16 = a4;
              }
              *(_QWORD *)(a1 + 8) = v351;
              v360 = v9[v25 + 1];
              if (v351 >= v340)
              {
                v361 = *(char **)a1;
                v362 = (uint64_t)&v351[-*(_QWORD *)a1] >> 2;
                v363 = v362 + 1;
                if ((unint64_t)(v362 + 1) >> 62)
                  goto LABEL_693;
                v364 = v340 - v361;
                if (v364 >> 1 > v363)
                  v363 = v364 >> 1;
                if ((unint64_t)v364 >= 0x7FFFFFFFFFFFFFFCLL)
                  v365 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v365 = v363;
                if (v365)
                {
                  v366 = (char *)sub_1DCAE4D04(a1 + 16, v365);
                  v361 = *(char **)a1;
                  v351 = *(char **)(a1 + 8);
                }
                else
                {
                  v366 = 0;
                }
                v367 = &v366[4 * v362];
                *(_DWORD *)v367 = v360;
                v30 = v367 + 4;
                while (v351 != v361)
                {
                  v368 = *((_DWORD *)v351 - 1);
                  v351 -= 4;
                  *((_DWORD *)v367 - 1) = v368;
                  v367 -= 4;
                }
                *(_QWORD *)a1 = v367;
                *(_QWORD *)(a1 + 8) = v30;
                *(_QWORD *)(a1 + 16) = &v366[4 * v365];
                if (v361)
                  operator delete(v361);
              }
              else
              {
                *(_DWORD *)v351 = v360;
                v30 = v351 + 4;
              }
              *(_QWORD *)(a1 + 8) = v30;
LABEL_607:
              v369 = *v26;
              if (v30 >= *v26)
              {
                v371 = *(char **)a1;
                v372 = (uint64_t)&v30[-*(_QWORD *)a1] >> 2;
                v373 = v372 + 1;
                if ((unint64_t)(v372 + 1) >> 62)
                  goto LABEL_693;
                v374 = v369 - v371;
                if (v374 >> 1 > v373)
                  v373 = v374 >> 1;
                if ((unint64_t)v374 >= 0x7FFFFFFFFFFFFFFCLL)
                  v375 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v375 = v373;
                if (v375)
                {
                  v376 = (char *)sub_1DCAE4D04(a1 + 16, v375);
                  v371 = *(char **)a1;
                  v30 = *(char **)(a1 + 8);
                }
                else
                {
                  v376 = 0;
                }
                v377 = &v376[4 * v372];
                *(_DWORD *)v377 = *(_DWORD *)&v9[2 * v25];
                v370 = v377 + 4;
                while (v30 != v371)
                {
                  v378 = *((_DWORD *)v30 - 1);
                  v30 -= 4;
                  *((_DWORD *)v377 - 1) = v378;
                  v377 -= 4;
                }
                v369 = &v376[4 * v375];
                *(_QWORD *)a1 = v377;
                *(_QWORD *)(a1 + 8) = v370;
                *(_QWORD *)(a1 + 16) = v369;
                if (v371)
                {
                  operator delete(v371);
                  v369 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v30 = *(_DWORD *)&v9[2 * v25];
                v370 = v30 + 4;
              }
              *(_QWORD *)(a1 + 8) = v370;
              v379 = v25 + 1;
              if (v370 >= v369)
              {
                v381 = *(char **)a1;
                v382 = (uint64_t)&v370[-*(_QWORD *)a1] >> 2;
                v383 = v382 + 1;
                if ((unint64_t)(v382 + 1) >> 62)
                  goto LABEL_693;
                v384 = v369 - v381;
                if (v384 >> 1 > v383)
                  v383 = v384 >> 1;
                if ((unint64_t)v384 >= 0x7FFFFFFFFFFFFFFCLL)
                  v385 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v385 = v383;
                if (v385)
                {
                  v386 = (char *)sub_1DCAE4D04(a1 + 16, v385);
                  v381 = *(char **)a1;
                  v370 = *(char **)(a1 + 8);
                }
                else
                {
                  v386 = 0;
                }
                v387 = &v386[4 * v382];
                *(_DWORD *)v387 = *(_DWORD *)&v9[2 * v379];
                v380 = v387 + 4;
                while (v370 != v381)
                {
                  v388 = *((_DWORD *)v370 - 1);
                  v370 -= 4;
                  *((_DWORD *)v387 - 1) = v388;
                  v387 -= 4;
                }
                v369 = &v386[4 * v385];
                *(_QWORD *)a1 = v387;
                *(_QWORD *)(a1 + 8) = v380;
                *(_QWORD *)(a1 + 16) = v369;
                if (v381)
                {
                  operator delete(v381);
                  v369 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v370 = *(_DWORD *)&v9[2 * v379];
                v380 = v370 + 4;
              }
              *(_QWORD *)(a1 + 8) = v380;
              if (v380 < v369)
              {
                *(_DWORD *)v380 = *(_DWORD *)&v9[2 * v379];
                v267 = v380 + 4;
                goto LABEL_655;
              }
              v268 = *(char **)a1;
              v389 = (uint64_t)&v380[-*(_QWORD *)a1] >> 2;
              v390 = v389 + 1;
              if ((unint64_t)(v389 + 1) >> 62)
LABEL_693:
                sub_1DCAE4C44();
              v391 = v369 - v268;
              if (v391 >> 1 > v390)
                v390 = v391 >> 1;
              if ((unint64_t)v391 >= 0x7FFFFFFFFFFFFFFCLL)
                v272 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v272 = v390;
              if (v272)
              {
                v273 = (char *)sub_1DCAE4D04(a1 + 16, v272);
                v268 = *(char **)a1;
                v380 = *(char **)(a1 + 8);
              }
              else
              {
                v273 = 0;
              }
              v274 = &v273[4 * v389];
              *(_DWORD *)v274 = *(_DWORD *)&v9[2 * v379];
              v267 = v274 + 4;
              while (v380 != v268)
              {
                v392 = *((_DWORD *)v380 - 1);
                v380 -= 4;
                *((_DWORD *)v274 - 1) = v392;
                v274 -= 4;
              }
LABEL_653:
              *(_QWORD *)a1 = v274;
              *(_QWORD *)(a1 + 8) = v267;
              *(_QWORD *)(a1 + 16) = &v273[4 * v272];
              if (v268)
                operator delete(v268);
              goto LABEL_655;
            case 32:
              v30 = *(char **)(a1 + 8);
              goto LABEL_607;
          }
          break;
        case 1:
          switch(v13)
          {
            case 8:
              v126 = *((unsigned __int8 *)v9 + v25);
              v128 = *(char **)(a1 + 8);
              v127 = *(char **)(a1 + 16);
              if (v128 >= v127)
              {
                v141 = *(char **)a1;
                v142 = (uint64_t)&v128[-*(_QWORD *)a1] >> 2;
                v143 = v142 + 1;
                if ((unint64_t)(v142 + 1) >> 62)
                  goto LABEL_693;
                v144 = v127 - v141;
                if (v144 >> 1 > v143)
                  v143 = v144 >> 1;
                if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL)
                  v145 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v145 = v143;
                if (v145)
                {
                  v146 = (char *)sub_1DCAE4D04(a1 + 16, v145);
                  v141 = *(char **)a1;
                  v128 = *(char **)(a1 + 8);
                }
                else
                {
                  v146 = 0;
                }
                v159 = &v146[4 * v142];
                *(_DWORD *)v159 = v126;
                v129 = v159 + 4;
                while (v128 != v141)
                {
                  v160 = *((_DWORD *)v128 - 1);
                  v128 -= 4;
                  *((_DWORD *)v159 - 1) = v160;
                  v159 -= 4;
                }
                v127 = &v146[4 * v145];
                *(_QWORD *)a1 = v159;
                *(_QWORD *)(a1 + 8) = v129;
                *(_QWORD *)(a1 + 16) = v127;
                if (v141)
                {
                  operator delete(v141);
                  v127 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v128 = v126;
                v129 = v128 + 4;
              }
              *(_QWORD *)(a1 + 8) = v129;
              v161 = *((unsigned __int8 *)v9 + v25);
              if (v129 >= v127)
              {
                v163 = *(char **)a1;
                v164 = (uint64_t)&v129[-*(_QWORD *)a1] >> 2;
                v165 = v164 + 1;
                if ((unint64_t)(v164 + 1) >> 62)
                  goto LABEL_693;
                v166 = v127 - v163;
                if (v166 >> 1 > v165)
                  v165 = v166 >> 1;
                if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL)
                  v167 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v167 = v165;
                if (v167)
                {
                  v168 = (char *)sub_1DCAE4D04(a1 + 16, v167);
                  v163 = *(char **)a1;
                  v129 = *(char **)(a1 + 8);
                }
                else
                {
                  v168 = 0;
                }
                v189 = &v168[4 * v164];
                *(_DWORD *)v189 = v161;
                v162 = v189 + 4;
                while (v129 != v163)
                {
                  v190 = *((_DWORD *)v129 - 1);
                  v129 -= 4;
                  *((_DWORD *)v189 - 1) = v190;
                  v189 -= 4;
                }
                v127 = &v168[4 * v167];
                *(_QWORD *)a1 = v189;
                *(_QWORD *)(a1 + 8) = v162;
                *(_QWORD *)(a1 + 16) = v127;
                if (v163)
                {
                  operator delete(v163);
                  v127 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v129 = v161;
                v162 = v129 + 4;
              }
              *(_QWORD *)(a1 + 8) = v162;
              v191 = *((unsigned __int8 *)v9 + v25);
              if (v162 >= v127)
              {
                v192 = *(char **)a1;
                v193 = (uint64_t)&v162[-*(_QWORD *)a1] >> 2;
                v194 = v193 + 1;
                if ((unint64_t)(v193 + 1) >> 62)
                  goto LABEL_693;
                v195 = v127 - v192;
                if (v195 >> 1 > v194)
                  v194 = v195 >> 1;
                if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFFCLL)
                  v196 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v196 = v194;
                if (v196)
                {
                  v197 = (char *)sub_1DCAE4D04(a1 + 16, v196);
                  v192 = *(char **)a1;
                  v162 = *(char **)(a1 + 8);
                }
                else
                {
                  v197 = 0;
                }
                v216 = &v197[4 * v193];
                *(_DWORD *)v216 = v191;
                v130 = v216 + 4;
                while (v162 != v192)
                {
                  v217 = *((_DWORD *)v162 - 1);
                  v162 -= 4;
                  *((_DWORD *)v216 - 1) = v217;
                  v216 -= 4;
                }
                *(_QWORD *)a1 = v216;
                *(_QWORD *)(a1 + 8) = v130;
                *(_QWORD *)(a1 + 16) = &v197[4 * v196];
                if (v192)
                  operator delete(v192);
              }
              else
              {
                *(_DWORD *)v162 = v191;
                v130 = v162 + 4;
              }
              *(_QWORD *)(a1 + 8) = v130;
              goto LABEL_349;
            case 16:
              v130 = *(char **)(a1 + 8);
LABEL_349:
              v218 = v9[v25];
              v219 = *v26;
              if (v130 >= *v26)
              {
                v221 = *(char **)a1;
                v222 = (uint64_t)&v130[-*(_QWORD *)a1] >> 2;
                v223 = v222 + 1;
                if ((unint64_t)(v222 + 1) >> 62)
                  goto LABEL_693;
                v224 = v219 - v221;
                if (v224 >> 1 > v223)
                  v223 = v224 >> 1;
                if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFFCLL)
                  v225 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v225 = v223;
                if (v225)
                {
                  v226 = (char *)sub_1DCAE4D04(a1 + 16, v225);
                  v221 = *(char **)a1;
                  v130 = *(char **)(a1 + 8);
                }
                else
                {
                  v226 = 0;
                }
                v227 = &v226[4 * v222];
                *(_DWORD *)v227 = v218;
                v220 = v227 + 4;
                while (v130 != v221)
                {
                  v228 = *((_DWORD *)v130 - 1);
                  v130 -= 4;
                  *((_DWORD *)v227 - 1) = v228;
                  v227 -= 4;
                }
                v219 = &v226[4 * v225];
                *(_QWORD *)a1 = v227;
                *(_QWORD *)(a1 + 8) = v220;
                *(_QWORD *)(a1 + 16) = v219;
                if (v221)
                {
                  operator delete(v221);
                  v219 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v130 = v218;
                v220 = v130 + 4;
              }
              *(_QWORD *)(a1 + 8) = v220;
              v229 = v9[v25];
              if (v220 >= v219)
              {
                v231 = *(char **)a1;
                v232 = (uint64_t)&v220[-*(_QWORD *)a1] >> 2;
                v233 = v232 + 1;
                if ((unint64_t)(v232 + 1) >> 62)
                  goto LABEL_693;
                v234 = v219 - v231;
                if (v234 >> 1 > v233)
                  v233 = v234 >> 1;
                if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFFCLL)
                  v235 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v235 = v233;
                if (v235)
                {
                  v236 = (char *)sub_1DCAE4D04(a1 + 16, v235);
                  v231 = *(char **)a1;
                  v220 = *(char **)(a1 + 8);
                }
                else
                {
                  v236 = 0;
                }
                v237 = &v236[4 * v232];
                *(_DWORD *)v237 = v229;
                v230 = v237 + 4;
                while (v220 != v231)
                {
                  v238 = *((_DWORD *)v220 - 1);
                  v220 -= 4;
                  *((_DWORD *)v237 - 1) = v238;
                  v237 -= 4;
                }
                v219 = &v236[4 * v235];
                *(_QWORD *)a1 = v237;
                *(_QWORD *)(a1 + 8) = v230;
                *(_QWORD *)(a1 + 16) = v219;
                if (v231)
                {
                  operator delete(v231);
                  v219 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v220 = v229;
                v230 = v220 + 4;
              }
              *(_QWORD *)(a1 + 8) = v230;
              v239 = v9[v25];
              if (v230 >= v219)
              {
                v240 = *(char **)a1;
                v241 = (uint64_t)&v230[-*(_QWORD *)a1] >> 2;
                v242 = v241 + 1;
                if ((unint64_t)(v241 + 1) >> 62)
                  goto LABEL_693;
                v243 = v219 - v240;
                if (v243 >> 1 > v242)
                  v242 = v243 >> 1;
                if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFFCLL)
                  v244 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v244 = v242;
                if (v244)
                {
                  v245 = (char *)sub_1DCAE4D04(a1 + 16, v244);
                  v240 = *(char **)a1;
                  v230 = *(char **)(a1 + 8);
                }
                else
                {
                  v245 = 0;
                }
                v246 = &v245[4 * v241];
                *(_DWORD *)v246 = v239;
                v28 = v246 + 4;
                while (v230 != v240)
                {
                  v247 = *((_DWORD *)v230 - 1);
                  v230 -= 4;
                  *((_DWORD *)v246 - 1) = v247;
                  v246 -= 4;
                }
                *(_QWORD *)a1 = v246;
                *(_QWORD *)(a1 + 8) = v28;
                *(_QWORD *)(a1 + 16) = &v245[4 * v244];
                if (v240)
                  operator delete(v240);
              }
              else
              {
                *(_DWORD *)v230 = v239;
                v28 = v230 + 4;
              }
              *(_QWORD *)(a1 + 8) = v28;
              goto LABEL_398;
            case 32:
              v28 = *(char **)(a1 + 8);
LABEL_398:
              v248 = *v26;
              if (v28 >= *v26)
              {
                v250 = *(char **)a1;
                v251 = (uint64_t)&v28[-*(_QWORD *)a1] >> 2;
                v252 = v251 + 1;
                if ((unint64_t)(v251 + 1) >> 62)
                  goto LABEL_693;
                v253 = v248 - v250;
                if (v253 >> 1 > v252)
                  v252 = v253 >> 1;
                if ((unint64_t)v253 >= 0x7FFFFFFFFFFFFFFCLL)
                  v254 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v254 = v252;
                if (v254)
                {
                  v255 = (char *)sub_1DCAE4D04(a1 + 16, v254);
                  v250 = *(char **)a1;
                  v28 = *(char **)(a1 + 8);
                }
                else
                {
                  v255 = 0;
                }
                v256 = &v255[4 * v251];
                *(_DWORD *)v256 = *(_DWORD *)&v9[2 * v25];
                v249 = v256 + 4;
                while (v28 != v250)
                {
                  v257 = *((_DWORD *)v28 - 1);
                  v28 -= 4;
                  *((_DWORD *)v256 - 1) = v257;
                  v256 -= 4;
                }
                v248 = &v255[4 * v254];
                *(_QWORD *)a1 = v256;
                *(_QWORD *)(a1 + 8) = v249;
                *(_QWORD *)(a1 + 16) = v248;
                if (v250)
                {
                  operator delete(v250);
                  v248 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v28 = *(_DWORD *)&v9[2 * v25];
                v249 = v28 + 4;
              }
              *(_QWORD *)(a1 + 8) = v249;
              if (v249 >= v248)
              {
                v259 = *(char **)a1;
                v260 = (uint64_t)&v249[-*(_QWORD *)a1] >> 2;
                v261 = v260 + 1;
                if ((unint64_t)(v260 + 1) >> 62)
                  goto LABEL_693;
                v262 = v248 - v259;
                if (v262 >> 1 > v261)
                  v261 = v262 >> 1;
                if ((unint64_t)v262 >= 0x7FFFFFFFFFFFFFFCLL)
                  v263 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v263 = v261;
                if (v263)
                {
                  v264 = (char *)sub_1DCAE4D04(a1 + 16, v263);
                  v259 = *(char **)a1;
                  v249 = *(char **)(a1 + 8);
                }
                else
                {
                  v264 = 0;
                }
                v265 = &v264[4 * v260];
                *(_DWORD *)v265 = *(_DWORD *)&v9[2 * v25];
                v258 = v265 + 4;
                while (v249 != v259)
                {
                  v266 = *((_DWORD *)v249 - 1);
                  v249 -= 4;
                  *((_DWORD *)v265 - 1) = v266;
                  v265 -= 4;
                }
                v248 = &v264[4 * v263];
                *(_QWORD *)a1 = v265;
                *(_QWORD *)(a1 + 8) = v258;
                *(_QWORD *)(a1 + 16) = v248;
                if (v259)
                {
                  operator delete(v259);
                  v248 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v249 = *(_DWORD *)&v9[2 * v25];
                v258 = v249 + 4;
              }
              *(_QWORD *)(a1 + 8) = v258;
              if (v258 < v248)
              {
                *(_DWORD *)v258 = *(_DWORD *)&v9[2 * v25];
                v267 = v258 + 4;
LABEL_655:
                *(_QWORD *)(a1 + 8) = v267;
                goto LABEL_656;
              }
              v268 = *(char **)a1;
              v269 = (uint64_t)&v258[-*(_QWORD *)a1] >> 2;
              v270 = v269 + 1;
              if ((unint64_t)(v269 + 1) >> 62)
                goto LABEL_693;
              v271 = v248 - v268;
              if (v271 >> 1 > v270)
                v270 = v271 >> 1;
              if ((unint64_t)v271 >= 0x7FFFFFFFFFFFFFFCLL)
                v272 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v272 = v270;
              if (v272)
              {
                v273 = (char *)sub_1DCAE4D04(a1 + 16, v272);
                v268 = *(char **)a1;
                v258 = *(char **)(a1 + 8);
              }
              else
              {
                v273 = 0;
              }
              v274 = &v273[4 * v269];
              *(_DWORD *)v274 = *(_DWORD *)&v9[2 * v25];
              v267 = v274 + 4;
              while (v258 != v268)
              {
                v275 = *((_DWORD *)v258 - 1);
                v258 -= 4;
                *((_DWORD *)v274 - 1) = v275;
                v274 -= 4;
              }
              goto LABEL_653;
          }
          break;
        default:
          if (v13 == 32)
            goto LABEL_161;
          if (v13 != 16)
          {
            if (v13 != 8 || v27 < 3)
              break;
            v31 = 0;
            v32 = *(char **)(a1 + 8);
            do
            {
              v33 = *((unsigned __int8 *)v9 + v25);
              v34 = *v26;
              if (v32 >= *v26)
              {
                v36 = *(char **)a1;
                v37 = (uint64_t)&v32[-*(_QWORD *)a1] >> 2;
                v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 62)
                  goto LABEL_693;
                v39 = v34 - v36;
                if (v39 >> 1 > v38)
                  v38 = v39 >> 1;
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
                  v40 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v40 = v38;
                if (v40)
                {
                  v41 = (char *)sub_1DCAE4D04(a1 + 16, v40);
                  v36 = *(char **)a1;
                  v32 = *(char **)(a1 + 8);
                }
                else
                {
                  v41 = 0;
                }
                v42 = &v41[4 * v37];
                *(_DWORD *)v42 = v33;
                v35 = v42 + 4;
                while (v32 != v36)
                {
                  v43 = *((_DWORD *)v32 - 1);
                  v32 -= 4;
                  *((_DWORD *)v42 - 1) = v43;
                  v42 -= 4;
                }
                v34 = &v41[4 * v40];
                *(_QWORD *)a1 = v42;
                *(_QWORD *)(a1 + 8) = v35;
                *(_QWORD *)(a1 + 16) = v34;
                if (v36)
                {
                  operator delete(v36);
                  v34 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v32 = v33;
                v35 = v32 + 4;
              }
              *(_QWORD *)(a1 + 8) = v35;
              v44 = *((unsigned __int8 *)v9 + v31 + v25 + 1);
              if (v35 >= v34)
              {
                v46 = *(char **)a1;
                v47 = (uint64_t)&v35[-*(_QWORD *)a1] >> 2;
                v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 62)
                  goto LABEL_693;
                v49 = v34 - v46;
                if (v49 >> 1 > v48)
                  v48 = v49 >> 1;
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                  v50 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v50 = v48;
                if (v50)
                {
                  v51 = (char *)sub_1DCAE4D04(a1 + 16, v50);
                  v46 = *(char **)a1;
                  v35 = *(char **)(a1 + 8);
                }
                else
                {
                  v51 = 0;
                }
                v52 = &v51[4 * v47];
                *(_DWORD *)v52 = v44;
                v45 = v52 + 4;
                while (v35 != v46)
                {
                  v53 = *((_DWORD *)v35 - 1);
                  v35 -= 4;
                  *((_DWORD *)v52 - 1) = v53;
                  v52 -= 4;
                }
                v34 = &v51[4 * v50];
                *(_QWORD *)a1 = v52;
                *(_QWORD *)(a1 + 8) = v45;
                *(_QWORD *)(a1 + 16) = v34;
                if (v46)
                {
                  operator delete(v46);
                  v34 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v35 = v44;
                v45 = v35 + 4;
              }
              v16 = a4;
              *(_QWORD *)(a1 + 8) = v45;
              v54 = *((unsigned __int8 *)v9 + v31 + v25 + 2);
              if (v45 >= v34)
              {
                v55 = *(char **)a1;
                v56 = (uint64_t)&v45[-*(_QWORD *)a1] >> 2;
                v57 = v56 + 1;
                if ((unint64_t)(v56 + 1) >> 62)
                  goto LABEL_693;
                v58 = v34 - v55;
                if (v58 >> 1 > v57)
                  v57 = v58 >> 1;
                if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                  v59 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v59 = v57;
                if (v59)
                {
                  v60 = (char *)sub_1DCAE4D04(a1 + 16, v59);
                  v55 = *(char **)a1;
                  v45 = *(char **)(a1 + 8);
                }
                else
                {
                  v60 = 0;
                }
                v61 = &v60[4 * v56];
                *(_DWORD *)v61 = v54;
                v32 = v61 + 4;
                while (v45 != v55)
                {
                  v62 = *((_DWORD *)v45 - 1);
                  v45 -= 4;
                  *((_DWORD *)v61 - 1) = v62;
                  v61 -= 4;
                }
                *(_QWORD *)a1 = v61;
                *(_QWORD *)(a1 + 8) = v32;
                *(_QWORD *)(a1 + 16) = &v60[4 * v59];
                if (v55)
                  operator delete(v55);
              }
              else
              {
                *(_DWORD *)v45 = v54;
                v32 = v45 + 4;
              }
              *(_QWORD *)(a1 + 8) = v32;
              ++v31;
              v27 = *(unsigned __int8 *)(a4 + v24);
            }
            while (v31 < v27 - 2);
          }
          if (v27 >= 3)
          {
            v63 = 0;
            v64 = *(char **)(a1 + 8);
            do
            {
              v65 = v9[v25];
              v66 = *v26;
              if (v64 >= *v26)
              {
                v68 = *(char **)a1;
                v69 = (uint64_t)&v64[-*(_QWORD *)a1] >> 2;
                v70 = v69 + 1;
                if ((unint64_t)(v69 + 1) >> 62)
                  goto LABEL_693;
                v71 = v66 - v68;
                if (v71 >> 1 > v70)
                  v70 = v71 >> 1;
                if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
                  v72 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v72 = v70;
                if (v72)
                {
                  v73 = (char *)sub_1DCAE4D04(a1 + 16, v72);
                  v68 = *(char **)a1;
                  v64 = *(char **)(a1 + 8);
                }
                else
                {
                  v73 = 0;
                }
                v74 = &v73[4 * v69];
                *(_DWORD *)v74 = v65;
                v67 = v74 + 4;
                while (v64 != v68)
                {
                  v75 = *((_DWORD *)v64 - 1);
                  v64 -= 4;
                  *((_DWORD *)v74 - 1) = v75;
                  v74 -= 4;
                }
                v66 = &v73[4 * v72];
                *(_QWORD *)a1 = v74;
                *(_QWORD *)(a1 + 8) = v67;
                *(_QWORD *)(a1 + 16) = v66;
                if (v68)
                {
                  operator delete(v68);
                  v66 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v64 = v65;
                v67 = v64 + 4;
              }
              *(_QWORD *)(a1 + 8) = v67;
              v76 = v9[v63 + 1 + v25];
              if (v67 >= v66)
              {
                v78 = *(char **)a1;
                v79 = (uint64_t)&v67[-*(_QWORD *)a1] >> 2;
                v80 = v79 + 1;
                if ((unint64_t)(v79 + 1) >> 62)
                  goto LABEL_693;
                v81 = v66 - v78;
                if (v81 >> 1 > v80)
                  v80 = v81 >> 1;
                if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
                  v82 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v82 = v80;
                if (v82)
                {
                  v83 = (char *)sub_1DCAE4D04(a1 + 16, v82);
                  v78 = *(char **)a1;
                  v67 = *(char **)(a1 + 8);
                }
                else
                {
                  v83 = 0;
                }
                v84 = &v83[4 * v79];
                *(_DWORD *)v84 = v76;
                v77 = v84 + 4;
                while (v67 != v78)
                {
                  v85 = *((_DWORD *)v67 - 1);
                  v67 -= 4;
                  *((_DWORD *)v84 - 1) = v85;
                  v84 -= 4;
                }
                v66 = &v83[4 * v82];
                *(_QWORD *)a1 = v84;
                *(_QWORD *)(a1 + 8) = v77;
                *(_QWORD *)(a1 + 16) = v66;
                if (v78)
                {
                  operator delete(v78);
                  v66 = *v26;
                }
              }
              else
              {
                *(_DWORD *)v67 = v76;
                v77 = v67 + 4;
              }
              v16 = a4;
              *(_QWORD *)(a1 + 8) = v77;
              v86 = v9[v63 + 2 + v25];
              if (v77 >= v66)
              {
                v87 = *(char **)a1;
                v88 = (uint64_t)&v77[-*(_QWORD *)a1] >> 2;
                v89 = v88 + 1;
                if ((unint64_t)(v88 + 1) >> 62)
                  goto LABEL_693;
                v90 = v66 - v87;
                if (v90 >> 1 > v89)
                  v89 = v90 >> 1;
                if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
                  v91 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v91 = v89;
                if (v91)
                {
                  v92 = (char *)sub_1DCAE4D04(a1 + 16, v91);
                  v87 = *(char **)a1;
                  v77 = *(char **)(a1 + 8);
                }
                else
                {
                  v92 = 0;
                }
                v93 = &v92[4 * v88];
                *(_DWORD *)v93 = v86;
                v64 = v93 + 4;
                while (v77 != v87)
                {
                  v94 = *((_DWORD *)v77 - 1);
                  v77 -= 4;
                  *((_DWORD *)v93 - 1) = v94;
                  v93 -= 4;
                }
                *(_QWORD *)a1 = v93;
                *(_QWORD *)(a1 + 8) = v64;
                *(_QWORD *)(a1 + 16) = &v92[4 * v91];
                if (v87)
                  operator delete(v87);
              }
              else
              {
                *(_DWORD *)v77 = v86;
                v64 = v77 + 4;
              }
              *(_QWORD *)(a1 + 8) = v64;
              ++v63;
              v27 = *(unsigned __int8 *)(a4 + v24);
            }
            while (v63 < v27 - 2);
LABEL_161:
            if (v27 >= 3)
            {
              v95 = 0;
              v96 = *(char **)(a1 + 8);
              do
              {
                v97 = *v26;
                if (v96 >= *v26)
                {
                  v99 = *(char **)a1;
                  v100 = (uint64_t)&v96[-*(_QWORD *)a1] >> 2;
                  v101 = v100 + 1;
                  if ((unint64_t)(v100 + 1) >> 62)
                    goto LABEL_693;
                  v102 = v97 - v99;
                  if (v102 >> 1 > v101)
                    v101 = v102 >> 1;
                  if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
                    v103 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v103 = v101;
                  if (v103)
                  {
                    v104 = (char *)sub_1DCAE4D04(a1 + 16, v103);
                    v99 = *(char **)a1;
                    v96 = *(char **)(a1 + 8);
                  }
                  else
                  {
                    v104 = 0;
                  }
                  v105 = &v104[4 * v100];
                  *(_DWORD *)v105 = *(_DWORD *)&v9[2 * v25];
                  v98 = v105 + 4;
                  while (v96 != v99)
                  {
                    v106 = *((_DWORD *)v96 - 1);
                    v96 -= 4;
                    *((_DWORD *)v105 - 1) = v106;
                    v105 -= 4;
                  }
                  v97 = &v104[4 * v103];
                  *(_QWORD *)a1 = v105;
                  *(_QWORD *)(a1 + 8) = v98;
                  *(_QWORD *)(a1 + 16) = v97;
                  if (v99)
                  {
                    operator delete(v99);
                    v97 = *v26;
                  }
                }
                else
                {
                  *(_DWORD *)v96 = *(_DWORD *)&v9[2 * v25];
                  v98 = v96 + 4;
                }
                *(_QWORD *)(a1 + 8) = v98;
                v107 = v95 + v25 + 1;
                if (v98 >= v97)
                {
                  v109 = *(char **)a1;
                  v110 = (uint64_t)&v98[-*(_QWORD *)a1] >> 2;
                  v111 = v110 + 1;
                  if ((unint64_t)(v110 + 1) >> 62)
                    goto LABEL_693;
                  v112 = v97 - v109;
                  if (v112 >> 1 > v111)
                    v111 = v112 >> 1;
                  if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
                    v113 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v113 = v111;
                  if (v113)
                  {
                    v114 = (char *)sub_1DCAE4D04(a1 + 16, v113);
                    v109 = *(char **)a1;
                    v98 = *(char **)(a1 + 8);
                  }
                  else
                  {
                    v114 = 0;
                  }
                  v115 = &v114[4 * v110];
                  *(_DWORD *)v115 = *(_DWORD *)&v9[2 * v107];
                  v108 = v115 + 4;
                  while (v98 != v109)
                  {
                    v116 = *((_DWORD *)v98 - 1);
                    v98 -= 4;
                    *((_DWORD *)v115 - 1) = v116;
                    v115 -= 4;
                  }
                  v97 = &v114[4 * v113];
                  *(_QWORD *)a1 = v115;
                  *(_QWORD *)(a1 + 8) = v108;
                  *(_QWORD *)(a1 + 16) = v97;
                  if (v109)
                  {
                    operator delete(v109);
                    v97 = *v26;
                  }
                }
                else
                {
                  *(_DWORD *)v98 = *(_DWORD *)&v9[2 * v107];
                  v108 = v98 + 4;
                }
                v16 = a4;
                *(_QWORD *)(a1 + 8) = v108;
                v117 = v95 + v25 + 2;
                if (v108 >= v97)
                {
                  v118 = *(char **)a1;
                  v119 = (uint64_t)&v108[-*(_QWORD *)a1] >> 2;
                  v120 = v119 + 1;
                  if ((unint64_t)(v119 + 1) >> 62)
                    goto LABEL_693;
                  v121 = v97 - v118;
                  if (v121 >> 1 > v120)
                    v120 = v121 >> 1;
                  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL)
                    v122 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v122 = v120;
                  if (v122)
                  {
                    v123 = (char *)sub_1DCAE4D04(a1 + 16, v122);
                    v118 = *(char **)a1;
                    v108 = *(char **)(a1 + 8);
                  }
                  else
                  {
                    v123 = 0;
                  }
                  v124 = &v123[4 * v119];
                  *(_DWORD *)v124 = *(_DWORD *)&v9[2 * v117];
                  v96 = v124 + 4;
                  while (v108 != v118)
                  {
                    v125 = *((_DWORD *)v108 - 1);
                    v108 -= 4;
                    *((_DWORD *)v124 - 1) = v125;
                    v124 -= 4;
                  }
                  *(_QWORD *)a1 = v124;
                  *(_QWORD *)(a1 + 8) = v96;
                  *(_QWORD *)(a1 + 16) = &v123[4 * v122];
                  if (v118)
                    operator delete(v118);
                }
                else
                {
                  *(_DWORD *)v108 = *(_DWORD *)&v9[2 * v117];
                  v96 = v108 + 4;
                }
                *(_QWORD *)(a1 + 8) = v96;
                ++v95;
              }
              while (v95 < *(unsigned __int8 *)(a4 + v24) - 2);
            }
          }
          break;
      }
LABEL_656:
      v25 += *(unsigned __int8 *)(v16 + v24++);
      v13 = a6;
    }
    while (v24 != a5);
  }
}

