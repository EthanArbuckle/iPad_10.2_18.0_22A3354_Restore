__CFString *sub_1DCAC6334(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  __CFString *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;

  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v3;
  if (!v3
    || (objc_msgSend_bundleIdentifier(v3, v4, v5), (v7 = (__CFString *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    objc_msgSend_processInfo(MEMORY[0x1E0CB3898], v4, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_processName(v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v11)
      v7 = v11;
    else
      v7 = &stru_1EA577998;

  }
  return v7;
}

void sub_1DCAC63C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAC692C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAC6BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  void *v10;
  void *v11;

  a10.super_class = (Class)MDLAsset;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1DCAC6CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1DCAC6D38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCAC6D48(const __CFURL *a1)
{
  __CFBundle *MainBundle;
  __CFBundle *v3;
  uint64_t v4;
  const __CFURL *v5;
  const __CFURL *v6;
  __CFString *v7;
  __CFString *v8;
  const char *v9;
  uint64_t v10;
  __CFString *v11;
  const __CFString *v12;
  const char *v13;
  uint64_t v14;
  const __CFString *v15;
  CFRange v16;
  BOOL v17;
  uint64_t v18;
  UInt32 packageCreator[2];

  if (!a1)
    return 0;
  MainBundle = CFBundleGetMainBundle();
  if (!MainBundle)
    return 0;
  v3 = MainBundle;
  *(_QWORD *)packageCreator = 0;
  CFBundleGetPackageInfo(MainBundle, &packageCreator[1], packageCreator);
  v4 = 0;
  if (packageCreator[1] != 1095782476)
    return v4;
  v5 = CFBundleCopyBundleURL(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (__CFString *)CFURLCopyPath(v5);
  v8 = (__CFString *)CFURLCopyPath(a1);
  v11 = v8;
  if (v7 && v8)
  {
    v12 = (const __CFString *)objc_msgSend_stringByStandardizingPath(v8, v9, v10);
    v15 = (const __CFString *)objc_msgSend_stringByStandardizingPath(v7, v13, v14);
    v16 = CFStringFind(v12, v15, 1uLL);
    if (v16.location)
      v17 = 1;
    else
      v17 = v16.length <= 0;
    v18 = !v17;
    goto LABEL_16;
  }
  v18 = 0;
  v4 = 0;
  if (v7)
  {
LABEL_16:
    CFRelease(v7);
    v4 = v18;
  }
  if (v11)
    CFRelease(v11);
  CFRelease(v6);
  return v4;
}

void sub_1DCAC6EE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAC709C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1DCAC71AC(void *a1, int a2, uint64_t a3, int a4)
{
  id v7;
  __CFString *v8;
  __CFString *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  __CFString *v15;
  __CFString *v16;
  id v17;
  __CFString *v18;
  __CFString *v19;
  id v20;
  id v21;
  void *v22;

  v7 = a1;
  v8 = CFSTR("SceneKit");
  if (!a4)
    v8 = CFSTR("ModelIO");
  v9 = v8;
  sub_1DCAC6334((uint64_t)v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v13, a3);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = CFSTR("Custom");
  if (!a2)
    v15 = CFSTR("ModelIO");
  v16 = v15;
  v19 = v9;
  v20 = v12;
  v21 = v7;
  v22 = v14;
  v17 = v14;
  v18 = v16;
  AnalyticsSendEventLazy();

}

void sub_1DCAC730C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1DCAC760C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAC765C(void *a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  void *v9;
  const char *v10;
  const char *v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  int v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  int v22;
  const char *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  int v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  int v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  const char *v52;
  void *v53;
  id v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  int v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  id v69;

  v69 = a1;
  objc_msgSend_objectForKey_(v69, v3, (uint64_t)CFSTR("kMDLAssetPreserveTopology"));
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  if (v68)
    *(_BYTE *)a2 = objc_msgSend_BOOLValue(v68, v4, v5);
  objc_msgSend_objectForKey_(v69, v4, (uint64_t)CFSTR("kMDLAssetPreserveIndexing"));
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  if (v67)
  {
    v8 = objc_msgSend_BOOLValue(v67, v6, v7);
    *(_BYTE *)(a2 + 1) = v8;
    if (v8)
      *(_BYTE *)a2 = 1;
  }
  objc_msgSend_objectForKey_(v69, v6, (uint64_t)CFSTR("kMDLAssetVertexDescriptor"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_storeStrong((id *)(a2 + 8), v9);
  objc_msgSend_objectForKey_(v69, v10, (uint64_t)CFSTR("kMDLAssetBufferAllocator"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
    objc_storeStrong((id *)(a2 + 16), v12);
  objc_msgSend_objectForKey_(v69, v11, (uint64_t)CFSTR("kMDLAssetComputeFaceNormals"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v13;
  if (v13)
  {
    v17 = objc_msgSend_BOOLValue(v13, v14, v15);
    *(_BYTE *)(a2 + 27) = v17;
    if (v17)
      goto LABEL_20;
  }
  else if (*(_BYTE *)(a2 + 27))
  {
    goto LABEL_20;
  }
  objc_msgSend_objectForKey_(v69, v14, (uint64_t)CFSTR("kMDLAssetComputeVertexNormals"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = v18;
  if (v18)
  {
    v22 = objc_msgSend_BOOLValue(v18, v19, v20);
    *(_BYTE *)(a2 + 26) = v22;
    if (v22)
    {
      objc_msgSend_objectForKey_(v69, v23, (uint64_t)CFSTR("kMDLAssetNormalSmoothingThreshold"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = v24;
      if (v24)
      {
        objc_msgSend_floatValue(v24, v25, v26);
        *(_DWORD *)(a2 + 28) = v28;
      }

    }
  }

LABEL_20:
  objc_msgSend_objectForKey_(v69, v14, (uint64_t)CFSTR("kMDLAssetPreserveExistingNormals"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = v29;
  if (v29)
    *(_BYTE *)(a2 + 32) = objc_msgSend_BOOLValue(v29, v30, v31);
  objc_msgSend_objectForKey_(v69, v30, (uint64_t)CFSTR("kMDLAssetDisplayNURBSPatches"));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = v33;
  if (v33)
    *(_BYTE *)(a2 + 25) = objc_msgSend_BOOLValue(v33, v34, v35);
  objc_msgSend_objectForKey_(v69, v34, (uint64_t)CFSTR("kMDLAssetAssetAtTime"));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = v37;
  if (v37)
  {
    objc_msgSend_doubleValue(v37, v38, v39);
    *(_QWORD *)(a2 + 64) = v41;
    *(_BYTE *)(a2 + 35) = 0;
  }
  objc_msgSend_objectForKey_(v69, v38, (uint64_t)CFSTR("kMDLAssetComputeTangents"));
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = v42;
  if (v42)
  {
    v46 = objc_msgSend_BOOLValue(v42, v43, v44);
    *(_BYTE *)(a2 + 33) = v46;
    if (!v46)
      goto LABEL_38;
  }
  else if (!*(_BYTE *)(a2 + 33))
  {
    goto LABEL_38;
  }
  objc_msgSend_objectForKey_(v69, v43, (uint64_t)CFSTR("kMDLAssetComputeBitangents"));
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v50 = v47;
  if (v47)
    *(_BYTE *)(a2 + 34) = objc_msgSend_BOOLValue(v47, v48, v49);

  if (*(_BYTE *)(a2 + 33))
  {
    objc_msgSend_objectForKey_(v69, v43, (uint64_t)CFSTR("kMDLAssetTangentUVSet"));
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = v51;
    if (v51)
    {
      v54 = objc_retainAutorelease(v51);
      v57 = objc_msgSend_UTF8String(v54, v55, v56);
      MEMORY[0x1DF0D201C](a2 + 40, v57);
    }
    objc_msgSend_objectForKey_(v69, v52, (uint64_t)CFSTR("kMDLAssetTangentSmoothingThreshold"));
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = v58;
    if (v58)
    {
      objc_msgSend_floatValue(v58, v59, v60);
      *(_DWORD *)(a2 + 36) = v62;
    }

  }
LABEL_38:
  objc_msgSend_objectForKey_(v69, v43, (uint64_t)CFSTR("kMDLAssetComputeExtents"));
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v66 = v63;
  if (v63)
    *(_BYTE *)(a2 + 24) = objc_msgSend_BOOLValue(v63, v64, v65);

}

void sub_1DCAC79A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1DCAC7A6C()
{
  JUMPOUT(0x1DCAC7A34);
}

void sub_1DCAC7A88()
{
  JUMPOUT(0x1DCAC7A4CLL);
}

void sub_1DCAC7A90()
{
  JUMPOUT(0x1DCAC7A38);
}

void sub_1DCAC7A98(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_1DCAC8730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  char a70;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;

  sub_1DCB81700(&a15);
  _Block_object_dispose(&a66, 8);

  _Block_object_dispose(&a70, 8);
  if (*(char *)(v73 - 233) < 0)
    operator delete(*(void **)(v73 - 256));
  if (*(char *)(v73 - 209) < 0)
    operator delete(*(void **)(v73 - 232));

  sub_1DCB20600(v73 - 208);
  _Unwind_Resume(a1);
}

void sub_1DCAC8A6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAC8B24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAC8CD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAC8EBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCAC8EDC(uint64_t a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  if (a1 == 770)
    v1 = 16;
  else
    v1 = 8;
  if (a1 == 260)
    v2 = 32;
  else
    v2 = v1;
  if (a1 == 258)
    v3 = 16;
  else
    v3 = v2;
  if (a1 == 4)
    v4 = 32;
  else
    v4 = 8;
  if (a1 == 3)
    v4 = 24;
  if (a1 == 2)
    v4 = 16;
  if (a1 <= 257)
    return v4;
  else
    return v3;
}

void sub_1DCAC90C4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1DCAC90C4(a1, *a2);
    sub_1DCAC90C4(a1, a2[1]);
    sub_1DCBC65DC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1DCAC91BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MDLMeshBufferData;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1DCAC9284(uint64_t a1)
{
  sub_1DCAD25B0(a1);
  JUMPOUT(0x1DF0D228CLL);
}

void sub_1DCAC9F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{

  _Unwind_Resume(a1);
}

void sub_1DCACA35C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCACA5BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *sub_1DCACA658(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_1DCB011AC();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_1DCACA6EC(uint64_t a1, _QWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  BOOL v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t EmptyString;
  __int128 v19;
  pxrInternal__aapl__pxrReserved__::VtValue *v20;
  int NumElements;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  void **v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  void **v49;
  void **v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  void *__p[2];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x1DF0D1254](__p, "constant");
  v5 = (uint64_t *)(a1 + 80);
  v6 = (unint64_t)__p[0];
  if ((*(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8))
  {
    v10 = 1;
  }
  else
  {
    v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x1DF0D1254](&v65, "vertex");
    v7 = v65;
    if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (v65 & 0xFFFFFFFFFFFFFFF8))
    {
      v10 = 1;
    }
    else
    {
      v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x1DF0D1254](&v64, "uniform");
      v8 = v64;
      if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (v64 & 0xFFFFFFFFFFFFFFF8))
      {
        v10 = 1;
      }
      else
      {
        v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x1DF0D1254](&v63, "faceVarying");
        v9 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
        v10 = (*v5 & 0xFFFFFFFFFFFFFFF8) == (v63 & 0xFFFFFFFFFFFFFFF8);
        if ((v63 & 7) != 0)
        {
          do
            v11 = __ldxr(v9);
          while (__stlxr(v11 - 2, v9));
        }
        v8 = v64;
      }
      if ((v8 & 7) != 0)
      {
        v12 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      v7 = v65;
    }
    if ((v7 & 7) != 0)
    {
      v14 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    v6 = (unint64_t)__p[0];
  }
  if ((v6 & 7) != 0)
  {
    v16 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  if (!v10)
  {
    __p[0] = 0;
    __p[1] = 0;
    v62 = 0;
    if ((*(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (*(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8) + 16;
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    if (*(char *)(EmptyString + 23) < 0)
    {
      sub_1DCACA658(__p, *(void **)EmptyString, *(_QWORD *)(EmptyString + 8));
    }
    else
    {
      v19 = *(_OWORD *)EmptyString;
      v62 = *(_QWORD *)(EmptyString + 16);
      *(_OWORD *)__p = v19;
    }
    v20 = (pxrInternal__aapl__pxrReserved__::VtValue *)a2[1];
    if ((pxrInternal__aapl__pxrReserved__::VtValue *)a2[2] == v20 || !*((_QWORD *)v20 + 1))
    {
LABEL_97:
      if (SHIBYTE(v62) < 0)
        operator delete(__p[0]);
      return;
    }
    NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(v20);
    v22 = NumElements;
    v23 = a2[14];
    v24 = a2[19];
    v25 = *(_QWORD *)(a1 + 16);
    if (v25)
    {
      if (v25 == 1)
      {
        MEMORY[0x1DF0D1254](&v65, "constant");
        if (&v65 == v5)
        {
          if ((v65 & 7) != 0)
          {
            v36 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
            do
              v37 = __ldxr(v36);
            while (__stlxr(v37 - 2, v36));
          }
          goto LABEL_71;
        }
        if ((*v5 & 7) != 0)
        {
          v26 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v27 = __ldxr(v26);
          while (__stlxr(v27 - 2, v26));
        }
LABEL_70:
        *v5 = v65;
LABEL_71:
        v40 = __p;
        if (v62 < 0)
          v40 = (void **)__p[0];
        NSLog(CFSTR("Inferring attribute frequency for %s.\n"), v40);
        goto LABEL_97;
      }
      if (v25 == NumElements)
      {
        MEMORY[0x1DF0D1254](&v65, "vertex");
        if (&v65 == v5)
        {
          if ((v65 & 7) != 0)
          {
            v43 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
            do
              v44 = __ldxr(v43);
            while (__stlxr(v44 - 2, v43));
          }
          goto LABEL_71;
        }
        if ((*v5 & 7) != 0)
        {
          v30 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v31 = __ldxr(v30);
          while (__stlxr(v31 - 2, v30));
        }
        goto LABEL_70;
      }
      if (v25 == (int)v23)
      {
        MEMORY[0x1DF0D1254](&v65, "uniform");
        if (&v65 == v5)
        {
          if ((v65 & 7) != 0)
          {
            v51 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
            do
              v52 = __ldxr(v51);
            while (__stlxr(v52 - 2, v51));
          }
          goto LABEL_71;
        }
        if ((*v5 & 7) != 0)
        {
          v32 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        goto LABEL_70;
      }
      if (v25 == (int)v24)
      {
        MEMORY[0x1DF0D1254](&v65, "faceVarying");
        if (&v65 == v5)
        {
          if ((v65 & 7) != 0)
          {
            v55 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
            do
              v56 = __ldxr(v55);
            while (__stlxr(v56 - 2, v55));
          }
          goto LABEL_71;
        }
        if ((*v5 & 7) != 0)
        {
          v38 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v39 = __ldxr(v38);
          while (__stlxr(v39 - 2, v38));
        }
        goto LABEL_70;
      }
LABEL_100:
      v50 = __p;
      if (v62 < 0)
        v50 = (void **)__p[0];
      NSLog(CFSTR("Unable to infer attribute frequency for %s. Skipping\n"), v50);
      goto LABEL_97;
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1) == *(_DWORD *)(a1 + 88))
    {
      MEMORY[0x1DF0D1254](&v65, "constant");
      if (&v65 == v5)
      {
        if ((v65 & 7) != 0)
        {
          v45 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
          do
            v46 = __ldxr(v45);
          while (__stlxr(v46 - 2, v45));
        }
        goto LABEL_94;
      }
      if ((*v5 & 7) != 0)
      {
        v28 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
    }
    else if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1) == *(int *)(a1 + 88) * (uint64_t)v22)
    {
      MEMORY[0x1DF0D1254](&v65, "vertex");
      if (&v65 == v5)
      {
        if ((v65 & 7) != 0)
        {
          v53 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
          do
            v54 = __ldxr(v53);
          while (__stlxr(v54 - 2, v53));
        }
        goto LABEL_94;
      }
      if ((*v5 & 7) != 0)
      {
        v34 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
    }
    else if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1) == *(int *)(a1 + 88) * (uint64_t)(int)v23)
    {
      MEMORY[0x1DF0D1254](&v65, "uniform");
      if (&v65 == v5)
      {
        if ((v65 & 7) != 0)
        {
          v57 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
          do
            v58 = __ldxr(v57);
          while (__stlxr(v58 - 2, v57));
        }
        goto LABEL_94;
      }
      if ((*v5 & 7) != 0)
      {
        v41 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
    }
    else
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1) != *(int *)(a1 + 88) * (uint64_t)(int)v24)
        goto LABEL_100;
      MEMORY[0x1DF0D1254](&v65, "faceVarying");
      if (&v65 == v5)
      {
        if ((v65 & 7) != 0)
        {
          v59 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
          do
            v60 = __ldxr(v59);
          while (__stlxr(v60 - 2, v59));
        }
        goto LABEL_94;
      }
      if ((*v5 & 7) != 0)
      {
        v47 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
    }
    *v5 = v65;
LABEL_94:
    v49 = __p;
    if (v62 < 0)
      v49 = (void **)__p[0];
    NSLog(CFSTR("Inferring attribute frequency for %s\n"), v49);
    goto LABEL_97;
  }
}

void sub_1DCACACE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1DCACADA0(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)sub_1DCAD344C((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_1DCACAEA8((uint64_t)a1, a4, v10);
    sub_1DCACAE54(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1DCBC6598((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *sub_1DCACAE54(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_1DCAE5184(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

double sub_1DCACAEA8@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x70uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  v7 = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_1DCACA658(v7, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)v7 = v9;
  }
  *((_QWORD *)v6 + 13) = 0;
  result = 0.0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1DCACAF38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCBC6598(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1DCACAFE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCACB070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCACB098(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1DCB27784((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void **sub_1DCACB10C(void **a1)
{
  sub_1DCB27A60((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

BOOL sub_1DCACB13C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int *v22;
  _BOOL8 v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v1 = *(uint64_t **)(a1 + 32);
  v2 = *(uint64_t **)(a1 + 40);
  if (v1 == v2)
    return 0;
  do
  {
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v3 = *v1;
    v36 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        v36 &= 0xFFFFFFFFFFFFFFF8;
    }
    v37 = 0;
    v38 = 0;
    v39 = 0;
    sub_1DCB446C8(&v37, v1[1], v1[2], 0xAAAAAAAAAAAAAAABLL * ((v1[2] - v1[1]) >> 5));
    v6 = v37;
    v7 = v38;
    if (v37 == v38)
    {
      v23 = 1;
    }
    else
    {
      do
      {
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        sub_1DCB25EEC(&v40, (_QWORD *)v6);
        v8 = *(_OWORD *)(v6 + 32);
        v41 = *(_OWORD *)(v6 + 16);
        v42 = v8;
        v9 = *(_QWORD *)(v6 + 48);
        *(_QWORD *)&v43 = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 - 16);
          if (*((_QWORD *)&v42 + 1))
            v10 = (unint64_t *)*((_QWORD *)&v42 + 1);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v12 = *(_QWORD *)(v6 + 56);
        *((_QWORD *)&v43 + 1) = v12;
        if ((v12 & 7) != 0)
        {
          v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 2, v13));
          if ((v14 & 1) == 0)
            *((_QWORD *)&v43 + 1) &= 0xFFFFFFFFFFFFFFF8;
        }
        v15 = *(_QWORD *)(v6 + 64);
        *(_QWORD *)&v44 = v15;
        if ((v15 & 7) != 0)
        {
          v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 2, v16));
          if ((v17 & 1) == 0)
            *(_QWORD *)&v44 = v44 & 0xFFFFFFFFFFFFFFF8;
        }
        v18 = *(_QWORD *)(v6 + 80);
        *((_QWORD *)&v44 + 1) = *(_QWORD *)(v6 + 72);
        *(_QWORD *)&v45 = v18;
        if ((v18 & 7) != 0)
        {
          v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 2, v19));
          if ((v20 & 1) == 0)
            *(_QWORD *)&v45 = v45 & 0xFFFFFFFFFFFFFFF8;
        }
        DWORD2(v45) = *(_DWORD *)(v6 + 88);
        MEMORY[0x1DF0D1254](&v35, "normals");
        v21 = *((_QWORD *)&v43 + 1) & 0xFFFFFFFFFFFFFFF8;
        v22 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        v23 = (*((_QWORD *)&v43 + 1) & 0xFFFFFFFFFFFFFFF8) != (v35 & 0xFFFFFFFFFFFFFFF8);
        if ((v35 & 7) != 0)
        {
          do
            v24 = __ldxr(v22);
          while (__stlxr(v24 - 2, v22));
        }
        if ((v45 & 7) != 0)
        {
          v25 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stlxr(v26 - 2, v25));
        }
        if ((v44 & 7) != 0)
        {
          v27 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
          do
            v28 = __ldxr(v27);
          while (__stlxr(v28 - 2, v27));
        }
        if ((BYTE8(v43) & 7) != 0)
        {
          v29 = (unsigned int *)(*((_QWORD *)&v43 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v30 = __ldxr(v29);
          while (__stlxr(v30 - 2, v29));
        }
        sub_1DCAEEE78((uint64_t)&v41);
        sub_1DCAEEE2C((uint64_t)&v40);
        if ((unsigned int *)v21 == v22)
          break;
        v6 += 96;
      }
      while (v6 != v7);
    }
    *(_QWORD *)&v40 = &v37;
    sub_1DCB448C4((void ***)&v40);
    if ((v36 & 7) != 0)
    {
      v31 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    v1 += 4;
    v33 = v1 == v2 || v23;
  }
  while (v33 != 1);
  return v23;
}

void sub_1DCACB444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  unsigned int *v15;
  unsigned int v16;

  if ((a11 & 7) != 0)
  {
    v15 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DCACB4C4(_QWORD *a1, _BYTE *a2, char a3)
{
  unint64_t v3;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _BOOL8 result;
  unint64_t v11;
  const char *v12;
  unint64_t v13;
  const char *v14;

  v3 = a1[14];
  if (!v3)
    return 0;
  v6 = (_DWORD *)a1[18];
  if (*v6 == 3)
  {
    v7 = 1;
    do
    {
      v8 = v7;
      if (v3 == v7)
        break;
      v9 = v6[v7++];
    }
    while (v9 == 3);
    if (v3 <= v8)
      return 0;
  }
  result = *a2 == 0;
  if (*a2 && (a3 & 1) == 0)
  {
    if ((!a2[32] || !sub_1DCACEEFC((uint64_t)a1)) && a2[27] | a2[26])
    {
      v13 = *a1 & 0xFFFFFFFFFFFFFFF8;
      if (v13)
      {
        v14 = (const char *)(v13 + 16);
        if (*(char *)(v13 + 39) < 0)
          v14 = *(const char **)v14;
      }
      else
      {
        v14 = "";
      }
      NSLog(CFSTR("Warning: Mesh %s will be triangulated for normal computation"), v14);
      return 1;
    }
    if (a2[33])
    {
      v11 = *a1 & 0xFFFFFFFFFFFFFFF8;
      if (v11)
      {
        v12 = (const char *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0)
          v12 = *(const char **)v12;
      }
      else
      {
        v12 = "";
      }
      NSLog(CFSTR("Warning: Mesh %s will be triangulated for tangent computation"), v12);
      return 1;
    }
    return 0;
  }
  return result;
}

void sub_1DCACB5E8(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1DCACB5E8(a1, *(_QWORD *)a2);
    sub_1DCACB5E8(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1DCACB638(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1DCB9D660((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void **sub_1DCACB6AC(void **a1)
{
  sub_1DCB9D814(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_1DCACB6DC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  void **v8;

  v8 = (void **)(a1 + 440);
  sub_1DCB9B61C(&v8);
  sub_1DCAEEE78(a1 + 400);
  sub_1DCAEEE78(a1 + 360);
  sub_1DCAEEE78(a1 + 320);
  sub_1DCAEEE78(a1 + 280);
  sub_1DCAEEE78(a1 + 240);
  v2 = *(_QWORD *)(a1 + 232);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  sub_1DCAEEE78(a1 + 192);
  sub_1DCAEEE78(a1 + 152);
  sub_1DCAEEE78(a1 + 112);

  sub_1DCAEEE2C(a1 + 72);
  sub_1DCAEEE2C(a1 + 56);
  v8 = (void **)(a1 + 32);
  sub_1DCB9AC5C(&v8);
  v8 = (void **)(a1 + 8);
  sub_1DCB448C4(&v8);
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v5 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_1DCACB7FC(uint64_t a1, void *a2, void *a3, char a4, int a5)
{
  id v8;
  unint64_t NumElements;
  __n128 *v10;
  __n128 *i;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  pxrInternal__aapl__pxrReserved__::TfType *ElementTypeid;
  const std::type_info *v38;
  pxrInternal__aapl__pxrReserved__::TfType *v39;
  uint64_t Sizeof;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  void *v65;
  float *v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  float *v80;
  uint64_t v81;
  const char *v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  float *v93;
  void *v94;
  MDLMesh *v95;
  const char *v96;
  pxrInternal__aapl__pxrReserved__::TfToken *v97;
  const char *v98;
  pxrInternal__aapl__pxrReserved__::TfToken *v99;
  void *v100;
  unint64_t EmptyString;
  void *v102;
  const char *v103;
  const char *v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  uint64_t v108;
  const char *v109;
  const char *v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  const char *v114;
  void *v115;
  const char *v116;
  uint64_t v117;
  void *v120;
  void *v121;
  int v122;
  id v123;
  unint64_t v124;
  id v125;
  unint64_t v126;
  float *v127;
  void *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  void **v135[2];

  v8 = a2;
  v123 = a3;
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(*(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 8));
  v130 = (_QWORD *)a1;
  v10 = *(__n128 **)(a1 + 8);
  v124 = NumElements / v10[5].n128_i32[2];
  v122 = a5;
  if (a5)
  {
    for (i = *(__n128 **)(a1 + 16); v10 != i; v10 += 6)
    {
      MEMORY[0x1DF0D1254](&v133, "uniform");
      v12 = v10[5].n128_u64[0];
      v13 = (unsigned int *)(v133 & 0xFFFFFFFFFFFFFFF8);
      if ((v133 & 7) != 0)
      {
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      if ((unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8) == v13)
      {
        sub_1DCB42B7C((_QWORD *)a1, (uint64_t)v10);
      }
      else
      {
        MEMORY[0x1DF0D1254](&v133, "constant");
        v15 = v10[5].n128_u64[0];
        v16 = (unsigned int *)(v133 & 0xFFFFFFFFFFFFFFF8);
        if ((v133 & 7) != 0)
        {
          do
            v17 = __ldxr(v16);
          while (__stlxr(v17 - 2, v16));
        }
        if ((unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8) == v16)
        {
          sub_1DCB42F58(v10, v124);
        }
        else
        {
          MEMORY[0x1DF0D1254](&v133, "vertex");
          v18 = v10[5].n128_u64[0];
          v19 = (unsigned int *)(v133 & 0xFFFFFFFFFFFFFFF8);
          if ((v133 & 7) != 0)
          {
            do
              v20 = __ldxr(v19);
            while (__stlxr(v20 - 2, v19));
          }
          if ((unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8) == v19)
          {
            if (v10[1].n128_u64[0])
              sub_1DCB42DC8(a1, (uint64_t)v10);
          }
          else
          {
            MEMORY[0x1DF0D1254](&v133, "faceVarying");
            v21 = v10[5].n128_u64[0];
            v22 = (unsigned int *)(v133 & 0xFFFFFFFFFFFFFFF8);
            if ((v133 & 7) != 0)
            {
              do
                v23 = __ldxr(v22);
              while (__stlxr(v23 - 2, v22));
            }
            if ((unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8) == v22 && !v10[1].n128_u64[0])
            {
              v24 = *(_QWORD *)(a1 + 152);
              LODWORD(v135[0]) = 0;
              *(_QWORD *)&v133 = v135;
              sub_1DCB267B0(v10[1].n128_u64, v24, (_DWORD **)&v133);
              if (*(_QWORD *)(a1 + 152))
              {
                v25 = 0;
                do
                {
                  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v10[1]);
                  *(_DWORD *)(v10[3].n128_u64[0] + 4 * v25) = v25;
                  ++v25;
                }
                while (*(_QWORD *)(a1 + 152) > v25);
              }
            }
          }
        }
      }
    }
  }
  v26 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v133 = 0u;
  v134 = 0u;
  sub_1DCACC57C(v130, v26, (uint64_t)&v133);
  if (v8 && (a5 & 1) == 0)
    sub_1DCB40A5C(v27, (uint64_t *)&v133, v8, v124, v28, v29, v26);
  v121 = v8;
  v125 = *((id *)&v134 + 1);
  v120 = v26;
  sub_1DCACD84C(v125, v123, 0, v26);
  v128 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = v130[1];
  if (v130[2] != v30)
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    do
    {
      v34 = v133;
      v35 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)(v30 + v32));
      v36 = *(int *)(v30 + v32 + 88);
      v131 = v33;
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued((pxrInternal__aapl__pxrReserved__::VtValue *)(v30 + v32)))
      {
        ElementTypeid = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::VtValue::GetElementTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(v30 + v32));
        v39 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(ElementTypeid, v38);
        Sizeof = pxrInternal__aapl__pxrReserved__::TfType::GetSizeof(v39);
        v129 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)(v30 + v32))
             * Sizeof;
      }
      else
      {
        v135[0] = (void **)pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)(v30 + v32));
        v129 = pxrInternal__aapl__pxrReserved__::TfType::GetSizeof((pxrInternal__aapl__pxrReserved__::TfType *)v135);
      }
      v43 = v34 + v31;
      v44 = *(void **)(v34 + v31 + 8);
      if (v44)
      {
        v45 = v35 / v36;
        if (*(_QWORD *)(v34 + v31))
        {
          objc_msgSend_layouts(v125, v41, v42);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          v49 = objc_msgSend_bufferIndex(*(void **)(v43 + 8), v47, v48);
          objc_msgSend_objectAtIndexedSubscript_(v46, v50, v49);
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          v127 = (float *)objc_msgSend_stride(v51, v52, v53);

          v56 = objc_msgSend_bufferIndex(*(void **)(v43 + 8), v54, v55);
          objc_msgSend_objectAtIndexedSubscript_(v128, v57, v56);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          v126 = objc_msgSend_length(v58, v59, v60);

          v63 = objc_msgSend_bufferIndex(*(void **)(v43 + 8), v61, v62);
          objc_msgSend_objectAtIndexedSubscript_(v128, v64, v63);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          v66 = (float *)v45;
          objc_msgSend_map(v65, v67, v68);
          v69 = (void *)objc_claimAutoreleasedReturnValue();

          v74 = objc_msgSend_bytes(v69, v70, v71);
          v75 = *(_QWORD *)(v30 + v32 + 8);
          if ((v75 & 4) != 0)
            v76 = (*(uint64_t (**)(uint64_t))((v75 & 0xFFFFFFFFFFFFFFF8) + 168))(v30 + v32);
          else
            v76 = *(_QWORD *)(v30 + v32);
          v77 = *(_QWORD *)(v76 + 32);
          v78 = *(void **)(v43 + 8);
          v79 = objc_msgSend_format(*(void **)(v34 + v31), v72, v73);
          v80 = (float *)sub_1DCACC518(v79);
          sub_1DCACC16C(v74, v127, v78, v77, v80, *(void **)(v34 + v31), v66, v126, (float *)v129);
        }
        else
        {
          v81 = objc_msgSend_bufferIndex(v44, v41, v42);
          objc_msgSend_objectAtIndexedSubscript_(v128, v82, v81);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_layouts(v125, v83, v84);
          v85 = (void *)objc_claimAutoreleasedReturnValue();
          v88 = objc_msgSend_bufferIndex(*(void **)(v43 + 8), v86, v87);
          objc_msgSend_objectAtIndexedSubscript_(v85, v89, v88);
          v90 = (void *)objc_claimAutoreleasedReturnValue();
          v93 = (float *)objc_msgSend_stride(v90, v91, v92);
          sub_1DCC1EE8C(v69, v93, *(void **)(v43 + 8), (float *)v45);

        }
      }
      v33 = v131 + 1;
      v30 = v130[1];
      v32 += 96;
      v31 += 24;
    }
    while (v131 + 1 < 0xAAAAAAAAAAAAAAABLL * ((v130[2] - v30) >> 5));
  }
  if ((a4 & 1) != 0)
    sub_1DCB42640(v130, v123, v122);
  else
    sub_1DCACCAC8(v130, v123);
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  v95 = [MDLMesh alloc];
  v97 = (pxrInternal__aapl__pxrReserved__::TfToken *)objc_msgSend_initWithVertexBuffers_vertexCount_descriptor_submeshes_(v95, v96, (uint64_t)v128, v124, v125, v94);
  v99 = v97;
  v100 = (void *)MEMORY[0x1E0CB3940];
  if ((*v130 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (*v130 & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v97);
  if (*(char *)(EmptyString + 23) < 0)
    EmptyString = *(_QWORD *)EmptyString;
  objc_msgSend_stringWithUTF8String_(v100, v98, EmptyString);
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setName_(v99, v103, (uint64_t)v102);
  objc_msgSend_setName_(v99, v104, (uint64_t)v102);

  v105 = v130[29];
  v132 = v105;
  if ((v105 & 7) != 0)
  {
    v106 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 2, v106));
    if ((v107 & 1) == 0)
      v132 = (uint64_t)v106;
  }
  v108 = sub_1DCB4394C(&v132);
  objc_msgSend_setSubdivisionScheme_(v99, v109, v108);
  if ((v132 & 7) != 0)
  {
    v111 = (unsigned int *)(v132 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  v113 = v130[12];
  if (v113)
    objc_msgSend_setComponent_forProtocol_(v99, v110, v113, &unk_1F03B6970);
  v114 = (const char *)(v130 + 4);
  if (v130[5] != v130[4])
  {
    sub_1DCB41344(v99, (uint64_t)v114, v123);
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setComponent_forProtocol_(v99, v116, (uint64_t)v115, &unk_1F03B7CE8);

  }
  v117 = v130[13];
  if (v117)
    objc_msgSend_setComponent_forProtocol_(v99, v114, v117, &unk_1F03B6758);

  v135[0] = (void **)&v133;
  sub_1DCB44638(v135);

  return v99;
}

void sub_1DCACBEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  void *v18;
  va_list va;

  va_start(va, a17);
  sub_1DCB40A20((void **)va);

  _Unwind_Resume(a1);
}

void sub_1DCACC054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)MDLMeshBufferMap;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1DCACC14C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCACC16C(uint64_t a1, float *a2, void *a3, uint64_t a4, float *a5, void *a6, float *a7, unint64_t a8, float *a9)
{
  id v15;
  id v16;
  const char *v17;
  uint64_t v18;
  unsigned __int8 v19;
  const char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  float *v33;
  double v34;
  float v35;
  __int128 v37;
  float v38[255];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v15 = a3;
  v16 = a6;
  bzero(v38, 0x3FCuLL);
  v19 = objc_msgSend_format(v15, v17, v18);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & (v19 < 5u)) == 1)
  {
    objc_msgSend_initializationValue(v15, v20, v21);
    if (v19)
    {
      v23 = 0;
      do
      {
        v37 = v22;
        v38[v23] = *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
        ++v23;
      }
      while (v19 != v23);
    }
  }
  v24 = objc_msgSend_offset(v16, v20, v21);
  v27 = objc_msgSend_offset(v15, v25, v26);
  v30 = objc_msgSend_format(v15, v28, v29);
  v33 = (float *)objc_msgSend_format(v16, v31, v32);
  sub_1DCACC30C((void *)(a1 + v27), v30, a2, (const void *)(a4 + v24), v33, a5, v38, a7, v34, v35, a9, a8);

}

void sub_1DCACC2E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCACC30C(void *a1, uint64_t a2, float *a3, const void *a4, float *a5, float *a6, float *a7, float *a8, double a9, float a10, float *a11, unint64_t a12)
{
  size_t v20;
  size_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float *v26[9];

  if (a2 && a5)
  {
    if ((float *)a2 == a5 && a3 == a6 && (float *)sub_1DCACC518(a2) == a3)
    {
      if (a12 >= (unint64_t)a11)
        v20 = (size_t)a11;
      else
        v20 = a12;
      if (v20 >= (_QWORD)a8 * (_QWORD)a3)
        v21 = (_QWORD)a8 * (_QWORD)a3;
      else
        v21 = v20;
      memcpy(a1, a4, v21);
    }
    else
    {
      v26[0] = (float *)a1;
      v26[1] = (float *)a2;
      v26[2] = a3;
      v26[3] = (float *)a4;
      v26[4] = a5;
      v26[5] = a6;
      v26[6] = a11;
      v26[7] = a7;
      v26[8] = a8;
      if ((a2 & 0x1000) != 0)
      {
        if (a2 == 593924)
        {
          sub_1DCC1FA80(v26, 1.0);
        }
        else if (a2 == 659460)
        {
          sub_1DCC1F1B0(v26, 1.0);
        }
      }
      else
      {
        switch(((unint64_t)(a2 & 0xFFFF0000) - 0x10000) >> 16)
        {
          case 0uLL:
            v22 = 1.0;
            goto LABEL_22;
          case 1uLL:
            v23 = 1.0;
            goto LABEL_24;
          case 2uLL:
            v22 = 255.0;
LABEL_22:
            sub_1DCC240B0((uint64_t)v26, v22);
            return;
          case 3uLL:
            v23 = 127.0;
LABEL_24:
            sub_1DCC2121C((uint64_t)v26, v23);
            return;
          case 4uLL:
            v24 = 1.0;
            goto LABEL_28;
          case 5uLL:
            v25 = 1.0;
            goto LABEL_30;
          case 6uLL:
            v24 = 65535.0;
LABEL_28:
            sub_1DCC250C4(v26, v24, a10);
            break;
          case 7uLL:
            v25 = 32767.0;
LABEL_30:
            sub_1DCC22230(v26, v25, a10);
            break;
          case 8uLL:
            sub_1DCC25FF4(v26, 1.0, a10);
            break;
          case 9uLL:
            sub_1DCC23160(v26, 1.0, a10);
            break;
          case 0xAuLL:
            sub_1DCC26F44((uint64_t)v26, 1.0);
            break;
          case 0xBuLL:
            sub_1DCC20314(v26, 1.0, a10);
            break;
          default:
            return;
        }
      }
    }
  }
}

uint64_t sub_1DCACC518(uint64_t a1)
{
  int v1;
  uint64_t result;

  v1 = a1;
  if ((a1 & 0x1000) != 0)
    return 4 * (((a1 - 593924) & 0xFFFFFFFFFFFEFFFFLL) == 0);
  result = 0;
  switch(HIWORD(v1))
  {
    case 1:
    case 2:
      result = v1;
      break;
    case 5:
    case 6:
    case 7:
    case 8:
    case 0xB:
      result = 2 * v1;
      break;
    case 9:
    case 0xA:
    case 0xC:
      result = 4 * v1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1DCACC57C(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _BOOL8 v22;
  unsigned int *v23;
  unsigned int v24;
  MDLVertexAttribute *v25;
  const char *v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  id v56;
  void *v57;
  id location;
  void *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v56 = a2;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = objc_opt_new();
  v6 = *(void **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v5;

  sub_1DCAD1448(a1 + 1);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = a1[1];
  v8 = a1[2];
  v55 = a1;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      objc_msgSend_objectAtIndexedSubscript_(v57, v7, v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(v9 + 72));
      EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_1DCB3FE68(&v62, *(_DWORD *)(v9 + 88));
      v14 = EmptyString;
      if ((v62 & 7) != 0)
      {
        v15 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      if (*(int *)(v9 + 88) >= 256)
      {
        if ((*(_QWORD *)(v9 + 56) & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v17 = (*(_QWORD *)(v9 + 56) & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          v17 = (unint64_t)EmptyString;
        }
        if (*(char *)(v17 + 23) < 0)
          v17 = *(_QWORD *)v17;
        if ((*v55 & 0xFFFFFFFFFFFFFFF8) != 0)
          v18 = (*v55 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
        if (*(char *)(v18 + 23) < 0)
          v18 = *(_QWORD *)v18;
        NSLog(CFSTR("Warning: attribute %s on mesh %s has elementSize(%d) > %d which does not map to a valid MDLVertexFormat"), v17, v18, *(unsigned int *)(v9 + 88), 255);
        v14 = 0;
      }
      v19 = *(_QWORD *)(v9 + 80);
      v61 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 2, v20));
        if ((v21 & 1) == 0)
          v61 &= 0xFFFFFFFFFFFFFFF8;
      }
      v22 = sub_1DCB407EC(&v61);
      if ((v61 & 7) != 0)
      {
        v23 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      location = 0;
      v59 = 0;
      v60 = 0;
      if (v12 && v14 && v22)
      {
        v25 = [MDLVertexAttribute alloc];
        v27 = (void *)objc_msgSend_initWithName_format_offset_bufferIndex_(v25, v26, (uint64_t)v12, v14, 0, v11);
        v60 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v9)
            / (unint64_t)*(int *)(v9 + 88);
        objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v28, v60);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v56, v30, (uint64_t)v29);

        if ((objc_msgSend_isEqualToString_(v12, v31, (uint64_t)CFSTR("jointIndices")) & 1) != 0
          || objc_msgSend_isEqualToString_(v12, v32, (uint64_t)CFSTR("jointWeights")))
        {
          objc_msgSend_setInitializationValue_(v27, v32, v33, 0.0);
        }
        objc_msgSend_addOrReplaceAttribute_(*(void **)(a3 + 24), v32, (uint64_t)v27);
        v36 = objc_msgSend_format(v27, v34, v35);
        v37 = sub_1DCACC518(v36);
        objc_msgSend_layouts(*(void **)(a3 + 24), v38, v39);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v40, v41, v11);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setStride_(v42, v43, v37);

        ++v11;
      }
      else
      {
        if ((*(_QWORD *)(v9 + 56) & 0xFFFFFFFFFFFFFFF8) != 0)
          v44 = (*(_QWORD *)(v9 + 56) & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v44 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v22);
        if (*(char *)(v44 + 23) < 0)
          v44 = *(_QWORD *)v44;
        v27 = 0;
        NSLog(CFSTR("Warning: unable to convert %s to MDLVertexAttribute."), v44);
      }
      objc_storeStrong(&location, v27);
      v47 = (void *)objc_msgSend_copy(v27, v45, v46);
      v48 = v59;
      v59 = v47;

      objc_msgSend_initializationValue(location, v49, v50);
      objc_msgSend_setInitializationValue_(v59, v51, v52);
      v53 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v53 >= *(_QWORD *)(a3 + 16))
      {
        v54 = sub_1DCB44C20((uint64_t *)a3, (uint64_t)&location);
      }
      else
      {
        *v53 = location;
        v53[1] = v59;
        v53[2] = v60;
        v54 = (uint64_t)(v53 + 3);
      }
      ++v10;
      *(_QWORD *)(a3 + 8) = v54;

      v9 += 96;
    }
    while (v9 != v8);
  }

}

void sub_1DCACC940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void **v16;

  sub_1DCB40A20(v16);

  _Unwind_Resume(a1);
}

uint64_t sub_1DCACCA20(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1DCB44D34((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1DCACCA94(uint64_t a1)
{
  sub_1DCB44ED0(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

id sub_1DCACCAC8(_QWORD *a1, void *a2)
{
  id v3;
  _QWORD *i;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  id v12;
  const char *v13;
  void *v14;
  const char *v15;
  void *v16;
  const char *v17;
  id v18;
  const char *v19;
  MDLSubmesh *v20;
  const char *v21;
  void *v22;
  const char *v23;
  id v25;
  _OWORD v26[2];
  uint64_t v27;
  int v28;
  int *v29;

  v25 = a2;
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v5 = (_QWORD *)a1[55];
  for (i = (_QWORD *)a1[56]; v5 != i; v5 += 7)
  {
    v27 = 0;
    memset(v26, 0, sizeof(v26));
    v6 = v5[1];
    if (v6)
    {
      v28 = 0;
      v29 = &v28;
      sub_1DCB267B0((unint64_t *)v26, 3 * v6, &v29);
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v5 + 1));
      v7 = (int *)v5[5];
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v5 + 1));
      v8 = v5[5] + 4 * v5[1];
      if (v7 != (int *)v8)
      {
        v9 = 0;
        do
        {
          v10 = *v7;
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 19));
          v11 = 3 * v10;
          LODWORD(v10) = *(_DWORD *)(a1[23] + 12 * v10);
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26);
          *(_DWORD *)(v27 + v9) = v10;
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 19));
          LODWORD(v10) = *(_DWORD *)(a1[23] + 4 * v11 + 4);
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26);
          *(_DWORD *)(v27 + v9 + 4) = v10;
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 19));
          LODWORD(v10) = *(_DWORD *)(a1[23] + 4 * v11 + 8);
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26);
          *(_DWORD *)(v27 + v9 + 8) = v10;
          ++v7;
          v9 += 12;
        }
        while (v7 != (int *)v8);
      }
    }
    else
    {
      sub_1DCB24648((uint64_t)v26, (__int128 *)(a1 + 19));
    }
    v12 = objc_alloc(MEMORY[0x1E0C99D50]);
    sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26);
    v14 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v12, v13, v27, 4 * *(_QWORD *)&v26[0], 0);
    v16 = (void *)objc_msgSend_newBufferWithData_type_(v25, v15, (uint64_t)v14, 2);
    if (objc_msgSend_conformsToProtocol_(v16, v17, (uint64_t)&unk_1F03B6D88))
    {
      v18 = v16;
      objc_msgSend_setName_(v18, v19, (uint64_t)CFSTR("indices"));

    }
    v20 = [MDLSubmesh alloc];
    v22 = (void *)objc_msgSend_initWithName_indexBuffer_indexCount_indexType_geometryType_material_topology_(v20, v21, (uint64_t)CFSTR("submesh"), v16, *(_QWORD *)&v26[0], 32, 2, v5[6], 0);
    objc_msgSend_addObject_(v3, v23, (uint64_t)v22);

    sub_1DCAEEE78((uint64_t)v26);
  }

  return v3;
}

void sub_1DCACCD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCACCD78(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unint64_t NumElements;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  __int128 *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t i;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t j;
  __int128 v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t k;
  uint64_t m;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t n;
  __int128 v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  unint64_t v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  int v118;
  __int128 v119[2];
  uint64_t v120;
  __int128 v121[2];
  uint64_t v122;
  _BYTE v123[40];
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127[4];
  int *v128;
  int v129;
  int *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v2 = (uint64_t *)(a1 + 8);
  if (v3 == v1)
    return;
  do
  {
    v135 = 0u;
    v136 = 0u;
    v133 = 0u;
    v134 = 0u;
    v131 = 0u;
    v132 = 0u;
    sub_1DCB25EEC(&v131, (_QWORD *)v1);
    v5 = *(_OWORD *)(v1 + 32);
    v132 = *(_OWORD *)(v1 + 16);
    v133 = v5;
    v6 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)&v134 = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*((_QWORD *)&v133 + 1))
        v7 = (unint64_t *)*((_QWORD *)&v133 + 1);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = *(_QWORD *)(v1 + 56);
    *((_QWORD *)&v134 + 1) = v9;
    if ((v9 & 7) != 0)
    {
      v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 2, v10));
      if ((v11 & 1) == 0)
        *((_QWORD *)&v134 + 1) &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 = *(_QWORD *)(v1 + 64);
    *(_QWORD *)&v135 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        *(_QWORD *)&v135 = v135 & 0xFFFFFFFFFFFFFFF8;
    }
    v15 = *(_QWORD *)(v1 + 80);
    *((_QWORD *)&v135 + 1) = *(_QWORD *)(v1 + 72);
    *(_QWORD *)&v136 = v15;
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 2, v16));
      v15 = v136;
      if ((v17 & 1) == 0)
      {
        v15 = v136 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)&v136 = v136 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    DWORD2(v136) = *(_DWORD *)(v1 + 88);
    if ((v15 & 7) != 0)
    {
      v18 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    if ((v135 & 7) != 0)
    {
      v20 = (unsigned int *)(v135 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((BYTE8(v134) & 7) != 0)
    {
      v22 = (unsigned int *)(*((_QWORD *)&v134 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    sub_1DCAEEE78((uint64_t)&v132);
    sub_1DCAEEE2C((uint64_t)&v131);
    v1 += 96;
  }
  while (v1 != v3);
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(*(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 8));
  v25 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) == v25)
  {
LABEL_42:
    v128 = 0;
    memset(v127, 0, sizeof(v127));
    v32 = (unint64_t *)(a1 + 152);
    v124 = 0;
    v125 = 0;
    v126 = 0;
    sub_1DCC118C4(v127, v2, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 152), (uint64_t *)&v124);
    if (v125 - (_QWORD)v124 == 40)
    {
      v33 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)*v2);
      v34 = *(_QWORD *)(a1 + 8);
      v35 = *(_QWORD *)(a1 + 16);
      if (v34 != v35)
      {
        v36 = v33;
        do
        {
          MEMORY[0x1DF0D1254](&v131, "constant");
          v37 = (__int128 *)(v34 + 80);
          v38 = *(_QWORD *)(v34 + 80);
          v39 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
          if ((v131 & 7) != 0)
          {
            do
              v40 = __ldxr(v39);
            while (__stlxr(v40 - 2, v39));
          }
          if ((unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8) == v39)
            sub_1DCC113CC((int *)v34, v36);
          MEMORY[0x1DF0D1254](&v131, "vertex");
          if (&v131 == v37)
          {
            v43 = v131;
          }
          else
          {
            if ((*(_QWORD *)v37 & 7) != 0)
            {
              v41 = (unsigned int *)(*(_QWORD *)v37 & 0xFFFFFFFFFFFFFFF8);
              do
                v42 = __ldxr(v41);
              while (__stlxr(v42 - 2, v41));
            }
            v43 = 0;
            *(_QWORD *)v37 = v131;
            *(_QWORD *)&v131 = 0;
          }
          if ((v43 & 7) != 0)
          {
            v44 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
            do
              v45 = __ldxr(v44);
            while (__stlxr(v45 - 2, v44));
          }
          sub_1DCAEEFD4((_QWORD *)(v34 + 16));
          v34 += 96;
        }
        while (v34 != v35);
      }
    }
    else
    {
      memset(v123, 0, sizeof(v123));
      sub_1DCB23B10((uint64_t)v123, *v32);
      v122 = 0;
      memset(v121, 0, sizeof(v121));
      v120 = 0;
      memset(v119, 0, sizeof(v119));
      v118 = 0;
      sub_1DCC11E78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v123, (unint64_t *)v121, v119, &v124, NumElements, &v118);
      v46 = 0xCCCCCCCCCCCCCCCDLL * ((v125 - (uint64_t)v124) >> 3);
      v47 = *(_QWORD *)&v119[0] / (v46 + 1) + v118;
      v48 = (int)v46;
      v49 = *(_QWORD *)(a1 + 8);
      v50 = *(_QWORD *)(a1 + 16);
      if (v49 != v50)
      {
        v51 = 0;
        do
        {
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v127);
          sub_1DCC125D8(v49, v128[v51], v118, v47, v48, v121, v119);
          MEMORY[0x1DF0D1254](&v131, "vertex");
          v52 = (_QWORD *)(v49 + 80);
          if (&v131 == (__int128 *)(v49 + 80))
          {
            v55 = v131;
          }
          else
          {
            if ((*v52 & 7) != 0)
            {
              v53 = (unsigned int *)(*v52 & 0xFFFFFFFFFFFFFFF8);
              do
                v54 = __ldxr(v53);
              while (__stlxr(v54 - 2, v53));
            }
            v55 = 0;
            *v52 = v131;
            *(_QWORD *)&v131 = 0;
          }
          if ((v55 & 7) != 0)
          {
            v56 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
            do
              v57 = __ldxr(v56);
            while (__stlxr(v57 - 2, v56));
          }
          sub_1DCAEEFD4((_QWORD *)(v49 + 16));
          ++v51;
          v49 += 96;
        }
        while (v49 != v50);
      }
      v59 = *(_QWORD *)(a1 + 32);
      for (i = *(_QWORD *)(a1 + 40); v59 != i; v59 += 32)
      {
        v60 = *(_QWORD *)(v59 + 8);
        if (*(_QWORD *)(v59 + 16) != v60)
        {
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v127);
          sub_1DCC125D8(v60, *v128, v118, v47, v48, v121, v119);
          MEMORY[0x1DF0D1254](&v131, "vertex");
          v61 = (_QWORD *)(v60 + 80);
          if (&v131 == (__int128 *)(v60 + 80))
          {
            v64 = v131;
          }
          else
          {
            if ((*v61 & 7) != 0)
            {
              v62 = (unsigned int *)(*v61 & 0xFFFFFFFFFFFFFFF8);
              do
                v63 = __ldxr(v62);
              while (__stlxr(v63 - 2, v62));
            }
            v64 = 0;
            *v61 = v131;
            *(_QWORD *)&v131 = 0;
          }
          if ((v64 & 7) != 0)
          {
            v65 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
            do
              v66 = __ldxr(v65);
            while (__stlxr(v66 - 2, v65));
          }
          sub_1DCAEEFD4((_QWORD *)(v60 + 16));
        }
      }
      v67 = *v32;
      v129 = 0;
      v130 = &v129;
      sub_1DCB267B0((unint64_t *)v123, v67, &v130);
      v68 = *(_QWORD *)(a1 + 168);
      v69 = *(_OWORD *)v32;
      *(_OWORD *)v32 = *(_OWORD *)v123;
      *(_QWORD *)(a1 + 168) = *(_QWORD *)&v123[16];
      *(_OWORD *)v123 = v69;
      *(_QWORD *)&v123[16] = v68;
      v70 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)&v123[24];
      *(_OWORD *)&v123[24] = v70;
      v71 = *(_QWORD *)(a1 + 8);
      for (j = *(_QWORD *)(a1 + 16); v71 != j; v71 += 96)
      {
        v135 = 0u;
        v136 = 0u;
        v133 = 0u;
        v134 = 0u;
        v131 = 0u;
        v132 = 0u;
        sub_1DCB25EEC(&v131, (_QWORD *)v71);
        v73 = *(_OWORD *)(v71 + 32);
        v132 = *(_OWORD *)(v71 + 16);
        v133 = v73;
        v74 = *(_QWORD *)(v71 + 48);
        *(_QWORD *)&v134 = v74;
        if (v74)
        {
          v75 = (unint64_t *)(v74 - 16);
          if (*((_QWORD *)&v133 + 1))
            v75 = (unint64_t *)*((_QWORD *)&v133 + 1);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        v77 = *(_QWORD *)(v71 + 56);
        *((_QWORD *)&v134 + 1) = v77;
        if ((v77 & 7) != 0)
        {
          v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 2, v78));
          if ((v79 & 1) == 0)
            *((_QWORD *)&v134 + 1) &= 0xFFFFFFFFFFFFFFF8;
        }
        v80 = *(_QWORD *)(v71 + 64);
        *(_QWORD *)&v135 = v80;
        if ((v80 & 7) != 0)
        {
          v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 2, v81));
          if ((v82 & 1) == 0)
            *(_QWORD *)&v135 = v135 & 0xFFFFFFFFFFFFFFF8;
        }
        v83 = *(_QWORD *)(v71 + 80);
        *((_QWORD *)&v135 + 1) = *(_QWORD *)(v71 + 72);
        *(_QWORD *)&v136 = v83;
        if ((v83 & 7) != 0)
        {
          v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 2, v84));
          v83 = v136;
          if ((v85 & 1) == 0)
          {
            v83 = v136 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)&v136 = v136 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        DWORD2(v136) = *(_DWORD *)(v71 + 88);
        if ((v83 & 7) != 0)
        {
          v86 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
          do
            v87 = __ldxr(v86);
          while (__stlxr(v87 - 2, v86));
        }
        if ((v135 & 7) != 0)
        {
          v88 = (unsigned int *)(v135 & 0xFFFFFFFFFFFFFFF8);
          do
            v89 = __ldxr(v88);
          while (__stlxr(v89 - 2, v88));
        }
        if ((BYTE8(v134) & 7) != 0)
        {
          v90 = (unsigned int *)(*((_QWORD *)&v134 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v91 = __ldxr(v90);
          while (__stlxr(v91 - 2, v90));
        }
        sub_1DCAEEE78((uint64_t)&v132);
        sub_1DCAEEE2C((uint64_t)&v131);
      }
      sub_1DCAEEE78((uint64_t)v119);
      sub_1DCAEEE78((uint64_t)v121);
      sub_1DCAEEE78((uint64_t)v123);
    }
    *(_QWORD *)&v131 = &v124;
    sub_1DCB45F1C((void ***)&v131);
    sub_1DCAEEE78((uint64_t)v127);
    return;
  }
  v26 = 0;
  while (1)
  {
    MEMORY[0x1DF0D1254](&v131, "faceVarying");
    v27 = (unsigned int *)(*(_QWORD *)(v25 + 96 * v26 + 80) & 0xFFFFFFFFFFFFFFF8);
    v28 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
    if (v27 == (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8))
      break;
    if ((v131 & 7) != 0)
    {
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    v25 = *v2;
LABEL_41:
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 16) - v25) >> 5) <= ++v26)
      goto LABEL_42;
  }
  v25 = *v2;
  v30 = *(_QWORD *)(*v2 + 96 * v26 + 16);
  if ((v131 & 7) != 0)
  {
    do
      v31 = __ldxr(v27);
    while (__stlxr(v31 - 2, v27));
    v25 = *v2;
  }
  if (v30)
    goto LABEL_41;
  for (k = *(_QWORD *)(a1 + 16); v25 != k; v25 += 96)
    sub_1DCC10184(v25, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 152));
  v94 = *(_QWORD *)(a1 + 32);
  for (m = *(_QWORD *)(a1 + 40); v94 != m; v94 += 32)
  {
    v95 = *(_QWORD *)(v94 + 8);
    if (*(_QWORD *)(v94 + 16) != v95)
      sub_1DCC10184(v95, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 152));
  }
  if (*(_QWORD *)(a1 + 152))
  {
    v96 = 0;
    do
    {
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 152));
      *(_DWORD *)(*(_QWORD *)(a1 + 184) + 4 * v96) = v96;
      ++v96;
    }
    while (*(_QWORD *)(a1 + 152) > v96);
  }
  v97 = *(_QWORD *)(a1 + 8);
  for (n = *(_QWORD *)(a1 + 16); v97 != n; v97 += 96)
  {
    v135 = 0u;
    v136 = 0u;
    v133 = 0u;
    v134 = 0u;
    v131 = 0u;
    v132 = 0u;
    sub_1DCB25EEC(&v131, (_QWORD *)v97);
    v99 = *(_OWORD *)(v97 + 32);
    v132 = *(_OWORD *)(v97 + 16);
    v133 = v99;
    v100 = *(_QWORD *)(v97 + 48);
    *(_QWORD *)&v134 = v100;
    if (v100)
    {
      v101 = (unint64_t *)(v100 - 16);
      if (*((_QWORD *)&v133 + 1))
        v101 = (unint64_t *)*((_QWORD *)&v133 + 1);
      do
        v102 = __ldxr(v101);
      while (__stxr(v102 + 1, v101));
    }
    v103 = *(_QWORD *)(v97 + 56);
    *((_QWORD *)&v134 + 1) = v103;
    if ((v103 & 7) != 0)
    {
      v104 = (unsigned int *)(v103 & 0xFFFFFFFFFFFFFFF8);
      do
        v105 = __ldxr(v104);
      while (__stxr(v105 + 2, v104));
      if ((v105 & 1) == 0)
        *((_QWORD *)&v134 + 1) &= 0xFFFFFFFFFFFFFFF8;
    }
    v106 = *(_QWORD *)(v97 + 64);
    *(_QWORD *)&v135 = v106;
    if ((v106 & 7) != 0)
    {
      v107 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFFFF8);
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 2, v107));
      if ((v108 & 1) == 0)
        *(_QWORD *)&v135 = v135 & 0xFFFFFFFFFFFFFFF8;
    }
    v109 = *(_QWORD *)(v97 + 80);
    *((_QWORD *)&v135 + 1) = *(_QWORD *)(v97 + 72);
    *(_QWORD *)&v136 = v109;
    if ((v109 & 7) != 0)
    {
      v110 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 2, v110));
      v109 = v136;
      if ((v111 & 1) == 0)
      {
        v109 = v136 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)&v136 = v136 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    DWORD2(v136) = *(_DWORD *)(v97 + 88);
    if ((v109 & 7) != 0)
    {
      v112 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
      do
        v113 = __ldxr(v112);
      while (__stlxr(v113 - 2, v112));
    }
    if ((v135 & 7) != 0)
    {
      v114 = (unsigned int *)(v135 & 0xFFFFFFFFFFFFFFF8);
      do
        v115 = __ldxr(v114);
      while (__stlxr(v115 - 2, v114));
    }
    if ((BYTE8(v134) & 7) != 0)
    {
      v116 = (unsigned int *)(*((_QWORD *)&v134 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v117 = __ldxr(v116);
      while (__stlxr(v117 - 2, v116));
    }
    sub_1DCAEEE78((uint64_t)&v132);
    sub_1DCAEEE2C((uint64_t)&v131);
  }
}

void sub_1DCACD79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2)
    sub_1DCAE4C58(exception_object);
  _Unwind_Resume(exception_object);
}

id sub_1DCACD84C(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  int v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  BOOL v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  void *v63;
  const char *v64;
  const char *v65;
  id v66;
  void *context;
  id v69;
  id v70;
  id v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[128];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v69 = a2;
  v71 = a4;
  v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  context = (void *)MEMORY[0x1DF0D25C8]();
  v10 = 0;
  v11 = 0;
  while (1)
  {
    objc_msgSend_layouts(v6, v8, v9);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend_count(v12, v13, v14);

    if (v15 <= v10)
      break;
    objc_msgSend_layouts(v6, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v18, v19, v10);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend_stride(v20, v21, v22);

    ++v10;
    if (v23)
      v11 = v10;
    else
      v11 = v11;
  }
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  objc_msgSend_attributes(v6, v16, v17);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v72, v76, 16);
  if (v28)
  {
    v29 = *(_QWORD *)v73;
    do
    {
      for (i = 0; i != v28; ++i)
      {
        if (*(_QWORD *)v73 != v29)
          objc_enumerationMutation(v24);
        v31 = *(void **)(*((_QWORD *)&v72 + 1) + 8 * i);
        if (objc_msgSend_format(v31, v26, v27))
        {
          v32 = objc_msgSend_bufferIndex(v31, v26, v27);
          if (v11 <= v32 + 1)
            v11 = (v32 + 1);
          else
            v11 = v11;
        }
      }
      v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v26, (uint64_t)&v72, v76, 16);
    }
    while (v28);
  }

  v37 = objc_msgSend_count(v71, v33, v34);
  if (v37 == v11)
  {
    if (v69)
      v70 = v69;
    else
      v70 = (id)objc_opt_new();
    if ((_DWORD)v11)
    {
      v42 = 0;
      while (1)
      {
        objc_msgSend_layouts(v6, v38, v39);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v43, v44, v42);
        v45 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_null(MEMORY[0x1E0C99E38], v46, v47);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend_isEqual_(v45, v49, (uint64_t)v48) & 1) != 0)
          break;
        v54 = objc_msgSend_stride(v45, v50, v51) == 0;

        if (v54)
          goto LABEL_28;
        objc_msgSend_objectAtIndexedSubscript_(v71, v52, v42);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        v58 = objc_msgSend_integerValue(v55, v56, v57);
        v61 = objc_msgSend_stride(v45, v59, v60);

        v63 = (void *)objc_msgSend_newBufferFromZone_length_type_(v70, v62, 0, v61 * v58, 1);
        objc_msgSend_addObject_(v7, v64, (uint64_t)v63);
LABEL_29:

        if (v37 == ++v42)
          goto LABEL_30;
      }

LABEL_28:
      objc_msgSend_null(MEMORY[0x1E0C99E38], v52, v53);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v7, v65, (uint64_t)v63);
      goto LABEL_29;
    }
LABEL_30:

  }
  else
  {
    v40 = objc_msgSend_count(v71, v35, v36);
    NSLog(CFSTR("Unable to create new vertex buffers, the destination Layout element counts size is: %d, while the maxVertexBufferCount is: %d"), v40, v11, context);
    v41 = v7;
  }
  objc_autoreleasePoolPop(context);
  if (v37 == v11)
    v66 = v7;

  return v7;
}

void sub_1DCACDB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1DCACDE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCACE120(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCACE204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCACE278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCACE3BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCACE3D8(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  uint64_t EmptyString;
  uint64_t v3;
  __int128 v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  pxrInternal__aapl__pxrReserved__::VtValue *v6;
  void **v7;
  void *__p[2];
  uint64_t v10;

  if (*((_QWORD *)a1 + 2) == *((_QWORD *)a1 + 1))
    return 0;
  __p[0] = 0;
  __p[1] = 0;
  v10 = 0;
  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (*(char *)(EmptyString + 23) < 0)
  {
    sub_1DCACA658(__p, *(void **)EmptyString, *(_QWORD *)(EmptyString + 8));
  }
  else
  {
    v4 = *(_OWORD *)EmptyString;
    v10 = *(_QWORD *)(EmptyString + 16);
    *(_OWORD *)__p = v4;
  }
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)*((_QWORD *)a1 + 1);
  v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)*((_QWORD *)a1 + 2);
  while (v5 != v6)
  {
    if ((sub_1DCACE514((uint64_t)v5, a1) & 1) == 0)
      goto LABEL_20;
    if (*((_QWORD *)v5 + 2) && (sub_1DCACF620(v5) & 1) == 0)
    {
      v7 = __p;
      if (v10 < 0)
        v7 = (void **)__p[0];
      NSLog(CFSTR("%s: has attribute with indices out of bound.\n"), v7);
      goto LABEL_20;
    }
    v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v5 + 96);
  }
  if ((sub_1DCACECE4(a1) & 1) != 0)
  {
    v3 = sub_1DCACEA00(a1);
    goto LABEL_21;
  }
LABEL_20:
  v3 = 0;
LABEL_21:
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_1DCACE4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCACE514(uint64_t a1, _QWORD *a2)
{
  uint64_t EmptyString;
  __int128 v5;
  pxrInternal__aapl__pxrReserved__::VtValue *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *NumElements;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  pxrInternal__aapl__pxrReserved__::TfToken *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  void **v26;
  void **v27;
  int v28;
  void **v29;
  int v30;
  void **v31;
  uint64_t v32;
  void **v33;
  void **v34;
  uint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  void **v39;
  void **v40;
  uint64_t v41;
  void **v42;
  void **v43;
  unsigned int *v44;
  char v45;
  void **v46;
  char v47;
  void **v48;
  uint64_t v49;
  __CFString *v50;
  void **v51;
  void **v52;
  uint64_t v54;
  void *__p[2];
  uint64_t v56;
  void *__dst[2];
  uint64_t v58;

  if ((*(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (*(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  __dst[1] = 0;
  v58 = 0;
  __dst[0] = 0;
  if (*(char *)(EmptyString + 23) < 0)
  {
    sub_1DCACA658(__dst, *(void **)EmptyString, *(_QWORD *)(EmptyString + 8));
  }
  else
  {
    v5 = *(_OWORD *)EmptyString;
    v58 = *(_QWORD *)(EmptyString + 16);
    *(_OWORD *)__dst = v5;
  }
  v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)a2[1];
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)a2[2] == v6 || !*((_QWORD *)v6 + 1))
  {
    v12 = 0;
    goto LABEL_78;
  }
  NumElements = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(v6);
  v8 = NumElements;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)a2[14];
  v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)a2[19];
  __p[0] = 0;
  __p[1] = 0;
  v56 = 0;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    v11 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v11 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NumElements);
  if (*(char *)(v11 + 23) < 0)
  {
    sub_1DCACA658(__p, *(void **)v11, *(_QWORD *)(v11 + 8));
  }
  else
  {
    v13 = *(_OWORD *)v11;
    v56 = *(_QWORD *)(v11 + 16);
    *(_OWORD *)__p = v13;
  }
  MEMORY[0x1DF0D1254](&v54, "constant");
  v14 = *(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8;
  v15 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
  if ((v54 & 7) != 0)
  {
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((unsigned int *)v14 != v15)
  {
    MEMORY[0x1DF0D1254](&v54, "vertex");
    v17 = *(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8;
    v18 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    if ((v54 & 7) != 0)
    {
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    if ((unsigned int *)v17 == v18)
    {
      v35 = *(_QWORD *)(a1 + 16);
      if (v35)
      {
        if (v35 != (int)v8)
        {
          v36 = (void **)__p[0];
          if (v56 >= 0)
            v36 = __p;
          v37 = (void **)__dst[0];
          if (v58 >= 0)
            v37 = __dst;
          NSLog(CFSTR("Warning: %s: attribute %s is vertex varying and indexed, but the attribute indices (%lu) are not the same size as the mesh's vertex count (%d). \n"), v36, v37, v35, v8);
          goto LABEL_75;
        }
        goto LABEL_68;
      }
      v44 = (unsigned int *)(a1 + 88);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1) == *(int *)(a1 + 88) * (uint64_t)(int)v8)
        goto LABEL_68;
      v45 = HIBYTE(v56);
      v46 = (void **)__p[0];
      v47 = HIBYTE(v58);
      v48 = (void **)__dst[0];
      v49 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
      v50 = CFSTR("Warning: %s: attribute %s is vertex varying and not indexed, but the attribute buffer (%lu) is not the same size as the mesh's vertex count (%d) * attribute's element size (%d). \n");
    }
    else
    {
      MEMORY[0x1DF0D1254](&v54, "uniform");
      v20 = *(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8;
      v21 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
      if ((v54 & 7) != 0)
      {
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      if ((unsigned int *)v20 == v21)
      {
        v38 = *(_QWORD *)(a1 + 16);
        if (v38)
        {
          if (v38 != (int)v9)
          {
            v39 = (void **)__p[0];
            if (v56 >= 0)
              v39 = __p;
            v40 = (void **)__dst[0];
            if (v58 >= 0)
              v40 = __dst;
            NSLog(CFSTR("Warning: %s: attribtue %s is uniform varying and indexed, but the attribute indices (%lu) are not the same size as the mesh's face count (%d). \n"), v39, v40, v38, v9);
            goto LABEL_75;
          }
          goto LABEL_68;
        }
        v44 = (unsigned int *)(a1 + 88);
        if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1) == *(int *)(a1 + 88) * (uint64_t)(int)v9)
          goto LABEL_68;
        v45 = HIBYTE(v56);
        v46 = (void **)__p[0];
        v47 = HIBYTE(v58);
        v48 = (void **)__dst[0];
        v49 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
        v50 = CFSTR("Warning: %s: attribute %s is uniform varying and not indexed, but the attribute buffer (%lu) is not the same size as the mesh's face count (%d) * attribute's element size (%d). \n");
        v8 = v9;
      }
      else
      {
        MEMORY[0x1DF0D1254](&v54, "faceVarying");
        v23 = *(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8;
        v24 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
        if ((v54 & 7) != 0)
        {
          do
            v25 = __ldxr(v24);
          while (__stlxr(v25 - 2, v24));
        }
        if ((unsigned int *)v23 != v24)
        {
          v26 = __p;
          if (v56 < 0)
            v26 = (void **)__p[0];
          v27 = __dst;
          if (v58 < 0)
            v27 = (void **)__dst[0];
          NSLog(CFSTR("Warning: %s: attribute %s has unknown varying frequency. \n"), v26, v27);
          goto LABEL_75;
        }
        v41 = *(_QWORD *)(a1 + 16);
        if (v41)
        {
          if (v41 != (int)v10)
          {
            v42 = (void **)__p[0];
            if (v56 >= 0)
              v42 = __p;
            v43 = (void **)__dst[0];
            if (v58 >= 0)
              v43 = __dst;
            NSLog(CFSTR("Warning: %s: attribute %s is face varying and indexed, but the attribute indices (%lu) is not the same size as the mesh's face vertex count (%d). \n"), v42, v43, v41, v10);
            goto LABEL_75;
          }
LABEL_68:
          v12 = 1;
          goto LABEL_76;
        }
        v44 = (unsigned int *)(a1 + 88);
        if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1) == *(int *)(a1 + 88) * (uint64_t)(int)v10)
          goto LABEL_68;
        v45 = HIBYTE(v56);
        v46 = (void **)__p[0];
        v47 = HIBYTE(v58);
        v48 = (void **)__dst[0];
        v49 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
        v50 = CFSTR("Warning: %s: attribute %s is face varying and not indexed, but the attribute buffer (%lu) is not the same size as mesh's face vertex count (%d) * attribute's element size (%d). \n");
        v8 = v10;
      }
    }
    v51 = __dst;
    if (v47 < 0)
      v51 = v48;
    v52 = __p;
    if (v45 < 0)
      v52 = v46;
    NSLog(&v50->isa, v52, v51, v49, v8, *v44);
    goto LABEL_75;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1) == *(_DWORD *)(a1 + 88))
    goto LABEL_68;
  v28 = SHIBYTE(v56);
  v29 = (void **)__p[0];
  v30 = SHIBYTE(v58);
  v31 = (void **)__dst[0];
  v32 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
  if (v30 >= 0)
    v33 = __dst;
  else
    v33 = v31;
  if (v28 >= 0)
    v34 = __p;
  else
    v34 = v29;
  NSLog(CFSTR("Warning: %s: attribute %s is constant, but the attribute buffer (%lu) is not the same size as the attribute's element size (%d). \n"), v34, v33, v32, *(unsigned int *)(a1 + 88));
LABEL_75:
  v12 = 0;
LABEL_76:
  if (SHIBYTE(v56) < 0)
    operator delete(__p[0]);
LABEL_78:
  if (SHIBYTE(v58) < 0)
    operator delete(__dst[0]);
  return v12;
}

void sub_1DCACE9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCACEA00(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  uint64_t EmptyString;
  __int128 v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  unint64_t NumElements;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void **v20;
  void **v21;
  uint64_t v22;
  void **v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  void **v31;
  unint64_t v32;
  const char *v33;
  void *__p[2];
  uint64_t v35;

  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  __p[1] = 0;
  v35 = 0;
  __p[0] = 0;
  if (*(char *)(EmptyString + 23) < 0)
  {
    sub_1DCACA658(__p, *(void **)EmptyString, *(_QWORD *)(EmptyString + 8));
  }
  else
  {
    v3 = *(_OWORD *)EmptyString;
    v35 = *(_QWORD *)(EmptyString + 16);
    *(_OWORD *)__p = v3;
  }
  if (*((_QWORD *)a1 + 30) != *((_QWORD *)a1 + 35))
  {
    v19 = __p;
    if (v35 < 0)
      v19 = (void **)__p[0];
    NSLog(CFSTR("%s: mismatch corner indices and corner sharpnesses.\n"), v19);
    goto LABEL_34;
  }
  if (*((_QWORD *)a1 + 45) != *((_QWORD *)a1 + 50))
  {
    v20 = __p;
    if (v35 < 0)
      v20 = (void **)__p[0];
    NSLog(CFSTR("%s: mismatch crease lengths and crease sharpnesses.\n"), v20);
    goto LABEL_34;
  }
  v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)*((_QWORD *)a1 + 1);
  if (*((pxrInternal__aapl__pxrReserved__::VtValue **)a1 + 2) == v4 || !*((_QWORD *)v4 + 1))
  {
    v21 = __p;
    if (v35 < 0)
      v21 = (void **)__p[0];
    NSLog(CFSTR("%s: invalid points data.\n"), v21);
    goto LABEL_34;
  }
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(v4);
  v6 = *((_QWORD *)a1 + 30);
  if (v6)
  {
    v7 = (unsigned int *)*((_QWORD *)a1 + 34);
    v8 = 4 * v6;
    while (1)
    {
      v9 = *v7;
      if ((v9 & 0x80000000) != 0 || NumElements <= v9)
        break;
      ++v7;
      v8 -= 4;
      if (!v8)
        goto LABEL_16;
    }
    v24 = __p;
    if (v35 < 0)
      v24 = (void **)__p[0];
    NSLog(CFSTR("%s: corner index out of bound.\n"), v24);
    goto LABEL_34;
  }
LABEL_16:
  v10 = *((_QWORD *)a1 + 40);
  if (v10)
  {
    v11 = (unsigned int *)*((_QWORD *)a1 + 44);
    v12 = 4 * v10;
    while (1)
    {
      v13 = *v11;
      if ((v13 & 0x80000000) != 0 || NumElements <= v13)
        break;
      ++v11;
      v12 -= 4;
      if (!v12)
        goto LABEL_21;
    }
    v25 = __p;
    if (v35 < 0)
      v25 = (void **)__p[0];
    NSLog(CFSTR("%s: crease index out of bound.\n"), v25);
    goto LABEL_34;
  }
LABEL_21:
  v14 = *((_QWORD *)a1 + 45);
  if (v14)
  {
    LODWORD(v15) = 0;
    v16 = (int *)*((_QWORD *)a1 + 49);
    v17 = 4 * v14;
    do
    {
      v18 = *v16++;
      v15 = v18 + (int)v15;
      v17 -= 4;
    }
    while (v17);
  }
  else
  {
    v15 = 0;
  }
  if (v10 != v15)
  {
    v31 = __p;
    if (v35 < 0)
      v31 = (void **)__p[0];
    NSLog(CFSTR("%s: mismatch crease lengths and crease indices.\n"), v31);
LABEL_34:
    v22 = 0;
    goto LABEL_35;
  }
  v26 = *((_QWORD *)a1 + 55);
  v27 = *((_QWORD *)a1 + 56);
  if (v26 != v27)
  {
    v22 = 1;
    while (1)
    {
      v28 = *(_QWORD *)(v26 + 8);
      if (v28)
        break;
LABEL_52:
      v26 += 56;
      if (v26 == v27)
        goto LABEL_35;
    }
    v29 = *(int **)(v26 + 40);
    v30 = 4 * v28;
    while (*((_QWORD *)a1 + 14) > (unint64_t)*v29)
    {
      ++v29;
      v30 -= 4;
      if (!v30)
        goto LABEL_52;
    }
    v32 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v32)
    {
      v33 = (const char *)(v32 + 16);
      if (*(char *)(v32 + 39) < 0)
        v33 = *(const char **)v33;
    }
    else
    {
      v33 = "";
    }
    NSLog(CFSTR("Warning: mesh has a face index bigger than face count, ignoring mesh: %s."), v33);
    goto LABEL_34;
  }
  v22 = 1;
LABEL_35:
  if (SHIBYTE(v35) < 0)
    operator delete(__p[0]);
  return v22;
}

void sub_1DCACECB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCACECE4(_QWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD *v3;
  pxrInternal__aapl__pxrReserved__::TfToken *NumElements;
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  unint64_t v6;
  uint64_t EmptyString;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t i;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  void **v23;
  void **v24;
  void **v25;
  void *__p[2];
  uint64_t v28;

  v3 = a1 + 1;
  v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)a1[1];
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)v3[1] == v2 || !*((_QWORD *)v2 + 1))
    return 0;
  NumElements = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(v2);
  v5 = NumElements;
  v6 = a1[19];
  __p[0] = 0;
  __p[1] = 0;
  v28 = 0;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NumElements);
  if (*(char *)(EmptyString + 23) < 0)
  {
    sub_1DCACA658(__p, *(void **)EmptyString, *(_QWORD *)(EmptyString + 8));
  }
  else
  {
    v9 = *(_OWORD *)EmptyString;
    v28 = *(_QWORD *)(EmptyString + 16);
    *(_OWORD *)__p = v9;
  }
  v10 = a1[14];
  if (v10)
  {
    for (i = 0; i != v10; ++i)
    {
      v12 = *(int *)(a1[18] + 4 * i);
      if ((v12 & 0x80000000) != 0 || (v13 = v6 - v12, v6 < v12))
      {
        v23 = __p;
        if (v28 < 0)
          v23 = (void **)__p[0];
        NSLog(CFSTR("%s: face %zu vertex count (%d) out of range [0, %zu].\n"), v23, i, *(int *)(a1[18] + 4 * i), v6);
        goto LABEL_40;
      }
      v6 -= v12;
    }
    if (!v13)
      goto LABEL_20;
    goto LABEL_16;
  }
  if (v6)
  {
LABEL_16:
    v14 = __p;
    if (v28 < 0)
      v14 = (void **)__p[0];
    NSLog(CFSTR("%s: face vertex indices size of range.\n"), v14);
    goto LABEL_40;
  }
LABEL_20:
  v15 = a1[19];
  if (v15)
  {
    v16 = (unsigned int *)a1[23];
    v17 = 4 * v15;
    while (1)
    {
      v18 = *v16;
      if ((v18 & 0x80000000) != 0 || (unint64_t)v5 <= v18)
        break;
      ++v16;
      v17 -= 4;
      if (!v17)
        goto LABEL_25;
    }
    v24 = __p;
    if (v28 < 0)
      v24 = (void **)__p[0];
    NSLog(CFSTR("%s: face vertex index out of bound.\n"), v24);
  }
  else
  {
LABEL_25:
    v19 = a1[24];
    if (!v19)
    {
LABEL_30:
      v8 = 1;
      goto LABEL_41;
    }
    v20 = (unsigned int *)a1[28];
    v21 = 4 * v19;
    while (1)
    {
      v22 = *v20;
      if ((v22 & 0x80000000) != 0 || v10 < v22)
        break;
      ++v20;
      v21 -= 4;
      if (!v21)
        goto LABEL_30;
    }
    v25 = __p;
    if (v28 < 0)
      v25 = (void **)__p[0];
    NSLog(CFSTR("%s: hole index out of bound.\n"), v25);
  }
LABEL_40:
  v8 = 0;
LABEL_41:
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  return v8;
}

void sub_1DCACEED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1DCACEEFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  _BOOL8 result;
  unsigned int v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) == v1)
    return 0;
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = v1 + 96 * v3;
    MEMORY[0x1DF0D1254](&v10, "normals");
    v6 = *(_QWORD *)(v5 + 56) & 0xFFFFFFFFFFFFFFF8;
    v7 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    result = v6 == (v10 & 0xFFFFFFFFFFFFFFF8);
    if ((v10 & 7) != 0)
    {
      do
        v9 = __ldxr(v7);
      while (__stlxr(v9 - 2, v7));
    }
    if ((unsigned int *)v6 == v7)
      break;
    v1 = *(_QWORD *)(a1 + 8);
    v3 = ++v4;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 16) - v1) >> 5) > v4);
  return result;
}

void sub_1DCACF0D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCACF410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCACF550(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCACF620(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  int v5;
  pxrInternal__aapl__pxrReserved__::TfToken *NumElements;
  uint64_t EmptyString;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 1;
  v3 = (int *)*((_QWORD *)this + 6);
  v4 = 4 * v1;
  while (1)
  {
    v5 = *v3;
    NumElements = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(this);
    if (v5 < 0 || v5 >= (int)NumElements / *((_DWORD *)this + 22))
      break;
    ++v3;
    v4 -= 4;
    if (!v4)
      return 1;
  }
  if ((*((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (*((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NumElements);
  if (*(char *)(EmptyString + 23) < 0)
    EmptyString = *(_QWORD *)EmptyString;
  NSLog(CFSTR("%s: attribute has indices out of bound.\n"), EmptyString);
  return 0;
}

void sub_1DCACF8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1DCACF970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCACFFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1DCAD01B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAD035C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAD03E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAD0490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DCAD0620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAD0670(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  objc_msgSend_submeshes(a2, (const char *)a2, a3, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v13, v17, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v14;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v4);
        objc_msgSend_material(*(void **)(*((_QWORD *)&v13 + 1) + 8 * v10), v6, v7);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_resolveTexturesWithResolver_(v11, v12, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112));

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v13, v17, 16);
    }
    while (v8);
  }

}

void sub_1DCAD0780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAD07BC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  objc_msgSend_submeshes(a2, (const char *)a2, a3, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v13, v17, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v14;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v4);
        objc_msgSend_material(*(void **)(*((_QWORD *)&v13 + 1) + 8 * v10), v6, v7);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_loadTexturesUsingResolver_cache_(v11, v12, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112), *(_QWORD *)(a1 + 40));

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v13, v17, 16);
    }
    while (v8);
  }

}

void sub_1DCAD08CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAD0B04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAD0E80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCAD0F84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAD1090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  uint64_t v17;

  if (*(char *)(v17 - 41) < 0)
    operator delete(*(void **)(v17 - 64));

  _Unwind_Resume(a1);
}

void sub_1DCAD11AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DCAD11D8(void *a1, uint64_t a2, __n128 a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  CGColorRef v9;
  const char *v10;
  const char *v11;
  CGFloat components[2];
  double v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v7 = v4;
  if (*(_QWORD *)(a2 + 72) && (v8 = objc_msgSend_semantic(v4, v5, v6), v8 <= 0xD) && ((1 << v8) & 0x2209) != 0)
  {
    *(float64x2_t *)components = vcvtq_f64_f32((float32x2_t)a3.n128_u64[0]);
    v14 = a3.n128_f32[2];
    v15 = 0x3FF0000000000000;
    v9 = CGColorCreate(*(CGColorSpaceRef *)(a2 + 72), components);
    objc_msgSend_setColor_(v7, v10, (uint64_t)v9);
    objc_msgSend_setType_(v7, v11, 4);
    CFRelease(v9);
  }
  else
  {
    objc_msgSend_setFloat3Value_(v7, v5, v6, a3.n128_f64[0], *(_OWORD *)&a3);
  }

}

void sub_1DCAD12C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAD142C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1DCAD1448(uint64_t *a1)
{
  unsigned __int8 v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  id v20;
  const char *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v33;
  unint64_t v34;
  id *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __CFString *v71;
  uint64_t v72;
  __CFString *v73;
  _QWORD v74[4];

  v74[1] = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1F03B50F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1F03B50F8))
  {
    v33 = operator new();
    MEMORY[0x1DF0D1254](&v63, "points");
    v34 = v63;
    v63 = 0;
    *(_QWORD *)&v64 = v34;
    *((_QWORD *)&v64 + 1) = CFSTR("position");
    MEMORY[0x1DF0D1254](&v62, "normals");
    *(_QWORD *)&v65 = v62;
    v62 = 0;
    *((_QWORD *)&v65 + 1) = CFSTR("normal");
    MEMORY[0x1DF0D1254](&v61, "textureCoordinates");
    *(_QWORD *)&v66 = v61;
    v61 = 0;
    *((_QWORD *)&v66 + 1) = CFSTR("textureCoordinate");
    MEMORY[0x1DF0D1254](&v60, "tangents");
    *(_QWORD *)&v67 = v60;
    v60 = 0;
    *((_QWORD *)&v67 + 1) = CFSTR("tangent");
    MEMORY[0x1DF0D1254](&v59, "bitangents");
    *(_QWORD *)&v68 = v59;
    v59 = 0;
    *((_QWORD *)&v68 + 1) = CFSTR("bitangent");
    MEMORY[0x1DF0D1254](&v58, "color");
    *(_QWORD *)&v69 = v58;
    v58 = 0;
    *((_QWORD *)&v69 + 1) = CFSTR("color");
    MEMORY[0x1DF0D1254](&v57, "jointIndices");
    v70 = v57;
    v57 = 0;
    v71 = CFSTR("jointIndices");
    MEMORY[0x1DF0D1254](&v56, "jointWeights");
    v72 = v56;
    v56 = 0;
    v73 = CFSTR("jointWeights");
    sub_1DCB449C4(v33, (uint64_t *)&v64, 8);
    v35 = (id *)v74;
    do
    {

      v37 = (uint64_t)*(v35 - 2);
      v35 -= 2;
      v36 = v37;
      if ((v37 & 7) != 0)
      {
        v38 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
    }
    while (v35 != (id *)&v64);
    if ((v56 & 7) != 0)
    {
      v40 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
      do
        v41 = __ldxr(v40);
      while (__stlxr(v41 - 2, v40));
    }
    if ((v57 & 7) != 0)
    {
      v42 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
      do
        v43 = __ldxr(v42);
      while (__stlxr(v43 - 2, v42));
    }
    if ((v58 & 7) != 0)
    {
      v44 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stlxr(v45 - 2, v44));
    }
    if ((v59 & 7) != 0)
    {
      v46 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
      do
        v47 = __ldxr(v46);
      while (__stlxr(v47 - 2, v46));
    }
    if ((v60 & 7) != 0)
    {
      v48 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
      do
        v49 = __ldxr(v48);
      while (__stlxr(v49 - 2, v48));
    }
    if ((v61 & 7) != 0)
    {
      v50 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
    if ((v62 & 7) != 0)
    {
      v52 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
      do
        v53 = __ldxr(v52);
      while (__stlxr(v53 - 2, v52));
    }
    if ((v63 & 7) != 0)
    {
      v54 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
      do
        v55 = __ldxr(v54);
      while (__stlxr(v55 - 2, v54));
    }
    qword_1F03B50F0 = v33;
    __cxa_guard_release(&qword_1F03B50F8);
  }
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    v6 = 0;
    do
    {
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      sub_1DCB25EEC(&v64, (_QWORD *)v4);
      v7 = *(_OWORD *)(v4 + 32);
      v65 = *(_OWORD *)(v4 + 16);
      v66 = v7;
      v8 = *(_QWORD *)(v4 + 48);
      *(_QWORD *)&v67 = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 - 16);
        if (*((_QWORD *)&v66 + 1))
          v9 = (unint64_t *)*((_QWORD *)&v66 + 1);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = *(_QWORD *)(v4 + 56);
      *((_QWORD *)&v67 + 1) = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          *((_QWORD *)&v67 + 1) &= 0xFFFFFFFFFFFFFFF8;
      }
      v14 = *(_QWORD *)(v4 + 64);
      *(_QWORD *)&v68 = v14;
      if ((v14 & 7) != 0)
      {
        v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 2, v15));
        if ((v16 & 1) == 0)
          *(_QWORD *)&v68 = v68 & 0xFFFFFFFFFFFFFFF8;
      }
      v17 = *(_QWORD *)(v4 + 80);
      *((_QWORD *)&v68 + 1) = *(_QWORD *)(v4 + 72);
      *(_QWORD *)&v69 = v17;
      if ((v17 & 7) != 0)
      {
        v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 2, v18));
        if ((v19 & 1) == 0)
          *(_QWORD *)&v69 = v69 & 0xFFFFFFFFFFFFFFF8;
      }
      DWORD2(v69) = *(_DWORD *)(v4 + 88);
      if ((_QWORD *)(qword_1F03B50F0 + 8) != sub_1DCB44B94(qword_1F03B50F0, (uint64_t *)&v68))
      {
        v63 = (unint64_t)&v68;
        v20 = (id)sub_1DCB44514((uint64_t **)qword_1F03B50F0, (uint64_t *)&v68, (uint64_t)&unk_1DCC58300, (uint64_t **)&v63)[5];
        MEMORY[0x1DF0D1254](&v63, "textureCoordinates");
        v22 = v68;
        v23 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
        if ((v63 & 7) != 0)
        {
          do
            v24 = __ldxr(v23);
          while (__stlxr(v24 - 2, v23));
        }
        if ((unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8) == v23)
        {
          if ((int)v6 >= 1)
          {
            objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v21, (uint64_t)CFSTR("%@%d"), v20, v6);
            v25 = objc_claimAutoreleasedReturnValue();

            v20 = (id)v25;
          }
          v6 = (v6 + 1);
        }
        objc_msgSend_addObject_(v3, v21, (uint64_t)v20);

      }
      if ((v69 & 7) != 0)
      {
        v26 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if ((v68 & 7) != 0)
      {
        v28 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if ((BYTE8(v67) & 7) != 0)
      {
        v30 = (unsigned int *)(*((_QWORD *)&v67 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      sub_1DCAEEE78((uint64_t)&v65);
      sub_1DCAEEE2C((uint64_t)&v64);
      v4 += 96;
    }
    while (v4 != v5);
  }
  return v3;
}

void sub_1DCAD1A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;

  v23 = v21 + 128;
  while (1)
  {

    v25 = *(_QWORD *)(v23 - 16);
    v23 -= 16;
    v24 = v25;
    if ((v25 & 7) != 0)
    {
      v26 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    if (v23 == v21)
    {
      if ((a13 & 7) != 0)
      {
        v28 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if ((a14 & 7) != 0)
      {
        v30 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((a15 & 7) != 0)
      {
        v32 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      if ((a16 & 7) != 0)
      {
        v34 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      if ((a17 & 7) != 0)
      {
        v36 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      if ((a18 & 7) != 0)
      {
        v38 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      if ((a19 & 7) != 0)
      {
        v40 = (unsigned int *)(a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      if ((a20 & 7) != 0)
      {
        v42 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v43 = __ldxr(v42);
        while (__stlxr(v43 - 2, v42));
      }
      MEMORY[0x1DF0D228C](v20, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_1F03B50F8);
      _Unwind_Resume(a1);
    }
  }
}

void sub_1DCAD2068(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0D228C](v2, 0x10A1C40A30AD078);

  _Unwind_Resume(a1);
}

void sub_1DCAD20EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MDLMaterialProperty;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1DCAD2198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAD22C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_1DCAD2364(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)sub_1DCAD2384(a1);
  *result = &off_1EA5745A8;
  return result;
}

uint64_t sub_1DCAD2384(uint64_t a1)
{
  CGColorSpace *DeviceRGB;
  CGColor *v8;
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1EA5745F8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_1DCC5ABF0;
  *(_OWORD *)(a1 + 104) = xmmword_1DCC5AC00;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 144) = _Q0;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v10[0] = xmmword_1DCC5AC30;
  v10[1] = unk_1DCC5AC40;
  v8 = CGColorCreate(DeviceRGB, (const CGFloat *)v10);
  sub_1DCAD2468(a1, v8);
  CGColorRelease(v8);
  CGColorSpaceRelease(DeviceRGB);
  return a1;
}

void sub_1DCAD2468(uint64_t a1, CGColor *a2)
{
  CGColor *v3;
  float64x2_t *Components;
  float v11;
  int32x2_t v12;
  float32x4_t v13;
  float32x4_t v15;

  v3 = *(CGColor **)(a1 + 16);
  if (v3 != a2)
  {
    CGColorRelease(v3);
    *(_QWORD *)(a1 + 16) = CGColorRetain(a2);
    __asm { FMOV            V0.4S, #1.0 }
    v15 = (float32x4_t)_Q0;
    if (a2)
    {
      Components = (float64x2_t *)CGColorGetComponents(a2);
      _Q0 = *Components;
      *(float32x2_t *)&_Q0.f64[0] = vcvt_f32_f64(*Components);
      v11 = Components[1].f64[0];
      *(float *)&_Q0.f64[1] = v11;
    }
    *(float64x2_t *)(a1 + 64) = _Q0;
    *(float *)v12.i32 = sub_1DCAD2508(a2);
    *(_DWORD *)(a1 + 48) = v12.i32[0];
    v13 = v15;
    if (*(float *)v12.i32 > 0.0)
    {
      __asm { FMOV            V2.4S, #1.0 }
      v13 = vmulq_f32(*(float32x4_t *)(a1 + 64), vdivq_f32(_Q2, (float32x4_t)vdupq_lane_s32(v12, 0)));
    }
    *(float32x4_t *)(a1 + 32) = v13;
  }
}

float sub_1DCAD2508(CGColor *a1)
{
  const CGFloat *Components;
  CGColorSpace *ColorSpace;
  CGColorSpaceModel Model;
  float result;

  if (!a1)
    return 0.0;
  Components = CGColorGetComponents(a1);
  ColorSpace = CGColorGetColorSpace(a1);
  Model = CGColorSpaceGetModel(ColorSpace);
  if (Model == kCGColorSpaceModelRGB)
  {
    return *Components * 0.212655 + Components[1] * 0.715158 + Components[2] * 0.072187;
  }
  else
  {
    result = 1.0;
    if (Model)
      return result;
    return *Components;
  }
}

void sub_1DCAD258C(uint64_t a1)
{
  sub_1DCAD25B0(a1);
  JUMPOUT(0x1DF0D228CLL);
}

uint64_t sub_1DCAD25B0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA5745F8;
  CGColorRelease(*(CGColorRef *)(a1 + 16));
  CGColorRelease(*(CGColorRef *)(a1 + 80));
  return a1;
}

void sub_1DCAD283C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAD28F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CGColor *sub_1DCAD290C(uint64_t a1, CGColor *a2)
{
  CGColor *result;

  result = *(CGColor **)(a1 + 80);
  if (result != a2)
  {
    CGColorRelease(result);
    result = CGColorRetain(a2);
    *(_QWORD *)(a1 + 80) = result;
  }
  return result;
}

_QWORD *sub_1DCAD2948(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)sub_1DCAD2384(a1);
  *result = &off_1EA574510;
  return result;
}

void sub_1DCAD2D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1DCAD3218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DCAD3348(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *sub_1DCAD33AC(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_1DCAD344C((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1DCAD3EC8((uint64_t)a1, a4, v8);
    sub_1DCACAE54(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

_QWORD *sub_1DCAD344C(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!sub_1DCB00BBC(v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_1DCB00BBC(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t sub_1DCAD34E8(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = sub_1DCB00BBC(v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || sub_1DCB00BBC(v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

void sub_1DCAD3574(void *a1)
{
  const char *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  const char *v5;
  id v6;

  v6 = a1;
  objc_msgSend_textureSamplerValue(v6, v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    v4 = (void *)objc_opt_new();
    objc_msgSend_setTextureSamplerValue_(v6, v5, (uint64_t)v4);

  }
}

void sub_1DCAD35D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DCAD3660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAD367C(void *a1)
{
  const char *v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  id v12;

  v12 = a1;
  sub_1DCAD3574(v12);
  objc_msgSend_textureSamplerValue(v12, v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_hardwareFilter(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    v7 = (void *)objc_opt_new();
    objc_msgSend_textureSamplerValue(v12, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setHardwareFilter_(v10, v11, (uint64_t)v7);

  }
}

void sub_1DCAD3704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1DCAD3738(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v6 = (_QWORD *)(a1 + 24);
  v7 = sub_1DCB9BA90(a1 + 24, (uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v8)
        {
          if ((sub_1DCB9BACC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9)
              v15 %= v9;
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  memset(v25, 0, sizeof(v25));
  sub_1DCAD4510(a1, v8, a3, v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_1DCAD4EF4(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9)
          v23 %= v9;
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v6;
  return i;
}

void sub_1DCAD399C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_1DCB9BFDC((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void sub_1DCAD3A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAD3ACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAD3ADC(char **a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  char *v48;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v62;
  char *v63;
  __int128 v64;

  *((int64x2_t *)a1 + 6) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  a1[15] = (char *)0x7FEFFFFFFFFFFFFFLL;
  *((_BYTE *)a1 + 112) = 1;
  v2 = *MEMORY[0x1E0C83FF0];
  v3 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
  v4 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 32);
  v5 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
  *((_OWORD *)a1 + 8) = *MEMORY[0x1E0C83FF0];
  *((_OWORD *)a1 + 9) = v3;
  *((_OWORD *)a1 + 10) = v4;
  *((_OWORD *)a1 + 11) = v5;
  *((_OWORD *)a1 + 12) = v2;
  *((_OWORD *)a1 + 13) = v3;
  *((_OWORD *)a1 + 14) = v4;
  *((_OWORD *)a1 + 15) = v5;
  *((_OWORD *)a1 + 16) = v2;
  *((_OWORD *)a1 + 17) = v3;
  *((_OWORD *)a1 + 18) = v4;
  *((_OWORD *)a1 + 19) = v5;
  *((_OWORD *)a1 + 20) = v2;
  *((_OWORD *)a1 + 21) = v3;
  *((_OWORD *)a1 + 22) = v4;
  *((_OWORD *)a1 + 23) = v5;
  v6 = *a1;
  a1[1] = *a1;
  v9 = (unint64_t)a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v11 = v8 - (_QWORD)v6;
    v12 = v11 >> 4;
    if ((unint64_t)(v11 >> 4) <= 1)
      v12 = 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v14 = (char *)sub_1DCAF116C(v7, v13);
    v16 = &v14[32 * v15];
    *(_QWORD *)v14 = 0x7FEFFFFFFFFFFFFFLL;
    *((_OWORD *)v14 + 1) = 0u;
    v10 = v14 + 32;
    v18 = *a1;
    v17 = a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      v17 = *a1;
    }
    *a1 = v14;
    a1[1] = v10;
    a1[2] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *(_QWORD *)v6 = 0x7FEFFFFFFFFFFFFFLL;
    *((_OWORD *)v6 + 1) = 0u;
    v10 = v6 + 32;
  }
  v20 = a1[5];
  a1[1] = v10;
  v21 = a1[3];
  a1[4] = v21;
  v22 = a1[12];
  if (v21 >= v20)
  {
    v24 = v20 - v21;
    v25 = v24 >> 4;
    if ((unint64_t)(v24 >> 4) <= 1)
      v25 = 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0)
      v26 = 0x7FFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    v27 = (char *)sub_1DCAF116C((uint64_t)(a1 + 5), v26);
    v29 = &v27[32 * v28];
    *(_QWORD *)v27 = v22;
    *((_OWORD *)v27 + 1) = 0u;
    v23 = v27 + 32;
    v31 = a1[3];
    v30 = a1[4];
    if (v30 != v31)
    {
      do
      {
        v32 = *((_OWORD *)v30 - 1);
        *((_OWORD *)v27 - 2) = *((_OWORD *)v30 - 2);
        *((_OWORD *)v27 - 1) = v32;
        v27 -= 32;
        v30 -= 32;
      }
      while (v30 != v31);
      v30 = a1[3];
    }
    a1[3] = v27;
    a1[4] = v23;
    a1[5] = v29;
    if (v30)
      operator delete(v30);
  }
  else
  {
    *(_QWORD *)v21 = v22;
    *((_OWORD *)v21 + 1) = 0u;
    v23 = v21 + 32;
  }
  v33 = a1[8];
  a1[4] = v23;
  v34 = a1[6];
  a1[7] = v34;
  v35 = a1[12];
  if (v34 >= v33)
  {
    v37 = v33 - v34;
    v38 = v37 >> 4;
    if ((unint64_t)(v37 >> 4) <= 1)
      v38 = 1;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFE0)
      v39 = 0x7FFFFFFFFFFFFFFLL;
    else
      v39 = v38;
    v40 = (char *)sub_1DCAF116C((uint64_t)(a1 + 8), v39);
    v42 = &v40[32 * v41];
    *(_QWORD *)v40 = v35;
    *((_OWORD *)v40 + 1) = 0u;
    v36 = v40 + 32;
    v44 = a1[6];
    v43 = a1[7];
    if (v43 != v44)
    {
      do
      {
        v45 = *((_OWORD *)v43 - 1);
        *((_OWORD *)v40 - 2) = *((_OWORD *)v43 - 2);
        *((_OWORD *)v40 - 1) = v45;
        v40 -= 32;
        v43 -= 32;
      }
      while (v43 != v44);
      v43 = a1[6];
    }
    a1[6] = v40;
    a1[7] = v36;
    a1[8] = v42;
    if (v43)
      operator delete(v43);
  }
  else
  {
    *(_QWORD *)v34 = v35;
    *((_OWORD *)v34 + 1) = 0u;
    v36 = v34 + 32;
  }
  v46 = a1[11];
  a1[7] = v36;
  v47 = a1[9];
  a1[10] = v47;
  v48 = a1[12];
  if (v47 >= v46)
  {
    v55 = v46 - v47;
    v56 = v55 >> 4;
    if ((unint64_t)(v55 >> 4) <= 1)
      v56 = 1;
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFE0)
      v57 = 0x7FFFFFFFFFFFFFFLL;
    else
      v57 = v56;
    v58 = (char *)sub_1DCAF116C((uint64_t)(a1 + 11), v57);
    v60 = &v58[32 * v59];
    *(_QWORD *)v58 = v48;
    __asm { FMOV            V0.4S, #1.0 }
    *((_OWORD *)v58 + 1) = _Q0;
    v54 = v58 + 32;
    v63 = a1[9];
    v62 = a1[10];
    if (v62 != v63)
    {
      do
      {
        v64 = *((_OWORD *)v62 - 1);
        *((_OWORD *)v58 - 2) = *((_OWORD *)v62 - 2);
        *((_OWORD *)v58 - 1) = v64;
        v58 -= 32;
        v62 -= 32;
      }
      while (v62 != v63);
      v62 = a1[9];
    }
    a1[9] = v58;
    a1[10] = v54;
    a1[11] = v60;
    if (v62)
      operator delete(v62);
  }
  else
  {
    *(_QWORD *)v47 = v48;
    __asm { FMOV            V0.4S, #1.0 }
    *((_OWORD *)v47 + 1) = _Q0;
    v54 = v47 + 32;
  }
  a1[10] = v54;
}

void sub_1DCAD3E6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_BYTE *sub_1DCAD3EC8@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  _BYTE *result;
  __int128 *v9;
  __int128 v10;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = v7 + 32;
  v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_1DCACA658(result, *(void **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    *((_QWORD *)v7 + 6) = *((_QWORD *)v9 + 2);
    *(_OWORD *)result = v10;
  }
  *((_DWORD *)v7 + 14) = 0;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1DCAD3F5C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1DCB00C24(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1DCAD4050(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCAD4070(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v3;
  uint64_t *v4;
  int *v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  double v22;
  double v23;
  double v24;
  float32x4_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  _QWORD *v37;
  _QWORD *i;
  __int128 *v39;
  int *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  int v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD v56[3];
  _OWORD v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD v61[3];
  unint64_t v62[4];
  uint64_t v63;

  v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_1DCBDA06C(*(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 8));
  v3 = sub_1DCB23B80(v2);
  v4 = (uint64_t *)(a1 + 112);
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112));
  v5 = *(int **)(a1 + 144);
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112));
  while (v5 != (int *)(*(_QWORD *)(a1 + 144) + 4 * *(_QWORD *)(a1 + 112)))
  {
    if (*v5 <= 2)
    {
      v11 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
      if (v11)
      {
        v12 = (const char *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0)
          v12 = *(const char **)v12;
      }
      else
      {
        v12 = "";
      }
      NSLog(CFSTR("Warning: mesh has a faceVertexCount less than 3, ignoring mesh: %s."), v12);
      return 0;
    }
    ++v5;
  }
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112));
  v6 = *(int **)(a1 + 144);
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112));
  v7 = *(_QWORD *)(a1 + 144) + 4 * *(_QWORD *)(a1 + 112);
  if (v6 == (int *)v7)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *v6++;
      v9 += 3 * (v10 - 2);
      v8 += (int)v10 - 2;
    }
    while (v6 != (int *)v7);
  }
  v63 = 0;
  memset(v62, 0, sizeof(v62));
  LODWORD(v57[0]) = 0;
  *(_QWORD *)&v61[0] = v57;
  sub_1DCB267B0(v62, v9, (_DWORD **)v61);
  memset(v61, 0, 40);
  LODWORD(v56[0]) = 0;
  *(_QWORD *)&v57[0] = v56;
  sub_1DCB267B0((unint64_t *)v61, v8, (_DWORD **)v57);
  v59 = 0;
  v60 = 0;
  v13 = *v4;
  v58 = 0;
  memset(v57, 0, sizeof(v57));
  sub_1DCB23B10((uint64_t)v57, v13 + 1);
  v14 = (__int128 *)(a1 + 152);
  if (v13)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112));
      v17 = *(int *)(*(_QWORD *)(a1 + 144) + 4 * v15);
      v18 = v59;
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v57);
      *(_DWORD *)(v58 + 4 * v15) = v18;
      sub_1DCC0C1A0(v3, v17, a1 + 152, v16, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v62, &v60, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v61, &v59, v19, v20, v21, v22, v23, v24, v25);
      v16 += v17;
      ++v15;
    }
    while (v13 != v15);
  }
  v26 = v59;
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v57);
  *(_DWORD *)(v58 + 4 * v13) = v26;
  sub_1DCC0BCFC((_QWORD *)a1, v62);
  v27 = *(_QWORD *)(a1 + 128);
  v28 = *(_OWORD *)v4;
  *(_OWORD *)v4 = v61[0];
  *(_QWORD *)(a1 + 128) = *(_QWORD *)&v61[1];
  v61[0] = v28;
  *(_QWORD *)&v61[1] = v27;
  v29 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)((char *)&v61[1] + 8);
  *(_OWORD *)((char *)&v61[1] + 8) = v29;
  memset(v56, 0, 40);
  sub_1DCB23B10((uint64_t)v56, v62[0]);
  if (v62[0])
  {
    v30 = 0;
    do
    {
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v62);
      v31 = *(int *)(v63 + 4 * v30);
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 152));
      LODWORD(v31) = *(_DWORD *)(*(_QWORD *)(a1 + 184) + 4 * v31);
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v56);
      v32 = *(_QWORD *)&v56[2];
      *(_DWORD *)(*(_QWORD *)&v56[2] + 4 * v30++) = v31;
    }
    while (v62[0] > v30);
  }
  else
  {
    v32 = *(_QWORD *)&v56[2];
  }
  v33 = *(_QWORD *)(a1 + 168);
  v34 = *((_QWORD *)&v56[1] + 1);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)&v56[1];
  v35 = *v14;
  *v14 = v56[0];
  v56[0] = v35;
  *(_QWORD *)&v56[1] = v33;
  v36 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v34;
  *(_QWORD *)(a1 + 184) = v32;
  *(_OWORD *)((char *)&v56[1] + 8) = v36;
  v37 = *(_QWORD **)(a1 + 440);
  for (i = *(_QWORD **)(a1 + 448); v37 != i; v37 += 7)
  {
    *v37 = 2;
    v55 = 0;
    v53 = 0u;
    v54 = 0u;
    v39 = (__int128 *)(v37 + 1);
    if (v37[1])
    {
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v37 + 1));
      v40 = (int *)v37[5];
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v37 + 1));
      v41 = v37[5];
      v42 = (int *)(v41 + 4 * v37[1]);
      if (v40 != v42)
      {
        do
        {
          v43 = *v40;
          v52 = 0;
          sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v57);
          v44 = *(_DWORD *)(v58 + 4 * v43);
          v45 = (int)v43 + 1;
          while (1)
          {
            v52 = v44;
            sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v57);
            if (v44 >= *(_DWORD *)(v58 + 4 * v45))
              break;
            sub_1DCB45970((uint64_t)&v53, &v52);
            v44 = v52 + 1;
          }
          ++v40;
        }
        while (v40 != v42);
        v41 = v37[5];
      }
      v46 = v55;
      v55 = v41;
      v47 = v37[3];
      v48 = *v39;
      v49 = v53;
      v37[3] = v54;
      *v39 = v49;
      v53 = v48;
      v50 = v37[4];
      v37[4] = *((_QWORD *)&v54 + 1);
      v37[5] = v46;
      *(_QWORD *)&v54 = v47;
      *((_QWORD *)&v54 + 1) = v50;
    }
    sub_1DCAEEE78((uint64_t)&v53);
  }
  sub_1DCAEEE78((uint64_t)v56);
  sub_1DCAEEE78((uint64_t)v57);
  sub_1DCAEEE78((uint64_t)v61);
  sub_1DCAEEE78((uint64_t)v62);
  return 1;
}

void sub_1DCAD448C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_1DCAEEE78((uint64_t)&a23);
  sub_1DCAEEE78((uint64_t)&a31);
  sub_1DCAEEE78((uint64_t)&a37);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCAD4510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *result;

  v7 = a1 + 16;
  *a4 = 0;
  a4[2] = 0;
  a4[1] = 0;
  v8 = a4 + 1;
  v9 = operator new(0x28uLL);
  *a4 = v9;
  *v8 = v7;
  *((_BYTE *)a4 + 16) = 0;
  *v9 = 0;
  v9[1] = a2;
  result = v9 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    result = sub_1DCACA658(result, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a3;
    result[2] = *(_QWORD *)(a3 + 16);
  }
  *((_BYTE *)a4 + 16) = 1;
  return result;
}

void sub_1DCAD45A0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;

  *v1 = 0;
  sub_1DCB9BFDC(v2, v3);
  _Unwind_Resume(a1);
}

void sub_1DCAD4858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  if (a27 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1DCAD4AE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCAD4C88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCAD4DF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAD4E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, objc_super a11)
{
  a11.super_class = (Class)MDLMemoryMappedData;
  -[_Unwind_Exception dealloc](&a11, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1DCAD4EF4(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_1DCAD4FD0(a1, prime);
  }
}

void sub_1DCAD4FD0(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_1DCAE4CDC();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1DCAD5128(void *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, _QWORD *a4@<X8>)
{
  id v7;
  const char *v8;
  uint64_t v9;
  id v10;
  void **v11;
  FILE *v12;
  FILE *v13;
  MDLArchiveAssetResolver *v14;
  const char *v15;
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t IsSupportedFile;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  const char *v26;
  double v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  const char *v39;
  pxrInternal__aapl__pxrReserved__::UsdStage *v40;
  double v41;
  double v42;
  const char *v43;
  uint64_t v44;
  double v45;
  const char *v46;
  uint64_t v47;
  pxrInternal__aapl__pxrReserved__::UsdStage *v48;
  double v49;
  const char *v50;
  uint64_t v51;
  pxrInternal__aapl__pxrReserved__::UsdStage *v52;
  double v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  unsigned int **v63;
  uint64_t *i;
  _OWORD *v65;
  uint64_t v66;
  const char *v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  void *v71;
  void *v72;
  const char *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  void *v79;
  void *v80[2];
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  void *__dst[2];
  uint64_t v85;
  unsigned int *v86;
  void *__p[2];
  __int128 v88;
  uint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  unsigned int *v92;
  _QWORD v93[3];
  void *v94[2];
  uint64_t v95;
  _DWORD __ptr[3];

  v7 = a1;
  v10 = a3;
  if (!v10)
  {
    sub_1DCB0345C(a4, "Cannot import into nil asset");
    goto LABEL_65;
  }
  __ptr[0] = 0;
  sub_1DCAD5A0C(v7, v8, v9, __p);
  if ((SBYTE7(v88) & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  v12 = fopen((const char *)v11, "r");
  v13 = v12;
  if (SBYTE7(v88) < 0)
  {
    operator delete(__p[0]);
    if (v13)
      goto LABEL_7;
LABEL_26:
    sub_1DCB0345C(a4, "Could not open file");
    goto LABEL_65;
  }
  if (!v12)
    goto LABEL_26;
LABEL_7:
  fread(__ptr, 4uLL, 1uLL, v13);
  fclose(v13);
  v14 = [MDLArchiveAssetResolver alloc];
  v16 = (void *)objc_msgSend_initWithURL_(v14, v15, (uint64_t)v7);
  objc_msgSend_setResolver_(v10, v17, (uint64_t)v16);
  sub_1DCAD5E24();
  v94[0] = 0;
  v94[1] = 0;
  v95 = 0;
  sub_1DCAD5A0C(v7, v18, v19, v94);
  IsSupportedFile = pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile();
  if ((IsSupportedFile & 1) != 0)
  {
    memset(v93, 0, sizeof(v93));
    pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)IsSupportedFile);
    pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset();
    v92 = 0;
    pxrInternal__aapl__pxrReserved__::UsdStage::Open();
    v91 = 0;
    sub_1DCBC6D7C((uint64_t *)__p, (uint64_t *)&v92);
    pxrInternal__aapl__pxrReserved__::UsdGeomGetStageUpAxis();
    v21 = __p[1];
    if (__p[1])
    {
      v22 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v23 = __ldxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
        (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
    }
    if (*(_BYTE *)(a2 + 24))
    {
      v90 = v92;
      sub_1DCBC6EF0((uint64_t *)&v90);
      sub_1DCBC3A9C((uint64_t *)&v90, v10);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setExtents_(v10, v26, (uint64_t)v25);

      sub_1DCBC6CA4(&v90);
    }
    sub_1DCBC6D7C((uint64_t *)__p, (uint64_t *)&v92);
    pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
    *(float *)&v27 = v27;
    objc_msgSend_setMetersPerUnit_(v10, v28, v29, v27);
    v34 = __p[1];
    if (__p[1])
    {
      v35 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v36 = __ldxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
        (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
    }
    if (v91)
    {
      v38 = v91 & 0xFFFFFFFFFFFFFFF8;
      if ((v91 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v39 = (const char *)(v38 + 16);
        if (*(char *)(v38 + 39) < 0)
          v39 = *(const char **)v39;
      }
      else
      {
        v39 = "";
      }
      v32.i8[0] = *v39;
      v33.i32[0] = 90;
      objc_msgSend_setUpAxis_(v10, v30, v31, *(double *)vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v32, v33), 0), (int8x16_t)xmmword_1DCC58380, (int8x16_t)xmmword_1DCC583A0).i64);
    }
    else
    {
      objc_msgSend_setUpAxis_(v10, v30, v31, 0.0078125);
    }
    if (v92)
    {
      v40 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428((uint64_t *)&v92);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v40);
      v42 = v41;
      objc_msgSend_set_timeCodesPerSecond_(v10, v43, v44);
      v45 = 1.0 / v42;
      objc_msgSend_setFrameInterval_(v10, v46, v47, v45);
      v48 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428((uint64_t *)&v92);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v48);
      objc_msgSend_setStartTime_(v10, v50, v51, v49 * v45);
      v52 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_1DCBC3428((uint64_t *)&v92);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(v52);
      objc_msgSend_setEndTime_(v10, v54, v55, v53 * v45);
      objc_msgSend_bufferAllocator(v10, v56, v57);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      if (v60)
      {
        objc_msgSend_bufferAllocator(v10, v58, v59);
        v61 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v61 = objc_opt_new();
      }
      v62 = (void *)v61;

      *(_OWORD *)__p = 0u;
      v88 = 0u;
      v89 = 1065353216;
      v86 = v92;
      v79 = v62;
      sub_1DCBC6EF0((uint64_t *)&v86);
      sub_1DCBC34A8(v10, (uint64_t *)&v86, a2, (uint64_t)__p);
      v63 = sub_1DCBC6CA4(&v86);
      pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v63);
      for (i = (uint64_t *)v88; i; i = (uint64_t *)*i)
      {
        __dst[0] = 0;
        __dst[1] = 0;
        v85 = 0;
        v65 = i + 2;
        if (*((char *)i + 39) < 0)
        {
          sub_1DCACA658(__dst, (void *)i[2], i[3]);
        }
        else
        {
          *(_OWORD *)__dst = *v65;
          v85 = i[4];
        }
        v82 = 0;
        v83 = 0;
        if (SHIBYTE(v85) < 0)
        {
          sub_1DCACA658(v80, __dst[0], (unint64_t)__dst[1]);
        }
        else
        {
          *(_OWORD *)v80 = *(_OWORD *)__dst;
          v81 = v85;
        }
        pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
        if (SHIBYTE(v81) < 0)
          operator delete(v80[0]);
        if (v82)
        {
          v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 16))(v82);
          (*(void (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
          v68 = v67;
          objc_msgSend_resolver(v10, v67, v69, v79);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          if (*((char *)i + 39) < 0)
            v65 = *(_OWORD **)v65;
          objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v70, (uint64_t)v65);
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addResolvedAssetNamed_offset_fileSize_(v71, v73, (uint64_t)v72, v68, v66);

        }
        v74 = v83;
        if (v83)
        {
          p_shared_owners = (unint64_t *)&v83->__shared_owners_;
          do
            v76 = __ldaxr(p_shared_owners);
          while (__stlxr(v76 - 1, p_shared_owners));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        if (SHIBYTE(v85) < 0)
          operator delete(__dst[0]);
      }
      sub_1DCB0345C(a4, "");
      sub_1DCAD5D10((uint64_t)__p);

    }
    else
    {
      sub_1DCB0345C(a4, "Could not import USD file");
    }
    if ((v91 & 7) != 0)
    {
      v77 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFFFF8);
      do
        v78 = __ldxr(v77);
      while (__stlxr(v78 - 2, v77));
    }
    sub_1DCBC6CA4(&v92);
    __p[0] = v93;
    sub_1DCBA630C((void ***)__p);
  }
  else
  {
    sub_1DCB0345C(a4, "Unsupported USD file type");
  }
  if (SHIBYTE(v95) < 0)
    operator delete(v94[0]);

LABEL_65:
}

void sub_1DCAD56BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,__int16 *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,unsigned int *a34,__int16 a35,char a36,char a37)
{
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  unsigned int *v42;
  unsigned int v43;

  if ((a33 & 7) != 0)
  {
    v42 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  sub_1DCBC6CA4(&a34);
  __p = &a35;
  sub_1DCBA630C((void ***)&__p);
  if (*(char *)(v40 - 113) < 0)
    operator delete(*(void **)(v40 - 136));

  _Unwind_Resume(a1);
}

void sub_1DCAD58B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x1DCAD5838);
}

void sub_1DCAD59D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCAD5A0C(void *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v5;
  const char *v6;
  char *v7;
  id v8;

  objc_msgSend_path(a1, a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v8 = objc_retainAutorelease(v5);
  v7 = (char *)objc_msgSend_cStringUsingEncoding_(v8, v6, 4);
  sub_1DCB0345C(a4, v7);

}

void sub_1DCAD5A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCAD5C78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAD5CA8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1DCAD5CA8(a1, *a2);
    sub_1DCAD5CA8(a1, a2[1]);
    sub_1DCAFBF08((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1DCAD5CF4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1DF0D228CLL);
  return result;
}

uint64_t sub_1DCAD5D10(uint64_t a1)
{
  void *v2;

  sub_1DCAC7A98(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t sub_1DCAD5D48(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1EA574168;
  sub_1DCB0546C(a1 + 40);
  *(_QWORD *)a1 = &off_1EA574198;
  sub_1DCAD5CA8(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_1DCAD5D90(uint64_t a1, char a2)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = a2;
  *(_QWORD *)a1 = &off_1EA574168;
  v3 = operator new();
  sub_1DCBC6A30((_QWORD *)(a1 + 40), v3);
  return a1;
}

void sub_1DCAD5DFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)v1 = &off_1EA574198;
  sub_1DCAD5CA8(v2, *(_QWORD **)(v1 + 16));
  _Unwind_Resume(a1);
}

void sub_1DCAD5E24()
{
  char **v0;
  char *v1[2];

  v1[0] = 0;
  v1[1] = 0;
  v0 = v1;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  sub_1DCACB5E8((uint64_t)&v0, v1[0]);
}

void sub_1DCAD5E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_1DCACB5E8((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1DCAD6090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCAD61B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

float32x2_t sub_1DCAD6298(uint64_t a1, uint64_t a2, int a3, int a4, float32x2_t result)
{
  float *v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  unsigned int v14;
  float32x2_t v15;
  float32x2_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;

  v5 = (float *)(a1 + 12 * a3 + 4 * a4);
  v6 = *v5;
  if (*v5 != 0.0)
  {
    v7 = a1 + 12 * a3;
    v8 = *(float *)(v7 + 4 * a3);
    v9 = a1 + 12 * a4;
    v10 = *(float *)(v9 + 4 * a4);
    v11 = (float)(v10 - v8) / (float)(v6 + v6);
    v12 = sqrtf((float)(v11 * v11) + 1.0);
    if (v11 < 0.0)
      v12 = -v12;
    v13 = 1.0 / (float)(v12 + v11);
    *(float *)&v14 = (float)(v13 * v13) + 1.0;
    v15 = vrsqrte_f32((float32x2_t)v14);
    v16 = vmul_f32(vrsqrts_f32((float32x2_t)v14, vmul_f32(v15, v15)), v15);
    result = vmul_f32(v16, vrsqrts_f32((float32x2_t)v14, vmul_f32(v16, v16)));
    v17 = v13 * result.f32[0];
    v18 = vmul_f32(result, result).f32[0];
    v19 = v6 * v17 * (result.f32[0] + result.f32[0]);
    *(float *)(v7 + 4 * a3) = (float)((float)(v8 * v18) + (float)((float)(v17 * v17) * v10)) - v19;
    *(float *)(v9 + 4 * a4) = vmlas_n_f32(v19, v10, v18) + (float)((float)(v17 * v17) * v8);
    *v5 = v6;
    v20 = *(float *)(a1 + 4 * (3 - a4));
    v21 = a1 - 12 * a3;
    v22 = *(float *)(v21 + 20);
    *(float *)(a1 + 4 * (3 - a4)) = vmlas_n_f32(-(float)(v17 * v22), v20, result.f32[0]);
    *(float *)(v21 + 20) = (float)(v22 * result.f32[0]) + (float)(v17 * v20);
    *v5 = 0.0;
    v23 = *(float *)(a2 + 4 * a3);
    v24 = *(float *)(a2 + 4 * a4);
    *(float *)(a2 + 4 * a3) = vmlas_n_f32(-(float)(v24 * v17), v23, result.f32[0]);
    *(float *)(a2 + 4 * a4) = vmlas_n_f32(v23 * v17, v24, result.f32[0]);
    v25 = *(float *)(a2 + 12 + 4 * a3);
    v26 = *(float *)(a2 + 12 + 4 * a4);
    *(float *)(a2 + 12 + 4 * a3) = vmlas_n_f32(-(float)(v26 * v17), v25, result.f32[0]);
    *(float *)(a2 + 12 + 4 * a4) = vmlas_n_f32(v25 * v17, v26, result.f32[0]);
    v27 = *(float *)(a2 + 24 + 4 * a3);
    v28 = *(float *)(a2 + 24 + 4 * a4);
    *(float *)(a2 + 24 + 4 * a3) = vmlas_n_f32(-(float)(v28 * v17), v27, result.f32[0]);
    *(float *)(a2 + 24 + 4 * a4) = vmlas_n_f32(v27 * v17, v28, result.f32[0]);
  }
  return result;
}

__n128 sub_1DCAD640C(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v5;
  int v6;
  float32x2_t v7;
  float32x2_t v8;
  __n128 result;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  v11 = *((_DWORD *)a1 + 2);
  v12 = 0;
  *(_QWORD *)&v5 = *(uint64_t *)((char *)a1 + 12);
  v13 = v5;
  v14 = 0;
  LODWORD(v5) = *((_DWORD *)a1 + 5);
  v15 = v5;
  v6 = 5;
  do
  {
    v7 = sub_1DCAD6298((uint64_t)&v10, a3, 0, 1, *(float32x2_t *)&v5);
    v8 = sub_1DCAD6298((uint64_t)&v10, a3, 0, 2, v7);
    *(float32x2_t *)&v5 = sub_1DCAD6298((uint64_t)&v10, a3, 1, 2, v8);
    --v6;
  }
  while (v6);
  *(_QWORD *)&v5 = __PAIR64__(v13, v10);
  DWORD2(v5) = v15;
  *a2 = v5;
  result.n128_u64[0] = v5;
  result.n128_u32[2] = DWORD2(v5);
  return result;
}

float sub_1DCAD64F4(float *a1, float *a2, __n128 a3)
{
  float v3;
  float v4;
  double v5;
  double v6;
  double v7;
  double v8;
  float result;

  v3 = 0.0;
  v4 = 0.0;
  if (fabsf(a3.n128_f32[0]) >= 0.1)
  {
    v5 = 1.0 / a3.n128_f32[0];
    v6 = fabs(v5);
    v4 = v5;
    if (v6 < 0.100000001)
      v4 = 0.0;
  }
  if (fabsf(a3.n128_f32[1]) >= 0.1)
  {
    v7 = 1.0 / a3.n128_f32[1];
    if (fabs(v7) >= 0.100000001)
      v3 = v7;
  }
  a3.n128_u32[0] = 0;
  if (fabsf(a3.n128_f32[2]) >= 0.1)
  {
    v8 = 1.0 / a3.n128_f32[2];
    if (fabs(v8) >= 0.100000001)
      a3.n128_f32[0] = v8;
  }
  *a1 = (float)((float)((float)(*a2 * *a2) * v4) + (float)((float)(a2[1] * a2[1]) * v3))
      + (float)((float)(a2[2] * a2[2]) * a3.n128_f32[0]);
  a1[1] = (float)((float)((float)(*a2 * v4) * a2[3]) + (float)((float)(a2[1] * v3) * a2[4]))
        + (float)((float)(a2[2] * a3.n128_f32[0]) * a2[5]);
  a1[2] = (float)((float)((float)(*a2 * v4) * a2[6]) + (float)((float)(a2[1] * v3) * a2[7]))
        + (float)((float)(a2[2] * a3.n128_f32[0]) * a2[8]);
  a1[3] = (float)((float)((float)(a2[3] * v4) * *a2) + (float)((float)(a2[4] * v3) * a2[1]))
        + (float)((float)(a2[5] * a3.n128_f32[0]) * a2[2]);
  a1[4] = (float)((float)((float)(a2[3] * a2[3]) * v4) + (float)((float)(a2[4] * a2[4]) * v3))
        + (float)((float)(a2[5] * a2[5]) * a3.n128_f32[0]);
  a1[5] = (float)((float)((float)(a2[3] * v4) * a2[6]) + (float)((float)(a2[4] * v3) * a2[7]))
        + (float)((float)(a2[5] * a3.n128_f32[0]) * a2[8]);
  a1[6] = (float)((float)((float)(a2[6] * v4) * *a2) + (float)((float)(a2[7] * v3) * a2[1]))
        + (float)((float)(a2[8] * a3.n128_f32[0]) * a2[2]);
  a1[7] = (float)((float)((float)(a2[6] * v4) * a2[3]) + (float)((float)(a2[7] * v3) * a2[4]))
        + (float)((float)(a2[8] * a3.n128_f32[0]) * a2[5]);
  result = (float)((float)((float)(a2[6] * a2[6]) * v4) + (float)((float)(a2[7] * a2[7]) * v3))
         + (float)((float)(a2[8] * a2[8]) * a3.n128_f32[0]);
  a1[8] = result;
  return result;
}

float sub_1DCAD6704(uint64_t *a1, _OWORD *a2, float32x4_t a3)
{
  float32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  __int128 v9;
  __n128 v12;
  _OWORD v13[2];
  unsigned int v14;
  _OWORD v15[2];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15[0] = xmmword_1DCC56FD0;
  v15[1] = xmmword_1DCC56FD0;
  v16 = 1065353216;
  v12 = 0uLL;
  sub_1DCAD640C(a1, &v12, (uint64_t)v15);
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  sub_1DCAD64F4((float *)v13, (float *)v15, v12);
  v4.i64[0] = *(_QWORD *)&v13[0];
  v4.i64[1] = DWORD2(v13[0]);
  v5 = (int8x16_t)vmulq_f32(v4, a3);
  *(float32x2_t *)v5.i8 = vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
  v6.i64[0] = *(_QWORD *)((char *)v13 + 12);
  v6.i64[1] = DWORD1(v13[1]);
  v7 = vmulq_f32(v6, a3);
  *(float32x2_t *)v7.f32 = vadd_f32(*(float32x2_t *)v7.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL));
  *(float32x2_t *)&v9 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v5.i8, *(int32x2_t *)v7.f32), (float32x2_t)vzip2_s32(*(int32x2_t *)v5.i8, *(int32x2_t *)v7.f32));
  v7.i64[0] = *((_QWORD *)&v13[1] + 1);
  v7.i64[1] = v14;
  v8 = (int8x16_t)vmulq_f32(v7, a3);
  *(float32x2_t *)v8.i8 = vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  *((_QWORD *)&v9 + 1) = vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1)).u32[0];
  *a2 = v9;
  return *(float *)&v9;
}

float32x4_t sub_1DCAD6820(uint64_t a1, float32x2_t *a2, float32x4_t *a3, int32x4_t _Q0, float32x4_t a5)
{
  __int128 v6;
  float32x4_t result;

  *(float32x4_t *)a1 = vmlaq_f32(*(float32x4_t *)a1, (float32x4_t)vtrn1q_s32(_Q0, vzip1q_s32(_Q0, _Q0)), (float32x4_t)vdupq_lane_s64(_Q0.i64[0], 0));
  *(float32x2_t *)(a1 + 16) = vmla_laneq_f32(*(float32x2_t *)(a1 + 16), (float32x2_t)vext_s8(*(int8x8_t *)_Q0.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL), 4uLL), (float32x4_t)_Q0, 2);
  _Q2 = (int8x16_t)vmulq_f32(a5, (float32x4_t)_Q0);
  *(float32x2_t *)_Q2.i8 = vadd_f32(*(float32x2_t *)_Q2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(_Q2, _Q2, 8uLL));
  *(float32x2_t *)&v6 = vmla_n_f32(*a2, *(float32x2_t *)_Q0.i8, vadd_f32(*(float32x2_t *)_Q2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q2.i8, 1)).f32[0]);
  *(float *)_Q2.i32 = vaddv_f32(*(float32x2_t *)_Q2.i8);
  __asm { FMLA            S6, S2, V0.S[2] }
  *((_QWORD *)&v6 + 1) = __PAIR64__(vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL).u32[1], _S6);
  *(_OWORD *)a2->f32 = v6;
  a5.i32[3] = 1.0;
  result = vaddq_f32(*a3, a5);
  *a3 = result;
  return result;
}

float sub_1DCAD689C(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x4_t v7;
  int8x16_t v8;

  v3.i32[3] = 0;
  v3.i32[0] = *(_DWORD *)a1;
  *(uint64_t *)((char *)v3.i64 + 4) = *(_QWORD *)(a1 + 4);
  v4 = vmulq_f32(v3, a2);
  *(float32x2_t *)v4.f32 = vadd_f32(*(float32x2_t *)v4.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL));
  v4.i32[0] = vadd_f32(*(float32x2_t *)v4.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.f32, 1)).u32[0];
  v5.i32[1] = HIDWORD(*(_QWORD *)(a1 + 12));
  v5.i32[0] = *(_DWORD *)(a1 + 20);
  v6 = vmla_lane_f32(vmla_n_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_laneq_f32(v5, a2, 2)), *(float32x2_t *)(a1 + 4), a2.f32[0]), *(float32x2_t *)(a1 + 12), *(float32x2_t *)a2.f32, 1);
  v4.i32[1] = v6.i32[0];
  v4.i64[1] = v6.u32[1];
  v7 = vsubq_f32(a3, v4);
  v8 = (int8x16_t)vmulq_f32(v7, v7);
  return vaddv_f32(vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)));
}

void sub_1DCAD690C(uint64_t a1, float32x4_t *a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v16;

  __asm { FMOV            V2.4S, #1.0 }
  v11.i32[3] = 0;
  v11.i32[0] = *(_DWORD *)a1;
  *(uint64_t *)((char *)v11.i64 + 4) = *(_QWORD *)(a1 + 4);
  v16 = vmulq_f32(a4, vdivq_f32(_Q2, (float32x4_t)vdupq_laneq_s32((int32x4_t)a4, 3)));
  v12 = (int8x16_t)vmulq_f32(v11, v16);
  *(float32x2_t *)v12.i8 = vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  v13.i32[0] = vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0];
  v12.i32[1] = HIDWORD(*(_QWORD *)(a1 + 12));
  v12.i32[0] = *(_DWORD *)(a1 + 20);
  *(float32x2_t *)v12.i8 = vmla_lane_f32(vmla_n_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_laneq_f32(*(float32x2_t *)v12.i8, v16, 2)), *(float32x2_t *)(a1 + 4), v16.f32[0]), *(float32x2_t *)(a1 + 12), *(float32x2_t *)v16.f32, 1);
  v13.i32[1] = v12.i32[0];
  v13.i64[1] = v12.u32[1];
  sub_1DCAD6704((uint64_t *)a1, a2, vsubq_f32(a3, v13));
  v14 = *a2;
  sub_1DCAD689C(a1, *a2, a3);
  *a2 = vaddq_f32(v14, v16);
}

double sub_1DCAD69D0(float32x4_t *a1, int32x4_t *a2, uint64_t a3, _DWORD *a4, float32x4_t *a5)
{
  float32x4_t v7;
  uint64_t v8;
  int32x4_t v11;
  int32x4_t v12;
  float32x4_t v13;
  int v14;
  float32x4_t v16;
  float32x4_t v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  v7 = 0uLL;
  v17 = 0u;
  memset(v18, 0, 24);
  if (a3)
  {
    v8 = a3;
    do
    {
      v11 = *a2++;
      v12 = v11;
      v13 = *a1++;
      sub_1DCAD6820((uint64_t)v18, (float32x2_t *)&v17, a5, v12, v13);
      --v8;
    }
    while (v8);
    v7 = v17;
  }
  v16 = 0uLL;
  sub_1DCAD690C((uint64_t)v18, &v16, v7, *a5);
  *a4 = v14;
  return *(double *)v16.i64;
}

uint64_t sub_1DCAD6A94(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, float32x4_t a6, float32x4_t a7)
{
  float32x4_t v12;
  int8x16_t v13;
  int v14;
  int v15;
  float32x2_t v16;
  int32x2_t v17;
  int v18;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char v23;
  int *v24;
  int *v25;
  float32x4_t **v27;
  float32x4_t *v28;
  float32x4_t *v29;
  float32x4_t *v30;
  float32x4_t v31;
  int32x4_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x4_t v35;
  int32x4_t v36;
  float32x2_t v37;
  int32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  int8x16_t v54;
  __n128 v57;
  float v58;

  if ((vmaxvq_u32((uint32x4_t)vcltzq_f32(a7)) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 112))
    {
      v12.i64[0] = 0x3F0000003F000000;
      v12.i64[1] = 0x3F0000003F000000;
      v13 = (int8x16_t)vmulq_f32(vaddq_f32(a7, a6), v12);
      v14 = 4 * (*(float *)v13.i32 < a6.f32[2]);
      if (*(float *)&v13.i32[1] < a6.f32[2])
        v14 |= 2u;
      v15 = 4 * (*(float *)v13.i32 < a6.f32[1]);
      if (*(float *)&v13.i32[2] < a6.f32[1])
        v15 |= 1u;
      if (a6.f32[1] < a6.f32[2])
        v14 = v15;
      v16.i32[1] = v13.i32[1];
      v16.i32[0] = vextq_s8(v13, v13, 8uLL).u32[0];
      v17 = vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 0), v16);
      if ((v17.i8[4] & 1) != 0)
        v18 = 2;
      else
        v18 = 0;
      if ((v17.i8[0] & 1) != 0)
        v18 |= 1u;
      if (a6.f32[0] < a6.f32[1] && a6.f32[0] < a6.f32[2])
        v14 = v18;
      v54 = v13;
      while (1)
      {
        v20 = v14;
        v21 = (__n128)vbslq_s8((int8x16_t)vcltzq_s32(xmmword_1DCC570D0[v14]), (int8x16_t)a7, v13);
        v22 = *(_QWORD *)(a1 + 8 * (int)(v14 ^ a5) + 48);
        if (v22)
        {
          v57 = v21;
          v23 = sub_1DCAD6A94(v22, a2, a3, a4, a5, (__n128)vbslq_s8((int8x16_t)vcltzq_s32(xmmword_1DCC57050[v14]), (int8x16_t)a6, v13), v21);
          v21 = v57;
          v13 = v54;
          if ((v23 & 1) != 0)
            break;
        }
        v24 = (int *)((char *)&unk_1DCC57150 + 16 * v20);
        v25 = v24 + 1;
        if (v21.n128_f32[1] >= v21.n128_f32[2])
          v25 = v24 + 2;
        if (v21.n128_f32[0] >= v21.n128_f32[2] || v21.n128_f32[0] >= v21.n128_f32[1])
          v24 = v25;
        v14 = *v24;
        if (v14 >= 8)
          return 0;
      }
      return 1;
    }
    v27 = *(float32x4_t ***)a1;
    if (*(_QWORD *)a1)
    {
      v58 = *(float *)a4;
      v28 = *v27;
      v29 = v27[1];
      if (*v27 != v29)
      {
        v30 = 0;
        do
        {
          if (sub_1DCC0EE94(v28, &v58, *a3, a3[1]))
            v30 = v28;
          v28 += 14;
        }
        while (v28 != v29);
        if (v30)
        {
          v31 = vmlaq_n_f32(*a3, a3[1], v58);
          *(float *)a4 = v58;
          *(float32x4_t *)(a4 + 80) = v31;
          *(__n64 *)v32.i8 = sub_1DCC0EBBC(v30, v31);
          v33 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)v32.i8, 1).u64[0];
          v34 = (float32x2_t)vdupq_laneq_s32(v32, 2).u64[0];
          *(float32x2_t *)(a4 + 96) = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v30[11].f32, *(float *)v32.i32), v33, *(float32x2_t *)&v30[11].u32[2]), v34, *(float32x2_t *)v30[12].f32);
          *(float32x2_t *)(a4 + 104) = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)&v30[12].u32[2], *(float *)v32.i32), v33, *(float32x2_t *)v30[13].f32), v34, *(float32x2_t *)&v30[13].u32[2]);
          v35 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v30[4], *(float *)v32.i32), v30[5], *(float32x2_t *)v32.i8, 1), v30[6], (float32x4_t)v32, 2);
          v36 = (int32x4_t)vmulq_f32(v35, v35);
          v36.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v36, 2)).u32[0];
          v37 = vrsqrte_f32((float32x2_t)v36.u32[0]);
          v38 = (int32x4_t)vmulq_n_f32(v35, vmul_f32(vrsqrts_f32((float32x2_t)v36.u32[0], vmul_f32(v37, v37)), v37).f32[0]);
          *(int32x4_t *)(a4 + 16) = v38;
          *(_QWORD *)(a4 + 112) = v30->i64[1];
          v39 = vsubq_f32(v30[2], v30[1]);
          v40 = (int32x4_t)vmulq_f32(v39, v39);
          v40.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v40, 2)).u32[0];
          v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
          v42 = vmul_f32(vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)), v41);
          v43 = vmlaq_n_f32((float32x4_t)xmmword_1DCC56FE0, v39, vmul_f32(v42, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v42, v42))).f32[0]);
          v44 = (int32x4_t)vmulq_f32(v43, v43);
          v44.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v44, 2)).u32[0];
          *(float32x2_t *)v40.i8 = vrsqrte_f32((float32x2_t)v44.u32[0]);
          v45 = (int32x4_t)vmulq_n_f32(v43, vmul_f32(vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8)), *(float32x2_t *)v40.i8).f32[0]);
          v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL);
          v47 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v45, v46)), (float32x4_t)v38, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v45, v45), (int8x16_t)v45, 0xCuLL));
          v48 = (int32x4_t)vmulq_f32((float32x4_t)v47, (float32x4_t)v47);
          v48.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v48, 2), *(float32x2_t *)v48.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1)).u32[0];
          *(float32x2_t *)v40.i8 = vrsqrte_f32((float32x2_t)v48.u32[0]);
          v49 = (int32x4_t)vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v47, v47), (int8x16_t)v47, 0xCuLL), vmul_f32(vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8)), *(float32x2_t *)v40.i8).f32[0]);
          v50 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v49, v46)), (float32x4_t)v38, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v49, v49), (int8x16_t)v49, 0xCuLL));
          v51 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v50, v50), (int8x16_t)v50, 0xCuLL);
          v52 = (int32x4_t)vmulq_f32((float32x4_t)v50, (float32x4_t)v50);
          v52.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v52, 2), *(float32x2_t *)v52.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.i8, 1)).u32[0];
          *(float32x2_t *)v50.i8 = vrsqrte_f32((float32x2_t)v52.u32[0]);
          *(float32x4_t *)(a4 + 32) = vmulq_n_f32(v51, vmul_f32(vrsqrts_f32((float32x2_t)v52.u32[0], vmul_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v50.i8)), *(float32x2_t *)v50.i8).f32[0]);
          *(int32x4_t *)(a4 + 48) = v49;
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1DCAD6E54(uint64_t *a1, float32x4_t *a2, uint64_t a3, double a4, float32x4_t _Q1)
{
  uint64_t result;
  float32x4_t v6;
  float32x2_t v7;
  uint64_t v8;
  float v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;

  result = *a1;
  if (result)
  {
    v6 = *a2;
    v18 = *a2;
    v7.i32[0] = a2[1].i32[0];
    _Q1.i32[0] = a2[1].i32[1];
    if (v7.f32[0] >= 0.0)
    {
      v8 = 0;
    }
    else
    {
      v18.f32[0] = -v6.f32[0];
      v7.f32[0] = -v7.f32[0];
      v8 = 4;
    }
    v9 = a2[1].f32[2];
    if (_Q1.f32[0] < 0.0)
    {
      v18.f32[1] = -v6.f32[1];
      _Q1.f32[0] = -_Q1.f32[0];
      v8 = v8 | 2;
    }
    v10 = *(float32x4_t *)(result + 16);
    v11 = *(float32x4_t *)(result + 32);
    if (v9 < 0.0)
    {
      v18.f32[2] = -v6.f32[2];
      v9 = -v9;
      v8 = v8 | 1;
    }
    v7.i32[1] = _Q1.i32[0];
    __asm { FMOV            V1.2S, #1.0 }
    *(float32x2_t *)_Q1.f32 = vdiv_f32(*(float32x2_t *)_Q1.f32, v7);
    _Q1.f32[2] = 1.0 / v9;
    v16 = vmulq_f32(vsubq_f32(v11, v18), _Q1);
    v17 = vmulq_f32(vsubq_f32(v10, v18), _Q1);
    if (fmaxf(v16.f32[0], fmaxf(v16.f32[1], v16.f32[2])) >= fminf(v17.f32[0], fminf(v17.f32[1], v17.f32[2])))
    {
      return 0;
    }
    else
    {
      v16.i32[3] = 0;
      v17.i32[3] = 0;
      return sub_1DCAD6A94(result, (uint64_t)&v18, a2, a3, v8, v16, v17);
    }
  }
  return result;
}

id sub_1DCAD6F54(uint64_t *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  void **v9;
  _DWORD *v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  void *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  int v35;
  uint64_t *v36;
  __n128 **v37;
  unint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  char *v49;
  int v50;
  float v51;
  int v52;
  __n128 *v53;
  float v54;
  _BYTE *v55;
  unint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  _DWORD *v64;
  char *v65;
  int v66;
  MDLMeshBufferAllocatorDefault *v67;
  _BYTE *v68;
  _BYTE *v69;
  id v70;
  const char *v71;
  const char *v72;
  const char *v73;
  const char *v74;
  id v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  void *v80;
  const char *v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  void *v87;
  const char *v88;
  const char *v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  void *v93;
  const char *v94;
  const char *v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  void *v99;
  const char *v100;
  const char *v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  void *v105;
  const char *v106;
  const char *v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  void *v111;
  const char *v112;
  const char *v113;
  uint64_t v114;
  void *v115;
  const char *v116;
  void *v117;
  const char *v118;
  const char *v119;
  uint64_t v120;
  void *v121;
  const char *v122;
  void *v123;
  const char *v124;
  const char *v125;
  uint64_t v126;
  void *v127;
  const char *v128;
  void *v129;
  const char *v130;
  unint64_t v131;
  void *v132;
  const char *v133;
  void *v134;
  const char *v135;
  const char *v136;
  void *v137;
  const char *v138;
  const char *v139;
  id v140;
  void *v141;
  const char *v142;
  uint64_t v143;
  void *v144;
  const char *v145;
  void *v146;
  const char *v147;
  unsigned __int8 v148;
  void *v149;
  double v150;
  const char *v151;
  uint64_t v152;
  const char *v153;
  void *v154;
  double v155;
  const char *v156;
  uint64_t v157;
  MDLSubmesh *v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  _BYTE *v163;
  _BYTE *v164;
  MDLMesh *v165;
  const char *v166;
  void *v167;
  const char *v168;
  const char *v169;
  double v170;
  MDLMaterial *v172;
  void *v173;
  const char *v174;
  void *v175;
  void *v176;
  MDLMeshBufferAllocatorDefault *v177;
  void *v178;
  __n128 v179;
  __n128 v180;
  void *v181;
  void *__p;
  uint64_t *v183;
  uint64_t v184;
  void *v185;
  _BYTE *v186;
  uint64_t v187;
  void *v188;
  _BYTE *v189;
  uint64_t v190;
  _QWORD v191[3];

  v191[1] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if (!*a1)
  {
    v15 = 0;
    return v15;
  }
  v188 = 0;
  v189 = 0;
  v190 = 0;
  v185 = 0;
  v186 = 0;
  v9 = (void **)(a1 + 6);
  v10 = (_DWORD *)a1[6];
  v187 = 0;
  __p = 0;
  v183 = 0;
  v184 = 0;
  a1[7] = (uint64_t)v10;
  v11 = *(__n128 *)(v4 + 32);
  if ((a3 & 1) == 0)
  {
    v179 = *(__n128 *)(v4 + 32);
    sub_1DCAD7AC0(0, (uint64_t)&v188, (char **)&v185, v11, *(__n128 *)(v4 + 16));
    v16 = a1[8];
    v17 = (char *)a1[7];
    if ((unint64_t)v17 < v16)
    {
      *(_DWORD *)v17 = 1;
      v14 = v17 + 4;
LABEL_32:
      v11 = v179;
      goto LABEL_33;
    }
    v27 = (char *)*v9;
    v28 = (v17 - (_BYTE *)*v9) >> 2;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 62)
      sub_1DCAE4C44();
    v30 = v16 - (_QWORD)v27;
    if (v30 >> 1 > v29)
      v29 = v30 >> 1;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
      v31 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      v32 = (char *)sub_1DCAE4D04((uint64_t)(a1 + 8), v31);
      v27 = (char *)a1[6];
      v17 = (char *)a1[7];
    }
    else
    {
      v32 = 0;
    }
    v33 = &v32[4 * v28];
    v34 = &v32[4 * v31];
    *(_DWORD *)v33 = 1;
    v14 = v33 + 4;
    while (v17 != v27)
    {
      v35 = *((_DWORD *)v17 - 1);
      v17 -= 4;
      *((_DWORD *)v33 - 1) = v35;
      v33 -= 4;
    }
    a1[6] = (uint64_t)v33;
    a1[7] = (uint64_t)v14;
    a1[8] = (uint64_t)v34;
    if (!v27)
      goto LABEL_32;
LABEL_31:
    operator delete(v27);
    goto LABEL_32;
  }
  v12 = (uint64_t)(a1 + 8);
  v13 = a1[8];
  if ((unint64_t)v10 >= v13)
  {
    v179 = v11;
    v18 = v13 - (_QWORD)v10;
    v19 = v18 >> 1;
    if ((unint64_t)(v18 >> 1) <= 1)
      v19 = 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v21 = sub_1DCAE4D04(v12, v20);
    v22 = (char *)a1[6];
    v23 = a1[7];
    v25 = &v21[v24];
    *v21 = 0;
    v14 = v21 + 1;
    while ((char *)v23 != v22)
    {
      v26 = *(_DWORD *)(v23 - 4);
      v23 -= 4;
      *--v21 = v26;
    }
    a1[6] = (uint64_t)v21;
    a1[7] = (uint64_t)v14;
    a1[8] = (uint64_t)v25;
    if (!v22)
      goto LABEL_32;
    v27 = v22;
    goto LABEL_31;
  }
  *v10 = 0;
  v14 = v10 + 1;
LABEL_33:
  a1[7] = (uint64_t)v14;
  sub_1DCADE350((uint64_t **)&__p, *a1, a2 - 1, a3 | a4, a3, vsubq_f32(*(float32x4_t *)(*a1 + 16), *(float32x4_t *)(*a1 + 32)), (int8x16_t)v11);
  v37 = (__n128 **)__p;
  v36 = v183;
  if (v183 != __p)
  {
    sub_1DCAE5EF8((uint64_t)__p, v183, 126 - 2 * __clz(((char *)v183 - (_BYTE *)__p) >> 3), 1);
    v180 = (*v37)[1];
    v38 = a1[8];
    v40 = (_DWORD *)a1[6];
    v39 = (_DWORD *)a1[7];
    if ((unint64_t)v39 >= v38)
    {
      v42 = v39 - v40;
      v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 62)
        sub_1DCAE4C44();
      v44 = v38 - (_QWORD)v40;
      if (v44 >> 1 > v43)
        v43 = v44 >> 1;
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
        v45 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v45 = v43;
      if (v45)
      {
        v46 = (char *)sub_1DCAE4D04((uint64_t)(a1 + 8), v45);
        v47 = (_DWORD *)a1[6];
        v39 = (_DWORD *)a1[7];
      }
      else
      {
        v46 = 0;
        v47 = (_DWORD *)a1[6];
      }
      v48 = &v46[4 * v42];
      v49 = &v46[4 * v45];
      *(_DWORD *)v48 = *v40;
      v41 = v48 + 4;
      while (v39 != v47)
      {
        v50 = *--v39;
        *((_DWORD *)v48 - 1) = v50;
        v48 -= 4;
      }
      a1[6] = (uint64_t)v48;
      a1[7] = (uint64_t)v41;
      a1[8] = (uint64_t)v49;
      if (v47)
        operator delete(v47);
    }
    else
    {
      *v39 = *v40;
      v41 = v39 + 1;
    }
    a1[7] = (uint64_t)v41;
    v51 = v180.n128_f32[1];
    v52 = 1;
    do
    {
      v53 = *v37;
      sub_1DCAD7AC0(a3, (uint64_t)&v188, (char **)&v185, (*v37)[1], (*v37)[2]);
      v54 = v53[1].n128_f32[1];
      v55 = *v9;
      if (v51 < v54)
      {
        v57 = (_DWORD *)a1[7];
        v56 = a1[8];
        if ((unint64_t)v57 >= v56)
        {
          v59 = ((char *)v57 - v55) >> 2;
          v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62)
            sub_1DCAE4C44();
          v61 = v56 - (_QWORD)v55;
          if (v61 >> 1 > v60)
            v60 = v61 >> 1;
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
            v62 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v62 = v60;
          if (v62)
          {
            v63 = (char *)sub_1DCAE4D04((uint64_t)(a1 + 8), v62);
            v64 = (_DWORD *)a1[6];
            v57 = (_DWORD *)a1[7];
          }
          else
          {
            v63 = 0;
            v64 = *v9;
          }
          v65 = &v63[4 * v59];
          *(_DWORD *)v65 = *(_DWORD *)&v55[4 * v52];
          v58 = v65 + 4;
          while (v57 != v64)
          {
            v66 = *--v57;
            *((_DWORD *)v65 - 1) = v66;
            v65 -= 4;
          }
          a1[6] = (uint64_t)v65;
          a1[7] = (uint64_t)v58;
          a1[8] = (uint64_t)&v63[4 * v62];
          if (v64)
            operator delete(v64);
        }
        else
        {
          *v57 = *(_DWORD *)&v55[4 * v52];
          v58 = v57 + 1;
        }
        ++v52;
        a1[7] = (uint64_t)v58;
        v55 = (_BYTE *)a1[6];
        v51 = v54;
      }
      ++*(_DWORD *)&v55[4 * v52];
      ++v37;
    }
    while (v37 != (__n128 **)v36);
  }
  v67 = objc_alloc_init(MDLMeshBufferAllocatorDefault);
  v69 = v185;
  v68 = v186;
  v177 = v67;
  v70 = objc_alloc(MEMORY[0x1E0C99D50]);
  v175 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v70, v71, (uint64_t)v185, v68 - v69, 0);
  v181 = (void *)objc_msgSend_newBufferWithData_type_(v67, v72, (uint64_t)v175, 2);
  if (objc_msgSend_conformsToProtocol_(v181, v73, (uint64_t)&unk_1F03B6D88))
  {
    v75 = v181;
    objc_msgSend_name(0, v76, v77);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByAppendingString_(v78, v79, (uint64_t)CFSTR("-Indices"));
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v75, v81, (uint64_t)v80);

  }
  objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x1E0C99D50], v74, (uint64_t)v188, v189 - (_BYTE *)v188, 0);
  v178 = (void *)objc_claimAutoreleasedReturnValue();
  v82 = (void *)objc_opt_new();
  v176 = v82;
  objc_msgSend_attributes(v82, v83, v84);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v85, v86, 0);
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setName_(v87, v88, (uint64_t)CFSTR("position"));

  objc_msgSend_attributes(v82, v89, v90);
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v91, v92, 0);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFormat_(v93, v94, 786435);

  objc_msgSend_attributes(v82, v95, v96);
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v97, v98, 0);
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setOffset_(v99, v100, 0);

  objc_msgSend_attributes(v82, v101, v102);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v103, v104, 0);
  v105 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setBufferIndex_(v105, v106, 0);

  if ((_DWORD)a3)
  {
    objc_msgSend_attributes(v82, v107, v108);
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v109, v110, 1);
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v111, v112, (uint64_t)CFSTR("normal"));

    objc_msgSend_attributes(v82, v113, v114);
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v115, v116, 1);
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFormat_(v117, v118, 786435);

    objc_msgSend_attributes(v82, v119, v120);
    v121 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v121, v122, 1);
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOffset_(v123, v124, 12);

    objc_msgSend_attributes(v82, v125, v126);
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v127, v128, 1);
    v129 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBufferIndex_(v129, v130, 0);

    v131 = 6;
  }
  else
  {
    v131 = 3;
  }
  objc_msgSend_layouts(v82, v107, v108);
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v132, v133, 0);
  v134 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setStride_(v134, v135, 4 * v131);

  v137 = (void *)objc_msgSend_newBufferWithData_type_(v177, v136, (uint64_t)v178, 1);
  if (objc_msgSend_conformsToProtocol_(v137, v138, (uint64_t)&unk_1F03B6D88))
  {
    v140 = v137;
    v141 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend_name(0, v142, v143);
    v144 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v141, v145, (uint64_t)CFSTR("%@-%@"), v144, CFSTR("position"));
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v140, v147, (uint64_t)v146);

  }
  v148 = atomic_load((unsigned __int8 *)&qword_1F03B4CB8);
  if ((v148 & 1) == 0 && __cxa_guard_acquire(&qword_1F03B4CB8))
  {
    v172 = [MDLMaterial alloc];
    v173 = (void *)objc_opt_new();
    qword_1F03B4CB0 = objc_msgSend_initWithName_scatteringFunction_(v172, v174, (uint64_t)CFSTR("Octree material"), v173);

    __cxa_guard_release(&qword_1F03B4CB8);
  }
  objc_msgSend_propertyWithSemantic_((void *)qword_1F03B4CB0, v139, 2);
  v149 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v150) = 0;
  objc_msgSend_setFloatValue_(v149, v151, v152, v150);
  objc_msgSend_propertyWithSemantic_((void *)qword_1F03B4CB0, v153, 6);
  v154 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v155) = 1.0;
  objc_msgSend_setFloatValue_(v154, v156, v157, v155);
  v158 = [MDLSubmesh alloc];
  v160 = (v186 - (_BYTE *)v185) >> 2;
  if ((_DWORD)a3)
    v161 = objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v158, v159, (uint64_t)v181, v160, 32, 2, qword_1F03B4CB0);
  else
    v161 = objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v158, v159, (uint64_t)v181, v160, 32, 1, qword_1F03B4CB0);
  v162 = (void *)v161;
  v164 = v188;
  v163 = v189;
  v165 = [MDLMesh alloc];
  v191[0] = v162;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v166, (uint64_t)v191, 1);
  v167 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend_initWithVertexBuffer_vertexCount_descriptor_submeshes_(v165, v168, (uint64_t)v137, ((v163 - v164) >> 2) / v131, v176, v167);

  if ((_DWORD)a3)
  {
    LODWORD(v170) = 1045220557;
    objc_msgSend_addNormalsWithAttributeNamed_creaseThreshold_(v15, v169, (uint64_t)CFSTR("normal"), v170);
  }

  if (__p)
    operator delete(__p);
  if (v185)
  {
    v186 = v185;
    operator delete(v185);
  }
  if (v188)
  {
    v189 = v188;
    operator delete(v188);
  }
  return v15;
}

void sub_1DCAD788C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  void *v24;
  void *v25;

  __cxa_guard_abort(&qword_1F03B4CB8);
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(a1);
}

void sub_1DCAD7AC0(int a1, uint64_t a2, char **a3, __n128 a4, __n128 a5)
{
  unsigned __int32 *v8;
  unsigned __int32 **v9;
  unsigned __int32 *v10;
  unint64_t v11;
  char *v12;
  char **v13;
  unsigned __int32 *v14;
  unsigned __int32 *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  unsigned __int32 v28;
  unsigned __int32 *v29;
  unsigned __int32 *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  unsigned __int32 v38;
  unsigned __int32 *v39;
  unsigned __int32 *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  unsigned __int32 *v46;
  unsigned __int32 v47;
  unsigned __int32 v48;
  unsigned __int32 *v49;
  unsigned __int32 *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unsigned __int32 *v56;
  unsigned __int32 v57;
  unsigned __int32 *v58;
  unsigned __int32 *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  unsigned __int32 *v65;
  unsigned __int32 v66;
  unsigned __int32 *v67;
  unsigned __int32 *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  unsigned __int32 *v76;
  unsigned __int32 *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  int v84;
  unsigned __int32 *v85;
  unsigned __int32 *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  int v93;
  unsigned __int32 *v94;
  unsigned __int32 *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  unsigned __int32 *v101;
  unsigned __int32 v102;
  unsigned __int32 *v103;
  unsigned __int32 *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  unsigned __int32 *v110;
  unsigned __int32 v111;
  unsigned __int32 *v112;
  unsigned __int32 *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  unsigned __int32 *v119;
  unsigned __int32 v120;
  unsigned __int32 *v121;
  unsigned __int32 *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  int v129;
  unsigned __int32 *v130;
  unsigned __int32 *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  int v138;
  unsigned __int32 *v139;
  unsigned __int32 *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  int v147;
  unsigned __int32 *v148;
  unsigned __int32 *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  int v156;
  unsigned __int32 *v157;
  unsigned __int32 *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  int v165;
  unsigned __int32 *v166;
  unsigned __int32 *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  unsigned __int32 *v173;
  unsigned __int32 v174;
  unsigned __int32 *v175;
  unsigned __int32 *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  int v183;
  unsigned __int32 *v184;
  unsigned __int32 *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  char *v190;
  char *v191;
  int v192;
  unsigned __int32 *v193;
  unsigned __int32 *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  int v201;
  unsigned __int32 *v202;
  unsigned __int32 *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  int v210;
  unsigned __int32 *v211;
  unsigned __int32 *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  int v219;
  unsigned __int32 *v220;
  unsigned __int32 *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  unsigned __int32 *v227;
  char *v228;
  unsigned __int32 v229;
  unint64_t v230;
  char *v231;
  char **v232;
  char *v233;
  char *v234;
  char *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  char *v241;
  int v242;
  unsigned __int32 *v243;
  unsigned __int32 *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  char *v250;
  int v251;
  int v252;
  char *v253;
  char *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  int v261;
  unsigned __int32 *v262;
  unsigned __int32 *v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  char *v268;
  char *v269;
  int v270;
  int v271;
  char *v272;
  char *v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  char *v278;
  unsigned __int32 *v279;
  unsigned __int32 v280;
  unsigned __int32 *v281;
  unsigned __int32 *v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  char *v287;
  char *v288;
  int v289;
  char *v290;
  char *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  char *v296;
  char *v297;
  int v298;
  unsigned __int32 *v299;
  unsigned __int32 *v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char *v305;
  char *v306;
  int v307;
  char **v308;
  char *v309;
  char *v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  char *v315;
  char *v316;
  int v317;
  unsigned __int32 *v318;
  unsigned __int32 *v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  char *v324;
  char *v325;
  int v326;
  int v327;
  char *v328;
  char *v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  char *v334;
  unsigned __int32 *v335;
  unsigned __int32 v336;
  unsigned __int32 v337;
  unsigned __int32 *v338;
  unsigned __int32 *v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  char *v344;
  char *v345;
  char *v346;
  int v347;
  unsigned __int32 *v348;
  char *v349;
  unsigned __int32 *v350;
  unsigned __int32 *v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  unint64_t v355;
  char *v356;
  char *v357;
  int v358;
  unsigned __int32 *v359;
  unsigned __int32 *v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  char *v365;
  char *v366;
  char *v367;
  int v368;
  unsigned __int32 *v369;
  unsigned __int32 *v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  unint64_t v374;
  char *v375;
  unsigned __int32 *v376;
  unsigned __int32 v377;
  unsigned __int32 *v378;
  unsigned __int32 *v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v382;
  unint64_t v383;
  char *v384;
  unsigned __int32 *v385;
  unsigned __int32 v386;
  unsigned __int32 *v387;
  unsigned __int32 *v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  char *v393;
  char *v394;
  int v395;
  unsigned __int32 *v396;
  unsigned __int32 *v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  unint64_t v401;
  char *v402;
  unsigned __int32 *v403;
  unsigned __int32 v404;
  unsigned __int32 *v405;
  unsigned __int32 *v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  unint64_t v410;
  char *v411;
  char *v412;
  int v413;
  unsigned __int32 *v414;
  unsigned __int32 *v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v419;
  char *v420;
  char *v421;
  int v422;
  unsigned __int32 *v423;
  unsigned __int32 *v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  unint64_t v428;
  char *v429;
  char *v430;
  int v431;
  unsigned __int32 *v432;
  unsigned __int32 *v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  char *v438;
  char *v439;
  int v440;
  unsigned __int32 *v441;
  unsigned __int32 *v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  unint64_t v446;
  char *v447;
  char *v448;
  int v449;
  unsigned __int32 *v450;
  unsigned __int32 *v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  char *v456;
  unsigned __int32 *v457;
  unsigned __int32 v458;
  unsigned __int32 *v459;
  unsigned __int32 *v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  unint64_t v464;
  char *v465;
  char *v466;
  char *v467;
  int v468;
  unint64_t v469;
  char *v470;
  char **v471;
  char *v472;
  char *v473;
  char *v474;
  uint64_t v475;
  unint64_t v476;
  uint64_t v477;
  unint64_t v478;
  char *v479;
  char *v480;
  int v481;
  unsigned __int32 *v482;
  unsigned __int32 *v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  unint64_t v487;
  char *v488;
  char *v489;
  int v490;
  int v491;
  char *v492;
  char *v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  char *v498;
  unsigned __int32 *v499;
  unsigned __int32 v500;
  unsigned __int32 *v501;
  unsigned __int32 *v502;
  uint64_t v503;
  unint64_t v504;
  uint64_t v505;
  unint64_t v506;
  char *v507;
  char *v508;
  int v509;
  char *v510;
  char *v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  unint64_t v515;
  char *v516;
  char *v517;
  int v518;
  unsigned __int32 *v519;
  unsigned __int32 *v520;
  uint64_t v521;
  unint64_t v522;
  uint64_t v523;
  unint64_t v524;
  char *v525;
  char *v526;
  int v527;
  int v528;
  char *v529;
  char *v530;
  uint64_t v531;
  unint64_t v532;
  uint64_t v533;
  unint64_t v534;
  char *v535;
  char *v536;
  int v537;
  unsigned __int32 *v538;
  unsigned __int32 *v539;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  unint64_t v543;
  char *v544;
  char *v545;
  int v546;
  char *v547;
  char *v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  unint64_t v552;
  char *v553;
  char *v554;
  int v555;
  unsigned __int32 *v556;
  unsigned __int32 *v557;
  uint64_t v558;
  unint64_t v559;
  uint64_t v560;
  unint64_t v561;
  char *v562;
  char *v563;
  int v564;
  int v565;
  char *v566;
  char *v567;
  uint64_t v568;
  unint64_t v569;
  uint64_t v570;
  unint64_t v571;
  char *v572;
  char *v573;
  char *v574;
  int v575;
  int v576;
  char *v577;
  char *v578;
  char *v579;
  char *v580;
  uint64_t v581;
  unint64_t v582;
  uint64_t v583;
  unint64_t v584;
  char *v585;
  char *v586;
  int v587;
  char *v588;
  char *v589;
  uint64_t v590;
  unint64_t v591;
  uint64_t v592;
  unint64_t v593;
  char *v594;
  char *v595;
  int v596;
  int v597;
  char *v598;
  char *v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  unint64_t v603;
  char *v604;
  char *v605;
  int v606;
  int v607;
  char *v608;
  char *v609;
  uint64_t v610;
  unint64_t v611;
  uint64_t v612;
  unint64_t v613;
  char *v614;
  char *v615;
  int v616;
  int v617;
  char *v618;
  char *v619;
  uint64_t v620;
  unint64_t v621;
  uint64_t v622;
  unint64_t v623;
  char *v624;
  char *v625;
  int v626;
  char *v627;
  char *v628;
  uint64_t v629;
  unint64_t v630;
  uint64_t v631;
  unint64_t v632;
  char *v633;
  char *v634;
  int v635;
  char *v636;
  char *v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v640;
  unint64_t v641;
  char *v642;
  char *v643;
  int v644;
  int v645;
  char *v646;
  char *v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t v650;
  unint64_t v651;
  char *v652;
  char *v653;
  int v654;
  char **v655;
  char *v656;
  char *v657;
  uint64_t v658;
  unint64_t v659;
  uint64_t v660;
  unint64_t v661;
  char *v662;
  char *v663;
  int v664;
  char *v665;
  char *v666;
  uint64_t v667;
  unint64_t v668;
  uint64_t v669;
  unint64_t v670;
  char *v671;
  char *v672;
  int v673;
  int v674;
  char *v675;
  char *v676;
  uint64_t v677;
  unint64_t v678;
  uint64_t v679;
  unint64_t v680;
  char *v681;
  char *v682;
  int v683;
  char *v684;
  char *v685;
  uint64_t v686;
  unint64_t v687;
  uint64_t v688;
  unint64_t v689;
  char *v690;
  char *v691;
  char *v692;
  int v693;
  unsigned __int32 *v694;
  char *v695;
  unsigned __int32 *v696;
  unsigned __int32 *v697;
  uint64_t v698;
  unint64_t v699;
  uint64_t v700;
  unint64_t v701;
  char *v702;
  char *v703;
  int v704;
  char *v705;
  char *v706;
  uint64_t v707;
  unint64_t v708;
  uint64_t v709;
  unint64_t v710;
  char *v711;
  char *v712;
  int v713;
  unsigned __int32 *v714;
  unsigned __int32 *v715;
  uint64_t v716;
  unint64_t v717;
  uint64_t v718;
  unint64_t v719;
  char *v720;
  char *v721;
  int v722;
  int v723;
  char *v724;
  char *v725;
  uint64_t v726;
  unint64_t v727;
  uint64_t v728;
  unint64_t v729;
  char *v730;
  unsigned __int32 *v731;
  unsigned __int32 v732;
  unsigned __int32 *v733;
  unsigned __int32 *v734;
  uint64_t v735;
  unint64_t v736;
  uint64_t v737;
  unint64_t v738;
  char *v739;
  char *v740;
  int v741;
  char *v742;
  char *v743;
  uint64_t v744;
  unint64_t v745;
  uint64_t v746;
  unint64_t v747;
  char *v748;
  char *v749;
  int v750;
  unsigned __int32 *v751;
  unsigned __int32 *v752;
  uint64_t v753;
  unint64_t v754;
  uint64_t v755;
  unint64_t v756;
  char *v757;
  char *v758;
  int v759;
  int v760;
  char *v761;
  char *v762;
  uint64_t v763;
  unint64_t v764;
  uint64_t v765;
  unint64_t v766;
  char *v767;
  char *v768;
  int v769;
  unsigned __int32 *v770;
  unsigned __int32 *v771;
  uint64_t v772;
  unint64_t v773;
  uint64_t v774;
  unint64_t v775;
  char *v776;
  char *v777;
  int v778;
  char *v779;
  char *v780;
  uint64_t v781;
  unint64_t v782;
  uint64_t v783;
  unint64_t v784;
  char *v785;
  unsigned __int32 *v786;
  unsigned __int32 v787;
  unsigned __int32 *v788;
  unsigned __int32 *v789;
  uint64_t v790;
  unint64_t v791;
  uint64_t v792;
  unint64_t v793;
  char *v794;
  char *v795;
  int v796;
  char *v797;
  char *v798;
  uint64_t v799;
  unint64_t v800;
  uint64_t v801;
  unint64_t v802;
  char *v803;
  char *v804;
  int v805;
  unsigned __int32 *v806;
  unsigned __int32 *v807;
  uint64_t v808;
  unint64_t v809;
  uint64_t v810;
  unint64_t v811;
  char *v812;
  char *v813;
  int v814;
  char *v815;
  char *v816;
  uint64_t v817;
  unint64_t v818;
  uint64_t v819;
  unint64_t v820;
  char *v821;
  char *v822;
  int v823;
  unsigned __int32 *v824;
  unsigned __int32 *v825;
  uint64_t v826;
  unint64_t v827;
  uint64_t v828;
  unint64_t v829;
  char *v830;
  char *v831;
  int v832;
  char *v833;
  char *v834;
  uint64_t v835;
  unint64_t v836;
  uint64_t v837;
  unint64_t v838;
  char *v839;
  unsigned __int32 *v840;
  unsigned __int32 v841;
  unsigned __int32 *v842;
  unsigned __int32 *v843;
  uint64_t v844;
  unint64_t v845;
  uint64_t v846;
  unint64_t v847;
  char *v848;
  char *v849;
  int v850;
  char *v851;
  char *v852;
  uint64_t v853;
  unint64_t v854;
  uint64_t v855;
  unint64_t v856;
  char *v857;
  char *v858;
  int v859;
  unsigned __int32 *v860;
  unsigned __int32 *v861;
  uint64_t v862;
  unint64_t v863;
  uint64_t v864;
  unint64_t v865;
  char *v866;
  char *v867;
  int v868;
  char *v869;
  char *v870;
  uint64_t v871;
  unint64_t v872;
  uint64_t v873;
  unint64_t v874;
  char *v875;
  char *v876;
  int v877;
  unsigned __int32 *v878;
  unsigned __int32 *v879;
  uint64_t v880;
  unint64_t v881;
  uint64_t v882;
  unint64_t v883;
  char *v884;
  char *v885;
  int v886;
  char *v887;
  char *v888;
  uint64_t v889;
  unint64_t v890;
  uint64_t v891;
  unint64_t v892;
  char *v893;
  char *v894;
  int v895;
  unsigned __int32 *v896;
  unsigned __int32 *v897;
  uint64_t v898;
  unint64_t v899;
  uint64_t v900;
  unint64_t v901;
  char *v902;
  char *v903;
  int v904;
  char *v905;
  char *v906;
  uint64_t v907;
  unint64_t v908;
  uint64_t v909;
  unint64_t v910;
  char *v911;
  char *v912;
  int v913;
  unsigned __int32 *v914;
  unsigned __int32 *v915;
  uint64_t v916;
  unint64_t v917;
  uint64_t v918;
  unint64_t v919;
  char *v920;
  char *v921;
  char *v922;
  int v923;
  char *v924;
  int v925;
  unsigned __int32 *v926;
  unsigned __int32 *v927;
  uint64_t v928;
  unint64_t v929;
  uint64_t v930;
  unint64_t v931;
  char *v932;
  char *v933;
  int v934;
  unsigned __int32 *v935;
  unsigned __int32 *v936;
  uint64_t v937;
  unint64_t v938;
  uint64_t v939;
  unint64_t v940;
  char *v941;
  char *v942;
  char *v943;
  int v944;
  int v945;
  char *v946;
  char *v947;
  char *v948;
  char *v949;
  uint64_t v950;
  unint64_t v951;
  uint64_t v952;
  unint64_t v953;
  char *v954;
  char *v955;
  int v956;
  int v957;
  char *v958;
  char *v959;
  uint64_t v960;
  unint64_t v961;
  uint64_t v962;
  unint64_t v963;
  char *v964;
  char *v965;
  int v966;
  int v967;
  char *v968;
  char *v969;
  uint64_t v970;
  unint64_t v971;
  uint64_t v972;
  unint64_t v973;
  char *v974;
  char *v975;
  int v976;
  char *v977;
  char *v978;
  uint64_t v979;
  unint64_t v980;
  uint64_t v981;
  unint64_t v982;
  char *v983;
  char *v984;
  int v985;
  char **v986;
  int v987;
  char *v988;
  char *v989;
  uint64_t v990;
  unint64_t v991;
  uint64_t v992;
  unint64_t v993;
  char *v994;
  char *v995;
  int v996;
  char *v997;
  char *v998;
  uint64_t v999;
  unint64_t v1000;
  uint64_t v1001;
  unint64_t v1002;
  char *v1003;
  char *v1004;
  char *v1005;
  int v1006;
  unsigned __int32 *v1007;
  char *v1008;
  unsigned __int32 *v1009;
  unsigned __int32 *v1010;
  uint64_t v1011;
  unint64_t v1012;
  uint64_t v1013;
  unint64_t v1014;
  char *v1015;
  char *v1016;
  int v1017;
  unsigned __int32 *v1018;
  unsigned __int32 *v1019;
  uint64_t v1020;
  unint64_t v1021;
  uint64_t v1022;
  unint64_t v1023;
  char *v1024;
  unsigned __int32 *v1025;
  unsigned __int32 v1026;
  unsigned __int32 *v1027;
  unsigned __int32 *v1028;
  uint64_t v1029;
  unint64_t v1030;
  uint64_t v1031;
  unint64_t v1032;
  char *v1033;
  unsigned __int32 *v1034;
  unsigned __int32 v1035;
  unsigned __int32 *v1036;
  unsigned __int32 *v1037;
  uint64_t v1038;
  unint64_t v1039;
  uint64_t v1040;
  unint64_t v1041;
  char *v1042;
  char *v1043;
  int v1044;
  unsigned __int32 *v1045;
  unsigned __int32 *v1046;
  uint64_t v1047;
  unint64_t v1048;
  uint64_t v1049;
  unint64_t v1050;
  char *v1051;
  char *v1052;
  int v1053;
  unsigned __int32 *v1054;
  unsigned __int32 *v1055;
  uint64_t v1056;
  unint64_t v1057;
  uint64_t v1058;
  unint64_t v1059;
  char *v1060;
  unsigned __int32 *v1061;
  unsigned __int32 v1062;
  unsigned __int32 *v1063;
  unsigned __int32 *v1064;
  uint64_t v1065;
  unint64_t v1066;
  uint64_t v1067;
  unint64_t v1068;
  char *v1069;
  char *v1070;
  int v1071;
  unsigned __int32 *v1072;
  unsigned __int32 *v1073;
  uint64_t v1074;
  unint64_t v1075;
  uint64_t v1076;
  unint64_t v1077;
  char *v1078;
  unsigned __int32 *v1079;
  unsigned __int32 v1080;
  unsigned __int32 *v1081;
  unsigned __int32 *v1082;
  uint64_t v1083;
  unint64_t v1084;
  uint64_t v1085;
  unint64_t v1086;
  char *v1087;
  char *v1088;
  int v1089;
  unsigned __int32 *v1090;
  unsigned __int32 *v1091;
  uint64_t v1092;
  unint64_t v1093;
  uint64_t v1094;
  unint64_t v1095;
  char *v1096;
  char *v1097;
  int v1098;
  unsigned __int32 *v1099;
  unsigned __int32 *v1100;
  uint64_t v1101;
  unint64_t v1102;
  uint64_t v1103;
  unint64_t v1104;
  char *v1105;
  char *v1106;
  int v1107;
  unsigned __int32 *v1108;
  unsigned __int32 *v1109;
  uint64_t v1110;
  unint64_t v1111;
  uint64_t v1112;
  unint64_t v1113;
  char *v1114;
  char *v1115;
  char *v1116;
  int v1117;
  int v1118;
  char *v1119;
  char *v1120;
  char *v1121;
  char *v1122;
  uint64_t v1123;
  unint64_t v1124;
  uint64_t v1125;
  unint64_t v1126;
  char *v1127;
  char *v1128;
  int v1129;
  int v1130;
  char *v1131;
  char *v1132;
  uint64_t v1133;
  unint64_t v1134;
  uint64_t v1135;
  unint64_t v1136;
  char *v1137;
  char *v1138;
  int v1139;
  int v1140;
  char *v1141;
  char *v1142;
  uint64_t v1143;
  unint64_t v1144;
  uint64_t v1145;
  unint64_t v1146;
  char *v1147;
  char *v1148;
  int v1149;
  char *v1150;
  char *v1151;
  uint64_t v1152;
  unint64_t v1153;
  uint64_t v1154;
  unint64_t v1155;
  char *v1156;
  char *v1157;
  int v1158;
  char **v1159;
  int v1160;
  char *v1161;
  char *v1162;
  uint64_t v1163;
  unint64_t v1164;
  uint64_t v1165;
  unint64_t v1166;
  char *v1167;
  char *v1168;
  int v1169;
  char *v1170;
  char *v1171;
  uint64_t v1172;
  unint64_t v1173;
  uint64_t v1174;
  unint64_t v1175;
  char *v1176;
  char *v1177;
  char *v1178;
  int v1179;
  unsigned __int32 *v1180;
  char *v1181;
  unsigned __int32 *v1182;
  unsigned __int32 *v1183;
  uint64_t v1184;
  unint64_t v1185;
  uint64_t v1186;
  unint64_t v1187;
  char *v1188;
  char *v1189;
  int v1190;
  unsigned __int32 *v1191;
  unsigned __int32 *v1192;
  uint64_t v1193;
  unint64_t v1194;
  uint64_t v1195;
  unint64_t v1196;
  char *v1197;
  unsigned __int32 *v1198;
  unsigned __int32 v1199;
  unsigned __int32 *v1200;
  unsigned __int32 *v1201;
  uint64_t v1202;
  unint64_t v1203;
  uint64_t v1204;
  unint64_t v1205;
  char *v1206;
  unsigned __int32 *v1207;
  unsigned __int32 v1208;
  unsigned __int32 *v1209;
  unsigned __int32 *v1210;
  uint64_t v1211;
  unint64_t v1212;
  uint64_t v1213;
  unint64_t v1214;
  char *v1215;
  char *v1216;
  int v1217;
  unsigned __int32 *v1218;
  unsigned __int32 *v1219;
  uint64_t v1220;
  unint64_t v1221;
  uint64_t v1222;
  unint64_t v1223;
  char *v1224;
  unsigned __int32 *v1225;
  unsigned __int32 v1226;
  unsigned __int32 *v1227;
  unsigned __int32 *v1228;
  uint64_t v1229;
  unint64_t v1230;
  uint64_t v1231;
  unint64_t v1232;
  char *v1233;
  unsigned __int32 *v1234;
  unsigned __int32 v1235;
  unsigned __int32 *v1236;
  unsigned __int32 *v1237;
  uint64_t v1238;
  unint64_t v1239;
  uint64_t v1240;
  unint64_t v1241;
  char *v1242;
  char *v1243;
  int v1244;
  unsigned __int32 *v1245;
  unsigned __int32 *v1246;
  uint64_t v1247;
  unint64_t v1248;
  uint64_t v1249;
  unint64_t v1250;
  char *v1251;
  unsigned __int32 *v1252;
  unsigned __int32 v1253;
  unsigned __int32 *v1254;
  unsigned __int32 *v1255;
  uint64_t v1256;
  unint64_t v1257;
  uint64_t v1258;
  unint64_t v1259;
  char *v1260;
  char *v1261;
  int v1262;
  unsigned __int32 *v1263;
  unsigned __int32 *v1264;
  uint64_t v1265;
  unint64_t v1266;
  uint64_t v1267;
  unint64_t v1268;
  char *v1269;
  char *v1270;
  int v1271;
  unsigned __int32 *v1272;
  unsigned __int32 *v1273;
  uint64_t v1274;
  unint64_t v1275;
  uint64_t v1276;
  unint64_t v1277;
  char *v1278;
  unsigned __int32 *v1279;
  unsigned __int32 v1280;
  unsigned __int32 *v1281;
  unsigned __int32 *v1282;
  uint64_t v1283;
  unint64_t v1284;
  uint64_t v1285;
  unint64_t v1286;
  char *v1287;
  char *v1288;
  char *v1289;
  int v1290;
  int v1291;
  char *v1292;
  char *v1293;
  char *v1294;
  char *v1295;
  uint64_t v1296;
  unint64_t v1297;
  uint64_t v1298;
  unint64_t v1299;
  char *v1300;
  char *v1301;
  int v1302;
  int v1303;
  char *v1304;
  char *v1305;
  uint64_t v1306;
  unint64_t v1307;
  uint64_t v1308;
  unint64_t v1309;
  char *v1310;
  char *v1311;
  int v1312;
  int v1313;
  char *v1314;
  char *v1315;
  uint64_t v1316;
  unint64_t v1317;
  uint64_t v1318;
  unint64_t v1319;
  char *v1320;
  char *v1321;
  int v1322;
  char *v1323;
  char *v1324;
  uint64_t v1325;
  unint64_t v1326;
  uint64_t v1327;
  unint64_t v1328;
  char *v1329;
  char *v1330;
  int v1331;
  char *v1332;
  char *v1333;
  uint64_t v1334;
  unint64_t v1335;
  uint64_t v1336;
  unint64_t v1337;
  char *v1338;
  char *v1339;
  int v1340;
  int v1341;
  char *v1342;
  char *v1343;
  uint64_t v1344;
  unint64_t v1345;
  uint64_t v1346;
  unint64_t v1347;
  char *v1348;
  char *v1349;
  char *v1350;
  int v1351;
  unsigned __int32 *v1352;
  char *v1353;
  unsigned __int32 *v1354;
  unsigned __int32 *v1355;
  uint64_t v1356;
  unint64_t v1357;
  uint64_t v1358;
  unint64_t v1359;
  char *v1360;
  char *v1361;
  int v1362;
  unsigned __int32 *v1363;
  unsigned __int32 *v1364;
  uint64_t v1365;
  unint64_t v1366;
  uint64_t v1367;
  unint64_t v1368;
  char *v1369;
  char *v1370;
  int v1371;
  unsigned __int32 *v1372;
  unsigned __int32 *v1373;
  uint64_t v1374;
  unint64_t v1375;
  uint64_t v1376;
  unint64_t v1377;
  char *v1378;
  unsigned __int32 *v1379;
  unsigned __int32 v1380;
  unsigned __int32 *v1381;
  unsigned __int32 *v1382;
  uint64_t v1383;
  unint64_t v1384;
  uint64_t v1385;
  unint64_t v1386;
  char *v1387;
  char *v1388;
  int v1389;
  unsigned __int32 *v1390;
  unsigned __int32 *v1391;
  uint64_t v1392;
  unint64_t v1393;
  uint64_t v1394;
  unint64_t v1395;
  char *v1396;
  char *v1397;
  int v1398;
  unsigned __int32 *v1399;
  unsigned __int32 *v1400;
  uint64_t v1401;
  unint64_t v1402;
  uint64_t v1403;
  unint64_t v1404;
  char *v1405;
  unsigned __int32 *v1406;
  unsigned __int32 v1407;
  unsigned __int32 v1408;
  unsigned __int32 *v1409;
  unsigned __int32 *v1410;
  uint64_t v1411;
  unint64_t v1412;
  uint64_t v1413;
  unint64_t v1414;
  char *v1415;
  char *v1416;
  unsigned __int32 *v1417;
  unsigned __int32 v1418;
  unsigned __int32 *v1419;
  unsigned __int32 *v1420;
  uint64_t v1421;
  unint64_t v1422;
  uint64_t v1423;
  unint64_t v1424;
  char *v1425;
  char *v1426;
  int v1427;
  unsigned __int32 *v1428;
  unsigned __int32 *v1429;
  uint64_t v1430;
  unint64_t v1431;
  uint64_t v1432;
  unint64_t v1433;
  char *v1434;
  char *v1435;
  int v1436;
  unsigned __int32 *v1437;
  unsigned __int32 *v1438;
  uint64_t v1439;
  unint64_t v1440;
  uint64_t v1441;
  unint64_t v1442;
  char *v1443;
  char *v1444;
  int v1445;
  unsigned __int32 *v1446;
  unsigned __int32 *v1447;
  uint64_t v1448;
  unint64_t v1449;
  uint64_t v1450;
  unint64_t v1451;
  char *v1452;
  char *v1453;
  int v1454;
  unsigned __int32 *v1455;
  unsigned __int32 *v1456;
  uint64_t v1457;
  unint64_t v1458;
  uint64_t v1459;
  unint64_t v1460;
  char *v1461;
  char *v1462;
  char *v1463;
  int v1464;
  int v1465;
  char *v1466;
  char *v1467;
  char *v1468;
  char *v1469;
  uint64_t v1470;
  unint64_t v1471;
  uint64_t v1472;
  unint64_t v1473;
  char *v1474;
  char *v1475;
  int v1476;
  int v1477;
  char *v1478;
  char *v1479;
  uint64_t v1480;
  unint64_t v1481;
  uint64_t v1482;
  unint64_t v1483;
  char *v1484;
  char *v1485;
  int v1486;
  int v1487;
  char *v1488;
  char *v1489;
  uint64_t v1490;
  unint64_t v1491;
  uint64_t v1492;
  unint64_t v1493;
  char *v1494;
  char *v1495;
  int v1496;
  char *v1497;
  char *v1498;
  uint64_t v1499;
  unint64_t v1500;
  uint64_t v1501;
  unint64_t v1502;
  char *v1503;
  char *v1504;
  int v1505;
  char *v1506;
  char *v1507;
  uint64_t v1508;
  unint64_t v1509;
  uint64_t v1510;
  unint64_t v1511;
  char *v1512;
  char *v1513;
  int v1514;
  int v1515;
  char *v1516;
  char *v1517;
  uint64_t v1518;
  unint64_t v1519;
  uint64_t v1520;
  unint64_t v1521;
  char *v1522;
  char *v1523;
  char *v1524;
  int v1525;
  char **v1526;
  __n128 v1527;

  v1527 = a4;
  v9 = (unsigned __int32 **)(a2 + 8);
  v8 = *(unsigned __int32 **)(a2 + 8);
  v10 = *(unsigned __int32 **)a2;
  v11 = ((uint64_t)v8 - *(_QWORD *)a2) >> 2;
  v13 = (char **)(a2 + 16);
  v12 = *(char **)(a2 + 16);
  if (!a1)
  {
    if (v8 >= (unsigned __int32 *)v12)
    {
      v21 = v11 + 1;
      if ((v11 + 1) >> 62)
        goto LABEL_2554;
      v22 = v12 - (char *)v10;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        v24 = (char *)sub_1DCAE4D04((uint64_t)v13, v23);
        a4.n128_u64[0] = v1527.n128_u64[0];
        v25 = v24;
        v10 = *(unsigned __int32 **)a2;
        v8 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v25 = 0;
      }
      v36 = &v25[4 * v11];
      v12 = &v25[4 * v23];
      *(_DWORD *)v36 = a4.n128_u32[0];
      v15 = (unsigned __int32 *)(v36 + 4);
      while (v8 != v10)
      {
        v37 = *--v8;
        *((_DWORD *)v36 - 1) = v37;
        v36 -= 4;
      }
      *(_QWORD *)a2 = v36;
      *(_QWORD *)(a2 + 8) = v15;
      *(_QWORD *)(a2 + 16) = v12;
      if (v10)
      {
        operator delete(v10);
        a4.n128_u32[1] = v1527.n128_u32[1];
        v12 = *v13;
      }
    }
    else
    {
      *v8 = a4.n128_u32[0];
      v15 = v8 + 1;
    }
    *v9 = v15;
    v38 = a4.n128_u32[1];
    if (v15 >= (unsigned __int32 *)v12)
    {
      v40 = *(unsigned __int32 **)a2;
      v41 = ((uint64_t)v15 - *(_QWORD *)a2) >> 2;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62)
        goto LABEL_2554;
      v43 = v12 - (char *)v40;
      if (v43 >> 1 > v42)
        v42 = v43 >> 1;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
        v44 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        v45 = (char *)sub_1DCAE4D04((uint64_t)v13, v44);
        v40 = *(unsigned __int32 **)a2;
        v15 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v45 = 0;
      }
      v56 = (unsigned __int32 *)&v45[4 * v41];
      v12 = &v45[4 * v44];
      *v56 = v38;
      v39 = v56 + 1;
      while (v15 != v40)
      {
        v57 = *--v15;
        *--v56 = v57;
      }
      *(_QWORD *)a2 = v56;
      *(_QWORD *)(a2 + 8) = v39;
      *(_QWORD *)(a2 + 16) = v12;
      if (v40)
      {
        operator delete(v40);
        v12 = *v13;
      }
    }
    else
    {
      *v15 = a4.n128_u32[1];
      v39 = v15 + 1;
    }
    *v9 = v39;
    if (v39 >= (unsigned __int32 *)v12)
    {
      v59 = *(unsigned __int32 **)a2;
      v60 = ((uint64_t)v39 - *(_QWORD *)a2) >> 2;
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 62)
        goto LABEL_2554;
      v62 = v12 - (char *)v59;
      if (v62 >> 1 > v61)
        v61 = v62 >> 1;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
        v63 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v63 = v61;
      if (v63)
      {
        v64 = (char *)sub_1DCAE4D04((uint64_t)v13, v63);
        v59 = *(unsigned __int32 **)a2;
        v39 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v64 = 0;
      }
      v74 = &v64[4 * v60];
      v12 = &v64[4 * v63];
      *(_DWORD *)v74 = v1527.n128_u32[2];
      v58 = (unsigned __int32 *)(v74 + 4);
      while (v39 != v59)
      {
        v75 = *--v39;
        *((_DWORD *)v74 - 1) = v75;
        v74 -= 4;
      }
      *(_QWORD *)a2 = v74;
      *(_QWORD *)(a2 + 8) = v58;
      *(_QWORD *)(a2 + 16) = v12;
      if (v59)
      {
        operator delete(v59);
        v12 = *v13;
      }
    }
    else
    {
      *v39 = v1527.n128_u32[2];
      v58 = v39 + 1;
    }
    *v9 = v58;
    if (v58 >= (unsigned __int32 *)v12)
    {
      v77 = *(unsigned __int32 **)a2;
      v78 = ((uint64_t)v58 - *(_QWORD *)a2) >> 2;
      v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 62)
        goto LABEL_2554;
      v80 = v12 - (char *)v77;
      if (v80 >> 1 > v79)
        v79 = v80 >> 1;
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
        v81 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v81 = v79;
      if (v81)
      {
        v82 = (char *)sub_1DCAE4D04((uint64_t)v13, v81);
        v77 = *(unsigned __int32 **)a2;
        v58 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v82 = 0;
      }
      v92 = &v82[4 * v78];
      v12 = &v82[4 * v81];
      *(_DWORD *)v92 = a5.n128_u32[0];
      v76 = (unsigned __int32 *)(v92 + 4);
      while (v58 != v77)
      {
        v93 = *--v58;
        *((_DWORD *)v92 - 1) = v93;
        v92 -= 4;
      }
      *(_QWORD *)a2 = v92;
      *(_QWORD *)(a2 + 8) = v76;
      *(_QWORD *)(a2 + 16) = v12;
      if (v77)
      {
        operator delete(v77);
        v12 = *v13;
      }
    }
    else
    {
      *v58 = a5.n128_u32[0];
      v76 = v58 + 1;
    }
    *v9 = v76;
    if (v76 >= (unsigned __int32 *)v12)
    {
      v95 = *(unsigned __int32 **)a2;
      v96 = ((uint64_t)v76 - *(_QWORD *)a2) >> 2;
      v97 = v96 + 1;
      if ((unint64_t)(v96 + 1) >> 62)
        goto LABEL_2554;
      v98 = v12 - (char *)v95;
      if (v98 >> 1 > v97)
        v97 = v98 >> 1;
      if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL)
        v99 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v99 = v97;
      if (v99)
      {
        v100 = (char *)sub_1DCAE4D04((uint64_t)v13, v99);
        v95 = *(unsigned __int32 **)a2;
        v76 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v100 = 0;
      }
      v110 = (unsigned __int32 *)&v100[4 * v96];
      v12 = &v100[4 * v99];
      *v110 = v38;
      v94 = v110 + 1;
      while (v76 != v95)
      {
        v111 = *--v76;
        *--v110 = v111;
      }
      *(_QWORD *)a2 = v110;
      *(_QWORD *)(a2 + 8) = v94;
      *(_QWORD *)(a2 + 16) = v12;
      if (v95)
      {
        operator delete(v95);
        v12 = *v13;
      }
    }
    else
    {
      *v76 = v38;
      v94 = v76 + 1;
    }
    *v9 = v94;
    if (v94 >= (unsigned __int32 *)v12)
    {
      v113 = *(unsigned __int32 **)a2;
      v114 = ((uint64_t)v94 - *(_QWORD *)a2) >> 2;
      v115 = v114 + 1;
      if ((unint64_t)(v114 + 1) >> 62)
        goto LABEL_2554;
      v116 = v12 - (char *)v113;
      if (v116 >> 1 > v115)
        v115 = v116 >> 1;
      if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL)
        v117 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v117 = v115;
      if (v117)
      {
        v118 = (char *)sub_1DCAE4D04((uint64_t)v13, v117);
        v113 = *(unsigned __int32 **)a2;
        v94 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v118 = 0;
      }
      v128 = &v118[4 * v114];
      v12 = &v118[4 * v117];
      *(_DWORD *)v128 = v1527.n128_u32[2];
      v112 = (unsigned __int32 *)(v128 + 4);
      while (v94 != v113)
      {
        v129 = *--v94;
        *((_DWORD *)v128 - 1) = v129;
        v128 -= 4;
      }
      *(_QWORD *)a2 = v128;
      *(_QWORD *)(a2 + 8) = v112;
      *(_QWORD *)(a2 + 16) = v12;
      if (v113)
      {
        operator delete(v113);
        v12 = *v13;
      }
    }
    else
    {
      *v94 = v1527.n128_u32[2];
      v112 = v94 + 1;
    }
    *v9 = v112;
    if (v112 >= (unsigned __int32 *)v12)
    {
      v131 = *(unsigned __int32 **)a2;
      v132 = ((uint64_t)v112 - *(_QWORD *)a2) >> 2;
      v133 = v132 + 1;
      if ((unint64_t)(v132 + 1) >> 62)
        goto LABEL_2554;
      v134 = v12 - (char *)v131;
      if (v134 >> 1 > v133)
        v133 = v134 >> 1;
      if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
        v135 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v135 = v133;
      if (v135)
      {
        v136 = (char *)sub_1DCAE4D04((uint64_t)v13, v135);
        v131 = *(unsigned __int32 **)a2;
        v112 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v136 = 0;
      }
      v146 = &v136[4 * v132];
      v12 = &v136[4 * v135];
      *(_DWORD *)v146 = v1527.n128_u32[0];
      v130 = (unsigned __int32 *)(v146 + 4);
      while (v112 != v131)
      {
        v147 = *--v112;
        *((_DWORD *)v146 - 1) = v147;
        v146 -= 4;
      }
      *(_QWORD *)a2 = v146;
      *(_QWORD *)(a2 + 8) = v130;
      *(_QWORD *)(a2 + 16) = v12;
      if (v131)
      {
        operator delete(v131);
        v12 = *v13;
      }
    }
    else
    {
      *v112 = v1527.n128_u32[0];
      v130 = v112 + 1;
    }
    *v9 = v130;
    if (v130 >= (unsigned __int32 *)v12)
    {
      v149 = *(unsigned __int32 **)a2;
      v150 = ((uint64_t)v130 - *(_QWORD *)a2) >> 2;
      v151 = v150 + 1;
      if ((unint64_t)(v150 + 1) >> 62)
        goto LABEL_2554;
      v152 = v12 - (char *)v149;
      if (v152 >> 1 > v151)
        v151 = v152 >> 1;
      if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL)
        v153 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v153 = v151;
      if (v153)
      {
        v154 = (char *)sub_1DCAE4D04((uint64_t)v13, v153);
        v149 = *(unsigned __int32 **)a2;
        v130 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v154 = 0;
      }
      v164 = &v154[4 * v150];
      v12 = &v154[4 * v153];
      *(_DWORD *)v164 = a5.n128_u32[1];
      v148 = (unsigned __int32 *)(v164 + 4);
      while (v130 != v149)
      {
        v165 = *--v130;
        *((_DWORD *)v164 - 1) = v165;
        v164 -= 4;
      }
      *(_QWORD *)a2 = v164;
      *(_QWORD *)(a2 + 8) = v148;
      *(_QWORD *)(a2 + 16) = v12;
      if (v149)
      {
        operator delete(v149);
        v12 = *v13;
      }
    }
    else
    {
      *v130 = a5.n128_u32[1];
      v148 = v130 + 1;
    }
    *v9 = v148;
    if (v148 >= (unsigned __int32 *)v12)
    {
      v167 = *(unsigned __int32 **)a2;
      v168 = ((uint64_t)v148 - *(_QWORD *)a2) >> 2;
      v169 = v168 + 1;
      if ((unint64_t)(v168 + 1) >> 62)
        goto LABEL_2554;
      v170 = v12 - (char *)v167;
      if (v170 >> 1 > v169)
        v169 = v170 >> 1;
      if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFFCLL)
        v171 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v171 = v169;
      if (v171)
      {
        v172 = (char *)sub_1DCAE4D04((uint64_t)v13, v171);
        v167 = *(unsigned __int32 **)a2;
        v148 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v172 = 0;
      }
      v182 = &v172[4 * v168];
      v12 = &v172[4 * v171];
      *(_DWORD *)v182 = v1527.n128_u32[2];
      v166 = (unsigned __int32 *)(v182 + 4);
      while (v148 != v167)
      {
        v183 = *--v148;
        *((_DWORD *)v182 - 1) = v183;
        v182 -= 4;
      }
      *(_QWORD *)a2 = v182;
      *(_QWORD *)(a2 + 8) = v166;
      *(_QWORD *)(a2 + 16) = v12;
      if (v167)
      {
        operator delete(v167);
        v12 = *v13;
      }
    }
    else
    {
      *v148 = v1527.n128_u32[2];
      v166 = v148 + 1;
    }
    *v9 = v166;
    if (v166 >= (unsigned __int32 *)v12)
    {
      v185 = *(unsigned __int32 **)a2;
      v186 = ((uint64_t)v166 - *(_QWORD *)a2) >> 2;
      v187 = v186 + 1;
      if ((unint64_t)(v186 + 1) >> 62)
        goto LABEL_2554;
      v188 = v12 - (char *)v185;
      if (v188 >> 1 > v187)
        v187 = v188 >> 1;
      if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFFCLL)
        v189 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v189 = v187;
      if (v189)
      {
        v190 = (char *)sub_1DCAE4D04((uint64_t)v13, v189);
        v185 = *(unsigned __int32 **)a2;
        v166 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v190 = 0;
      }
      v200 = &v190[4 * v186];
      v12 = &v190[4 * v189];
      *(_DWORD *)v200 = a5.n128_u32[0];
      v184 = (unsigned __int32 *)(v200 + 4);
      while (v166 != v185)
      {
        v201 = *--v166;
        *((_DWORD *)v200 - 1) = v201;
        v200 -= 4;
      }
      *(_QWORD *)a2 = v200;
      *(_QWORD *)(a2 + 8) = v184;
      *(_QWORD *)(a2 + 16) = v12;
      if (v185)
      {
        operator delete(v185);
        v12 = *v13;
      }
    }
    else
    {
      *v166 = a5.n128_u32[0];
      v184 = v166 + 1;
    }
    *v9 = v184;
    if (v184 >= (unsigned __int32 *)v12)
    {
      v203 = *(unsigned __int32 **)a2;
      v204 = ((uint64_t)v184 - *(_QWORD *)a2) >> 2;
      v205 = v204 + 1;
      if ((unint64_t)(v204 + 1) >> 62)
        goto LABEL_2554;
      v206 = v12 - (char *)v203;
      if (v206 >> 1 > v205)
        v205 = v206 >> 1;
      if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFFCLL)
        v207 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v207 = v205;
      if (v207)
      {
        v208 = (char *)sub_1DCAE4D04((uint64_t)v13, v207);
        v203 = *(unsigned __int32 **)a2;
        v184 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v208 = 0;
      }
      v218 = &v208[4 * v204];
      v12 = &v208[4 * v207];
      *(_DWORD *)v218 = a5.n128_u32[1];
      v202 = (unsigned __int32 *)(v218 + 4);
      while (v184 != v203)
      {
        v219 = *--v184;
        *((_DWORD *)v218 - 1) = v219;
        v218 -= 4;
      }
      *(_QWORD *)a2 = v218;
      *(_QWORD *)(a2 + 8) = v202;
      *(_QWORD *)(a2 + 16) = v12;
      if (v203)
      {
        operator delete(v203);
        v12 = *v13;
      }
    }
    else
    {
      *v184 = a5.n128_u32[1];
      v202 = v184 + 1;
    }
    *v9 = v202;
    if (v202 >= (unsigned __int32 *)v12)
    {
      v221 = *(unsigned __int32 **)a2;
      v222 = ((uint64_t)v202 - *(_QWORD *)a2) >> 2;
      v223 = v222 + 1;
      if ((unint64_t)(v222 + 1) >> 62)
        goto LABEL_2554;
      v224 = v12 - (char *)v221;
      if (v224 >> 1 > v223)
        v223 = v224 >> 1;
      if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFFCLL)
        v225 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v225 = v223;
      if (v225)
      {
        v226 = (char *)sub_1DCAE4D04((uint64_t)v13, v225);
        v221 = *(unsigned __int32 **)a2;
        v202 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v226 = 0;
      }
      v241 = &v226[4 * v222];
      v12 = &v226[4 * v225];
      *(_DWORD *)v241 = v1527.n128_u32[2];
      v220 = (unsigned __int32 *)(v241 + 4);
      while (v202 != v221)
      {
        v242 = *--v202;
        *((_DWORD *)v241 - 1) = v242;
        v241 -= 4;
      }
      *(_QWORD *)a2 = v241;
      *(_QWORD *)(a2 + 8) = v220;
      *(_QWORD *)(a2 + 16) = v12;
      if (v221)
      {
        operator delete(v221);
        v12 = *v13;
      }
    }
    else
    {
      *v202 = v1527.n128_u32[2];
      v220 = v202 + 1;
    }
    *v9 = v220;
    if (v220 >= (unsigned __int32 *)v12)
    {
      v244 = *(unsigned __int32 **)a2;
      v245 = ((uint64_t)v220 - *(_QWORD *)a2) >> 2;
      v246 = v245 + 1;
      if ((unint64_t)(v245 + 1) >> 62)
        goto LABEL_2554;
      v247 = v12 - (char *)v244;
      if (v247 >> 1 > v246)
        v246 = v247 >> 1;
      if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL)
        v248 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v248 = v246;
      if (v248)
      {
        v249 = (char *)sub_1DCAE4D04((uint64_t)v13, v248);
        v244 = *(unsigned __int32 **)a2;
        v220 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v249 = 0;
      }
      v260 = &v249[4 * v245];
      v12 = &v249[4 * v248];
      *(_DWORD *)v260 = v1527.n128_u32[0];
      v243 = (unsigned __int32 *)(v260 + 4);
      while (v220 != v244)
      {
        v261 = *--v220;
        *((_DWORD *)v260 - 1) = v261;
        v260 -= 4;
      }
      *(_QWORD *)a2 = v260;
      *(_QWORD *)(a2 + 8) = v243;
      *(_QWORD *)(a2 + 16) = v12;
      if (v244)
      {
        operator delete(v244);
        v12 = *v13;
      }
    }
    else
    {
      *v220 = v1527.n128_u32[0];
      v243 = v220 + 1;
    }
    *v9 = v243;
    if (v243 >= (unsigned __int32 *)v12)
    {
      v263 = *(unsigned __int32 **)a2;
      v264 = ((uint64_t)v243 - *(_QWORD *)a2) >> 2;
      v265 = v264 + 1;
      if ((unint64_t)(v264 + 1) >> 62)
        goto LABEL_2554;
      v266 = v12 - (char *)v263;
      if (v266 >> 1 > v265)
        v265 = v266 >> 1;
      if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFFCLL)
        v267 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v267 = v265;
      if (v267)
      {
        v268 = (char *)sub_1DCAE4D04((uint64_t)v13, v267);
        v263 = *(unsigned __int32 **)a2;
        v243 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v268 = 0;
      }
      v279 = (unsigned __int32 *)&v268[4 * v264];
      v12 = &v268[4 * v267];
      *v279 = v38;
      v262 = v279 + 1;
      while (v243 != v263)
      {
        v280 = *--v243;
        *--v279 = v280;
      }
      *(_QWORD *)a2 = v279;
      *(_QWORD *)(a2 + 8) = v262;
      *(_QWORD *)(a2 + 16) = v12;
      if (v263)
      {
        operator delete(v263);
        v12 = *v13;
      }
    }
    else
    {
      *v243 = v38;
      v262 = v243 + 1;
    }
    *v9 = v262;
    if (v262 >= (unsigned __int32 *)v12)
    {
      v282 = *(unsigned __int32 **)a2;
      v283 = ((uint64_t)v262 - *(_QWORD *)a2) >> 2;
      v284 = v283 + 1;
      if ((unint64_t)(v283 + 1) >> 62)
        goto LABEL_2554;
      v285 = v12 - (char *)v282;
      if (v285 >> 1 > v284)
        v284 = v285 >> 1;
      if ((unint64_t)v285 >= 0x7FFFFFFFFFFFFFFCLL)
        v286 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v286 = v284;
      if (v286)
      {
        v287 = (char *)sub_1DCAE4D04((uint64_t)v13, v286);
        v282 = *(unsigned __int32 **)a2;
        v262 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v287 = 0;
      }
      v297 = &v287[4 * v283];
      v12 = &v287[4 * v286];
      *(_DWORD *)v297 = a5.n128_u32[2];
      v281 = (unsigned __int32 *)(v297 + 4);
      while (v262 != v282)
      {
        v298 = *--v262;
        *((_DWORD *)v297 - 1) = v298;
        v297 -= 4;
      }
      *(_QWORD *)a2 = v297;
      *(_QWORD *)(a2 + 8) = v281;
      *(_QWORD *)(a2 + 16) = v12;
      if (v282)
      {
        operator delete(v282);
        v12 = *v13;
      }
    }
    else
    {
      *v262 = a5.n128_u32[2];
      v281 = v262 + 1;
    }
    *v9 = v281;
    if (v281 >= (unsigned __int32 *)v12)
    {
      v300 = *(unsigned __int32 **)a2;
      v301 = ((uint64_t)v281 - *(_QWORD *)a2) >> 2;
      v302 = v301 + 1;
      if ((unint64_t)(v301 + 1) >> 62)
        goto LABEL_2554;
      v303 = v12 - (char *)v300;
      if (v303 >> 1 > v302)
        v302 = v303 >> 1;
      if ((unint64_t)v303 >= 0x7FFFFFFFFFFFFFFCLL)
        v304 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v304 = v302;
      if (v304)
      {
        v305 = (char *)sub_1DCAE4D04((uint64_t)v13, v304);
        v300 = *(unsigned __int32 **)a2;
        v281 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v305 = 0;
      }
      v316 = &v305[4 * v301];
      v12 = &v305[4 * v304];
      *(_DWORD *)v316 = a5.n128_u32[0];
      v299 = (unsigned __int32 *)(v316 + 4);
      while (v281 != v300)
      {
        v317 = *--v281;
        *((_DWORD *)v316 - 1) = v317;
        v316 -= 4;
      }
      *(_QWORD *)a2 = v316;
      *(_QWORD *)(a2 + 8) = v299;
      *(_QWORD *)(a2 + 16) = v12;
      if (v300)
      {
        operator delete(v300);
        v12 = *v13;
      }
    }
    else
    {
      *v281 = a5.n128_u32[0];
      v299 = v281 + 1;
    }
    *v9 = v299;
    if (v299 >= (unsigned __int32 *)v12)
    {
      v319 = *(unsigned __int32 **)a2;
      v320 = ((uint64_t)v299 - *(_QWORD *)a2) >> 2;
      v321 = v320 + 1;
      if ((unint64_t)(v320 + 1) >> 62)
        goto LABEL_2554;
      v322 = v12 - (char *)v319;
      if (v322 >> 1 > v321)
        v321 = v322 >> 1;
      if ((unint64_t)v322 >= 0x7FFFFFFFFFFFFFFCLL)
        v323 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v323 = v321;
      if (v323)
      {
        v324 = (char *)sub_1DCAE4D04((uint64_t)v13, v323);
        v319 = *(unsigned __int32 **)a2;
        v299 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v324 = 0;
      }
      v335 = (unsigned __int32 *)&v324[4 * v320];
      v12 = &v324[4 * v323];
      *v335 = v38;
      v318 = v335 + 1;
      while (v299 != v319)
      {
        v336 = *--v299;
        *--v335 = v336;
      }
      *(_QWORD *)a2 = v335;
      *(_QWORD *)(a2 + 8) = v318;
      *(_QWORD *)(a2 + 16) = v12;
      if (v319)
      {
        operator delete(v319);
        v12 = *v13;
      }
    }
    else
    {
      *v299 = v38;
      v318 = v299 + 1;
    }
    *v9 = v318;
    v337 = v1527.n128_u32[0];
    if (v318 >= (unsigned __int32 *)v12)
    {
      v339 = *(unsigned __int32 **)a2;
      v340 = ((uint64_t)v318 - *(_QWORD *)a2) >> 2;
      v341 = v340 + 1;
      if ((unint64_t)(v340 + 1) >> 62)
        goto LABEL_2554;
      v342 = v12 - (char *)v339;
      if (v342 >> 1 > v341)
        v341 = v342 >> 1;
      if ((unint64_t)v342 >= 0x7FFFFFFFFFFFFFFCLL)
        v343 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v343 = v341;
      if (v343)
      {
        v344 = (char *)sub_1DCAE4D04((uint64_t)v13, v343);
        v339 = *(unsigned __int32 **)a2;
        v318 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v344 = 0;
      }
      v357 = &v344[4 * v340];
      v12 = &v344[4 * v343];
      *(_DWORD *)v357 = a5.n128_u32[2];
      v338 = (unsigned __int32 *)(v357 + 4);
      while (v318 != v339)
      {
        v358 = *--v318;
        *((_DWORD *)v357 - 1) = v358;
        v357 -= 4;
      }
      *(_QWORD *)a2 = v357;
      *(_QWORD *)(a2 + 8) = v338;
      *(_QWORD *)(a2 + 16) = v12;
      if (v339)
      {
        operator delete(v339);
        v12 = *v13;
      }
      v337 = v1527.n128_u32[0];
    }
    else
    {
      *v318 = a5.n128_u32[2];
      v338 = v318 + 1;
    }
    *v9 = v338;
    if (v338 >= (unsigned __int32 *)v12)
    {
      v360 = *(unsigned __int32 **)a2;
      v361 = ((uint64_t)v338 - *(_QWORD *)a2) >> 2;
      v362 = v361 + 1;
      if ((unint64_t)(v361 + 1) >> 62)
        goto LABEL_2554;
      v363 = v12 - (char *)v360;
      if (v363 >> 1 > v362)
        v362 = v363 >> 1;
      if ((unint64_t)v363 >= 0x7FFFFFFFFFFFFFFCLL)
        v364 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v364 = v362;
      if (v364)
      {
        v365 = (char *)sub_1DCAE4D04((uint64_t)v13, v364);
        v337 = v1527.n128_u32[0];
        v366 = v365;
        v360 = *(unsigned __int32 **)a2;
        v338 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v366 = 0;
      }
      v376 = (unsigned __int32 *)&v366[4 * v361];
      v12 = &v366[4 * v364];
      *v376 = v337;
      v359 = v376 + 1;
      while (v338 != v360)
      {
        v377 = *--v338;
        *--v376 = v377;
      }
      *(_QWORD *)a2 = v376;
      *(_QWORD *)(a2 + 8) = v359;
      *(_QWORD *)(a2 + 16) = v12;
      if (v360)
      {
        operator delete(v360);
        v12 = *v13;
      }
    }
    else
    {
      *v338 = v337;
      v359 = v338 + 1;
    }
    *v9 = v359;
    if (v359 >= (unsigned __int32 *)v12)
    {
      v379 = *(unsigned __int32 **)a2;
      v380 = ((uint64_t)v359 - *(_QWORD *)a2) >> 2;
      v381 = v380 + 1;
      if ((unint64_t)(v380 + 1) >> 62)
        goto LABEL_2554;
      v382 = v12 - (char *)v379;
      if (v382 >> 1 > v381)
        v381 = v382 >> 1;
      if ((unint64_t)v382 >= 0x7FFFFFFFFFFFFFFCLL)
        v383 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v383 = v381;
      if (v383)
      {
        v384 = (char *)sub_1DCAE4D04((uint64_t)v13, v383);
        v379 = *(unsigned __int32 **)a2;
        v359 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v384 = 0;
      }
      v394 = &v384[4 * v380];
      v12 = &v384[4 * v383];
      *(_DWORD *)v394 = a5.n128_u32[1];
      v378 = (unsigned __int32 *)(v394 + 4);
      while (v359 != v379)
      {
        v395 = *--v359;
        *((_DWORD *)v394 - 1) = v395;
        v394 -= 4;
      }
      *(_QWORD *)a2 = v394;
      *(_QWORD *)(a2 + 8) = v378;
      *(_QWORD *)(a2 + 16) = v12;
      if (v379)
      {
        operator delete(v379);
        v12 = *v13;
      }
    }
    else
    {
      *v359 = a5.n128_u32[1];
      v378 = v359 + 1;
    }
    *v9 = v378;
    if (v378 >= (unsigned __int32 *)v12)
    {
      v397 = *(unsigned __int32 **)a2;
      v398 = ((uint64_t)v378 - *(_QWORD *)a2) >> 2;
      v399 = v398 + 1;
      if ((unint64_t)(v398 + 1) >> 62)
        goto LABEL_2554;
      v400 = v12 - (char *)v397;
      if (v400 >> 1 > v399)
        v399 = v400 >> 1;
      if ((unint64_t)v400 >= 0x7FFFFFFFFFFFFFFCLL)
        v401 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v401 = v399;
      if (v401)
      {
        v402 = (char *)sub_1DCAE4D04((uint64_t)v13, v401);
        v397 = *(unsigned __int32 **)a2;
        v378 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v402 = 0;
      }
      v412 = &v402[4 * v398];
      v12 = &v402[4 * v401];
      *(_DWORD *)v412 = a5.n128_u32[2];
      v396 = (unsigned __int32 *)(v412 + 4);
      while (v378 != v397)
      {
        v413 = *--v378;
        *((_DWORD *)v412 - 1) = v413;
        v412 -= 4;
      }
      *(_QWORD *)a2 = v412;
      *(_QWORD *)(a2 + 8) = v396;
      *(_QWORD *)(a2 + 16) = v12;
      if (v397)
      {
        operator delete(v397);
        v12 = *v13;
      }
    }
    else
    {
      *v378 = a5.n128_u32[2];
      v396 = v378 + 1;
    }
    *v9 = v396;
    if (v396 >= (unsigned __int32 *)v12)
    {
      v415 = *(unsigned __int32 **)a2;
      v416 = ((uint64_t)v396 - *(_QWORD *)a2) >> 2;
      v417 = v416 + 1;
      if ((unint64_t)(v416 + 1) >> 62)
        goto LABEL_2554;
      v418 = v12 - (char *)v415;
      if (v418 >> 1 > v417)
        v417 = v418 >> 1;
      if ((unint64_t)v418 >= 0x7FFFFFFFFFFFFFFCLL)
        v419 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v419 = v417;
      if (v419)
      {
        v420 = (char *)sub_1DCAE4D04((uint64_t)v13, v419);
        v415 = *(unsigned __int32 **)a2;
        v396 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v420 = 0;
      }
      v430 = &v420[4 * v416];
      v12 = &v420[4 * v419];
      *(_DWORD *)v430 = a5.n128_u32[0];
      v414 = (unsigned __int32 *)(v430 + 4);
      while (v396 != v415)
      {
        v431 = *--v396;
        *((_DWORD *)v430 - 1) = v431;
        v430 -= 4;
      }
      *(_QWORD *)a2 = v430;
      *(_QWORD *)(a2 + 8) = v414;
      *(_QWORD *)(a2 + 16) = v12;
      if (v415)
      {
        operator delete(v415);
        v12 = *v13;
      }
    }
    else
    {
      *v396 = a5.n128_u32[0];
      v414 = v396 + 1;
    }
    *v9 = v414;
    if (v414 >= (unsigned __int32 *)v12)
    {
      v433 = *(unsigned __int32 **)a2;
      v434 = ((uint64_t)v414 - *(_QWORD *)a2) >> 2;
      v435 = v434 + 1;
      if ((unint64_t)(v434 + 1) >> 62)
        goto LABEL_2554;
      v436 = v12 - (char *)v433;
      if (v436 >> 1 > v435)
        v435 = v436 >> 1;
      if ((unint64_t)v436 >= 0x7FFFFFFFFFFFFFFCLL)
        v437 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v437 = v435;
      if (v437)
      {
        v438 = (char *)sub_1DCAE4D04((uint64_t)v13, v437);
        v433 = *(unsigned __int32 **)a2;
        v414 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v438 = 0;
      }
      v448 = &v438[4 * v434];
      v12 = &v438[4 * v437];
      *(_DWORD *)v448 = a5.n128_u32[1];
      v432 = (unsigned __int32 *)(v448 + 4);
      while (v414 != v433)
      {
        v449 = *--v414;
        *((_DWORD *)v448 - 1) = v449;
        v448 -= 4;
      }
      *(_QWORD *)a2 = v448;
      *(_QWORD *)(a2 + 8) = v432;
      *(_QWORD *)(a2 + 16) = v12;
      if (v433)
      {
        operator delete(v433);
        v12 = *v13;
      }
    }
    else
    {
      *v414 = a5.n128_u32[1];
      v432 = v414 + 1;
    }
    *v9 = v432;
    if (v432 >= (unsigned __int32 *)v12)
    {
      v451 = *(unsigned __int32 **)a2;
      v452 = ((uint64_t)v432 - *(_QWORD *)a2) >> 2;
      v453 = v452 + 1;
      if ((unint64_t)(v452 + 1) >> 62)
        goto LABEL_2554;
      v454 = v12 - (char *)v451;
      if (v454 >> 1 > v453)
        v453 = v454 >> 1;
      if ((unint64_t)v454 >= 0x7FFFFFFFFFFFFFFCLL)
        v455 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v455 = v453;
      if (v455)
      {
        v456 = (char *)sub_1DCAE4D04((uint64_t)v13, v455);
        v451 = *(unsigned __int32 **)a2;
        v432 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v456 = 0;
      }
      v466 = &v456[4 * v452];
      v467 = &v456[4 * v455];
      *(_DWORD *)v466 = a5.n128_u32[2];
      v450 = (unsigned __int32 *)(v466 + 4);
      while (v432 != v451)
      {
        v468 = *--v432;
        *((_DWORD *)v466 - 1) = v468;
        v466 -= 4;
      }
      *(_QWORD *)a2 = v466;
      *(_QWORD *)(a2 + 8) = v450;
      *(_QWORD *)(a2 + 16) = v467;
      if (v451)
        operator delete(v451);
    }
    else
    {
      *v432 = a5.n128_u32[2];
      v450 = v432 + 1;
    }
    v469 = v11 / 3;
    *v9 = v450;
    v471 = a3 + 2;
    v470 = a3[2];
    v472 = a3[1];
    if (v472 >= v470)
    {
      v474 = *a3;
      v475 = (v472 - *a3) >> 2;
      v476 = v475 + 1;
      if ((unint64_t)(v475 + 1) >> 62)
        goto LABEL_2555;
      v477 = v470 - v474;
      if (v477 >> 1 > v476)
        v476 = v477 >> 1;
      if ((unint64_t)v477 >= 0x7FFFFFFFFFFFFFFCLL)
        v478 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v478 = v476;
      if (v478)
      {
        v479 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v478);
        v474 = *a3;
        v472 = a3[1];
      }
      else
      {
        v479 = 0;
      }
      v489 = &v479[4 * v475];
      v470 = &v479[4 * v478];
      *(_DWORD *)v489 = v469;
      v473 = v489 + 4;
      while (v472 != v474)
      {
        v490 = *((_DWORD *)v472 - 1);
        v472 -= 4;
        *((_DWORD *)v489 - 1) = v490;
        v489 -= 4;
      }
      *a3 = v489;
      a3[1] = v473;
      a3[2] = v470;
      if (v474)
      {
        operator delete(v474);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v472 = v469;
      v473 = v472 + 4;
    }
    a3[1] = v473;
    v491 = v469 + 1;
    if (v473 >= v470)
    {
      v493 = *a3;
      v494 = (v473 - *a3) >> 2;
      v495 = v494 + 1;
      if ((unint64_t)(v494 + 1) >> 62)
        goto LABEL_2555;
      v496 = v470 - v493;
      if (v496 >> 1 > v495)
        v495 = v496 >> 1;
      if ((unint64_t)v496 >= 0x7FFFFFFFFFFFFFFCLL)
        v497 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v497 = v495;
      if (v497)
      {
        v498 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v497);
        v493 = *a3;
        v473 = a3[1];
      }
      else
      {
        v498 = 0;
      }
      v508 = &v498[4 * v494];
      v470 = &v498[4 * v497];
      *(_DWORD *)v508 = v491;
      v492 = v508 + 4;
      while (v473 != v493)
      {
        v509 = *((_DWORD *)v473 - 1);
        v473 -= 4;
        *((_DWORD *)v508 - 1) = v509;
        v508 -= 4;
      }
      *a3 = v508;
      a3[1] = v492;
      a3[2] = v470;
      if (v493)
      {
        operator delete(v493);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v473 = v491;
      v492 = v473 + 4;
    }
    a3[1] = v492;
    if (v492 >= v470)
    {
      v511 = *a3;
      v512 = (v492 - *a3) >> 2;
      v513 = v512 + 1;
      if ((unint64_t)(v512 + 1) >> 62)
        goto LABEL_2555;
      v514 = v470 - v511;
      if (v514 >> 1 > v513)
        v513 = v514 >> 1;
      if ((unint64_t)v514 >= 0x7FFFFFFFFFFFFFFCLL)
        v515 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v515 = v513;
      if (v515)
      {
        v516 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v515);
        v511 = *a3;
        v492 = a3[1];
      }
      else
      {
        v516 = 0;
      }
      v526 = &v516[4 * v512];
      v470 = &v516[4 * v515];
      *(_DWORD *)v526 = v469;
      v510 = v526 + 4;
      while (v492 != v511)
      {
        v527 = *((_DWORD *)v492 - 1);
        v492 -= 4;
        *((_DWORD *)v526 - 1) = v527;
        v526 -= 4;
      }
      *a3 = v526;
      a3[1] = v510;
      a3[2] = v470;
      if (v511)
      {
        operator delete(v511);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v492 = v469;
      v510 = v492 + 4;
    }
    a3[1] = v510;
    v528 = v469 + 2;
    if (v510 >= v470)
    {
      v530 = *a3;
      v531 = (v510 - *a3) >> 2;
      v532 = v531 + 1;
      if ((unint64_t)(v531 + 1) >> 62)
        goto LABEL_2555;
      v533 = v470 - v530;
      if (v533 >> 1 > v532)
        v532 = v533 >> 1;
      if ((unint64_t)v533 >= 0x7FFFFFFFFFFFFFFCLL)
        v534 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v534 = v532;
      if (v534)
      {
        v535 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v534);
        v530 = *a3;
        v510 = a3[1];
      }
      else
      {
        v535 = 0;
      }
      v545 = &v535[4 * v531];
      v470 = &v535[4 * v534];
      *(_DWORD *)v545 = v528;
      v529 = v545 + 4;
      while (v510 != v530)
      {
        v546 = *((_DWORD *)v510 - 1);
        v510 -= 4;
        *((_DWORD *)v545 - 1) = v546;
        v545 -= 4;
      }
      *a3 = v545;
      a3[1] = v529;
      a3[2] = v470;
      if (v530)
      {
        operator delete(v530);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v510 = v528;
      v529 = v510 + 4;
    }
    a3[1] = v529;
    if (v529 >= v470)
    {
      v548 = *a3;
      v549 = (v529 - *a3) >> 2;
      v550 = v549 + 1;
      if ((unint64_t)(v549 + 1) >> 62)
        goto LABEL_2555;
      v551 = v470 - v548;
      if (v551 >> 1 > v550)
        v550 = v551 >> 1;
      if ((unint64_t)v551 >= 0x7FFFFFFFFFFFFFFCLL)
        v552 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v552 = v550;
      if (v552)
      {
        v553 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v552);
        v548 = *a3;
        v529 = a3[1];
      }
      else
      {
        v553 = 0;
      }
      v563 = &v553[4 * v549];
      v470 = &v553[4 * v552];
      *(_DWORD *)v563 = v469;
      v547 = v563 + 4;
      while (v529 != v548)
      {
        v564 = *((_DWORD *)v529 - 1);
        v529 -= 4;
        *((_DWORD *)v563 - 1) = v564;
        v563 -= 4;
      }
      *a3 = v563;
      a3[1] = v547;
      a3[2] = v470;
      if (v548)
      {
        operator delete(v548);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v529 = v469;
      v547 = v529 + 4;
    }
    a3[1] = v547;
    v565 = v469 + 4;
    if (v547 >= v470)
    {
      v567 = *a3;
      v568 = (v547 - *a3) >> 2;
      v569 = v568 + 1;
      if ((unint64_t)(v568 + 1) >> 62)
        goto LABEL_2555;
      v570 = v470 - v567;
      if (v570 >> 1 > v569)
        v569 = v570 >> 1;
      if ((unint64_t)v570 >= 0x7FFFFFFFFFFFFFFCLL)
        v571 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v571 = v569;
      if (v571)
      {
        v572 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v571);
        v567 = *a3;
        v547 = a3[1];
      }
      else
      {
        v572 = 0;
      }
      v586 = &v572[4 * v568];
      v470 = &v572[4 * v571];
      *(_DWORD *)v586 = v565;
      v566 = v586 + 4;
      while (v547 != v567)
      {
        v587 = *((_DWORD *)v547 - 1);
        v547 -= 4;
        *((_DWORD *)v586 - 1) = v587;
        v586 -= 4;
      }
      *a3 = v586;
      a3[1] = v566;
      a3[2] = v470;
      if (v567)
      {
        operator delete(v567);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v547 = v565;
      v566 = v547 + 4;
    }
    a3[1] = v566;
    if (v566 >= v470)
    {
      v589 = *a3;
      v590 = (v566 - *a3) >> 2;
      v591 = v590 + 1;
      if ((unint64_t)(v590 + 1) >> 62)
        goto LABEL_2555;
      v592 = v470 - v589;
      if (v592 >> 1 > v591)
        v591 = v592 >> 1;
      if ((unint64_t)v592 >= 0x7FFFFFFFFFFFFFFCLL)
        v593 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v593 = v591;
      if (v593)
      {
        v594 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v593);
        v589 = *a3;
        v566 = a3[1];
      }
      else
      {
        v594 = 0;
      }
      v605 = &v594[4 * v590];
      v470 = &v594[4 * v593];
      *(_DWORD *)v605 = v491;
      v588 = v605 + 4;
      while (v566 != v589)
      {
        v606 = *((_DWORD *)v566 - 1);
        v566 -= 4;
        *((_DWORD *)v605 - 1) = v606;
        v605 -= 4;
      }
      *a3 = v605;
      a3[1] = v588;
      a3[2] = v470;
      if (v589)
      {
        operator delete(v589);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v566 = v491;
      v588 = v566 + 4;
    }
    a3[1] = v588;
    v607 = v469 + 3;
    if (v588 >= v470)
    {
      v609 = *a3;
      v610 = (v588 - *a3) >> 2;
      v611 = v610 + 1;
      if ((unint64_t)(v610 + 1) >> 62)
        goto LABEL_2555;
      v612 = v470 - v609;
      if (v612 >> 1 > v611)
        v611 = v612 >> 1;
      if ((unint64_t)v612 >= 0x7FFFFFFFFFFFFFFCLL)
        v613 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v613 = v611;
      if (v613)
      {
        v614 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v613);
        v609 = *a3;
        v588 = a3[1];
      }
      else
      {
        v614 = 0;
      }
      v625 = &v614[4 * v610];
      v470 = &v614[4 * v613];
      *(_DWORD *)v625 = v607;
      v608 = v625 + 4;
      while (v588 != v609)
      {
        v626 = *((_DWORD *)v588 - 1);
        v588 -= 4;
        *((_DWORD *)v625 - 1) = v626;
        v625 -= 4;
      }
      *a3 = v625;
      a3[1] = v608;
      a3[2] = v470;
      if (v609)
      {
        operator delete(v609);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v588 = v607;
      v608 = v588 + 4;
    }
    a3[1] = v608;
    if (v608 >= v470)
    {
      v628 = *a3;
      v629 = (v608 - *a3) >> 2;
      v630 = v629 + 1;
      if ((unint64_t)(v629 + 1) >> 62)
        goto LABEL_2555;
      v631 = v470 - v628;
      if (v631 >> 1 > v630)
        v630 = v631 >> 1;
      if ((unint64_t)v631 >= 0x7FFFFFFFFFFFFFFCLL)
        v632 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v632 = v630;
      if (v632)
      {
        v633 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v632);
        v628 = *a3;
        v608 = a3[1];
      }
      else
      {
        v633 = 0;
      }
      v643 = &v633[4 * v629];
      v470 = &v633[4 * v632];
      *(_DWORD *)v643 = v491;
      v627 = v643 + 4;
      while (v608 != v628)
      {
        v644 = *((_DWORD *)v608 - 1);
        v608 -= 4;
        *((_DWORD *)v643 - 1) = v644;
        v643 -= 4;
      }
      *a3 = v643;
      a3[1] = v627;
      a3[2] = v470;
      if (v628)
      {
        operator delete(v628);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v608 = v491;
      v627 = v608 + 4;
    }
    a3[1] = v627;
    v645 = v469 + 5;
    if (v627 >= v470)
    {
      v647 = *a3;
      v648 = (v627 - *a3) >> 2;
      v649 = v648 + 1;
      if ((unint64_t)(v648 + 1) >> 62)
        goto LABEL_2555;
      v650 = v470 - v647;
      if (v650 >> 1 > v649)
        v649 = v650 >> 1;
      if ((unint64_t)v650 >= 0x7FFFFFFFFFFFFFFCLL)
        v651 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v651 = v649;
      if (v651)
      {
        v652 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v651);
        v647 = *a3;
        v627 = a3[1];
      }
      else
      {
        v652 = 0;
      }
      v663 = &v652[4 * v648];
      v470 = &v652[4 * v651];
      *(_DWORD *)v663 = v645;
      v646 = v663 + 4;
      while (v627 != v647)
      {
        v664 = *((_DWORD *)v627 - 1);
        v627 -= 4;
        *((_DWORD *)v663 - 1) = v664;
        v663 -= 4;
      }
      *a3 = v663;
      a3[1] = v646;
      a3[2] = v470;
      if (v647)
      {
        operator delete(v647);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v627 = v645;
      v646 = v627 + 4;
    }
    a3[1] = v646;
    if (v646 >= v470)
    {
      v666 = *a3;
      v667 = (v646 - *a3) >> 2;
      v668 = v667 + 1;
      if ((unint64_t)(v667 + 1) >> 62)
        goto LABEL_2555;
      v669 = v470 - v666;
      if (v669 >> 1 > v668)
        v668 = v669 >> 1;
      if ((unint64_t)v669 >= 0x7FFFFFFFFFFFFFFCLL)
        v670 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v670 = v668;
      if (v670)
      {
        v671 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v670);
        v666 = *a3;
        v646 = a3[1];
      }
      else
      {
        v671 = 0;
      }
      v682 = &v671[4 * v667];
      v470 = &v671[4 * v670];
      *(_DWORD *)v682 = v528;
      v665 = v682 + 4;
      while (v646 != v666)
      {
        v683 = *((_DWORD *)v646 - 1);
        v646 -= 4;
        *((_DWORD *)v682 - 1) = v683;
        v682 -= 4;
      }
      *a3 = v682;
      a3[1] = v665;
      a3[2] = v470;
      if (v666)
      {
        operator delete(v666);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v646 = v528;
      v665 = v646 + 4;
    }
    a3[1] = v665;
    if (v665 >= v470)
    {
      v685 = *a3;
      v686 = (v665 - *a3) >> 2;
      v687 = v686 + 1;
      if ((unint64_t)(v686 + 1) >> 62)
        goto LABEL_2555;
      v688 = v470 - v685;
      if (v688 >> 1 > v687)
        v687 = v688 >> 1;
      if ((unint64_t)v688 >= 0x7FFFFFFFFFFFFFFCLL)
        v689 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v689 = v687;
      if (v689)
      {
        v690 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v689);
        v685 = *a3;
        v665 = a3[1];
      }
      else
      {
        v690 = 0;
      }
      v703 = &v690[4 * v686];
      v470 = &v690[4 * v689];
      *(_DWORD *)v703 = v607;
      v684 = v703 + 4;
      while (v665 != v685)
      {
        v704 = *((_DWORD *)v665 - 1);
        v665 -= 4;
        *((_DWORD *)v703 - 1) = v704;
        v703 -= 4;
      }
      *a3 = v703;
      a3[1] = v684;
      a3[2] = v470;
      if (v685)
      {
        operator delete(v685);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v665 = v607;
      v684 = v665 + 4;
    }
    a3[1] = v684;
    if (v684 >= v470)
    {
      v706 = *a3;
      v707 = (v684 - *a3) >> 2;
      v708 = v707 + 1;
      if ((unint64_t)(v707 + 1) >> 62)
        goto LABEL_2555;
      v709 = v470 - v706;
      if (v709 >> 1 > v708)
        v708 = v709 >> 1;
      if ((unint64_t)v709 >= 0x7FFFFFFFFFFFFFFCLL)
        v710 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v710 = v708;
      if (v710)
      {
        v711 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v710);
        v706 = *a3;
        v684 = a3[1];
      }
      else
      {
        v711 = 0;
      }
      v721 = &v711[4 * v707];
      v470 = &v711[4 * v710];
      *(_DWORD *)v721 = v528;
      v705 = v721 + 4;
      while (v684 != v706)
      {
        v722 = *((_DWORD *)v684 - 1);
        v684 -= 4;
        *((_DWORD *)v721 - 1) = v722;
        v721 -= 4;
      }
      *a3 = v721;
      a3[1] = v705;
      a3[2] = v470;
      if (v706)
      {
        operator delete(v706);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v684 = v528;
      v705 = v684 + 4;
    }
    a3[1] = v705;
    v723 = v469 + 6;
    if (v705 >= v470)
    {
      v725 = *a3;
      v726 = (v705 - *a3) >> 2;
      v727 = v726 + 1;
      if ((unint64_t)(v726 + 1) >> 62)
        goto LABEL_2555;
      v728 = v470 - v725;
      if (v728 >> 1 > v727)
        v727 = v728 >> 1;
      if ((unint64_t)v728 >= 0x7FFFFFFFFFFFFFFCLL)
        v729 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v729 = v727;
      if (v729)
      {
        v730 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v729);
        v725 = *a3;
        v705 = a3[1];
      }
      else
      {
        v730 = 0;
      }
      v740 = &v730[4 * v726];
      v470 = &v730[4 * v729];
      *(_DWORD *)v740 = v723;
      v724 = v740 + 4;
      while (v705 != v725)
      {
        v741 = *((_DWORD *)v705 - 1);
        v705 -= 4;
        *((_DWORD *)v740 - 1) = v741;
        v740 -= 4;
      }
      *a3 = v740;
      a3[1] = v724;
      a3[2] = v470;
      if (v725)
      {
        operator delete(v725);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v705 = v723;
      v724 = v705 + 4;
    }
    a3[1] = v724;
    if (v724 >= v470)
    {
      v743 = *a3;
      v744 = (v724 - *a3) >> 2;
      v745 = v744 + 1;
      if ((unint64_t)(v744 + 1) >> 62)
        goto LABEL_2555;
      v746 = v470 - v743;
      if (v746 >> 1 > v745)
        v745 = v746 >> 1;
      if ((unint64_t)v746 >= 0x7FFFFFFFFFFFFFFCLL)
        v747 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v747 = v745;
      if (v747)
      {
        v748 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v747);
        v743 = *a3;
        v724 = a3[1];
      }
      else
      {
        v748 = 0;
      }
      v758 = &v748[4 * v744];
      v470 = &v748[4 * v747];
      *(_DWORD *)v758 = v607;
      v742 = v758 + 4;
      while (v724 != v743)
      {
        v759 = *((_DWORD *)v724 - 1);
        v724 -= 4;
        *((_DWORD *)v758 - 1) = v759;
        v758 -= 4;
      }
      *a3 = v758;
      a3[1] = v742;
      a3[2] = v470;
      if (v743)
      {
        operator delete(v743);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v724 = v607;
      v742 = v724 + 4;
    }
    a3[1] = v742;
    v760 = v469 + 7;
    if (v742 >= v470)
    {
      v762 = *a3;
      v763 = (v742 - *a3) >> 2;
      v764 = v763 + 1;
      if ((unint64_t)(v763 + 1) >> 62)
        goto LABEL_2555;
      v765 = v470 - v762;
      if (v765 >> 1 > v764)
        v764 = v765 >> 1;
      if ((unint64_t)v765 >= 0x7FFFFFFFFFFFFFFCLL)
        v766 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v766 = v764;
      if (v766)
      {
        v767 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v766);
        v762 = *a3;
        v742 = a3[1];
      }
      else
      {
        v767 = 0;
      }
      v777 = &v767[4 * v763];
      v470 = &v767[4 * v766];
      *(_DWORD *)v777 = v760;
      v761 = v777 + 4;
      while (v742 != v762)
      {
        v778 = *((_DWORD *)v742 - 1);
        v742 -= 4;
        *((_DWORD *)v777 - 1) = v778;
        v777 -= 4;
      }
      *a3 = v777;
      a3[1] = v761;
      a3[2] = v470;
      if (v762)
      {
        operator delete(v762);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v742 = v760;
      v761 = v742 + 4;
    }
    a3[1] = v761;
    if (v761 >= v470)
    {
      v780 = *a3;
      v781 = (v761 - *a3) >> 2;
      v782 = v781 + 1;
      if ((unint64_t)(v781 + 1) >> 62)
        goto LABEL_2555;
      v783 = v470 - v780;
      if (v783 >> 1 > v782)
        v782 = v783 >> 1;
      if ((unint64_t)v783 >= 0x7FFFFFFFFFFFFFFCLL)
        v784 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v784 = v782;
      if (v784)
      {
        v785 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v784);
        v780 = *a3;
        v761 = a3[1];
      }
      else
      {
        v785 = 0;
      }
      v795 = &v785[4 * v781];
      v470 = &v785[4 * v784];
      *(_DWORD *)v795 = v565;
      v779 = v795 + 4;
      while (v761 != v780)
      {
        v796 = *((_DWORD *)v761 - 1);
        v761 -= 4;
        *((_DWORD *)v795 - 1) = v796;
        v795 -= 4;
      }
      *a3 = v795;
      a3[1] = v779;
      a3[2] = v470;
      if (v780)
      {
        operator delete(v780);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v761 = v565;
      v779 = v761 + 4;
    }
    a3[1] = v779;
    if (v779 >= v470)
    {
      v798 = *a3;
      v799 = (v779 - *a3) >> 2;
      v800 = v799 + 1;
      if ((unint64_t)(v799 + 1) >> 62)
        goto LABEL_2555;
      v801 = v470 - v798;
      if (v801 >> 1 > v800)
        v800 = v801 >> 1;
      if ((unint64_t)v801 >= 0x7FFFFFFFFFFFFFFCLL)
        v802 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v802 = v800;
      if (v802)
      {
        v803 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v802);
        v798 = *a3;
        v779 = a3[1];
      }
      else
      {
        v803 = 0;
      }
      v813 = &v803[4 * v799];
      v470 = &v803[4 * v802];
      *(_DWORD *)v813 = v645;
      v797 = v813 + 4;
      while (v779 != v798)
      {
        v814 = *((_DWORD *)v779 - 1);
        v779 -= 4;
        *((_DWORD *)v813 - 1) = v814;
        v813 -= 4;
      }
      *a3 = v813;
      a3[1] = v797;
      a3[2] = v470;
      if (v798)
      {
        operator delete(v798);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v779 = v645;
      v797 = v779 + 4;
    }
    a3[1] = v797;
    if (v797 >= v470)
    {
      v816 = *a3;
      v817 = (v797 - *a3) >> 2;
      v818 = v817 + 1;
      if ((unint64_t)(v817 + 1) >> 62)
        goto LABEL_2555;
      v819 = v470 - v816;
      if (v819 >> 1 > v818)
        v818 = v819 >> 1;
      if ((unint64_t)v819 >= 0x7FFFFFFFFFFFFFFCLL)
        v820 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v820 = v818;
      if (v820)
      {
        v821 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v820);
        v816 = *a3;
        v797 = a3[1];
      }
      else
      {
        v821 = 0;
      }
      v831 = &v821[4 * v817];
      v470 = &v821[4 * v820];
      *(_DWORD *)v831 = v565;
      v815 = v831 + 4;
      while (v797 != v816)
      {
        v832 = *((_DWORD *)v797 - 1);
        v797 -= 4;
        *((_DWORD *)v831 - 1) = v832;
        v831 -= 4;
      }
      *a3 = v831;
      a3[1] = v815;
      a3[2] = v470;
      if (v816)
      {
        operator delete(v816);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v797 = v565;
      v815 = v797 + 4;
    }
    a3[1] = v815;
    if (v815 >= v470)
    {
      v834 = *a3;
      v835 = (v815 - *a3) >> 2;
      v836 = v835 + 1;
      if ((unint64_t)(v835 + 1) >> 62)
        goto LABEL_2555;
      v837 = v470 - v834;
      if (v837 >> 1 > v836)
        v836 = v837 >> 1;
      if ((unint64_t)v837 >= 0x7FFFFFFFFFFFFFFCLL)
        v838 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v838 = v836;
      if (v838)
      {
        v839 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v838);
        v834 = *a3;
        v815 = a3[1];
      }
      else
      {
        v839 = 0;
      }
      v849 = &v839[4 * v835];
      v470 = &v839[4 * v838];
      *(_DWORD *)v849 = v723;
      v833 = v849 + 4;
      while (v815 != v834)
      {
        v850 = *((_DWORD *)v815 - 1);
        v815 -= 4;
        *((_DWORD *)v849 - 1) = v850;
        v849 -= 4;
      }
      *a3 = v849;
      a3[1] = v833;
      a3[2] = v470;
      if (v834)
      {
        operator delete(v834);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v815 = v723;
      v833 = v815 + 4;
    }
    a3[1] = v833;
    if (v833 >= v470)
    {
      v852 = *a3;
      v853 = (v833 - *a3) >> 2;
      v854 = v853 + 1;
      if ((unint64_t)(v853 + 1) >> 62)
        goto LABEL_2555;
      v855 = v470 - v852;
      if (v855 >> 1 > v854)
        v854 = v855 >> 1;
      if ((unint64_t)v855 >= 0x7FFFFFFFFFFFFFFCLL)
        v856 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v856 = v854;
      if (v856)
      {
        v857 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v856);
        v852 = *a3;
        v833 = a3[1];
      }
      else
      {
        v857 = 0;
      }
      v867 = &v857[4 * v853];
      v470 = &v857[4 * v856];
      *(_DWORD *)v867 = v645;
      v851 = v867 + 4;
      while (v833 != v852)
      {
        v868 = *((_DWORD *)v833 - 1);
        v833 -= 4;
        *((_DWORD *)v867 - 1) = v868;
        v867 -= 4;
      }
      *a3 = v867;
      a3[1] = v851;
      a3[2] = v470;
      if (v852)
      {
        operator delete(v852);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v833 = v645;
      v851 = v833 + 4;
    }
    a3[1] = v851;
    if (v851 >= v470)
    {
      v870 = *a3;
      v871 = (v851 - *a3) >> 2;
      v872 = v871 + 1;
      if ((unint64_t)(v871 + 1) >> 62)
        goto LABEL_2555;
      v873 = v470 - v870;
      if (v873 >> 1 > v872)
        v872 = v873 >> 1;
      if ((unint64_t)v873 >= 0x7FFFFFFFFFFFFFFCLL)
        v874 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v874 = v872;
      if (v874)
      {
        v875 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v874);
        v870 = *a3;
        v851 = a3[1];
      }
      else
      {
        v875 = 0;
      }
      v885 = &v875[4 * v871];
      v470 = &v875[4 * v874];
      *(_DWORD *)v885 = v760;
      v869 = v885 + 4;
      while (v851 != v870)
      {
        v886 = *((_DWORD *)v851 - 1);
        v851 -= 4;
        *((_DWORD *)v885 - 1) = v886;
        v885 -= 4;
      }
      *a3 = v885;
      a3[1] = v869;
      a3[2] = v470;
      if (v870)
      {
        operator delete(v870);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v851 = v760;
      v869 = v851 + 4;
    }
    a3[1] = v869;
    if (v869 >= v470)
    {
      v888 = *a3;
      v889 = (v869 - *a3) >> 2;
      v890 = v889 + 1;
      if ((unint64_t)(v889 + 1) >> 62)
        goto LABEL_2555;
      v891 = v470 - v888;
      if (v891 >> 1 > v890)
        v890 = v891 >> 1;
      if ((unint64_t)v891 >= 0x7FFFFFFFFFFFFFFCLL)
        v892 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v892 = v890;
      if (v892)
      {
        v893 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v892);
        v888 = *a3;
        v869 = a3[1];
      }
      else
      {
        v893 = 0;
      }
      v903 = &v893[4 * v889];
      v470 = &v893[4 * v892];
      *(_DWORD *)v903 = v723;
      v887 = v903 + 4;
      while (v869 != v888)
      {
        v904 = *((_DWORD *)v869 - 1);
        v869 -= 4;
        *((_DWORD *)v903 - 1) = v904;
        v903 -= 4;
      }
      *a3 = v903;
      a3[1] = v887;
      a3[2] = v470;
      if (v888)
      {
        operator delete(v888);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v869 = v723;
      v887 = v869 + 4;
    }
    a3[1] = v887;
    if (v887 >= v470)
    {
      v906 = *a3;
      v907 = (v887 - *a3) >> 2;
      v908 = v907 + 1;
      if ((unint64_t)(v907 + 1) >> 62)
        goto LABEL_2555;
      v909 = v470 - v906;
      if (v909 >> 1 > v908)
        v908 = v909 >> 1;
      if ((unint64_t)v909 >= 0x7FFFFFFFFFFFFFFCLL)
        v910 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v910 = v908;
      if (v910)
      {
        v911 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v910);
        v906 = *a3;
        v887 = a3[1];
      }
      else
      {
        v911 = 0;
      }
      v921 = &v911[4 * v907];
      v922 = &v911[4 * v910];
      *(_DWORD *)v921 = v760;
      v905 = v921 + 4;
      while (v887 != v906)
      {
        v923 = *((_DWORD *)v887 - 1);
        v887 -= 4;
        *((_DWORD *)v921 - 1) = v923;
        v921 -= 4;
      }
      *a3 = v921;
      a3[1] = v905;
      a3[2] = v922;
      if (v906)
        operator delete(v906);
    }
    else
    {
      *(_DWORD *)v887 = v760;
      v905 = v887 + 4;
    }
    a3[1] = v905;
    return;
  }
  if (v8 >= (unsigned __int32 *)v12)
  {
    v16 = v11 + 1;
    if ((v11 + 1) >> 62)
      goto LABEL_2554;
    v17 = v12 - (char *)v10;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      v19 = (char *)sub_1DCAE4D04((uint64_t)v13, v18);
      a4 = v1527;
      v20 = v19;
      v10 = *(unsigned __int32 **)a2;
      v8 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v20 = 0;
    }
    v26 = &v20[4 * v11];
    v12 = &v20[4 * v18];
    *(_DWORD *)v26 = a4.n128_u32[0];
    v14 = (unsigned __int32 *)(v26 + 4);
    while (v8 != v10)
    {
      v27 = *--v8;
      *((_DWORD *)v26 - 1) = v27;
      v26 -= 4;
    }
    *(_QWORD *)a2 = v26;
    *(_QWORD *)(a2 + 8) = v14;
    *(_QWORD *)(a2 + 16) = v12;
    if (v10)
    {
      operator delete(v10);
      a4 = v1527;
      v12 = *v13;
    }
  }
  else
  {
    *v8 = a4.n128_u32[0];
    v14 = v8 + 1;
  }
  *v9 = v14;
  v28 = a4.n128_u32[1];
  if (v14 >= (unsigned __int32 *)v12)
  {
    v30 = *(unsigned __int32 **)a2;
    v31 = ((uint64_t)v14 - *(_QWORD *)a2) >> 2;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62)
      goto LABEL_2554;
    v33 = v12 - (char *)v30;
    if (v33 >> 1 > v32)
      v32 = v33 >> 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
      v34 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      v35 = (char *)sub_1DCAE4D04((uint64_t)v13, v34);
      v30 = *(unsigned __int32 **)a2;
      v14 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v35 = 0;
    }
    v46 = (unsigned __int32 *)&v35[4 * v31];
    v12 = &v35[4 * v34];
    *v46 = v28;
    v29 = v46 + 1;
    while (v14 != v30)
    {
      v47 = *--v14;
      *--v46 = v47;
    }
    *(_QWORD *)a2 = v46;
    *(_QWORD *)(a2 + 8) = v29;
    *(_QWORD *)(a2 + 16) = v12;
    if (v30)
    {
      operator delete(v30);
      v12 = *v13;
    }
    a4.n128_u32[2] = v1527.n128_u32[2];
  }
  else
  {
    *v14 = a4.n128_u32[1];
    v29 = v14 + 1;
  }
  *v9 = v29;
  v48 = a4.n128_u32[2];
  if (v29 >= (unsigned __int32 *)v12)
  {
    v50 = *(unsigned __int32 **)a2;
    v51 = ((uint64_t)v29 - *(_QWORD *)a2) >> 2;
    v52 = v51 + 1;
    if ((unint64_t)(v51 + 1) >> 62)
      goto LABEL_2554;
    v53 = v12 - (char *)v50;
    if (v53 >> 1 > v52)
      v52 = v53 >> 1;
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
      v54 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v54 = v52;
    if (v54)
    {
      v55 = (char *)sub_1DCAE4D04((uint64_t)v13, v54);
      v50 = *(unsigned __int32 **)a2;
      v29 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v55 = 0;
    }
    v65 = (unsigned __int32 *)&v55[4 * v51];
    v12 = &v55[4 * v54];
    *v65 = v48;
    v49 = v65 + 1;
    while (v29 != v50)
    {
      v66 = *--v29;
      *--v65 = v66;
    }
    *(_QWORD *)a2 = v65;
    *(_QWORD *)(a2 + 8) = v49;
    *(_QWORD *)(a2 + 16) = v12;
    if (v50)
    {
      operator delete(v50);
      v12 = *v13;
    }
  }
  else
  {
    *v29 = a4.n128_u32[2];
    v49 = v29 + 1;
  }
  *v9 = v49;
  if (v49 >= (unsigned __int32 *)v12)
  {
    v68 = *(unsigned __int32 **)a2;
    v69 = ((uint64_t)v49 - *(_QWORD *)a2) >> 2;
    v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 62)
      goto LABEL_2554;
    v71 = v12 - (char *)v68;
    if (v71 >> 1 > v70)
      v70 = v71 >> 1;
    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
      v72 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v72 = v70;
    if (v72)
    {
      v73 = (char *)sub_1DCAE4D04((uint64_t)v13, v72);
      v68 = *(unsigned __int32 **)a2;
      v49 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v73 = 0;
    }
    v83 = &v73[4 * v69];
    v12 = &v73[4 * v72];
    *(_DWORD *)v83 = a5.n128_u32[0];
    v67 = (unsigned __int32 *)(v83 + 4);
    while (v49 != v68)
    {
      v84 = *--v49;
      *((_DWORD *)v83 - 1) = v84;
      v83 -= 4;
    }
    *(_QWORD *)a2 = v83;
    *(_QWORD *)(a2 + 8) = v67;
    *(_QWORD *)(a2 + 16) = v12;
    if (v68)
    {
      operator delete(v68);
      v12 = *v13;
    }
  }
  else
  {
    *v49 = a5.n128_u32[0];
    v67 = v49 + 1;
  }
  *v9 = v67;
  if (v67 >= (unsigned __int32 *)v12)
  {
    v86 = *(unsigned __int32 **)a2;
    v87 = ((uint64_t)v67 - *(_QWORD *)a2) >> 2;
    v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 62)
      goto LABEL_2554;
    v89 = v12 - (char *)v86;
    if (v89 >> 1 > v88)
      v88 = v89 >> 1;
    if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
      v90 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v90 = v88;
    if (v90)
    {
      v91 = (char *)sub_1DCAE4D04((uint64_t)v13, v90);
      v86 = *(unsigned __int32 **)a2;
      v67 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v91 = 0;
    }
    v101 = (unsigned __int32 *)&v91[4 * v87];
    v12 = &v91[4 * v90];
    *v101 = v28;
    v85 = v101 + 1;
    while (v67 != v86)
    {
      v102 = *--v67;
      *--v101 = v102;
    }
    *(_QWORD *)a2 = v101;
    *(_QWORD *)(a2 + 8) = v85;
    *(_QWORD *)(a2 + 16) = v12;
    if (v86)
    {
      operator delete(v86);
      v12 = *v13;
    }
  }
  else
  {
    *v67 = v28;
    v85 = v67 + 1;
  }
  *v9 = v85;
  if (v85 >= (unsigned __int32 *)v12)
  {
    v104 = *(unsigned __int32 **)a2;
    v105 = ((uint64_t)v85 - *(_QWORD *)a2) >> 2;
    v106 = v105 + 1;
    if ((unint64_t)(v105 + 1) >> 62)
      goto LABEL_2554;
    v107 = v12 - (char *)v104;
    if (v107 >> 1 > v106)
      v106 = v107 >> 1;
    if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
      v108 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v108 = v106;
    if (v108)
    {
      v109 = (char *)sub_1DCAE4D04((uint64_t)v13, v108);
      v104 = *(unsigned __int32 **)a2;
      v85 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v109 = 0;
    }
    v119 = (unsigned __int32 *)&v109[4 * v105];
    v12 = &v109[4 * v108];
    *v119 = v48;
    v103 = v119 + 1;
    while (v85 != v104)
    {
      v120 = *--v85;
      *--v119 = v120;
    }
    *(_QWORD *)a2 = v119;
    *(_QWORD *)(a2 + 8) = v103;
    *(_QWORD *)(a2 + 16) = v12;
    if (v104)
    {
      operator delete(v104);
      v12 = *v13;
    }
  }
  else
  {
    *v85 = v48;
    v103 = v85 + 1;
  }
  *v9 = v103;
  if (v103 >= (unsigned __int32 *)v12)
  {
    v122 = *(unsigned __int32 **)a2;
    v123 = ((uint64_t)v103 - *(_QWORD *)a2) >> 2;
    v124 = v123 + 1;
    if ((unint64_t)(v123 + 1) >> 62)
      goto LABEL_2554;
    v125 = v12 - (char *)v122;
    if (v125 >> 1 > v124)
      v124 = v125 >> 1;
    if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFFCLL)
      v126 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v126 = v124;
    if (v126)
    {
      v127 = (char *)sub_1DCAE4D04((uint64_t)v13, v126);
      v122 = *(unsigned __int32 **)a2;
      v103 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v127 = 0;
    }
    v137 = &v127[4 * v123];
    v12 = &v127[4 * v126];
    *(_DWORD *)v137 = v1527.n128_u32[0];
    v121 = (unsigned __int32 *)(v137 + 4);
    while (v103 != v122)
    {
      v138 = *--v103;
      *((_DWORD *)v137 - 1) = v138;
      v137 -= 4;
    }
    *(_QWORD *)a2 = v137;
    *(_QWORD *)(a2 + 8) = v121;
    *(_QWORD *)(a2 + 16) = v12;
    if (v122)
    {
      operator delete(v122);
      v12 = *v13;
    }
  }
  else
  {
    *v103 = v1527.n128_u32[0];
    v121 = v103 + 1;
  }
  *v9 = v121;
  if (v121 >= (unsigned __int32 *)v12)
  {
    v140 = *(unsigned __int32 **)a2;
    v141 = ((uint64_t)v121 - *(_QWORD *)a2) >> 2;
    v142 = v141 + 1;
    if ((unint64_t)(v141 + 1) >> 62)
      goto LABEL_2554;
    v143 = v12 - (char *)v140;
    if (v143 >> 1 > v142)
      v142 = v143 >> 1;
    if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL)
      v144 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v144 = v142;
    if (v144)
    {
      v145 = (char *)sub_1DCAE4D04((uint64_t)v13, v144);
      v140 = *(unsigned __int32 **)a2;
      v121 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v145 = 0;
    }
    v155 = &v145[4 * v141];
    v12 = &v145[4 * v144];
    *(_DWORD *)v155 = a5.n128_u32[1];
    v139 = (unsigned __int32 *)(v155 + 4);
    while (v121 != v140)
    {
      v156 = *--v121;
      *((_DWORD *)v155 - 1) = v156;
      v155 -= 4;
    }
    *(_QWORD *)a2 = v155;
    *(_QWORD *)(a2 + 8) = v139;
    *(_QWORD *)(a2 + 16) = v12;
    if (v140)
    {
      operator delete(v140);
      v12 = *v13;
    }
  }
  else
  {
    *v121 = a5.n128_u32[1];
    v139 = v121 + 1;
  }
  *v9 = v139;
  if (v139 >= (unsigned __int32 *)v12)
  {
    v158 = *(unsigned __int32 **)a2;
    v159 = ((uint64_t)v139 - *(_QWORD *)a2) >> 2;
    v160 = v159 + 1;
    if ((unint64_t)(v159 + 1) >> 62)
      goto LABEL_2554;
    v161 = v12 - (char *)v158;
    if (v161 >> 1 > v160)
      v160 = v161 >> 1;
    if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL)
      v162 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v162 = v160;
    if (v162)
    {
      v163 = (char *)sub_1DCAE4D04((uint64_t)v13, v162);
      v158 = *(unsigned __int32 **)a2;
      v139 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v163 = 0;
    }
    v173 = (unsigned __int32 *)&v163[4 * v159];
    v12 = &v163[4 * v162];
    *v173 = v48;
    v157 = v173 + 1;
    while (v139 != v158)
    {
      v174 = *--v139;
      *--v173 = v174;
    }
    *(_QWORD *)a2 = v173;
    *(_QWORD *)(a2 + 8) = v157;
    *(_QWORD *)(a2 + 16) = v12;
    if (v158)
    {
      operator delete(v158);
      v12 = *v13;
    }
  }
  else
  {
    *v139 = v48;
    v157 = v139 + 1;
  }
  *v9 = v157;
  if (v157 >= (unsigned __int32 *)v12)
  {
    v176 = *(unsigned __int32 **)a2;
    v177 = ((uint64_t)v157 - *(_QWORD *)a2) >> 2;
    v178 = v177 + 1;
    if ((unint64_t)(v177 + 1) >> 62)
      goto LABEL_2554;
    v179 = v12 - (char *)v176;
    if (v179 >> 1 > v178)
      v178 = v179 >> 1;
    if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL)
      v180 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v180 = v178;
    if (v180)
    {
      v181 = (char *)sub_1DCAE4D04((uint64_t)v13, v180);
      v176 = *(unsigned __int32 **)a2;
      v157 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v181 = 0;
    }
    v191 = &v181[4 * v177];
    v12 = &v181[4 * v180];
    *(_DWORD *)v191 = a5.n128_u32[0];
    v175 = (unsigned __int32 *)(v191 + 4);
    while (v157 != v176)
    {
      v192 = *--v157;
      *((_DWORD *)v191 - 1) = v192;
      v191 -= 4;
    }
    *(_QWORD *)a2 = v191;
    *(_QWORD *)(a2 + 8) = v175;
    *(_QWORD *)(a2 + 16) = v12;
    if (v176)
    {
      operator delete(v176);
      v12 = *v13;
    }
  }
  else
  {
    *v157 = a5.n128_u32[0];
    v175 = v157 + 1;
  }
  *v9 = v175;
  if (v175 >= (unsigned __int32 *)v12)
  {
    v194 = *(unsigned __int32 **)a2;
    v195 = ((uint64_t)v175 - *(_QWORD *)a2) >> 2;
    v196 = v195 + 1;
    if ((unint64_t)(v195 + 1) >> 62)
      goto LABEL_2554;
    v197 = v12 - (char *)v194;
    if (v197 >> 1 > v196)
      v196 = v197 >> 1;
    if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL)
      v198 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v198 = v196;
    if (v198)
    {
      v199 = (char *)sub_1DCAE4D04((uint64_t)v13, v198);
      v194 = *(unsigned __int32 **)a2;
      v175 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v199 = 0;
    }
    v209 = &v199[4 * v195];
    v12 = &v199[4 * v198];
    *(_DWORD *)v209 = a5.n128_u32[1];
    v193 = (unsigned __int32 *)(v209 + 4);
    while (v175 != v194)
    {
      v210 = *--v175;
      *((_DWORD *)v209 - 1) = v210;
      v209 -= 4;
    }
    *(_QWORD *)a2 = v209;
    *(_QWORD *)(a2 + 8) = v193;
    *(_QWORD *)(a2 + 16) = v12;
    if (v194)
    {
      operator delete(v194);
      v12 = *v13;
    }
  }
  else
  {
    *v175 = a5.n128_u32[1];
    v193 = v175 + 1;
  }
  *v9 = v193;
  if (v193 >= (unsigned __int32 *)v12)
  {
    v212 = *(unsigned __int32 **)a2;
    v213 = ((uint64_t)v193 - *(_QWORD *)a2) >> 2;
    v214 = v213 + 1;
    if ((unint64_t)(v213 + 1) >> 62)
      goto LABEL_2554;
    v215 = v12 - (char *)v212;
    if (v215 >> 1 > v214)
      v214 = v215 >> 1;
    if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFFCLL)
      v216 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v216 = v214;
    if (v216)
    {
      v217 = (char *)sub_1DCAE4D04((uint64_t)v13, v216);
      v212 = *(unsigned __int32 **)a2;
      v193 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v217 = 0;
    }
    v227 = (unsigned __int32 *)&v217[4 * v213];
    v228 = &v217[4 * v216];
    *v227 = v48;
    v211 = v227 + 1;
    while (v193 != v212)
    {
      v229 = *--v193;
      *--v227 = v229;
    }
    *(_QWORD *)a2 = v227;
    *(_QWORD *)(a2 + 8) = v211;
    *(_QWORD *)(a2 + 16) = v228;
    if (v212)
      operator delete(v212);
  }
  else
  {
    *v193 = v48;
    v211 = v193 + 1;
  }
  v230 = v11 / 6;
  *v9 = v211;
  v232 = a3 + 2;
  v231 = a3[2];
  v233 = a3[1];
  if (v233 >= v231)
  {
    v235 = *a3;
    v236 = (v233 - *a3) >> 2;
    v237 = v236 + 1;
    if ((unint64_t)(v236 + 1) >> 62)
      goto LABEL_2555;
    v238 = v231 - v235;
    if (v238 >> 1 > v237)
      v237 = v238 >> 1;
    if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFFCLL)
      v239 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v239 = v237;
    if (v239)
    {
      v240 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v239);
      v235 = *a3;
      v233 = a3[1];
    }
    else
    {
      v240 = 0;
    }
    v250 = &v240[4 * v236];
    v231 = &v240[4 * v239];
    *(_DWORD *)v250 = v230;
    v234 = v250 + 4;
    while (v233 != v235)
    {
      v251 = *((_DWORD *)v233 - 1);
      v233 -= 4;
      *((_DWORD *)v250 - 1) = v251;
      v250 -= 4;
    }
    *a3 = v250;
    a3[1] = v234;
    a3[2] = v231;
    if (v235)
    {
      operator delete(v235);
      v231 = *v232;
    }
  }
  else
  {
    *(_DWORD *)v233 = v230;
    v234 = v233 + 4;
  }
  a3[1] = v234;
  v252 = v230 + 2;
  if (v234 >= v231)
  {
    v254 = *a3;
    v255 = (v234 - *a3) >> 2;
    v256 = v255 + 1;
    if ((unint64_t)(v255 + 1) >> 62)
      goto LABEL_2555;
    v257 = v231 - v254;
    if (v257 >> 1 > v256)
      v256 = v257 >> 1;
    if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL)
      v258 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v258 = v256;
    if (v258)
    {
      v259 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v258);
      v254 = *a3;
      v234 = a3[1];
    }
    else
    {
      v259 = 0;
    }
    v269 = &v259[4 * v255];
    v231 = &v259[4 * v258];
    *(_DWORD *)v269 = v252;
    v253 = v269 + 4;
    while (v234 != v254)
    {
      v270 = *((_DWORD *)v234 - 1);
      v234 -= 4;
      *((_DWORD *)v269 - 1) = v270;
      v269 -= 4;
    }
    *a3 = v269;
    a3[1] = v253;
    a3[2] = v231;
    if (v254)
    {
      operator delete(v254);
      v231 = *v232;
    }
  }
  else
  {
    *(_DWORD *)v234 = v252;
    v253 = v234 + 4;
  }
  a3[1] = v253;
  v271 = v230 + 1;
  v1526 = a3 + 2;
  if (v253 >= v231)
  {
    v273 = *a3;
    v274 = (v253 - *a3) >> 2;
    v275 = v274 + 1;
    if ((unint64_t)(v274 + 1) >> 62)
      goto LABEL_2555;
    v276 = v231 - v273;
    if (v276 >> 1 > v275)
      v275 = v276 >> 1;
    if ((unint64_t)v276 >= 0x7FFFFFFFFFFFFFFCLL)
      v277 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v277 = v275;
    if (v277)
    {
      v278 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v277);
      v273 = *a3;
      v253 = a3[1];
    }
    else
    {
      v278 = 0;
    }
    v288 = &v278[4 * v274];
    v231 = &v278[4 * v277];
    *(_DWORD *)v288 = v271;
    v272 = v288 + 4;
    while (v253 != v273)
    {
      v289 = *((_DWORD *)v253 - 1);
      v253 -= 4;
      *((_DWORD *)v288 - 1) = v289;
      v288 -= 4;
    }
    *a3 = v288;
    a3[1] = v272;
    a3[2] = v231;
    if (v273)
    {
      operator delete(v273);
      v231 = *v1526;
    }
  }
  else
  {
    *(_DWORD *)v253 = v271;
    v272 = v253 + 4;
  }
  a3[1] = v272;
  if (v272 >= v231)
  {
    v291 = *a3;
    v292 = (v272 - *a3) >> 2;
    v293 = v292 + 1;
    if ((unint64_t)(v292 + 1) >> 62)
      goto LABEL_2555;
    v294 = v231 - v291;
    if (v294 >> 1 > v293)
      v293 = v294 >> 1;
    if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFFCLL)
      v295 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v295 = v293;
    if (v295)
    {
      v296 = (char *)sub_1DCAE4D04((uint64_t)v1526, v295);
      v291 = *a3;
      v272 = a3[1];
    }
    else
    {
      v296 = 0;
    }
    v306 = &v296[4 * v292];
    v231 = &v296[4 * v295];
    *(_DWORD *)v306 = v271;
    v290 = v306 + 4;
    while (v272 != v291)
    {
      v307 = *((_DWORD *)v272 - 1);
      v272 -= 4;
      *((_DWORD *)v306 - 1) = v307;
      v306 -= 4;
    }
    *a3 = v306;
    a3[1] = v290;
    a3[2] = v231;
    if (v291)
    {
      operator delete(v291);
      v308 = a3 + 2;
      v231 = *v1526;
      goto LABEL_510;
    }
  }
  else
  {
    *(_DWORD *)v272 = v271;
    v290 = v272 + 4;
  }
  v308 = a3 + 2;
LABEL_510:
  a3[1] = v290;
  if (v290 >= v231)
  {
    v310 = *a3;
    v311 = (v290 - *a3) >> 2;
    v312 = v311 + 1;
    if ((unint64_t)(v311 + 1) >> 62)
      goto LABEL_2555;
    v313 = v231 - v310;
    if (v313 >> 1 > v312)
      v312 = v313 >> 1;
    if ((unint64_t)v313 >= 0x7FFFFFFFFFFFFFFCLL)
      v314 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v314 = v312;
    if (v314)
    {
      v315 = (char *)sub_1DCAE4D04((uint64_t)v308, v314);
      v310 = *a3;
      v290 = a3[1];
    }
    else
    {
      v315 = 0;
    }
    v325 = &v315[4 * v311];
    v231 = &v315[4 * v314];
    *(_DWORD *)v325 = v252;
    v309 = v325 + 4;
    while (v290 != v310)
    {
      v326 = *((_DWORD *)v290 - 1);
      v290 -= 4;
      *((_DWORD *)v325 - 1) = v326;
      v325 -= 4;
    }
    *a3 = v325;
    a3[1] = v309;
    a3[2] = v231;
    if (v310)
    {
      operator delete(v310);
      v231 = *v308;
    }
  }
  else
  {
    *(_DWORD *)v290 = v252;
    v309 = v290 + 4;
  }
  a3[1] = v309;
  v327 = v230 + 3;
  if (v309 >= v231)
  {
    v329 = *a3;
    v330 = (v309 - *a3) >> 2;
    v331 = v330 + 1;
    if ((unint64_t)(v330 + 1) >> 62)
      goto LABEL_2555;
    v332 = v231 - v329;
    if (v332 >> 1 > v331)
      v331 = v332 >> 1;
    if ((unint64_t)v332 >= 0x7FFFFFFFFFFFFFFCLL)
      v333 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v333 = v331;
    if (v333)
    {
      v334 = (char *)sub_1DCAE4D04((uint64_t)v308, v333);
      v329 = *a3;
      v309 = a3[1];
    }
    else
    {
      v334 = 0;
    }
    v345 = &v334[4 * v330];
    v346 = &v334[4 * v333];
    *(_DWORD *)v345 = v327;
    v328 = v345 + 4;
    while (v309 != v329)
    {
      v347 = *((_DWORD *)v309 - 1);
      v309 -= 4;
      *((_DWORD *)v345 - 1) = v347;
      v345 -= 4;
    }
    *a3 = v345;
    a3[1] = v328;
    a3[2] = v346;
    if (v329)
      operator delete(v329);
  }
  else
  {
    *(_DWORD *)v309 = v327;
    v328 = v309 + 4;
  }
  a3[1] = v328;
  v348 = *v9;
  v349 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v351 = *(unsigned __int32 **)a2;
    v352 = ((uint64_t)v348 - *(_QWORD *)a2) >> 2;
    v353 = v352 + 1;
    if ((unint64_t)(v352 + 1) >> 62)
      goto LABEL_2554;
    v354 = v349 - (char *)v351;
    if (v354 >> 1 > v353)
      v353 = v354 >> 1;
    if ((unint64_t)v354 >= 0x7FFFFFFFFFFFFFFCLL)
      v355 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v355 = v353;
    if (v355)
    {
      v356 = (char *)sub_1DCAE4D04((uint64_t)v13, v355);
      v351 = *(unsigned __int32 **)a2;
      v348 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v356 = 0;
    }
    v367 = &v356[4 * v352];
    v349 = &v356[4 * v355];
    *(_DWORD *)v367 = v1527.n128_u32[0];
    v350 = (unsigned __int32 *)(v367 + 4);
    while (v348 != v351)
    {
      v368 = *--v348;
      *((_DWORD *)v367 - 1) = v368;
      v367 -= 4;
    }
    *(_QWORD *)a2 = v367;
    *(_QWORD *)(a2 + 8) = v350;
    *(_QWORD *)(a2 + 16) = v349;
    if (v351)
    {
      operator delete(v351);
      v349 = *v13;
    }
  }
  else
  {
    *v348 = v1527.n128_u32[0];
    v350 = v348 + 1;
  }
  *v9 = v350;
  if (v350 >= (unsigned __int32 *)v349)
  {
    v370 = *(unsigned __int32 **)a2;
    v371 = ((uint64_t)v350 - *(_QWORD *)a2) >> 2;
    v372 = v371 + 1;
    if ((unint64_t)(v371 + 1) >> 62)
      goto LABEL_2554;
    v373 = v349 - (char *)v370;
    if (v373 >> 1 > v372)
      v372 = v373 >> 1;
    if ((unint64_t)v373 >= 0x7FFFFFFFFFFFFFFCLL)
      v374 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v374 = v372;
    if (v374)
    {
      v375 = (char *)sub_1DCAE4D04((uint64_t)v13, v374);
      v370 = *(unsigned __int32 **)a2;
      v350 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v375 = 0;
    }
    v385 = (unsigned __int32 *)&v375[4 * v371];
    v349 = &v375[4 * v374];
    *v385 = v28;
    v369 = v385 + 1;
    while (v350 != v370)
    {
      v386 = *--v350;
      *--v385 = v386;
    }
    *(_QWORD *)a2 = v385;
    *(_QWORD *)(a2 + 8) = v369;
    *(_QWORD *)(a2 + 16) = v349;
    if (v370)
    {
      operator delete(v370);
      v349 = *v13;
    }
  }
  else
  {
    *v350 = v28;
    v369 = v350 + 1;
  }
  *v9 = v369;
  if (v369 >= (unsigned __int32 *)v349)
  {
    v388 = *(unsigned __int32 **)a2;
    v389 = ((uint64_t)v369 - *(_QWORD *)a2) >> 2;
    v390 = v389 + 1;
    if ((unint64_t)(v389 + 1) >> 62)
      goto LABEL_2554;
    v391 = v349 - (char *)v388;
    if (v391 >> 1 > v390)
      v390 = v391 >> 1;
    if ((unint64_t)v391 >= 0x7FFFFFFFFFFFFFFCLL)
      v392 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v392 = v390;
    if (v392)
    {
      v393 = (char *)sub_1DCAE4D04((uint64_t)v13, v392);
      v388 = *(unsigned __int32 **)a2;
      v369 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v393 = 0;
    }
    v403 = (unsigned __int32 *)&v393[4 * v389];
    v349 = &v393[4 * v392];
    *v403 = v48;
    v387 = v403 + 1;
    while (v369 != v388)
    {
      v404 = *--v369;
      *--v403 = v404;
    }
    *(_QWORD *)a2 = v403;
    *(_QWORD *)(a2 + 8) = v387;
    *(_QWORD *)(a2 + 16) = v349;
    if (v388)
    {
      operator delete(v388);
      v349 = *v13;
    }
  }
  else
  {
    *v369 = v48;
    v387 = v369 + 1;
  }
  *v9 = v387;
  if (v387 >= (unsigned __int32 *)v349)
  {
    v406 = *(unsigned __int32 **)a2;
    v407 = ((uint64_t)v387 - *(_QWORD *)a2) >> 2;
    v408 = v407 + 1;
    if ((unint64_t)(v407 + 1) >> 62)
      goto LABEL_2554;
    v409 = v349 - (char *)v406;
    if (v409 >> 1 > v408)
      v408 = v409 >> 1;
    if ((unint64_t)v409 >= 0x7FFFFFFFFFFFFFFCLL)
      v410 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v410 = v408;
    if (v410)
    {
      v411 = (char *)sub_1DCAE4D04((uint64_t)v13, v410);
      v406 = *(unsigned __int32 **)a2;
      v387 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v411 = 0;
    }
    v421 = &v411[4 * v407];
    v349 = &v411[4 * v410];
    *(_DWORD *)v421 = v1527.n128_u32[0];
    v405 = (unsigned __int32 *)(v421 + 4);
    while (v387 != v406)
    {
      v422 = *--v387;
      *((_DWORD *)v421 - 1) = v422;
      v421 -= 4;
    }
    *(_QWORD *)a2 = v421;
    *(_QWORD *)(a2 + 8) = v405;
    *(_QWORD *)(a2 + 16) = v349;
    if (v406)
    {
      operator delete(v406);
      v349 = *v13;
    }
  }
  else
  {
    *v387 = v1527.n128_u32[0];
    v405 = v387 + 1;
  }
  *v9 = v405;
  if (v405 >= (unsigned __int32 *)v349)
  {
    v424 = *(unsigned __int32 **)a2;
    v425 = ((uint64_t)v405 - *(_QWORD *)a2) >> 2;
    v426 = v425 + 1;
    if ((unint64_t)(v425 + 1) >> 62)
      goto LABEL_2554;
    v427 = v349 - (char *)v424;
    if (v427 >> 1 > v426)
      v426 = v427 >> 1;
    if ((unint64_t)v427 >= 0x7FFFFFFFFFFFFFFCLL)
      v428 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v428 = v426;
    if (v428)
    {
      v429 = (char *)sub_1DCAE4D04((uint64_t)v13, v428);
      v424 = *(unsigned __int32 **)a2;
      v405 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v429 = 0;
    }
    v439 = &v429[4 * v425];
    v349 = &v429[4 * v428];
    *(_DWORD *)v439 = a5.n128_u32[1];
    v423 = (unsigned __int32 *)(v439 + 4);
    while (v405 != v424)
    {
      v440 = *--v405;
      *((_DWORD *)v439 - 1) = v440;
      v439 -= 4;
    }
    *(_QWORD *)a2 = v439;
    *(_QWORD *)(a2 + 8) = v423;
    *(_QWORD *)(a2 + 16) = v349;
    if (v424)
    {
      operator delete(v424);
      v349 = *v13;
    }
  }
  else
  {
    *v405 = a5.n128_u32[1];
    v423 = v405 + 1;
  }
  *v9 = v423;
  if (v423 >= (unsigned __int32 *)v349)
  {
    v442 = *(unsigned __int32 **)a2;
    v443 = ((uint64_t)v423 - *(_QWORD *)a2) >> 2;
    v444 = v443 + 1;
    if ((unint64_t)(v443 + 1) >> 62)
      goto LABEL_2554;
    v445 = v349 - (char *)v442;
    if (v445 >> 1 > v444)
      v444 = v445 >> 1;
    if ((unint64_t)v445 >= 0x7FFFFFFFFFFFFFFCLL)
      v446 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v446 = v444;
    if (v446)
    {
      v447 = (char *)sub_1DCAE4D04((uint64_t)v13, v446);
      v442 = *(unsigned __int32 **)a2;
      v423 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v447 = 0;
    }
    v457 = (unsigned __int32 *)&v447[4 * v443];
    v349 = &v447[4 * v446];
    *v457 = v48;
    v441 = v457 + 1;
    while (v423 != v442)
    {
      v458 = *--v423;
      *--v457 = v458;
    }
    *(_QWORD *)a2 = v457;
    *(_QWORD *)(a2 + 8) = v441;
    *(_QWORD *)(a2 + 16) = v349;
    if (v442)
    {
      operator delete(v442);
      v349 = *v13;
    }
  }
  else
  {
    *v423 = v48;
    v441 = v423 + 1;
  }
  *v9 = v441;
  if (v441 >= (unsigned __int32 *)v349)
  {
    v460 = *(unsigned __int32 **)a2;
    v461 = ((uint64_t)v441 - *(_QWORD *)a2) >> 2;
    v462 = v461 + 1;
    if ((unint64_t)(v461 + 1) >> 62)
      goto LABEL_2554;
    v463 = v349 - (char *)v460;
    if (v463 >> 1 > v462)
      v462 = v463 >> 1;
    if ((unint64_t)v463 >= 0x7FFFFFFFFFFFFFFCLL)
      v464 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v464 = v462;
    if (v464)
    {
      v465 = (char *)sub_1DCAE4D04((uint64_t)v13, v464);
      v460 = *(unsigned __int32 **)a2;
      v441 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v465 = 0;
    }
    v480 = &v465[4 * v461];
    v349 = &v465[4 * v464];
    *(_DWORD *)v480 = v1527.n128_u32[0];
    v459 = (unsigned __int32 *)(v480 + 4);
    while (v441 != v460)
    {
      v481 = *--v441;
      *((_DWORD *)v480 - 1) = v481;
      v480 -= 4;
    }
    *(_QWORD *)a2 = v480;
    *(_QWORD *)(a2 + 8) = v459;
    *(_QWORD *)(a2 + 16) = v349;
    if (v460)
    {
      operator delete(v460);
      v349 = *v13;
    }
  }
  else
  {
    *v441 = v1527.n128_u32[0];
    v459 = v441 + 1;
  }
  *v9 = v459;
  if (v459 >= (unsigned __int32 *)v349)
  {
    v483 = *(unsigned __int32 **)a2;
    v484 = ((uint64_t)v459 - *(_QWORD *)a2) >> 2;
    v485 = v484 + 1;
    if ((unint64_t)(v484 + 1) >> 62)
      goto LABEL_2554;
    v486 = v349 - (char *)v483;
    if (v486 >> 1 > v485)
      v485 = v486 >> 1;
    if ((unint64_t)v486 >= 0x7FFFFFFFFFFFFFFCLL)
      v487 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v487 = v485;
    if (v487)
    {
      v488 = (char *)sub_1DCAE4D04((uint64_t)v13, v487);
      v483 = *(unsigned __int32 **)a2;
      v459 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v488 = 0;
    }
    v499 = (unsigned __int32 *)&v488[4 * v484];
    v349 = &v488[4 * v487];
    *v499 = v28;
    v482 = v499 + 1;
    while (v459 != v483)
    {
      v500 = *--v459;
      *--v499 = v500;
    }
    *(_QWORD *)a2 = v499;
    *(_QWORD *)(a2 + 8) = v482;
    *(_QWORD *)(a2 + 16) = v349;
    if (v483)
    {
      operator delete(v483);
      v349 = *v13;
    }
  }
  else
  {
    *v459 = v28;
    v482 = v459 + 1;
  }
  *v9 = v482;
  if (v482 >= (unsigned __int32 *)v349)
  {
    v502 = *(unsigned __int32 **)a2;
    v503 = ((uint64_t)v482 - *(_QWORD *)a2) >> 2;
    v504 = v503 + 1;
    if ((unint64_t)(v503 + 1) >> 62)
      goto LABEL_2554;
    v505 = v349 - (char *)v502;
    if (v505 >> 1 > v504)
      v504 = v505 >> 1;
    if ((unint64_t)v505 >= 0x7FFFFFFFFFFFFFFCLL)
      v506 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v506 = v504;
    if (v506)
    {
      v507 = (char *)sub_1DCAE4D04((uint64_t)v13, v506);
      v502 = *(unsigned __int32 **)a2;
      v482 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v507 = 0;
    }
    v517 = &v507[4 * v503];
    v349 = &v507[4 * v506];
    *(_DWORD *)v517 = a5.n128_u32[2];
    v501 = (unsigned __int32 *)(v517 + 4);
    while (v482 != v502)
    {
      v518 = *--v482;
      *((_DWORD *)v517 - 1) = v518;
      v517 -= 4;
    }
    *(_QWORD *)a2 = v517;
    *(_QWORD *)(a2 + 8) = v501;
    *(_QWORD *)(a2 + 16) = v349;
    if (v502)
    {
      operator delete(v502);
      v349 = *v13;
    }
  }
  else
  {
    *v482 = a5.n128_u32[2];
    v501 = v482 + 1;
  }
  *v9 = v501;
  if (v501 >= (unsigned __int32 *)v349)
  {
    v520 = *(unsigned __int32 **)a2;
    v521 = ((uint64_t)v501 - *(_QWORD *)a2) >> 2;
    v522 = v521 + 1;
    if ((unint64_t)(v521 + 1) >> 62)
      goto LABEL_2554;
    v523 = v349 - (char *)v520;
    if (v523 >> 1 > v522)
      v522 = v523 >> 1;
    if ((unint64_t)v523 >= 0x7FFFFFFFFFFFFFFCLL)
      v524 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v524 = v522;
    if (v524)
    {
      v525 = (char *)sub_1DCAE4D04((uint64_t)v13, v524);
      v520 = *(unsigned __int32 **)a2;
      v501 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v525 = 0;
    }
    v536 = &v525[4 * v521];
    v349 = &v525[4 * v524];
    *(_DWORD *)v536 = v1527.n128_u32[0];
    v519 = (unsigned __int32 *)(v536 + 4);
    while (v501 != v520)
    {
      v537 = *--v501;
      *((_DWORD *)v536 - 1) = v537;
      v536 -= 4;
    }
    *(_QWORD *)a2 = v536;
    *(_QWORD *)(a2 + 8) = v519;
    *(_QWORD *)(a2 + 16) = v349;
    if (v520)
    {
      operator delete(v520);
      v349 = *v13;
    }
  }
  else
  {
    *v501 = v1527.n128_u32[0];
    v519 = v501 + 1;
  }
  *v9 = v519;
  if (v519 >= (unsigned __int32 *)v349)
  {
    v539 = *(unsigned __int32 **)a2;
    v540 = ((uint64_t)v519 - *(_QWORD *)a2) >> 2;
    v541 = v540 + 1;
    if ((unint64_t)(v540 + 1) >> 62)
      goto LABEL_2554;
    v542 = v349 - (char *)v539;
    if (v542 >> 1 > v541)
      v541 = v542 >> 1;
    if ((unint64_t)v542 >= 0x7FFFFFFFFFFFFFFCLL)
      v543 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v543 = v541;
    if (v543)
    {
      v544 = (char *)sub_1DCAE4D04((uint64_t)v13, v543);
      v539 = *(unsigned __int32 **)a2;
      v519 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v544 = 0;
    }
    v554 = &v544[4 * v540];
    v349 = &v544[4 * v543];
    *(_DWORD *)v554 = a5.n128_u32[1];
    v538 = (unsigned __int32 *)(v554 + 4);
    while (v519 != v539)
    {
      v555 = *--v519;
      *((_DWORD *)v554 - 1) = v555;
      v554 -= 4;
    }
    *(_QWORD *)a2 = v554;
    *(_QWORD *)(a2 + 8) = v538;
    *(_QWORD *)(a2 + 16) = v349;
    if (v539)
    {
      operator delete(v539);
      v349 = *v13;
    }
  }
  else
  {
    *v519 = a5.n128_u32[1];
    v538 = v519 + 1;
  }
  *v9 = v538;
  if (v538 >= (unsigned __int32 *)v349)
  {
    v557 = *(unsigned __int32 **)a2;
    v558 = ((uint64_t)v538 - *(_QWORD *)a2) >> 2;
    v559 = v558 + 1;
    if ((unint64_t)(v558 + 1) >> 62)
      goto LABEL_2554;
    v560 = v349 - (char *)v557;
    if (v560 >> 1 > v559)
      v559 = v560 >> 1;
    if ((unint64_t)v560 >= 0x7FFFFFFFFFFFFFFCLL)
      v561 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v561 = v559;
    if (v561)
    {
      v562 = (char *)sub_1DCAE4D04((uint64_t)v13, v561);
      v557 = *(unsigned __int32 **)a2;
      v538 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v562 = 0;
    }
    v573 = &v562[4 * v558];
    v574 = &v562[4 * v561];
    *(_DWORD *)v573 = a5.n128_u32[2];
    v556 = (unsigned __int32 *)(v573 + 4);
    while (v538 != v557)
    {
      v575 = *--v538;
      *((_DWORD *)v573 - 1) = v575;
      v573 -= 4;
    }
    *(_QWORD *)a2 = v573;
    *(_QWORD *)(a2 + 8) = v556;
    *(_QWORD *)(a2 + 16) = v574;
    if (v557)
      operator delete(v557);
  }
  else
  {
    *v538 = a5.n128_u32[2];
    v556 = v538 + 1;
  }
  *v9 = v556;
  v576 = v230 + 4;
  v578 = a3[1];
  v577 = a3[2];
  if (v578 >= v577)
  {
    v580 = *a3;
    v581 = (v578 - *a3) >> 2;
    v582 = v581 + 1;
    if ((unint64_t)(v581 + 1) >> 62)
      goto LABEL_2555;
    v583 = v577 - v580;
    if (v583 >> 1 > v582)
      v582 = v583 >> 1;
    if ((unint64_t)v583 >= 0x7FFFFFFFFFFFFFFCLL)
      v584 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v584 = v582;
    if (v584)
    {
      v585 = (char *)sub_1DCAE4D04((uint64_t)v308, v584);
      v580 = *a3;
      v578 = a3[1];
    }
    else
    {
      v585 = 0;
    }
    v595 = &v585[4 * v581];
    v577 = &v585[4 * v584];
    *(_DWORD *)v595 = v576;
    v579 = v595 + 4;
    while (v578 != v580)
    {
      v596 = *((_DWORD *)v578 - 1);
      v578 -= 4;
      *((_DWORD *)v595 - 1) = v596;
      v595 -= 4;
    }
    *a3 = v595;
    a3[1] = v579;
    a3[2] = v577;
    if (v580)
    {
      operator delete(v580);
      v577 = *v308;
    }
  }
  else
  {
    *(_DWORD *)v578 = v576;
    v579 = v578 + 4;
  }
  a3[1] = v579;
  v597 = v230 + 6;
  if (v579 >= v577)
  {
    v599 = *a3;
    v600 = (v579 - *a3) >> 2;
    v601 = v600 + 1;
    if ((unint64_t)(v600 + 1) >> 62)
      goto LABEL_2555;
    v602 = v577 - v599;
    if (v602 >> 1 > v601)
      v601 = v602 >> 1;
    if ((unint64_t)v602 >= 0x7FFFFFFFFFFFFFFCLL)
      v603 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v603 = v601;
    if (v603)
    {
      v604 = (char *)sub_1DCAE4D04((uint64_t)v308, v603);
      v599 = *a3;
      v579 = a3[1];
    }
    else
    {
      v604 = 0;
    }
    v615 = &v604[4 * v600];
    v577 = &v604[4 * v603];
    *(_DWORD *)v615 = v597;
    v598 = v615 + 4;
    while (v579 != v599)
    {
      v616 = *((_DWORD *)v579 - 1);
      v579 -= 4;
      *((_DWORD *)v615 - 1) = v616;
      v615 -= 4;
    }
    *a3 = v615;
    a3[1] = v598;
    a3[2] = v577;
    if (v599)
    {
      operator delete(v599);
      v577 = *v308;
    }
  }
  else
  {
    *(_DWORD *)v579 = v597;
    v598 = v579 + 4;
  }
  a3[1] = v598;
  v617 = v230 + 5;
  if (v598 >= v577)
  {
    v619 = *a3;
    v620 = (v598 - *a3) >> 2;
    v621 = v620 + 1;
    if ((unint64_t)(v620 + 1) >> 62)
      goto LABEL_2555;
    v622 = v577 - v619;
    if (v622 >> 1 > v621)
      v621 = v622 >> 1;
    if ((unint64_t)v622 >= 0x7FFFFFFFFFFFFFFCLL)
      v623 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v623 = v621;
    if (v623)
    {
      v624 = (char *)sub_1DCAE4D04((uint64_t)v308, v623);
      v619 = *a3;
      v598 = a3[1];
    }
    else
    {
      v624 = 0;
    }
    v634 = &v624[4 * v620];
    v577 = &v624[4 * v623];
    *(_DWORD *)v634 = v617;
    v618 = v634 + 4;
    while (v598 != v619)
    {
      v635 = *((_DWORD *)v598 - 1);
      v598 -= 4;
      *((_DWORD *)v634 - 1) = v635;
      v634 -= 4;
    }
    *a3 = v634;
    a3[1] = v618;
    a3[2] = v577;
    if (v619)
    {
      operator delete(v619);
      v577 = *v1526;
    }
  }
  else
  {
    *(_DWORD *)v598 = v617;
    v618 = v598 + 4;
  }
  a3[1] = v618;
  if (v618 >= v577)
  {
    v637 = *a3;
    v638 = (v618 - *a3) >> 2;
    v639 = v638 + 1;
    if ((unint64_t)(v638 + 1) >> 62)
      goto LABEL_2555;
    v640 = v577 - v637;
    if (v640 >> 1 > v639)
      v639 = v640 >> 1;
    if ((unint64_t)v640 >= 0x7FFFFFFFFFFFFFFCLL)
      v641 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v641 = v639;
    if (v641)
    {
      v642 = (char *)sub_1DCAE4D04((uint64_t)v1526, v641);
      v637 = *a3;
      v618 = a3[1];
    }
    else
    {
      v642 = 0;
    }
    v653 = &v642[4 * v638];
    v577 = &v642[4 * v641];
    *(_DWORD *)v653 = v617;
    v636 = v653 + 4;
    while (v618 != v637)
    {
      v654 = *((_DWORD *)v618 - 1);
      v618 -= 4;
      *((_DWORD *)v653 - 1) = v654;
      v653 -= 4;
    }
    *a3 = v653;
    a3[1] = v636;
    a3[2] = v577;
    if (v637)
    {
      operator delete(v637);
      v655 = a3 + 2;
      v577 = *v1526;
      goto LABEL_1088;
    }
  }
  else
  {
    *(_DWORD *)v618 = v617;
    v636 = v618 + 4;
  }
  v655 = a3 + 2;
LABEL_1088:
  a3[1] = v636;
  if (v636 >= v577)
  {
    v657 = *a3;
    v658 = (v636 - *a3) >> 2;
    v659 = v658 + 1;
    if ((unint64_t)(v658 + 1) >> 62)
      goto LABEL_2555;
    v660 = v577 - v657;
    if (v660 >> 1 > v659)
      v659 = v660 >> 1;
    if ((unint64_t)v660 >= 0x7FFFFFFFFFFFFFFCLL)
      v661 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v661 = v659;
    if (v661)
    {
      v662 = (char *)sub_1DCAE4D04((uint64_t)v655, v661);
      v657 = *a3;
      v636 = a3[1];
    }
    else
    {
      v662 = 0;
    }
    v672 = &v662[4 * v658];
    v577 = &v662[4 * v661];
    *(_DWORD *)v672 = v597;
    v656 = v672 + 4;
    while (v636 != v657)
    {
      v673 = *((_DWORD *)v636 - 1);
      v636 -= 4;
      *((_DWORD *)v672 - 1) = v673;
      v672 -= 4;
    }
    *a3 = v672;
    a3[1] = v656;
    a3[2] = v577;
    if (v657)
    {
      operator delete(v657);
      v577 = *v655;
    }
  }
  else
  {
    *(_DWORD *)v636 = v597;
    v656 = v636 + 4;
  }
  a3[1] = v656;
  v674 = v230 + 7;
  if (v656 >= v577)
  {
    v676 = *a3;
    v677 = (v656 - *a3) >> 2;
    v678 = v677 + 1;
    if ((unint64_t)(v677 + 1) >> 62)
      goto LABEL_2555;
    v679 = v577 - v676;
    if (v679 >> 1 > v678)
      v678 = v679 >> 1;
    if ((unint64_t)v679 >= 0x7FFFFFFFFFFFFFFCLL)
      v680 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v680 = v678;
    if (v680)
    {
      v681 = (char *)sub_1DCAE4D04((uint64_t)v655, v680);
      v676 = *a3;
      v656 = a3[1];
    }
    else
    {
      v681 = 0;
    }
    v691 = &v681[4 * v677];
    v692 = &v681[4 * v680];
    *(_DWORD *)v691 = v674;
    v675 = v691 + 4;
    while (v656 != v676)
    {
      v693 = *((_DWORD *)v656 - 1);
      v656 -= 4;
      *((_DWORD *)v691 - 1) = v693;
      v691 -= 4;
    }
    *a3 = v691;
    a3[1] = v675;
    a3[2] = v692;
    if (v676)
      operator delete(v676);
  }
  else
  {
    *(_DWORD *)v656 = v674;
    v675 = v656 + 4;
  }
  a3[1] = v675;
  v694 = *v9;
  v695 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v697 = *(unsigned __int32 **)a2;
    v698 = ((uint64_t)v694 - *(_QWORD *)a2) >> 2;
    v699 = v698 + 1;
    if ((unint64_t)(v698 + 1) >> 62)
      goto LABEL_2554;
    v700 = v695 - (char *)v697;
    if (v700 >> 1 > v699)
      v699 = v700 >> 1;
    if ((unint64_t)v700 >= 0x7FFFFFFFFFFFFFFCLL)
      v701 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v701 = v699;
    if (v701)
    {
      v702 = (char *)sub_1DCAE4D04((uint64_t)v13, v701);
      v697 = *(unsigned __int32 **)a2;
      v694 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v702 = 0;
    }
    v712 = &v702[4 * v698];
    v695 = &v702[4 * v701];
    *(_DWORD *)v712 = v1527.n128_u32[0];
    v696 = (unsigned __int32 *)(v712 + 4);
    while (v694 != v697)
    {
      v713 = *--v694;
      *((_DWORD *)v712 - 1) = v713;
      v712 -= 4;
    }
    *(_QWORD *)a2 = v712;
    *(_QWORD *)(a2 + 8) = v696;
    *(_QWORD *)(a2 + 16) = v695;
    if (v697)
    {
      operator delete(v697);
      v695 = *v13;
    }
  }
  else
  {
    *v694 = v1527.n128_u32[0];
    v696 = v694 + 1;
  }
  *v9 = v696;
  if (v696 >= (unsigned __int32 *)v695)
  {
    v715 = *(unsigned __int32 **)a2;
    v716 = ((uint64_t)v696 - *(_QWORD *)a2) >> 2;
    v717 = v716 + 1;
    if ((unint64_t)(v716 + 1) >> 62)
      goto LABEL_2554;
    v718 = v695 - (char *)v715;
    if (v718 >> 1 > v717)
      v717 = v718 >> 1;
    if ((unint64_t)v718 >= 0x7FFFFFFFFFFFFFFCLL)
      v719 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v719 = v717;
    if (v719)
    {
      v720 = (char *)sub_1DCAE4D04((uint64_t)v13, v719);
      v715 = *(unsigned __int32 **)a2;
      v696 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v720 = 0;
    }
    v731 = (unsigned __int32 *)&v720[4 * v716];
    v695 = &v720[4 * v719];
    *v731 = v28;
    v714 = v731 + 1;
    while (v696 != v715)
    {
      v732 = *--v696;
      *--v731 = v732;
    }
    *(_QWORD *)a2 = v731;
    *(_QWORD *)(a2 + 8) = v714;
    *(_QWORD *)(a2 + 16) = v695;
    if (v715)
    {
      operator delete(v715);
      v695 = *v13;
    }
  }
  else
  {
    *v696 = v28;
    v714 = v696 + 1;
  }
  *v9 = v714;
  if (v714 >= (unsigned __int32 *)v695)
  {
    v734 = *(unsigned __int32 **)a2;
    v735 = ((uint64_t)v714 - *(_QWORD *)a2) >> 2;
    v736 = v735 + 1;
    if ((unint64_t)(v735 + 1) >> 62)
      goto LABEL_2554;
    v737 = v695 - (char *)v734;
    if (v737 >> 1 > v736)
      v736 = v737 >> 1;
    if ((unint64_t)v737 >= 0x7FFFFFFFFFFFFFFCLL)
      v738 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v738 = v736;
    if (v738)
    {
      v739 = (char *)sub_1DCAE4D04((uint64_t)v13, v738);
      v734 = *(unsigned __int32 **)a2;
      v714 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v739 = 0;
    }
    v749 = &v739[4 * v735];
    v695 = &v739[4 * v738];
    *(_DWORD *)v749 = a5.n128_u32[2];
    v733 = (unsigned __int32 *)(v749 + 4);
    while (v714 != v734)
    {
      v750 = *--v714;
      *((_DWORD *)v749 - 1) = v750;
      v749 -= 4;
    }
    *(_QWORD *)a2 = v749;
    *(_QWORD *)(a2 + 8) = v733;
    *(_QWORD *)(a2 + 16) = v695;
    if (v734)
    {
      operator delete(v734);
      v695 = *v13;
    }
  }
  else
  {
    *v714 = a5.n128_u32[2];
    v733 = v714 + 1;
  }
  *v9 = v733;
  if (v733 >= (unsigned __int32 *)v695)
  {
    v752 = *(unsigned __int32 **)a2;
    v753 = ((uint64_t)v733 - *(_QWORD *)a2) >> 2;
    v754 = v753 + 1;
    if ((unint64_t)(v753 + 1) >> 62)
      goto LABEL_2554;
    v755 = v695 - (char *)v752;
    if (v755 >> 1 > v754)
      v754 = v755 >> 1;
    if ((unint64_t)v755 >= 0x7FFFFFFFFFFFFFFCLL)
      v756 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v756 = v754;
    if (v756)
    {
      v757 = (char *)sub_1DCAE4D04((uint64_t)v13, v756);
      v752 = *(unsigned __int32 **)a2;
      v733 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v757 = 0;
    }
    v768 = &v757[4 * v753];
    v695 = &v757[4 * v756];
    *(_DWORD *)v768 = v1527.n128_u32[0];
    v751 = (unsigned __int32 *)(v768 + 4);
    while (v733 != v752)
    {
      v769 = *--v733;
      *((_DWORD *)v768 - 1) = v769;
      v768 -= 4;
    }
    *(_QWORD *)a2 = v768;
    *(_QWORD *)(a2 + 8) = v751;
    *(_QWORD *)(a2 + 16) = v695;
    if (v752)
    {
      operator delete(v752);
      v695 = *v13;
    }
  }
  else
  {
    *v733 = v1527.n128_u32[0];
    v751 = v733 + 1;
  }
  *v9 = v751;
  if (v751 >= (unsigned __int32 *)v695)
  {
    v771 = *(unsigned __int32 **)a2;
    v772 = ((uint64_t)v751 - *(_QWORD *)a2) >> 2;
    v773 = v772 + 1;
    if ((unint64_t)(v772 + 1) >> 62)
      goto LABEL_2554;
    v774 = v695 - (char *)v771;
    if (v774 >> 1 > v773)
      v773 = v774 >> 1;
    if ((unint64_t)v774 >= 0x7FFFFFFFFFFFFFFCLL)
      v775 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v775 = v773;
    if (v775)
    {
      v776 = (char *)sub_1DCAE4D04((uint64_t)v13, v775);
      v771 = *(unsigned __int32 **)a2;
      v751 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v776 = 0;
    }
    v786 = (unsigned __int32 *)&v776[4 * v772];
    v695 = &v776[4 * v775];
    *v786 = v28;
    v770 = v786 + 1;
    while (v751 != v771)
    {
      v787 = *--v751;
      *--v786 = v787;
    }
    *(_QWORD *)a2 = v786;
    *(_QWORD *)(a2 + 8) = v770;
    *(_QWORD *)(a2 + 16) = v695;
    if (v771)
    {
      operator delete(v771);
      v695 = *v13;
    }
  }
  else
  {
    *v751 = v28;
    v770 = v751 + 1;
  }
  *v9 = v770;
  if (v770 >= (unsigned __int32 *)v695)
  {
    v789 = *(unsigned __int32 **)a2;
    v790 = ((uint64_t)v770 - *(_QWORD *)a2) >> 2;
    v791 = v790 + 1;
    if ((unint64_t)(v790 + 1) >> 62)
      goto LABEL_2554;
    v792 = v695 - (char *)v789;
    if (v792 >> 1 > v791)
      v791 = v792 >> 1;
    if ((unint64_t)v792 >= 0x7FFFFFFFFFFFFFFCLL)
      v793 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v793 = v791;
    if (v793)
    {
      v794 = (char *)sub_1DCAE4D04((uint64_t)v13, v793);
      v789 = *(unsigned __int32 **)a2;
      v770 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v794 = 0;
    }
    v804 = &v794[4 * v790];
    v695 = &v794[4 * v793];
    *(_DWORD *)v804 = a5.n128_u32[2];
    v788 = (unsigned __int32 *)(v804 + 4);
    while (v770 != v789)
    {
      v805 = *--v770;
      *((_DWORD *)v804 - 1) = v805;
      v804 -= 4;
    }
    *(_QWORD *)a2 = v804;
    *(_QWORD *)(a2 + 8) = v788;
    *(_QWORD *)(a2 + 16) = v695;
    if (v789)
    {
      operator delete(v789);
      v695 = *v13;
    }
  }
  else
  {
    *v770 = a5.n128_u32[2];
    v788 = v770 + 1;
  }
  *v9 = v788;
  if (v788 >= (unsigned __int32 *)v695)
  {
    v807 = *(unsigned __int32 **)a2;
    v808 = ((uint64_t)v788 - *(_QWORD *)a2) >> 2;
    v809 = v808 + 1;
    if ((unint64_t)(v808 + 1) >> 62)
      goto LABEL_2554;
    v810 = v695 - (char *)v807;
    if (v810 >> 1 > v809)
      v809 = v810 >> 1;
    if ((unint64_t)v810 >= 0x7FFFFFFFFFFFFFFCLL)
      v811 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v811 = v809;
    if (v811)
    {
      v812 = (char *)sub_1DCAE4D04((uint64_t)v13, v811);
      v807 = *(unsigned __int32 **)a2;
      v788 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v812 = 0;
    }
    v822 = &v812[4 * v808];
    v695 = &v812[4 * v811];
    *(_DWORD *)v822 = a5.n128_u32[0];
    v806 = (unsigned __int32 *)(v822 + 4);
    while (v788 != v807)
    {
      v823 = *--v788;
      *((_DWORD *)v822 - 1) = v823;
      v822 -= 4;
    }
    *(_QWORD *)a2 = v822;
    *(_QWORD *)(a2 + 8) = v806;
    *(_QWORD *)(a2 + 16) = v695;
    if (v807)
    {
      operator delete(v807);
      v695 = *v13;
    }
  }
  else
  {
    *v788 = a5.n128_u32[0];
    v806 = v788 + 1;
  }
  *v9 = v806;
  if (v806 >= (unsigned __int32 *)v695)
  {
    v825 = *(unsigned __int32 **)a2;
    v826 = ((uint64_t)v806 - *(_QWORD *)a2) >> 2;
    v827 = v826 + 1;
    if ((unint64_t)(v826 + 1) >> 62)
      goto LABEL_2554;
    v828 = v695 - (char *)v825;
    if (v828 >> 1 > v827)
      v827 = v828 >> 1;
    if ((unint64_t)v828 >= 0x7FFFFFFFFFFFFFFCLL)
      v829 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v829 = v827;
    if (v829)
    {
      v830 = (char *)sub_1DCAE4D04((uint64_t)v13, v829);
      v825 = *(unsigned __int32 **)a2;
      v806 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v830 = 0;
    }
    v840 = (unsigned __int32 *)&v830[4 * v826];
    v695 = &v830[4 * v829];
    *v840 = v28;
    v824 = v840 + 1;
    while (v806 != v825)
    {
      v841 = *--v806;
      *--v840 = v841;
    }
    *(_QWORD *)a2 = v840;
    *(_QWORD *)(a2 + 8) = v824;
    *(_QWORD *)(a2 + 16) = v695;
    if (v825)
    {
      operator delete(v825);
      v695 = *v13;
    }
  }
  else
  {
    *v806 = v28;
    v824 = v806 + 1;
  }
  *v9 = v824;
  if (v824 >= (unsigned __int32 *)v695)
  {
    v843 = *(unsigned __int32 **)a2;
    v844 = ((uint64_t)v824 - *(_QWORD *)a2) >> 2;
    v845 = v844 + 1;
    if ((unint64_t)(v844 + 1) >> 62)
      goto LABEL_2554;
    v846 = v695 - (char *)v843;
    if (v846 >> 1 > v845)
      v845 = v846 >> 1;
    if ((unint64_t)v846 >= 0x7FFFFFFFFFFFFFFCLL)
      v847 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v847 = v845;
    if (v847)
    {
      v848 = (char *)sub_1DCAE4D04((uint64_t)v13, v847);
      v843 = *(unsigned __int32 **)a2;
      v824 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v848 = 0;
    }
    v858 = &v848[4 * v844];
    v695 = &v848[4 * v847];
    *(_DWORD *)v858 = a5.n128_u32[2];
    v842 = (unsigned __int32 *)(v858 + 4);
    while (v824 != v843)
    {
      v859 = *--v824;
      *((_DWORD *)v858 - 1) = v859;
      v858 -= 4;
    }
    *(_QWORD *)a2 = v858;
    *(_QWORD *)(a2 + 8) = v842;
    *(_QWORD *)(a2 + 16) = v695;
    if (v843)
    {
      operator delete(v843);
      v695 = *v13;
    }
  }
  else
  {
    *v824 = a5.n128_u32[2];
    v842 = v824 + 1;
  }
  *v9 = v842;
  if (v842 >= (unsigned __int32 *)v695)
  {
    v861 = *(unsigned __int32 **)a2;
    v862 = ((uint64_t)v842 - *(_QWORD *)a2) >> 2;
    v863 = v862 + 1;
    if ((unint64_t)(v862 + 1) >> 62)
      goto LABEL_2554;
    v864 = v695 - (char *)v861;
    if (v864 >> 1 > v863)
      v863 = v864 >> 1;
    if ((unint64_t)v864 >= 0x7FFFFFFFFFFFFFFCLL)
      v865 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v865 = v863;
    if (v865)
    {
      v866 = (char *)sub_1DCAE4D04((uint64_t)v13, v865);
      v861 = *(unsigned __int32 **)a2;
      v842 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v866 = 0;
    }
    v876 = &v866[4 * v862];
    v695 = &v866[4 * v865];
    *(_DWORD *)v876 = v1527.n128_u32[0];
    v860 = (unsigned __int32 *)(v876 + 4);
    while (v842 != v861)
    {
      v877 = *--v842;
      *((_DWORD *)v876 - 1) = v877;
      v876 -= 4;
    }
    *(_QWORD *)a2 = v876;
    *(_QWORD *)(a2 + 8) = v860;
    *(_QWORD *)(a2 + 16) = v695;
    if (v861)
    {
      operator delete(v861);
      v695 = *v13;
    }
  }
  else
  {
    *v842 = v1527.n128_u32[0];
    v860 = v842 + 1;
  }
  *v9 = v860;
  if (v860 >= (unsigned __int32 *)v695)
  {
    v879 = *(unsigned __int32 **)a2;
    v880 = ((uint64_t)v860 - *(_QWORD *)a2) >> 2;
    v881 = v880 + 1;
    if ((unint64_t)(v880 + 1) >> 62)
      goto LABEL_2554;
    v882 = v695 - (char *)v879;
    if (v882 >> 1 > v881)
      v881 = v882 >> 1;
    if ((unint64_t)v882 >= 0x7FFFFFFFFFFFFFFCLL)
      v883 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v883 = v881;
    if (v883)
    {
      v884 = (char *)sub_1DCAE4D04((uint64_t)v13, v883);
      v879 = *(unsigned __int32 **)a2;
      v860 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v884 = 0;
    }
    v894 = &v884[4 * v880];
    v695 = &v884[4 * v883];
    *(_DWORD *)v894 = a5.n128_u32[1];
    v878 = (unsigned __int32 *)(v894 + 4);
    while (v860 != v879)
    {
      v895 = *--v860;
      *((_DWORD *)v894 - 1) = v895;
      v894 -= 4;
    }
    *(_QWORD *)a2 = v894;
    *(_QWORD *)(a2 + 8) = v878;
    *(_QWORD *)(a2 + 16) = v695;
    if (v879)
    {
      operator delete(v879);
      v695 = *v13;
    }
  }
  else
  {
    *v860 = a5.n128_u32[1];
    v878 = v860 + 1;
  }
  *v9 = v878;
  if (v878 >= (unsigned __int32 *)v695)
  {
    v897 = *(unsigned __int32 **)a2;
    v898 = ((uint64_t)v878 - *(_QWORD *)a2) >> 2;
    v899 = v898 + 1;
    if ((unint64_t)(v898 + 1) >> 62)
      goto LABEL_2554;
    v900 = v695 - (char *)v897;
    if (v900 >> 1 > v899)
      v899 = v900 >> 1;
    if ((unint64_t)v900 >= 0x7FFFFFFFFFFFFFFCLL)
      v901 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v901 = v899;
    if (v901)
    {
      v902 = (char *)sub_1DCAE4D04((uint64_t)v13, v901);
      v897 = *(unsigned __int32 **)a2;
      v878 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v902 = 0;
    }
    v912 = &v902[4 * v898];
    v695 = &v902[4 * v901];
    *(_DWORD *)v912 = a5.n128_u32[2];
    v896 = (unsigned __int32 *)(v912 + 4);
    while (v878 != v897)
    {
      v913 = *--v878;
      *((_DWORD *)v912 - 1) = v913;
      v912 -= 4;
    }
    *(_QWORD *)a2 = v912;
    *(_QWORD *)(a2 + 8) = v896;
    *(_QWORD *)(a2 + 16) = v695;
    if (v897)
    {
      operator delete(v897);
      v695 = *v13;
    }
  }
  else
  {
    *v878 = a5.n128_u32[2];
    v896 = v878 + 1;
  }
  *v9 = v896;
  if (v896 >= (unsigned __int32 *)v695)
  {
    v915 = *(unsigned __int32 **)a2;
    v916 = ((uint64_t)v896 - *(_QWORD *)a2) >> 2;
    v917 = v916 + 1;
    if ((unint64_t)(v916 + 1) >> 62)
      goto LABEL_2554;
    v918 = v695 - (char *)v915;
    if (v918 >> 1 > v917)
      v917 = v918 >> 1;
    if ((unint64_t)v918 >= 0x7FFFFFFFFFFFFFFCLL)
      v919 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v919 = v917;
    if (v919)
    {
      v920 = (char *)sub_1DCAE4D04((uint64_t)v13, v919);
      v915 = *(unsigned __int32 **)a2;
      v896 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v920 = 0;
    }
    v924 = &v920[4 * v916];
    v695 = &v920[4 * v919];
    *(_DWORD *)v924 = a5.n128_u32[0];
    v914 = (unsigned __int32 *)(v924 + 4);
    while (v896 != v915)
    {
      v925 = *--v896;
      *((_DWORD *)v924 - 1) = v925;
      v924 -= 4;
    }
    *(_QWORD *)a2 = v924;
    *(_QWORD *)(a2 + 8) = v914;
    *(_QWORD *)(a2 + 16) = v695;
    if (v915)
    {
      operator delete(v915);
      v695 = *v13;
    }
  }
  else
  {
    *v896 = a5.n128_u32[0];
    v914 = v896 + 1;
  }
  *v9 = v914;
  if (v914 >= (unsigned __int32 *)v695)
  {
    v927 = *(unsigned __int32 **)a2;
    v928 = ((uint64_t)v914 - *(_QWORD *)a2) >> 2;
    v929 = v928 + 1;
    if ((unint64_t)(v928 + 1) >> 62)
      goto LABEL_2554;
    v930 = v695 - (char *)v927;
    if (v930 >> 1 > v929)
      v929 = v930 >> 1;
    if ((unint64_t)v930 >= 0x7FFFFFFFFFFFFFFCLL)
      v931 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v931 = v929;
    if (v931)
    {
      v932 = (char *)sub_1DCAE4D04((uint64_t)v13, v931);
      v927 = *(unsigned __int32 **)a2;
      v914 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v932 = 0;
    }
    v933 = &v932[4 * v928];
    v695 = &v932[4 * v931];
    *(_DWORD *)v933 = a5.n128_u32[1];
    v926 = (unsigned __int32 *)(v933 + 4);
    while (v914 != v927)
    {
      v934 = *--v914;
      *((_DWORD *)v933 - 1) = v934;
      v933 -= 4;
    }
    *(_QWORD *)a2 = v933;
    *(_QWORD *)(a2 + 8) = v926;
    *(_QWORD *)(a2 + 16) = v695;
    if (v927)
    {
      operator delete(v927);
      v695 = *v13;
    }
  }
  else
  {
    *v914 = a5.n128_u32[1];
    v926 = v914 + 1;
  }
  *v9 = v926;
  if (v926 >= (unsigned __int32 *)v695)
  {
    v936 = *(unsigned __int32 **)a2;
    v937 = ((uint64_t)v926 - *(_QWORD *)a2) >> 2;
    v938 = v937 + 1;
    if ((unint64_t)(v937 + 1) >> 62)
      goto LABEL_2554;
    v939 = v695 - (char *)v936;
    if (v939 >> 1 > v938)
      v938 = v939 >> 1;
    if ((unint64_t)v939 >= 0x7FFFFFFFFFFFFFFCLL)
      v940 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v940 = v938;
    if (v940)
    {
      v941 = (char *)sub_1DCAE4D04((uint64_t)v13, v940);
      v936 = *(unsigned __int32 **)a2;
      v926 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v941 = 0;
    }
    v942 = &v941[4 * v937];
    v943 = &v941[4 * v940];
    *(_DWORD *)v942 = a5.n128_u32[2];
    v935 = (unsigned __int32 *)(v942 + 4);
    while (v926 != v936)
    {
      v944 = *--v926;
      *((_DWORD *)v942 - 1) = v944;
      v942 -= 4;
    }
    *(_QWORD *)a2 = v942;
    *(_QWORD *)(a2 + 8) = v935;
    *(_QWORD *)(a2 + 16) = v943;
    if (v936)
      operator delete(v936);
  }
  else
  {
    *v926 = a5.n128_u32[2];
    v935 = v926 + 1;
  }
  *v9 = v935;
  v945 = v230 + 8;
  v947 = a3[1];
  v946 = a3[2];
  if (v947 >= v946)
  {
    v949 = *a3;
    v950 = (v947 - *a3) >> 2;
    v951 = v950 + 1;
    if ((unint64_t)(v950 + 1) >> 62)
      goto LABEL_2555;
    v952 = v946 - v949;
    if (v952 >> 1 > v951)
      v951 = v952 >> 1;
    if ((unint64_t)v952 >= 0x7FFFFFFFFFFFFFFCLL)
      v953 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v953 = v951;
    if (v953)
    {
      v954 = (char *)sub_1DCAE4D04((uint64_t)v655, v953);
      v949 = *a3;
      v947 = a3[1];
    }
    else
    {
      v954 = 0;
    }
    v955 = &v954[4 * v950];
    v946 = &v954[4 * v953];
    *(_DWORD *)v955 = v945;
    v948 = v955 + 4;
    while (v947 != v949)
    {
      v956 = *((_DWORD *)v947 - 1);
      v947 -= 4;
      *((_DWORD *)v955 - 1) = v956;
      v955 -= 4;
    }
    *a3 = v955;
    a3[1] = v948;
    a3[2] = v946;
    if (v949)
    {
      operator delete(v949);
      v946 = *v655;
    }
  }
  else
  {
    *(_DWORD *)v947 = v945;
    v948 = v947 + 4;
  }
  a3[1] = v948;
  v957 = v230 + 9;
  if (v948 >= v946)
  {
    v959 = *a3;
    v960 = (v948 - *a3) >> 2;
    v961 = v960 + 1;
    if ((unint64_t)(v960 + 1) >> 62)
      goto LABEL_2555;
    v962 = v946 - v959;
    if (v962 >> 1 > v961)
      v961 = v962 >> 1;
    if ((unint64_t)v962 >= 0x7FFFFFFFFFFFFFFCLL)
      v963 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v963 = v961;
    if (v963)
    {
      v964 = (char *)sub_1DCAE4D04((uint64_t)v655, v963);
      v959 = *a3;
      v948 = a3[1];
    }
    else
    {
      v964 = 0;
    }
    v965 = &v964[4 * v960];
    v946 = &v964[4 * v963];
    *(_DWORD *)v965 = v957;
    v958 = v965 + 4;
    while (v948 != v959)
    {
      v966 = *((_DWORD *)v948 - 1);
      v948 -= 4;
      *((_DWORD *)v965 - 1) = v966;
      v965 -= 4;
    }
    *a3 = v965;
    a3[1] = v958;
    a3[2] = v946;
    if (v959)
    {
      operator delete(v959);
      v946 = *v655;
    }
  }
  else
  {
    *(_DWORD *)v948 = v957;
    v958 = v948 + 4;
  }
  a3[1] = v958;
  v967 = v230 + 10;
  if (v958 >= v946)
  {
    v969 = *a3;
    v970 = (v958 - *a3) >> 2;
    v971 = v970 + 1;
    if ((unint64_t)(v970 + 1) >> 62)
      goto LABEL_2555;
    v972 = v946 - v969;
    if (v972 >> 1 > v971)
      v971 = v972 >> 1;
    if ((unint64_t)v972 >= 0x7FFFFFFFFFFFFFFCLL)
      v973 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v973 = v971;
    if (v973)
    {
      v974 = (char *)sub_1DCAE4D04((uint64_t)v655, v973);
      v969 = *a3;
      v958 = a3[1];
    }
    else
    {
      v974 = 0;
    }
    v975 = &v974[4 * v970];
    v946 = &v974[4 * v973];
    *(_DWORD *)v975 = v967;
    v968 = v975 + 4;
    while (v958 != v969)
    {
      v976 = *((_DWORD *)v958 - 1);
      v958 -= 4;
      *((_DWORD *)v975 - 1) = v976;
      v975 -= 4;
    }
    *a3 = v975;
    a3[1] = v968;
    a3[2] = v946;
    if (v969)
    {
      operator delete(v969);
      v946 = *v1526;
    }
  }
  else
  {
    *(_DWORD *)v958 = v967;
    v968 = v958 + 4;
  }
  a3[1] = v968;
  if (v968 >= v946)
  {
    v978 = *a3;
    v979 = (v968 - *a3) >> 2;
    v980 = v979 + 1;
    if ((unint64_t)(v979 + 1) >> 62)
      goto LABEL_2555;
    v981 = v946 - v978;
    if (v981 >> 1 > v980)
      v980 = v981 >> 1;
    if ((unint64_t)v981 >= 0x7FFFFFFFFFFFFFFCLL)
      v982 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v982 = v980;
    if (v982)
    {
      v983 = (char *)sub_1DCAE4D04((uint64_t)v1526, v982);
      v978 = *a3;
      v968 = a3[1];
    }
    else
    {
      v983 = 0;
    }
    v984 = &v983[4 * v979];
    v946 = &v983[4 * v982];
    *(_DWORD *)v984 = v957;
    v977 = v984 + 4;
    while (v968 != v978)
    {
      v985 = *((_DWORD *)v968 - 1);
      v968 -= 4;
      *((_DWORD *)v984 - 1) = v985;
      v984 -= 4;
    }
    *a3 = v984;
    a3[1] = v977;
    a3[2] = v946;
    if (v978)
    {
      operator delete(v978);
      v986 = a3 + 2;
      v946 = *v1526;
      goto LABEL_1656;
    }
  }
  else
  {
    *(_DWORD *)v968 = v957;
    v977 = v968 + 4;
  }
  v986 = a3 + 2;
LABEL_1656:
  a3[1] = v977;
  v987 = v230 + 11;
  if (v977 >= v946)
  {
    v989 = *a3;
    v990 = (v977 - *a3) >> 2;
    v991 = v990 + 1;
    if ((unint64_t)(v990 + 1) >> 62)
      goto LABEL_2555;
    v992 = v946 - v989;
    if (v992 >> 1 > v991)
      v991 = v992 >> 1;
    if ((unint64_t)v992 >= 0x7FFFFFFFFFFFFFFCLL)
      v993 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v993 = v991;
    if (v993)
    {
      v994 = (char *)sub_1DCAE4D04((uint64_t)v986, v993);
      v989 = *a3;
      v977 = a3[1];
    }
    else
    {
      v994 = 0;
    }
    v995 = &v994[4 * v990];
    v946 = &v994[4 * v993];
    *(_DWORD *)v995 = v987;
    v988 = v995 + 4;
    while (v977 != v989)
    {
      v996 = *((_DWORD *)v977 - 1);
      v977 -= 4;
      *((_DWORD *)v995 - 1) = v996;
      v995 -= 4;
    }
    *a3 = v995;
    a3[1] = v988;
    a3[2] = v946;
    if (v989)
    {
      operator delete(v989);
      v946 = *v986;
    }
  }
  else
  {
    *(_DWORD *)v977 = v987;
    v988 = v977 + 4;
  }
  a3[1] = v988;
  if (v988 >= v946)
  {
    v998 = *a3;
    v999 = (v988 - *a3) >> 2;
    v1000 = v999 + 1;
    if ((unint64_t)(v999 + 1) >> 62)
      goto LABEL_2555;
    v1001 = v946 - v998;
    if (v1001 >> 1 > v1000)
      v1000 = v1001 >> 1;
    if ((unint64_t)v1001 >= 0x7FFFFFFFFFFFFFFCLL)
      v1002 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1002 = v1000;
    if (v1002)
    {
      v1003 = (char *)sub_1DCAE4D04((uint64_t)v986, v1002);
      v998 = *a3;
      v988 = a3[1];
    }
    else
    {
      v1003 = 0;
    }
    v1004 = &v1003[4 * v999];
    v1005 = &v1003[4 * v1002];
    *(_DWORD *)v1004 = v967;
    v997 = v1004 + 4;
    while (v988 != v998)
    {
      v1006 = *((_DWORD *)v988 - 1);
      v988 -= 4;
      *((_DWORD *)v1004 - 1) = v1006;
      v1004 -= 4;
    }
    *a3 = v1004;
    a3[1] = v997;
    a3[2] = v1005;
    if (v998)
      operator delete(v998);
  }
  else
  {
    *(_DWORD *)v988 = v967;
    v997 = v988 + 4;
  }
  a3[1] = v997;
  v1007 = *v9;
  v1008 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v1010 = *(unsigned __int32 **)a2;
    v1011 = ((uint64_t)v1007 - *(_QWORD *)a2) >> 2;
    v1012 = v1011 + 1;
    if ((unint64_t)(v1011 + 1) >> 62)
      goto LABEL_2554;
    v1013 = v1008 - (char *)v1010;
    if (v1013 >> 1 > v1012)
      v1012 = v1013 >> 1;
    if ((unint64_t)v1013 >= 0x7FFFFFFFFFFFFFFCLL)
      v1014 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1014 = v1012;
    if (v1014)
    {
      v1015 = (char *)sub_1DCAE4D04((uint64_t)v13, v1014);
      v1010 = *(unsigned __int32 **)a2;
      v1007 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1015 = 0;
    }
    v1016 = &v1015[4 * v1011];
    v1008 = &v1015[4 * v1014];
    *(_DWORD *)v1016 = a5.n128_u32[0];
    v1009 = (unsigned __int32 *)(v1016 + 4);
    while (v1007 != v1010)
    {
      v1017 = *--v1007;
      *((_DWORD *)v1016 - 1) = v1017;
      v1016 -= 4;
    }
    *(_QWORD *)a2 = v1016;
    *(_QWORD *)(a2 + 8) = v1009;
    *(_QWORD *)(a2 + 16) = v1008;
    if (v1010)
    {
      operator delete(v1010);
      v1008 = *v13;
    }
  }
  else
  {
    *v1007 = a5.n128_u32[0];
    v1009 = v1007 + 1;
  }
  *v9 = v1009;
  if (v1009 >= (unsigned __int32 *)v1008)
  {
    v1019 = *(unsigned __int32 **)a2;
    v1020 = ((uint64_t)v1009 - *(_QWORD *)a2) >> 2;
    v1021 = v1020 + 1;
    if ((unint64_t)(v1020 + 1) >> 62)
      goto LABEL_2554;
    v1022 = v1008 - (char *)v1019;
    if (v1022 >> 1 > v1021)
      v1021 = v1022 >> 1;
    if ((unint64_t)v1022 >= 0x7FFFFFFFFFFFFFFCLL)
      v1023 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1023 = v1021;
    if (v1023)
    {
      v1024 = (char *)sub_1DCAE4D04((uint64_t)v13, v1023);
      v1019 = *(unsigned __int32 **)a2;
      v1009 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1024 = 0;
    }
    v1025 = (unsigned __int32 *)&v1024[4 * v1020];
    v1008 = &v1024[4 * v1023];
    *v1025 = v28;
    v1018 = v1025 + 1;
    while (v1009 != v1019)
    {
      v1026 = *--v1009;
      *--v1025 = v1026;
    }
    *(_QWORD *)a2 = v1025;
    *(_QWORD *)(a2 + 8) = v1018;
    *(_QWORD *)(a2 + 16) = v1008;
    if (v1019)
    {
      operator delete(v1019);
      v1008 = *v13;
    }
  }
  else
  {
    *v1009 = v28;
    v1018 = v1009 + 1;
  }
  *v9 = v1018;
  if (v1018 >= (unsigned __int32 *)v1008)
  {
    v1028 = *(unsigned __int32 **)a2;
    v1029 = ((uint64_t)v1018 - *(_QWORD *)a2) >> 2;
    v1030 = v1029 + 1;
    if ((unint64_t)(v1029 + 1) >> 62)
      goto LABEL_2554;
    v1031 = v1008 - (char *)v1028;
    if (v1031 >> 1 > v1030)
      v1030 = v1031 >> 1;
    if ((unint64_t)v1031 >= 0x7FFFFFFFFFFFFFFCLL)
      v1032 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1032 = v1030;
    if (v1032)
    {
      v1033 = (char *)sub_1DCAE4D04((uint64_t)v13, v1032);
      v1028 = *(unsigned __int32 **)a2;
      v1018 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1033 = 0;
    }
    v1034 = (unsigned __int32 *)&v1033[4 * v1029];
    v1008 = &v1033[4 * v1032];
    *v1034 = v48;
    v1027 = v1034 + 1;
    while (v1018 != v1028)
    {
      v1035 = *--v1018;
      *--v1034 = v1035;
    }
    *(_QWORD *)a2 = v1034;
    *(_QWORD *)(a2 + 8) = v1027;
    *(_QWORD *)(a2 + 16) = v1008;
    if (v1028)
    {
      operator delete(v1028);
      v1008 = *v13;
    }
  }
  else
  {
    *v1018 = v48;
    v1027 = v1018 + 1;
  }
  *v9 = v1027;
  if (v1027 >= (unsigned __int32 *)v1008)
  {
    v1037 = *(unsigned __int32 **)a2;
    v1038 = ((uint64_t)v1027 - *(_QWORD *)a2) >> 2;
    v1039 = v1038 + 1;
    if ((unint64_t)(v1038 + 1) >> 62)
      goto LABEL_2554;
    v1040 = v1008 - (char *)v1037;
    if (v1040 >> 1 > v1039)
      v1039 = v1040 >> 1;
    if ((unint64_t)v1040 >= 0x7FFFFFFFFFFFFFFCLL)
      v1041 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1041 = v1039;
    if (v1041)
    {
      v1042 = (char *)sub_1DCAE4D04((uint64_t)v13, v1041);
      v1037 = *(unsigned __int32 **)a2;
      v1027 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1042 = 0;
    }
    v1043 = &v1042[4 * v1038];
    v1008 = &v1042[4 * v1041];
    *(_DWORD *)v1043 = a5.n128_u32[0];
    v1036 = (unsigned __int32 *)(v1043 + 4);
    while (v1027 != v1037)
    {
      v1044 = *--v1027;
      *((_DWORD *)v1043 - 1) = v1044;
      v1043 -= 4;
    }
    *(_QWORD *)a2 = v1043;
    *(_QWORD *)(a2 + 8) = v1036;
    *(_QWORD *)(a2 + 16) = v1008;
    if (v1037)
    {
      operator delete(v1037);
      v1008 = *v13;
    }
  }
  else
  {
    *v1027 = a5.n128_u32[0];
    v1036 = v1027 + 1;
  }
  *v9 = v1036;
  if (v1036 >= (unsigned __int32 *)v1008)
  {
    v1046 = *(unsigned __int32 **)a2;
    v1047 = ((uint64_t)v1036 - *(_QWORD *)a2) >> 2;
    v1048 = v1047 + 1;
    if ((unint64_t)(v1047 + 1) >> 62)
      goto LABEL_2554;
    v1049 = v1008 - (char *)v1046;
    if (v1049 >> 1 > v1048)
      v1048 = v1049 >> 1;
    if ((unint64_t)v1049 >= 0x7FFFFFFFFFFFFFFCLL)
      v1050 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1050 = v1048;
    if (v1050)
    {
      v1051 = (char *)sub_1DCAE4D04((uint64_t)v13, v1050);
      v1046 = *(unsigned __int32 **)a2;
      v1036 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1051 = 0;
    }
    v1052 = &v1051[4 * v1047];
    v1008 = &v1051[4 * v1050];
    *(_DWORD *)v1052 = a5.n128_u32[1];
    v1045 = (unsigned __int32 *)(v1052 + 4);
    while (v1036 != v1046)
    {
      v1053 = *--v1036;
      *((_DWORD *)v1052 - 1) = v1053;
      v1052 -= 4;
    }
    *(_QWORD *)a2 = v1052;
    *(_QWORD *)(a2 + 8) = v1045;
    *(_QWORD *)(a2 + 16) = v1008;
    if (v1046)
    {
      operator delete(v1046);
      v1008 = *v13;
    }
  }
  else
  {
    *v1036 = a5.n128_u32[1];
    v1045 = v1036 + 1;
  }
  *v9 = v1045;
  if (v1045 >= (unsigned __int32 *)v1008)
  {
    v1055 = *(unsigned __int32 **)a2;
    v1056 = ((uint64_t)v1045 - *(_QWORD *)a2) >> 2;
    v1057 = v1056 + 1;
    if ((unint64_t)(v1056 + 1) >> 62)
      goto LABEL_2554;
    v1058 = v1008 - (char *)v1055;
    if (v1058 >> 1 > v1057)
      v1057 = v1058 >> 1;
    if ((unint64_t)v1058 >= 0x7FFFFFFFFFFFFFFCLL)
      v1059 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1059 = v1057;
    if (v1059)
    {
      v1060 = (char *)sub_1DCAE4D04((uint64_t)v13, v1059);
      v1055 = *(unsigned __int32 **)a2;
      v1045 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1060 = 0;
    }
    v1061 = (unsigned __int32 *)&v1060[4 * v1056];
    v1008 = &v1060[4 * v1059];
    *v1061 = v48;
    v1054 = v1061 + 1;
    while (v1045 != v1055)
    {
      v1062 = *--v1045;
      *--v1061 = v1062;
    }
    *(_QWORD *)a2 = v1061;
    *(_QWORD *)(a2 + 8) = v1054;
    *(_QWORD *)(a2 + 16) = v1008;
    if (v1055)
    {
      operator delete(v1055);
      v1008 = *v13;
    }
  }
  else
  {
    *v1045 = v48;
    v1054 = v1045 + 1;
  }
  *v9 = v1054;
  if (v1054 >= (unsigned __int32 *)v1008)
  {
    v1064 = *(unsigned __int32 **)a2;
    v1065 = ((uint64_t)v1054 - *(_QWORD *)a2) >> 2;
    v1066 = v1065 + 1;
    if ((unint64_t)(v1065 + 1) >> 62)
      goto LABEL_2554;
    v1067 = v1008 - (char *)v1064;
    if (v1067 >> 1 > v1066)
      v1066 = v1067 >> 1;
    if ((unint64_t)v1067 >= 0x7FFFFFFFFFFFFFFCLL)
      v1068 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1068 = v1066;
    if (v1068)
    {
      v1069 = (char *)sub_1DCAE4D04((uint64_t)v13, v1068);
      v1064 = *(unsigned __int32 **)a2;
      v1054 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1069 = 0;
    }
    v1070 = &v1069[4 * v1065];
    v1008 = &v1069[4 * v1068];
    *(_DWORD *)v1070 = a5.n128_u32[0];
    v1063 = (unsigned __int32 *)(v1070 + 4);
    while (v1054 != v1064)
    {
      v1071 = *--v1054;
      *((_DWORD *)v1070 - 1) = v1071;
      v1070 -= 4;
    }
    *(_QWORD *)a2 = v1070;
    *(_QWORD *)(a2 + 8) = v1063;
    *(_QWORD *)(a2 + 16) = v1008;
    if (v1064)
    {
      operator delete(v1064);
      v1008 = *v13;
    }
  }
  else
  {
    *v1054 = a5.n128_u32[0];
    v1063 = v1054 + 1;
  }
  *v9 = v1063;
  if (v1063 >= (unsigned __int32 *)v1008)
  {
    v1073 = *(unsigned __int32 **)a2;
    v1074 = ((uint64_t)v1063 - *(_QWORD *)a2) >> 2;
    v1075 = v1074 + 1;
    if ((unint64_t)(v1074 + 1) >> 62)
      goto LABEL_2554;
    v1076 = v1008 - (char *)v1073;
    if (v1076 >> 1 > v1075)
      v1075 = v1076 >> 1;
    if ((unint64_t)v1076 >= 0x7FFFFFFFFFFFFFFCLL)
      v1077 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1077 = v1075;
    if (v1077)
    {
      v1078 = (char *)sub_1DCAE4D04((uint64_t)v13, v1077);
      v1073 = *(unsigned __int32 **)a2;
      v1063 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1078 = 0;
    }
    v1079 = (unsigned __int32 *)&v1078[4 * v1074];
    v1008 = &v1078[4 * v1077];
    *v1079 = v28;
    v1072 = v1079 + 1;
    while (v1063 != v1073)
    {
      v1080 = *--v1063;
      *--v1079 = v1080;
    }
    *(_QWORD *)a2 = v1079;
    *(_QWORD *)(a2 + 8) = v1072;
    *(_QWORD *)(a2 + 16) = v1008;
    if (v1073)
    {
      operator delete(v1073);
      v1008 = *v13;
    }
  }
  else
  {
    *v1063 = v28;
    v1072 = v1063 + 1;
  }
  *v9 = v1072;
  if (v1072 >= (unsigned __int32 *)v1008)
  {
    v1082 = *(unsigned __int32 **)a2;
    v1083 = ((uint64_t)v1072 - *(_QWORD *)a2) >> 2;
    v1084 = v1083 + 1;
    if ((unint64_t)(v1083 + 1) >> 62)
      goto LABEL_2554;
    v1085 = v1008 - (char *)v1082;
    if (v1085 >> 1 > v1084)
      v1084 = v1085 >> 1;
    if ((unint64_t)v1085 >= 0x7FFFFFFFFFFFFFFCLL)
      v1086 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1086 = v1084;
    if (v1086)
    {
      v1087 = (char *)sub_1DCAE4D04((uint64_t)v13, v1086);
      v1082 = *(unsigned __int32 **)a2;
      v1072 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1087 = 0;
    }
    v1088 = &v1087[4 * v1083];
    v1008 = &v1087[4 * v1086];
    *(_DWORD *)v1088 = a5.n128_u32[2];
    v1081 = (unsigned __int32 *)(v1088 + 4);
    while (v1072 != v1082)
    {
      v1089 = *--v1072;
      *((_DWORD *)v1088 - 1) = v1089;
      v1088 -= 4;
    }
    *(_QWORD *)a2 = v1088;
    *(_QWORD *)(a2 + 8) = v1081;
    *(_QWORD *)(a2 + 16) = v1008;
    if (v1082)
    {
      operator delete(v1082);
      v1008 = *v13;
    }
  }
  else
  {
    *v1072 = a5.n128_u32[2];
    v1081 = v1072 + 1;
  }
  *v9 = v1081;
  if (v1081 >= (unsigned __int32 *)v1008)
  {
    v1091 = *(unsigned __int32 **)a2;
    v1092 = ((uint64_t)v1081 - *(_QWORD *)a2) >> 2;
    v1093 = v1092 + 1;
    if ((unint64_t)(v1092 + 1) >> 62)
      goto LABEL_2554;
    v1094 = v1008 - (char *)v1091;
    if (v1094 >> 1 > v1093)
      v1093 = v1094 >> 1;
    if ((unint64_t)v1094 >= 0x7FFFFFFFFFFFFFFCLL)
      v1095 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1095 = v1093;
    if (v1095)
    {
      v1096 = (char *)sub_1DCAE4D04((uint64_t)v13, v1095);
      v1091 = *(unsigned __int32 **)a2;
      v1081 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1096 = 0;
    }
    v1097 = &v1096[4 * v1092];
    v1008 = &v1096[4 * v1095];
    *(_DWORD *)v1097 = a5.n128_u32[0];
    v1090 = (unsigned __int32 *)(v1097 + 4);
    while (v1081 != v1091)
    {
      v1098 = *--v1081;
      *((_DWORD *)v1097 - 1) = v1098;
      v1097 -= 4;
    }
    *(_QWORD *)a2 = v1097;
    *(_QWORD *)(a2 + 8) = v1090;
    *(_QWORD *)(a2 + 16) = v1008;
    if (v1091)
    {
      operator delete(v1091);
      v1008 = *v13;
    }
  }
  else
  {
    *v1081 = a5.n128_u32[0];
    v1090 = v1081 + 1;
  }
  *v9 = v1090;
  if (v1090 >= (unsigned __int32 *)v1008)
  {
    v1100 = *(unsigned __int32 **)a2;
    v1101 = ((uint64_t)v1090 - *(_QWORD *)a2) >> 2;
    v1102 = v1101 + 1;
    if ((unint64_t)(v1101 + 1) >> 62)
      goto LABEL_2554;
    v1103 = v1008 - (char *)v1100;
    if (v1103 >> 1 > v1102)
      v1102 = v1103 >> 1;
    if ((unint64_t)v1103 >= 0x7FFFFFFFFFFFFFFCLL)
      v1104 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1104 = v1102;
    if (v1104)
    {
      v1105 = (char *)sub_1DCAE4D04((uint64_t)v13, v1104);
      v1100 = *(unsigned __int32 **)a2;
      v1090 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1105 = 0;
    }
    v1106 = &v1105[4 * v1101];
    v1008 = &v1105[4 * v1104];
    *(_DWORD *)v1106 = a5.n128_u32[1];
    v1099 = (unsigned __int32 *)(v1106 + 4);
    while (v1090 != v1100)
    {
      v1107 = *--v1090;
      *((_DWORD *)v1106 - 1) = v1107;
      v1106 -= 4;
    }
    *(_QWORD *)a2 = v1106;
    *(_QWORD *)(a2 + 8) = v1099;
    *(_QWORD *)(a2 + 16) = v1008;
    if (v1100)
    {
      operator delete(v1100);
      v1008 = *v13;
    }
  }
  else
  {
    *v1090 = a5.n128_u32[1];
    v1099 = v1090 + 1;
  }
  *v9 = v1099;
  if (v1099 >= (unsigned __int32 *)v1008)
  {
    v1109 = *(unsigned __int32 **)a2;
    v1110 = ((uint64_t)v1099 - *(_QWORD *)a2) >> 2;
    v1111 = v1110 + 1;
    if ((unint64_t)(v1110 + 1) >> 62)
      goto LABEL_2554;
    v1112 = v1008 - (char *)v1109;
    if (v1112 >> 1 > v1111)
      v1111 = v1112 >> 1;
    if ((unint64_t)v1112 >= 0x7FFFFFFFFFFFFFFCLL)
      v1113 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1113 = v1111;
    if (v1113)
    {
      v1114 = (char *)sub_1DCAE4D04((uint64_t)v13, v1113);
      v1109 = *(unsigned __int32 **)a2;
      v1099 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1114 = 0;
    }
    v1115 = &v1114[4 * v1110];
    v1116 = &v1114[4 * v1113];
    *(_DWORD *)v1115 = a5.n128_u32[2];
    v1108 = (unsigned __int32 *)(v1115 + 4);
    while (v1099 != v1109)
    {
      v1117 = *--v1099;
      *((_DWORD *)v1115 - 1) = v1117;
      v1115 -= 4;
    }
    *(_QWORD *)a2 = v1115;
    *(_QWORD *)(a2 + 8) = v1108;
    *(_QWORD *)(a2 + 16) = v1116;
    if (v1109)
      operator delete(v1109);
  }
  else
  {
    *v1099 = a5.n128_u32[2];
    v1108 = v1099 + 1;
  }
  *v9 = v1108;
  v1118 = v230 + 12;
  v1120 = a3[1];
  v1119 = a3[2];
  if (v1120 >= v1119)
  {
    v1122 = *a3;
    v1123 = (v1120 - *a3) >> 2;
    v1124 = v1123 + 1;
    if ((unint64_t)(v1123 + 1) >> 62)
      goto LABEL_2555;
    v1125 = v1119 - v1122;
    if (v1125 >> 1 > v1124)
      v1124 = v1125 >> 1;
    if ((unint64_t)v1125 >= 0x7FFFFFFFFFFFFFFCLL)
      v1126 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1126 = v1124;
    if (v1126)
    {
      v1127 = (char *)sub_1DCAE4D04((uint64_t)v986, v1126);
      v1122 = *a3;
      v1120 = a3[1];
    }
    else
    {
      v1127 = 0;
    }
    v1128 = &v1127[4 * v1123];
    v1119 = &v1127[4 * v1126];
    *(_DWORD *)v1128 = v1118;
    v1121 = v1128 + 4;
    while (v1120 != v1122)
    {
      v1129 = *((_DWORD *)v1120 - 1);
      v1120 -= 4;
      *((_DWORD *)v1128 - 1) = v1129;
      v1128 -= 4;
    }
    *a3 = v1128;
    a3[1] = v1121;
    a3[2] = v1119;
    if (v1122)
    {
      operator delete(v1122);
      v1119 = *v986;
    }
  }
  else
  {
    *(_DWORD *)v1120 = v1118;
    v1121 = v1120 + 4;
  }
  a3[1] = v1121;
  v1130 = v230 + 15;
  if (v1121 >= v1119)
  {
    v1132 = *a3;
    v1133 = (v1121 - *a3) >> 2;
    v1134 = v1133 + 1;
    if ((unint64_t)(v1133 + 1) >> 62)
      goto LABEL_2555;
    v1135 = v1119 - v1132;
    if (v1135 >> 1 > v1134)
      v1134 = v1135 >> 1;
    if ((unint64_t)v1135 >= 0x7FFFFFFFFFFFFFFCLL)
      v1136 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1136 = v1134;
    if (v1136)
    {
      v1137 = (char *)sub_1DCAE4D04((uint64_t)v986, v1136);
      v1132 = *a3;
      v1121 = a3[1];
    }
    else
    {
      v1137 = 0;
    }
    v1138 = &v1137[4 * v1133];
    v1119 = &v1137[4 * v1136];
    *(_DWORD *)v1138 = v1130;
    v1131 = v1138 + 4;
    while (v1121 != v1132)
    {
      v1139 = *((_DWORD *)v1121 - 1);
      v1121 -= 4;
      *((_DWORD *)v1138 - 1) = v1139;
      v1138 -= 4;
    }
    *a3 = v1138;
    a3[1] = v1131;
    a3[2] = v1119;
    if (v1132)
    {
      operator delete(v1132);
      v1119 = *v986;
    }
  }
  else
  {
    *(_DWORD *)v1121 = v1130;
    v1131 = v1121 + 4;
  }
  a3[1] = v1131;
  v1140 = v230 + 14;
  if (v1131 >= v1119)
  {
    v1142 = *a3;
    v1143 = (v1131 - *a3) >> 2;
    v1144 = v1143 + 1;
    if ((unint64_t)(v1143 + 1) >> 62)
      goto LABEL_2555;
    v1145 = v1119 - v1142;
    if (v1145 >> 1 > v1144)
      v1144 = v1145 >> 1;
    if ((unint64_t)v1145 >= 0x7FFFFFFFFFFFFFFCLL)
      v1146 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1146 = v1144;
    if (v1146)
    {
      v1147 = (char *)sub_1DCAE4D04((uint64_t)v1526, v1146);
      v1142 = *a3;
      v1131 = a3[1];
    }
    else
    {
      v1147 = 0;
    }
    v1148 = &v1147[4 * v1143];
    v1119 = &v1147[4 * v1146];
    *(_DWORD *)v1148 = v1140;
    v1141 = v1148 + 4;
    while (v1131 != v1142)
    {
      v1149 = *((_DWORD *)v1131 - 1);
      v1131 -= 4;
      *((_DWORD *)v1148 - 1) = v1149;
      v1148 -= 4;
    }
    *a3 = v1148;
    a3[1] = v1141;
    a3[2] = v1119;
    if (v1142)
    {
      operator delete(v1142);
      v1119 = *v1526;
    }
  }
  else
  {
    *(_DWORD *)v1131 = v1140;
    v1141 = v1131 + 4;
  }
  a3[1] = v1141;
  if (v1141 >= v1119)
  {
    v1151 = *a3;
    v1152 = (v1141 - *a3) >> 2;
    v1153 = v1152 + 1;
    if ((unint64_t)(v1152 + 1) >> 62)
      goto LABEL_2555;
    v1154 = v1119 - v1151;
    if (v1154 >> 1 > v1153)
      v1153 = v1154 >> 1;
    if ((unint64_t)v1154 >= 0x7FFFFFFFFFFFFFFCLL)
      v1155 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1155 = v1153;
    if (v1155)
    {
      v1156 = (char *)sub_1DCAE4D04((uint64_t)v1526, v1155);
      v1151 = *a3;
      v1141 = a3[1];
    }
    else
    {
      v1156 = 0;
    }
    v1157 = &v1156[4 * v1152];
    v1119 = &v1156[4 * v1155];
    *(_DWORD *)v1157 = v1118;
    v1150 = v1157 + 4;
    while (v1141 != v1151)
    {
      v1158 = *((_DWORD *)v1141 - 1);
      v1141 -= 4;
      *((_DWORD *)v1157 - 1) = v1158;
      v1157 -= 4;
    }
    *a3 = v1157;
    a3[1] = v1150;
    a3[2] = v1119;
    if (v1151)
    {
      operator delete(v1151);
      v1159 = a3 + 2;
      v1119 = *v1526;
      goto LABEL_1945;
    }
  }
  else
  {
    *(_DWORD *)v1141 = v1118;
    v1150 = v1141 + 4;
  }
  v1159 = a3 + 2;
LABEL_1945:
  a3[1] = v1150;
  v1160 = v230 + 13;
  if (v1150 >= v1119)
  {
    v1162 = *a3;
    v1163 = (v1150 - *a3) >> 2;
    v1164 = v1163 + 1;
    if ((unint64_t)(v1163 + 1) >> 62)
      goto LABEL_2555;
    v1165 = v1119 - v1162;
    if (v1165 >> 1 > v1164)
      v1164 = v1165 >> 1;
    if ((unint64_t)v1165 >= 0x7FFFFFFFFFFFFFFCLL)
      v1166 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1166 = v1164;
    if (v1166)
    {
      v1167 = (char *)sub_1DCAE4D04((uint64_t)v1159, v1166);
      v1162 = *a3;
      v1150 = a3[1];
    }
    else
    {
      v1167 = 0;
    }
    v1168 = &v1167[4 * v1163];
    v1119 = &v1167[4 * v1166];
    *(_DWORD *)v1168 = v1160;
    v1161 = v1168 + 4;
    while (v1150 != v1162)
    {
      v1169 = *((_DWORD *)v1150 - 1);
      v1150 -= 4;
      *((_DWORD *)v1168 - 1) = v1169;
      v1168 -= 4;
    }
    *a3 = v1168;
    a3[1] = v1161;
    a3[2] = v1119;
    if (v1162)
    {
      operator delete(v1162);
      v1119 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1150 = v1160;
    v1161 = v1150 + 4;
  }
  a3[1] = v1161;
  if (v1161 >= v1119)
  {
    v1171 = *a3;
    v1172 = (v1161 - *a3) >> 2;
    v1173 = v1172 + 1;
    if ((unint64_t)(v1172 + 1) >> 62)
      goto LABEL_2555;
    v1174 = v1119 - v1171;
    if (v1174 >> 1 > v1173)
      v1173 = v1174 >> 1;
    if ((unint64_t)v1174 >= 0x7FFFFFFFFFFFFFFCLL)
      v1175 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1175 = v1173;
    if (v1175)
    {
      v1176 = (char *)sub_1DCAE4D04((uint64_t)v1159, v1175);
      v1171 = *a3;
      v1161 = a3[1];
    }
    else
    {
      v1176 = 0;
    }
    v1177 = &v1176[4 * v1172];
    v1178 = &v1176[4 * v1175];
    *(_DWORD *)v1177 = v1130;
    v1170 = v1177 + 4;
    while (v1161 != v1171)
    {
      v1179 = *((_DWORD *)v1161 - 1);
      v1161 -= 4;
      *((_DWORD *)v1177 - 1) = v1179;
      v1177 -= 4;
    }
    *a3 = v1177;
    a3[1] = v1170;
    a3[2] = v1178;
    if (v1171)
      operator delete(v1171);
  }
  else
  {
    *(_DWORD *)v1161 = v1130;
    v1170 = v1161 + 4;
  }
  a3[1] = v1170;
  v1180 = *v9;
  v1181 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v1183 = *(unsigned __int32 **)a2;
    v1184 = ((uint64_t)v1180 - *(_QWORD *)a2) >> 2;
    v1185 = v1184 + 1;
    if ((unint64_t)(v1184 + 1) >> 62)
      goto LABEL_2554;
    v1186 = v1181 - (char *)v1183;
    if (v1186 >> 1 > v1185)
      v1185 = v1186 >> 1;
    if ((unint64_t)v1186 >= 0x7FFFFFFFFFFFFFFCLL)
      v1187 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1187 = v1185;
    if (v1187)
    {
      v1188 = (char *)sub_1DCAE4D04((uint64_t)v13, v1187);
      v1183 = *(unsigned __int32 **)a2;
      v1180 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1188 = 0;
    }
    v1189 = &v1188[4 * v1184];
    v1181 = &v1188[4 * v1187];
    *(_DWORD *)v1189 = v1527.n128_u32[0];
    v1182 = (unsigned __int32 *)(v1189 + 4);
    while (v1180 != v1183)
    {
      v1190 = *--v1180;
      *((_DWORD *)v1189 - 1) = v1190;
      v1189 -= 4;
    }
    *(_QWORD *)a2 = v1189;
    *(_QWORD *)(a2 + 8) = v1182;
    *(_QWORD *)(a2 + 16) = v1181;
    if (v1183)
    {
      operator delete(v1183);
      v1181 = *v13;
    }
  }
  else
  {
    *v1180 = v1527.n128_u32[0];
    v1182 = v1180 + 1;
  }
  *v9 = v1182;
  if (v1182 >= (unsigned __int32 *)v1181)
  {
    v1192 = *(unsigned __int32 **)a2;
    v1193 = ((uint64_t)v1182 - *(_QWORD *)a2) >> 2;
    v1194 = v1193 + 1;
    if ((unint64_t)(v1193 + 1) >> 62)
      goto LABEL_2554;
    v1195 = v1181 - (char *)v1192;
    if (v1195 >> 1 > v1194)
      v1194 = v1195 >> 1;
    if ((unint64_t)v1195 >= 0x7FFFFFFFFFFFFFFCLL)
      v1196 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1196 = v1194;
    if (v1196)
    {
      v1197 = (char *)sub_1DCAE4D04((uint64_t)v13, v1196);
      v1192 = *(unsigned __int32 **)a2;
      v1182 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1197 = 0;
    }
    v1198 = (unsigned __int32 *)&v1197[4 * v1193];
    v1181 = &v1197[4 * v1196];
    *v1198 = v28;
    v1191 = v1198 + 1;
    while (v1182 != v1192)
    {
      v1199 = *--v1182;
      *--v1198 = v1199;
    }
    *(_QWORD *)a2 = v1198;
    *(_QWORD *)(a2 + 8) = v1191;
    *(_QWORD *)(a2 + 16) = v1181;
    if (v1192)
    {
      operator delete(v1192);
      v1181 = *v13;
    }
  }
  else
  {
    *v1182 = v28;
    v1191 = v1182 + 1;
  }
  *v9 = v1191;
  if (v1191 >= (unsigned __int32 *)v1181)
  {
    v1201 = *(unsigned __int32 **)a2;
    v1202 = ((uint64_t)v1191 - *(_QWORD *)a2) >> 2;
    v1203 = v1202 + 1;
    if ((unint64_t)(v1202 + 1) >> 62)
      goto LABEL_2554;
    v1204 = v1181 - (char *)v1201;
    if (v1204 >> 1 > v1203)
      v1203 = v1204 >> 1;
    if ((unint64_t)v1204 >= 0x7FFFFFFFFFFFFFFCLL)
      v1205 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1205 = v1203;
    if (v1205)
    {
      v1206 = (char *)sub_1DCAE4D04((uint64_t)v13, v1205);
      v1201 = *(unsigned __int32 **)a2;
      v1191 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1206 = 0;
    }
    v1207 = (unsigned __int32 *)&v1206[4 * v1202];
    v1181 = &v1206[4 * v1205];
    *v1207 = v48;
    v1200 = v1207 + 1;
    while (v1191 != v1201)
    {
      v1208 = *--v1191;
      *--v1207 = v1208;
    }
    *(_QWORD *)a2 = v1207;
    *(_QWORD *)(a2 + 8) = v1200;
    *(_QWORD *)(a2 + 16) = v1181;
    if (v1201)
    {
      operator delete(v1201);
      v1181 = *v13;
    }
  }
  else
  {
    *v1191 = v48;
    v1200 = v1191 + 1;
  }
  *v9 = v1200;
  if (v1200 >= (unsigned __int32 *)v1181)
  {
    v1210 = *(unsigned __int32 **)a2;
    v1211 = ((uint64_t)v1200 - *(_QWORD *)a2) >> 2;
    v1212 = v1211 + 1;
    if ((unint64_t)(v1211 + 1) >> 62)
      goto LABEL_2554;
    v1213 = v1181 - (char *)v1210;
    if (v1213 >> 1 > v1212)
      v1212 = v1213 >> 1;
    if ((unint64_t)v1213 >= 0x7FFFFFFFFFFFFFFCLL)
      v1214 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1214 = v1212;
    if (v1214)
    {
      v1215 = (char *)sub_1DCAE4D04((uint64_t)v13, v1214);
      v1210 = *(unsigned __int32 **)a2;
      v1200 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1215 = 0;
    }
    v1216 = &v1215[4 * v1211];
    v1181 = &v1215[4 * v1214];
    *(_DWORD *)v1216 = a5.n128_u32[0];
    v1209 = (unsigned __int32 *)(v1216 + 4);
    while (v1200 != v1210)
    {
      v1217 = *--v1200;
      *((_DWORD *)v1216 - 1) = v1217;
      v1216 -= 4;
    }
    *(_QWORD *)a2 = v1216;
    *(_QWORD *)(a2 + 8) = v1209;
    *(_QWORD *)(a2 + 16) = v1181;
    if (v1210)
    {
      operator delete(v1210);
      v1181 = *v13;
    }
  }
  else
  {
    *v1200 = a5.n128_u32[0];
    v1209 = v1200 + 1;
  }
  *v9 = v1209;
  if (v1209 >= (unsigned __int32 *)v1181)
  {
    v1219 = *(unsigned __int32 **)a2;
    v1220 = ((uint64_t)v1209 - *(_QWORD *)a2) >> 2;
    v1221 = v1220 + 1;
    if ((unint64_t)(v1220 + 1) >> 62)
      goto LABEL_2554;
    v1222 = v1181 - (char *)v1219;
    if (v1222 >> 1 > v1221)
      v1221 = v1222 >> 1;
    if ((unint64_t)v1222 >= 0x7FFFFFFFFFFFFFFCLL)
      v1223 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1223 = v1221;
    if (v1223)
    {
      v1224 = (char *)sub_1DCAE4D04((uint64_t)v13, v1223);
      v1219 = *(unsigned __int32 **)a2;
      v1209 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1224 = 0;
    }
    v1225 = (unsigned __int32 *)&v1224[4 * v1220];
    v1181 = &v1224[4 * v1223];
    *v1225 = v28;
    v1218 = v1225 + 1;
    while (v1209 != v1219)
    {
      v1226 = *--v1209;
      *--v1225 = v1226;
    }
    *(_QWORD *)a2 = v1225;
    *(_QWORD *)(a2 + 8) = v1218;
    *(_QWORD *)(a2 + 16) = v1181;
    if (v1219)
    {
      operator delete(v1219);
      v1181 = *v13;
    }
  }
  else
  {
    *v1209 = v28;
    v1218 = v1209 + 1;
  }
  *v9 = v1218;
  if (v1218 >= (unsigned __int32 *)v1181)
  {
    v1228 = *(unsigned __int32 **)a2;
    v1229 = ((uint64_t)v1218 - *(_QWORD *)a2) >> 2;
    v1230 = v1229 + 1;
    if ((unint64_t)(v1229 + 1) >> 62)
      goto LABEL_2554;
    v1231 = v1181 - (char *)v1228;
    if (v1231 >> 1 > v1230)
      v1230 = v1231 >> 1;
    if ((unint64_t)v1231 >= 0x7FFFFFFFFFFFFFFCLL)
      v1232 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1232 = v1230;
    if (v1232)
    {
      v1233 = (char *)sub_1DCAE4D04((uint64_t)v13, v1232);
      v1228 = *(unsigned __int32 **)a2;
      v1218 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1233 = 0;
    }
    v1234 = (unsigned __int32 *)&v1233[4 * v1229];
    v1181 = &v1233[4 * v1232];
    *v1234 = v48;
    v1227 = v1234 + 1;
    while (v1218 != v1228)
    {
      v1235 = *--v1218;
      *--v1234 = v1235;
    }
    *(_QWORD *)a2 = v1234;
    *(_QWORD *)(a2 + 8) = v1227;
    *(_QWORD *)(a2 + 16) = v1181;
    if (v1228)
    {
      operator delete(v1228);
      v1181 = *v13;
    }
  }
  else
  {
    *v1218 = v48;
    v1227 = v1218 + 1;
  }
  *v9 = v1227;
  if (v1227 >= (unsigned __int32 *)v1181)
  {
    v1237 = *(unsigned __int32 **)a2;
    v1238 = ((uint64_t)v1227 - *(_QWORD *)a2) >> 2;
    v1239 = v1238 + 1;
    if ((unint64_t)(v1238 + 1) >> 62)
      goto LABEL_2554;
    v1240 = v1181 - (char *)v1237;
    if (v1240 >> 1 > v1239)
      v1239 = v1240 >> 1;
    if ((unint64_t)v1240 >= 0x7FFFFFFFFFFFFFFCLL)
      v1241 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1241 = v1239;
    if (v1241)
    {
      v1242 = (char *)sub_1DCAE4D04((uint64_t)v13, v1241);
      v1237 = *(unsigned __int32 **)a2;
      v1227 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1242 = 0;
    }
    v1243 = &v1242[4 * v1238];
    v1181 = &v1242[4 * v1241];
    *(_DWORD *)v1243 = v1527.n128_u32[0];
    v1236 = (unsigned __int32 *)(v1243 + 4);
    while (v1227 != v1237)
    {
      v1244 = *--v1227;
      *((_DWORD *)v1243 - 1) = v1244;
      v1243 -= 4;
    }
    *(_QWORD *)a2 = v1243;
    *(_QWORD *)(a2 + 8) = v1236;
    *(_QWORD *)(a2 + 16) = v1181;
    if (v1237)
    {
      operator delete(v1237);
      v1181 = *v13;
    }
  }
  else
  {
    *v1227 = v1527.n128_u32[0];
    v1236 = v1227 + 1;
  }
  *v9 = v1236;
  if (v1236 >= (unsigned __int32 *)v1181)
  {
    v1246 = *(unsigned __int32 **)a2;
    v1247 = ((uint64_t)v1236 - *(_QWORD *)a2) >> 2;
    v1248 = v1247 + 1;
    if ((unint64_t)(v1247 + 1) >> 62)
      goto LABEL_2554;
    v1249 = v1181 - (char *)v1246;
    if (v1249 >> 1 > v1248)
      v1248 = v1249 >> 1;
    if ((unint64_t)v1249 >= 0x7FFFFFFFFFFFFFFCLL)
      v1250 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1250 = v1248;
    if (v1250)
    {
      v1251 = (char *)sub_1DCAE4D04((uint64_t)v13, v1250);
      v1246 = *(unsigned __int32 **)a2;
      v1236 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1251 = 0;
    }
    v1252 = (unsigned __int32 *)&v1251[4 * v1247];
    v1181 = &v1251[4 * v1250];
    *v1252 = v28;
    v1245 = v1252 + 1;
    while (v1236 != v1246)
    {
      v1253 = *--v1236;
      *--v1252 = v1253;
    }
    *(_QWORD *)a2 = v1252;
    *(_QWORD *)(a2 + 8) = v1245;
    *(_QWORD *)(a2 + 16) = v1181;
    if (v1246)
    {
      operator delete(v1246);
      v1181 = *v13;
    }
  }
  else
  {
    *v1236 = v28;
    v1245 = v1236 + 1;
  }
  *v9 = v1245;
  if (v1245 >= (unsigned __int32 *)v1181)
  {
    v1255 = *(unsigned __int32 **)a2;
    v1256 = ((uint64_t)v1245 - *(_QWORD *)a2) >> 2;
    v1257 = v1256 + 1;
    if ((unint64_t)(v1256 + 1) >> 62)
      goto LABEL_2554;
    v1258 = v1181 - (char *)v1255;
    if (v1258 >> 1 > v1257)
      v1257 = v1258 >> 1;
    if ((unint64_t)v1258 >= 0x7FFFFFFFFFFFFFFCLL)
      v1259 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1259 = v1257;
    if (v1259)
    {
      v1260 = (char *)sub_1DCAE4D04((uint64_t)v13, v1259);
      v1255 = *(unsigned __int32 **)a2;
      v1245 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1260 = 0;
    }
    v1261 = &v1260[4 * v1256];
    v1181 = &v1260[4 * v1259];
    *(_DWORD *)v1261 = a5.n128_u32[2];
    v1254 = (unsigned __int32 *)(v1261 + 4);
    while (v1245 != v1255)
    {
      v1262 = *--v1245;
      *((_DWORD *)v1261 - 1) = v1262;
      v1261 -= 4;
    }
    *(_QWORD *)a2 = v1261;
    *(_QWORD *)(a2 + 8) = v1254;
    *(_QWORD *)(a2 + 16) = v1181;
    if (v1255)
    {
      operator delete(v1255);
      v1181 = *v13;
    }
  }
  else
  {
    *v1245 = a5.n128_u32[2];
    v1254 = v1245 + 1;
  }
  *v9 = v1254;
  if (v1254 >= (unsigned __int32 *)v1181)
  {
    v1264 = *(unsigned __int32 **)a2;
    v1265 = ((uint64_t)v1254 - *(_QWORD *)a2) >> 2;
    v1266 = v1265 + 1;
    if ((unint64_t)(v1265 + 1) >> 62)
      goto LABEL_2554;
    v1267 = v1181 - (char *)v1264;
    if (v1267 >> 1 > v1266)
      v1266 = v1267 >> 1;
    if ((unint64_t)v1267 >= 0x7FFFFFFFFFFFFFFCLL)
      v1268 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1268 = v1266;
    if (v1268)
    {
      v1269 = (char *)sub_1DCAE4D04((uint64_t)v13, v1268);
      v1264 = *(unsigned __int32 **)a2;
      v1254 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1269 = 0;
    }
    v1270 = &v1269[4 * v1265];
    v1181 = &v1269[4 * v1268];
    *(_DWORD *)v1270 = a5.n128_u32[0];
    v1263 = (unsigned __int32 *)(v1270 + 4);
    while (v1254 != v1264)
    {
      v1271 = *--v1254;
      *((_DWORD *)v1270 - 1) = v1271;
      v1270 -= 4;
    }
    *(_QWORD *)a2 = v1270;
    *(_QWORD *)(a2 + 8) = v1263;
    *(_QWORD *)(a2 + 16) = v1181;
    if (v1264)
    {
      operator delete(v1264);
      v1181 = *v13;
    }
  }
  else
  {
    *v1254 = a5.n128_u32[0];
    v1263 = v1254 + 1;
  }
  *v9 = v1263;
  if (v1263 >= (unsigned __int32 *)v1181)
  {
    v1273 = *(unsigned __int32 **)a2;
    v1274 = ((uint64_t)v1263 - *(_QWORD *)a2) >> 2;
    v1275 = v1274 + 1;
    if ((unint64_t)(v1274 + 1) >> 62)
      goto LABEL_2554;
    v1276 = v1181 - (char *)v1273;
    if (v1276 >> 1 > v1275)
      v1275 = v1276 >> 1;
    if ((unint64_t)v1276 >= 0x7FFFFFFFFFFFFFFCLL)
      v1277 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1277 = v1275;
    if (v1277)
    {
      v1278 = (char *)sub_1DCAE4D04((uint64_t)v13, v1277);
      v1273 = *(unsigned __int32 **)a2;
      v1263 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1278 = 0;
    }
    v1279 = (unsigned __int32 *)&v1278[4 * v1274];
    v1181 = &v1278[4 * v1277];
    *v1279 = v28;
    v1272 = v1279 + 1;
    while (v1263 != v1273)
    {
      v1280 = *--v1263;
      *--v1279 = v1280;
    }
    *(_QWORD *)a2 = v1279;
    *(_QWORD *)(a2 + 8) = v1272;
    *(_QWORD *)(a2 + 16) = v1181;
    if (v1273)
    {
      operator delete(v1273);
      v1181 = *v13;
    }
  }
  else
  {
    *v1263 = v28;
    v1272 = v1263 + 1;
  }
  *v9 = v1272;
  if (v1272 >= (unsigned __int32 *)v1181)
  {
    v1282 = *(unsigned __int32 **)a2;
    v1283 = ((uint64_t)v1272 - *(_QWORD *)a2) >> 2;
    v1284 = v1283 + 1;
    if ((unint64_t)(v1283 + 1) >> 62)
      goto LABEL_2554;
    v1285 = v1181 - (char *)v1282;
    if (v1285 >> 1 > v1284)
      v1284 = v1285 >> 1;
    if ((unint64_t)v1285 >= 0x7FFFFFFFFFFFFFFCLL)
      v1286 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1286 = v1284;
    if (v1286)
    {
      v1287 = (char *)sub_1DCAE4D04((uint64_t)v13, v1286);
      v1282 = *(unsigned __int32 **)a2;
      v1272 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1287 = 0;
    }
    v1288 = &v1287[4 * v1283];
    v1289 = &v1287[4 * v1286];
    *(_DWORD *)v1288 = a5.n128_u32[2];
    v1281 = (unsigned __int32 *)(v1288 + 4);
    while (v1272 != v1282)
    {
      v1290 = *--v1272;
      *((_DWORD *)v1288 - 1) = v1290;
      v1288 -= 4;
    }
    *(_QWORD *)a2 = v1288;
    *(_QWORD *)(a2 + 8) = v1281;
    *(_QWORD *)(a2 + 16) = v1289;
    if (v1282)
      operator delete(v1282);
  }
  else
  {
    *v1272 = a5.n128_u32[2];
    v1281 = v1272 + 1;
  }
  *v9 = v1281;
  v1291 = v230 + 16;
  v1293 = a3[1];
  v1292 = a3[2];
  if (v1293 >= v1292)
  {
    v1295 = *a3;
    v1296 = (v1293 - *a3) >> 2;
    v1297 = v1296 + 1;
    if ((unint64_t)(v1296 + 1) >> 62)
      goto LABEL_2555;
    v1298 = v1292 - v1295;
    if (v1298 >> 1 > v1297)
      v1297 = v1298 >> 1;
    if ((unint64_t)v1298 >= 0x7FFFFFFFFFFFFFFCLL)
      v1299 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1299 = v1297;
    if (v1299)
    {
      v1300 = (char *)sub_1DCAE4D04((uint64_t)v1159, v1299);
      v1295 = *a3;
      v1293 = a3[1];
    }
    else
    {
      v1300 = 0;
    }
    v1301 = &v1300[4 * v1296];
    v1292 = &v1300[4 * v1299];
    *(_DWORD *)v1301 = v1291;
    v1294 = v1301 + 4;
    while (v1293 != v1295)
    {
      v1302 = *((_DWORD *)v1293 - 1);
      v1293 -= 4;
      *((_DWORD *)v1301 - 1) = v1302;
      v1301 -= 4;
    }
    *a3 = v1301;
    a3[1] = v1294;
    a3[2] = v1292;
    if (v1295)
    {
      operator delete(v1295);
      v1292 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1293 = v1291;
    v1294 = v1293 + 4;
  }
  a3[1] = v1294;
  v1303 = v230 + 17;
  if (v1294 >= v1292)
  {
    v1305 = *a3;
    v1306 = (v1294 - *a3) >> 2;
    v1307 = v1306 + 1;
    if ((unint64_t)(v1306 + 1) >> 62)
      goto LABEL_2555;
    v1308 = v1292 - v1305;
    if (v1308 >> 1 > v1307)
      v1307 = v1308 >> 1;
    if ((unint64_t)v1308 >= 0x7FFFFFFFFFFFFFFCLL)
      v1309 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1309 = v1307;
    if (v1309)
    {
      v1310 = (char *)sub_1DCAE4D04((uint64_t)v1159, v1309);
      v1305 = *a3;
      v1294 = a3[1];
    }
    else
    {
      v1310 = 0;
    }
    v1311 = &v1310[4 * v1306];
    v1292 = &v1310[4 * v1309];
    *(_DWORD *)v1311 = v1303;
    v1304 = v1311 + 4;
    while (v1294 != v1305)
    {
      v1312 = *((_DWORD *)v1294 - 1);
      v1294 -= 4;
      *((_DWORD *)v1311 - 1) = v1312;
      v1311 -= 4;
    }
    *a3 = v1311;
    a3[1] = v1304;
    a3[2] = v1292;
    if (v1305)
    {
      operator delete(v1305);
      v1292 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1294 = v1303;
    v1304 = v1294 + 4;
  }
  a3[1] = v1304;
  v1313 = v230 + 19;
  if (v1304 >= v1292)
  {
    v1315 = *a3;
    v1316 = (v1304 - *a3) >> 2;
    v1317 = v1316 + 1;
    if ((unint64_t)(v1316 + 1) >> 62)
      goto LABEL_2555;
    v1318 = v1292 - v1315;
    if (v1318 >> 1 > v1317)
      v1317 = v1318 >> 1;
    if ((unint64_t)v1318 >= 0x7FFFFFFFFFFFFFFCLL)
      v1319 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1319 = v1317;
    if (v1319)
    {
      v1320 = (char *)sub_1DCAE4D04((uint64_t)v1159, v1319);
      v1315 = *a3;
      v1304 = a3[1];
    }
    else
    {
      v1320 = 0;
    }
    v1321 = &v1320[4 * v1316];
    v1292 = &v1320[4 * v1319];
    *(_DWORD *)v1321 = v1313;
    v1314 = v1321 + 4;
    while (v1304 != v1315)
    {
      v1322 = *((_DWORD *)v1304 - 1);
      v1304 -= 4;
      *((_DWORD *)v1321 - 1) = v1322;
      v1321 -= 4;
    }
    *a3 = v1321;
    a3[1] = v1314;
    a3[2] = v1292;
    if (v1315)
    {
      operator delete(v1315);
      v1292 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1304 = v1313;
    v1314 = v1304 + 4;
  }
  a3[1] = v1314;
  if (v1314 >= v1292)
  {
    v1324 = *a3;
    v1325 = (v1314 - *a3) >> 2;
    v1326 = v1325 + 1;
    if ((unint64_t)(v1325 + 1) >> 62)
      goto LABEL_2555;
    v1327 = v1292 - v1324;
    if (v1327 >> 1 > v1326)
      v1326 = v1327 >> 1;
    if ((unint64_t)v1327 >= 0x7FFFFFFFFFFFFFFCLL)
      v1328 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1328 = v1326;
    if (v1328)
    {
      v1329 = (char *)sub_1DCAE4D04((uint64_t)v1159, v1328);
      v1324 = *a3;
      v1314 = a3[1];
    }
    else
    {
      v1329 = 0;
    }
    v1330 = &v1329[4 * v1325];
    v1292 = &v1329[4 * v1328];
    *(_DWORD *)v1330 = v1291;
    v1323 = v1330 + 4;
    while (v1314 != v1324)
    {
      v1331 = *((_DWORD *)v1314 - 1);
      v1314 -= 4;
      *((_DWORD *)v1330 - 1) = v1331;
      v1330 -= 4;
    }
    *a3 = v1330;
    a3[1] = v1323;
    a3[2] = v1292;
    if (v1324)
    {
      operator delete(v1324);
      v1292 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1314 = v1291;
    v1323 = v1314 + 4;
  }
  a3[1] = v1323;
  if (v1323 >= v1292)
  {
    v1333 = *a3;
    v1334 = (v1323 - *a3) >> 2;
    v1335 = v1334 + 1;
    if ((unint64_t)(v1334 + 1) >> 62)
      goto LABEL_2555;
    v1336 = v1292 - v1333;
    if (v1336 >> 1 > v1335)
      v1335 = v1336 >> 1;
    if ((unint64_t)v1336 >= 0x7FFFFFFFFFFFFFFCLL)
      v1337 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1337 = v1335;
    if (v1337)
    {
      v1338 = (char *)sub_1DCAE4D04((uint64_t)v1159, v1337);
      v1333 = *a3;
      v1323 = a3[1];
    }
    else
    {
      v1338 = 0;
    }
    v1339 = &v1338[4 * v1334];
    v1292 = &v1338[4 * v1337];
    *(_DWORD *)v1339 = v1313;
    v1332 = v1339 + 4;
    while (v1323 != v1333)
    {
      v1340 = *((_DWORD *)v1323 - 1);
      v1323 -= 4;
      *((_DWORD *)v1339 - 1) = v1340;
      v1339 -= 4;
    }
    *a3 = v1339;
    a3[1] = v1332;
    a3[2] = v1292;
    if (v1333)
    {
      operator delete(v1333);
      v1292 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1323 = v1313;
    v1332 = v1323 + 4;
  }
  a3[1] = v1332;
  v1341 = v230 + 18;
  if (v1332 >= v1292)
  {
    v1343 = *a3;
    v1344 = (v1332 - *a3) >> 2;
    v1345 = v1344 + 1;
    if ((unint64_t)(v1344 + 1) >> 62)
      goto LABEL_2555;
    v1346 = v1292 - v1343;
    if (v1346 >> 1 > v1345)
      v1345 = v1346 >> 1;
    if ((unint64_t)v1346 >= 0x7FFFFFFFFFFFFFFCLL)
      v1347 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1347 = v1345;
    if (v1347)
    {
      v1348 = (char *)sub_1DCAE4D04((uint64_t)v1159, v1347);
      v1343 = *a3;
      v1332 = a3[1];
    }
    else
    {
      v1348 = 0;
    }
    v1349 = &v1348[4 * v1344];
    v1350 = &v1348[4 * v1347];
    *(_DWORD *)v1349 = v1341;
    v1342 = v1349 + 4;
    while (v1332 != v1343)
    {
      v1351 = *((_DWORD *)v1332 - 1);
      v1332 -= 4;
      *((_DWORD *)v1349 - 1) = v1351;
      v1349 -= 4;
    }
    *a3 = v1349;
    a3[1] = v1342;
    a3[2] = v1350;
    if (v1343)
      operator delete(v1343);
  }
  else
  {
    *(_DWORD *)v1332 = v1341;
    v1342 = v1332 + 4;
  }
  a3[1] = v1342;
  v1352 = *v9;
  v1353 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v1355 = *(unsigned __int32 **)a2;
    v1356 = ((uint64_t)v1352 - *(_QWORD *)a2) >> 2;
    v1357 = v1356 + 1;
    if ((unint64_t)(v1356 + 1) >> 62)
      goto LABEL_2554;
    v1358 = v1353 - (char *)v1355;
    if (v1358 >> 1 > v1357)
      v1357 = v1358 >> 1;
    if ((unint64_t)v1358 >= 0x7FFFFFFFFFFFFFFCLL)
      v1359 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1359 = v1357;
    if (v1359)
    {
      v1360 = (char *)sub_1DCAE4D04((uint64_t)v13, v1359);
      v1355 = *(unsigned __int32 **)a2;
      v1352 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1360 = 0;
    }
    v1361 = &v1360[4 * v1356];
    v1353 = &v1360[4 * v1359];
    *(_DWORD *)v1361 = v1527.n128_u32[0];
    v1354 = (unsigned __int32 *)(v1361 + 4);
    while (v1352 != v1355)
    {
      v1362 = *--v1352;
      *((_DWORD *)v1361 - 1) = v1362;
      v1361 -= 4;
    }
    *(_QWORD *)a2 = v1361;
    *(_QWORD *)(a2 + 8) = v1354;
    *(_QWORD *)(a2 + 16) = v1353;
    if (v1355)
    {
      operator delete(v1355);
      v1353 = *v13;
    }
  }
  else
  {
    *v1352 = v1527.n128_u32[0];
    v1354 = v1352 + 1;
  }
  *v9 = v1354;
  if (v1354 >= (unsigned __int32 *)v1353)
  {
    v1364 = *(unsigned __int32 **)a2;
    v1365 = ((uint64_t)v1354 - *(_QWORD *)a2) >> 2;
    v1366 = v1365 + 1;
    if ((unint64_t)(v1365 + 1) >> 62)
      goto LABEL_2554;
    v1367 = v1353 - (char *)v1364;
    if (v1367 >> 1 > v1366)
      v1366 = v1367 >> 1;
    if ((unint64_t)v1367 >= 0x7FFFFFFFFFFFFFFCLL)
      v1368 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1368 = v1366;
    if (v1368)
    {
      v1369 = (char *)sub_1DCAE4D04((uint64_t)v13, v1368);
      v1364 = *(unsigned __int32 **)a2;
      v1354 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1369 = 0;
    }
    v1370 = &v1369[4 * v1365];
    v1353 = &v1369[4 * v1368];
    *(_DWORD *)v1370 = a5.n128_u32[1];
    v1363 = (unsigned __int32 *)(v1370 + 4);
    while (v1354 != v1364)
    {
      v1371 = *--v1354;
      *((_DWORD *)v1370 - 1) = v1371;
      v1370 -= 4;
    }
    *(_QWORD *)a2 = v1370;
    *(_QWORD *)(a2 + 8) = v1363;
    *(_QWORD *)(a2 + 16) = v1353;
    if (v1364)
    {
      operator delete(v1364);
      v1353 = *v13;
    }
  }
  else
  {
    *v1354 = a5.n128_u32[1];
    v1363 = v1354 + 1;
  }
  *v9 = v1363;
  if (v1363 >= (unsigned __int32 *)v1353)
  {
    v1373 = *(unsigned __int32 **)a2;
    v1374 = ((uint64_t)v1363 - *(_QWORD *)a2) >> 2;
    v1375 = v1374 + 1;
    if ((unint64_t)(v1374 + 1) >> 62)
      goto LABEL_2554;
    v1376 = v1353 - (char *)v1373;
    if (v1376 >> 1 > v1375)
      v1375 = v1376 >> 1;
    if ((unint64_t)v1376 >= 0x7FFFFFFFFFFFFFFCLL)
      v1377 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1377 = v1375;
    if (v1377)
    {
      v1378 = (char *)sub_1DCAE4D04((uint64_t)v13, v1377);
      v1373 = *(unsigned __int32 **)a2;
      v1363 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1378 = 0;
    }
    v1379 = (unsigned __int32 *)&v1378[4 * v1374];
    v1353 = &v1378[4 * v1377];
    *v1379 = v48;
    v1372 = v1379 + 1;
    while (v1363 != v1373)
    {
      v1380 = *--v1363;
      *--v1379 = v1380;
    }
    *(_QWORD *)a2 = v1379;
    *(_QWORD *)(a2 + 8) = v1372;
    *(_QWORD *)(a2 + 16) = v1353;
    if (v1373)
    {
      operator delete(v1373);
      v1353 = *v13;
    }
  }
  else
  {
    *v1363 = v48;
    v1372 = v1363 + 1;
  }
  *v9 = v1372;
  if (v1372 >= (unsigned __int32 *)v1353)
  {
    v1382 = *(unsigned __int32 **)a2;
    v1383 = ((uint64_t)v1372 - *(_QWORD *)a2) >> 2;
    v1384 = v1383 + 1;
    if ((unint64_t)(v1383 + 1) >> 62)
      goto LABEL_2554;
    v1385 = v1353 - (char *)v1382;
    if (v1385 >> 1 > v1384)
      v1384 = v1385 >> 1;
    if ((unint64_t)v1385 >= 0x7FFFFFFFFFFFFFFCLL)
      v1386 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1386 = v1384;
    if (v1386)
    {
      v1387 = (char *)sub_1DCAE4D04((uint64_t)v13, v1386);
      v1382 = *(unsigned __int32 **)a2;
      v1372 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1387 = 0;
    }
    v1388 = &v1387[4 * v1383];
    v1353 = &v1387[4 * v1386];
    *(_DWORD *)v1388 = a5.n128_u32[0];
    v1381 = (unsigned __int32 *)(v1388 + 4);
    while (v1372 != v1382)
    {
      v1389 = *--v1372;
      *((_DWORD *)v1388 - 1) = v1389;
      v1388 -= 4;
    }
    *(_QWORD *)a2 = v1388;
    *(_QWORD *)(a2 + 8) = v1381;
    *(_QWORD *)(a2 + 16) = v1353;
    if (v1382)
    {
      operator delete(v1382);
      v1353 = *v13;
    }
  }
  else
  {
    *v1372 = a5.n128_u32[0];
    v1381 = v1372 + 1;
  }
  *v9 = v1381;
  if (v1381 >= (unsigned __int32 *)v1353)
  {
    v1391 = *(unsigned __int32 **)a2;
    v1392 = ((uint64_t)v1381 - *(_QWORD *)a2) >> 2;
    v1393 = v1392 + 1;
    if ((unint64_t)(v1392 + 1) >> 62)
      goto LABEL_2554;
    v1394 = v1353 - (char *)v1391;
    if (v1394 >> 1 > v1393)
      v1393 = v1394 >> 1;
    if ((unint64_t)v1394 >= 0x7FFFFFFFFFFFFFFCLL)
      v1395 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1395 = v1393;
    if (v1395)
    {
      v1396 = (char *)sub_1DCAE4D04((uint64_t)v13, v1395);
      v1391 = *(unsigned __int32 **)a2;
      v1381 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1396 = 0;
    }
    v1397 = &v1396[4 * v1392];
    v1353 = &v1396[4 * v1395];
    *(_DWORD *)v1397 = a5.n128_u32[1];
    v1390 = (unsigned __int32 *)(v1397 + 4);
    while (v1381 != v1391)
    {
      v1398 = *--v1381;
      *((_DWORD *)v1397 - 1) = v1398;
      v1397 -= 4;
    }
    *(_QWORD *)a2 = v1397;
    *(_QWORD *)(a2 + 8) = v1390;
    *(_QWORD *)(a2 + 16) = v1353;
    if (v1391)
    {
      operator delete(v1391);
      v1353 = *v13;
    }
  }
  else
  {
    *v1381 = a5.n128_u32[1];
    v1390 = v1381 + 1;
  }
  *v9 = v1390;
  if (v1390 >= (unsigned __int32 *)v1353)
  {
    v1400 = *(unsigned __int32 **)a2;
    v1401 = ((uint64_t)v1390 - *(_QWORD *)a2) >> 2;
    v1402 = v1401 + 1;
    if ((unint64_t)(v1401 + 1) >> 62)
      goto LABEL_2554;
    v1403 = v1353 - (char *)v1400;
    if (v1403 >> 1 > v1402)
      v1402 = v1403 >> 1;
    if ((unint64_t)v1403 >= 0x7FFFFFFFFFFFFFFCLL)
      v1404 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1404 = v1402;
    if (v1404)
    {
      v1405 = (char *)sub_1DCAE4D04((uint64_t)v13, v1404);
      v1400 = *(unsigned __int32 **)a2;
      v1390 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1405 = 0;
    }
    v1406 = (unsigned __int32 *)&v1405[4 * v1401];
    v1353 = &v1405[4 * v1404];
    *v1406 = v48;
    v1399 = v1406 + 1;
    while (v1390 != v1400)
    {
      v1407 = *--v1390;
      *--v1406 = v1407;
    }
    *(_QWORD *)a2 = v1406;
    *(_QWORD *)(a2 + 8) = v1399;
    *(_QWORD *)(a2 + 16) = v1353;
    if (v1400)
    {
      operator delete(v1400);
      v1353 = *v13;
    }
  }
  else
  {
    *v1390 = v48;
    v1399 = v1390 + 1;
  }
  v1408 = v1527.n128_u32[0];
  *v9 = v1399;
  if (v1399 >= (unsigned __int32 *)v1353)
  {
    v1410 = *(unsigned __int32 **)a2;
    v1411 = ((uint64_t)v1399 - *(_QWORD *)a2) >> 2;
    v1412 = v1411 + 1;
    if ((unint64_t)(v1411 + 1) >> 62)
      goto LABEL_2554;
    v1413 = v1353 - (char *)v1410;
    if (v1413 >> 1 > v1412)
      v1412 = v1413 >> 1;
    if ((unint64_t)v1413 >= 0x7FFFFFFFFFFFFFFCLL)
      v1414 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1414 = v1412;
    if (v1414)
    {
      v1415 = (char *)sub_1DCAE4D04((uint64_t)v13, v1414);
      v1408 = v1527.n128_u32[0];
      v1416 = v1415;
      v1410 = *(unsigned __int32 **)a2;
      v1399 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1416 = 0;
    }
    v1417 = (unsigned __int32 *)&v1416[4 * v1411];
    v1353 = &v1416[4 * v1414];
    *v1417 = v1408;
    v1409 = v1417 + 1;
    while (v1399 != v1410)
    {
      v1418 = *--v1399;
      *--v1417 = v1418;
    }
    *(_QWORD *)a2 = v1417;
    *(_QWORD *)(a2 + 8) = v1409;
    *(_QWORD *)(a2 + 16) = v1353;
    if (v1410)
    {
      operator delete(v1410);
      v1353 = *v13;
    }
  }
  else
  {
    *v1399 = v1527.n128_u32[0];
    v1409 = v1399 + 1;
  }
  *v9 = v1409;
  if (v1409 >= (unsigned __int32 *)v1353)
  {
    v1420 = *(unsigned __int32 **)a2;
    v1421 = ((uint64_t)v1409 - *(_QWORD *)a2) >> 2;
    v1422 = v1421 + 1;
    if ((unint64_t)(v1421 + 1) >> 62)
      goto LABEL_2554;
    v1423 = v1353 - (char *)v1420;
    if (v1423 >> 1 > v1422)
      v1422 = v1423 >> 1;
    if ((unint64_t)v1423 >= 0x7FFFFFFFFFFFFFFCLL)
      v1424 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1424 = v1422;
    if (v1424)
    {
      v1425 = (char *)sub_1DCAE4D04((uint64_t)v13, v1424);
      v1420 = *(unsigned __int32 **)a2;
      v1409 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1425 = 0;
    }
    v1426 = &v1425[4 * v1421];
    v1353 = &v1425[4 * v1424];
    *(_DWORD *)v1426 = a5.n128_u32[1];
    v1419 = (unsigned __int32 *)(v1426 + 4);
    while (v1409 != v1420)
    {
      v1427 = *--v1409;
      *((_DWORD *)v1426 - 1) = v1427;
      v1426 -= 4;
    }
    *(_QWORD *)a2 = v1426;
    *(_QWORD *)(a2 + 8) = v1419;
    *(_QWORD *)(a2 + 16) = v1353;
    if (v1420)
    {
      operator delete(v1420);
      v1353 = *v13;
    }
  }
  else
  {
    *v1409 = a5.n128_u32[1];
    v1419 = v1409 + 1;
  }
  *v9 = v1419;
  if (v1419 >= (unsigned __int32 *)v1353)
  {
    v1429 = *(unsigned __int32 **)a2;
    v1430 = ((uint64_t)v1419 - *(_QWORD *)a2) >> 2;
    v1431 = v1430 + 1;
    if ((unint64_t)(v1430 + 1) >> 62)
      goto LABEL_2554;
    v1432 = v1353 - (char *)v1429;
    if (v1432 >> 1 > v1431)
      v1431 = v1432 >> 1;
    if ((unint64_t)v1432 >= 0x7FFFFFFFFFFFFFFCLL)
      v1433 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1433 = v1431;
    if (v1433)
    {
      v1434 = (char *)sub_1DCAE4D04((uint64_t)v13, v1433);
      v1429 = *(unsigned __int32 **)a2;
      v1419 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1434 = 0;
    }
    v1435 = &v1434[4 * v1430];
    v1353 = &v1434[4 * v1433];
    *(_DWORD *)v1435 = a5.n128_u32[2];
    v1428 = (unsigned __int32 *)(v1435 + 4);
    while (v1419 != v1429)
    {
      v1436 = *--v1419;
      *((_DWORD *)v1435 - 1) = v1436;
      v1435 -= 4;
    }
    *(_QWORD *)a2 = v1435;
    *(_QWORD *)(a2 + 8) = v1428;
    *(_QWORD *)(a2 + 16) = v1353;
    if (v1429)
    {
      operator delete(v1429);
      v1353 = *v13;
    }
  }
  else
  {
    *v1419 = a5.n128_u32[2];
    v1428 = v1419 + 1;
  }
  *v9 = v1428;
  if (v1428 >= (unsigned __int32 *)v1353)
  {
    v1438 = *(unsigned __int32 **)a2;
    v1439 = ((uint64_t)v1428 - *(_QWORD *)a2) >> 2;
    v1440 = v1439 + 1;
    if ((unint64_t)(v1439 + 1) >> 62)
      goto LABEL_2554;
    v1441 = v1353 - (char *)v1438;
    if (v1441 >> 1 > v1440)
      v1440 = v1441 >> 1;
    if ((unint64_t)v1441 >= 0x7FFFFFFFFFFFFFFCLL)
      v1442 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1442 = v1440;
    if (v1442)
    {
      v1443 = (char *)sub_1DCAE4D04((uint64_t)v13, v1442);
      v1438 = *(unsigned __int32 **)a2;
      v1428 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1443 = 0;
    }
    v1444 = &v1443[4 * v1439];
    v1353 = &v1443[4 * v1442];
    *(_DWORD *)v1444 = a5.n128_u32[0];
    v1437 = (unsigned __int32 *)(v1444 + 4);
    while (v1428 != v1438)
    {
      v1445 = *--v1428;
      *((_DWORD *)v1444 - 1) = v1445;
      v1444 -= 4;
    }
    *(_QWORD *)a2 = v1444;
    *(_QWORD *)(a2 + 8) = v1437;
    *(_QWORD *)(a2 + 16) = v1353;
    if (v1438)
    {
      operator delete(v1438);
      v1353 = *v13;
    }
  }
  else
  {
    *v1428 = a5.n128_u32[0];
    v1437 = v1428 + 1;
  }
  *v9 = v1437;
  if (v1437 >= (unsigned __int32 *)v1353)
  {
    v1447 = *(unsigned __int32 **)a2;
    v1448 = ((uint64_t)v1437 - *(_QWORD *)a2) >> 2;
    v1449 = v1448 + 1;
    if ((unint64_t)(v1448 + 1) >> 62)
      goto LABEL_2554;
    v1450 = v1353 - (char *)v1447;
    if (v1450 >> 1 > v1449)
      v1449 = v1450 >> 1;
    if ((unint64_t)v1450 >= 0x7FFFFFFFFFFFFFFCLL)
      v1451 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1451 = v1449;
    if (v1451)
    {
      v1452 = (char *)sub_1DCAE4D04((uint64_t)v13, v1451);
      v1447 = *(unsigned __int32 **)a2;
      v1437 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1452 = 0;
    }
    v1453 = &v1452[4 * v1448];
    v1353 = &v1452[4 * v1451];
    *(_DWORD *)v1453 = a5.n128_u32[1];
    v1446 = (unsigned __int32 *)(v1453 + 4);
    while (v1437 != v1447)
    {
      v1454 = *--v1437;
      *((_DWORD *)v1453 - 1) = v1454;
      v1453 -= 4;
    }
    *(_QWORD *)a2 = v1453;
    *(_QWORD *)(a2 + 8) = v1446;
    *(_QWORD *)(a2 + 16) = v1353;
    if (v1447)
    {
      operator delete(v1447);
      v1353 = *v13;
    }
  }
  else
  {
    *v1437 = a5.n128_u32[1];
    v1446 = v1437 + 1;
  }
  *v9 = v1446;
  if (v1446 < (unsigned __int32 *)v1353)
  {
    *v1446 = a5.n128_u32[2];
    v1455 = v1446 + 1;
    goto LABEL_2457;
  }
  v1456 = *(unsigned __int32 **)a2;
  v1457 = ((uint64_t)v1446 - *(_QWORD *)a2) >> 2;
  v1458 = v1457 + 1;
  if ((unint64_t)(v1457 + 1) >> 62)
LABEL_2554:
    sub_1DCAE4C44();
  v1459 = v1353 - (char *)v1456;
  if (v1459 >> 1 > v1458)
    v1458 = v1459 >> 1;
  if ((unint64_t)v1459 >= 0x7FFFFFFFFFFFFFFCLL)
    v1460 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v1460 = v1458;
  if (v1460)
  {
    v1461 = (char *)sub_1DCAE4D04((uint64_t)v13, v1460);
    v1456 = *(unsigned __int32 **)a2;
    v1446 = *(unsigned __int32 **)(a2 + 8);
  }
  else
  {
    v1461 = 0;
  }
  v1462 = &v1461[4 * v1457];
  v1463 = &v1461[4 * v1460];
  *(_DWORD *)v1462 = a5.n128_u32[2];
  v1455 = (unsigned __int32 *)(v1462 + 4);
  while (v1446 != v1456)
  {
    v1464 = *--v1446;
    *((_DWORD *)v1462 - 1) = v1464;
    v1462 -= 4;
  }
  *(_QWORD *)a2 = v1462;
  *(_QWORD *)(a2 + 8) = v1455;
  *(_QWORD *)(a2 + 16) = v1463;
  if (v1456)
    operator delete(v1456);
LABEL_2457:
  *v9 = v1455;
  v1465 = v230 + 20;
  v1467 = a3[1];
  v1466 = a3[2];
  if (v1467 >= v1466)
  {
    v1469 = *a3;
    v1470 = (v1467 - *a3) >> 2;
    v1471 = v1470 + 1;
    if ((unint64_t)(v1470 + 1) >> 62)
      goto LABEL_2555;
    v1472 = v1466 - v1469;
    if (v1472 >> 1 > v1471)
      v1471 = v1472 >> 1;
    if ((unint64_t)v1472 >= 0x7FFFFFFFFFFFFFFCLL)
      v1473 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1473 = v1471;
    if (v1473)
    {
      v1474 = (char *)sub_1DCAE4D04((uint64_t)v1159, v1473);
      v1469 = *a3;
      v1467 = a3[1];
    }
    else
    {
      v1474 = 0;
    }
    v1475 = &v1474[4 * v1470];
    v1466 = &v1474[4 * v1473];
    *(_DWORD *)v1475 = v1465;
    v1468 = v1475 + 4;
    while (v1467 != v1469)
    {
      v1476 = *((_DWORD *)v1467 - 1);
      v1467 -= 4;
      *((_DWORD *)v1475 - 1) = v1476;
      v1475 -= 4;
    }
    *a3 = v1475;
    a3[1] = v1468;
    a3[2] = v1466;
    if (v1469)
    {
      operator delete(v1469);
      v1466 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1467 = v1465;
    v1468 = v1467 + 4;
  }
  a3[1] = v1468;
  v1477 = v230 + 22;
  if (v1468 >= v1466)
  {
    v1479 = *a3;
    v1480 = (v1468 - *a3) >> 2;
    v1481 = v1480 + 1;
    if ((unint64_t)(v1480 + 1) >> 62)
      goto LABEL_2555;
    v1482 = v1466 - v1479;
    if (v1482 >> 1 > v1481)
      v1481 = v1482 >> 1;
    if ((unint64_t)v1482 >= 0x7FFFFFFFFFFFFFFCLL)
      v1483 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1483 = v1481;
    if (v1483)
    {
      v1484 = (char *)sub_1DCAE4D04((uint64_t)v1159, v1483);
      v1479 = *a3;
      v1468 = a3[1];
    }
    else
    {
      v1484 = 0;
    }
    v1485 = &v1484[4 * v1480];
    v1466 = &v1484[4 * v1483];
    *(_DWORD *)v1485 = v1477;
    v1478 = v1485 + 4;
    while (v1468 != v1479)
    {
      v1486 = *((_DWORD *)v1468 - 1);
      v1468 -= 4;
      *((_DWORD *)v1485 - 1) = v1486;
      v1485 -= 4;
    }
    *a3 = v1485;
    a3[1] = v1478;
    a3[2] = v1466;
    if (v1479)
    {
      operator delete(v1479);
      v1466 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1468 = v1477;
    v1478 = v1468 + 4;
  }
  a3[1] = v1478;
  v1487 = v230 + 21;
  if (v1478 >= v1466)
  {
    v1489 = *a3;
    v1490 = (v1478 - *a3) >> 2;
    v1491 = v1490 + 1;
    if ((unint64_t)(v1490 + 1) >> 62)
      goto LABEL_2555;
    v1492 = v1466 - v1489;
    if (v1492 >> 1 > v1491)
      v1491 = v1492 >> 1;
    if ((unint64_t)v1492 >= 0x7FFFFFFFFFFFFFFCLL)
      v1493 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1493 = v1491;
    if (v1493)
    {
      v1494 = (char *)sub_1DCAE4D04((uint64_t)v1159, v1493);
      v1489 = *a3;
      v1478 = a3[1];
    }
    else
    {
      v1494 = 0;
    }
    v1495 = &v1494[4 * v1490];
    v1466 = &v1494[4 * v1493];
    *(_DWORD *)v1495 = v1487;
    v1488 = v1495 + 4;
    while (v1478 != v1489)
    {
      v1496 = *((_DWORD *)v1478 - 1);
      v1478 -= 4;
      *((_DWORD *)v1495 - 1) = v1496;
      v1495 -= 4;
    }
    *a3 = v1495;
    a3[1] = v1488;
    a3[2] = v1466;
    if (v1489)
    {
      operator delete(v1489);
      v1466 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1478 = v1487;
    v1488 = v1478 + 4;
  }
  a3[1] = v1488;
  if (v1488 >= v1466)
  {
    v1498 = *a3;
    v1499 = (v1488 - *a3) >> 2;
    v1500 = v1499 + 1;
    if ((unint64_t)(v1499 + 1) >> 62)
      goto LABEL_2555;
    v1501 = v1466 - v1498;
    if (v1501 >> 1 > v1500)
      v1500 = v1501 >> 1;
    if ((unint64_t)v1501 >= 0x7FFFFFFFFFFFFFFCLL)
      v1502 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1502 = v1500;
    if (v1502)
    {
      v1503 = (char *)sub_1DCAE4D04((uint64_t)v1159, v1502);
      v1498 = *a3;
      v1488 = a3[1];
    }
    else
    {
      v1503 = 0;
    }
    v1504 = &v1503[4 * v1499];
    v1466 = &v1503[4 * v1502];
    *(_DWORD *)v1504 = v1487;
    v1497 = v1504 + 4;
    while (v1488 != v1498)
    {
      v1505 = *((_DWORD *)v1488 - 1);
      v1488 -= 4;
      *((_DWORD *)v1504 - 1) = v1505;
      v1504 -= 4;
    }
    *a3 = v1504;
    a3[1] = v1497;
    a3[2] = v1466;
    if (v1498)
    {
      operator delete(v1498);
      v1466 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1488 = v1487;
    v1497 = v1488 + 4;
  }
  a3[1] = v1497;
  if (v1497 >= v1466)
  {
    v1507 = *a3;
    v1508 = (v1497 - *a3) >> 2;
    v1509 = v1508 + 1;
    if ((unint64_t)(v1508 + 1) >> 62)
      goto LABEL_2555;
    v1510 = v1466 - v1507;
    if (v1510 >> 1 > v1509)
      v1509 = v1510 >> 1;
    if ((unint64_t)v1510 >= 0x7FFFFFFFFFFFFFFCLL)
      v1511 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1511 = v1509;
    if (v1511)
    {
      v1512 = (char *)sub_1DCAE4D04((uint64_t)v1159, v1511);
      v1507 = *a3;
      v1497 = a3[1];
    }
    else
    {
      v1512 = 0;
    }
    v1513 = &v1512[4 * v1508];
    v1466 = &v1512[4 * v1511];
    *(_DWORD *)v1513 = v1477;
    v1506 = v1513 + 4;
    while (v1497 != v1507)
    {
      v1514 = *((_DWORD *)v1497 - 1);
      v1497 -= 4;
      *((_DWORD *)v1513 - 1) = v1514;
      v1513 -= 4;
    }
    *a3 = v1513;
    a3[1] = v1506;
    a3[2] = v1466;
    if (v1507)
    {
      operator delete(v1507);
      v1466 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1497 = v1477;
    v1506 = v1497 + 4;
  }
  a3[1] = v1506;
  v1515 = v230 + 23;
  if (v1506 >= v1466)
  {
    v1517 = *a3;
    v1518 = (v1506 - *a3) >> 2;
    v1519 = v1518 + 1;
    if (!((unint64_t)(v1518 + 1) >> 62))
    {
      v1520 = v1466 - v1517;
      if (v1520 >> 1 > v1519)
        v1519 = v1520 >> 1;
      if ((unint64_t)v1520 >= 0x7FFFFFFFFFFFFFFCLL)
        v1521 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1521 = v1519;
      if (v1521)
      {
        v1522 = (char *)sub_1DCAE4D04((uint64_t)v1159, v1521);
        v1517 = *a3;
        v1506 = a3[1];
      }
      else
      {
        v1522 = 0;
      }
      v1523 = &v1522[4 * v1518];
      v1524 = &v1522[4 * v1521];
      *(_DWORD *)v1523 = v1515;
      v1516 = v1523 + 4;
      while (v1506 != v1517)
      {
        v1525 = *((_DWORD *)v1506 - 1);
        v1506 -= 4;
        *((_DWORD *)v1523 - 1) = v1525;
        v1523 -= 4;
      }
      *a3 = v1523;
      a3[1] = v1516;
      a3[2] = v1524;
      if (v1517)
        operator delete(v1517);
      goto LABEL_2553;
    }
LABEL_2555:
    sub_1DCAE4C44();
  }
  *(_DWORD *)v1506 = v1515;
  v1516 = v1506 + 4;
LABEL_2553:
  a3[1] = v1516;
}

void sub_1DCADE350(uint64_t **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, float32x4_t a6, int8x16_t a7)
{
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  float32x4_t v13;
  float v14;
  float v15;
  int32x4_t v16;
  __n128 v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  char v41;
  unsigned int v42;
  float32x4_t v43;
  int8x16_t v44;
  __n128 v46;
  __n128 v47;

  if (a2)
  {
    v7 = a3;
    if ((a3 & 0x80000000) == 0)
    {
      v9 = a4;
      v10 = a2;
      v12 = 0;
      v13.i64[0] = 0x3F0000003F000000;
      v13.i64[1] = 0x3F0000003F000000;
      v17 = (__n128)vmulq_f32(a6, v13);
      v14 = v17.n128_f32[1];
      v15 = v17.n128_f32[2];
      v16 = (int32x4_t)a7;
      v46 = v17;
      v17.n128_f32[0] = v17.n128_f32[0] + *(float *)a7.i32;
      *(unint64_t *)((char *)v17.n128_u64 + 4) = *(unint64_t *)((char *)a7.u64 + 4);
      v44 = (int8x16_t)v17;
      if (a3)
        v18 = a4;
      else
        v18 = 0;
      v41 = v18;
      v42 = a3 - 1;
      do
      {
        v19 = v10 + 8 * v12;
        v21 = *(_QWORD *)(v19 + 48);
        v20 = (_QWORD *)(v19 + 48);
        if (!v21)
          goto LABEL_13;
        v16.i32[0] = 0;
        v17.n128_u32[0] = v12 & 4;
        v16 = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v17, v16), 0);
        v17 = (__n128)vbslq_s8((int8x16_t)v16, a7, v44);
        if ((v12 & 2) != 0)
        {
          v22.n128_u32[0] = v17.n128_u32[0];
          v22.n128_f32[1] = v17.n128_f32[1] + v14;
          v22.n128_u64[1] = v17.n128_u64[1];
          v17 = v22;
          if ((v12 & 1) != 0)
          {
LABEL_16:
            v23.n128_u64[0] = v17.n128_u64[0];
            v23.n128_f32[2] = v17.n128_f32[2] + v15;
            v23.n128_u32[3] = v17.n128_u32[3];
            v17 = v23;
            if ((v18 & 1) == 0)
            {
LABEL_17:
              v43 = vaddq_f32((float32x4_t)v17, (float32x4_t)v46);
              v47 = v17;
              v24 = operator new();
              v17 = v47;
              v25 = v24;
              *(_BYTE *)v24 = a5;
              v16 = (int32x4_t)v43;
              *(__n128 *)(v24 + 16) = v47;
              *(float32x4_t *)(v24 + 32) = v43;
              v27 = a1[1];
              v26 = (unint64_t)a1[2];
              if ((unint64_t)v27 >= v26)
              {
                v29 = v9;
                v30 = a5;
                v31 = *a1;
                v32 = v27 - *a1;
                v33 = v32 + 1;
                if ((unint64_t)(v32 + 1) >> 61)
                  sub_1DCAE4C44();
                v34 = v26 - (_QWORD)v31;
                if (v34 >> 2 > v33)
                  v33 = v34 >> 2;
                if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                  v35 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v35 = v33;
                if (v35)
                {
                  if (v35 >> 61)
                    sub_1DCAE4CDC();
                  v36 = (char *)operator new(8 * v35);
                  v17 = v47;
                }
                else
                {
                  v36 = 0;
                }
                v37 = (uint64_t *)&v36[8 * v32];
                *v37 = v25;
                v28 = v37 + 1;
                if (v27 != v31)
                {
                  do
                  {
                    v38 = *--v27;
                    *--v37 = v38;
                  }
                  while (v27 != v31);
                  v27 = *a1;
                }
                *a1 = v37;
                a1[1] = v28;
                a1[2] = (uint64_t *)&v36[8 * v35];
                a5 = v30;
                if (v27)
                {
                  operator delete(v27);
                  v17 = v47;
                }
                v9 = v29;
                v7 = a3;
                v10 = a2;
              }
              else
              {
                *v27 = v24;
                v28 = v27 + 1;
              }
              a1[1] = v28;
              v18 = v41;
              if (!v7)
                goto LABEL_13;
LABEL_12:
              sub_1DCADE350(a1, *v20, v42, v9, a5, v46, v17);
              goto LABEL_13;
            }
            goto LABEL_11;
          }
        }
        else if ((v12 & 1) != 0)
        {
          goto LABEL_16;
        }
        if ((v18 & 1) == 0)
          goto LABEL_17;
LABEL_11:
        if (v7)
          goto LABEL_12;
LABEL_13:
        ++v12;
      }
      while (v12 != 8);
    }
  }
}

uint64_t sub_1DCADE5B8(uint64_t a1, void *a2, int a3, float a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float v14;
  float v15;
  float32x2_t v16;
  float32x2_t v17;
  int8x8_t v18;
  float v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v29[3];
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v10 = v7;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  if (a3 < 1)
    goto LABEL_19;
  objc_msgSend_boundingBox(v7, v8, v9);
  *(float32x4_t *)(a1 + 16) = v11;
  *(float32x4_t *)(a1 + 32) = v12;
  v13 = COERCE_FLOAT(vsubq_f32(v11, v12).i32[1]) / (float)a3;
  if (v13 <= 0.0)
    goto LABEL_19;
  v14 = fabsf(v12.f32[0]);
  v15 = fabsf(v11.f32[0]);
  if (v14 < v15)
    v14 = v15;
  v16 = (float32x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 4uLL).u64[0];
  v17 = (float32x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL).u64[0];
  v18 = vbsl_s8((int8x8_t)vcagt_f32(v17, v16), (int8x8_t)vabs_f32(v17), (int8x8_t)vabs_f32(v16));
  if (*(float *)v18.i32 < *(float *)&v18.i32[1])
    v18.i32[0] = v18.i32[1];
  if (v14 >= *(float *)v18.i32)
    v19 = v14;
  else
    v19 = *(float *)v18.i32;
  sub_1DCADE880(v10, v29);
  v20 = (void *)v29[0];
  v21 = v29[1];
  v22 = (_QWORD *)operator new();
  v30[0] = &off_1EA5746D8;
  v31 = v30;
  sub_1DCADF03C(v22, (uint64_t)v30);
  v23 = v31;
  if (v31 == v30)
  {
    v24 = 4;
    v23 = v30;
    goto LABEL_14;
  }
  if (v31)
  {
    v24 = 5;
LABEL_14:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  v29[0] = 0;
  sub_1DCAE5EA8((uint64_t *)(a1 + 80), (uint64_t)v22);
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 1312);
  *(_DWORD *)v25 = (int)(float)((float)(v19 * 4.0) / v13);
  sub_1DCAE6CC0((void **)(v25 + 40), (uint64_t)v20, v21, 0x6DB6DB6DB6DB6DB7 * ((v21 - (uint64_t)v20) >> 5));
  sub_1DCADEA54(*(_QWORD *)(a1 + 80), (float32x4_t **)a1, v26, v27);
  if (a4 > 0.0)
    sub_1DCADECB0(*(_QWORD **)(a1 + 80), (float32x4_t **)a1, a4);
  sub_1DCAE5EA8(v29, 0);
  if (v20)
    operator delete(v20);
LABEL_19:

  return a1;
}

void sub_1DCADE7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  void **v20;
  char *v21;
  char *v23;
  uint64_t v24;
  void *v25;

  v23 = a15;
  if (a15 == v21)
  {
    v24 = 4;
    v23 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  MEMORY[0x1DF0D228C](v19, 0x1020C40BD3C1984);
  if (v18)
    operator delete(v18);
  sub_1DCAE5EA8(v17, 0);
  v25 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v15 + 56) = v25;
    operator delete(v25);
  }

  _Unwind_Resume(a1);
}

void sub_1DCADE880(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t *v7;
  uint64_t i;
  const char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *__p;
  _BYTE *v15;
  uint64_t v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v15 = 0;
  v16 = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = a1;
  v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v10, v17, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v11;
    v7 = (float32x4_t *)MEMORY[0x1E0C83FF0];
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        sub_1DCAE0508(*(void **)(*((_QWORD *)&v10 + 1) + 8 * i), (uint64_t *)&__p, 1, *v7, v7[1]);
      }
      v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v9, (uint64_t)&v10, v17, 16);
    }
    while (v5);
  }

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_1DCAE7878(a2, (uint64_t)__p, (uint64_t)v15, 0x6DB6DB6DB6DB6DB7 * ((v15 - (_BYTE *)__p) >> 5));
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }

}

void sub_1DCADE9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void **sub_1DCADEA18(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  _DWORD *v4;
  void **result;

  v4 = *(_DWORD **)(a1 + 1312);
  *v4 = a4;
  result = (void **)(v4 + 10);
  if (result != (void **)a2)
    return (void **)sub_1DCAE6CC0(result, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  return result;
}

void sub_1DCADEA54(uint64_t a1, float32x4_t **a2, double a3, double a4)
{
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int8x16_t v18;
  int8x16_t v19;
  float v20;
  float v21;
  float32x2_t v22;
  float32x2_t v23;
  int8x8_t v24;
  float v25;
  int32x4_t *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int32x2_t v31;
  uint64_t v32;
  float v33;
  double v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t *v38;
  float32x4_t *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int8x16_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;

  if (a2)
  {
    v6 = *((float *)a2 + 4);
    if (v6 < *((float *)a2 + 5))
      v6 = *((float *)a2 + 5);
    if (v6 < *((float *)a2 + 6))
      v6 = *((float *)a2 + 6);
    v7 = *((float *)a2 + 8);
    if (*((float *)a2 + 9) < v7)
      v7 = *((float *)a2 + 9);
    if (*((float *)a2 + 10) < v7)
      v7 = *((float *)a2 + 10);
    *(float *)&a3 = fabsf(v6);
    v8 = fabsf(v7);
    if (*(float *)&a3 < v8)
      *(float *)&a3 = v8;
    *(float *)&a4 = -*(float *)&a3;
    *((int32x4_t *)a2 + 1) = vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    *((int32x4_t *)a2 + 2) = vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    v9 = *(_QWORD *)(a1 + 1312);
    if ((*(_DWORD *)v9 & 0x80000000) == 0)
    {
      v10 = (*(_DWORD *)v9 - 1) | ((*(_DWORD *)v9 - 1) >> 1) | (((*(_DWORD *)v9 - 1) | ((*(_DWORD *)v9 - 1) >> 1)) >> 2);
      v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
      *((_DWORD *)a2 + 2) = (v11 | HIWORD(v11)) + 1;
    }
    if (*(_QWORD *)(v9 + 48) != *(_QWORD *)(v9 + 40))
    {
      v12 = operator new();
      *(_BYTE *)(v12 + 112) = 0;
      *(_OWORD *)(v12 + 168) = 0u;
      *(_OWORD *)(v12 + 152) = 0u;
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_DWORD *)(v12 + 184) = 1065353216;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 96) = 0u;
      __asm { FMOV            V1.4S, #-1.0 }
      *(_OWORD *)(v12 + 16) = _Q1;
      *(_OWORD *)(v12 + 32) = 0u;
      *a2 = (float32x4_t *)v12;
      v19 = *((int8x16_t *)a2 + 1);
      v18 = *((int8x16_t *)a2 + 2);
      v20 = fabsf(*(float *)v18.i32);
      v21 = fabsf(*(float *)v19.i32);
      if (v20 < v21)
        v20 = v21;
      v22 = (float32x2_t)vext_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), 4uLL);
      v23 = (float32x2_t)vext_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), 4uLL);
      v24 = vbsl_s8((int8x8_t)vcagt_f32(v23, v22), (int8x8_t)vabs_f32(v23), (int8x8_t)vabs_f32(v22));
      if (*(float *)v24.i32 < *(float *)&v24.i32[1])
        v24.i32[0] = v24.i32[1];
      if (v20 >= *(float *)v24.i32)
        v25 = v20;
      else
        v25 = *(float *)v24.i32;
      v26 = *(int32x4_t **)(a1 + 1312);
      v27 = v26->i32[0];
      v28 = (v27 - 1) | ((v27 - 1) >> 1) | (((v27 - 1) | ((v27 - 1) >> 1)) >> 2);
      v29 = v28 | (v28 >> 4) | ((v28 | (v28 >> 4)) >> 8);
      v30 = (int)log2f((float)((v29 | HIWORD(v29)) + 1));
      v26[26].i32[2] = v30;
      *(float *)v31.i32 = (float)(v25 * (float)((float)(1 << v30) + (float)(1 << v30))) / (float)v27;
      v26[18] = vdupq_n_s32(1 << v30);
      v32 = *(_QWORD *)(a1 + 1312);
      v33 = (float)(*(float *)v31.i32 + *(float *)v31.i32) / (float)(1 << *(_DWORD *)(v32 + 424));
      *(float *)(v32 + 248) = v33;
      *((float *)a2 + 18) = v33;
      v34 = v33 * 0.01;
      *(float *)&v34 = v34;
      v35 = *a2;
      v36 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v34, 0);
      v37 = (float32x4_t)vdupq_lane_s32(v31, 0);
      v35[1] = vaddq_f32(v36, v37);
      v35[2] = vsubq_f32(v36, v37);
      v38 = *a2;
      v39 = *(float32x4_t **)(a1 + 1312);
      v39[17] = (*a2)[2];
      v39[16] = v38[1];
      sub_1DCADFB74(a1);
      v46 = *(_QWORD *)(a1 + 1312);
      v47 = *(_QWORD *)(v46 + 40);
      v48 = *(_QWORD *)(v46 + 48);
      if (v47 != v48)
      {
        v49 = 0;
        do
        {
          *(_DWORD *)(v47 + 172) = v49;
          sub_1DCADF1AC(a1, *a2, v47, *(_DWORD *)(*(_QWORD *)(a1 + 1312) + 424) - 1, v40, v41, v42, v43, v44, v45);
          ++v49;
          v47 += 224;
        }
        while (v47 != v48);
      }
    }
  }
}

void sub_1DCADECB0(_QWORD *a1, float32x4_t **a2, float a3)
{
  int v5;

  if (*(_QWORD *)(a1[164] + 368))
  {
    v5 = sub_1DCAE07E8((uint64_t)a1, a3);
    sub_1DCAE0DA4(a1, (int)((double)v5 * 0.25));
    sub_1DCAE12A0((uint64_t)a1, a2);
  }
}

uint64_t sub_1DCADED10(uint64_t a1, void *a2, int a3, float a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float v14;
  float v15;
  float32x2_t v16;
  float32x2_t v17;
  int8x8_t v18;
  float v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v29[3];
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v10 = v7;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  if (a3 < 1)
    goto LABEL_19;
  objc_msgSend_boundingBoxAtTime_(v7, v8, v9, 0.0);
  *(float32x4_t *)(a1 + 16) = v11;
  *(float32x4_t *)(a1 + 32) = v12;
  v13 = COERCE_FLOAT(vsubq_f32(v11, v12).i32[1]) / (float)a3;
  if (v13 <= 0.0)
    goto LABEL_19;
  v14 = fabsf(v12.f32[0]);
  v15 = fabsf(v11.f32[0]);
  if (v14 < v15)
    v14 = v15;
  v16 = (float32x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 4uLL).u64[0];
  v17 = (float32x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL).u64[0];
  v18 = vbsl_s8((int8x8_t)vcagt_f32(v17, v16), (int8x8_t)vabs_f32(v17), (int8x8_t)vabs_f32(v16));
  if (*(float *)v18.i32 < *(float *)&v18.i32[1])
    v18.i32[0] = v18.i32[1];
  if (v14 >= *(float *)v18.i32)
    v19 = v14;
  else
    v19 = *(float *)v18.i32;
  sub_1DCADEFDC(v10, v29);
  v20 = (void *)v29[0];
  v21 = v29[1];
  v22 = (_QWORD *)operator new();
  v30[0] = &off_1EA574730;
  v31 = v30;
  sub_1DCADF03C(v22, (uint64_t)v30);
  v23 = v31;
  if (v31 == v30)
  {
    v24 = 4;
    v23 = v30;
    goto LABEL_14;
  }
  if (v31)
  {
    v24 = 5;
LABEL_14:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  v29[0] = 0;
  sub_1DCAE5EA8((uint64_t *)(a1 + 80), (uint64_t)v22);
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 1312);
  *(_DWORD *)v25 = (int)(float)((float)(v19 * 4.0) / v13);
  sub_1DCAE6CC0((void **)(v25 + 40), (uint64_t)v20, v21, 0x6DB6DB6DB6DB6DB7 * ((v21 - (uint64_t)v20) >> 5));
  sub_1DCADEA54(*(_QWORD *)(a1 + 80), (float32x4_t **)a1, v26, v27);
  if (a4 > 0.0)
    sub_1DCADECB0(*(_QWORD **)(a1 + 80), (float32x4_t **)a1, a4);
  sub_1DCAE5EA8(v29, 0);
  if (v20)
    operator delete(v20);
LABEL_19:

  return a1;
}

void sub_1DCADEF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  void **v20;
  char *v21;
  char *v23;
  uint64_t v24;
  void *v25;

  v23 = a15;
  if (a15 == v21)
  {
    v24 = 4;
    v23 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  MEMORY[0x1DF0D228C](v19, 0x1020C40BD3C1984);
  if (v18)
    operator delete(v18);
  sub_1DCAE5EA8(v17, 0);
  v25 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v15 + 56) = v25;
    operator delete(v25);
  }

  _Unwind_Resume(a1);
}

void sub_1DCADEFDC(void *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_1DCAE0508(a1, a2, 1, *MEMORY[0x1E0C83FF0], *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16));
}

void sub_1DCADF01C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1DCADF03C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  memcpy(a1, &unk_1DCC571E0, 0x380uLL);
  memcpy(a1 + 112, &unk_1DCC57560, 0x1A0uLL);
  v4 = operator new();
  sub_1DCAE6B14((uint64_t)v8, a2);
  sub_1DCAE4D38(v4, (uint64_t)v8);
  a1[164] = v4;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_1DCADF128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MEMORY[0x1DF0D228C](v13, 0x10F0C401E272BA8);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCADF180(uint64_t a1)
{
  sub_1DCAE6BC0((uint64_t *)(a1 + 1312), 0);
  return a1;
}

uint64_t sub_1DCADF1AC(uint64_t a1, float32x4_t *a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  uint64_t v14;
  uint64_t v15;
  int *v16;
  float32x4_t *v17;
  int32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t result;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t **v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float v43;
  int v44;
  _QWORD *v45;
  unint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  unint64_t v62[2];

  v14 = 0;
  v62[0] = 0;
  v15 = (a4 - 1);
  v16 = (int *)(a3 + 172);
  v17 = a2 + 3;
  __asm { FMOV            V0.4S, #0.25 }
  v57 = _Q0;
  v23 = vdupq_n_s32(0x7FC00000u);
  v55 = v23;
  do
  {
    v23.i32[0] = 0;
    v25 = a2[1];
    v24 = a2[2];
    v26.i64[0] = 0x3F0000003F000000;
    v26.i64[1] = 0x3F0000003F000000;
    v27 = vmulq_f32(vaddq_f32(v25, v24), v26);
    v28 = vsubq_f32(v25, v24);
    v25.i32[0] = v14 & 4;
    v29 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v25, v23), 0);
    v25.f32[0] = 0.25 * v28.f32[0];
    v26.f32[0] = v27.f32[0] + (float)(0.25 * v28.f32[0]);
    v26.i32[1] = v27.i32[1];
    v26.i32[2] = v27.i32[2];
    *(float *)a10.i32 = v27.f32[0] - (float)(0.25 * v28.f32[0]);
    a10.i32[1] = v27.i32[1];
    a10.i32[2] = v27.i32[2];
    v30 = vbslq_s8(v29, a10, (int8x16_t)v26);
    v26.f32[0] = -(float)(v28.f32[0] * 0.25);
    *(float32x2_t *)v25.f32 = vadd_f32((float32x2_t)vext_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), 4uLL), (float32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v14), (int8x8_t)0x100000002)), (int8x8_t)vdup_lane_s32(*(int32x2_t *)v26.f32, 0), (int8x8_t)vdup_lane_s32(*(int32x2_t *)v25.f32, 0)));
    v61 = (float32x4_t)vextq_s8(vextq_s8(v30, v30, 4uLL), (int8x16_t)v25, 0xCuLL);
    v56 = v61;
    result = sub_1DCB1E7A4((float32x4_t *)a3, v61, vmulq_f32(v28, v57));
    if (!(_DWORD)result)
      goto LABEL_27;
    v32 = v17->i64[v14];
    if (v32)
    {
      if (!a4)
        goto LABEL_10;
    }
    else
    {
      v32 = operator new();
      *(_BYTE *)(v32 + 112) = 0;
      *(_OWORD *)(v32 + 152) = 0u;
      *(_OWORD *)(v32 + 168) = 0u;
      *(_DWORD *)(v32 + 184) = 1065353216;
      *(_OWORD *)(v32 + 48) = 0u;
      *(_OWORD *)(v32 + 64) = 0u;
      v17->i64[v14] = v32;
      *(_OWORD *)(v32 + 80) = 0u;
      *(_OWORD *)(v32 + 96) = 0u;
      a2[7].i8[0] |= 1 << v14;
      v33 = vmulq_f32(vsubq_f32(a2[1], a2[2]), v57);
      v34 = vsubq_f32(v56, v33);
      v35 = vaddq_f32(v33, v56);
      *(float32x4_t *)(v32 + 16) = v35;
      *(float32x4_t *)(v32 + 32) = v34;
      *(_DWORD *)(v32 + 144) = -1;
      *(_DWORD *)(v32 + 116) = 2143289344;
      *(_BYTE *)(v32 + 192) = 1;
      *(_QWORD *)v32 = 0;
      *(_QWORD *)(v32 + 8) = 0;
      *(_DWORD *)(v32 + 196) = 0;
      *(_WORD *)(v32 + 200) = 0;
      *(int32x4_t *)(v32 + 208) = v55;
      *(_WORD *)(v32 + 224) = 0;
      *(int32x4_t *)(v32 + 240) = v55;
      *(_QWORD *)(v32 + 256) = -1;
      if (!a4)
      {
        v62[0] = sub_1DCADF5E0(a1, v56, *(double *)v55.i64, *(double *)v35.i64);
        *(_QWORD *)(v32 + 8) = v62[0];
        sub_1DCAE6F68(*(_QWORD *)(a1 + 1312) + 168, v62, v62);
        v36 = (uint64_t **)(*(_QWORD *)(a1 + 1312) + 16);
        v60.i64[0] = (uint64_t)v62;
        sub_1DCAE7184(v36, v62, (uint64_t)&unk_1DCC58300, (uint64_t **)&v60)[5] = v32;
LABEL_10:
        sub_1DCAE7240(v32 + 152, v16, v16);
        v37 = *(float *)(v32 + 116);
        if (*v16 != *(_DWORD *)(v32 + 144))
        {
          v39 = *(float32x4_t *)(a3 + 16);
          v38 = *(float32x4_t *)(a3 + 32);
          v59 = *(float32x4_t *)(a3 + 48);
          v60 = v39;
          v58 = v38;
          *(double *)v40.i64 = sub_1DCADF674(&v60, &v59, &v58, &v61);
          v41 = vsubq_f32(v61, v40);
          v42 = vmulq_f32(v41, v41);
          v43 = sqrtf(vaddq_f32(vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2)).f32[0]);
          if (v43 < fabsf(v37))
          {
            *(float *)(v32 + 116) = -v43;
            *(float32x4_t *)(v32 + 128) = v40;
            *(_DWORD *)(v32 + 144) = *v16;
            v44 = sub_1DCADFA74(a1, (float32x4_t *)v32);
            v45 = (_QWORD *)(*(_QWORD *)(a1 + 1312) + 344);
            v46 = (unint64_t *)(v32 + 8);
            if (v44)
            {
              sub_1DCAE6F68((uint64_t)v45, v46, v46);
            }
            else
            {
              v47 = sub_1DCAE745C(v45, v46);
              if (v47)
                sub_1DCAE7510((_QWORD *)(*(_QWORD *)(a1 + 1312) + 344), v47);
            }
          }
        }
        goto LABEL_16;
      }
    }
    if (a4 >= 1)
    {
      result = sub_1DCADF1AC(a1, v32, a3, v15);
      goto LABEL_27;
    }
LABEL_16:
    v48 = *(uint64_t **)v32;
    if (!*(_QWORD *)v32)
    {
      v49 = *(_QWORD *)(*(_QWORD *)(a1 + 1312) + 88);
      if (!v49)
        sub_1DCAE7684();
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 48))(v49);
      v60.i64[0] = 0;
      v51 = *(_QWORD *)v32;
      *(_QWORD *)v32 = v50;
      if (v51)
        sub_1DCAE5E60(v32, v51);
      v52 = v60.i64[0];
      v60.i64[0] = 0;
      if (v52)
        sub_1DCAE5E60((uint64_t)&v60, v52);
      v48 = *(uint64_t **)v32;
    }
    v53 = v48[1];
    if (v53 >= v48[2])
    {
      result = sub_1DCAE4E84(v48, a3);
    }
    else
    {
      *(double *)v23.i64 = sub_1DCAE501C(v53, a3);
      result = v54 + 224;
    }
    v48[1] = result;
LABEL_27:
    ++v14;
  }
  while (v14 != 8);
  return result;
}

uint64_t sub_1DCADF5E0(uint64_t a1, float32x4_t a2, double a3, double a4)
{
  float32x4_t *v4;
  float v5;
  float32x4_t v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;

  v4 = *(float32x4_t **)(a1 + 1312);
  v5 = v4[15].f32[2];
  *(float *)&a4 = v5 * 0.5;
  v6 = vmulq_n_f32(vsubq_f32(vsubq_f32(a2, v4[17]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0)), 1.0 / v5);
  v7 = llroundf(v6.f32[0]);
  v8 = llroundf(v6.f32[1]);
  v9 = llroundf(v6.f32[2]);
  return *(_QWORD *)(v4[9].i64[0] + 8 * v9) | ((*(_QWORD *)(v4[7].i64[1] + 8 * HIBYTE(v8)) | *(_QWORD *)(v4[9].i64[0] + 8 * HIBYTE(v9)) | *(_QWORD *)(v4[6].i64[0] + 8 * HIBYTE(v7))) << 24) | *(_QWORD *)(v4[7].i64[1] + 8 * v8) | *(_QWORD *)(v4[6].i64[0] + 8 * v7);
}

double sub_1DCADF674(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  unsigned __int32 v6;
  float32x4_t v7;
  float v8;
  float v9;
  float v10;
  float32x4_t v11;
  float v12;
  unsigned __int32 v13;
  float v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float32x4_t v30;
  float v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float v53;

  v4 = *a1;
  v5 = *a2;
  v6 = vsubq_f32(*a1, *a2).u32[0];
  v7 = vsubq_f32(*a2, *a1);
  if ((vmovn_s32(vcgtq_f32(*a1, *a2)).u8[0] & 1) != 0)
    v8 = *(float *)&v6;
  else
    v8 = v7.f32[0];
  if (v8 <= 0.0001)
  {
    v9 = v4.f32[1] <= v5.f32[1] ? v5.f32[1] - v4.f32[1] : v4.f32[1] - v5.f32[1];
    if (v9 <= 0.0001)
    {
      v10 = v4.f32[2] <= v5.f32[2] ? v5.f32[2] - v4.f32[2] : v4.f32[2] - v5.f32[2];
      if (v10 <= 0.0001)
      {
        v11 = *a3;
        LODWORD(v12) = vsubq_f32(v4, *a3).u32[0];
        v13 = vsubq_f32(*a3, v4).u32[0];
        if ((vmovn_s32(vcgtq_f32(v4, *a3)).u8[0] & 1) == 0)
          v12 = *(float *)&v13;
        if (v12 <= 0.0001)
        {
          v14 = v4.f32[1] <= v11.f32[1] ? v11.f32[1] - v4.f32[1] : v4.f32[1] - v11.f32[1];
          if (v14 <= 0.0001)
          {
            v15 = v4.f32[2] <= v11.f32[2] ? v11.f32[2] - v4.f32[2] : v4.f32[2] - v11.f32[2];
            if (v15 <= 0.0001)
              goto LABEL_82;
          }
        }
      }
    }
  }
  v16 = *a3;
  v17 = vsubq_f32(*a3, v4);
  v18 = *a4;
  v19 = vsubq_f32(*a4, v4);
  v20 = vmulq_f32(v19, v17);
  v21 = vaddq_f32(vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2));
  if (v8 <= 0.0001)
  {
    v22 = v4.f32[1] <= v5.f32[1] ? v5.f32[1] - v4.f32[1] : v4.f32[1] - v5.f32[1];
    if (v22 <= 0.0001)
    {
      v23 = v4.f32[2] <= v5.f32[2] ? v5.f32[2] - v4.f32[2] : v4.f32[2] - v5.f32[2];
      if (v23 <= 0.0001)
      {
        if (v21.f32[0] <= 0.0)
          goto LABEL_82;
        v42 = vmulq_f32(v17, v17);
        v43 = vaddq_f32(vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2));
        if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v21, v43))).u8[0] & 1) == 0)
        {
          v38 = *a3;
          return *(double *)v38.i64;
        }
LABEL_77:
        v4.i64[0] = vmlaq_n_f32(v4, v17, vdivq_f32(v21, v43).f32[0]).u64[0];
        goto LABEL_82;
      }
    }
  }
  v24 = vmulq_f32(v19, v7);
  v25 = vaddq_f32(vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2));
  LODWORD(v26) = vsubq_f32(v4, v16).u32[0];
  if ((vmovn_s32(vcgtq_f32(v4, v16)).u8[0] & 1) == 0)
    v26 = v17.f32[0];
  if (v26 <= 0.0001)
  {
    v27 = v4.f32[1] <= v16.f32[1] ? v16.f32[1] - v4.f32[1] : v4.f32[1] - v16.f32[1];
    if (v27 <= 0.0001)
    {
      v28 = v4.f32[2] <= v16.f32[2] ? v16.f32[2] - v4.f32[2] : v4.f32[2] - v16.f32[2];
      if (v28 <= 0.0001)
        goto LABEL_60;
    }
  }
  LODWORD(v29) = vsubq_f32(v5, v16).u32[0];
  v30 = vsubq_f32(v16, v5);
  if ((vmovn_s32(vcgtq_f32(v5, v16)).u8[0] & 1) == 0)
    v29 = v30.f32[0];
  if (v29 <= 0.0001)
  {
    v31 = v5.f32[1] <= v16.f32[1] ? v16.f32[1] - v5.f32[1] : v5.f32[1] - v16.f32[1];
    if (v31 <= 0.0001)
    {
      v32 = v5.f32[2] <= v16.f32[2] ? v16.f32[2] - v5.f32[2] : v5.f32[2] - v16.f32[2];
      if (v32 <= 0.0001)
      {
LABEL_60:
        if (v25.f32[0] <= 0.0)
        {
LABEL_82:
          v38.i64[0] = v4.i64[0];
          return *(double *)v38.i64;
        }
        v39 = vmulq_f32(v7, v7);
        v40 = vaddq_f32(vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2));
        if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v25, v40))).u8[0] & 1) != 0)
        {
LABEL_67:
          v4.i64[0] = vmlaq_n_f32(v4, v7, vdivq_f32(v25, v40).f32[0]).u64[0];
          goto LABEL_82;
        }
        goto LABEL_62;
      }
    }
  }
  if (v25.f32[0] <= 0.0 && v21.f32[0] <= 0.0)
    goto LABEL_82;
  v33 = vsubq_f32(v18, v5);
  v34 = vmulq_f32(v33, v7);
  v35 = vmulq_f32(v33, v17);
  v36 = vaddq_f32(vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2));
  v37 = vaddq_f32(vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2));
  if (v36.f32[0] < 0.0 || (v38 = *a2, (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v36, v37))).u8[0] & 1) != 0))
  {
    v41 = vmlaq_f32(vnegq_f32(vmulq_f32(v36, v21)), v25, v37);
    if (v36.f32[0] <= 0.0 && v41.f32[0] <= 0.0 && v25.f32[0] >= 0.0)
    {
      v40 = vsubq_f32(v25, v36);
      goto LABEL_67;
    }
    v44 = vsubq_f32(v18, v16);
    v45 = vmulq_f32(v44, v7);
    v46 = vmulq_f32(v44, v17);
    v47 = vaddq_f32(vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2));
    v48 = vaddq_f32(vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2));
    if (v48.f32[0] >= 0.0)
    {
      v38 = *a3;
      if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v48, v47))).u8[0] & 1) == 0)
        return *(double *)v38.i64;
    }
    v49 = vmlaq_f32(vnegq_f32(vmulq_f32(v48, v25)), v21, v47);
    if (v48.f32[0] <= 0.0 && v49.f32[0] <= 0.0 && v21.f32[0] >= 0.0)
    {
      v43 = vsubq_f32(v21, v48);
      goto LABEL_77;
    }
    v50 = vmlaq_f32(vnegq_f32(vmulq_f32(v47, v37)), v36, v48);
    if (v50.f32[0] > 0.0
      || (v51 = vsubq_f32(v37, v36), v51.f32[0] < 0.0)
      || (v52 = vsubq_f32(v47, v48), v52.f32[0] < 0.0))
    {
      v53 = 1.0 / vaddq_f32(vaddq_f32(v49, v41), v50).f32[0];
      v4.i64[0] = vmlaq_n_f32(vmlaq_n_f32(v4, v7, v53 * v49.f32[0]), v17, v53 * v41.f32[0]).u64[0];
      goto LABEL_82;
    }
    v5.i64[0] = vmlaq_n_f32(v5, v30, vdivq_f32(v51, vaddq_f32(v52, v51)).f32[0]).u64[0];
LABEL_62:
    v38.i64[0] = v5.i64[0];
  }
  return *(double *)v38.i64;
}

uint64_t sub_1DCADFA74(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2;
  float32x4_t *v3;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;

  v2 = *(_QWORD *)(a1 + 1312);
  v3 = *(float32x4_t **)(v2 + 320);
  if (!v3)
    return 0;
  __asm { FMOV            V0.4S, #1.0 }
  v9.i64[0] = 0x3F0000003F000000;
  v9.i64[1] = 0x3F0000003F000000;
  while (!a2[10].i64[1])
  {
LABEL_11:
    v3 = (float32x4_t *)v3->i64[0];
    if (!v3)
      return 0;
  }
  v10 = v3[1];
  v11 = vsubq_f32(v3[2], v10);
  v12 = vmulq_f32(v11, v11);
  v13 = vaddq_f32(vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2));
  v14 = vdivq_f32(_Q0, v13);
  v15 = a2[10].i64[1];
  while (1)
  {
    if (v3[3].i32[0] == *(_DWORD *)(v15 + 16))
    {
      v16 = vmulq_f32(vaddq_f32(a2[1], a2[2]), v9);
      v17 = vmulq_f32(vsubq_f32(v16, v10), v11);
      v18 = vaddq_f32(vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2));
      v19 = v3[1];
      if (v18.f32[0] > 0.0)
      {
        v19 = v3[2];
        if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v18, v13))).u8[0] & 1) != 0)
          v19 = vmlaq_n_f32(v10, v11, vmulq_f32(v18, v14).f32[0]);
      }
      v20 = vsubq_f32(v19, v16);
      v21 = vmulq_f32(v20, v20);
      if (*(float *)(v2 + 248) * 0.866025404 > sqrtf(vaddq_f32(vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2)).f32[0]))return 1;
    }
    v15 = *(_QWORD *)v15;
    if (!v15)
      goto LABEL_11;
  }
}

void sub_1DCADFB74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *__p;
  void *v17;
  uint64_t v18;
  _OWORD v19[2];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_1DCAE78F0(&__p, 3uLL);
  v2 = *(_QWORD *)(a1 + 1312);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 48);
  while (v3 != v4)
  {
    v14 = *(_OWORD *)(v3 + 16);
    v15 = *(_OWORD *)(v3 + 32);
    v13 = *(_OWORD *)(v3 + 48);
    v5 = (_OWORD *)operator new();
    *v5 = v14;
    v5[1] = v15;
    *(_QWORD *)__p = v5;
    v6 = (_OWORD *)operator new();
    *v6 = v15;
    v6[1] = v13;
    *((_QWORD *)__p + 1) = v6;
    v7 = (_OWORD *)operator new();
    v8 = 0;
    *v7 = v13;
    v7[1] = v14;
    *((_QWORD *)__p + 2) = v7;
    do
    {
      v9 = *(_QWORD *)((char *)__p + v8);
      v10 = (uint64_t *)sub_1DCAE79D8((_QWORD *)(*(_QWORD *)(a1 + 1312) + 304), (float32x2_t *)v9);
      v11 = (_QWORD *)(*(_QWORD *)(a1 + 1312) + 304);
      if (v10)
      {
        sub_1DCAE7510(v11, v10);
      }
      else
      {
        v12 = *(_OWORD *)(v9 + 16);
        v19[0] = *(_OWORD *)v9;
        v19[1] = v12;
        v20 = *(_DWORD *)(v3 + 172);
        sub_1DCAE7BD0((uint64_t)v11, (float32x2_t *)v19, (uint64_t)v19);
      }
      v8 += 8;
    }
    while (v8 != 24);
    v3 += 224;
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_1DCADFD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

void sub_1DCADFD30(void *a1, void *a2, uint64_t *a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  id v8;
  id v9;
  const char *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  unint64_t v21;
  const char *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t i;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int32x4_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  void *v114;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _OWORD v140[3];
  char *v141;
  char *v142;
  uint64_t v143;
  _DWORD v144[3];
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v113 = v9;
  v114 = v8;
  objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v8, v10, (uint64_t)CFSTR("position"), 786435);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v11;
  if (!v11)
    goto LABEL_45;
  v15 = objc_msgSend_dataStart(v11, v12, v13);
  v18 = objc_msgSend_stride(v14, v16, v17);
  v21 = objc_msgSend_bufferSize(v14, v19, v20);
  objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v8, v22, (uint64_t)CFSTR("normal"), 786435);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (v23)
  {
    v121 = objc_msgSend_dataStart(v23, v24, v25);
    v124 = objc_msgSend_stride(v23, v26, v27);
    v123 = objc_msgSend_bufferSize(v23, v28, v29);
  }
  else
  {
    v123 = 0;
    v124 = 0;
    v121 = 0;
  }
  objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v8, v24, (uint64_t)CFSTR("occlusionValue"), 786435);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  if (v30)
  {
    objc_msgSend_dataStart(v30, v31, v32);
    objc_msgSend_stride(v30, v33, v34);
    objc_msgSend_bufferSize(v30, v35, v36);
  }
  objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v8, v31, (uint64_t)CFSTR("textureCoordinate"), 786435);
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  if (v37)
  {
    v120 = objc_msgSend_dataStart(v37, v38, v39);
    v122 = objc_msgSend_stride(v37, v40, v41);
    v44 = objc_msgSend_bufferSize(v37, v42, v43);
  }
  else
  {
    v44 = 0;
    v122 = 0;
    v120 = 0;
  }
  objc_msgSend_indexBuffer(v9, v38, v39);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_map(v45, v46, v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();

  v112 = v48;
  v119 = (char *)objc_msgSend_bytes(v48, v49, v50);
  v116 = objc_msgSend_indexCount(v9, v51, v52);
  v141 = 0;
  v142 = 0;
  v143 = 0;
  if (objc_msgSend_geometryType(v9, v53, v54) != 2 || objc_msgSend_indexType(v9, v55, v56) != 32)
  {
    objc_msgSend_topology(v9, v55, v56);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    if (v59)
    {
      objc_msgSend_topology(v9, v57, v58);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_faceTopology(v60, v61, v62);
      v63 = (void *)objc_claimAutoreleasedReturnValue();

      if (v63)
      {
        objc_msgSend_topology(v9, v57, v58);
        v117 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_faceTopology(v117, v64, v65);
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_map(v66, v67, v68);
        v59 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_topology(v9, v69, v70);
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        v118 = objc_msgSend_faceCount(v71, v72, v73);

        if (v59)
        {
          v111 = objc_msgSend_bytes(v59, v57, v58);
LABEL_19:
          v110 = objc_msgSend_indexCount(v9, v57, v58);
          v76 = objc_msgSend_indexType(v9, v74, v75);
          v79 = objc_msgSend_geometryType(v9, v77, v78);
          sub_1DCC1903C(&v141, v119, v110, v111, v118, v76, v79, 2);
          v80 = v142;
          v119 = v141;

          v116 = (v80 - v119) >> 2;
          goto LABEL_20;
        }
      }
      else
      {
        v118 = 0;
        v59 = 0;
      }
    }
    else
    {
      v118 = 0;
    }
    v111 = 0;
    goto LABEL_19;
  }
LABEL_20:
  v81 = objc_msgSend_vertexCount(v114, v55, v56);
  if (v116)
  {
    v84 = v81;
    for (i = 0; i < v116; i += 3)
    {
      v139 = 0u;
      memset(v140, 0, sizeof(v140));
      v137 = 0u;
      v138 = 0u;
      v135 = 0u;
      v136 = 0u;
      v133 = 0u;
      v134 = 0u;
      v131 = 0u;
      v132 = 0u;
      v129 = 0u;
      v130 = 0u;
      v86 = &v119[4 * i];
      v87 = *((unsigned int *)v86 + 1);
      v144[0] = *(_DWORD *)v86;
      v144[1] = v87;
      v88 = *((unsigned int *)v86 + 2);
      v144[2] = v88;
      if (v84 > v144[0] && v84 > v87 && v84 > v88)
      {
        v89 = 0;
        v90 = 64;
        do
        {
          v91 = (int)v144[v89];
          if (v18 * v91 + 8 < v21)
          {
            *(float32x4_t *)((char *)&v129 + v90 - 48) = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(a7, a4, *(float *)(v15 + v18 * v91)), a5, *(float *)(v15 + v18 * v91 + 4)), a6, *(float *)(v15 + v18 * v91 + 8));
            if (v23 && v124 * v91 + 8 < v123)
              *(float32x4_t *)((char *)&v129 + v90) = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a4, *(float *)(v121 + v124 * v91)), a5, *(float *)(v121 + v124 * v91 + 4)), a6, *(float *)(v121 + v124 * v91 + 8)), (float32x4_t)0, a7);
            if (v37)
            {
              v92 = v122 * v91;
              if (v92 + 4 < v44)
                *((_QWORD *)v140 + v89) = *(_QWORD *)(v120 + v92);
            }
          }
          ++v89;
          v90 += 16;
        }
        while (v89 != 3);
        if (v23)
        {
          v93 = vcvtq_f64_f32(*(float32x2_t *)v130.f32);
          v94 = vcvt_hight_f64_f32(v130);
          v95 = vsubq_f64(vcvt_hight_f64_f32(v131), v94);
          v96 = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v131.f32), v93);
          v97 = vsubq_f64(vcvt_hight_f64_f32(v132), v94);
          v98 = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v132.f32), v93);
          v99 = vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(v95, v98, 1)), v97, v96, 1);
          v97.f64[1] = v98.f64[0];
          v95.f64[1] = v96.f64[0];
          v100 = vmlaq_f64(vnegq_f64(vmulq_f64(v97, v96)), v95, v98);
          v101 = vmulq_f64(v100, v100);
          v97.f64[0] = vmulq_f64(v99, v99).f64[0];
          v99.f64[1] = v100.f64[0];
          v101.f64[0] = 1.0 / sqrt(v97.f64[0] + v101.f64[0] + v101.f64[1]);
          v102 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v99, v101.f64[0])), vmulq_laneq_f64(v101, v100, 1));
        }
        else
        {
          v103 = vsubq_f32(v131, v130);
          v104 = vsubq_f32(v132, v130);
          v105 = vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v104, (int32x4_t)v104), (int8x16_t)v104, 0xCuLL), v103)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v103, (int32x4_t)v103), (int8x16_t)v103, 0xCuLL), v104);
          v106 = (int32x4_t)vmulq_f32(v105, v105);
          v106.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v106, 2), *(float32x2_t *)v106.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.i8, 1)).u32[0];
          *(float32x2_t *)v104.f32 = vrsqrte_f32((float32x2_t)v106.u32[0]);
          *(float32x2_t *)v104.f32 = vmul_f32(vrsqrts_f32((float32x2_t)v106.u32[0], vmul_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32)), *(float32x2_t *)v104.f32);
          v102 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v105, (int32x4_t)v105), (int8x16_t)v105, 0xCuLL), vmul_f32(*(float32x2_t *)v104.f32, vrsqrts_f32((float32x2_t)v106.u32[0], vmul_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32))).f32[0]);
          v133 = v102;
          v134 = v102;
          v135 = v102;
        }
        v136 = v102;
        v129.i64[0] = (uint64_t)v114;
        objc_msgSend_material(v113, v82, v83);
        v129.i64[1] = objc_claimAutoreleasedReturnValue();

        sub_1DCAE045C(&v129);
        v107 = a3[1];
        if (v107 >= a3[2])
        {
          v109 = sub_1DCAE76E0(a3, (uint64_t)&v129);
        }
        else
        {
          sub_1DCAE501C(v107, (uint64_t)&v129);
          v109 = v108 + 224;
        }
        a3[1] = v109;
      }
    }
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }

  v9 = v113;
LABEL_45:

}

void sub_1DCAE039C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v19;

  v19 = *(void **)(v17 - 152);
  if (v19)
  {
    *(_QWORD *)(v17 - 144) = v19;
    operator delete(v19);
  }

  _Unwind_Resume(a1);
}

float32_t sub_1DCAE045C(float32x4_t *a1)
{
  float32x4_t v1;
  float32x4_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float32x4_t v8;
  float64x2_t v9;
  float64x2_t v10;
  double v11;
  float64x2_t v12;
  double v13;
  float32_t result;

  v2 = a1[1];
  v1 = a1[2];
  v3 = vcvt_hight_f64_f32(v1);
  v4 = vcvt_hight_f64_f32(v2);
  v5 = vcvtq_f64_f32(*(float32x2_t *)v2.f32);
  v6 = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v1.f32), v5);
  v7 = vsubq_f64(v3, v4);
  v8 = a1[3];
  v9 = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v8.f32), v5);
  v10 = vsubq_f64(vcvt_hight_f64_f32(v8), v4);
  *(double *)v8.i64 = vaddvq_f64(vmulq_f64(v6, v6)) + vmulq_f64(v7, v7).f64[0];
  v11 = vaddvq_f64(vmulq_f64(v9, v6)) + vmulq_f64(v10, v7).f64[0];
  v12 = vmulq_f64(v9, v9);
  v13 = vaddvq_f64(v12) + vmulq_f64(v10, v10).f64[0];
  v12.f64[0] = 1.0 / -(v13 * *(double *)v8.i64 - v11 * v11);
  a1[8] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v6, v12.f64[0])), vmulq_f64(v12, v7));
  a1[9] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v9, v12.f64[0])), vmulq_f64(v12, v10));
  *(float *)v6.f64 = *(double *)v8.i64;
  *(float *)v9.f64 = v11;
  a1[10].i32[0] = LODWORD(v6.f64[0]);
  a1[10].i32[1] = LODWORD(v9.f64[0]);
  result = v13;
  a1[10].f32[2] = result;
  return result;
}

void sub_1DCAE0508(void *a1, uint64_t *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  id v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  const char *v19;
  uint64_t v20;
  id v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  const char *v29;
  void *v30;
  void *v31;
  id v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t j;
  const char *v37;
  __n128 v38;
  __n128 v39;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[4];
  float32x4_t v51;
  float32x4_t v52;
  __n128 v53;
  __n128 v54;
  _BYTE v55[128];
  _BYTE v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  objc_msgSend_transform(v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v10;
  if (v10)
  {
    objc_msgSend_matrix(v10, v11, v12);
    v14 = 0;
    v50[0] = v15;
    v50[1] = v16;
    v50[2] = v17;
    v50[3] = v18;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v51 + v14 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a4, COERCE_FLOAT(v50[v14])), a5, *(float32x2_t *)&v50[v14], 1), (float32x4_t)v39, (float32x4_t)v50[v14], 2), (float32x4_t)v38, (float32x4_t)v50[v14], 3);
      ++v14;
    }
    while (v14 != 4);
    a5 = v52;
    a4 = v51;
    v38 = v54;
    v39 = v53;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v21 = v7;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    objc_msgSend_submeshes(v21, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v46, v56, 16);
    if (v26)
    {
      v27 = *(_QWORD *)v47;
      do
      {
        for (i = 0; i != v26; ++i)
        {
          if (*(_QWORD *)v47 != v27)
            objc_enumerationMutation(v24);
          sub_1DCADFD30(v21, *(void **)(*((_QWORD *)&v46 + 1) + 8 * i), a2, a4, a5, (float32x4_t)v39, (float32x4_t)v38);
        }
        v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v29, (uint64_t)&v46, v56, 16);
      }
      while (v26);
    }

  }
  if (a3)
  {
    objc_msgSend_children(v7, v19, v20);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v30;
    if (v30)
    {
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v32 = v30;
      v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v33, (uint64_t)&v42, v55, 16);
      if (v34)
      {
        v35 = *(_QWORD *)v43;
        do
        {
          for (j = 0; j != v34; ++j)
          {
            if (*(_QWORD *)v43 != v35)
              objc_enumerationMutation(v32);
            sub_1DCAE0508(*(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * j), a2, 1, (__n128)a4, (__n128)a5, v39, v38);
          }
          v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v37, (uint64_t)&v42, v55, 16);
        }
        while (v34);
      }

    }
  }

}

void sub_1DCAE0784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCAE07E8(uint64_t a1, float a2)
{
  uint64_t v2;
  float v3;
  uint64_t v7;
  float v8;
  float v9;
  unsigned int v10;
  int v11;
  _QWORD *i;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v26;
  uint64_t j;
  int32x4_t v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v33;
  uint64_t v34;
  float32x4_t *v35;
  float v36;
  float32x4_t v37;
  BOOL v38;
  float32x4_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  float32x4_t *v45;
  unint64_t v46;
  BOOL v47;
  float32x4_t **v48;
  float v49;
  float32x4_t v50;
  float v51;
  float32x4_t v52;
  int *v53;
  int v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float v59;
  float v60;
  uint64_t v61;
  int32x2_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t **v65;
  unsigned int v66;
  unsigned int v67;
  int32x4_t v68;
  __int128 v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int32x4_t v73;
  float v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  int32x4_t v84;
  unint64_t v85;
  float32x4_t v86[2];

  v2 = *(_QWORD *)(a1 + 1312);
  v3 = *(float *)(v2 + 248);
  if (v3 > a2)
    return 0;
  v85 = 0;
  *(uint64_t *)((char *)v84.i64 + 4) = 0;
  v84.i32[0] = 0;
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  v7 = sub_1DCAE7E18((uint64_t)&v81, v2 + 344);
  v80 = 0;
  v78 = 0u;
  v79 = 0u;
  v8 = ceilf((float)(a2 - v3) / *(float *)(*(_QWORD *)(a1 + 1312) + 248));
  v9 = v8 + v8;
  v10 = v9;
  LODWORD(v80) = 1065353216;
  if (v9 >= 4295000000.0)
    v10 = -1;
  v66 = v10;
  if (*((_QWORD *)&v82 + 1))
  {
    v11 = 0;
    if (v10 <= 1)
      v10 = 1;
    v67 = v10 - 1;
    __asm
    {
      FMOV            V1.4S, #1.0
      FMOV            V0.4S, #-1.0
    }
    v69 = _Q0;
    v70 = _Q1;
    v68 = vdupq_n_s32(0x7FC00000u);
    do
    {
      for (i = (_QWORD *)v82; i; i = (_QWORD *)*i)
      {
        v18 = *(_QWORD *)(a1 + 1312);
        v21 = *(_QWORD **)(v18 + 24);
        v19 = (_QWORD *)(v18 + 24);
        v20 = v21;
        if (v21)
        {
          v22 = i[2];
          v23 = v19;
          do
          {
            v24 = v20[4];
            _CF = v24 >= v22;
            if (v24 >= v22)
              v26 = v20;
            else
              v26 = v20 + 1;
            if (_CF)
              v23 = v20;
            v20 = (_QWORD *)*v26;
          }
          while (*v26);
          if (v23 != v19 && v22 >= v23[4])
          {
            sub_1DCAE1334(v7, *(_QWORD *)(v23[5] + 8), (__n64 *)&v84);
            for (j = 0; j != 6; ++j)
            {
              v28 = vaddq_s32(*(int32x4_t *)(a1 + 16 * j + 896), v84);
              if ((v28.i32[0] & 0x80000000) == 0 && (v28.i32[1] & 0x80000000) == 0)
              {
                v29 = v28.i32[2];
                if ((v28.i32[2] & 0x80000000) == 0)
                {
                  v30 = *(_QWORD *)(a1 + 1312);
                  v31 = v28.i32[0] < *(_DWORD *)(v30 + 288) && v28.i32[1] < *(_DWORD *)(v30 + 292);
                  if (v31 && v28.i32[2] < *(_DWORD *)(v30 + 296))
                  {
                    v85 = *(_QWORD *)(*(_QWORD *)(v30 + 144) + 8 * v28.u8[8]) | ((*(_QWORD *)(*(_QWORD *)(v30 + 120)
                                                                                              + 8 * v28.u8[5]) | *(_QWORD *)(*(_QWORD *)(v30 + 144) + 8 * v28.u8[9]) | *(_QWORD *)(*(_QWORD *)(v30 + 96) + 8 * v28.u8[1])) << 24) | *(_QWORD *)(*(_QWORD *)(v30 + 120) + 8 * v28.u8[4]) | *(_QWORD *)(*(_QWORD *)(v30 + 96) + 8 * v28.u8[0]);
                    v73 = v28;
                    v7 = (uint64_t)sub_1DCAE745C((_QWORD *)(v30 + 168), &v85);
                    if (!v7)
                    {
                      v33 = 0;
                      v34 = 0;
                      v35 = *(float32x4_t **)(a1 + 1312);
                      v36 = 3.4028e38;
                      do
                      {
                        v37 = (float32x4_t)vaddq_s32(*(int32x4_t *)(a1 + 16 * v33 + 896), v73);
                        if ((v37.i32[0] & 0x80000000) == 0
                          && (v37.i32[1] & 0x80000000) == 0
                          && (v37.i32[2] & 0x80000000) == 0)
                        {
                          v38 = v37.i32[0] < v35[18].i32[0] && v37.i32[1] < v35[18].i32[1];
                          if (v38 && v37.i32[2] < v35[18].i32[2])
                          {
                            v40 = (float32x4_t *)v35[1].i64[1];
                            if (v40)
                            {
                              v41 = v35[9].i64[0];
                              v42 = v35[7].i64[1];
                              v43 = v35[6].i64[0];
                              v7 = *(_QWORD *)(v42 + 8 * v37.u8[5]) | *(_QWORD *)(v41 + 8 * v37.u8[9]) | *(_QWORD *)(v43 + 8 * v37.u8[1]);
                              v44 = *(_QWORD *)(v41 + 8 * v37.u8[8]) | (v7 << 24) | *(_QWORD *)(v42 + 8 * v37.u8[4]) | *(_QWORD *)(v43 + 8 * v37.u8[0]);
                              v45 = (float32x4_t *)((char *)v35 + 24);
                              do
                              {
                                v46 = v40[2].u64[0];
                                v47 = v46 >= v44;
                                if (v46 >= v44)
                                  v48 = (float32x4_t **)v40;
                                else
                                  v48 = (float32x4_t **)&v40->i64[1];
                                if (v47)
                                  v45 = v40;
                                v40 = *v48;
                              }
                              while (*v48);
                              if (v45 != (float32x4_t *)&v35[1].u32[2] && v44 >= v45[2].i64[0])
                              {
                                v49 = fabsf(*(float *)(v45[2].i64[1] + 116));
                                if (v49 < v36)
                                {
                                  v36 = v49;
                                  v34 = v45[2].i64[1];
                                }
                              }
                            }
                          }
                        }
                        ++v33;
                      }
                      while (v33 != 18);
                      if (v34)
                      {
                        *(float32x2_t *)v37.f32 = vcvt_f32_s32(*(int32x2_t *)v73.i8);
                        v37.f32[2] = (float)v29;
                        v50 = vaddq_f32(v37, v70);
                        v51 = v35[15].f32[2];
                        v52 = vmlaq_n_f32(v35[17], v50, v51);
                        v50.f32[0] = v51 * 0.5;
                        v72 = vsubq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 0));
                        v74 = v51;
                        v86[0] = v72;
                        v54 = *(_DWORD *)(v34 + 144);
                        v53 = (int *)(v34 + 144);
                        v55 = (float32x4_t *)(v35[2].i64[1] + 224 * v54);
                        v77 = v55[1];
                        v76 = v55[3];
                        v75 = v55[2];
                        *(double *)v56.i64 = sub_1DCADF674(&v77, &v76, &v75, v86);
                        v71 = v56;
                        v57 = vsubq_f32(v72, v56);
                        v58 = vmulq_f32(v57, v57);
                        v59 = sqrtf(vaddq_f32(vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2)).f32[0]);
                        if (v59 <= v36)
                          v60 = v74 + v36;
                        else
                          v60 = v59;
                        if (v60 < a2)
                        {
                          v61 = operator new();
                          *(_BYTE *)(v61 + 112) = 0;
                          *(_OWORD *)(v61 + 152) = 0u;
                          *(_OWORD *)(v61 + 168) = 0u;
                          *(_QWORD *)v61 = 0;
                          *(_QWORD *)(v61 + 8) = 0;
                          *(_DWORD *)(v61 + 184) = 1065353216;
                          *(_OWORD *)(v61 + 48) = 0u;
                          *(_OWORD *)(v61 + 64) = 0u;
                          *(_OWORD *)(v61 + 80) = 0u;
                          *(_OWORD *)(v61 + 96) = 0u;
                          *(_OWORD *)(v61 + 16) = v69;
                          *(_OWORD *)(v61 + 32) = 0u;
                          *(_BYTE *)(v61 + 192) = 1;
                          *(_DWORD *)(v61 + 144) = *v53;
                          sub_1DCAE7240(v61 + 152, v53, v53);
                          *(float *)v62.i32 = *(float *)(*(_QWORD *)(a1 + 1312) + 248) * 0.5;
                          v63 = (float32x4_t)vdupq_lane_s32(v62, 0);
                          v64 = vsubq_f32(v86[0], v63);
                          *(float32x4_t *)(v61 + 16) = vaddq_f32(v63, v86[0]);
                          *(float32x4_t *)(v61 + 32) = v64;
                          *(float32x4_t *)(v61 + 128) = v71;
                          *(float *)(v61 + 116) = -v60;
                          *(_QWORD *)(v61 + 8) = v85;
                          sub_1DCAE7240(v61 + 152, v53, v53);
                          *(_DWORD *)(v61 + 196) = 0;
                          *(_WORD *)(v61 + 200) = 1;
                          *(int32x4_t *)(v61 + 208) = v68;
                          *(_WORD *)(v61 + 224) = 0;
                          *(int32x4_t *)(v61 + 240) = v68;
                          *(_QWORD *)(v61 + 256) = -1;
                          sub_1DCAE6F68(*(_QWORD *)(a1 + 1312) + 168, &v85, &v85);
                          v65 = (uint64_t **)(*(_QWORD *)(a1 + 1312) + 16);
                          v77.i64[0] = (uint64_t)&v85;
                          sub_1DCAE7184(v65, &v85, (uint64_t)&unk_1DCC58300, (uint64_t **)&v77)[5] = v61;
                          sub_1DCAE6F68(*(_QWORD *)(a1 + 1312) + 384, &v85, &v85);
                          v7 = (uint64_t)sub_1DCAE6F68((uint64_t)&v78, &v85, &v85);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (v11 == v67)
        break;
      LODWORD(v83) = v80;
      sub_1DCAE7E8C(&v81, (_QWORD *)v79, 0);
      ++v11;
      v7 = (uint64_t)sub_1DCAE8490(&v78);
    }
    while (*((_QWORD *)&v82 + 1));
  }
  sub_1DCAE6B78((uint64_t)&v78);
  sub_1DCAE6B78((uint64_t)&v81);
  return v66;
}

void sub_1DCAE0D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_1DCAE6B78((uint64_t)&a29);
  sub_1DCAE6B78((uint64_t)&a35);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCAE0DA4(_QWORD *result, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  int32x4_t v15;
  BOOL v16;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  float v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  int v28;
  int v29;
  _QWORD *i;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  BOOL v38;
  _QWORD *v39;
  uint64_t v40;
  int32x4_t v41;
  uint64_t v42;
  BOOL v43;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  BOOL v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v56;
  _QWORD *j;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  BOOL v65;
  _QWORD *v66;
  int32x4_t v67;
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  int32x4_t v78;
  unint64_t v79;

  if (a2 >= 1)
  {
    v3 = result;
    v79 = 0;
    *(uint64_t *)((char *)v78.i64 + 4) = 0;
    v78.i32[0] = 0;
    v75 = 0u;
    v76 = 0u;
    v77 = 1065353216;
    v72 = 0u;
    v73 = 0u;
    v74 = 1065353216;
    v69 = 0u;
    v70 = 0u;
    v71 = 1065353216;
    v4 = *(_QWORD **)(result[164] + 400);
    if (v4)
    {
      do
      {
        v5 = v4[2];
        v68 = v5;
        v6 = v3[164];
        v7 = (_QWORD *)(v6 + 24);
        v8 = *(_QWORD **)(v6 + 24);
        if (v8)
        {
          v9 = (_QWORD *)(v6 + 24);
          v10 = *(_QWORD **)(v6 + 24);
          do
          {
            v11 = v10[4];
            v12 = v11 >= v5;
            if (v11 >= v5)
              v13 = v10;
            else
              v13 = v10 + 1;
            if (v12)
              v9 = v10;
            v10 = (_QWORD *)*v13;
          }
          while (*v13);
          if (v9 != v7 && v5 >= v9[4])
          {
            sub_1DCAE1334((uint64_t)result, *(_QWORD *)(v9[5] + 8), (__n64 *)&v78);
            v14 = 0;
            while (1)
            {
              v15 = vaddq_s32(*(int32x4_t *)&v3[2 * v14 + 112], v78);
              if (v15.i32[0] < 0 || v15.i32[1] < 0 || v15.i32[2] < 0)
                break;
              v16 = v15.i32[0] < *(_DWORD *)(v6 + 288) && v15.i32[1] < *(_DWORD *)(v6 + 292);
              if (!v16 || v15.i32[2] >= *(_DWORD *)(v6 + 296))
                break;
              v18 = *(_QWORD *)(*(_QWORD *)(v6 + 144) + 8 * v15.u8[8]) | ((*(_QWORD *)(*(_QWORD *)(v6 + 120)
                                                                                       + 8 * v15.u8[5]) | *(_QWORD *)(*(_QWORD *)(v6 + 144) + 8 * v15.u8[9]) | *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8 * v15.u8[1])) << 24) | *(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v15.u8[4]) | *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8 * v15.u8[0]);
              v79 = v18;
              v19 = (_QWORD *)(v6 + 24);
              v20 = v8;
              do
              {
                v21 = v20[4];
                v22 = v21 >= v18;
                if (v21 >= v18)
                  v23 = v20;
                else
                  v23 = v20 + 1;
                if (v22)
                  v19 = v20;
                v20 = (_QWORD *)*v23;
              }
              while (*v23);
              if (v19 == v7 || v18 < v19[4])
                break;
              if (++v14 == 6)
                goto LABEL_39;
            }
            result = sub_1DCAE6F68((uint64_t)&v69, &v68, &v68);
          }
        }
LABEL_39:
        v4 = (_QWORD *)*v4;
      }
      while (v4);
      v24 = *(float *)&v71;
      v25 = (_QWORD *)v70;
    }
    else
    {
      v25 = 0;
      v24 = 1.0;
    }
    *(float *)&v77 = v24;
    sub_1DCAE7E8C(&v75, v25, 0);
    if (*((_QWORD *)&v76 + 1))
    {
      v27 = 0;
      if (a2 <= 1)
        v28 = 1;
      else
        v28 = a2;
      v29 = v28 - 1;
      do
      {
        for (i = (_QWORD *)v76; i; i = (_QWORD *)*i)
        {
          v31 = v3[164];
          v34 = *(_QWORD **)(v31 + 24);
          v32 = (_QWORD *)(v31 + 24);
          v33 = v34;
          if (v34)
          {
            v35 = i[2];
            v36 = v32;
            do
            {
              v37 = v33[4];
              v38 = v37 >= v35;
              if (v37 >= v35)
                v39 = v33;
              else
                v39 = v33 + 1;
              if (v38)
                v36 = v33;
              v33 = (_QWORD *)*v39;
            }
            while (*v39);
            if (v36 != v32 && v35 >= v36[4])
            {
              sub_1DCAE1334((uint64_t)v26, *(_QWORD *)(v36[5] + 8), (__n64 *)&v78);
              v40 = 0;
              v67 = v78;
              do
              {
                v41 = vaddq_s32(*(int32x4_t *)&v3[2 * v40 + 112], v67);
                if ((v41.i32[0] & 0x80000000) == 0 && (v41.i32[1] & 0x80000000) == 0 && (v41.i32[2] & 0x80000000) == 0)
                {
                  v42 = v3[164];
                  v43 = v41.i32[0] < *(_DWORD *)(v42 + 288) && v41.i32[1] < *(_DWORD *)(v42 + 292);
                  if (v43 && v41.i32[2] < *(_DWORD *)(v42 + 296))
                  {
                    v47 = *(_QWORD **)(v42 + 24);
                    v45 = (_QWORD *)(v42 + 24);
                    v46 = v47;
                    v48 = *(_QWORD *)(v45[15] + 8 * v41.u8[8]) | ((*(_QWORD *)(v45[12] + 8 * v41.u8[5]) | *(_QWORD *)(v45[15] + 8 * v41.u8[9]) | *(_QWORD *)(v45[9] + 8 * v41.u8[1])) << 24) | *(_QWORD *)(v45[12] + 8 * v41.u8[4]) | *(_QWORD *)(v45[9] + 8 * v41.u8[0]);
                    v79 = v48;
                    if (!v47)
                      goto LABEL_82;
                    v49 = v45;
                    do
                    {
                      v50 = v46[4];
                      v51 = v50 >= v48;
                      if (v50 >= v48)
                        v52 = v46;
                      else
                        v52 = v46 + 1;
                      if (v51)
                        v49 = v46;
                      v46 = (_QWORD *)*v52;
                    }
                    while (*v52);
                    if (v49 == v45 || v48 < v49[4])
LABEL_82:
                      v49 = v45;
                    v53 = sub_1DCAE745C(&v69, &v79);
                    v26 = sub_1DCAE745C((_QWORD *)(v3[164] + 384), &v79);
                    if (v49 != (_QWORD *)(v3[164] + 24) && v26 != 0 && v53 == 0)
                    {
                      v56 = v49[5];
                      if (!*(_BYTE *)(v56 + 192) || *(_BYTE *)(v56 + 200))
                      {
                        sub_1DCAE6F68((uint64_t)&v72, &v79, &v79);
                        v26 = sub_1DCAE6F68((uint64_t)&v69, &v79, &v79);
                      }
                    }
                  }
                }
                ++v40;
              }
              while (v40 != 6);
            }
          }
        }
        if (v27 == v29)
          break;
        LODWORD(v77) = v74;
        sub_1DCAE7E8C(&v75, (_QWORD *)v73, 0);
        ++v27;
        v26 = sub_1DCAE8490(&v72);
      }
      while (*((_QWORD *)&v76 + 1));
    }
    for (j = (_QWORD *)v70; j; j = (_QWORD *)*j)
    {
      v58 = j[2];
      v68 = v58;
      v59 = v3[164];
      v62 = *(_QWORD **)(v59 + 24);
      v60 = (_QWORD *)(v59 + 24);
      v61 = v62;
      if (v62)
      {
        v63 = v60;
        do
        {
          v64 = v61[4];
          v65 = v64 >= v58;
          if (v64 >= v58)
            v66 = v61;
          else
            v66 = v61 + 1;
          if (v65)
            v63 = v61;
          v61 = (_QWORD *)*v66;
        }
        while (*v66);
        if (v63 != v60 && v58 >= v63[4])
        {
          sub_1DCAE84F4((_QWORD *)(v3[164] + 168), &v68);
          sub_1DCAE84F4((_QWORD *)(v3[164] + 384), &v68);
          sub_1DCAE8528(v3[164] + 16, &v68);
        }
      }
    }
    sub_1DCAE6B78((uint64_t)&v69);
    sub_1DCAE6B78((uint64_t)&v72);
    return (_QWORD *)sub_1DCAE6B78((uint64_t)&v75);
  }
  return result;
}

void sub_1DCAE126C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  sub_1DCAE6B78((uint64_t)va);
  sub_1DCAE6B78((uint64_t)va1);
  sub_1DCAE6B78((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1DCAE12A0(uint64_t a1, float32x4_t **a2)
{
  _QWORD *i;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;

  for (i = *(_QWORD **)(*(_QWORD *)(a1 + 1312) + 400); i; i = (_QWORD *)*i)
  {
    v5 = *(_QWORD *)(a1 + 1312);
    v8 = *(_QWORD **)(v5 + 24);
    v6 = (_QWORD *)(v5 + 24);
    v7 = v8;
    if (v8)
    {
      v9 = i[2];
      v10 = v6;
      do
      {
        v11 = v7[4];
        v12 = v11 >= v9;
        if (v11 >= v9)
          v13 = v7;
        else
          v13 = v7 + 1;
        if (v12)
          v10 = v7;
        v7 = (_QWORD *)*v13;
      }
      while (*v13);
      if (v10 != v6 && v9 >= v10[4])
        sub_1DCAE14EC(*a2, v10[5], *(_DWORD *)(*(_QWORD *)(a1 + 1312) + 424));
    }
  }
}

__n64 sub_1DCAE1334(uint64_t a1, unint64_t a2, __n64 *a3)
{
  int64x2_t v3;
  int64x2_t v4;
  int64x2_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint64x2_t v8;
  uint64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  uint64_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int64x2_t v17;
  uint64x2_t v18;
  int64x2_t v19;
  uint64x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int64x2_t v24;
  int64x2_t v25;
  uint64x2_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x8_t v31;
  __n64 result;

  v3 = (int64x2_t)xmmword_1DCC56FF0;
  v4 = (int64x2_t)xmmword_1DCC57000;
  v5 = (int64x2_t)xmmword_1DCC57010;
  v6 = (int8x16_t)vdupq_n_s64(a2);
  v7 = 0uLL;
  v8 = (uint64x2_t)vdupq_n_s64(1uLL);
  v9 = (uint64x2_t)vdupq_n_s64(2uLL);
  v10 = vdupq_n_s64(4uLL);
  v11 = vdupq_n_s64(0xFFFFFFFFFFFFFFFELL);
  v12 = 24;
  v13 = (int64x2_t)xmmword_1DCC57020;
  v14 = vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
  v15 = 0uLL;
  v16 = 0uLL;
  do
  {
    v17 = v3;
    v18.i64[0] = 3 * v3.i64[0];
    v19 = v4;
    v18.i64[1] = 3 * v17.i64[1];
    v20.i64[0] = 3 * v4.i64[0];
    v20.i64[1] = 3 * v19.i64[1];
    v21 = v16;
    v22 = v15;
    v23 = v7;
    v7 = vorrq_s8(v7, (int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v8, v20), v6), (uint64x2_t)vnegq_s64(vaddq_s64(v19, v19))), (int32x4_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v8, v18), v6), (uint64x2_t)vnegq_s64(vaddq_s64(v17, v17)))));
    v24 = vaddq_s64((int64x2_t)v18, v5);
    v25 = vaddq_s64((int64x2_t)v20, v13);
    v16 = vorrq_s8(v16, (int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v9, v20), v6), (uint64x2_t)vmvnq_s8((int8x16_t)v25)), (int32x4_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v9, v18), v6), (uint64x2_t)vmvnq_s8((int8x16_t)v24))));
    v15 = vorrq_s8(v15, (int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)v10, v20), v6), (uint64x2_t)vsubq_s64(v11, v25)), (int32x4_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)v10, v18), v6), (uint64x2_t)vsubq_s64(v11, v24))));
    v5 = vaddq_s64(v5, v14);
    v13 = vaddq_s64(v13, v14);
    v3 = vaddq_s64(v17, v10);
    v4 = vaddq_s64(v19, v10);
    v12 -= 4;
  }
  while (v12);
  v26 = (uint64x2_t)vdupq_n_s64(0x15uLL);
  v27 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v26, (uint64x2_t)v19), (int32x4_t)vcgtq_u64(v26, (uint64x2_t)v17));
  v28 = vbslq_s8(v27, v16, v21);
  v29 = vbslq_s8(v27, v15, v22);
  v30 = vbslq_s8(v27, v7, v23);
  *(int8x8_t *)v27.i8 = vorr_s8(*(int8x8_t *)v28.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
  v31 = vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
  *(int8x8_t *)v30.i8 = vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
  result.n64_u32[0] = v30.i32[0] | v30.i32[1];
  result.n64_u32[1] = v27.i32[0] | v27.i32[1];
  a3[1].n64_u32[0] = v31.i32[0] | v31.i32[1];
  a3->n64_u64[0] = result.n64_u64[0];
  return result;
}

void sub_1DCAE14EC(float32x4_t *a1, uint64_t a2, int a3)
{
  float32x4_t *v4;
  int v5;
  float32x4_t v6;
  int32x4_t v13;
  int16x4_t v14;
  int v15;
  int v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  uint8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  __int128 v36;

  v4 = a1;
  if (a3)
  {
    v5 = a3;
    v6.i64[0] = 0x3F0000003F000000;
    v6.i64[1] = 0x3F0000003F000000;
    __asm { FMOV            V0.4S, #-1.0 }
    v36 = _Q0;
    __asm { FMOV            V1.4S, #0.25 }
    v34 = vdupq_n_s32(0x7FC00000u);
    v35 = _Q1;
    while (v5 >= 1)
    {
      v13 = vcgeq_f32(vmulq_f32(vaddq_f32(*(float32x4_t *)(a2 + 16), *(float32x4_t *)(a2 + 32)), v6), vmulq_f32(vaddq_f32(v4[1], v4[2]), v6));
      v14 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v13));
      if ((v14.i8[0] & 1) != 0)
        v15 = 0;
      else
        v15 = 4;
      if ((v14.i8[2] & 1) != 0)
        v16 = v15;
      else
        v16 = v15 | 2;
      v17 = v16 & 0xFFFFFFFE | vmovn_s32(v13).i32[1] & 1;
      v18 = (char *)v4 + 8 * v17;
      v21 = *((_QWORD *)v18 + 6);
      v20 = (uint64_t *)(v18 + 48);
      v19 = v21;
      if (!v21)
      {
        v22 = operator new();
        v6.i64[0] = 0x3F0000003F000000;
        v6.i64[1] = 0x3F0000003F000000;
        v19 = v22;
        *(_BYTE *)(v22 + 112) = 0;
        *(_OWORD *)(v22 + 168) = 0u;
        *(_OWORD *)(v22 + 152) = 0u;
        *(_QWORD *)v22 = 0;
        *(_QWORD *)(v22 + 8) = 0;
        *(_DWORD *)(v22 + 184) = 1065353216;
        *(_OWORD *)(v22 + 48) = 0u;
        *(_OWORD *)(v22 + 64) = 0u;
        *(_OWORD *)(v22 + 80) = 0u;
        *(_OWORD *)(v22 + 96) = 0u;
        *(_OWORD *)(v22 + 16) = v36;
        *(_OWORD *)(v22 + 32) = 0u;
        *v20 = v22;
        v24 = v4[1];
        v23 = v4[2];
        v25 = (int8x16_t)vmulq_f32(vaddq_f32(v24, v23), v6);
        v26 = vsubq_f32(v24, v23);
        v24.i32[0] = v17;
        v27.i32[0] = 4;
        v28 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vcgtq_u8(v27, (uint8x16_t)v24), 0);
        *(float *)v27.i32 = 0.25 * v26.f32[0];
        *(float *)v29.i32 = *(float *)v25.i32 + (float)(0.25 * v26.f32[0]);
        v29.i32[1] = v25.i32[1];
        v29.i32[2] = v25.i32[2];
        v4[7].i8[0] |= 1 << v17;
        *(float *)v30.i32 = *(float *)v25.i32 - (float)(0.25 * v26.f32[0]);
        v30.i32[1] = v25.i32[1];
        v30.i32[2] = v25.i32[2];
        v31 = vbslq_s8(v28, v30, v29);
        *(float *)v25.i32 = -(float)(v26.f32[0] * 0.25);
        *(float32x2_t *)v25.i8 = vadd_f32((float32x2_t)vext_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), 4uLL), (float32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v17), (int8x8_t)0x100000002)), (int8x8_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 0), (int8x8_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 0)));
        v32 = (float32x4_t)vextq_s8(vextq_s8(v31, v31, 4uLL), v25, 0xCuLL);
        v33 = vmulq_f32(v26, v35);
        *(float32x4_t *)(v22 + 16) = vaddq_f32(v32, v33);
        *(float32x4_t *)(v22 + 32) = vsubq_f32(v32, v33);
        *(_DWORD *)(v22 + 144) = -1;
        *(_DWORD *)(v22 + 116) = 2143289344;
        *(_BYTE *)(v22 + 192) = 0;
        *(_QWORD *)(v22 + 8) = 0;
        *(_WORD *)(v22 + 200) = 0;
        *(int32x4_t *)(v22 + 208) = v34;
        *(_WORD *)(v22 + 224) = 0;
        *(int32x4_t *)(v22 + 240) = v34;
        *(_QWORD *)(v22 + 256) = -1;
      }
      v4 = (float32x4_t *)v19;
      if (!--v5)
        goto LABEL_15;
    }
  }
  else
  {
    v19 = (uint64_t)a1;
LABEL_15:
    *(_OWORD *)(v19 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v19 + 16) = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(v19 + 116) = *(_DWORD *)(a2 + 116);
    *(_OWORD *)(v19 + 128) = *(_OWORD *)(a2 + 128);
    *(_DWORD *)(v19 + 144) = *(_DWORD *)(a2 + 144);
    *(_BYTE *)(v19 + 192) = *(_BYTE *)(a2 + 192);
    *(_QWORD *)(v19 + 8) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(v19 + 196) = *(_DWORD *)(a2 + 196);
    *(_WORD *)(v19 + 200) = *(_WORD *)(a2 + 200);
    if (v19 != a2)
    {
      *(_DWORD *)(v19 + 184) = *(_DWORD *)(a2 + 184);
      sub_1DCAE8994((_QWORD *)(v19 + 152), *(int **)(a2 + 168), 0);
    }
    *(_OWORD *)(v19 + 208) = *(_OWORD *)(a2 + 208);
    *(_WORD *)(v19 + 224) = *(_WORD *)(a2 + 224);
    *(_OWORD *)(v19 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(v19 + 256) = *(_QWORD *)(a2 + 256);
  }
}

float32x4_t *sub_1DCAE1784(float32x4_t *result, float32x4_t *a2, int a3)
{
  int v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  int16x4_t v8;
  int v9;
  float v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x8_t v14;
  int v15;
  int v16;

  v3 = a3 - 1;
  if (a3 == 1)
  {
    v4.i64[0] = 0x3F0000003F000000;
    v4.i64[1] = 0x3F0000003F000000;
    v5 = vmulq_f32(vaddq_f32(a2[1], a2[2]), v4);
LABEL_11:
    LODWORD(v10) = vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u32[0];
    v11 = *(float32x2_t *)v5.f32;
    v12.i64[0] = 0x3F0000003F000000;
    v12.i64[1] = 0x3F0000003F000000;
    v13 = vmulq_f32(vaddq_f32(result[1], result[2]), v12);
    v14 = vmvn_s8((int8x8_t)vcge_f32(v11, *(float32x2_t *)v13.f32));
    if ((v14.i8[0] & 1) != 0)
      v15 = 0;
    else
      v15 = 4;
    if ((v14.i8[4] & 1) != 0)
      v16 = v15;
    else
      v16 = v15 | 2;
    result[3].i64[v16 | (v10 >= v13.f32[2])] = 0;
  }
  else
  {
    v6.i64[0] = 0x3F0000003F000000;
    v6.i64[1] = 0x3F0000003F000000;
    while ((a3 & ~(a3 >> 31)) > a3 - 2)
    {
      v5 = vmulq_f32(vaddq_f32(a2[1], a2[2]), v6);
      v7 = vcgeq_f32(v5, vmulq_f32(vaddq_f32(result[1], result[2]), v6));
      v8 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v7));
      if ((v8.i8[0] & 1) != 0)
        v9 = 0;
      else
        v9 = 4;
      if ((v8.i8[2] & 1) == 0)
        v9 |= 2u;
      result = (float32x4_t *)result[3].i64[v9 & 0xFFFFFFFE | vmovn_s32(v7).i32[1] & 1];
      if (!--v3)
        goto LABEL_11;
    }
  }
  return result;
}

void sub_1DCAE187C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  float32x4_t *v23;
  float32x4_t v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  float32x4_t *v28;
  BOOL v29;
  float32x4_t v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  float v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  BOOL v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int32x2_t v48;
  float32x4_t v49;
  uint64_t **v50;
  float32x4_t *v51;
  float v52;
  int v53;
  _QWORD *v55;
  uint64_t v56;
  int32x4_t v57;
  __int128 v58;
  float32x4_t v59;
  int32x4_t v60;
  float v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int v67;
  int32x4_t v68;
  unint64_t v69;
  float32x4_t v70[2];

  v68.i32[2] = 0;
  v68.i64[0] = 0;
  v55 = *(_QWORD **)(a1[164] + 184);
  if (v55)
  {
    v1 = a1;
    v69 = 0;
    __asm
    {
      FMOV            V1.4S, #1.0
      FMOV            V0.4S, #-1.0
    }
    v58 = _Q0;
    v59 = _Q1;
    v57 = vdupq_n_s32(0x7FC00000u);
    while (1)
    {
      v6 = v1[164];
      v9 = *(_QWORD **)(v6 + 24);
      v7 = (_QWORD *)(v6 + 24);
      v8 = v9;
      if (v9)
      {
        v10 = v55[2];
        v11 = v7;
        do
        {
          v12 = v8[4];
          _CF = v12 >= v10;
          if (v12 >= v10)
            v14 = v8;
          else
            v14 = v8 + 1;
          if (_CF)
            v11 = v8;
          v8 = (_QWORD *)*v14;
        }
        while (*v14);
        if (v11 != v7 && v10 >= v11[4])
        {
          v56 = v11[5];
          v15 = *(uint64_t **)(v56 + 168);
          if (v15)
            break;
        }
      }
LABEL_51:
      v55 = (_QWORD *)*v55;
      if (!v55)
        return;
    }
LABEL_15:
    v67 = *((_DWORD *)v15 + 4);
    v16 = v67;
    v17 = *(_QWORD *)(v1[164] + 40);
    sub_1DCAE1334((uint64_t)a1, *(_QWORD *)(v56 + 8), (__n64 *)&v68);
    v18 = 0;
    v19 = v68;
    v20 = (float32x4_t *)(v17 + 224 * v16);
    v21 = v20 + 1;
    v22 = v20 + 3;
    v23 = v20 + 2;
    v60 = v68;
    while (1)
    {
      v24 = (float32x4_t)vaddq_s32(*(int32x4_t *)&v1[2 * v18 + 112], v19);
      v25 = v24.i16[0];
      if (v24.i32[0] < 0)
        goto LABEL_40;
      v26 = v24.i16[2];
      if (v24.i32[1] < 0)
        goto LABEL_40;
      v27 = v24.i16[4];
      if (v24.i32[2] < 0)
        goto LABEL_40;
      v28 = (float32x4_t *)v1[164];
      v29 = v24.i32[0] < v28[18].i32[0] && v24.i32[1] < v28[18].i32[1];
      if (!v29 || v24.i32[2] >= v28[18].i32[2])
        goto LABEL_40;
      *(float32x2_t *)v24.f32 = vcvt_f32_s32(*(int32x2_t *)v24.f32);
      v24.f32[2] = (float)v24.i32[2];
      v31 = vaddq_f32(v24, v59);
      v32 = v28[15].f32[2];
      v33 = vmlaq_n_f32(v28[17], v31, v32);
      v31.f32[0] = v32 * 0.5;
      v61 = v32;
      v63 = vsubq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 0));
      v70[0] = v63;
      v66 = *v21;
      v65 = *v22;
      v64 = *v23;
      *(double *)v34.i64 = sub_1DCADF674(&v66, &v65, &v64, v70);
      v35 = vsubq_f32(v63, v34);
      v36 = (int32x4_t)vmulq_f32(v35, v35);
      v37 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.i8, 1)), (float32x4_t)vdupq_laneq_s32(v36, 2)).f32[0]);
      v40 = v28[1].i64[1];
      v39 = &v28[1].i64[1];
      v38 = (_QWORD *)v40;
      v41 = *(_QWORD *)(v39[15] + 8 * v27) | ((*(_QWORD *)(v39[12] + 8 * HIBYTE(v26)) | *(_QWORD *)(v39[15] + 8 * HIBYTE(v27)) | *(_QWORD *)(v39[9] + 8 * HIBYTE(v25))) << 24) | *(_QWORD *)(v39[12] + 8 * v26) | *(_QWORD *)(v39[9] + 8 * v25);
      v69 = v41;
      if (!v40)
        goto LABEL_38;
      v42 = v39;
      do
      {
        v43 = v38[4];
        v44 = v43 >= v41;
        if (v43 >= v41)
          v45 = v38;
        else
          v45 = v38 + 1;
        if (v44)
          v42 = v38;
        v38 = (_QWORD *)*v45;
      }
      while (*v45);
      if (v42 != v39 && v41 >= v42[4])
      {
        v51 = (float32x4_t *)v42[5];
        v19 = v60;
        if (v51[12].i8[0])
          goto LABEL_40;
        v52 = fabsf(v51[7].f32[1]);
        if (v61 * 0.866025404 > v52)
          goto LABEL_40;
        v53 = v67;
        if (v51[9].i32[0] == v67 || v37 >= v52)
          goto LABEL_40;
        v51[7].f32[1] = -v37;
        v51[8] = v34;
        v51[9].i32[0] = v53;
        a1 = sub_1DCAE7240((uint64_t)&v51[9].i64[1], &v67, &v67);
      }
      else
      {
LABEL_38:
        v62 = v34;
        v46 = operator new();
        *(_BYTE *)(v46 + 112) = 0;
        *(_OWORD *)(v46 + 168) = 0u;
        *(_OWORD *)(v46 + 152) = 0u;
        *(_QWORD *)v46 = 0;
        *(_QWORD *)(v46 + 8) = 0;
        *(_DWORD *)(v46 + 184) = 1065353216;
        *(_OWORD *)(v46 + 48) = 0u;
        *(_OWORD *)(v46 + 64) = 0u;
        *(_OWORD *)(v46 + 80) = 0u;
        *(_OWORD *)(v46 + 96) = 0u;
        *(_OWORD *)(v46 + 16) = v58;
        *(_OWORD *)(v46 + 32) = 0u;
        *(_BYTE *)(v46 + 192) = 0;
        *(_DWORD *)(v46 + 144) = v67;
        sub_1DCAE7240(v46 + 152, &v67, &v67);
        *(float *)(v46 + 116) = -v37;
        v47 = v1[164];
        *(float *)v48.i32 = *(float *)(v47 + 248) * 0.5;
        v49 = (float32x4_t)vdupq_lane_s32(v48, 0);
        *(float32x4_t *)(v46 + 16) = vaddq_f32(v49, v63);
        *(float32x4_t *)(v46 + 32) = vsubq_f32(v63, v49);
        *(float32x4_t *)(v46 + 128) = v62;
        *(_QWORD *)(v46 + 8) = v69;
        *(_DWORD *)(v46 + 196) = -1;
        *(_WORD *)(v46 + 200) = 256;
        *(int32x4_t *)(v46 + 208) = v57;
        *(_WORD *)(v46 + 224) = 0;
        *(int32x4_t *)(v46 + 240) = v57;
        *(_QWORD *)(v46 + 256) = -1;
        sub_1DCAE6F68(v47 + 208, &v69, &v69);
        v50 = (uint64_t **)(v1[164] + 16);
        v66.i64[0] = (uint64_t)&v69;
        a1 = sub_1DCAE7184(v50, &v69, (uint64_t)&unk_1DCC58300, (uint64_t **)&v66);
        a1[5] = v46;
      }
      v19 = v60;
LABEL_40:
      if (++v18 == 26)
      {
        v15 = (uint64_t *)*v15;
        if (!v15)
          goto LABEL_51;
        goto LABEL_15;
      }
    }
  }
}

void sub_1DCAE1C90(uint64_t a1)
{
  float32x4_t *v1;
  _QWORD *v2;
  __int8 *v4;
  uint64_t v5;
  unint64_t v10;
  __int8 *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  float v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  BOOL v23;
  unint64_t v25;
  __int8 *v26;
  _QWORD *v27;
  unint64_t v28;
  BOOL v29;
  _QWORD *v30;
  float32x4_t *v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x4_t v38;
  int32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;

  v44.i32[2] = 0;
  v44.i64[0] = 0;
  v1 = *(float32x4_t **)(a1 + 1312);
  v2 = (_QWORD *)v1[11].i64[1];
  if (v2)
  {
    v4 = &v1[1].i8[8];
    v5 = v1[1].i64[1];
    __asm { FMOV            V0.4S, #1.0 }
    v43 = _Q0;
    do
    {
      if (v5)
      {
        v10 = v2[2];
        v11 = &v1[1].i8[8];
        v12 = (_QWORD *)v5;
        do
        {
          v13 = v12[4];
          _CF = v13 >= v10;
          if (v13 >= v10)
            v15 = v12;
          else
            v15 = v12 + 1;
          if (_CF)
            v11 = (__int8 *)v12;
          v12 = (_QWORD *)*v15;
        }
        while (*v15);
        if (v11 != v4 && v10 >= *((_QWORD *)v11 + 4))
        {
          v16 = *((_QWORD *)v11 + 5);
          v17 = *(float *)(v16 + 116);
          if (v17 < 0.0)
          {
            sub_1DCAE1334(a1, *(_QWORD *)(v16 + 8), (__n64 *)&v44);
            v19 = 0;
            *(float32x2_t *)v20.f32 = vcvt_f32_s32(*(int32x2_t *)v44.i8);
            v20.f32[2] = (float)v44.i32[2];
            v21 = vaddq_f32(v20, v43);
            while (1)
            {
              v22 = (float32x4_t)vaddq_s32(*(int32x4_t *)(a1 + 16 * v19 + 896), v44);
              if ((v22.i32[0] & 0x80000000) == 0 && (v22.i32[1] & 0x80000000) == 0 && (v22.i32[2] & 0x80000000) == 0)
              {
                v23 = v22.i32[0] < v1[18].i32[0] && v22.i32[1] < v1[18].i32[1];
                if (v23 && v22.i32[2] < v1[18].i32[2])
                {
                  v25 = *(_QWORD *)(v1[9].i64[0] + 8 * v22.u8[8]) | ((*(_QWORD *)(v1[7].i64[1] + 8 * v22.u8[5]) | *(_QWORD *)(v1[9].i64[0] + 8 * v22.u8[9]) | *(_QWORD *)(v1[6].i64[0] + 8 * v22.u8[1])) << 24) | *(_QWORD *)(v1[7].i64[1] + 8 * v22.u8[4]) | *(_QWORD *)(v1[6].i64[0] + 8 * v22.u8[0]);
                  v26 = &v1[1].i8[8];
                  v27 = (_QWORD *)v5;
                  do
                  {
                    v28 = v27[4];
                    v29 = v28 >= v25;
                    if (v28 >= v25)
                      v30 = v27;
                    else
                      v30 = v27 + 1;
                    if (v29)
                      v26 = (__int8 *)v27;
                    v27 = (_QWORD *)*v30;
                  }
                  while (*v30);
                  if (v26 != v4 && v25 >= *((_QWORD *)v26 + 4))
                  {
                    v31 = (float32x4_t *)*((_QWORD *)v26 + 5);
                    if (!v31[12].i8[0] && v31[7].f32[1] >= 0.0)
                    {
                      v32 = v31[8];
                      v33 = v1[15].f32[2];
                      v18.f32[0] = v33 * 0.5;
                      v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 0);
                      v34 = vsubq_f32(vsubq_f32(vmlaq_n_f32(v1[17], v21, v33), v18), v32);
                      v35 = (int32x4_t)vmulq_f32(v34, v34);
                      v35.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v35, 2)).u32[0];
                      v36 = vrsqrte_f32((float32x2_t)v35.u32[0]);
                      v37 = vmul_f32(vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v36, v36)), v36);
                      *(float32x2_t *)v22.f32 = vcvt_f32_s32(*(int32x2_t *)v22.f32);
                      v22.f32[2] = (float)v22.i32[2];
                      v38 = vsubq_f32(vsubq_f32(vmlaq_n_f32(v1[17], vaddq_f32(v22, v43), v33), v18), v32);
                      v39 = (int32x4_t)vmulq_f32(v38, v38);
                      v39.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v39, 2)).u32[0];
                      v40 = vrsqrte_f32((float32x2_t)v39.u32[0]);
                      v41 = vmul_f32(vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v40, v40)), v40);
                      v42 = (int32x4_t)vmulq_f32(vmulq_n_f32(v34, vmul_f32(v37, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v37, v37))).f32[0]), vmulq_n_f32(v38, vmul_f32(v41, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v41, v41))).f32[0]));
                      if (vaddq_f32(vaddq_f32((float32x4_t)v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.i8, 1)), (float32x4_t)vdupq_laneq_s32(v42, 2)).f32[0] > 0.0)break;
                    }
                  }
                }
              }
              if (++v19 == 26)
                goto LABEL_41;
            }
            *(float *)(v16 + 116) = -v17;
          }
        }
      }
LABEL_41:
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
}

uint64_t sub_1DCAE1F44(uint64_t result)
{
  int8x16_t *v1;
  int8x16_t v2;
  int v3;
  __int8 *v4;
  int8x16_t v5;
  uint64_t v6;
  int32x4_t v7;
  int v8;
  char v9;
  __int32 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int8 *v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  int32x4_t v22;
  uint64_t v23;
  unint64_t v24;
  int32x4_t v25;
  BOOL v26;
  unint64_t v28;
  __int8 *v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  int v34;
  int32x4_t v35;
  __int32 v36;
  __int16 v37;
  __int16 v38;
  unint64_t v39;
  __int8 *v40;
  _QWORD *v41;
  unint64_t v42;
  BOOL v43;
  _QWORD *v44;
  uint64_t v45;
  float v46;
  __int32 v47;
  __int32 v48;
  int32x4_t v49;

  v1 = *(int8x16_t **)(result + 1312);
  v2 = v1[18];
  if (v2.i32[0] < 1)
    return result;
  v3 = 0;
  v4 = &v1[1].i8[8];
  v5 = v1[18];
  v5.i32[0] = vextq_s8(v2, v2, 8uLL).u32[0];
  do
  {
    if (v5.i32[1] < 0)
      goto LABEL_73;
    v6 = 0;
    v7.i32[3] = 0;
    v7.i64[0] = v3;
    v8 = v5.i32[0];
    v9 = 1;
    do
    {
      v7.i32[2] = 0;
      while (1)
      {
        v10 = v7.i32[2];
        if (v7.i32[2] > v8)
          break;
        v11 = (_QWORD *)v1[1].i64[1];
        if (!v11)
          goto LABEL_18;
        v12 = v1[9].i64[0];
        v13 = v1[7].i64[1];
        v14 = v1[6].i64[0];
        v15 = v7.u32[2];
        v16 = *(_QWORD *)(v12 + 8 * v7.u8[8]) | ((*(_QWORD *)(v13 + 8 * v7.u8[5]) | *(_QWORD *)(v12 + 8 * v7.u8[9]) | *(_QWORD *)(v14 + 8 * v7.u8[1])) << 24) | *(_QWORD *)(v13 + 8 * v7.u8[4]) | *(_QWORD *)(v14 + 8 * v7.u8[0]);
        v17 = &v1[1].i8[8];
        v18 = (_QWORD *)v1[1].i64[1];
        do
        {
          v19 = v18[4];
          v20 = v19 >= v16;
          if (v19 >= v16)
            v21 = v18;
          else
            v21 = v18 + 1;
          if (v20)
            v17 = (__int8 *)v18;
          v18 = (_QWORD *)*v21;
        }
        while (*v21);
        if (v17 == v4 || v16 < *((_QWORD *)v17 + 4))
          goto LABEL_18;
        v23 = *((_QWORD *)v17 + 5);
        if (*(_BYTE *)(v23 + 192))
        {
          v9 = 0;
        }
        else
        {
          if ((v9 & 1) != 0)
          {
            *(float *)(v23 + 116) = -*(float *)(v23 + 116);
            *(_DWORD *)(v23 + 196) = -*(_DWORD *)(v23 + 196);
            v9 = 1;
LABEL_18:
            v15 = v6;
            goto LABEL_19;
          }
          v24 = 3;
          while (1)
          {
            v25 = vaddq_s32(*(int32x4_t *)(result + 16 * v24 + 896), v7);
            if ((v25.i32[0] & 0x80000000) == 0 && (v25.i32[1] & 0x80000000) == 0 && (v25.i32[2] & 0x80000000) == 0)
            {
              v26 = v25.i32[0] < v1[18].i32[0] && v25.i32[1] < v1[18].i32[1];
              if (v26 && v25.i32[2] < v8)
              {
                v28 = *(_QWORD *)(v12 + 8 * v25.u8[8]) | ((*(_QWORD *)(v13 + 8 * v25.u8[5]) | *(_QWORD *)(v12 + 8 * v25.u8[9]) | *(_QWORD *)(v14 + 8 * v25.u8[1])) << 24) | *(_QWORD *)(v13 + 8 * v25.u8[4]) | *(_QWORD *)(v14 + 8 * v25.u8[0]);
                v29 = &v1[1].i8[8];
                v30 = (_QWORD *)v1[1].i64[1];
                do
                {
                  v31 = v30[4];
                  v32 = v31 >= v28;
                  if (v31 >= v28)
                    v33 = v30;
                  else
                    v33 = v30 + 1;
                  if (v32)
                    v29 = (__int8 *)v30;
                  v30 = (_QWORD *)*v33;
                }
                while (*v33);
                if (v29 != v4 && v28 >= *((_QWORD *)v29 + 4) && *(float *)(*((_QWORD *)v29 + 5) + 116) > 0.0)
                  break;
              }
            }
            v20 = v24 >= 4;
            v24 += 2;
            if (v20)
            {
              v9 = 0;
              if ((int)v6 >= v7.i32[2])
                v15 = v7.u32[2];
              else
                v15 = v6;
              goto LABEL_19;
            }
          }
          *(float *)(v23 + 116) = -*(float *)(v23 + 116);
          *(_DWORD *)(v23 + 196) = -*(_DWORD *)(v23 + 196);
          v34 = v7.i32[2] - 1;
          v35 = v7;
          v35.i32[2] = v7.i32[2] - 1;
          v36 = v7.i32[3];
          if (v7.i32[2] <= (int)v6)
          {
LABEL_69:
            v47 = v36;
          }
          else
          {
            do
            {
              v37 = v7.i16[2];
              v38 = v7.i16[0];
              v7 = v35;
              v39 = *(_QWORD *)(v12 + 8 * v34) | ((*(_QWORD *)(v13 + 8 * HIBYTE(v37)) | *(_QWORD *)(v12 + 8 * BYTE1(v34)) | *(_QWORD *)(v14 + 8 * HIBYTE(v38))) << 24) | *(_QWORD *)(v13 + 8 * v37) | *(_QWORD *)(v14 + 8 * v38);
              v40 = &v1[1].i8[8];
              v41 = v11;
              do
              {
                v42 = v41[4];
                v43 = v42 >= v39;
                if (v42 >= v39)
                  v44 = v41;
                else
                  v44 = v41 + 1;
                if (v43)
                  v40 = (__int8 *)v41;
                v41 = (_QWORD *)*v44;
              }
              while (*v44);
              if (v40 != v4 && v39 >= *((_QWORD *)v40 + 4))
              {
                v45 = *((_QWORD *)v40 + 5);
                if (*(_BYTE *)(v45 + 192))
                  goto LABEL_69;
                v46 = *(float *)(v45 + 116);
                if (v46 < 0.0)
                {
                  *(float *)(v45 + 116) = -v46;
                  *(_DWORD *)(v45 + 196) = -*(_DWORD *)(v45 + 196);
                }
              }
              v35 = v7;
              v35.i32[2] = v34 - 1;
              v47 = v36;
              v26 = v34-- <= (int)v6;
            }
            while (!v26);
          }
          v35.i64[1] = __PAIR64__(v47, v10);
          v9 = 1;
          v7 = v35;
        }
LABEL_19:
        v22.i64[0] = v7.i64[0];
        v22.i32[2] = v10 + 1;
        v22.i32[3] = v7.i32[3];
        v8 = v1[18].i32[2];
        v6 = v15;
        v7 = v22;
      }
      v48 = v7.i32[1];
      v49.i64[0] = v7.i64[0] + 0x100000000;
      v49.i64[1] = v7.i64[1];
      v7 = v49;
    }
    while (v48 < v1[18].i32[1]);
    v2 = v1[18];
LABEL_73:
    ++v3;
    v5.i32[1] = v2.i32[1];
    v5.i32[0] = vextq_s8(v2, v2, 8uLL).u32[0];
  }
  while (v3 < v2.i32[0]);
  return result;
}

void sub_1DCAE2300(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  BOOL v15;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  int32x4_t v23;

  v23.i32[2] = 0;
  v23.i64[0] = 0;
  v1 = *(_QWORD **)(*(_QWORD *)(a1 + 1312) + 224);
  if (v1)
  {
    v2 = a1;
    do
    {
      v3 = *(_QWORD *)(v2 + 1312);
      v4 = (_QWORD *)(v3 + 24);
      v5 = *(_QWORD **)(v3 + 24);
      if (v5)
      {
        v6 = v1[2];
        v7 = (_QWORD *)(v3 + 24);
        v8 = *(_QWORD **)(v3 + 24);
        do
        {
          v9 = v8[4];
          v10 = v9 >= v6;
          if (v9 >= v6)
            v11 = v8;
          else
            v11 = v8 + 1;
          if (v10)
            v7 = v8;
          v8 = (_QWORD *)*v11;
        }
        while (*v11);
        if (v7 != v4 && v6 >= v7[4])
        {
          v12 = v7[5];
          if (*(float *)(v12 + 116) < 0.0)
          {
            sub_1DCAE1334(a1, *(_QWORD *)(v12 + 8), (__n64 *)&v23);
            v13 = 0;
            while (1)
            {
              v14 = vaddq_s32(*(int32x4_t *)(v2 + 16 * v13 + 896), v23);
              if ((v14.i32[0] & 0x80000000) == 0 && (v14.i32[1] & 0x80000000) == 0 && (v14.i32[2] & 0x80000000) == 0)
              {
                v15 = v14.i32[0] < *(_DWORD *)(v3 + 288) && v14.i32[1] < *(_DWORD *)(v3 + 292);
                if (v15 && v14.i32[2] < *(_DWORD *)(v3 + 296))
                {
                  v17 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 8 * v14.u8[8]) | ((*(_QWORD *)(*(_QWORD *)(v3 + 120)
                                                                                           + 8 * v14.u8[5]) | *(_QWORD *)(*(_QWORD *)(v3 + 144) + 8 * v14.u8[9]) | *(_QWORD *)(*(_QWORD *)(v3 + 96) + 8 * v14.u8[1])) << 24) | *(_QWORD *)(*(_QWORD *)(v3 + 120) + 8 * v14.u8[4]) | *(_QWORD *)(*(_QWORD *)(v3 + 96) + 8 * v14.u8[0]);
                  v18 = (_QWORD *)(v3 + 24);
                  v19 = v5;
                  do
                  {
                    v20 = v19[4];
                    v21 = v20 >= v17;
                    if (v20 >= v17)
                      v22 = v19;
                    else
                      v22 = v19 + 1;
                    if (v21)
                      v18 = v19;
                    v19 = (_QWORD *)*v22;
                  }
                  while (*v22);
                  if (v18 != v4 && v17 >= v18[4] && *(float *)(v18[5] + 116) > 0.0)
                    break;
                }
              }
              if (++v13 == 6)
                goto LABEL_39;
            }
            a1 = sub_1DCAE24B8(v2, v12);
          }
        }
      }
LABEL_39:
      v1 = (_QWORD *)*v1;
    }
    while (v1);
  }
}

uint64_t sub_1DCAE24B8(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  int32x4_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *v26;
  uint64_t v27;
  float v28;
  int v29;
  int32x4_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int32x4_t v36;
  unint64_t v37;
  unint64_t v38;

  v37 = 0;
  v38 = 0;
  *(uint64_t *)((char *)v36.i64 + 4) = 0;
  v36.i32[0] = 0;
  v33 = 0u;
  v34 = 0u;
  v35 = 1065353216;
  sub_1DCAE6F68((uint64_t)&v33, (unint64_t *)(a2 + 8), (_QWORD *)(a2 + 8));
  while (*((_QWORD *)&v34 + 1))
  {
    v38 = *(_QWORD *)(v34 + 16);
    v3 = sub_1DCAE84F4(&v33, &v38);
    v4 = *(_QWORD *)(a1 + 1312);
    v7 = *(_QWORD **)(v4 + 24);
    v5 = (_QWORD *)(v4 + 24);
    v6 = v7;
    if (v7)
    {
      v8 = v5;
      do
      {
        v9 = v6[4];
        v10 = v9 >= v38;
        if (v9 >= v38)
          v11 = v6;
        else
          v11 = v6 + 1;
        if (v10)
          v8 = v6;
        v6 = (_QWORD *)*v11;
      }
      while (*v11);
      if (v8 != v5 && v38 >= v8[4])
      {
        v12 = v8[5];
        v13 = *(float *)(v12 + 116);
        if (v13 < 0.0)
        {
          *(float *)(v12 + 116) = -v13;
          *(_DWORD *)(v12 + 196) = -*(_DWORD *)(v12 + 196);
          sub_1DCAE1334((uint64_t)v3, *(_QWORD *)(v12 + 8), (__n64 *)&v36);
          v14 = 0;
          v32 = v36;
          do
          {
            v15 = vaddq_s32(*(int32x4_t *)(a1 + 16 * v14 + 896), v32);
            if ((v15.i32[0] & 0x80000000) == 0 && (v15.i32[1] & 0x80000000) == 0 && (v15.i32[2] & 0x80000000) == 0)
            {
              v16 = *(_QWORD *)(a1 + 1312);
              v17 = v15.i32[0] < *(_DWORD *)(v16 + 288) && v15.i32[1] < *(_DWORD *)(v16 + 292);
              if (v17 && v15.i32[2] < *(_DWORD *)(v16 + 296))
              {
                v21 = *(_QWORD **)(v16 + 24);
                v19 = (_QWORD *)(v16 + 24);
                v20 = v21;
                v22 = *(_QWORD *)(v19[15] + 8 * v15.u8[8]) | ((*(_QWORD *)(v19[12] + 8 * v15.u8[5]) | *(_QWORD *)(v19[15] + 8 * v15.u8[9]) | *(_QWORD *)(v19[9] + 8 * v15.u8[1])) << 24) | *(_QWORD *)(v19[12] + 8 * v15.u8[4]) | *(_QWORD *)(v19[9] + 8 * v15.u8[0]);
                v37 = v22;
                if (v21)
                {
                  v23 = v19;
                  do
                  {
                    v24 = v20[4];
                    v25 = v24 >= v22;
                    if (v24 >= v22)
                      v26 = v20;
                    else
                      v26 = v20 + 1;
                    if (v25)
                      v23 = v20;
                    v20 = (_QWORD *)*v26;
                  }
                  while (*v26);
                  if (v23 != v19 && v22 >= v23[4])
                  {
                    v27 = v23[5];
                    v28 = *(float *)(v27 + 116);
                    v29 = *(unsigned __int8 *)(v27 + 192);
                    if (v28 < 0.0 && v29 == 0)
                      sub_1DCAE6F68((uint64_t)&v33, &v37, &v37);
                  }
                }
              }
            }
            ++v14;
          }
          while (v14 != 6);
        }
      }
    }
  }
  return sub_1DCAE6B78((uint64_t)&v33);
}

void sub_1DCAE26CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1DCAE6B78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCAE26E8(uint64_t a1)
{
  _QWORD *i;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;

  for (i = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 1312) + 224); i; i = (_QWORD *)*i)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 1312);
    v6 = *(_QWORD **)(v3 + 24);
    v4 = (_QWORD *)(v3 + 24);
    v5 = v6;
    if (v6)
    {
      v7 = i[2];
      v8 = v4;
      do
      {
        v9 = v5[4];
        v10 = v9 >= v7;
        if (v9 >= v7)
          v11 = v5;
        else
          v11 = v5 + 1;
        if (v10)
          v8 = v5;
        v5 = (_QWORD *)*v11;
      }
      while (*v11);
      if (v8 != v4 && v7 >= v8[4])
        sub_1DCAE14EC(*(float32x4_t **)a1, v8[5], *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 1312) + 424));
    }
  }
}

uint64_t sub_1DCAE2784(uint64_t a1)
{
  sub_1DCAE187C(*(_QWORD **)(a1 + 80));
  sub_1DCAE1F44(*(_QWORD *)(a1 + 80));
  sub_1DCAE2300(*(_QWORD *)(a1 + 80));
  sub_1DCAE1C90(*(_QWORD *)(a1 + 80));
  sub_1DCAE27D0(*(_QWORD **)(a1 + 80), (float32x4_t **)a1);
  return sub_1DCAE2A24(*(_QWORD **)(a1 + 80));
}

uint64_t sub_1DCAE27D0(_QWORD *a1, float32x4_t **a2)
{
  _QWORD *v2;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  float32x4_t *v14;
  uint64_t v15;
  int32x4_t v16;
  BOOL v17;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *i;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int32x4_t v32;

  v32.i32[2] = 0;
  v32.i64[0] = 0;
  v29 = 0u;
  v30 = 0u;
  v31 = 1065353216;
  v2 = *(_QWORD **)(a1[164] + 184);
  if (v2)
  {
    v4 = a1;
    do
    {
      v5 = v2[2];
      v28 = v5;
      v6 = v4[164];
      v7 = (uint64_t *)(v6 + 24);
      v8 = *(_QWORD **)(v6 + 24);
      if (v8)
      {
        v9 = (uint64_t *)(v6 + 24);
        v10 = *(_QWORD **)(v6 + 24);
        do
        {
          v11 = v10[4];
          v12 = v11 >= v5;
          if (v11 >= v5)
            v13 = v10;
          else
            v13 = v10 + 1;
          if (v12)
            v9 = v10;
          v10 = (_QWORD *)*v13;
        }
        while (*v13);
        if (v9 != v7 && v5 >= v9[4])
        {
          v14 = (float32x4_t *)v9[5];
          if (v14[7].f32[1] <= 0.0)
          {
            sub_1DCAE1334((uint64_t)a1, v14->u64[1], (__n64 *)&v32);
            v15 = 0;
            while (1)
            {
              v16 = vaddq_s32(*(int32x4_t *)&v4[2 * v15 + 112], v32);
              if ((v16.i32[0] & 0x80000000) == 0 && (v16.i32[1] & 0x80000000) == 0 && (v16.i32[2] & 0x80000000) == 0)
              {
                v17 = v16.i32[0] < *(_DWORD *)(v6 + 288) && v16.i32[1] < *(_DWORD *)(v6 + 292);
                if (v17 && v16.i32[2] < *(_DWORD *)(v6 + 296))
                {
                  v19 = *(_QWORD *)(*(_QWORD *)(v6 + 144) + 8 * v16.u8[8]) | ((*(_QWORD *)(*(_QWORD *)(v6 + 120)
                                                                                           + 8 * v16.u8[5]) | *(_QWORD *)(*(_QWORD *)(v6 + 144) + 8 * v16.u8[9]) | *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8 * v16.u8[1])) << 24) | *(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v16.u8[4]) | *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8 * v16.u8[0]);
                  v20 = (uint64_t *)(v6 + 24);
                  v21 = v8;
                  do
                  {
                    v22 = v21[4];
                    v23 = v22 >= v19;
                    if (v22 >= v19)
                      v24 = v21;
                    else
                      v24 = v21 + 1;
                    if (v23)
                      v20 = v21;
                    v21 = (_QWORD *)*v24;
                  }
                  while (*v24);
                  if (v20 != v7 && v19 >= v20[4] && *(float *)(v20[5] + 116) > 0.0)
                    break;
                }
              }
              if (++v15 == 26)
              {
                sub_1DCAE1784(*a2, v14, *(_DWORD *)(v6 + 424));
                sub_1DCAE85A0((uint64_t **)(v4[164] + 16), v9);
                operator delete(v9);
                a1 = sub_1DCAE6F68((uint64_t)&v29, &v28, &v28);
                break;
              }
            }
          }
        }
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
    v25 = *((_QWORD *)&v30 + 1);
    for (i = (_QWORD *)v30; i; i = (_QWORD *)*i)
    {
      v28 = i[2];
      sub_1DCAE84F4((_QWORD *)(v4[164] + 168), &v28);
    }
  }
  else
  {
    v25 = 0;
  }
  sub_1DCAE6B78((uint64_t)&v29);
  return v25;
}

void sub_1DCAE2A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1DCAE6B78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCAE2A24(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  BOOL v15;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *i;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int32x4_t v30;

  v30.i32[2] = 0;
  v30.i64[0] = 0;
  v27 = 0u;
  v28 = 0u;
  v29 = 1065353216;
  v1 = *(_QWORD **)(a1[164] + 224);
  if (v1)
  {
    v2 = a1;
    do
    {
      v3 = v1[2];
      v26 = v3;
      v4 = v2[164];
      v5 = (uint64_t *)(v4 + 24);
      v6 = *(_QWORD **)(v4 + 24);
      if (v6)
      {
        v7 = (uint64_t *)(v4 + 24);
        v8 = *(_QWORD **)(v4 + 24);
        do
        {
          v9 = v8[4];
          v10 = v9 >= v3;
          if (v9 >= v3)
            v11 = v8;
          else
            v11 = v8 + 1;
          if (v10)
            v7 = v8;
          v8 = (_QWORD *)*v11;
        }
        while (*v11);
        if (v7 != v5 && v3 >= v7[4])
        {
          v12 = v7[5];
          if (*(float *)(v12 + 116) <= 0.0)
          {
            sub_1DCAE1334((uint64_t)a1, *(_QWORD *)(v12 + 8), (__n64 *)&v30);
            v13 = 0;
            while (1)
            {
              v14 = vaddq_s32(*(int32x4_t *)&v2[2 * v13 + 112], v30);
              if ((v14.i32[0] & 0x80000000) == 0 && (v14.i32[1] & 0x80000000) == 0 && (v14.i32[2] & 0x80000000) == 0)
              {
                v15 = v14.i32[0] < *(_DWORD *)(v4 + 288) && v14.i32[1] < *(_DWORD *)(v4 + 292);
                if (v15 && v14.i32[2] < *(_DWORD *)(v4 + 296))
                {
                  v17 = *(_QWORD *)(*(_QWORD *)(v4 + 144) + 8 * v14.u8[8]) | ((*(_QWORD *)(*(_QWORD *)(v4 + 120)
                                                                                           + 8 * v14.u8[5]) | *(_QWORD *)(*(_QWORD *)(v4 + 144) + 8 * v14.u8[9]) | *(_QWORD *)(*(_QWORD *)(v4 + 96) + 8 * v14.u8[1])) << 24) | *(_QWORD *)(*(_QWORD *)(v4 + 120) + 8 * v14.u8[4]) | *(_QWORD *)(*(_QWORD *)(v4 + 96) + 8 * v14.u8[0]);
                  v18 = (uint64_t *)(v4 + 24);
                  v19 = v6;
                  do
                  {
                    v20 = v19[4];
                    v21 = v20 >= v17;
                    if (v20 >= v17)
                      v22 = v19;
                    else
                      v22 = v19 + 1;
                    if (v21)
                      v18 = v19;
                    v19 = (_QWORD *)*v22;
                  }
                  while (*v22);
                  if (v18 != v5 && v17 >= v18[4] && *(_BYTE *)(v18[5] + 192))
                    break;
                }
              }
              if (++v13 == 26)
              {
                sub_1DCAE85A0((uint64_t **)(v4 + 16), v7);
                operator delete(v7);
                a1 = sub_1DCAE6F68((uint64_t)&v27, &v26, &v26);
                break;
              }
            }
          }
        }
      }
      v1 = (_QWORD *)*v1;
    }
    while (v1);
    v23 = *((_QWORD *)&v28 + 1);
    for (i = (_QWORD *)v28; i; i = (_QWORD *)*i)
    {
      v26 = i[2];
      sub_1DCAE84F4((_QWORD *)(v2[164] + 208), &v26);
    }
  }
  else
  {
    v23 = 0;
  }
  sub_1DCAE6B78((uint64_t)&v27);
  return v23;
}

void sub_1DCAE2C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1DCAE6B78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCAE2C60(uint64_t result, float a2, float a3)
{
  uint64_t v4;
  float v5;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  float v12;
  float v13;
  unsigned int v14;
  int v15;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int32x4_t v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x4_t *v41;
  float v42;
  float32x4_t v43;
  BOOL v44;
  float32x4_t *v46;
  unint64_t v47;
  float32x4_t *v48;
  unint64_t v49;
  BOOL v50;
  float32x4_t **v51;
  float v52;
  float32x4_t v53;
  float v54;
  float32x4_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  float v60;
  float v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  int32x2_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int v68;
  int v69;
  uint64_t **v70;
  int v71;
  int32x4_t v72;
  __int128 v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int32x4_t v77;
  float v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  int32x4_t v88;
  unint64_t v89;
  float32x4_t v90[2];

  v4 = *(_QWORD *)(*(_QWORD *)(result + 80) + 1312);
  v5 = *(float *)(v4 + 248) + *(float *)(v4 + 248);
  if (v5 < a2 || v5 < a3)
  {
    v8 = result;
    v89 = 0;
    *(uint64_t *)((char *)v88.i64 + 4) = 0;
    v88.i32[0] = 0;
    v87 = 0;
    v85 = 0u;
    v86 = 0u;
    v9 = sub_1DCAE7E18((uint64_t)&v85, v4 + 208);
    v82 = 0u;
    v83 = 0u;
    v84 = 1065353216;
    if (!*((_QWORD *)&v86 + 1))
    {
LABEL_84:
      sub_1DCAE6B78((uint64_t)&v82);
      return sub_1DCAE6B78((uint64_t)&v85);
    }
    v10 = 0;
    if (a2 >= a3)
      v11 = a2;
    else
      v11 = a3;
    v12 = ceilf((float)(v11 - v5) / *(float *)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + 1312) + 248));
    v13 = v12 + v12;
    v14 = v13;
    if (v13 <= 1)
      v14 = 1;
    v15 = v14 - 1;
    if (v13 >= 4295000000.0)
      v15 = -2;
    v71 = v15;
    __asm
    {
      FMOV            V1.4S, #1.0
      FMOV            V0.4S, #-1.0
    }
    v73 = _Q0;
    v74 = _Q1;
    v72 = vdupq_n_s32(0x7FC00000u);
    while (1)
    {
      v20 = (_QWORD *)v86;
      if ((_QWORD)v86)
        break;
LABEL_82:
      if (v10 != v71)
      {
        LODWORD(v87) = v84;
        sub_1DCAE7E8C(&v85, (_QWORD *)v83, 0);
        ++v10;
        v9 = (uint64_t)sub_1DCAE8490(&v82);
        if (*((_QWORD *)&v86 + 1))
          continue;
      }
      goto LABEL_84;
    }
    while (1)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v8 + 80) + 1312);
      v24 = *(_QWORD **)(v21 + 24);
      v22 = (_QWORD *)(v21 + 24);
      v23 = v24;
      if (v24)
      {
        v25 = v20[2];
        v26 = v22;
        do
        {
          v27 = v23[4];
          _CF = v27 >= v25;
          if (v27 >= v25)
            v29 = v23;
          else
            v29 = v23 + 1;
          if (_CF)
            v26 = v23;
          v23 = (_QWORD *)*v29;
        }
        while (*v29);
        if (v26 != v22 && v25 >= v26[4])
          break;
      }
LABEL_81:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_82;
    }
    sub_1DCAE1334(v9, *(_QWORD *)(v26[5] + 8), (__n64 *)&v88);
    v30 = 0;
    while (1)
    {
      v31 = *(_QWORD *)(v8 + 80);
      v32 = vaddq_s32(*(int32x4_t *)(v31 + 16 * v30 + 896), v88);
      if (v32.i32[0] < 0)
        goto LABEL_80;
      if (v32.i32[1] < 0)
        goto LABEL_80;
      v33 = v32.i32[2];
      if (v32.i32[2] < 0)
        goto LABEL_80;
      v34 = *(_QWORD *)(v31 + 1312);
      v35 = v32.i32[0] < *(_DWORD *)(v34 + 288) && v32.i32[1] < *(_DWORD *)(v34 + 292);
      if (!v35 || v32.i32[2] >= *(_DWORD *)(v34 + 296))
        goto LABEL_80;
      v89 = *(_QWORD *)(*(_QWORD *)(v34 + 144) + 8 * v32.u8[8]) | ((*(_QWORD *)(*(_QWORD *)(v34 + 120)
                                                                                + 8 * v32.u8[5]) | *(_QWORD *)(*(_QWORD *)(v34 + 144) + 8 * v32.u8[9]) | *(_QWORD *)(*(_QWORD *)(v34 + 96) + 8 * v32.u8[1])) << 24) | *(_QWORD *)(*(_QWORD *)(v34 + 120) + 8 * v32.u8[4]) | *(_QWORD *)(*(_QWORD *)(v34 + 96) + 8 * v32.u8[0]);
      v77 = v32;
      v37 = (unint64_t)sub_1DCAE745C((_QWORD *)(v34 + 168), &v89);
      v9 = (uint64_t)sub_1DCAE745C((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + 1312) + 208), &v89);
      if (v37 | v9)
        goto LABEL_80;
      v38 = 0;
      v39 = 0;
      v40 = *(_QWORD *)(v8 + 80);
      v41 = *(float32x4_t **)(v40 + 1312);
      v42 = 3.4028e38;
      do
      {
        v43 = (float32x4_t)vaddq_s32(*(int32x4_t *)(v40 + 16 * v38 + 896), v77);
        if ((v43.i32[0] & 0x80000000) == 0 && (v43.i32[1] & 0x80000000) == 0 && (v43.i32[2] & 0x80000000) == 0)
        {
          v44 = v43.i32[0] < v41[18].i32[0] && v43.i32[1] < v41[18].i32[1];
          if (v44 && v43.i32[2] < v41[18].i32[2])
          {
            v46 = (float32x4_t *)v41[1].i64[1];
            if (v46)
            {
              v9 = v41[6].i64[0];
              v47 = *(_QWORD *)(v41[9].i64[0] + 8 * v43.u8[8]) | ((*(_QWORD *)(v41[7].i64[1] + 8 * v43.u8[5]) | *(_QWORD *)(v41[9].i64[0] + 8 * v43.u8[9]) | *(_QWORD *)(v9 + 8 * v43.u8[1])) << 24) | *(_QWORD *)(v41[7].i64[1] + 8 * v43.u8[4]) | *(_QWORD *)(v9 + 8 * v43.u8[0]);
              v48 = (float32x4_t *)((char *)v41 + 24);
              do
              {
                v49 = v46[2].u64[0];
                v50 = v49 >= v47;
                if (v49 >= v47)
                  v51 = (float32x4_t **)v46;
                else
                  v51 = (float32x4_t **)&v46->i64[1];
                if (v50)
                  v48 = v46;
                v46 = *v51;
              }
              while (*v51);
              if (v48 != (float32x4_t *)&v41[1].u32[2] && v47 >= v48[2].i64[0])
              {
                v52 = fabsf(*(float *)(v48[2].i64[1] + 116));
                if (v52 < v42)
                {
                  v42 = v52;
                  v39 = v48[2].i64[1];
                }
              }
            }
          }
        }
        ++v38;
      }
      while (v38 != 18);
      if (!v39)
        goto LABEL_80;
      *(float32x2_t *)v43.f32 = vcvt_f32_s32(*(int32x2_t *)v77.i8);
      v43.f32[2] = (float)v33;
      v53 = vaddq_f32(v43, v74);
      v54 = v41[15].f32[2];
      v55 = vmlaq_n_f32(v41[17], v53, v54);
      v53.f32[0] = v54 * 0.5;
      v76 = vsubq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0));
      v78 = v54;
      v90[0] = v76;
      v56 = (float32x4_t *)(v41[2].i64[1] + 224 * *(int *)(v39 + 144));
      v81 = v56[1];
      v80 = v56[3];
      v79 = v56[2];
      *(double *)v57.i64 = sub_1DCADF674(&v81, &v80, &v79, v90);
      v75 = v57;
      v58 = vsubq_f32(v76, v57);
      v59 = (int32x4_t)vmulq_f32(v58, v58);
      v60 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.i8, 1)), (float32x4_t)vdupq_laneq_s32(v59, 2)).f32[0]);
      if (v60 <= v42)
        v61 = v78 + v42;
      else
        v61 = v60;
      v62 = *(float *)(v39 + 116);
      if (v62 >= 0.0)
      {
        if (v5 < a3 && v61 < a3)
          goto LABEL_76;
      }
      else if (v5 < a2 && v61 < a2)
      {
        v61 = -v61;
LABEL_76:
        v63 = operator new();
        *(_BYTE *)(v63 + 112) = 0;
        *(_OWORD *)(v63 + 168) = 0u;
        *(_OWORD *)(v63 + 152) = 0u;
        *(_QWORD *)v63 = 0;
        *(_QWORD *)(v63 + 8) = 0;
        *(_DWORD *)(v63 + 184) = 1065353216;
        *(_OWORD *)(v63 + 48) = 0u;
        *(_OWORD *)(v63 + 64) = 0u;
        *(_OWORD *)(v63 + 80) = 0u;
        *(_OWORD *)(v63 + 96) = 0u;
        *(_OWORD *)(v63 + 16) = v73;
        *(_OWORD *)(v63 + 32) = 0u;
        *(_BYTE *)(v63 + 192) = 0;
        *(_DWORD *)(v63 + 144) = *(_DWORD *)(v39 + 144);
        sub_1DCAE7240(v63 + 152, (int *)(v39 + 144), (_DWORD *)(v39 + 144));
        v64 = *(_QWORD *)(v8 + 80);
        *(float *)v65.i32 = *(float *)(*(_QWORD *)(v64 + 1312) + 248) * 0.5;
        v66 = (float32x4_t)vdupq_lane_s32(v65, 0);
        v67 = vsubq_f32(v90[0], v66);
        *(float32x4_t *)(v63 + 16) = vaddq_f32(v66, v90[0]);
        *(float32x4_t *)(v63 + 32) = v67;
        *(float32x4_t *)(v63 + 128) = v75;
        *(float *)(v63 + 116) = v61;
        *(_QWORD *)(v63 + 8) = v89;
        *(_WORD *)(v63 + 200) = 0;
        *(int32x4_t *)(v63 + 208) = v72;
        *(_WORD *)(v63 + 224) = 0;
        *(int32x4_t *)(v63 + 240) = v72;
        *(_QWORD *)(v63 + 256) = -1;
        v68 = *(_DWORD *)(v39 + 196);
        if (v62 >= 0.0)
          v69 = v68 + 1;
        else
          v69 = v68 - 1;
        *(_DWORD *)(v63 + 196) = v69;
        sub_1DCAE6F68(*(_QWORD *)(v64 + 1312) + 208, &v89, &v89);
        v70 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + 1312) + 16);
        v81.i64[0] = (uint64_t)&v89;
        sub_1DCAE7184(v70, &v89, (uint64_t)&unk_1DCC58300, (uint64_t **)&v81)[5] = v63;
        v9 = (uint64_t)sub_1DCAE6F68((uint64_t)&v82, &v89, &v89);
      }
LABEL_80:
      if (++v30 == 26)
        goto LABEL_81;
    }
  }
  return result;
}

void sub_1DCAE3234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_1DCAE6B78((uint64_t)&a29);
  sub_1DCAE6B78((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCAE3254(float32x4_t **a1, float a2, float a3)
{
  float32x4_t **v5;
  _QWORD *v6;
  unint64_t v7;
  float32x4_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  int32x4_t v21;
  BOOL v22;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t v30;
  int32x4_t v31;
  BOOL v32;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  BOOL v38;
  _QWORD *v39;
  float v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *i;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  BOOL v51;
  _QWORD *v52;
  uint64_t v53;
  float32x4_t *v54;
  int32x4_t v55;
  uint64_t v56;
  BOOL v57;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  BOOL v65;
  _QWORD *v66;
  uint64_t v68;
  float v69;
  float v70;
  BOOL v71;
  _QWORD *j;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  BOOL v80;
  _QWORD *v81;
  int32x4_t v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  int32x4_t v94;
  unint64_t v95;

  v5 = a1;
  v95 = 0;
  *(uint64_t *)((char *)v94.i64 + 4) = 0;
  v94.i32[0] = 0;
  v91 = 0u;
  v92 = 0u;
  v93 = 1065353216;
  v88 = 0u;
  v89 = 0u;
  v90 = 1065353216;
  v85 = 0u;
  v86 = 0u;
  v87 = 1065353216;
  v6 = *(_QWORD **)(a1[10][82].i64[0] + 224);
  if (!v6)
  {
    v41 = 0;
    v40 = 1.0;
    goto LABEL_69;
  }
  do
  {
    v7 = v6[2];
    v84 = v7;
    v8 = v5[10];
    v9 = v8[82].i64[0];
    v10 = (_QWORD *)(v9 + 24);
    v11 = *(_QWORD **)(v9 + 24);
    if (v11)
    {
      v12 = (_QWORD *)(v9 + 24);
      v13 = *(_QWORD **)(v9 + 24);
      do
      {
        v14 = v13[4];
        v15 = v14 >= v7;
        if (v14 >= v7)
          v16 = v13;
        else
          v16 = v13 + 1;
        if (v15)
          v12 = v13;
        v13 = (_QWORD *)*v16;
      }
      while (*v16);
      if (v12 != v10 && v7 >= v12[4])
      {
        v17 = v12[5];
        if (!*(_BYTE *)(v17 + 201))
        {
          v18 = *(float *)(v17 + 116);
          sub_1DCAE1334((uint64_t)a1, *(_QWORD *)(v17 + 8), (__n64 *)&v94);
          v19 = fabsf(v18);
          if (v18 >= 0.0)
          {
            if (v19 <= a3)
              goto LABEL_14;
            v30 = 0;
            while (1)
            {
              v31 = vaddq_s32((int32x4_t)v8[v30 + 56], v94);
              if (v31.i32[0] < 0 || v31.i32[1] < 0 || v31.i32[2] < 0)
                break;
              v32 = v31.i32[0] < *(_DWORD *)(v9 + 288) && v31.i32[1] < *(_DWORD *)(v9 + 292);
              if (!v32 || v31.i32[2] >= *(_DWORD *)(v9 + 296))
                break;
              v34 = *(_QWORD *)(*(_QWORD *)(v9 + 144) + 8 * v31.u8[8]) | ((*(_QWORD *)(*(_QWORD *)(v9 + 120)
                                                                                       + 8 * v31.u8[5]) | *(_QWORD *)(*(_QWORD *)(v9 + 144) + 8 * v31.u8[9]) | *(_QWORD *)(*(_QWORD *)(v9 + 96) + 8 * v31.u8[1])) << 24) | *(_QWORD *)(*(_QWORD *)(v9 + 120) + 8 * v31.u8[4]) | *(_QWORD *)(*(_QWORD *)(v9 + 96) + 8 * v31.u8[0]);
              v95 = v34;
              v35 = (_QWORD *)(v9 + 24);
              v36 = v11;
              do
              {
                v37 = v36[4];
                v38 = v37 >= v34;
                if (v37 >= v34)
                  v39 = v36;
                else
                  v39 = v36 + 1;
                if (v38)
                  v35 = v36;
                v36 = (_QWORD *)*v39;
              }
              while (*v39);
              if (v35 == v10 || v34 < v35[4])
                break;
              if (++v30 == 26)
                goto LABEL_14;
            }
          }
          else
          {
            if (v19 <= a2)
              goto LABEL_14;
            v20 = 0;
            while (1)
            {
              v21 = vaddq_s32((int32x4_t)v8[v20 + 56], v94);
              if (v21.i32[0] < 0 || v21.i32[1] < 0 || v21.i32[2] < 0)
                break;
              v22 = v21.i32[0] < *(_DWORD *)(v9 + 288) && v21.i32[1] < *(_DWORD *)(v9 + 292);
              if (!v22 || v21.i32[2] >= *(_DWORD *)(v9 + 296))
                break;
              v24 = *(_QWORD *)(*(_QWORD *)(v9 + 144) + 8 * v21.u8[8]) | ((*(_QWORD *)(*(_QWORD *)(v9 + 120)
                                                                                       + 8 * v21.u8[5]) | *(_QWORD *)(*(_QWORD *)(v9 + 144) + 8 * v21.u8[9]) | *(_QWORD *)(*(_QWORD *)(v9 + 96) + 8 * v21.u8[1])) << 24) | *(_QWORD *)(*(_QWORD *)(v9 + 120) + 8 * v21.u8[4]) | *(_QWORD *)(*(_QWORD *)(v9 + 96) + 8 * v21.u8[0]);
              v95 = v24;
              v25 = (_QWORD *)(v9 + 24);
              v26 = v11;
              do
              {
                v27 = v26[4];
                v28 = v27 >= v24;
                if (v27 >= v24)
                  v29 = v26;
                else
                  v29 = v26 + 1;
                if (v28)
                  v25 = v26;
                v26 = (_QWORD *)*v29;
              }
              while (*v29);
              if (v25 == v10 || v24 < v25[4])
                break;
              if (++v20 == 26)
                goto LABEL_14;
            }
          }
          a1 = (float32x4_t **)sub_1DCAE6F68((uint64_t)&v85, &v84, &v84);
        }
      }
    }
LABEL_14:
    v6 = (_QWORD *)*v6;
  }
  while (v6);
  v40 = *(float *)&v87;
  v41 = (_QWORD *)v86;
LABEL_69:
  *(float *)&v93 = v40;
  sub_1DCAE7E8C(&v91, v41, 0);
  while (*((_QWORD *)&v92 + 1))
  {
    for (i = (_QWORD *)v92; i; i = (_QWORD *)*i)
    {
      v44 = v5[10][82].i64[0];
      v47 = *(_QWORD **)(v44 + 24);
      v45 = (_QWORD *)(v44 + 24);
      v46 = v47;
      if (v47)
      {
        v48 = i[2];
        v49 = v45;
        do
        {
          v50 = v46[4];
          v51 = v50 >= v48;
          if (v50 >= v48)
            v52 = v46;
          else
            v52 = v46 + 1;
          if (v51)
            v49 = v46;
          v46 = (_QWORD *)*v52;
        }
        while (*v52);
        if (v49 != v45 && v48 >= v49[4])
        {
          sub_1DCAE1334((uint64_t)v42, *(_QWORD *)(v49[5] + 8), (__n64 *)&v94);
          v53 = 0;
          v83 = v94;
          do
          {
            v54 = v5[10];
            v55 = vaddq_s32((int32x4_t)v54[v53 + 56], v83);
            if ((v55.i32[0] & 0x80000000) == 0 && (v55.i32[1] & 0x80000000) == 0 && (v55.i32[2] & 0x80000000) == 0)
            {
              v56 = v54[82].i64[0];
              v57 = v55.i32[0] < *(_DWORD *)(v56 + 288) && v55.i32[1] < *(_DWORD *)(v56 + 292);
              if (v57 && v55.i32[2] < *(_DWORD *)(v56 + 296))
              {
                v61 = *(_QWORD **)(v56 + 24);
                v59 = (_QWORD *)(v56 + 24);
                v60 = v61;
                v62 = *(_QWORD *)(v59[15] + 8 * v55.u8[8]) | ((*(_QWORD *)(v59[12] + 8 * v55.u8[5]) | *(_QWORD *)(v59[15] + 8 * v55.u8[9]) | *(_QWORD *)(v59[9] + 8 * v55.u8[1])) << 24) | *(_QWORD *)(v59[12] + 8 * v55.u8[4]) | *(_QWORD *)(v59[9] + 8 * v55.u8[0]);
                v95 = v62;
                if (!v61)
                  goto LABEL_106;
                v63 = v59;
                do
                {
                  v64 = v60[4];
                  v65 = v64 >= v62;
                  if (v64 >= v62)
                    v66 = v60;
                  else
                    v66 = v60 + 1;
                  if (v65)
                    v63 = v60;
                  v60 = (_QWORD *)*v66;
                }
                while (*v66);
                if (v63 == v59 || v62 < v63[4])
LABEL_106:
                  v63 = v59;
                v42 = sub_1DCAE745C(&v85, &v95);
                if (v63 != (_QWORD *)(v5[10][82].i64[0] + 24) && v42 == 0)
                {
                  v68 = v63[5];
                  if (!*(_BYTE *)(v68 + 201) && !*(_BYTE *)(v68 + 192))
                  {
                    v69 = *(float *)(v68 + 116);
                    v70 = fabsf(v69);
                    v71 = v70 <= a2;
                    if (v69 >= 0.0)
                      v71 = v70 <= a3;
                    if (!v71)
                    {
                      sub_1DCAE6F68((uint64_t)&v88, &v95, &v95);
                      v42 = sub_1DCAE6F68((uint64_t)&v85, &v95, &v95);
                    }
                  }
                }
              }
            }
            ++v53;
          }
          while (v53 != 26);
        }
      }
    }
    LODWORD(v93) = v90;
    sub_1DCAE7E8C(&v91, (_QWORD *)v89, 0);
    v42 = sub_1DCAE8490(&v88);
  }
  for (j = (_QWORD *)v86; j; j = (_QWORD *)*j)
  {
    v73 = j[2];
    v84 = v73;
    v74 = v5[10][82].i64[0];
    v77 = *(_QWORD **)(v74 + 24);
    v75 = (_QWORD *)(v74 + 24);
    v76 = v77;
    if (v77)
    {
      v78 = v75;
      do
      {
        v79 = v76[4];
        v80 = v79 >= v73;
        if (v79 >= v73)
          v81 = v76;
        else
          v81 = v76 + 1;
        if (v80)
          v78 = v76;
        v76 = (_QWORD *)*v81;
      }
      while (*v81);
      if (v78 != v75 && v73 >= v78[4])
      {
        sub_1DCAE1784(*v5, (float32x4_t *)v78[5], *(_DWORD *)(v5[10][82].i64[0] + 424));
        sub_1DCAE84F4((_QWORD *)(v5[10][82].i64[0] + 208), &v84);
        sub_1DCAE8528(v5[10][82].i64[0] + 16, &v84);
      }
    }
  }
  sub_1DCAE6B78((uint64_t)&v85);
  sub_1DCAE6B78((uint64_t)&v88);
  return sub_1DCAE6B78((uint64_t)&v91);
}

void sub_1DCAE3844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  sub_1DCAE6B78((uint64_t)va);
  sub_1DCAE6B78((uint64_t)va1);
  sub_1DCAE6B78((uint64_t)va2);
  _Unwind_Resume(a1);
}

id sub_1DCAE3878(uint64_t *a1)
{
  MDLMeshBufferAllocatorDefault *v2;
  _BYTE *v3;
  _BYTE *v4;
  id v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  id v10;
  const char *v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  void *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  void *v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  void *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  void *v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  void *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  void *v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  void *v61;
  const char *v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  void *v67;
  const char *v68;
  const char *v69;
  void *v70;
  const char *v71;
  const char *v72;
  id v73;
  const char *v74;
  void *v75;
  const char *v76;
  unsigned __int8 v77;
  void *v78;
  double v79;
  const char *v80;
  uint64_t v81;
  const char *v82;
  void *v83;
  double v84;
  const char *v85;
  uint64_t v86;
  MDLSubmesh *v87;
  const char *v88;
  void *v89;
  _BYTE *v90;
  _BYTE *v91;
  MDLMesh *v92;
  const char *v93;
  void *v94;
  const char *v95;
  void *v96;
  const char *v97;
  double v98;
  const char *v99;
  MDLMaterial *v101;
  void *v102;
  const char *v103;
  void *v104;
  MDLMeshBufferAllocatorDefault *v105;
  void *v106;
  void *v107;
  void *__p;
  _BYTE *v109;
  uint64_t v110;
  void *v111;
  _BYTE *v112;
  uint64_t v113;
  _QWORD v114[2];

  v114[1] = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    sub_1DCAE3FDC(a1[10]);
    v111 = 0;
    v112 = 0;
    v113 = 0;
    __p = 0;
    v109 = 0;
    v110 = 0;
    sub_1DCAE4384(*a1, (char **)&v111);
    sub_1DCAE4800(*a1, (char **)&__p);
    v2 = objc_alloc_init(MDLMeshBufferAllocatorDefault);
    v4 = __p;
    v3 = v109;
    v105 = v2;
    v5 = objc_alloc(MEMORY[0x1E0C99D50]);
    v104 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v5, v6, (uint64_t)__p, v3 - v4, 0);
    v107 = (void *)objc_msgSend_newBufferWithData_type_(v2, v7, (uint64_t)v104, 2);
    if (objc_msgSend_conformsToProtocol_(v107, v8, (uint64_t)&unk_1F03B6D88))
    {
      v10 = v107;
      objc_msgSend_stringByAppendingString_(CFSTR("Mesh"), v11, (uint64_t)CFSTR("-Indices"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setName_(v10, v13, (uint64_t)v12);

    }
    objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x1E0C99D50], v9, (uint64_t)v111, v112 - (_BYTE *)v111, 0);
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)objc_opt_new();
    objc_msgSend_attributes(v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v17, v18, 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v19, v20, (uint64_t)CFSTR("position"));

    objc_msgSend_attributes(v14, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v23, v24, 0);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFormat_(v25, v26, 786435);

    objc_msgSend_attributes(v14, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v29, v30, 0);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOffset_(v31, v32, 0);

    objc_msgSend_attributes(v14, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v35, v36, 0);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBufferIndex_(v37, v38, 0);

    objc_msgSend_attributes(v14, v39, v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v41, v42, 1);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v43, v44, (uint64_t)CFSTR("normal"));

    objc_msgSend_attributes(v14, v45, v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v47, v48, 1);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFormat_(v49, v50, 786435);

    objc_msgSend_attributes(v14, v51, v52);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v53, v54, 1);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOffset_(v55, v56, 12);

    objc_msgSend_attributes(v14, v57, v58);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v59, v60, 1);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBufferIndex_(v61, v62, 0);

    objc_msgSend_layouts(v14, v63, v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v65, v66, 0);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setStride_(v67, v68, 24);

    v70 = (void *)objc_msgSend_newBufferWithData_type_(v2, v69, (uint64_t)v106, 1);
    if (objc_msgSend_conformsToProtocol_(v70, v71, (uint64_t)&unk_1F03B6D88))
    {
      v73 = v70;
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v74, (uint64_t)CFSTR("%@-%@"), CFSTR("Mesh"), CFSTR("position"));
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setName_(v73, v76, (uint64_t)v75);

    }
    v77 = atomic_load((unsigned __int8 *)&qword_1F03B4CC8);
    if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_1F03B4CC8))
    {
      v101 = [MDLMaterial alloc];
      v102 = (void *)objc_opt_new();
      qword_1F03B4CC0 = objc_msgSend_initWithName_scatteringFunction_(v101, v103, (uint64_t)CFSTR("Octree material"), v102);

      __cxa_guard_release(&qword_1F03B4CC8);
    }
    objc_msgSend_propertyWithSemantic_((void *)qword_1F03B4CC0, v72, 2);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v79) = 0;
    objc_msgSend_setFloatValue_(v78, v80, v81, v79);
    objc_msgSend_propertyWithSemantic_((void *)qword_1F03B4CC0, v82, 6);
    v83 = (void *)objc_claimAutoreleasedReturnValue();

    LODWORD(v84) = 1.0;
    objc_msgSend_setFloatValue_(v83, v85, v86, v84);
    v87 = [MDLSubmesh alloc];
    v89 = (void *)objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v87, v88, (uint64_t)v107, (v109 - (_BYTE *)__p) >> 2, 32, 2, qword_1F03B4CC0);
    v91 = v111;
    v90 = v112;
    v92 = [MDLMesh alloc];
    v114[0] = v89;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v93, (uint64_t)v114, 1);
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    v96 = (void *)objc_msgSend_initWithVertexBuffer_vertexCount_descriptor_submeshes_(v92, v95, (uint64_t)v70, ((v90 - v91) >> 2) / 6uLL, v14, v94);

    objc_msgSend_setName_(v96, v97, (uint64_t)CFSTR("Mesh"));
    LODWORD(v98) = 1045220557;
    objc_msgSend_addNormalsWithAttributeNamed_creaseThreshold_(v96, v99, (uint64_t)CFSTR("normal"), v98);

    if (__p)
    {
      v109 = __p;
      operator delete(__p);
    }
    if (v111)
    {
      v112 = v111;
      operator delete(v111);
    }
  }
  else
  {
    v96 = 0;
  }
  return v96;
}

void sub_1DCAE3DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;

  __cxa_guard_abort(&qword_1F03B4CC8);
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void sub_1DCAE3FDC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  float v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x8_t v32;
  int32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int v54;
  int32x4_t v55[12];
  float32x4_t v56[12];
  _OWORD v57[2];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(*(_QWORD *)(a1 + 1312) + 184);
  if (v1)
  {
    __asm { FMOV            V0.4S, #1.0 }
    v50 = _Q0;
    do
    {
      v6 = *(_QWORD *)(a1 + 1312);
      v9 = *(_QWORD **)(v6 + 24);
      v7 = (_QWORD *)(v6 + 24);
      v8 = v9;
      if (v9)
      {
        v10 = v1[2];
        v11 = v7;
        do
        {
          v12 = v8[4];
          _CF = v12 >= v10;
          if (v12 >= v10)
            v14 = v8;
          else
            v14 = v8 + 1;
          if (_CF)
            v11 = v8;
          v8 = (_QWORD *)*v14;
        }
        while (*v14);
        if (v11 != v7 && v10 >= v11[4])
        {
          v15 = v11[5];
          v16 = 0;
          v17 = 0;
          memset(v57, 0, sizeof(v57));
          do
          {
            v18 = sub_1DCAE4944(a1, v15, v16);
            *((float *)v57 + v16) = v18;
            v17 |= (v18 < 0.0) << v16++;
          }
          while (v16 != 8);
          if (v17 && v17 != 255)
          {
            v22 = 0;
            v23 = 0;
            memset(v56, 0, sizeof(v56));
            memset(v55, 0, sizeof(v55));
            v53 = 0uLL;
            v52 = 0u;
            do
            {
              v24 = byte_1DCC57700[v22];
              v25 = byte_1DCC57700[v22 + 1];
              if ((((v17 >> v24) | (v17 >> v25)) & 1) != 0 && (((v17 >> v24) & 1) == 0 || ((v17 >> v25) & 1) == 0))
              {
                v19.i32[0] = 0;
                v27 = *(int32x4_t *)(v15 + 16);
                v26 = *(float32x4_t *)(v15 + 32);
                v28.i64[0] = 0x3F0000003F000000;
                v28.i64[1] = 0x3F0000003F000000;
                v29 = vmulq_f32(vaddq_f32((float32x4_t)v27, v26), v28);
                v30 = (int8x16_t)vsubq_f32((float32x4_t)v27, v26);
                v27.i32[0] = v24 & 4;
                v28.f32[0] = 0.5 * *(float *)v30.i32;
                *(float *)v20.i32 = v29.f32[0] + (float)(0.5 * *(float *)v30.i32);
                v20.i32[1] = v29.i32[1];
                v20.i32[2] = v29.i32[2];
                *(float *)v21.i32 = v29.f32[0] - (float)(0.5 * *(float *)v30.i32);
                v21.i32[1] = v29.i32[1];
                v21.i32[2] = v29.i32[2];
                v31 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v27, v19), 0), v21, v20);
                *(float *)v30.i32 = -(float)(*(float *)v30.i32 * 0.5);
                v32 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 0);
                *(int32x2_t *)v29.f32 = vdup_lane_s32(*(int32x2_t *)v28.f32, 0);
                *(float32x2_t *)v30.i8 = vadd_f32((float32x2_t)vext_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), 4uLL), (float32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v24), (int8x8_t)0x100000002)), v32, *(int8x8_t *)v29.f32));
                v33 = (int32x4_t)vextq_s8(v31, v31, 4uLL);
                v34 = (float32x4_t)vextq_s8((int8x16_t)v33, v30, 0xCuLL);
                v33.i32[0] = v25 & 4;
                v35 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v33, v19), 0), v21, v20);
                *(float32x2_t *)v33.i8 = vadd_f32((float32x2_t)vext_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), 4uLL), (float32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v25), (int8x8_t)0x100000002)), v32, *(int8x8_t *)v29.f32));
                v36 = vmlaq_n_f32(v34, vsubq_f32((float32x4_t)vextq_s8(vextq_s8(v35, v35, 4uLL), (int8x16_t)v33, 0xCuLL), v34), *((float *)v57 + byte_1DCC57700[v22])/ (float)(*((float *)v57 + byte_1DCC57700[v22]) - *((float *)v57 + byte_1DCC57700[v22 + 1])));
                v37 = v36;
                v37.i32[3] = 0;
                v51 = v37;
                v38 = (float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 1312) + 40) + 224 * *(int *)(v15 + 144));
                *(__n64 *)v39.f32 = sub_1DCC0EBBC(v38, v36);
                v40 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38[4], v39.f32[0]), v38[5], *(float32x2_t *)v39.f32, 1), v38[6], v39, 2);
                v41 = (int32x4_t)vmulq_f32(v40, v40);
                v19 = vdupq_laneq_s32(v41, 2);
                v41.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1)), *(float32x2_t *)v19.i8).u32[0];
                *(float32x2_t *)v19.i8 = vrsqrte_f32((float32x2_t)v41.u32[0]);
                v42 = vmulq_n_f32(v40, vmul_f32(vrsqrts_f32((float32x2_t)v41.u32[0], vmul_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8)), *(float32x2_t *)v19.i8).f32[0]);
                v52 = vaddq_f32(v42, v52);
                v42.i32[3] = 0;
                v56[v23] = v51;
                v55[v23++] = (int32x4_t)v42;
              }
              v22 += 2;
            }
            while (v22 != 24);
            *(double *)v43.i64 = sub_1DCAD69D0(v56, v55, v23, &v54, &v53);
            if (v43.f32[0] < *(float *)(v15 + 32)
              || v43.f32[0] > *(float *)(v15 + 16)
              || v43.f32[1] < *(float *)(v15 + 36)
              || v43.f32[1] > *(float *)(v15 + 20)
              || v43.f32[2] < *(float *)(v15 + 40)
              || v43.f32[2] > *(float *)(v15 + 24))
            {
              v49 = vmulq_f32(v53, vdivq_f32(v50, (float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 3)));
              v49.i32[3] = v43.i32[3];
              v43 = v49;
            }
            *(_BYTE *)(v15 + 224) = 1;
            *(float32x4_t *)(v15 + 208) = v43;
            *(_BYTE *)(v15 + 225) = v17;
            *(float32x4_t *)(v15 + 240) = v52;
          }
        }
      }
      v1 = (_QWORD *)*v1;
    }
    while (v1);
  }
}

void sub_1DCAE4384(uint64_t a1, char **a2)
{
  uint64_t i;
  char *v5;
  char *v6;
  unint64_t v7;
  int v8;
  char *v9;
  char **v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  int v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int v47;
  int v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  int v57;
  int v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  int v68;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 224))
      goto LABEL_6;
    for (i = 0; i != 64; i += 8)
      sub_1DCAE4384(*(_QWORD *)(a1 + 48 + i), a2);
    if (*(_BYTE *)(a1 + 224))
    {
LABEL_6:
      v5 = *a2;
      v6 = a2[1];
      v7 = (v6 - *a2) >> 2;
      *(_QWORD *)(a1 + 256) = v7 / 6;
      v8 = *(_DWORD *)(a1 + 208);
      v10 = a2 + 2;
      v9 = a2[2];
      if (v6 >= v9)
      {
        v12 = v7 + 1;
        if ((v7 + 1) >> 62)
          goto LABEL_104;
        v13 = v9 - v5;
        if (v13 >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)sub_1DCAE4D04((uint64_t)(a2 + 2), v14);
          v5 = *a2;
          v6 = a2[1];
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[4 * v7];
        v9 = &v15[4 * v14];
        *(_DWORD *)v16 = v8;
        v11 = v16 + 4;
        while (v6 != v5)
        {
          v17 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        *a2 = v16;
        a2[1] = v11;
        a2[2] = v9;
        if (v5)
        {
          operator delete(v5);
          v9 = *v10;
        }
      }
      else
      {
        *(_DWORD *)v6 = v8;
        v11 = v6 + 4;
      }
      a2[1] = v11;
      v18 = *(_DWORD *)(a1 + 212);
      if (v11 >= v9)
      {
        v20 = *a2;
        v21 = (v11 - *a2) >> 2;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62)
          goto LABEL_104;
        v23 = v9 - v20;
        if (v23 >> 1 > v22)
          v22 = v23 >> 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v24 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)sub_1DCAE4D04((uint64_t)(a2 + 2), v24);
          v20 = *a2;
          v11 = a2[1];
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[4 * v21];
        v9 = &v25[4 * v24];
        *(_DWORD *)v26 = v18;
        v19 = v26 + 4;
        while (v11 != v20)
        {
          v27 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v26 - 1) = v27;
          v26 -= 4;
        }
        *a2 = v26;
        a2[1] = v19;
        a2[2] = v9;
        if (v20)
        {
          operator delete(v20);
          v9 = *v10;
        }
      }
      else
      {
        *(_DWORD *)v11 = v18;
        v19 = v11 + 4;
      }
      a2[1] = v19;
      v28 = *(_DWORD *)(a1 + 216);
      if (v19 >= v9)
      {
        v30 = *a2;
        v31 = (v19 - *a2) >> 2;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 62)
          goto LABEL_104;
        v33 = v9 - v30;
        if (v33 >> 1 > v32)
          v32 = v33 >> 1;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
          v34 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
        {
          v35 = (char *)sub_1DCAE4D04((uint64_t)(a2 + 2), v34);
          v30 = *a2;
          v19 = a2[1];
        }
        else
        {
          v35 = 0;
        }
        v36 = &v35[4 * v31];
        v9 = &v35[4 * v34];
        *(_DWORD *)v36 = v28;
        v29 = v36 + 4;
        while (v19 != v30)
        {
          v37 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v36 - 1) = v37;
          v36 -= 4;
        }
        *a2 = v36;
        a2[1] = v29;
        a2[2] = v9;
        if (v30)
        {
          operator delete(v30);
          v9 = *v10;
        }
      }
      else
      {
        *(_DWORD *)v19 = v28;
        v29 = v19 + 4;
      }
      a2[1] = v29;
      v38 = *(_DWORD *)(a1 + 240);
      if (v29 >= v9)
      {
        v40 = *a2;
        v41 = (v29 - *a2) >> 2;
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 62)
          goto LABEL_104;
        v43 = v9 - v40;
        if (v43 >> 1 > v42)
          v42 = v43 >> 1;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
          v44 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v44 = v42;
        if (v44)
        {
          v45 = (char *)sub_1DCAE4D04((uint64_t)(a2 + 2), v44);
          v40 = *a2;
          v29 = a2[1];
        }
        else
        {
          v45 = 0;
        }
        v46 = &v45[4 * v41];
        v9 = &v45[4 * v44];
        *(_DWORD *)v46 = v38;
        v39 = v46 + 4;
        while (v29 != v40)
        {
          v47 = *((_DWORD *)v29 - 1);
          v29 -= 4;
          *((_DWORD *)v46 - 1) = v47;
          v46 -= 4;
        }
        *a2 = v46;
        a2[1] = v39;
        a2[2] = v9;
        if (v40)
        {
          operator delete(v40);
          v9 = *v10;
        }
      }
      else
      {
        *(_DWORD *)v29 = v38;
        v39 = v29 + 4;
      }
      a2[1] = v39;
      v48 = *(_DWORD *)(a1 + 244);
      if (v39 >= v9)
      {
        v50 = *a2;
        v51 = (v39 - *a2) >> 2;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62)
          goto LABEL_104;
        v53 = v9 - v50;
        if (v53 >> 1 > v52)
          v52 = v53 >> 1;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
          v54 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v54 = v52;
        if (v54)
        {
          v55 = (char *)sub_1DCAE4D04((uint64_t)(a2 + 2), v54);
          v50 = *a2;
          v39 = a2[1];
        }
        else
        {
          v55 = 0;
        }
        v56 = &v55[4 * v51];
        v9 = &v55[4 * v54];
        *(_DWORD *)v56 = v48;
        v49 = v56 + 4;
        while (v39 != v50)
        {
          v57 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v56 - 1) = v57;
          v56 -= 4;
        }
        *a2 = v56;
        a2[1] = v49;
        a2[2] = v9;
        if (v50)
        {
          operator delete(v50);
          v9 = *v10;
        }
      }
      else
      {
        *(_DWORD *)v39 = v48;
        v49 = v39 + 4;
      }
      a2[1] = v49;
      v58 = *(_DWORD *)(a1 + 248);
      if (v49 < v9)
      {
        *(_DWORD *)v49 = v58;
        v59 = v49 + 4;
LABEL_102:
        a2[1] = v59;
        return;
      }
      v60 = *a2;
      v61 = (v49 - *a2) >> 2;
      v62 = v61 + 1;
      if (!((unint64_t)(v61 + 1) >> 62))
      {
        v63 = v9 - v60;
        if (v63 >> 1 > v62)
          v62 = v63 >> 1;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
          v64 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v64 = v62;
        if (v64)
        {
          v65 = (char *)sub_1DCAE4D04((uint64_t)(a2 + 2), v64);
          v60 = *a2;
          v49 = a2[1];
        }
        else
        {
          v65 = 0;
        }
        v66 = &v65[4 * v61];
        v67 = &v65[4 * v64];
        *(_DWORD *)v66 = v58;
        v59 = v66 + 4;
        while (v49 != v60)
        {
          v68 = *((_DWORD *)v49 - 1);
          v49 -= 4;
          *((_DWORD *)v66 - 1) = v68;
          v66 -= 4;
        }
        *a2 = v66;
        a2[1] = v59;
        a2[2] = v67;
        if (v60)
          operator delete(v60);
        goto LABEL_102;
      }
LABEL_104:
      sub_1DCAE4C44();
    }
  }
}

void sub_1DCAE4800(uint64_t a1, char **a2)
{
  uint64_t i;
  uint64_t j;
  uint64_t v6;
  uint64_t k;
  uint64_t v8;
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1 && !*(_BYTE *)(a1 + 224))
  {
    for (i = 0; i != 64; i += 8)
      sub_1DCAE4800(*(_QWORD *)(a1 + 48 + i), a2);
    for (j = 0; j != 144; j += 12)
    {
      v6 = *(_QWORD *)(a1 + 48 + 8 * *(int *)((char *)&unk_1DCC57718 + j + 4));
      *(_QWORD *)&v10[0] = *(_QWORD *)(a1 + 48 + 8 * *(int *)((char *)&unk_1DCC57718 + j));
      *((_QWORD *)&v10[0] + 1) = v6;
      sub_1DCAE531C(v10, *(_DWORD *)((char *)&unk_1DCC57718 + j + 8), a2);
    }
    for (k = 0; k != 6; ++k)
    {
      v8 = 0;
      memset(v10, 0, sizeof(v10));
      v9 = *(_OWORD *)((char *)&unk_1DCC577A8 + 20 * k);
      do
      {
        *((_QWORD *)v10 + v8) = *(_QWORD *)(a1 + 8 * *((int *)&v10[-1] + v8) + 48);
        ++v8;
      }
      while (v8 != 4);
      sub_1DCAE54D4(v10, *((_DWORD *)&unk_1DCC577A8 + 5 * k + 4), a2);
    }
  }
}

float sub_1DCAE4944(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  int32x4_t v6;
  int32x4_t v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  float v19;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v21.i32[2] = 0;
  v21.i64[0] = 0;
  v22 = 0;
  v23 = 0;
  v25 = 0.0;
  v24 = 0;
  v26 = *(float *)(a2 + 116);
  sub_1DCAE1334(a1, *(_QWORD *)(a2 + 8), (__n64 *)&v21);
  v5 = 0;
  v6 = v21;
  do
  {
    v7 = vaddq_s32(*(int32x4_t *)(a1 + 112 * a3 + 16 * v5), v6);
    if (v7.i32[0] < 0 || v7.i32[1] < 0 || v7.i32[2] < 0)
      goto LABEL_24;
    v8 = *(_QWORD *)(a1 + 1312);
    v9 = v7.i32[0] < *(_DWORD *)(v8 + 288) && v7.i32[1] < *(_DWORD *)(v8 + 292);
    if (!v9 || v7.i32[2] >= *(_DWORD *)(v8 + 296))
      goto LABEL_24;
    v13 = *(_QWORD **)(v8 + 24);
    v11 = (_QWORD *)(v8 + 24);
    v12 = v13;
    if (!v13)
      goto LABEL_24;
    v14 = *(_QWORD *)(v11[15] + 8 * v7.u8[8]) | ((*(_QWORD *)(v11[12] + 8 * v7.u8[5]) | *(_QWORD *)(v11[15] + 8 * v7.u8[9]) | *(_QWORD *)(v11[9] + 8 * v7.u8[1])) << 24) | *(_QWORD *)(v11[12] + 8 * v7.u8[4]) | *(_QWORD *)(v11[9] + 8 * v7.u8[0]);
    v15 = v11;
    do
    {
      v16 = v12[4];
      v17 = v16 >= v14;
      if (v16 >= v14)
        v18 = v12;
      else
        v18 = v12 + 1;
      if (v17)
        v15 = v12;
      v12 = (_QWORD *)*v18;
    }
    while (*v18);
    if (v15 == v11 || v14 < v15[4])
LABEL_24:
      *((_DWORD *)&v22 + v5) = 0;
    else
      *((_DWORD *)&v22 + v5) = *(_DWORD *)(v15[5] + 116);
    ++v5;
  }
  while (v5 != 7);
  v19 = (float)(*(float *)&v22 + (float)((float)(*((float *)&v22 + 1) - *(float *)&v22) * 0.5))
      + (float)((float)((float)(*(float *)&v23
                              - (float)(*(float *)&v22 + (float)((float)(*((float *)&v22 + 1) - *(float *)&v22) * 0.5)))
                      + (float)((float)(*((float *)&v23 + 1) - *(float *)&v23) * 0.5))
              * 0.5);
  return v19
       + (float)((float)((float)((float)(*(float *)&v24 + (float)((float)(*((float *)&v24 + 1) - *(float *)&v24) * 0.5))
                               - v19)
                       + (float)((float)((float)(v25 + (float)((float)(v26 - v25) * 0.5))
                                       - (float)(*(float *)&v24
                                               + (float)((float)(*((float *)&v24 + 1) - *(float *)&v24) * 0.5)))
                               * 0.5))
               * 0.5);
}

void sub_1DCAE4B1C(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_1DCAE4C44();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

void sub_1DCAE4C44()
{
  sub_1DCAE4C68("vector");
}

void sub_1DCAE4C58(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_1DCAE4C68(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1DCAE4CB8(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1EA5730B8, MEMORY[0x1E0DE42D0]);
}

void sub_1DCAE4CA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1DCAE4CB8(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void sub_1DCAE4CDC()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void *sub_1DCAE4D04(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_1DCAE4CDC();
  return operator new(4 * a2);
}

uint64_t sub_1DCAE4D38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_1DCAE6B14(a1 + 64, a2);
  sub_1DCB56BA8(a1 + 96, v3);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  return a1;
}

void sub_1DCAE4DE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD **v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;

  v6 = v3;
  v8 = *(_QWORD **)(v1 + 88);
  if (v8 == v6)
  {
    v9 = v6;
    v10 = 4;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v10 = 5;
    v9 = *(_QWORD **)(v1 + 88);
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 48) = v11;
    operator delete(v11);
  }
  sub_1DCAE4E44(v2, *v4);
  _Unwind_Resume(a1);
}

void sub_1DCAE4E44(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1DCAE4E44(a1, *a2);
    sub_1DCAE4E44(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t sub_1DCAE4E84(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x124924924924924)
    sub_1DCAE4C44();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x92492492492492)
    v9 = 0x124924924924924;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1DCAE513C(v7, v9);
  else
    v10 = 0;
  __p = v10;
  v14 = &v10[224 * v4];
  v16 = &v10[224 * v9];
  sub_1DCAE501C((uint64_t)v14, a2);
  v15 = v14 + 224;
  sub_1DCAE50B8(a1, &__p);
  v11 = a1[1];
  if (v15 != v14)
    v15 += -224
         - 224 * ((((unint64_t)(v15 - v14 - 224) >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64);
  if (__p)
    operator delete(__p);
  return v11;
}

void sub_1DCAE4FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1DCAE501C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  double result;

  v2 = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v3 = 64;
  do
  {
    v4 = (_OWORD *)(a1 + v3);
    *(v4 - 3) = *(_OWORD *)(a2 + v3 - 48);
    *v4 = *(_OWORD *)(a2 + v3);
    v5 = a1 + v2;
    *(_QWORD *)(v5 + 176) = *(_QWORD *)(a2 + v2 + 176);
    result = *(double *)(a2 + v2 + 200);
    *(double *)(v5 + 200) = result;
    v2 += 8;
    v3 += 16;
  }
  while (v2 != 24);
  return result;
}

void sub_1DCAE50B8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 224;
    sub_1DCAE501C(v6 - 224, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *sub_1DCAE513C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925)
    sub_1DCAE4CDC();
  return operator new(224 * a2);
}

uint64_t *sub_1DCAE5184(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_1DCAE531C(_QWORD *a1, int a2, char **a3)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  _OWORD v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    v4 = a1[1];
    if (v4)
    {
      if (!*(_BYTE *)(*a1 + 224) || !*(_BYTE *)(v4 + 224))
      {
        for (i = 0; i != 4; ++i)
        {
          v8 = 0;
          v18[0] = 0uLL;
          *(_QWORD *)&v17 = *(_QWORD *)((char *)&unk_1DCC57820 + 48 * a2 + 12 * i);
          v9 = 1;
          do
          {
            v10 = v9;
            v11 = a1[v8];
            if (!*(_BYTE *)(v11 + 224))
              v11 = *(_QWORD *)(v11 + 8 * *((int *)&v18[-1] + v8) + 48);
            v9 = 0;
            *((_QWORD *)v18 + v8) = v11;
            v8 = 1;
          }
          while ((v10 & 1) != 0);
          sub_1DCAE531C(v18, *((unsigned int *)&unk_1DCC57820 + 12 * a2 + 3 * i + 2), a3);
        }
        for (j = 0; j != 4; ++j)
        {
          v13 = 0;
          memset(v18, 0, sizeof(v18));
          v14 = &dword_1DCC578D0[24 * a2 + 6 * j];
          v17 = *(_OWORD *)(v14 + 1);
          v15 = (char *)&unk_1DCC578B0 + 16 * *v14;
          do
          {
            v16 = a1[*(int *)&v15[4 * v13]];
            if (!*(_BYTE *)(v16 + 224))
              v16 = *(_QWORD *)(v16 + 8 * *((int *)&v18[-1] + v13) + 48);
            *((_QWORD *)v18 + v13++) = v16;
          }
          while (v13 != 4);
          sub_1DCAE54D4(v18, dword_1DCC578D0[24 * a2 + 5 + 6 * j], a3);
        }
      }
    }
  }
}

void sub_1DCAE54D4(_QWORD *a1, int a2, char **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  float v12;
  int v13;
  char *v14;
  char **v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  int v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  int v88;
  int v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  int v98;
  int v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  int v108;
  int v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  int v117;
  int v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  int v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  int v135;
  int v136;
  __int128 v137;
  _OWORD v138[2];
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    v4 = a1[1];
    if (v4)
    {
      v5 = a1[2];
      if (v5)
      {
        v6 = a1[3];
        if (v6)
        {
          if (*(_BYTE *)(*a1 + 224) && *(_BYTE *)(v4 + 224) && *(_BYTE *)(v5 + 224) && *(_BYTE *)(v6 + 224))
          {
            v8 = 0;
            v9 = 0;
            *(_QWORD *)&v138[0] = -1;
            *((_QWORD *)&v138[0] + 1) = -1;
            v10 = 0x7FFFFFFF;
            do
            {
              v11 = a1[v8];
              v12 = *(float *)(v11 + 16) - *(float *)(v11 + 32);
              if (v12 < (float)v10)
              {
                v9 = *(unsigned __int8 *)(v11 + 225) >> byte_1DCC57700[2 * dword_1DCC57A68[4 * a2 + v8]];
                v10 = (int)v12;
              }
              *((_DWORD *)v138 + v8++) = *(_QWORD *)(v11 + 256);
            }
            while (v8 != 4);
            v13 = v138[0];
            v15 = a3 + 2;
            v14 = a3[2];
            v16 = a3[1];
            if ((v9 & 1) != 0)
            {
              if (v16 >= v14)
              {
                v25 = *a3;
                v26 = (v16 - *a3) >> 2;
                v27 = v26 + 1;
                if ((unint64_t)(v26 + 1) >> 62)
                  goto LABEL_211;
                v28 = v14 - v25;
                if (v28 >> 1 > v27)
                  v27 = v28 >> 1;
                if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
                  v29 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v29 = v27;
                if (v29)
                {
                  v30 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v29);
                  v25 = *a3;
                  v16 = a3[1];
                }
                else
                {
                  v30 = 0;
                }
                v37 = &v30[4 * v26];
                v14 = &v30[4 * v29];
                *(_DWORD *)v37 = v13;
                v17 = v37 + 4;
                while (v16 != v25)
                {
                  v38 = *((_DWORD *)v16 - 1);
                  v16 -= 4;
                  *((_DWORD *)v37 - 1) = v38;
                  v37 -= 4;
                }
                *a3 = v37;
                a3[1] = v17;
                a3[2] = v14;
                if (v25)
                {
                  operator delete(v25);
                  v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)v16 = v138[0];
                v17 = v16 + 4;
              }
              a3[1] = v17;
              v39 = HIDWORD(v138[0]);
              if (v17 >= v14)
              {
                v41 = *a3;
                v42 = (v17 - *a3) >> 2;
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62)
                  goto LABEL_211;
                v44 = v14 - v41;
                if (v44 >> 1 > v43)
                  v43 = v44 >> 1;
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                  v45 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v45 = v43;
                if (v45)
                {
                  v46 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v45);
                  v41 = *a3;
                  v17 = a3[1];
                }
                else
                {
                  v46 = 0;
                }
                v57 = &v46[4 * v42];
                v14 = &v46[4 * v45];
                *(_DWORD *)v57 = v39;
                v40 = v57 + 4;
                while (v17 != v41)
                {
                  v58 = *((_DWORD *)v17 - 1);
                  v17 -= 4;
                  *((_DWORD *)v57 - 1) = v58;
                  v57 -= 4;
                }
                *a3 = v57;
                a3[1] = v40;
                a3[2] = v14;
                if (v41)
                {
                  operator delete(v41);
                  v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)v17 = HIDWORD(v138[0]);
                v40 = v17 + 4;
              }
              a3[1] = v40;
              v59 = DWORD1(v138[0]);
              if (v40 >= v14)
              {
                v61 = *a3;
                v62 = (v40 - *a3) >> 2;
                v63 = v62 + 1;
                if ((unint64_t)(v62 + 1) >> 62)
                  goto LABEL_211;
                v64 = v14 - v61;
                if (v64 >> 1 > v63)
                  v63 = v64 >> 1;
                if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
                  v65 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v65 = v63;
                if (v65)
                {
                  v66 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v65);
                  v61 = *a3;
                  v40 = a3[1];
                }
                else
                {
                  v66 = 0;
                }
                v77 = &v66[4 * v62];
                v14 = &v66[4 * v65];
                *(_DWORD *)v77 = v59;
                v60 = v77 + 4;
                while (v40 != v61)
                {
                  v78 = *((_DWORD *)v40 - 1);
                  v40 -= 4;
                  *((_DWORD *)v77 - 1) = v78;
                  v77 -= 4;
                }
                *a3 = v77;
                a3[1] = v60;
                a3[2] = v14;
                if (v61)
                {
                  operator delete(v61);
                  v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)v40 = DWORD1(v138[0]);
                v60 = v40 + 4;
              }
              a3[1] = v60;
              v79 = v138[0];
              if (v60 >= v14)
              {
                v81 = *a3;
                v82 = (v60 - *a3) >> 2;
                v83 = v82 + 1;
                if ((unint64_t)(v82 + 1) >> 62)
                  goto LABEL_211;
                v84 = v14 - v81;
                if (v84 >> 1 > v83)
                  v83 = v84 >> 1;
                if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
                  v85 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v85 = v83;
                if (v85)
                {
                  v86 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v85);
                  v81 = *a3;
                  v60 = a3[1];
                }
                else
                {
                  v86 = 0;
                }
                v97 = &v86[4 * v82];
                v14 = &v86[4 * v85];
                *(_DWORD *)v97 = v79;
                v80 = v97 + 4;
                while (v60 != v81)
                {
                  v98 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  *((_DWORD *)v97 - 1) = v98;
                  v97 -= 4;
                }
                *a3 = v97;
                a3[1] = v80;
                a3[2] = v14;
                if (v81)
                {
                  operator delete(v81);
                  v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)v60 = v138[0];
                v80 = v60 + 4;
              }
              a3[1] = v80;
              v99 = DWORD2(v138[0]);
              if (v80 >= v14)
              {
                v101 = *a3;
                v102 = (v80 - *a3) >> 2;
                v103 = v102 + 1;
                if ((unint64_t)(v102 + 1) >> 62)
                  goto LABEL_211;
                v104 = v14 - v101;
                if (v104 >> 1 > v103)
                  v103 = v104 >> 1;
                if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
                  v105 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v105 = v103;
                if (v105)
                {
                  v106 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v105);
                  v101 = *a3;
                  v80 = a3[1];
                }
                else
                {
                  v106 = 0;
                }
                v116 = &v106[4 * v102];
                v14 = &v106[4 * v105];
                *(_DWORD *)v116 = v99;
                v100 = v116 + 4;
                while (v80 != v101)
                {
                  v117 = *((_DWORD *)v80 - 1);
                  v80 -= 4;
                  *((_DWORD *)v116 - 1) = v117;
                  v116 -= 4;
                }
                *a3 = v116;
                a3[1] = v100;
                a3[2] = v14;
                if (v101)
                {
                  operator delete(v101);
                  v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)v80 = DWORD2(v138[0]);
                v100 = v80 + 4;
              }
              a3[1] = v100;
              v118 = HIDWORD(v138[0]);
              if (v100 >= v14)
              {
                v119 = *a3;
                v120 = (v100 - *a3) >> 2;
                v121 = v120 + 1;
                if (!((unint64_t)(v120 + 1) >> 62))
                {
                  v122 = v14 - v119;
                  if (v122 >> 1 > v121)
                    v121 = v122 >> 1;
                  if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL)
                    v123 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v123 = v121;
                  if (v123)
                  {
                    v124 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v123);
                    v119 = *a3;
                    v100 = a3[1];
                  }
                  else
                  {
                    v124 = 0;
                  }
                  v133 = &v124[4 * v120];
                  v134 = &v124[4 * v123];
                  *(_DWORD *)v133 = v118;
                  v127 = v133 + 4;
                  while (v100 != v119)
                  {
                    v135 = *((_DWORD *)v100 - 1);
                    v100 -= 4;
                    *((_DWORD *)v133 - 1) = v135;
                    v133 -= 4;
                  }
LABEL_208:
                  *a3 = v133;
                  a3[1] = v127;
                  a3[2] = v134;
                  if (v119)
                    operator delete(v119);
                  goto LABEL_210;
                }
                goto LABEL_211;
              }
            }
            else
            {
              if (v16 >= v14)
              {
                v31 = *a3;
                v32 = (v16 - *a3) >> 2;
                v33 = v32 + 1;
                if ((unint64_t)(v32 + 1) >> 62)
                  goto LABEL_211;
                v34 = v14 - v31;
                if (v34 >> 1 > v33)
                  v33 = v34 >> 1;
                if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                  v35 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v35 = v33;
                if (v35)
                {
                  v36 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v35);
                  v31 = *a3;
                  v16 = a3[1];
                }
                else
                {
                  v36 = 0;
                }
                v47 = &v36[4 * v32];
                v14 = &v36[4 * v35];
                *(_DWORD *)v47 = v13;
                v24 = v47 + 4;
                while (v16 != v31)
                {
                  v48 = *((_DWORD *)v16 - 1);
                  v16 -= 4;
                  *((_DWORD *)v47 - 1) = v48;
                  v47 -= 4;
                }
                *a3 = v47;
                a3[1] = v24;
                a3[2] = v14;
                if (v31)
                {
                  operator delete(v31);
                  v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)v16 = v138[0];
                v24 = v16 + 4;
              }
              a3[1] = v24;
              v49 = DWORD1(v138[0]);
              if (v24 >= v14)
              {
                v51 = *a3;
                v52 = (v24 - *a3) >> 2;
                v53 = v52 + 1;
                if ((unint64_t)(v52 + 1) >> 62)
                  goto LABEL_211;
                v54 = v14 - v51;
                if (v54 >> 1 > v53)
                  v53 = v54 >> 1;
                if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
                  v55 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v55 = v53;
                if (v55)
                {
                  v56 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v55);
                  v51 = *a3;
                  v24 = a3[1];
                }
                else
                {
                  v56 = 0;
                }
                v67 = &v56[4 * v52];
                v14 = &v56[4 * v55];
                *(_DWORD *)v67 = v49;
                v50 = v67 + 4;
                while (v24 != v51)
                {
                  v68 = *((_DWORD *)v24 - 1);
                  v24 -= 4;
                  *((_DWORD *)v67 - 1) = v68;
                  v67 -= 4;
                }
                *a3 = v67;
                a3[1] = v50;
                a3[2] = v14;
                if (v51)
                {
                  operator delete(v51);
                  v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)v24 = DWORD1(v138[0]);
                v50 = v24 + 4;
              }
              a3[1] = v50;
              v69 = HIDWORD(v138[0]);
              if (v50 >= v14)
              {
                v71 = *a3;
                v72 = (v50 - *a3) >> 2;
                v73 = v72 + 1;
                if ((unint64_t)(v72 + 1) >> 62)
                  goto LABEL_211;
                v74 = v14 - v71;
                if (v74 >> 1 > v73)
                  v73 = v74 >> 1;
                if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
                  v75 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v75 = v73;
                if (v75)
                {
                  v76 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v75);
                  v71 = *a3;
                  v50 = a3[1];
                }
                else
                {
                  v76 = 0;
                }
                v87 = &v76[4 * v72];
                v14 = &v76[4 * v75];
                *(_DWORD *)v87 = v69;
                v70 = v87 + 4;
                while (v50 != v71)
                {
                  v88 = *((_DWORD *)v50 - 1);
                  v50 -= 4;
                  *((_DWORD *)v87 - 1) = v88;
                  v87 -= 4;
                }
                *a3 = v87;
                a3[1] = v70;
                a3[2] = v14;
                if (v71)
                {
                  operator delete(v71);
                  v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)v50 = HIDWORD(v138[0]);
                v70 = v50 + 4;
              }
              a3[1] = v70;
              v89 = v138[0];
              if (v70 >= v14)
              {
                v91 = *a3;
                v92 = (v70 - *a3) >> 2;
                v93 = v92 + 1;
                if ((unint64_t)(v92 + 1) >> 62)
                  goto LABEL_211;
                v94 = v14 - v91;
                if (v94 >> 1 > v93)
                  v93 = v94 >> 1;
                if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
                  v95 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v95 = v93;
                if (v95)
                {
                  v96 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v95);
                  v91 = *a3;
                  v70 = a3[1];
                }
                else
                {
                  v96 = 0;
                }
                v107 = &v96[4 * v92];
                v14 = &v96[4 * v95];
                *(_DWORD *)v107 = v89;
                v90 = v107 + 4;
                while (v70 != v91)
                {
                  v108 = *((_DWORD *)v70 - 1);
                  v70 -= 4;
                  *((_DWORD *)v107 - 1) = v108;
                  v107 -= 4;
                }
                *a3 = v107;
                a3[1] = v90;
                a3[2] = v14;
                if (v91)
                {
                  operator delete(v91);
                  v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)v70 = v138[0];
                v90 = v70 + 4;
              }
              a3[1] = v90;
              v109 = HIDWORD(v138[0]);
              if (v90 >= v14)
              {
                v110 = *a3;
                v111 = (v90 - *a3) >> 2;
                v112 = v111 + 1;
                if ((unint64_t)(v111 + 1) >> 62)
                  goto LABEL_211;
                v113 = v14 - v110;
                if (v113 >> 1 > v112)
                  v112 = v113 >> 1;
                if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL)
                  v114 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v114 = v112;
                if (v114)
                {
                  v115 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v114);
                  v110 = *a3;
                  v90 = a3[1];
                }
                else
                {
                  v115 = 0;
                }
                v125 = &v115[4 * v111];
                v14 = &v115[4 * v114];
                *(_DWORD *)v125 = v109;
                v100 = v125 + 4;
                while (v90 != v110)
                {
                  v126 = *((_DWORD *)v90 - 1);
                  v90 -= 4;
                  *((_DWORD *)v125 - 1) = v126;
                  v125 -= 4;
                }
                *a3 = v125;
                a3[1] = v100;
                a3[2] = v14;
                if (v110)
                {
                  operator delete(v110);
                  v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)v90 = HIDWORD(v138[0]);
                v100 = v90 + 4;
              }
              a3[1] = v100;
              v118 = DWORD2(v138[0]);
              if (v100 >= v14)
              {
                v119 = *a3;
                v128 = (v100 - *a3) >> 2;
                v129 = v128 + 1;
                if (!((unint64_t)(v128 + 1) >> 62))
                {
                  v130 = v14 - v119;
                  if (v130 >> 1 > v129)
                    v129 = v130 >> 1;
                  if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL)
                    v131 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v131 = v129;
                  if (v131)
                  {
                    v132 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v131);
                    v119 = *a3;
                    v100 = a3[1];
                  }
                  else
                  {
                    v132 = 0;
                  }
                  v133 = &v132[4 * v128];
                  v134 = &v132[4 * v131];
                  *(_DWORD *)v133 = v118;
                  v127 = v133 + 4;
                  while (v100 != v119)
                  {
                    v136 = *((_DWORD *)v100 - 1);
                    v100 -= 4;
                    *((_DWORD *)v133 - 1) = v136;
                    v133 -= 4;
                  }
                  goto LABEL_208;
                }
LABEL_211:
                sub_1DCAE4C44();
              }
            }
            *(_DWORD *)v100 = v118;
            v127 = v100 + 4;
LABEL_210:
            a3[1] = v127;
            return;
          }
          v18 = 0;
          v20 = 1;
          do
          {
            v21 = 0;
            v22 = v20;
            memset(v138, 0, sizeof(v138));
            v137 = *(_OWORD *)((char *)&unk_1DCC579F0 + 40 * a2 + 20 * v18);
            do
            {
              v23 = a1[v21];
              if (!*(_BYTE *)(v23 + 224))
                v23 = *(_QWORD *)(v23 + 8 * *((int *)&v138[-1] + v21) + 48);
              *((_QWORD *)v138 + v21++) = v23;
            }
            while (v21 != 4);
            sub_1DCAE54D4(v138, *((unsigned int *)&unk_1DCC579F0 + 10 * a2 + 5 * v18 + 4), a3);
            v20 = 0;
            v18 = 1;
          }
          while ((v22 & 1) != 0);
        }
      }
    }
  }
}

void sub_1DCAE5E60(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1DF0D228CLL);
  }
}

uint64_t *sub_1DCAE5EA8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_1DCAE6BC0((uint64_t *)(v2 + 1312), 0);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

uint64_t sub_1DCAE5EF8(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  BOOL v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v85;
  uint64_t v86;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v40 = *(a2 - 1);
        v41 = *v8;
        if (*(float *)(v40 + 20) < *(float *)(*v8 + 20))
        {
          *v8 = v40;
          *(a2 - 1) = v41;
        }
        return result;
      case 3uLL:
        return (uint64_t)sub_1DCAE661C(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return (uint64_t)sub_1DCAE689C(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v42 = v8 + 1;
        v43 = v8 + 2;
        v44 = v8 + 3;
        result = (uint64_t)sub_1DCAE689C(v8, v8 + 1, v8 + 2, v8 + 3);
        v45 = *(a2 - 1);
        v46 = v8[3];
        if (*(float *)(v45 + 20) < *(float *)(v46 + 20))
        {
          *v44 = v45;
          *(a2 - 1) = v46;
          v47 = *v44;
          v48 = *v43;
          if (*(float *)(*v44 + 20) < *(float *)(*v43 + 20))
          {
            *v43 = v47;
            *v44 = v48;
            v49 = *v42;
            if (*(float *)(v47 + 20) < *(float *)(*v42 + 20))
            {
              v8[1] = v47;
              v8[2] = v49;
              v50 = *v8;
              if (*(float *)(v47 + 20) < *(float *)(*v8 + 20))
              {
                *v8 = v47;
                v8[1] = v50;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v51 = v8 + 1;
          v53 = v8 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              v54 = 0;
              v55 = v8;
              do
              {
                v57 = *v55;
                v56 = v55[1];
                v55 = v51;
                if (*(float *)(v56 + 20) < *(float *)(v57 + 20))
                {
                  v58 = v54;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v58 + 8) = v57;
                    if (!v58)
                      break;
                    v57 = *(uint64_t *)((char *)v8 + v58 - 8);
                    v58 -= 8;
                    if (*(float *)(v56 + 20) >= *(float *)(v57 + 20))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58 + 8);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v56;
                }
                v51 = v55 + 1;
                v54 += 8;
              }
              while (v55 + 1 != a2);
            }
          }
          else if (!v53)
          {
            do
            {
              v86 = *v7;
              v85 = v7[1];
              v7 = v51;
              if (*(float *)(v85 + 20) < *(float *)(v86 + 20))
              {
                do
                {
                  *v51 = v86;
                  v86 = *(v51 - 2);
                  --v51;
                }
                while (*(float *)(v85 + 20) < *(float *)(v86 + 20));
                *v51 = v85;
              }
              v51 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                if (2 * v62 + 2 < (uint64_t)v10 && *(float *)(*v64 + 20) < *(float *)(v64[1] + 20))
                {
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                v65 = &v8[v62];
                v66 = *v64;
                v67 = *v65;
                if (*(float *)(*v64 + 20) >= *(float *)(*v65 + 20))
                {
                  do
                  {
                    v68 = v64;
                    *v65 = v66;
                    if (v60 < v63)
                      break;
                    v69 = 2 * v63;
                    v63 = (2 * v63) | 1;
                    v64 = &v8[v63];
                    v70 = v69 + 2;
                    if (v70 < (uint64_t)v10)
                    {
                      result = *v64;
                      if (*(float *)(*v64 + 20) < *(float *)(v64[1] + 20))
                      {
                        ++v64;
                        v63 = v70;
                      }
                    }
                    v66 = *v64;
                    v65 = v68;
                  }
                  while (*(float *)(*v64 + 20) >= *(float *)(v67 + 20));
                  *v68 = v67;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v71 = (unint64_t)v9 >> 3;
            do
            {
              v72 = 0;
              v73 = *v8;
              v74 = v8;
              do
              {
                v75 = v74;
                v74 += v72 + 1;
                v76 = 2 * v72;
                v72 = (2 * v72) | 1;
                v77 = v76 + 2;
                if (v77 < v71 && *(float *)(*v74 + 20) < *(float *)(v74[1] + 20))
                {
                  ++v74;
                  v72 = v77;
                }
                *v75 = *v74;
              }
              while (v72 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
              if (v74 == --a2)
              {
                *v74 = v73;
              }
              else
              {
                *v74 = *a2;
                *a2 = v73;
                v78 = (char *)v74 - (char *)v8 + 8;
                if (v78 >= 9)
                {
                  v79 = (((unint64_t)v78 >> 3) - 2) >> 1;
                  v80 = &v8[v79];
                  v81 = *v80;
                  v82 = *v74;
                  if (*(float *)(*v80 + 20) < *(float *)(*v74 + 20))
                  {
                    do
                    {
                      v83 = v80;
                      *v74 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v8[v79];
                      v81 = *v80;
                      v74 = v83;
                    }
                    while (*(float *)(*v80 + 20) < *(float *)(v82 + 20));
                    *v83 = v82;
                  }
                }
              }
            }
            while (v71-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)sub_1DCAE661C(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1DCAE661C(v7, &v7[v10 >> 1], a2 - 1);
          sub_1DCAE661C(v7 + 1, v12 - 1, a2 - 2);
          sub_1DCAE661C(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (uint64_t)sub_1DCAE661C(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(float *)(v14 + 20);
          if (*(float *)(*(v7 - 1) + 20) < v15)
            goto LABEL_12;
          if (v15 >= *(float *)(*(a2 - 1) + 20))
          {
            v31 = v7 + 1;
            do
            {
              v8 = v31;
              if (v31 >= a2)
                break;
              ++v31;
            }
            while (v15 >= *(float *)(*v8 + 20));
          }
          else
          {
            v8 = v7;
            do
            {
              v30 = v8[1];
              ++v8;
            }
            while (v15 >= *(float *)(v30 + 20));
          }
          v32 = a2;
          if (v8 < a2)
          {
            v32 = a2;
            do
              v33 = *--v32;
            while (v15 < *(float *)(v33 + 20));
          }
          if (v8 < v32)
          {
            v34 = *v8;
            v35 = *v32;
            do
            {
              *v8 = v35;
              *v32 = v34;
              v36 = *(float *)(v14 + 20);
              do
              {
                v37 = v8[1];
                ++v8;
                v34 = v37;
              }
              while (v36 >= *(float *)(v37 + 20));
              do
              {
                v38 = *--v32;
                v35 = v38;
              }
              while (v36 < *(float *)(v38 + 20));
            }
            while (v8 < v32);
          }
          v39 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v39;
          a4 = 0;
          *v39 = v14;
          continue;
        }
        v15 = *(float *)(v14 + 20);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(float *)(v17 + 20) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(float *)(v21 + 20) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(float *)(v20 + 20) >= v15);
        }
        if (v18 >= v19)
        {
          v28 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = v19;
          v24 = &v7[v16];
          do
          {
            *v24 = v22;
            *v23 = v17;
            v25 = *(float *)(v14 + 20);
            do
            {
              v26 = v24[1];
              ++v24;
              v17 = v26;
            }
            while (*(float *)(v26 + 20) < v25);
            do
            {
              v27 = *--v23;
              v22 = v27;
            }
            while (*(float *)(v27 + 20) >= v25);
          }
          while (v24 < v23);
          v28 = v24 - 1;
        }
        if (v28 != v7)
          *v7 = *v28;
        *v28 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = sub_1DCAE5EF8(v7, v28, a3, a4 & 1);
          a4 = 0;
          v8 = v28 + 1;
          continue;
        }
        v29 = sub_1DCAE66A8(v7, v28);
        v8 = v28 + 1;
        result = sub_1DCAE66A8(v28 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_33;
        }
        a2 = v28;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1DCAE661C(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;

  v3 = *a2;
  v4 = *result;
  v5 = *(float *)(*a2 + 20);
  v6 = *a3;
  v7 = *(float *)(*a3 + 20);
  if (v5 >= *(float *)(*result + 20))
  {
    if (v7 < v5)
    {
      *a2 = v6;
      *a3 = v3;
      v8 = *result;
      if (*(float *)(*a2 + 20) < *(float *)(*result + 20))
      {
        *result = *a2;
        *a2 = v8;
      }
    }
  }
  else
  {
    if (v7 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(float *)(*a3 + 20) >= *(float *)(v4 + 20))
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v6;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1DCAE66A8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(float *)(v6 + 20) < *(float *)(*a1 + 20))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1DCAE661C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1DCAE689C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v17 = a1 + 1;
      v18 = a1 + 2;
      v19 = a1 + 3;
      sub_1DCAE689C(a1, a1 + 1, a1 + 2, a1 + 3);
      v20 = *(a2 - 1);
      v21 = a1[3];
      if (*(float *)(v20 + 20) < *(float *)(v21 + 20))
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = *v18;
        if (*(float *)(*v19 + 20) < *(float *)(*v18 + 20))
        {
          *v18 = v22;
          *v19 = v23;
          v24 = *v17;
          if (*(float *)(v22 + 20) < *(float *)(*v17 + 20))
          {
            a1[1] = v22;
            a1[2] = v24;
            v25 = *a1;
            if (*(float *)(v22 + 20) < *(float *)(*a1 + 20))
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1DCAE661C(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*(float *)(*v9 + 20) < *(float *)(*v8 + 20))
    {
      v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (*(float *)(v12 + 20) >= *(float *)(v13 + 20))
        {
          v16 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_1DCAE689C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1DCAE661C(a1, a2, a3);
  v9 = *a3;
  if (*(float *)(*a4 + 20) < *(float *)(*a3 + 20))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(float *)(*a3 + 20) < *(float *)(*a2 + 20))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(float *)(*a2 + 20) < *(float *)(*a1 + 20))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void sub_1DCAE6934()
{
  JUMPOUT(0x1DF0D228CLL);
}

_QWORD *sub_1DCAE6948()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA5746D8;
  return result;
}

void sub_1DCAE696C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA5746D8;
}

_QWORD *sub_1DCAE6984()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  return result;
}

uint64_t sub_1DCAE69B4(uint64_t a1, uint64_t a2)
{
  if (sub_1DCAE69FC(a2, (uint64_t)&unk_1EA5740F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_1DCAE69F0()
{
  return &unk_1EA5740F8;
}

BOOL sub_1DCAE69FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void sub_1DCAE6A4C()
{
  JUMPOUT(0x1DF0D228CLL);
}

_QWORD *sub_1DCAE6A60()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA574730;
  return result;
}

void sub_1DCAE6A84(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA574730;
}

_QWORD *sub_1DCAE6A9C()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  return result;
}

uint64_t sub_1DCAE6ACC(uint64_t a1, uint64_t a2)
{
  if (sub_1DCAE69FC(a2, (uint64_t)&unk_1EA574108))
    return a1 + 8;
  else
    return 0;
}

void *sub_1DCAE6B08()
{
  return &unk_1EA574108;
}

uint64_t sub_1DCAE6B14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1DCAE6B78(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_1DCAE6BC0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1DCAE6BFC(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

uint64_t sub_1DCAE6BFC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  sub_1DCAE6B78(a1 + 384);
  sub_1DCAE6B78(a1 + 344);
  sub_1DCAE6B78(a1 + 304);
  sub_1DCAE6B78(a1 + 208);
  sub_1DCAE6B78(a1 + 168);
  v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(_QWORD *)(a1 + 152) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(_QWORD *)(a1 + 128) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD **)(a1 + 88);
  if (v5 == (_QWORD *)(a1 + 64))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 64);
  }
  else
  {
    if (!v5)
      goto LABEL_12;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_12:
  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 48) = v7;
    operator delete(v7);
  }
  sub_1DCAE4E44(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

uint64_t sub_1DCAE6CC0(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)*a1) >> 5) >= a4)
  {
    if (0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - v9) >> 5) >= a4)
    {
      result = sub_1DCAE6E88(a2, a3, (uint64_t)v9);
      a1[1] = v18;
    }
    else
    {
      v15 = a2 + 32 * (((_BYTE *)a1[1] - v9) >> 5);
      result = sub_1DCAE6E88(a2, v15, (uint64_t)v9);
      v16 = (char *)a1[1];
      if (v15 != a3)
      {
        result = (uint64_t)a1[1];
        do
        {
          sub_1DCAE501C(result, v15);
          v15 += 224;
          result = v17 + 224;
          v16 += 224;
        }
        while (v15 != a3);
      }
      a1[1] = v16;
    }
  }
  else
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x124924924924924)
      sub_1DCAE4C44();
    v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 5);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x92492492492492)
      v12 = 0x124924924924924;
    else
      v12 = v11;
    sub_1DCAE6E34(a1, v12);
    result = (uint64_t)a1[1];
    while (v6 != a3)
    {
      sub_1DCAE501C(result, v6);
      v6 += 224;
      result = v14 + 224;
    }
    a1[1] = (void *)result;
  }
  return result;
}

char *sub_1DCAE6E34(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x124924924924925)
    sub_1DCAE4C44();
  result = (char *)sub_1DCAE513C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[224 * v4];
  return result;
}

uint64_t sub_1DCAE6E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_1DCAE6EE4(a3, v4);
      v4 += 224;
      a3 += 224;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

float sub_1DCAE6EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  float result;

  v2 = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = 64;
  do
  {
    v4 = (_OWORD *)(a1 + v3);
    *(v4 - 3) = *(_OWORD *)(a2 + v3 - 48);
    *v4 = *(_OWORD *)(a2 + v3);
    v5 = a1 + v2;
    *(_QWORD *)(v5 + 176) = *(_QWORD *)(a2 + v2 + 176);
    *(_QWORD *)(v5 + 200) = *(_QWORD *)(a2 + v2 + 200);
    v2 += 8;
    v3 += 16;
  }
  while (v2 != 24);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  result = *(float *)(a2 + 168);
  *(float *)(a1 + 168) = result;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  return result;
}

_QWORD *sub_1DCAE6F68(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = *a2;
      if (v5 >= v6)
        v8 = v5 % v6;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v5)
        {
          if (i[2] == v5)
            return i;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6)
              v11 %= v6;
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  else
  {
    v8 = 0;
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v5;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_1DCAD4EF4(a1, v17);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v8) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6)
        v20 %= v6;
    }
    else
    {
      v20 &= v6 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1DCAE7170(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCAE7184(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    sub_1DCACAE54(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

_QWORD *sub_1DCAE7240(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = *a2;
      if (v6 <= v5)
        v8 = v5 % v6;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v5)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v5)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_1DCAD4EF4(a1, v17);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v8) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6)
        v20 %= v6;
    }
    else
    {
      v20 &= v6 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1DCAE7448(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCAE745C(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1DCAE7510(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  sub_1DCAE7550(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *sub_1DCAE7550@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1DCAE7684()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_1EA5747E0;
  __cxa_throw(exception, (struct type_info *)&unk_1EA574068, (void (*)(void *))std::exception::~exception);
}

void sub_1DCAE76BC(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1DF0D228CLL);
}

uint64_t sub_1DCAE76E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x124924924924924)
    sub_1DCAE4C44();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x92492492492492)
    v9 = 0x124924924924924;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1DCAE513C(v7, v9);
  else
    v10 = 0;
  __p = v10;
  v14 = &v10[224 * v4];
  v16 = &v10[224 * v9];
  sub_1DCAE501C((uint64_t)v14, a2);
  v15 = v14 + 224;
  sub_1DCAE50B8(a1, &__p);
  v11 = a1[1];
  if (v15 != v14)
    v15 += -224
         - 224 * ((((unint64_t)(v15 - v14 - 224) >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64);
  if (__p)
    operator delete(__p);
  return v11;
}

void sub_1DCAE7824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1DCAE7878(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    sub_1DCAE6E34(result, a4);
    result = (_QWORD *)v6[1];
    while (a2 != a3)
    {
      sub_1DCAE501C((uint64_t)result, a2);
      a2 += 224;
      result = (_QWORD *)(v7 + 224);
    }
    v6[1] = result;
  }
  return result;
}

void sub_1DCAE78D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1DCAE78F0(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DCAE7964(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DCAE7948(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DCAE7964(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_1DCAE4C44();
  result = (char *)sub_1DCAE79A4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *sub_1DCAE79A4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_1DCAE4CDC();
  return operator new(8 * a2);
}

float *sub_1DCAE79D8(_QWORD *a1, float32x2_t *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  float **v10;
  float *i;
  unint64_t v12;

  v4 = sub_1DCAE7AD0((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(float ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(float **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (sub_1DCAE7B40(i + 4, (float *)a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

unint64_t sub_1DCAE7AD0(uint64_t a1, float32x2_t *a2)
{
  int32x2_t v2;
  int8x16_t v3;
  int8x16_t v4;
  int64x2_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  v2 = vceqz_f32(*a2);
  v3.i64[0] = v2.i32[0];
  v3.i64[1] = v2.i32[1];
  v4 = v3;
  v3.i64[0] = a2->u32[0];
  v3.i64[1] = HIDWORD(*(unint64_t *)a2);
  v5 = (int64x2_t)vbicq_s8(v3, v4);
  v6 = veorq_s8((int8x16_t)v5, (int8x16_t)vdupq_laneq_s64(v5, 1)).u64[0];
  v5.i32[0] = a2[1].i32[0];
  v7 = v5.u32[0];
  if (*(float *)v5.i32 == 0.0)
    v7 = 0;
  v8 = v6 ^ v7;
  v9 = a2[2].f32[0];
  v10 = a2[2].f32[1];
  v11 = LODWORD(v9);
  if (v9 == 0.0)
    v11 = 0;
  v12 = LODWORD(v10);
  if (v10 == 0.0)
    v12 = 0;
  v13 = v11 ^ v12;
  v14 = a2[3].f32[0];
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  return v8 ^ v13 ^ v15;
}

BOOL sub_1DCAE7B40(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v8;
  float v9;
  float v10;
  BOOL v14;
  __int128 v15;
  BOOL v16;

  v2 = a1[1];
  v3 = a2[1];
  v4 = a1[2];
  v5 = a2[2];
  if (*a1 == *a2 && v2 == v3 && v4 == v5)
  {
    v8 = a2[4];
    v9 = a2[5];
    v10 = a2[6];
    if (a1[4] == v8 && a1[5] == v9 && a1[6] == v10)
      return 1;
  }
  else
  {
    v8 = a2[4];
    v9 = a2[5];
    v10 = a2[6];
  }
  v14 = *a1 == v8 && v2 == v9 && v4 == v10;
  if (v14
    && ((v15 = *((_OWORD *)a1 + 1), *(float *)&v15 == *a2)
      ? (v16 = COERCE_FLOAT(HIDWORD(*((_QWORD *)a1 + 2))) == v3)
      : (v16 = 0),
        v16))
  {
    return *((float *)&v15 + 2) == v5;
  }
  else
  {
    return 0;
  }
}

void *sub_1DCAE7BD0(uint64_t a1, float32x2_t *a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = (_QWORD *)(a1 + 24);
  v7 = sub_1DCAE7AD0(a1 + 24, a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v8)
        {
          if (sub_1DCAE7B40((float *)i + 4, (float *)a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9)
              v15 %= v9;
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  i = operator new(0x40uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  v16 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_OWORD *)i + 2) = v16;
  *((_DWORD *)i + 12) = *(_DWORD *)(a3 + 32);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_1DCAD4EF4(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v12) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v6;
  return i;
}

void sub_1DCAE7E04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCAE7E18(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_1DCAD4EF4(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_1DCAE6F68(a1, i + 2, i + 2);
  return a1;
}

void sub_1DCAE7E74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAE6B78(v1);
  _Unwind_Resume(a1);
}

void sub_1DCAE7E8C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (_QWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v9 = a2[2];
      v8[2] = v9;
      v10 = (_QWORD *)*v8;
      v8[1] = v9;
      v11 = sub_1DCAE7F94((uint64_t)a1, v9, v8 + 2);
      sub_1DCAE80E8(a1, v8, v11);
      a2 = (_QWORD *)*a2;
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v12 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_1DCAE841C(a1, a2 + 2);
      a2 = (_QWORD *)*a2;
    }
  }
}

void sub_1DCAE7F60(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1DCAE7F80(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCAE7F94(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    sub_1DCAE81D0(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

_QWORD *sub_1DCAE80E8(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void sub_1DCAE81D0(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_1DCAE82AC(a1, prime);
  }
}

void sub_1DCAE82AC(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      sub_1DCAE4CDC();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *sub_1DCAE841C(_QWORD *a1, unint64_t *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v4 = operator new(0x18uLL);
  v5 = *a2;
  v4[2] = *a2;
  *v4 = 0;
  v4[1] = v5;
  v6 = sub_1DCAE7F94((uint64_t)a1, v5, v4 + 2);
  sub_1DCAE80E8(a1, v4, v6);
  return v4;
}

void sub_1DCAE847C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCAE8490(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t *sub_1DCAE84F4(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = sub_1DCAE745C(a1, a2);
  if (result)
  {
    sub_1DCAE7510(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_1DCAE8528(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  sub_1DCAE85A0((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *sub_1DCAE85A0(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_1DCAE8610(v6, a2);
  return v3;
}

uint64_t *sub_1DCAE8610(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void sub_1DCAE8994(_QWORD *a1, int *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != (int *)a3)
    {
      v9 = a2[4];
      *((_DWORD *)v8 + 4) = v9;
      v10 = (uint64_t *)*v8;
      v8[1] = v9;
      v11 = (_QWORD *)sub_1DCAE8A9C((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      sub_1DCAE80E8(a1, v8, v11);
      a2 = *(int **)a2;
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v12 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != (int *)a3)
    {
      sub_1DCAE8E3C(a1, a2 + 4);
      a2 = *(int **)a2;
    }
  }
}

void sub_1DCAE8A68(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1DCAE8A88(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1DCAE8A9C(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    sub_1DCAE8BF0(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = *(_QWORD *)v16;
    if (!v16)
      break;
    v19 = *(_QWORD *)(v16 + 8);
    if (v14.u32[0] > 1uLL)
    {
      v20 = *(_QWORD *)(v16 + 8);
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && *(_DWORD *)(v16 + 16) == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void sub_1DCAE8BF0(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_1DCAE8CCC(a1, prime);
  }
}

void sub_1DCAE8CCC(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      sub_1DCAE4CDC();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = *v7; *v7; i = *v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = (uint64_t **)i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (uint64_t *)*v13;
            }
            while (v13 && *((_DWORD *)i + 4) == *((_DWORD *)v13 + 4));
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = (uint64_t **)i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_DWORD *sub_1DCAE8E3C(_QWORD *a1, int *a2)
{
  _DWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v4 = operator new(0x18uLL);
  v5 = *a2;
  v4[4] = v5;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = v5;
  v6 = (_QWORD *)sub_1DCAE8A9C((uint64_t)a1, v5, v4 + 4);
  sub_1DCAE80E8(a1, v4, v6);
  return v4;
}

void sub_1DCAE8E9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1DCAE8F94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAE9008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCAE90A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAE9134(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAE91C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAE9260(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAE92FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCAE93A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCAE9440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCAE94D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAE9570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCAE96B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1DCAE9748(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAE98B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAE992C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAE99CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAE9A78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAE9C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1DCAE9DB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCAE9FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1DCAEA240(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1DCAEA378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAEA460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAEA588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCAEA614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAEA83C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAEA90C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAEAAF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAEACA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DCAEAE5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCAEAF54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAEB4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1DCAEBE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1DCAEC18C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAEC1B0(void *a1, void *a2)
{
  id *v3;
  id v4;
  const char *v5;
  const char *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if ((objc_msgSend_containsObject_(v4, v5, (uint64_t)v3) & 1) == 0)
  {
    objc_msgSend_addObject_(v4, v6, (uint64_t)v3);
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v7 = v3[3];
    v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v13, v17, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v14;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v14 != v10)
            objc_enumerationMutation(v7);
          sub_1DCAEC1B0(*(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v11++), v4);
        }
        while (v9 != v11);
        v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v12, (uint64_t)&v13, v17, 16);
      }
      while (v9);
    }

    (*((void (**)(id))v3[4] + 2))(v3[4]);
  }

}

void sub_1DCAEC2E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCAEC4C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DCAECA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  void *v35;

  if (__p)
    operator delete(__p);
  if (a34)
    operator delete(a34);

  _Unwind_Resume(a1);
}

void sub_1DCAECC80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCAECD4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCAECE24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CGColorRef sub_1DCAECFE4(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int8x16_t v3;
  float32x4_t v4;
  float32x4_t v5;
  CGColorSpace *v6;
  CGColorRef v7;
  float32x4_t v9;
  CGFloat components[2];
  double v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = 0uLL;
  if (a1.f32[0] >= 1000.0 && a1.f32[0] <= 40000.0)
  {
    a2.i32[0] = 1170939904;
    v3 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(a2, a1)), 0);
    v4 = vaddq_f32(vdivq_f32((float32x4_t)vbslq_s8(v3, (int8x16_t)xmmword_1DCC57CF0, (int8x16_t)xmmword_1DCC57CE0), vaddq_f32((float32x4_t)vbslq_s8(v3, (int8x16_t)xmmword_1DCC57D10, (int8x16_t)xmmword_1DCC57D00), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1.f32, 0))), (float32x4_t)vbslq_s8(v3, (int8x16_t)xmmword_1DCC57CD0, (int8x16_t)xmmword_1DCC57CC0));
    v4.i32[3] = 0;
    v5 = vmaxnmq_f32(v4, (float32x4_t)0);
    v5.i32[3] = 0;
    v2 = vminnmq_f32(v5, (float32x4_t)xmmword_1DCC57D20);
  }
  v9 = v2;
  v6 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)v9.f32);
  v11 = v9.f32[2];
  v12 = 0x3FF0000000000000;
  v7 = CGColorCreate(v6, components);
  CGColorSpaceRelease(v6);
  return v7;
}

__n64 sub_1DCAED120(CGColor *a1)
{
  CGColorSpace *v2;
  CGColor *CopyByMatchingToColorSpace;
  const CGFloat *Components;
  float v5;
  float v6;
  float v7;
  float32x4_t v8;
  float v9;
  float32x4_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v19;
  int32x4_t v21;
  float v22;
  __n64 result;

  v2 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace(v2, kCGRenderingIntentAbsoluteColorimetric, a1, 0);
  CGColorSpaceRelease(v2);
  Components = CGColorGetComponents(CopyByMatchingToColorSpace);
  v5 = *Components;
  v6 = Components[1];
  v7 = Components[2];
  CGColorRelease(CopyByMatchingToColorSpace);
  v9 = fminf(v5, fminf(v6, v7));
  v10.f32[0] = fmaxf(v5, fmaxf(v6, v7));
  v11 = v10.f32[0] - v9;
  v12 = (float)(v9 + v10.f32[0]) * 0.5;
  v13 = 0.0;
  if (v12 >= 0.5)
    v14 = 1.0 - v12;
  else
    v14 = v12;
  v15 = v11 / (v14 + v14);
  if (v12 <= 0.0 || v12 >= 1.0)
    v15 = 0.0;
  if (v10.f32[0] != v6 && v10.f32[0] == v5)
    v8.f32[0] = 1.0;
  else
    v8.f32[0] = 0.0;
  if (v10.f32[0] != v7 && v10.f32[0] == v6)
    v19 = 1.0;
  else
    v19 = 0.0;
  if (v10.f32[0] != v5 && v10.f32[0] == v7)
    v10.f32[0] = 1.0;
  else
    v10.f32[0] = 0.0;
  v8.f32[1] = v19;
  v8.i32[2] = v10.i32[0];
  v10.f32[0] = (float)(v6 - v7) * (float)(1.0 / v11);
  v10.f32[1] = (float)((float)(v7 - v5) * (float)(1.0 / v11)) + 2.0;
  v10.f32[2] = (float)((float)(v5 - v6) * (float)(1.0 / v11)) + 4.0;
  v21 = (int32x4_t)vmulq_f32(v8, v10);
  LODWORD(v22) = vaddq_f32(vaddq_f32((float32x4_t)v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 1)), (float32x4_t)vdupq_laneq_s32(v21, 2)).u32[0];
  if (v11 > 0.0)
    v13 = 0.16667;
  result.n64_f32[0] = v13 * v22;
  if (result.n64_f32[0] < 0.0)
    result.n64_f32[0] = result.n64_f32[0] + 1.0;
  result.n64_f32[1] = v15;
  return result;
}

double sub_1DCAED290(float32x4_t a1)
{
  float v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;

  v1 = 6.0 * a1.f32[0];
  v2.i64[0] = 0;
  if (a1.f32[0] >= 0.66667)
  {
    v2.f32[0] = v1 + -4.0;
    v2.f32[2] = 6.0 - v1;
  }
  else
  {
    v2.f32[1] = 4.0 - v1;
    v2.f32[2] = v1 + -2.0;
  }
  if (a1.f32[0] < 0.33333)
  {
    v3.i64[1] = 0;
    v3.f32[0] = 2.0 - v1;
    v3.f32[1] = 6.0 * a1.f32[0];
    v2 = v3;
  }
  v2.i32[3] = 0;
  v4 = vminnmq_f32(v2, (float32x4_t)xmmword_1DCC57D20);
  v2.f32[0] = 1.0 - a1.f32[1];
  v5 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 0), v4, a1.f32[1] + a1.f32[1]);
  if (a1.f32[2] >= 0.5)
  {
    a1.f32[0] = (float)(a1.f32[2] * 2.0) + -1.0;
    a1.i64[0] = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1.f32, 0), v5, 1.0 - a1.f32[2]).u64[0];
  }
  else
  {
    a1.i64[0] = vmulq_laneq_f32(v5, a1, 2).u64[0];
  }
  return *(double *)a1.i64;
}

float sub_1DCAED364(float *a1, float *a2, float *a3, float a4, float a5, float a6, float a7)
{
  __double2 v11;
  double v12;
  int v13;
  float32x2_t v14;
  int32x2_t v15;
  int v16;
  float32x2_t v17;
  int v18;
  double v19;
  float32x2_t v20;
  float v21;
  int32x2_t v22;
  int32x2_t v23;
  _BOOL4 v24;
  _BOOL4 v25;
  float sinval;
  float cosval;
  float v29;
  float64x2_t v30;
  float64x2_t v36;
  float64x2_t v37;
  int v38;
  float32x2_t v39;
  float v40;
  float32x2_t v41;
  float32x2_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float32x2_t *v49;
  float32x2_t *v50;
  float64x2_t v51;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  float32x2_t *v62;
  float32x2_t *v63;
  float v65;
  float v66;
  float32x2_t v67;
  float32x2_t v68;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  float32x2_t *v76;
  float32x2_t *v77;
  float32x2_t v78;
  float v79;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  uint64_t v86;
  float32x2_t *v87;
  float32x2_t *v88;
  float v89;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v108;

  v11 = __sincos_stret(a7);
  v12 = (float)((float)(a5 + a4) + a6) * 0.333333333;
  *(float *)&v12 = v12;
  v13 = (int)(float)(*(float *)&v12 + a6) - ((float)(*(float *)&v12 + a6) <= 0.0);
  v14 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&v12, 0), (float32x2_t)__PAIR64__(LODWORD(a5), LODWORD(a4)));
  v15 = vadd_s32((int32x2_t)vmvn_s8((int8x8_t)vcgtz_f32(v14)), vcvt_s32_f32(v14));
  v16 = v15.i32[1];
  v17 = vcvt_f32_s32(v15);
  v18 = v15.i32[0];
  v19 = (float)(v15.i32[0] + v13 + v15.i32[1]) * 0.166666667;
  *(float *)&v19 = v19;
  v20 = vadd_f32(vsub_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&v19, 0), v17), (float32x2_t)__PAIR64__(LODWORD(a5), LODWORD(a4)));
  v21 = (float)(*(float *)&v19 - (float)v13) + a6;
  if (v20.f32[0] >= v20.f32[1])
  {
    if (v20.f32[1] < v21)
    {
      v24 = v20.f32[0] < v21;
      v22 = (int32x2_t)(v20.f32[0] >= v21);
      v23 = (int32x2_t)1;
      goto LABEL_6;
    }
    v24 = 0;
    v25 = 0;
    v22 = (int32x2_t)1;
    v23 = (int32x2_t)0x100000001;
  }
  else
  {
    if (v20.f32[1] < v21)
    {
      v22 = 0;
      v23 = (int32x2_t)0x100000000;
      v24 = 1;
LABEL_6:
      v25 = 1;
      goto LABEL_9;
    }
    v24 = 0;
    v25 = v20.f32[0] < v21;
    v23.i32[1] = 1;
    v23.i32[0] = v20.f32[0] >= v21;
    v22 = (int32x2_t)0x100000000;
  }
LABEL_9:
  sinval = v11.__sinval;
  cosval = v11.__cosval;
  _D0 = vcvt_f32_f64(vaddq_f64(vcvtq_f64_f32(vsub_f32(v20, vcvt_f32_s32(v22))), (float64x2_t)vdupq_n_s64(0x3FC55555560C95D4uLL)));
  v29 = (float)(v21 - (float)v24) + 0.166666667;
  v30 = vaddq_f64(vcvtq_f64_f32(vsub_f32(v20, vcvt_f32_s32(v23))), (float64x2_t)vdupq_n_s64(0x3FD55555560C95D4uLL));
  __asm { FMOV            V4.2S, #-1.0 }
  v36 = vcvtq_f64_f32(vadd_f32(v20, _D4));
  v37 = (float64x2_t)vdupq_n_s64(0x3FE000000089705FuLL);
  _NF = -v18 < 0;
  v18 = v18;
  if (!_NF)
    v18 = --(char)v18;
  _NF = -v16 < 0;
  v16 = v16;
  if (!_NF)
    v16 = --(char)v16;
  if (v13 <= 0)
    v38 = --(char)v13;
  else
    v38 = v13;
  v39 = vmul_f32(v20, v20);
  v40 = 0.6 - (float)((float)(v39.f32[0] + (float)(v21 * v21)) + v39.f32[1]);
  v41.i32[0] = 0;
  v42.i32[0] = 0;
  v43 = 0.0;
  v44 = 0.0;
  v45 = 0.0;
  v46 = 0.0;
  v47 = 0.0;
  v48 = 0.0;
  if (v40 >= 0.0)
  {
    v49 = (float32x2_t *)((char *)&unk_1DCC57D7C
                        + 12 * (byte_1DCC57EFC[byte_1DCC57EFC[byte_1DCC57EFC[v38] + (uint64_t)v16] + (uint64_t)v18] & 0xF));
    v50 = (float32x2_t *)((char *)&unk_1DCC57E3C
                        + 12 * (byte_1DCC57EFC[byte_1DCC57EFC[byte_1DCC57EFC[v38] + (uint64_t)v16] + (uint64_t)v18] & 0xF));
    v44 = (float)(v49[1].f32[0] * cosval) + (float)(v50[1].f32[0] * sinval);
    v46 = v40 * v40;
    v47 = v46 * v46;
    v42 = vmla_n_f32(vmul_n_f32(*v49, cosval), *v50, sinval);
    v48 = (float)(vaddv_f32(vmul_f32(v42, v20)) + (float)(v44 * v21)) * (float)(v46 * v46);
    v43 = v42.f32[1];
    v45 = v40;
  }
  v101 = v45;
  v103 = v46;
  v105 = v43;
  v51 = vaddq_f64(v36, v37);
  _D25 = vcvt_f32_f64(v30);
  v53 = (float)(v21 - (float)v25) + 0.333333334;
  v54 = 0.6 - (float)(vaddv_f32(vmul_f32(_D0, _D0)) + (float)(v29 * v29));
  v55 = 0.0;
  v56 = 0.0;
  v57 = 0.0;
  v58 = 0.0;
  v59 = 0.0;
  v60 = 0.0;
  if (v54 >= 0.0)
  {
    v61 = 3
        * (byte_1DCC57EFC[byte_1DCC57EFC[byte_1DCC57EFC[v24 + (uint64_t)v38] + (uint64_t)(v22.i32[1] + v16)]
                        + (uint64_t)(v22.i32[0] + v18)] & 0xF);
    v62 = (float32x2_t *)((char *)&unk_1DCC57D7C + 4 * v61);
    v63 = (float32x2_t *)((char *)&unk_1DCC57E3C + 4 * v61);
    v56 = (float)(v62[1].f32[0] * cosval) + (float)(v63[1].f32[0] * sinval);
    v58 = v54 * v54;
    v59 = v58 * v58;
    v41 = vmla_n_f32(vmul_n_f32(*v62, cosval), *v63, sinval);
    v60 = (float)(vaddv_f32(vmul_f32(v41, _D0)) + (float)(v56 * v29)) * (float)(v58 * v58);
    v55 = v41.f32[1];
    v57 = v54;
  }
  v102 = v55;
  v104 = v29;
  v106 = v47;
  v108 = v44;
  _D8 = vcvt_f32_f64(v51);
  v65 = (float)(v21 + -1.0) + 0.500000001;
  v66 = 0.6 - (float)(vaddv_f32(vmul_f32(_D25, _D25)) + (float)(v53 * v53));
  v67.i32[0] = 0;
  v68.i32[0] = 0;
  _S15 = 0.0;
  v70 = 0.0;
  v71 = 0.0;
  v72 = 0.0;
  v73 = 0.0;
  v74 = 0.0;
  if (v66 >= 0.0)
  {
    v75 = 3
        * (byte_1DCC57EFC[byte_1DCC57EFC[byte_1DCC57EFC[v25 + (uint64_t)v38] + (uint64_t)(v23.i32[1] + v16)]
                        + (uint64_t)(v23.i32[0] + v18)] & 0xF);
    v76 = (float32x2_t *)((char *)&unk_1DCC57D7C + 4 * v75);
    v77 = (float32x2_t *)((char *)&unk_1DCC57E3C + 4 * v75);
    v70 = (float)(v76[1].f32[0] * cosval) + (float)(v77[1].f32[0] * sinval);
    v72 = v66 * v66;
    v73 = v72 * v72;
    v68 = vmla_n_f32(vmul_n_f32(*v76, cosval), *v77, sinval);
    v74 = (float)(vaddv_f32(vmul_f32(v68, _D25)) + (float)(v70 * v53)) * (float)(v72 * v72);
    _S15 = v68.f32[1];
    v71 = v66;
  }
  v78 = vmul_f32(_D8, _D8);
  v79 = 0.6 - (float)((float)(v78.f32[0] + (float)(v65 * v65)) + v78.f32[1]);
  _S23 = 0.0;
  v81 = 0.0;
  v82 = 0.0;
  v83 = 0.0;
  v84 = 0.0;
  v85 = 0.0;
  if (v79 >= 0.0)
  {
    v86 = 3 * (byte_1DCC57EFC[byte_1DCC57EFC[byte_1DCC57EFC[v38 + 1] + 1 + (uint64_t)v16] + 1 + (uint64_t)v18] & 0xF);
    v87 = (float32x2_t *)((char *)&unk_1DCC57D7C
                        + 12
                        * (byte_1DCC57EFC[byte_1DCC57EFC[byte_1DCC57EFC[v38 + 1] + 1 + (uint64_t)v16] + 1 + (uint64_t)v18] & 0xF));
    v88 = (float32x2_t *)((char *)&unk_1DCC57E3C + 4 * v86);
    v81 = (float)(v87[1].f32[0] * cosval) + (float)(v88[1].f32[0] * sinval);
    v83 = v79 * v79;
    v84 = v83 * v83;
    v67 = vmla_n_f32(vmul_n_f32(*v87, cosval), *v88, sinval);
    v85 = (float)(vaddv_f32(vmul_f32(v67, _D8)) + (float)(v81 * v65)) * (float)(v83 * v83);
    _S23 = v67.f32[1];
    v82 = v79;
  }
  if (a1 && a2 && a3)
  {
    v89 = (float)(v103 * v101)
        * (float)((float)((float)(v42.f32[0] * v20.f32[0]) + (float)(v105 * v20.f32[1])) + (float)(v108 * v21));
    *a1 = v89 * v20.f32[0];
    *a2 = v89 * v20.f32[1];
    *a3 = v89 * v21;
    _S19 = v102;
    __asm { FMLA            S3, S19, V0.S[1] }
    _S2 = (float)(v58 * v57) * (float)(_S3 + (float)(v56 * v104));
    *a1 = vmlas_n_f32(*a1, _S2, _D0.f32[0]);
    __asm { FMLA            S3, S2, V0.S[1] }
    *(_DWORD *)a2 = _S3;
    *a3 = *a3 + (float)(_S2 * v104);
    __asm { FMLA            S1, S15, V25.S[1] }
    _S0 = (float)(v72 * v71) * (float)(_S1 + (float)(v70 * v53));
    *a1 = vmlas_n_f32(*a1, _S0, _D25.f32[0]);
    __asm { FMLA            S1, S0, V25.S[1] }
    *(_DWORD *)a2 = _S1;
    *a3 = *a3 + (float)(_S0 * v53);
    __asm { FMLA            S1, S23, V8.S[1] }
    _S0 = (float)(v83 * v82) * (float)(_S1 + (float)(v81 * v65));
    *a1 = vmlas_n_f32(*a1, _S0, _D8.f32[0]);
    __asm { FMLA            S1, S0, V8.S[1] }
    *(_DWORD *)a2 = _S1;
    *a3 = *a3 + (float)(_S0 * v65);
    *a1 = *a1 * -8.0;
    *a2 = *a2 * -8.0;
    *a3 = *a3 * -8.0;
    *a1 = (float)((float)((float)(*a1 + (float)(v106 * v42.f32[0])) + (float)(v59 * v41.f32[0]))
                + (float)(v73 * v68.f32[0]))
        + (float)(v84 * v67.f32[0]);
    *a2 = (float)((float)((float)(*a2 + (float)(v106 * v105)) + (float)(v59 * v102)) + (float)(v73 * _S15))
        + (float)(v84 * _S23);
    *a3 = (float)((float)((float)(*a3 + (float)(v106 * v108)) + (float)(v59 * v56)) + (float)(v73 * v70))
        + (float)(v84 * v81);
    *a1 = *a1 * 28.0;
    *a2 = *a2 * 28.0;
    *a3 = *a3 * 28.0;
  }
  return (float)((float)(v60 + v48) + (float)(v74 + v85)) * 28.0;
}

id sub_1DCAEDA84(void *a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  int *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int *v52;
  unint64_t v53;
  const char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  int v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  int v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  int v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  int v92;
  unsigned int *v93;
  unsigned int v94;
  unint64_t v95;
  int *v96;
  int v97;
  unint64_t v98;
  int v99;
  char *v100;
  int v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  int v111;
  int v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  int v120;
  MDLMesh *v122;
  const char *v123;
  void *v124;
  const char *v125;
  void *v126;
  const char *v127;
  void *v128;
  const char *v129;
  const char *v130;
  void *v131;
  const char *v132;
  void *v133;
  const char *v134;
  id v135;
  const char *v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  void *v140;
  const char *v141;
  void *v142;
  const char *v143;
  id v144;
  const char *v145;
  void *v146;
  const char *v147;
  MDLMaterial *v148;
  const char *v149;
  void *v150;
  void *v151;
  const char *v152;
  void *v153;
  const char *v154;
  void *v155;
  double v156;
  const char *v157;
  uint64_t v158;
  const char *v159;
  void *v160;
  double v161;
  const char *v162;
  uint64_t v163;
  MDLSubmesh *v164;
  const char *v165;
  void *v166;
  const char *v167;
  id v168;
  const char *v169;
  const char *v170;
  id v171;
  unsigned int *v172;
  unsigned int v173;
  id v175;
  int *v176;
  unint64_t v177;
  int *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  void *v184;
  char *v185;
  char *v186;
  void *__p;
  char *v188;
  char *v189;
  __int128 v190;
  __int128 v191;
  int *v192;
  __int128 v193;
  __int128 v194;
  int *v195;
  uint64_t v196;
  _OWORD v197[2];
  _DWORD *v198;
  _QWORD v199[3];
  uint64_t v200[4];

  v200[2] = *MEMORY[0x1E0C80C00];
  v175 = a1;
  v199[1] = 0;
  v199[2] = 0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v199[0] = MEMORY[0x1E0DF30C0] + 16;
  v198 = 0;
  memset(v197, 0, sizeof(v197));
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(v3);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
  if ((BYTE8(v194) & 7) != 0)
  {
    v4 = (unsigned int *)(*((_QWORD *)&v194 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v194);
  if (*((_QWORD *)&v193 + 1))
    sub_1DCAEED94(*((uint64_t *)&v193 + 1));
  v196 = 0;
  v200[0] = 0;
  v200[1] = 0;
  sub_1DCB2EEE0((uint64_t)a2, &v196, v200);
  v195 = 0;
  v193 = 0u;
  v194 = 0u;
  v6 = sub_1DCAEEACC((pxrInternal__aapl__pxrReserved__::VtValue *)v200);
  v7 = *(_OWORD *)(v6 + 16);
  v193 = *(_OWORD *)v6;
  v194 = v7;
  v8 = *(int **)(v6 + 32);
  v195 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 4);
    if (*((_QWORD *)&v194 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v194 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (!(_QWORD)v193)
  {
    sub_1DCAEEB34((uint64_t)&v190, 1uLL);
    sub_1DCAEEE78((uint64_t)&v193);
    v193 = v190;
    v194 = v191;
    v190 = 0u;
    v191 = 0u;
    v195 = v192;
    v192 = 0;
    sub_1DCAEEE78((uint64_t)&v190);
    sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v193);
    *(_OWORD *)v195 = xmmword_1DCC58100;
    v11 = atomic_load(MEMORY[0x1E0DF24F8]);
    if (!v11)
      v11 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
    sub_1DCAEEBA4(&v196, (_QWORD *)(v11 + 136));
  }
  __p = 0;
  v188 = 0;
  v189 = 0;
  v184 = 0;
  v185 = 0;
  v186 = 0;
  sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v197);
  v12 = v198;
  sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v197);
  v13 = &v198[3 * *(_QWORD *)&v197[0]];
  if (v12 != v13)
  {
    v14 = 0;
    v15 = (unint64_t *)MEMORY[0x1E0DF24F8];
    do
    {
      v17 = v188;
      v16 = v189;
      if (v188 >= v189)
      {
        v19 = (char *)__p;
        v20 = (v188 - (_BYTE *)__p) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          goto LABEL_207;
        v22 = v189 - (_BYTE *)__p;
        if ((v189 - (_BYTE *)__p) >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)sub_1DCAE4D04((uint64_t)&v189, v23);
          v19 = (char *)__p;
          v17 = v188;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v20];
        *(_DWORD *)v25 = *v12;
        v18 = v25 + 4;
        while (v17 != v19)
        {
          v26 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        v16 = &v24[4 * v23];
        __p = v25;
        v188 = v18;
        v189 = v16;
        if (v19)
        {
          operator delete(v19);
          v16 = v189;
        }
      }
      else
      {
        *(_DWORD *)v188 = *v12;
        v18 = v17 + 4;
      }
      v188 = v18;
      if (v18 >= v16)
      {
        v28 = (char *)__p;
        v29 = (v18 - (_BYTE *)__p) >> 2;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62)
          goto LABEL_207;
        v31 = v16 - (_BYTE *)__p;
        if (v31 >> 1 > v30)
          v30 = v31 >> 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)sub_1DCAE4D04((uint64_t)&v189, v32);
          v28 = (char *)__p;
          v18 = v188;
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[4 * v29];
        *(_DWORD *)v34 = v12[1];
        v27 = v34 + 4;
        while (v18 != v28)
        {
          v35 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        v16 = &v33[4 * v32];
        __p = v34;
        v188 = v27;
        v189 = v16;
        if (v28)
        {
          operator delete(v28);
          v16 = v189;
        }
      }
      else
      {
        *(_DWORD *)v18 = v12[1];
        v27 = v18 + 4;
      }
      v188 = v27;
      if (v27 >= v16)
      {
        v37 = (char *)__p;
        v38 = (v27 - (_BYTE *)__p) >> 2;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
LABEL_207:
          sub_1DCAE4C44();
        v40 = v16 - (_BYTE *)__p;
        if (v40 >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)sub_1DCAE4D04((uint64_t)&v189, v41);
          v37 = (char *)__p;
          v27 = v188;
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[4 * v38];
        *(_DWORD *)v43 = v12[2];
        v36 = v43 + 4;
        while (v27 != v37)
        {
          v44 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *((_DWORD *)v43 - 1) = v44;
          v43 -= 4;
        }
        __p = v43;
        v188 = v36;
        v189 = &v42[4 * v41];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *(_DWORD *)v27 = v12[2];
        v36 = v27 + 4;
      }
      v188 = v36;
      sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v193);
      v46 = *v195;
      v45 = v195[1];
      v48 = v195[2];
      v47 = v195[3];
      v49 = atomic_load(v15);
      if (!v49)
        v49 = sub_1DCAEF3C0(v15);
      if ((v196 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v49 + 1160) & 0xFFFFFFFFFFFFFFF8))
      {
        v50 = atomic_load(v15);
        if (!v50)
          v50 = sub_1DCAEF3C0(v15);
        if ((v196 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v50 + 1224) & 0xFFFFFFFFFFFFFFF8))
        {
          if ((unint64_t)v193 <= v14)
          {
            v53 = *(_QWORD *)sub_1DCAEEC08(a2) & 0xFFFFFFFFFFFFFFF8;
            if (v53)
            {
              v54 = (const char *)(v53 + 16);
              if (*(char *)(v53 + 39) < 0)
                v54 = *(const char **)v54;
            }
            else
            {
              v54 = "";
            }
            NSLog(CFSTR("Warning: Invalid color data found for %s"), v54);
          }
          else
          {
            sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v193);
            v52 = &v195[4 * v14];
            v46 = *v52;
            v45 = v52[1];
            v48 = v52[2];
            v47 = v52[3];
          }
        }
        else if (!atomic_load(v15))
        {
          sub_1DCAEF3C0(v15);
        }
      }
      v56 = v185;
      v55 = v186;
      if (v185 >= v186)
      {
        v58 = (char *)v184;
        v59 = (v185 - (_BYTE *)v184) >> 2;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 62)
          goto LABEL_206;
        v61 = v186 - (_BYTE *)v184;
        if ((v186 - (_BYTE *)v184) >> 1 > v60)
          v60 = v61 >> 1;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
          v62 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v62 = v60;
        if (v62)
        {
          v63 = (char *)sub_1DCAE4D04((uint64_t)&v186, v62);
          v58 = (char *)v184;
          v56 = v185;
        }
        else
        {
          v63 = 0;
        }
        v64 = &v63[4 * v59];
        *(_DWORD *)v64 = v46;
        v57 = v64 + 4;
        while (v56 != v58)
        {
          v65 = *((_DWORD *)v56 - 1);
          v56 -= 4;
          *((_DWORD *)v64 - 1) = v65;
          v64 -= 4;
        }
        v55 = &v63[4 * v62];
        v184 = v64;
        v185 = v57;
        v186 = v55;
        if (v58)
        {
          operator delete(v58);
          v55 = v186;
        }
      }
      else
      {
        *(_DWORD *)v185 = v46;
        v57 = v56 + 4;
      }
      v185 = v57;
      if (v57 >= v55)
      {
        v67 = (char *)v184;
        v68 = (v57 - (_BYTE *)v184) >> 2;
        v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 62)
          goto LABEL_206;
        v70 = v55 - (_BYTE *)v184;
        if (v70 >> 1 > v69)
          v69 = v70 >> 1;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
          v71 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v71 = v69;
        if (v71)
        {
          v72 = (char *)sub_1DCAE4D04((uint64_t)&v186, v71);
          v67 = (char *)v184;
          v57 = v185;
        }
        else
        {
          v72 = 0;
        }
        v73 = &v72[4 * v68];
        *(_DWORD *)v73 = v45;
        v66 = v73 + 4;
        while (v57 != v67)
        {
          v74 = *((_DWORD *)v57 - 1);
          v57 -= 4;
          *((_DWORD *)v73 - 1) = v74;
          v73 -= 4;
        }
        v55 = &v72[4 * v71];
        v184 = v73;
        v185 = v66;
        v186 = v55;
        if (v67)
        {
          operator delete(v67);
          v55 = v186;
        }
      }
      else
      {
        *(_DWORD *)v57 = v45;
        v66 = v57 + 4;
      }
      v185 = v66;
      if (v66 >= v55)
      {
        v76 = (char *)v184;
        v77 = (v66 - (_BYTE *)v184) >> 2;
        v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 62)
          goto LABEL_206;
        v79 = v55 - (_BYTE *)v184;
        if (v79 >> 1 > v78)
          v78 = v79 >> 1;
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
          v80 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v80 = v78;
        if (v80)
        {
          v81 = (char *)sub_1DCAE4D04((uint64_t)&v186, v80);
          v76 = (char *)v184;
          v66 = v185;
        }
        else
        {
          v81 = 0;
        }
        v82 = &v81[4 * v77];
        *(_DWORD *)v82 = v48;
        v75 = v82 + 4;
        while (v66 != v76)
        {
          v83 = *((_DWORD *)v66 - 1);
          v66 -= 4;
          *((_DWORD *)v82 - 1) = v83;
          v82 -= 4;
        }
        v55 = &v81[4 * v80];
        v184 = v82;
        v185 = v75;
        v186 = v55;
        if (v76)
        {
          operator delete(v76);
          v55 = v186;
        }
      }
      else
      {
        *(_DWORD *)v66 = v48;
        v75 = v66 + 4;
      }
      v185 = v75;
      if (v75 >= v55)
      {
        v85 = (char *)v184;
        v86 = (v75 - (_BYTE *)v184) >> 2;
        v87 = v86 + 1;
        if ((unint64_t)(v86 + 1) >> 62)
LABEL_206:
          sub_1DCAE4C44();
        v88 = v55 - (_BYTE *)v184;
        if (v88 >> 1 > v87)
          v87 = v88 >> 1;
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
          v89 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v89 = v87;
        if (v89)
        {
          v90 = (char *)sub_1DCAE4D04((uint64_t)&v186, v89);
          v85 = (char *)v184;
          v75 = v185;
        }
        else
        {
          v90 = 0;
        }
        v91 = &v90[4 * v86];
        *(_DWORD *)v91 = v47;
        v84 = v91 + 4;
        while (v75 != v85)
        {
          v92 = *((_DWORD *)v75 - 1);
          v75 -= 4;
          *((_DWORD *)v91 - 1) = v92;
          v91 -= 4;
        }
        v184 = v91;
        v185 = v84;
        v186 = &v90[4 * v89];
        if (v85)
          operator delete(v85);
      }
      else
      {
        *(_DWORD *)v75 = v47;
        v84 = v75 + 4;
      }
      v185 = v84;
      ++v14;
      v12 += 3;
    }
    while (v12 != v13);
  }
  v192 = 0;
  v190 = 0u;
  v191 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomCurves::GetCurveVertexCountsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCurves *)v199);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
  if ((v183 & 7) != 0)
  {
    v93 = (unsigned int *)(v183 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v182);
  if (v180)
    sub_1DCAEED94(v180);
  v179 = 0;
  v181 = 0;
  v182 = 0;
  v95 = *(_QWORD *)&v197[0];
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v190);
  v96 = v192;
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v190);
  v176 = &v192[v190];
  if (v96 != v176)
  {
    v97 = 0;
    while (1)
    {
      v98 = *v96;
      if ((v98 & 0x80000000) != 0 || v95 < v98)
        break;
      v177 = v95 - v98;
      v178 = v96;
      if (v98 >= 2)
      {
        v99 = 0;
        v100 = v181;
        do
        {
          v101 = v99 + v97;
          v102 = v182;
          if (v100 >= v182)
          {
            v104 = v179;
            v105 = (v100 - v179) >> 2;
            v106 = v105 + 1;
            if ((unint64_t)(v105 + 1) >> 62)
              sub_1DCAE4C44();
            v107 = v182 - v179;
            if ((v182 - v179) >> 1 > v106)
              v106 = v107 >> 1;
            if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
              v108 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v108 = v106;
            if (v108)
            {
              v109 = (char *)sub_1DCAE4D04((uint64_t)&v182, v108);
              v104 = v179;
              v100 = v181;
            }
            else
            {
              v109 = 0;
            }
            v110 = &v109[4 * v105];
            *(_DWORD *)v110 = v101;
            v103 = v110 + 4;
            while (v100 != v104)
            {
              v111 = *((_DWORD *)v100 - 1);
              v100 -= 4;
              *((_DWORD *)v110 - 1) = v111;
              v110 -= 4;
            }
            v102 = &v109[4 * v108];
            v179 = v110;
            v182 = v102;
            if (v104)
            {
              operator delete(v104);
              v102 = v182;
            }
          }
          else
          {
            *(_DWORD *)v100 = v101;
            v103 = v100 + 4;
          }
          v112 = v101 + 1;
          if (v103 >= v102)
          {
            v113 = v179;
            v114 = (v103 - v179) >> 2;
            v115 = v114 + 1;
            if ((unint64_t)(v114 + 1) >> 62)
              sub_1DCAE4C44();
            v116 = v102 - v179;
            if (v116 >> 1 > v115)
              v115 = v116 >> 1;
            if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL)
              v117 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v117 = v115;
            if (v117)
            {
              v118 = (char *)sub_1DCAE4D04((uint64_t)&v182, v117);
              v113 = v179;
            }
            else
            {
              v118 = 0;
            }
            v119 = &v118[4 * v114];
            *(_DWORD *)v119 = v112;
            v100 = v119 + 4;
            while (v103 != v113)
            {
              v120 = *((_DWORD *)v103 - 1);
              v103 -= 4;
              *((_DWORD *)v119 - 1) = v120;
              v119 -= 4;
            }
            v179 = v119;
            v182 = &v118[4 * v117];
            if (v113)
              operator delete(v113);
          }
          else
          {
            *(_DWORD *)v103 = v112;
            v100 = v103 + 4;
          }
          v181 = v100;
        }
        while (v99++ != (_DWORD)v98 - 2);
      }
      v97 += v98;
      v95 = v177;
      v96 = v178 + 1;
      if (v178 + 1 == v176)
        goto LABEL_192;
    }
    NSLog(CFSTR("Curve vertex count (%d) out of range [0, %zu].\n"), *v96, v95);
  }
LABEL_192:
  v122 = [MDLMesh alloc];
  v124 = (void *)objc_msgSend_initWithBufferAllocator_(v122, v123, (uint64_t)v175);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v125, (uint64_t)CFSTR("%@-%@"), CFSTR("curve"), CFSTR("position"));
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v127, (uint64_t)__p, v188 - (_BYTE *)__p);
  v128 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addAttributeWithName_format_type_data_stride_(v124, v129, (uint64_t)v126, 786435, CFSTR("position"), v128, 12);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v130, (uint64_t)CFSTR("%@-%@"), CFSTR("curve"), CFSTR("color"));
  v131 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v132, (uint64_t)v184, v185 - (_BYTE *)v184);
  v133 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addAttributeWithName_format_type_data_stride_(v124, v134, (uint64_t)v131, 786436, CFSTR("color"), v133, 16);

  v135 = objc_alloc(MEMORY[0x1E0C99D50]);
  v137 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v135, v136, (uint64_t)v179, v181 - v179, 0);
  objc_msgSend_allocator(v124, v138, v139);
  v140 = (void *)objc_claimAutoreleasedReturnValue();
  v142 = (void *)objc_msgSend_newBufferWithData_type_(v140, v141, (uint64_t)v137, 2);

  if (objc_msgSend_conformsToProtocol_(v142, v143, (uint64_t)&unk_1F03B6D88))
  {
    v144 = v142;
    objc_msgSend_stringByAppendingString_(CFSTR("curve"), v145, (uint64_t)CFSTR("-Indices"));
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v144, v147, (uint64_t)v146);

  }
  v148 = [MDLMaterial alloc];
  objc_msgSend_stringByAppendingString_(CFSTR("curve"), v149, (uint64_t)CFSTR("-Material"));
  v150 = (void *)objc_claimAutoreleasedReturnValue();
  v151 = (void *)objc_opt_new();
  v153 = (void *)objc_msgSend_initWithName_scatteringFunction_(v148, v152, (uint64_t)v150, v151);

  objc_msgSend_propertyWithSemantic_(v153, v154, 2);
  v155 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v156) = 1063675494;
  objc_msgSend_setFloatValue_(v155, v157, v158, v156);
  objc_msgSend_propertyWithSemantic_(v153, v159, 6);
  v160 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v161) = 1058642330;
  objc_msgSend_setFloatValue_(v160, v162, v163, v161);
  v164 = [MDLSubmesh alloc];
  v166 = (void *)objc_msgSend_initWithName_indexBuffer_indexCount_indexType_geometryType_material_topology_(v164, v165, (uint64_t)CFSTR("submesh"), v142, (v181 - v179) >> 2, 32, 1, v153, 0);
  objc_msgSend_setVertexCount_(v124, v167, ((v188 - (_BYTE *)__p) >> 2) / 3uLL);
  v168 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend_addObject_(v168, v169, (uint64_t)v166);
  objc_msgSend_setSubmeshes_(v124, v170, (uint64_t)v168);
  v171 = v124;

  if (v179)
    operator delete(v179);
  sub_1DCAEEE78((uint64_t)&v190);
  if (v184)
  {
    v185 = (char *)v184;
    operator delete(v184);
  }
  if (__p)
  {
    v188 = (char *)__p;
    operator delete(__p);
  }
  sub_1DCAEEE78((uint64_t)&v193);
  sub_1DCAEEE2C((uint64_t)v200);
  if ((v196 & 7) != 0)
  {
    v172 = (unsigned int *)(v196 & 0xFFFFFFFFFFFFFFF8);
    do
      v173 = __ldxr(v172);
    while (__stlxr(v173 - 2, v172));
  }
  sub_1DCAEEE78((uint64_t)v197);
  MEMORY[0x1DF0D0D8C](v199);

  return v171;
}

void sub_1DCAEE824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  unsigned int *v39;
  unsigned int v40;

  sub_1DCAEEE78((uint64_t)&a31);
  sub_1DCAEEE2C(v37 - 160);
  if ((a36 & 7) != 0)
  {
    v39 = (unsigned int *)(a36 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  sub_1DCAEEE78((uint64_t)&a37);
  MEMORY[0x1DF0D0D8C](v37 - 184);

  _Unwind_Resume(a1);
}

uint64_t sub_1DCAEEA6C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_1DCAEED94(v5);
  return a1;
}

uint64_t sub_1DCAEEACC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCAEEEFC(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_1DCAEEB34(uint64_t a1, unint64_t a2)
{
  _QWORD v5[2];
  _OWORD *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5[0] = 0;
  v5[1] = 0;
  sub_1DCAEEFD4((_QWORD *)a1);
  v6 = v5;
  sub_1DCAEF01C((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_1DCAEEB8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE78(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCAEEBA4(_QWORD *result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;

  if (a2 != result)
  {
    if ((*a2 & 7) != 0)
    {
      v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFF8);
      do
        v3 = __ldxr(v2);
      while (__stxr(v3 + 2, v2));
      if ((v3 & 1) == 0)
        *a2 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((*result & 7) != 0)
    {
      v4 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    *result = *a2;
  }
  return result;
}

uint64_t sub_1DCAEEC08(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;

  if (*a1 != 1)
    return (uint64_t)(a1 + 6);
  v1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_1DCAEEDE0((uint64_t)a1);
  return pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v1);
}

uint64_t sub_1DCAEEC34(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *Ptr;
  unsigned int *v3;
  unsigned int v4;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    Ptr = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
    v3 = (unsigned int *)((char *)Ptr + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if ((v4 & 0x7FFFFFFF) == 1)
      sub_1DCAEEC8C(Ptr);
  }
  return a1;
}

void sub_1DCAEEC8C(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *a1)
{
  uint64_t *v1;
  void *v2;

  switch(*((_BYTE *)a1 + 14))
  {
    case 0:
      v1 = sub_1DCAEED10(a1);
      goto LABEL_5;
    case 1:
      v1 = (uint64_t *)MEMORY[0x1DF0D0EF4]();
      goto LABEL_5;
    case 2:
      v1 = (uint64_t *)MEMORY[0x1DF0D11A0]();
LABEL_5:
      pxrInternal__aapl__pxrReserved__::Sdf_PrimPartPathNode::operator delete(v1);
      return;
    case 3:
      v2 = (void *)MEMORY[0x1DF0D1110]();
      goto LABEL_12;
    case 4:
      v2 = (void *)MEMORY[0x1DF0D1014]();
      goto LABEL_12;
    case 5:
      v2 = (void *)MEMORY[0x1DF0D1008]();
      goto LABEL_12;
    case 6:
      v2 = (void *)MEMORY[0x1DF0D11E8]();
      goto LABEL_12;
    case 7:
      v2 = (void *)MEMORY[0x1DF0D1068]();
      goto LABEL_12;
    case 8:
      v2 = (void *)MEMORY[0x1DF0D10B0]();
LABEL_12:
      pxrInternal__aapl__pxrReserved__::Sdf_PropPartPathNode::operator delete(v2);
      break;
    default:
      return;
  }
}

uint64_t *sub_1DCAEED10(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
    pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_RemovePathTokenFromTable(this);
  return sub_1DCAEED44((uint64_t *)this);
}

uint64_t *sub_1DCAEED44(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *a1;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if ((v4 & 0x7FFFFFFF) == 1)
      sub_1DCAEEC8C();
  }
  return a1;
}

uint64_t sub_1DCAEED94(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;

  v1 = (unint64_t *)(result + 48);
  do
    v2 = __ldxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (result && v2 == 1)
  {
    MEMORY[0x1DF0D0D44]();
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

uint64_t sub_1DCAEEDE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + 16;
  v3 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if ((v3 & 1) != 0)
    return v2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    return v4 + 16;
  return pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
}

uint64_t sub_1DCAEEE2C(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    v3 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v3 = 1;
  if (!v3)
    (*(void (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void sub_1DCAEEE78(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void (*v9)(void);

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v3 = (_QWORD *)(a1 + 24);
    v2 = *(unint64_t **)(a1 + 24);
    if (v2)
    {
      do
      {
        v7 = __ldxr(v2);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v2));
      if (!v8)
      {
        __dmb(9u);
        v9 = *(void (**)(void))(*v3 + 8);
        if (v9)
          v9();
      }
    }
    else
    {
      v4 = (unint64_t *)(v1 - 16);
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        __dmb(9u);
        operator delete((void *)(*(_QWORD *)(a1 + 32) - 16));
      }
    }
    *v3 = 0;
    v3[1] = 0;
  }
}

uint64_t sub_1DCAEEEFC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 20)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573B70);
  else
    return 0;
}

double sub_1DCAEEF34@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_1DCAEEF8C;
  a1[2] = (uint64_t)&stru_1EA573B70;
  return result;
}

uint64_t sub_1DCAEEF8C(uint64_t result)
{
  if (result)
  {
    sub_1DCAEEE78(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

void sub_1DCAEEFD4(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;

  v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
      sub_1DCAEEE78((uint64_t)a1);
    *a1 = 0;
  }
}

void sub_1DCAEF01C(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCAEF1D0((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                v11 += 2;
              }
              while (2 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 2 * v3;
          do
          {
            *(_OWORD *)&v7[v13] = *v12;
            v13 += 2;
          }
          while (2 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_1DCAEF1D0((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 16 * v19;
      v22 = v20;
      do
      {
        v23 = *(_OWORD *)v7;
        v7 += 2;
        *(_OWORD *)v22 = v23;
        v22 += 2;
        v21 -= 16;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 2 * v3;
      do
      {
        *(_OWORD *)&v20[v25] = *v24;
        v25 += 2;
      }
      while (2 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 16 * a2;
  if (16 * a2 / a2 != 16)
  {
LABEL_18:
    sub_1DCAEEFD4(a1);
    return;
  }
  v16 = sub_1DCAEF1D0((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_OWORD *)&v16[v17 / 8] = *v18;
    v17 += 16;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_1DCAEF1D0(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL)
    v3 = -1;
  else
    v3 = 16 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCAEF254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCAEF26C(uint64_t a1)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2 - 1;
  if (v2)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
      v3 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = v3 - 1;
    }
    while (v3);
  }
  *(_QWORD *)a1 = 0;
  return a1;
}

uint64_t sub_1DCAEF2BC(uint64_t a1)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;

  v2 = atomic_load(MEMORY[0x1E0DF23A8]);
  if ((v2 & 1) != 0)
  {
    v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
    *(_QWORD *)a1 = v4;
    if (v4)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
      v3 = 2;
    }
    else
    {
      v3 = 0;
    }
  }
  else
  {
    v3 = 0;
    *(_QWORD *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  return a1;
}

void sub_1DCAEF32C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4f]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_1DCAEF1D0((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 16 * v5;
        v9 = v6;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      sub_1DCAEEE78((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t sub_1DCAEF3C0(unint64_t *a1)
{
  uint64_t result;
  uint64_t v4;

  result = sub_1DCAEF418();
  while (!__ldaxr(a1))
  {
    if (!__stlxr(result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = sub_1DCAEF478(result);
    MEMORY[0x1DF0D228C](v4, 0x60C40828F5A6DLL);
  }
  return atomic_load(a1);
}

uint64_t sub_1DCAEF418()
{
  uint64_t v0;

  v0 = operator new();
  MEMORY[0x1DF0D0FCC]();
  return v0;
}

void sub_1DCAEF454(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D228C](v1, 0x60C40828F5A6DLL);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCAEF478(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  uint64_t v179;
  unsigned int *v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  uint64_t v194;
  unsigned int *v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  uint64_t v200;
  unsigned int *v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  uint64_t v206;
  unsigned int *v207;
  unsigned int v208;
  uint64_t v209;
  unsigned int *v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int *v213;
  unsigned int v214;
  uint64_t v215;
  unsigned int *v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int *v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int *v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int *v225;
  unsigned int v226;
  uint64_t v227;
  unsigned int *v228;
  unsigned int v229;
  uint64_t v230;
  unsigned int *v231;
  unsigned int v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  uint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int *v240;
  unsigned int v241;
  uint64_t v242;
  unsigned int *v243;
  unsigned int v244;
  uint64_t v245;
  unsigned int *v246;
  unsigned int v247;
  uint64_t v248;
  unsigned int *v249;
  unsigned int v250;
  uint64_t v251;
  unsigned int *v252;
  unsigned int v253;
  uint64_t v254;
  unsigned int *v255;
  unsigned int v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned int v259;
  uint64_t v260;
  unsigned int *v261;
  unsigned int v262;
  uint64_t v263;
  unsigned int *v264;
  unsigned int v265;
  uint64_t v266;
  unsigned int *v267;
  unsigned int v268;
  uint64_t v269;
  unsigned int *v270;
  unsigned int v271;
  uint64_t v272;
  unsigned int *v273;
  unsigned int v274;
  uint64_t v275;
  unsigned int *v276;
  unsigned int v277;
  uint64_t v278;
  unsigned int *v279;
  unsigned int v280;
  uint64_t v281;
  unsigned int *v282;
  unsigned int v283;
  uint64_t v284;
  unsigned int *v285;
  unsigned int v286;
  uint64_t v287;
  unsigned int *v288;
  unsigned int v289;
  uint64_t v290;
  unsigned int *v291;
  unsigned int v292;
  uint64_t v293;
  unsigned int *v294;
  unsigned int v295;
  uint64_t v296;
  unsigned int *v297;
  unsigned int v298;
  uint64_t v299;
  unsigned int *v300;
  unsigned int v301;
  uint64_t v302;
  unsigned int *v303;
  unsigned int v304;
  uint64_t v305;
  unsigned int *v306;
  unsigned int v307;
  uint64_t v308;
  unsigned int *v309;
  unsigned int v310;
  uint64_t v311;
  unsigned int *v312;
  unsigned int v313;
  uint64_t v314;
  unsigned int *v315;
  unsigned int v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  uint64_t v320;
  unsigned int *v321;
  unsigned int v322;
  uint64_t v323;
  unsigned int *v324;
  unsigned int v325;
  uint64_t v326;
  unsigned int *v327;
  unsigned int v328;
  uint64_t v329;
  unsigned int *v330;
  unsigned int v331;
  uint64_t v332;
  unsigned int *v333;
  unsigned int v334;
  uint64_t v335;
  unsigned int *v336;
  unsigned int v337;
  uint64_t v338;
  unsigned int *v339;
  unsigned int v340;
  uint64_t v341;
  unsigned int *v342;
  unsigned int v343;
  uint64_t v344;
  unsigned int *v345;
  unsigned int v346;
  uint64_t v347;
  unsigned int *v348;
  unsigned int v349;
  uint64_t v350;
  unsigned int *v351;
  unsigned int v352;
  uint64_t v353;
  unsigned int *v354;
  unsigned int v355;
  uint64_t v356;
  unsigned int *v357;
  unsigned int v358;
  uint64_t v359;
  unsigned int *v360;
  unsigned int v361;
  uint64_t v362;
  unsigned int *v363;
  unsigned int v364;
  uint64_t v365;
  unsigned int *v366;
  unsigned int v367;
  uint64_t v368;
  unsigned int *v369;
  unsigned int v370;
  uint64_t v371;
  unsigned int *v372;
  unsigned int v373;
  uint64_t v374;
  unsigned int *v375;
  unsigned int v376;
  uint64_t v377;
  unsigned int *v378;
  unsigned int v379;
  uint64_t v380;
  unsigned int *v381;
  unsigned int v382;
  uint64_t v383;
  unsigned int *v384;
  unsigned int v385;
  uint64_t v386;
  unsigned int *v387;
  unsigned int v388;
  uint64_t v389;
  unsigned int *v390;
  unsigned int v391;
  uint64_t v392;
  unsigned int *v393;
  unsigned int v394;
  uint64_t v395;
  unsigned int *v396;
  unsigned int v397;
  uint64_t v398;
  unsigned int *v399;
  unsigned int v400;
  uint64_t v401;
  unsigned int *v402;
  unsigned int v403;
  uint64_t v404;
  unsigned int *v405;
  unsigned int v406;
  uint64_t v407;
  unsigned int *v408;
  unsigned int v409;
  uint64_t v410;
  unsigned int *v411;
  unsigned int v412;
  uint64_t v413;
  unsigned int *v414;
  unsigned int v415;
  uint64_t v416;
  unsigned int *v417;
  unsigned int v418;
  uint64_t v419;
  unsigned int *v420;
  unsigned int v421;
  uint64_t v422;
  unsigned int *v423;
  unsigned int v424;
  uint64_t v425;
  unsigned int *v426;
  unsigned int v427;
  uint64_t v428;
  unsigned int *v429;
  unsigned int v430;
  uint64_t v431;
  unsigned int *v432;
  unsigned int v433;
  uint64_t v434;
  unsigned int *v435;
  unsigned int v436;
  uint64_t v437;
  unsigned int *v438;
  unsigned int v439;
  uint64_t v440;
  unsigned int *v441;
  unsigned int v442;
  uint64_t v443;
  unsigned int *v444;
  unsigned int v445;
  uint64_t v446;
  unsigned int *v447;
  unsigned int v448;
  uint64_t v449;
  unsigned int *v450;
  unsigned int v451;
  uint64_t v452;
  unsigned int *v453;
  unsigned int v454;
  uint64_t v455;
  unsigned int *v456;
  unsigned int v457;
  uint64_t v458;
  unsigned int *v459;
  unsigned int v460;
  uint64_t v461;
  unsigned int *v462;
  unsigned int v463;
  uint64_t v464;
  unsigned int *v465;
  unsigned int v466;
  uint64_t v467;
  unsigned int *v468;
  unsigned int v469;
  uint64_t v470;
  unsigned int *v471;
  unsigned int v472;
  uint64_t v473;
  unsigned int *v474;
  unsigned int v475;
  uint64_t v476;
  unsigned int *v477;
  unsigned int v478;
  uint64_t v479;
  unsigned int *v480;
  unsigned int v481;
  uint64_t v482;
  unsigned int *v483;
  unsigned int v484;
  uint64_t v485;
  unsigned int *v486;
  unsigned int v487;
  uint64_t v488;
  unsigned int *v489;
  unsigned int v490;
  uint64_t v491;
  unsigned int *v492;
  unsigned int v493;
  uint64_t v494;
  unsigned int *v495;
  unsigned int v496;
  uint64_t v497;
  unsigned int *v498;
  unsigned int v499;
  uint64_t v500;
  unsigned int *v501;
  unsigned int v502;
  uint64_t v503;
  unsigned int *v504;
  unsigned int v505;
  uint64_t v506;
  unsigned int *v507;
  unsigned int v508;
  uint64_t v509;
  unsigned int *v510;
  unsigned int v511;
  uint64_t v512;
  unsigned int *v513;
  unsigned int v514;
  uint64_t v515;
  unsigned int *v516;
  unsigned int v517;
  uint64_t v518;
  unsigned int *v519;
  unsigned int v520;
  uint64_t v521;
  unsigned int *v522;
  unsigned int v523;
  uint64_t v524;
  unsigned int *v525;
  unsigned int v526;
  uint64_t v527;
  unsigned int *v528;
  unsigned int v529;
  uint64_t v530;
  unsigned int *v531;
  unsigned int v532;
  uint64_t v533;
  unsigned int *v534;
  unsigned int v535;
  uint64_t v536;
  unsigned int *v537;
  unsigned int v538;
  uint64_t v539;
  unsigned int *v540;
  unsigned int v541;
  uint64_t v542;
  unsigned int *v543;
  unsigned int v544;
  uint64_t v545;
  unsigned int *v546;
  unsigned int v547;
  uint64_t v548;
  unsigned int *v549;
  unsigned int v550;
  uint64_t v551;
  unsigned int *v552;
  unsigned int v553;
  uint64_t v554;
  unsigned int *v555;
  unsigned int v556;
  uint64_t v557;
  unsigned int *v558;
  unsigned int v559;
  uint64_t v560;
  unsigned int *v561;
  unsigned int v562;
  uint64_t v563;
  unsigned int *v564;
  unsigned int v565;
  uint64_t v566;
  unsigned int *v567;
  unsigned int v568;
  uint64_t v569;
  unsigned int *v570;
  unsigned int v571;
  uint64_t v572;
  unsigned int *v573;
  unsigned int v574;
  uint64_t v575;
  unsigned int *v576;
  unsigned int v577;
  uint64_t v578;
  unsigned int *v579;
  unsigned int v580;
  uint64_t v581;
  unsigned int *v582;
  unsigned int v583;
  uint64_t v584;
  unsigned int *v585;
  unsigned int v586;
  uint64_t v587;
  unsigned int *v588;
  unsigned int v589;
  uint64_t v590;
  unsigned int *v591;
  unsigned int v592;
  uint64_t v593;
  unsigned int *v594;
  unsigned int v595;
  uint64_t v596;
  unsigned int *v597;
  unsigned int v598;
  uint64_t v599;
  unsigned int *v600;
  unsigned int v601;
  unsigned int *v602;
  unsigned int v603;
  void **v605;

  v605 = (void **)(a1 + 1608);
  sub_1DCAF0DD0(&v605);
  v2 = *(_QWORD *)(a1 + 1600);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 1592);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 1584);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 1576);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 1568);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 1560);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 1552);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 1544);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(a1 + 1536);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *(_QWORD *)(a1 + 1528);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *(_QWORD *)(a1 + 1520);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 1512);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(a1 + 1504);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *(_QWORD *)(a1 + 1496);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *(_QWORD *)(a1 + 1488);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *(_QWORD *)(a1 + 1480);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *(_QWORD *)(a1 + 1472);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *(_QWORD *)(a1 + 1464);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *(_QWORD *)(a1 + 1456);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *(_QWORD *)(a1 + 1448);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *(_QWORD *)(a1 + 1440);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *(_QWORD *)(a1 + 1432);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *(_QWORD *)(a1 + 1424);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *(_QWORD *)(a1 + 1416);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *(_QWORD *)(a1 + 1408);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *(_QWORD *)(a1 + 1400);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *(_QWORD *)(a1 + 1392);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *(_QWORD *)(a1 + 1384);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *(_QWORD *)(a1 + 1376);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *(_QWORD *)(a1 + 1368);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *(_QWORD *)(a1 + 1360);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *(_QWORD *)(a1 + 1352);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *(_QWORD *)(a1 + 1344);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  v101 = *(_QWORD *)(a1 + 1336);
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  v104 = *(_QWORD *)(a1 + 1328);
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v107 = *(_QWORD *)(a1 + 1320);
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  v110 = *(_QWORD *)(a1 + 1312);
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  v113 = *(_QWORD *)(a1 + 1304);
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stlxr(v115 - 2, v114));
  }
  v116 = *(_QWORD *)(a1 + 1296);
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stlxr(v118 - 2, v117));
  }
  v119 = *(_QWORD *)(a1 + 1288);
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stlxr(v121 - 2, v120));
  }
  v122 = *(_QWORD *)(a1 + 1280);
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stlxr(v124 - 2, v123));
  }
  v125 = *(_QWORD *)(a1 + 1272);
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stlxr(v127 - 2, v126));
  }
  v128 = *(_QWORD *)(a1 + 1264);
  if ((v128 & 7) != 0)
  {
    v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stlxr(v130 - 2, v129));
  }
  v131 = *(_QWORD *)(a1 + 1256);
  if ((v131 & 7) != 0)
  {
    v132 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
    do
      v133 = __ldxr(v132);
    while (__stlxr(v133 - 2, v132));
  }
  v134 = *(_QWORD *)(a1 + 1248);
  if ((v134 & 7) != 0)
  {
    v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
    do
      v136 = __ldxr(v135);
    while (__stlxr(v136 - 2, v135));
  }
  v137 = *(_QWORD *)(a1 + 1240);
  if ((v137 & 7) != 0)
  {
    v138 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stlxr(v139 - 2, v138));
  }
  v140 = *(_QWORD *)(a1 + 1232);
  if ((v140 & 7) != 0)
  {
    v141 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
    do
      v142 = __ldxr(v141);
    while (__stlxr(v142 - 2, v141));
  }
  v143 = *(_QWORD *)(a1 + 1224);
  if ((v143 & 7) != 0)
  {
    v144 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
    do
      v145 = __ldxr(v144);
    while (__stlxr(v145 - 2, v144));
  }
  v146 = *(_QWORD *)(a1 + 1216);
  if ((v146 & 7) != 0)
  {
    v147 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
    do
      v148 = __ldxr(v147);
    while (__stlxr(v148 - 2, v147));
  }
  v149 = *(_QWORD *)(a1 + 1208);
  if ((v149 & 7) != 0)
  {
    v150 = (unsigned int *)(v149 & 0xFFFFFFFFFFFFFFF8);
    do
      v151 = __ldxr(v150);
    while (__stlxr(v151 - 2, v150));
  }
  v152 = *(_QWORD *)(a1 + 1200);
  if ((v152 & 7) != 0)
  {
    v153 = (unsigned int *)(v152 & 0xFFFFFFFFFFFFFFF8);
    do
      v154 = __ldxr(v153);
    while (__stlxr(v154 - 2, v153));
  }
  v155 = *(_QWORD *)(a1 + 1192);
  if ((v155 & 7) != 0)
  {
    v156 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
    do
      v157 = __ldxr(v156);
    while (__stlxr(v157 - 2, v156));
  }
  v158 = *(_QWORD *)(a1 + 1184);
  if ((v158 & 7) != 0)
  {
    v159 = (unsigned int *)(v158 & 0xFFFFFFFFFFFFFFF8);
    do
      v160 = __ldxr(v159);
    while (__stlxr(v160 - 2, v159));
  }
  v161 = *(_QWORD *)(a1 + 1176);
  if ((v161 & 7) != 0)
  {
    v162 = (unsigned int *)(v161 & 0xFFFFFFFFFFFFFFF8);
    do
      v163 = __ldxr(v162);
    while (__stlxr(v163 - 2, v162));
  }
  v164 = *(_QWORD *)(a1 + 1168);
  if ((v164 & 7) != 0)
  {
    v165 = (unsigned int *)(v164 & 0xFFFFFFFFFFFFFFF8);
    do
      v166 = __ldxr(v165);
    while (__stlxr(v166 - 2, v165));
  }
  v167 = *(_QWORD *)(a1 + 1160);
  if ((v167 & 7) != 0)
  {
    v168 = (unsigned int *)(v167 & 0xFFFFFFFFFFFFFFF8);
    do
      v169 = __ldxr(v168);
    while (__stlxr(v169 - 2, v168));
  }
  v170 = *(_QWORD *)(a1 + 1152);
  if ((v170 & 7) != 0)
  {
    v171 = (unsigned int *)(v170 & 0xFFFFFFFFFFFFFFF8);
    do
      v172 = __ldxr(v171);
    while (__stlxr(v172 - 2, v171));
  }
  v173 = *(_QWORD *)(a1 + 1144);
  if ((v173 & 7) != 0)
  {
    v174 = (unsigned int *)(v173 & 0xFFFFFFFFFFFFFFF8);
    do
      v175 = __ldxr(v174);
    while (__stlxr(v175 - 2, v174));
  }
  v176 = *(_QWORD *)(a1 + 1136);
  if ((v176 & 7) != 0)
  {
    v177 = (unsigned int *)(v176 & 0xFFFFFFFFFFFFFFF8);
    do
      v178 = __ldxr(v177);
    while (__stlxr(v178 - 2, v177));
  }
  v179 = *(_QWORD *)(a1 + 1128);
  if ((v179 & 7) != 0)
  {
    v180 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFFFF8);
    do
      v181 = __ldxr(v180);
    while (__stlxr(v181 - 2, v180));
  }
  v182 = *(_QWORD *)(a1 + 1120);
  if ((v182 & 7) != 0)
  {
    v183 = (unsigned int *)(v182 & 0xFFFFFFFFFFFFFFF8);
    do
      v184 = __ldxr(v183);
    while (__stlxr(v184 - 2, v183));
  }
  v185 = *(_QWORD *)(a1 + 1112);
  if ((v185 & 7) != 0)
  {
    v186 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
    do
      v187 = __ldxr(v186);
    while (__stlxr(v187 - 2, v186));
  }
  v188 = *(_QWORD *)(a1 + 1104);
  if ((v188 & 7) != 0)
  {
    v189 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
    do
      v190 = __ldxr(v189);
    while (__stlxr(v190 - 2, v189));
  }
  v191 = *(_QWORD *)(a1 + 1096);
  if ((v191 & 7) != 0)
  {
    v192 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
    do
      v193 = __ldxr(v192);
    while (__stlxr(v193 - 2, v192));
  }
  v194 = *(_QWORD *)(a1 + 1088);
  if ((v194 & 7) != 0)
  {
    v195 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
    do
      v196 = __ldxr(v195);
    while (__stlxr(v196 - 2, v195));
  }
  v197 = *(_QWORD *)(a1 + 1080);
  if ((v197 & 7) != 0)
  {
    v198 = (unsigned int *)(v197 & 0xFFFFFFFFFFFFFFF8);
    do
      v199 = __ldxr(v198);
    while (__stlxr(v199 - 2, v198));
  }
  v200 = *(_QWORD *)(a1 + 1072);
  if ((v200 & 7) != 0)
  {
    v201 = (unsigned int *)(v200 & 0xFFFFFFFFFFFFFFF8);
    do
      v202 = __ldxr(v201);
    while (__stlxr(v202 - 2, v201));
  }
  v203 = *(_QWORD *)(a1 + 1064);
  if ((v203 & 7) != 0)
  {
    v204 = (unsigned int *)(v203 & 0xFFFFFFFFFFFFFFF8);
    do
      v205 = __ldxr(v204);
    while (__stlxr(v205 - 2, v204));
  }
  v206 = *(_QWORD *)(a1 + 1056);
  if ((v206 & 7) != 0)
  {
    v207 = (unsigned int *)(v206 & 0xFFFFFFFFFFFFFFF8);
    do
      v208 = __ldxr(v207);
    while (__stlxr(v208 - 2, v207));
  }
  v209 = *(_QWORD *)(a1 + 1048);
  if ((v209 & 7) != 0)
  {
    v210 = (unsigned int *)(v209 & 0xFFFFFFFFFFFFFFF8);
    do
      v211 = __ldxr(v210);
    while (__stlxr(v211 - 2, v210));
  }
  v212 = *(_QWORD *)(a1 + 1040);
  if ((v212 & 7) != 0)
  {
    v213 = (unsigned int *)(v212 & 0xFFFFFFFFFFFFFFF8);
    do
      v214 = __ldxr(v213);
    while (__stlxr(v214 - 2, v213));
  }
  v215 = *(_QWORD *)(a1 + 1032);
  if ((v215 & 7) != 0)
  {
    v216 = (unsigned int *)(v215 & 0xFFFFFFFFFFFFFFF8);
    do
      v217 = __ldxr(v216);
    while (__stlxr(v217 - 2, v216));
  }
  v218 = *(_QWORD *)(a1 + 1024);
  if ((v218 & 7) != 0)
  {
    v219 = (unsigned int *)(v218 & 0xFFFFFFFFFFFFFFF8);
    do
      v220 = __ldxr(v219);
    while (__stlxr(v220 - 2, v219));
  }
  v221 = *(_QWORD *)(a1 + 1016);
  if ((v221 & 7) != 0)
  {
    v222 = (unsigned int *)(v221 & 0xFFFFFFFFFFFFFFF8);
    do
      v223 = __ldxr(v222);
    while (__stlxr(v223 - 2, v222));
  }
  v224 = *(_QWORD *)(a1 + 1008);
  if ((v224 & 7) != 0)
  {
    v225 = (unsigned int *)(v224 & 0xFFFFFFFFFFFFFFF8);
    do
      v226 = __ldxr(v225);
    while (__stlxr(v226 - 2, v225));
  }
  v227 = *(_QWORD *)(a1 + 1000);
  if ((v227 & 7) != 0)
  {
    v228 = (unsigned int *)(v227 & 0xFFFFFFFFFFFFFFF8);
    do
      v229 = __ldxr(v228);
    while (__stlxr(v229 - 2, v228));
  }
  v230 = *(_QWORD *)(a1 + 992);
  if ((v230 & 7) != 0)
  {
    v231 = (unsigned int *)(v230 & 0xFFFFFFFFFFFFFFF8);
    do
      v232 = __ldxr(v231);
    while (__stlxr(v232 - 2, v231));
  }
  v233 = *(_QWORD *)(a1 + 984);
  if ((v233 & 7) != 0)
  {
    v234 = (unsigned int *)(v233 & 0xFFFFFFFFFFFFFFF8);
    do
      v235 = __ldxr(v234);
    while (__stlxr(v235 - 2, v234));
  }
  v236 = *(_QWORD *)(a1 + 976);
  if ((v236 & 7) != 0)
  {
    v237 = (unsigned int *)(v236 & 0xFFFFFFFFFFFFFFF8);
    do
      v238 = __ldxr(v237);
    while (__stlxr(v238 - 2, v237));
  }
  v239 = *(_QWORD *)(a1 + 968);
  if ((v239 & 7) != 0)
  {
    v240 = (unsigned int *)(v239 & 0xFFFFFFFFFFFFFFF8);
    do
      v241 = __ldxr(v240);
    while (__stlxr(v241 - 2, v240));
  }
  v242 = *(_QWORD *)(a1 + 960);
  if ((v242 & 7) != 0)
  {
    v243 = (unsigned int *)(v242 & 0xFFFFFFFFFFFFFFF8);
    do
      v244 = __ldxr(v243);
    while (__stlxr(v244 - 2, v243));
  }
  v245 = *(_QWORD *)(a1 + 952);
  if ((v245 & 7) != 0)
  {
    v246 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFFFF8);
    do
      v247 = __ldxr(v246);
    while (__stlxr(v247 - 2, v246));
  }
  v248 = *(_QWORD *)(a1 + 944);
  if ((v248 & 7) != 0)
  {
    v249 = (unsigned int *)(v248 & 0xFFFFFFFFFFFFFFF8);
    do
      v250 = __ldxr(v249);
    while (__stlxr(v250 - 2, v249));
  }
  v251 = *(_QWORD *)(a1 + 936);
  if ((v251 & 7) != 0)
  {
    v252 = (unsigned int *)(v251 & 0xFFFFFFFFFFFFFFF8);
    do
      v253 = __ldxr(v252);
    while (__stlxr(v253 - 2, v252));
  }
  v254 = *(_QWORD *)(a1 + 928);
  if ((v254 & 7) != 0)
  {
    v255 = (unsigned int *)(v254 & 0xFFFFFFFFFFFFFFF8);
    do
      v256 = __ldxr(v255);
    while (__stlxr(v256 - 2, v255));
  }
  v257 = *(_QWORD *)(a1 + 920);
  if ((v257 & 7) != 0)
  {
    v258 = (unsigned int *)(v257 & 0xFFFFFFFFFFFFFFF8);
    do
      v259 = __ldxr(v258);
    while (__stlxr(v259 - 2, v258));
  }
  v260 = *(_QWORD *)(a1 + 912);
  if ((v260 & 7) != 0)
  {
    v261 = (unsigned int *)(v260 & 0xFFFFFFFFFFFFFFF8);
    do
      v262 = __ldxr(v261);
    while (__stlxr(v262 - 2, v261));
  }
  v263 = *(_QWORD *)(a1 + 904);
  if ((v263 & 7) != 0)
  {
    v264 = (unsigned int *)(v263 & 0xFFFFFFFFFFFFFFF8);
    do
      v265 = __ldxr(v264);
    while (__stlxr(v265 - 2, v264));
  }
  v266 = *(_QWORD *)(a1 + 896);
  if ((v266 & 7) != 0)
  {
    v267 = (unsigned int *)(v266 & 0xFFFFFFFFFFFFFFF8);
    do
      v268 = __ldxr(v267);
    while (__stlxr(v268 - 2, v267));
  }
  v269 = *(_QWORD *)(a1 + 888);
  if ((v269 & 7) != 0)
  {
    v270 = (unsigned int *)(v269 & 0xFFFFFFFFFFFFFFF8);
    do
      v271 = __ldxr(v270);
    while (__stlxr(v271 - 2, v270));
  }
  v272 = *(_QWORD *)(a1 + 880);
  if ((v272 & 7) != 0)
  {
    v273 = (unsigned int *)(v272 & 0xFFFFFFFFFFFFFFF8);
    do
      v274 = __ldxr(v273);
    while (__stlxr(v274 - 2, v273));
  }
  v275 = *(_QWORD *)(a1 + 872);
  if ((v275 & 7) != 0)
  {
    v276 = (unsigned int *)(v275 & 0xFFFFFFFFFFFFFFF8);
    do
      v277 = __ldxr(v276);
    while (__stlxr(v277 - 2, v276));
  }
  v278 = *(_QWORD *)(a1 + 864);
  if ((v278 & 7) != 0)
  {
    v279 = (unsigned int *)(v278 & 0xFFFFFFFFFFFFFFF8);
    do
      v280 = __ldxr(v279);
    while (__stlxr(v280 - 2, v279));
  }
  v281 = *(_QWORD *)(a1 + 856);
  if ((v281 & 7) != 0)
  {
    v282 = (unsigned int *)(v281 & 0xFFFFFFFFFFFFFFF8);
    do
      v283 = __ldxr(v282);
    while (__stlxr(v283 - 2, v282));
  }
  v284 = *(_QWORD *)(a1 + 848);
  if ((v284 & 7) != 0)
  {
    v285 = (unsigned int *)(v284 & 0xFFFFFFFFFFFFFFF8);
    do
      v286 = __ldxr(v285);
    while (__stlxr(v286 - 2, v285));
  }
  v287 = *(_QWORD *)(a1 + 840);
  if ((v287 & 7) != 0)
  {
    v288 = (unsigned int *)(v287 & 0xFFFFFFFFFFFFFFF8);
    do
      v289 = __ldxr(v288);
    while (__stlxr(v289 - 2, v288));
  }
  v290 = *(_QWORD *)(a1 + 832);
  if ((v290 & 7) != 0)
  {
    v291 = (unsigned int *)(v290 & 0xFFFFFFFFFFFFFFF8);
    do
      v292 = __ldxr(v291);
    while (__stlxr(v292 - 2, v291));
  }
  v293 = *(_QWORD *)(a1 + 824);
  if ((v293 & 7) != 0)
  {
    v294 = (unsigned int *)(v293 & 0xFFFFFFFFFFFFFFF8);
    do
      v295 = __ldxr(v294);
    while (__stlxr(v295 - 2, v294));
  }
  v296 = *(_QWORD *)(a1 + 816);
  if ((v296 & 7) != 0)
  {
    v297 = (unsigned int *)(v296 & 0xFFFFFFFFFFFFFFF8);
    do
      v298 = __ldxr(v297);
    while (__stlxr(v298 - 2, v297));
  }
  v299 = *(_QWORD *)(a1 + 808);
  if ((v299 & 7) != 0)
  {
    v300 = (unsigned int *)(v299 & 0xFFFFFFFFFFFFFFF8);
    do
      v301 = __ldxr(v300);
    while (__stlxr(v301 - 2, v300));
  }
  v302 = *(_QWORD *)(a1 + 800);
  if ((v302 & 7) != 0)
  {
    v303 = (unsigned int *)(v302 & 0xFFFFFFFFFFFFFFF8);
    do
      v304 = __ldxr(v303);
    while (__stlxr(v304 - 2, v303));
  }
  v305 = *(_QWORD *)(a1 + 792);
  if ((v305 & 7) != 0)
  {
    v306 = (unsigned int *)(v305 & 0xFFFFFFFFFFFFFFF8);
    do
      v307 = __ldxr(v306);
    while (__stlxr(v307 - 2, v306));
  }
  v308 = *(_QWORD *)(a1 + 784);
  if ((v308 & 7) != 0)
  {
    v309 = (unsigned int *)(v308 & 0xFFFFFFFFFFFFFFF8);
    do
      v310 = __ldxr(v309);
    while (__stlxr(v310 - 2, v309));
  }
  v311 = *(_QWORD *)(a1 + 776);
  if ((v311 & 7) != 0)
  {
    v312 = (unsigned int *)(v311 & 0xFFFFFFFFFFFFFFF8);
    do
      v313 = __ldxr(v312);
    while (__stlxr(v313 - 2, v312));
  }
  v314 = *(_QWORD *)(a1 + 768);
  if ((v314 & 7) != 0)
  {
    v315 = (unsigned int *)(v314 & 0xFFFFFFFFFFFFFFF8);
    do
      v316 = __ldxr(v315);
    while (__stlxr(v316 - 2, v315));
  }
  v317 = *(_QWORD *)(a1 + 760);
  if ((v317 & 7) != 0)
  {
    v318 = (unsigned int *)(v317 & 0xFFFFFFFFFFFFFFF8);
    do
      v319 = __ldxr(v318);
    while (__stlxr(v319 - 2, v318));
  }
  v320 = *(_QWORD *)(a1 + 752);
  if ((v320 & 7) != 0)
  {
    v321 = (unsigned int *)(v320 & 0xFFFFFFFFFFFFFFF8);
    do
      v322 = __ldxr(v321);
    while (__stlxr(v322 - 2, v321));
  }
  v323 = *(_QWORD *)(a1 + 744);
  if ((v323 & 7) != 0)
  {
    v324 = (unsigned int *)(v323 & 0xFFFFFFFFFFFFFFF8);
    do
      v325 = __ldxr(v324);
    while (__stlxr(v325 - 2, v324));
  }
  v326 = *(_QWORD *)(a1 + 736);
  if ((v326 & 7) != 0)
  {
    v327 = (unsigned int *)(v326 & 0xFFFFFFFFFFFFFFF8);
    do
      v328 = __ldxr(v327);
    while (__stlxr(v328 - 2, v327));
  }
  v329 = *(_QWORD *)(a1 + 728);
  if ((v329 & 7) != 0)
  {
    v330 = (unsigned int *)(v329 & 0xFFFFFFFFFFFFFFF8);
    do
      v331 = __ldxr(v330);
    while (__stlxr(v331 - 2, v330));
  }
  v332 = *(_QWORD *)(a1 + 720);
  if ((v332 & 7) != 0)
  {
    v333 = (unsigned int *)(v332 & 0xFFFFFFFFFFFFFFF8);
    do
      v334 = __ldxr(v333);
    while (__stlxr(v334 - 2, v333));
  }
  v335 = *(_QWORD *)(a1 + 712);
  if ((v335 & 7) != 0)
  {
    v336 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v337 = __ldxr(v336);
    while (__stlxr(v337 - 2, v336));
  }
  v338 = *(_QWORD *)(a1 + 704);
  if ((v338 & 7) != 0)
  {
    v339 = (unsigned int *)(v338 & 0xFFFFFFFFFFFFFFF8);
    do
      v340 = __ldxr(v339);
    while (__stlxr(v340 - 2, v339));
  }
  v341 = *(_QWORD *)(a1 + 696);
  if ((v341 & 7) != 0)
  {
    v342 = (unsigned int *)(v341 & 0xFFFFFFFFFFFFFFF8);
    do
      v343 = __ldxr(v342);
    while (__stlxr(v343 - 2, v342));
  }
  v344 = *(_QWORD *)(a1 + 688);
  if ((v344 & 7) != 0)
  {
    v345 = (unsigned int *)(v344 & 0xFFFFFFFFFFFFFFF8);
    do
      v346 = __ldxr(v345);
    while (__stlxr(v346 - 2, v345));
  }
  v347 = *(_QWORD *)(a1 + 680);
  if ((v347 & 7) != 0)
  {
    v348 = (unsigned int *)(v347 & 0xFFFFFFFFFFFFFFF8);
    do
      v349 = __ldxr(v348);
    while (__stlxr(v349 - 2, v348));
  }
  v350 = *(_QWORD *)(a1 + 672);
  if ((v350 & 7) != 0)
  {
    v351 = (unsigned int *)(v350 & 0xFFFFFFFFFFFFFFF8);
    do
      v352 = __ldxr(v351);
    while (__stlxr(v352 - 2, v351));
  }
  v353 = *(_QWORD *)(a1 + 664);
  if ((v353 & 7) != 0)
  {
    v354 = (unsigned int *)(v353 & 0xFFFFFFFFFFFFFFF8);
    do
      v355 = __ldxr(v354);
    while (__stlxr(v355 - 2, v354));
  }
  v356 = *(_QWORD *)(a1 + 656);
  if ((v356 & 7) != 0)
  {
    v357 = (unsigned int *)(v356 & 0xFFFFFFFFFFFFFFF8);
    do
      v358 = __ldxr(v357);
    while (__stlxr(v358 - 2, v357));
  }
  v359 = *(_QWORD *)(a1 + 648);
  if ((v359 & 7) != 0)
  {
    v360 = (unsigned int *)(v359 & 0xFFFFFFFFFFFFFFF8);
    do
      v361 = __ldxr(v360);
    while (__stlxr(v361 - 2, v360));
  }
  v362 = *(_QWORD *)(a1 + 640);
  if ((v362 & 7) != 0)
  {
    v363 = (unsigned int *)(v362 & 0xFFFFFFFFFFFFFFF8);
    do
      v364 = __ldxr(v363);
    while (__stlxr(v364 - 2, v363));
  }
  v365 = *(_QWORD *)(a1 + 632);
  if ((v365 & 7) != 0)
  {
    v366 = (unsigned int *)(v365 & 0xFFFFFFFFFFFFFFF8);
    do
      v367 = __ldxr(v366);
    while (__stlxr(v367 - 2, v366));
  }
  v368 = *(_QWORD *)(a1 + 624);
  if ((v368 & 7) != 0)
  {
    v369 = (unsigned int *)(v368 & 0xFFFFFFFFFFFFFFF8);
    do
      v370 = __ldxr(v369);
    while (__stlxr(v370 - 2, v369));
  }
  v371 = *(_QWORD *)(a1 + 616);
  if ((v371 & 7) != 0)
  {
    v372 = (unsigned int *)(v371 & 0xFFFFFFFFFFFFFFF8);
    do
      v373 = __ldxr(v372);
    while (__stlxr(v373 - 2, v372));
  }
  v374 = *(_QWORD *)(a1 + 608);
  if ((v374 & 7) != 0)
  {
    v375 = (unsigned int *)(v374 & 0xFFFFFFFFFFFFFFF8);
    do
      v376 = __ldxr(v375);
    while (__stlxr(v376 - 2, v375));
  }
  v377 = *(_QWORD *)(a1 + 600);
  if ((v377 & 7) != 0)
  {
    v378 = (unsigned int *)(v377 & 0xFFFFFFFFFFFFFFF8);
    do
      v379 = __ldxr(v378);
    while (__stlxr(v379 - 2, v378));
  }
  v380 = *(_QWORD *)(a1 + 592);
  if ((v380 & 7) != 0)
  {
    v381 = (unsigned int *)(v380 & 0xFFFFFFFFFFFFFFF8);
    do
      v382 = __ldxr(v381);
    while (__stlxr(v382 - 2, v381));
  }
  v383 = *(_QWORD *)(a1 + 584);
  if ((v383 & 7) != 0)
  {
    v384 = (unsigned int *)(v383 & 0xFFFFFFFFFFFFFFF8);
    do
      v385 = __ldxr(v384);
    while (__stlxr(v385 - 2, v384));
  }
  v386 = *(_QWORD *)(a1 + 576);
  if ((v386 & 7) != 0)
  {
    v387 = (unsigned int *)(v386 & 0xFFFFFFFFFFFFFFF8);
    do
      v388 = __ldxr(v387);
    while (__stlxr(v388 - 2, v387));
  }
  v389 = *(_QWORD *)(a1 + 568);
  if ((v389 & 7) != 0)
  {
    v390 = (unsigned int *)(v389 & 0xFFFFFFFFFFFFFFF8);
    do
      v391 = __ldxr(v390);
    while (__stlxr(v391 - 2, v390));
  }
  v392 = *(_QWORD *)(a1 + 560);
  if ((v392 & 7) != 0)
  {
    v393 = (unsigned int *)(v392 & 0xFFFFFFFFFFFFFFF8);
    do
      v394 = __ldxr(v393);
    while (__stlxr(v394 - 2, v393));
  }
  v395 = *(_QWORD *)(a1 + 552);
  if ((v395 & 7) != 0)
  {
    v396 = (unsigned int *)(v395 & 0xFFFFFFFFFFFFFFF8);
    do
      v397 = __ldxr(v396);
    while (__stlxr(v397 - 2, v396));
  }
  v398 = *(_QWORD *)(a1 + 544);
  if ((v398 & 7) != 0)
  {
    v399 = (unsigned int *)(v398 & 0xFFFFFFFFFFFFFFF8);
    do
      v400 = __ldxr(v399);
    while (__stlxr(v400 - 2, v399));
  }
  v401 = *(_QWORD *)(a1 + 536);
  if ((v401 & 7) != 0)
  {
    v402 = (unsigned int *)(v401 & 0xFFFFFFFFFFFFFFF8);
    do
      v403 = __ldxr(v402);
    while (__stlxr(v403 - 2, v402));
  }
  v404 = *(_QWORD *)(a1 + 528);
  if ((v404 & 7) != 0)
  {
    v405 = (unsigned int *)(v404 & 0xFFFFFFFFFFFFFFF8);
    do
      v406 = __ldxr(v405);
    while (__stlxr(v406 - 2, v405));
  }
  v407 = *(_QWORD *)(a1 + 520);
  if ((v407 & 7) != 0)
  {
    v408 = (unsigned int *)(v407 & 0xFFFFFFFFFFFFFFF8);
    do
      v409 = __ldxr(v408);
    while (__stlxr(v409 - 2, v408));
  }
  v410 = *(_QWORD *)(a1 + 512);
  if ((v410 & 7) != 0)
  {
    v411 = (unsigned int *)(v410 & 0xFFFFFFFFFFFFFFF8);
    do
      v412 = __ldxr(v411);
    while (__stlxr(v412 - 2, v411));
  }
  v413 = *(_QWORD *)(a1 + 504);
  if ((v413 & 7) != 0)
  {
    v414 = (unsigned int *)(v413 & 0xFFFFFFFFFFFFFFF8);
    do
      v415 = __ldxr(v414);
    while (__stlxr(v415 - 2, v414));
  }
  v416 = *(_QWORD *)(a1 + 496);
  if ((v416 & 7) != 0)
  {
    v417 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
    do
      v418 = __ldxr(v417);
    while (__stlxr(v418 - 2, v417));
  }
  v419 = *(_QWORD *)(a1 + 488);
  if ((v419 & 7) != 0)
  {
    v420 = (unsigned int *)(v419 & 0xFFFFFFFFFFFFFFF8);
    do
      v421 = __ldxr(v420);
    while (__stlxr(v421 - 2, v420));
  }
  v422 = *(_QWORD *)(a1 + 480);
  if ((v422 & 7) != 0)
  {
    v423 = (unsigned int *)(v422 & 0xFFFFFFFFFFFFFFF8);
    do
      v424 = __ldxr(v423);
    while (__stlxr(v424 - 2, v423));
  }
  v425 = *(_QWORD *)(a1 + 472);
  if ((v425 & 7) != 0)
  {
    v426 = (unsigned int *)(v425 & 0xFFFFFFFFFFFFFFF8);
    do
      v427 = __ldxr(v426);
    while (__stlxr(v427 - 2, v426));
  }
  v428 = *(_QWORD *)(a1 + 464);
  if ((v428 & 7) != 0)
  {
    v429 = (unsigned int *)(v428 & 0xFFFFFFFFFFFFFFF8);
    do
      v430 = __ldxr(v429);
    while (__stlxr(v430 - 2, v429));
  }
  v431 = *(_QWORD *)(a1 + 456);
  if ((v431 & 7) != 0)
  {
    v432 = (unsigned int *)(v431 & 0xFFFFFFFFFFFFFFF8);
    do
      v433 = __ldxr(v432);
    while (__stlxr(v433 - 2, v432));
  }
  v434 = *(_QWORD *)(a1 + 448);
  if ((v434 & 7) != 0)
  {
    v435 = (unsigned int *)(v434 & 0xFFFFFFFFFFFFFFF8);
    do
      v436 = __ldxr(v435);
    while (__stlxr(v436 - 2, v435));
  }
  v437 = *(_QWORD *)(a1 + 440);
  if ((v437 & 7) != 0)
  {
    v438 = (unsigned int *)(v437 & 0xFFFFFFFFFFFFFFF8);
    do
      v439 = __ldxr(v438);
    while (__stlxr(v439 - 2, v438));
  }
  v440 = *(_QWORD *)(a1 + 432);
  if ((v440 & 7) != 0)
  {
    v441 = (unsigned int *)(v440 & 0xFFFFFFFFFFFFFFF8);
    do
      v442 = __ldxr(v441);
    while (__stlxr(v442 - 2, v441));
  }
  v443 = *(_QWORD *)(a1 + 424);
  if ((v443 & 7) != 0)
  {
    v444 = (unsigned int *)(v443 & 0xFFFFFFFFFFFFFFF8);
    do
      v445 = __ldxr(v444);
    while (__stlxr(v445 - 2, v444));
  }
  v446 = *(_QWORD *)(a1 + 416);
  if ((v446 & 7) != 0)
  {
    v447 = (unsigned int *)(v446 & 0xFFFFFFFFFFFFFFF8);
    do
      v448 = __ldxr(v447);
    while (__stlxr(v448 - 2, v447));
  }
  v449 = *(_QWORD *)(a1 + 408);
  if ((v449 & 7) != 0)
  {
    v450 = (unsigned int *)(v449 & 0xFFFFFFFFFFFFFFF8);
    do
      v451 = __ldxr(v450);
    while (__stlxr(v451 - 2, v450));
  }
  v452 = *(_QWORD *)(a1 + 400);
  if ((v452 & 7) != 0)
  {
    v453 = (unsigned int *)(v452 & 0xFFFFFFFFFFFFFFF8);
    do
      v454 = __ldxr(v453);
    while (__stlxr(v454 - 2, v453));
  }
  v455 = *(_QWORD *)(a1 + 392);
  if ((v455 & 7) != 0)
  {
    v456 = (unsigned int *)(v455 & 0xFFFFFFFFFFFFFFF8);
    do
      v457 = __ldxr(v456);
    while (__stlxr(v457 - 2, v456));
  }
  v458 = *(_QWORD *)(a1 + 384);
  if ((v458 & 7) != 0)
  {
    v459 = (unsigned int *)(v458 & 0xFFFFFFFFFFFFFFF8);
    do
      v460 = __ldxr(v459);
    while (__stlxr(v460 - 2, v459));
  }
  v461 = *(_QWORD *)(a1 + 376);
  if ((v461 & 7) != 0)
  {
    v462 = (unsigned int *)(v461 & 0xFFFFFFFFFFFFFFF8);
    do
      v463 = __ldxr(v462);
    while (__stlxr(v463 - 2, v462));
  }
  v464 = *(_QWORD *)(a1 + 368);
  if ((v464 & 7) != 0)
  {
    v465 = (unsigned int *)(v464 & 0xFFFFFFFFFFFFFFF8);
    do
      v466 = __ldxr(v465);
    while (__stlxr(v466 - 2, v465));
  }
  v467 = *(_QWORD *)(a1 + 360);
  if ((v467 & 7) != 0)
  {
    v468 = (unsigned int *)(v467 & 0xFFFFFFFFFFFFFFF8);
    do
      v469 = __ldxr(v468);
    while (__stlxr(v469 - 2, v468));
  }
  v470 = *(_QWORD *)(a1 + 352);
  if ((v470 & 7) != 0)
  {
    v471 = (unsigned int *)(v470 & 0xFFFFFFFFFFFFFFF8);
    do
      v472 = __ldxr(v471);
    while (__stlxr(v472 - 2, v471));
  }
  v473 = *(_QWORD *)(a1 + 344);
  if ((v473 & 7) != 0)
  {
    v474 = (unsigned int *)(v473 & 0xFFFFFFFFFFFFFFF8);
    do
      v475 = __ldxr(v474);
    while (__stlxr(v475 - 2, v474));
  }
  v476 = *(_QWORD *)(a1 + 336);
  if ((v476 & 7) != 0)
  {
    v477 = (unsigned int *)(v476 & 0xFFFFFFFFFFFFFFF8);
    do
      v478 = __ldxr(v477);
    while (__stlxr(v478 - 2, v477));
  }
  v479 = *(_QWORD *)(a1 + 328);
  if ((v479 & 7) != 0)
  {
    v480 = (unsigned int *)(v479 & 0xFFFFFFFFFFFFFFF8);
    do
      v481 = __ldxr(v480);
    while (__stlxr(v481 - 2, v480));
  }
  v482 = *(_QWORD *)(a1 + 320);
  if ((v482 & 7) != 0)
  {
    v483 = (unsigned int *)(v482 & 0xFFFFFFFFFFFFFFF8);
    do
      v484 = __ldxr(v483);
    while (__stlxr(v484 - 2, v483));
  }
  v485 = *(_QWORD *)(a1 + 312);
  if ((v485 & 7) != 0)
  {
    v486 = (unsigned int *)(v485 & 0xFFFFFFFFFFFFFFF8);
    do
      v487 = __ldxr(v486);
    while (__stlxr(v487 - 2, v486));
  }
  v488 = *(_QWORD *)(a1 + 304);
  if ((v488 & 7) != 0)
  {
    v489 = (unsigned int *)(v488 & 0xFFFFFFFFFFFFFFF8);
    do
      v490 = __ldxr(v489);
    while (__stlxr(v490 - 2, v489));
  }
  v491 = *(_QWORD *)(a1 + 296);
  if ((v491 & 7) != 0)
  {
    v492 = (unsigned int *)(v491 & 0xFFFFFFFFFFFFFFF8);
    do
      v493 = __ldxr(v492);
    while (__stlxr(v493 - 2, v492));
  }
  v494 = *(_QWORD *)(a1 + 288);
  if ((v494 & 7) != 0)
  {
    v495 = (unsigned int *)(v494 & 0xFFFFFFFFFFFFFFF8);
    do
      v496 = __ldxr(v495);
    while (__stlxr(v496 - 2, v495));
  }
  v497 = *(_QWORD *)(a1 + 280);
  if ((v497 & 7) != 0)
  {
    v498 = (unsigned int *)(v497 & 0xFFFFFFFFFFFFFFF8);
    do
      v499 = __ldxr(v498);
    while (__stlxr(v499 - 2, v498));
  }
  v500 = *(_QWORD *)(a1 + 272);
  if ((v500 & 7) != 0)
  {
    v501 = (unsigned int *)(v500 & 0xFFFFFFFFFFFFFFF8);
    do
      v502 = __ldxr(v501);
    while (__stlxr(v502 - 2, v501));
  }
  v503 = *(_QWORD *)(a1 + 264);
  if ((v503 & 7) != 0)
  {
    v504 = (unsigned int *)(v503 & 0xFFFFFFFFFFFFFFF8);
    do
      v505 = __ldxr(v504);
    while (__stlxr(v505 - 2, v504));
  }
  v506 = *(_QWORD *)(a1 + 256);
  if ((v506 & 7) != 0)
  {
    v507 = (unsigned int *)(v506 & 0xFFFFFFFFFFFFFFF8);
    do
      v508 = __ldxr(v507);
    while (__stlxr(v508 - 2, v507));
  }
  v509 = *(_QWORD *)(a1 + 248);
  if ((v509 & 7) != 0)
  {
    v510 = (unsigned int *)(v509 & 0xFFFFFFFFFFFFFFF8);
    do
      v511 = __ldxr(v510);
    while (__stlxr(v511 - 2, v510));
  }
  v512 = *(_QWORD *)(a1 + 240);
  if ((v512 & 7) != 0)
  {
    v513 = (unsigned int *)(v512 & 0xFFFFFFFFFFFFFFF8);
    do
      v514 = __ldxr(v513);
    while (__stlxr(v514 - 2, v513));
  }
  v515 = *(_QWORD *)(a1 + 232);
  if ((v515 & 7) != 0)
  {
    v516 = (unsigned int *)(v515 & 0xFFFFFFFFFFFFFFF8);
    do
      v517 = __ldxr(v516);
    while (__stlxr(v517 - 2, v516));
  }
  v518 = *(_QWORD *)(a1 + 224);
  if ((v518 & 7) != 0)
  {
    v519 = (unsigned int *)(v518 & 0xFFFFFFFFFFFFFFF8);
    do
      v520 = __ldxr(v519);
    while (__stlxr(v520 - 2, v519));
  }
  v521 = *(_QWORD *)(a1 + 216);
  if ((v521 & 7) != 0)
  {
    v522 = (unsigned int *)(v521 & 0xFFFFFFFFFFFFFFF8);
    do
      v523 = __ldxr(v522);
    while (__stlxr(v523 - 2, v522));
  }
  v524 = *(_QWORD *)(a1 + 208);
  if ((v524 & 7) != 0)
  {
    v525 = (unsigned int *)(v524 & 0xFFFFFFFFFFFFFFF8);
    do
      v526 = __ldxr(v525);
    while (__stlxr(v526 - 2, v525));
  }
  v527 = *(_QWORD *)(a1 + 200);
  if ((v527 & 7) != 0)
  {
    v528 = (unsigned int *)(v527 & 0xFFFFFFFFFFFFFFF8);
    do
      v529 = __ldxr(v528);
    while (__stlxr(v529 - 2, v528));
  }
  v530 = *(_QWORD *)(a1 + 192);
  if ((v530 & 7) != 0)
  {
    v531 = (unsigned int *)(v530 & 0xFFFFFFFFFFFFFFF8);
    do
      v532 = __ldxr(v531);
    while (__stlxr(v532 - 2, v531));
  }
  v533 = *(_QWORD *)(a1 + 184);
  if ((v533 & 7) != 0)
  {
    v534 = (unsigned int *)(v533 & 0xFFFFFFFFFFFFFFF8);
    do
      v535 = __ldxr(v534);
    while (__stlxr(v535 - 2, v534));
  }
  v536 = *(_QWORD *)(a1 + 176);
  if ((v536 & 7) != 0)
  {
    v537 = (unsigned int *)(v536 & 0xFFFFFFFFFFFFFFF8);
    do
      v538 = __ldxr(v537);
    while (__stlxr(v538 - 2, v537));
  }
  v539 = *(_QWORD *)(a1 + 168);
  if ((v539 & 7) != 0)
  {
    v540 = (unsigned int *)(v539 & 0xFFFFFFFFFFFFFFF8);
    do
      v541 = __ldxr(v540);
    while (__stlxr(v541 - 2, v540));
  }
  v542 = *(_QWORD *)(a1 + 160);
  if ((v542 & 7) != 0)
  {
    v543 = (unsigned int *)(v542 & 0xFFFFFFFFFFFFFFF8);
    do
      v544 = __ldxr(v543);
    while (__stlxr(v544 - 2, v543));
  }
  v545 = *(_QWORD *)(a1 + 152);
  if ((v545 & 7) != 0)
  {
    v546 = (unsigned int *)(v545 & 0xFFFFFFFFFFFFFFF8);
    do
      v547 = __ldxr(v546);
    while (__stlxr(v547 - 2, v546));
  }
  v548 = *(_QWORD *)(a1 + 144);
  if ((v548 & 7) != 0)
  {
    v549 = (unsigned int *)(v548 & 0xFFFFFFFFFFFFFFF8);
    do
      v550 = __ldxr(v549);
    while (__stlxr(v550 - 2, v549));
  }
  v551 = *(_QWORD *)(a1 + 136);
  if ((v551 & 7) != 0)
  {
    v552 = (unsigned int *)(v551 & 0xFFFFFFFFFFFFFFF8);
    do
      v553 = __ldxr(v552);
    while (__stlxr(v553 - 2, v552));
  }
  v554 = *(_QWORD *)(a1 + 128);
  if ((v554 & 7) != 0)
  {
    v555 = (unsigned int *)(v554 & 0xFFFFFFFFFFFFFFF8);
    do
      v556 = __ldxr(v555);
    while (__stlxr(v556 - 2, v555));
  }
  v557 = *(_QWORD *)(a1 + 120);
  if ((v557 & 7) != 0)
  {
    v558 = (unsigned int *)(v557 & 0xFFFFFFFFFFFFFFF8);
    do
      v559 = __ldxr(v558);
    while (__stlxr(v559 - 2, v558));
  }
  v560 = *(_QWORD *)(a1 + 112);
  if ((v560 & 7) != 0)
  {
    v561 = (unsigned int *)(v560 & 0xFFFFFFFFFFFFFFF8);
    do
      v562 = __ldxr(v561);
    while (__stlxr(v562 - 2, v561));
  }
  v563 = *(_QWORD *)(a1 + 104);
  if ((v563 & 7) != 0)
  {
    v564 = (unsigned int *)(v563 & 0xFFFFFFFFFFFFFFF8);
    do
      v565 = __ldxr(v564);
    while (__stlxr(v565 - 2, v564));
  }
  v566 = *(_QWORD *)(a1 + 96);
  if ((v566 & 7) != 0)
  {
    v567 = (unsigned int *)(v566 & 0xFFFFFFFFFFFFFFF8);
    do
      v568 = __ldxr(v567);
    while (__stlxr(v568 - 2, v567));
  }
  v569 = *(_QWORD *)(a1 + 88);
  if ((v569 & 7) != 0)
  {
    v570 = (unsigned int *)(v569 & 0xFFFFFFFFFFFFFFF8);
    do
      v571 = __ldxr(v570);
    while (__stlxr(v571 - 2, v570));
  }
  v572 = *(_QWORD *)(a1 + 80);
  if ((v572 & 7) != 0)
  {
    v573 = (unsigned int *)(v572 & 0xFFFFFFFFFFFFFFF8);
    do
      v574 = __ldxr(v573);
    while (__stlxr(v574 - 2, v573));
  }
  v575 = *(_QWORD *)(a1 + 72);
  if ((v575 & 7) != 0)
  {
    v576 = (unsigned int *)(v575 & 0xFFFFFFFFFFFFFFF8);
    do
      v577 = __ldxr(v576);
    while (__stlxr(v577 - 2, v576));
  }
  v578 = *(_QWORD *)(a1 + 64);
  if ((v578 & 7) != 0)
  {
    v579 = (unsigned int *)(v578 & 0xFFFFFFFFFFFFFFF8);
    do
      v580 = __ldxr(v579);
    while (__stlxr(v580 - 2, v579));
  }
  v581 = *(_QWORD *)(a1 + 56);
  if ((v581 & 7) != 0)
  {
    v582 = (unsigned int *)(v581 & 0xFFFFFFFFFFFFFFF8);
    do
      v583 = __ldxr(v582);
    while (__stlxr(v583 - 2, v582));
  }
  v584 = *(_QWORD *)(a1 + 48);
  if ((v584 & 7) != 0)
  {
    v585 = (unsigned int *)(v584 & 0xFFFFFFFFFFFFFFF8);
    do
      v586 = __ldxr(v585);
    while (__stlxr(v586 - 2, v585));
  }
  v587 = *(_QWORD *)(a1 + 40);
  if ((v587 & 7) != 0)
  {
    v588 = (unsigned int *)(v587 & 0xFFFFFFFFFFFFFFF8);
    do
      v589 = __ldxr(v588);
    while (__stlxr(v589 - 2, v588));
  }
  v590 = *(_QWORD *)(a1 + 32);
  if ((v590 & 7) != 0)
  {
    v591 = (unsigned int *)(v590 & 0xFFFFFFFFFFFFFFF8);
    do
      v592 = __ldxr(v591);
    while (__stlxr(v592 - 2, v591));
  }
  v593 = *(_QWORD *)(a1 + 24);
  if ((v593 & 7) != 0)
  {
    v594 = (unsigned int *)(v593 & 0xFFFFFFFFFFFFFFF8);
    do
      v595 = __ldxr(v594);
    while (__stlxr(v595 - 2, v594));
  }
  v596 = *(_QWORD *)(a1 + 16);
  if ((v596 & 7) != 0)
  {
    v597 = (unsigned int *)(v596 & 0xFFFFFFFFFFFFFFF8);
    do
      v598 = __ldxr(v597);
    while (__stlxr(v598 - 2, v597));
  }
  v599 = *(_QWORD *)(a1 + 8);
  if ((v599 & 7) != 0)
  {
    v600 = (unsigned int *)(v599 & 0xFFFFFFFFFFFFFFF8);
    do
      v601 = __ldxr(v600);
    while (__stlxr(v601 - 2, v600));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v602 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v603 = __ldxr(v602);
    while (__stlxr(v603 - 2, v602));
  }
  return a1;
}

void sub_1DCAF0DD0(void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if ((v6 & 7) != 0)
        {
          v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stlxr(v8 - 2, v7));
        }
      }
      while (v3 != v2);
      v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

void sub_1DCAF0E2C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3f]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_1DCAF0ED0((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 12 * v5;
        v9 = v6;
        do
        {
          v10 = *v4;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v4 + 2);
          *v9 = v10;
          v9 = (_QWORD *)((char *)v9 + 12);
          v4 = (uint64_t *)((char *)v4 + 12);
          v8 -= 12;
        }
        while (v8);
      }
      sub_1DCAEEE78((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

_QWORD *sub_1DCAF0ED0(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 > 0x1555555555555553)
    v3 = -1;
  else
    v3 = 12 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCAF0F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DCAF0F78(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique() [T = int]");
      v4 = (int *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_1DCAF100C((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 4 * v5;
        v9 = v6;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      sub_1DCAEEE78((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

_QWORD *sub_1DCAF100C(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL)
    v3 = -1;
  else
    v3 = 4 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCAF1094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCAF10AC(_QWORD *a1)
{
  MDLTransform *v2;
  void *v3;

  *a1 = &unk_1EA574410;
  a1[1] = 0;
  v2 = objc_alloc_init(MDLTransform);
  sub_1DCAD3ADC((char **)&v2->_transform);
  v3 = (void *)a1[1];
  a1[1] = v2;

  return a1;
}

void sub_1DCAF1110(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCAF1130(uint64_t a1)
{

  return a1;
}

uint64_t sub_1DCAF1160(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void *sub_1DCAF116C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_1DCAE4CDC();
  return operator new(32 * a2);
}

void sub_1DCAF11A0(void *a1@<X0>, const std::string::value_type *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v16;
  _WORD *p_p;
  std::string::size_type v19;
  unint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  int v38;
  int v39;
  const char *v40;
  int v41;
  unsigned __int8 *v42;
  const char *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  const char *v50;
  BOOL v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _BYTE *v64;
  char *v65;
  id v66;
  id v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  std::string v74;
  void *__p;
  unint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  _OWORD v80[3];
  __int128 v81;
  __int128 v82;
  _BYTE v83[168];
  void *v84[2];
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  const std::string::value_type *v89;
  _BYTE __str[32];
  char *v91;

  v7 = a1;
  v8 = v7;
  v89 = a2;
  if (!a3)
  {
    sub_1DCB0345C(a4, "");
    goto LABEL_214;
  }
  v67 = v7;
  v87 = 0u;
  v88 = 0u;
  v86 = 0u;
  v84[0] = 0;
  v84[1] = 0;
  v85 = 0;
  v66 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v9 = (unint64_t)&a2[a3];
  v10 = 0;
  v11 = *MEMORY[0x1E0DE4F58];
  v70 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v69 = MEMORY[0x1E0DE4FB8] + 16;
  while (2)
  {
    memset(v83, 0, 160);
    v81 = 0u;
    v82 = 0u;
    memset(v80, 0, sizeof(v80));
    v78 = 0u;
    v79 = 0u;
    sub_1DCAF206C(&v89, v9, (std::string *)__str);
    sub_1DCAF21D4(&v78, (const std::string *)__str, 8);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    __p = 0;
    v76 = 0;
    v77 = 0;
    sub_1DCAF22B8((uint64_t *)&v78, (uint64_t)&__p);
    if (SHIBYTE(v77) < 0)
    {
      v12 = 3;
      if (*(_BYTE *)__p == 35)
        goto LABEL_188;
      v16 = v76;
      if (!v76)
        goto LABEL_188;
      if (v76 >= 0x801)
      {
        sub_1DCB0345C(a4, "lines in file too long to parse");
        v12 = 1;
        goto LABEL_188;
      }
      if (v76 == 1)
      {
        if (*(_BYTE *)__p == 115)
          goto LABEL_188;
        v22 = *(unsigned __int8 *)__p;
        if (v22 == 103)
          goto LABEL_52;
        if ((v77 & 0x8000000000000000) == 0)
        {
          if (HIBYTE(v77) != 1)
            goto LABEL_90;
          v13 = __p;
          goto LABEL_62;
        }
        if (v22 == 111)
        {
LABEL_65:
          memset(&v74, 0, sizeof(v74));
          sub_1DCAF22B8((uint64_t *)&v78, (uint64_t)&v74);
          v23 = v10;
          v24 = v88;
          if ((unint64_t)v88 >= *((_QWORD *)&v88 + 1))
          {
            v25 = (uint64_t)(v88 - *((_QWORD *)&v87 + 1)) >> 5;
            v59 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 59)
              sub_1DCAE4C44();
            v60 = *((_QWORD *)&v88 + 1) - *((_QWORD *)&v87 + 1);
            if ((uint64_t)(*((_QWORD *)&v88 + 1) - *((_QWORD *)&v87 + 1)) >> 4 > v59)
              v59 = v60 >> 4;
            if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFE0)
              v28 = 0x7FFFFFFFFFFFFFFLL;
            else
              v28 = v59;
            goto LABEL_183;
          }
LABEL_66:
          *(_DWORD *)v24 = 0;
          v29 = v24 + 32;
          *(_QWORD *)(v24 + 16) = 0;
          *(_QWORD *)(v24 + 24) = 0;
          *(_QWORD *)(v24 + 8) = 0;
LABEL_184:
          *(_QWORD *)&v88 = v29;
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v74.__r_.__value_.__l.__data_);
          v12 = 0;
LABEL_187:
          v10 = v23;
          goto LABEL_188;
        }
        v16 = v76;
      }
      else if (v76 == 6 && *(_DWORD *)__p == 1819047021 && *((_WORD *)__p + 2) == 25193)
      {
LABEL_39:
        memset(__str, 0, 24);
        std::stringbuf::str();
        v19 = std::string::find((const std::string *)__str, 35, 0);
        if (v19 != -1)
        {
          std::string::basic_string(&v74, (const std::string *)__str, 0, v19, (std::allocator<char> *)((char *)&v73 + 4));
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          *(std::string *)__str = v74;
        }
        v20 = __str[23];
        v21 = __str[23];
        if (__str[23] < 0)
          v20 = *(_QWORD *)&__str[8];
        if (v20 >= 8)
        {
          std::string::basic_string(&v74, (const std::string *)__str, 7uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)((char *)&v73 + 4));
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          *(std::string *)__str = v74;
          v21 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
        }
        if (v21 < 0)
          operator delete(*(void **)__str);
        goto LABEL_162;
      }
      if (v16 == 6)
      {
        if (*(_DWORD *)__p == 1835365237 && *((_WORD *)__p + 2) == 27764)
        {
LABEL_83:
          sub_1DCAF22B8((uint64_t *)&v78, (uint64_t)v84);
          v34 = v88;
          if ((_QWORD)v88 == *((_QWORD *)&v87 + 1))
          {
            memset(__str, 0, sizeof(__str));
            if ((unint64_t)v88 >= *((_QWORD *)&v88 + 1))
            {
              v34 = sub_1DCB042DC((uint64_t *)&v87 + 1, (uint64_t)__str);
              *(_QWORD *)&v88 = v34;
              if (*(_QWORD *)&__str[8])
              {
                *(_QWORD *)&__str[16] = *(_QWORD *)&__str[8];
                operator delete(*(void **)&__str[8]);
                v34 = v88;
              }
            }
            else
            {
              *(_DWORD *)v88 = 0;
              *(_QWORD *)(v34 + 16) = 0;
              *(_QWORD *)(v34 + 24) = 0;
              *(_QWORD *)(v34 + 8) = 0;
              *(_OWORD *)(v34 + 8) = *(_OWORD *)&__str[8];
              *(_QWORD *)(v34 + 24) = *(_QWORD *)&__str[24];
              v34 += 32;
              *(_QWORD *)&v88 = v34;
            }
          }
          if (!*(_DWORD *)(v34 - 32))
          {
            v12 = 0;
            goto LABEL_188;
          }
          v23 = v10;
          if (v34 >= *((_QWORD *)&v88 + 1))
          {
            v53 = (uint64_t)(v34 - *((_QWORD *)&v87 + 1)) >> 5;
            if ((unint64_t)(v53 + 1) >> 59)
              sub_1DCAE4C44();
            v54 = (uint64_t)(*((_QWORD *)&v88 + 1) - *((_QWORD *)&v87 + 1)) >> 4;
            if (v54 <= v53 + 1)
              v54 = v53 + 1;
            if (*((_QWORD *)&v88 + 1) - *((_QWORD *)&v87 + 1) >= 0x7FFFFFFFFFFFFFE0uLL)
              v55 = 0x7FFFFFFFFFFFFFFLL;
            else
              v55 = v54;
            v91 = (char *)&v88 + 8;
            v56 = (char *)sub_1DCAF116C((uint64_t)&v88 + 8, v55);
            v57 = &v56[32 * v53];
            *(_QWORD *)__str = v56;
            *(_QWORD *)&__str[8] = v57;
            *(_QWORD *)&__str[24] = &v56[32 * v58];
            *(_DWORD *)v57 = 0;
            *((_QWORD *)v57 + 2) = 0;
            *((_QWORD *)v57 + 3) = 0;
            *((_QWORD *)v57 + 1) = 0;
            *(_QWORD *)&__str[16] = v57 + 32;
            sub_1DCB043CC((uint64_t *)&v87 + 1, __str);
            v52 = v88;
            sub_1DCB04560((uint64_t)__str);
          }
          else
          {
            *(_DWORD *)v34 = 0;
            v52 = v34 + 32;
            *(_QWORD *)(v34 + 16) = 0;
            *(_QWORD *)(v34 + 24) = 0;
            *(_QWORD *)(v34 + 8) = 0;
          }
          v12 = 0;
          *(_QWORD *)&v88 = v52;
          goto LABEL_187;
        }
        v16 = v76;
      }
      if (v16 == 1)
      {
        if (*(_BYTE *)__p == 118)
          goto LABEL_76;
        v16 = v76;
      }
      if (v16 != 2)
        goto LABEL_90;
      p_p = __p;
      goto LABEL_89;
    }
    v12 = 3;
    if (!HIBYTE(v77))
      goto LABEL_188;
    v13 = __p;
    if (__p == 35)
      goto LABEL_188;
    switch(HIBYTE(v77))
    {
      case 1u:
        if (__p == 115)
          goto LABEL_188;
        if (__p == 103)
        {
LABEL_52:
          memset(&v74, 0, sizeof(v74));
          sub_1DCAF22B8((uint64_t *)&v78, (uint64_t)&v74);
          v23 = v10;
          v24 = v88;
          if ((unint64_t)v88 >= *((_QWORD *)&v88 + 1))
          {
            v25 = (uint64_t)(v88 - *((_QWORD *)&v87 + 1)) >> 5;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 59)
              sub_1DCAE4C44();
            v27 = *((_QWORD *)&v88 + 1) - *((_QWORD *)&v87 + 1);
            if ((uint64_t)(*((_QWORD *)&v88 + 1) - *((_QWORD *)&v87 + 1)) >> 4 > v26)
              v26 = v27 >> 4;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
              v28 = 0x7FFFFFFFFFFFFFFLL;
            else
              v28 = v26;
LABEL_183:
            v91 = (char *)&v88 + 8;
            v61 = (char *)sub_1DCAF116C((uint64_t)&v88 + 8, v28);
            v62 = &v61[32 * v25];
            *(_QWORD *)__str = v61;
            *(_QWORD *)&__str[8] = v62;
            *(_QWORD *)&__str[24] = &v61[32 * v63];
            *(_DWORD *)v62 = 0;
            *((_QWORD *)v62 + 2) = 0;
            *((_QWORD *)v62 + 3) = 0;
            *((_QWORD *)v62 + 1) = 0;
            *(_QWORD *)&__str[16] = v62 + 32;
            sub_1DCB043CC((uint64_t *)&v87 + 1, __str);
            v29 = v88;
            sub_1DCB04560((uint64_t)__str);
            goto LABEL_184;
          }
          goto LABEL_66;
        }
LABEL_62:
        if (v13 == 111)
          goto LABEL_65;
LABEL_19:
        if (HIBYTE(v77) == 1 && v13 == 118)
        {
LABEL_76:
          *(_DWORD *)__str = 0;
          HIDWORD(v73) = 0;
          LODWORD(v74.__r_.__value_.__l.__data_) = 0;
          MEMORY[0x1DF0D20D0](&v78, __str);
          MEMORY[0x1DF0D20D0](&v78, &v74);
          MEMORY[0x1DF0D20D0](&v78, (char *)&v73 + 4);
          LODWORD(v86) = v86 + 1;
          if ((*((_BYTE *)v80 + *(_QWORD *)(v78 - 24)) & 2) == 0)
          {
            v31 = v10;
            LODWORD(v73) = 0;
            v72 = 0;
            MEMORY[0x1DF0D20D0](&v78, &v73);
            v32 = *(_DWORD *)((char *)v80 + *(_QWORD *)(v78 - 24));
            MEMORY[0x1DF0D20D0](&v78, (char *)&v72 + 4);
            v33 = *(_DWORD *)((char *)v80 + *(_QWORD *)(v78 - 24));
            MEMORY[0x1DF0D20D0](&v78, &v72);
            v71 = 1065353216;
            if ((*((_BYTE *)v80 + *(_QWORD *)(v78 - 24)) & 2) == 0)
              MEMORY[0x1DF0D20D0](&v78, &v71);
            if (((v33 | v32) & 2) == 0 && (_DWORD)v86 - 1 == DWORD1(v86))
              DWORD1(v86) = v86;
            v10 = v31;
          }
          goto LABEL_162;
        }
        break;
      case 2u:
        p_p = &__p;
LABEL_89:
        if (*p_p == 25462)
        {
          *(_DWORD *)__str = 0;
          LODWORD(v74.__r_.__value_.__l.__data_) = 0;
          v73 = 0;
          MEMORY[0x1DF0D20D0](&v78, __str);
          MEMORY[0x1DF0D20D0](&v78, &v74);
          MEMORY[0x1DF0D20D0](&v78, (char *)&v73 + 4);
          MEMORY[0x1DF0D20D0](&v78, &v73);
          v12 = 0;
          ++DWORD1(v86);
          goto LABEL_188;
        }
        break;
      case 6u:
        if ((_DWORD)__p == 1819047021 && WORD2(__p) == 25193)
          goto LABEL_39;
        if ((_DWORD)__p == 1835365237 && WORD2(__p) == 27764)
          goto LABEL_83;
        goto LABEL_19;
    }
LABEL_90:
    if (sub_1DCAF24E8(&__p, "vt"))
    {
      *(_DWORD *)__str = 0;
      LODWORD(v74.__r_.__value_.__l.__data_) = 0;
      MEMORY[0x1DF0D20D0](&v78, __str);
      MEMORY[0x1DF0D20D0](&v78, &v74);
      ++DWORD2(v86);
      if ((*((_BYTE *)v80 + *(_QWORD *)(v78 - 24)) & 2) == 0)
      {
        MEMORY[0x1DF0D20D0](&v78, __str);
        if ((*((_BYTE *)v80 + *(_QWORD *)(v78 - 24)) & 2) == 0)
        {
          MEMORY[0x1DF0D20D0](&v78, &v74);
          ++HIDWORD(v86);
        }
      }
      goto LABEL_162;
    }
    if (sub_1DCAF24E8(&__p, "vt2"))
    {
      *(_DWORD *)__str = 0;
      LODWORD(v74.__r_.__value_.__l.__data_) = 0;
      MEMORY[0x1DF0D20D0](&v78, __str);
      MEMORY[0x1DF0D20D0](&v78, &v74);
      v12 = 0;
      ++HIDWORD(v86);
      goto LABEL_188;
    }
    if (sub_1DCAF24E8(&__p, "vn"))
    {
      *(_DWORD *)__str = 0;
      HIDWORD(v73) = 0;
      LODWORD(v74.__r_.__value_.__l.__data_) = 0;
      MEMORY[0x1DF0D20D0](&v78, __str);
      MEMORY[0x1DF0D20D0](&v78, &v74);
      MEMORY[0x1DF0D20D0](&v78, (char *)&v73 + 4);
      v12 = 0;
      LODWORD(v87) = v87 + 1;
      goto LABEL_188;
    }
    if (!sub_1DCAF24E8(&__p, "f"))
    {
      if (sub_1DCAF24E8(&__p, "p") || sub_1DCAF24E8(&__p, "l") || sub_1DCAF24E8(&__p, "t"))
        goto LABEL_162;
      if (SHIBYTE(v77) < 0)
      {
        if (v76 <= 1)
        {
          v12 = 0;
          goto LABEL_189;
        }
        v64 = (char *)__p + 1;
      }
      else
      {
        v64 = (char *)&__p + 1;
        if (HIBYTE(v77) <= 1u)
        {
          v12 = 0;
          goto LABEL_190;
        }
      }
      v12 = 0;
      if (*v64 == 32)
        v10 = v10;
      else
        v10 = (v10 + 1);
      goto LABEL_188;
    }
    if ((_QWORD)v88 == *((_QWORD *)&v87 + 1))
    {
      memset(__str, 0, sizeof(__str));
      sub_1DCAF2578((uint64_t *)&v87 + 1, (uint64_t)__str);
      if (*(_QWORD *)&__str[8])
      {
        *(_QWORD *)&__str[16] = *(_QWORD *)&__str[8];
        operator delete(*(void **)&__str[8]);
      }
    }
    if ((*((_BYTE *)v80 + *(_QWORD *)(v78 - 24)) & 2) != 0)
      goto LABEL_162;
    v68 = 0;
    do
    {
      memset(__str, 0, 24);
      sub_1DCAF22B8((uint64_t *)&v78, (uint64_t)__str);
      v35 = v10;
      if ((__str[23] & 0x80000000) != 0)
      {
        v36 = *(_QWORD *)&__str[8];
        if (!*(_QWORD *)&__str[8])
        {
          v10 = v35;
LABEL_155:
          operator delete(*(void **)__str);
          continue;
        }
        v37 = *(const char **)__str;
      }
      else
      {
        v36 = __str[23];
        if (!__str[23])
        {
          v10 = v35;
          continue;
        }
        v37 = __str;
      }
      v38 = strtol(v37, 0, 10);
      v39 = *(unsigned __int8 *)v37;
      v40 = v37;
      if (v39 == 45)
      {
        v40 = v37 + 1;
        v39 = *((unsigned __int8 *)v37 + 1);
      }
      if ((v39 - 48) <= 9)
      {
        do
        {
          v41 = *(unsigned __int8 *)++v40;
          v39 = v41;
        }
        while ((v41 - 48) < 0xA);
      }
      v42 = (unsigned __int8 *)&v37[v36];
      if (v42 > (unsigned __int8 *)v40)
      {
        if (v39 == 47)
          v43 = v40 + 1;
        else
          v43 = v40;
        if (v42 > (unsigned __int8 *)v43)
        {
          if (*v43 == 47)
          {
            ++v43;
          }
          else
          {
            strtol(v43, 0, 10);
            v44 = *(unsigned __int8 *)v43;
            if (v44 == 45)
            {
              v45 = *(unsigned __int8 *)++v43;
              v44 = v45;
            }
            if ((v44 - 48) <= 9)
            {
              do
              {
                v46 = *(unsigned __int8 *)++v43;
                v44 = v46;
              }
              while ((v46 - 48) < 0xA);
            }
            if (v44 == 47)
              ++v43;
          }
        }
        if (v42 > (unsigned __int8 *)v43)
        {
          if (*v43 == 47)
          {
            ++v43;
          }
          else
          {
            strtol(v43, 0, 10);
            v47 = *(unsigned __int8 *)v43;
            if (v47 == 45)
            {
              v48 = *(unsigned __int8 *)++v43;
              v47 = v48;
            }
            if ((v47 - 48) <= 9)
            {
              do
              {
                v49 = *(unsigned __int8 *)++v43;
                v47 = v49;
              }
              while ((v49 - 48) < 0xA);
            }
            if (v47 == 47)
              ++v43;
          }
        }
        if (v42 > (unsigned __int8 *)v43)
        {
          if (*v43 == 47)
            v50 = v43 + 1;
          else
            v50 = v43;
          strtol(v50, 0, 10);
        }
      }
      if ((_DWORD)v86)
        v51 = (int)v86 < v38;
      else
        v51 = 1;
      if (v51)
      {
        v10 = v35;
      }
      else
      {
        v10 = v35;
        if (v38 >= 1 && v86 >= v38 || v38 < 0 && v38 >= -(int)v86)
        {
          ++*(_DWORD *)(v88 - 32);
          ++v68;
        }
      }
      if ((__str[23] & 0x80000000) != 0)
        goto LABEL_155;
    }
    while ((*((_BYTE *)v80 + *(_QWORD *)(v78 - 24)) & 2) == 0);
    if ((v68 - 3) >= 0xFFFFFFFE)
    {
      v12 = 0;
      *(_DWORD *)(v88 - 32) -= v68;
      goto LABEL_188;
    }
LABEL_162:
    v12 = 0;
LABEL_188:
    if (SHIBYTE(v77) < 0)
LABEL_189:
      operator delete(__p);
LABEL_190:
    *(_QWORD *)&v78 = v11;
    *(_QWORD *)((char *)&v78 + *(_QWORD *)(v11 - 24)) = v70;
    *(_QWORD *)&v79 = v69;
    if (SBYTE7(v82) < 0)
      operator delete((void *)v81);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1DF0D2238](&v83[8]);
    if (v12 == 3 || !v12)
    {
      if (v9 <= (unint64_t)v89 || (int)v10 >= 200)
      {
        if ((int)v10 <= 199)
          v65 = "";
        else
          v65 = "Too much unrecognized data in file, can't parse";
        sub_1DCB0345C(a4, v65);
        break;
      }
      continue;
    }
    break;
  }

  if (SHIBYTE(v85) < 0)
    operator delete(v84[0]);
  *(_QWORD *)&v78 = (char *)&v87 + 8;
  sub_1DCAFB95C((void ***)&v78);
  v8 = v67;
LABEL_214:

}

void sub_1DCAF1F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;

  if (a28 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  sub_1DCAF25DC((uint64_t)&a35);

  if (*(char *)(v36 - 209) < 0)
    operator delete(*(void **)(v35 + 280));
  a35 = a15;
  sub_1DCAFB95C((void ***)&a35);

  _Unwind_Resume(a1);
}

void sub_1DCAF206C(const std::string::value_type **a1@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  const std::string::value_type *v6;
  uint64_t v7;
  unsigned int v8;
  const std::string::value_type *v9;
  unint64_t v10;
  const std::string::value_type *v11;
  std::string v12;

  v6 = *a1;
  memset(&v12, 0, sizeof(v12));
  while ((unint64_t)v6 < a2)
  {
    v7 = 0;
    v8 = a2 - (_DWORD)v6;
    while (v6[v7] != 10)
    {
      *a1 = &v6[++v7];
      if (a2 - (_QWORD)v6 == v7)
      {
        v9 = (const std::string::value_type *)a2;
        goto LABEL_8;
      }
    }
    v9 = &v6[v7];
    v8 = v7;
LABEL_8:
    if ((unint64_t)(v9 + 1) >= a2 || v9 == v6 || *(v9 - 1) != 92)
      goto LABEL_13;
    std::string::append(&v12, v6, (int)(v8 - 1));
    v6 = *a1 + 1;
    *a1 = v6;
  }
  v8 = 0;
  v9 = v6;
LABEL_13:
  if ((unint64_t)v9 < a2)
  {
    v10 = a2 - (_QWORD)v9;
    v11 = v9 + 1;
    do
    {
      if (*(v11 - 1) != 10)
        break;
      *a1 = v11++;
      --v10;
    }
    while (v10);
  }
  std::string::append(&v12, v6, v8);
  sub_1DCAFB818(&v12);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_1DCACA658(a3, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    *a3 = v12;
  }
}

void sub_1DCAF21B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1DCAF21D4(_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x1E0DE4FD8];
  v7 = MEMORY[0x1E0DE4FD8] + 64;
  a1[15] = MEMORY[0x1E0DE4FD8] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  sub_1DCB03594(v8, a2, a3 | 8);
  return a1;
}

void sub_1DCAF2290(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1DF0D2238](v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCAF22B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  v20 = 0;
  MEMORY[0x1DF0D20AC](&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_14;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1DCAF2470(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1DCAF243CLL);
  }
  __cxa_rethrow();
}

void sub_1DCAF24D4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL sub_1DCAF24E8(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      sub_1DCB0350C();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t sub_1DCAF2578(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = sub_1DCB042DC(a1, a2);
  }
  else
  {
    *(_DWORD *)v3 = *(_DWORD *)a2;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_OWORD *)(v3 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    result = v3 + 32;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_1DCAF25DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F58];
  v3 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1DF0D2238](a1 + 120);
  return a1;
}

void sub_1DCAF2660(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  std::string::size_type v18;
  char v19;
  std::string __p;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v8 = v5;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  if (!v5)
    goto LABEL_6;
  objc_msgSend_name(v5, v6, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
    goto LABEL_6;
  objc_msgSend_name(v8, v10, v11);
  v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v15 = objc_msgSend_UTF8String(v12, v13, v14);
  MEMORY[0x1DF0D201C](a3, v15);

  v16 = *(unsigned __int8 *)(a3 + 23);
  if (*(char *)(a3 + 23) < 0)
    v16 = *(_QWORD *)(a3 + 8);
  if (!v16)
  {
LABEL_6:
    std::to_string(&__p, a2);
    v17 = std::string::insert(&__p, 0, "material_");
    v18 = v17->__r_.__value_.__r.__words[0];
    v21[0] = v17->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
    v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_QWORD *)a3 = v18;
    *(_QWORD *)(a3 + 8) = v21[0];
    *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v21 + 7);
    *(_BYTE *)(a3 + 23) = v19;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }

}

void sub_1DCAF27B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  uint64_t v15;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);

  _Unwind_Resume(a1);
}

_QWORD *sub_1DCAF2800@<X0>(uint64_t a1@<X1>, std::string *a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  const char *v12;
  void *v13;
  void *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  const std::locale::facet *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  int v33;
  id v34;
  id v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  void *locale;
  uint64_t v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  _QWORD *v44;
  const std::locale::facet *v45;
  const std::locale::facet *v46;
  _QWORD *result;
  id v48;
  id v49;
  void *v50;
  int v51;
  uint64_t v53;
  std::locale v54;
  uint64_t v55;
  unsigned __int8 v56;
  std::locale v57;
  uint64_t v58;
  _BYTE v59[408];
  _QWORD v60[21];

  v60[19] = *MEMORY[0x1E0C80C00];
  bzero(v59, 0x230uLL);
  v7 = MEMORY[0x1E0DE4FB0];
  v8 = MEMORY[0x1E0DE4FB0] + 64;
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  v60[0] = MEMORY[0x1E0DE4FB0] + 64;
  v58 = v9;
  *(_QWORD *)&v59[*(_QWORD *)(v9 - 24) - 8] = v10;
  v11 = (std::ios_base *)&v59[*(_QWORD *)(v58 - 24) - 8];
  std::ios_base::init(v11, v59);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v58 = v7 + 24;
  v60[0] = v8;
  MEMORY[0x1DF0D2088](v59);
  std::ofstream::open();
  v51 = *(_DWORD *)&v59[*(_QWORD *)(v58 - 24) + 24] & 5;
  if (v51)
  {
    sub_1DCB0345C(a4, "Failed to open file path.");
    goto LABEL_20;
  }
  v13 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v12, a1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fileURLWithPath_(v13, v15, (uint64_t)v14);
  v50 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_lastPathComponent(v50, v16, v17);
  v48 = (id)objc_claimAutoreleasedReturnValue();
  v18 = sub_1DCB03734(&v58, (uint64_t)"# Apple ModelI/O MTL File: ", 27);
  v49 = objc_retainAutorelease(v48);
  v21 = (const char *)objc_msgSend_UTF8String(v49, v19, v20);
  v22 = strlen(v21);
  v23 = sub_1DCB03734(v18, (uint64_t)v21, v22);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
  v24 = std::locale::use_facet(&v54, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale(&v54);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
  v25 = std::locale::use_facet(&v54, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale(&v54);
  std::ostream::put();
  std::ostream::flush();
  objc_msgSend_path(v50, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByDeletingLastPathComponent(v28, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  v32 = *a3;
  v53 = a3[1];
  if (*a3 != v53)
  {
    v33 = 1;
    do
    {
      v34 = *(id *)(v32 + 64);
      v35 = *(id *)(v32 + 72);
      objc_msgSend_material(v35, v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = sub_1DCB03734(&v58, (uint64_t)"newmtl ", 7);
      sub_1DCAF2660(v38, v33, (uint64_t)&v54);
      if ((v56 & 0x80u) == 0)
        locale = &v54;
      else
        locale = v54.__locale_;
      if ((v56 & 0x80u) == 0)
        v41 = v56;
      else
        v41 = v55;
      v42 = sub_1DCB03734(v39, (uint64_t)locale, v41);
      std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
      v43 = std::locale::use_facet(&v57, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
      std::locale::~locale(&v57);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v56 < 0)
      {
        operator delete(v54.__locale_);
        if (!v38)
        {
LABEL_15:
          v44 = sub_1DCB03734(&v58, (uint64_t)"Kd = 0.5 0.5 0.5", 16);
          std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(_QWORD *)(*v44 - 24)));
          v45 = std::locale::use_facet(&v54, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
          std::locale::~locale(&v54);
          std::ostream::put();
          std::ostream::flush();
          goto LABEL_16;
        }
      }
      else if (!v38)
      {
        goto LABEL_15;
      }
      sub_1DCAF326C(v38, 0, "Kd", "map_Kd", a2, &v58, v31);
      sub_1DCAF326C(v38, 13, "Ka", "map_Ka", a2, &v58, v31);
      sub_1DCAF326C(v38, 3, "Ks", "map_Ks", a2, &v58, v31);
      sub_1DCAF326C(v38, 15, "d", "map_d", a2, &v58, v31);
      sub_1DCAF326C(v38, 22, "ao", "map_ao", a2, &v58, v31);
      sub_1DCAF326C(v38, 4, "Ns", "map_Ns", a2, &v58, v31);
      sub_1DCAF326C(v38, 14, "bump", "map_bump", a2, &v58, v31);
      sub_1DCAF326C(v38, 1, "subsurface", "map_subsurface", a2, &v58, v31);
      sub_1DCAF326C(v38, 2, "metallic", "map_metallic", a2, &v58, v31);
      sub_1DCAF326C(v38, 5, "specularTint", "map_specularTint", a2, &v58, v31);
      sub_1DCAF326C(v38, 6, "roughness", "map_roughness", a2, &v58, v31);
      sub_1DCAF326C(v38, 7, "anisotropic", "map_anisotropic", a2, &v58, v31);
      sub_1DCAF326C(v38, 8, "anisotropicRotation", "map_anisotropicRotation", a2, &v58, v31);
      sub_1DCAF326C(v38, 9, "sheen", "map_sheen", a2, &v58, v31);
      sub_1DCAF326C(v38, 10, "sheenTint", "map_sheenTint", a2, &v58, v31);
      sub_1DCAF326C(v38, 11, "clearCoat", "map_clearCoat", a2, &v58, v31);
      sub_1DCAF326C(v38, 12, "clearCoatGloss", "map_clearCoatGloss", a2, &v58, v31);
      sub_1DCAF326C(v38, 18, "objectSpaceNormal", "map_objectSpaceNormal", a2, &v58, v31);
      sub_1DCAF326C(v38, 19, "tangentSpaceNormal", "map_tangentSpaceNormal", a2, &v58, v31);
      sub_1DCAF326C(v38, 20, "displacement", "map_displacement", a2, &v58, v31);
      sub_1DCAF326C(v38, 21, "objectDisplacementScale", "map_objectDisplacementScale", a2, &v58, v31);
LABEL_16:
      std::ios_base::getloc((const std::ios_base *)&v59[*(_QWORD *)(v58 - 24) - 8]);
      v46 = std::locale::use_facet(&v54, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
      std::locale::~locale(&v54);
      std::ostream::put();
      std::ostream::flush();

      v32 += 80;
      ++v33;
    }
    while (v32 != v53);
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v59[*(_QWORD *)(v58 - 24) - 8], *(_DWORD *)&v59[*(_QWORD *)(v58 - 24) + 24] | 4);

LABEL_20:
  v58 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)&v59[*(_QWORD *)(v58 - 24) - 8] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1DF0D2094](v59);
  std::ostream::~ostream();
  result = (_QWORD *)MEMORY[0x1DF0D2238](v60);
  if (!v51)
    return sub_1DCB0345C(a4, "");
  return result;
}

void sub_1DCAF30C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, std::locale a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::locale a24,uint64_t a25)
{
  void *v25;
  void *v28;
  char *v29;

  sub_1DCAF3ED4(&a25);
  if (a2 == 1)
  {
    v28 = __cxa_begin_catch(a1);
    v29 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
    sub_1DCB0345C(a16, v29);
    __cxa_end_catch();
    JUMPOUT(0x1DCAF308CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1DCAF326C(void *a1, uint64_t a2, const char *a3, const char *a4, std::string *a5, _QWORD *a6, void *a7)
{
  const char *v10;
  void *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  const char *v19;
  uint64_t v20;
  id v21;
  const char *v22;
  char *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  void *v30;
  const char *v31;
  void *v32;
  const char *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  _QWORD *v42;
  size_t v43;
  _QWORD *v44;
  _QWORD *v45;
  id v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  size_t v50;
  _QWORD *v51;
  const std::locale::facet *v52;
  CGColor *v53;
  CGColor *v54;
  _QWORD *v55;
  size_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  const std::locale::facet *v61;
  _QWORD *v62;
  size_t v63;
  _QWORD *v64;
  _QWORD *v65;
  const std::locale::facet *v66;
  _QWORD *v67;
  size_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  const std::locale::facet *v74;
  _QWORD *v75;
  size_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  const std::locale::facet *v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  id v85;
  const char *v86;
  char *v87;
  _QWORD *v88;
  size_t v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  const std::locale::facet *v93;
  _QWORD *v94;
  size_t v95;
  _QWORD *v96;
  _QWORD *v97;
  void *locale;
  uint64_t v99;
  _QWORD *v100;
  size_t v101;
  _QWORD *v102;
  _QWORD *v103;
  const std::locale::facet *v104;
  id v105;
  id v106;
  id v107;
  id obj;
  std::string __p;
  std::string __dst;
  std::string v114;
  std::locale v115[2];
  int64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _BYTE v121[128];
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v106 = a1;
  v107 = a7;
  objc_msgSend_propertiesWithSemantic_(v106, v10, a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v105 = v11;
    obj = v11;
    v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v117, v121, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v118;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v118 != v16)
            objc_enumerationMutation(obj);
          v18 = *(void **)(*((_QWORD *)&v117 + 1) + 8 * i);
          switch(objc_msgSend_type(v18, v13, v14))
          {
            case 1:
              v115[0].__locale_ = 0;
              v115[1].__locale_ = 0;
              v116 = 0;
              objc_msgSend_stringValue(v18, v19, v20);
              v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v23 = (char *)objc_msgSend_cStringUsingEncoding_(v21, v22, 4);
              sub_1DCB0345C(v115, v23);

              if (SHIBYTE(v116) < 0)
              {
                sub_1DCACA658(&__p, v115[0].__locale_, (unint64_t)v115[1].__locale_);
              }
              else
              {
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v115[0].__locale_;
                __p.__r_.__value_.__r.__words[2] = v116;
              }
              sub_1DCAFB9E8(&__p, a5, &v114);
              if (SHIBYTE(v116) < 0)
                operator delete(v115[0].__locale_);
              *(_OWORD *)&v115[0].__locale_ = *(_OWORD *)&v114.__r_.__value_.__l.__data_;
              v116 = v114.__r_.__value_.__r.__words[2];
              *((_BYTE *)&v114.__r_.__value_.__s + 23) = 0;
              v114.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v94 = sub_1DCB03734(a6, (uint64_t)"\t", 1);
              v95 = strlen(a4);
              v96 = sub_1DCB03734(v94, (uint64_t)a4, v95);
              v97 = sub_1DCB03734(v96, (uint64_t)" ", 1);
              if (v116 >= 0)
                locale = v115;
              else
                locale = v115[0].__locale_;
              if (v116 >= 0)
                v99 = HIBYTE(v116);
              else
                v99 = (uint64_t)v115[1].__locale_;
              goto LABEL_41;
            case 2:
              v115[0].__locale_ = 0;
              v115[1].__locale_ = 0;
              v116 = 0;
              objc_msgSend_URLValue(v18, v19, v20);
              v82 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_path(v82, v83, v84);
              v85 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v87 = (char *)objc_msgSend_cStringUsingEncoding_(v85, v86, 4);
              sub_1DCB0345C(v115, v87);

              if (SHIBYTE(v116) < 0)
              {
                sub_1DCACA658(&__dst, v115[0].__locale_, (unint64_t)v115[1].__locale_);
              }
              else
              {
                *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v115[0].__locale_;
                __dst.__r_.__value_.__r.__words[2] = v116;
              }
              sub_1DCAFB9E8(&__dst, a5, &v114);
              if (SHIBYTE(v116) < 0)
                operator delete(v115[0].__locale_);
              *(_OWORD *)&v115[0].__locale_ = *(_OWORD *)&v114.__r_.__value_.__l.__data_;
              v116 = v114.__r_.__value_.__r.__words[2];
              *((_BYTE *)&v114.__r_.__value_.__s + 23) = 0;
              v114.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              v100 = sub_1DCB03734(a6, (uint64_t)"\t", 1);
              v101 = strlen(a4);
              v102 = sub_1DCB03734(v100, (uint64_t)a4, v101);
              v97 = sub_1DCB03734(v102, (uint64_t)" ", 1);
              if (v116 >= 0)
                locale = v115;
              else
                locale = v115[0].__locale_;
              if (v116 >= 0)
                v99 = HIBYTE(v116);
              else
                v99 = (uint64_t)v115[1].__locale_;
LABEL_41:
              v103 = sub_1DCB03734(v97, (uint64_t)locale, v99);
              std::ios_base::getloc((const std::ios_base *)((char *)v103 + *(_QWORD *)(*v103 - 24)));
              v104 = std::locale::use_facet((const std::locale *)&v114, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v104->__vftable[2].~facet_0)(v104, 10);
              std::locale::~locale((std::locale *)&v114);
              std::ostream::put();
              std::ostream::flush();
              if (SHIBYTE(v116) < 0)
                operator delete(v115[0].__locale_);
              break;
            case 3:
              objc_msgSend_name(v106, v19, v20);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_name(v18, v25, v26);
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_stringByAppendingFormat_(v24, v28, (uint64_t)CFSTR("_%@.png"), v27);
              v29 = (void *)objc_claimAutoreleasedReturnValue();

              v30 = (void *)MEMORY[0x1E0C99E98];
              objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v31, (uint64_t)CFSTR("%@/%@"), v107, v29);
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_fileURLWithPath_(v30, v33, (uint64_t)v32);
              v34 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend_textureSamplerValue(v18, v35, v36);
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_texture(v37, v38, v39);
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_writeToURL_(v40, v41, (uint64_t)v34);

              v42 = sub_1DCB03734(a6, (uint64_t)"\t", 1);
              v43 = strlen(a4);
              v44 = sub_1DCB03734(v42, (uint64_t)a4, v43);
              v45 = sub_1DCB03734(v44, (uint64_t)" ", 1);
              v46 = objc_retainAutorelease(v29);
              v49 = (const char *)objc_msgSend_UTF8String(v46, v47, v48);
              v50 = strlen(v49);
              v51 = sub_1DCB03734(v45, (uint64_t)v49, v50);
              std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(_QWORD *)(*v51 - 24)));
              v52 = std::locale::use_facet(v115, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
              std::locale::~locale(v115);
              std::ostream::put();
              std::ostream::flush();

              break;
            case 4:
              v53 = (CGColor *)objc_msgSend_color(v18, v19, v20);
              if (CGColorGetNumberOfComponents(v53) >= 3)
              {
                v54 = (CGColor *)objc_msgSend_color(v18, v13, v14);
                CGColorGetComponents(v54);
                v55 = sub_1DCB03734(a6, (uint64_t)"\t", 1);
                v56 = strlen(a3);
                v57 = sub_1DCB03734(v55, (uint64_t)a3, v56);
                sub_1DCB03734(v57, (uint64_t)" ", 1);
                v58 = (_QWORD *)std::ostream::operator<<();
                sub_1DCB03734(v58, (uint64_t)" ", 1);
                v59 = (_QWORD *)std::ostream::operator<<();
                sub_1DCB03734(v59, (uint64_t)" ", 1);
                v60 = (_QWORD *)std::ostream::operator<<();
                std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(_QWORD *)(*v60 - 24)));
                v61 = std::locale::use_facet(v115, MEMORY[0x1E0DE4A90]);
                ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
                std::locale::~locale(v115);
                std::ostream::put();
                std::ostream::flush();
              }
              break;
            case 5:
              objc_msgSend_floatValue(v18, v19, v20);
              v62 = sub_1DCB03734(a6, (uint64_t)"\t", 1);
              v63 = strlen(a3);
              v64 = sub_1DCB03734(v62, (uint64_t)a3, v63);
              sub_1DCB03734(v64, (uint64_t)" ", 1);
              v65 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(_QWORD *)(*v65 - 24)));
              v66 = std::locale::use_facet(v115, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
              std::locale::~locale(v115);
              std::ostream::put();
              std::ostream::flush();
              break;
            case 6:
              objc_msgSend_float2Value(v18, v19, v20);
              v88 = sub_1DCB03734(a6, (uint64_t)"\t", 1);
              v89 = strlen(a3);
              v90 = sub_1DCB03734(v88, (uint64_t)a3, v89);
              sub_1DCB03734(v90, (uint64_t)" ", 1);
              v91 = (_QWORD *)std::ostream::operator<<();
              sub_1DCB03734(v91, (uint64_t)" ", 1);
              v92 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v92 + *(_QWORD *)(*v92 - 24)));
              v93 = std::locale::use_facet(v115, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v93->__vftable[2].~facet_0)(v93, 10);
              std::locale::~locale(v115);
              std::ostream::put();
              std::ostream::flush();
              break;
            case 8:
              objc_msgSend_float4Value(v18, v19, v20);
              v67 = sub_1DCB03734(a6, (uint64_t)"\t", 1);
              v68 = strlen(a3);
              v69 = sub_1DCB03734(v67, (uint64_t)a3, v68);
              sub_1DCB03734(v69, (uint64_t)" ", 1);
              v70 = (_QWORD *)std::ostream::operator<<();
              sub_1DCB03734(v70, (uint64_t)" ", 1);
              v71 = (_QWORD *)std::ostream::operator<<();
              sub_1DCB03734(v71, (uint64_t)" ", 1);
              v72 = (_QWORD *)std::ostream::operator<<();
              sub_1DCB03734(v72, (uint64_t)" ", 1);
              v73 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v73 + *(_QWORD *)(*v73 - 24)));
              v74 = std::locale::use_facet(v115, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)(v74, 10);
              std::locale::~locale(v115);
              std::ostream::put();
              std::ostream::flush();
              break;
            default:
              objc_msgSend_float3Value(v18, v19, v20);
              v75 = sub_1DCB03734(a6, (uint64_t)"\t", 1);
              v76 = strlen(a3);
              v77 = sub_1DCB03734(v75, (uint64_t)a3, v76);
              sub_1DCB03734(v77, (uint64_t)" ", 1);
              v78 = (_QWORD *)std::ostream::operator<<();
              sub_1DCB03734(v78, (uint64_t)" ", 1);
              v79 = (_QWORD *)std::ostream::operator<<();
              sub_1DCB03734(v79, (uint64_t)" ", 1);
              v80 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v80 + *(_QWORD *)(*v80 - 24)));
              v81 = std::locale::use_facet(v115, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v81->__vftable[2].~facet_0)(v81, 10);
              std::locale::~locale(v115);
              std::ostream::put();
              std::ostream::flush();
              break;
          }
        }
        v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v13, (uint64_t)&v117, v121, 16);
      }
      while (v15);
    }

    v11 = v105;
  }

}

void sub_1DCAF3D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,std::locale a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{

  _Unwind_Resume(a1);
}

_QWORD *sub_1DCAF3ED4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *a1 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1DF0D2094](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x1DF0D2238](a1 + 52);
  return a1;
}

void sub_1DCAF3F2C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  std::string *p_str;
  std::string::size_type size;
  char *v16;
  int v17;
  std::string::size_type v18;
  _BYTE *v19;
  std::string *p_p;
  std::string::size_type v21;
  std::string *v22;
  char *v23;
  int v24;
  _QWORD *v25;
  std::string *v26;
  std::string::size_type v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  _QWORD *v30;
  std::string *v31;
  std::string::size_type v32;
  _QWORD *v33;
  _QWORD *v34;
  const std::locale::facet *v35;
  id v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  __n128 *v40;
  uint64_t i;
  void *v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  BOOL v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  id v53;
  const char *v54;
  uint64_t v55;
  std::string *v56;
  std::string::size_type v57;
  char *v58;
  int v59;
  __int128 *v60;
  float32x4_t *v61;
  unint64_t v62;
  void *v63;
  void *v64;
  float32x4_t *v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  id v71;
  const char *v72;
  uint64_t v73;
  char *v74;
  char **v75;
  uint64_t *v76;
  _QWORD *v77;
  const char *v78;
  uint64_t v79;
  id v80;
  const char *v81;
  uint64_t v82;
  const char *v83;
  size_t v84;
  _QWORD *v85;
  _QWORD *v86;
  const std::locale::facet *v87;
  _QWORD *v88;
  const std::locale::facet *v89;
  _QWORD *v90;
  const char *v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  const char *v95;
  size_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  const char *v110;
  const char *v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  unint64_t v115;
  const char *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  int v138;
  int v139;
  const char *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  unint64_t v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  _OWORD *v149;
  __int128 v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  __int128 v166;
  _OWORD *v167;
  char *v168;
  void *v169;
  int64_t v170;
  unint64_t v171;
  char *v172;
  std::locale::__imp *v173;
  std::locale::__imp *v174;
  std::locale::__imp *locale;
  __int128 v176;
  uint64_t v177;
  char *v178;
  void *v179;
  int64_t v180;
  unint64_t v181;
  char *v182;
  std::locale::__imp *v183;
  std::locale::__imp *v184;
  std::locale::__imp *v185;
  __int128 v186;
  uint64_t v187;
  const char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  int v194;
  int v195;
  unint64_t v196;
  int v197;
  unint64_t v198;
  char *v199;
  void *v200;
  int64_t v201;
  unint64_t v202;
  char *v203;
  std::locale::__imp *v204;
  std::locale::__imp *v205;
  std::locale::__imp *v206;
  __int128 v207;
  uint64_t v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t j;
  uint64_t v218;
  int v219;
  unint64_t v220;
  float32x4_t v221;
  int v222;
  unint64_t v223;
  unint64_t v224;
  float32x4_t *v225;
  float32x4_t *v226;
  int64_t v227;
  unint64_t v228;
  char *v229;
  float32x4_t *v230;
  float32x4_t *v231;
  float32x4_t *v232;
  float32x4_t v233;
  void *v234;
  const char *v235;
  uint64_t v236;
  const char *v237;
  uint64_t v238;
  void *v239;
  const char *v240;
  uint64_t v241;
  const char *v242;
  const char *v243;
  uint64_t v244;
  void *v245;
  id v246;
  const char *v247;
  uint64_t v248;
  unint64_t v249;
  const char *v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  const char *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  const char *v258;
  uint64_t v259;
  uint64_t v260;
  const char *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  const char *v266;
  uint64_t v267;
  unint64_t v268;
  int v269;
  int v270;
  const char *v271;
  uint64_t v272;
  int v273;
  int v274;
  const char *v275;
  uint64_t v276;
  uint64_t v277;
  __int32 *v278;
  float32x4_t v279;
  unint64_t v280;
  int v281;
  uint64_t v282;
  float32x4_t v283;
  uint64_t v284;
  float32x4_t *v285;
  float32x4_t *v286;
  int64_t v287;
  unint64_t v288;
  char *v289;
  float32x4_t *v290;
  float32x4_t *v291;
  float32x4_t *v292;
  float32x4_t v293;
  int v294;
  unint64_t v295;
  _QWORD *v296;
  _QWORD *v297;
  _QWORD *v298;
  _QWORD *v299;
  _QWORD *v300;
  _QWORD *v301;
  const std::locale::facet *v302;
  unint64_t v303;
  _QWORD *v304;
  _QWORD *v305;
  _QWORD *v306;
  const std::locale::facet *v307;
  int v308;
  unint64_t v309;
  _QWORD *v310;
  _QWORD *v311;
  _QWORD *v312;
  const std::locale::facet *v313;
  int v314;
  unint64_t v315;
  _QWORD *v316;
  _QWORD *v317;
  const std::locale::facet *v318;
  int v319;
  unint64_t v320;
  _QWORD *v321;
  _QWORD *v322;
  const std::locale::facet *v323;
  unsigned int v324;
  _QWORD *v325;
  const char *v326;
  uint64_t v327;
  void *v328;
  float32x4_t *v329;
  uint64_t v330;
  _QWORD *v331;
  const std::locale::facet *v332;
  const char *v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t v337;
  int v338;
  uint64_t v339;
  char *v340;
  char *v341;
  int v342;
  uint64_t v343;
  char *v344;
  char *v345;
  int v346;
  uint64_t v347;
  char *v348;
  char *v349;
  void *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  char *v354;
  void *v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  char *v359;
  void *v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  char *v364;
  char *v365;
  int v366;
  int v367;
  char *v368;
  char *v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  char *v373;
  char *v374;
  int v375;
  int v376;
  char *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  char *v381;
  char *v382;
  int v383;
  int v384;
  char *v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  char *v389;
  char *v390;
  int v391;
  int v392;
  char *v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  char *v397;
  char *v398;
  int v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  char *v403;
  int v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  char *v409;
  int v410;
  int v411;
  int v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint8x8_t v416;
  uint32x4_t v417;
  uint64_t v418;
  char *v419;
  char *v420;
  void *v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  char *v425;
  char *v426;
  int v427;
  char *v428;
  char *v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  char *v433;
  char *v434;
  int v435;
  char *v436;
  char *v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  char *v441;
  char *v442;
  int v443;
  uint64_t v444;
  char *v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  char *v449;
  char *v450;
  int v451;
  void *v452;
  unint64_t v453;
  _QWORD *v454;
  const std::locale::facet *v455;
  unint64_t v456;
  uint64_t v457;
  unint64_t v458;
  int v459;
  int v460;
  uint64_t v461;
  char *v462;
  char *v463;
  void *v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  char *v468;
  char *v469;
  int v470;
  uint64_t v471;
  char *v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  char *v476;
  char *v477;
  int v478;
  unint64_t v479;
  _QWORD *v480;
  const std::locale::facet *v481;
  unint64_t v482;
  uint64_t v483;
  const char *v484;
  uint64_t v485;
  const char *v486;
  uint64_t v487;
  void *v488;
  void *v489;
  const char *v490;
  uint64_t v491;
  void *v492;
  BOOL v493;
  const char *v494;
  uint64_t v495;
  void *v496;
  const char *v497;
  uint64_t v498;
  void *v499;
  const char *v500;
  uint64_t v501;
  void *v502;
  const char *v503;
  uint64_t v504;
  unint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  int v509;
  void *v510;
  const char *v511;
  uint64_t v512;
  BOOL v513;
  int v514;
  std::locale::__imp *v515;
  std::locale::__imp *v516;
  std::locale::__imp *v517;
  int64_t v518;
  unint64_t v519;
  uint64_t v520;
  char *v521;
  std::locale::__imp *v522;
  int v523;
  unsigned int v524;
  int v525;
  uint64_t v526;
  uint64_t v527;
  void *v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t v531;
  char *v532;
  char *v533;
  int v534;
  unint64_t v535;
  _QWORD *v536;
  const std::locale::facet *v537;
  unint64_t v538;
  int v539;
  _DWORD *v540;
  _DWORD *v541;
  uint64_t v542;
  unint64_t v543;
  uint64_t v544;
  char *v545;
  uint64_t v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  unint64_t v551;
  uint64_t v552;
  char *v553;
  int v554;
  int v555;
  int v556;
  unint64_t v557;
  _QWORD *v558;
  const std::locale::facet *v559;
  _QWORD *v560;
  const std::locale::facet *v561;
  void *v562;
  void *v563;
  int *v564;
  unint64_t v565;
  int v566;
  _QWORD *v567;
  uint64_t v568;
  uint64_t v569;
  const std::locale::facet *v570;
  void *v571;
  void *v572;
  void *v573;
  char v574;
  int v575;
  id v577;
  int v578;
  float32x4_t v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  id v583;
  unint64_t v584;
  void *v585;
  uint64_t v586;
  _BYTE *v587;
  float32x4_t v588;
  float32x4_t v589;
  float32x4_t v590;
  float32x4_t v591;
  float v592;
  float v593;
  id v594;
  uint64_t v595;
  id v596;
  void *v597;
  __int32 v598;
  void *v599;
  void *v600;
  void *v601;
  void *v602;
  __int128 v603;
  __int128 v604;
  uint64_t v605;
  uint32x4_t v606;
  id v607;
  int *v608;
  int *v609;
  uint64_t v610;
  void *v611;
  void *v612;
  uint64_t v613;
  _BYTE v614[40];
  _BYTE v615[40];
  _BYTE v616[40];
  _BYTE v617[40];
  void *v618;
  void *v619;
  uint64_t v620;
  std::locale v621;
  std::locale::__imp *v622;
  uint64_t v623;
  void *v624;
  void *v625;
  uint64_t v626;
  _BYTE v627[40];
  _BYTE v628[40];
  _BYTE v629[40];
  _BYTE v630[40];
  void *v631;
  void *v632;
  uint64_t v633;
  void *v634;
  void *v635;
  uint64_t v636;
  _BYTE v637[40];
  _BYTE v638[40];
  _BYTE v639[40];
  _BYTE v640[40];
  void *v641;
  void *v642;
  uint64_t v643;
  void *v644;
  void *v645;
  uint64_t v646;
  _BYTE v647[40];
  _BYTE v648[40];
  _BYTE v649[40];
  _BYTE v650[40];
  void *v651;
  void *v652;
  uint64_t v653;
  void *v654;
  void *v655;
  uint64_t v656;
  _BYTE v657[40];
  _BYTE v658[40];
  _BYTE v659[40];
  _BYTE v660[40];
  void *v661;
  void *v662;
  uint64_t v663;
  std::locale v664;
  std::locale::__imp *v665;
  unint64_t v666;
  _QWORD v667[2];
  float32x4_t v668;
  _QWORD v669[2];
  void *v670;
  void *v671;
  unint64_t v672;
  void *v673;
  void *v674;
  unint64_t v675;
  std::locale v676;
  void *v677;
  unint64_t v678;
  std::locale v679;
  void *v680;
  unint64_t v681;
  _QWORD v682[6];
  _QWORD v683[4];
  uint64_t v684;
  _QWORD v685[4];
  uint64_t v686;
  _BYTE v687[32];
  uint64_t v688;
  char **v689;
  char *v690[2];
  std::string v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  float32x4_t *v696;
  float32x4_t *v697;
  uint64_t v698;
  __int128 v699;
  uint64_t v700;
  std::string v701;
  std::string __p;
  std::string __str;
  std::string __src;
  __int128 v705;
  uint64_t v706;
  std::locale v707;
  _BYTE v708[128];
  uint64_t v709;
  _BYTE v710[408];
  _QWORD v711[22];

  v711[19] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v577 = a3;
  v705 = 0uLL;
  v706 = 0;
  v596 = v6;
  sub_1DCB0345C(&v705, "");
  memset(&__src, 0, sizeof(__src));
  sub_1DCAD5A0C(v6, v7, v8, &__src);
  bzero(v710, 0x230uLL);
  v9 = MEMORY[0x1E0DE4FB0];
  v10 = MEMORY[0x1E0DE4FB0] + 64;
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  v711[0] = MEMORY[0x1E0DE4FB0] + 64;
  v709 = v11;
  *(_QWORD *)&v710[*(_QWORD *)(v11 - 24) - 8] = v12;
  v13 = (std::ios_base *)&v710[*(_QWORD *)(v709 - 24) - 8];
  std::ios_base::init(v13, v710);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v709 = v9 + 24;
  v711[0] = v10;
  MEMORY[0x1DF0D2088](v710);
  std::ofstream::open();
  v575 = *(_DWORD *)&v710[*(_QWORD *)(v709 - 24) + 24] & 5;
  if (v575)
  {
    sub_1DCB0345C(a4, "Failed to open file path.");
    goto LABEL_773;
  }
  memset(&__str, 0, sizeof(__str));
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    sub_1DCACA658(&__str, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
  else
    __str = __src;
  p_str = &__str;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  memset(&__p, 0, sizeof(__p));
  memset(&v701, 0, sizeof(v701));
  v699 = 0uLL;
  v700 = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  v16 = (char *)&p_str[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
      goto LABEL_18;
    v17 = v16[size--];
  }
  while (v17 != 46);
  if (size == -1)
  {
LABEL_18:
    v574 = 0;
    v573 = 0;
    std::string::operator=(&__p, &__str);
    goto LABEL_19;
  }
  std::string::basic_string((std::string *)v687, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v685);
  v573 = *(void **)v687;
  v574 = v687[23];
  std::string::basic_string((std::string *)v687, &__str, 0, size, (std::allocator<char> *)v685);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = *(std::string *)v687;
LABEL_19:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v18 = __p.__r_.__value_.__l.__size_;
  memset(v687, 0, 24);
  v19 = v687;
  sub_1DCB01128((uint64_t)v687, v18 + 4);
  if (v687[23] < 0)
    v19 = *(_BYTE **)v687;
  if (v18)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(v19, p_p, v18);
  }
  strcpy(&v19[v18], ".mtl");
  if (SHIBYTE(v700) < 0)
    operator delete((void *)v699);
  v699 = *(_OWORD *)v687;
  v700 = *(_QWORD *)&v687[16];
  v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v22 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v21 = __p.__r_.__value_.__l.__size_;
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  v23 = (char *)&v22[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!v21)
      goto LABEL_40;
    v24 = v23[v21--];
  }
  while (v24 != 47);
  if (v21 == -1)
  {
LABEL_40:
    std::string::operator=(&v701, &__p);
    goto LABEL_41;
  }
  std::string::basic_string((std::string *)v687, &__p, v21 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v685);
  if (SHIBYTE(v701.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v701.__r_.__value_.__l.__data_);
  v701 = *(std::string *)v687;
LABEL_41:
  v25 = sub_1DCB03734(&v709, (uint64_t)"# Apple ModelIO OBJ File: ", 26);
  if ((v701.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &v701;
  else
    v26 = (std::string *)v701.__r_.__value_.__r.__words[0];
  if ((v701.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = HIBYTE(v701.__r_.__value_.__r.__words[2]);
  else
    v27 = v701.__r_.__value_.__l.__size_;
  v28 = sub_1DCB03734(v25, (uint64_t)v26, v27);
  std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
  v29 = std::locale::use_facet((const std::locale *)v687, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale((std::locale *)v687);
  std::ostream::put();
  std::ostream::flush();
  v30 = sub_1DCB03734(&v709, (uint64_t)"mtllib ", 7);
  if ((v701.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v701;
  else
    v31 = (std::string *)v701.__r_.__value_.__r.__words[0];
  if ((v701.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = HIBYTE(v701.__r_.__value_.__r.__words[2]);
  else
    v32 = v701.__r_.__value_.__l.__size_;
  v33 = sub_1DCB03734(v30, (uint64_t)v31, v32);
  v34 = sub_1DCB03734(v33, (uint64_t)".mtl", 4);
  std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
  v35 = std::locale::use_facet((const std::locale *)v687, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
  std::locale::~locale((std::locale *)v687);
  std::ostream::put();
  std::ostream::flush();
  v697 = 0;
  v696 = 0;
  v698 = 0;
  v692 = 0u;
  v693 = 0u;
  v694 = 0u;
  v695 = 0u;
  v36 = v577;
  v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v37, (uint64_t)&v692, v708, 16);
  if (v38)
  {
    v39 = *(_QWORD *)v693;
    v40 = (__n128 *)MEMORY[0x1E0C83FF0];
    do
    {
      for (i = 0; i != v38; ++i)
      {
        if (*(_QWORD *)v693 != v39)
          objc_enumerationMutation(v36);
        v42 = *(void **)(*((_QWORD *)&v692 + 1) + 8 * i);
        sub_1DCC1CF40(a1, (uint64_t *)&v696, v42, *v40, v40[1], v40[2], v40[3]);
        sub_1DCC1D3E0(a1, (uint64_t *)&v696, v42, *v40, v40[1], v40[2], v40[3]);
      }
      v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v43, (uint64_t)&v692, v708, 16);
    }
    while (v38);
  }

  memset(&v691, 0, sizeof(v691));
  objc_msgSend_URL(v36, v44, v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = v46 == 0;

  if (!v47)
  {
    objc_msgSend_URL(v36, v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_path(v50, v51, v52);
    v53 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v55 = objc_msgSend_cStringUsingEncoding_(v53, v54, 4);
    MEMORY[0x1DF0D201C](&v691, v55);

    v56 = &v691;
    if ((v691.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v57 = HIBYTE(v691.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v57 = v691.__r_.__value_.__l.__size_;
      v56 = (std::string *)v691.__r_.__value_.__r.__words[0];
    }
    v58 = (char *)&v56[-1].__r_.__value_.__r.__words[2] + 7;
    while (v57)
    {
      v59 = v58[v57--];
      if (v59 == 47)
        goto LABEL_69;
    }
    v57 = -1;
LABEL_69:
    std::string::basic_string((std::string *)v687, &v691, 0, v57, (std::allocator<char> *)v685);
    if (SHIBYTE(v691.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v691.__r_.__value_.__l.__data_);
    v691 = *(std::string *)v687;
  }
  if (v700 >= 0)
    v60 = &v699;
  else
    v60 = (__int128 *)v699;
  sub_1DCAF2800((uint64_t)v60, &v691, (uint64_t *)&v696, v687);
  if (SHIBYTE(v706) < 0)
    operator delete((void *)v705);
  v705 = *(_OWORD *)v687;
  v706 = *(_QWORD *)&v687[16];
  v690[1] = 0;
  v690[0] = 0;
  v689 = v690;
  memset(v687, 0, sizeof(v687));
  v688 = 1065353216;
  memset(v685, 0, sizeof(v685));
  v686 = 1065353216;
  memset(v683, 0, sizeof(v683));
  v684 = 1065353216;
  memset(v682, 0, 32);
  v682[4] = 1065353216;
  v61 = v696;
  if (v697 == v696)
  {
    v597 = 0;
    v602 = 0;
    v600 = 0;
    v563 = 0;
    v562 = 0;
    goto LABEL_759;
  }
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v600 = 0;
  v602 = 0;
  v597 = 0;
  v595 = 0;
  v598 = 0;
  do
  {
    v65 = &v61[5 * v62];
    v579 = *v65;
    v580 = v65[1];
    v581 = v65[2];
    v582 = v65[3];
    v583 = (id)v65[4].i64[0];
    v607 = (id)v65[4].i64[1];
    objc_msgSend_name(v607, v66, v67);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    v584 = v62;
    LODWORD(v65) = v68 == 0;

    if ((_DWORD)v65)
    {
      sub_1DCB03734(&v709, (uint64_t)"g mesh_", 7);
      v88 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v88 + *(_QWORD *)(*v88 - 24)));
      v89 = std::locale::use_facet(&v679, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v89->__vftable[2].~facet_0)(v89, 10);
      std::locale::~locale(&v679);
      std::ostream::put();
      std::ostream::flush();
    }
    else
    {
      v680 = 0;
      v679.__locale_ = 0;
      v681 = 0;
      objc_msgSend_name(v607, v69, v70);
      v71 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v74 = (char *)objc_msgSend_UTF8String(v71, v72, v73);
      sub_1DCB0345C(&v679, v74);

      v75 = (char **)sub_1DCAD34E8((uint64_t)&v689, (const void **)&v679.__locale_);
      v676.__locale_ = (std::locale::__imp *)&v679;
      if (v690 == v75)
      {
        *((_DWORD *)sub_1DCAD33AC((uint64_t **)&v689, (const void **)&v679.__locale_, (uint64_t)&unk_1DCC58300, (__int128 **)&v676)+ 14) = 0;
        v90 = sub_1DCB03734(&v709, (uint64_t)"g ", 2);
        objc_msgSend_name(v607, v91, v92);
        v80 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v95 = (const char *)objc_msgSend_UTF8String(v80, v93, v94);
        v96 = strlen(v95);
        v86 = sub_1DCB03734(v90, (uint64_t)v95, v96);
      }
      else
      {
        v76 = sub_1DCAD33AC((uint64_t **)&v689, (const void **)&v679.__locale_, (uint64_t)&unk_1DCC58300, (__int128 **)&v676);
        ++*((_DWORD *)v76 + 14);
        v77 = sub_1DCB03734(&v709, (uint64_t)"g ", 2);
        objc_msgSend_name(v607, v78, v79);
        v80 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v83 = (const char *)objc_msgSend_UTF8String(v80, v81, v82);
        v84 = strlen(v83);
        v85 = sub_1DCB03734(v77, (uint64_t)v83, v84);
        sub_1DCB03734(v85, (uint64_t)"_", 1);
        v676.__locale_ = (std::locale::__imp *)&v679;
        sub_1DCAD33AC((uint64_t **)&v689, (const void **)&v679.__locale_, (uint64_t)&unk_1DCC58300, (__int128 **)&v676);
        v86 = (_QWORD *)std::ostream::operator<<();
      }
      std::ios_base::getloc((const std::ios_base *)((char *)v86 + *(_QWORD *)(*v86 - 24)));
      v87 = std::locale::use_facet(&v676, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v87->__vftable[2].~facet_0)(v87, 10);
      std::locale::~locale(&v676);
      std::ostream::put();
      std::ostream::flush();

      if (SHIBYTE(v681) < 0)
        operator delete(v679.__locale_);
    }
    v594 = v583;
    v97 = operator new();
    *(_DWORD *)(v97 + 8) = 0;
    v587 = (_BYTE *)v97;
    *(_QWORD *)v97 = 0;
    v100 = objc_msgSend_indexType(v607, v98, v99);
    objc_msgSend_indexBuffer(v607, v101, v102);
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_map(v103, v104, v105);
    v585 = (void *)objc_claimAutoreleasedReturnValue();

    v108 = objc_msgSend_bytes(v585, v106, v107);
    sub_1DCAE8490(v687);
    sub_1DCAE8490(v685);
    sub_1DCAE8490(v683);
    objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v594, v109, (uint64_t)CFSTR("position"), 786435);
    v601 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v594, v110, (uint64_t)CFSTR("normal"), 786435);
    v599 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v594, v111, (uint64_t)CFSTR("occlusionValue"), 786435);
    v112 = objc_claimAutoreleasedReturnValue();

    v597 = (void *)v112;
    if (!v112)
    {
      objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v594, v113, (uint64_t)CFSTR("color"), 786436);
      v597 = (void *)objc_claimAutoreleasedReturnValue();
    }
    if (v601 && objc_msgSend_stride(v601, v113, v114))
    {
      v115 = objc_msgSend_bufferSize(v601, v113, v114);
      v118 = v115 / objc_msgSend_stride(v601, v116, v117);
    }
    else
    {
      LODWORD(v118) = 0;
    }
    if (v599 && objc_msgSend_stride(v599, v113, v114))
    {
      v119 = objc_msgSend_bufferSize(v599, v113, v114);
      v122 = v119 / objc_msgSend_stride(v599, v120, v121);
    }
    else
    {
      LODWORD(v122) = 0;
    }
    if (v597 && objc_msgSend_stride(v597, v113, v114))
    {
      v123 = objc_msgSend_bufferSize(v597, v113, v114);
      v126 = v123 / objc_msgSend_stride(v597, v124, v125);
    }
    else
    {
      LODWORD(v126) = 0;
    }
    v680 = 0;
    v679.__locale_ = 0;
    v681 = 0;
    v677 = 0;
    v676.__locale_ = 0;
    v678 = 0;
    v674 = 0;
    v673 = 0;
    v675 = 0;
    v671 = 0;
    v670 = 0;
    v672 = 0;
    if (v597)
    {
      v127 = objc_msgSend_stride(v601, v113, v114);
      v130 = objc_msgSend_stride(v597, v128, v129);
      v587[9] = 1;
      v586 = objc_msgSend_dataStart(v601, v131, v132);
      v605 = objc_msgSend_dataStart(v597, v133, v134);
      v578 = v122;
      v137 = 0;
      v138 = v118 - 1;
      v139 = v126 - 1;
      while (objc_msgSend_indexCount(v607, (const char *)v135, v136) > v137)
      {
        switch(v100)
        {
          case 32:
            v142 = *(_DWORD *)(v108 + 4 * v137);
            break;
          case 16:
            v142 = *(unsigned __int16 *)(v108 + 2 * v137);
            break;
          case 8:
            v142 = *(unsigned __int8 *)(v108 + v137);
            break;
          default:
            v142 = 0;
            break;
        }
        if (v138 < v142)
          v142 = v138;
        v143 = v142 & ~(v142 >> 31);
        if (v139 >= (int)v143)
          v144 = v142 & ~(v142 >> 31);
        else
          v144 = v139;
        v145 = v127 * v143;
        if (v145 < objc_msgSend_bufferSize(v601, v140, v141))
        {
          v147 = v130 * (v144 & ~(v144 >> 31));
          if (v147 < objc_msgSend_bufferSize(v597, (const char *)v135, v136))
          {
            v592 = *(float *)(v586 + v145);
            v593 = *(float *)(v586 + v145 + 4);
            LODWORD(v146) = *(_DWORD *)(v586 + v145 + 8);
            v603 = v146;
            v668 = 0uLL;
            v669[0] = 0;
            v588 = *v696;
            v589 = v696[1];
            v590 = v696[2];
            v591 = v696[3];
            v149 = sub_1DCAFBD5C((uint64_t)v669, 1uLL);
            HIDWORD(v150) = HIDWORD(v603);
            *v149 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v591, v588, v592), v589, v593), v590, *(float *)&v603);
            v151 = (char *)(v149 + 1);
            v152 = (char *)v668.i64[1];
            v153 = v668.i64[0];
            v154 = (uint64_t)v149;
            if (v668.i64[1] != v668.i64[0])
            {
              do
              {
                v155 = *((_OWORD *)v152 - 1);
                v152 -= 16;
                HIDWORD(v150) = HIDWORD(v155);
                *(_OWORD *)(v154 - 16) = v155;
                v154 -= 16;
              }
              while (v152 != (char *)v153);
              v152 = (char *)v668.i64[0];
            }
            v156 = (char *)&v149[v148];
            v668.i64[0] = v154;
            v668.i64[1] = (uint64_t)(v149 + 1);
            v669[0] = v156;
            if (v152)
            {
              operator delete(v152);
              v156 = (char *)v669[0];
            }
            v668.i64[1] = (uint64_t)(v149 + 1);
            *(_QWORD *)&v150 = *(_QWORD *)(v605 + v147);
            DWORD2(v150) = *(_DWORD *)(v605 + v147 + 8);
            if (v151 >= v156)
            {
              v604 = v150;
              v158 = (uint64_t)&v151[-v668.i64[0]] >> 4;
              if ((unint64_t)(v158 + 1) >> 60)
                goto LABEL_796;
              v159 = (uint64_t)&v156[-v668.i64[0]];
              v160 = v159 >> 3;
              if (v159 >> 3 <= (unint64_t)(v158 + 1))
                v160 = v158 + 1;
              if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF0)
                v161 = 0xFFFFFFFFFFFFFFFLL;
              else
                v161 = v160;
              v6 = v596;
              if (v161)
                v162 = (char *)sub_1DCAFBD5C((uint64_t)v669, v161);
              else
                v162 = 0;
              v163 = &v162[16 * v158];
              *(_OWORD *)v163 = v604;
              v157 = (uint64_t)(v163 + 16);
              v164 = (char *)v668.i64[1];
              v165 = v668.i64[0];
              if (v668.i64[1] != v668.i64[0])
              {
                do
                {
                  v166 = *((_OWORD *)v164 - 1);
                  v164 -= 16;
                  *((_OWORD *)v163 - 1) = v166;
                  v163 -= 16;
                }
                while (v164 != (char *)v165);
                v164 = (char *)v668.i64[0];
              }
              v668.i64[0] = (uint64_t)v163;
              v668.i64[1] = v157;
              v669[0] = &v162[16 * v161];
              if (v164)
                operator delete(v164);
            }
            else
            {
              v149[1] = v150;
              v157 = (uint64_t)(v149 + 2);
              v6 = v596;
            }
            v668.i64[1] = v157;
            if (!sub_1DCB04800(v682, (__int128 **)&v668))
            {
              v664.__locale_ = (std::locale::__imp *)&v668;
              *((_DWORD *)sub_1DCB03A88((uint64_t)v682, (__int128 **)&v668, (uint64_t)&unk_1DCC58300, (uint64_t *)&v664)
              + 10) = HIDWORD(v595);
              v167 = (_OWORD *)v668.i64[0];
              v168 = (char *)v680;
              if ((unint64_t)v680 >= v681)
              {
                v170 = ((_BYTE *)v680 - (_BYTE *)v679.__locale_) >> 4;
                if ((unint64_t)(v170 + 1) >> 60)
                  goto LABEL_796;
                v171 = (uint64_t)(v681 - (unint64_t)v679.__locale_) >> 3;
                if (v171 <= v170 + 1)
                  v171 = v170 + 1;
                if (v681 - (unint64_t)v679.__locale_ >= 0x7FFFFFFFFFFFFFF0)
                  v135 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v135 = v171;
                if (v135)
                  v172 = (char *)sub_1DCAFBD5C((uint64_t)&v681, v135);
                else
                  v172 = 0;
                v173 = (std::locale::__imp *)&v172[16 * v170];
                *(_OWORD *)v173 = *v167;
                v169 = (char *)v173 + 16;
                v174 = (std::locale::__imp *)v680;
                locale = v679.__locale_;
                if (v680 != v679.__locale_)
                {
                  do
                  {
                    v176 = *((_OWORD *)v174 - 1);
                    v174 = (std::locale::__imp *)((char *)v174 - 16);
                    *((_OWORD *)v173 - 1) = v176;
                    v173 = (std::locale::__imp *)((char *)v173 - 16);
                  }
                  while (v174 != locale);
                  v174 = v679.__locale_;
                }
                v679.__locale_ = v173;
                v680 = v169;
                v681 = (unint64_t)&v172[16 * v135];
                if (v174)
                  operator delete(v174);
              }
              else
              {
                *(_OWORD *)v680 = *(_OWORD *)v668.i64[0];
                v169 = v168 + 16;
              }
              v680 = v169;
              v177 = v668.i64[0];
              v178 = (char *)v677;
              if ((unint64_t)v677 >= v678)
              {
                v180 = ((_BYTE *)v677 - (_BYTE *)v676.__locale_) >> 4;
                if ((unint64_t)(v180 + 1) >> 60)
LABEL_796:
                  sub_1DCAE4C44();
                v181 = (uint64_t)(v678 - (unint64_t)v676.__locale_) >> 3;
                if (v181 <= v180 + 1)
                  v181 = v180 + 1;
                if (v678 - (unint64_t)v676.__locale_ >= 0x7FFFFFFFFFFFFFF0)
                  v135 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v135 = v181;
                if (v135)
                  v182 = (char *)sub_1DCAFBD5C((uint64_t)&v678, v135);
                else
                  v182 = 0;
                v183 = (std::locale::__imp *)&v182[16 * v180];
                *(_OWORD *)v183 = *(_OWORD *)(v177 + 16);
                v179 = (char *)v183 + 16;
                v184 = (std::locale::__imp *)v677;
                v185 = v676.__locale_;
                if (v677 != v676.__locale_)
                {
                  do
                  {
                    v186 = *((_OWORD *)v184 - 1);
                    v184 = (std::locale::__imp *)((char *)v184 - 16);
                    *((_OWORD *)v183 - 1) = v186;
                    v183 = (std::locale::__imp *)((char *)v183 - 16);
                  }
                  while (v184 != v185);
                  v184 = v676.__locale_;
                }
                v676.__locale_ = v183;
                v677 = v179;
                v678 = (unint64_t)&v182[16 * v135];
                if (v184)
                  operator delete(v184);
              }
              else
              {
                *(_OWORD *)v677 = *(_OWORD *)(v668.i64[0] + 16);
                v179 = v178 + 16;
              }
              ++HIDWORD(v595);
              v677 = v179;
            }
            if (v668.i64[0])
            {
              v668.i64[1] = v668.i64[0];
              operator delete((void *)v668.i64[0]);
            }
          }
        }
        ++v137;
      }
      LODWORD(v122) = v578;
    }
    else
    {
      v187 = objc_msgSend_dataStart(v601, v113, v114);
      v192 = objc_msgSend_stride(v601, v188, v189);
      v193 = 0;
      v194 = v118 - 1;
      while (objc_msgSend_indexCount(v607, (const char *)v190, v191) > v193)
      {
        switch(v100)
        {
          case 32:
            v195 = *(_DWORD *)(v108 + 4 * v193);
            break;
          case 16:
            v195 = *(unsigned __int16 *)(v108 + 2 * v193);
            break;
          case 8:
            v195 = *(unsigned __int8 *)(v108 + v193);
            break;
          default:
            v195 = 0;
            break;
        }
        v196 = objc_msgSend_bufferSize(v601, v140, v141);
        if (v194 >= v195)
          v197 = v195;
        else
          v197 = v194;
        v198 = v192 * (v197 & ~(v197 >> 31));
        if (v198 < v196)
        {
          v668 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v696[3], *v696, *(float *)(v187 + v198)), v696[1], *(float *)(v187 + v198 + 4)), v696[2], *(float *)(v187 + v198 + 8));
          if (!sub_1DCB04700(v687, &v668))
          {
            v664.__locale_ = (std::locale::__imp *)&v668;
            sub_1DCB03E1C((uint64_t)v687, &v668, (uint64_t)&unk_1DCC58300, (float32x4_t **)&v664)[2].i32[0] = HIDWORD(v595);
            v199 = (char *)v680;
            if ((unint64_t)v680 >= v681)
            {
              v201 = ((_BYTE *)v680 - (_BYTE *)v679.__locale_) >> 4;
              if ((unint64_t)(v201 + 1) >> 60)
                sub_1DCAE4C44();
              v202 = (uint64_t)(v681 - (unint64_t)v679.__locale_) >> 3;
              if (v202 <= v201 + 1)
                v202 = v201 + 1;
              if (v681 - (unint64_t)v679.__locale_ >= 0x7FFFFFFFFFFFFFF0)
                v190 = 0xFFFFFFFFFFFFFFFLL;
              else
                v190 = v202;
              if (v190)
                v203 = (char *)sub_1DCAFBD5C((uint64_t)&v681, v190);
              else
                v203 = 0;
              v204 = (std::locale::__imp *)&v203[16 * v201];
              *(float32x4_t *)v204 = v668;
              v200 = (char *)v204 + 16;
              v205 = (std::locale::__imp *)v680;
              v206 = v679.__locale_;
              if (v680 != v679.__locale_)
              {
                do
                {
                  v207 = *((_OWORD *)v205 - 1);
                  v205 = (std::locale::__imp *)((char *)v205 - 16);
                  *((_OWORD *)v204 - 1) = v207;
                  v204 = (std::locale::__imp *)((char *)v204 - 16);
                }
                while (v205 != v206);
                v205 = v679.__locale_;
              }
              v679.__locale_ = v204;
              v680 = v200;
              v681 = (unint64_t)&v203[16 * v190];
              if (v205)
                operator delete(v205);
            }
            else
            {
              *(float32x4_t *)v680 = v668;
              v200 = v199 + 16;
            }
            ++HIDWORD(v595);
            v680 = v200;
          }
        }
        ++v193;
      }
      v130 = 0;
      v605 = 0;
    }
    if (v599)
    {
      v208 = objc_msgSend_stride(v599, v140, v141);
      v211 = objc_msgSend_dataStart(v599, v209, v210);
      v587[8] = 1;
      v214 = objc_msgSend_vertexCount(v594, v212, v213);
      sub_1DCAD4EF4((uint64_t)v685, vcvtps_u32_f32((float)(unint64_t)v214 / *(float *)&v686));
      for (j = 0; objc_msgSend_indexCount(v607, (const char *)v215, v216) > j; ++j)
      {
        switch(v100)
        {
          case 32:
            v219 = *(_DWORD *)(v108 + 4 * j);
            break;
          case 16:
            v219 = *(unsigned __int16 *)(v108 + 2 * j);
            break;
          case 8:
            v219 = *(unsigned __int8 *)(v108 + j);
            break;
          default:
            v219 = 0;
            break;
        }
        v220 = objc_msgSend_bufferSize(v599, v140, v218);
        if ((int)v122 - 1 >= v219)
          v222 = v219;
        else
          v222 = v122 - 1;
        v223 = v208 * (v222 & ~(v222 >> 31));
        if (v223 < v220)
        {
          v224 = v211 + v223;
          v668.i32[2] = 0;
          v668.i64[0] = 0;
          v221.i64[0] = *(_QWORD *)v224;
          v221.i32[2] = *(_DWORD *)(v224 + 8);
          v668 = v221;
          if (!sub_1DCB04700(v685, &v668))
          {
            v664.__locale_ = (std::locale::__imp *)&v668;
            sub_1DCB03E1C((uint64_t)v685, &v668, (uint64_t)&unk_1DCC58300, (float32x4_t **)&v664)[2].i32[0] = v595;
            v225 = (float32x4_t *)v674;
            if ((unint64_t)v674 >= v675)
            {
              v227 = ((_BYTE *)v674 - (_BYTE *)v673) >> 4;
              if ((unint64_t)(v227 + 1) >> 60)
                sub_1DCAE4C44();
              v228 = (uint64_t)(v675 - (_QWORD)v673) >> 3;
              if (v228 <= v227 + 1)
                v228 = v227 + 1;
              if (v675 - (unint64_t)v673 >= 0x7FFFFFFFFFFFFFF0)
                v215 = 0xFFFFFFFFFFFFFFFLL;
              else
                v215 = v228;
              if (v215)
                v229 = (char *)sub_1DCAFBD5C((uint64_t)&v675, v215);
              else
                v229 = 0;
              v230 = (float32x4_t *)&v229[16 * v227];
              *v230 = v668;
              v226 = v230 + 1;
              v231 = (float32x4_t *)v674;
              v232 = (float32x4_t *)v673;
              if (v674 != v673)
              {
                do
                {
                  v233 = v231[-1];
                  --v231;
                  v230[-1] = v233;
                  --v230;
                }
                while (v231 != v232);
                v231 = (float32x4_t *)v673;
              }
              v673 = v230;
              v674 = v226;
              v675 = (unint64_t)&v229[16 * v215];
              if (v231)
                operator delete(v231);
            }
            else
            {
              *(float32x4_t *)v674 = v668;
              v226 = v225 + 1;
            }
            LODWORD(v595) = v595 + 1;
            v674 = v226;
          }
        }
      }
    }
    objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v594, v140, (uint64_t)CFSTR("textureCoordinate"), 786434);
    v234 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v594, v235, (uint64_t)CFSTR("bijective"), 786434);
    v236 = objc_claimAutoreleasedReturnValue();

    v602 = (void *)v236;
    if (!v236)
    {
      objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v594, v237, (uint64_t)CFSTR("aoCoord"), 786434);
      v602 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v602)
      {
        objc_msgSend_vertexAttributeDataForAttributeNamed_(v594, v237, (uint64_t)CFSTR("occlusionValue"));
        v239 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend_format(v239, v240, v241) & 0xF) == 2)
        {
          objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v594, v242, (uint64_t)CFSTR("occlusionValue"), 786434);
          v602 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v602 = 0;
        }

      }
    }
    if (v234 && objc_msgSend_format(v234, v237, v238))
    {
      v245 = v234;
    }
    else
    {
      v246 = v602;

      v602 = 0;
      v245 = v246;
      if (!v246)
      {
        v600 = 0;
        goto LABEL_301;
      }
    }
    v600 = v245;
    if (objc_msgSend_stride(v245, v243, v244))
    {
      v249 = objc_msgSend_bufferSize(v600, v247, v248);
      v252 = v249 / objc_msgSend_stride(v600, v250, v251);
    }
    else
    {
      LODWORD(v252) = 0;
    }
    if (v602 && objc_msgSend_stride(v602, v247, v248))
    {
      v253 = objc_msgSend_bufferSize(v602, v247, v248);
      v256 = v253 / objc_msgSend_stride(v602, v254, v255);
    }
    else
    {
      LODWORD(v256) = 0;
    }
    v257 = objc_msgSend_dataStart(v600, v247, v248);
    v260 = objc_msgSend_stride(v600, v258, v259);
    v587[10] = 1;
    v263 = objc_msgSend_vertexCount(v594, v261, v262);
    sub_1DCAD4EF4((uint64_t)v683, vcvtps_u32_f32((float)(unint64_t)v263 / *(float *)&v684));
    if (v602)
    {
      v605 = objc_msgSend_dataStart(v602, (const char *)v264, v265);
      v130 = objc_msgSend_stride(v602, v266, v267);
      v587[11] = 1;
    }
    v268 = 0;
    v269 = v252 - 1;
    v270 = v256 - 1;
    while (objc_msgSend_indexCount(v607, (const char *)v264, v265) > v268)
    {
      switch(v100)
      {
        case 32:
          v273 = *(_DWORD *)(v108 + 4 * v268);
          break;
        case 16:
          v273 = *(unsigned __int16 *)(v108 + 2 * v268);
          break;
        case 8:
          v273 = *(unsigned __int8 *)(v108 + v268);
          break;
        default:
          v273 = 0;
          break;
      }
      if (v269 >= v273)
        v274 = v273;
      else
        v274 = v269;
      v668 = 0uLL;
      v277 = v274 & ~(v274 >> 31);
      if (v260 * v277 + 8 <= (unint64_t)objc_msgSend_bufferSize(v600, v271, v272))
      {
        v278 = (__int32 *)(v257 + v260 * v277);
        v279.i64[1] = v668.i64[1];
        v668.i32[0] = *v278;
        v279.i32[0] = v668.i32[0];
        v279.i32[1] = v278[1];
        v668 = v279;
      }
      if (v602)
      {
        v280 = objc_msgSend_bufferSize(v602, v275, v276);
        v281 = v270 >= (int)v277 ? v277 : v270;
        v282 = v130 * (v281 & ~(v281 >> 31));
        if (v282 + 8 <= v280)
        {
          v283.i64[0] = v668.i64[0];
          v284 = *(_QWORD *)(v605 + v282);
          v283.i64[1] = v284;
          v668 = v283;
        }
      }
      if (!sub_1DCB04900(v683, &v668))
      {
        v664.__locale_ = (std::locale::__imp *)&v668;
        sub_1DCB0407C((uint64_t)v683, &v668, (uint64_t)&unk_1DCC58300, (float32x4_t **)&v664)[2].i32[0] = v598;
        v285 = (float32x4_t *)v671;
        if ((unint64_t)v671 >= v672)
        {
          v287 = ((_BYTE *)v671 - (_BYTE *)v670) >> 4;
          if ((unint64_t)(v287 + 1) >> 60)
            sub_1DCAE4C44();
          v288 = (uint64_t)(v672 - (_QWORD)v670) >> 3;
          if (v288 <= v287 + 1)
            v288 = v287 + 1;
          if (v672 - (unint64_t)v670 >= 0x7FFFFFFFFFFFFFF0)
            v264 = 0xFFFFFFFFFFFFFFFLL;
          else
            v264 = v288;
          if (v264)
            v289 = (char *)sub_1DCAFBD5C((uint64_t)&v672, v264);
          else
            v289 = 0;
          v290 = (float32x4_t *)&v289[16 * v287];
          *v290 = v668;
          v286 = v290 + 1;
          v291 = (float32x4_t *)v671;
          v292 = (float32x4_t *)v670;
          if (v671 != v670)
          {
            do
            {
              v293 = v291[-1];
              --v291;
              v290[-1] = v293;
              --v290;
            }
            while (v291 != v292);
            v291 = (float32x4_t *)v670;
          }
          v670 = v290;
          v671 = v286;
          v672 = (unint64_t)&v289[16 * v264];
          if (v291)
            operator delete(v291);
        }
        else
        {
          *(float32x4_t *)v671 = v668;
          v286 = v285 + 1;
        }
        ++v598;
        v671 = v286;
      }
      ++v268;
    }
LABEL_301:
    v294 = v587[9];
    if (v587[9])
    {
      if (v680 != v679.__locale_)
      {
        v295 = 0;
        do
        {
          sub_1DCB03734(&v709, (uint64_t)"v ", 2);
          v296 = (_QWORD *)std::ostream::operator<<();
          sub_1DCB03734(v296, (uint64_t)" ", 1);
          v297 = (_QWORD *)std::ostream::operator<<();
          sub_1DCB03734(v297, (uint64_t)" ", 1);
          v298 = (_QWORD *)std::ostream::operator<<();
          sub_1DCB03734(v298, (uint64_t)" ", 1);
          v299 = (_QWORD *)std::ostream::operator<<();
          sub_1DCB03734(v299, (uint64_t)" ", 1);
          v300 = (_QWORD *)std::ostream::operator<<();
          sub_1DCB03734(v300, (uint64_t)" ", 1);
          v301 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v301 + *(_QWORD *)(*v301 - 24)));
          v302 = std::locale::use_facet((const std::locale *)&v668, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v302->__vftable[2].~facet_0)(v302, 10);
          std::locale::~locale((std::locale *)&v668);
          std::ostream::put();
          std::ostream::flush();
          ++v295;
        }
        while (v295 < ((_BYTE *)v680 - (_BYTE *)v679.__locale_) >> 4);
      }
    }
    else if (v680 != v679.__locale_)
    {
      v303 = 0;
      do
      {
        sub_1DCB03734(&v709, (uint64_t)"v ", 2);
        v304 = (_QWORD *)std::ostream::operator<<();
        sub_1DCB03734(v304, (uint64_t)" ", 1);
        v305 = (_QWORD *)std::ostream::operator<<();
        sub_1DCB03734(v305, (uint64_t)" ", 1);
        v306 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v306 + *(_QWORD *)(*v306 - 24)));
        v307 = std::locale::use_facet((const std::locale *)&v668, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v307->__vftable[2].~facet_0)(v307, 10);
        std::locale::~locale((std::locale *)&v668);
        std::ostream::put();
        std::ostream::flush();
        ++v303;
      }
      while (v303 < ((_BYTE *)v680 - (_BYTE *)v679.__locale_) >> 4);
    }
    v308 = v587[8];
    if (v587[8] && v674 != v673)
    {
      v309 = 0;
      do
      {
        sub_1DCB03734(&v709, (uint64_t)"vn ", 3);
        v310 = (_QWORD *)std::ostream::operator<<();
        sub_1DCB03734(v310, (uint64_t)" ", 1);
        v311 = (_QWORD *)std::ostream::operator<<();
        sub_1DCB03734(v311, (uint64_t)" ", 1);
        v312 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v312 + *(_QWORD *)(*v312 - 24)));
        v313 = std::locale::use_facet((const std::locale *)&v668, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v313->__vftable[2].~facet_0)(v313, 10);
        std::locale::~locale((std::locale *)&v668);
        std::ostream::put();
        std::ostream::flush();
        ++v309;
      }
      while (v309 < ((_BYTE *)v674 - (_BYTE *)v673) >> 4);
    }
    v314 = v587[10];
    if (v587[10] && v671 != v670)
    {
      v315 = 0;
      do
      {
        sub_1DCB03734(&v709, (uint64_t)"vt ", 3);
        v316 = (_QWORD *)std::ostream::operator<<();
        sub_1DCB03734(v316, (uint64_t)" ", 1);
        v317 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v317 + *(_QWORD *)(*v317 - 24)));
        v318 = std::locale::use_facet((const std::locale *)&v668, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v318->__vftable[2].~facet_0)(v318, 10);
        std::locale::~locale((std::locale *)&v668);
        std::ostream::put();
        std::ostream::flush();
        ++v315;
      }
      while (v315 < ((_BYTE *)v671 - (_BYTE *)v670) >> 4);
    }
    v319 = v587[11];
    if (v587[11] && v671 != v670)
    {
      v320 = 0;
      do
      {
        sub_1DCB03734(&v709, (uint64_t)"vt2 ", 4);
        v321 = (_QWORD *)std::ostream::operator<<();
        sub_1DCB03734(v321, (uint64_t)" ", 1);
        v322 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v322 + *(_QWORD *)(*v322 - 24)));
        v323 = std::locale::use_facet((const std::locale *)&v668, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v323->__vftable[2].~facet_0)(v323, 10);
        std::locale::~locale((std::locale *)&v668);
        std::ostream::put();
        std::ostream::flush();
        ++v320;
      }
      while (v320 < ((_BYTE *)v671 - (_BYTE *)v670) >> 4);
    }
    v324 = v314 | v319;
    if (v308)
      v324 = v314 | v319 | 2;
    if (v294)
      v324 |= 4u;
    v667[0] = &v709;
    v667[1] = v324;
    v325 = sub_1DCB03734(&v709, (uint64_t)"usemtl ", 7);
    objc_msgSend_material(v607, v326, v327);
    v328 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1DCAF2660(v328, v584 + 1, (uint64_t)&v668);
    if (v669[0] >= 0)
      v329 = &v668;
    else
      v329 = (float32x4_t *)v668.i64[0];
    if (v669[0] >= 0)
      v330 = HIBYTE(v669[0]);
    else
      v330 = v668.i64[1];
    v331 = sub_1DCB03734(v325, (uint64_t)v329, v330);
    std::ios_base::getloc((const std::ios_base *)((char *)v331 + *(_QWORD *)(*v331 - 24)));
    v332 = std::locale::use_facet(&v664, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v332->__vftable[2].~facet_0)(v332, 10);
    std::locale::~locale(&v664);
    std::ostream::put();
    std::ostream::flush();
    v62 = v584 + 1;
    if (SHIBYTE(v669[0]) < 0)
      operator delete((void *)v668.i64[0]);

    if (objc_msgSend_geometryType(v607, v333, v334) != 2)
    {
      if (objc_msgSend_geometryType(v607, (const char *)v335, v336) == 4)
      {
        v415 = 0;
        v668 = 0uLL;
        v669[0] = 0;
        while (1)
        {
          if (objc_msgSend_indexCount(v607, (const char *)v413, v414) <= v415)
          {
            v665 = 0;
            v664.__locale_ = 0;
            v666 = 0;
            v653 = 0;
            v651 = 0;
            v652 = 0;
            sub_1DCB04A00(&v651, (const void *)v668.i64[0], v668.i64[1], (v668.i64[1] - v668.i64[0]) >> 2);
            sub_1DCB04AB8((uint64_t)v650, (uint64_t)v687);
            sub_1DCB04D84((uint64_t)v649, (uint64_t)v683);
            sub_1DCB04AB8((uint64_t)v648, (uint64_t)v685);
            sub_1DCB05050((uint64_t)v647, (uint64_t)v682);
            sub_1DCAF858C(&v651, v587, v601, v600, v602, v599, v597, (uint64_t)v650, (char **)&v664, v579, v580, v581, v582, (uint64_t)v649, (uint64_t)v648, (uint64_t)v647);
            sub_1DCB04684((uint64_t)v647);
            sub_1DCAE6B78((uint64_t)v648);
            sub_1DCAE6B78((uint64_t)v649);
            sub_1DCAE6B78((uint64_t)v650);
            if (v651)
            {
              v652 = v651;
              operator delete(v651);
            }
            v645 = 0;
            v644 = 0;
            v646 = 0;
            sub_1DCB053F4(&v644, v664.__locale_, (uint64_t)v665, (v665 - v664.__locale_) >> 4);
            v452 = v645;
            if (v645 != v644)
            {
              v479 = 0;
              v480 = (_QWORD *)v667[0];
              do
              {
                sub_1DCB03734(v480, (uint64_t)"f ", 2);
                sub_1DCAFBD90((uint64_t)v667);
                sub_1DCB03734(v480, (uint64_t)" ", 1);
                sub_1DCAFBD90((uint64_t)v667);
                sub_1DCB03734(v480, (uint64_t)" ", 1);
                sub_1DCAFBD90((uint64_t)v667);
                sub_1DCB03734(v480, (uint64_t)" ", 1);
                sub_1DCAFBD90((uint64_t)v667);
                std::ios_base::getloc((const std::ios_base *)((char *)v480 + *(_QWORD *)(*v480 - 24)));
                v481 = std::locale::use_facet(&v621, MEMORY[0x1E0DE4A90]);
                ((void (*)(const std::locale::facet *, uint64_t))v481->__vftable[2].~facet_0)(v481, 10);
                std::locale::~locale(&v621);
                std::ostream::put();
                std::ostream::flush();
                v479 += 4;
                v452 = v644;
              }
              while (v479 < ((_BYTE *)v645 - (_BYTE *)v644) >> 4);
            }
            if (!v452)
              goto LABEL_725;
            v645 = v452;
            goto LABEL_724;
          }
          if (v100 == 32)
          {
            v417 = *(uint32x4_t *)(v108 + 4 * v415);
          }
          else if (v100 == 16)
          {
            v417 = vmovl_u16(*(uint16x4_t *)(v108 + 2 * v415));
          }
          else
          {
            v416.i32[1] = 0;
            v606 = 0u;
            if (v100 != 8)
              goto LABEL_489;
            v416.i32[0] = *(_DWORD *)(v108 + v415);
            v417 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v416));
          }
          v606 = v417;
LABEL_489:
          v418 = v668.i64[1];
          v419 = (char *)v669[0];
          if (v668.i64[1] >= v669[0])
          {
            v421 = (void *)v668.i64[0];
            v422 = (v668.i64[1] - v668.i64[0]) >> 2;
            v423 = v422 + 1;
            if ((unint64_t)(v422 + 1) >> 62)
              goto LABEL_780;
            v424 = v669[0] - v668.i64[0];
            if ((v669[0] - v668.i64[0]) >> 1 > v423)
              v423 = v424 >> 1;
            if ((unint64_t)v424 >= 0x7FFFFFFFFFFFFFFCLL)
              v413 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v413 = v423;
            if (v413)
            {
              v425 = (char *)sub_1DCAE4D04((uint64_t)v669, v413);
              v418 = v668.i64[1];
              v421 = (void *)v668.i64[0];
            }
            else
            {
              v425 = 0;
            }
            v426 = &v425[4 * v422];
            *(_DWORD *)v426 = v606.i32[0];
            v420 = v426 + 4;
            while ((void *)v418 != v421)
            {
              v427 = *(_DWORD *)(v418 - 4);
              v418 -= 4;
              *((_DWORD *)v426 - 1) = v427;
              v426 -= 4;
            }
            v419 = &v425[4 * v413];
            v668.i64[0] = (uint64_t)v426;
            v668.i64[1] = (uint64_t)v420;
            v669[0] = v419;
            if (v421)
            {
              operator delete(v421);
              v419 = (char *)v669[0];
            }
          }
          else
          {
            *(_DWORD *)v668.i64[1] = v606.i32[0];
            v420 = (char *)(v418 + 4);
          }
          v668.i64[1] = (uint64_t)v420;
          if (v420 >= v419)
          {
            v429 = (char *)v668.i64[0];
            v430 = (uint64_t)&v420[-v668.i64[0]] >> 2;
            v431 = v430 + 1;
            if ((unint64_t)(v430 + 1) >> 62)
              goto LABEL_780;
            v432 = (uint64_t)&v419[-v668.i64[0]];
            if (v432 >> 1 > v431)
              v431 = v432 >> 1;
            if ((unint64_t)v432 >= 0x7FFFFFFFFFFFFFFCLL)
              v413 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v413 = v431;
            if (v413)
            {
              v433 = (char *)sub_1DCAE4D04((uint64_t)v669, v413);
              v420 = (char *)v668.i64[1];
              v429 = (char *)v668.i64[0];
            }
            else
            {
              v433 = 0;
            }
            v434 = &v433[4 * v430];
            *(_DWORD *)v434 = v606.i32[1];
            v428 = v434 + 4;
            while (v420 != v429)
            {
              v435 = *((_DWORD *)v420 - 1);
              v420 -= 4;
              *((_DWORD *)v434 - 1) = v435;
              v434 -= 4;
            }
            v419 = &v433[4 * v413];
            v668.i64[0] = (uint64_t)v434;
            v668.i64[1] = (uint64_t)v428;
            v669[0] = v419;
            if (v429)
            {
              operator delete(v429);
              v419 = (char *)v669[0];
            }
          }
          else
          {
            *(_DWORD *)v420 = v606.i32[1];
            v428 = v420 + 4;
          }
          v668.i64[1] = (uint64_t)v428;
          if (v428 >= v419)
          {
            v437 = (char *)v668.i64[0];
            v438 = (uint64_t)&v428[-v668.i64[0]] >> 2;
            v439 = v438 + 1;
            if ((unint64_t)(v438 + 1) >> 62)
              goto LABEL_780;
            v440 = (uint64_t)&v419[-v668.i64[0]];
            if (v440 >> 1 > v439)
              v439 = v440 >> 1;
            if ((unint64_t)v440 >= 0x7FFFFFFFFFFFFFFCLL)
              v413 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v413 = v439;
            if (v413)
            {
              v441 = (char *)sub_1DCAE4D04((uint64_t)v669, v413);
              v428 = (char *)v668.i64[1];
              v437 = (char *)v668.i64[0];
            }
            else
            {
              v441 = 0;
            }
            v442 = &v441[4 * v438];
            *(_DWORD *)v442 = v606.i32[2];
            v436 = v442 + 4;
            while (v428 != v437)
            {
              v443 = *((_DWORD *)v428 - 1);
              v428 -= 4;
              *((_DWORD *)v442 - 1) = v443;
              v442 -= 4;
            }
            v419 = &v441[4 * v413];
            v668.i64[0] = (uint64_t)v442;
            v668.i64[1] = (uint64_t)v436;
            v669[0] = v419;
            if (v437)
            {
              operator delete(v437);
              v419 = (char *)v669[0];
            }
          }
          else
          {
            *(_DWORD *)v428 = v606.i32[2];
            v436 = v428 + 4;
          }
          v668.i64[1] = (uint64_t)v436;
          if (v436 >= v419)
          {
            v445 = (char *)v668.i64[0];
            v446 = (uint64_t)&v436[-v668.i64[0]] >> 2;
            v447 = v446 + 1;
            if ((unint64_t)(v446 + 1) >> 62)
LABEL_780:
              sub_1DCAE4C44();
            v448 = (uint64_t)&v419[-v668.i64[0]];
            if (v448 >> 1 > v447)
              v447 = v448 >> 1;
            if ((unint64_t)v448 >= 0x7FFFFFFFFFFFFFFCLL)
              v413 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v413 = v447;
            if (v413)
            {
              v449 = (char *)sub_1DCAE4D04((uint64_t)v669, v413);
              v436 = (char *)v668.i64[1];
              v445 = (char *)v668.i64[0];
            }
            else
            {
              v449 = 0;
            }
            v450 = &v449[4 * v446];
            *(_DWORD *)v450 = v606.i32[3];
            v444 = (uint64_t)(v450 + 4);
            while (v436 != v445)
            {
              v451 = *((_DWORD *)v436 - 1);
              v436 -= 4;
              *((_DWORD *)v450 - 1) = v451;
              v450 -= 4;
            }
            v668.i64[0] = (uint64_t)v450;
            v668.i64[1] = v444;
            v669[0] = &v449[4 * v413];
            if (v445)
              operator delete(v445);
          }
          else
          {
            *(_DWORD *)v436 = v606.i32[3];
            v444 = (uint64_t)(v436 + 4);
          }
          v668.i64[1] = v444;
          v415 += 4;
        }
      }
      if (objc_msgSend_geometryType(v607, (const char *)v413, v414) == 1)
      {
        v458 = 0;
        v668 = 0uLL;
        v669[0] = 0;
        while (objc_msgSend_indexCount(v607, (const char *)v456, v457) > v458)
        {
          switch(v100)
          {
            case 32:
              v459 = *(_DWORD *)(v108 + 4 * v458);
              v460 = *(_DWORD *)(v108 + ((4 * v458) | 4));
              break;
            case 16:
              v459 = *(unsigned __int16 *)(v108 + 2 * v458);
              v460 = *(unsigned __int16 *)(v108 + ((2 * v458) | 2));
              break;
            case 8:
              v459 = *(unsigned __int8 *)(v108 + v458);
              v460 = *(unsigned __int8 *)(v108 + (v458 | 1));
              break;
            default:
              v459 = 0;
              v460 = 0;
              break;
          }
          v461 = v668.i64[1];
          v462 = (char *)v669[0];
          if (v668.i64[1] >= v669[0])
          {
            v464 = (void *)v668.i64[0];
            v465 = (v668.i64[1] - v668.i64[0]) >> 2;
            v466 = v465 + 1;
            if ((unint64_t)(v465 + 1) >> 62)
              goto LABEL_783;
            v467 = v669[0] - v668.i64[0];
            if ((v669[0] - v668.i64[0]) >> 1 > v466)
              v466 = v467 >> 1;
            if ((unint64_t)v467 >= 0x7FFFFFFFFFFFFFFCLL)
              v456 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v456 = v466;
            if (v456)
            {
              v468 = (char *)sub_1DCAE4D04((uint64_t)v669, v456);
              v461 = v668.i64[1];
              v464 = (void *)v668.i64[0];
            }
            else
            {
              v468 = 0;
            }
            v469 = &v468[4 * v465];
            *(_DWORD *)v469 = v459;
            v463 = v469 + 4;
            while ((void *)v461 != v464)
            {
              v470 = *(_DWORD *)(v461 - 4);
              v461 -= 4;
              *((_DWORD *)v469 - 1) = v470;
              v469 -= 4;
            }
            v462 = &v468[4 * v456];
            v668.i64[0] = (uint64_t)v469;
            v668.i64[1] = (uint64_t)v463;
            v669[0] = v462;
            if (v464)
            {
              operator delete(v464);
              v462 = (char *)v669[0];
            }
          }
          else
          {
            *(_DWORD *)v668.i64[1] = v459;
            v463 = (char *)(v461 + 4);
          }
          v668.i64[1] = (uint64_t)v463;
          if (v463 >= v462)
          {
            v472 = (char *)v668.i64[0];
            v473 = (uint64_t)&v463[-v668.i64[0]] >> 2;
            v474 = v473 + 1;
            if ((unint64_t)(v473 + 1) >> 62)
LABEL_783:
              sub_1DCAE4C44();
            v475 = (uint64_t)&v462[-v668.i64[0]];
            if (v475 >> 1 > v474)
              v474 = v475 >> 1;
            if ((unint64_t)v475 >= 0x7FFFFFFFFFFFFFFCLL)
              v456 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v456 = v474;
            if (v456)
            {
              v476 = (char *)sub_1DCAE4D04((uint64_t)v669, v456);
              v463 = (char *)v668.i64[1];
              v472 = (char *)v668.i64[0];
            }
            else
            {
              v476 = 0;
            }
            v477 = &v476[4 * v473];
            *(_DWORD *)v477 = v460;
            v471 = (uint64_t)(v477 + 4);
            while (v463 != v472)
            {
              v478 = *((_DWORD *)v463 - 1);
              v463 -= 4;
              *((_DWORD *)v477 - 1) = v478;
              v477 -= 4;
            }
            v668.i64[0] = (uint64_t)v477;
            v668.i64[1] = v471;
            v669[0] = &v476[4 * v456];
            if (v472)
              operator delete(v472);
          }
          else
          {
            *(_DWORD *)v463 = v460;
            v471 = (uint64_t)(v463 + 4);
          }
          v668.i64[1] = v471;
          v458 += 2;
        }
        v665 = 0;
        v664.__locale_ = 0;
        v666 = 0;
        v643 = 0;
        v641 = 0;
        v642 = 0;
        sub_1DCB04A00(&v641, (const void *)v668.i64[0], v668.i64[1], (v668.i64[1] - v668.i64[0]) >> 2);
        sub_1DCB04AB8((uint64_t)v640, (uint64_t)v687);
        sub_1DCB04D84((uint64_t)v639, (uint64_t)v683);
        sub_1DCB04AB8((uint64_t)v638, (uint64_t)v685);
        sub_1DCB05050((uint64_t)v637, (uint64_t)v682);
        sub_1DCAF858C(&v641, v587, v601, v600, v602, v599, v597, (uint64_t)v640, (char **)&v664, v579, v580, v581, v582, (uint64_t)v639, (uint64_t)v638, (uint64_t)v637);
        sub_1DCB04684((uint64_t)v637);
        sub_1DCAE6B78((uint64_t)v638);
        sub_1DCAE6B78((uint64_t)v639);
        sub_1DCAE6B78((uint64_t)v640);
        if (v641)
        {
          v642 = v641;
          operator delete(v641);
        }
        v635 = 0;
        v634 = 0;
        v636 = 0;
        sub_1DCB053F4(&v634, v664.__locale_, (uint64_t)v665, (v665 - v664.__locale_) >> 4);
        v452 = v635;
        if (v635 != v634)
        {
          v535 = 0;
          v536 = (_QWORD *)v667[0];
          do
          {
            sub_1DCB03734(v536, (uint64_t)"f ", 2);
            sub_1DCAFBD90((uint64_t)v667);
            sub_1DCB03734(v536, (uint64_t)" ", 1);
            sub_1DCAFBD90((uint64_t)v667);
            std::ios_base::getloc((const std::ios_base *)((char *)v536 + *(_QWORD *)(*v536 - 24)));
            v537 = std::locale::use_facet(&v621, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v537->__vftable[2].~facet_0)(v537, 10);
            std::locale::~locale(&v621);
            std::ostream::put();
            std::ostream::flush();
            v535 += 2;
            v452 = v634;
          }
          while (v535 < ((_BYTE *)v635 - (_BYTE *)v634) >> 4);
        }
        if (!v452)
          goto LABEL_725;
        v635 = v452;
LABEL_724:
        operator delete(v452);
        goto LABEL_725;
      }
      if (objc_msgSend_geometryType(v607, (const char *)v456, v457))
      {
        if (objc_msgSend_geometryType(v607, (const char *)v482, v483) != 5)
          goto LABEL_729;
        objc_msgSend_topology(v607, v484, v485);
        v488 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v488)
          goto LABEL_729;
        objc_msgSend_topology(v607, v486, v487);
        v489 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_faceTopology(v489, v490, v491);
        v492 = (void *)objc_claimAutoreleasedReturnValue();
        v493 = v492 == 0;

        if (v493)
          goto LABEL_729;
        objc_msgSend_topology(v607, v494, v495);
        v496 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_faceTopology(v496, v497, v498);
        v499 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_map(v499, v500, v501);
        v502 = (void *)objc_claimAutoreleasedReturnValue();

        v507 = objc_msgSend_bytes(v502, v503, v504);
        v508 = 0;
        v509 = 0;
        v668 = 0uLL;
        v669[0] = 0;
        v665 = 0;
        v664.__locale_ = 0;
        v666 = 0;
        while (1)
        {
          objc_msgSend_topology(v607, (const char *)v505, v506);
          v510 = (void *)objc_claimAutoreleasedReturnValue();
          v513 = objc_msgSend_faceCount(v510, v511, v512) > v508;

          if (!v513)
          {
            v622 = 0;
            v621.__locale_ = 0;
            v623 = 0;
            v620 = 0;
            v618 = 0;
            v619 = 0;
            sub_1DCB04A00(&v618, (const void *)v668.i64[0], v668.i64[1], (v668.i64[1] - v668.i64[0]) >> 2);
            sub_1DCB04AB8((uint64_t)v617, (uint64_t)v687);
            sub_1DCB04D84((uint64_t)v616, (uint64_t)v683);
            sub_1DCB04AB8((uint64_t)v615, (uint64_t)v685);
            sub_1DCB05050((uint64_t)v614, (uint64_t)v682);
            sub_1DCAF858C(&v618, v587, v601, v600, v602, v599, v597, (uint64_t)v617, (char **)&v621, v579, v580, v581, v582, (uint64_t)v616, (uint64_t)v615, (uint64_t)v614);
            sub_1DCB04684((uint64_t)v614);
            sub_1DCAE6B78((uint64_t)v615);
            sub_1DCAE6B78((uint64_t)v616);
            sub_1DCAE6B78((uint64_t)v617);
            if (v618)
            {
              v619 = v618;
              operator delete(v618);
            }
            v612 = 0;
            v611 = 0;
            v613 = 0;
            sub_1DCB053F4(&v611, v621.__locale_, (uint64_t)v622, (v622 - v621.__locale_) >> 4);
            v608 = 0;
            v609 = 0;
            v610 = 0;
            sub_1DCB04A00(&v608, v664.__locale_, (uint64_t)v665, (v665 - v664.__locale_) >> 2);
            v564 = v609;
            if (v609 != v608)
            {
              v565 = 0;
              v566 = 0;
              v567 = (_QWORD *)v667[0];
              do
              {
                sub_1DCB03734(v567, (uint64_t)"f ", 2);
                LODWORD(v568) = v608[v565];
                if ((int)v568 >= 1)
                {
                  v569 = 0;
                  do
                  {
                    sub_1DCAFBD90((uint64_t)v667);
                    sub_1DCB03734(v567, (uint64_t)" ", 1);
                    ++v569;
                    v568 = v608[v565];
                  }
                  while (v569 < v568);
                }
                std::ios_base::getloc((const std::ios_base *)((char *)v567 + *(_QWORD *)(*v567 - 24)));
                v570 = std::locale::use_facet(&v707, MEMORY[0x1E0DE4A90]);
                ((void (*)(const std::locale::facet *, uint64_t))v570->__vftable[2].~facet_0)(v570, 10);
                std::locale::~locale(&v707);
                std::ostream::put();
                std::ostream::flush();
                v566 += v568;
                ++v565;
                v564 = v608;
              }
              while (v565 < v609 - v608);
            }
            if (v564)
            {
              v609 = v564;
              operator delete(v564);
            }
            if (v611)
            {
              v612 = v611;
              operator delete(v611);
            }
            if (v621.__locale_)
            {
              v622 = v621.__locale_;
              operator delete(v621.__locale_);
            }
            if (v664.__locale_)
            {
              v665 = v664.__locale_;
              operator delete(v664.__locale_);
            }
            if (v668.i64[0])
            {
              v668.i64[1] = v668.i64[0];
              operator delete((void *)v668.i64[0]);
            }

            goto LABEL_729;
          }
          v514 = *(unsigned __int8 *)(v507 + v508);
          v515 = v665;
          if ((unint64_t)v665 >= v666)
          {
            v517 = v664.__locale_;
            v518 = (v665 - v664.__locale_) >> 2;
            v519 = v518 + 1;
            if ((unint64_t)(v518 + 1) >> 62)
              sub_1DCAE4C44();
            v520 = v666 - (unint64_t)v664.__locale_;
            if ((uint64_t)(v666 - (unint64_t)v664.__locale_) >> 1 > v519)
              v519 = v520 >> 1;
            if ((unint64_t)v520 >= 0x7FFFFFFFFFFFFFFCLL)
              v505 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v505 = v519;
            if (v505)
            {
              v521 = (char *)sub_1DCAE4D04((uint64_t)&v666, v505);
              v515 = v665;
              v517 = v664.__locale_;
            }
            else
            {
              v521 = 0;
            }
            v522 = (std::locale::__imp *)&v521[4 * v518];
            *(_DWORD *)v522 = v514;
            v516 = (std::locale::__imp *)((char *)v522 + 4);
            while (v515 != v517)
            {
              v523 = *((_DWORD *)v515 - 1);
              v515 = (std::locale::__imp *)((char *)v515 - 4);
              *((_DWORD *)v522 - 1) = v523;
              v522 = (std::locale::__imp *)((char *)v522 - 4);
            }
            v664.__locale_ = v522;
            v665 = v516;
            v666 = (unint64_t)&v521[4 * v505];
            if (v517)
              operator delete(v517);
          }
          else
          {
            *(_DWORD *)v665 = v514;
            v516 = (std::locale::__imp *)((char *)v515 + 4);
          }
          v665 = v516;
          if (*(_BYTE *)(v507 + v508))
            break;
LABEL_660:
          ++v508;
        }
        v524 = 0;
        while (1)
        {
          switch(v100)
          {
            case 32:
              v525 = *(_DWORD *)(v108 + 4 * v509);
              break;
            case 16:
              v525 = *(unsigned __int16 *)(v108 + 2 * v509);
              break;
            case 8:
              v525 = *(unsigned __int8 *)(v108 + v509);
              break;
            default:
              v525 = 0;
              goto LABEL_643;
          }
          ++v509;
LABEL_643:
          v526 = v668.i64[1];
          if (v668.i64[1] >= v669[0])
          {
            v528 = (void *)v668.i64[0];
            v529 = (v668.i64[1] - v668.i64[0]) >> 2;
            v530 = v529 + 1;
            if ((unint64_t)(v529 + 1) >> 62)
              sub_1DCAE4C44();
            v531 = v669[0] - v668.i64[0];
            if ((v669[0] - v668.i64[0]) >> 1 > v530)
              v530 = v531 >> 1;
            if ((unint64_t)v531 >= 0x7FFFFFFFFFFFFFFCLL)
              v505 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v505 = v530;
            if (v505)
            {
              v532 = (char *)sub_1DCAE4D04((uint64_t)v669, v505);
              v526 = v668.i64[1];
              v528 = (void *)v668.i64[0];
            }
            else
            {
              v532 = 0;
            }
            v533 = &v532[4 * v529];
            *(_DWORD *)v533 = v525;
            v527 = (uint64_t)(v533 + 4);
            while ((void *)v526 != v528)
            {
              v534 = *(_DWORD *)(v526 - 4);
              v526 -= 4;
              *((_DWORD *)v533 - 1) = v534;
              v533 -= 4;
            }
            v668.i64[0] = (uint64_t)v533;
            v668.i64[1] = v527;
            v669[0] = &v532[4 * v505];
            if (v528)
              operator delete(v528);
          }
          else
          {
            *(_DWORD *)v668.i64[1] = v525;
            v527 = v526 + 4;
          }
          v668.i64[1] = v527;
          ++v524;
          v6 = v596;
          if (v524 >= *(unsigned __int8 *)(v507 + v508))
            goto LABEL_660;
        }
      }
      v538 = 0;
      v668 = 0uLL;
      v669[0] = 0;
      while (1)
      {
        if (objc_msgSend_indexCount(v607, (const char *)v482, v483) <= v538)
        {
          v665 = 0;
          v664.__locale_ = 0;
          v666 = 0;
          v633 = 0;
          v631 = 0;
          v632 = 0;
          sub_1DCB04A00(&v631, (const void *)v668.i64[0], v668.i64[1], (v668.i64[1] - v668.i64[0]) >> 2);
          sub_1DCB04AB8((uint64_t)v630, (uint64_t)v687);
          sub_1DCB04D84((uint64_t)v629, (uint64_t)v683);
          sub_1DCB04AB8((uint64_t)v628, (uint64_t)v685);
          sub_1DCB05050((uint64_t)v627, (uint64_t)v682);
          sub_1DCAF858C(&v631, v587, v601, v600, v602, v599, v597, (uint64_t)v630, (char **)&v664, v579, v580, v581, v582, (uint64_t)v629, (uint64_t)v628, (uint64_t)v627);
          sub_1DCB04684((uint64_t)v627);
          sub_1DCAE6B78((uint64_t)v628);
          sub_1DCAE6B78((uint64_t)v629);
          sub_1DCAE6B78((uint64_t)v630);
          if (v631)
          {
            v632 = v631;
            operator delete(v631);
          }
          v625 = 0;
          v624 = 0;
          v626 = 0;
          sub_1DCB053F4(&v624, v664.__locale_, (uint64_t)v665, (v665 - v664.__locale_) >> 4);
          v452 = v625;
          if (v625 != v624)
          {
            v557 = 0;
            v558 = (_QWORD *)v667[0];
            do
            {
              sub_1DCB03734(v558, (uint64_t)"f ", 2);
              sub_1DCAFBD90((uint64_t)v667);
              std::ios_base::getloc((const std::ios_base *)((char *)v558 + *(_QWORD *)(*v558 - 24)));
              v559 = std::locale::use_facet(&v621, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v559->__vftable[2].~facet_0)(v559, 10);
              std::locale::~locale(&v621);
              std::ostream::put();
              std::ostream::flush();
              ++v557;
              v452 = v624;
            }
            while (v557 < ((_BYTE *)v625 - (_BYTE *)v624) >> 4);
          }
          if (!v452)
            goto LABEL_725;
          v625 = v452;
          goto LABEL_724;
        }
        switch(v100)
        {
          case 32:
            v539 = *(_DWORD *)(v108 + 4 * v538);
            v540 = (_DWORD *)v668.i64[1];
            if (v668.i64[1] >= v669[0])
            {
              v541 = (_DWORD *)v668.i64[0];
              v550 = (v668.i64[1] - v668.i64[0]) >> 2;
              v551 = v550 + 1;
              if ((unint64_t)(v550 + 1) >> 62)
                sub_1DCAE4C44();
              v552 = v669[0] - v668.i64[0];
              if ((v669[0] - v668.i64[0]) >> 1 > v551)
                v551 = v552 >> 1;
              if ((unint64_t)v552 >= 0x7FFFFFFFFFFFFFFCLL)
                v482 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v482 = v551;
              if (v482)
              {
                v545 = (char *)sub_1DCAE4D04((uint64_t)v669, v482);
                v540 = (_DWORD *)v668.i64[1];
                v541 = (_DWORD *)v668.i64[0];
              }
              else
              {
                v545 = 0;
              }
              v553 = &v545[4 * v550];
              *(_DWORD *)v553 = v539;
              v549 = (uint64_t)(v553 + 4);
              while (v540 != v541)
              {
                v555 = *--v540;
                *((_DWORD *)v553 - 1) = v555;
                v553 -= 4;
              }
              goto LABEL_713;
            }
            break;
          case 16:
            v539 = *(unsigned __int16 *)(v108 + 2 * v538);
            v540 = (_DWORD *)v668.i64[1];
            if (v668.i64[1] >= v669[0])
            {
              v541 = (_DWORD *)v668.i64[0];
              v546 = (v668.i64[1] - v668.i64[0]) >> 2;
              v547 = v546 + 1;
              if ((unint64_t)(v546 + 1) >> 62)
                sub_1DCAE4C44();
              v548 = v669[0] - v668.i64[0];
              if ((v669[0] - v668.i64[0]) >> 1 > v547)
                v547 = v548 >> 1;
              if ((unint64_t)v548 >= 0x7FFFFFFFFFFFFFFCLL)
                v482 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v482 = v547;
              if (v482)
              {
                v545 = (char *)sub_1DCAE4D04((uint64_t)v669, v482);
                v540 = (_DWORD *)v668.i64[1];
                v541 = (_DWORD *)v668.i64[0];
              }
              else
              {
                v545 = 0;
              }
              v553 = &v545[4 * v546];
              *(_DWORD *)v553 = v539;
              v549 = (uint64_t)(v553 + 4);
              while (v540 != v541)
              {
                v554 = *--v540;
                *((_DWORD *)v553 - 1) = v554;
                v553 -= 4;
              }
              goto LABEL_713;
            }
            break;
          case 8:
            v539 = *(unsigned __int8 *)(v108 + v538);
            v540 = (_DWORD *)v668.i64[1];
            if (v668.i64[1] >= v669[0])
            {
              v541 = (_DWORD *)v668.i64[0];
              v542 = (v668.i64[1] - v668.i64[0]) >> 2;
              v543 = v542 + 1;
              if ((unint64_t)(v542 + 1) >> 62)
                sub_1DCAE4C44();
              v544 = v669[0] - v668.i64[0];
              if ((v669[0] - v668.i64[0]) >> 1 > v543)
                v543 = v544 >> 1;
              if ((unint64_t)v544 >= 0x7FFFFFFFFFFFFFFCLL)
                v482 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v482 = v543;
              if (v482)
              {
                v545 = (char *)sub_1DCAE4D04((uint64_t)v669, v482);
                v540 = (_DWORD *)v668.i64[1];
                v541 = (_DWORD *)v668.i64[0];
              }
              else
              {
                v545 = 0;
              }
              v553 = &v545[4 * v542];
              *(_DWORD *)v553 = v539;
              v549 = (uint64_t)(v553 + 4);
              while (v540 != v541)
              {
                v556 = *--v540;
                *((_DWORD *)v553 - 1) = v556;
                v553 -= 4;
              }
LABEL_713:
              v668.i64[0] = (uint64_t)v553;
              v668.i64[1] = v549;
              v669[0] = &v545[4 * v482];
              if (v541)
                operator delete(v541);
              goto LABEL_715;
            }
            break;
          default:
            goto LABEL_716;
        }
        *v540 = v539;
        v549 = (uint64_t)(v540 + 1);
LABEL_715:
        v668.i64[1] = v549;
LABEL_716:
        ++v538;
      }
    }
    v337 = 0;
    v668 = 0uLL;
    v669[0] = 0;
    while (objc_msgSend_indexCount(v607, (const char *)v335, v336) > v337)
    {
      switch(v100)
      {
        case 32:
          v346 = *(_DWORD *)(v108 + 4 * v337);
          v347 = v668.i64[1];
          v348 = (char *)v669[0];
          if (v668.i64[1] >= v669[0])
          {
            v355 = (void *)v668.i64[0];
            v356 = (v668.i64[1] - v668.i64[0]) >> 2;
            v357 = v356 + 1;
            if ((unint64_t)(v356 + 1) >> 62)
              sub_1DCAE4C44();
            v358 = v669[0] - v668.i64[0];
            if ((v669[0] - v668.i64[0]) >> 1 > v357)
              v357 = v358 >> 1;
            if ((unint64_t)v358 >= 0x7FFFFFFFFFFFFFFCLL)
              v335 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v335 = v357;
            if (v335)
            {
              v359 = (char *)sub_1DCAE4D04((uint64_t)v669, v335);
              v347 = v668.i64[1];
              v355 = (void *)v668.i64[0];
            }
            else
            {
              v359 = 0;
            }
            v374 = &v359[4 * v356];
            *(_DWORD *)v374 = v346;
            v349 = v374 + 4;
            while ((void *)v347 != v355)
            {
              v375 = *(_DWORD *)(v347 - 4);
              v347 -= 4;
              *((_DWORD *)v374 - 1) = v375;
              v374 -= 4;
            }
            v348 = &v359[4 * v335];
            v668.i64[0] = (uint64_t)v374;
            v668.i64[1] = (uint64_t)v349;
            v669[0] = v348;
            if (v355)
            {
              operator delete(v355);
              v348 = (char *)v669[0];
            }
          }
          else
          {
            *(_DWORD *)v668.i64[1] = v346;
            v349 = (char *)(v347 + 4);
          }
          v668.i64[1] = (uint64_t)v349;
          v376 = *(_DWORD *)(v108 + 4 * v337 + 4);
          if (v349 >= v348)
          {
            v377 = (char *)v668.i64[0];
            v378 = (uint64_t)&v349[-v668.i64[0]] >> 2;
            v379 = v378 + 1;
            if ((unint64_t)(v378 + 1) >> 62)
              sub_1DCAE4C44();
            v380 = (uint64_t)&v348[-v668.i64[0]];
            if (v380 >> 1 > v379)
              v379 = v380 >> 1;
            if ((unint64_t)v380 >= 0x7FFFFFFFFFFFFFFCLL)
              v335 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v335 = v379;
            if (v335)
            {
              v381 = (char *)sub_1DCAE4D04((uint64_t)v669, v335);
              v349 = (char *)v668.i64[1];
              v377 = (char *)v668.i64[0];
            }
            else
            {
              v381 = 0;
            }
            v398 = &v381[4 * v378];
            *(_DWORD *)v398 = v376;
            v368 = v398 + 4;
            while (v349 != v377)
            {
              v399 = *((_DWORD *)v349 - 1);
              v349 -= 4;
              *((_DWORD *)v398 - 1) = v399;
              v398 -= 4;
            }
            v348 = &v381[4 * v335];
            v668.i64[0] = (uint64_t)v398;
            v668.i64[1] = (uint64_t)v368;
            v669[0] = v348;
            if (v377)
            {
              operator delete(v377);
              v348 = (char *)v669[0];
            }
          }
          else
          {
            *(_DWORD *)v349 = v376;
            v368 = v349 + 4;
          }
          v668.i64[1] = (uint64_t)v368;
          v392 = *(_DWORD *)(v108 + 4 * v337 + 8);
          if (v368 >= v348)
          {
            v393 = (char *)v668.i64[0];
            v400 = (uint64_t)&v368[-v668.i64[0]] >> 2;
            v401 = v400 + 1;
            if ((unint64_t)(v400 + 1) >> 62)
              sub_1DCAE4C44();
            v402 = (uint64_t)&v348[-v668.i64[0]];
            if (v402 >> 1 > v401)
              v401 = v402 >> 1;
            if ((unint64_t)v402 >= 0x7FFFFFFFFFFFFFFCLL)
              v335 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v335 = v401;
            if (v335)
            {
              v397 = (char *)sub_1DCAE4D04((uint64_t)v669, v335);
              v368 = (char *)v668.i64[1];
              v393 = (char *)v668.i64[0];
            }
            else
            {
              v397 = 0;
            }
            v409 = &v397[4 * v400];
            *(_DWORD *)v409 = v392;
            v405 = (uint64_t)(v409 + 4);
            while (v368 != v393)
            {
              v411 = *((_DWORD *)v368 - 1);
              v368 -= 4;
              *((_DWORD *)v409 - 1) = v411;
              v409 -= 4;
            }
            goto LABEL_475;
          }
          break;
        case 16:
          v342 = *(unsigned __int16 *)(v108 + 2 * v337);
          v343 = v668.i64[1];
          v344 = (char *)v669[0];
          if (v668.i64[1] >= v669[0])
          {
            v350 = (void *)v668.i64[0];
            v351 = (v668.i64[1] - v668.i64[0]) >> 2;
            v352 = v351 + 1;
            if ((unint64_t)(v351 + 1) >> 62)
              sub_1DCAE4C44();
            v353 = v669[0] - v668.i64[0];
            if ((v669[0] - v668.i64[0]) >> 1 > v352)
              v352 = v353 >> 1;
            if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFFCLL)
              v335 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v335 = v352;
            if (v335)
            {
              v354 = (char *)sub_1DCAE4D04((uint64_t)v669, v335);
              v343 = v668.i64[1];
              v350 = (void *)v668.i64[0];
            }
            else
            {
              v354 = 0;
            }
            v365 = &v354[4 * v351];
            *(_DWORD *)v365 = v342;
            v345 = v365 + 4;
            while ((void *)v343 != v350)
            {
              v366 = *(_DWORD *)(v343 - 4);
              v343 -= 4;
              *((_DWORD *)v365 - 1) = v366;
              v365 -= 4;
            }
            v344 = &v354[4 * v335];
            v668.i64[0] = (uint64_t)v365;
            v668.i64[1] = (uint64_t)v345;
            v669[0] = v344;
            if (v350)
            {
              operator delete(v350);
              v344 = (char *)v669[0];
            }
          }
          else
          {
            *(_DWORD *)v668.i64[1] = v342;
            v345 = (char *)(v343 + 4);
          }
          v668.i64[1] = (uint64_t)v345;
          v367 = *(unsigned __int16 *)(v108 + 2 * v337 + 2);
          if (v345 >= v344)
          {
            v369 = (char *)v668.i64[0];
            v370 = (uint64_t)&v345[-v668.i64[0]] >> 2;
            v371 = v370 + 1;
            if ((unint64_t)(v370 + 1) >> 62)
              sub_1DCAE4C44();
            v372 = (uint64_t)&v344[-v668.i64[0]];
            if (v372 >> 1 > v371)
              v371 = v372 >> 1;
            if ((unint64_t)v372 >= 0x7FFFFFFFFFFFFFFCLL)
              v335 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v335 = v371;
            if (v335)
            {
              v373 = (char *)sub_1DCAE4D04((uint64_t)v669, v335);
              v345 = (char *)v668.i64[1];
              v369 = (char *)v668.i64[0];
            }
            else
            {
              v373 = 0;
            }
            v390 = &v373[4 * v370];
            *(_DWORD *)v390 = v367;
            v368 = v390 + 4;
            while (v345 != v369)
            {
              v391 = *((_DWORD *)v345 - 1);
              v345 -= 4;
              *((_DWORD *)v390 - 1) = v391;
              v390 -= 4;
            }
            v344 = &v373[4 * v335];
            v668.i64[0] = (uint64_t)v390;
            v668.i64[1] = (uint64_t)v368;
            v669[0] = v344;
            if (v369)
            {
              operator delete(v369);
              v344 = (char *)v669[0];
            }
          }
          else
          {
            *(_DWORD *)v345 = v367;
            v368 = v345 + 4;
          }
          v668.i64[1] = (uint64_t)v368;
          v392 = *(unsigned __int16 *)(v108 + 2 * v337 + 4);
          if (v368 >= v344)
          {
            v393 = (char *)v668.i64[0];
            v394 = (uint64_t)&v368[-v668.i64[0]] >> 2;
            v395 = v394 + 1;
            if ((unint64_t)(v394 + 1) >> 62)
              sub_1DCAE4C44();
            v396 = (uint64_t)&v344[-v668.i64[0]];
            if (v396 >> 1 > v395)
              v395 = v396 >> 1;
            if ((unint64_t)v396 >= 0x7FFFFFFFFFFFFFFCLL)
              v335 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v335 = v395;
            if (v335)
            {
              v397 = (char *)sub_1DCAE4D04((uint64_t)v669, v335);
              v368 = (char *)v668.i64[1];
              v393 = (char *)v668.i64[0];
            }
            else
            {
              v397 = 0;
            }
            v409 = &v397[4 * v394];
            *(_DWORD *)v409 = v392;
            v405 = (uint64_t)(v409 + 4);
            while (v368 != v393)
            {
              v410 = *((_DWORD *)v368 - 1);
              v368 -= 4;
              *((_DWORD *)v409 - 1) = v410;
              v409 -= 4;
            }
            goto LABEL_475;
          }
          break;
        case 8:
          v338 = *(unsigned __int8 *)(v108 + v337);
          v339 = v668.i64[1];
          v340 = (char *)v669[0];
          if (v668.i64[1] >= v669[0])
          {
            v360 = (void *)v668.i64[0];
            v361 = (v668.i64[1] - v668.i64[0]) >> 2;
            v362 = v361 + 1;
            if ((unint64_t)(v361 + 1) >> 62)
              sub_1DCAE4C44();
            v363 = v669[0] - v668.i64[0];
            if ((v669[0] - v668.i64[0]) >> 1 > v362)
              v362 = v363 >> 1;
            if ((unint64_t)v363 >= 0x7FFFFFFFFFFFFFFCLL)
              v335 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v335 = v362;
            if (v335)
            {
              v364 = (char *)sub_1DCAE4D04((uint64_t)v669, v335);
              v339 = v668.i64[1];
              v360 = (void *)v668.i64[0];
            }
            else
            {
              v364 = 0;
            }
            v382 = &v364[4 * v361];
            *(_DWORD *)v382 = v338;
            v341 = v382 + 4;
            while ((void *)v339 != v360)
            {
              v383 = *(_DWORD *)(v339 - 4);
              v339 -= 4;
              *((_DWORD *)v382 - 1) = v383;
              v382 -= 4;
            }
            v340 = &v364[4 * v335];
            v668.i64[0] = (uint64_t)v382;
            v668.i64[1] = (uint64_t)v341;
            v669[0] = v340;
            if (v360)
            {
              operator delete(v360);
              v340 = (char *)v669[0];
            }
          }
          else
          {
            *(_DWORD *)v668.i64[1] = v338;
            v341 = (char *)(v339 + 4);
          }
          v668.i64[1] = (uint64_t)v341;
          v384 = *(unsigned __int8 *)(v337 + v108 + 1);
          if (v341 >= v340)
          {
            v385 = (char *)v668.i64[0];
            v386 = (uint64_t)&v341[-v668.i64[0]] >> 2;
            v387 = v386 + 1;
            if ((unint64_t)(v386 + 1) >> 62)
              sub_1DCAE4C44();
            v388 = (uint64_t)&v340[-v668.i64[0]];
            if (v388 >> 1 > v387)
              v387 = v388 >> 1;
            if ((unint64_t)v388 >= 0x7FFFFFFFFFFFFFFCLL)
              v335 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v335 = v387;
            if (v335)
            {
              v389 = (char *)sub_1DCAE4D04((uint64_t)v669, v335);
              v341 = (char *)v668.i64[1];
              v385 = (char *)v668.i64[0];
            }
            else
            {
              v389 = 0;
            }
            v403 = &v389[4 * v386];
            *(_DWORD *)v403 = v384;
            v368 = v403 + 4;
            while (v341 != v385)
            {
              v404 = *((_DWORD *)v341 - 1);
              v341 -= 4;
              *((_DWORD *)v403 - 1) = v404;
              v403 -= 4;
            }
            v340 = &v389[4 * v335];
            v668.i64[0] = (uint64_t)v403;
            v668.i64[1] = (uint64_t)v368;
            v669[0] = v340;
            if (v385)
            {
              operator delete(v385);
              v340 = (char *)v669[0];
            }
          }
          else
          {
            *(_DWORD *)v341 = v384;
            v368 = v341 + 4;
          }
          v668.i64[1] = (uint64_t)v368;
          v392 = *(unsigned __int8 *)(v337 + v108 + 2);
          if (v368 >= v340)
          {
            v393 = (char *)v668.i64[0];
            v406 = (uint64_t)&v368[-v668.i64[0]] >> 2;
            v407 = v406 + 1;
            if ((unint64_t)(v406 + 1) >> 62)
              sub_1DCAE4C44();
            v408 = (uint64_t)&v340[-v668.i64[0]];
            if (v408 >> 1 > v407)
              v407 = v408 >> 1;
            if ((unint64_t)v408 >= 0x7FFFFFFFFFFFFFFCLL)
              v335 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v335 = v407;
            if (v335)
            {
              v397 = (char *)sub_1DCAE4D04((uint64_t)v669, v335);
              v368 = (char *)v668.i64[1];
              v393 = (char *)v668.i64[0];
            }
            else
            {
              v397 = 0;
            }
            v409 = &v397[4 * v406];
            *(_DWORD *)v409 = v392;
            v405 = (uint64_t)(v409 + 4);
            while (v368 != v393)
            {
              v412 = *((_DWORD *)v368 - 1);
              v368 -= 4;
              *((_DWORD *)v409 - 1) = v412;
              v409 -= 4;
            }
LABEL_475:
            v668.i64[0] = (uint64_t)v409;
            v668.i64[1] = v405;
            v669[0] = &v397[4 * v335];
            if (v393)
              operator delete(v393);
            goto LABEL_477;
          }
          break;
        default:
          goto LABEL_478;
      }
      *(_DWORD *)v368 = v392;
      v405 = (uint64_t)(v368 + 4);
LABEL_477:
      v668.i64[1] = v405;
LABEL_478:
      v337 += 3;
    }
    v665 = 0;
    v664.__locale_ = 0;
    v666 = 0;
    v663 = 0;
    v661 = 0;
    v662 = 0;
    sub_1DCB04A00(&v661, (const void *)v668.i64[0], v668.i64[1], (v668.i64[1] - v668.i64[0]) >> 2);
    sub_1DCB04AB8((uint64_t)v660, (uint64_t)v687);
    sub_1DCB04D84((uint64_t)v659, (uint64_t)v683);
    sub_1DCB04AB8((uint64_t)v658, (uint64_t)v685);
    sub_1DCB05050((uint64_t)v657, (uint64_t)v682);
    sub_1DCAF858C(&v661, v587, v601, v600, v602, v599, v597, (uint64_t)v660, (char **)&v664, v579, v580, v581, v582, (uint64_t)v659, (uint64_t)v658, (uint64_t)v657);
    sub_1DCB04684((uint64_t)v657);
    sub_1DCAE6B78((uint64_t)v658);
    sub_1DCAE6B78((uint64_t)v659);
    sub_1DCAE6B78((uint64_t)v660);
    if (v661)
    {
      v662 = v661;
      operator delete(v661);
    }
    v655 = 0;
    v654 = 0;
    v656 = 0;
    sub_1DCB053F4(&v654, v664.__locale_, (uint64_t)v665, (v665 - v664.__locale_) >> 4);
    v452 = v655;
    if (v655 != v654)
    {
      v453 = 0;
      v454 = (_QWORD *)v667[0];
      do
      {
        sub_1DCB03734(v454, (uint64_t)"f ", 2);
        sub_1DCAFBD90((uint64_t)v667);
        sub_1DCB03734(v454, (uint64_t)" ", 1);
        sub_1DCAFBD90((uint64_t)v667);
        sub_1DCB03734(v454, (uint64_t)" ", 1);
        sub_1DCAFBD90((uint64_t)v667);
        std::ios_base::getloc((const std::ios_base *)((char *)v454 + *(_QWORD *)(*v454 - 24)));
        v455 = std::locale::use_facet(&v621, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v455->__vftable[2].~facet_0)(v455, 10);
        std::locale::~locale(&v621);
        std::ostream::put();
        std::ostream::flush();
        v453 += 3;
        v452 = v654;
      }
      while (v453 < ((_BYTE *)v655 - (_BYTE *)v654) >> 4);
    }
    if (v452)
    {
      v655 = v452;
      goto LABEL_724;
    }
LABEL_725:
    if (v664.__locale_)
    {
      v665 = v664.__locale_;
      operator delete(v664.__locale_);
    }
    if (v668.i64[0])
    {
      v668.i64[1] = v668.i64[0];
      operator delete((void *)v668.i64[0]);
    }
LABEL_729:
    v560 = sub_1DCB03734(&v709, (uint64_t)"s off", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v560 + *(_QWORD *)(*v560 - 24)));
    v561 = std::locale::use_facet((const std::locale *)&v668, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v561->__vftable[2].~facet_0)(v561, 10);
    std::locale::~locale((std::locale *)&v668);
    std::ostream::put();
    std::ostream::flush();
    if (v670)
    {
      v671 = v670;
      operator delete(v670);
    }
    if (v673)
    {
      v674 = v673;
      operator delete(v673);
    }
    if (v676.__locale_)
    {
      v677 = v676.__locale_;
      operator delete(v676.__locale_);
    }
    if (v679.__locale_)
    {
      v680 = v679.__locale_;
      operator delete(v679.__locale_);
    }

    v61 = v696;
    v562 = v601;
    v63 = v601;
    v563 = v599;
    v64 = v599;
  }
  while (0xCCCCCCCCCCCCCCCDLL * (v697 - v696) > v62);
LABEL_759:
  v571 = v563;
  v572 = v562;
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v710[*(_QWORD *)(v709 - 24) - 8], *(_DWORD *)&v710[*(_QWORD *)(v709 - 24) + 24] | 4);

  sub_1DCB04684((uint64_t)v682);
  sub_1DCAE6B78((uint64_t)v683);
  sub_1DCAE6B78((uint64_t)v685);
  sub_1DCAE6B78((uint64_t)v687);
  sub_1DCACB5E8((uint64_t)&v689, v690[0]);
  if (SHIBYTE(v691.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v691.__r_.__value_.__l.__data_);
  *(_QWORD *)v687 = &v696;
  sub_1DCB045EC((void ***)v687);
  if (v574 < 0)
    operator delete(v573);
  if (SHIBYTE(v700) < 0)
    operator delete((void *)v699);
  if (SHIBYTE(v701.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v701.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_773:
  v709 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)&v710[*(_QWORD *)(v709 - 24) - 8] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1DF0D2094](v710);
  std::ostream::~ostream();
  MEMORY[0x1DF0D2238](v711);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  if (!v575)
  {
    *(_OWORD *)a4 = v705;
    a4[2] = v706;
    v706 = 0;
    v705 = 0uLL;
  }
  if (SHIBYTE(v706) < 0)
    operator delete((void *)v705);

}

void sub_1DCAF7BC4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, int a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,void *a60,void *a61,uint64_t a62,void *a63)
{
  void *a64;
  void *a66;
  void *a67;
  void *a71;
  void *v71;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  char *v82;

  v74 = (void *)STACK[0x2C8];
  if (STACK[0x2C8])
  {
    STACK[0x2D0] = (unint64_t)v74;
    operator delete(v74);
  }
  v75 = (void *)STACK[0x638];
  if (STACK[0x638])
  {
    STACK[0x640] = (unint64_t)v75;
    operator delete(v75);
  }
  v76 = (void *)STACK[0x660];
  if (STACK[0x660])
  {
    STACK[0x668] = (unint64_t)v76;
    operator delete(v76);
  }

  v77 = (void *)STACK[0x680];
  if (STACK[0x680])
  {
    STACK[0x688] = (unint64_t)v77;
    operator delete(v77);
  }
  v78 = (void *)STACK[0x698];
  if (STACK[0x698])
  {
    STACK[0x6A0] = (unint64_t)v78;
    operator delete(v78);
  }
  v79 = (void *)STACK[0x6B0];
  if (STACK[0x6B0])
  {
    STACK[0x6B8] = (unint64_t)v79;
    operator delete(v79);
  }
  v80 = (void *)STACK[0x6C8];
  if (STACK[0x6C8])
  {
    STACK[0x6D0] = (unint64_t)v80;
    operator delete(v80);
  }

  sub_1DCB04684((uint64_t)&STACK[0x6E0]);
  sub_1DCAE6B78((uint64_t)&STACK[0x710]);
  sub_1DCAE6B78((uint64_t)&STACK[0x740]);
  sub_1DCAE6B78((uint64_t)&STACK[0x770]);
  sub_1DCACB5E8((uint64_t)&STACK[0x798], (char *)STACK[0x7A0]);
  if (SLOBYTE(STACK[0x7C7]) < 0)
    operator delete((void *)STACK[0x7B0]);
  STACK[0x770] = (unint64_t)&STACK[0x818];
  sub_1DCB045EC((void ***)&STACK[0x770]);
  if (a15 < 0)
    operator delete(a13);
  if (SLOBYTE(STACK[0x847]) < 0)
    operator delete((void *)STACK[0x830]);
  if (SLOBYTE(STACK[0x867]) < 0)
    operator delete((void *)STACK[0x850]);
  if (SLOBYTE(STACK[0x887]) < 0)
    operator delete((void *)STACK[0x870]);
  if (SLOBYTE(STACK[0x8A7]) < 0)
    operator delete((void *)STACK[0x890]);
  sub_1DCAF3ED4(&STACK[0x960]);
  if (SLOBYTE(STACK[0x8BF]) < 0)
    operator delete((void *)STACK[0x8A8]);
  if (a2 == 1)
  {
    v81 = __cxa_begin_catch(a1);
    v82 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v81 + 16))(v81);
    sub_1DCB0345C(a19, v82);
    __cxa_end_catch();
    JUMPOUT(0x1DCAF7A6CLL);
  }
  if (SLOBYTE(STACK[0x8D7]) < 0)
    operator delete((void *)STACK[0x8C0]);

  _Unwind_Resume(a1);
}

void sub_1DCAF858C(_QWORD *a1@<X0>, _BYTE *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, char **a9@<X8>, float32x4_t a10@<Q0>, float32x4_t a11@<Q1>, float32x4_t a12@<Q2>, float32x4_t a13@<Q3>, uint64_t a14, uint64_t a15, uint64_t a16)
{
  id v23;
  id v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  unint64_t v30;
  const char *v31;
  uint64_t v32;
  unint64_t v33;
  const char *v34;
  uint64_t v35;
  unint64_t v36;
  const char *v37;
  uint64_t v38;
  unint64_t v39;
  const char *v40;
  uint64_t v41;
  unint64_t v42;
  const char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  float32x4_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  __int32 v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  float32x4_t *f32;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  float32x4_t *v83;
  char *v84;
  uint64_t v85;
  float32x4_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  float32x4_t v104;
  uint64_t v105;
  uint64_t v106;
  __int32 v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  unint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  __int32 *v119;
  float32x4_t v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  float32x4_t v130;
  uint64_t v131;
  __int32 v132;
  unint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  __int128 v143;
  char **v144;
  unint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  id v153;
  unint64_t v158;
  void *v159;
  void *v160;
  unint64_t v161;
  unint64_t v162;
  char **v163;
  void *v164;
  float32x4_t v165;
  unint64_t v166;
  float32x4_t *v167[2];

  v23 = a3;
  v153 = a4;
  v24 = a5;
  v25 = a6;
  v28 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  v163 = a9;
  if (v23)
  {
    v29 = v153;
    if (objc_msgSend_stride(v23, (const char *)v26, v27))
    {
      v30 = objc_msgSend_bufferSize(v23, (const char *)v26, v27);
      v162 = v30 / objc_msgSend_stride(v23, v31, v32);
      if (!v25)
        goto LABEL_11;
    }
    else
    {
      LODWORD(v162) = 0;
      if (!v25)
        goto LABEL_11;
    }
  }
  else
  {
    LODWORD(v162) = 0;
    v29 = v153;
    if (!v25)
      goto LABEL_11;
  }
  if (objc_msgSend_stride(v25, (const char *)v26, v27))
  {
    v33 = objc_msgSend_bufferSize(v25, (const char *)v26, v27);
    v158 = v33 / objc_msgSend_stride(v25, v34, v35);
    if (!v28)
      goto LABEL_15;
    goto LABEL_12;
  }
LABEL_11:
  LODWORD(v158) = 0;
  if (!v28)
    goto LABEL_15;
LABEL_12:
  if (objc_msgSend_stride(v28, (const char *)v26, v27))
  {
    v36 = objc_msgSend_bufferSize(v28, (const char *)v26, v27);
    v161 = v36 / objc_msgSend_stride(v28, v37, v38);
    if (!v29)
      goto LABEL_18;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v161) = 0;
  if (!v29)
  {
LABEL_18:
    LODWORD(v149) = 0;
    goto LABEL_19;
  }
LABEL_16:
  if (!objc_msgSend_stride(v29, (const char *)v26, v27))
    goto LABEL_18;
  v39 = objc_msgSend_bufferSize(v29, (const char *)v26, v27);
  v149 = v39 / objc_msgSend_stride(v29, v40, v41);
LABEL_19:
  v160 = v24;
  v159 = v25;
  if (v24 && objc_msgSend_stride(v24, (const char *)v26, v27))
  {
    v42 = objc_msgSend_bufferSize(v24, (const char *)v26, v27);
    v147 = v42 / objc_msgSend_stride(v24, v43, v44);
  }
  else
  {
    LODWORD(v147) = 0;
  }
  if (a1[1] != *a1)
  {
    v45 = 0;
    v145 = &v166;
    v146 = (uint64_t)(a9 + 2);
    v164 = v28;
    do
    {
      if (a2[9])
      {
        v165 = 0uLL;
        v166 = 0;
        v46 = objc_msgSend_stride(v23, (const char *)v26, v27);
        v49 = objc_msgSend_stride(v28, v47, v48);
        v52 = objc_msgSend_dataStart(v23, v50, v51);
        v57 = objc_msgSend_dataStart(v28, v53, v54);
        v58 = *(_DWORD *)(*a1 + 4 * v45);
        if (v58 >= (int)v162)
          v59 = v162 - 1;
        else
          v59 = *(_DWORD *)(*a1 + 4 * v45);
        if (v58 >= (int)v161)
          v60 = v161 - 1;
        else
          v60 = *(_DWORD *)(*a1 + 4 * v45);
        v62 = v46 * (v59 & ~(v59 >> 31));
        if (v62 + 12 <= (unint64_t)objc_msgSend_bufferSize(v23, v55, v56, v145)
          && (v63 = v49 * (v60 & ~(v60 >> 31)),
              v63 + 12 <= (unint64_t)objc_msgSend_bufferSize(v164, (const char *)v26, v27)))
        {
          v75.i32[3] = a12.i32[3];
          v76 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(a13, a10, *(float *)(v52 + v62)), a11, *(float *)(v52 + v62 + 4)), a12, *(float *)(v52 + v62 + 8));
          v77 = v165.i64[1];
          if (v165.i64[1] >= v166)
          {
            v150 = v76;
            v79 = (v165.i64[1] - v165.i64[0]) >> 4;
            if ((unint64_t)(v79 + 1) >> 60)
              sub_1DCAE4C44();
            v80 = (uint64_t)(v166 - v165.i64[0]) >> 3;
            if (v80 <= v79 + 1)
              v80 = v79 + 1;
            if (v166 - v165.i64[0] >= 0x7FFFFFFFFFFFFFF0)
              v81 = 0xFFFFFFFFFFFFFFFLL;
            else
              v81 = v80;
            if (v81)
              v82 = (char *)sub_1DCAFBD5C((uint64_t)v145, v81);
            else
              v82 = 0;
            v83 = (float32x4_t *)&v82[16 * v79];
            v75.i32[3] = v150.i32[3];
            *v83 = v150;
            f32 = (_OWORD *)v83[1].f32;
            v84 = (char *)v165.i64[1];
            v85 = v165.i64[0];
            if (v165.i64[1] != v165.i64[0])
            {
              do
              {
                v86 = *((float32x4_t *)v84 - 1);
                v84 -= 16;
                v75.i32[3] = v86.i32[3];
                v83[-1] = v86;
                --v83;
              }
              while (v84 != (char *)v85);
              v84 = (char *)v165.i64[0];
            }
            v165.i64[0] = (uint64_t)v83;
            v165.i64[1] = (uint64_t)f32;
            v166 = (unint64_t)&v82[16 * v81];
            if (v84)
              operator delete(v84);
          }
          else
          {
            *(float32x4_t *)v165.i64[1] = v76;
            f32 = (_OWORD *)(v77 + 16);
          }
          v165.i64[1] = (uint64_t)f32;
          v75.i64[0] = *(_QWORD *)(v57 + v63);
          v75.i32[2] = *(_DWORD *)(v57 + v63 + 8);
          if ((unint64_t)f32 >= v166)
          {
            v151 = v75;
            v28 = v164;
            v88 = ((uint64_t)f32 - v165.i64[0]) >> 4;
            if ((unint64_t)(v88 + 1) >> 60)
              sub_1DCAE4C44();
            v89 = (uint64_t)(v166 - v165.i64[0]) >> 3;
            if (v89 <= v88 + 1)
              v89 = v88 + 1;
            if (v166 - v165.i64[0] >= 0x7FFFFFFFFFFFFFF0)
              v90 = 0xFFFFFFFFFFFFFFFLL;
            else
              v90 = v89;
            if (v90)
              v91 = (char *)sub_1DCAFBD5C((uint64_t)v145, v90);
            else
              v91 = 0;
            v92 = &v91[16 * v88];
            *(float32x4_t *)v92 = v151;
            v87 = (uint64_t)(v92 + 16);
            v93 = (char *)v165.i64[1];
            v94 = v165.i64[0];
            if (v165.i64[1] != v165.i64[0])
            {
              do
              {
                v95 = *((_OWORD *)v93 - 1);
                v93 -= 16;
                *((_OWORD *)v92 - 1) = v95;
                v92 -= 16;
              }
              while (v93 != (char *)v94);
              v93 = (char *)v165.i64[0];
            }
            v165.i64[0] = (uint64_t)v92;
            v165.i64[1] = v87;
            v166 = (unint64_t)&v91[16 * v90];
            if (v93)
              operator delete(v93);
          }
          else
          {
            *f32 = v75;
            v87 = (uint64_t)(f32 + 1);
            v28 = v164;
          }
          v165.i64[1] = v87;
          v167[0] = &v165;
          v65 = *((_DWORD *)sub_1DCB03A88(a16, (__int128 **)&v165, (uint64_t)&unk_1DCC58300, (uint64_t *)v167) + 10) + 1;
          v64 = 1;
        }
        else
        {
          v64 = 0;
          v65 = -1;
          v28 = v164;
        }
        if (v165.i64[0])
        {
          v165.i64[1] = v165.i64[0];
          operator delete((void *)v165.i64[0]);
        }
        if ((v64 & 1) == 0)
          goto LABEL_115;
      }
      else
      {
        v66 = objc_msgSend_stride(v23, (const char *)v26, v27);
        v71 = objc_msgSend_dataStart(v23, v67, v68);
        if (*(_DWORD *)(*a1 + 4 * v45) >= (int)v162)
          v72 = v162 - 1;
        else
          v72 = *(_DWORD *)(*a1 + 4 * v45);
        v73 = objc_msgSend_bufferSize(v23, v69, v70, v145);
        v74 = v66 * (v72 & ~(v72 >> 31));
        if (v74 + 12 > v73)
          goto LABEL_115;
        v165 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(a13, a10, *(float *)(v71 + v74)), a11, *(float *)(v71 + v74 + 4)), a12, *(float *)(v71 + v74 + 8));
        v167[0] = &v165;
        v65 = sub_1DCAFBAFC(a8, &v165, (uint64_t)&unk_1DCC58300, v167)[2].i32[0] + 1;
      }
      if (!a2[8])
      {
        v107 = -1;
        goto LABEL_83;
      }
      v96 = objc_msgSend_dataStart(v159, (const char *)v26, v27);
      v101 = objc_msgSend_stride(v159, v97, v98);
      if (*(_DWORD *)(*a1 + 4 * v45) >= (int)v158)
        v102 = v158 - 1;
      else
        v102 = *(_DWORD *)(*a1 + 4 * v45);
      v103 = objc_msgSend_bufferSize(v159, v99, v100);
      v105 = v101 * (v102 & ~(v102 >> 31));
      if (v105 + 12 <= v103)
      {
        v106 = v96 + v105;
        *(uint64_t *)((char *)v165.i64 + 4) = 0;
        v165.i32[0] = 0;
        v104.i64[0] = *(_QWORD *)v106;
        v104.i32[2] = *(_DWORD *)(v106 + 8);
        v165 = v104;
        v167[0] = &v165;
        v107 = sub_1DCB03E1C(a15, &v165, (uint64_t)&unk_1DCC58300, v167)[2].i32[0] + 1;
LABEL_83:
        if (a2[10])
        {
          v108 = objc_msgSend_dataStart(v153, (const char *)v26, v27);
          v113 = objc_msgSend_stride(v153, v109, v110);
          if (*(_DWORD *)(*a1 + 4 * v45) >= (int)v149)
            v114 = v149 - 1;
          else
            v114 = *(_DWORD *)(*a1 + 4 * v45);
          v165 = 0uLL;
          v115 = objc_msgSend_bufferSize(v153, v111, v112);
          v118 = v113 * (v114 & ~(v114 >> 31));
          if (v118 + 8 <= v115)
          {
            v119 = (__int32 *)(v108 + v118);
            v120.i64[1] = v165.i64[1];
            v165.i32[0] = *v119;
            v120.i32[0] = v165.i32[0];
            v120.i32[1] = v119[1];
            v165 = v120;
          }
          if (a2[11])
          {
            v121 = objc_msgSend_dataStart(v160, v116, v117);
            v126 = objc_msgSend_stride(v160, v122, v123);
            v127 = *(_DWORD *)(*a1 + 4 * v45) >= (int)v147 ? v147 - 1 : *(_DWORD *)(*a1 + 4 * v45);
            v128 = objc_msgSend_bufferSize(v160, v124, v125);
            v129 = v126 * (v127 & ~(v127 >> 31));
            if (v129 + 8 <= v128)
            {
              v130.i64[0] = v165.i64[0];
              v131 = *(_QWORD *)(v121 + v129);
              v130.i64[1] = v131;
              v165 = v130;
            }
          }
          v167[0] = &v165;
          v132 = sub_1DCB0407C(a14, &v165, (uint64_t)&unk_1DCC58300, v167)[2].i32[0] + 1;
        }
        else
        {
          v132 = -1;
        }
        v61.i64[0] = __PAIR64__(v132, v65);
        v61.i32[2] = v107;
        v134 = v163[1];
        v133 = (unint64_t)v163[2];
        if ((unint64_t)v134 >= v133)
        {
          v152 = v61;
          v136 = (v134 - *v163) >> 4;
          v28 = v164;
          if ((unint64_t)(v136 + 1) >> 60)
            sub_1DCAE4C44();
          v137 = v133 - (_QWORD)*v163;
          v138 = v137 >> 3;
          if (v137 >> 3 <= (unint64_t)(v136 + 1))
            v138 = v136 + 1;
          if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF0)
            v26 = 0xFFFFFFFFFFFFFFFLL;
          else
            v26 = v138;
          if (v26)
            v139 = (char *)sub_1DCAFBD5C(v146, v26);
          else
            v139 = 0;
          v140 = &v139[16 * v136];
          *(float32x4_t *)v140 = v152;
          v135 = v140 + 16;
          v142 = *v163;
          v141 = v163[1];
          if (v141 == *v163)
          {
            v144 = v163;
          }
          else
          {
            do
            {
              v143 = *((_OWORD *)v141 - 1);
              v141 -= 16;
              *((_OWORD *)v140 - 1) = v143;
              v140 -= 16;
            }
            while (v141 != v142);
            v144 = v163;
            v141 = *v163;
          }
          *v144 = v140;
          v144[1] = v135;
          v144[2] = &v139[16 * v26];
          if (v141)
            operator delete(v141);
        }
        else
        {
          *(float32x4_t *)v134 = v61;
          v135 = v134 + 16;
          v28 = v164;
        }
        v163[1] = v135;
      }
LABEL_115:
      ++v45;
    }
    while (v45 < (uint64_t)(a1[1] - *a1) >> 2);
  }

}

void sub_1DCAF8DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  void *v33;
  uint64_t v34;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;

  v36 = *(void **)(v34 - 128);
  if (v36)
  {
    *(_QWORD *)(v34 - 120) = v36;
    operator delete(v36);
  }
  v37 = *(void **)(v34 - 184);
  v38 = *(_QWORD *)(v34 - 144);
  v39 = *(void **)(v34 - 136);
  v40 = *(void **)v38;
  if (*(_QWORD *)v38)
  {
    *(_QWORD *)(v38 + 8) = v40;
    operator delete(v40);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DCAF8EE4(uint64_t result, char a2)
{
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 32) = a2;
  *(_QWORD *)result = &off_1EA5746A8;
  *(_QWORD *)(result + 8) = result + 16;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_1DCAF8F08(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1EA5746A8;
  sub_1DCB0546C(a1 + 40);
  *(_QWORD *)a1 = &off_1EA574198;
  sub_1DCAD5CA8(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_1DCAF8F50(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1EA5746A8;
  sub_1DCB0546C(a1 + 40);
  *(_QWORD *)a1 = &off_1EA574198;
  sub_1DCAD5CA8(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x1DF0D228CLL);
}

void sub_1DCAF8FA8(uint64_t a1@<X0>, void *a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  id v9;
  id v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  FILE *v17;
  FILE *v18;
  void *__ptr;
  void *v20;
  uint64_t v21;

  v9 = a2;
  v10 = a4;
  if (sub_1DCC1CD44(v9, v11, v12))
  {
    v17 = sub_1DCC1CEE8(v9, v13, v14);
    if (v17)
    {
      v18 = sub_1DCC1CE1C(v9, v15, v16);
      if (v18)
      {
        __ptr = 0;
        v20 = 0;
        v21 = 0;
        sub_1DCAE4B1C((unint64_t *)&__ptr, (size_t)&v17->_p + 1);
        fread(__ptr, 1uLL, (size_t)v17, v18);
        *((_BYTE *)&v17->_p + (_QWORD)__ptr) = 0;
        fclose(v18);
        sub_1DCAF910C(v9, (const std::string::value_type *)__ptr, (uint64_t)v17, v10, *a3, *(unsigned __int8 *)(a1 + 32), a5);
        if (__ptr)
        {
          v20 = __ptr;
          operator delete(__ptr);
        }
      }
      else
      {
        sub_1DCB0345C(a5, "Could not read OBJ file");
      }
    }
    else
    {
      sub_1DCB0345C(a5, "OBJ file has no contents");
    }
  }
  else
  {
    sub_1DCB0345C(a5, "Could not open OBJ file");
  }

}

void sub_1DCAF90D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1DCAF910C(void *a1@<X0>, const std::string::value_type *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, int a5@<W4>, int a6@<W5>, _QWORD *a7@<X8>)
{
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  unint64_t v16;
  _WORD *v17;
  BOOL v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type v25;
  unint64_t v26;
  char v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int data;
  int v34;
  int v35;
  _DWORD *v36;
  _DWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  void **v43;
  int v44;
  int v45;
  void **v46;
  int v47;
  const char *v48;
  const char *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  const char *v62;
  unint64_t v63;
  unsigned int v65;
  __int128 v66;
  int v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  int v71;
  _BYTE *v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  __int128 v81;
  uint64_t v82;
  int64_t v83;
  int64_t v84;
  char **v85;
  int64_t size;
  std::string *p_dst;
  char *v88;
  int64_t v89;
  std::string::size_type v90;
  void **v91;
  std::string *v92;
  std::string *p_str;
  std::string::size_type v94;
  std::string *v95;
  std::string::size_type v96;
  char v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::string::size_type v101;
  char *v102;
  int v103;
  std::string *v104;
  int64_t v105;
  char *v106;
  char *v107;
  char *v108;
  _DWORD *v109;
  _DWORD *v110;
  char *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  _QWORD *v115;
  int v116;
  int v117;
  char v118;
  const char *v119;
  uint64_t v120;
  uint64_t *v121;
  const char *v122;
  void *v123;
  void *v124;
  const char *v125;
  const char *v126;
  uint64_t v127;
  void *v128;
  id v129;
  const char *v130;
  uint64_t v131;
  FILE *v132;
  const char *v133;
  uint64_t v134;
  FILE *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  id v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t *v142;
  size_t v143;
  uint64_t v144;
  void *v145;
  unint64_t v146;
  unint64_t v147;
  unsigned __int16 *p_s1;
  int v149;
  int v150;
  char **v152;
  char *v153;
  const char *v154;
  char *v155;
  char *v156;
  id v157;
  id v158;
  size_t v159;
  size_t v160;
  const void *v161;
  const char *v162;
  void *v163;
  const char *v164;
  uint64_t v165;
  void *v166;
  const char *v167;
  MDLMaterialProperty *v168;
  const char *v169;
  uint64_t v170;
  unsigned __int8 *v172;
  MDLMaterial *v173;
  id v174;
  const char *v175;
  uint64_t v176;
  void *v177;
  void *v178;
  const char *v179;
  const char *v180;
  uint64_t v181;
  const char *v182;
  int v184;
  int v185;
  const char *v187;
  uint64_t v188;
  const char *v189;
  std::string::size_type v190;
  std::string *v191;
  int data_low;
  int v193;
  int v194;
  BOOL v195;
  int v196;
  std::string::size_type v199;
  int v200;
  BOOL v201;
  int v202;
  double v211;
  const char *v212;
  uint64_t v213;
  std::string::size_type i;
  std::string::size_type v215;
  std::string *v216;
  void *v217;
  const char *v218;
  void *v219;
  unsigned __int16 *v220;
  int v221;
  int v222;
  _BOOL4 v224;
  unsigned __int16 *v225;
  const char *v226;
  void *v227;
  const char *v228;
  const char *v229;
  void *v230;
  const char *v231;
  const char *v232;
  const char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t j;
  id v237;
  const char *v238;
  uint64_t v239;
  const char *v240;
  uint64_t v241;
  uint64_t k;
  void *v243;
  const char *v244;
  uint64_t v245;
  const char *v246;
  uint64_t v247;
  void *v248;
  BOOL v249;
  const char *v250;
  const char *v251;
  uint64_t v252;
  unint64_t m;
  _QWORD *v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int v259;
  void *v262;
  _QWORD *v263;
  id v264;
  id v265;
  uint64_t v266;
  uint64_t *v267;
  void *v268;
  void *v269;
  id v270;
  void *v271;
  void *v272;
  void *v273;
  id v274;
  uint64_t v275;
  void *v276;
  void *v277[2];
  uint64_t v278;
  int v279;
  std::string __str;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  uint64_t *v289;
  __int128 v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  const std::string::value_type *v294;
  void *v295[2];
  uint64_t v296;
  void *__s1;
  uint64_t v298;
  uint64_t v299;
  void *__p[2];
  _OWORD v301[2];
  __int128 v302;
  __int128 v303;
  void *v304[2];
  __int128 v305;
  _OWORD v306[10];
  const std::string::value_type *v307;
  std::string __dst;
  void *v309;
  unint64_t v310;
  uint64_t v311;
  std::string v312;
  void *v313[2];
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  void *v318[2];
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  uint64_t v330;

  v330 = *MEMORY[0x1E0C80C00];
  v265 = a1;
  v294 = a2;
  v270 = a4;
  if (!v270)
  {
    sub_1DCB0345C(a7, "cannot import to nil asset");
    goto LABEL_558;
  }
  v11 = 0;
  v12 = (unint64_t)&a2[a3];
  v288 = 0;
  v290 = 0u;
  v286 = 0u;
  v287 = 0u;
  v284 = 0u;
  v285 = 0u;
  v282 = 0u;
  v283 = 0u;
  v281 = 0u;
  v289 = (uint64_t *)&v290;
  v293 = 0;
  v275 = MEMORY[0x1E0DE4FB8] + 16;
  v291 = 0;
  v292 = 0;
  memset(&__str, 0, sizeof(__str));
  v272 = *(void **)(MEMORY[0x1E0DE4F58] + 24);
  v273 = (void *)*MEMORY[0x1E0DE4F58];
  v13 = a7;
  v263 = a7;
  do
  {
    v329 = 0u;
    v328 = 0u;
    v327 = 0u;
    v326 = 0u;
    v325 = 0u;
    v323 = 0u;
    v324 = 0u;
    v321 = 0u;
    v322 = 0u;
    v319 = 0u;
    v320 = 0u;
    v317 = 0u;
    *(_OWORD *)v318 = 0u;
    v315 = 0u;
    v316 = 0u;
    *(_OWORD *)v313 = 0u;
    v314 = 0u;
    sub_1DCAF206C(&v294, v12, (std::string *)__p);
    sub_1DCAF21D4(v313, (const std::string *)__p, 8);
    if (SBYTE7(v301[0]) < 0)
      operator delete(__p[0]);
    v310 = 0;
    v309 = 0;
    v311 = 0;
    sub_1DCAF22B8((uint64_t *)v313, (uint64_t)&v309);
    if ((SHIBYTE(v311) & 0x80000000) == 0)
    {
      v14 = v309;
      if (v309 == 35)
      {
        v15 = 3;
        goto LABEL_294;
      }
      v17 = &v309;
      v15 = 3;
      switch(HIBYTE(v311))
      {
        case 0:
          goto LABEL_292;
        case 1:
          if (v309 == 115)
            goto LABEL_292;
          if (v311 < 0)
            goto LABEL_26;
          if (HIBYTE(v311) != 1)
            goto LABEL_88;
          if (v309 != 103)
            goto LABEL_58;
          goto LABEL_28;
        case 2:
          break;
        case 6:
          if ((_DWORD)v309 == 1819047021 && WORD2(v309) == 25193)
            goto LABEL_43;
          if ((_DWORD)v309 == 1835365237 && WORD2(v309) == 27764)
            goto LABEL_81;
          if (v311 < 0)
            goto LABEL_76;
          if (HIBYTE(v311) != 2)
            goto LABEL_40;
          v17 = &v309;
          break;
        default:
          goto LABEL_88;
      }
LABEL_87:
      if (*v17 == 25462)
      {
        LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
        LODWORD(v312.__r_.__value_.__l.__data_) = 0;
        LODWORD(__s1) = 0;
        LODWORD(v295[0]) = 0;
        MEMORY[0x1DF0D20D0](v313, &__dst);
        MEMORY[0x1DF0D20D0](v313, &v312);
        MEMORY[0x1DF0D20D0](v313, &__s1);
        MEMORY[0x1DF0D20D0](v313, v295);
        __p[0] = (void *)__PAIR64__(v312.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__data_);
        __p[1] = (void *)__PAIR64__(v295[0], __s1);
        sub_1DCAFC224((void **)&v287, __p);
        goto LABEL_291;
      }
      goto LABEL_88;
    }
    v15 = 3;
    if (*(_BYTE *)v309 == 35)
      goto LABEL_292;
    v16 = v310;
    if (!v310)
      goto LABEL_292;
    if (v310 >= 0x801)
    {
      sub_1DCB0345C(v13, "lines in file too long to parse");
      v15 = 1;
      goto LABEL_292;
    }
    if (v310 == 1)
    {
      if (*(_BYTE *)v309 == 115)
        goto LABEL_292;
LABEL_26:
      v16 = v310;
      if (v310 != 1)
        goto LABEL_71;
      v19 = *(unsigned __int8 *)v309;
      if (v19 == 103)
      {
LABEL_28:
        *(_QWORD *)&v303 = 0;
        v302 = 0u;
        *(_OWORD *)__p = 0u;
        memset(v301, 0, sizeof(v301));
        DWORD2(v303) = -2;
        v20 = v292;
        if (v292 >= v293)
        {
          v22 = sub_1DCB00C70(&v291, (uint64_t)__p);
        }
        else
        {
          *(_QWORD *)(v292 + 8) = 0;
          *(_QWORD *)(v20 + 16) = 0;
          *(_QWORD *)v20 = 0;
          __p[1] = 0;
          *(_QWORD *)&v301[0] = 0;
          __p[0] = 0;
          v21 = *((_QWORD *)&v301[1] + 1);
          *(_OWORD *)(v20 + 24) = *(_OWORD *)((char *)v301 + 8);
          *(_QWORD *)(v20 + 40) = v21;
          *(_QWORD *)(v20 + 48) = 0;
          memset((char *)v301 + 8, 0, 24);
          *(_QWORD *)(v20 + 56) = 0;
          *(_QWORD *)(v20 + 64) = 0;
          *(_OWORD *)(v20 + 48) = v302;
          *(_QWORD *)(v20 + 64) = v303;
          v302 = 0uLL;
          *(_QWORD *)&v303 = 0;
          *(_DWORD *)(v20 + 72) = DWORD2(v303);
          v22 = v20 + 80;
        }
        v292 = v22;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v302;
        sub_1DCB01094((void ***)&__dst);
        if (SHIBYTE(v301[1]) < 0)
          operator delete(*((void **)&v301[0] + 1));
        if (SBYTE7(v301[0]) < 0)
          operator delete(__p[0]);
        goto LABEL_290;
      }
      if ((v311 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v311) != 1)
          goto LABEL_88;
        v14 = v309;
LABEL_58:
        if (v14 != 111)
        {
LABEL_40:
          if (HIBYTE(v311) == 1 && v14 == 118)
          {
LABEL_79:
            LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
            LODWORD(v312.__r_.__value_.__l.__data_) = 0;
            LODWORD(__s1) = 0;
            MEMORY[0x1DF0D20D0](v313, &__dst);
            MEMORY[0x1DF0D20D0](v313, &v312);
            MEMORY[0x1DF0D20D0](v313, &__s1);
            data = (int)__dst.__r_.__value_.__l.__data_;
            v34 = (int)v312.__r_.__value_.__l.__data_;
            v35 = (int)__s1;
            v36 = (_DWORD *)*((_QWORD *)&v281 + 1);
            if (*((_QWORD *)&v281 + 1) >= (unint64_t)v282)
            {
              v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v281 + 1) - v281) >> 2);
              v78 = v77 + 1;
              if (v77 + 1 > 0x1555555555555555)
                sub_1DCAE4C44();
              if (0x5555555555555556 * ((uint64_t)(v282 - v281) >> 2) > v78)
                v78 = 0x5555555555555556 * ((uint64_t)(v282 - v281) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v282 - v281) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v79 = 0x1555555555555555;
              else
                v79 = v78;
              if (v79)
                v80 = (char *)sub_1DCB011C0((uint64_t)&v282, v79);
              else
                v80 = 0;
              v108 = &v80[12 * v77];
              *(_DWORD *)v108 = data;
              *((_DWORD *)v108 + 1) = v34;
              *((_DWORD *)v108 + 2) = v35;
              v109 = (_DWORD *)*((_QWORD *)&v281 + 1);
              v110 = (_DWORD *)v281;
              v111 = v108;
              if (*((_QWORD *)&v281 + 1) != (_QWORD)v281)
              {
                do
                {
                  v112 = *(_QWORD *)(v109 - 3);
                  v109 -= 3;
                  v113 = v109[2];
                  *(_QWORD *)(v111 - 12) = v112;
                  v111 -= 12;
                  *((_DWORD *)v111 + 2) = v113;
                }
                while (v109 != v110);
                v109 = (_DWORD *)v281;
              }
              v37 = v108 + 12;
              *(_QWORD *)&v281 = v111;
              *((_QWORD *)&v281 + 1) = v108 + 12;
              *(_QWORD *)&v282 = &v80[12 * v79];
              if (v109)
                operator delete(v109);
            }
            else
            {
              **((_DWORD **)&v281 + 1) = __dst.__r_.__value_.__l.__data_;
              v36[1] = v34;
              v37 = v36 + 3;
              v36[2] = v35;
            }
            *((_QWORD *)&v281 + 1) = v37;
            if ((*((_BYTE *)&v315 + *((_QWORD *)v313[0] - 3)) & 2) == 0)
            {
              v114 = v11;
              v115 = v13;
              LODWORD(v295[0]) = 0;
              LODWORD(v277[0]) = 0;
              LODWORD(v307) = 0;
              MEMORY[0x1DF0D20D0](v313, v295);
              v116 = *(_DWORD *)((char *)&v315 + *((_QWORD *)v313[0] - 3));
              MEMORY[0x1DF0D20D0](v313, v277);
              v117 = *(_DWORD *)((char *)&v315 + *((_QWORD *)v313[0] - 3));
              MEMORY[0x1DF0D20D0](v313, &v307);
              v279 = 1065353216;
              if ((*((_BYTE *)&v315 + *((_QWORD *)v313[0] - 3)) & 2) == 0)
                MEMORY[0x1DF0D20D0](v313, &v279);
              v118 = v117 | v116;
              v13 = v115;
              v11 = v114;
              if ((v118 & 2) == 0
                && -1 - 0x5555555555555555 * ((uint64_t)(*((_QWORD *)&v281 + 1) - v281) >> 2) == (uint64_t)(*((_QWORD *)&v287 + 1) - v287) >> 4)
              {
                __p[0] = (void *)__PAIR64__(v277[0], v295[0]);
                __p[1] = (void *)__PAIR64__(v279, v307);
                sub_1DCAFC224((void **)&v287, __p);
              }
            }
            goto LABEL_291;
          }
          goto LABEL_88;
        }
LABEL_68:
        *(_QWORD *)&v303 = 0;
        v302 = 0u;
        *(_OWORD *)__p = 0u;
        memset(v301, 0, sizeof(v301));
        DWORD2(v303) = -2;
        v29 = v292;
        if (v292 >= v293)
        {
          v31 = sub_1DCB00C70(&v291, (uint64_t)__p);
        }
        else
        {
          *(_QWORD *)(v292 + 8) = 0;
          *(_QWORD *)(v29 + 16) = 0;
          *(_QWORD *)v29 = 0;
          __p[1] = 0;
          *(_QWORD *)&v301[0] = 0;
          __p[0] = 0;
          v30 = *((_QWORD *)&v301[1] + 1);
          *(_OWORD *)(v29 + 24) = *(_OWORD *)((char *)v301 + 8);
          *(_QWORD *)(v29 + 40) = v30;
          *(_QWORD *)(v29 + 48) = 0;
          memset((char *)v301 + 8, 0, 24);
          *(_QWORD *)(v29 + 56) = 0;
          *(_QWORD *)(v29 + 64) = 0;
          *(_OWORD *)(v29 + 48) = v302;
          *(_QWORD *)(v29 + 64) = v303;
          v302 = 0uLL;
          *(_QWORD *)&v303 = 0;
          *(_DWORD *)(v29 + 72) = DWORD2(v303);
          v31 = v29 + 80;
        }
        v292 = v31;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v302;
        sub_1DCB01094((void ***)&__dst);
        if (SHIBYTE(v301[1]) < 0)
          operator delete(*((void **)&v301[0] + 1));
        if (SBYTE7(v301[0]) < 0)
          operator delete(__p[0]);
LABEL_290:
        sub_1DCAF22B8((uint64_t *)v313, v292 - 80);
        std::string::operator=((std::string *)(v292 - 56), &__str);
        goto LABEL_291;
      }
      if (v19 == 111)
        goto LABEL_68;
      v16 = v310;
    }
    else if (v310 == 6)
    {
      v18 = *(_DWORD *)v309 == 1819047021 && *((_WORD *)v309 + 2) == 25193;
      if (v18)
      {
LABEL_43:
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)&v301[0] = 0;
        std::stringbuf::str();
        v25 = std::string::find((const std::string *)__p, 35, 0);
        if (v25 != -1)
        {
          std::string::basic_string(&__dst, (const std::string *)__p, 0, v25, (std::allocator<char> *)&v312);
          if (SBYTE7(v301[0]) < 0)
            operator delete(__p[0]);
          *(_OWORD *)__p = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
          *(_QWORD *)&v301[0] = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
        }
        v26 = BYTE7(v301[0]);
        v27 = BYTE7(v301[0]);
        if (SBYTE7(v301[0]) < 0)
          v26 = (unint64_t)__p[1];
        if (v26 >= 8)
        {
          std::string::basic_string(&__dst, (const std::string *)__p, 7uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v312);
          if (SBYTE7(v301[0]) < 0)
            operator delete(__p[0]);
          *(_OWORD *)__p = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
          *(_QWORD *)&v301[0] = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
          sub_1DCAFB818((std::string *)__p);
          sub_1DCB00A8C(&v289, (const void **)__p, (uint64_t)__p);
          v27 = BYTE7(v301[0]);
        }
        if ((v27 & 0x80) == 0)
          goto LABEL_291;
        v28 = __p[0];
        goto LABEL_261;
      }
    }
LABEL_71:
    if (v16 != 6)
      goto LABEL_77;
    if (*(_DWORD *)v309 == 1835365237 && *((_WORD *)v309 + 2) == 27764)
    {
LABEL_81:
      sub_1DCAF22B8((uint64_t *)v313, (uint64_t)&__str);
      v38 = v292;
      if (v292 == v291)
      {
        *(_QWORD *)&v303 = 0;
        v302 = 0u;
        *(_OWORD *)__p = 0u;
        memset(v301, 0, sizeof(v301));
        DWORD2(v303) = -2;
        if (v292 >= v293)
        {
          v40 = sub_1DCB00C70(&v291, (uint64_t)__p);
        }
        else
        {
          *(_QWORD *)(v292 + 8) = 0;
          *(_QWORD *)(v38 + 16) = 0;
          *(_QWORD *)v38 = 0;
          __p[1] = 0;
          *(_QWORD *)&v301[0] = 0;
          __p[0] = 0;
          v39 = *((_QWORD *)&v301[1] + 1);
          *(_OWORD *)(v38 + 24) = *(_OWORD *)((char *)v301 + 8);
          *(_QWORD *)(v38 + 40) = v39;
          *(_QWORD *)(v38 + 48) = 0;
          memset((char *)v301 + 8, 0, 24);
          *(_QWORD *)(v38 + 56) = 0;
          *(_QWORD *)(v38 + 64) = 0;
          *(_OWORD *)(v38 + 48) = v302;
          *(_QWORD *)(v38 + 64) = v303;
          v302 = 0uLL;
          *(_QWORD *)&v303 = 0;
          *(_DWORD *)(v38 + 72) = DWORD2(v303);
          v40 = v38 + 80;
        }
        v292 = v40;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v302;
        sub_1DCB01094((void ***)&__dst);
        if (SHIBYTE(v301[1]) < 0)
          operator delete(*((void **)&v301[0] + 1));
        if (SBYTE7(v301[0]) < 0)
          operator delete(__p[0]);
        MEMORY[0x1DF0D201C](v292 - 80, "MDL_OBJ");
        v38 = v292;
      }
      memset(&__dst, 0, sizeof(__dst));
      if (*(char *)(v38 - 57) < 0)
      {
        sub_1DCACA658(&__dst, *(void **)(v38 - 80), *(_QWORD *)(v38 - 72));
        v38 = v292;
      }
      else
      {
        v81 = *(_OWORD *)(v38 - 80);
        __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v38 - 64);
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v81;
      }
      v82 = v11;
      v83 = *(unsigned __int8 *)(v38 - 33);
      if (*(char *)(v38 - 33) < 0)
      {
        v84 = *(_QWORD *)(v38 - 48);
        if (!v84)
          goto LABEL_228;
LABEL_215:
        v85 = (char **)(v38 - 56);
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_dst = &__dst;
        else
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((v83 & 0x80u) == 0)
          v88 = (char *)v85;
        else
          v88 = *v85;
        if ((v83 & 0x80u) == 0)
          v89 = v83;
        else
          v89 = v84;
        if (v89)
        {
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = __dst.__r_.__value_.__l.__size_;
          if (size < v89)
            goto LABEL_228;
          v102 = (char *)p_dst + size;
          v103 = *v88;
          v104 = p_dst;
          while (1)
          {
            v105 = size - v89;
            if (v105 == -1)
              goto LABEL_228;
            v106 = (char *)memchr(v104, v103, v105 + 1);
            if (!v106)
              goto LABEL_228;
            v107 = v106;
            if (!memcmp(v106, v88, v89))
              break;
            v104 = (std::string *)(v107 + 1);
            size = v102 - (v107 + 1);
            if (size < v89)
              goto LABEL_228;
          }
          if (v107 == v102)
            goto LABEL_228;
          v101 = v107 - (char *)p_dst;
          if (v107 - (char *)p_dst == -1)
            goto LABEL_228;
        }
        else
        {
          v101 = 0;
        }
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)&v301[0] = 0;
        std::string::basic_string((std::string *)__p, &__dst, 0, v101, (std::allocator<char> *)&v312);
        sub_1DCAFC038((const void **)__p, (const void **)&__str.__r_.__value_.__l.__data_, &v312);
        v11 = v82;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        __dst = v312;
        v13 = v263;
        if (SBYTE7(v301[0]) < 0)
          operator delete(__p[0]);
      }
      else
      {
        if (*(_BYTE *)(v38 - 33))
        {
          v84 = *(_QWORD *)(v38 - 48);
          goto LABEL_215;
        }
LABEL_228:
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v90 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v90 = __dst.__r_.__value_.__l.__size_;
        __p[1] = 0;
        *(_QWORD *)&v301[0] = 0;
        __p[0] = 0;
        sub_1DCB01128((uint64_t)__p, v90 + 1);
        if ((SBYTE7(v301[0]) & 0x80u) == 0)
          v91 = __p;
        else
          v91 = (void **)__p[0];
        if (v90)
        {
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v92 = &__dst;
          else
            v92 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          memmove(v91, v92, v90);
        }
        *(_WORD *)((char *)v91 + v90) = 95;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v94 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v94 = __str.__r_.__value_.__l.__size_;
        v95 = std::string::append((std::string *)__p, (const std::string::value_type *)p_str, v94);
        v96 = v95->__r_.__value_.__r.__words[0];
        v312.__r_.__value_.__r.__words[0] = v95->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v312.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v95->__r_.__value_.__r.__words[1] + 7);
        v97 = HIBYTE(v95->__r_.__value_.__r.__words[2]);
        v95->__r_.__value_.__l.__size_ = 0;
        v95->__r_.__value_.__r.__words[2] = 0;
        v95->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        __dst.__r_.__value_.__r.__words[0] = v96;
        __dst.__r_.__value_.__l.__size_ = v312.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v312.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v97;
        if (SBYTE7(v301[0]) < 0)
          operator delete(__p[0]);
        v13 = v263;
        v11 = v82;
      }
      v98 = v292;
      if (*(_QWORD *)(v292 - 24) != *(_QWORD *)(v292 - 32))
      {
        *(_QWORD *)&v303 = 0;
        v302 = 0u;
        *(_OWORD *)__p = 0u;
        memset(v301, 0, sizeof(v301));
        DWORD2(v303) = -2;
        if (v292 >= v293)
        {
          v100 = sub_1DCB00C70(&v291, (uint64_t)__p);
        }
        else
        {
          *(_QWORD *)(v292 + 8) = 0;
          *(_QWORD *)(v98 + 16) = 0;
          *(_QWORD *)v98 = 0;
          __p[1] = 0;
          *(_QWORD *)&v301[0] = 0;
          __p[0] = 0;
          v99 = *((_QWORD *)&v301[1] + 1);
          *(_OWORD *)(v98 + 24) = *(_OWORD *)((char *)v301 + 8);
          *(_QWORD *)(v98 + 40) = v99;
          *(_QWORD *)(v98 + 48) = 0;
          memset((char *)v301 + 8, 0, 24);
          *(_QWORD *)(v98 + 56) = 0;
          *(_QWORD *)(v98 + 64) = 0;
          *(_OWORD *)(v98 + 48) = v302;
          *(_QWORD *)(v98 + 64) = v303;
          v302 = 0uLL;
          *(_QWORD *)&v303 = 0;
          *(_DWORD *)(v98 + 72) = DWORD2(v303);
          v100 = v98 + 80;
        }
        v292 = v100;
        v312.__r_.__value_.__r.__words[0] = (std::string::size_type)&v302;
        sub_1DCB01094((void ***)&v312);
        if (SHIBYTE(v301[1]) < 0)
          operator delete(*((void **)&v301[0] + 1));
        if (SBYTE7(v301[0]) < 0)
          operator delete(__p[0]);
        v98 = v292;
      }
      std::string::operator=((std::string *)(v98 - 80), &__dst);
      std::string::operator=((std::string *)(v292 - 56), &__str);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_291;
      v28 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_261:
      operator delete(v28);
      goto LABEL_291;
    }
LABEL_76:
    v16 = v310;
LABEL_77:
    if (v16 == 1)
    {
      if (*(_BYTE *)v309 == 118)
        goto LABEL_79;
      v16 = v310;
    }
    if (v16 == 2)
    {
      v17 = v309;
      goto LABEL_87;
    }
LABEL_88:
    if (sub_1DCAF24E8(&v309, "vt"))
    {
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      LODWORD(v312.__r_.__value_.__l.__data_) = 0;
      MEMORY[0x1DF0D20D0](v313, &__dst);
      MEMORY[0x1DF0D20D0](v313, &v312);
      __p[0] = (void *)__PAIR64__(v312.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__data_);
      sub_1DCAFC314((void **)&v282 + 1, __p);
      if ((*((_BYTE *)&v315 + *((_QWORD *)v313[0] - 3)) & 2) == 0)
      {
        MEMORY[0x1DF0D20D0](v313, &__dst);
        if ((*((_BYTE *)&v315 + *((_QWORD *)v313[0] - 3)) & 2) == 0)
        {
          MEMORY[0x1DF0D20D0](v313, &v312);
          __p[0] = (void *)__PAIR64__(v312.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__data_);
          sub_1DCAFC314((void **)&v284, __p);
        }
      }
      goto LABEL_291;
    }
    if (sub_1DCAF24E8(&v309, "vt2"))
    {
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      LODWORD(v312.__r_.__value_.__l.__data_) = 0;
      MEMORY[0x1DF0D20D0](v313, &__dst);
      MEMORY[0x1DF0D20D0](v313, &v312);
      __p[0] = (void *)__PAIR64__(v312.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__data_);
      sub_1DCAFC314((void **)&v284, __p);
      goto LABEL_291;
    }
    if (sub_1DCAF24E8(&v309, "vn"))
    {
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      LODWORD(v312.__r_.__value_.__l.__data_) = 0;
      LODWORD(__s1) = 0;
      MEMORY[0x1DF0D20D0](v313, &__dst);
      MEMORY[0x1DF0D20D0](v313, &v312);
      MEMORY[0x1DF0D20D0](v313, &__s1);
      __p[0] = (void *)__PAIR64__(v312.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__data_);
      LODWORD(__p[1]) = (_DWORD)__s1;
      sub_1DCAFC108((char **)&v285 + 1, (uint64_t *)__p);
      goto LABEL_291;
    }
    if (!sub_1DCAF24E8(&v309, "f"))
    {
      if (!sub_1DCAF24E8(&v309, "p") && !sub_1DCAF24E8(&v309, "l") && !sub_1DCAF24E8(&v309, "t"))
      {
        if (SHIBYTE(v311) < 0)
        {
          if (v310 <= 1)
          {
            v15 = 0;
            goto LABEL_293;
          }
          v72 = (char *)v309 + 1;
        }
        else
        {
          v72 = (char *)&v309 + 1;
          if (HIBYTE(v311) <= 1u)
          {
            v15 = 0;
            goto LABEL_294;
          }
        }
        v15 = 0;
        if (*v72 == 32)
          v11 = v11;
        else
          v11 = (v11 + 1);
        goto LABEL_292;
      }
LABEL_291:
      v15 = 0;
      goto LABEL_292;
    }
    v41 = v292;
    if (v292 == v291)
    {
      *(_QWORD *)&v303 = 0;
      v302 = 0u;
      *(_OWORD *)__p = 0u;
      memset(v301, 0, sizeof(v301));
      DWORD2(v303) = -2;
      sub_1DCAFBF4C(&v291, (uint64_t)__p);
      sub_1DCAFBFE0((uint64_t)__p);
      MEMORY[0x1DF0D201C](v292 - 80, "MDL_OBJ");
      v41 = v292;
    }
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v301[0] = 0;
    sub_1DCAFC3F4((uint64_t *)(v41 - 32), (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v259 = v11;
    while ((*((_BYTE *)&v315 + *((_QWORD *)v313[0] - 3)) & 2) == 0)
    {
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v301[0] = 0;
      sub_1DCAF22B8((uint64_t *)v313, (uint64_t)__p);
      if (SBYTE7(v301[0]) < 0)
      {
        v42 = (char *)__p[1];
        if (!__p[1])
          goto LABEL_178;
        v43 = (void **)__p[0];
LABEL_109:
        v44 = strtol((const char *)v43, 0, 10);
        v45 = *(unsigned __int8 *)v43;
        v46 = v43;
        if (v45 == 45)
        {
          v46 = (void **)((char *)v43 + 1);
          v45 = *((unsigned __int8 *)v43 + 1);
        }
        if ((v45 - 48) <= 9)
        {
          do
          {
            v47 = *((unsigned __int8 *)v46 + 1);
            v46 = (void **)((char *)v46 + 1);
            v45 = v47;
          }
          while ((v47 - 48) < 0xA);
        }
        v48 = &v42[(_QWORD)v43];
        if (&v42[(_QWORD)v43] <= (char *)v46)
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          v53 = -1;
          v54 = -1;
          v55 = -1;
          goto LABEL_148;
        }
        if (v45 == 47)
          v49 = (char *)v46 + 1;
        else
          v49 = (const char *)v46;
        if (v48 <= v49)
        {
          v50 = 0;
          goto LABEL_122;
        }
        if (*v49 == 47)
        {
          v50 = 0;
          ++v49;
LABEL_122:
          v54 = -1;
          goto LABEL_130;
        }
        v54 = strtol(v49, 0, 10);
        v56 = *(unsigned __int8 *)v49;
        if (v56 == 45)
        {
          v57 = *(unsigned __int8 *)++v49;
          v56 = v57;
        }
        if ((v56 - 48) <= 9)
        {
          do
          {
            v58 = *(unsigned __int8 *)++v49;
            v56 = v58;
          }
          while ((v58 - 48) < 0xA);
        }
        if (v56 == 47)
          ++v49;
        v50 = 1;
LABEL_130:
        if (v48 <= v49)
        {
          v51 = 0;
        }
        else
        {
          if (*v49 != 47)
          {
            v55 = strtol(v49, 0, 10);
            v59 = *(unsigned __int8 *)v49;
            if (v59 == 45)
            {
              v60 = *(unsigned __int8 *)++v49;
              v59 = v60;
            }
            if ((v59 - 48) <= 9)
            {
              do
              {
                v61 = *(unsigned __int8 *)++v49;
                v59 = v61;
              }
              while ((v61 - 48) < 0xA);
            }
            if (v59 == 47)
              ++v49;
            v51 = 1;
            goto LABEL_142;
          }
          v51 = 0;
          ++v49;
        }
        v55 = -1;
LABEL_142:
        if (v48 <= v49)
        {
          v52 = 0;
          v53 = -1;
        }
        else
        {
          if (*v49 == 47)
            v62 = v49 + 1;
          else
            v62 = v49;
          v53 = strtol(v62, 0, 10);
          v52 = 1;
        }
LABEL_148:
        v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v281 + 1) - v281) >> 2);
        if (*((_QWORD *)&v281 + 1) == (_QWORD)v281 || v44 > (int)v63)
          goto LABEL_177;
        v65 = v44 - 1;
        if (v44 < 1)
        {
          if ((v44 & 0x80000000) == 0
            || 0x5555555555555555 * ((uint64_t)(*((_QWORD *)&v281 + 1) - v281) >> 2) > (unint64_t)v44)
          {
            goto LABEL_177;
          }
          v65 = v63 + v44;
LABEL_155:
          *(_QWORD *)&v66 = v65 | 0xFFFFFFFF00000000;
          *((_QWORD *)&v66 + 1) = 0;
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = (unint64_t)v66;
          if (v50)
          {
            v67 = v54 - 1;
            if (v54 < 1)
            {
              if (v54 < 0 && v54 >= (unint64_t)-((uint64_t)(v283 - *((_QWORD *)&v282 + 1)) >> 3))
              {
                v67 = v54 + (((_QWORD)v283 - *((_QWORD *)&v282 + 1)) >> 3);
LABEL_158:
                DWORD1(v66) = v67;
                *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v66;
              }
            }
            else if (v54 <= (unint64_t)((uint64_t)(v283 - *((_QWORD *)&v282 + 1)) >> 3))
            {
              goto LABEL_158;
            }
          }
          LODWORD(__dst.__r_.__value_.__r.__words[1]) = -1;
          if (v51)
          {
            v68 = v55 - 1;
            if (v55 < 1)
            {
              if (v55 < 0)
              {
                v69 = (uint64_t)(v286 - *((_QWORD *)&v285 + 1)) >> 2;
                if (v55 >= (unint64_t)(0x5555555555555555 * v69))
                {
                  v68 = v55 - 1431655765 * v69;
LABEL_167:
                  DWORD2(v66) = v68;
                  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v66;
                }
              }
            }
            else if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v286 - *((_QWORD *)&v285 + 1)) >> 2) >= v55)
            {
              goto LABEL_167;
            }
          }
          v70 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
          HIDWORD(__dst.__r_.__value_.__r.__words[1]) = -1;
          if (v52)
          {
            v71 = v53 - 1;
            if (v53 < 1)
            {
              if (v53 < 0 && v53 >= (unint64_t)-((uint64_t)(*((_QWORD *)&v287 + 1) - v287) >> 4))
              {
                v71 = v53 + ((*((_QWORD *)&v287 + 1) - (_QWORD)v287) >> 4);
LABEL_173:
                HIDWORD(v70) = v71;
                *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v70;
              }
            }
            else if (v53 <= (unint64_t)((uint64_t)(*((_QWORD *)&v287 + 1) - v287) >> 4))
            {
              goto LABEL_173;
            }
          }
          sub_1DCAFC534((void **)(*(_QWORD *)(v292 - 24) - 24), &__dst);
          goto LABEL_177;
        }
        if (v63 >= v44)
          goto LABEL_155;
LABEL_177:
        if (SBYTE7(v301[0]) < 0)
LABEL_178:
          operator delete(__p[0]);
      }
      else
      {
        v42 = (char *)BYTE7(v301[0]);
        if (BYTE7(v301[0]))
        {
          v43 = __p;
          goto LABEL_109;
        }
      }
    }
    v73 = v292;
    v74 = *(_QWORD *)(v292 - 24);
    v76 = v74 - 24;
    v75 = *(void **)(v74 - 24);
    if (*(_QWORD *)(v74 - 16) - (_QWORD)v75 > 0x2FuLL)
    {
      v15 = 0;
    }
    else
    {
      if (v75)
      {
        *(_QWORD *)(v74 - 16) = v75;
        operator delete(v75);
      }
      v15 = 0;
      *(_QWORD *)(v73 - 24) = v76;
    }
    v13 = v263;
    v11 = v259;
LABEL_292:
    if (SHIBYTE(v311) < 0)
LABEL_293:
      operator delete(v309);
LABEL_294:
    v313[0] = v273;
    *(void **)((char *)v313 + *((_QWORD *)v273 - 3)) = v272;
    *(_QWORD *)&v314 = v275;
    if (SBYTE7(v319) < 0)
      operator delete(v318[0]);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1DF0D2238]((char *)&v320 + 8);
    if (v15 != 3 && v15)
      goto LABEL_555;
  }
  while (v12 > (unint64_t)v294 && (int)v11 < 200);
  if ((int)v11 >= 200)
  {
    sub_1DCB0345C(v13, "Too much unrecognized data in file, can't parse");
    goto LABEL_555;
  }
  if (v289 == (uint64_t *)&v290)
  {
    v139 = 0;
    goto LABEL_542;
  }
  v121 = v289;
  v269 = 0;
  v266 = MEMORY[0x1E0DE4FB8] + 16;
  while (2)
  {
    v277[0] = 0;
    v277[1] = 0;
    v278 = 0;
    if (*((char *)v121 + 55) < 0)
    {
      sub_1DCACA658(v277, (void *)v121[4], v121[5]);
    }
    else
    {
      *(_OWORD *)v277 = *((_OWORD *)v121 + 2);
      v278 = v121[6];
    }
    objc_msgSend_resolver(v270, v119, v120);
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    if (v278 >= 0)
      objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v122, (uint64_t)v277, 4);
    else
      objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v122, (uint64_t)v277[0], 4);
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    v267 = v121;
    objc_msgSend_resolveAssetNamed_(v123, v125, (uint64_t)v124);
    v268 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_resolver(v270, v126, v127);
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    v129 = v268;
    v274 = v128;
    v271 = v129;
    if (!v129)
      goto LABEL_326;
    v132 = sub_1DCC1CE1C(v129, v130, v131);
    v135 = v132;
    if (!v132)
    {
      objc_msgSend_absoluteString(v129, v133, v134);
      v138 = (void *)objc_claimAutoreleasedReturnValue();
      NSLog(CFSTR("Unable to find mtl file %@"), v138);

      goto LABEL_326;
    }
    fseek(v132, 0, 2);
    v136 = MEMORY[0x1DF0D24FC](v135);
    v137 = v136 + 1;
    if (v136 == -1)
    {
      fclose(v135);
LABEL_326:
      v139 = 0;
      goto LABEL_327;
    }
    v143 = v136;
    v144 = v266;
    v145 = malloc_type_malloc(v136 + 1, 0x2A8E8647uLL);
    fseek(v135, 0, 0);
    fread(v145, 1uLL, v143, v135);
    fclose(v135);
    *((_BYTE *)v145 + v143) = 0;
    v307 = (const std::string::value_type *)v145;
    v264 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v262 = v145;
    if (v143 > 0x7FFFFFFFFFFFFFFELL)
    {
      v276 = 0;
      goto LABEL_527;
    }
    v276 = 0;
    v146 = (unint64_t)v145 + v137;
    while (2)
    {
      memset(v306, 0, sizeof(v306));
      *(_OWORD *)v304 = 0u;
      v305 = 0u;
      v302 = 0u;
      v303 = 0u;
      memset(v301, 0, sizeof(v301));
      *(_OWORD *)__p = 0u;
      v147 = v146;
      sub_1DCAF206C(&v307, v146, (std::string *)v313);
      sub_1DCAF21D4(__p, (const std::string *)v313, 8);
      if (SBYTE7(v314) < 0)
        operator delete(v313[0]);
      __s1 = 0;
      v298 = 0;
      v299 = 0;
      sub_1DCAF22B8((uint64_t *)__p, (uint64_t)&__s1);
      if (SHIBYTE(v299) < 0)
      {
        p_s1 = (unsigned __int16 *)__s1;
        if (*(_BYTE *)__s1 == 35 || !v298)
          goto LABEL_377;
        if (v298 == 6)
        {
LABEL_348:
          v149 = *(_DWORD *)p_s1;
          v150 = p_s1[2];
          if (v149 == 1836541294 && v150 == 27764)
          {
            sub_1DCAF22B8((uint64_t *)__p, (uint64_t)&__s1);
            v173 = [MDLMaterial alloc];
            v174 = objc_alloc(MEMORY[0x1E0CB3940]);
            if (v299 >= 0)
              v176 = objc_msgSend_initWithCString_encoding_(v174, v175, (uint64_t)&__s1, 4);
            else
              v176 = objc_msgSend_initWithCString_encoding_(v174, v175, (uint64_t)__s1, 4);
            v177 = (void *)v176;
            v178 = (void *)objc_opt_new();
            v157 = (id)objc_msgSend_initWithName_scatteringFunction_(v173, v179, (uint64_t)v177, v178);

            objc_msgSend_conformToMatProperties(v157, v180, v181);
            v144 = v266;
            objc_msgSend_addObject_(v264, v182, (uint64_t)v157);
            goto LABEL_518;
          }
        }
      }
      else
      {
        if (__s1 == 35)
          goto LABEL_521;
        if (!HIBYTE(v299))
        {
LABEL_377:
          v157 = v276;
          goto LABEL_518;
        }
        if (HIBYTE(v299) == 6)
        {
          p_s1 = (unsigned __int16 *)&__s1;
          goto LABEL_348;
        }
      }
      if (!v276)
      {
        v157 = 0;
        goto LABEL_518;
      }
      v295[0] = 0;
      v295[1] = 0;
      v296 = 0;
      sub_1DCB0345C(v295, "@TODO");
      v152 = &off_1EA576AB0;
      while (2)
      {
        v154 = *v152;
        v153 = v152[1];
        v155 = v152[2];
        v156 = v152[3];
        v157 = v276;
        v158 = v274;
        v159 = strlen(v154);
        v160 = v159;
        if (SHIBYTE(v299) < 0)
        {
          if (v159 == v298)
          {
            if (v159 == -1)
LABEL_559:
              sub_1DCB0350C();
            v161 = __s1;
            goto LABEL_361;
          }
        }
        else if (v159 == HIBYTE(v299))
        {
          if (v159 == -1)
            goto LABEL_559;
          v161 = &__s1;
LABEL_361:
          if (!memcmp(v161, v154, v160))
          {
            objc_msgSend_propertyNamed_(v157, v162, (uint64_t)v156);
            v163 = (void *)objc_claimAutoreleasedReturnValue();
            v166 = v163;
            if (!v163 || (char *)objc_msgSend_semantic(v163, v164, v165) != v153)
            {
              v168 = [MDLMaterialProperty alloc];
              v170 = objc_msgSend_initWithName_semantic_(v168, v169, (uint64_t)v156, v153);

              v166 = (void *)v170;
            }
            if (v155 == (char *)7)
            {
              LODWORD(v313[0]) = 0;
              LODWORD(v309) = 0;
              LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
              if ((*((_BYTE *)&v301[1] + *((_QWORD *)__p[0] - 3)) & 2) == 0)
              {
                MEMORY[0x1DF0D20D0](__p, v313);
                if ((*((_BYTE *)&v301[1] + *((_QWORD *)__p[0] - 3)) & 2) == 0)
                {
                  MEMORY[0x1DF0D20D0](__p, &v309);
                  MEMORY[0x1DF0D20D0](__p, &__dst);
                  objc_msgSend_setFloat3Value_(v166, v187, v188, COERCE_DOUBLE(__PAIR64__(v309, v313[0])));
                }
              }
              goto LABEL_515;
            }
            if (v155 == (char *)5)
            {
              if ((*((_BYTE *)&v301[1] + *((_QWORD *)__p[0] - 3)) & 2) == 0)
              {
                LODWORD(v313[0]) = 0;
                MEMORY[0x1DF0D20D0](__p, v313);
                LODWORD(v211) = v313[0];
                objc_msgSend_setFloatValue_(v166, v212, v213, v211);
              }
              goto LABEL_515;
            }
            if (v155 == (char *)1)
            {
              memset(&__dst, 0, sizeof(__dst));
              sub_1DCAF22B8((uint64_t *)__p, (uint64_t)&__dst);
              while (1)
              {
                v190 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  break;
                v191 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                if (*__dst.__r_.__value_.__l.__data_ != 45)
                  goto LABEL_472;
                switch(__dst.__r_.__value_.__l.__size_)
                {
                  case 2uLL:
                    if (*(_WORD *)__dst.__r_.__value_.__l.__data_ == 28461
                      || *(_WORD *)__dst.__r_.__value_.__l.__data_ == 29485)
                    {
                      goto LABEL_410;
                    }
                    data_low = *(unsigned __int16 *)__dst.__r_.__value_.__l.__data_;
LABEL_409:
                    if (data_low == 29741)
                    {
LABEL_410:
                      sub_1DCAF22B8((uint64_t *)__p, (uint64_t)&__dst);
                      goto LABEL_411;
                    }
                    goto LABEL_469;
                  case 3uLL:
                    if (*(_WORD *)__dst.__r_.__value_.__l.__data_ == 25133
                      && *(_BYTE *)(__dst.__r_.__value_.__r.__words[0] + 2) == 109)
                    {
                      goto LABEL_468;
                    }
                    if (*(_WORD *)__dst.__r_.__value_.__l.__data_ == 27949
                      && *(_BYTE *)(__dst.__r_.__value_.__r.__words[0] + 2) == 109)
                    {
LABEL_411:
                      sub_1DCAF22B8((uint64_t *)__p, (uint64_t)&__dst);
                      goto LABEL_468;
                    }
                    goto LABEL_469;
                  case 5uLL:
LABEL_412:
                    v193 = (int)v191->__r_.__value_.__l.__data_;
                    v194 = v191->__r_.__value_.__s.__data_[4];
                    v195 = v193 == 1887007789;
                    v196 = 101;
                    goto LABEL_463;
                  case 6uLL:
                    v194 = *(unsigned __int16 *)(__dst.__r_.__value_.__r.__words[0] + 4);
                    v195 = *(_DWORD *)__dst.__r_.__value_.__l.__data_ == 1634493229;
                    v196 = 28781;
                    goto LABEL_463;
                  case 7uLL:
                    if (*(_DWORD *)__dst.__r_.__value_.__l.__data_ == 1701601837
                      && *(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 3) == 1969516133)
                    {
                      goto LABEL_468;
                    }
                    if (*(_DWORD *)__dst.__r_.__value_.__l.__data_ == 1701601837
                      && *(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 3) == 1986293349)
                    {
                      goto LABEL_468;
                    }
                    v194 = *(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 3);
                    v195 = *(_DWORD *)__dst.__r_.__value_.__l.__data_ == 2019914797;
                    v196 = 1936028280;
LABEL_463:
                    if (v195 && v194 == v196)
LABEL_468:
                      sub_1DCAF22B8((uint64_t *)__p, (uint64_t)&__dst);
LABEL_469:
                    sub_1DCAF22B8((uint64_t *)__p, (uint64_t)&__dst);
                    break;
                  case 8uLL:
                    v199 = *(_QWORD *)__dst.__r_.__value_.__l.__data_;
LABEL_441:
                    if (v199 == 0x6E616863666D692DLL)
                      goto LABEL_468;
                    goto LABEL_469;
                  default:
                    goto LABEL_469;
                }
              }
              if (__dst.__r_.__value_.__s.__data_[0] == 45)
              {
                v191 = &__dst;
                switch(*((_BYTE *)&__dst.__r_.__value_.__s + 23))
                {
                  case 2:
                    if (LOWORD(__dst.__r_.__value_.__l.__data_) == 28461
                      || LOWORD(__dst.__r_.__value_.__l.__data_) == 29485)
                    {
                      goto LABEL_410;
                    }
                    data_low = LOWORD(__dst.__r_.__value_.__l.__data_);
                    goto LABEL_409;
                  case 3:
                    if (LOWORD(__dst.__r_.__value_.__l.__data_) == 25133 && __dst.__r_.__value_.__s.__data_[2] == 109)
                      goto LABEL_468;
                    if (LOWORD(__dst.__r_.__value_.__l.__data_) != 27949 || __dst.__r_.__value_.__s.__data_[2] != 109)
                      goto LABEL_469;
                    goto LABEL_411;
                  case 5:
                    goto LABEL_412;
                  case 6:
                    v200 = WORD2(__dst.__r_.__value_.__r.__words[0]);
                    v201 = LODWORD(__dst.__r_.__value_.__l.__data_) == 1634493229;
                    v202 = 28781;
                    goto LABEL_434;
                  case 7:
                    if (LODWORD(__dst.__r_.__value_.__l.__data_) == 1701601837
                      && *(_DWORD *)((char *)__dst.__r_.__value_.__r.__words + 3) == 1969516133)
                    {
                      goto LABEL_468;
                    }
                    if (LODWORD(__dst.__r_.__value_.__l.__data_) == 1701601837
                      && *(_DWORD *)((char *)__dst.__r_.__value_.__r.__words + 3) == 1986293349)
                    {
                      goto LABEL_468;
                    }
                    v200 = *(_DWORD *)((char *)__dst.__r_.__value_.__r.__words + 3);
                    v201 = LODWORD(__dst.__r_.__value_.__l.__data_) == 2019914797;
                    v202 = 1936028280;
LABEL_434:
                    if (!v201 || v200 != v202)
                      goto LABEL_469;
                    goto LABEL_468;
                  case 8:
                    v199 = __dst.__r_.__value_.__r.__words[0];
                    goto LABEL_441;
                  default:
                    goto LABEL_469;
                }
              }
LABEL_472:
              for (i = 0; ; ++i)
              {
                v215 = __dst.__r_.__value_.__l.__size_;
                if ((v190 & 0x80u) == 0)
                  v215 = v190;
                if (i >= v215)
                  break;
                v216 = &__dst;
                if ((v190 & 0x80u) != 0)
                  v216 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                if (v216->__r_.__value_.__s.__data_[i] == 92)
                {
                  v216->__r_.__value_.__s.__data_[i] = 47;
                  v190 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                }
              }
              if ((v190 & 0x80u) == 0)
                objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v189, (uint64_t)&__dst, 4);
              else
                objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v189, (uint64_t)__dst.__r_.__value_.__l.__data_, 4);
              v217 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setStringValue_(v166, v218, (uint64_t)v217);
              v219 = (void *)objc_opt_new();
              std::stringbuf::str();
              v329 = 0u;
              v328 = 0u;
              v327 = 0u;
              v326 = 0u;
              v325 = 0u;
              v323 = 0u;
              v324 = 0u;
              v321 = 0u;
              v322 = 0u;
              v319 = 0u;
              v320 = 0u;
              v317 = 0u;
              *(_OWORD *)v318 = 0u;
              v315 = 0u;
              v316 = 0u;
              *(_OWORD *)v313 = 0u;
              v314 = 0u;
              sub_1DCAF21D4(v313, &v312, 8);
              v310 = 0;
              v309 = 0;
              v311 = 0;
              sub_1DCAF22B8((uint64_t *)v313, (uint64_t)&v309);
              sub_1DCAF22B8((uint64_t *)v313, (uint64_t)&v309);
              while (2)
              {
                if ((*((_BYTE *)&v315 + *((_QWORD *)v313[0] - 3)) & 2) != 0)
                {
                  v224 = 0;
                  if ((v311 & 0x8000000000000000) == 0)
                    goto LABEL_506;
                  goto LABEL_497;
                }
                if (v311 < 0)
                {
                  if (v310 == 6)
                  {
                    v220 = (unsigned __int16 *)v309;
                    goto LABEL_491;
                  }
                }
                else if (HIBYTE(v311) == 6)
                {
                  v220 = (unsigned __int16 *)&v309;
LABEL_491:
                  v221 = *(_DWORD *)v220;
                  v222 = v220[2];
                  if (v221 == 1634493229 && v222 == 28781)
                  {
                    sub_1DCAF22B8((uint64_t *)v313, (uint64_t)&v309);
                    if ((SHIBYTE(v311) & 0x80000000) == 0)
                    {
                      if (HIBYTE(v311) == 2)
                      {
                        v225 = (unsigned __int16 *)&v309;
                        goto LABEL_503;
                      }
                      v224 = 0;
LABEL_506:
                      v313[0] = v273;
                      *(void **)((char *)v313 + *((_QWORD *)v273 - 3)) = v272;
                      *(_QWORD *)&v314 = MEMORY[0x1E0DE4FB8] + 16;
                      if (SBYTE7(v319) < 0)
                        operator delete(v318[0]);
                      std::streambuf::~streambuf();
                      std::istream::~istream();
                      MEMORY[0x1DF0D2238]((char *)&v320 + 8);
                      if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v312.__r_.__value_.__l.__data_);
                        if (!v224)
                          goto LABEL_512;
LABEL_510:
                        v227 = v219;
                        objc_msgSend_setSWrapMode_(v219, v226, 0);
                        objc_msgSend_setTWrapMode_(v219, v228, 0);
                      }
                      else
                      {
                        if (v224)
                          goto LABEL_510;
LABEL_512:
                        v227 = v219;
                        objc_msgSend_setSWrapMode_(v219, v226, 1);
                        objc_msgSend_setTWrapMode_(v219, v229, 1);
                      }
                      v230 = (void *)objc_opt_new();
                      objc_msgSend_setHardwareFilter_(v230, v231, (uint64_t)v227);
                      objc_msgSend_setTextureSamplerValue_(v166, v232, (uint64_t)v230);

                      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_515:
                      objc_msgSend_setProperty_(v157, v167, (uint64_t)v166);

                      v144 = v266;
                      goto LABEL_516;
                    }
                    v225 = (unsigned __int16 *)v309;
                    if (v310 == 2)
                    {
LABEL_503:
                      v224 = *v225 == 28271;
                      if ((v311 & 0x8000000000000000) == 0)
                        goto LABEL_506;
LABEL_497:
                      v225 = (unsigned __int16 *)v309;
                    }
                    else
                    {
                      v224 = 0;
                    }
                    operator delete(v225);
                    goto LABEL_506;
                  }
                }
                sub_1DCAF22B8((uint64_t *)v313, (uint64_t)&v309);
                continue;
              }
            }

          }
        }

        v152 += 4;
        if (v152 != (char **)&unk_1EA5770B0)
          continue;
        break;
      }
      if (SHIBYTE(v299) < 0)
      {
        v144 = v266;
        if (v298 != 5)
          goto LABEL_516;
        v172 = (unsigned __int8 *)__s1;
        if (*(_DWORD *)__s1 == 1633903972 && *((_BYTE *)__s1 + 4) == 108)
          goto LABEL_516;
      }
      else
      {
        v144 = v266;
        if (HIBYTE(v299) != 5)
          goto LABEL_516;
        if ((_DWORD)__s1 == 1633903972 && BYTE4(__s1) == 108)
          goto LABEL_516;
        v172 = (unsigned __int8 *)&__s1;
      }
      v184 = *(_DWORD *)v172;
      v185 = v172[4];
      if (v184 == 1970039913 && v185 == 109)
      {
        LODWORD(v313[0]) = 0;
        MEMORY[0x1DF0D20DC](__p, v313);
      }
LABEL_516:
      if (SHIBYTE(v296) < 0)
        operator delete(v295[0]);
LABEL_518:
      if (SHIBYTE(v299) < 0)
        operator delete(__s1);
      v276 = v157;
LABEL_521:
      __p[0] = v273;
      *(void **)((char *)__p + *((_QWORD *)v273 - 3)) = v272;
      *(_QWORD *)&v301[0] = v144;
      if (SBYTE7(v305) < 0)
        operator delete(v304[0]);
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x1DF0D2238]((char *)v306 + 8);
      v146 = v147;
      if ((unint64_t)v307 < v147)
        continue;
      break;
    }
LABEL_527:
    free(v262);
    v302 = 0u;
    *(_OWORD *)__p = 0u;
    memset(v301, 0, sizeof(v301));
    v139 = v264;
    v234 = objc_msgSend_countByEnumeratingWithState_objects_count_(v139, v233, (uint64_t)__p, v313, 16);
    if (v234)
    {
      v235 = **(_QWORD **)&v301[0];
      do
      {
        for (j = 0; j != v234; ++j)
        {
          if (**(_QWORD **)&v301[0] != v235)
            objc_enumerationMutation(v139);
          v237 = *((id *)__p[1] + j);
          v241 = objc_msgSend_count(v237, v238, v239);
          if (v241)
          {
            for (k = 0; k != v241; ++k)
            {
              objc_msgSend_objectAtIndexedSubscript_(v237, v240, k);
              v243 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_stringValue(v243, v244, v245);
              v248 = (void *)objc_claimAutoreleasedReturnValue();
              if (v248)
              {
                v249 = objc_msgSend_type(v243, v246, v247) == 1;

                if (!v249)
                  objc_msgSend_setType_(v243, v250, 1);
              }

            }
          }

        }
        v234 = objc_msgSend_countByEnumeratingWithState_objects_count_(v139, v251, (uint64_t)__p, v313, 16);
      }
      while (v234);
    }

LABEL_327:
    if (SHIBYTE(v278) < 0)
      operator delete(v277[0]);
    v140 = v267;
    v141 = (uint64_t *)v267[1];
    if (v141)
    {
      do
      {
        v142 = v141;
        v141 = (uint64_t *)*v141;
      }
      while (v141);
    }
    else
    {
      do
      {
        v142 = (uint64_t *)v140[2];
        v18 = *v142 == (_QWORD)v140;
        v140 = v142;
      }
      while (!v18);
    }
    v269 = v139;
    v121 = v142;
    if (v142 != (uint64_t *)&v290)
      continue;
    break;
  }
LABEL_542:
  v252 = v291;
  for (m = v292; v252 != m; v252 += 80)
  {
    *(_DWORD *)(v252 + 72) = -2;
    v254 = *(_QWORD **)(v252 + 48);
    v255 = *(_QWORD **)(v252 + 56);
    if (v254 != v255)
    {
      v256 = 4294967294;
      do
      {
        v257 = v254[1] - *v254;
        if (v257)
        {
          v258 = v257 >> 4;
          if ((v256 & 0x80000000) != 0)
          {
            v256 = v258;
            *(_DWORD *)(v252 + 72) = v258;
          }
          else if (v258 != v256)
          {
            goto LABEL_552;
          }
        }
        v254 += 3;
      }
      while (v254 != v255);
      if (v256 != 4294967294)
        continue;
    }
LABEL_552:
    *(_DWORD *)(v252 + 72) = -1;
  }
  sub_1DCAFC610(&v281, v139, v270, a5, a6, v263);

LABEL_555:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_1DCB03344((uint64_t)&v281);
LABEL_558:

}

void sub_1DCAFB490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  sub_1DCAF25DC((uint64_t)&STACK[0x350]);
  if (a43 < 0)
    operator delete(a38);
  sub_1DCB03344((uint64_t)&a44);

  _Unwind_Resume(a1);
}

std::string *sub_1DCAFB818(std::string *this)
{
  uint64_t v2;
  int v3;
  char *v4;
  std::string::size_type v5;
  std::string *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  char *v12;
  std::string *v13;
  int v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  std::string *v19;
  unsigned int v20;
  std::string *v21;

  v2 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v3 = (char)v2;
  v4 = (char *)this + v2;
  if (v3 >= 0)
    v5 = (std::string::size_type)v4;
  else
    v5 = this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_;
  if (v3 >= 0)
    v6 = this;
  else
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
  v7 = MEMORY[0x1E0C80978];
  while ((std::string *)v5 != v6)
  {
    v9 = *(char *)--v5;
    v8 = v9;
    if ((v9 & 0x80000000) != 0)
    {
      if (!__maskrune(v8, 0x4000uLL))
      {
LABEL_13:
        v6 = (std::string *)(v5 + 1);
        break;
      }
    }
    else if ((*(_DWORD *)(v7 + 4 * v8 + 60) & 0x4000) == 0)
    {
      goto LABEL_13;
    }
  }
  v10 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v11 = (char)v10;
  v12 = (char *)this + v10;
  if (v11 >= 0)
  {
    v13 = this;
  }
  else
  {
    v12 = (char *)(this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_);
    v13 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  std::string::erase(this, (char *)v6 - (char *)v13, v12 - (char *)v6);
  v14 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v15 = this->__r_.__value_.__r.__words[0];
  if (v14 >= 0)
    v16 = this;
  else
    v16 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (v14 >= 0)
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  else
    size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    v18 = (std::string *)((char *)v16 + size);
    v19 = v16;
    do
    {
      v20 = v19->__r_.__value_.__s.__data_[0];
      if ((v20 & 0x80000000) != 0)
      {
        if (!__maskrune(v20, 0x4000uLL))
          goto LABEL_31;
      }
      else if ((*(_DWORD *)(v7 + 4 * v20 + 60) & 0x4000) == 0)
      {
        goto LABEL_31;
      }
      v19 = (std::string *)((char *)v19 + 1);
      --size;
    }
    while (size);
    v19 = v18;
LABEL_31:
    LOBYTE(v14) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    v15 = this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v19 = v16;
  }
  if ((v14 & 0x80u) == 0)
    v21 = this;
  else
    v21 = (std::string *)v15;
  std::string::erase(this, (char *)v16 - (char *)v21, (char *)v19 - (char *)v16);
  return this;
}

void sub_1DCAFB95C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1DCAFB99C((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1DCAFB99C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

std::string *sub_1DCAFB9E8@<X0>(const std::string *__s@<X1>, std::string *result@<X0>, std::string *a3@<X8>)
{
  int64_t size;
  std::string *v6;
  int v7;
  std::string *v8;
  int64_t v9;
  std::string *v10;
  int v11;
  int64_t v12;
  std::string *v13;
  char v14;

  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = (std::string *)__s->__r_.__value_.__r.__words[0];
    size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    v6 = (std::string *)__s;
  }
  v7 = SHIBYTE(result->__r_.__value_.__r.__words[2]);
  if (v7 >= 0)
    v8 = result;
  else
    v8 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (v7 >= 0)
    v9 = HIBYTE(result->__r_.__value_.__r.__words[2]);
  else
    v9 = result->__r_.__value_.__l.__size_;
  if (!v9)
    return std::string::basic_string(a3, __s, v9 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
  if (size >= v9)
  {
    v10 = (std::string *)((char *)v6 + size);
    v11 = v8->__r_.__value_.__s.__data_[0];
    result = v6;
    do
    {
      v12 = size - v9;
      if (v12 == -1)
        break;
      result = (std::string *)memchr(result, v11, v12 + 1);
      if (!result)
        break;
      v13 = result;
      result = (std::string *)memcmp(result, v8, v9);
      if (!(_DWORD)result)
      {
        if (v13 == v10 || v13 != v6)
          break;
        return std::string::basic_string(a3, __s, v9 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
      }
      result = (std::string *)((char *)&v13->__r_.__value_.__l.__data_ + 1);
      size = (char *)v10 - ((char *)&v13->__r_.__value_.__l.__data_ + 1);
    }
    while (size >= v9);
  }
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
  a3->__r_.__value_.__r.__words[2] = __s->__r_.__value_.__r.__words[2];
  __s->__r_.__value_.__l.__size_ = 0;
  __s->__r_.__value_.__r.__words[2] = 0;
  __s->__r_.__value_.__r.__words[0] = 0;
  return result;
}

float32x4_t *sub_1DCAFBAFC(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t **a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  float32x4_t **v14;
  float32x4_t *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  float32x4_t **v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_1DCB3EDC8(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v13 = v8;
      if (v8 >= v10)
        v13 = v8 % v10;
    }
    else
    {
      v13 = (v10 - 1) & v8;
    }
    v14 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      for (i = *v14; i; i = (float32x4_t *)i->i64[0])
      {
        v16 = i->u64[1];
        if (v16 == v9)
        {
          if (sub_1DCB3EDD8(a1 + 32, i + 1, a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10)
              v16 %= v10;
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13)
            break;
        }
      }
    }
  }
  else
  {
    v13 = 0;
  }
  i = (float32x4_t *)operator new(0x30uLL);
  i->i64[0] = 0;
  i->i64[1] = v9;
  i[1] = **a4;
  i[2].i32[0] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_1DCAD4EF4(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v13 = v9 % v10;
      else
        v13 = v9;
    }
    else
    {
      v13 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v13);
  if (v24)
  {
    i->i64[0] = (uint64_t)*v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  i->i64[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v13) = a1 + 16;
  if (i->i64[0])
  {
    v25 = *(_QWORD *)(i->i64[0] + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (float32x4_t **)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_1DCAFBD48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DCAFBD5C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_1DCAE4CDC();
  return operator new(16 * a2);
}

uint64_t sub_1DCAFBD90(uint64_t result)
{
  int v1;
  _QWORD *v2;
  _QWORD *v3;
  const char *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_DWORD *)(result + 8);
  if (v1 > 3)
    v1 -= 4;
  switch(v1)
  {
    case 0:
      goto LABEL_8;
    case 1:
      v2 = (_QWORD *)std::ostream::operator<<();
      sub_1DCB03734(v2, (uint64_t)"/", 1);
      goto LABEL_8;
    case 2:
      v3 = (_QWORD *)std::ostream::operator<<();
      v4 = "//";
      v5 = 2;
      goto LABEL_7;
    case 3:
      v6 = (_QWORD *)std::ostream::operator<<();
      sub_1DCB03734(v6, (uint64_t)"/", 1);
      v3 = (_QWORD *)std::ostream::operator<<();
      v4 = "/";
      v5 = 1;
LABEL_7:
      sub_1DCB03734(v3, (uint64_t)v4, v5);
LABEL_8:
      result = std::ostream::operator<<();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1DCAFBE70(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1EA574198;
  sub_1DCAD5CA8(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_1DCAFBEA4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1EA574198;
  sub_1DCAD5CA8(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x1DF0D228CLL);
}

_QWORD *sub_1DCAFBEE8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1DCB0345C(a1, "");
}

_QWORD *sub_1DCAFBEF8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1DCB0345C(a1, "");
}

void sub_1DCAFBF08(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_1DCAFBF4C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = sub_1DCB00C70(a1, a2);
  }
  else
  {
    v4 = *(_OWORD *)a2;
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)v3 = v4;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v5 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(v3 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(v3 + 24) = v5;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_QWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 64) = 0;
    *(_OWORD *)(v3 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_DWORD *)(v3 + 72) = *(_DWORD *)(a2 + 72);
    result = v3 + 80;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_1DCAFBFE0(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 48);
  sub_1DCB01094(&v3);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1DCAFC038@<X0>(const void **a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_1DCB01128((uint64_t)a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

char *sub_1DCAFC108(char **a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 2);
    v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555)
      sub_1DCAE4C44();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 2);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0xAAAAAAAAAAAAAAALL)
      v13 = 0x1555555555555555;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)sub_1DCB011C0(v4, v13);
    else
      v14 = 0;
    v15 = &v14[12 * v10];
    v16 = &v14[12 * v13];
    v17 = *a2;
    *((_DWORD *)v15 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v15 = v17;
    v9 = v15 + 12;
    v19 = *a1;
    v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 12);
        v18 -= 12;
        v21 = *((_DWORD *)v18 + 2);
        *(_QWORD *)(v15 - 12) = v20;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v21;
      }
      while (v18 != v19);
      v18 = *a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18)
      operator delete(v18);
  }
  else
  {
    v8 = *a2;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v7 = v8;
    v9 = (char *)(v7 + 12);
  }
  a1[1] = v9;
  return v9 - 12;
}

_OWORD *sub_1DCAFC224(void **a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_1DCAE4C44();
    v11 = v5 - (_QWORD)*a1;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)sub_1DCAFBD5C(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    *(_OWORD *)v14 = *a2;
    v8 = v14 + 16;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return v8 - 1;
}

_QWORD *sub_1DCAFC314(void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_1DCAE4C44();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_1DCAE79A4(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return v8 - 1;
}

_QWORD *sub_1DCAFC3F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1DCAE4C44();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)sub_1DCB01278(v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    sub_1DCB01204(a1, v17);
    v8 = (_QWORD *)a1[1];
    sub_1DCB013D4((uint64_t)v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1DCAFC520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCB013D4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCAFC534(void **a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_1DCAE4C44();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_1DCAFBD5C(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    *(_OWORD *)v14 = *a2;
    v8 = v14 + 16;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_OWORD *)v16 - 1);
        v16 -= 16;
        *((_OWORD *)v14 - 1) = v18;
        v14 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

void sub_1DCAFC610(_QWORD *a1@<X0>, void *a2@<X1>, void *a3@<X2>, int a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int32 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  unint64_t v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  void *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  void *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  void *v50;
  const char *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  void *v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  void *v62;
  const char *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  void *v68;
  const char *v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  void *v74;
  const char *v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  void *v80;
  const char *v81;
  unsigned int v82;
  unsigned int v83;
  void *v84;
  const char *v85;
  void *v86;
  const char *v87;
  const char *v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  void *v92;
  const char *v93;
  const char *v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  void *v98;
  const char *v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  void *v104;
  const char *v105;
  void *v106;
  const char *v107;
  void *v108;
  const char *v109;
  const char *v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  void *v114;
  const char *v115;
  const char *v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  void *v120;
  const char *v121;
  const char *v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  void *v126;
  const char *v127;
  void *v128;
  const char *v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  const char *v133;
  void *v134;
  const char *v135;
  const char *v136;
  uint64_t v137;
  void *v138;
  const char *v139;
  void *v140;
  const char *v141;
  const char *v142;
  uint64_t v143;
  void *v144;
  const char *v145;
  void *v146;
  const char *v147;
  const char *v148;
  uint64_t v149;
  void *v150;
  const char *v151;
  void *v152;
  const char *v153;
  void *v154;
  const char *v155;
  void *v156;
  const char *v157;
  const char *v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  const char *v162;
  const char *v163;
  uint64_t v164;
  void *v165;
  const char *v166;
  void *v167;
  const char *v168;
  uint64_t v169;
  unint64_t v170;
  const char *v171;
  uint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  char *v175;
  void *v176;
  BOOL v177;
  const char *v178;
  id v179;
  const char *v180;
  uint64_t v181;
  id v182;
  unsigned int i;
  void *v184;
  const char *v185;
  uint64_t v186;
  void *v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  BOOL v191;
  const char *v192;
  uint64_t v193;
  void *v194;
  const char *v195;
  uint64_t v196;
  void *v197;
  const char *v198;
  void *v199;
  const char *v200;
  uint64_t v201;
  BOOL v202;
  void *v203;
  const char *v204;
  uint64_t v205;
  void *v206;
  const char *v207;
  void *v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  const char *v212;
  void *v213;
  const char *v214;
  const char *v215;
  void *v216;
  const char *v217;
  void *v218;
  const char *v219;
  const char *v220;
  void *v221;
  const char *v222;
  id v223;
  id v224;
  void *v225;
  void *v226;
  void *v227;
  const char *v228;
  void *v229;
  const char *v230;
  const char *v231;
  const char *v232;
  const char *v233;
  void *v234;
  unint64_t v235;
  uint64_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  int v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  _QWORD *v247;
  unint64_t v248;
  unint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  char *v256;
  char *v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  int32x4_t *v261;
  int32x4_t *v262;
  char *v263;
  char *v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  char *v269;
  char *v270;
  int v271;
  int32x2_t **v272;
  int32x2_t **v273;
  int32x2_t *v274;
  unint64_t v275;
  unint64_t v276;
  __int32 v277;
  char *v278;
  char *v279;
  __int32 *v280;
  __int32 v281;
  char *v282;
  char *v283;
  __int32 *v284;
  __int32 v285;
  __int32 v286;
  __int32 v287;
  char *v288;
  char *v289;
  __int32 *v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  __int32 v294;
  char *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  char *v300;
  char *v301;
  char *v302;
  int v303;
  int *v304;
  char *v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  char *v309;
  char *v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  char *v314;
  char *v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  _OWORD *v335;
  char *v336;
  char *v337;
  char *v338;
  char *v339;
  __int128 v340;
  char *v341;
  __int128 v342;
  int *v343;
  char *v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  char *v350;
  char *v351;
  char *v352;
  char *v353;
  __int128 v354;
  _DWORD *v355;
  _QWORD *v356;
  float32x4_t *v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  float v366;
  float v367;
  float32x2_t v368;
  float32x2_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  char *v374;
  char *v375;
  char *v376;
  char *v377;
  __int128 v378;
  char *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  char *v383;
  __int32 *v384;
  __int32 v385;
  __int32 *v386;
  __int32 *v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  char *v391;
  __int32 *v392;
  __int32 v393;
  __int32 *v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  char *v398;
  __int32 *v399;
  __int32 v400;
  __int32 *v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  char *v405;
  __int32 *v406;
  char *v407;
  __int32 v408;
  __int32 *v409;
  __int32 v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  __int32 *v414;
  __int32 v415;
  __int32 *v416;
  __int32 *v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  char *v421;
  __int32 v422;
  __int32 *v423;
  __int32 v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  __int32 v428;
  float32x4_t v429;
  float v430;
  float v431;
  float32x2_t v432;
  float32x2_t v433;
  float32x4_t v434;
  float32x4_t v435;
  float32x4_t v436;
  unint64_t v438;
  float32x4_t v439;
  float32x4_t v440;
  int32x4_t v441;
  float32x2_t v442;
  float32x2_t v443;
  float32x4_t v444;
  float32x4_t v445;
  int32x4_t v446;
  float32x2_t v447;
  float32x2_t v448;
  float32x4_t v449;
  int32x4_t v450;
  float32x4_t v451;
  char *v452;
  void *v453;
  int64_t v454;
  unint64_t v455;
  unint64_t v456;
  char *v457;
  char *v458;
  char *v459;
  char *v460;
  uint64_t v461;
  float32x4_t v462;
  float32x2_t *v463;
  float32x4_t v464;
  _QWORD *v465;
  unint64_t v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  unint64_t v472;
  char *v473;
  char *v474;
  char *v475;
  char *v476;
  char *v477;
  void *v478;
  int32x4_t v479;
  int32x4_t v480;
  int32x4_t v481;
  int32x4_t v482;
  char *v483;
  char *v484;
  char *v485;
  char *v486;
  __int128 v487;
  char *v488;
  int *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  BOOL v493;
  char *v494;
  char *v495;
  char *v496;
  char *v497;
  __int128 v498;
  char *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  char *v503;
  char *v504;
  char *v505;
  __int128 v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  char *v510;
  float32x2_t *v511;
  unint64_t v512;
  float32x2_t *v513;
  float32x2_t *v514;
  float32x2_t *v515;
  float32x2_t v516;
  float32x2_t v517;
  int32x2_t v518;
  float32x2_t *v519;
  char *v520;
  float32x2_t *v521;
  unint64_t v522;
  unint64_t v523;
  char *v524;
  char *v525;
  float32x2_t *v526;
  __int128 v527;
  unint64_t v528;
  unint64_t v529;
  char *v530;
  float32x2_t *v531;
  __int128 v532;
  unint64_t v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  float32x2_t *v539;
  BOOL v540;
  uint64_t *v541;
  float32x2_t *v542;
  float32x2_t *v543;
  int8x16_t v544;
  float32x2_t *v545;
  float32x2_t *v546;
  int8x16_t v547;
  int8x16_t v548;
  uint64_t v549;
  float32x4_t v550;
  _BYTE *v551;
  float32x4_t *v552;
  float32x4_t v553;
  unint64_t v554;
  int32x4_t v555;
  float32x4_t v556;
  float32x4_t v557;
  float32x4_t v558;
  float v559;
  float v560;
  float32x2_t v561;
  float32x2_t v562;
  float32x4_t v563;
  float32x4_t v564;
  uint64_t j;
  char *v566;
  unint64_t v567;
  __int128 v568;
  uint64_t v569;
  unint64_t v570;
  unint64_t v571;
  char *v572;
  char *v573;
  char *v574;
  char *v575;
  __int128 v576;
  int v577;
  int v578;
  int *v579;
  unint64_t v580;
  int v581;
  _QWORD **v582;
  _QWORD *v583;
  _QWORD *v584;
  _QWORD **v585;
  int v586;
  int *v587;
  uint64_t v588;
  int *v589;
  uint64_t v590;
  _OWORD *v591;
  _OWORD *v592;
  uint64_t v593;
  _OWORD *v594;
  __int128 v595;
  uint64_t v596;
  _OWORD *v597;
  void *v598;
  int64_t v599;
  unint64_t v600;
  unint64_t v601;
  char *v602;
  char *v603;
  char *v604;
  char *v605;
  __int128 v606;
  _QWORD **v607;
  uint64_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  int32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  double v622;
  _QWORD *v623;
  _QWORD **v624;
  int v625;
  int *v626;
  int *v627;
  uint64_t v628;
  float32x4_t *v629;
  float32x4_t *v630;
  int64_t v631;
  unint64_t v632;
  unint64_t v633;
  char *v634;
  float32x4_t *v635;
  float32x4_t *v636;
  float32x4_t *v637;
  float32x4_t v638;
  uint64_t v639;
  uint64_t v640;
  char *v641;
  int v642;
  void **v643;
  void **v644;
  void **v645;
  void **v646;
  int v647;
  int **v648;
  int v649;
  void **v650;
  void **v651;
  void **v652;
  int v653;
  char **v654;
  int **v655;
  int *v657;
  int *v658;
  uint64_t v659;
  float32x4_t *v660;
  float32x4_t *v661;
  char *v662;
  __int128 v663;
  int64_t v664;
  unint64_t v665;
  unint64_t v666;
  char *v667;
  char *v668;
  __int128 v669;
  char *v670;
  __int128 v671;
  float32x4_t *v672;
  float32x4_t *v673;
  float32x4_t *v674;
  float32x4_t v675;
  unint64_t v676;
  __int32 v677;
  char *v678;
  char *v679;
  char *v680;
  uint64_t v681;
  unint64_t v682;
  uint64_t v683;
  unint64_t v684;
  char *v685;
  __int32 *v686;
  __int32 v687;
  __int32 v688;
  char *v689;
  char *v690;
  char *v691;
  uint64_t v692;
  unint64_t v693;
  uint64_t v694;
  unint64_t v695;
  char *v696;
  __int32 *v697;
  __int32 v698;
  __int32 v699;
  char *v700;
  char *v701;
  char *v702;
  uint64_t v703;
  unint64_t v704;
  uint64_t v705;
  char *v706;
  __int32 *v707;
  __int32 v708;
  int64_t v709;
  id v710;
  const char *v711;
  const char *v712;
  uint64_t v713;
  void *v714;
  const char *v715;
  void *v716;
  const char *v717;
  id v718;
  const char *v719;
  void *v720;
  const char *v721;
  id v722;
  const char *v723;
  _QWORD *v724;
  void *v725;
  id v726;
  const char *v727;
  const char *v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  void *v733;
  void *v734;
  const char *v735;
  char isEqualToString;
  const char *v737;
  uint64_t v738;
  id v739;
  const char *v740;
  MDLMaterial *v741;
  void *v742;
  const char *v743;
  MDLSubmeshTopology *v744;
  char *v745;
  _BYTE *v746;
  const char *v747;
  uint64_t v748;
  void *v749;
  const char *v750;
  void *v751;
  const char *v752;
  const char *v753;
  uint64_t v754;
  void *v755;
  const char *v756;
  const char *v757;
  uint64_t v758;
  void *v759;
  const char *v760;
  void *v761;
  const char *v762;
  void *v763;
  _BOOL4 v764;
  const char *v765;
  uint64_t v766;
  void *v767;
  const char *v768;
  uint64_t v769;
  void *v770;
  const char *v771;
  uint64_t v772;
  uint64_t v773;
  const char *v774;
  _DWORD *v775;
  unint64_t v776;
  unint64_t v777;
  uint64_t v778;
  void *v779;
  MDLSubmesh *v780;
  const char *v781;
  void *v782;
  const char *v783;
  void *v784;
  BOOL v785;
  const char *v786;
  uint64_t v787;
  MDLMeshBufferDataAllocator *v788;
  const char *v789;
  uint64_t v790;
  const char *v791;
  const char *v792;
  const char *v793;
  uint64_t v794;
  MDLSubmeshTopology *v795;
  const char *v796;
  void *v797;
  const char *v798;
  void *v799;
  const char *v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  unint64_t v809;
  __int128 *v810;
  uint64_t v811;
  unint64_t v812;
  uint64_t v813;
  unint64_t v814;
  uint64_t v815;
  unint64_t v816;
  uint64_t v817;
  unint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  __int128 v826;
  uint64_t v827;
  _DWORD *v828;
  int v829;
  _DWORD *v830;
  int v831;
  uint64_t v832;
  float *v833;
  uint64_t v834;
  float v835;
  uint64_t v836;
  _DWORD *v837;
  int v838;
  uint64_t v839;
  _DWORD *v840;
  int v841;
  const char *v842;
  uint64_t v843;
  void *v844;
  BOOL v845;
  const char *v846;
  uint64_t v847;
  void *v848;
  const char *v849;
  uint64_t v850;
  void *v851;
  const char *v852;
  const char *v853;
  uint64_t v854;
  uint64_t v855;
  int v856;
  uint64_t v857;
  uint64_t k;
  const char *v859;
  uint64_t v860;
  void *v861;
  const char *v862;
  uint64_t v863;
  void *v864;
  uint64_t v865;
  const char *v866;
  uint64_t v867;
  uint64_t v868;
  _QWORD *v869;
  MDLMesh *v870;
  const char *v871;
  void *v872;
  const char *v873;
  uint64_t v874;
  void *v875;
  const char *v876;
  const char *v877;
  uint64_t v878;
  id v879;
  uint64_t v881;
  id v882;
  unint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  _BOOL4 v888;
  uint64_t v889;
  uint64_t v890;
  float32x4_t v891;
  uint64_t v892;
  id v893;
  float32x4_t v894;
  int v895;
  MDLVertexDescriptor *v896;
  int32x2_t **v897;
  uint64_t v898;
  float32x4_t v899;
  int v900;
  uint64_t v901;
  __int128 v902;
  float32x4_t v903;
  uint64_t v904;
  __int128 v905;
  __int128 v906;
  float32x4_t v907;
  float32x4_t v908;
  float32x4_t v909;
  MDLSubmeshTopology *v910;
  _QWORD *v911;
  uint64_t v912;
  uint64_t v914;
  __int128 v915;
  __int128 v916;
  __int128 v917;
  __int128 v918;
  __int128 v919;
  __int128 v920;
  __int128 v921;
  __int128 v922;
  void *v923;
  void *v924;
  unint64_t v925;
  void *v926;
  char *v927;
  char *v928;
  void *v929;
  char *v930;
  char *v931;
  void *v932;
  char *v933;
  char *v934;
  void *v935;
  void *__p;
  unint64_t v937;
  __int128 v938;
  __int128 v939;
  uint64_t v940;
  _QWORD **v941;
  _QWORD *v942[2];
  _QWORD *v943;
  int *v944;
  unint64_t v945;
  void *v946;
  void *v947;
  char *v948;
  void *v949;
  _BYTE *v950;
  uint64_t v951;
  void *v952;
  void *v953;
  char *v954;
  void *v955[2];
  __int128 v956;
  uint64_t v957;
  uint64_t (*v958)(float32x2_t *, float32x2_t *);
  void *v959;
  void *v960;
  unint64_t v961;
  _BYTE v962[128];
  MDLSubmeshTopology *v963;
  _BYTE v964[128];
  _QWORD v965[2];
  _QWORD v966[4];

  v966[2] = *MEMORY[0x1E0C80C00];
  v882 = a2;
  v893 = a3;
  v9 = a1[13] - a1[12];
  if (v9)
    v888 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2) == v9 >> 4;
  else
    v888 = 0;
  v889 = a1[9];
  v890 = a1[10];
  v886 = a1[3];
  v887 = a1[4];
  v884 = a1[6];
  v885 = a1[7];
  v938 = 0u;
  v939 = 0u;
  v940 = 1065353216;
  __p = 0;
  v935 = 0;
  v937 = 0;
  v10 = a1[18];
  v901 = a1[19];
  v911 = a1;
  if (v10 == v901)
  {
    v33 = 0;
    v11 = 0;
  }
  else
  {
    v900 = a5;
    v11 = 0;
    v12 = 0;
    do
    {
      v14 = *(_QWORD *)(v10 + 48);
      v13 = *(_QWORD *)(v10 + 56);
      v912 = v10;
      v914 = v13;
      while (v14 != v13)
      {
        v15 = v11;
        v17 = *(_OWORD **)v14;
        v16 = *(_OWORD **)(v14 + 8);
        v18 = (uint64_t)v16 - *(_QWORD *)v14;
        v19 = v18 >> 4;
        v20 = a4;
        if ((unint64_t)v18 < 0x31)
          v20 = 1;
        v21 = (v18 >> 3) + (v18 >> 4) - 6;
        if (v20)
          v22 = v19;
        else
          v22 = v21;
        for (; v17 != v16; ++v17)
        {
          v955[1] = 0;
          v955[0] = 0;
          *(_OWORD *)v955 = *v17;
          if (!sub_1DCB014F4(&v938, (int32x2_t *)v955))
          {
            v959 = v955;
            sub_1DCB015E4((uint64_t)&v938, (int32x2_t *)v955, (uint64_t)&unk_1DCC58300, (int32x4_t **)&v959)[2].i32[0] = v12;
            v23 = (char *)__p;
            if ((unint64_t)__p >= v937)
            {
              v25 = ((_BYTE *)__p - (_BYTE *)v935) >> 4;
              if ((unint64_t)(v25 + 1) >> 60)
                sub_1DCAE4C44();
              v26 = (uint64_t)(v937 - (_QWORD)v935) >> 3;
              if (v26 <= v25 + 1)
                v26 = v25 + 1;
              if (v937 - (unint64_t)v935 >= 0x7FFFFFFFFFFFFFF0)
                v27 = 0xFFFFFFFFFFFFFFFLL;
              else
                v27 = v26;
              if (v27)
                v28 = (char *)sub_1DCAFBD5C((uint64_t)&v937, v27);
              else
                v28 = 0;
              v29 = &v28[16 * v25];
              *(_OWORD *)v29 = *(_OWORD *)v955;
              v24 = v29 + 16;
              v30 = (char *)__p;
              v31 = (char *)v935;
              if (__p != v935)
              {
                do
                {
                  v32 = *((_OWORD *)v30 - 1);
                  v30 -= 16;
                  *((_OWORD *)v29 - 1) = v32;
                  v29 -= 16;
                }
                while (v30 != v31);
                v30 = (char *)v935;
              }
              v935 = v29;
              __p = v24;
              v937 = (unint64_t)&v28[16 * v27];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)v955;
              v24 = v23 + 16;
            }
            ++v12;
            __p = v24;
          }
        }
        v11 = v22 + v15;
        v14 += 24;
        v13 = v914;
      }
      v10 = v912 + 80;
    }
    while (v912 + 80 != v901);
    v33 = *((_QWORD *)&v939 + 1);
    a5 = v900;
  }
  v896 = objc_alloc_init(MDLVertexDescriptor);
  objc_msgSend_attributes(v896, v34, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v36, v37, 0);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v883 = v33;
  objc_msgSend_setName_(v38, v39, (uint64_t)CFSTR("position"));

  objc_msgSend_attributes(v896, v40, v41);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v42, v43, 0);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFormat_(v44, v45, 786435);

  objc_msgSend_attributes(v896, v46, v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v48, v49, 0);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setBufferIndex_(v50, v51, 0);

  objc_msgSend_attributes(v896, v52, v53);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v54, v55, 0);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setOffset_(v56, v57, 0);

  if (v890 == v889)
  {
    v82 = 12;
    v83 = 1;
  }
  else
  {
    objc_msgSend_attributes(v896, v58, v59);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v60, v61, 1);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v62, v63, (uint64_t)CFSTR("normal"));

    objc_msgSend_attributes(v896, v64, v65);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v66, v67, 1);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFormat_(v68, v69, 786435);

    objc_msgSend_attributes(v896, v70, v71);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v72, v73, 1);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBufferIndex_(v74, v75, 0);

    objc_msgSend_attributes(v896, v76, v77);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v78, v79, 1);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOffset_(v80, v81, 12);

    v82 = 24;
    v83 = 2;
  }
  if (v888)
  {
    objc_msgSend_attributes(v896, v58, v59);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v84, v85, v83);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v86, v87, (uint64_t)CFSTR("color"));

    objc_msgSend_attributes(v896, v88, v89);
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v90, v91, v83);
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFormat_(v92, v93, 786436);

    objc_msgSend_attributes(v896, v94, v95);
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v96, v97, v83);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBufferIndex_(v98, v99, 0);

    objc_msgSend_attributes(v896, v100, v101);
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v102, v103, v83);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOffset_(v104, v105, v82);

    ++v83;
    v82 += 16;
  }
  if (v887 != v886)
  {
    objc_msgSend_attributes(v896, v58, v59);
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v106, v107, v83);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v108, v109, (uint64_t)CFSTR("textureCoordinate"));

    objc_msgSend_attributes(v896, v110, v111);
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v112, v113, v83);
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFormat_(v114, v115, 786434);

    objc_msgSend_attributes(v896, v116, v117);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v118, v119, v83);
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBufferIndex_(v120, v121, 0);

    objc_msgSend_attributes(v896, v122, v123);
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v124, v125, v83);
    v126 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOffset_(v126, v127, v82);

    ++v83;
    v82 += 8;
  }
  if (v885 != v884)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v58, (uint64_t)CFSTR("%@2"), CFSTR("textureCoordinate"));
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_attributes(v896, v129, v130);
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    v132 = v83;
    objc_msgSend_objectAtIndexedSubscript_(v131, v133, v83);
    v134 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v134, v135, (uint64_t)v128);

    objc_msgSend_attributes(v896, v136, v137);
    v138 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v138, v139, v132);
    v140 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFormat_(v140, v141, 786434);

    objc_msgSend_attributes(v896, v142, v143);
    v144 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v144, v145, v132);
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBufferIndex_(v146, v147, 0);

    objc_msgSend_attributes(v896, v148, v149);
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v150, v151, v132);
    v152 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOffset_(v152, v153, v82);

    v82 += 8;
  }
  objc_msgSend_layouts(v896, v58, v59);
  v154 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v154, v155, 0);
  v156 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setStride_(v156, v157, v82);

  objc_msgSend_setPackedOffsets(v896, v158, v159);
  objc_msgSend_setPackedStrides(v896, v160, v161);
  objc_msgSend__conformVertexBuffers_error_(v893, v162, (uint64_t)v896, 0);
  if (!v11)
  {
    v175 = "OBJ file has no faces";
LABEL_54:
    sub_1DCB0345C(a6, v175);
    goto LABEL_55;
  }
  if (!v33)
  {
    v175 = "No vertices in OBJ file";
    goto LABEL_54;
  }
  objc_msgSend_layouts(v896, v163, v164);
  v165 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v165, v166, 0);
  v167 = (void *)objc_claimAutoreleasedReturnValue();
  v170 = objc_msgSend_stride(v167, v168, v169);

  v173 = v33;
  if (a5)
    NSLog(CFSTR("Creating vertex buffer for %d vertices"), v33);
  v174 = v911;
  if (!is_mul_ok(v170, v883))
  {
    sub_1DCB0345C(a6, "Too many vertices in OBJ file");
    goto LABEL_55;
  }
  v878 = v170 * v883;
  if ((a4 & 1) == 0)
  {
    objc_msgSend_vertexDescriptor(v893, v171, v172);
    v176 = (void *)objc_claimAutoreleasedReturnValue();
    v177 = v176 == 0;

    if (v177)
    {
      objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v178, v878);
      v227 = (void *)objc_claimAutoreleasedReturnValue();
      v966[0] = v227;
      objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v228, 4 * v11);
      v229 = (void *)objc_claimAutoreleasedReturnValue();
      v966[1] = v229;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v230, (uint64_t)v966, 2);
      v226 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v231, 1);
      v223 = (id)objc_claimAutoreleasedReturnValue();
      v965[0] = v223;
      objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v232, 2);
      v225 = (void *)objc_claimAutoreleasedReturnValue();
      v965[1] = v225;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v233, (uint64_t)v965, 2);
      v224 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v179 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v182 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      for (i = 0; ; i = v190 + 1)
      {
        objc_msgSend_vertexDescriptor(v893, v180, v181);
        v184 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_layouts(v184, v185, v186);
        v187 = (void *)objc_claimAutoreleasedReturnValue();
        v190 = i;
        v191 = objc_msgSend_count(v187, v188, v189) > (unint64_t)i;

        if (!v191)
          break;
        objc_msgSend_vertexDescriptor(v893, v192, v193);
        v194 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_layouts(v194, v195, v196);
        v197 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v197, v198, v190);
        v199 = (void *)objc_claimAutoreleasedReturnValue();
        v202 = objc_msgSend_stride(v199, v200, v201) == 0;

        if (!v202)
        {
          objc_msgSend_vertexDescriptor(v893, v180, v181);
          v203 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_layouts(v203, v204, v205);
          v206 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectAtIndexedSubscript_(v206, v207, v190);
          v208 = (void *)objc_claimAutoreleasedReturnValue();
          v211 = objc_msgSend_stride(v208, v209, v210);

          objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v212, v211 * v883);
          v213 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v179, v214, (uint64_t)v213);

          objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v215, 1);
          v216 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v182, v217, (uint64_t)v216);

        }
      }
      objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v192, 4 * v11);
      v218 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v179, v219, (uint64_t)v218);

      objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v220, 2);
      v221 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v182, v222, (uint64_t)v221);

      v223 = v179;
      v224 = v182;
      v225 = v224;
      v226 = v223;
    }
    v234 = v224;

    v174 = v911;
    v173 = v883;
  }
  v933 = 0;
  v932 = 0;
  v934 = 0;
  sub_1DCB01460(&v932, 2 * v173);
  v930 = 0;
  v929 = 0;
  v931 = 0;
  if (a5)
    NSLog(CFSTR("Adding %d submeshes"), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v174[19] - v174[18]) >> 4));
  v879 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v892 = v174[18];
  v881 = v174[19];
  if (v892 != v881)
  {
    v240.i32[3] = 0;
    do
    {
      v933 = (char *)v932;
      if (a4)
      {
        v241 = *(_DWORD *)(v892 + 72);
        v242 = v241 - 3;
        v243 = 2;
        if (v241 == 4)
          v243 = 4;
        v244 = 5;
        if (v241 == 1)
          v244 = 0;
        if (v241 == 2)
          v245 = 1;
        else
          v245 = v244;
        if (v242 < 2)
          v245 = v243;
        v898 = v245;
        v246 = *(_QWORD **)(v892 + 48);
        v247 = *(_QWORD **)(v892 + 56);
        while (v246 != v247)
        {
          v248 = v246[1] - *v246;
          v249 = v248 >> 4;
          v250 = v930;
          if (v930 >= v931)
          {
            v252 = (char *)v929;
            v253 = (v930 - (_BYTE *)v929) >> 2;
            v254 = v253 + 1;
            if ((unint64_t)(v253 + 1) >> 62)
              sub_1DCAE4C44();
            v255 = v931 - (_BYTE *)v929;
            if ((v931 - (_BYTE *)v929) >> 1 > v254)
              v254 = v255 >> 1;
            if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFFCLL)
              v235 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v235 = v254;
            if (v235)
            {
              v256 = (char *)sub_1DCAE4D04((uint64_t)&v931, v235);
              v250 = v930;
              v252 = (char *)v929;
            }
            else
            {
              v256 = 0;
            }
            v257 = &v256[4 * v253];
            *(_DWORD *)v257 = v249;
            v251 = v257 + 4;
            while (v250 != v252)
            {
              v258 = *((_DWORD *)v250 - 1);
              v250 -= 4;
              *((_DWORD *)v257 - 1) = v258;
              v257 -= 4;
            }
            v929 = v257;
            v930 = v251;
            v931 = &v256[4 * v235];
            if (v252)
              operator delete(v252);
          }
          else
          {
            *(_DWORD *)v930 = v249;
            v251 = v250 + 4;
          }
          v930 = v251;
          if ((_DWORD)v249)
          {
            v259 = 0;
            v260 = (v248 >> 4);
            do
            {
              v955[0] = (void *)(*v246 + 16 * v259);
              v261 = sub_1DCB015E4((uint64_t)&v938, (int32x2_t *)v955[0], (uint64_t)&unk_1DCC58300, (int32x4_t **)v955);
              v262 = v261;
              v263 = v933;
              if (v933 >= v934)
              {
                v265 = (char *)v932;
                v266 = (v933 - (_BYTE *)v932) >> 2;
                v267 = v266 + 1;
                if ((unint64_t)(v266 + 1) >> 62)
                  sub_1DCAE4C44();
                v268 = v934 - (_BYTE *)v932;
                if ((v934 - (_BYTE *)v932) >> 1 > v267)
                  v267 = v268 >> 1;
                if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFFCLL)
                  v235 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v235 = v267;
                if (v235)
                {
                  v269 = (char *)sub_1DCAE4D04((uint64_t)&v934, v235);
                  v263 = v933;
                  v265 = (char *)v932;
                }
                else
                {
                  v269 = 0;
                }
                v270 = &v269[4 * v266];
                *(_DWORD *)v270 = v262[2].i32[0];
                v264 = v270 + 4;
                while (v263 != v265)
                {
                  v271 = *((_DWORD *)v263 - 1);
                  v263 -= 4;
                  *((_DWORD *)v270 - 1) = v271;
                  v270 -= 4;
                }
                v932 = v270;
                v933 = v264;
                v934 = &v269[4 * v235];
                if (v265)
                  operator delete(v265);
              }
              else
              {
                *(_DWORD *)v933 = v261[2].i32[0];
                v264 = v263 + 4;
              }
              v933 = v264;
              ++v259;
            }
            while (v259 != v260);
          }
          v246 += 3;
        }
        goto LABEL_746;
      }
      v273 = *(int32x2_t ***)(v892 + 48);
      v272 = *(int32x2_t ***)(v892 + 56);
      v897 = v272;
      while (v273 != v272)
      {
        v274 = *v273;
        v275 = (char *)v273[1] - (char *)*v273;
        v276 = v275 >> 4;
        if ((v275 >> 4) == 3)
        {
          v955[0] = *v273;
          v285 = sub_1DCB015E4((uint64_t)&v938, v274, (uint64_t)&unk_1DCC58300, (int32x4_t **)v955)[2].i32[0];
          v955[0] = &(*v273)[2];
          v286 = sub_1DCB015E4((uint64_t)&v938, (int32x2_t *)v955[0], (uint64_t)&unk_1DCC58300, (int32x4_t **)v955)[2].i32[0];
          v955[0] = &(*v273)[4];
          v287 = sub_1DCB015E4((uint64_t)&v938, (int32x2_t *)v955[0], (uint64_t)&unk_1DCC58300, (int32x4_t **)v955)[2].i32[0];
          v288 = v933;
          v289 = v934;
          if (v933 >= v934)
          {
            v315 = (char *)v932;
            v316 = (v933 - (_BYTE *)v932) >> 2;
            v317 = v316 + 1;
            if ((unint64_t)(v316 + 1) >> 62)
              goto LABEL_869;
            v318 = v934 - (_BYTE *)v932;
            if ((v934 - (_BYTE *)v932) >> 1 > v317)
              v317 = v318 >> 1;
            if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFFCLL)
              v235 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v235 = v317;
            if (v235)
            {
              v319 = (char *)sub_1DCAE4D04((uint64_t)&v934, v235);
              v288 = v933;
              v315 = (char *)v932;
            }
            else
            {
              v319 = 0;
            }
            v414 = (__int32 *)&v319[4 * v316];
            *v414 = v285;
            v290 = v414 + 1;
            while (v288 != v315)
            {
              v415 = *((_DWORD *)v288 - 1);
              v288 -= 4;
              *--v414 = v415;
            }
            v289 = &v319[4 * v235];
            v932 = v414;
            v933 = (char *)v290;
            v934 = v289;
            if (v315)
            {
              operator delete(v315);
              v289 = v934;
            }
          }
          else
          {
            *(_DWORD *)v933 = v285;
            v290 = (__int32 *)(v288 + 4);
          }
          v933 = (char *)v290;
          if (v290 >= (__int32 *)v289)
          {
            v417 = (__int32 *)v932;
            v418 = ((char *)v290 - (_BYTE *)v932) >> 2;
            v419 = v418 + 1;
            if ((unint64_t)(v418 + 1) >> 62)
              goto LABEL_869;
            v420 = v289 - (_BYTE *)v932;
            if (v420 >> 1 > v419)
              v419 = v420 >> 1;
            if ((unint64_t)v420 >= 0x7FFFFFFFFFFFFFFCLL)
              v235 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v235 = v419;
            if (v235)
            {
              v421 = (char *)sub_1DCAE4D04((uint64_t)&v934, v235);
              v290 = (__int32 *)v933;
              v417 = (__int32 *)v932;
            }
            else
            {
              v421 = 0;
            }
            v423 = (__int32 *)&v421[4 * v418];
            *v423 = v286;
            v416 = v423 + 1;
            while (v290 != v417)
            {
              v424 = *--v290;
              *--v423 = v424;
            }
            v289 = &v421[4 * v235];
            v932 = v423;
            v933 = (char *)v416;
            v934 = v289;
            if (v417)
            {
              operator delete(v417);
              v289 = v934;
            }
          }
          else
          {
            *v290 = v286;
            v416 = v290 + 1;
          }
          v933 = (char *)v416;
          if (v416 >= (__int32 *)v289)
          {
            v394 = (__int32 *)v932;
            v425 = ((char *)v416 - (_BYTE *)v932) >> 2;
            v426 = v425 + 1;
            if ((unint64_t)(v425 + 1) >> 62)
LABEL_869:
              sub_1DCAE4C44();
            v427 = v289 - (_BYTE *)v932;
            if (v427 >> 1 > v426)
              v426 = v427 >> 1;
            if ((unint64_t)v427 >= 0x7FFFFFFFFFFFFFFCLL)
              v235 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v235 = v426;
            if (v235)
            {
              v398 = (char *)sub_1DCAE4D04((uint64_t)&v934, v235);
              v416 = (__int32 *)v933;
              v394 = (__int32 *)v932;
            }
            else
            {
              v398 = 0;
            }
            v406 = (__int32 *)&v398[4 * v425];
            *v406 = v287;
            v407 = (char *)(v406 + 1);
            while (v416 != v394)
            {
              v428 = *--v416;
              *--v406 = v428;
            }
            goto LABEL_336;
          }
          *v416 = v287;
          v407 = (char *)(v416 + 1);
LABEL_338:
          v933 = v407;
          goto LABEL_339;
        }
        if ((_DWORD)v276 == 2)
        {
          v955[0] = *v273;
          v281 = sub_1DCB015E4((uint64_t)&v938, v274, (uint64_t)&unk_1DCC58300, (int32x4_t **)v955)[2].i32[0];
          v955[0] = &(*v273)[2];
          v277 = sub_1DCB015E4((uint64_t)&v938, (int32x2_t *)v955[0], (uint64_t)&unk_1DCC58300, (int32x4_t **)v955)[2].i32[0];
          v282 = v933;
          v283 = v934;
          if (v933 >= v934)
          {
            v310 = (char *)v932;
            v311 = (v933 - (_BYTE *)v932) >> 2;
            v312 = v311 + 1;
            if ((unint64_t)(v311 + 1) >> 62)
              goto LABEL_869;
            v313 = v934 - (_BYTE *)v932;
            if ((v934 - (_BYTE *)v932) >> 1 > v312)
              v312 = v313 >> 1;
            if ((unint64_t)v313 >= 0x7FFFFFFFFFFFFFFCLL)
              v235 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v235 = v312;
            if (v235)
            {
              v314 = (char *)sub_1DCAE4D04((uint64_t)&v934, v235);
              v282 = v933;
              v310 = (char *)v932;
            }
            else
            {
              v314 = 0;
            }
            v399 = (__int32 *)&v314[4 * v311];
            *v399 = v281;
            v284 = v399 + 1;
            while (v282 != v310)
            {
              v400 = *((_DWORD *)v282 - 1);
              v282 -= 4;
              *--v399 = v400;
            }
            v283 = &v314[4 * v235];
            v932 = v399;
            v933 = (char *)v284;
            v934 = v283;
            if (v310)
            {
              operator delete(v310);
              v283 = v934;
            }
          }
          else
          {
            *(_DWORD *)v933 = v281;
            v284 = (__int32 *)(v282 + 4);
          }
          v933 = (char *)v284;
          if (v284 >= (__int32 *)v283)
          {
            v401 = (__int32 *)v932;
            v402 = ((char *)v284 - (_BYTE *)v932) >> 2;
            v403 = v402 + 1;
            if ((unint64_t)(v402 + 1) >> 62)
              goto LABEL_869;
            v404 = v283 - (_BYTE *)v932;
            if (v404 >> 1 > v403)
              v403 = v404 >> 1;
            if ((unint64_t)v404 >= 0x7FFFFFFFFFFFFFFCLL)
              v235 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v235 = v403;
            if (v235)
            {
              v405 = (char *)sub_1DCAE4D04((uint64_t)&v934, v235);
              v284 = (__int32 *)v933;
              v401 = (__int32 *)v932;
            }
            else
            {
              v405 = 0;
            }
            v409 = (__int32 *)&v405[4 * v402];
            *v409 = v277;
            v386 = v409 + 1;
            while (v284 != v401)
            {
              v410 = *--v284;
              *--v409 = v410;
            }
            v283 = &v405[4 * v235];
            v932 = v409;
            v933 = (char *)v386;
            v934 = v283;
            if (v401)
            {
              operator delete(v401);
              v283 = v934;
            }
          }
          else
          {
            *v284 = v277;
            v386 = v284 + 1;
          }
          v933 = (char *)v386;
          if (v386 >= (__int32 *)v283)
          {
            v394 = (__int32 *)v932;
            v411 = ((char *)v386 - (_BYTE *)v932) >> 2;
            v412 = v411 + 1;
            if ((unint64_t)(v411 + 1) >> 62)
              goto LABEL_869;
            v413 = v283 - (_BYTE *)v932;
            if (v413 >> 1 > v412)
              v412 = v413 >> 1;
            if ((unint64_t)v413 >= 0x7FFFFFFFFFFFFFFCLL)
              v235 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v235 = v412;
            if (v235)
            {
              v398 = (char *)sub_1DCAE4D04((uint64_t)&v934, v235);
              v386 = (__int32 *)v933;
              v394 = (__int32 *)v932;
            }
            else
            {
              v398 = 0;
            }
            v406 = (__int32 *)&v398[4 * v411];
            *v406 = v277;
            v407 = (char *)(v406 + 1);
            while (v386 != v394)
            {
              v422 = *--v386;
              *--v406 = v422;
            }
            goto LABEL_336;
          }
          goto LABEL_287;
        }
        if ((_DWORD)v276 == 1)
        {
          v955[0] = *v273;
          v277 = sub_1DCB015E4((uint64_t)&v938, v274, (uint64_t)&unk_1DCC58300, (int32x4_t **)v955)[2].i32[0];
          v278 = v933;
          v279 = v934;
          if (v933 >= v934)
          {
            v305 = (char *)v932;
            v306 = (v933 - (_BYTE *)v932) >> 2;
            v307 = v306 + 1;
            if ((unint64_t)(v306 + 1) >> 62)
              goto LABEL_869;
            v308 = v934 - (_BYTE *)v932;
            if ((v934 - (_BYTE *)v932) >> 1 > v307)
              v307 = v308 >> 1;
            if ((unint64_t)v308 >= 0x7FFFFFFFFFFFFFFCLL)
              v235 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v235 = v307;
            if (v235)
            {
              v309 = (char *)sub_1DCAE4D04((uint64_t)&v934, v235);
              v278 = v933;
              v305 = (char *)v932;
            }
            else
            {
              v309 = 0;
            }
            v384 = (__int32 *)&v309[4 * v306];
            *v384 = v277;
            v280 = v384 + 1;
            while (v278 != v305)
            {
              v385 = *((_DWORD *)v278 - 1);
              v278 -= 4;
              *--v384 = v385;
            }
            v279 = &v309[4 * v235];
            v932 = v384;
            v933 = (char *)v280;
            v934 = v279;
            if (v305)
            {
              operator delete(v305);
              v279 = v934;
            }
          }
          else
          {
            *(_DWORD *)v933 = v277;
            v280 = (__int32 *)(v278 + 4);
          }
          v933 = (char *)v280;
          if (v280 >= (__int32 *)v279)
          {
            v387 = (__int32 *)v932;
            v388 = ((char *)v280 - (_BYTE *)v932) >> 2;
            v389 = v388 + 1;
            if ((unint64_t)(v388 + 1) >> 62)
              goto LABEL_869;
            v390 = v279 - (_BYTE *)v932;
            if (v390 >> 1 > v389)
              v389 = v390 >> 1;
            if ((unint64_t)v390 >= 0x7FFFFFFFFFFFFFFCLL)
              v235 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v235 = v389;
            if (v235)
            {
              v391 = (char *)sub_1DCAE4D04((uint64_t)&v934, v235);
              v280 = (__int32 *)v933;
              v387 = (__int32 *)v932;
            }
            else
            {
              v391 = 0;
            }
            v392 = (__int32 *)&v391[4 * v388];
            *v392 = v277;
            v386 = v392 + 1;
            while (v280 != v387)
            {
              v393 = *--v280;
              *--v392 = v393;
            }
            v279 = &v391[4 * v235];
            v932 = v392;
            v933 = (char *)v386;
            v934 = v279;
            if (v387)
            {
              operator delete(v387);
              v279 = v934;
            }
          }
          else
          {
            *v280 = v277;
            v386 = v280 + 1;
          }
          v933 = (char *)v386;
          if (v386 >= (__int32 *)v279)
          {
            v394 = (__int32 *)v932;
            v395 = ((char *)v386 - (_BYTE *)v932) >> 2;
            v396 = v395 + 1;
            if ((unint64_t)(v395 + 1) >> 62)
              goto LABEL_869;
            v397 = v279 - (_BYTE *)v932;
            if (v397 >> 1 > v396)
              v396 = v397 >> 1;
            if ((unint64_t)v397 >= 0x7FFFFFFFFFFFFFFCLL)
              v235 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v235 = v396;
            if (v235)
            {
              v398 = (char *)sub_1DCAE4D04((uint64_t)&v934, v235);
              v386 = (__int32 *)v933;
              v394 = (__int32 *)v932;
            }
            else
            {
              v398 = 0;
            }
            v406 = (__int32 *)&v398[4 * v395];
            *v406 = v277;
            v407 = (char *)(v406 + 1);
            while (v386 != v394)
            {
              v408 = *--v386;
              *--v406 = v408;
            }
LABEL_336:
            v932 = v406;
            v933 = v407;
            v934 = &v398[4 * v235];
            if (v394)
              operator delete(v394);
            goto LABEL_338;
          }
LABEL_287:
          *v386 = v277;
          v407 = (char *)(v386 + 1);
          goto LABEL_338;
        }
        v927 = 0;
        v926 = 0;
        v928 = 0;
        if ((int)v276 < 1)
        {
          v304 = 0;
          v291 = 0;
        }
        else
        {
          v291 = 0;
          v292 = 0;
          v293 = (v275 >> 4);
          do
          {
            v294 = (*v273)[2 * v292].i32[0];
            if (v291 >= v928)
            {
              v295 = (char *)v926;
              v296 = (v291 - (_BYTE *)v926) >> 2;
              v297 = v296 + 1;
              if ((unint64_t)(v296 + 1) >> 62)
                sub_1DCAE4C44();
              v298 = v928 - (_BYTE *)v926;
              if ((v928 - (_BYTE *)v926) >> 1 > v297)
                v297 = v298 >> 1;
              if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFFCLL)
                v299 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v299 = v297;
              if (v299)
              {
                v300 = (char *)sub_1DCAE4D04((uint64_t)&v928, v299);
                v291 = v927;
                v295 = (char *)v926;
              }
              else
              {
                v300 = 0;
              }
              v301 = &v300[4 * v296];
              *(_DWORD *)v301 = v294;
              v302 = v301 + 4;
              while (v291 != v295)
              {
                v303 = *((_DWORD *)v291 - 1);
                v291 -= 4;
                *((_DWORD *)v301 - 1) = v303;
                v301 -= 4;
              }
              v926 = v301;
              v927 = v302;
              v928 = &v300[4 * v299];
              if (v295)
                operator delete(v295);
              v291 = v302;
            }
            else
            {
              *(_DWORD *)v291 = v294;
              v291 += 4;
            }
            v927 = v291;
            ++v292;
          }
          while (v292 != v293);
          v304 = (int *)v926;
        }
        v924 = 0;
        v923 = 0;
        v925 = 0;
        v320 = v291 - (char *)v304;
        if (v320 != 16)
        {
          v947 = 0;
          v946 = 0;
          v948 = 0;
          sub_1DCB01838(&v946, v320 >> 2);
          v943 = &v943;
          v944 = (int *)&v943;
          v945 = 0;
          v343 = (int *)v926;
          v344 = (char *)v947;
          if (v927 != v926)
          {
            v345 = 0;
            do
            {
              v346 = *v911 + 12 * v343[v345];
              *(_QWORD *)&v342 = *(_QWORD *)v346;
              DWORD2(v342) = *(_DWORD *)(v346 + 8);
              if (v344 >= v948)
              {
                v902 = v342;
                v347 = (v344 - (_BYTE *)v946) >> 4;
                if ((unint64_t)(v347 + 1) >> 60)
                  sub_1DCAE4C44();
                v348 = (v948 - (_BYTE *)v946) >> 3;
                if (v348 <= v347 + 1)
                  v348 = v347 + 1;
                if ((unint64_t)(v948 - (_BYTE *)v946) >= 0x7FFFFFFFFFFFFFF0)
                  v349 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v349 = v348;
                if (v349)
                  v350 = (char *)sub_1DCAFBD5C((uint64_t)&v948, v349);
                else
                  v350 = 0;
                v351 = &v350[16 * v347];
                *(_OWORD *)v351 = v902;
                v344 = v351 + 16;
                v352 = (char *)v947;
                v353 = (char *)v946;
                if (v947 != v946)
                {
                  do
                  {
                    v354 = *((_OWORD *)v352 - 1);
                    v352 -= 16;
                    *((_OWORD *)v351 - 1) = v354;
                    v351 -= 16;
                  }
                  while (v352 != v353);
                  v352 = (char *)v946;
                }
                v946 = v351;
                v947 = v344;
                v948 = &v350[16 * v349];
                if (v352)
                  operator delete(v352);
              }
              else
              {
                *(_OWORD *)v344 = v342;
                v344 += 16;
              }
              v947 = v344;
              v355 = operator new(0x18uLL);
              v355[4] = v345;
              v356 = v943;
              *(_QWORD *)v355 = v943;
              *((_QWORD *)v355 + 1) = &v943;
              v356[1] = v355;
              v943 = v355;
              ++v945;
              ++v345;
              v343 = (int *)v926;
            }
            while (v345 < (v927 - (_BYTE *)v926) >> 2);
          }
          v357 = (float32x4_t *)v946;
          if (v344 == v946)
          {
            v361 = 0uLL;
          }
          else
          {
            v358 = 0;
            v359 = (v344 - (_BYTE *)v946) >> 4;
            if (v359 <= 1)
              v360 = 1;
            else
              v360 = (v344 - (_BYTE *)v946) >> 4;
            v361 = 0uLL;
            do
            {
              v362 = *((float32x4_t *)v946 + v358++);
              v363 = *((float32x4_t *)v946 + ((int)v358 % (int)v359));
              v364 = vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v363, (int32x4_t)v363), (int8x16_t)v363, 0xCuLL), v362)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v362, (int32x4_t)v362), (int8x16_t)v362, 0xCuLL), v363);
              v365 = vmulq_f32(v364, v364);
              v366 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v365, 2), v365), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v365.f32, 1)).f32[0];
              if (v366 >= 0.000001)
              {
                v367 = v366;
                v368 = vrsqrte_f32((float32x2_t)LODWORD(v366));
                v369 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v367), vmul_f32(v368, v368)), v368);
                v361 = vmlaq_n_f32(v361, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v364, (int32x4_t)v364), (int8x16_t)v364, 0xCuLL), vmul_f32(v369, vrsqrts_f32((float32x2_t)LODWORD(v367), vmul_f32(v369, v369))).f32[0]);
              }
            }
            while (v360 != v358);
          }
          v429 = vmulq_f32(v361, v361);
          v430 = vaddq_f32(vaddq_f32(v429, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v429.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v429, 2)).f32[0];
          if (v430 >= 0.000001)
          {
            v431 = v430;
            v432 = vrsqrte_f32((float32x2_t)LODWORD(v430));
            v433 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v431), vmul_f32(v432, v432)), v432);
            v434 = vmulq_n_f32(v361, vmul_f32(v433, vrsqrts_f32((float32x2_t)LODWORD(v431), vmul_f32(v433, v433))).f32[0]);
            v435 = *(float32x4_t *)v946;
            v960 = 0;
            v959 = 0;
            v961 = 0;
            v436 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v434, (int32x4_t)v434), (int8x16_t)v434, 0xCuLL);
            *(_OWORD *)v955 = 0u;
            v956 = 0u;
            v957 = 1065353216;
            _ZF = v344 == v946;
            v899 = v434;
            v891 = v436;
            v438 = 0;
            if (_ZF)
            {
              v478 = 0;
              v953 = 0;
              v952 = 0;
              v954 = 0;
            }
            else
            {
              v439 = vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v435, (int32x4_t)v435), (int8x16_t)v435, 0xCuLL), v434)), v435, v436);
              v440 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v439, (int32x4_t)v439), (int8x16_t)v439, 0xCuLL);
              v441 = (int32x4_t)vmulq_f32(v439, v439);
              v441.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v441, 2), *(float32x2_t *)v441.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v441.i8, 1)).u32[0];
              v442 = vrsqrte_f32((float32x2_t)v441.u32[0]);
              v443 = vmul_f32(vrsqrts_f32((float32x2_t)v441.u32[0], vmul_f32(v442, v442)), v442);
              v903 = vmulq_n_f32(v440, vmul_f32(v443, vrsqrts_f32((float32x2_t)v441.u32[0], vmul_f32(v443, v443))).f32[0]);
              v444 = vmlaq_f32(vnegq_f32(vmulq_f32(v903, v436)), v434, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v903, (int32x4_t)v903), (int8x16_t)v903, 0xCuLL));
              v445 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v444, (int32x4_t)v444), (int8x16_t)v444, 0xCuLL);
              v446 = (int32x4_t)vmulq_f32(v444, v444);
              v446.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v446, 2), *(float32x2_t *)v446.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v446.i8, 1)).u32[0];
              v447 = vrsqrte_f32((float32x2_t)v446.u32[0]);
              v448 = vmul_f32(vrsqrts_f32((float32x2_t)v446.u32[0], vmul_f32(v447, v447)), v447);
              v894 = vmulq_n_f32(v445, vmul_f32(v448, vrsqrts_f32((float32x2_t)v446.u32[0], vmul_f32(v448, v448))).f32[0]);
              do
              {
                v449 = v357[v438];
                v450 = (int32x4_t)vmulq_f32(v449, v903);
                v451 = vmulq_f32(v449, v894);
                *(int32x2_t *)v451.f32 = vzip1_s32((int32x2_t)vadd_f32(vadd_f32(*(float32x2_t *)v450.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v450.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v450, 2)), (int32x2_t)vadd_f32(vadd_f32(*(float32x2_t *)v451.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v451.f32, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v451, 2)));
                v949 = (void *)v451.i64[0];
                v452 = (char *)v960;
                if ((unint64_t)v960 >= v961)
                {
                  v454 = ((_BYTE *)v960 - (_BYTE *)v959) >> 3;
                  if ((unint64_t)(v454 + 1) >> 61)
                    sub_1DCAE4C44();
                  v455 = (uint64_t)(v961 - (_QWORD)v959) >> 2;
                  if (v455 <= v454 + 1)
                    v455 = v454 + 1;
                  if (v961 - (unint64_t)v959 >= 0x7FFFFFFFFFFFFFF8)
                    v456 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v456 = v455;
                  if (v456)
                  {
                    v457 = (char *)sub_1DCAE79A4((uint64_t)&v961, v456);
                    v451.i64[0] = (uint64_t)v949;
                  }
                  else
                  {
                    v457 = 0;
                  }
                  v458 = &v457[8 * v454];
                  *(_QWORD *)v458 = v451.i64[0];
                  v453 = v458 + 8;
                  v459 = (char *)v960;
                  v460 = (char *)v959;
                  if (v960 != v959)
                  {
                    do
                    {
                      v461 = *((_QWORD *)v459 - 1);
                      v459 -= 8;
                      v451.i64[0] = v461;
                      *((_QWORD *)v458 - 1) = v461;
                      v458 -= 8;
                    }
                    while (v459 != v460);
                    v459 = (char *)v959;
                  }
                  v959 = v458;
                  v960 = v453;
                  v961 = (unint64_t)&v457[8 * v456];
                  if (v459)
                    operator delete(v459);
                }
                else
                {
                  *(_QWORD *)v960 = v451.i64[0];
                  v453 = v452 + 8;
                }
                v960 = v453;
                if (sub_1DCB01980(v955, (unint64_t *)&v949, v451))
                {
                  v952 = &v949;
                  v463 = sub_1DCB01A80((uint64_t)v955, (unint64_t *)&v949, v462, (uint64_t)&unk_1DCC58300, (float32x2_t **)&v952);
                  ++v463[3].i32[0];
                }
                else
                {
                  v952 = &v949;
                  sub_1DCB01A80((uint64_t)v955, (unint64_t *)&v949, v462, (uint64_t)&unk_1DCC58300, (float32x2_t **)&v952)[3].i32[0] = 0;
                }
                v952 = &v949;
                if (sub_1DCB01A80((uint64_t)v955, (unint64_t *)&v949, v464, (uint64_t)&unk_1DCC58300, (float32x2_t **)&v952)[3].i32[0] >= 3)
                {
                  v493 = 0;
                  goto LABEL_499;
                }
                ++v438;
                v357 = (float32x4_t *)v946;
              }
              while (v438 < ((_BYTE *)v947 - (_BYTE *)v946) >> 4);
              v465 = v959;
              v953 = 0;
              v952 = 0;
              v954 = 0;
              v438 = 0;
              if (v960 == v959)
              {
                v478 = 0;
              }
              else
              {
                v466 = 0;
                v467 = ((_BYTE *)v960 - (_BYTE *)v959) >> 3;
                do
                {
                  v468 = v465[v466++];
                  v469 = v465[v466 % v467];
                  if (v438 >= (unint64_t)v954)
                  {
                    v470 = (uint64_t)(v438 - (_QWORD)v952) >> 4;
                    if ((unint64_t)(v470 + 1) >> 60)
                      sub_1DCAE4C44();
                    v471 = (v954 - (_BYTE *)v952) >> 3;
                    if (v471 <= v470 + 1)
                      v471 = v470 + 1;
                    if ((unint64_t)(v954 - (_BYTE *)v952) >= 0x7FFFFFFFFFFFFFF0)
                      v472 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v472 = v471;
                    if (v472)
                      v473 = (char *)sub_1DCAFBD5C((uint64_t)&v954, v472);
                    else
                      v473 = 0;
                    v474 = &v473[16 * v470];
                    *(_QWORD *)v474 = v468;
                    *((_QWORD *)v474 + 1) = v469;
                    v475 = (char *)v953;
                    v476 = (char *)v952;
                    v477 = v474;
                    if (v953 != v952)
                    {
                      do
                      {
                        *((_OWORD *)v477 - 1) = *((_OWORD *)v475 - 1);
                        v477 -= 16;
                        v475 -= 16;
                      }
                      while (v475 != v476);
                      v475 = (char *)v952;
                    }
                    v438 = (unint64_t)(v474 + 16);
                    v952 = v477;
                    v953 = v474 + 16;
                    v954 = &v473[16 * v472];
                    if (v475)
                      operator delete(v475);
                  }
                  else
                  {
                    *(_QWORD *)v438 = v468;
                    *(_QWORD *)(v438 + 8) = v469;
                    v438 += 16;
                  }
                  v953 = (void *)v438;
                  v465 = v959;
                  v467 = ((_BYTE *)v960 - (_BYTE *)v959) >> 3;
                }
                while (v467 > v466);
                v478 = v952;
              }
            }
            v950 = 0;
            v949 = 0;
            v951 = 0;
            sub_1DCB02E34(&v949, v478, v438, (uint64_t)(v438 - (_QWORD)v478) >> 4);
            v510 = (char *)v949;
            if (v950 == v949)
            {
              v513 = 0;
              v514 = 0;
            }
            else
            {
              v511 = 0;
              v512 = 0;
              v513 = 0;
              v514 = 0;
              do
              {
                v515 = (float32x2_t *)&v510[16 * v512];
                v517 = *v515;
                v516 = v515[1];
                v518 = vcgt_f32(*v515, v516);
                if ((v518.i8[0] & 1) != 0 || (vceq_f32(v517, v516).u8[0] & 1) != 0 && (v518.i8[4] & 1) != 0)
                {
                  *v515 = v516;
                  *((float32x2_t *)v949 + 2 * v512 + 1) = v517;
                  v510 = (char *)v949;
                  v519 = (float32x2_t *)((char *)v949 + 16 * v512);
                  v517 = *v519;
                  v516 = v519[1];
                }
                v520 = &v510[16 * v512];
                if (v513 >= v511)
                {
                  v522 = 0xAAAAAAAAAAAAAAABLL * (v513 - v514) + 1;
                  if (v522 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_870;
                  if (0x5555555555555556 * (v511 - v514) > v522)
                    v522 = 0x5555555555555556 * (v511 - v514);
                  if (0xAAAAAAAAAAAAAAABLL * (v511 - v514) >= 0x555555555555555)
                    v523 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v523 = v522;
                  if (v523)
                  {
                    if (v523 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_871;
                    v524 = (char *)operator new(24 * v523);
                  }
                  else
                  {
                    v524 = 0;
                  }
                  v525 = &v524[8 * (v513 - v514)];
                  *(float32x2_t *)v525 = v517;
                  *((_QWORD *)v525 + 1) = v520;
                  v525[16] = 1;
                  *(_DWORD *)(v525 + 17) = 0;
                  *((_DWORD *)v525 + 5) = 0;
                  if (v513 == v514)
                  {
                    v514 = (float32x2_t *)&v524[8 * (v513 - v514)];
                  }
                  else
                  {
                    v526 = (float32x2_t *)&v524[8 * (v513 - v514)];
                    do
                    {
                      v527 = *(_OWORD *)v513[-3].f32;
                      v526[-1] = v513[-1];
                      *(_OWORD *)v526[-3].f32 = v527;
                      v526 -= 3;
                      v513 -= 3;
                    }
                    while (v513 != v514);
                    v513 = v514;
                    v514 = v526;
                  }
                  v511 = (float32x2_t *)&v524[24 * v523];
                  v521 = (float32x2_t *)(v525 + 24);
                  if (v513)
                    operator delete(v513);
                }
                else
                {
                  *v513 = v517;
                  v513[1] = (float32x2_t)v520;
                  v513[2].i8[0] = 1;
                  *(__int32 *)((char *)v513[2].i32 + 1) = 0;
                  v521 = v513 + 3;
                  v513[2].i32[1] = 0;
                }
                if (v521 >= v511)
                {
                  v528 = 0xAAAAAAAAAAAAAAABLL * (v521 - v514) + 1;
                  if (v528 > 0xAAAAAAAAAAAAAAALL)
LABEL_870:
                    sub_1DCAE4C44();
                  if (0x5555555555555556 * (v511 - v514) > v528)
                    v528 = 0x5555555555555556 * (v511 - v514);
                  if (0xAAAAAAAAAAAAAAABLL * (v511 - v514) >= 0x555555555555555)
                    v529 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v529 = v528;
                  if (v529)
                  {
                    if (v529 > 0xAAAAAAAAAAAAAAALL)
LABEL_871:
                      sub_1DCAE4CDC();
                    v530 = (char *)operator new(24 * v529);
                  }
                  else
                  {
                    v530 = 0;
                  }
                  v531 = (float32x2_t *)&v530[8 * (v521 - v514)];
                  *v531 = v516;
                  v511 = (float32x2_t *)&v530[24 * v529];
                  v513 = v531 + 3;
                  v531[1] = (float32x2_t)v520;
                  v531[2] = 0;
                  if (v521 == v514)
                    goto LABEL_471;
                  do
                  {
                    v532 = *(_OWORD *)v521[-3].f32;
                    v531[-1] = v521[-1];
                    *(_OWORD *)v531[-3].f32 = v532;
                    v531 -= 3;
                    v521 -= 3;
                  }
                  while (v521 != v514);
                  if (v514)
LABEL_471:
                    operator delete(v514);
                  v514 = v531;
                }
                else
                {
                  *v521 = v516;
                  v513 = v521 + 3;
                  v521[1] = (float32x2_t)v520;
                  v521[2] = 0;
                }
                ++v512;
                v510 = (char *)v949;
              }
              while (v512 < (v950 - (_BYTE *)v949) >> 4);
            }
            v533 = ((char *)v513 - (char *)v514) / 24;
            v534 = 126 - 2 * __clz(v533);
            v958 = sub_1DCB01CE0;
            if (v513 == v514)
              v535 = 0;
            else
              v535 = v534;
            sub_1DCB01F6C((uint64_t)v514, (unint64_t)v513, (uint64_t (**)(__int128 *, __int128 *))&v958, v535, 1);
            v536 = operator new();
            sub_1DCB4FF58(v536);
            if (v513 != v514)
            {
              v537 = 0;
              if (v533 <= 1)
                v538 = 1;
              else
                v538 = ((char *)v513 - (char *)v514) / 24;
              v904 = v538;
              v539 = v514 + 2;
              v540 = 1;
              while (1)
              {
                v541 = (uint64_t *)v539[-1];
                if ((v539->i8[0] & 1) != 0)
                {
                  sub_1DCB50184(v536, *(_QWORD *)&v539[-1]);
                  v545 = (float32x2_t *)sub_1DCB50C84(v536, v541);
                  v546 = (float32x2_t *)sub_1DCB50D84(v536, v541);
                  if ((sub_1DCB01D6C(v546, (float32x2_t *)v541, v547) & 1) != 0
                    || (sub_1DCB01D6C(v545, (float32x2_t *)v541, v548) & 1) != 0)
                  {
                    goto LABEL_492;
                  }
                }
                else
                {
                  v542 = (float32x2_t *)sub_1DCB50C84(v536, *(uint64_t **)&v539[-1]);
                  v543 = (float32x2_t *)sub_1DCB50D84(v536, v541);
                  if ((sub_1DCB01D6C(v543, v542, v544) & 1) != 0)
                    goto LABEL_492;
                  sub_1DCB50800(v536, v541);
                }
                v539 += 3;
                v540 = v533 > ++v537;
                if (v904 == v537)
                  goto LABEL_492;
              }
            }
            v540 = 0;
LABEL_492:
            v549 = sub_1DCB50180(v536);
            MEMORY[0x1DF0D228C](v549, 0x1020C40F89CB87BLL);
            if (v514)
              operator delete(v514);
            if (v949)
            {
              v950 = v949;
              operator delete(v949);
            }
            if (v952)
            {
              v953 = v952;
              operator delete(v952);
            }
            v493 = !v540;
LABEL_499:
            sub_1DCAE6B78((uint64_t)v955);
            if (v959)
            {
              v960 = v959;
              operator delete(v959);
            }
            if (v493)
            {
              v551 = v947;
              v552 = (float32x4_t *)v946;
              v553 = v891;
              if (v947 != v946)
              {
                v554 = 0;
                do
                {
                  v550 = v552[v554];
                  v555 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32(v550, v553)), v899, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v550, (int32x4_t)v550), (int8x16_t)v550, 0xCuLL));
                  v556 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v555, v555), (int8x16_t)v555, 0xCuLL);
                  v557 = vmlaq_f32(vnegq_f32(vmulq_f32(v556, v553)), v899, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v556, (int32x4_t)v556), (int8x16_t)v556, 0xCuLL));
                  v558 = vmulq_f32(v557, v557);
                  v559 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v558, 2), v558), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v558.f32, 1)).f32[0];
                  if (v559 >= 0.000001)
                  {
                    v560 = v559;
                    v561 = vrsqrte_f32((float32x2_t)LODWORD(v559));
                    v562 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v560), vmul_f32(v561, v561)), v561);
                    v563 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v557, (int32x4_t)v557), (int8x16_t)v557, 0xCuLL), vmul_f32(v562, vrsqrts_f32((float32x2_t)LODWORD(v560), vmul_f32(v562, v562))).f32[0]);
                    v564 = vmulq_f32(v563, v550);
                    v550 = vaddq_f32(vaddq_f32(v564, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v564.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v564, 2));
                    if (fabsf(v550.f32[0]) >= 0.000001)
                    {
                      v550 = vmulq_n_f32(v563, v550.f32[0]);
                      v552[v554] = v550;
                      v551 = v947;
                      v552 = (float32x4_t *)v946;
                    }
                    v553 = v891;
                  }
                  ++v554;
                }
                while (v554 < (v551 - (_BYTE *)v552) >> 4);
              }
              v953 = 0;
              v954 = 0;
              v952 = &v953;
              for (j = (uint64_t)v944; (_QWORD **)j != &v943; j = *(_QWORD *)(j + 8))
              {
                if (sub_1DCB018C8(j, (uint64_t)&v943, &v946, v899))
                  sub_1DCB02EEC((uint64_t **)&v952, (uint64_t *)&v953, (int *)(j + 16), (_DWORD *)(j + 16));
              }
              v577 = v945;
              if (v945 < 3)
                goto LABEL_686;
              v578 = 0;
              v579 = v944;
              v580 = v945;
              while (1)
              {
                if (v580 == 3)
                {
                  v657 = v944;
                  if (v944 == v579)
                    v658 = (int *)&v943;
                  else
                    v658 = v579;
                  v659 = *(_QWORD *)v658;
                  if (*((_QWORD ***)v579 + 1) != &v943)
                    v657 = (int *)*((_QWORD *)v579 + 1);
                  v550.i32[0] = *(_DWORD *)(v659 + 16);
                  v550.i32[1] = v579[4];
                  v550.i32[2] = v657[4];
                  v660 = (float32x4_t *)v924;
                  if ((unint64_t)v924 >= v925)
                  {
                    v909 = v550;
                    v664 = ((_BYTE *)v924 - (_BYTE *)v923) >> 4;
                    if ((unint64_t)(v664 + 1) >> 60)
                      sub_1DCAE4C44();
                    v665 = (uint64_t)(v925 - (_QWORD)v923) >> 3;
                    if (v665 <= v664 + 1)
                      v665 = v664 + 1;
                    if (v925 - (unint64_t)v923 >= 0x7FFFFFFFFFFFFFF0)
                      v666 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v666 = v665;
                    if (v666)
                      v667 = (char *)sub_1DCAFBD5C((uint64_t)&v925, v666);
                    else
                      v667 = 0;
                    v672 = (float32x4_t *)&v667[16 * v664];
                    *v672 = v909;
                    v661 = v672 + 1;
                    v673 = (float32x4_t *)v924;
                    v674 = (float32x4_t *)v923;
                    if (v924 != v923)
                    {
                      do
                      {
                        v675 = v673[-1];
                        --v673;
                        v672[-1] = v675;
                        --v672;
                      }
                      while (v673 != v674);
                      v673 = (float32x4_t *)v923;
                    }
                    v923 = v672;
                    v924 = v661;
                    v925 = (unint64_t)&v667[16 * v666];
                    if (v673)
                      operator delete(v673);
                  }
                  else
                  {
                    *(float32x4_t *)v924 = v550;
                    v661 = v660 + 1;
                  }
                  v924 = v661;
                  goto LABEL_686;
                }
                v895 = v578;
                sub_1DCB03194((uint64_t *)&v941, (uint64_t)&v952);
                if (v942[0])
                {
                  v581 = v579[4];
                  v582 = v942;
                  v583 = v942[0];
                  do
                  {
                    v584 = v583;
                    v585 = v582;
                    v586 = *((_DWORD *)v583 + 7);
                    if (v586 >= v581)
                      v582 = (_QWORD **)v583;
                    else
                      ++v583;
                    v583 = (_QWORD *)*v583;
                  }
                  while (v583);
                  if (v582 != v942)
                  {
                    if (v586 < v581)
                      v584 = v585;
                    if (v581 >= *((_DWORD *)v584 + 7))
                    {
                      sub_1DCAE4E44((uint64_t)&v941, v942[0]);
LABEL_593:
                      v580 = v945;
                      if (*((_QWORD ***)v579 + 1) == &v943)
                        v579 = v944;
                      else
                        v579 = (int *)*((_QWORD *)v579 + 1);
                      v578 = v895 + 1;
                      goto LABEL_643;
                    }
                  }
                }
                if (v944 == v579)
                  v587 = (int *)&v943;
                else
                  v587 = v579;
                v588 = *(_QWORD *)v587;
                if (*((_QWORD ***)v579 + 1) == &v943)
                  v589 = v944;
                else
                  v589 = (int *)*((_QWORD *)v579 + 1);
                *(_QWORD *)&v956 = 0;
                v955[1] = 0;
                v955[0] = 0;
                v590 = *(int *)(v588 + 16);
                v591 = v946;
                v592 = operator new(0x10uLL);
                v906 = v591[v590];
                *v592 = v906;
                *(_QWORD *)&v956 = v592 + 1;
                v955[0] = v592;
                v955[1] = v592 + 1;
                v593 = v579[4];
                v594 = operator new(0x20uLL);
                v595 = v591[v593];
                *v594 = v906;
                v594[1] = v595;
                v955[0] = v594;
                v955[1] = v594 + 2;
                *(_QWORD *)&v956 = v594 + 2;
                operator delete(v592);
                v955[1] = v594 + 2;
                v596 = v589[4];
                v597 = v946;
                if ((unint64_t)(v594 + 2) >= (unint64_t)v956)
                {
                  v599 = ((char *)(v594 + 2) - (char *)v955[0]) >> 4;
                  if ((unint64_t)(v599 + 1) >> 60)
                    sub_1DCAE4C44();
                  v600 = (uint64_t)(v956 - (unint64_t)v955[0]) >> 3;
                  if (v600 <= v599 + 1)
                    v600 = v599 + 1;
                  if ((unint64_t)v956 - (unint64_t)v955[0] >= 0x7FFFFFFFFFFFFFF0)
                    v601 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v601 = v600;
                  if (v601)
                    v602 = (char *)sub_1DCAFBD5C((uint64_t)&v956, v601);
                  else
                    v602 = 0;
                  v603 = &v602[16 * v599];
                  *(_OWORD *)v603 = v597[v596];
                  v598 = v603 + 16;
                  v604 = (char *)v955[1];
                  v605 = (char *)v955[0];
                  if (v955[1] != v955[0])
                  {
                    do
                    {
                      v606 = *((_OWORD *)v604 - 1);
                      v604 -= 16;
                      *((_OWORD *)v603 - 1) = v606;
                      v603 -= 16;
                    }
                    while (v604 != v605);
                    v604 = (char *)v955[0];
                  }
                  v955[0] = v603;
                  v955[1] = v598;
                  *(_QWORD *)&v956 = &v602[16 * v601];
                  if (v604)
                    operator delete(v604);
                }
                else
                {
                  v594[2] = *((_OWORD *)v946 + v596);
                  v598 = v594 + 3;
                }
                v955[1] = v598;
                v607 = v941;
                if (v941 == v942)
                {
LABEL_582:
                  v625 = 1;
                  goto LABEL_583;
                }
                while (1)
                {
                  v608 = *((int *)v607 + 7);
                  if ((_DWORD)v608 != *(_DWORD *)(v588 + 16) && (_DWORD)v608 != v589[4])
                    break;
LABEL_576:
                  v623 = v607[1];
                  if (v623)
                  {
                    do
                    {
                      v624 = (_QWORD **)v623;
                      v623 = (_QWORD *)*v623;
                    }
                    while (v623);
                  }
                  else
                  {
                    do
                    {
                      v624 = (_QWORD **)v607[2];
                      _ZF = *v624 == v607;
                      v607 = v624;
                    }
                    while (!_ZF);
                  }
                  v607 = v624;
                  if (v624 == v942)
                    goto LABEL_582;
                }
                v907 = *((float32x4_t *)v946 + v608);
                v961 = 0;
                v959 = 0;
                v960 = 0;
                sub_1DCB0311C(&v959, v955[0], (uint64_t)v955[1], ((char *)v955[1] - (char *)v955[0]) >> 4);
                v609 = *(float32x4_t *)v959;
                v610 = *((float32x4_t *)v959 + 1);
                v611 = vsubq_f32(v610, *(float32x4_t *)v959);
                v612 = *((float32x4_t *)v959 + 2);
                v613 = vsubq_f32(v612, v610);
                v614 = vsubq_f32(v907, v610);
                v615 = (int32x4_t)vnegq_f32(v611);
                v616 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v614, (int32x4_t)v614), (int8x16_t)v614, 0xCuLL);
                v617 = vmulq_f32(vmlaq_f32(vmulq_f32(v611, v616), v614, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v615, v615), (int8x16_t)v615, 0xCuLL)), vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v613, (int32x4_t)v613), (int8x16_t)v613, 0xCuLL), v614)), v616, v613));
                if (vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v617, 2), v617), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v617.f32, 1)).f32[0] < -1.0e-12)break;
                v618 = vsubq_f32(v907, v609);
                v619 = vsubq_f32(v612, v609);
                v620 = vsubq_f32(v907, v612);
                v621 = vmulq_f32(vmlaq_f32(vnegq_f32(vmulq_f32(v619, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v620, (int32x4_t)v620), (int8x16_t)v620, 0xCuLL))), v620, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v619, (int32x4_t)v619), (int8x16_t)v619, 0xCuLL)), vmlaq_f32(vnegq_f32(vmulq_f32(v618, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v611, (int32x4_t)v611),
                                              (int8x16_t)v611,
                                              0xCuLL))),
                           v611,
                           (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v618, (int32x4_t)v618), (int8x16_t)v618, 0xCuLL)));
                v622 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v621, 2), v621), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v621.f32, 1)).f32[0];
                v960 = v959;
                operator delete(v959);
                if (v622 < -1.0e-12)
                  goto LABEL_576;
                v625 = 0;
LABEL_583:
                if (v955[0])
                {
                  v955[1] = v955[0];
                  operator delete(v955[0]);
                }
                sub_1DCAE4E44((uint64_t)&v941, v942[0]);
                if (!v625)
                  goto LABEL_593;
                v626 = v944;
                if (v944 == v579)
                  v627 = (int *)&v943;
                else
                  v627 = v579;
                v628 = *(_QWORD *)v627;
                if (*((_QWORD ***)v579 + 1) != &v943)
                  v626 = (int *)*((_QWORD *)v579 + 1);
                v550.i32[0] = *(_DWORD *)(v628 + 16);
                v550.i32[1] = v579[4];
                v550.i32[2] = v626[4];
                v629 = (float32x4_t *)v924;
                if ((unint64_t)v924 >= v925)
                {
                  v908 = v550;
                  v631 = ((_BYTE *)v924 - (_BYTE *)v923) >> 4;
                  if ((unint64_t)(v631 + 1) >> 60)
                    sub_1DCAE4C44();
                  v632 = (uint64_t)(v925 - (_QWORD)v923) >> 3;
                  if (v632 <= v631 + 1)
                    v632 = v631 + 1;
                  if (v925 - (unint64_t)v923 >= 0x7FFFFFFFFFFFFFF0)
                    v633 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v633 = v632;
                  if (v633)
                    v634 = (char *)sub_1DCAFBD5C((uint64_t)&v925, v633);
                  else
                    v634 = 0;
                  v635 = (float32x4_t *)&v634[16 * v631];
                  *v635 = v908;
                  v630 = v635 + 1;
                  v636 = (float32x4_t *)v924;
                  v637 = (float32x4_t *)v923;
                  if (v924 != v923)
                  {
                    do
                    {
                      v638 = v636[-1];
                      --v636;
                      v635[-1] = v638;
                      --v635;
                    }
                    while (v636 != v637);
                    v636 = (float32x4_t *)v923;
                  }
                  v923 = v635;
                  v924 = v630;
                  v925 = (unint64_t)&v634[16 * v633];
                  if (v636)
                    operator delete(v636);
                }
                else
                {
                  *(float32x4_t *)v924 = v550;
                  v630 = v629 + 1;
                }
                v924 = v630;
                v639 = *(_QWORD *)v579;
                v640 = *((_QWORD *)v579 + 1);
                *(_QWORD *)(v639 + 8) = v640;
                **((_QWORD **)v579 + 1) = v639;
                --v945;
                operator delete(v579);
                v641 = (char *)v953;
                if (v953)
                {
                  v642 = *(_DWORD *)(v640 + 16);
                  v643 = &v953;
                  v644 = (void **)v953;
                  do
                  {
                    v645 = v644;
                    v646 = v643;
                    v647 = *((_DWORD *)v644 + 7);
                    if (v647 >= v642)
                      v643 = v644;
                    else
                      ++v644;
                    v644 = (void **)*v644;
                  }
                  while (v644);
                  if (v643 != &v953)
                  {
                    if (v647 < v642)
                      v645 = v646;
                    if (v642 >= *((_DWORD *)v645 + 7) && !sub_1DCB018C8(v640, (uint64_t)&v943, &v946, v899))
                    {
                      sub_1DCB0326C((uint64_t)&v952, (int *)(v640 + 16));
                      v641 = (char *)v953;
                    }
                  }
                  v648 = (int **)&v943;
                  if (v944 != (int *)v640)
                    v648 = (int **)v640;
                  v579 = *v648;
                  if (v641)
                  {
                    v649 = v579[4];
                    v650 = &v953;
                    do
                    {
                      v651 = (void **)v641;
                      v652 = v650;
                      v653 = *((_DWORD *)v641 + 7);
                      if (v653 >= v649)
                        v654 = (char **)v641;
                      else
                        v654 = (char **)(v641 + 8);
                      if (v653 >= v649)
                        v650 = (void **)v641;
                      v641 = *v654;
                    }
                    while (*v654);
                    if (v650 != &v953)
                    {
                      if (v653 < v649)
                        v651 = v652;
                      if (v649 >= *((_DWORD *)v651 + 7) && !sub_1DCB018C8((uint64_t)v579, (uint64_t)&v943, &v946, v899))
                        sub_1DCB0326C((uint64_t)&v952, v579 + 4);
                    }
                  }
                }
                else
                {
                  v655 = (int **)&v943;
                  if (v944 != (int *)v640)
                    v655 = (int **)v640;
                  v579 = *v655;
                }
                v578 = 0;
                v580 = v945;
                v577 = v945;
LABEL_643:
                if (v578 > v577 || v580 <= 2)
                {
LABEL_686:
                  sub_1DCAE4E44((uint64_t)&v952, v953);
                  goto LABEL_687;
                }
              }
              v960 = v959;
              operator delete(v959);
              goto LABEL_576;
            }
            v566 = (char *)v923;
            v924 = v923;
            if ((unint64_t)((((_BYTE *)v947 - (_BYTE *)v946) >> 4) - 3) <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v567 = 1;
              do
              {
                LODWORD(v568) = 0;
                DWORD1(v568) = v567++;
                *((_QWORD *)&v568 + 1) = v567;
                if ((unint64_t)v566 >= v925)
                {
                  v905 = v568;
                  v569 = (v566 - (_BYTE *)v923) >> 4;
                  if ((unint64_t)(v569 + 1) >> 60)
                    sub_1DCAE4C44();
                  v570 = (uint64_t)(v925 - (_QWORD)v923) >> 3;
                  if (v570 <= v569 + 1)
                    v570 = v569 + 1;
                  if (v925 - (unint64_t)v923 >= 0x7FFFFFFFFFFFFFF0)
                    v571 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v571 = v570;
                  if (v571)
                    v572 = (char *)sub_1DCAFBD5C((uint64_t)&v925, v571);
                  else
                    v572 = 0;
                  v573 = &v572[16 * v569];
                  *(_OWORD *)v573 = v905;
                  v566 = v573 + 16;
                  v574 = (char *)v924;
                  v575 = (char *)v923;
                  if (v924 != v923)
                  {
                    do
                    {
                      v576 = *((_OWORD *)v574 - 1);
                      v574 -= 16;
                      *((_OWORD *)v573 - 1) = v576;
                      v573 -= 16;
                    }
                    while (v574 != v575);
                    v574 = (char *)v923;
                  }
                  v923 = v573;
                  v924 = v566;
                  v925 = (unint64_t)&v572[16 * v571];
                  if (v574)
                    operator delete(v574);
                }
                else
                {
                  *(_OWORD *)v566 = v568;
                  v566 += 16;
                }
                v924 = v566;
              }
              while ((((_BYTE *)v947 - (_BYTE *)v946) >> 4) - 1 > v567);
            }
          }
LABEL_687:
          sub_1DCB032E4(&v943);
          if (v946)
          {
            v947 = v946;
            operator delete(v946);
          }
          v489 = (int *)v924;
          goto LABEL_690;
        }
        v321 = *v911 + 12 * *v304;
        v240.i64[0] = *(_QWORD *)v321;
        v240.i32[2] = *(_DWORD *)(v321 + 8);
        v322 = *v911 + 12 * v304[1];
        v239.i64[0] = *(_QWORD *)v322;
        v239.i32[2] = *(_DWORD *)(v322 + 8);
        v323 = *v911 + 12 * v304[2];
        v238.i64[0] = *(_QWORD *)v323;
        v238.i32[2] = *(_DWORD *)(v323 + 8);
        v324 = *v911 + 12 * v304[3];
        v237.i64[0] = *(_QWORD *)v324;
        v237.i32[2] = *(_DWORD *)(v324 + 8);
        v325 = vsubq_f32(v239, v240);
        v326 = vsubq_f32(v237, v238);
        v327 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v325, (int32x4_t)v325), (int8x16_t)v325, 0xCuLL);
        v328 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v326, (int32x4_t)v326), (int8x16_t)v326, 0xCuLL);
        v329 = vsubq_f32(v237, v239);
        v330 = vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v329, (int32x4_t)v329), (int8x16_t)v329, 0xCuLL), v325)), v327, v329);
        v331 = vsubq_f32(v238, v239);
        v332 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v331, (int32x4_t)v331), (int8x16_t)v331, 0xCuLL);
        v333 = vmlaq_f32(vnegq_f32(vmulq_f32(v328, v331)), v332, v326);
        v334 = vmulq_f32(v330, v333);
        if (vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v334, 2), v334), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v334.f32, 1)).f32[0] >= 0.0)
        {
          v370 = vsubq_f32(v238, v240);
          v371 = vmlaq_f32(vnegq_f32(vmulq_f32(v328, v370)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v370, (int32x4_t)v370), (int8x16_t)v370, 0xCuLL), v326);
          v372 = vmlaq_f32(vnegq_f32(vmulq_f32(v332, v325)), v327, v331);
          v373 = vmulq_f32(v371, v372);
          if (vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v373, 2), v373), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v373.f32, 1)).f32[0] < 0.0)
          {
            v335 = sub_1DCAFBD5C((uint64_t)&v925, 1uLL);
            *v335 = xmmword_1DCC58220;
            v374 = (char *)(v335 + 1);
            v375 = (char *)v924;
            v376 = (char *)v923;
            v377 = (char *)v335;
            if (v924 != v923)
            {
              do
              {
                v378 = *((_OWORD *)v375 - 1);
                v375 -= 16;
                *((_OWORD *)v377 - 1) = v378;
                v377 -= 16;
              }
              while (v375 != v376);
              v375 = (char *)v923;
            }
            v379 = (char *)&v335[v235];
            v923 = v377;
            v924 = v335 + 1;
            v925 = (unint64_t)v379;
            if (v375)
            {
              operator delete(v375);
              v379 = (char *)v925;
            }
            v924 = v335 + 1;
            if (v374 >= v379)
            {
              v380 = (v374 - (_BYTE *)v923) >> 4;
              if ((unint64_t)(v380 + 1) >> 60)
                goto LABEL_877;
              v381 = v379 - (_BYTE *)v923;
              v382 = v381 >> 3;
              if (v381 >> 3 <= (unint64_t)(v380 + 1))
                v382 = v380 + 1;
              if ((unint64_t)v381 >= 0x7FFFFFFFFFFFFFF0)
                v235 = 0xFFFFFFFFFFFFFFFLL;
              else
                v235 = v382;
              if (v235)
                v383 = (char *)sub_1DCAFBD5C((uint64_t)&v925, v235);
              else
                v383 = 0;
              v503 = &v383[16 * v380];
              v240.i32[3] = 0;
              *(_OWORD *)v503 = xmmword_1DCC58230;
              v489 = (int *)(v503 + 16);
              v504 = (char *)v924;
              v662 = (char *)v923;
              if (v924 == v923)
                goto LABEL_676;
              do
              {
                v663 = *((_OWORD *)v504 - 1);
                v504 -= 16;
                v240.i32[3] = HIDWORD(v663);
                *((_OWORD *)v503 - 1) = v663;
                v503 -= 16;
              }
              while (v504 != v662);
              goto LABEL_675;
            }
LABEL_392:
            v240 = (float32x4_t)xmmword_1DCC58230;
            goto LABEL_393;
          }
          v479 = (int32x4_t)vmulq_f32(v330, v330);
          v480 = (int32x4_t)vmulq_f32(v333, v333);
          v481 = (int32x4_t)vmulq_f32(v372, v372);
          v482 = (int32x4_t)vmulq_f32(v371, v371);
          *(float32x2_t *)v482.i8 = vabd_f32(vabs_f32(vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v479, v481), (float32x2_t)vzip1_s32(*(int32x2_t *)v479.i8, *(int32x2_t *)v481.i8)), (float32x2_t)vzip2_s32(*(int32x2_t *)v479.i8, *(int32x2_t *)v481.i8))), vabs_f32(vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v480, v482), (float32x2_t)vzip1_s32(*(int32x2_t *)v480.i8, *(int32x2_t *)v482.i8)), (float32x2_t)vzip2_s32(*(int32x2_t *)v480.i8, *(int32x2_t *)v482.i8))));
          if ((vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v482.i8, 1), *(float32x2_t *)v482.i8).u8[0] & 1) != 0)
          {
            v335 = sub_1DCAFBD5C((uint64_t)&v925, 1uLL);
            *v335 = xmmword_1DCC58220;
            v483 = (char *)(v335 + 1);
            v484 = (char *)v924;
            v485 = (char *)v923;
            v486 = (char *)v335;
            if (v924 != v923)
            {
              do
              {
                v487 = *((_OWORD *)v484 - 1);
                v484 -= 16;
                *((_OWORD *)v486 - 1) = v487;
                v486 -= 16;
              }
              while (v484 != v485);
              v484 = (char *)v923;
            }
            v488 = (char *)&v335[v235];
            v923 = v486;
            v924 = v335 + 1;
            v925 = (unint64_t)v488;
            if (v484)
            {
              operator delete(v484);
              v488 = (char *)v925;
            }
            v924 = v335 + 1;
            if (v483 < v488)
              goto LABEL_392;
            v507 = (v483 - (_BYTE *)v923) >> 4;
            if ((unint64_t)(v507 + 1) >> 60)
LABEL_877:
              sub_1DCAE4C44();
            v508 = v488 - (_BYTE *)v923;
            v509 = v508 >> 3;
            if (v508 >> 3 <= (unint64_t)(v507 + 1))
              v509 = v507 + 1;
            if ((unint64_t)v508 >= 0x7FFFFFFFFFFFFFF0)
              v235 = 0xFFFFFFFFFFFFFFFLL;
            else
              v235 = v509;
            if (v235)
              v383 = (char *)sub_1DCAFBD5C((uint64_t)&v925, v235);
            else
              v383 = 0;
            v503 = &v383[16 * v507];
            v240.i32[3] = 0;
            *(_OWORD *)v503 = xmmword_1DCC58230;
            v489 = (int *)(v503 + 16);
            v504 = (char *)v924;
            v670 = (char *)v923;
            if (v924 == v923)
              goto LABEL_676;
            do
            {
              v671 = *((_OWORD *)v504 - 1);
              v504 -= 16;
              v240.i32[3] = HIDWORD(v671);
              *((_OWORD *)v503 - 1) = v671;
              v503 -= 16;
            }
            while (v504 != v670);
          }
          else
          {
            v335 = sub_1DCAFBD5C((uint64_t)&v925, 1uLL);
            *v335 = xmmword_1DCC58200;
            v494 = (char *)(v335 + 1);
            v495 = (char *)v924;
            v496 = (char *)v923;
            v497 = (char *)v335;
            if (v924 != v923)
            {
              do
              {
                v498 = *((_OWORD *)v495 - 1);
                v495 -= 16;
                *((_OWORD *)v497 - 1) = v498;
                v497 -= 16;
              }
              while (v495 != v496);
              v495 = (char *)v923;
            }
            v499 = (char *)&v335[v235];
            v923 = v497;
            v924 = v335 + 1;
            v925 = (unint64_t)v499;
            if (v495)
            {
              operator delete(v495);
              v499 = (char *)v925;
            }
            v924 = v335 + 1;
            if (v494 < v499)
              goto LABEL_185;
            v500 = (v494 - (_BYTE *)v923) >> 4;
            if ((unint64_t)(v500 + 1) >> 60)
              goto LABEL_877;
            v501 = v499 - (_BYTE *)v923;
            v502 = v501 >> 3;
            if (v501 >> 3 <= (unint64_t)(v500 + 1))
              v502 = v500 + 1;
            if ((unint64_t)v501 >= 0x7FFFFFFFFFFFFFF0)
              v235 = 0xFFFFFFFFFFFFFFFLL;
            else
              v235 = v502;
            if (v235)
              v383 = (char *)sub_1DCAFBD5C((uint64_t)&v925, v235);
            else
              v383 = 0;
            v503 = &v383[16 * v500];
            v240.i32[3] = 0;
            *(_OWORD *)v503 = xmmword_1DCC58210;
            v489 = (int *)(v503 + 16);
            v504 = (char *)v924;
            v668 = (char *)v923;
            if (v924 == v923)
            {
LABEL_676:
              v923 = v503;
              v924 = v489;
              v925 = (unint64_t)&v383[16 * v235];
              if (v504)
                operator delete(v504);
              goto LABEL_678;
            }
            do
            {
              v669 = *((_OWORD *)v504 - 1);
              v504 -= 16;
              v240.i32[3] = HIDWORD(v669);
              *((_OWORD *)v503 - 1) = v669;
              v503 -= 16;
            }
            while (v504 != v668);
          }
LABEL_675:
          v504 = (char *)v923;
          goto LABEL_676;
        }
        v335 = sub_1DCAFBD5C((uint64_t)&v925, 1uLL);
        *v335 = xmmword_1DCC58200;
        v336 = (char *)(v335 + 1);
        v337 = (char *)v924;
        v338 = (char *)v923;
        v339 = (char *)v335;
        if (v924 != v923)
        {
          do
          {
            v340 = *((_OWORD *)v337 - 1);
            v337 -= 16;
            *((_OWORD *)v339 - 1) = v340;
            v339 -= 16;
          }
          while (v337 != v338);
          v337 = (char *)v923;
        }
        v341 = (char *)&v335[v235];
        v923 = v339;
        v924 = v335 + 1;
        v925 = (unint64_t)v341;
        if (v337)
        {
          operator delete(v337);
          v341 = (char *)v925;
        }
        v924 = v335 + 1;
        if (v336 >= v341)
        {
          v490 = (v336 - (_BYTE *)v923) >> 4;
          if ((unint64_t)(v490 + 1) >> 60)
            goto LABEL_877;
          v491 = v341 - (_BYTE *)v923;
          v492 = v491 >> 3;
          if (v491 >> 3 <= (unint64_t)(v490 + 1))
            v492 = v490 + 1;
          if ((unint64_t)v491 >= 0x7FFFFFFFFFFFFFF0)
            v235 = 0xFFFFFFFFFFFFFFFLL;
          else
            v235 = v492;
          if (v235)
            v383 = (char *)sub_1DCAFBD5C((uint64_t)&v925, v235);
          else
            v383 = 0;
          v503 = &v383[16 * v490];
          v240.i32[3] = 0;
          *(_OWORD *)v503 = xmmword_1DCC58210;
          v489 = (int *)(v503 + 16);
          v504 = (char *)v924;
          v505 = (char *)v923;
          if (v924 == v923)
            goto LABEL_676;
          do
          {
            v506 = *((_OWORD *)v504 - 1);
            v504 -= 16;
            v240.i32[3] = HIDWORD(v506);
            *((_OWORD *)v503 - 1) = v506;
            v503 -= 16;
          }
          while (v504 != v505);
          goto LABEL_675;
        }
LABEL_185:
        v240 = (float32x4_t)xmmword_1DCC58210;
LABEL_393:
        v335[1] = v240;
        v489 = (int *)(v335 + 2);
LABEL_678:
        v924 = v489;
LABEL_690:
        v927 = (char *)v926;
        if (v489 != v923)
        {
          v676 = 0;
          v489 = (int *)v923;
          do
          {
            v955[0] = &(*v273)[2 * v489[4 * v676]];
            v677 = sub_1DCB015E4((uint64_t)&v938, (int32x2_t *)v955[0], (uint64_t)&unk_1DCC58300, (int32x4_t **)v955)[2].i32[0];
            v678 = v933;
            if (v933 >= v934)
            {
              v680 = (char *)v932;
              v681 = (v933 - (_BYTE *)v932) >> 2;
              v682 = v681 + 1;
              if ((unint64_t)(v681 + 1) >> 62)
                goto LABEL_866;
              v683 = v934 - (_BYTE *)v932;
              if ((v934 - (_BYTE *)v932) >> 1 > v682)
                v682 = v683 >> 1;
              if ((unint64_t)v683 >= 0x7FFFFFFFFFFFFFFCLL)
                v684 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v684 = v682;
              if (v684)
              {
                v685 = (char *)sub_1DCAE4D04((uint64_t)&v934, v684);
                v678 = v933;
                v680 = (char *)v932;
              }
              else
              {
                v685 = 0;
              }
              v686 = (__int32 *)&v685[4 * v681];
              *v686 = v677;
              v679 = (char *)(v686 + 1);
              while (v678 != v680)
              {
                v687 = *((_DWORD *)v678 - 1);
                v678 -= 4;
                *--v686 = v687;
              }
              v932 = v686;
              v933 = v679;
              v934 = &v685[4 * v684];
              if (v680)
                operator delete(v680);
            }
            else
            {
              *(_DWORD *)v933 = v677;
              v679 = v678 + 4;
            }
            v933 = v679;
            v955[0] = &(*v273)[2 * *((int *)v923 + 4 * v676 + 1)];
            v688 = sub_1DCB015E4((uint64_t)&v938, (int32x2_t *)v955[0], (uint64_t)&unk_1DCC58300, (int32x4_t **)v955)[2].i32[0];
            v689 = v933;
            if (v933 >= v934)
            {
              v691 = (char *)v932;
              v692 = (v933 - (_BYTE *)v932) >> 2;
              v693 = v692 + 1;
              if ((unint64_t)(v692 + 1) >> 62)
                goto LABEL_866;
              v694 = v934 - (_BYTE *)v932;
              if ((v934 - (_BYTE *)v932) >> 1 > v693)
                v693 = v694 >> 1;
              if ((unint64_t)v694 >= 0x7FFFFFFFFFFFFFFCLL)
                v695 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v695 = v693;
              if (v695)
              {
                v696 = (char *)sub_1DCAE4D04((uint64_t)&v934, v695);
                v689 = v933;
                v691 = (char *)v932;
              }
              else
              {
                v696 = 0;
              }
              v697 = (__int32 *)&v696[4 * v692];
              *v697 = v688;
              v690 = (char *)(v697 + 1);
              while (v689 != v691)
              {
                v698 = *((_DWORD *)v689 - 1);
                v689 -= 4;
                *--v697 = v698;
              }
              v932 = v697;
              v933 = v690;
              v934 = &v696[4 * v695];
              if (v691)
                operator delete(v691);
            }
            else
            {
              *(_DWORD *)v933 = v688;
              v690 = v689 + 4;
            }
            v933 = v690;
            v955[0] = &(*v273)[2 * *((int *)v923 + 4 * v676 + 2)];
            v699 = sub_1DCB015E4((uint64_t)&v938, (int32x2_t *)v955[0], (uint64_t)&unk_1DCC58300, (int32x4_t **)v955)[2].i32[0];
            v700 = v933;
            if (v933 >= v934)
            {
              v702 = (char *)v932;
              v703 = (v933 - (_BYTE *)v932) >> 2;
              v704 = v703 + 1;
              if ((unint64_t)(v703 + 1) >> 62)
LABEL_866:
                sub_1DCAE4C44();
              v705 = v934 - (_BYTE *)v932;
              if ((v934 - (_BYTE *)v932) >> 1 > v704)
                v704 = v705 >> 1;
              if ((unint64_t)v705 >= 0x7FFFFFFFFFFFFFFCLL)
                v235 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v235 = v704;
              if (v235)
              {
                v706 = (char *)sub_1DCAE4D04((uint64_t)&v934, v235);
                v700 = v933;
                v702 = (char *)v932;
              }
              else
              {
                v706 = 0;
              }
              v707 = (__int32 *)&v706[4 * v703];
              *v707 = v699;
              v701 = (char *)(v707 + 1);
              while (v700 != v702)
              {
                v708 = *((_DWORD *)v700 - 1);
                v700 -= 4;
                *--v707 = v708;
              }
              v932 = v707;
              v933 = v701;
              v934 = &v706[4 * v235];
              if (v702)
                operator delete(v702);
            }
            else
            {
              *(_DWORD *)v933 = v699;
              v701 = v700 + 4;
            }
            v933 = v701;
            ++v676;
            v489 = (int *)v923;
          }
          while (v676 < ((_BYTE *)v924 - (_BYTE *)v923) >> 4);
        }
        if (v489)
        {
          v924 = v489;
          operator delete(v489);
        }
        if (v926)
        {
          v927 = (char *)v926;
          operator delete(v926);
        }
LABEL_339:
        v273 += 3;
        v272 = v897;
      }
      v898 = 2;
LABEL_746:
      v709 = v933 - (_BYTE *)v932;
      if (v933 != v932)
      {
        v710 = objc_alloc(MEMORY[0x1E0C99D50]);
        v910 = (MDLSubmeshTopology *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v710, v711, (uint64_t)v932, v709, 0);
        objc_msgSend_bufferAllocator(v893, v712, v713);
        v714 = (void *)objc_claimAutoreleasedReturnValue();
        v716 = (void *)objc_msgSend_newBufferFromZone_data_type_(v714, v715, 0, v910, 2);

        if (objc_msgSend_conformsToProtocol_(v716, v717, (uint64_t)&unk_1F03B6D88))
        {
          v718 = v716;
          objc_msgSend_stringByAppendingString_(CFSTR("MDL_OBJ"), v719, (uint64_t)CFSTR("-Indices"));
          v720 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setName_(v718, v721, (uint64_t)v720);

        }
        if (!v716)
        {
          sub_1DCB0345C(a6, "Could not allocate index buffer");
          v744 = v910;
          goto LABEL_858;
        }
        v722 = objc_alloc(MEMORY[0x1E0CB3940]);
        v724 = (_QWORD *)(v892 + 24);
        if (*(char *)(v892 + 47) < 0)
          v724 = (_QWORD *)*v724;
        v725 = (void *)objc_msgSend_initWithCString_encoding_(v722, v723, (uint64_t)v724, 4);
        v921 = 0u;
        v922 = 0u;
        v919 = 0u;
        v920 = 0u;
        v726 = v882;
        v730 = objc_msgSend_countByEnumeratingWithState_objects_count_(v726, v727, (uint64_t)&v919, v964, 16);
        if (v730)
        {
          v731 = *(_QWORD *)v920;
LABEL_754:
          v732 = 0;
          while (1)
          {
            if (*(_QWORD *)v920 != v731)
              objc_enumerationMutation(v726);
            v733 = *(void **)(*((_QWORD *)&v919 + 1) + 8 * v732);
            objc_msgSend_name(v733, v728, v729);
            v734 = (void *)objc_claimAutoreleasedReturnValue();
            isEqualToString = objc_msgSend_isEqualToString_(v734, v735, (uint64_t)v725);

            if ((isEqualToString & 1) != 0)
              break;
            if (v730 == ++v732)
            {
              v730 = objc_msgSend_countByEnumeratingWithState_objects_count_(v726, v728, (uint64_t)&v919, v964, 16);
              if (v730)
                goto LABEL_754;
              goto LABEL_760;
            }
          }
          v739 = v733;

          if (v739)
            goto LABEL_765;
        }
        else
        {
LABEL_760:

        }
        if (objc_msgSend_count(v726, v737, v738))
        {
          objc_msgSend_objectAtIndex_(v726, v740, 0);
          v739 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v741 = [MDLMaterial alloc];
          v742 = (void *)objc_opt_new();
          v739 = (id)objc_msgSend_initWithName_scatteringFunction_(v741, v743, (uint64_t)v725, v742);

        }
LABEL_765:
        if (a4)
        {
          v744 = objc_alloc_init(MDLSubmeshTopology);
          v745 = v930;
          v746 = v929;
          objc_msgSend_bufferAllocator(v893, v747, v748);
          v749 = (void *)objc_claimAutoreleasedReturnValue();
          v751 = (void *)objc_msgSend_newBufferFromZone_length_type_(v749, v750, 0, (v745 - v746) >> 2, 1);
          objc_msgSend_setFaceTopology_(v744, v752, (uint64_t)v751);

          objc_msgSend_faceTopology(v744, v753, v754);
          v755 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(v745) = objc_msgSend_conformsToProtocol_(v755, v756, (uint64_t)&unk_1F03B6D88);

          if ((_DWORD)v745)
          {
            objc_msgSend_faceTopology(v744, v757, v758);
            v759 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_stringByAppendingString_(CFSTR("MDL_OBJ"), v760, (uint64_t)CFSTR("-Topology"));
            v761 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setName_(v759, v762, (uint64_t)v761);

          }
          objc_msgSend_faceTopology(v744, v757, v758);
          v763 = (void *)objc_claimAutoreleasedReturnValue();
          v764 = v763 == 0;

          if (v764)
          {
            sub_1DCB0345C(a6, "Could not allocate topology buffer");

            goto LABEL_856;
          }
          objc_msgSend_faceTopology(v744, v765, v766);
          v767 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_map(v767, v768, v769);
          v770 = (void *)objc_claimAutoreleasedReturnValue();

          v773 = objc_msgSend_bytes(v770, v771, v772);
          v775 = v929;
          if (v930 == v929)
          {
            v777 = (v930 - (_BYTE *)v929) >> 2;
          }
          else
          {
            v776 = 0;
            do
            {
              *(_BYTE *)(v773 + v776) = v775[v776];
              ++v776;
              v775 = v929;
              v777 = (v930 - (_BYTE *)v929) >> 2;
            }
            while (v777 > v776);
          }
          objc_msgSend_setFaceCount_(v744, v774, v777);

        }
        else
        {
          v744 = 0;
        }
        v778 = v892;
        if (*(char *)(v892 + 23) < 0)
          v778 = *(_QWORD *)v892;
        objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v737, v778, 4);
        v779 = (void *)objc_claimAutoreleasedReturnValue();
        v780 = [MDLSubmesh alloc];
        v782 = (void *)objc_msgSend_initWithName_indexBuffer_indexCount_indexType_geometryType_material_topology_(v780, v781, (uint64_t)v779, v716, (v933 - (_BYTE *)v932) >> 2, 32, v898, v739, v744);
        objc_msgSend_addObject_(v879, v783, (uint64_t)v782);
        v930 = (char *)v929;

      }
      v892 += 80;
    }
    while (v892 != v881);
  }
  objc_msgSend_vertexDescriptor(v893, (const char *)v235, v236);
  v784 = (void *)objc_claimAutoreleasedReturnValue();
  v785 = v784 == 0;

  if (v785)
  {
    objc_msgSend_bufferAllocator(v893, v786, v787);
    v788 = (MDLMeshBufferDataAllocator *)objc_claimAutoreleasedReturnValue();
    v790 = objc_msgSend_newBufferFromZone_length_type_(v788, v791, 0, v878, 1);
  }
  else
  {
    v788 = objc_alloc_init(MDLMeshBufferDataAllocator);
    v790 = objc_msgSend_newBuffer_type_(v788, v789, v878, 1);
  }
  v744 = (MDLSubmeshTopology *)v790;

  if (!v744)
  {
    sub_1DCB0345C(a6, "Could not allocate vertex buffer");
    goto LABEL_858;
  }
  if (objc_msgSend_conformsToProtocol_(v744, v792, (uint64_t)&unk_1F03B6D88))
  {
    v795 = v744;
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v796, (uint64_t)CFSTR("%@-%@"), CFSTR("MDL_OBJ"), CFSTR("position"));
    v797 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v795, v798, (uint64_t)v797);

  }
  objc_msgSend_map(v744, v793, v794);
  v799 = (void *)objc_claimAutoreleasedReturnValue();
  v802 = objc_msgSend_bytes(v799, v800, v801);

  v803 = 6;
  if (v890 == v889)
    v803 = 3;
  v804 = 4;
  if (!v888)
    v804 = 0;
  v805 = 2;
  if (v887 == v886)
    v806 = 0;
  else
    v806 = 2;
  if (v885 == v884)
    v805 = 0;
  v807 = v806 + v803 + v805 + v804;
  v808 = *v911;
  v809 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v911[1] - *v911) >> 2);
  v810 = (__int128 *)v935;
  v811 = v911[9];
  v812 = 0xAAAAAAAAAAAAAAABLL * ((v911[10] - v811) >> 2);
  v813 = v911[12];
  v814 = (v911[13] - v813) >> 4;
  v815 = v911[3];
  v816 = (v911[4] - v815) >> 3;
  v817 = v911[6];
  v818 = (v911[7] - v817) >> 3;
  v819 = v883;
  if (v883 <= 1)
    v819 = 1;
  v820 = v802 + 12;
  v821 = 4 * v807;
  __asm { FMOV            V0.2S, #1.0 }
  do
  {
    v826 = *v810;
    v827 = *v810;
    if ((v827 & 0x80000000) != 0 || v809 <= v827)
    {
      *(_QWORD *)(v820 - 12) = 0;
      v829 = 0;
    }
    else
    {
      v828 = (_DWORD *)(v808 + 12 * v827);
      *(_DWORD *)(v820 - 12) = *v828;
      *(_DWORD *)(v820 - 8) = v828[1];
      v829 = v828[2];
    }
    *(_DWORD *)(v820 - 4) = v829;
    if (v890 == v889)
    {
      v832 = 3;
    }
    else
    {
      if ((DWORD2(v826) & 0x80000000) != 0 || v812 <= DWORD2(v826))
      {
        *(_QWORD *)v820 = 0x3F80000000000000;
        v831 = 0;
      }
      else
      {
        v830 = (_DWORD *)(v811 + 12 * DWORD2(v826));
        *(_DWORD *)v820 = *v830;
        *(_DWORD *)(v820 + 4) = v830[1];
        v831 = v830[2];
      }
      *(_DWORD *)(v820 + 8) = v831;
      v832 = 6;
    }
    if (v888)
    {
      if ((HIDWORD(v826) & 0x80000000) != 0 || v814 <= HIDWORD(v826))
      {
        if ((v827 & 0x80000000) != 0 || v814 <= v827)
        {
          v836 = v820 + 4 * v832;
          *(double *)(v836 - 12) = _D0;
          *(_DWORD *)(v836 - 4) = 1065353216;
          v835 = 1.0;
          goto LABEL_818;
        }
        v833 = (float *)(v813 + 16 * v827);
      }
      else
      {
        v833 = (float *)(v813 + 16 * HIDWORD(v826));
      }
      v834 = v820 + 4 * v832;
      *(float *)(v834 - 12) = *v833;
      *(float *)(v834 - 8) = v833[1];
      *(float *)(v834 - 4) = v833[2];
      v835 = v833[3];
LABEL_818:
      *(float *)(v820 + 4 * v832) = v835;
      v832 += 4;
    }
    if (v887 != v886)
    {
      if ((DWORD1(v826) & 0x80000000) != 0 || v816 <= DWORD1(v826))
      {
        *(_DWORD *)(v820 + 4 * v832 - 12) = 0;
        v838 = 0;
      }
      else
      {
        v837 = (_DWORD *)(v815 + 8 * DWORD1(v826));
        *(_DWORD *)(v820 + 4 * v832 - 12) = *v837;
        v838 = v837[1];
      }
      v839 = v820 + 4 * v832;
      v832 += 2;
      *(_DWORD *)(v839 - 8) = v838;
    }
    if (v885 != v884)
    {
      if ((DWORD1(v826) & 0x80000000) != 0 || v818 <= DWORD1(v826))
      {
        *(_DWORD *)(v820 + 4 * v832 - 12) = 0;
        v841 = 0;
      }
      else
      {
        v840 = (_DWORD *)(v817 + 8 * DWORD1(v826));
        *(_DWORD *)(v820 + 4 * v832 - 12) = *v840;
        v841 = v840[1];
      }
      *(_DWORD *)(v820 + 4 * v832 - 8) = v841;
    }
    ++v810;
    v820 += v821;
    --v819;
  }
  while (v819);
  v963 = v744;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], 0, (uint64_t)&v963, 1, 12, 1065353216, _D0, 0.0078125);
  v910 = (MDLSubmeshTopology *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_vertexDescriptor(v893, v842, v843);
  v844 = (void *)objc_claimAutoreleasedReturnValue();
  v845 = v844 == 0;

  if (v845)
    goto LABEL_844;
  v917 = 0u;
  v918 = 0u;
  v915 = 0u;
  v916 = 0u;
  objc_msgSend_vertexDescriptor(v893, v846, v847);
  v848 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_layouts(v848, v849, v850);
  v851 = (void *)objc_claimAutoreleasedReturnValue();

  v855 = objc_msgSend_countByEnumeratingWithState_objects_count_(v851, v852, (uint64_t)&v915, v962, 16);
  if (!v855)
  {

LABEL_854:
    sub_1DCB0345C(a6, "No valid vertex descriptor layouts found");
    goto LABEL_857;
  }
  v856 = 0;
  v857 = *(_QWORD *)v916;
  do
  {
    for (k = 0; k != v855; ++k)
    {
      if (*(_QWORD *)v916 != v857)
        objc_enumerationMutation(v851);
      if (objc_msgSend_stride(*(void **)(*((_QWORD *)&v915 + 1) + 8 * k), v853, v854))
        ++v856;
    }
    v855 = objc_msgSend_countByEnumeratingWithState_objects_count_(v851, v853, (uint64_t)&v915, v962, 16);
  }
  while (v855);

  if (v856 < 1)
  {
    v869 = v911;
    if (v856)
      goto LABEL_845;
    goto LABEL_854;
  }
  objc_msgSend_vertexDescriptor(v893, v859, v860);
  v861 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bufferAllocator(v893, v862, v863);
  v864 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1DCC0B0E8(v910, v883, v896, v861, 0, v864, 1);
  v865 = objc_claimAutoreleasedReturnValue();

  objc_msgSend_vertexDescriptor(v893, v866, v867);
  v868 = objc_claimAutoreleasedReturnValue();

  v896 = (MDLVertexDescriptor *)v868;
  v910 = (MDLSubmeshTopology *)v865;
LABEL_844:
  v869 = v911;
LABEL_845:
  v870 = [MDLMesh alloc];
  v872 = (void *)objc_msgSend_initWithVertexBuffers_vertexCount_descriptor_submeshes_(v870, v871, (uint64_t)v910, v883, v896, v879);
  v716 = v872;
  v874 = v869[18];
  if (v869[19] == v874)
  {
    objc_msgSend_setName_(v872, v873, (uint64_t)CFSTR("OBJ model"));
  }
  else
  {
    if (*(char *)(v874 + 23) < 0)
      v874 = *(_QWORD *)v874;
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v873, v874, 4);
    v875 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v716, v876, (uint64_t)v875);

  }
  objc_msgSend_addObject_(v893, v877, (uint64_t)v716);
  sub_1DCB0345C(a6, "");
LABEL_856:

LABEL_857:
LABEL_858:

  if (v929)
  {
    v930 = (char *)v929;
    operator delete(v929);
  }
  if (v932)
  {
    v933 = (char *)v932;
    operator delete(v932);
  }
LABEL_55:

  if (v935)
  {
    __p = v935;
    operator delete(v935);
  }
  sub_1DCAE6B78((uint64_t)&v938);

}

void sub_1DCB0031C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v60;
  void *v61;
  void *v62;

  v60 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v60;
    operator delete(v60);
  }
  v61 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v61;
    operator delete(v61);
  }

  v62 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v62;
    operator delete(v62);
  }
  sub_1DCAE6B78((uint64_t)&STACK[0x2A0]);

  _Unwind_Resume(a1);
}

uint64_t *sub_1DCB00A8C(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7[3];
  uint64_t v8;

  v8 = 0;
  v5 = (uint64_t **)sub_1DCAD344C((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    memset(v7, 0, sizeof(v7));
    sub_1DCB00B14((uint64_t)a1, a3, v7);
    sub_1DCACAE54(a1, v8, v5, v7[0]);
    return v7[0];
  }
  return result;
}

_QWORD *sub_1DCB00B14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  _QWORD *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x38uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_1DCACA658(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    result[2] = *(_QWORD *)(a2 + 16);
  }
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1DCB00BA0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;

  *v1 = 0;
  sub_1DCB00C24(v2, v3);
  _Unwind_Resume(a1);
}

BOOL sub_1DCB00BBC(uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

void sub_1DCB00C24(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_1DCB00C70(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17[5];

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    sub_1DCAE4C44();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v17[4] = a1 + 2;
  v10 = (char *)sub_1DCB00E24(v7, v9);
  v11 = &v10[80 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[80 * v12];
  v13 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = v13;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = v14;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((_QWORD *)v11 + 8) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *((_DWORD *)v11 + 18) = *(_DWORD *)(a2 + 72);
  v17[2] = v11 + 80;
  sub_1DCB00DB0(a1, v17);
  v15 = a1[1];
  sub_1DCB01020(v17);
  return v15;
}

void sub_1DCB00D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCB01020((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB00DB0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1DCB00E68((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1DCB00E24(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    sub_1DCAE4CDC();
  return operator new(80 * a2);
}

uint64_t sub_1DCB00E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_QWORD *)(v7 - 64) = *(_QWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(a3 - 72) = 0;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 80) = 0;
      v9 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v15 + 1) - 80;
      *((_QWORD *)&v15 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    v10 = v15;
  }
  LOBYTE(v13) = 1;
  sub_1DCB00F48((uint64_t)v12);
  return v10;
}

uint64_t sub_1DCB00F48(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1DCB00F7C((uint64_t *)a1);
  return a1;
}

void sub_1DCB00F7C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_1DCB00FCC(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void sub_1DCB00FCC(uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 48);
  sub_1DCB01094(&v3);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void **sub_1DCB01020(void **a1)
{
  sub_1DCB01050(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1DCB01050(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    sub_1DCB00FCC(v4, i - 80);
  }
}

void sub_1DCB01094(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1DCB010D4((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1DCB010D4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_1DCB01128(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_1DCB011AC();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_1DCB011AC()
{
  sub_1DCAE4C68("basic_string");
}

void *sub_1DCB011C0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    sub_1DCAE4CDC();
  return operator new(12 * a2);
}

uint64_t sub_1DCB01204(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1DCB012BC((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1DCB01278(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_1DCAE4CDC();
  return operator new(24 * a2);
}

uint64_t sub_1DCB012BC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  LOBYTE(v12) = 1;
  sub_1DCB0135C((uint64_t)v11);
  return v9;
}

uint64_t sub_1DCB0135C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1DCB01390(a1);
  return a1;
}

void sub_1DCB01390(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_1DCB013D4(uint64_t a1)
{
  sub_1DCB01408(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1DCB01408(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void sub_1DCB01460(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      sub_1DCAE4C44();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1DCAE4D04(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

int32x4_t *sub_1DCB014F4(_QWORD *a1, int32x2_t *a2)
{
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  int32x4_t *i;
  unint64_t v9;

  v4 = sub_1DCB3EFE8((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  i = *(int32x4_t **)(*a1 + 8 * v7);
  if (i)
  {
    for (i = (int32x4_t *)i->i64[0]; i; i = (int32x4_t *)i->i64[0])
    {
      v9 = i->u64[1];
      if (v9 == v4)
      {
        if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(i[1], *(int32x4_t *)a2->i8)), 0xFuLL))) & 1) != 0)
          return i;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v5)
            v9 %= *(_QWORD *)&v5;
        }
        else
        {
          v9 &= *(_QWORD *)&v5 - 1;
        }
        if (v9 != v7)
          return 0;
      }
    }
  }
  return i;
}

int32x4_t *sub_1DCB015E4(uint64_t a1, int32x2_t *a2, uint64_t a3, int32x4_t **a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  int32x4_t **v13;
  int32x4_t *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  int32x4_t **v23;
  unint64_t v24;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_1DCB3EFE8(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = v8;
      if (v8 >= v10)
        v12 = v8 % v10;
    }
    else
    {
      v12 = (v10 - 1) & v8;
    }
    v13 = *(int32x4_t ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = (int32x4_t *)i->i64[0])
      {
        v15 = i->u64[1];
        if (v15 == v8)
        {
          if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(i[1], *(int32x4_t *)a2->i8)), 0xFuLL))) & 1) != 0)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  i = (int32x4_t *)operator new(0x30uLL);
  i->i64[0] = 0;
  i->i64[1] = v9;
  i[1] = **a4;
  i[2].i32[0] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_1DCAD4EF4(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v12 = v9 % v10;
      else
        v12 = v9;
    }
    else
    {
      v12 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(int32x4_t ***)(*(_QWORD *)a1 + 8 * v12);
  if (v23)
  {
    i->i64[0] = (uint64_t)*v23;
LABEL_38:
    *v23 = i;
    goto LABEL_39;
  }
  i->i64[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v22 + 8 * v12) = a1 + 16;
  if (i->i64[0])
  {
    v24 = *(_QWORD *)(i->i64[0] + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (int32x4_t **)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_1DCB01824(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1DCB01838(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      sub_1DCAE4C44();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1DCAFBD5C(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

BOOL sub_1DCB018C8(uint64_t a1, uint64_t a2, _QWORD *a3, float32x4_t a4)
{
  uint64_t v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 == a1)
    v5 = a2;
  else
    v5 = a1;
  v6 = *(float32x4_t *)(*a3 + 16 * *(int *)(a1 + 16));
  if (*(_QWORD *)(a1 + 8) != a2)
    v4 = *(_QWORD *)(a1 + 8);
  v7 = vsubq_f32(v6, *(float32x4_t *)(*a3 + 16 * *(int *)(*(_QWORD *)v5 + 16)));
  v8 = vsubq_f32(*(float32x4_t *)(*a3 + 16 * *(int *)(v4 + 16)), v6);
  v9 = vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), v7)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), v8);
  v10 = vmulq_f32(v9, v9);
  if (vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), v10), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1)).f32[0] < 1.0e-12)return 1;
  v12 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), a4);
  return vaddq_f32(vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2)).f32[0] < 1.0e-12;
}

float32x2_t *sub_1DCB01980(_QWORD *a1, unint64_t *a2, float32x4_t a3)
{
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  float32x2_t **v11;
  float32x2_t *v12;
  uint64_t v13;
  float32x2_t v14;

  v5 = sub_1DCB3ED90(a3, (uint64_t)(a1 + 3), a2);
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = v5;
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v5;
    if (v5 >= *(_QWORD *)&v6)
      v10 = v5 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = (*(_QWORD *)&v6 - 1) & v5;
  }
  v11 = *(float32x2_t ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = *v11;
  if (*v11)
  {
    v13 = (uint64_t)(a1 + 4);
    do
    {
      v14 = v12[1];
      if (*(_QWORD *)&v14 == v7)
      {
        if (sub_1DCB3EDA0(v13, v12 + 2, (float32x2_t *)a2))
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (*(_QWORD *)&v14 >= *(_QWORD *)&v6)
            *(_QWORD *)&v14 %= *(_QWORD *)&v6;
        }
        else
        {
          *(_QWORD *)&v14 &= *(_QWORD *)&v6 - 1;
        }
        if (*(_QWORD *)&v14 != v10)
          return 0;
      }
      v12 = (float32x2_t *)*v12;
    }
    while (v12);
  }
  return v12;
}

float32x2_t *sub_1DCB01A80(uint64_t a1, unint64_t *a2, float32x4_t a3, uint64_t a4, float32x2_t **a5)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  float32x2_t **v15;
  float32x2_t *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  float32x2_t **v25;
  unint64_t v26;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_1DCB3ED90(a3, a1 + 24, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(float32x2_t ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = (float32x2_t *)*i)
      {
        v17 = (unint64_t)i[1];
        if (v17 == v10)
        {
          if (sub_1DCB3EDA0(a1 + 32, i + 2, (float32x2_t *)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  i = (float32x2_t *)operator new(0x20uLL);
  *i = 0;
  i[1] = (float32x2_t)v10;
  i[2] = **a5;
  i[3].i32[0] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_1DCAD4EF4(a1, v23);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(float32x2_t ***)(*(_QWORD *)a1 + 8 * v14);
  if (v25)
  {
    *i = (float32x2_t)*v25;
LABEL_38:
    *v25 = i;
    goto LABEL_39;
  }
  *i = *(float32x2_t *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v24 + 8 * v14) = a1 + 16;
  if (*i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11)
        v26 %= v11;
    }
    else
    {
      v26 &= v11 - 1;
    }
    v25 = (float32x2_t **)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_1DCB01CCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB01CE0(float32x2_t *a1, float32x2_t *a2)
{
  int32x2_t v2;
  char v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = vcgt_f32(*a2, *a1);
  if ((v2.i8[0] & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    if ((vcgt_f32(*a1, *a2).u8[0] & 1) == 0)
    {
      v4 = (uint64_t *)a1[1];
      v5 = (uint64_t *)a2[1];
      if (v4 != v5)
      {
        v6 = v4[1];
        v7 = *v5;
        v8 = v5[1];
        if (COERCE_FLOAT(*v4) == *(float *)&v6 && *(float *)&v7 != *(float *)&v8)
        {
          v3 = a1[2].i8[0] != 0;
          return v3 & 1;
        }
        if (COERCE_FLOAT(*v4) != *(float *)&v6 && *(float *)&v7 == *(float *)&v8)
        {
          v3 = a2[2].i8[0] == 0;
          return v3 & 1;
        }
      }
      v3 = v2.i8[4];
      return v3 & 1;
    }
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_1DCB01D6C(float32x2_t *a1, float32x2_t *a2, int8x16_t a3)
{
  char v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  __int8 v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  int8x8_t v18;
  int8x8_t v19;
  int8x8_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float64x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  int8x8_t v28;
  int8x8_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;

  v3 = 0;
  if (a1 && a2)
  {
    v4 = *a1;
    v5 = a1[1];
    v7 = *a2;
    v6 = a2[1];
    *(float32x2_t *)a3.i8 = vsub_f32(*a1, v5);
    v8 = vsub_f32(*a2, v6);
    v9 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v8), *(float32x2_t *)a3.i8);
    v10 = vsub_f32(v9, (float32x2_t)vdup_lane_s32((int32x2_t)v9, 1));
    if (vmul_f32(v10, v10).f32[0] < 0.000001)
      v10.f32[0] = 0.0;
    if (v10.f32[0] == 0.0)
    {
      v11 = (int32x2_t)vmul_f32(vsub_f32(v7, v5), vsub_f32(v7, v4));
      v12 = (int32x2_t)vmul_f32(vsub_f32(v6, v5), vsub_f32(v6, v4));
      v13 = vcltz_f32(vadd_f32((float32x2_t)vzip1_s32(v12, v11), (float32x2_t)vzip2_s32(v12, v11)));
      v14 = v13.i8[4];
    }
    else
    {
      v15 = vsub_f32(v7, v4);
      v16 = vsub_f32(v5, v4);
      v17 = vsub_f32(v6, v4);
      v18 = (int8x8_t)vsub_f32(v4, v7);
      v19 = (int8x8_t)vsub_f32(v6, v7);
      v20 = (int8x8_t)vsub_f32(v5, v7);
      v21 = (float32x2_t)vext_s8((int8x8_t)v17, v19, 4uLL);
      v17.i32[1] = v19.i32[1];
      v22 = vmla_f32(vneg_f32(vmul_f32(v21, (float32x2_t)__PAIR64__(v18.u32[1], v16.u32[0]))), (float32x2_t)vext_s8((int8x8_t)v16, v18, 4uLL), v17);
      v23 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
      v24 = (float32x2_t)vext_s8((int8x8_t)v15, v19, 4uLL);
      v15.i32[1] = v19.i32[1];
      v25 = (float32x2_t)vext_s8((int8x8_t)v16, v20, 4uLL);
      v16.i32[1] = v20.i32[1];
      v26 = vmla_f32(vneg_f32(vmul_f32(v24, v16)), v25, v15);
      v27 = vmul_f32((float32x2_t)vbic_s8((int8x8_t)v22, (int8x8_t)vmovn_s64(vcgtq_f64(v23, vcvtq_f64_f32(vmul_f32(v22, v22))))), (float32x2_t)vbic_s8((int8x8_t)v26, (int8x8_t)vmovn_s64(vcgtq_f64(v23, vcvtq_f64_f32(vmul_f32(v26, v26))))));
      if (v27.f32[0] < 0.0 && v27.f32[1] < 0.0)
      {
        v3 = 1;
        return v3 & 1;
      }
      v28 = (int8x8_t)vsub_f32(v7, v5);
      v29 = (int8x8_t)vsub_f32(v6, v5);
      v30 = vsub_f32(v4, v6);
      v31 = vsub_f32(v5, v6);
      v32 = (float32x2_t)vext_s8((int8x8_t)v30, *(int8x8_t *)a3.i8, 4uLL);
      v30.i32[1] = a3.i32[1];
      v33 = vmla_f32(vneg_f32(vmul_f32((float32x2_t)__PAIR64__(v29.u32[1], v8.u32[0]), v32)), v30, (float32x2_t)vext_s8((int8x8_t)v8, v29, 4uLL));
      v34 = (float32x2_t)vbic_s8((int8x8_t)v33, (int8x8_t)vmovn_s64(vcgtq_f64(v23, vcvtq_f64_f32(vmul_f32(v33, v33)))));
      v35 = (float32x2_t)vext_s8((int8x8_t)v8, v28, 4uLL);
      v36 = (float32x2_t)vext_s8((int8x8_t)v31, *(int8x8_t *)a3.i8, 4uLL);
      v31.i32[1] = a3.i32[1];
      v8.i32[1] = v28.i32[1];
      *(float32x2_t *)a3.i8 = vmla_f32(vneg_f32(vmul_f32(v8, v36)), v31, v35);
      *(float32x2_t *)a3.i8 = vmul_f32(v34, (float32x2_t)vbic_s8(*(int8x8_t *)a3.i8, (int8x8_t)vmovn_s64(vcgtq_f64(v23, vcvtq_f64_f32(vmul_f32(*(float32x2_t *)a3.i8, *(float32x2_t *)a3.i8))))));
      v37 = (float32x4_t)vextq_s8(a3, a3, 4uLL);
      *(float32x2_t *)&v37.i32[1] = v27;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_f32(v37))) & 1) == 0)
      {
        v3 = 0;
        return v3 & 1;
      }
      v13 = vcltz_f32(*(float32x2_t *)a3.i8);
      v14 = (v27.f32[0] < 0.0 || v27.f32[1] < 0.0) | v13.i8[4];
    }
    v3 = v14 | v13.i8[0];
  }
  return v3 & 1;
}

void sub_1DCB01F6C(uint64_t a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  BOOL v32;
  __int128 v33;
  __int128 *v34;
  int v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 *v46;
  __int128 *v47;
  __int128 *v48;
  __n128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 *v58;
  BOOL v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  int64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 *v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  BOOL v100;
  uint64_t v101;
  __int128 *v102;
  __int128 v103;
  uint64_t v104;
  char v105;
  __int128 v106;
  __int128 *v107;
  __int128 *v108;
  unint64_t v109;
  uint64_t v110;
  int64_t v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;

LABEL_1:
  v110 = a2 - 24;
  v107 = (__int128 *)(a2 - 72);
  v108 = (__int128 *)(a2 - 48);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)v110, (__int128 *)a1))
        {
          v43 = *(_OWORD *)a1;
          v115 = *(_QWORD *)(a1 + 16);
          v114 = v43;
          v44 = *(_OWORD *)v110;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v110 + 16);
          *(_OWORD *)a1 = v44;
          v45 = v114;
          *(_QWORD *)(v110 + 16) = v115;
          *(_OWORD *)v110 = v45;
        }
        return;
      case 3uLL:
        sub_1DCB0294C((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)v110, a3);
        return;
      case 4uLL:
        sub_1DCB02D4C(a1, a1 + 24, a1 + 48, v110, a3);
        return;
      case 5uLL:
        v46 = (__int128 *)(a1 + 24);
        v47 = (__int128 *)(a1 + 48);
        v48 = (__int128 *)(a1 + 72);
        v49 = sub_1DCB02D4C(a1, a1 + 24, a1 + 48, a1 + 72, a3);
        if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a3)(v110, a1 + 72, v49))
        {
          v114 = *v48;
          v50 = v114;
          v115 = *(_QWORD *)(a1 + 88);
          v51 = v115;
          v52 = *(_QWORD *)(v110 + 16);
          *v48 = *(_OWORD *)v110;
          *(_QWORD *)(a1 + 88) = v52;
          *(_QWORD *)(v110 + 16) = v51;
          *(_OWORD *)v110 = v50;
          if ((*a3)((__int128 *)(a1 + 72), (__int128 *)(a1 + 48)))
          {
            v53 = *(_QWORD *)(a1 + 64);
            v54 = *v47;
            *v47 = *v48;
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
            *v48 = v54;
            *(_QWORD *)(a1 + 88) = v53;
            if ((*a3)((__int128 *)(a1 + 48), (__int128 *)(a1 + 24)))
            {
              v55 = *(_QWORD *)(a1 + 40);
              v56 = *v46;
              *v46 = *v47;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
              *v47 = v56;
              *(_QWORD *)(a1 + 64) = v55;
              if ((*a3)((__int128 *)(a1 + 24), (__int128 *)a1))
              {
                v57 = *(_OWORD *)a1;
                v115 = *(_QWORD *)(a1 + 16);
                v114 = v57;
                *(_OWORD *)a1 = *v46;
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
                *v46 = v114;
                *(_QWORD *)(a1 + 40) = v115;
              }
            }
          }
        }
        return;
      default:
        if (v11 <= 575)
        {
          v58 = (__int128 *)(a1 + 24);
          v59 = a1 == a2 || v58 == (__int128 *)a2;
          v60 = v59;
          if ((a5 & 1) != 0)
          {
            if ((v60 & 1) == 0)
            {
              v61 = 0;
              v62 = a1;
              do
              {
                v63 = (__int128 *)v62;
                v62 = (uint64_t)v58;
                if ((*a3)(v58, v63))
                {
                  v64 = *(_OWORD *)v62;
                  v115 = *(_QWORD *)(v62 + 16);
                  v114 = v64;
                  v65 = v61;
                  while (1)
                  {
                    v66 = a1 + v65;
                    *(_OWORD *)(v66 + 24) = *(_OWORD *)(a1 + v65);
                    *(_QWORD *)(v66 + 40) = *(_QWORD *)(a1 + v65 + 16);
                    if (!v65)
                      break;
                    v65 -= 24;
                    if (((*a3)(&v114, (__int128 *)(v65 + a1)) & 1) == 0)
                    {
                      v67 = a1 + v65 + 24;
                      goto LABEL_77;
                    }
                  }
                  v67 = a1;
LABEL_77:
                  v68 = v114;
                  *(_QWORD *)(v67 + 16) = v115;
                  *(_OWORD *)v67 = v68;
                }
                v58 = (__int128 *)(v62 + 24);
                v61 += 24;
              }
              while (v62 + 24 != a2);
            }
          }
          else if ((v60 & 1) == 0)
          {
            v101 = a1 - 24;
            do
            {
              v102 = (__int128 *)a1;
              a1 = (uint64_t)v58;
              if ((*a3)(v58, v102))
              {
                v103 = *(_OWORD *)a1;
                v115 = *(_QWORD *)(a1 + 16);
                v114 = v103;
                v104 = v101;
                do
                {
                  *(_OWORD *)(v104 + 48) = *(_OWORD *)(v104 + 24);
                  *(_QWORD *)(v104 + 64) = *(_QWORD *)(v104 + 40);
                  v105 = (*a3)(&v114, (__int128 *)v104);
                  v104 -= 24;
                }
                while ((v105 & 1) != 0);
                v106 = v114;
                *(_QWORD *)(v104 + 64) = v115;
                *(_OWORD *)(v104 + 48) = v106;
              }
              v58 = (__int128 *)(a1 + 24);
              v101 += 24;
            }
            while (a1 + 24 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v69 = (v12 - 2) >> 1;
            v109 = a2;
            v111 = v69;
            do
            {
              v70 = v69;
              if (v111 >= v69)
              {
                v71 = (2 * v69) | 1;
                v72 = a1 + 24 * v71;
                if (2 * v69 + 2 < (uint64_t)v12
                  && (*a3)((__int128 *)(a1 + 24 * v71), (__int128 *)(v72 + 24)))
                {
                  v72 += 24;
                  v71 = 2 * v70 + 2;
                }
                v73 = a1 + 24 * v70;
                if (((*a3)((__int128 *)v72, (__int128 *)v73) & 1) == 0)
                {
                  v74 = *(_OWORD *)v73;
                  v115 = *(_QWORD *)(v73 + 16);
                  v114 = v74;
                  do
                  {
                    v75 = v72;
                    v76 = *(_OWORD *)v72;
                    *(_QWORD *)(v73 + 16) = *(_QWORD *)(v72 + 16);
                    *(_OWORD *)v73 = v76;
                    if (v111 < v71)
                      break;
                    v77 = (2 * v71) | 1;
                    v72 = a1 + 24 * v77;
                    v78 = 2 * v71 + 2;
                    if (v78 < (uint64_t)v12 && (*a3)((__int128 *)(a1 + 24 * v77), (__int128 *)(v72 + 24)))
                    {
                      v72 += 24;
                      v77 = v78;
                    }
                    v73 = v75;
                    v71 = v77;
                  }
                  while (!(*a3)((__int128 *)v72, &v114));
                  v79 = v114;
                  *(_QWORD *)(v75 + 16) = v115;
                  *(_OWORD *)v75 = v79;
                  a2 = v109;
                }
              }
              v69 = v70 - 1;
            }
            while (v70);
            v80 = v11 / 0x18uLL;
            do
            {
              v81 = 0;
              v82 = *(_OWORD *)a1;
              v113 = *(_QWORD *)(a1 + 16);
              v112 = v82;
              v83 = a1;
              do
              {
                v84 = v83 + 24 * v81 + 24;
                v85 = (2 * v81) | 1;
                v86 = 2 * v81 + 2;
                if (v86 < v80
                  && (*a3)((__int128 *)(v83 + 24 * v81 + 24), (__int128 *)(v83 + 24 * v81 + 48)))
                {
                  v84 += 24;
                  v85 = v86;
                }
                v87 = *(_OWORD *)v84;
                *(_QWORD *)(v83 + 16) = *(_QWORD *)(v84 + 16);
                *(_OWORD *)v83 = v87;
                v83 = v84;
                v81 = v85;
              }
              while (v85 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
              v88 = (__int128 *)(a2 - 24);
              if (v84 == a2 - 24)
              {
                v91 = a2 - 24;
                v99 = v112;
                *(_QWORD *)(v84 + 16) = v113;
                *(_OWORD *)v84 = v99;
              }
              else
              {
                v89 = *v88;
                *(_QWORD *)(v84 + 16) = *(_QWORD *)(a2 - 8);
                *(_OWORD *)v84 = v89;
                v90 = v112;
                *(_QWORD *)(a2 - 8) = v113;
                v91 = a2 - 24;
                *v88 = v90;
                v92 = v84 - a1 + 24;
                if (v92 >= 25)
                {
                  v93 = (v92 / 0x18uLL - 2) >> 1;
                  v94 = a1 + 24 * v93;
                  if ((*a3)((__int128 *)v94, (__int128 *)v84))
                  {
                    v95 = *(_OWORD *)v84;
                    v115 = *(_QWORD *)(v84 + 16);
                    v114 = v95;
                    do
                    {
                      v96 = v94;
                      v97 = *(_OWORD *)v94;
                      *(_QWORD *)(v84 + 16) = *(_QWORD *)(v94 + 16);
                      *(_OWORD *)v84 = v97;
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                      v94 = a1 + 24 * v93;
                      v84 = v96;
                    }
                    while (((*a3)((__int128 *)v94, &v114) & 1) != 0);
                    v98 = v114;
                    *(_QWORD *)(v96 + 16) = v115;
                    *(_OWORD *)v96 = v98;
                  }
                }
              }
              v100 = v80-- <= 2;
              a2 = v91;
            }
            while (!v100);
          }
          return;
        }
        v13 = a2;
        v14 = a1 + 24 * (v12 >> 1);
        if ((unint64_t)v11 < 0xC01)
        {
          sub_1DCB0294C((__int128 *)(a1 + 24 * (v12 >> 1)), (__int128 *)a1, (__int128 *)v110, a3);
        }
        else
        {
          sub_1DCB0294C((__int128 *)a1, (__int128 *)(a1 + 24 * (v12 >> 1)), (__int128 *)v110, a3);
          v15 = 3 * (v12 >> 1);
          v16 = (__int128 *)(a1 + 24 * (v12 >> 1) - 24);
          sub_1DCB0294C((__int128 *)(a1 + 24), v16, v108, a3);
          sub_1DCB0294C((__int128 *)(a1 + 48), (__int128 *)(a1 + 24 + 8 * v15), v107, a3);
          sub_1DCB0294C(v16, (__int128 *)v14, (__int128 *)(a1 + 24 + 8 * v15), a3);
          v17 = *(_OWORD *)a1;
          v115 = *(_QWORD *)(a1 + 16);
          v114 = v17;
          v18 = *(_QWORD *)(v14 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_QWORD *)(a1 + 16) = v18;
          v19 = v114;
          *(_QWORD *)(v14 + 16) = v115;
          *(_OWORD *)v14 = v19;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)((__int128 *)(a1 - 24), (__int128 *)a1) & 1) == 0)
        {
          v33 = *(_OWORD *)a1;
          v113 = *(_QWORD *)(a1 + 16);
          v112 = v33;
          if (((*a3)(&v112, (__int128 *)v110) & 1) != 0)
          {
            v10 = a1;
            a2 = v13;
            do
              v10 += 24;
            while (((*a3)(&v112, (__int128 *)v10) & 1) == 0);
          }
          else
          {
            v34 = (__int128 *)(a1 + 24);
            a2 = v13;
            do
            {
              v10 = (unint64_t)v34;
              if ((unint64_t)v34 >= v13)
                break;
              v35 = (*a3)(&v112, v34);
              v34 = (__int128 *)(v10 + 24);
            }
            while (!v35);
          }
          v36 = a2;
          if (v10 < a2)
          {
            v36 = a2;
            do
              v36 -= 24;
            while (((*a3)(&v112, (__int128 *)v36) & 1) != 0);
          }
          while (v10 < v36)
          {
            v37 = *(_OWORD *)v10;
            v115 = *(_QWORD *)(v10 + 16);
            v114 = v37;
            v38 = *(_OWORD *)v36;
            *(_QWORD *)(v10 + 16) = *(_QWORD *)(v36 + 16);
            *(_OWORD *)v10 = v38;
            v39 = v114;
            *(_QWORD *)(v36 + 16) = v115;
            *(_OWORD *)v36 = v39;
            do
              v10 += 24;
            while (!(*a3)(&v112, (__int128 *)v10));
            do
              v36 -= 24;
            while (((*a3)(&v112, (__int128 *)v36) & 1) != 0);
          }
          v40 = (__int128 *)(v10 - 24);
          if (v10 - 24 != a1)
          {
            v41 = *v40;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 8);
            *(_OWORD *)a1 = v41;
          }
          a5 = 0;
          v42 = v112;
          *(_QWORD *)(v10 - 8) = v113;
          *v40 = v42;
          continue;
        }
        v20 = 0;
        v21 = *(_OWORD *)a1;
        v113 = *(_QWORD *)(a1 + 16);
        v112 = v21;
        do
          v20 += 24;
        while (((*a3)((__int128 *)(v20 + a1), &v112) & 1) != 0);
        v22 = a1 + v20;
        v23 = (__int128 *)v13;
        v59 = v20 == 24;
        a2 = v13;
        if (v59)
        {
          v23 = (__int128 *)v13;
          do
          {
            if (v22 >= (unint64_t)v23)
              break;
            v23 = (__int128 *)((char *)v23 - 24);
          }
          while (((*a3)(v23, &v112) & 1) == 0);
        }
        else
        {
          do
            v23 = (__int128 *)((char *)v23 - 24);
          while (!(*a3)(v23, &v112));
        }
        if (v22 >= (unint64_t)v23)
        {
          v29 = v22 - 24;
        }
        else
        {
          v24 = v23;
          v25 = v22;
          do
          {
            v26 = *(_OWORD *)v25;
            v115 = *(_QWORD *)(v25 + 16);
            v114 = v26;
            v27 = *v24;
            *(_QWORD *)(v25 + 16) = *((_QWORD *)v24 + 2);
            *(_OWORD *)v25 = v27;
            v28 = v114;
            *((_QWORD *)v24 + 2) = v115;
            *v24 = v28;
            do
              v25 += 24;
            while (((*a3)((__int128 *)v25, &v112) & 1) != 0);
            do
              v24 = (__int128 *)((char *)v24 - 24);
            while (!(*a3)(v24, &v112));
          }
          while (v25 < (unint64_t)v24);
          v29 = v25 - 24;
        }
        if (v29 != a1)
        {
          v30 = *(_OWORD *)v29;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v29 + 16);
          *(_OWORD *)a1 = v30;
        }
        v31 = v112;
        *(_QWORD *)(v29 + 16) = v113;
        *(_OWORD *)v29 = v31;
        if (v22 < (unint64_t)v23)
        {
LABEL_31:
          sub_1DCB01F6C(a1, v29, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v29 + 24;
          continue;
        }
        v32 = sub_1DCB02A84(a1, v29, a3);
        v10 = v29 + 24;
        if (!sub_1DCB02A84(v29 + 24, v13, a3))
        {
          if (v32)
            continue;
          goto LABEL_31;
        }
        a2 = v29;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v110 = a2 - 24;
  v107 = (__int128 *)(a2 - 72);
  v108 = (__int128 *)(a2 - 48);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)v110, (__int128 *)a1))
        {
          v43 = *(_OWORD *)a1;
          v115 = *(_QWORD *)(a1 + 16);
          v114 = v43;
          v44 = *(_OWORD *)v110;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v110 + 16);
          *(_OWORD *)a1 = v44;
          v45 = v114;
          *(_QWORD *)(v110 + 16) = v115;
          *(_OWORD *)v110 = v45;
        }
        return;
      case 3uLL:
        sub_1DCB0294C((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)v110, a3);
        return;
      case 4uLL:
        sub_1DCB02D4C(a1, a1 + 24, a1 + 48, v110, a3);
        return;
      case 5uLL:
        v46 = (__int128 *)(a1 + 24);
        v47 = (__int128 *)(a1 + 48);
        v48 = (__int128 *)(a1 + 72);
        v49 = sub_1DCB02D4C(a1, a1 + 24, a1 + 48, a1 + 72, a3);
        if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a3)(v110, a1 + 72, v49))
        {
          v114 = *v48;
          v50 = v114;
          v115 = *(_QWORD *)(a1 + 88);
          v51 = v115;
          v52 = *(_QWORD *)(v110 + 16);
          *v48 = *(_OWORD *)v110;
          *(_QWORD *)(a1 + 88) = v52;
          *(_QWORD *)(v110 + 16) = v51;
          *(_OWORD *)v110 = v50;
          if ((*a3)((__int128 *)(a1 + 72), (__int128 *)(a1 + 48)))
          {
            v53 = *(_QWORD *)(a1 + 64);
            v54 = *v47;
            *v47 = *v48;
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
            *v48 = v54;
            *(_QWORD *)(a1 + 88) = v53;
            if ((*a3)((__int128 *)(a1 + 48), (__int128 *)(a1 + 24)))
            {
              v55 = *(_QWORD *)(a1 + 40);
              v56 = *v46;
              *v46 = *v47;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
              *v47 = v56;
              *(_QWORD *)(a1 + 64) = v55;
              if ((*a3)((__int128 *)(a1 + 24), (__int128 *)a1))
              {
                v57 = *(_OWORD *)a1;
                v115 = *(_QWORD *)(a1 + 16);
                v114 = v57;
                *(_OWORD *)a1 = *v46;
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
                *v46 = v114;
                *(_QWORD *)(a1 + 40) = v115;
              }
            }
          }
        }
        return;
      default:
        if (v11 <= 575)
        {
          v58 = (__int128 *)(a1 + 24);
          v59 = a1 == a2 || v58 == (__int128 *)a2;
          v60 = v59;
          if ((a5 & 1) != 0)
          {
            if ((v60 & 1) == 0)
            {
              v61 = 0;
              v62 = a1;
              do
              {
                v63 = (__int128 *)v62;
                v62 = (uint64_t)v58;
                if ((*a3)(v58, v63))
                {
                  v64 = *(_OWORD *)v62;
                  v115 = *(_QWORD *)(v62 + 16);
                  v114 = v64;
                  v65 = v61;
                  while (1)
                  {
                    v66 = a1 + v65;
                    *(_OWORD *)(v66 + 24) = *(_OWORD *)(a1 + v65);
                    *(_QWORD *)(v66 + 40) = *(_QWORD *)(a1 + v65 + 16);
                    if (!v65)
                      break;
                    v65 -= 24;
                    if (((*a3)(&v114, (__int128 *)(v65 + a1)) & 1) == 0)
                    {
                      v67 = a1 + v65 + 24;
                      goto LABEL_77;
                    }
                  }
                  v67 = a1;
LABEL_77:
                  v68 = v114;
                  *(_QWORD *)(v67 + 16) = v115;
                  *(_OWORD *)v67 = v68;
                }
                v58 = (__int128 *)(v62 + 24);
                v61 += 24;
              }
              while (v62 + 24 != a2);
            }
          }
          else if ((v60 & 1) == 0)
          {
            v101 = a1 - 24;
            do
            {
              v102 = (__int128 *)a1;
              a1 = (uint64_t)v58;
              if ((*a3)(v58, v102))
              {
                v103 = *(_OWORD *)a1;
                v115 = *(_QWORD *)(a1 + 16);
                v114 = v103;
                v104 = v101;
                do
                {
                  *(_OWORD *)(v104 + 48) = *(_OWORD *)(v104 + 24);
                  *(_QWORD *)(v104 + 64) = *(_QWORD *)(v104 + 40);
                  v105 = (*a3)(&v114, (__int128 *)v104);
                  v104 -= 24;
                }
                while ((v105 & 1) != 0);
                v106 = v114;
                *(_QWORD *)(v104 + 64) = v115;
                *(_OWORD *)(v104 + 48) = v106;
              }
              v58 = (__int128 *)(a1 + 24);
              v101 += 24;
            }
            while (a1 + 24 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v69 = (v12 - 2) >> 1;
            v109 = a2;
            v111 = v69;
            do
            {
              v70 = v69;
              if (v111 >= v69)
              {
                v71 = (2 * v69) | 1;
                v72 = a1 + 24 * v71;
                if (2 * v69 + 2 < (uint64_t)v12
                  && (*a3)((__int128 *)(a1 + 24 * v71), (__int128 *)(v72 + 24)))
                {
                  v72 += 24;
                  v71 = 2 * v70 + 2;
                }
                v73 = a1 + 24 * v70;
                if (((*a3)((__int128 *)v72, (__int128 *)v73) & 1) == 0)
                {
                  v74 = *(_OWORD *)v73;
                  v115 = *(_QWORD *)(v73 + 16);
                  v114 = v74;
                  do
                  {
                    v75 = v72;
                    v76 = *(_OWORD *)v72;
                    *(_QWORD *)(v73 + 16) = *(_QWORD *)(v72 + 16);
                    *(_OWORD *)v73 = v76;
                    if (v111 < v71)
                      break;
                    v77 = (2 * v71) | 1;
                    v72 = a1 + 24 * v77;
                    v78 = 2 * v71 + 2;
                    if (v78 < (uint64_t)v12 && (*a3)((__int128 *)(a1 + 24 * v77), (__int128 *)(v72 + 24)))
                    {
                      v72 += 24;
                      v77 = v78;
                    }
                    v73 = v75;
                    v71 = v77;
                  }
                  while (!(*a3)((__int128 *)v72, &v114));
                  v79 = v114;
                  *(_QWORD *)(v75 + 16) = v115;
                  *(_OWORD *)v75 = v79;
                  a2 = v109;
                }
              }
              v69 = v70 - 1;
            }
            while (v70);
            v80 = v11 / 0x18uLL;
            do
            {
              v81 = 0;
              v82 = *(_OWORD *)a1;
              v113 = *(_QWORD *)(a1 + 16);
              v112 = v82;
              v83 = a1;
              do
              {
                v84 = v83 + 24 * v81 + 24;
                v85 = (2 * v81) | 1;
                v86 = 2 * v81 + 2;
                if (v86 < v80
                  && (*a3)((__int128 *)(v83 + 24 * v81 + 24), (__int128 *)(v83 + 24 * v81 + 48)))
                {
                  v84 += 24;
                  v85 = v86;
                }
                v87 = *(_OWORD *)v84;
                *(_QWORD *)(v83 + 16) = *(_QWORD *)(v84 + 16);
                *(_OWORD *)v83 = v87;
                v83 = v84;
                v81 = v85;
              }
              while (v85 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
              v88 = (__int128 *)(a2 - 24);
              if (v84 == a2 - 24)
              {
                v91 = a2 - 24;
                v99 = v112;
                *(_QWORD *)(v84 + 16) = v113;
                *(_OWORD *)v84 = v99;
              }
              else
              {
                v89 = *v88;
                *(_QWORD *)(v84 + 16) = *(_QWORD *)(a2 - 8);
                *(_OWORD *)v84 = v89;
                v90 = v112;
                *(_QWORD *)(a2 - 8) = v113;
                v91 = a2 - 24;
                *v88 = v90;
                v92 = v84 - a1 + 24;
                if (v92 >= 25)
                {
                  v93 = (v92 / 0x18uLL - 2) >> 1;
                  v94 = a1 + 24 * v93;
                  if ((*a3)((__int128 *)v94, (__int128 *)v84))
                  {
                    v95 = *(_OWORD *)v84;
                    v115 = *(_QWORD *)(v84 + 16);
                    v114 = v95;
                    do
                    {
                      v96 = v94;
                      v97 = *(_OWORD *)v94;
                      *(_QWORD *)(v84 + 16) = *(_QWORD *)(v94 + 16);
                      *(_OWORD *)v84 = v97;
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                      v94 = a1 + 24 * v93;
                      v84 = v96;
                    }
                    while (((*a3)((__int128 *)v94, &v114) & 1) != 0);
                    v98 = v114;
                    *(_QWORD *)(v96 + 16) = v115;
                    *(_OWORD *)v96 = v98;
                  }
                }
              }
              v100 = v80-- <= 2;
              a2 = v91;
            }
            while (!v100);
          }
          return;
        }
        v13 = a2;
        v14 = a1 + 24 * (v12 >> 1);
        if ((unint64_t)v11 < 0xC01)
        {
          sub_1DCB0294C((__int128 *)(a1 + 24 * (v12 >> 1)), (__int128 *)a1, (__int128 *)v110, a3);
        }
        else
        {
          sub_1DCB0294C((__int128 *)a1, (__int128 *)(a1 + 24 * (v12 >> 1)), (__int128 *)v110, a3);
          v15 = 3 * (v12 >> 1);
          v16 = (__int128 *)(a1 + 24 * (v12 >> 1) - 24);
          sub_1DCB0294C((__int128 *)(a1 + 24), v16, v108, a3);
          sub_1DCB0294C((__int128 *)(a1 + 48), (__int128 *)(a1 + 24 + 8 * v15), v107, a3);
          sub_1DCB0294C(v16, (__int128 *)v14, (__int128 *)(a1 + 24 + 8 * v15), a3);
          v17 = *(_OWORD *)a1;
          v115 = *(_QWORD *)(a1 + 16);
          v114 = v17;
          v18 = *(_QWORD *)(v14 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_QWORD *)(a1 + 16) = v18;
          v19 = v114;
          *(_QWORD *)(v14 + 16) = v115;
          *(_OWORD *)v14 = v19;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)((__int128 *)(a1 - 24), (__int128 *)a1) & 1) == 0)
        {
          v33 = *(_OWORD *)a1;
          v113 = *(_QWORD *)(a1 + 16);
          v112 = v33;
          if (((*a3)(&v112, (__int128 *)v110) & 1) != 0)
          {
            v10 = a1;
            a2 = v13;
            do
              v10 += 24;
            while (((*a3)(&v112, (__int128 *)v10) & 1) == 0);
          }
          else
          {
            v34 = (__int128 *)(a1 + 24);
            a2 = v13;
            do
            {
              v10 = (unint64_t)v34;
              if ((unint64_t)v34 >= v13)
                break;
              v35 = (*a3)(&v112, v34);
              v34 = (__int128 *)(v10 + 24);
            }
            while (!v35);
          }
          v36 = a2;
          if (v10 < a2)
          {
            v36 = a2;
            do
              v36 -= 24;
            while (((*a3)(&v112, (__int128 *)v36) & 1) != 0);
          }
          while (v10 < v36)
          {
            v37 = *(_OWORD *)v10;
            v115 = *(_QWORD *)(v10 + 16);
            v114 = v37;
            v38 = *(_OWORD *)v36;
            *(_QWORD *)(v10 + 16) = *(_QWORD *)(v36 + 16);
            *(_OWORD *)v10 = v38;
            v39 = v114;
            *(_QWORD *)(v36 + 16) = v115;
            *(_OWORD *)v36 = v39;
            do
              v10 += 24;
            while (!(*a3)(&v112, (__int128 *)v10));
            do
              v36 -= 24;
            while (((*a3)(&v112, (__int128 *)v36) & 1) != 0);
          }
          v40 = (__int128 *)(v10 - 24);
          if (v10 - 24 != a1)
          {
            v41 = *v40;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 8);
            *(_OWORD *)a1 = v41;
          }
          a5 = 0;
          v42 = v112;
          *(_QWORD *)(v10 - 8) = v113;
          *v40 = v42;
          continue;
        }
        v20 = 0;
        v21 = *(_OWORD *)a1;
        v113 = *(_QWORD *)(a1 + 16);
        v112 = v21;
        do
          v20 += 24;
        while (((*a3)((__int128 *)(v20 + a1), &v112) & 1) != 0);
        v22 = a1 + v20;
        v23 = (__int128 *)v13;
        v59 = v20 == 24;
        a2 = v13;
        if (v59)
        {
          v23 = (__int128 *)v13;
          do
          {
            if (v22 >= (unint64_t)v23)
              break;
            v23 = (__int128 *)((char *)v23 - 24);
          }
          while (((*a3)(v23, &v112) & 1) == 0);
        }
        else
        {
          do
            v23 = (__int128 *)((char *)v23 - 24);
          while (!(*a3)(v23, &v112));
        }
        if (v22 >= (unint64_t)v23)
        {
          v29 = v22 - 24;
        }
        else
        {
          v24 = v23;
          v25 = v22;
          do
          {
            v26 = *(_OWORD *)v25;
            v115 = *(_QWORD *)(v25 + 16);
            v114 = v26;
            v27 = *v24;
            *(_QWORD *)(v25 + 16) = *((_QWORD *)v24 + 2);
            *(_OWORD *)v25 = v27;
            v28 = v114;
            *((_QWORD *)v24 + 2) = v115;
            *v24 = v28;
            do
              v25 += 24;
            while (((*a3)((__int128 *)v25, &v112) & 1) != 0);
            do
              v24 = (__int128 *)((char *)v24 - 24);
            while (!(*a3)(v24, &v112));
          }
          while (v25 < (unint64_t)v24);
          v29 = v25 - 24;
        }
        if (v29 != a1)
        {
          v30 = *(_OWORD *)v29;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v29 + 16);
          *(_OWORD *)a1 = v30;
        }
        v31 = v112;
        *(_QWORD *)(v29 + 16) = v113;
        *(_OWORD *)v29 = v31;
        if (v22 < (unint64_t)v23)
        {
LABEL_31:
          sub_1DCC0DF14(a1, v29, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v29 + 24;
          continue;
        }
        v32 = sub_1DCC0E8F4(a1, v29, a3);
        v10 = v29 + 24;
        if (!sub_1DCC0E8F4(v29 + 24, v13, a3))
        {
          if (v32)
            continue;
          goto LABEL_31;
        }
        a2 = v29;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

uint64_t sub_1DCB0294C(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = *((_QWORD *)a1 + 2);
      v11 = *a1;
      v12 = *((_QWORD *)a3 + 2);
      *a1 = *a3;
      *((_QWORD *)a1 + 2) = v12;
    }
    else
    {
      v19 = *((_QWORD *)a1 + 2);
      v20 = *a1;
      v21 = *((_QWORD *)a2 + 2);
      *a1 = *a2;
      *((_QWORD *)a1 + 2) = v21;
      *a2 = v20;
      *((_QWORD *)a2 + 2) = v19;
      result = (*a4)(a3, a2);
      if (!(_DWORD)result)
        return result;
      v10 = *((_QWORD *)a2 + 2);
      v11 = *a2;
      v22 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v22;
    }
    *a3 = v11;
    *((_QWORD *)a3 + 2) = v10;
  }
  else if ((_DWORD)result)
  {
    v13 = *((_QWORD *)a2 + 2);
    v14 = *a2;
    v15 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v15;
    *a3 = v14;
    *((_QWORD *)a3 + 2) = v13;
    result = (*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v16 = *((_QWORD *)a1 + 2);
      v17 = *a1;
      v18 = *((_QWORD *)a2 + 2);
      *a1 = *a2;
      *((_QWORD *)a1 + 2) = v18;
      *a2 = v17;
      *((_QWORD *)a2 + 2) = v16;
    }
  }
  return result;
}

BOOL sub_1DCB02A84(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 24);
      if ((*a3)((__int128 *)(a2 - 24), (__int128 *)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = v11;
        *v8 = v10;
        *(_QWORD *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      sub_1DCB0294C((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_1DCB02D4C(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      v19 = (__int128 *)(a1 + 24);
      v20 = (__int128 *)(a1 + 48);
      v21 = (__int128 *)(a1 + 72);
      v22 = a2 - 24;
      v23 = sub_1DCB02D4C(a1, a1 + 24, a1 + 48, a1 + 72, a3);
      if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a3)(v22, a1 + 72, v23))
      {
        v24 = *(_QWORD *)(a1 + 88);
        v25 = *v21;
        v26 = *(_QWORD *)(v22 + 16);
        *v21 = *(_OWORD *)v22;
        *(_QWORD *)(a1 + 88) = v26;
        *(_OWORD *)v22 = v25;
        *(_QWORD *)(v22 + 16) = v24;
        if ((*a3)((__int128 *)(a1 + 72), (__int128 *)(a1 + 48)))
        {
          v27 = *(_QWORD *)(a1 + 64);
          v28 = *v20;
          *v20 = *v21;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v21 = v28;
          *(_QWORD *)(a1 + 88) = v27;
          if ((*a3)((__int128 *)(a1 + 48), (__int128 *)(a1 + 24)))
          {
            v29 = *(_QWORD *)(a1 + 40);
            v30 = *v19;
            *v19 = *v20;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v20 = v30;
            *(_QWORD *)(a1 + 64) = v29;
            if ((*a3)((__int128 *)(a1 + 24), (__int128 *)a1))
            {
              v31 = *(_QWORD *)(a1 + 16);
              v32 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v19 = v32;
              *(_QWORD *)(a1 + 40) = v31;
            }
          }
        }
      }
      return 1;
    default:
      v12 = (__int128 *)(a1 + 48);
      sub_1DCB0294C((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v13, v12))
    {
      v33 = *(_OWORD *)v13;
      v34 = *(_QWORD *)(v13 + 16);
      v16 = v14;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (((*a3)(&v33, (__int128 *)(v17 + 24)) & 1) == 0)
        {
          v18 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(_OWORD *)v18 = v33;
      *(_QWORD *)(v18 + 16) = v34;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (__int128 *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 sub_1DCB02D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1DCB0294C((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_OWORD *)a3;
    v13 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(_QWORD *)(a4 + 16) = v11;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v14 = *(_QWORD *)(a2 + 16);
      v15 = *(_OWORD *)a2;
      v16 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(_QWORD *)(a3 + 16) = v14;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        v17 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

_QWORD *sub_1DCB02E34(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1DCB02EAC(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DCB02E90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DCB02EAC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_1DCAE4C44();
  result = (char *)sub_1DCAFBD5C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t *sub_1DCB02EEC(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v10 = 0;
  v11 = 0;
  v6 = sub_1DCB02F74(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_1DCACAE54(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1DCB02F74(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *sub_1DCB0311C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1DCB02EAC(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DCB03178(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1DCB03194(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1DCB031E8(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1DCB031D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAE4E44(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1DCB031E8(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1DCB02EEC(v5, v6, v4 + 7, v4 + 7);
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_1DCB0326C(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 28);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28))
    return 0;
  sub_1DCAE85A0((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

_QWORD *sub_1DCB032E4(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t sub_1DCB03344(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v8;

  v8 = (void **)(a1 + 144);
  sub_1DCB033D8(&v8);
  sub_1DCACB5E8(a1 + 120, *(char **)(a1 + 128));
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_1DCB033D8(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_1DCB00FCC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1DCB0345C(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1DCB011AC();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_1DCB0350C()
{
  sub_1DCB03520("basic_string");
}

void sub_1DCB03520(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1DCB03570(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1EA5730C0, MEMORY[0x1E0DE42E0]);
}

void sub_1DCB0355C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1DCB03570(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

uint64_t sub_1DCB03594(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_1DCB03624(a1);
  return a1;
}

void sub_1DCB03600(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_1DCB03624(uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

_QWORD *sub_1DCB03734(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD v13[2];
  std::locale v14;

  v13[0] = 0;
  v13[1] = 0;
  MEMORY[0x1DF0D2118](v13, a1);
  if (LOBYTE(v13[0]))
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_1DCB0389C(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1DF0D2124](v13);
  return a1;
}

void sub_1DCB03840(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1DF0D2124](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1DCB03820);
}

void sub_1DCB03888(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB0389C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      __p[0] = 0;
      __p[1] = 0;
      v18 = 0;
      sub_1DCB039E0(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (SHIBYTE(v18) < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1DCB039C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1DCB039E0(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_1DCB011AC();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

float32x4_t **sub_1DCB03A88(uint64_t a1, __int128 **a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  float32x4_t ***v14;
  float32x4_t **i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_1DCB3EEBC(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v13 = v8;
      if (v8 >= v10)
        v13 = v8 % v10;
    }
    else
    {
      v13 = (v10 - 1) & v8;
    }
    v14 = *(float32x4_t ****)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      for (i = *v14; i; i = (float32x4_t **)*i)
      {
        v16 = (unint64_t)i[1];
        if (v16 == v9)
        {
          if (sub_1DCB3EF7C(a1 + 32, i + 2, (float32x4_t **)a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10)
              v16 %= v10;
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13)
            break;
        }
      }
    }
  }
  else
  {
    v13 = 0;
  }
  memset(v26, 0, sizeof(v26));
  sub_1DCB03D28(a1, v9, a4, v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_1DCAD4EF4(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v13 = v9 % v10;
      else
        v13 = v9;
    }
    else
    {
      v13 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (float32x4_t **)v26[0];
  ++*v7;
  return i;
}

void sub_1DCB03D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *__p, uint64_t a13)
{
  if (__p)
    sub_1DCB03DD0((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1DCB03D28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;

  v7 = a1 + 16;
  *a4 = 0;
  a4[2] = 0;
  a4[1] = 0;
  v8 = a4 + 1;
  v9 = operator new(0x30uLL);
  *a4 = v9;
  *v8 = v7;
  *((_BYTE *)a4 + 16) = 0;
  *v9 = 0;
  v9[1] = a2;
  v10 = *a3;
  v9[3] = 0;
  v9[4] = 0;
  v9[2] = 0;
  result = sub_1DCB0311C(v9 + 2, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 4);
  *((_DWORD *)v9 + 10) = 0;
  *((_BYTE *)a4 + 16) = 1;
  return result;
}

void sub_1DCB03DB4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  *v1 = 0;
  sub_1DCB03DD0(v2, v3);
  _Unwind_Resume(a1);
}

void sub_1DCB03DD0(uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[2];
    if (v3)
    {
      __p[3] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

float32x4_t *sub_1DCB03E1C(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t **a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  float32x4_t **v14;
  float32x4_t *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  float32x4_t **v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_1DCB3EDC8(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v13 = v8;
      if (v8 >= v10)
        v13 = v8 % v10;
    }
    else
    {
      v13 = (v10 - 1) & v8;
    }
    v14 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      for (i = *v14; i; i = (float32x4_t *)i->i64[0])
      {
        v16 = i->u64[1];
        if (v16 == v9)
        {
          if (sub_1DCB3EDD8(a1 + 32, i + 1, a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10)
              v16 %= v10;
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13)
            break;
        }
      }
    }
  }
  else
  {
    v13 = 0;
  }
  i = (float32x4_t *)operator new(0x30uLL);
  i->i64[0] = 0;
  i->i64[1] = v9;
  i[1] = **a4;
  i[2].i32[0] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_1DCAD4EF4(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v13 = v9 % v10;
      else
        v13 = v9;
    }
    else
    {
      v13 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v13);
  if (v24)
  {
    i->i64[0] = (uint64_t)*v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  i->i64[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v13) = a1 + 16;
  if (i->i64[0])
  {
    v25 = *(_QWORD *)(i->i64[0] + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (float32x4_t **)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_1DCB04068(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float32x4_t *sub_1DCB0407C(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t **a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  float32x4_t **v14;
  float32x4_t *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  float32x4_t **v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_1DCB3EE0C(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v13 = v8;
      if (v8 >= v10)
        v13 = v8 % v10;
    }
    else
    {
      v13 = (v10 - 1) & v8;
    }
    v14 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      for (i = *v14; i; i = (float32x4_t *)i->i64[0])
      {
        v16 = i->u64[1];
        if (v16 == v9)
        {
          if (sub_1DCB3EE8C(a1 + 32, i + 1, a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10)
              v16 %= v10;
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13)
            break;
        }
      }
    }
  }
  else
  {
    v13 = 0;
  }
  i = (float32x4_t *)operator new(0x30uLL);
  i->i64[0] = 0;
  i->i64[1] = v9;
  i[1] = **a4;
  i[2].i32[0] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_1DCAD4EF4(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v13 = v9 % v10;
      else
        v13 = v9;
    }
    else
    {
      v13 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v13);
  if (v24)
  {
    i->i64[0] = (uint64_t)*v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  i->i64[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v13) = a1 + 16;
  if (i->i64[0])
  {
    v25 = *(_QWORD *)(i->i64[0] + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (float32x4_t **)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_1DCB042C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB042DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    sub_1DCAE4C44();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)sub_1DCAF116C(v7, v9);
  v11 = &v10[32 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[32 * v12];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 1) = 0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v15[2] = v11 + 32;
  sub_1DCB043CC(a1, v15);
  v13 = a1[1];
  sub_1DCB04560((uint64_t)v15);
  return v13;
}

void sub_1DCB043B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCB04560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB043CC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1DCB04440((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1DCB04440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  LOBYTE(v12) = 1;
  sub_1DCB044E8((uint64_t)v11);
  return v9;
}

uint64_t sub_1DCB044E8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1DCB0451C(a1);
  return a1;
}

void sub_1DCB0451C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(_QWORD *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t sub_1DCB04560(uint64_t a1)
{
  sub_1DCB04594(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1DCB04594(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 32;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

void sub_1DCB045EC(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1DCB0462C((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void sub_1DCB0462C(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 80)
  {

  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t sub_1DCB04684(uint64_t a1)
{
  void *v2;

  sub_1DCB046BC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1DCB046BC(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[2];
      if (v4)
      {
        v2[3] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

float32x4_t *sub_1DCB04700(_QWORD *a1, float32x4_t *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  float32x4_t **v10;
  float32x4_t *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_1DCB3EDC8((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(float32x4_t ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = v11->u64[1];
      if (v13 == v6)
      {
        if (sub_1DCB3EDD8(v12, v11 + 1, a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (float32x4_t *)v11->i64[0];
    }
    while (v11);
  }
  return v11;
}

float32x4_t **sub_1DCB04800(_QWORD *a1, __int128 **a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  float32x4_t ***v10;
  float32x4_t **v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_1DCB3EEBC((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(float32x4_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = (unint64_t)v11[1];
      if (v13 == v6)
      {
        if (sub_1DCB3EF7C(v12, v11 + 2, (float32x4_t **)a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (float32x4_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

float32x4_t *sub_1DCB04900(_QWORD *a1, float32x4_t *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  float32x4_t **v10;
  float32x4_t *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_1DCB3EE0C((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(float32x4_t ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = v11->u64[1];
      if (v13 == v6)
      {
        if (sub_1DCB3EE8C(v12, v11 + 1, a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (float32x4_t *)v11->i64[0];
    }
    while (v11);
  }
  return v11;
}

_QWORD *sub_1DCB04A00(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1DCB04A78(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DCB04A5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DCB04A78(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_1DCAE4C44();
  result = (char *)sub_1DCAE4D04((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t sub_1DCB04AB8(uint64_t a1, uint64_t a2)
{
  float32x4_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_1DCAD4EF4(a1, *(_QWORD *)(a2 + 8));
  for (i = *(float32x4_t **)(a2 + 16); i; i = (float32x4_t *)i->i64[0])
    sub_1DCB04B2C(a1, i + 1, i + 1);
  return a1;
}

void sub_1DCB04B14(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAE6B78(v1);
  _Unwind_Resume(a1);
}

float32x4_t *sub_1DCB04B2C(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  float32x4_t *v14;
  unint64_t v15;
  float32x4_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  float32x4_t **v24;
  unint64_t v25;

  v6 = (_QWORD *)(a1 + 24);
  v7 = sub_1DCB3EDC8(a1 + 24, a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = (float32x4_t *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14->u64[1];
          if (v15 == v8)
          {
            if (sub_1DCB3EDD8(a1 + 32, v14 + 1, a2))
              return v14;
          }
          else
          {
            if (v11 > 1)
            {
              if (v15 >= v9)
                v15 %= v9;
            }
            else
            {
              v15 &= v9 - 1;
            }
            if (v15 != v12)
              break;
          }
          v14 = (float32x4_t *)v14->i64[0];
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = (float32x4_t *)operator new(0x30uLL);
  v14->i64[0] = 0;
  v14->i64[1] = v8;
  v16 = a3[1];
  v14[1] = *a3;
  v14[2] = v16;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_1DCAD4EF4(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v12);
  if (v24)
  {
    v14->i64[0] = (uint64_t)*v24;
LABEL_38:
    *v24 = v14;
    goto LABEL_39;
  }
  v14->i64[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v23 + 8 * v12) = a1 + 16;
  if (v14->i64[0])
  {
    v25 = *(_QWORD *)(v14->i64[0] + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (float32x4_t **)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v6;
  return v14;
}

void sub_1DCB04D70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB04D84(uint64_t a1, uint64_t a2)
{
  float32x4_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_1DCAD4EF4(a1, *(_QWORD *)(a2 + 8));
  for (i = *(float32x4_t **)(a2 + 16); i; i = (float32x4_t *)i->i64[0])
    sub_1DCB04DF8(a1, i + 1, i + 1);
  return a1;
}

void sub_1DCB04DE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAE6B78(v1);
  _Unwind_Resume(a1);
}

float32x4_t *sub_1DCB04DF8(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  float32x4_t *v14;
  unint64_t v15;
  float32x4_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  float32x4_t **v24;
  unint64_t v25;

  v6 = (_QWORD *)(a1 + 24);
  v7 = sub_1DCB3EE0C(a1 + 24, a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = (float32x4_t *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14->u64[1];
          if (v15 == v8)
          {
            if (sub_1DCB3EE8C(a1 + 32, v14 + 1, a2))
              return v14;
          }
          else
          {
            if (v11 > 1)
            {
              if (v15 >= v9)
                v15 %= v9;
            }
            else
            {
              v15 &= v9 - 1;
            }
            if (v15 != v12)
              break;
          }
          v14 = (float32x4_t *)v14->i64[0];
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = (float32x4_t *)operator new(0x30uLL);
  v14->i64[0] = 0;
  v14->i64[1] = v8;
  v16 = a3[1];
  v14[1] = *a3;
  v14[2] = v16;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_1DCAD4EF4(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v12);
  if (v24)
  {
    v14->i64[0] = (uint64_t)*v24;
LABEL_38:
    *v24 = v14;
    goto LABEL_39;
  }
  v14->i64[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v23 + 8 * v12) = a1 + 16;
  if (v14->i64[0])
  {
    v25 = *(_QWORD *)(v14->i64[0] + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (float32x4_t **)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v6;
  return v14;
}

void sub_1DCB0503C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB05050(uint64_t a1, uint64_t a2)
{
  __int128 **i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_1DCAD4EF4(a1, *(_QWORD *)(a2 + 8));
  for (i = *(__int128 ***)(a2 + 16); i; i = (__int128 **)*i)
    sub_1DCB050C4(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_1DCB050AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCB04684(v1);
  _Unwind_Resume(a1);
}

float32x4_t **sub_1DCB050C4(uint64_t a1, __int128 **a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  float32x4_t ***v13;
  float32x4_t **i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v6 = (_QWORD *)(a1 + 24);
  v7 = sub_1DCB3EEBC(a1 + 24, a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(float32x4_t ****)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = (float32x4_t **)*i)
      {
        v15 = (unint64_t)i[1];
        if (v15 == v8)
        {
          if (sub_1DCB3EF7C(a1 + 32, i + 2, (float32x4_t **)a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9)
              v15 %= v9;
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  memset(v25, 0, sizeof(v25));
  sub_1DCB0534C(a1, v8, a3, v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_1DCAD4EF4(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9)
          v23 %= v9;
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (float32x4_t **)v25[0];
  ++*v6;
  return i;
}

void sub_1DCB05328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_1DCB03DD0((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1DCB0534C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *result;

  v7 = a1 + 16;
  *a4 = 0;
  a4[2] = 0;
  a4[1] = 0;
  v8 = a4 + 1;
  v9 = operator new(0x30uLL);
  *a4 = v9;
  *v8 = v7;
  *((_BYTE *)a4 + 16) = 0;
  *v9 = 0;
  v9[1] = a2;
  v9[3] = 0;
  v9[4] = 0;
  v9[2] = 0;
  result = sub_1DCB0311C(v9 + 2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
  *((_DWORD *)v9 + 10) = *(_DWORD *)(a3 + 24);
  *((_BYTE *)a4 + 16) = 1;
  return result;
}

void sub_1DCB053D8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  *v1 = 0;
  sub_1DCB03DD0(v2, v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCB053F4(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1DCB02EAC(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DCB05450(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCB0546C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_1DCB057AC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 - 73) < 0)
    operator delete(*(void **)(v2 - 96));

  _Unwind_Resume(a1);
}

void sub_1DCB0588C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB05920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCB059E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1DCB05ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCB05B48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB05BB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB05C28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCB05CC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB05EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);

  _Unwind_Resume(a1);
}

void sub_1DCB05F70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB060B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1DCB060D8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1DCB060E8(uint64_t a1)
{

}

uint64_t sub_1DCB060F0(uint64_t a1, const char *a2)
{
  return objc_msgSend_addObject_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2, (uint64_t)a2);
}

void sub_1DCB0615C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCB0617C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, double a5)
{
  uint64_t v5;
  uint64_t v10;
  float32x2_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  float32x2_t *v16;
  float32x2_t ***v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  float32x4_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = dword_1F03B51A8;
  if (dword_1F03B51A8 >= 1)
  {
    v10 = 0;
    *(float *)&a5 = *(float *)&dword_1F03B51AC * 0.5;
    v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    v12 = 1.0 / (float)dword_1F03B51A8;
    v13 = 16 * dword_1F03B51A8;
    v19 = 8 * dword_1F03B51A8;
    do
    {
      v14 = 0;
      do
      {
        *(float *)&v15 = (float)(int)v14 * v12;
        *((float *)&v15 + 1) = (float)(int)v10 * v12;
        v20 = v15;
        v16 = sub_1DCBEB9E4(a4, v15);
        if (v16 && (v17 = (float32x2_t ***)v16, sub_1DCBEAFD0(v16, *(float32x2_t *)&v20)))
        {
          v24 = 0uLL;
          v25 = 0;
          sub_1DCBEB1B0(v17, &v24, COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&v20, v11)));
          v18 = v25;
          if (!v25)
          {
            sub_1DCBEB1B0(v17, &v22, v20);
            v18 = v23;
            v25 = v23;
            v24 = v22;
          }
          v21 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v18 + 64), *(float *)&v24), *(float32x4_t *)(v18 + 80), *((float *)&v24 + 1)), *(float32x4_t *)(v18 + 96), *((float *)&v24 + 2));
          *(__n128 *)(a1 + 16 * v14) = sub_1DCB3FAA8((__n128 *)v18);
          *(float32x4_t *)(a2 + 16 * v14) = v21;
          *(_QWORD *)(a3 + 8 * v14) = v18;
        }
        else
        {
          *(_OWORD *)(a1 + 16 * v14) = 0u;
        }
        ++v14;
      }
      while (v5 != v14);
      ++v10;
      a1 += v13;
      a2 += v13;
      a3 += v19;
    }
    while (v10 != v5);
  }
}

void sub_1DCB06318(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;

  v4 = a2 + 4 * a3;
  if (*(unsigned __int8 *)(v4 + 3) != 255)
  {
    v7 = *(_BYTE *)(a1 + 2);
    *(_WORD *)v4 = *(_WORD *)a1;
    *(_BYTE *)(v4 + 2) = v7;
    *(_BYTE *)(v4 + 3) = 0;
    v8 = *(_QWORD *)(a4 + 16);
    v9 = *(_DWORD **)(a4 + 8);
    if ((unint64_t)v9 >= v8)
    {
      v11 = *(_DWORD **)a4;
      v12 = ((uint64_t)v9 - *(_QWORD *)a4) >> 2;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        sub_1DCAE4C44();
      v14 = v8 - (_QWORD)v11;
      if (v14 >> 1 > v13)
        v13 = v14 >> 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)sub_1DCAE4D04(a4 + 16, v15);
        v11 = *(_DWORD **)a4;
        v9 = *(_DWORD **)(a4 + 8);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[4 * v12];
      v18 = &v16[4 * v15];
      *(_DWORD *)v17 = a3;
      v10 = v17 + 4;
      while (v9 != v11)
      {
        v19 = *--v9;
        *((_DWORD *)v17 - 1) = v19;
        v17 -= 4;
      }
      *(_QWORD *)a4 = v17;
      *(_QWORD *)(a4 + 8) = v10;
      *(_QWORD *)(a4 + 16) = v18;
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v9 = a3;
      v10 = v9 + 1;
    }
    *(_QWORD *)(a4 + 8) = v10;
  }
}

void sub_1DCB0641C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  float32x4_t *v18;
  __n128 **v19;
  __n128 **v20;
  int32x4_t v21;
  char v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  __n128 *v38;
  float32x4_t v39;
  void *__p;
  char *v41;
  char *v42;
  uint64_t v43;
  _OWORD v44[3];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v43 = a1;
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  sub_1DCB07770(a3, &v43, &v43);
  __p = 0;
  v41 = 0;
  v42 = 0;
  v5 = (char *)sub_1DCAE79A4((uint64_t)&v42, 1uLL);
  v7 = &v5[8 * v6];
  *(_QWORD *)v5 = v43;
  v8 = v5 + 8;
  v10 = (char *)__p;
  v9 = v41;
  if (v41 != __p)
  {
    do
    {
      v11 = *((_QWORD *)v9 - 1);
      v9 -= 8;
      *((_QWORD *)v5 - 1) = v11;
      v5 -= 8;
    }
    while (v9 != v10);
    v9 = (char *)__p;
  }
  __p = v5;
  v41 = v8;
  v42 = v7;
  if (v9)
    operator delete(v9);
  v12 = 0;
  v13 = 0;
  v41 = v8;
  do
  {
    v34 = v13;
    v33 = (unint64_t)(v41 - (_BYTE *)__p) >> 3;
    if (v12 < (int)v33)
    {
      v14 = v12;
      v35 = (int)((v41 - (_BYTE *)__p) >> 3);
      do
      {
        v15 = 0;
        v36 = v14;
        v16 = *((_QWORD *)__p + v14);
        v17 = *(_OWORD *)(v16 + 80);
        v44[0] = *(_OWORD *)(v16 + 64);
        v44[1] = v17;
        v44[2] = *(_OWORD *)(v16 + 96);
        do
        {
          v39 = (float32x4_t)v44[v15];
          v18 = sub_1DCB079C4(a2, &v39);
          if (!v18)
            sub_1DCB03520("unordered_map::at: key not found");
          v19 = (__n128 **)v18[2].i64[0];
          v20 = (__n128 **)v18[2].i64[1];
          while (v19 != v20)
          {
            v38 = 0;
            v38 = *v19;
            v37 = sub_1DCB3FAA8(v38);
            v21 = (int32x4_t)vmulq_f32((float32x4_t)sub_1DCB3FAA8((__n128 *)v16), (float32x4_t)v37);
            if (vaddq_f32(vaddq_f32((float32x4_t)v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 1)), (float32x4_t)vdupq_laneq_s32(v21, 2)).f32[0] > 0.7)
            {
              sub_1DCB07770(a3, &v38, &v38);
              if ((v22 & 1) != 0)
              {
                v23 = v41;
                if (v41 >= v42)
                {
                  v25 = (v41 - (_BYTE *)__p) >> 3;
                  if ((unint64_t)(v25 + 1) >> 61)
                    sub_1DCAE4C44();
                  v26 = (v42 - (_BYTE *)__p) >> 2;
                  if (v26 <= v25 + 1)
                    v26 = v25 + 1;
                  if ((unint64_t)(v42 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                    v27 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v27 = v26;
                  if (v27)
                    v28 = (char *)sub_1DCAE79A4((uint64_t)&v42, v27);
                  else
                    v28 = 0;
                  v29 = &v28[8 * v25];
                  *(_QWORD *)v29 = v38;
                  v24 = v29 + 8;
                  v31 = (char *)__p;
                  v30 = v41;
                  if (v41 != __p)
                  {
                    do
                    {
                      v32 = *((_QWORD *)v30 - 1);
                      v30 -= 8;
                      *((_QWORD *)v29 - 1) = v32;
                      v29 -= 8;
                    }
                    while (v30 != v31);
                    v30 = (char *)__p;
                  }
                  __p = v29;
                  v41 = v24;
                  v42 = &v28[8 * v27];
                  if (v30)
                    operator delete(v30);
                }
                else
                {
                  *(_QWORD *)v41 = v38;
                  v24 = v23 + 8;
                }
                v41 = v24;
              }
            }
            ++v19;
          }
          ++v15;
        }
        while (v15 != 3);
        v14 = v36 + 1;
      }
      while (v36 + 1 != v35);
    }
    v13 = v34 + 1;
    v12 = v33;
  }
  while (v34 != 3);
  if (__p)
  {
    v41 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1DCB06708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  if (__p)
    operator delete(__p);
  sub_1DCAE6B78(v20);
  _Unwind_Resume(a1);
}

id sub_1DCB06748(void *a1, _QWORD *a2, float a3, uint64_t a4, uint64_t a5, float32x4_t ***a6, uint64_t a7, int a8)
{
  uint64_t v11;
  id v12;
  uint64_t v13;
  const char *v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  float32x4_t *v21;
  void *v22;
  double v23;
  float32x4_t **v24;
  float32x4_t **v25;
  float32x4_t *v26;
  float32x4_t *v27;
  float32x4_t **v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  float32x4_t **v37;
  char *v38;
  char *v39;
  float32x4_t *v40;
  float32x4_t *v41;
  float32x4_t **v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  float32x4_t **v51;
  char *v52;
  char *v53;
  float32x4_t *v54;
  float32x4_t *v55;
  float32x4_t **v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  float32x4_t **v65;
  char *v66;
  char *v67;
  float32x4_t *v68;
  uint64_t v69;
  uint64_t i;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int32x4_t v74;
  float32x2_t *v75;
  float32x2_t *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  _DWORD *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  int v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  float v99;
  int v100;
  id v101;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int *v112;
  int *v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  void *v123;
  id v124;
  id v125;
  id v126;
  id v127;
  uint64_t v128;
  id v129;
  NSObject *queue;
  uint64_t **v131;
  void *v132;
  NSObject *group;
  int v135;
  id v137;
  uint64_t v138;
  void *v139;
  int v140;
  float32x4_t *v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  void *__p;
  int *v147;
  uint64_t v148;
  _QWORD block[4];
  id v150;
  id v151;
  float32x4_t *v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  float32x4_t *v156;
  float32x4_t *v157;
  _QWORD v158[9];
  int v159;
  float v160;
  int v161;
  float32x4_t v162;
  uint64_t v163;
  int v164;
  float32x4_t *v165[6];
  _BYTE v166[32];
  int v167;
  int v168;

  v126 = a1;
  v11 = dword_1F03B51A8;
  v12 = objc_alloc(MEMORY[0x1E0C99DF0]);
  v13 = (v11 * v11);
  v125 = (id)objc_msgSend_initWithLength_(v12, v14, (4 * v13));
  v143 = v11;
  v15 = objc_retainAutorelease(v126);
  v18 = objc_msgSend_bytes(v15, v16, v17);
  v124 = objc_retainAutorelease(v125);
  v144 = objc_msgSend_mutableBytes(v124, v19, v20);
  v21 = (float32x4_t *)malloc_type_malloc(16 * v13, 0x1000040451B5BE8uLL);
  v141 = (float32x4_t *)malloc_type_malloc(16 * v13, 0x1000040451B5BE8uLL);
  v138 = v18;
  v123 = v15;
  v22 = malloc_type_malloc(8 * v13, 0x2004093837F09uLL);
  sub_1DCB0617C((uint64_t)v21, (uint64_t)v141, (uint64_t)v22, a2, v23);
  group = dispatch_group_create();
  dispatch_get_global_queue(0, 0);
  queue = objc_claimAutoreleasedReturnValue();
  v168 = 0;
  memset(v166, 0, sizeof(v166));
  v167 = 1065353216;
  v25 = *a6;
  v24 = a6[1];
  while (v25 != v24)
  {
    v26 = *v25;
    v165[0] = *v25 + 4;
    v27 = sub_1DCB07DA0((uint64_t)v166, v165[0], (uint64_t)&unk_1DCC58300, v165);
    v28 = (float32x4_t **)v27[2].i64[1];
    v29 = v27[3].u64[0];
    if ((unint64_t)v28 >= v29)
    {
      v31 = v27[2].i64[0];
      v32 = ((uint64_t)v28 - v31) >> 3;
      if ((unint64_t)(v32 + 1) >> 61)
        goto LABEL_119;
      v33 = v29 - v31;
      v34 = v33 >> 2;
      if (v33 >> 2 <= (unint64_t)(v32 + 1))
        v34 = v32 + 1;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v35 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v35 = v34;
      if (v35)
        v36 = (char *)sub_1DCAE79A4((uint64_t)&v27[3], v35);
      else
        v36 = 0;
      v37 = (float32x4_t **)&v36[8 * v32];
      *v37 = v26;
      v30 = v37 + 1;
      v39 = (char *)v27[2].i64[0];
      v38 = (char *)v27[2].i64[1];
      if (v38 != v39)
      {
        do
        {
          v40 = (float32x4_t *)*((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v37 = v40;
        }
        while (v38 != v39);
        v38 = (char *)v27[2].i64[0];
      }
      v27[2].i64[0] = (uint64_t)v37;
      v27[2].i64[1] = (uint64_t)v30;
      v27[3].i64[0] = (uint64_t)&v36[8 * v35];
      if (v38)
        operator delete(v38);
    }
    else
    {
      *v28 = v26;
      v30 = v28 + 1;
    }
    v27[2].i64[1] = (uint64_t)v30;
    v165[0] = v26 + 5;
    v41 = sub_1DCB07DA0((uint64_t)v166, v26 + 5, (uint64_t)&unk_1DCC58300, v165);
    v42 = (float32x4_t **)v41[2].i64[1];
    v43 = v41[3].u64[0];
    if ((unint64_t)v42 >= v43)
    {
      v45 = v41[2].i64[0];
      v46 = ((uint64_t)v42 - v45) >> 3;
      if ((unint64_t)(v46 + 1) >> 61)
        goto LABEL_119;
      v47 = v43 - v45;
      v48 = v47 >> 2;
      if (v47 >> 2 <= (unint64_t)(v46 + 1))
        v48 = v46 + 1;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
        v49 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v49 = v48;
      if (v49)
        v50 = (char *)sub_1DCAE79A4((uint64_t)&v41[3], v49);
      else
        v50 = 0;
      v51 = (float32x4_t **)&v50[8 * v46];
      *v51 = v26;
      v44 = v51 + 1;
      v53 = (char *)v41[2].i64[0];
      v52 = (char *)v41[2].i64[1];
      if (v52 != v53)
      {
        do
        {
          v54 = (float32x4_t *)*((_QWORD *)v52 - 1);
          v52 -= 8;
          *--v51 = v54;
        }
        while (v52 != v53);
        v52 = (char *)v41[2].i64[0];
      }
      v41[2].i64[0] = (uint64_t)v51;
      v41[2].i64[1] = (uint64_t)v44;
      v41[3].i64[0] = (uint64_t)&v50[8 * v49];
      if (v52)
        operator delete(v52);
    }
    else
    {
      *v42 = v26;
      v44 = v42 + 1;
    }
    v41[2].i64[1] = (uint64_t)v44;
    v165[0] = v26 + 6;
    v55 = sub_1DCB07DA0((uint64_t)v166, v26 + 6, (uint64_t)&unk_1DCC58300, v165);
    v56 = (float32x4_t **)v55[2].i64[1];
    v57 = v55[3].u64[0];
    if ((unint64_t)v56 >= v57)
    {
      v59 = v55[2].i64[0];
      v60 = ((uint64_t)v56 - v59) >> 3;
      if ((unint64_t)(v60 + 1) >> 61)
LABEL_119:
        sub_1DCAE4C44();
      v61 = v57 - v59;
      v62 = v61 >> 2;
      if (v61 >> 2 <= (unint64_t)(v60 + 1))
        v62 = v60 + 1;
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
        v63 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v63 = v62;
      if (v63)
        v64 = (char *)sub_1DCAE79A4((uint64_t)&v55[3], v63);
      else
        v64 = 0;
      v65 = (float32x4_t **)&v64[8 * v60];
      *v65 = v26;
      v58 = v65 + 1;
      v67 = (char *)v55[2].i64[0];
      v66 = (char *)v55[2].i64[1];
      if (v66 != v67)
      {
        do
        {
          v68 = (float32x4_t *)*((_QWORD *)v66 - 1);
          v66 -= 8;
          *--v65 = v68;
        }
        while (v66 != v67);
        v66 = (char *)v55[2].i64[0];
      }
      v55[2].i64[0] = (uint64_t)v65;
      v55[2].i64[1] = (uint64_t)v58;
      v55[3].i64[0] = (uint64_t)&v64[8 * v63];
      if (v66)
        operator delete(v66);
    }
    else
    {
      *v56 = v26;
      v58 = v56 + 1;
    }
    v55[2].i64[1] = (uint64_t)v58;
    ++v25;
  }
  v131 = (uint64_t **)a6;
  v139 = v22;
  *(float *)&dword_1F03B51B8 = a3 * 8.0;
  v165[4] = (float32x4_t *)1065353216;
  memset(v165, 0, 32);
  v69 = v143;
  if ((int)v143 >= 1)
  {
    for (i = 0; i != v143; ++i)
    {
      v71 = 0;
      v72 = i * v69;
      do
      {
        v73 = v71 + v72;
        v74 = (int32x4_t)vmulq_f32(v21[v71 + v72], v21[v71 + v72]);
        if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.i8, 1)), (float32x4_t)vdupq_laneq_s32(v74, 2)).f32[0]) > 0.000001)
        {
          *(uint64_t *)((char *)v162.i64 + 4) = 0;
          v162.i32[0] = 0;
          v162 = v141[v73];
          __p = &v162;
          v75 = sub_1DCB08070((uint64_t)v165, &v162, (uint64_t)&unk_1DCC58300, (_OWORD **)&__p);
          v76 = v75;
          v77 = (char *)v75[5];
          v78 = (uint64_t)&v75[6];
          v79 = (unint64_t)v75[6];
          if ((unint64_t)v77 >= v79)
          {
            v81 = (char *)v75[4];
            v82 = (v77 - v81) >> 2;
            if ((unint64_t)(v82 + 1) >> 62)
              sub_1DCAE4C44();
            v83 = v79 - (_QWORD)v81;
            v84 = (uint64_t)(v79 - (_QWORD)v81) >> 1;
            if (v84 <= v82 + 1)
              v84 = v82 + 1;
            if (v83 >= 0x7FFFFFFFFFFFFFFCLL)
              v85 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v85 = v84;
            if (v85)
            {
              v86 = (char *)sub_1DCAE4D04(v78, v85);
              v81 = (char *)v76[4];
              v77 = (char *)v76[5];
            }
            else
            {
              v86 = 0;
            }
            v87 = &v86[4 * v82];
            *(_DWORD *)v87 = v73;
            v80 = v87 + 4;
            while (v77 != v81)
            {
              v88 = *((_DWORD *)v77 - 1);
              v77 -= 4;
              *((_DWORD *)v87 - 1) = v88;
              v87 -= 4;
            }
            v76[4] = (float32x2_t)v87;
            v76[5] = (float32x2_t)v80;
            v76[6] = (float32x2_t)&v86[4 * v85];
            if (v81)
              operator delete(v81);
          }
          else
          {
            *(_DWORD *)v77 = v73;
            v80 = v77 + 4;
          }
          v76[5] = (float32x2_t)v80;
        }
        ++v71;
      }
      while (v71 != v143);
      v69 = v143;
    }
  }
  v89 = operator new();
  *(_OWORD *)(v89 + 16) = 0u;
  *(_OWORD *)(v89 + 32) = 0u;
  *(_OWORD *)v89 = 0u;
  v91 = *v131;
  v90 = v131[1];
  if (*v131 == v90)
  {
    v92 = (uint64_t)*v131;
  }
  else
  {
    do
    {
      v162.i64[0] = *v91;
      sub_1DCB082F4((_QWORD *)v89, &v162);
      ++v91;
    }
    while (v91 != v90);
    v92 = (uint64_t)*v131;
    v91 = v131[1];
  }
  v93 = 126 - 2 * __clz(((uint64_t)v91 - v92) >> 3);
  v162.i64[0] = (uint64_t)sub_1DCB071EC;
  if (v91 == (uint64_t *)v92)
    v94 = 0;
  else
    v94 = v93;
  sub_1DCB08AE8(v92, v91, (uint64_t (**)(uint64_t, uint64_t))&v162, v94, 1);
  objc_msgSend_currentProgress(MEMORY[0x1E0CB38A8], v95, v96);
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  v129 = objc_alloc_init(MEMORY[0x1E0CB3740]);
  v162.i64[0] = 0;
  v162.i64[1] = (uint64_t)&v162;
  v163 = 0x2020000000;
  v164 = 0;
  v128 = objc_msgSend_completedUnitCount(v132, v97, v98);
  v99 = a3 * 4.0;
  v100 = 16;
  do
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3321888768;
    block[2] = sub_1DCB07228;
    block[3] = &unk_1EA576420;
    v127 = v129;
    v150 = v127;
    v153 = v89;
    v154 = a7;
    v155 = v166;
    v156 = v21;
    v159 = v143;
    v157 = v141;
    v160 = v99;
    sub_1DCB09C74((uint64_t)v158, (uint64_t)v165);
    v158[5] = v139;
    v158[6] = v138;
    v158[7] = v144;
    v152 = &v162;
    v161 = a8;
    v101 = v132;
    v151 = v101;
    v158[8] = v128;
    dispatch_group_async(group, queue, block);

    sub_1DCB07D24((uint64_t)v158);
    --v100;
  }
  while (v100);
  dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
  free(v141);
  free(v21);
  free(v139);
  v102 = 0;
  v140 = 4 * v143;
  do
  {
    while (1)
    {
      __p = 0;
      v147 = 0;
      v148 = 0;
      v103 = v143;
      if ((int)v143 >= 1)
        break;
      if (++v102 == 3)
        goto LABEL_117;
    }
    v135 = v102;
    v137 = v101;
    v104 = 0;
    v105 = 0;
    v106 = 0;
    v107 = -1;
    v108 = -(int)v143;
    do
    {
      v109 = 0;
      v110 = v106 + 1;
      v142 = v105;
      do
      {
        v145 = *(_DWORD *)(v144 + v105);
        v111 = v109 + 1;
        if (HIBYTE(v145) == 255)
        {
          if (v106)
            sub_1DCB06318((uint64_t)&v145, v144, v108 + v109, (uint64_t)&__p);
          if (v110 < (int)v143)
            sub_1DCB06318((uint64_t)&v145, v144, v103 + v109, (uint64_t)&__p);
          if (v109)
            sub_1DCB06318((uint64_t)&v145, v144, v107 + v109, (uint64_t)&__p);
          if (v111 < (int)v143)
            sub_1DCB06318((uint64_t)&v145, v144, v104 + v109 + 1, (uint64_t)&__p);
        }
        v105 += 4;
        ++v109;
      }
      while (v143 != v111);
      v107 += v143;
      v105 = v142 + v140;
      v103 += v143;
      v108 += v143;
      v104 += v143;
      ++v106;
    }
    while (v110 != v143);
    v113 = (int *)__p;
    v112 = v147;
    if (__p != v147)
    {
      do
      {
        v114 = *v113++;
        *(_BYTE *)(v144 + 3 + 4 * v114) = -1;
      }
      while (v113 != v112);
      v112 = (int *)__p;
    }
    v101 = v137;
    if (v112)
    {
      v147 = v112;
      operator delete(v112);
    }
    v102 = v135 + 1;
  }
  while (v135 != 2);
  v115 = 0;
  v116 = 0;
  do
  {
    v117 = v143;
    v118 = v115;
    do
    {
      v119 = v144 + v118;
      v120 = v138 + v118;
      if (*(unsigned __int8 *)(v119 + 3) <= 4u && *(unsigned __int8 *)(v120 + 3) >= 6u)
        *(_DWORD *)v119 = *(_DWORD *)v120;
      v118 += 4;
      --v117;
    }
    while (v117);
    ++v116;
    v115 += v140;
  }
  while (v116 != (_DWORD)v143);
LABEL_117:
  _Block_object_dispose(&v162, 8);

  sub_1DCB07D24((uint64_t)v165);
  sub_1DCB07D24((uint64_t)v166);

  return v124;
}

void sub_1DCB07120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;

  _Block_object_dispose((const void *)(v36 - 240), 8);

  sub_1DCB07D24(v36 - 208);
  sub_1DCB07D24(v36 - 160);

  _Unwind_Resume(a1);
}

BOOL sub_1DCB071EC(_QWORD *a1, _QWORD *a2)
{
  float v3;

  v3 = sub_1DCB3F324(a1);
  return v3 > sub_1DCB3F324(a2);
}

uint64_t sub_1DCB07228(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  float32x2_t *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  const char *v21;
  uint64_t v22;
  __int128 v23;
  int32x2_t v24;
  __int128 v25;
  __int128 v26;
  float v27;
  float v28;
  float32x2_t v29;
  signed int v30;
  uint64_t v31;
  int32x4_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  float32x2_t *v36;
  float32x2_t *v37;
  int *v38;
  _QWORD *v39;
  int v40;
  _QWORD **v41;
  _QWORD *v42;
  _QWORD **v43;
  int v44;
  _QWORD *v45;
  int *v46;
  int *v47;
  uint64_t v48;
  float32x4_t v49;
  int32x4_t v50;
  uint8x8_t v51;
  float32x4_t v52;
  int32x4_t v53;
  float v54;
  int32x4_t v55;
  float v56;
  float v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  char v61;
  _BYTE *v62;
  int v63;
  int v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  __int128 v73;
  float32x4_t v74;
  int v75;
  __int128 v76;
  __int128 v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  uint16x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t *v86;
  _QWORD *v87[2];
  _OWORD v88[2];
  uint64_t v89;

  objc_msgSend_lock(*(void **)(a1 + 32), a2, a3);
  v6 = *(_QWORD **)(a1 + 56);
  v7 = v6[5];
  if (v7)
  {
    __asm { FMOV            V0.4S, #1.0 }
    v74 = _Q0;
    do
    {
      v13 = *(float32x2_t **)(*(_QWORD *)(v6[1] + ((v6[4] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v6[4] & 0x1FFLL));
      ++v6[4];
      v6[5] = v7 - 1;
      sub_1DCB09974((uint64_t)v6, 1);
      objc_msgSend_unlock(*(void **)(a1 + 32), v14, v15);
      v18 = *(_QWORD *)(a1 + 64);
      v20 = *(_QWORD **)v18;
      v19 = *(_QWORD **)(v18 + 8);
      if (v20 != v19)
      {
        while (*v20 != *(_QWORD *)&v13[32])
        {
          if (++v20 == v19)
          {
            v20 = v19;
            break;
          }
        }
      }
      if (v20 != v19)
      {
        v89 = 0;
        memset(v88, 0, sizeof(v88));
        sub_1DCB0641C((uint64_t)v13, *(_QWORD **)(a1 + 72), (uint64_t)v88);
        *(double *)&v23 = sub_1DCB3FA60(v13);
        v24.i32[0] = dword_1F03B51AC;
        *(float32x2_t *)&v25 = vadd_f32((float32x2_t)vdup_lane_s32(v24, 0), *(float32x2_t *)&v26);
        *(int8x8_t *)&v26 = vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)&v25, *(float32x2_t *)&v23));
        if ((v26 & 1) != 0)
        {
          v75 = 0;
        }
        else
        {
          v75 = 0;
          v27 = *((float *)&v23 + 1);
          v28 = *((float *)&v25 + 1);
          v73 = v25;
          do
          {
            if (v27 <= v28)
            {
              *(float *)&v26 = v27;
              v76 = v23;
              do
              {
                v77 = v26;
                DWORD1(v23) = v26;
                v29 = sub_1DCB3ED6C(*(float32x2_t *)&v23);
                v30 = llroundf((float)dword_1F03B51A8 * v29.f32[0])
                    + *(_DWORD *)(a1 + 168) * llroundf(vmuls_lane_f32((float)dword_1F03B51A8, v29, 1));
                v31 = *(_QWORD *)(a1 + 80);
                v32 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v31 + 16 * v30), *(float32x4_t *)(v31 + 16 * v30));
                if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.i8, 1)), (float32x4_t)vdupq_laneq_s32(v32, 2)).f32[0]) > 0.000001)
                {
                  v33 = 0;
                  v34 = v30;
                  v87[0] = 0;
                  v87[1] = 0;
                  v86 = (uint64_t *)v87;
                  v78 = *(float32x4_t *)(v31 + 16 * v30);
                  v35 = v78;
                  v79 = *(float32x4_t *)(*(_QWORD *)(a1 + 88) + 16 * v30);
                  ++v75;
                  v35.i32[0] = 0;
                  v81 = v35;
                  v80 = 0u;
                  do
                  {
                    v85 = vmlaq_n_f32(v79, xmmword_1DCC58280[v33], *(float *)(a1 + 172));
                    v36 = sub_1DCB099D0((_QWORD *)(a1 + 96), &v85);
                    v37 = v36;
                    if (v36)
                    {
                      v38 = (int *)v36[4];
                      if (v38 != (int *)v36[5])
                      {
                        v39 = v87[0];
                        if (!v87[0])
                          goto LABEL_26;
                        v40 = *v38;
                        v41 = v87;
                        do
                        {
                          v42 = v39;
                          v43 = v41;
                          v44 = *((_DWORD *)v39 + 7);
                          v45 = v39 + 1;
                          if (v44 >= v40)
                          {
                            v45 = v42;
                            v41 = (_QWORD **)v42;
                          }
                          v39 = (_QWORD *)*v45;
                        }
                        while (v39);
                        if (v41 == v87)
                          goto LABEL_26;
                        if (v44 < v40)
                          v42 = v43;
                        if (v40 < *((_DWORD *)v42 + 7))
                        {
LABEL_26:
                          sub_1DCB09AD0(&v86, v38, *(_DWORD **)&v36[4]);
                          v47 = (int *)v37[4];
                          v46 = (int *)v37[5];
                          while (v47 != v46)
                          {
                            v48 = *v47;
                            v49 = *(float32x4_t *)(*(_QWORD *)(a1 + 80) + 16 * v48);
                            v50 = (int32x4_t)vmulq_f32(v49, v49);
                            if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.i8, 1)), (float32x4_t)vdupq_laneq_s32(v50, 2)).f32[0]) >= 0.000001)
                            {
                              v82 = *(float32x4_t *)(*(_QWORD *)(a1 + 88) + 16 * v48);
                              v84 = *(float32x4_t *)(*(_QWORD *)(a1 + 80) + 16 * v48);
                              if (sub_1DCB09B88(v88, (_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v48))
                                || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v48) + 256) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v34) + 256))
                              {
                                v51.i32[0] = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v48);
                                v52 = vsubq_f32(v79, v82);
                                v53 = (int32x4_t)vmulq_f32(v52, v52);
                                v83 = (uint16x4_t)vmovl_u8(v51).u64[0];
                                v54 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.i8, 1)), (float32x4_t)vdupq_laneq_s32(v53, 2)).f32[0]);
                                v55 = (int32x4_t)vmulq_f32(v84, v78);
                                v56 = vaddq_f32(vaddq_f32((float32x4_t)v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.i8, 1)), (float32x4_t)vdupq_laneq_s32(v55, 2)).f32[0];
                                if (v56 >= 0.0)
                                  v57 = v56;
                                else
                                  v57 = 0.0;
                                v58 = v57 * 0.39894228 * expf((float)(v54 * -4.0) / *(float *)(a1 + 172));
                                v59 = v81;
                                v59.f32[0] = v81.f32[0] + v58;
                                v81 = v59;
                                v80 = vmlaq_n_f32(v80, vcvtq_f32_u32(vmovl_u16(v83)), v58);
                              }
                            }
                            ++v47;
                          }
                        }
                      }
                    }
                    ++v33;
                  }
                  while (v33 != 8);
                  v60 = vmulq_f32(v80, vdivq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 0)));
                  if (v60.f32[3] < 5.0)
                    v61 = 0;
                  else
                    v61 = -1;
                  v62 = (_BYTE *)(*(_QWORD *)(a1 + 152) + 4 * v34);
                  *v62 = (int)v60.f32[0];
                  v62[1] = (int)v60.f32[1];
                  v62[2] = (int)v60.f32[2];
                  v62[3] = v61;
                  sub_1DCAE4E44((uint64_t)&v86, v87[0]);
                }
                v24.i32[0] = dword_1F03B51AC;
                v23 = v76;
                v26 = v77;
                *(float *)&v26 = *(float *)&dword_1F03B51AC + *(float *)&v77;
              }
              while ((float)(*(float *)&dword_1F03B51AC + *(float *)&v77) <= v28);
            }
            *(float *)&v23 = *(float *)v24.i32 + *(float *)&v23;
          }
          while (*(float *)&v23 <= *(float *)&v73);
        }
        objc_msgSend_lock(*(void **)(a1 + 32), v21, v22, v73);
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) += v75;
        v63 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        v64 = *(_DWORD *)(a1 + 176);
        v67 = objc_msgSend_completedUnitCount(*(void **)(a1 + 40), v65, v66);
        v70 = (int)(float)((float)((float)v63 * 5.0) / (float)v64);
        v71 = *(_QWORD *)(a1 + 160);
        if (v67 - v71 < v70)
          objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 40), v68, v71 + v70);
        objc_msgSend_unlock(*(void **)(a1 + 32), v68, v69);
        sub_1DCAE6B78((uint64_t)v88);
      }
      objc_msgSend_lock(*(void **)(a1 + 32), v16, v17);
      v6 = *(_QWORD **)(a1 + 56);
      v7 = v6[5];
    }
    while (v7);
  }
  return objc_msgSend_unlock(*(void **)(a1 + 32), v4, v5);
}

void sub_1DCB0772C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAE6B78(v1 - 192);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB0775C(uint64_t a1, uint64_t a2)
{
  return sub_1DCB09C74(a1 + 96, a2 + 96);
}

uint64_t sub_1DCB07768(uint64_t a1)
{
  return sub_1DCB07D24(a1 + 96);
}

_QWORD *sub_1DCB07770(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v6 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v5 >> 47) ^ v5);
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
      if (v7 >= v8)
        v10 = v7 % v8;
    }
    else
    {
      v10 = v7 & (v8 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v7)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  else
  {
    v10 = 0;
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v7;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_1DCAD4EF4(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v10 = v7 % v8;
      else
        v10 = v7;
    }
    else
    {
      v10 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v10) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1DCB079B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float32x4_t *sub_1DCB079C4(_QWORD *a1, float32x4_t *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  float32x4_t **v10;
  float32x4_t *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_1DCB3EDC8((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(float32x4_t ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = v11->u64[1];
      if (v6 == v13)
      {
        if (sub_1DCB3EDD8(v12, v11 + 1, a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (float32x4_t *)v11->i64[0];
    }
    while (v11);
  }
  return v11;
}

float32x4_t *sub_1DCB07AC4(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t **a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  float32x4_t **v14;
  float32x4_t *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  float32x4_t **v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_1DCB3EDC8(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v13 = v8;
      if (v8 >= v10)
        v13 = v8 % v10;
    }
    else
    {
      v13 = (v10 - 1) & v8;
    }
    v14 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      for (i = *v14; i; i = (float32x4_t *)i->i64[0])
      {
        v16 = i->u64[1];
        if (v16 == v9)
        {
          if (sub_1DCB3EDD8(a1 + 32, i + 1, a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10)
              v16 %= v10;
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13)
            break;
        }
      }
    }
  }
  else
  {
    v13 = 0;
  }
  i = (float32x4_t *)operator new(0x30uLL);
  i->i64[0] = 0;
  i->i64[1] = v9;
  i[1] = **a4;
  i[2].i64[0] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_1DCAD4EF4(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v13 = v9 % v10;
      else
        v13 = v9;
    }
    else
    {
      v13 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v13);
  if (v24)
  {
    i->i64[0] = (uint64_t)*v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  i->i64[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v13) = a1 + 16;
  if (i->i64[0])
  {
    v25 = *(_QWORD *)(i->i64[0] + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (float32x4_t **)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_1DCB07D10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB07D24(uint64_t a1)
{
  void *v2;

  sub_1DCB07D5C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1DCB07D5C(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[4];
      if (v4)
      {
        v2[5] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

float32x4_t *sub_1DCB07DA0(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t **a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  float32x4_t **v14;
  float32x4_t *i;
  unint64_t v16;
  float32x4_t **v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  float32x4_t **v25;
  unint64_t v26;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_1DCB3EDC8(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v13 = v8;
      if (v8 >= v10)
        v13 = v8 % v10;
    }
    else
    {
      v13 = (v10 - 1) & v8;
    }
    v14 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      for (i = *v14; i; i = (float32x4_t *)i->i64[0])
      {
        v16 = i->u64[1];
        if (v16 == v9)
        {
          if (sub_1DCB3EDD8(a1 + 32, i + 1, a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10)
              v16 %= v10;
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13)
            break;
        }
      }
    }
  }
  else
  {
    v13 = 0;
  }
  v17 = (float32x4_t **)(a1 + 16);
  i = (float32x4_t *)operator new(0x40uLL);
  i->i64[0] = 0;
  i->i64[1] = v9;
  i[1] = **a4;
  i[2].i64[1] = 0;
  i[3].i64[0] = 0;
  i[2].i64[0] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_1DCAD4EF4(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v13 = v9 % v10;
      else
        v13 = v9;
    }
    else
    {
      v13 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v13);
  if (v25)
  {
    i->i64[0] = (uint64_t)*v25;
LABEL_38:
    *v25 = i;
    goto LABEL_39;
  }
  i->i64[0] = (uint64_t)*v17;
  *v17 = i;
  *(_QWORD *)(v24 + 8 * v13) = v17;
  if (i->i64[0])
  {
    v26 = *(_QWORD *)(i->i64[0] + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10)
        v26 %= v10;
    }
    else
    {
      v26 &= v10 - 1;
    }
    v25 = (float32x4_t **)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_1DCB08008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_1DCB08024(v11, v10);
  _Unwind_Resume(a1);
}

void sub_1DCB08024(uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[4];
    if (v3)
    {
      __p[5] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

float32x2_t *sub_1DCB08070(uint64_t a1, float32x4_t *a2, uint64_t a3, _OWORD **a4)
{
  _QWORD *v7;
  unint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  unint64_t v11;
  unint64_t v12;
  int32x2_t v13;
  unint64_t v14;
  unint64_t v15;
  float32x2_t **v16;
  float32x2_t *i;
  unint64_t v18;
  float32x2_t **v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  float32x2_t **v27;
  unint64_t v28;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_1DCB3F048(a1 + 24, a2);
  v11 = v8;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (int32x2_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8((uint8x8_t)v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v15 = v8;
      if (v8 >= v12)
        v15 = v8 % v12;
    }
    else
    {
      v15 = (v12 - 1) & v8;
    }
    v16 = *(float32x2_t ***)(*(_QWORD *)a1 + 8 * v15);
    if (v16)
    {
      for (i = *v16; i; i = (float32x2_t *)*i)
      {
        v18 = (unint64_t)i[1];
        if (v18 == v11)
        {
          if (sub_1DCB3F058(v13, v9, v10, a1 + 32, i + 2, (float32x2_t *)a2))
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v18 >= v12)
              v18 %= v12;
          }
          else
          {
            v18 &= v12 - 1;
          }
          if (v18 != v15)
            break;
        }
      }
    }
  }
  else
  {
    v15 = 0;
  }
  v19 = (float32x2_t **)(a1 + 16);
  i = (float32x2_t *)operator new(0x40uLL);
  *i = 0;
  i[1] = (float32x2_t)v11;
  *(_OWORD *)i[2].f32 = **a4;
  i[5] = 0;
  i[6] = 0;
  i[4] = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    v22 = 1;
    if (v12 >= 3)
      v22 = (v12 & (v12 - 1)) != 0;
    v23 = v22 | (2 * v12);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_1DCAD4EF4(a1, v25);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v15 = v11 % v12;
      else
        v15 = v11;
    }
    else
    {
      v15 = (v12 - 1) & v11;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(float32x2_t ***)(*(_QWORD *)a1 + 8 * v15);
  if (v27)
  {
    *i = (float32x2_t)*v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *i = (float32x2_t)*v19;
  *v19 = i;
  *(_QWORD *)(v26 + 8 * v15) = v19;
  if (*i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v28 >= v12)
        v28 %= v12;
    }
    else
    {
      v28 &= v12 - 1;
    }
    v27 = (float32x2_t **)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_1DCB082D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_1DCB08024(v11, v10);
  _Unwind_Resume(a1);
}

void sub_1DCB082F4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1DCB08378(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1DCB08378(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_1DCAE79A4(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1DCB0868C(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_1DCB087A0((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_1DCAE79A4((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_1DCAE79A4((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_1DCB088BC(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1DCB089D0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1DCB08640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1DCB0868C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_1DCAE79A4(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_1DCB087A0(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_1DCAE79A4(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_1DCB088BC(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_1DCAE79A4(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_1DCB089D0(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_1DCAE79A4(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t sub_1DCB08AE8(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(*(a2 - 1), *v9);
        if ((_DWORD)result)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return sub_1DCB08F7C(v9, v9 + 1, a2 - 1, (unsigned int (**)(_QWORD))a3);
      case 4uLL:
        return sub_1DCB09430(v9, v9 + 1, v9 + 2, a2 - 1, (unsigned int (**)(_QWORD))a3);
      case 5uLL:
        return sub_1DCB094E0(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, (unsigned int (**)(_QWORD))a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return sub_1DCB08E28((uint64_t)v9, a2, a3);
          else
            return sub_1DCB08EE8((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            sub_1DCB08F7C(&v9[v13 >> 1], v9, a2 - 1, (unsigned int (**)(_QWORD))a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_1DCB08F7C(v9, &v9[v13 >> 1], a2 - 1, (unsigned int (**)(_QWORD))a3);
            sub_1DCB08F7C(v9 + 1, v15 - 1, a2 - 2, (unsigned int (**)(_QWORD))a3);
            sub_1DCB08F7C(v9 + 2, &v9[v14 + 1], a2 - 3, (unsigned int (**)(_QWORD))a3);
            sub_1DCB08F7C(v15 - 1, v15, &v9[v14 + 1], (unsigned int (**)(_QWORD))a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(*(v9 - 1), *v9) & 1) == 0)
          {
            result = (uint64_t)sub_1DCB09068(v9, a2, a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = sub_1DCB09174(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = sub_1DCB0928C(v9, v17, (unsigned int (**)(_QWORD))a3);
          v9 = v17 + 1;
          result = sub_1DCB0928C(v17 + 1, a2, (unsigned int (**)(_QWORD))a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = sub_1DCB08AE8(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_1DCB095B8((char *)v9, (char *)a2, a2, a3);
        return result;
    }
  }
}

uint64_t sub_1DCB08E28(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if ((uint64_t *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      v7 = 0;
      v8 = (uint64_t *)result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        result = (*a3)(v9, v10);
        if ((_DWORD)result)
        {
          v11 = *v8;
          v12 = v7;
          while (1)
          {
            *(_QWORD *)((char *)v4 + v12 + 8) = *(_QWORD *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (*a3)(v11, *(_QWORD *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              v13 = (_QWORD *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v11;
        }
        v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_1DCB08EE8(uint64_t result, _QWORD *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _QWORD *v4;
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    for (i = (_QWORD *)(result + 8); v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      result = (*a3)(v7, v8);
      if ((_DWORD)result)
      {
        v9 = *v4;
        v10 = v4;
        do
        {
          v11 = v10;
          v12 = *--v10;
          *v11 = v12;
          result = (*a3)(v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t sub_1DCB08F7C(_QWORD *a1, _QWORD *a2, _QWORD *a3, unsigned int (**a4)(_QWORD))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a3, *a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!((unsigned int (*)(_QWORD, _QWORD))*a4)(*a2, *a1))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  v10 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(*a3))
      return 1;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *sub_1DCB09068(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2;
  v6 = *a1;
  if (((*a3)(*a1, *(a2 - 1)) & 1) != 0)
  {
    v7 = a1;
    do
    {
      v8 = v7[1];
      ++v7;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    v9 = a1 + 1;
    do
    {
      v7 = v9;
      if (v9 >= v4)
        break;
      ++v9;
    }
    while (!(*a3)(v6, *v7));
  }
  if (v7 < v4)
  {
    do
      v10 = *--v4;
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < v4)
  {
    v11 = *v7;
    *v7 = *v4;
    *v4 = v11;
    do
    {
      v12 = v7[1];
      ++v7;
    }
    while (!(*a3)(v6, v12));
    do
      v13 = *--v4;
    while (((*a3)(v6, v13) & 1) != 0);
  }
  if (v7 - 1 != a1)
    *a1 = *(v7 - 1);
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *sub_1DCB09174(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = 0;
  v7 = *a1;
  do
    v8 = (*a3)(a1[++v6], v7);
  while ((v8 & 1) != 0);
  v9 = &a1[v6];
  v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v12 = *--a2;
    }
    while (((*a3)(v12, v7) & 1) == 0);
  }
  else
  {
    do
      v11 = *--a2;
    while (!(*a3)(v11, v7));
  }
  if (v9 < a2)
  {
    v13 = a2;
    v14 = v9;
    do
    {
      v15 = *v14;
      *v14 = *v13;
      *v13 = v15;
      do
      {
        v16 = v14[1];
        ++v14;
      }
      while (((*a3)(v16, v7) & 1) != 0);
      do
        v17 = *--v13;
      while (!(*a3)(v17, v7));
    }
    while (v14 < v13);
    v10 = v14 - 1;
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v7;
  return v10;
}

BOOL sub_1DCB0928C(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_1DCB08F7C(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1DCB09430(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1DCB094E0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      sub_1DCB08F7C(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t sub_1DCB09430(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int (**a5)(_QWORD))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1DCB08F7C(a1, a2, a3, a5);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_1DCB094E0(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, unsigned int (**a6)(_QWORD))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1DCB09430(a1, a2, a3, a4, a6);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a5, *a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a4, *a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a3, *a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a2, *a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1DCB095B8(char *a1, char *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        sub_1DCB0970C((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != (char *)a3)
    {
      v14 = (uint64_t *)a2;
      do
      {
        if ((*a4)(*v14, *(_QWORD *)a1))
        {
          v15 = *v14;
          *v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          sub_1DCB0970C((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = (char *)a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      v17 = a2 - 8;
      do
      {
        v18 = *(_QWORD *)a1;
        v19 = (char *)sub_1DCB0982C(a1, (unsigned int (**)(_QWORD, _QWORD))a4, v16);
        if (v17 == v19)
        {
          *(_QWORD *)v19 = v18;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v17;
          *(_QWORD *)v17 = v18;
          sub_1DCB098D8((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
        v17 -= 8;
      }
      while (v16-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

uint64_t sub_1DCB0970C(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v10 = ((uint64_t)a4 - result) >> 2;
      v11 = v10 + 1;
      v12 = (_QWORD *)(result + 8 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1]))
      {
        ++v12;
        v11 = v13;
      }
      result = ((uint64_t (*)(_QWORD, _QWORD))*a2)(*v12, *v5);
      if ((result & 1) == 0)
      {
        v14 = *v5;
        do
        {
          v15 = v12;
          *v5 = *v12;
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (_QWORD *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3)
          {
            if ((*a2)(*v12, v12[1]))
            {
              ++v12;
              v16 = 2 * v11 + 2;
            }
          }
          result = ((uint64_t (*)(_QWORD, uint64_t))*a2)(*v12, v14);
          v5 = v15;
          v11 = v16;
        }
        while (!(_DWORD)result);
        *v15 = v14;
      }
    }
  }
  return result;
}

_QWORD *sub_1DCB0982C(_QWORD *a1, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1[v6 + 1], a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t sub_1DCB098D8(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    v9 = (uint64_t *)(a2 - 8);
    result = (*a3)(*v8, *(_QWORD *)(a2 - 8));
    if ((_DWORD)result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 8 * v7);
        result = (*a3)(*v8, v10);
        v9 = v11;
      }
      while ((result & 1) != 0);
      *v11 = v10;
    }
  }
  return result;
}

uint64_t sub_1DCB09974(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

float32x2_t *sub_1DCB099D0(_QWORD *a1, float32x4_t *a2)
{
  unint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x8_t v7;
  unint64_t v8;
  int32x2_t v9;
  unint64_t v10;
  unint64_t v11;
  float32x2_t **v12;
  float32x2_t *v13;
  uint64_t v14;
  float32x2_t v15;

  v4 = sub_1DCB3F048((uint64_t)(a1 + 3), a2);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v4;
  v9 = (int32x2_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8((uint8x8_t)v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v4;
    if (v4 >= *(_QWORD *)&v7)
      v11 = v4 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v4;
  }
  v12 = *(float32x2_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = (uint64_t)(a1 + 4);
    do
    {
      v15 = v13[1];
      if (v8 == *(_QWORD *)&v15)
      {
        if (sub_1DCB3F058(v9, v5, v6, v14, v13 + 2, (float32x2_t *)a2))
          return v13;
      }
      else
      {
        if (v10 > 1)
        {
          if (*(_QWORD *)&v15 >= *(_QWORD *)&v7)
            *(_QWORD *)&v15 %= *(_QWORD *)&v7;
        }
        else
        {
          *(_QWORD *)&v15 &= *(_QWORD *)&v7 - 1;
        }
        if (*(_QWORD *)&v15 != v11)
          return 0;
      }
      v13 = (float32x2_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t **sub_1DCB09AD0(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_1DCACAE54(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

_QWORD *sub_1DCB09B88(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1DCB09C74(uint64_t a1, uint64_t a2)
{
  float32x4_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_1DCAD4EF4(a1, *(_QWORD *)(a2 + 8));
  for (i = *(float32x4_t **)(a2 + 16); i; i = (float32x4_t *)i->i64[0])
    sub_1DCB09CE8(a1, i + 1, (uint64_t)&i[1]);
  return a1;
}

void sub_1DCB09CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCB07D24(v1);
  _Unwind_Resume(a1);
}

float32x2_t *sub_1DCB09CE8(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  unint64_t v10;
  unint64_t v11;
  int32x2_t v12;
  unint64_t v13;
  unint64_t v14;
  float32x2_t **v15;
  float32x2_t *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v6 = (_QWORD *)(a1 + 24);
  v7 = sub_1DCB3F048(a1 + 24, a2);
  v10 = v7;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (int32x2_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8((uint8x8_t)v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v7;
      if (v7 >= v11)
        v14 = v7 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v7;
    }
    v15 = *(float32x2_t ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = (float32x2_t *)*i)
      {
        v17 = (unint64_t)i[1];
        if (v17 == v10)
        {
          if (sub_1DCB3F058(v12, v8, v9, a1 + 32, i + 2, (float32x2_t *)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  memset(v27, 0, sizeof(v27));
  sub_1DCB09F70(a1, v10, a3, v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_1DCAD4EF4(a1, v23);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v25 >= v11)
          v25 %= v11;
      }
      else
      {
        v25 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (float32x2_t *)v27[0];
  ++*v6;
  return i;
}

void sub_1DCB09F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_1DCB08024((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1DCB09F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *result;

  v7 = a1 + 16;
  *a4 = 0;
  a4[2] = 0;
  a4[1] = 0;
  v8 = a4 + 1;
  v9 = operator new(0x40uLL);
  *a4 = v9;
  *v8 = v7;
  *((_BYTE *)a4 + 16) = 0;
  *v9 = 0;
  v9[1] = a2;
  *((_OWORD *)v9 + 1) = *(_OWORD *)a3;
  v9[5] = 0;
  v9[6] = 0;
  v9[4] = 0;
  result = sub_1DCB04A00(v9 + 4, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
  *((_BYTE *)a4 + 16) = 1;
  return result;
}

void sub_1DCB09FFC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  *v1 = 0;
  sub_1DCB08024(v2, v3);
  _Unwind_Resume(a1);
}

void sub_1DCB0BA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  void *v36;
  uint64_t v37;
  void *v39;
  void *v40;

  if (__p)
    operator delete(__p);
  v39 = *(void **)(v37 - 200);
  if (v39)
  {
    *(_QWORD *)(v37 - 192) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v37 - 176);
  if (v40)
  {
    *(_QWORD *)(v37 - 168) = v40;
    operator delete(v40);
  }

  _Unwind_Resume(a1);
}

void sub_1DCB0BBF4(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      sub_1DCAE4C44();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1DCAE4D04(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

id sub_1DCB0BC88(void *a1, void *a2, unint64_t a3, unint64_t a4, __int16 a5, uint64_t a6)
{
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int16 v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int16 v42;
  int v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __int16 v54;
  unint64_t v55;
  __int16 v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  __int16 v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  __int16 v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  __int16 v85;
  int v86;
  unint64_t v87;
  int v88;
  __int16 v89;
  __int16 v90;
  __int16 v91;
  __int16 v92;
  __int16 v93;
  __int16 v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  __int16 v112;
  __int16 v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  __int16 v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  __int16 v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  __int16 v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  __int16 v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  __int16 v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  __int16 v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  __int16 v183;
  char *v184;
  __int16 v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  __int16 v190;
  id v191;
  const char *v192;
  void *v193;
  const char *v194;
  void *v195;
  const char *v196;
  id v197;
  const char *v198;
  void *v199;
  const char *v200;
  MDLMaterial *v201;
  const char *v202;
  void *v203;
  void *v204;
  const char *v205;
  void *v206;
  MDLSubmesh *v207;
  const char *v208;
  void *v209;
  const char *v210;
  void *v211;
  id v212;
  id v214;
  id v215;
  __int16 v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  void *__p;
  char *v222;
  char *v223;

  v215 = a1;
  v214 = a2;
  v217 = a4;
  v11 = (8 * a4) | 6;
  if (a6 == 2)
    v11 = 6 * a4 + 3;
  v220 = a3;
  __p = 0;
  v222 = 0;
  v223 = 0;
  sub_1DCB0DA5C(&__p, v11 * a3);
  if (a6 == 1)
  {
    if (a3)
    {
      v43 = 0;
      v44 = v222;
      do
      {
        v45 = v223;
        if (v44 >= v223)
        {
          v47 = (char *)__p;
          v48 = v44 - (_BYTE *)__p;
          if (v44 - (_BYTE *)__p <= -3)
            sub_1DCAE4C44();
          v49 = v48 >> 1;
          if (v223 - (_BYTE *)__p <= (unint64_t)((v48 >> 1) + 1))
            v50 = v49 + 1;
          else
            v50 = v223 - (_BYTE *)__p;
          if ((unint64_t)(v223 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
            v51 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v51 = v50;
          if (v51)
          {
            v52 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v51);
            v47 = (char *)__p;
            v44 = v222;
          }
          else
          {
            v52 = 0;
          }
          v53 = &v52[2 * v49];
          *(_WORD *)v53 = v43;
          v46 = v53 + 2;
          while (v44 != v47)
          {
            v54 = *((_WORD *)v44 - 1);
            v44 -= 2;
            *((_WORD *)v53 - 1) = v54;
            v53 -= 2;
          }
          v45 = &v52[2 * v51];
          __p = v53;
          v222 = v46;
          v223 = v45;
          if (v47)
          {
            operator delete(v47);
            v45 = v223;
          }
        }
        else
        {
          *(_WORD *)v44 = v43;
          v46 = v44 + 2;
        }
        v55 = (v43 + 1);
        v222 = v46;
        v56 = v55 % v220;
        if (v46 >= v45)
        {
          v58 = (char *)__p;
          v59 = v46 - (_BYTE *)__p;
          if (v46 - (_BYTE *)__p <= -3)
            sub_1DCAE4C44();
          v60 = v59 >> 1;
          v61 = v45 - (_BYTE *)__p;
          if (v61 <= (v59 >> 1) + 1)
            v62 = v60 + 1;
          else
            v62 = v61;
          if (v61 >= 0x7FFFFFFFFFFFFFFELL)
            v63 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v63 = v62;
          if (v63)
          {
            v64 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v63);
            v58 = (char *)__p;
            v46 = v222;
          }
          else
          {
            v64 = 0;
          }
          v65 = &v64[2 * v60];
          *(_WORD *)v65 = v56;
          v57 = v65 + 2;
          while (v46 != v58)
          {
            v66 = *((_WORD *)v46 - 1);
            v46 -= 2;
            *((_WORD *)v65 - 1) = v66;
            v65 -= 2;
          }
          v45 = &v64[2 * v63];
          __p = v65;
          v222 = v57;
          v223 = v45;
          if (v58)
          {
            operator delete(v58);
            v45 = v223;
          }
        }
        else
        {
          *(_WORD *)v46 = v56;
          v57 = v46 + 2;
        }
        v222 = v57;
        if (v57 >= v45)
        {
          v68 = (char *)__p;
          v69 = v57 - (_BYTE *)__p;
          if (v57 - (_BYTE *)__p <= -3)
            sub_1DCAE4C44();
          v70 = v69 >> 1;
          v71 = v45 - (_BYTE *)__p;
          if (v71 <= (v69 >> 1) + 1)
            v72 = v70 + 1;
          else
            v72 = v71;
          if (v71 >= 0x7FFFFFFFFFFFFFFELL)
            v73 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v73 = v72;
          if (v73)
          {
            v74 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v73);
            v68 = (char *)__p;
            v57 = v222;
          }
          else
          {
            v74 = 0;
          }
          v75 = &v74[2 * v70];
          *(_WORD *)v75 = v43;
          v67 = v75 + 2;
          while (v57 != v68)
          {
            v76 = *((_WORD *)v57 - 1);
            v57 -= 2;
            *((_WORD *)v75 - 1) = v76;
            v75 -= 2;
          }
          v45 = &v74[2 * v73];
          __p = v75;
          v222 = v67;
          v223 = v45;
          if (v68)
          {
            operator delete(v68);
            v45 = v223;
          }
        }
        else
        {
          *(_WORD *)v57 = v43;
          v67 = v57 + 2;
        }
        v222 = v67;
        if (v67 >= v45)
        {
          v77 = (char *)__p;
          v78 = v67 - (_BYTE *)__p;
          if (v67 - (_BYTE *)__p <= -3)
            sub_1DCAE4C44();
          v79 = v78 >> 1;
          v80 = v45 - (_BYTE *)__p;
          if (v80 <= (v78 >> 1) + 1)
            v81 = v79 + 1;
          else
            v81 = v80;
          if (v80 >= 0x7FFFFFFFFFFFFFFELL)
            v82 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v82 = v81;
          if (v82)
          {
            v83 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v82);
            v77 = (char *)__p;
            v67 = v222;
          }
          else
          {
            v83 = 0;
          }
          v84 = &v83[2 * v79];
          *(_WORD *)v84 = a5;
          v44 = v84 + 2;
          while (v67 != v77)
          {
            v85 = *((_WORD *)v67 - 1);
            v67 -= 2;
            *((_WORD *)v84 - 1) = v85;
            v84 -= 2;
          }
          __p = v84;
          v222 = v44;
          v223 = &v83[2 * v82];
          if (v77)
            operator delete(v77);
        }
        else
        {
          *(_WORD *)v67 = a5;
          v44 = v67 + 2;
        }
        v222 = v44;
        v43 = v55;
      }
      while (v55 < v220);
    }
  }
  else if (a6 == 2 && a3)
  {
    LODWORD(v12) = 0;
    v13 = v222;
    do
    {
      v14 = v223;
      if (v13 >= v223)
      {
        v16 = (char *)__p;
        v17 = v13 - (_BYTE *)__p;
        if (v13 - (_BYTE *)__p <= -3)
          sub_1DCAE4C44();
        v18 = v17 >> 1;
        if (v223 - (_BYTE *)__p <= (unint64_t)((v17 >> 1) + 1))
          v19 = v18 + 1;
        else
          v19 = v223 - (_BYTE *)__p;
        if ((unint64_t)(v223 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
          v20 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
        {
          v21 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v20);
          v16 = (char *)__p;
          v13 = v222;
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[2 * v18];
        *(_WORD *)v22 = a5;
        v15 = v22 + 2;
        while (v13 != v16)
        {
          v23 = *((_WORD *)v13 - 1);
          v13 -= 2;
          *((_WORD *)v22 - 1) = v23;
          v22 -= 2;
        }
        v14 = &v21[2 * v20];
        __p = v22;
        v222 = v15;
        v223 = v14;
        if (v16)
        {
          operator delete(v16);
          v14 = v223;
        }
      }
      else
      {
        *(_WORD *)v13 = a5;
        v15 = v13 + 2;
      }
      v222 = v15;
      if (v15 >= v14)
      {
        v25 = (char *)__p;
        v26 = v15 - (_BYTE *)__p;
        if (v15 - (_BYTE *)__p <= -3)
          sub_1DCAE4C44();
        v27 = v26 >> 1;
        v28 = v14 - (_BYTE *)__p;
        if (v28 <= (v26 >> 1) + 1)
          v29 = v27 + 1;
        else
          v29 = v28;
        if (v28 >= 0x7FFFFFFFFFFFFFFELL)
          v30 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30)
        {
          v31 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v30);
          v25 = (char *)__p;
          v15 = v222;
        }
        else
        {
          v31 = 0;
        }
        v32 = &v31[2 * v27];
        *(_WORD *)v32 = v12;
        v24 = v32 + 2;
        while (v15 != v25)
        {
          v33 = *((_WORD *)v15 - 1);
          v15 -= 2;
          *((_WORD *)v32 - 1) = v33;
          v32 -= 2;
        }
        v14 = &v31[2 * v30];
        __p = v32;
        v222 = v24;
        v223 = v14;
        if (v25)
        {
          operator delete(v25);
          v14 = v223;
        }
      }
      else
      {
        *(_WORD *)v15 = v12;
        v24 = v15 + 2;
      }
      v222 = v24;
      v12 = (v12 + 1);
      if (v24 >= v14)
      {
        v34 = (char *)__p;
        v35 = v24 - (_BYTE *)__p;
        if (v24 - (_BYTE *)__p <= -3)
          sub_1DCAE4C44();
        v36 = v35 >> 1;
        v37 = v14 - (_BYTE *)__p;
        if (v37 <= (v35 >> 1) + 1)
          v38 = v36 + 1;
        else
          v38 = v37;
        if (v37 >= 0x7FFFFFFFFFFFFFFELL)
          v39 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v39);
          v34 = (char *)__p;
          v24 = v222;
        }
        else
        {
          v40 = 0;
        }
        v41 = &v40[2 * v36];
        *(_WORD *)v41 = v12;
        v13 = v41 + 2;
        while (v24 != v34)
        {
          v42 = *((_WORD *)v24 - 1);
          v24 -= 2;
          *((_WORD *)v41 - 1) = v42;
          v41 -= 2;
        }
        __p = v41;
        v222 = v13;
        v223 = &v40[2 * v39];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(_WORD *)v24 = v12;
        v13 = v24 + 2;
      }
      v222 = v13;
    }
    while (v12 < a3);
  }
  v219 = a6;
  if (v217)
  {
    v86 = 0;
    v216 = v220 + 1;
    while (1)
    {
      v218 = (v86 + 1);
      if (v220)
        break;
LABEL_305:
      v86 = v218;
      if (v218 >= v217)
        goto LABEL_306;
    }
    LOWORD(v87) = 0;
    v88 = 0;
    v89 = v216 * (v86 + 1);
    v90 = v216 * (v86 + 2);
    while (1)
    {
      v91 = v87;
      v92 = v87 + v89;
      v87 = (v88 + 1);
      v93 = v89 + v88 + 1;
      v94 = v90 + v88 + 1;
      v96 = v222;
      v95 = v223;
      if (v219 == 2)
      {
        if (v222 >= v223)
        {
          v99 = (char *)__p;
          v100 = v222 - (_BYTE *)__p;
          if (v222 - (_BYTE *)__p <= -3)
            goto LABEL_311;
          v101 = v100 >> 1;
          if (v223 - (_BYTE *)__p <= (unint64_t)((v100 >> 1) + 1))
            v102 = v101 + 1;
          else
            v102 = v223 - (_BYTE *)__p;
          if ((unint64_t)(v223 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
            v103 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v103 = v102;
          if (v103)
          {
            v104 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v103);
            v99 = (char *)__p;
            v96 = v222;
          }
          else
          {
            v104 = 0;
          }
          v111 = &v104[2 * v101];
          *(_WORD *)v111 = v92;
          v97 = v111 + 2;
          while (v96 != v99)
          {
            v112 = *((_WORD *)v96 - 1);
            v96 -= 2;
            *((_WORD *)v111 - 1) = v112;
            v111 -= 2;
          }
          v95 = &v104[2 * v103];
          __p = v111;
          v222 = v97;
          v223 = v95;
          if (v99)
          {
            operator delete(v99);
            v95 = v223;
          }
        }
        else
        {
          *(_WORD *)v222 = v92;
          v97 = v96 + 2;
        }
        v113 = v91 + v90;
        v222 = v97;
        if (v97 >= v95)
        {
          v115 = (char *)__p;
          v116 = v97 - (_BYTE *)__p;
          if (v97 - (_BYTE *)__p < -2)
            goto LABEL_311;
          v117 = v116 >> 1;
          v118 = v95 - (_BYTE *)__p;
          if (v118 <= (v116 >> 1) + 1)
            v119 = v117 + 1;
          else
            v119 = v118;
          if (v118 >= 0x7FFFFFFFFFFFFFFELL)
            v120 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v120 = v119;
          if (v120)
          {
            v121 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v120);
            v115 = (char *)__p;
            v97 = v222;
          }
          else
          {
            v121 = 0;
          }
          v132 = &v121[2 * v117];
          *(_WORD *)v132 = v113;
          v114 = v132 + 2;
          while (v97 != v115)
          {
            v133 = *((_WORD *)v97 - 1);
            v97 -= 2;
            *((_WORD *)v132 - 1) = v133;
            v132 -= 2;
          }
          v95 = &v121[2 * v120];
          __p = v132;
          v222 = v114;
          v223 = v95;
          if (v115)
          {
            operator delete(v115);
            v95 = v223;
          }
        }
        else
        {
          *(_WORD *)v97 = v113;
          v114 = v97 + 2;
        }
        v222 = v114;
        if (v114 >= v95)
        {
          v135 = (char *)__p;
          v136 = v114 - (_BYTE *)__p;
          if (v114 - (_BYTE *)__p < -2)
            goto LABEL_311;
          v137 = v136 >> 1;
          v138 = v95 - (_BYTE *)__p;
          if (v138 <= (v136 >> 1) + 1)
            v139 = v137 + 1;
          else
            v139 = v138;
          if (v138 >= 0x7FFFFFFFFFFFFFFELL)
            v140 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v140 = v139;
          if (v140)
          {
            v141 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v140);
            v135 = (char *)__p;
            v114 = v222;
          }
          else
          {
            v141 = 0;
          }
          v152 = &v141[2 * v137];
          *(_WORD *)v152 = v94;
          v134 = v152 + 2;
          while (v114 != v135)
          {
            v153 = *((_WORD *)v114 - 1);
            v114 -= 2;
            *((_WORD *)v152 - 1) = v153;
            v152 -= 2;
          }
          v95 = &v141[2 * v140];
          __p = v152;
          v222 = v134;
          v223 = v95;
          if (v135)
          {
            operator delete(v135);
            v95 = v223;
          }
        }
        else
        {
          *(_WORD *)v114 = v94;
          v134 = v114 + 2;
        }
        v222 = v134;
        if (v134 >= v95)
        {
          v155 = (char *)__p;
          v156 = v134 - (_BYTE *)__p;
          if (v134 - (_BYTE *)__p < -2)
            goto LABEL_311;
          v157 = v156 >> 1;
          v158 = v95 - (_BYTE *)__p;
          if (v158 <= (v156 >> 1) + 1)
            v159 = v157 + 1;
          else
            v159 = v158;
          if (v158 >= 0x7FFFFFFFFFFFFFFELL)
            v160 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v160 = v159;
          if (v160)
          {
            v161 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v160);
            v155 = (char *)__p;
            v134 = v222;
          }
          else
          {
            v161 = 0;
          }
          v172 = &v161[2 * v157];
          *(_WORD *)v172 = v92;
          v154 = v172 + 2;
          while (v134 != v155)
          {
            v173 = *((_WORD *)v134 - 1);
            v134 -= 2;
            *((_WORD *)v172 - 1) = v173;
            v172 -= 2;
          }
          v95 = &v161[2 * v160];
          __p = v172;
          v222 = v154;
          v223 = v95;
          if (v155)
          {
            operator delete(v155);
            v95 = v223;
          }
        }
        else
        {
          *(_WORD *)v134 = v92;
          v154 = v134 + 2;
        }
        v222 = v154;
        if (v154 >= v95)
        {
          v175 = (char *)__p;
          v176 = v154 - (_BYTE *)__p;
          if (v154 - (_BYTE *)__p < -2)
            goto LABEL_311;
          v177 = v176 >> 1;
          v178 = v95 - (_BYTE *)__p;
          if (v178 <= (v176 >> 1) + 1)
            v179 = v177 + 1;
          else
            v179 = v178;
          if (v178 >= 0x7FFFFFFFFFFFFFFELL)
            v180 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v180 = v179;
          if (v180)
          {
            v181 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v180);
            v175 = (char *)__p;
            v154 = v222;
          }
          else
          {
            v181 = 0;
          }
          v184 = &v181[2 * v177];
          *(_WORD *)v184 = v94;
          v174 = v184 + 2;
          while (v154 != v175)
          {
            v185 = *((_WORD *)v154 - 1);
            v154 -= 2;
            *((_WORD *)v184 - 1) = v185;
            v184 -= 2;
          }
          v95 = &v181[2 * v180];
          __p = v184;
          v222 = v174;
          v223 = v95;
          if (v175)
          {
            operator delete(v175);
            v95 = v223;
          }
        }
        else
        {
          *(_WORD *)v154 = v94;
          v174 = v154 + 2;
        }
        v222 = v174;
        if (v174 >= v95)
        {
          v165 = (char *)__p;
          v186 = v174 - (_BYTE *)__p;
          if (v174 - (_BYTE *)__p < -2)
LABEL_311:
            sub_1DCAE4C44();
          v187 = v186 >> 1;
          v188 = v95 - (_BYTE *)__p;
          if (v188 <= (v186 >> 1) + 1)
            v189 = v187 + 1;
          else
            v189 = v188;
          if (v188 >= 0x7FFFFFFFFFFFFFFELL)
            v170 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v170 = v189;
          if (v170)
          {
            v171 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v170);
            v165 = (char *)__p;
            v174 = v222;
          }
          else
          {
            v171 = 0;
          }
          v182 = &v171[2 * v187];
          *(_WORD *)v182 = v93;
          v164 = v182 + 2;
          while (v174 != v165)
          {
            v190 = *((_WORD *)v174 - 1);
            v174 -= 2;
            *((_WORD *)v182 - 1) = v190;
            v182 -= 2;
          }
          goto LABEL_302;
        }
        *(_WORD *)v174 = v93;
        v164 = v174 + 2;
      }
      else
      {
        if (v222 >= v223)
        {
          v105 = (char *)__p;
          v106 = v222 - (_BYTE *)__p;
          if (v222 - (_BYTE *)__p < -2)
            goto LABEL_311;
          v107 = v106 >> 1;
          if (v223 - (_BYTE *)__p <= (unint64_t)((v106 >> 1) + 1))
            v108 = v107 + 1;
          else
            v108 = v223 - (_BYTE *)__p;
          if ((unint64_t)(v223 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
            v109 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v109 = v108;
          if (v109)
          {
            v110 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v109);
            v105 = (char *)__p;
            v96 = v222;
          }
          else
          {
            v110 = 0;
          }
          v122 = &v110[2 * v107];
          *(_WORD *)v122 = v92;
          v98 = v122 + 2;
          while (v96 != v105)
          {
            v123 = *((_WORD *)v96 - 1);
            v96 -= 2;
            *((_WORD *)v122 - 1) = v123;
            v122 -= 2;
          }
          v95 = &v110[2 * v109];
          __p = v122;
          v222 = v98;
          v223 = v95;
          if (v105)
          {
            operator delete(v105);
            v95 = v223;
          }
        }
        else
        {
          *(_WORD *)v222 = v92;
          v98 = v96 + 2;
        }
        v222 = v98;
        if (v98 >= v95)
        {
          v125 = (char *)__p;
          v126 = v98 - (_BYTE *)__p;
          if (v98 - (_BYTE *)__p < -2)
            goto LABEL_311;
          v127 = v126 >> 1;
          v128 = v95 - (_BYTE *)__p;
          if (v128 <= (v126 >> 1) + 1)
            v129 = v127 + 1;
          else
            v129 = v128;
          if (v128 >= 0x7FFFFFFFFFFFFFFELL)
            v130 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v130 = v129;
          if (v130)
          {
            v131 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v130);
            v125 = (char *)__p;
            v98 = v222;
          }
          else
          {
            v131 = 0;
          }
          v142 = &v131[2 * v127];
          *(_WORD *)v142 = v93;
          v124 = v142 + 2;
          while (v98 != v125)
          {
            v143 = *((_WORD *)v98 - 1);
            v98 -= 2;
            *((_WORD *)v142 - 1) = v143;
            v142 -= 2;
          }
          v95 = &v131[2 * v130];
          __p = v142;
          v222 = v124;
          v223 = v95;
          if (v125)
          {
            operator delete(v125);
            v95 = v223;
          }
        }
        else
        {
          *(_WORD *)v98 = v93;
          v124 = v98 + 2;
        }
        v222 = v124;
        if (v124 >= v95)
        {
          v145 = (char *)__p;
          v146 = v124 - (_BYTE *)__p;
          if (v124 - (_BYTE *)__p < -2)
            goto LABEL_311;
          v147 = v146 >> 1;
          v148 = v95 - (_BYTE *)__p;
          if (v148 <= (v146 >> 1) + 1)
            v149 = v147 + 1;
          else
            v149 = v148;
          if (v148 >= 0x7FFFFFFFFFFFFFFELL)
            v150 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v150 = v149;
          if (v150)
          {
            v151 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v150);
            v145 = (char *)__p;
            v124 = v222;
          }
          else
          {
            v151 = 0;
          }
          v162 = &v151[2 * v147];
          *(_WORD *)v162 = v93;
          v144 = v162 + 2;
          while (v124 != v145)
          {
            v163 = *((_WORD *)v124 - 1);
            v124 -= 2;
            *((_WORD *)v162 - 1) = v163;
            v162 -= 2;
          }
          v95 = &v151[2 * v150];
          __p = v162;
          v222 = v144;
          v223 = v95;
          if (v145)
          {
            operator delete(v145);
            v95 = v223;
          }
        }
        else
        {
          *(_WORD *)v124 = v93;
          v144 = v124 + 2;
        }
        v222 = v144;
        if (v144 >= v95)
        {
          v165 = (char *)__p;
          v166 = v144 - (_BYTE *)__p;
          if (v144 - (_BYTE *)__p < -2)
            goto LABEL_311;
          v167 = v166 >> 1;
          v168 = v95 - (_BYTE *)__p;
          if (v168 <= (v166 >> 1) + 1)
            v169 = v167 + 1;
          else
            v169 = v168;
          if (v168 >= 0x7FFFFFFFFFFFFFFELL)
            v170 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v170 = v169;
          if (v170)
          {
            v171 = (char *)sub_1DCB0DAEC((uint64_t)&v223, v170);
            v165 = (char *)__p;
            v144 = v222;
          }
          else
          {
            v171 = 0;
          }
          v182 = &v171[2 * v167];
          *(_WORD *)v182 = v94;
          v164 = v182 + 2;
          while (v144 != v165)
          {
            v183 = *((_WORD *)v144 - 1);
            v144 -= 2;
            *((_WORD *)v182 - 1) = v183;
            v182 -= 2;
          }
LABEL_302:
          __p = v182;
          v222 = v164;
          v223 = &v171[2 * v170];
          if (v165)
            operator delete(v165);
          goto LABEL_304;
        }
        *(_WORD *)v144 = v94;
        v164 = v144 + 2;
      }
LABEL_304:
      v222 = v164;
      v88 = v87;
      if (v87 >= v220)
        goto LABEL_305;
    }
  }
LABEL_306:
  v191 = objc_alloc(MEMORY[0x1E0C99D50]);
  v193 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v191, v192, (uint64_t)__p, v222 - (_BYTE *)__p, 0);
  v195 = (void *)objc_msgSend_newBufferWithData_type_(v214, v194, (uint64_t)v193, 2);
  if (objc_msgSend_conformsToProtocol_(v195, v196, (uint64_t)&unk_1F03B6D88))
  {
    v197 = v195;
    objc_msgSend_stringByAppendingString_(v215, v198, (uint64_t)CFSTR("-Indices"));
    v199 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v197, v200, (uint64_t)v199);

  }
  v201 = [MDLMaterial alloc];
  objc_msgSend_stringByAppendingString_(v215, v202, (uint64_t)CFSTR("-Material"));
  v203 = (void *)objc_claimAutoreleasedReturnValue();
  v204 = (void *)objc_opt_new();
  v206 = (void *)objc_msgSend_initWithName_scatteringFunction_(v201, v205, (uint64_t)v203, v204);

  v207 = [MDLSubmesh alloc];
  objc_msgSend_stringByAppendingString_(v215, v208, (uint64_t)CFSTR("-Submesh"));
  v209 = (void *)objc_claimAutoreleasedReturnValue();
  v211 = (void *)objc_msgSend_initWithName_indexBuffer_indexCount_indexType_geometryType_material_topology_(v207, v210, (uint64_t)v209, v195, (v222 - (_BYTE *)__p) >> 1, 16, v219, v206, 0);

  v212 = v211;
  if (__p)
  {
    v222 = (char *)__p;
    operator delete(__p);
  }

  return v212;
}

void sub_1DCB0CA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_1DCB0CB0C(void *a1, void *a2, unint64_t a3, unint64_t a4, int a5, uint64_t a6)
{
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  unint64_t v53;
  int v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  int v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  int v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unint64_t v86;
  int v87;
  int v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  int v106;
  int v107;
  char *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  int v116;
  char *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  int v125;
  char *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  int v134;
  char *v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  int v143;
  char *v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  int v152;
  char *v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  int v161;
  char *v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  int v170;
  char *v171;
  int v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  int v176;
  id v177;
  const char *v178;
  void *v179;
  const char *v180;
  void *v181;
  const char *v182;
  id v183;
  const char *v184;
  void *v185;
  const char *v186;
  MDLMaterial *v187;
  const char *v188;
  void *v189;
  void *v190;
  const char *v191;
  void *v192;
  MDLSubmesh *v193;
  const char *v194;
  void *v195;
  const char *v196;
  void *v197;
  id v198;
  id v200;
  id v201;
  int v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  void *__p;
  char *v208;
  char *v209;

  v201 = a1;
  v200 = a2;
  v203 = a4;
  v11 = (8 * a4) | 6;
  if (a6 == 2)
    v11 = 6 * a4 + 3;
  v206 = a3;
  __p = 0;
  v208 = 0;
  v209 = 0;
  sub_1DCB01460(&__p, v11 * a3);
  if (a6 == 1)
  {
    if (a3)
    {
      v41 = 0;
      v42 = v208;
      do
      {
        v43 = v209;
        if (v42 >= v209)
        {
          v45 = (char *)__p;
          v46 = (v42 - (_BYTE *)__p) >> 2;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 62)
            goto LABEL_295;
          v48 = v209 - (_BYTE *)__p;
          if ((v209 - (_BYTE *)__p) >> 1 > v47)
            v47 = v48 >> 1;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
            v49 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          if (v49)
          {
            v50 = (char *)sub_1DCAE4D04((uint64_t)&v209, v49);
            v45 = (char *)__p;
            v42 = v208;
          }
          else
          {
            v50 = 0;
          }
          v51 = &v50[4 * v46];
          *(_DWORD *)v51 = v41;
          v44 = v51 + 4;
          while (v42 != v45)
          {
            v52 = *((_DWORD *)v42 - 1);
            v42 -= 4;
            *((_DWORD *)v51 - 1) = v52;
            v51 -= 4;
          }
          v43 = &v50[4 * v49];
          __p = v51;
          v208 = v44;
          v209 = v43;
          if (v45)
          {
            operator delete(v45);
            v43 = v209;
          }
        }
        else
        {
          *(_DWORD *)v42 = v41;
          v44 = v42 + 4;
        }
        v208 = v44;
        v53 = (v41 + 1);
        v54 = v53 % v206;
        if (v44 >= v43)
        {
          v56 = (char *)__p;
          v57 = (v44 - (_BYTE *)__p) >> 2;
          v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 62)
            sub_1DCAE4C44();
          v59 = v43 - (_BYTE *)__p;
          if (v59 >> 1 > v58)
            v58 = v59 >> 1;
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
            v60 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v60 = v58;
          if (v60)
          {
            v61 = (char *)sub_1DCAE4D04((uint64_t)&v209, v60);
            v56 = (char *)__p;
            v44 = v208;
          }
          else
          {
            v61 = 0;
          }
          v62 = &v61[4 * v57];
          *(_DWORD *)v62 = v54;
          v55 = v62 + 4;
          while (v44 != v56)
          {
            v63 = *((_DWORD *)v44 - 1);
            v44 -= 4;
            *((_DWORD *)v62 - 1) = v63;
            v62 -= 4;
          }
          v43 = &v61[4 * v60];
          __p = v62;
          v208 = v55;
          v209 = v43;
          if (v56)
          {
            operator delete(v56);
            v43 = v209;
          }
        }
        else
        {
          *(_DWORD *)v44 = v54;
          v55 = v44 + 4;
        }
        v208 = v55;
        if (v55 >= v43)
        {
          v65 = (char *)__p;
          v66 = (v55 - (_BYTE *)__p) >> 2;
          v67 = v66 + 1;
          if ((unint64_t)(v66 + 1) >> 62)
LABEL_295:
            sub_1DCAE4C44();
          v68 = v43 - (_BYTE *)__p;
          if (v68 >> 1 > v67)
            v67 = v68 >> 1;
          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
            v69 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v69 = v67;
          if (v69)
          {
            v70 = (char *)sub_1DCAE4D04((uint64_t)&v209, v69);
            v65 = (char *)__p;
            v55 = v208;
          }
          else
          {
            v70 = 0;
          }
          v71 = &v70[4 * v66];
          *(_DWORD *)v71 = v41;
          v64 = v71 + 4;
          while (v55 != v65)
          {
            v72 = *((_DWORD *)v55 - 1);
            v55 -= 4;
            *((_DWORD *)v71 - 1) = v72;
            v71 -= 4;
          }
          v43 = &v70[4 * v69];
          __p = v71;
          v208 = v64;
          v209 = v43;
          if (v65)
          {
            operator delete(v65);
            v43 = v209;
          }
        }
        else
        {
          *(_DWORD *)v55 = v41;
          v64 = v55 + 4;
        }
        v208 = v64;
        if (v64 >= v43)
        {
          v73 = (char *)__p;
          v74 = (v64 - (_BYTE *)__p) >> 2;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 62)
            sub_1DCAE4C44();
          v76 = v43 - (_BYTE *)__p;
          if (v76 >> 1 > v75)
            v75 = v76 >> 1;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
            v77 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (v77)
          {
            v78 = (char *)sub_1DCAE4D04((uint64_t)&v209, v77);
            v73 = (char *)__p;
            v64 = v208;
          }
          else
          {
            v78 = 0;
          }
          v79 = &v78[4 * v74];
          *(_DWORD *)v79 = a5;
          v42 = v79 + 4;
          while (v64 != v73)
          {
            v80 = *((_DWORD *)v64 - 1);
            v64 -= 4;
            *((_DWORD *)v79 - 1) = v80;
            v79 -= 4;
          }
          __p = v79;
          v208 = v42;
          v209 = &v78[4 * v77];
          if (v73)
            operator delete(v73);
        }
        else
        {
          *(_DWORD *)v64 = a5;
          v42 = v64 + 4;
        }
        v208 = v42;
        v41 = v53;
      }
      while (v53 < v206);
    }
  }
  else if (a6 == 2 && a3)
  {
    LODWORD(v12) = 0;
    v13 = v208;
    do
    {
      v14 = v209;
      if (v13 >= v209)
      {
        v16 = (char *)__p;
        v17 = (v13 - (_BYTE *)__p) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          sub_1DCAE4C44();
        v19 = v209 - (_BYTE *)__p;
        if ((v209 - (_BYTE *)__p) >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)sub_1DCAE4D04((uint64_t)&v209, v20);
          v16 = (char *)__p;
          v13 = v208;
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[4 * v17];
        *(_DWORD *)v22 = a5;
        v15 = v22 + 4;
        while (v13 != v16)
        {
          v23 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        v14 = &v21[4 * v20];
        __p = v22;
        v208 = v15;
        v209 = v14;
        if (v16)
        {
          operator delete(v16);
          v14 = v209;
        }
      }
      else
      {
        *(_DWORD *)v13 = a5;
        v15 = v13 + 4;
      }
      v208 = v15;
      if (v15 >= v14)
      {
        v25 = (char *)__p;
        v26 = (v15 - (_BYTE *)__p) >> 2;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62)
          sub_1DCAE4C44();
        v28 = v14 - (_BYTE *)__p;
        if (v28 >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)sub_1DCAE4D04((uint64_t)&v209, v29);
          v25 = (char *)__p;
          v15 = v208;
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[4 * v26];
        *(_DWORD *)v31 = v12;
        v24 = v31 + 4;
        while (v15 != v25)
        {
          v32 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v31 - 1) = v32;
          v31 -= 4;
        }
        v14 = &v30[4 * v29];
        __p = v31;
        v208 = v24;
        v209 = v14;
        if (v25)
        {
          operator delete(v25);
          v14 = v209;
        }
      }
      else
      {
        *(_DWORD *)v15 = v12;
        v24 = v15 + 4;
      }
      v208 = v24;
      v12 = (v12 + 1);
      if (v24 >= v14)
      {
        v33 = (char *)__p;
        v34 = (v24 - (_BYTE *)__p) >> 2;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62)
          sub_1DCAE4C44();
        v36 = v14 - (_BYTE *)__p;
        if (v36 >> 1 > v35)
          v35 = v36 >> 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
          v37 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          v38 = (char *)sub_1DCAE4D04((uint64_t)&v209, v37);
          v33 = (char *)__p;
          v24 = v208;
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[4 * v34];
        *(_DWORD *)v39 = v12;
        v13 = v39 + 4;
        while (v24 != v33)
        {
          v40 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v39 - 1) = v40;
          v39 -= 4;
        }
        __p = v39;
        v208 = v13;
        v209 = &v38[4 * v37];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_DWORD *)v24 = v12;
        v13 = v24 + 4;
      }
      v208 = v13;
    }
    while (v12 < a3);
  }
  v205 = a6;
  if (v203)
  {
    v81 = 0;
    v202 = v206 + 1;
    while (1)
    {
      v204 = (v81 + 1);
      if (v206)
        break;
LABEL_288:
      v81 = v204;
      if (v204 >= v203)
        goto LABEL_289;
    }
    v82 = 0;
    v83 = v204 * v202;
    v84 = (v81 + 2) * v202;
    while (1)
    {
      v85 = v82 + v83;
      v86 = (v82 + 1);
      v87 = v86 + v83;
      v88 = v86 + v84;
      v90 = v208;
      v89 = v209;
      if (v205 == 2)
      {
        if (v208 >= v209)
        {
          v93 = (char *)__p;
          v94 = (v208 - (_BYTE *)__p) >> 2;
          v95 = v94 + 1;
          if ((unint64_t)(v94 + 1) >> 62)
            goto LABEL_294;
          v96 = v209 - (_BYTE *)__p;
          if ((v209 - (_BYTE *)__p) >> 1 > v95)
            v95 = v96 >> 1;
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
            v97 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v97 = v95;
          if (v97)
          {
            v98 = (char *)sub_1DCAE4D04((uint64_t)&v209, v97);
            v93 = (char *)__p;
            v90 = v208;
          }
          else
          {
            v98 = 0;
          }
          v105 = &v98[4 * v94];
          *(_DWORD *)v105 = v85;
          v91 = v105 + 4;
          while (v90 != v93)
          {
            v106 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v105 - 1) = v106;
            v105 -= 4;
          }
          v89 = &v98[4 * v97];
          __p = v105;
          v208 = v91;
          v209 = v89;
          if (v93)
          {
            operator delete(v93);
            v89 = v209;
          }
        }
        else
        {
          *(_DWORD *)v208 = v85;
          v91 = v90 + 4;
        }
        v107 = v82 + v84;
        v208 = v91;
        if (v91 >= v89)
        {
          v109 = (char *)__p;
          v110 = (v91 - (_BYTE *)__p) >> 2;
          v111 = v110 + 1;
          if ((unint64_t)(v110 + 1) >> 62)
            goto LABEL_294;
          v112 = v89 - (_BYTE *)__p;
          if (v112 >> 1 > v111)
            v111 = v112 >> 1;
          if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
            v113 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v113 = v111;
          if (v113)
          {
            v114 = (char *)sub_1DCAE4D04((uint64_t)&v209, v113);
            v109 = (char *)__p;
            v91 = v208;
          }
          else
          {
            v114 = 0;
          }
          v124 = &v114[4 * v110];
          *(_DWORD *)v124 = v107;
          v108 = v124 + 4;
          while (v91 != v109)
          {
            v125 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v124 - 1) = v125;
            v124 -= 4;
          }
          v89 = &v114[4 * v113];
          __p = v124;
          v208 = v108;
          v209 = v89;
          if (v109)
          {
            operator delete(v109);
            v89 = v209;
          }
        }
        else
        {
          *(_DWORD *)v91 = v107;
          v108 = v91 + 4;
        }
        v208 = v108;
        if (v108 >= v89)
        {
          v127 = (char *)__p;
          v128 = (v108 - (_BYTE *)__p) >> 2;
          v129 = v128 + 1;
          if ((unint64_t)(v128 + 1) >> 62)
            goto LABEL_294;
          v130 = v89 - (_BYTE *)__p;
          if (v130 >> 1 > v129)
            v129 = v130 >> 1;
          if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL)
            v131 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v131 = v129;
          if (v131)
          {
            v132 = (char *)sub_1DCAE4D04((uint64_t)&v209, v131);
            v127 = (char *)__p;
            v108 = v208;
          }
          else
          {
            v132 = 0;
          }
          v142 = &v132[4 * v128];
          *(_DWORD *)v142 = v88;
          v126 = v142 + 4;
          while (v108 != v127)
          {
            v143 = *((_DWORD *)v108 - 1);
            v108 -= 4;
            *((_DWORD *)v142 - 1) = v143;
            v142 -= 4;
          }
          v89 = &v132[4 * v131];
          __p = v142;
          v208 = v126;
          v209 = v89;
          if (v127)
          {
            operator delete(v127);
            v89 = v209;
          }
        }
        else
        {
          *(_DWORD *)v108 = v88;
          v126 = v108 + 4;
        }
        v208 = v126;
        if (v126 >= v89)
        {
          v145 = (char *)__p;
          v146 = (v126 - (_BYTE *)__p) >> 2;
          v147 = v146 + 1;
          if ((unint64_t)(v146 + 1) >> 62)
            goto LABEL_294;
          v148 = v89 - (_BYTE *)__p;
          if (v148 >> 1 > v147)
            v147 = v148 >> 1;
          if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL)
            v149 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v149 = v147;
          if (v149)
          {
            v150 = (char *)sub_1DCAE4D04((uint64_t)&v209, v149);
            v145 = (char *)__p;
            v126 = v208;
          }
          else
          {
            v150 = 0;
          }
          v160 = &v150[4 * v146];
          *(_DWORD *)v160 = v85;
          v144 = v160 + 4;
          while (v126 != v145)
          {
            v161 = *((_DWORD *)v126 - 1);
            v126 -= 4;
            *((_DWORD *)v160 - 1) = v161;
            v160 -= 4;
          }
          v89 = &v150[4 * v149];
          __p = v160;
          v208 = v144;
          v209 = v89;
          if (v145)
          {
            operator delete(v145);
            v89 = v209;
          }
        }
        else
        {
          *(_DWORD *)v126 = v85;
          v144 = v126 + 4;
        }
        v208 = v144;
        if (v144 >= v89)
        {
          v163 = (char *)__p;
          v164 = (v144 - (_BYTE *)__p) >> 2;
          v165 = v164 + 1;
          if ((unint64_t)(v164 + 1) >> 62)
            goto LABEL_294;
          v166 = v89 - (_BYTE *)__p;
          if (v166 >> 1 > v165)
            v165 = v166 >> 1;
          if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL)
            v167 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v167 = v165;
          if (v167)
          {
            v168 = (char *)sub_1DCAE4D04((uint64_t)&v209, v167);
            v163 = (char *)__p;
            v144 = v208;
          }
          else
          {
            v168 = 0;
          }
          v171 = &v168[4 * v164];
          *(_DWORD *)v171 = v88;
          v162 = v171 + 4;
          while (v144 != v163)
          {
            v172 = *((_DWORD *)v144 - 1);
            v144 -= 4;
            *((_DWORD *)v171 - 1) = v172;
            v171 -= 4;
          }
          v89 = &v168[4 * v167];
          __p = v171;
          v208 = v162;
          v209 = v89;
          if (v163)
          {
            operator delete(v163);
            v89 = v209;
          }
        }
        else
        {
          *(_DWORD *)v144 = v88;
          v162 = v144 + 4;
        }
        v208 = v162;
        if (v162 >= v89)
        {
          v154 = (char *)__p;
          v173 = (v162 - (_BYTE *)__p) >> 2;
          v174 = v173 + 1;
          if ((unint64_t)(v173 + 1) >> 62)
LABEL_294:
            sub_1DCAE4C44();
          v175 = v89 - (_BYTE *)__p;
          if (v175 >> 1 > v174)
            v174 = v175 >> 1;
          if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFFCLL)
            v158 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v158 = v174;
          if (v158)
          {
            v159 = (char *)sub_1DCAE4D04((uint64_t)&v209, v158);
            v154 = (char *)__p;
            v162 = v208;
          }
          else
          {
            v159 = 0;
          }
          v169 = &v159[4 * v173];
          *(_DWORD *)v169 = v87;
          v153 = v169 + 4;
          while (v162 != v154)
          {
            v176 = *((_DWORD *)v162 - 1);
            v162 -= 4;
            *((_DWORD *)v169 - 1) = v176;
            v169 -= 4;
          }
          goto LABEL_285;
        }
        *(_DWORD *)v162 = v87;
        v153 = v162 + 4;
      }
      else
      {
        if (v208 >= v209)
        {
          v99 = (char *)__p;
          v100 = (v208 - (_BYTE *)__p) >> 2;
          v101 = v100 + 1;
          if ((unint64_t)(v100 + 1) >> 62)
            goto LABEL_294;
          v102 = v209 - (_BYTE *)__p;
          if ((v209 - (_BYTE *)__p) >> 1 > v101)
            v101 = v102 >> 1;
          if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
            v103 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v103 = v101;
          if (v103)
          {
            v104 = (char *)sub_1DCAE4D04((uint64_t)&v209, v103);
            v99 = (char *)__p;
            v90 = v208;
          }
          else
          {
            v104 = 0;
          }
          v115 = &v104[4 * v100];
          *(_DWORD *)v115 = v85;
          v92 = v115 + 4;
          while (v90 != v99)
          {
            v116 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v115 - 1) = v116;
            v115 -= 4;
          }
          v89 = &v104[4 * v103];
          __p = v115;
          v208 = v92;
          v209 = v89;
          if (v99)
          {
            operator delete(v99);
            v89 = v209;
          }
        }
        else
        {
          *(_DWORD *)v208 = v85;
          v92 = v90 + 4;
        }
        v208 = v92;
        if (v92 >= v89)
        {
          v118 = (char *)__p;
          v119 = (v92 - (_BYTE *)__p) >> 2;
          v120 = v119 + 1;
          if ((unint64_t)(v119 + 1) >> 62)
            goto LABEL_294;
          v121 = v89 - (_BYTE *)__p;
          if (v121 >> 1 > v120)
            v120 = v121 >> 1;
          if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL)
            v122 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v122 = v120;
          if (v122)
          {
            v123 = (char *)sub_1DCAE4D04((uint64_t)&v209, v122);
            v118 = (char *)__p;
            v92 = v208;
          }
          else
          {
            v123 = 0;
          }
          v133 = &v123[4 * v119];
          *(_DWORD *)v133 = v87;
          v117 = v133 + 4;
          while (v92 != v118)
          {
            v134 = *((_DWORD *)v92 - 1);
            v92 -= 4;
            *((_DWORD *)v133 - 1) = v134;
            v133 -= 4;
          }
          v89 = &v123[4 * v122];
          __p = v133;
          v208 = v117;
          v209 = v89;
          if (v118)
          {
            operator delete(v118);
            v89 = v209;
          }
        }
        else
        {
          *(_DWORD *)v92 = v87;
          v117 = v92 + 4;
        }
        v208 = v117;
        if (v117 >= v89)
        {
          v136 = (char *)__p;
          v137 = (v117 - (_BYTE *)__p) >> 2;
          v138 = v137 + 1;
          if ((unint64_t)(v137 + 1) >> 62)
            goto LABEL_294;
          v139 = v89 - (_BYTE *)__p;
          if (v139 >> 1 > v138)
            v138 = v139 >> 1;
          if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL)
            v140 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v140 = v138;
          if (v140)
          {
            v141 = (char *)sub_1DCAE4D04((uint64_t)&v209, v140);
            v136 = (char *)__p;
            v117 = v208;
          }
          else
          {
            v141 = 0;
          }
          v151 = &v141[4 * v137];
          *(_DWORD *)v151 = v87;
          v135 = v151 + 4;
          while (v117 != v136)
          {
            v152 = *((_DWORD *)v117 - 1);
            v117 -= 4;
            *((_DWORD *)v151 - 1) = v152;
            v151 -= 4;
          }
          v89 = &v141[4 * v140];
          __p = v151;
          v208 = v135;
          v209 = v89;
          if (v136)
          {
            operator delete(v136);
            v89 = v209;
          }
        }
        else
        {
          *(_DWORD *)v117 = v87;
          v135 = v117 + 4;
        }
        v208 = v135;
        if (v135 >= v89)
        {
          v154 = (char *)__p;
          v155 = (v135 - (_BYTE *)__p) >> 2;
          v156 = v155 + 1;
          if ((unint64_t)(v155 + 1) >> 62)
            goto LABEL_294;
          v157 = v89 - (_BYTE *)__p;
          if (v157 >> 1 > v156)
            v156 = v157 >> 1;
          if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL)
            v158 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v158 = v156;
          if (v158)
          {
            v159 = (char *)sub_1DCAE4D04((uint64_t)&v209, v158);
            v154 = (char *)__p;
            v135 = v208;
          }
          else
          {
            v159 = 0;
          }
          v169 = &v159[4 * v155];
          *(_DWORD *)v169 = v88;
          v153 = v169 + 4;
          while (v135 != v154)
          {
            v170 = *((_DWORD *)v135 - 1);
            v135 -= 4;
            *((_DWORD *)v169 - 1) = v170;
            v169 -= 4;
          }
LABEL_285:
          __p = v169;
          v208 = v153;
          v209 = &v159[4 * v158];
          if (v154)
            operator delete(v154);
          goto LABEL_287;
        }
        *(_DWORD *)v135 = v88;
        v153 = v135 + 4;
      }
LABEL_287:
      v208 = v153;
      v82 = v86;
      if (v86 >= v206)
        goto LABEL_288;
    }
  }
LABEL_289:
  v177 = objc_alloc(MEMORY[0x1E0C99D50]);
  v179 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v177, v178, (uint64_t)__p, v208 - (_BYTE *)__p, 0);
  v181 = (void *)objc_msgSend_newBufferWithData_type_(v200, v180, (uint64_t)v179, 2);
  if (objc_msgSend_conformsToProtocol_(v181, v182, (uint64_t)&unk_1F03B6D88))
  {
    v183 = v181;
    objc_msgSend_stringByAppendingString_(v201, v184, (uint64_t)CFSTR("-Indices"));
    v185 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v183, v186, (uint64_t)v185);

  }
  v187 = [MDLMaterial alloc];
  objc_msgSend_stringByAppendingString_(v201, v188, (uint64_t)CFSTR("-Material"));
  v189 = (void *)objc_claimAutoreleasedReturnValue();
  v190 = (void *)objc_opt_new();
  v192 = (void *)objc_msgSend_initWithName_scatteringFunction_(v187, v191, (uint64_t)v189, v190);

  v193 = [MDLSubmesh alloc];
  objc_msgSend_stringByAppendingString_(v201, v194, (uint64_t)CFSTR("-Submesh"));
  v195 = (void *)objc_claimAutoreleasedReturnValue();
  v197 = (void *)objc_msgSend_initWithName_indexBuffer_indexCount_indexType_geometryType_material_topology_(v193, v196, (uint64_t)v195, v181, (v208 - (_BYTE *)__p) >> 2, 32, v205, v192, 0);

  v198 = v197;
  if (__p)
  {
    v208 = (char *)__p;
    operator delete(__p);
  }

  return v198;
}

void sub_1DCB0D8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1DCB0DA4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB0DA5C(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_1DCAE4C44();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1DCB0DAEC(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    v9 = &v6[2 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void *sub_1DCB0DAEC(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    sub_1DCAE4CDC();
  return operator new(2 * a2);
}

uint64_t sub_1DCB0DB1C(uint64_t a1, float a2)
{
  int v4;
  double v5;
  uint64_t (**v6)(_QWORD);
  uint64_t v7;
  unsigned int v8;
  float v9;
  int v10;
  void *v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  char *v21;
  int v22;
  _DWORD *v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  float32x2_t v28;
  float32x2_t v29;
  char v30;
  float32x2_t v31;
  float32x2_t v32;
  int32x2_t v33;
  float32x2_t v34;
  int32x2_t v35;
  float32x2_t v36;
  float v37;
  float32x2_t v38;
  float v39;
  float32x2_t v40;
  float v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  int v47;
  int v48;
  char v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  float v58;
  int v59;
  unsigned int v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  int v68;
  float v69;
  float v70;
  float v71;
  float v72;
  _BOOL4 v73;
  BOOL v74;
  float v75;
  float v76;
  int v77;
  float v78;
  float v79;
  int v80;
  char *v81;
  int *v82;
  _DWORD *v83;
  void *v84;
  _DWORD *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  float *v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t i;
  int v96;
  float *v97;
  int v98;
  int *v99;
  int v100;
  uint64_t j;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  char *v110;
  uint64_t k;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  uint64_t v125;
  float v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float v142;
  uint64_t v143;
  float v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  char *v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  float v153;
  uint64_t v154;
  float v155;
  uint64_t v156;
  int v157;
  int v158;
  uint64_t v159;
  char *v160;
  int *v161;
  int v162;
  int v163;
  char *v164;
  int *v165;
  int v166;
  int v167;
  int v168;
  uint64_t v169;
  int v170;
  char *v171;
  int v172;
  char *v173;
  int v174;
  uint64_t v175;
  char *v176;
  int v177;
  char *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  _DWORD *v183;
  uint64_t v184;
  char *v185;
  int *v186;
  uint64_t v187;
  int v188;
  float v189;
  float32x2_t v190;
  int v191;
  int v192;
  float32x2_t v193;
  float v194;
  int v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  int v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  int v205;
  float v206;
  float32x2_t v207;
  float32x2_t v208;
  float32x2_t v209;
  float v210;
  float v211;
  float v212;
  float32x2_t v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  int v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  float v225;
  float v226;
  float v227;
  uint64_t v228;
  char *v229;
  unsigned int v230;
  uint64_t v231;
  char *v232;
  _DWORD *v233;
  int v234;
  uint64_t v235;
  _DWORD *v236;
  _DWORD *v237;
  uint64_t v238;
  _DWORD *v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  int v244;
  int v245;
  int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  _DWORD *v253;
  _DWORD *v254;
  uint64_t v255;
  uint64_t v256;
  int *v257;
  int v258;
  int v259;
  int v260;
  int *v261;
  int v262;
  int *v263;
  int v264;
  uint64_t v267;
  char *v268;
  _DWORD *v270;
  int v271;
  uint64_t v272;
  int v273;
  int v274;
  int *v275;
  int v276;
  _DWORD *v277;
  int v278;
  uint64_t v281;
  int v282;
  BOOL v283;
  int v284;
  char v285;
  _DWORD *v286;
  char v287;
  int v288;
  uint64_t m;
  unint64_t v290;
  char *v291;
  uint64_t v292;
  unint64_t v293;
  unsigned int v294;
  uint64_t v295;
  int v296;
  int v297;
  char *v298;
  unint64_t v299;
  unint64_t v300;
  int v301;
  void *v302;
  void *v303;
  void *v304;
  BOOL v305;
  int v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  _OWORD *v310;
  int v311;
  void *v312;
  int v313;
  uint64_t v314;
  int v315;
  __n128 v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  void (*v321)(uint64_t, __int128 *, _DWORD *, _QWORD, uint64_t, uint64_t, float, float);
  void (*v322)(uint64_t, __int128 *, uint64_t, uint64_t, __n128);
  int v324;
  int v325;
  int v326;
  float v327;
  int v328;
  char *v329;
  int *v330;
  uint64_t v331;
  _DWORD *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  _DWORD *v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  uint64_t size;
  float sizea;
  float sizeb;
  float v346;
  float v347;
  float v348;
  uint64_t v349;
  float v350;
  float v351;
  float32x2_t v352;
  _DWORD v353[3];
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  uint64_t v359;
  uint64_t v360;

  v360 = *MEMORY[0x1E0C80C00];
  v4 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v5 = cos((float)(a2 * 0.017453));
  v6 = *(uint64_t (***)(_QWORD))a1;
  if (!**(_QWORD **)a1 || !v6[1] || !v6[2] || !v6[3] || !v6[4] || v4 < 1)
    return 0;
  v7 = 0;
  v8 = 0;
  v9 = v5;
  do
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, v7);
    if (v10 == 4)
    {
      v8 += 2;
    }
    else if (v10 == 3)
    {
      ++v8;
    }
    v7 = (v7 + 1);
  }
  while (v4 != (_DWORD)v7);
  if ((int)v8 < 1)
    return 0;
  v11 = malloc_type_malloc(12 * v8, 0x38CB24FuLL);
  v12 = (char *)malloc_type_malloc(88 * v8, 0x1020040F04E29DEuLL);
  v13 = v12;
  if (!v11 || !v12)
  {
    if (v11)
      free(v11);
    if (!v13)
      return 0;
    v54 = v13;
LABEL_347:
    free(v54);
    return 0;
  }
  size = 12 * v8;
  v324 = v4;
  v325 = v8 - 1;
  v336 = v11;
  v328 = v8;
  v331 = v8;
  v333 = v12;
  if ((**(int (***)(uint64_t))a1)(a1) < 1)
  {
    v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, v16);
      if ((v18 - 5) >= 0xFFFFFFFE)
      {
        v19 = v18;
        v20 = &v13[88 * v17];
        *((_DWORD *)v20 + 18) = v16;
        *((_DWORD *)v20 + 20) = v15;
        if (v18 == 3)
        {
          v21 = &v13[88 * v17];
          *((_WORD *)v21 + 42) = 256;
          v21[86] = 2;
          v22 = 3 * v17;
          v23 = v336;
          v336[3 * v17] = v14;
          v336[3 * v17 + 1] = v14 + 1;
          v24 = v14 + 2;
          v25 = 1;
        }
        else
        {
          v26 = 4 * v16;
          v27 = &v13[88 * v17 + 88];
          *((_DWORD *)v27 + 18) = v16;
          *((_DWORD *)v27 + 20) = v15;
          *(_QWORD *)&v354 = 0;
          (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v354, (v14 >> 2), 0);
          v28 = (float32x2_t)v354;
          *(_QWORD *)&v354 = 0;
          (*(void (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v354, (v14 >> 2), 1);
          v29 = (float32x2_t)v354;
          *(_QWORD *)&v354 = 0;
          v30 = 2;
          (*(void (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v354, (v14 >> 2), 2);
          v31 = (float32x2_t)v354;
          *(_QWORD *)&v354 = 0;
          (*(void (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v354, (v14 >> 2), 3);
          v32 = vsub_f32(v31, v28);
          v33 = (int32x2_t)vmul_f32(v32, v32);
          v34 = vsub_f32(*(float32x2_t *)&v354, v29);
          v35 = (int32x2_t)vmul_f32(v34, v34);
          v36 = vadd_f32((float32x2_t)vzip2_s32(v33, v35), (float32x2_t)vzip1_s32(v33, v35));
          if (v36.f32[0] < v36.f32[1])
            goto LABEL_25;
          if (v36.f32[1] < v36.f32[0])
            goto LABEL_24;
          DWORD2(v354) = 0;
          *(_QWORD *)&v354 = 0;
          (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v354, (v14 >> 2), 0);
          v37 = *(float *)&v354;
          v38 = *(float32x2_t *)((char *)&v354 + 4);
          DWORD2(v354) = 0;
          *(_QWORD *)&v354 = 0;
          (*(void (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v354, (v14 >> 2), 1);
          v39 = *(float *)&v354;
          v40 = *(float32x2_t *)((char *)&v354 + 4);
          DWORD2(v354) = 0;
          *(_QWORD *)&v354 = 0;
          (*(void (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v354, (v14 >> 2), 2);
          v41 = *(float *)&v354;
          v42 = *(float32x2_t *)((char *)&v354 + 4);
          DWORD2(v354) = 0;
          *(_QWORD *)&v354 = 0;
          (*(void (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v354, (v14 >> 2), 3);
          v43 = vsub_f32(v42, v38);
          v44 = vmul_f32(v43, v43);
          v45 = vsub_f32(*(float32x2_t *)((char *)&v354 + 4), v40);
          v46 = vmul_f32(v45, v45);
          if ((float)((float)(v46.f32[0] + (float)((float)(*(float *)&v354 - v39) * (float)(*(float *)&v354 - v39)))
                     + v46.f32[1]) >= (float)((float)(v44.f32[0] + (float)((float)(v41 - v37) * (float)(v41 - v37)))
                                            + v44.f32[1]))
          {
LABEL_25:
            v49 = 0;
            v47 = v14;
            v50 = v17 + 1;
            v48 = (4 * v16) | 2;
          }
          else
          {
LABEL_24:
            v47 = v26 | 1;
            v48 = v14 + 3;
            v49 = 1;
            v30 = 3;
            v50 = v17 + 1;
          }
          v24 = v26 | 3;
          v13 = v333;
          v51 = &v333[88 * v17];
          *((_WORD *)v51 + 42) = 256;
          v51[86] = v30;
          v23 = v336;
          v336[3 * v17] = v14;
          v52 = (char *)&v336[3 * v17];
          *((_DWORD *)v52 + 1) = v14 + 1;
          *((_DWORD *)v52 + 2) = v48;
          v53 = &v333[88 * v50];
          v53[84] = v49;
          *(_WORD *)(v53 + 85) = 770;
          v22 = 3 * v50;
          v336[3 * (_DWORD)v50] = v47;
          v336[3 * (int)v50 + 1] = v14 + 2;
          v25 = 2;
        }
        v23[v22 + 2] = v24;
        v17 += v25;
        v15 += v19;
      }
      v16 = (v16 + 1);
      v14 += 4;
    }
    while ((int)v16 < (**(int (***)(uint64_t))a1)(a1));
  }
  v55 = 76;
  v56 = v331;
  do
  {
    *(_DWORD *)&v13[v55] = 0;
    v55 += 88;
    --v56;
  }
  while (v56);
  DWORD2(v354) = 0;
  *(_QWORD *)&v354 = 0;
  (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v354, 0, 0);
  v57 = *((float *)&v354 + 1);
  v58 = *(float *)&v354;
  v59 = 3 * v328;
  if (3 * v328 <= 2)
    v60 = 2;
  else
    v60 = 3 * v328;
  v61 = *((float *)&v354 + 2);
  v62 = 4 * v60;
  v63 = 4;
  v64 = *((float *)&v354 + 2);
  v65 = *((float *)&v354 + 1);
  v66 = *(float *)&v354;
  v67 = (uint64_t)v336;
  do
  {
    v68 = v336[(unint64_t)v63 / 4];
    DWORD2(v354) = 0;
    *(_QWORD *)&v354 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v354, (v68 >> 2), v68 & 3);
    if (v58 < *(float *)&v354)
      v69 = *(float *)&v354;
    else
      v69 = v58;
    if (v66 <= *(float *)&v354)
      v58 = v69;
    else
      v66 = *(float *)&v354;
    if (v57 < *((float *)&v354 + 1))
      v70 = *((float *)&v354 + 1);
    else
      v70 = v57;
    if (v65 <= *((float *)&v354 + 1))
      v57 = v70;
    else
      v65 = *((float *)&v354 + 1);
    if (v64 <= *((float *)&v354 + 2))
    {
      if (v61 < *((float *)&v354 + 2))
        v61 = *((float *)&v354 + 2);
    }
    else
    {
      v64 = *((float *)&v354 + 2);
    }
    v63 += 4;
  }
  while (v62 != v63);
  v71 = v58 - v66;
  v72 = v61 - v64;
  v73 = (float)(v57 - v65) > (float)(v61 - v64) && (float)(v57 - v65) > (float)(v58 - v66);
  v74 = v72 <= v71;
  if (v72 > v71)
    v75 = v64;
  else
    v75 = v66;
  if (v74)
    v76 = v58;
  else
    v76 = v61;
  v77 = v74;
  if (v73)
    v78 = v65;
  else
    v78 = v75;
  if (v73)
    v79 = v57;
  else
    v79 = v76;
  if (v73)
    v80 = 0;
  else
    v80 = v77;
  v81 = (char *)malloc_type_malloc(size, 0xDC00527BuLL);
  v82 = (int *)malloc_type_malloc(0x2000uLL, 0x100004052888210uLL);
  v83 = malloc_type_malloc(0x2000uLL, 0x100004052888210uLL);
  v84 = malloc_type_malloc(0x2000uLL, 0x100004052888210uLL);
  v85 = v83;
  v86 = v84;
  v327 = v9;
  v332 = v85;
  v326 = v15;
  if (v81 && v82 && v85 && v84)
  {
    v329 = v81;
    bzero(v82, 0x2000uLL);
    bzero(v86, 0x2000uLL);
    v87 = 0;
    if (v59 <= 1)
      v88 = 1;
    else
      v88 = v59;
    v349 = v88;
    v89 = 4 * v88;
    do
    {
      v90 = *(_DWORD *)(v67 + v87);
      DWORD2(v354) = 0;
      *(_QWORD *)&v354 = 0;
      (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v354, (v90 >> 2), v90 & 3);
      v91 = (float *)&v354 + 1;
      if (!v73)
        v91 = (float *)&v354 + 2;
      v67 = (uint64_t)v336;
      if (v80)
        v91 = (float *)&v354;
      v92 = sub_1DCB106BC(v78, v79, *v91);
      ++v82[v92];
      v87 += 4;
    }
    while (v89 != v87);
    v93 = 0;
    v94 = 0;
    *v332 = 0;
    do
    {
      v94 += v82[v93];
      v332[++v93] = v94;
    }
    while (v93 != 2047);
    v330 = v82;
    for (i = 0; i != v349; ++i)
    {
      v96 = v336[i];
      DWORD2(v354) = 0;
      *(_QWORD *)&v354 = 0;
      (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v354, (v96 >> 2), v96 & 3);
      v97 = (float *)&v354 + 1;
      if (!v73)
        v97 = (float *)&v354 + 2;
      if (v80)
        v97 = (float *)&v354;
      v98 = sub_1DCB106BC(v78, v79, *v97);
      *(_DWORD *)&v81[4 * v332[v98] + 4 * (*((_DWORD *)v86 + v98))++] = i;
    }
    free(v86);
    v99 = v82;
    v100 = *v82;
    for (j = 1; j != 2048; ++j)
    {
      if (v100 <= v82[j])
        v100 = v82[j];
    }
    v102 = (char *)malloc_type_malloc(16 * v100, 0x1000040451B5BE8uLL);
    v103 = 0;
    do
    {
      v334 = v103;
      v104 = v99[v103];
      if ((int)v104 >= 2)
      {
        v105 = &v329[4 * v332[v103]];
        if (v102)
        {
          v106 = 0;
          do
          {
            v107 = *(int *)v105;
            v105 += 4;
            v108 = *(_DWORD *)(v67 + 4 * v107);
            DWORD2(v354) = 0;
            *(_QWORD *)&v354 = 0;
            (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v354, (v108 >> 2), v108 & 3);
            v109 = DWORD2(v354);
            v110 = &v102[v106];
            *(_QWORD *)v110 = v354;
            *((_DWORD *)v110 + 2) = v109;
            *((_DWORD *)v110 + 3) = v107;
            v106 += 16;
          }
          while (16 * v104 != v106);
          sub_1DCB106E8(v67, (uint64_t)v102, a1, 0, (v104 - 1));
        }
        else
        {
          for (k = 0; k != v104; ++k)
          {
            v112 = *(int *)&v105[4 * k];
            v113 = *(_DWORD *)(v67 + 4 * v112);
            DWORD2(v354) = 0;
            *(_QWORD *)&v354 = 0;
            v114 = v113 & 3;
            v115 = (v113 >> 2);
            (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v354, v115, v114);
            v116 = v354;
            v350 = *((float *)&v354 + 2);
            DWORD2(v354) = 0;
            *(_QWORD *)&v354 = 0;
            (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, &v354, v115, v114);
            v346 = *(float *)&v354;
            v341 = *((float *)&v354 + 2);
            sizea = *((float *)&v354 + 1);
            *(_QWORD *)&v354 = 0;
            v117 = v115;
            v67 = (uint64_t)v336;
            (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v354, v117, v114);
            if (k)
            {
              v118 = 0;
              v337 = *((float *)&v354 + 1);
              v339 = *(float *)&v354;
              while (1)
              {
                v119 = *(int *)&v105[4 * v118];
                v120 = *(_DWORD *)(v67 + 4 * v119);
                DWORD2(v354) = 0;
                *(_QWORD *)&v354 = 0;
                v121 = v120 & 3;
                v122 = (v120 >> 2);
                (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v354, v122, v121);
                v123 = v354;
                v124 = *((float *)&v354 + 2);
                DWORD2(v354) = 0;
                *(_QWORD *)&v354 = 0;
                (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, &v354, v122, v121);
                v125 = v354;
                v126 = *((float *)&v354 + 2);
                *(_QWORD *)&v354 = 0;
                (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v354, v122, v121);
                if (*(float *)&v116 == *(float *)&v123
                  && *((float *)&v116 + 1) == *((float *)&v123 + 1)
                  && v350 == v124
                  && v346 == *(float *)&v125
                  && sizea == *((float *)&v125 + 1)
                  && v341 == v126
                  && v339 == *(float *)&v354
                  && v337 == *((float *)&v354 + 1))
                {
                  break;
                }
                ++v118;
                v67 = (uint64_t)v336;
                if (k == v118)
                  goto LABEL_124;
              }
              v67 = (uint64_t)v336;
              v336[v112] = v336[v119];
            }
LABEL_124:
            ;
          }
        }
      }
      v103 = v334 + 1;
      v99 = v330;
    }
    while (v334 != 2047);
    if (v102)
      free(v102);
    free(v329);
    free(v330);
    free(v332);
  }
  else
  {
    if (v81)
    {
      free(v81);
      v85 = v332;
    }
    if (v82)
    {
      free(v82);
      v85 = v332;
    }
    if (v85)
      free(v85);
    if (v86)
      free(v86);
    v127 = 0;
    v128 = 1;
    do
    {
      v129 = 0;
      v335 = v127;
      v130 = 3 * v127;
      do
      {
        v131 = *(_DWORD *)(v67 + 4 * (v129 + v130));
        DWORD2(v354) = 0;
        *(_QWORD *)&v354 = 0;
        v132 = v131 & 3;
        v133 = (v131 >> 2);
        (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v354, v133, v132);
        v134 = v354;
        v351 = *((float *)&v354 + 2);
        DWORD2(v354) = 0;
        *(_QWORD *)&v354 = 0;
        (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, &v354, v133, v132);
        v347 = *(float *)&v354;
        v342 = *((float *)&v354 + 2);
        sizeb = *((float *)&v354 + 1);
        *(_QWORD *)&v354 = 0;
        (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v354, v133, v132);
        v135 = 0;
        v338 = *((float *)&v354 + 1);
        v340 = *(float *)&v354;
        v136 = v67;
LABEL_140:
        v137 = 0;
        while (1)
        {
          v138 = *(_DWORD *)(v136 + v137);
          DWORD2(v354) = 0;
          *(_QWORD *)&v354 = 0;
          v139 = v138 & 3;
          v140 = (v138 >> 2);
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v354, v140, v139);
          v141 = v354;
          v142 = *((float *)&v354 + 2);
          DWORD2(v354) = 0;
          *(_QWORD *)&v354 = 0;
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, &v354, v140, v139);
          v143 = v354;
          v144 = *((float *)&v354 + 2);
          *(_QWORD *)&v354 = 0;
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v354, v140, v139);
          if (*(float *)&v134 == *(float *)&v141
            && *((float *)&v134 + 1) == *((float *)&v141 + 1)
            && v351 == v142
            && v347 == *(float *)&v143
            && sizeb == *((float *)&v143 + 1)
            && v342 == v144
            && v340 == *(float *)&v354
            && v338 == *((float *)&v354 + 1))
          {
            break;
          }
          v137 += 4;
          if (v137 == 12)
          {
            ++v135;
            v136 += 12;
            if (v135 != v128)
              goto LABEL_140;
            break;
          }
        }
        v67 = (uint64_t)v336;
        v336[v129 + v130] = -1;
        ++v129;
      }
      while (v129 != 3);
      v127 = v335 + 1;
      ++v128;
    }
    while (v335 + 1 != v331);
  }
  v145 = 0;
  v146 = 0;
  v147 = 76;
  v148 = v333;
  do
  {
    v149 = v336[v145];
    v150 = v336[v145 + 1];
    v151 = v336[v145 + 2];
    DWORD2(v354) = 0;
    *(_QWORD *)&v354 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v354, (v149 >> 2), v149 & 3);
    v152 = v354;
    v153 = *((float *)&v354 + 2);
    DWORD2(v354) = 0;
    *(_QWORD *)&v354 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v354, (v150 >> 2), v150 & 3);
    v154 = v354;
    v155 = *((float *)&v354 + 2);
    DWORD2(v354) = 0;
    *(_QWORD *)&v354 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v354, (v151 >> 2), v151 & 3);
    if (*(float *)&v152 == *(float *)&v154 && *((float *)&v152 + 1) == *((float *)&v154 + 1) && v153 == v155
      || *(float *)&v152 == *(float *)&v354
      && *((float *)&v152 + 1) == *((float *)&v354 + 1)
      && v153 == *((float *)&v354 + 2)
      || *(float *)&v154 == *(float *)&v354
      && *((float *)&v154 + 1) == *((float *)&v354 + 1)
      && v155 == *((float *)&v354 + 2))
    {
      *(_DWORD *)&v333[v147] |= 1u;
      ++v146;
    }
    v145 += 3;
    v147 += 88;
  }
  while (3 * v331 != v145);
  v156 = (v328 - v146);
  if (v328 > 1)
  {
    v157 = 0;
    do
    {
      v158 = v157;
      v159 = v157 + 1;
      if (*(_DWORD *)&v333[88 * v157 + 72] == *(_DWORD *)&v333[88 * v157 + 160])
      {
        v160 = &v333[88 * v157];
        v163 = *((_DWORD *)v160 + 19);
        v161 = (int *)(v160 + 76);
        v162 = v163;
        v164 = &v333[88 * v159];
        v167 = *((_DWORD *)v164 + 19);
        v165 = (int *)(v164 + 76);
        v166 = v167;
        if (((v167 ^ v162) & 1) != 0)
        {
          *v161 = v162 | 2;
          *v165 = v166 | 2;
        }
        LODWORD(v159) = v158 + 2;
      }
      v157 = v159;
    }
    while ((int)v159 < v325);
  }
  if ((int)v156 >= 1)
  {
    v168 = 0;
    v169 = 0;
    v170 = 1;
    while (1)
    {
      v171 = &v333[88 * v169];
      if ((v171[76] & 1) != 0)
      {
        if (v170 >= v328)
          goto LABEL_187;
        v173 = (char *)&v336[v168];
        do
        {
          v174 = *(_DWORD *)&v333[88 * v170 + 76] & 1;
          v170 += v174;
        }
        while (v174 && v170 < v328);
        if (v174)
        {
LABEL_187:
          v183 = v333 + 76;
          v184 = (v328 - v146);
          do
          {
            *(_QWORD *)(v183 - 19) = -1;
            *(v183 - 17) = -1;
            *(_QWORD *)(v183 - 15) = 0;
            *(_QWORD *)(v183 - 11) = 0;
            *(_QWORD *)(v183 - 13) = 0;
            *v183 |= 4u;
            *(_OWORD *)(v183 - 9) = 0uLL;
            *(_OWORD *)(v183 - 5) = 0uLL;
            v183 += 22;
            --v184;
          }
          while (v184);
          v185 = v333 + 40;
          v186 = v336 + 2;
          v187 = v156;
          do
          {
            v188 = *(v186 - 2);
            DWORD2(v354) = 0;
            *(_QWORD *)&v354 = 0;
            (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v354, (v188 >> 2), v188 & 3);
            v189 = *((float *)&v354 + 2);
            v190 = (float32x2_t)v354;
            v191 = *(v186 - 1);
            DWORD2(v354) = 0;
            *(_QWORD *)&v354 = 0;
            (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v354, (v191 >> 2), v191 & 3);
            v352 = (float32x2_t)v354;
            v348 = *((float *)&v354 + 2);
            v192 = *v186;
            DWORD2(v354) = 0;
            *(_QWORD *)&v354 = 0;
            (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v354, (v192 >> 2), v192 & 3);
            v193 = (float32x2_t)v354;
            v194 = *((float *)&v354 + 2);
            v195 = *(v186 - 2);
            *(_QWORD *)&v354 = 0;
            (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v354, (v195 >> 2), v195 & 3);
            v196 = v354;
            v197 = *(v186 - 1);
            *(_QWORD *)&v354 = 0;
            (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v354, (v197 >> 2), v197 & 3);
            v198 = v354;
            v199 = *v186;
            *(_QWORD *)&v354 = 0;
            (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v354, (v199 >> 2), v199 & 3);
            v200 = *(float *)&v198 - *(float *)&v196;
            v201 = *((float *)&v198 + 1) - *((float *)&v196 + 1);
            v202 = *(float *)&v354 - *(float *)&v196;
            v203 = *((float *)&v354 + 1) - *((float *)&v196 + 1);
            v204 = -(float)((float)((float)(*(float *)&v354 - *(float *)&v196)
                                  * (float)(*((float *)&v198 + 1) - *((float *)&v196 + 1)))
                          - (float)((float)(*((float *)&v354 + 1) - *((float *)&v196 + 1))
                                  * (float)(*(float *)&v198 - *(float *)&v196)));
            v205 = *((_DWORD *)v185 + 9) | (8 * (v204 > 0.0));
            *((_DWORD *)v185 + 9) = v205;
            v206 = fabsf(v204);
            if (v206 > 1.1755e-38)
            {
              v207 = vsub_f32(v352, v190);
              v208 = vsub_f32(v193, v190);
              v209 = vmla_n_f32(vneg_f32(vmul_n_f32(v208, v201)), v207, v203);
              v210 = -(float)((float)(v201 * (float)(v194 - v189)) - (float)(v203 * (float)(v348 - v189)));
              v211 = sqrtf(vaddv_f32(vmul_f32(v209, v209)) + (float)(v210 * v210));
              v212 = 1.0;
              if ((v205 & 8) == 0)
                v212 = -1.0;
              if (fabsf(v211) > 1.1755e-38)
              {
                *(float32x2_t *)v185 = vmul_n_f32(v209, v212 / v211);
                *((float *)v185 + 2) = (float)(v212 / v211) * v210;
              }
              v213 = vmla_n_f32(vneg_f32(vmul_n_f32(v207, v202)), v208, v200);
              v214 = -(float)((float)(v202 * (float)(v348 - v189)) - (float)(v200 * (float)(v194 - v189)));
              v215 = sqrtf(vaddv_f32(vmul_f32(v213, v213)) + (float)(v214 * v214));
              if (fabsf(v215) > 1.1755e-38)
              {
                *(float32x2_t *)(v185 + 12) = vmul_n_f32(v213, v212 / v215);
                *((float *)v185 + 5) = (float)(v212 / v215) * v214;
              }
              v216 = v211 / v206;
              v217 = v215 / v206;
              *((float *)v185 + 6) = v216;
              *((float *)v185 + 7) = v217;
              v218 = fabsf(v217);
              if (fabsf(v216) > 1.1755e-38 && v218 > 1.1755e-38)
                *((_DWORD *)v185 + 9) = v205 & 0xFFFFFFFB;
            }
            v186 += 3;
            v185 += 88;
            --v187;
          }
          while (v187);
          v148 = v333;
          v9 = v327;
          if ((int)v156 >= 2)
          {
            v220 = 0;
            do
            {
              v221 = v220;
              v222 = v220 + 1;
              if (*(_DWORD *)&v333[88 * v220 + 72] == *(_DWORD *)&v333[88 * v220 + 160])
              {
                v223 = *(_DWORD *)&v333[88 * v220 + 76];
                v224 = *(_DWORD *)&v333[88 * v222 + 76];
                if (((v223 | v224) & 1) == 0 && ((v224 ^ v223) & 8) != 0)
                {
                  if ((v224 & 4) != 0
                    || (sub_1DCB10BB0(a1, &v336[3 * (_DWORD)v221]),
                        v226 = v225,
                        sub_1DCB10BB0(a1, &v336[3 * (_DWORD)v222]),
                        v226 >= v227))
                  {
                    v228 = v221;
                  }
                  else
                  {
                    v228 = v221 + 1;
                    v222 = v221;
                  }
                  v229 = &v333[88 * v222];
                  v230 = *((_DWORD *)v229 + 19) & 0xFFFFFFF7;
                  *((_DWORD *)v229 + 19) = v230;
                  *((_DWORD *)v229 + 19) = *(_DWORD *)&v333[88 * v228 + 76] & 8 | v230;
                }
                LODWORD(v222) = v221 + 2;
              }
              v220 = v222;
            }
            while ((int)v222 < (int)v156 - 1);
          }
          break;
        }
        v175 = 0;
        v172 = v170 + 1;
        v176 = (char *)&v336[3 * v170];
        do
        {
          v177 = *(_DWORD *)&v173[v175];
          *(_DWORD *)&v173[v175] = *(_DWORD *)&v176[v175];
          *(_DWORD *)&v176[v175] = v177;
          v175 += 4;
        }
        while (v175 != 12);
        v356 = *((_OWORD *)v171 + 2);
        v357 = *((_OWORD *)v171 + 3);
        v358 = *((_OWORD *)v171 + 4);
        v359 = *((_QWORD *)v171 + 10);
        v354 = *(_OWORD *)v171;
        v355 = *((_OWORD *)v171 + 1);
        v178 = &v333[88 * v170];
        v179 = *((_OWORD *)v178 + 1);
        *(_OWORD *)v171 = *(_OWORD *)v178;
        *((_OWORD *)v171 + 1) = v179;
        v181 = *((_OWORD *)v178 + 3);
        v180 = *((_OWORD *)v178 + 4);
        v182 = *((_OWORD *)v178 + 2);
        *((_QWORD *)v171 + 10) = *((_QWORD *)v178 + 10);
        *((_OWORD *)v171 + 3) = v181;
        *((_OWORD *)v171 + 4) = v180;
        *((_OWORD *)v171 + 2) = v182;
        *(_OWORD *)v178 = v354;
        *((_QWORD *)v178 + 10) = v359;
        *((_OWORD *)v178 + 4) = v358;
        *((_OWORD *)v178 + 3) = v357;
        *((_OWORD *)v178 + 2) = v356;
        *((_OWORD *)v178 + 1) = v355;
      }
      else if (v170 <= (int)v169 + 2)
      {
        v172 = v169 + 2;
      }
      else
      {
        v172 = v170;
      }
      ++v169;
      v168 += 3;
      v170 = v172;
      if (v169 == v156)
        goto LABEL_187;
    }
  }
  v231 = (int)v156;
  v232 = (char *)malloc_type_malloc(36 * (int)v156, 0x1954683BuLL);
  if (v232)
  {
    v233 = v232;
    v234 = v326;
    if ((int)v156 <= 0)
    {
      sub_1DCB10CA4((uint64_t)v232, 0, (3 * v156 - 1), 0, 0x26065CAu);
    }
    else
    {
      v235 = 0;
      v236 = v232 + 8;
      v237 = v336;
      do
      {
        v238 = 0;
        v239 = v236;
        do
        {
          v240 = v237[v238];
          if (v238 == 2)
            v241 = 0;
          else
            v241 = v238 + 1;
          v242 = v238 + 1;
          v243 = v336[3 * v235 + v241];
          if (v240 >= v243)
            v244 = v336[3 * v235 + v241];
          else
            v244 = v240;
          if (v240 > v243)
            v243 = v240;
          *(v239 - 2) = v244;
          *(v239 - 1) = v243;
          *v239 = v235;
          v239 += 3;
          v238 = v242;
        }
        while (v242 != 3);
        ++v235;
        v237 += 3;
        v236 += 9;
      }
      while (v235 != v156);
      v245 = 3 * v156;
      sub_1DCB10CA4((uint64_t)v232, 0, (3 * v156 - 1), 0, 0x26065CAu);
      v246 = 0;
      if (3 * (int)v156 <= 2)
        v247 = 2;
      else
        v247 = v245;
      v248 = 1;
      v249 = 3;
      do
      {
        if (v233[3 * v246] != v233[v249])
        {
          sub_1DCB10CA4((uint64_t)v233, v246, (v248 - 1), 1, 0x26065CAu);
          v246 = v248;
        }
        v249 += 3;
        ++v248;
      }
      while (v247 + 2 * v247 != v249);
      v250 = 0;
      v251 = 0;
      v252 = v247 - 1;
      v253 = v233 + 4;
      do
      {
        v254 = &v233[3 * v251];
        if (*v254 != *(v253 - 1) || v254[1] != *v253)
        {
          sub_1DCB10CA4((uint64_t)v233, v251, v250, 2, 0x26065CAu);
          v251 = v250 + 1;
        }
        ++v250;
        v253 += 3;
      }
      while (v252 != v250);
      v255 = 0;
      if (v245 <= 1)
        v256 = 1;
      else
        v256 = v245;
      v234 = v326;
      v231 = (int)v156;
      do
      {
        v257 = &v233[3 * v255];
        v258 = *v257;
        v259 = v257[1];
        v260 = v257[2];
        v261 = &v336[3 * v260];
        v262 = *v261;
        v263 = v261 + 1;
        v264 = v261[1];
        if (*v261 == v258 || v262 == v259)
        {
          if (v264 == v258 || v264 == v259)
          {
            v267 = 0;
          }
          else
          {
            v262 = v261[2];
            v267 = 2;
            v263 = &v336[3 * v260];
          }
        }
        else
        {
          v263 = v261 + 2;
          v262 = v261[1];
          v267 = 1;
        }
        v268 = &v333[88 * v260];
        ++v255;
        if (*(_DWORD *)&v268[4 * v267] == -1 && v255 < v245)
        {
          v270 = &v233[3 * (int)v255];
          if (v258 == *v270 && v259 == v270[1])
          {
            v271 = *v263;
            v272 = (int)v255;
            v273 = v255;
            do
            {
              v274 = v233[3 * v272 + 2];
              v275 = &v336[3 * v274];
              v276 = *v275;
              v277 = v275 + 1;
              v278 = v275[1];
              if (*v275 == v258 || v276 == v259)
              {
                if (v278 == v258 || v278 == v259)
                {
                  v281 = 0;
                }
                else
                {
                  v276 = v275[2];
                  v281 = 2;
                  v277 = &v336[3 * v274];
                }
              }
              else
              {
                v277 = v275 + 2;
                v281 = 1;
                v276 = v275[1];
              }
              if (v262 == *v277
                && ((v282 = *(_DWORD *)&v333[88 * v274 + 4 * v281], v271 == v276) ? (v283 = v282 == -1) : (v283 = 0),
                    v283))
              {
                v285 = 0;
                v284 = 1;
              }
              else
              {
                v284 = 0;
                ++v273;
                v285 = 1;
              }
              v286 = &v233[3 * v273];
              if (v273 >= v245 || v258 != *v286)
                break;
              v272 = v273;
              v287 = v285 ^ 1;
              if (v259 != v286[1])
                v287 = 1;
            }
            while ((v287 & 1) == 0);
            if (v284)
            {
              v288 = v286[2];
              *(_DWORD *)&v268[4 * v267] = v288;
              *(_DWORD *)&v333[88 * v288 + 4 * v281] = v260;
            }
          }
        }
      }
      while (v255 != v256);
    }
    free(v233);
  }
  else
  {
    v234 = v326;
    if ((int)v156 >= 1)
    {
      for (m = 0; m != v156; ++m)
      {
        v290 = 0;
        v291 = &v148[88 * m];
        v292 = (3 * m);
        do
        {
          if (*(_DWORD *)&v291[4 * v290] == -1)
          {
            v294 = 0;
            v295 = 0;
            v293 = v290 + 1;
            if (v290 >= 2)
              v296 = 0;
            else
              v296 = v290 + 1;
            v297 = v336[(v296 + v292)];
            v298 = v148;
            while (m == v295)
            {
LABEL_308:
              ++v295;
              v298 += 88;
              v294 += 3;
              if (v295 == v156)
                goto LABEL_311;
            }
            v299 = 0;
            while (1)
            {
              v300 = v299 + 1;
              v301 = v299 >= 2 ? 0 : v299 + 1;
              if (v336[v290 + v292] == v336[(v301 + 3 * v295)] && v297 == v336[v294 + v299])
                break;
              ++v299;
              if (v300 == 3)
                goto LABEL_308;
            }
            *(_DWORD *)&v291[4 * v290] = v295;
            *(_DWORD *)&v298[4 * v299] = m;
          }
          else
          {
            v293 = v290 + 1;
          }
LABEL_311:
          v290 = v293;
        }
        while (v293 != 3);
      }
    }
  }
  v302 = malloc_type_malloc(72 * (_DWORD)v156, 0x101004035137979uLL);
  v303 = malloc_type_malloc(12 * v231, 0x21F0CDC0uLL);
  v304 = v303;
  if (v302)
    v305 = v303 == 0;
  else
    v305 = 1;
  if (v305)
  {
    if (v302)
      free(v302);
    if (v304)
      free(v304);
    free(v336);
    v54 = v333;
    goto LABEL_347;
  }
  v306 = sub_1DCB0F548((uint64_t)v333, (uint64_t)v302, (uint64_t)v303, (uint64_t)v336, v156);
  v307 = malloc_type_malloc(40 * v234, 0x10000400A747E1EuLL);
  if (!v307)
  {
    free(v336);
    free(v333);
    free(v302);
    v54 = v304;
    goto LABEL_347;
  }
  v308 = (uint64_t)v307;
  bzero(v307, 40 * v234);
  if (v234 >= 1)
  {
    v309 = v234;
    v310 = (_OWORD *)(v308 + 16);
    do
    {
      *(v310 - 1) = xmmword_1DCC58330;
      *v310 = xmmword_1DCC58340;
      v310 = (_OWORD *)((char *)v310 + 40);
      --v309;
    }
    while (v309);
  }
  v311 = sub_1DCB0F6C8(v308, (uint64_t)v333, (int *)v302, v306, (uint64_t)v336, a1, v9);
  free(v302);
  free(v304);
  if (!v311)
  {
    free(v333);
    free(v336);
    v54 = (void *)v308;
    goto LABEL_347;
  }
  v312 = (void *)v308;
  sub_1DCB10410(v308, (uint64_t)v333, (uint64_t)v336, a1, v156, v328);
  free(v333);
  free(v336);
  v313 = 0;
  v314 = 0;
  do
  {
    v315 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, v314);
    if ((v315 - 3) <= 1)
    {
      v317 = v315;
      v318 = 0;
      v319 = (uint64_t)v312 + 40 * v313 + 20;
      do
      {
        *(_QWORD *)&v354 = *(_QWORD *)(v319 - 20);
        DWORD2(v354) = *(_DWORD *)(v319 - 12);
        v353[0] = *(_DWORD *)(v319 - 4);
        v353[1] = *(_DWORD *)v319;
        v353[2] = *(_DWORD *)(v319 + 4);
        v320 = *(_QWORD *)a1;
        v321 = *(void (**)(uint64_t, __int128 *, _DWORD *, _QWORD, uint64_t, uint64_t, float, float))(*(_QWORD *)a1 + 48);
        if (v321)
        {
          v321(a1, &v354, v353, *(unsigned int *)(v319 + 16), v314, v318, *(float *)(v319 - 8), *(float *)(v319 + 8));
          v320 = *(_QWORD *)a1;
        }
        v322 = *(void (**)(uint64_t, __int128 *, uint64_t, uint64_t, __n128))(v320 + 40);
        if (v322)
        {
          if (*(_DWORD *)(v319 + 16) == 1)
            v316.n128_f32[0] = 1.0;
          else
            v316.n128_f32[0] = -1.0;
          v322(a1, &v354, v314, v318, v316);
        }
        v318 = (v318 + 1);
        v319 += 40;
      }
      while (v317 != (_DWORD)v318);
      v313 += v318;
    }
    v314 = (v314 + 1);
  }
  while ((_DWORD)v314 != v324);
  free(v312);
  return 1;
}

uint64_t sub_1DCB0F548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v22;
  unsigned int v23;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a5 < 1)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = a1;
  v22 = a5;
  v28 = a1;
  do
  {
    v10 = 0;
    v23 = v5;
    v26 = a1 + 88 * v6;
    v27 = a4 + 4 * v5;
    v11 = (unsigned int *)(v26 + 76);
    v12 = 0xFFFFFFFF00000000;
    do
    {
      v13 = *v11;
      if ((*v11 & 4) == 0)
      {
        v14 = v9 + 8 * v10;
        if (!*(_QWORD *)(v14 + 16))
        {
          v15 = *(_DWORD *)(v27 + 4 * v10);
          v16 = a2 + 24 * (int)v7;
          *(_QWORD *)(v14 + 16) = v16;
          *(_DWORD *)(v16 + 16) = v15;
          *(_DWORD *)(v16 + 20) = (v13 >> 3) & 1;
          *(_DWORD *)v16 = 0;
          *(_QWORD *)(v16 + 8) = a3 + 4 * v8;
          v17 = *(_QWORD *)(v14 + 16);
          *(_DWORD *)(*(_QWORD *)(v17 + 8) + 4 * (int)(*(_DWORD *)v17)++) = v6;
          v18 = *(_DWORD *)(v9 + 4 * v10);
          v19 = v12 >> 32;
          if (!v10)
            v19 = 2;
          v20 = *(_DWORD *)(v26 + 4 * v19);
          if ((v18 & 0x80000000) == 0)
          {
            sub_1DCB10E44(a4, v28, v18, v17);
            v17 = *(_QWORD *)(v14 + 16);
          }
          if ((v20 & 0x80000000) == 0)
          {
            sub_1DCB10E44(a4, v28, v20, v17);
            v17 = *(_QWORD *)(v14 + 16);
          }
          v7 = (v7 + 1);
          v8 += *(_DWORD *)v17;
        }
      }
      ++v10;
      v12 += 0x100000000;
    }
    while (v10 != 3);
    ++v6;
    v5 = v23 + 3;
    v9 += 88;
    a1 = v28;
  }
  while (v6 != v22);
  return v7;
}

uint64_t sub_1DCB0F6C8(uint64_t a1, uint64_t a2, int *a3, int a4, uint64_t a5, uint64_t a6, float a7)
{
  unsigned int v9;
  uint64_t v10;
  int *v11;
  unsigned int v12;
  int v13;
  char *v14;
  void **v15;
  int *v16;
  int *v17;
  BOOL v18;
  void *v20;
  uint64_t v21;
  float v22;
  int *v23;
  uint64_t v24;
  int v25;
  int *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  float v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  BOOL v56;
  float v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v88;
  float v89;
  BOOL v90;
  unsigned int v91;
  unsigned int i;
  BOOL v93;
  size_t v94;
  void *v95;
  void **v96;
  __int128 v97;
  __int128 v98;
  int v99;
  float v100;
  uint64_t v101;
  int *v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BOOL4 v113;
  int v114;
  _BOOL4 v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  float v119;
  float *v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  BOOL v143;
  float v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  BOOL v179;
  float v180;
  float v181;
  float v182;
  BOOL v184;
  float v185;
  float *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  unsigned int v190;
  uint64_t v191;
  float v192;
  float *v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  BOOL v201;
  float32x2_t *v203;
  float32x2_t *v204;
  float32x2_t v205;
  int8x8_t v206;
  float v207;
  __int128 v208;
  __int128 v209;
  int v210;
  uint64_t v211;
  float v212;
  float v213;
  float v216;
  float32x2_t *v217;
  float32x2_t *v218;
  float32x2_t v219;
  int8x8_t v220;
  float v221;
  uint64_t v222;
  void **v223;
  void *v224;
  uint64_t v226;
  void **v227;
  void *v228;
  void **v229;
  uint64_t v230;
  uint64_t v232;
  int *v233;
  void **v234;
  uint64_t v235;
  char *v236;
  _DWORD *v237;
  int *v238;
  uint64_t *v239;
  int v240;
  uint64_t v241;
  int v242;
  int v243;
  unsigned int v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  int *v253;
  __int128 v254;
  float v255;
  float v256;
  float v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v262;
  float v263;
  uint64_t v264;

  v264 = *MEMORY[0x1E0C80C00];
  if (a4 < 1)
    return 1;
  v9 = 0;
  v10 = a4;
  v230 = a4;
  v11 = a3;
  do
  {
    v13 = *v11;
    v11 += 6;
    v12 = v13;
    if ((int)v9 <= v13)
      v9 = v12;
    --v10;
  }
  while (v10);
  if (!v9)
    return 1;
  v14 = (char *)malloc_type_malloc(40 * v9, 0x10000400A747E1EuLL);
  v15 = (void **)malloc_type_malloc(16 * v9, 0x101004082113244uLL);
  v16 = (int *)malloc_type_malloc(4 * v9, 0x100004052888210uLL);
  v17 = v16;
  if (v14)
    v18 = v15 == 0;
  else
    v18 = 1;
  if (!v18 && v16 != 0)
  {
    v21 = 0;
    v229 = v15 + 1;
    v22 = 1.0;
    v259 = a2;
    v235 = a1;
    v236 = v14;
    v234 = v15;
    while (1)
    {
      v232 = v21;
      v23 = &a3[6 * v21];
      if (*v23 < 1)
        goto LABEL_199;
      v24 = 0;
      v25 = 0;
      v26 = &a3[6 * v21];
      v238 = v26;
      v239 = (uint64_t *)(v26 + 2);
      v233 = v26 + 4;
      v237 = v26 + 5;
      do
      {
        v245 = v25;
        v27 = *(_DWORD *)(*v239 + 4 * v24);
        v241 = v24;
        if (*(int **)(a2 + 88 * v27 + 16) == v23)
        {
          v29 = 0;
          v28 = a5;
        }
        else
        {
          v28 = a5;
          if (*(int **)(a2 + 88 * v27 + 24) == v23)
          {
            v29 = 1;
          }
          else if (*(int **)(a2 + 88 * v27 + 32) == v23)
          {
            v29 = 2;
          }
          else
          {
            v29 = -1;
          }
        }
        v240 = v29;
        v30 = *(_DWORD *)(v28 + 4 * (v29 + 3 * v27));
        v263 = 0.0;
        v262 = 0;
        v242 = v27;
        (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)a6 + 24))(a6, &v262, (v30 >> 2), v30 & 3);
        v31 = v262;
        v32 = v263;
        v33 = (float *)(a2 + 88 * v242);
        v34 = v33[10];
        v35 = v33[11];
        v36 = v33[12];
        v37 = (float)((float)(v34 * *(float *)&v262) + (float)(v35 * *((float *)&v262 + 1))) + (float)(v36 * v263);
        v38 = v34 - (float)(v37 * *(float *)&v262);
        v39 = v35 - (float)(v37 * *((float *)&v262 + 1));
        v40 = v36 - (float)(v37 * v263);
        v41 = fabsf(v39);
        v42 = fabsf(v40);
        if (fabsf(v38) > 1.1755e-38 || v41 > 1.1755e-38 || v42 > 1.1755e-38)
        {
          v45 = v22 / sqrtf((float)((float)(v39 * v39) + (float)(v38 * v38)) + (float)(v40 * v40));
          v38 = v45 * v38;
          v39 = v45 * v39;
          v40 = v45 * v40;
        }
        v46 = v33[13];
        v47 = v33[14];
        v48 = v33[15];
        v49 = (float)((float)(v46 * *(float *)&v262) + (float)(v47 * *((float *)&v262 + 1))) + (float)(v48 * v263);
        v50 = v46 - (float)(v49 * *(float *)&v262);
        v51 = v47 - (float)(v49 * *((float *)&v262 + 1));
        v52 = v48 - (float)(v49 * v263);
        v53 = fabsf(v51);
        v54 = fabsf(v52);
        v56 = fabsf(v50) <= 1.1755e-38 && v53 <= 1.1755e-38 && v54 <= 1.1755e-38;
        v25 = v245;
        if (!v56)
        {
          v57 = v22 / sqrtf((float)((float)(v51 * v51) + (float)(v50 * v50)) + (float)(v52 * v52));
          v50 = v57 * v50;
          v51 = v57 * v51;
          v52 = v57 * v52;
        }
        v58 = *v23;
        if (*v23 < 1)
        {
          v60 = 0;
        }
        else
        {
          v59 = 0;
          v60 = 0;
          v61 = *(_DWORD *)(a2 + 88 * v242 + 72);
          v62 = *v239;
          do
          {
            v63 = *(_DWORD *)(v62 + 4 * v59);
            v64 = a2 + 88 * v63;
            v65 = *(float *)(v64 + 40);
            v66 = *(float *)(v64 + 44);
            v67 = *(float *)(v64 + 48);
            v68 = (float)((float)(v65 * *(float *)&v31) + (float)(v66 * *((float *)&v31 + 1))) + (float)(v67 * v32);
            v69 = v65 - (float)(v68 * *(float *)&v31);
            v70 = v66 - (float)(v68 * *((float *)&v31 + 1));
            v71 = v67 - (float)(v68 * v32);
            v72 = fabsf(v70);
            v73 = fabsf(v71);
            if (fabsf(v69) > 1.1755e-38 || v72 > 1.1755e-38 || v73 > 1.1755e-38)
            {
              v76 = v22 / sqrtf((float)((float)(v70 * v70) + (float)(v69 * v69)) + (float)(v71 * v71));
              v69 = v76 * v69;
              v70 = v76 * v70;
              v71 = v76 * v71;
            }
            v77 = *(float *)(v64 + 52);
            v78 = *(float *)(v64 + 56);
            v79 = *(float *)(v64 + 60);
            v80 = (float)((float)(v77 * *(float *)&v31) + (float)(v78 * *((float *)&v31 + 1))) + (float)(v79 * v32);
            v81 = v77 - (float)(v80 * *(float *)&v31);
            v82 = v78 - (float)(v80 * *((float *)&v31 + 1));
            v83 = v79 - (float)(v80 * v32);
            v84 = fabsf(v82);
            v85 = fabsf(v83);
            if (fabsf(v81) > 1.1755e-38 || v84 > 1.1755e-38 || v85 > 1.1755e-38)
            {
              v88 = v22 / sqrtf((float)((float)(v82 * v82) + (float)(v81 * v81)) + (float)(v83 * v83));
              v81 = v88 * v81;
              v82 = v88 * v82;
              v83 = v88 * v83;
            }
            if (((*(_DWORD *)(a2 + 88 * v63 + 76) | *(_DWORD *)(a2 + 88 * v242 + 76)) & 4) != 0
              || v61 == *(_DWORD *)(v64 + 72)
              || ((v89 = (float)((float)(v81 * v50) + (float)(v82 * v51)) + (float)(v83 * v52),
                   (float)((float)((float)(v69 * v38) + (float)(v70 * v39)) + (float)(v71 * v40)) > a7)
                ? (v90 = v89 <= a7)
                : (v90 = 1),
                  !v90))
            {
              v17[v60] = v63;
              v58 = *v23;
              ++v60;
            }
            ++v59;
          }
          while (v59 < v58);
          if (v60 > 1)
          {
            sub_1DCB10F94((uint64_t)v17, 0, v60 - 1, 0x26065CAu);
            v25 = v245;
          }
        }
        if (v25 < 1)
        {
          v94 = 4 * v60;
          v95 = malloc_type_malloc(v94, 0x100004052888210uLL);
          if (!v95)
          {
LABEL_203:
            free(v15);
            free(v17);
            v20 = v14;
            goto LABEL_204;
          }
          v91 = 0;
LABEL_88:
          v96 = &v15[2 * (int)v245];
          *(_DWORD *)v96 = v60;
          v96[1] = v95;
          memcpy(v95, v17, v94);
          *(_QWORD *)&v98 = 0;
          if (v60 < 1)
          {
            v100 = 0.0;
            v103 = 0.0;
            v104 = 0.0;
            v105 = 0.0;
            v106 = 0.0;
            v107 = 0.0;
            LODWORD(v97) = 0;
            v109 = v245;
          }
          else
          {
            v99 = *v233;
            v100 = 0.0;
            v101 = v60;
            v102 = v17;
            v103 = 0.0;
            v104 = 0.0;
            v105 = 0.0;
            v106 = 0.0;
            v107 = 0.0;
            LODWORD(v97) = 0;
            v108 = a5;
            v109 = v245;
            v243 = *v233;
            do
            {
              v111 = *v102++;
              v110 = v111;
              if ((*(_BYTE *)(a2 + 88 * (int)v111 + 76) & 4) == 0)
              {
                v112 = 3 * (int)v110;
                v258 = v98;
                v257 = v100;
                v256 = v106;
                v255 = v107;
                v254 = v97;
                v253 = v102;
                if (*(_DWORD *)(v108 + 4 * v112) == v99)
                {
                  v113 = 0;
                  v114 = 0;
                  v115 = 1;
                }
                else if (*(_DWORD *)(v108 + 12 * v110 + 4) == v99)
                {
                  v115 = 1;
                  v113 = 1;
                  v114 = 1;
                }
                else
                {
                  v115 = *(_DWORD *)(v108 + 4 * v112 + 8) != v99;
                  v113 = *(_DWORD *)(v108 + 4 * v112 + 8) == v99;
                  if (*(_DWORD *)(v108 + 4 * v112 + 8) == v99)
                    v114 = 2;
                  else
                    v114 = -1;
                }
                v116 = v112 + v114;
                v117 = *(_DWORD *)(v108 + 4 * v116);
                v263 = 0.0;
                v262 = 0;
                (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)a6 + 24))(a6, &v262, (v117 >> 2), v117 & 3);
                v118 = v262;
                v119 = v263;
                v120 = (float *)(v259 + 88 * (int)v110);
                v121 = v120[10];
                v122 = v120[11];
                v123 = v120[12];
                v124 = (float)((float)(v121 * *(float *)&v262) + (float)(v122 * *((float *)&v262 + 1)))
                     + (float)(v123 * v263);
                v125 = v121 - (float)(v124 * *(float *)&v262);
                v126 = v122 - (float)(v124 * *((float *)&v262 + 1));
                v127 = v123 - (float)(v124 * v263);
                v128 = fabsf(v126);
                v129 = fabsf(v127);
                if (fabsf(v125) > 1.1755e-38 || v128 > 1.1755e-38 || v129 > 1.1755e-38)
                {
                  v132 = v22 / sqrtf((float)((float)(v126 * v126) + (float)(v125 * v125)) + (float)(v127 * v127));
                  v125 = v132 * v125;
                  v126 = v132 * v126;
                  v127 = v132 * v127;
                }
                v133 = v120[13];
                v134 = v120[14];
                v135 = v120[15];
                v136 = (float)((float)(v133 * *(float *)&v262) + (float)(v134 * *((float *)&v262 + 1)))
                     + (float)(v135 * v263);
                v137 = v133 - (float)(v136 * *(float *)&v262);
                v138 = v134 - (float)(v136 * *((float *)&v262 + 1));
                v139 = v135 - (float)(v136 * v263);
                v140 = fabsf(v138);
                v141 = fabsf(v139);
                v143 = fabsf(v137) <= 1.1755e-38 && v140 <= 1.1755e-38 && v141 <= 1.1755e-38;
                v251 = v126;
                v252 = v127;
                v250 = v125;
                if (v143)
                {
                  v247 = v133 - (float)(v136 * *(float *)&v262);
                  v248 = v138;
                }
                else
                {
                  v144 = v22 / sqrtf((float)((float)(v138 * v138) + (float)(v137 * v137)) + (float)(v139 * v139));
                  v247 = v144 * v137;
                  v248 = v144 * v138;
                  v139 = v144 * v139;
                }
                v249 = v139;
                if (v115)
                  v145 = v114 + 1;
                else
                  v145 = 0;
                v146 = *(_DWORD *)(a5 + 4 * (v145 + (int)v112));
                v147 = *(_DWORD *)(a5 + 4 * v116);
                v148 = v114 - 1;
                if (!v113)
                  v148 = 2;
                v149 = *(_DWORD *)(a5 + 4 * (v148 + (int)v112));
                v263 = 0.0;
                v262 = 0;
                v150 = a6;
                (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)a6 + 16))(a6, &v262, (v149 >> 2), v149 & 3);
                v151 = v262;
                v246 = v263;
                v263 = 0.0;
                v262 = 0;
                (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v150 + 16))(v150, &v262, (v147 >> 2), v147 & 3);
                v152 = v262;
                v153 = v263;
                v263 = 0.0;
                v262 = 0;
                (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v150 + 16))(v150, &v262, (v146 >> 2), v146 & 3);
                v154 = (float)((float)((float)(*(float *)&v151 - *(float *)&v152) * *(float *)&v118)
                             + (float)((float)(*((float *)&v151 + 1) - *((float *)&v152 + 1)) * *((float *)&v118 + 1)))
                     + (float)((float)(v246 - v153) * v119);
                v155 = (float)(*(float *)&v151 - *(float *)&v152) - (float)(v154 * *(float *)&v118);
                v156 = (float)(*((float *)&v151 + 1) - *((float *)&v152 + 1)) - (float)(v154 * *((float *)&v118 + 1));
                v157 = (float)(v246 - v153) - (float)(v154 * v119);
                v158 = fabsf(v156);
                v159 = fabsf(v157);
                if (fabsf(v155) <= 1.1755e-38 && v158 <= 1.1755e-38 && v159 <= 1.1755e-38)
                {
                  a2 = v259;
                  v22 = 1.0;
                }
                else
                {
                  v22 = 1.0;
                  v162 = 1.0 / sqrtf((float)((float)(v156 * v156) + (float)(v155 * v155)) + (float)(v157 * v157));
                  v155 = v162 * v155;
                  v156 = v162 * v156;
                  v157 = v162 * v157;
                  a2 = v259;
                }
                v99 = v243;
                v102 = v253;
                v163 = (float)((float)((float)(*(float *)&v262 - *(float *)&v152) * *(float *)&v118)
                             + (float)((float)(*((float *)&v262 + 1) - *((float *)&v152 + 1)) * *((float *)&v118 + 1)))
                     + (float)((float)(v263 - v153) * v119);
                v164 = (float)(*(float *)&v262 - *(float *)&v152) - (float)(v163 * *(float *)&v118);
                v165 = (float)(*((float *)&v262 + 1) - *((float *)&v152 + 1)) - (float)(v163 * *((float *)&v118 + 1));
                v166 = (float)(v263 - v153) - (float)(v163 * v119);
                v167 = fabsf(v165);
                v168 = fabsf(v166);
                if (fabsf(v164) > 1.1755e-38 || v167 > 1.1755e-38 || v168 > 1.1755e-38)
                {
                  v171 = v22 / sqrtf((float)((float)(v165 * v165) + (float)(v164 * v164)) + (float)(v166 * v166));
                  v164 = v171 * v164;
                  v165 = v171 * v165;
                  v166 = v171 * v166;
                }
                v172 = (float)((float)(v166 * v157) + (float)(v165 * v156)) + (float)(v164 * v155);
                v173 = -1.0;
                if (v172 >= -1.0)
                  v173 = v172;
                if (v172 <= v22)
                  v174 = v173;
                else
                  v174 = v22;
                v175 = acos(v174);
                v100 = v257 + (float)(v250 * v175);
                v103 = v103 + (float)(v251 * v175);
                v104 = v104 + (float)(v252 * v175);
                v105 = v105 + (float)(v247 * v175);
                v106 = v256 + (float)(v248 * v175);
                v107 = v255 + (float)(v249 * v175);
                *((_QWORD *)&v98 + 1) = *((_QWORD *)&v258 + 1);
                *(float32x2_t *)&v98 = vmla_n_f32(*(float32x2_t *)&v258, *(float32x2_t *)(a2 + 88 * (int)v110 + 64), v175);
                v97 = v254;
                *(float *)&v97 = *(float *)&v254 + v175;
                v108 = a5;
                v109 = v245;
              }
              --v101;
            }
            while (v101);
          }
          v176 = fabsf(v103);
          v177 = fabsf(v104);
          v179 = fabsf(v100) <= 1.1755e-38 && v176 <= 1.1755e-38 && v177 <= 1.1755e-38;
          v14 = v236;
          if (!v179)
          {
            v180 = v22 / sqrtf((float)((float)(v104 * v104) + (float)(v103 * v103)) + (float)(v100 * v100));
            v100 = v180 * v100;
            v103 = v180 * v103;
            v104 = v180 * v104;
          }
          v181 = fabsf(v106);
          v182 = fabsf(v107);
          v184 = fabsf(v105) <= 1.1755e-38 && v181 <= 1.1755e-38 && v182 <= 1.1755e-38;
          v15 = v234;
          a1 = v235;
          if (!v184)
          {
            v185 = v22 / sqrtf((float)((float)(v107 * v107) + (float)(v106 * v106)) + (float)(v105 * v105));
            v105 = v185 * v105;
            v106 = v185 * v106;
            v107 = v185 * v107;
          }
          if (*(float *)&v97 > 0.0)
            *(float32x2_t *)&v98 = vdiv_f32(*(float32x2_t *)&v98, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v97, 0));
          v186 = (float *)&v236[40 * v109];
          *v186 = v100;
          v186[1] = v103;
          v186[2] = v104;
          *((_DWORD *)v186 + 3) = v98;
          v186[4] = v105;
          v186[5] = v106;
          v186[6] = v107;
          v186[7] = *((float *)&v98 + 1);
          *((_QWORD *)v186 + 4) = 0;
          v25 = v109 + 1;
        }
        else
        {
          v91 = 0;
          while (1)
          {
            if (v60 == LODWORD(v15[2 * v91]))
            {
              if (v60 < 1)
                break;
              for (i = 0; (int)i < v60; i += v17[i] == *((_DWORD *)v15[2 * v91 + 1] + i))
              {
                v93 = v17[i] == *((_DWORD *)v15[2 * v91 + 1] + i);
                if (v17[i] != *((_DWORD *)v15[2 * v91 + 1] + i))
                  break;
              }
              if (v93)
                break;
            }
            if ((int)++v91 >= v25)
            {
              v94 = 4 * v60;
              v95 = malloc_type_malloc(v94, 0x100004052888210uLL);
              if (v95)
                goto LABEL_88;
              v226 = v245;
              v227 = v15 + 1;
              do
              {
                v228 = *v227;
                v227 += 2;
                free(v228);
                --v226;
              }
              while (v226);
              goto LABEL_203;
            }
          }
        }
        v187 = *(_DWORD *)(a2 + 88 * v242 + 80) + *(unsigned __int8 *)(a2 + 88 * v242 + v240 + 84);
        v188 = a1 + 40 * v187;
        v189 = &v14[40 * v91];
        if (*(_DWORD *)(v188 + 32) != 1)
        {
          v208 = *(_OWORD *)v189;
          v209 = *((_OWORD *)v189 + 1);
          *(_QWORD *)(v188 + 32) = *((_QWORD *)v189 + 4);
          *(_OWORD *)v188 = v208;
          *(_OWORD *)(v188 + 16) = v209;
          v210 = 1;
          v23 = v238;
          v211 = v241;
          goto LABEL_195;
        }
        v190 = v91;
        v191 = a1 + 40 * (int)v187;
        v192 = *(float *)(v191 + 12);
        v193 = (float *)&v14[40 * v91];
        v194 = v193[3];
        v195 = *(float *)(v191 + 28);
        v196 = v193[7];
        if (v192 != v194)
        {
          v197 = *(float *)v188;
          v198 = *(float *)v189;
          v23 = v238;
LABEL_182:
          v197 = v197 + v198;
          v199 = *((float *)v189 + 1) + *(float *)(v188 + 4);
          v200 = *((float *)v189 + 2) + *(float *)(v188 + 8);
          v212 = fabsf(v199);
          v213 = fabsf(v200);
          if (fabsf(v197) > 1.1755e-38 || v212 > 1.1755e-38 || v213 > 1.1755e-38)
          {
            v216 = v22 / sqrtf((float)((float)(v197 * v197) + (float)(v199 * v199)) + (float)(v200 * v200));
            v197 = v216 * v197;
            v199 = v216 * v199;
            v200 = v216 * v200;
          }
          v192 = (float)(v194 + v192) * 0.5;
          v195 = (float)(v196 + v195) * 0.5;
          v217 = (float32x2_t *)(a1 + 40 * (int)v187);
          v218 = (float32x2_t *)&v14[40 * v190];
          v205 = vadd_f32(v218[2], v217[2]);
          v207 = v218[3].f32[0] + v217[3].f32[0];
          if (fabsf(v205.f32[0]) > 1.1755e-38
            || (v219.i32[1] = v205.i32[1],
                v219.f32[0] = v218[3].f32[0] + v217[3].f32[0],
                v220 = vmvn_s8((int8x8_t)vcgt_f32(vabs_f32(v219), (float32x2_t)0x80000000800000)),
                (v220.i8[4] & 1) == 0)
            || (v220.i8[0] & 1) == 0)
          {
            v221 = v22 / sqrtf(vaddv_f32(vmul_f32(v205, v205)) + (float)(v207 * v207));
            v205 = vmul_n_f32(v205, v221);
            v207 = v221 * v207;
          }
          goto LABEL_194;
        }
        v197 = *(float *)v188;
        v198 = *(float *)v189;
        v23 = v238;
        if (v195 != v196)
          goto LABEL_182;
        v199 = *(float *)(v188 + 4);
        v200 = *(float *)(v188 + 8);
        v201 = v197 == v198 && v199 == *((float *)v189 + 1);
        if (!v201 || v200 != *((float *)v189 + 2))
          goto LABEL_182;
        v203 = (float32x2_t *)(a1 + 40 * (int)v187);
        v204 = (float32x2_t *)&v14[40 * v190];
        v205 = v203[2];
        v206 = vmvn_s8((int8x8_t)vceq_f32(v205, v204[2]));
        if ((v206.i8[0] & 1) != 0)
          goto LABEL_182;
        if ((v206.i8[4] & 1) != 0)
          goto LABEL_182;
        v207 = v203[3].f32[0];
        if (v207 != v204[3].f32[0])
          goto LABEL_182;
LABEL_194:
        v211 = v241;
        *(float *)v188 = v197;
        *(float *)(v188 + 4) = v199;
        *(float *)(v188 + 8) = v200;
        *(float *)(v188 + 12) = v192;
        *(float32x2_t *)(v188 + 16) = v205;
        *(float *)(v188 + 24) = v207;
        *(float *)(v188 + 28) = v195;
        v210 = 2;
        *(_QWORD *)(v188 + 32) = 0;
LABEL_195:
        *(_DWORD *)(v188 + 32) = v210;
        *(_DWORD *)(a1 + 40 * (int)v187 + 36) = *v237;
        v24 = v211 + 1;
      }
      while (v24 < *v23);
      if (v25 >= 1)
      {
        v222 = v25;
        v223 = v229;
        do
        {
          v224 = *v223;
          v223 += 2;
          free(v224);
          --v222;
        }
        while (v222);
      }
LABEL_199:
      v21 = v232 + 1;
      if (v232 + 1 == v230)
      {
        free(v15);
        free(v17);
        free(v14);
        return 1;
      }
    }
  }
  if (v14)
    free(v14);
  if (v15)
    free(v15);
  if (v17)
  {
    v20 = v17;
LABEL_204:
    free(v20);
  }
  return 0;
}

uint64_t sub_1DCB10410(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  unsigned int v11;
  int v12;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  float v28;
  int v29;
  int v30;
  BOOL v31;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;

  v8 = result;
  v41 = *MEMORY[0x1E0C80C00];
  if (a5 < a6)
  {
    v9 = a5;
    do
    {
      if ((*(_BYTE *)(a2 + 88 * v9 + 76) & 2) == 0)
      {
        for (i = 0; i != 3; ++i)
        {
          if (a5 >= 1)
          {
            v11 = 0;
            result = *(unsigned int *)(a3 + 4 * (i + 3 * v9));
            do
              v12 = *(_DWORD *)(a3 + 4 * v11);
            while ((_DWORD)result != v12 && (int)++v11 < 3 * a5);
            if ((_DWORD)result == v12)
            {
              v14 = v8
                  + 40
                  * (*(_DWORD *)(a2 + 88 * (v11 / 3) + 80) + *(unsigned __int8 *)(a2 + 88 * (v11 / 3) + v11 % 3 + 84));
              v15 = *(_OWORD *)v14;
              v16 = *(_OWORD *)(v14 + 16);
              result = v8 + 40 * (*(_DWORD *)(a2 + 88 * v9 + 80) + *(unsigned __int8 *)(a2 + 88 * v9 + i + 84));
              *(_QWORD *)(result + 32) = *(_QWORD *)(v14 + 32);
              *(_OWORD *)result = v15;
              *(_OWORD *)(result + 16) = v16;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != a6);
  }
  if (a5 >= 1)
  {
    v17 = 0;
    v18 = (unsigned __int8 *)(a2 + 84);
    v38 = a5;
    do
    {
      if ((*(_BYTE *)(a2 + 88 * v17 + 76) & 2) != 0)
      {
        v19 = (1 << *(_BYTE *)(a2 + 88 * v17 + 85)) | (1 << *(_BYTE *)(a2 + 88 * v17 + 84)) | (1 << *(_BYTE *)(a2 + 88 * v17 + 86));
        if ((v19 & 8) != 0)
          v20 = 0;
        else
          v20 = 3;
        if ((v19 & 4) == 0)
          v20 = 2;
        if ((v19 & 2) != 0)
          v21 = v20;
        else
          v21 = 1;
        v22 = a2 + 88 * v17;
        v23 = *(_DWORD *)(v22 + 72);
        v40 = 0.0;
        v39 = 0;
        v24 = ((4 * v23) >> 2);
        (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, &v39, v24, v21);
        v25 = v39;
        v37 = (_DWORD *)(v22 + 80);
        v26 = -1;
        v27 = v18;
        v28 = v40;
        while (1)
        {
          v30 = *v27++;
          v29 = v30;
          v40 = 0.0;
          v39 = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)a4 + 16))(a4, &v39, v24, v30 & 3);
          v31 = *(float *)&v39 == *(float *)&v25 && *((float *)&v39 + 1) == *((float *)&v25 + 1);
          if (v31 && v40 == v28)
            break;
          if (++v26 >= 2)
            goto LABEL_37;
        }
        v33 = v8 + 40 * (*v37 + v29);
        v34 = *(_OWORD *)v33;
        v35 = *(_OWORD *)(v33 + 16);
        v36 = v8 + 40 * (*v37 + (int)v21);
        *(_QWORD *)(v36 + 32) = *(_QWORD *)(v33 + 32);
        *(_OWORD *)v36 = v34;
        *(_OWORD *)(v36 + 16) = v35;
      }
LABEL_37:
      ++v17;
      v18 += 88;
    }
    while (v17 != v38);
  }
  return result;
}

uint64_t sub_1DCB106BC(float a1, float a2, float a3)
{
  int v3;

  v3 = (int)(float)((float)((float)(a3 - a1) * 2048.0) / (float)(a2 - a1)) & ~((int)(float)((float)((float)(a3 - a1)
                                                                                                  * 2048.0)
                                                                                          / (float)(a2 - a1)) >> 31);
  if (v3 >= 2047)
    return 2047;
  else
    return v3;
}

uint64_t sub_1DCB106E8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float *v16;
  float v17;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  __n128 v36;
  float32x4_t v37;
  int8x8_t v38;
  int8x8_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v44;
  __int128 v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t v56;
  uint64_t v57;
  float32x4_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  __n128 v62;
  float32x4_t v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  float v67;
  _QWORD v68[4];

  while (2)
  {
    v5 = a5;
    v6 = a4;
    v7 = a3;
    v8 = a2;
    v54 = result;
    v68[2] = *MEMORY[0x1E0C80C00];
    v9 = (float *)(a2 + 16 * (int)a4);
    v66 = *(_QWORD *)v9;
    v10 = (int)a4;
    v67 = v9[2];
    v64 = v66;
    v65 = v67;
    if ((int)a4 >= (int)a5)
      goto LABEL_10;
    v11 = a2 + 16 * (int)a4 + 16;
    v12 = (int)a4;
    do
    {
      v13 = 0;
      v14 = 0;
      ++v12;
      do
      {
        v15 = *(float *)(v11 + v13);
        if (*(float *)((char *)&v66 + v13) <= v15)
        {
          v16 = (float *)((char *)&v64 + v13);
          if (*(float *)((char *)&v64 + v13) >= v15)
            goto LABEL_8;
        }
        else
        {
          v16 = (float *)&v66 + v14;
        }
        *v16 = v15;
LABEL_8:
        ++v14;
        v13 += 4;
      }
      while (v13 != 12);
      v11 += 16;
    }
    while (v12 != (int)a5);
LABEL_10:
    v17 = v65 - v67;
    if ((float)(*((float *)&v64 + 1) - *((float *)&v66 + 1)) <= (float)(*(float *)&v64 - *(float *)&v66)
      || (float)(*((float *)&v64 + 1) - *((float *)&v66 + 1)) <= v17)
    {
      if (v17 <= (float)(*(float *)&v64 - *(float *)&v66))
        v19 = 0;
      else
        v19 = 2;
    }
    else
    {
      v19 = 1;
    }
    v20 = *((float *)&v64 + v19);
    v21 = *((float *)&v66 + v19);
    v22 = (float)(v21 + v20) * 0.5;
    if (v22 < v20 && v22 > v21)
    {
      v40 = a4;
      if ((int)a4 < (int)a5)
      {
        v41 = a2 + 4 * v19;
        LODWORD(v40) = a4;
        do
        {
          do
          {
            v42 = *(float *)(v41 + 16 * (int)v40);
            if (v42 >= v22)
              v40 = v40;
            else
              v40 = (v40 + 1);
          }
          while (v42 < v22 && (int)v40 < (int)a5);
          if ((int)v40 < (int)a5)
          {
            do
            {
              v44 = *(float *)(v41 + 16 * (int)a5);
              LODWORD(a5) = a5 - (v44 >= v22);
            }
            while (v44 >= v22 && (int)v40 < (int)a5);
            if (v42 >= v22 && v44 < v22)
            {
              v47 = *(_OWORD *)(a2 + 16 * (int)v40);
              *(_OWORD *)(a2 + 16 * (int)v40) = *(_OWORD *)(a2 + 16 * (int)a5);
              *(_OWORD *)(a2 + 16 * (int)a5) = v47;
              v40 = (v40 + 1);
              LODWORD(a5) = a5 - 1;
            }
          }
        }
        while ((int)v40 < (int)a5);
      }
      if ((_DWORD)v40 == (_DWORD)a5)
      {
        v48 = *(float *)(a2 + 16 * (int)v40 + 4 * v19);
        LODWORD(a5) = v40 - (v48 >= v22);
        if (v48 >= v22)
          v49 = v40;
        else
          v49 = (v40 + 1);
        v40 = v49;
      }
      if ((int)a5 > (int)a4)
        result = sub_1DCB106E8(result, a2, a3, a4);
      if ((int)v40 < (int)v5)
      {
        result = v54;
        a2 = v8;
        a3 = v7;
        a4 = v40;
        a5 = v5;
        continue;
      }
    }
    else if ((int)a4 <= (int)a5)
    {
      v52 = a5 + 1;
      v24 = (int)a4;
      v50 = (int)a4;
      v51 = a4;
      do
      {
        v53 = *(int *)(v8 + 16 * v24 + 12);
        v25 = *(_DWORD *)(v54 + 4 * v53);
        memset(v68, 0, 12);
        v26 = v25 & 3;
        v27 = (v25 >> 2);
        (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v68, v27, v26);
        v57 = v68[0];
        v61 = v68[1];
        memset(v68, 0, 12);
        (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, v68, v27, v26);
        v59 = v68[0];
        v55 = *(_QWORD *)((char *)v68 + 4);
        v68[0] = 0;
        result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, v68, v27, v26);
        if (v24 > v10)
        {
          v28.i64[0] = v57;
          v28.i64[1] = __PAIR64__(v59, v61);
          v29.i64[0] = v55;
          v29.i64[1] = v68[0];
          v30 = v6;
          v56 = v29;
          v58 = v28;
          do
          {
            v31 = *(int *)(v8 + 16 * v30 + 12);
            v32 = *(_DWORD *)(v54 + 4 * v31);
            memset(v68, 0, 12);
            v33 = v32 & 3;
            v34 = (v32 >> 2);
            v35 = ((__n128 (*)(uint64_t, _QWORD *, uint64_t, uint64_t))*(_QWORD *)(*(_QWORD *)v7 + 16))(v7, v68, v34, v33);
            v35.n128_u64[0] = v68[0];
            v35.n128_u32[2] = v68[1];
            v62 = v35;
            memset(v68, 0, 12);
            (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, v68, v34, v33);
            v60 = *(_QWORD *)((char *)v68 + 4);
            v36 = v62;
            v36.n128_u32[3] = v68[0];
            v63 = (float32x4_t)v36;
            v68[0] = 0;
            result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, v68, v34, v33);
            v37.i64[0] = v60;
            v37.i64[1] = v68[0];
            v38 = vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_f32(v58, v63), (int16x8_t)vceqq_f32(v56, v37))), 7uLL));
            v39 = vand_s8(v38, (int8x8_t)0x8040201008040201);
            v39.i8[0] = vaddv_s8(v39);
            v30 += (vminv_u8((uint8x8_t)v38) & 1) == 0;
          }
          while (v24 > v30 && v39.i32[0] != 255);
          v10 = v50;
          v6 = v51;
          if (v39.i32[0] == 255)
            *(_DWORD *)(v54 + 4 * v53) = *(_DWORD *)(v54 + 4 * v31);
        }
        ++v24;
      }
      while (v52 != (_DWORD)v24);
    }
    return result;
  }
}

uint64_t sub_1DCB10BB0(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v8[0] = 0;
  (*(void (**)(uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, v8, (v4 >> 2), v4 & 3);
  v5 = a2[1];
  v8[0] = 0;
  (*(void (**)(uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, v8, (v5 >> 2), v5 & 3);
  v6 = a2[2];
  v8[0] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, v8, (v6 >> 2), v6 & 3);
}

uint64_t sub_1DCB10CA4(uint64_t result, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  while ((int)a3 - a2 >= 1)
  {
    v5 = a4;
    v6 = a3;
    v7 = result;
    if ((_DWORD)a3 - a2 == 1)
    {
      v8 = result + 12 * a2;
      v9 = result + 12 * (int)a3;
      if (*(_DWORD *)(v8 + 4 * a4) > *(_DWORD *)(v9 + 4 * a4))
      {
        v10 = *(_QWORD *)v8;
        v11 = *(_DWORD *)(v8 + 8);
        v12 = *(_DWORD *)(v9 + 8);
        *(_QWORD *)v8 = *(_QWORD *)v9;
        *(_DWORD *)(v8 + 8) = v12;
        *(_QWORD *)v9 = v10;
        *(_DWORD *)(v9 + 8) = v11;
      }
      return result;
    }
    v13 = a5 + __ROR4__(a5, -(char)a5) + 3;
    v14 = *(_DWORD *)(result + 12 * (int)(v13 % ((int)a3 - a2 + 1) + a2) + 4 * a4);
    v15 = a2;
    do
    {
      v16 = result + 12 * v15;
      do
      {
        v17 = *(_DWORD *)(v16 + 4 * a4);
        ++v15;
        v16 += 12;
      }
      while (v17 < v14);
      v18 = v16 - 12;
      v19 = result + 12 * (int)a3;
      do
      {
        v20 = *(_DWORD *)(v19 + 4 * a4);
        LODWORD(a3) = a3 - 1;
        v19 -= 12;
      }
      while (v20 > v14);
      if (v15 - 1 <= (int)a3 + 1)
      {
        v21 = v19 + 12;
        v22 = *(_QWORD *)v18;
        v24 = *(_DWORD *)(v18 + 8);
        v23 = *(_DWORD *)(v21 + 8);
        *(_QWORD *)v18 = *(_QWORD *)v21;
        *(_DWORD *)(v18 + 8) = v23;
        *(_QWORD *)v21 = v22;
        *(_DWORD *)(v21 + 8) = v24;
      }
      else
      {
        --v15;
        LODWORD(a3) = a3 + 1;
      }
    }
    while (v15 <= (int)a3);
    if ((int)a3 > a2)
      result = sub_1DCB10CA4(result);
    if (v15 >= (int)v6)
      return result;
    result = v7;
    a2 = v15;
    a3 = v6;
    a4 = v5;
    a5 = v13;
  }
  return result;
}

uint64_t sub_1DCB10E44(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  _DWORD *v9;
  int v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v7 = result;
  do
  {
    v8 = *(_DWORD *)(a4 + 16);
    v9 = (_DWORD *)(v7 + 4 * (int)(3 * a3));
    if (*v9 == v8)
    {
      v10 = 0;
      v11 = 0;
    }
    else if (v9[1] == v8)
    {
      v10 = 1;
      v11 = 1;
    }
    else
    {
      v14 = v9[2] == v8;
      v10 = v14;
      if (v14)
        v11 = 2;
      else
        v11 = -1;
    }
    v12 = (_QWORD *)(a2 + 88 * a3 + 16);
    v13 = &v12[v11];
    if (*v13)
      v14 = 1;
    else
      v14 = a4 == 0;
    if (v14)
      break;
    v15 = a2 + 88 * a3;
    v18 = *(_DWORD *)(v15 + 76);
    v17 = (unsigned int *)(v15 + 76);
    v16 = v18;
    if ((v18 & 4) != 0 && !*v12 && !*(_QWORD *)(a2 + 88 * a3 + 24) && !*(_QWORD *)(a2 + 88 * a3 + 32))
    {
      v16 = v16 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(a4 + 20) != 0));
      *v17 = v16;
    }
    if (((v16 >> 3) & 1) != *(_DWORD *)(a4 + 20))
      break;
    v19 = a2 + 88 * a3;
    *(_DWORD *)(*(_QWORD *)(a4 + 8) + 4 * (int)(*(_DWORD *)a4)++) = a3;
    *v13 = a4;
    v20 = *(_DWORD *)(v19 + 4 * v11);
    v21 = v11 - 1;
    v22 = v10 ? v21 : 2;
    a3 = *(_DWORD *)(v19 + 4 * v22);
    if ((v20 & 0x80000000) == 0)
      result = sub_1DCB10E44(v7, a2);
  }
  while ((a3 & 0x80000000) == 0);
  return result;
}

uint64_t sub_1DCB10F94(uint64_t result, int a2, int a3, unsigned int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;

  v7 = result;
  v8 = a3 + 1;
  v9 = result + 4;
  do
  {
    v10 = a2;
    a4 += __ROR4__(a4, -(char)a4) + 3;
    v11 = *(_DWORD *)(v7 + 4 * (int)(a4 % (v8 - a2) + a2));
    v12 = a3;
    do
    {
      v13 = (int *)(v7 + 4 * a2);
      v14 = a2;
      do
      {
        v16 = *v13++;
        v15 = v16;
        ++v14;
      }
      while (v16 < v11);
      a2 = v14 - 1;
      v17 = (_DWORD *)(v9 + 4 * v12);
      v18 = v12;
      do
      {
        v20 = *--v17;
        v19 = v20;
        --v18;
      }
      while (v20 > v11);
      v12 = v18 + 1;
      if (a2 <= v18 + 1)
      {
        *(v13 - 1) = v19;
        *v17 = v15;
        v12 = v18;
        a2 = v14;
      }
    }
    while (a2 <= v12);
    if (v12 > v10)
      result = sub_1DCB10F94(v7);
  }
  while (a2 < a3);
  return result;
}

void sub_1DCB129FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  void *v34;
  void *v35;
  void *v36;

  if (__p)
    operator delete(__p);
  if (a33)
    operator delete(a33);

  _Unwind_Resume(a1);
}

id sub_1DCB12C54()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  void *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  void *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  void *v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  void *v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  void *v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  void *v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;

  v0 = (void *)objc_opt_new();
  objc_msgSend_attributes(v0, v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v3, v4, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setName_(v5, v6, (uint64_t)CFSTR("position"));

  objc_msgSend_attributes(v0, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v9, v10, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFormat_(v11, v12, 786435);

  objc_msgSend_attributes(v0, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v15, v16, 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setBufferIndex_(v17, v18, 0);

  objc_msgSend_attributes(v0, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v21, v22, 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setName_(v23, v24, (uint64_t)CFSTR("normal"));

  objc_msgSend_attributes(v0, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v27, v28, 1);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFormat_(v29, v30, 786435);

  objc_msgSend_attributes(v0, v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v33, v34, 1);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setBufferIndex_(v35, v36, 0);

  objc_msgSend_attributes(v0, v37, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v39, v40, 2);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setName_(v41, v42, (uint64_t)CFSTR("textureCoordinate"));

  objc_msgSend_attributes(v0, v43, v44);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v45, v46, 2);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFormat_(v47, v48, 786434);

  objc_msgSend_attributes(v0, v49, v50);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v51, v52, 2);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setBufferIndex_(v53, v54, 0);

  objc_msgSend_setPackedOffsets(v0, v55, v56);
  objc_msgSend_setPackedStrides(v0, v57, v58);
  return v0;
}

void sub_1DCB12E68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1DCB12ED4(uint64_t a1, unint64_t a2, unint64_t a3, int a4, int32x4_t a5, float32x4_t a6, float a7, float a8, float a9)
{
  unint64_t v13;
  uint64_t v14;
  int32x4_t v15;
  float32x4_t v16;
  float v17;
  float v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  float32x4_t *v28;
  float32x4_t *v29;
  char *v30;
  float32x4_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  BOOL v42;
  unsigned int v43;
  float32x4_t *v44;
  unint64_t v45;
  int8x16_t v46;
  char **v47;
  __int32 v48;
  __int32 v49;
  char *v50;
  __int32 v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  int v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  int v71;
  int v72;
  __int32 *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int v81;
  __int32 *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  __int32 *v89;
  __int32 v90;
  __int32 *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  __int32 *v98;
  __int32 v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  __int32 *v107;
  __int32 v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  int v117;
  int v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  int v126;
  float32x4_t v127;
  unint64_t v128;
  unint64_t v129;
  float32x4_t v132;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v138;
  int v139;
  float32x4_t v140;
  __int32 v141;
  void *__p;
  char *v143;
  char *v144;
  char *v145;
  float32x4_t *v146;
  float32x4_t *v147;

  v145 = 0;
  v146 = 0;
  v147 = 0;
  v128 = a2 + 1;
  v129 = a3 + 1;
  v13 = (a3 + 1) * (a2 + 1);
  __p = 0;
  v143 = 0;
  v144 = 0;
  sub_1DCB01838((void **)&v145, v13);
  sub_1DCB17F24(&__p, v13);
  v14 = 0;
  v15 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32(a6, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a5, a5), (int8x16_t)a5, 0xCuLL))), (float32x4_t)a5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a6, (int32x4_t)a6), (int8x16_t)a6, 0xCuLL));
  v127 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v15, v15), (int8x16_t)v15, 0xCuLL);
  v16 = vmulq_n_f32(v127, a9 * 0.5);
  v132 = v16;
  v17 = 1.0 / (float)a3;
  v18 = 1.0 / (float)a2;
  do
  {
    v19 = 0;
    v16.f32[0] = (float)(int)v14 * v17;
    v138 = v16;
    v140 = vmlaq_n_f32(v132, a6, -(float)((float)(a8 * 0.5) - (float)((float)((float)(int)v14 * a8) * v17)));
    do
    {
      v20.i64[1] = a5.i64[1];
      v21 = vmlaq_n_f32(v140, (float32x4_t)a5, -(float)((float)(a7 * 0.5) - (float)((float)((float)(int)v19 * a7) * v18)));
      v22 = v146;
      if (v146 >= v147)
      {
        v135 = v21;
        v24 = ((char *)v146 - v145) >> 4;
        if ((unint64_t)(v24 + 1) >> 60)
          sub_1DCAE4C44();
        v25 = ((char *)v147 - v145) >> 3;
        if (v25 <= v24 + 1)
          v25 = v24 + 1;
        if ((unint64_t)((char *)v147 - v145) >= 0x7FFFFFFFFFFFFFF0)
          v26 = 0xFFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
          v27 = (char *)sub_1DCAFBD5C((uint64_t)&v147, v26);
        else
          v27 = 0;
        v28 = (float32x4_t *)&v27[16 * v24];
        *v28 = v135;
        v23 = v28 + 1;
        v30 = v145;
        v29 = v146;
        if (v146 != (float32x4_t *)v145)
        {
          do
          {
            v31 = v29[-1];
            --v29;
            v28[-1] = v31;
            --v28;
          }
          while (v29 != (float32x4_t *)v30);
          v29 = (float32x4_t *)v145;
        }
        v145 = (char *)v28;
        v146 = v23;
        v147 = (float32x4_t *)&v27[16 * v26];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v146 = v21;
        v23 = v22 + 1;
      }
      v146 = v23;
      v20.f32[0] = (float)(int)v19 * v18;
      v16 = v138;
      v20.i32[1] = v138.i32[0];
      v32 = v143;
      if (v143 >= v144)
      {
        v136 = v20;
        v34 = (v143 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v34 + 1) >> 61)
          sub_1DCAE4C44();
        v35 = (v144 - (_BYTE *)__p) >> 2;
        if (v35 <= v34 + 1)
          v35 = v34 + 1;
        if ((unint64_t)(v144 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)sub_1DCAE79A4((uint64_t)&v144, v36);
        else
          v37 = 0;
        v38 = &v37[8 * v34];
        v16 = v136;
        *(_QWORD *)v38 = v136.i64[0];
        v33 = v38 + 8;
        v40 = (char *)__p;
        v39 = v143;
        if (v143 != __p)
        {
          do
          {
            v41 = *((_QWORD *)v39 - 1);
            v39 -= 8;
            v16.i32[1] = HIDWORD(v41);
            *((_QWORD *)v38 - 1) = v41;
            v38 -= 8;
          }
          while (v39 != v40);
          v39 = (char *)__p;
        }
        __p = v38;
        v143 = v33;
        v144 = &v37[8 * v36];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *(_QWORD *)v143 = v20.i64[0];
        v33 = v32 + 8;
      }
      v143 = v33;
      v42 = v19++ == a2;
    }
    while (!v42);
    v42 = v14++ == a3;
  }
  while (!v42);
  if (a4)
    v43 = -1;
  else
    v43 = 0;
  sub_1DCB0BBF4((void **)a1, ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2) + 8 * v128 * v129);
  v44 = v146;
  if (v146 != (float32x4_t *)v145)
  {
    v45 = 0;
    v46 = vbslq_s8((int8x16_t)vdupq_n_s32(v43), (int8x16_t)vnegq_f32(v127), (int8x16_t)v127);
    v47 = (char **)(a1 + 16);
    v48 = v46.i32[1];
    v141 = v46.i32[0];
    v49 = v46.i32[2];
    v50 = *(char **)(a1 + 8);
    v44 = (float32x4_t *)v145;
    do
    {
      v51 = v44[v45].i32[0];
      v52 = *v47;
      if (v50 >= *v47)
      {
        v54 = *(char **)a1;
        v55 = (uint64_t)&v50[-*(_QWORD *)a1] >> 2;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 62)
          sub_1DCAE4C44();
        v57 = v52 - v54;
        if (v57 >> 1 > v56)
          v56 = v57 >> 1;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
          v58 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          v59 = (char *)sub_1DCAE4D04(a1 + 16, v58);
          v54 = *(char **)a1;
          v50 = *(char **)(a1 + 8);
        }
        else
        {
          v59 = 0;
        }
        v60 = &v59[4 * v55];
        *(_DWORD *)v60 = v51;
        v53 = v60 + 4;
        while (v50 != v54)
        {
          v61 = *((_DWORD *)v50 - 1);
          v50 -= 4;
          *((_DWORD *)v60 - 1) = v61;
          v60 -= 4;
        }
        v52 = &v59[4 * v58];
        *(_QWORD *)a1 = v60;
        *(_QWORD *)(a1 + 8) = v53;
        *(_QWORD *)(a1 + 16) = v52;
        if (v54)
        {
          operator delete(v54);
          v52 = *v47;
        }
      }
      else
      {
        *(_DWORD *)v50 = v51;
        v53 = v50 + 4;
      }
      *(_QWORD *)(a1 + 8) = v53;
      v62 = *(_DWORD *)&v145[16 * v45 + 4];
      if (v53 >= v52)
      {
        v64 = *(char **)a1;
        v65 = (uint64_t)&v53[-*(_QWORD *)a1] >> 2;
        v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 62)
          sub_1DCAE4C44();
        v67 = v52 - v64;
        if (v67 >> 1 > v66)
          v66 = v67 >> 1;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
          v68 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
        {
          v69 = (char *)sub_1DCAE4D04(a1 + 16, v68);
          v64 = *(char **)a1;
          v53 = *(char **)(a1 + 8);
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[4 * v65];
        *(_DWORD *)v70 = v62;
        v63 = v70 + 4;
        while (v53 != v64)
        {
          v71 = *((_DWORD *)v53 - 1);
          v53 -= 4;
          *((_DWORD *)v70 - 1) = v71;
          v70 -= 4;
        }
        v52 = &v69[4 * v68];
        *(_QWORD *)a1 = v70;
        *(_QWORD *)(a1 + 8) = v63;
        *(_QWORD *)(a1 + 16) = v52;
        if (v64)
        {
          operator delete(v64);
          v52 = *v47;
        }
      }
      else
      {
        *(_DWORD *)v53 = v62;
        v63 = v53 + 4;
      }
      *(_QWORD *)(a1 + 8) = v63;
      v72 = *(_DWORD *)&v145[16 * v45 + 8];
      if (v63 >= v52)
      {
        v74 = *(char **)a1;
        v75 = (uint64_t)&v63[-*(_QWORD *)a1] >> 2;
        v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 62)
          sub_1DCAE4C44();
        v77 = v52 - v74;
        if (v77 >> 1 > v76)
          v76 = v77 >> 1;
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
          v78 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v78 = v76;
        if (v78)
        {
          v79 = (char *)sub_1DCAE4D04(a1 + 16, v78);
          v74 = *(char **)a1;
          v63 = *(char **)(a1 + 8);
        }
        else
        {
          v79 = 0;
        }
        v80 = &v79[4 * v75];
        *(_DWORD *)v80 = v72;
        v73 = (__int32 *)(v80 + 4);
        while (v63 != v74)
        {
          v81 = *((_DWORD *)v63 - 1);
          v63 -= 4;
          *((_DWORD *)v80 - 1) = v81;
          v80 -= 4;
        }
        v52 = &v79[4 * v78];
        *(_QWORD *)a1 = v80;
        *(_QWORD *)(a1 + 8) = v73;
        *(_QWORD *)(a1 + 16) = v52;
        if (v74)
        {
          operator delete(v74);
          v52 = *v47;
        }
      }
      else
      {
        *(_DWORD *)v63 = v72;
        v73 = (__int32 *)(v63 + 4);
      }
      *(_QWORD *)(a1 + 8) = v73;
      if (v73 >= (__int32 *)v52)
      {
        v83 = *(char **)a1;
        v84 = ((uint64_t)v73 - *(_QWORD *)a1) >> 2;
        v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 62)
          sub_1DCAE4C44();
        v86 = v52 - v83;
        if (v86 >> 1 > v85)
          v85 = v86 >> 1;
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
          v87 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v87 = v85;
        if (v87)
        {
          v88 = (char *)sub_1DCAE4D04(a1 + 16, v87);
          v83 = *(char **)a1;
          v73 = *(__int32 **)(a1 + 8);
        }
        else
        {
          v88 = 0;
        }
        v89 = (__int32 *)&v88[4 * v84];
        *v89 = v141;
        v82 = v89 + 1;
        while (v73 != (__int32 *)v83)
        {
          v90 = *--v73;
          *--v89 = v90;
        }
        v52 = &v88[4 * v87];
        *(_QWORD *)a1 = v89;
        *(_QWORD *)(a1 + 8) = v82;
        *(_QWORD *)(a1 + 16) = v52;
        if (v83)
        {
          operator delete(v83);
          v52 = *v47;
        }
      }
      else
      {
        *v73 = v141;
        v82 = v73 + 1;
      }
      *(_QWORD *)(a1 + 8) = v82;
      if (v82 >= (__int32 *)v52)
      {
        v92 = *(char **)a1;
        v93 = ((uint64_t)v82 - *(_QWORD *)a1) >> 2;
        v94 = v93 + 1;
        if ((unint64_t)(v93 + 1) >> 62)
          sub_1DCAE4C44();
        v95 = v52 - v92;
        if (v95 >> 1 > v94)
          v94 = v95 >> 1;
        if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
          v96 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v96 = v94;
        if (v96)
        {
          v97 = (char *)sub_1DCAE4D04(a1 + 16, v96);
          v92 = *(char **)a1;
          v82 = *(__int32 **)(a1 + 8);
        }
        else
        {
          v97 = 0;
        }
        v98 = (__int32 *)&v97[4 * v93];
        *v98 = v48;
        v91 = v98 + 1;
        while (v82 != (__int32 *)v92)
        {
          v99 = *--v82;
          *--v98 = v99;
        }
        v52 = &v97[4 * v96];
        *(_QWORD *)a1 = v98;
        *(_QWORD *)(a1 + 8) = v91;
        *(_QWORD *)(a1 + 16) = v52;
        if (v92)
        {
          operator delete(v92);
          v52 = *v47;
        }
      }
      else
      {
        *v82 = v48;
        v91 = v82 + 1;
      }
      *(_QWORD *)(a1 + 8) = v91;
      if (v91 >= (__int32 *)v52)
      {
        v101 = *(char **)a1;
        v102 = ((uint64_t)v91 - *(_QWORD *)a1) >> 2;
        v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 62)
          sub_1DCAE4C44();
        v104 = v52 - v101;
        if (v104 >> 1 > v103)
          v103 = v104 >> 1;
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
          v105 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v105 = v103;
        if (v105)
        {
          v106 = (char *)sub_1DCAE4D04(a1 + 16, v105);
          v101 = *(char **)a1;
          v91 = *(__int32 **)(a1 + 8);
        }
        else
        {
          v106 = 0;
        }
        v107 = (__int32 *)&v106[4 * v102];
        *v107 = v49;
        v100 = (char *)(v107 + 1);
        while (v91 != (__int32 *)v101)
        {
          v108 = *--v91;
          *--v107 = v108;
        }
        v52 = &v106[4 * v105];
        *(_QWORD *)a1 = v107;
        *(_QWORD *)(a1 + 8) = v100;
        *(_QWORD *)(a1 + 16) = v52;
        if (v101)
        {
          operator delete(v101);
          v52 = *v47;
        }
      }
      else
      {
        *v91 = v49;
        v100 = (char *)(v91 + 1);
      }
      *(_QWORD *)(a1 + 8) = v100;
      if (v100 >= v52)
      {
        v139 = *((_QWORD *)__p + v45);
        v110 = *(char **)a1;
        v111 = (uint64_t)&v100[-*(_QWORD *)a1] >> 2;
        v112 = v111 + 1;
        if ((unint64_t)(v111 + 1) >> 62)
          sub_1DCAE4C44();
        v113 = v52 - v110;
        if (v113 >> 1 > v112)
          v112 = v113 >> 1;
        if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL)
          v114 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v114 = v112;
        if (v114)
        {
          v115 = (char *)sub_1DCAE4D04(a1 + 16, v114);
          v110 = *(char **)a1;
          v100 = *(char **)(a1 + 8);
        }
        else
        {
          v115 = 0;
        }
        v116 = &v115[4 * v111];
        *(_DWORD *)v116 = v139;
        v109 = v116 + 4;
        while (v100 != v110)
        {
          v117 = *((_DWORD *)v100 - 1);
          v100 -= 4;
          *((_DWORD *)v116 - 1) = v117;
          v116 -= 4;
        }
        v52 = &v115[4 * v114];
        *(_QWORD *)a1 = v116;
        *(_QWORD *)(a1 + 8) = v109;
        *(_QWORD *)(a1 + 16) = v52;
        if (v110)
        {
          operator delete(v110);
          v52 = *v47;
        }
      }
      else
      {
        *(_DWORD *)v100 = *((_QWORD *)__p + v45);
        v109 = v100 + 4;
      }
      *(_QWORD *)(a1 + 8) = v109;
      v118 = *((_DWORD *)__p + 2 * v45 + 1);
      if (v109 >= v52)
      {
        v119 = *(char **)a1;
        v120 = (uint64_t)&v109[-*(_QWORD *)a1] >> 2;
        v121 = v120 + 1;
        if ((unint64_t)(v120 + 1) >> 62)
          sub_1DCAE4C44();
        v122 = v52 - v119;
        if (v122 >> 1 > v121)
          v121 = v122 >> 1;
        if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL)
          v123 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v123 = v121;
        if (v123)
        {
          v124 = (char *)sub_1DCAE4D04(a1 + 16, v123);
          v119 = *(char **)a1;
          v109 = *(char **)(a1 + 8);
        }
        else
        {
          v124 = 0;
        }
        v125 = &v124[4 * v120];
        *(_DWORD *)v125 = v118;
        v50 = v125 + 4;
        while (v109 != v119)
        {
          v126 = *((_DWORD *)v109 - 1);
          v109 -= 4;
          *((_DWORD *)v125 - 1) = v126;
          v125 -= 4;
        }
        *(_QWORD *)a1 = v125;
        *(_QWORD *)(a1 + 8) = v50;
        *(_QWORD *)(a1 + 16) = &v124[4 * v123];
        if (v119)
          operator delete(v119);
      }
      else
      {
        *(_DWORD *)v109 = v118;
        v50 = v109 + 4;
      }
      *(_QWORD *)(a1 + 8) = v50;
      ++v45;
      v44 = (float32x4_t *)v145;
    }
    while (v45 < ((char *)v146 - v145) >> 4);
  }
  if (__p)
  {
    v143 = (char *)__p;
    operator delete(__p);
    v44 = (float32x4_t *)v145;
  }
  if (v44)
  {
    v146 = v44;
    operator delete(v44);
  }
}

void sub_1DCB13818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v31;
  void *v33;

  if (__p)
    operator delete(__p);
  v33 = *(void **)(v31 - 176);
  if (v33)
  {
    *(_QWORD *)(v31 - 168) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DCB13900(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB16748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v33;
  void *v34;
  uint64_t v35;
  void *v37;

  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  if (a32)
    operator delete(a32);
  v37 = *(void **)(v35 - 192);
  if (v37)
  {
    *(_QWORD *)(v35 - 184) = v37;
    operator delete(v37);
  }

  _Unwind_Resume(a1);
}

void sub_1DCB16B28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB16B98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB16F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1DCB17090(uint64_t a1, int *a2, int a3, int a4, int a5, int a6, float32x4_t a7)
{
  int v11;
  int v12;
  float v13;
  float v14;
  unsigned int v15;
  int v16;
  int v17;
  double v18;
  float v19;
  double v20;
  float v26;
  int v27;
  double v28;
  float v29;
  double v30;
  int v31;
  int v32;
  int v33;
  float v34;
  unint64_t v35;
  __double2 v36;
  float32_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x4_t v45;
  uint64_t v46;
  float32x4_t v47;
  float v48;
  float32x4_t v49;
  float v51;
  int8x16_t v52;

  v11 = 0;
  v12 = a4 & 1;
  if (!a6)
    v12 = 0;
  v13 = a7.f32[1];
  v14 = -1.0;
  if (!a5)
    v14 = 1.0;
  v48 = v14;
  if (a5)
    v15 = -1;
  else
    v15 = 0;
  v52 = vbslq_s8((int8x16_t)vdupq_n_s32(v15), (int8x16_t)xmmword_1DCC583B0, (int8x16_t)xmmword_1DCC583A0);
  v16 = *a2;
  v17 = v12 + a4;
  v18 = 1.0 / (double)a4;
  v19 = 1.0 / (float)a4;
  v20 = 1.0 / (double)a3;
  __asm { FMOV            V1.4S, #1.0 }
  v47 = vdivq_f32(_Q1, a7);
  v26 = 1.0 / (float)a3;
  v27 = a3 + 1;
  do
  {
    v28 = cos((double)v11 * 3.14159265 * v18);
    if ((a3 & 0x80000000) == 0)
    {
      v29 = v28;
      v51 = v29;
      v30 = sin((double)v11 * 3.14159265 * v18);
      v31 = 0;
      v32 = 0;
      v33 = (__PAIR64__(v51 > 0.0, LODWORD(v51)) - COERCE_UNSIGNED_INT(0.0)) >> 32;
      v34 = (float)v33;
      if (a5)
        v34 = -(float)v33;
      LODWORD(v35) = 0;
      *((float *)&v35 + 1) = v34;
      v49 = (float32x4_t)v35;
      do
      {
        v36 = __sincos_stret((double)v31 * 3.14159265 * v20);
        v38.f32[0] = v36.__cosval * v30;
        v37 = v36.__sinval * v30;
        v38.f32[1] = v51;
        v38.f32[2] = v37;
        if (v13 == 0.0)
        {
          v39 = v49;
          v39.i32[3] = v52.i32[3];
          v40 = v39;
        }
        else
        {
          v41 = vmulq_f32(vmulq_n_f32(v38, v48), v47);
          v42 = (int32x4_t)vmulq_f32(v41, v41);
          v42.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v42, 2)).u32[0];
          v43 = vrsqrte_f32((float32x2_t)v42.u32[0]);
          v44 = vmul_f32(vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(v43, v43)), v43);
          v40 = vmulq_n_f32(v41, vmul_f32(v44, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(v44, v44))).f32[0]);
        }
        v45 = vmulq_f32(v38, a7);
        v46 = a1 + 32 * (v16 + v32);
        *(_QWORD *)v46 = v45.i64[0];
        *(_DWORD *)(v46 + 8) = v45.i32[2];
        *(_DWORD *)(v46 + 20) = v40.i32[2];
        v52.i32[3] = v40.i32[3];
        *(_QWORD *)(v46 + 12) = v40.i64[0];
        *(float *)(v46 + 24) = (float)v32 * v26;
        *(float *)(v46 + 28) = (float)v11 * v19;
        ++v32;
        v31 += 2;
      }
      while (v27 != v32);
      v16 += v32;
      *a2 = v16;
    }
  }
  while (v11++ != v17);
}

id sub_1DCB172E8(void *a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  id v11;
  id v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  _WORD *v18;
  __int16 v19;
  unsigned int v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  int v24;
  __int16 v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  id v37;
  const char *v38;
  void *v39;
  const char *v40;
  void *v41;
  const char *v42;
  id v43;
  const char *v44;
  void *v45;
  const char *v46;
  MDLMaterial *v47;
  void *v48;
  const char *v49;
  void *v50;
  MDLSubmesh *v51;
  const char *v52;
  void *v53;

  v11 = a1;
  v12 = a2;
  v13 = (void *)MEMORY[0x1DF0D25C8]();
  if (!v12)
  {
    sub_1DCB17FB8();
    v12 = (id)objc_claimAutoreleasedReturnValue();
  }
  v14 = a4 >> a6;
  v15 = 6 * a3;
  if (a5 != 2)
    v15 = 8 * a3;
  v16 = v14 * v15;
  v17 = 2 * v14 * v15;
  v18 = malloc_type_malloc(v17, 0xD247CD4BuLL);
  if (v14)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = a3 + 1;
    v23 = 1;
    do
    {
      if (a3)
      {
        v24 = 0;
        v25 = v22 * (v20 + 1);
        do
        {
          v26 = v19 + v24;
          v27 = (v24 + 1);
          v28 = v20 * v22 + v24 + 1;
          v29 = v22 * v23 + v24;
          v30 = v25 + v24 + 1;
          v31 = v21 + 1;
          v18[v21] = v19 + v24;
          v32 = v21 + 2;
          v33 = v21 + 4;
          v34 = v21 + 6;
          if (a5 == 2)
          {
            v18[v31] = v30;
            v18[v32] = v29;
            v18[v21 + 3] = v26;
            v35 = v21 + 5;
            v18[v33] = v28;
            v26 = v25 + v24 + 1;
          }
          else
          {
            v18[v31] = v28;
            v18[v32] = v28;
            v18[v33] = v30;
            v36 = (char *)&v18[v21];
            *((_WORD *)v36 + 3) = v30;
            *((_WORD *)v36 + 5) = v29;
            v35 = v21 + 7;
            v18[v34] = v29;
            v34 = v21 + 8;
          }
          v18[v35] = v26;
          ++v24;
          v21 = v34;
        }
        while (v27 < a3);
      }
      else
      {
        v34 = v21;
      }
      ++v20;
      ++v23;
      v19 += v22;
      v21 = v34;
    }
    while (v14 > v20);
  }
  v37 = objc_alloc(MEMORY[0x1E0C99D50]);
  v39 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v37, v38, (uint64_t)v18, v17, 1);
  v41 = (void *)objc_msgSend_newBufferWithData_type_(v12, v40, (uint64_t)v39, 2);
  if (objc_msgSend_conformsToProtocol_(v41, v42, (uint64_t)&unk_1F03B6D88))
  {
    v43 = v41;
    objc_msgSend_stringByAppendingString_(v11, v44, (uint64_t)CFSTR("-Indices"));
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v43, v46, (uint64_t)v45);

  }
  v47 = [MDLMaterial alloc];
  v48 = (void *)objc_opt_new();
  v50 = (void *)objc_msgSend_initWithName_scatteringFunction_(v47, v49, (uint64_t)CFSTR("material"), v48);

  v51 = [MDLSubmesh alloc];
  v53 = (void *)objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v51, v52, (uint64_t)v41, v16, 16, a5, v50);

  objc_autoreleasePoolPop(v13);
  return v53;
}

void sub_1DCB17568(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1DCB175D0(void *a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  id v11;
  id v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  _DWORD *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  id v38;
  const char *v39;
  void *v40;
  const char *v41;
  void *v42;
  const char *v43;
  id v44;
  const char *v45;
  void *v46;
  const char *v47;
  MDLMaterial *v48;
  void *v49;
  const char *v50;
  void *v51;
  MDLSubmesh *v52;
  const char *v53;
  void *v54;

  v11 = a1;
  v12 = a2;
  v13 = (void *)MEMORY[0x1DF0D25C8]();
  if (!v12)
  {
    sub_1DCB17FB8();
    v12 = (id)objc_claimAutoreleasedReturnValue();
  }
  v14 = a4 >> a6;
  v15 = 6 * a3;
  if (a5 != 2)
    v15 = 8 * a3;
  v16 = v14 * v15;
  v17 = 4 * v14 * v15;
  v18 = malloc_type_malloc(v17, 0xD247CD4BuLL);
  if (v14)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = a3 + 1;
    v23 = a3 + 1;
    v24 = a3 + 1;
    do
    {
      if (a3)
      {
        v25 = 0;
        v26 = v22 * (v20 + 1);
        do
        {
          v27 = (v25 + 1);
          v28 = v20 * v22 + v27;
          v29 = v26 + v27;
          v30 = v19 + v25;
          v31 = v21 + 1;
          v18[v21] = v19 + v25;
          v32 = v21 + 2;
          v33 = v21 + 4;
          v34 = v21 + 6;
          if (a5 == 2)
          {
            v18[v31] = v29;
            v18[v32] = v24 + v25;
            v18[v21 + 3] = v30;
            v35 = v21 + 5;
            v18[v33] = v28;
            v30 = v26 + v27;
          }
          else
          {
            v18[v31] = v28;
            v18[v32] = v28;
            v36 = (char *)&v18[v21];
            *((_DWORD *)v36 + 3) = v29;
            v18[v33] = v29;
            v37 = v24 + v25;
            *((_DWORD *)v36 + 5) = v24 + v25;
            v35 = v21 + 7;
            v18[v34] = v37;
            v34 = v21 + 8;
          }
          v18[v35] = v30;
          v25 = v27;
          v21 = v34;
        }
        while (v27 < a3);
      }
      else
      {
        v34 = v21;
      }
      ++v20;
      v24 += v23;
      v19 += v23;
      v21 = v34;
    }
    while (v14 > v20);
  }
  v38 = objc_alloc(MEMORY[0x1E0C99D50]);
  v40 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v38, v39, (uint64_t)v18, v17, 1);
  v42 = (void *)objc_msgSend_newBufferWithData_type_(v12, v41, (uint64_t)v40, 2);
  if (objc_msgSend_conformsToProtocol_(v42, v43, (uint64_t)&unk_1F03B6D88))
  {
    v44 = v42;
    objc_msgSend_stringByAppendingString_(v11, v45, (uint64_t)CFSTR("-Indices"));
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v44, v47, (uint64_t)v46);

  }
  v48 = [MDLMaterial alloc];
  v49 = (void *)objc_opt_new();
  v51 = (void *)objc_msgSend_initWithName_scatteringFunction_(v48, v50, (uint64_t)CFSTR("material"), v49);

  v52 = [MDLSubmesh alloc];
  v54 = (void *)objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v52, v53, (uint64_t)v42, v16, 32, a5, v51);

  objc_autoreleasePoolPop(v13);
  return v54;
}

void sub_1DCB17850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB17CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1DCB17E58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB17EA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB17F14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB17F24(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_1DCAE4C44();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1DCAE79A4(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

id sub_1DCB17FB8()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)qword_1F03B50D0;
  if (!qword_1F03B50D0)
  {
    v1 = objc_opt_new();
    v2 = (void *)qword_1F03B50D0;
    qword_1F03B50D0 = v1;

    v0 = (void *)qword_1F03B50D0;
  }
  return v0;
}

void sub_1DCB180B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB185F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1DCB18668(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      sub_1DCAE4C44();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    sub_1DCB19F24((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

void sub_1DCB1879C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MDLBufferViewAllocator;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1DCB18934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCB18C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCB18EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1DCB190F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1DCB19300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCB19494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DCB19648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCB1980C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB198D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB199D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1DCB19B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1DCB19D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DCB19E24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DCB19F24(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_1DCAE4C44();
    v10 = 0;
    v11 = 0uLL;
    sub_1DCB19FE0(&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    sub_1DCB1A024(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_1DCB19FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_1DCB19FE0(_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    sub_1DCAE4C44();
  result = sub_1DCAE79A4((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void sub_1DCB1A024(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  sub_1DCB1A0C4(&v16, &v14, &v12, (uint64_t)&v11);
}

void sub_1DCB1A0C4(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;

  v5 = *a1;
  v6 = *((_DWORD *)a1 + 2);
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v19 = 0u;
  v20 = 0u;
  v17 = v5;
  v18 = v6;
  v15 = v7;
  v16 = v8;
  v9 = *((_DWORD *)a3 + 2);
  v13 = *a3;
  v14 = v9;
  sub_1DCB1A158((uint64_t)&v17, (uint64_t)&v15, (uint64_t)&v13, (uint64_t)&v19);
  v10 = DWORD2(v19);
  v11 = v20;
  v12 = DWORD2(v20);
  *(_QWORD *)a4 = v19;
  *(_DWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 16) = v11;
  *(_DWORD *)(a4 + 24) = v12;
}

void sub_1DCB1A158(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

void sub_1DCB1E39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  uint64_t v25;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  v27 = *(void **)(v25 - 248);
  if (v27)
  {
    *(_QWORD *)(v25 - 240) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(v25 - 224);
  if (v28)
  {
    *(_QWORD *)(v25 - 216) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(v25 - 200);
  if (v29)
  {
    *(_QWORD *)(v25 - 192) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(v25 - 176);
  if (v30)
  {
    *(_QWORD *)(v25 - 168) = v30;
    operator delete(v30);
  }

  _Unwind_Resume(a1);
}

void sub_1DCB1E690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1DCB1E6A0(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  float v3;
  float v4;
  uint64_t v5;
  float v6;
  float32x4_t v7;
  float v8;
  float32x4_t v9;

  if (a1.f32[0] <= 0.0)
  {
    LODWORD(v3) = vsubq_f32(a3, a2).u32[0];
    v4 = -vaddq_f32(a3, a2).f32[0];
  }
  else
  {
    v3 = -vaddq_f32(a3, a2).f32[0];
    LODWORD(v4) = vsubq_f32(a3, a2).u32[0];
  }
  *(float *)&v5 = v3;
  if (a1.f32[1] <= 0.0)
  {
    *((float *)&v5 + 1) = a3.f32[1] - a2.f32[1];
    v6 = -(float)(a3.f32[1] + a2.f32[1]);
  }
  else
  {
    *((float *)&v5 + 1) = -(float)(a3.f32[1] + a2.f32[1]);
    v6 = a3.f32[1] - a2.f32[1];
  }
  v7.i64[0] = v5;
  if (a1.f32[2] <= 0.0)
  {
    v7.f32[2] = a3.f32[2] - a2.f32[2];
    v7.i32[3] = 0;
    v8 = -(float)(a3.f32[2] + a2.f32[2]);
  }
  else
  {
    v7.f32[2] = -(float)(a3.f32[2] + a2.f32[2]);
    v7.i32[3] = 0;
    v8 = a3.f32[2] - a2.f32[2];
  }
  v9 = vmulq_f32(v7, a1);
  return (float)(vaddv_f32(*(float32x2_t *)v9.f32) + v9.f32[2]) <= 0.0
      && (float)((float)((float)(v6 * a1.f32[1]) + (float)(v4 * a1.f32[0])) + (float)(v8 * a1.f32[2])) >= 0.0;
}

BOOL sub_1DCB1E7A4(float32x4_t *a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float v8;
  float v11;
  float v18;
  float v19;
  float v22;
  float v23;
  float v24;
  float v25;
  float v28;
  float v29;
  float v30;
  float v31;
  float v34;
  float v35;
  float v38;
  float v39;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v47;
  float v48;
  float v49;
  float v50;
  float v53;
  float v54;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  int32x4_t v67;

  _Q2 = a3;
  v4 = vsubq_f32(a1[1], a2);
  v5 = vsubq_f32(a1[2], a2);
  v6 = vsubq_f32(a1[3], a2);
  _Q0 = vsubq_f32(v5, v4);
  v8 = fabsf(_Q0.f32[1]);
  _S20 = fabsf(_Q0.f32[2]);
  _S5 = v4.f32[1];
  v11 = v4.f32[2];
  __asm { FMLA            S7, S5, V0.S[2] }
  _S6 = v6.i32[1];
  __asm { FMLA            S16, S6, V0.S[2] }
  if (_S7 >= _S16)
    v18 = _S16;
  else
    v18 = _S7;
  if (_S7 < _S16)
    _S7 = _S16;
  v19 = -(float)(vmuls_lane_f32(v8, _Q2, 2) + (float)(_S20 * _Q2.f32[1]));
  __asm { FMLA            S24, S20, V2.S[1] }
  if (v18 > _S24 || _S7 < v19)
    return 0;
  v22 = fabsf(_Q0.f32[0]);
  v23 = -(float)((float)(_Q0.f32[2] * v4.f32[0]) - (float)(_Q0.f32[0] * v4.f32[2]));
  v24 = -(float)((float)(_Q0.f32[2] * v6.f32[0]) - (float)(_Q0.f32[0] * v6.f32[2]));
  if (v23 >= v24)
    v25 = -(float)((float)(_Q0.f32[2] * v6.f32[0]) - (float)(_Q0.f32[0] * v6.f32[2]));
  else
    v25 = -(float)((float)(_Q0.f32[2] * v4.f32[0]) - (float)(_Q0.f32[0] * v4.f32[2]));
  if (v23 >= v24)
    v24 = -(float)((float)(_Q0.f32[2] * v4.f32[0]) - (float)(_Q0.f32[0] * v4.f32[2]));
  if (v25 > vmlas_n_f32(v22 * _Q2.f32[2], _S20, _Q2.f32[0])
    || v24 < (float)-(float)((float)(v22 * _Q2.f32[2]) + (float)(_S20 * _Q2.f32[0])))
  {
    return 0;
  }
  _S20 = v5.i32[1];
  v28 = vmlas_n_f32(-(float)(_Q0.f32[0] * v5.f32[1]), _Q0.f32[1], v5.f32[0]);
  v29 = -(float)((float)(_Q0.f32[0] * v6.f32[1]) - (float)(_Q0.f32[1] * v6.f32[0]));
  if (v29 >= v28)
    v30 = v28;
  else
    v30 = -(float)((float)(_Q0.f32[0] * v6.f32[1]) - (float)(_Q0.f32[1] * v6.f32[0]));
  if (v29 < v28)
    v29 = v28;
  v31 = (float)(v22 * _Q2.f32[1]) + (float)(v8 * _Q2.f32[0]);
  if (v30 > v31 || v29 < (float)-v31)
    return 0;
  _Q19 = vsubq_f32(v6, v5);
  v34 = fabsf(_Q19.f32[1]);
  v35 = fabsf(_Q19.f32[2]);
  __asm
  {
    FMLA            S24, S5, V19.S[2]
    FMLA            S26, S6, V19.S[2]
  }
  if (_S24 >= _S26)
    v38 = _S26;
  else
    v38 = _S24;
  if (_S24 < _S26)
    _S24 = _S26;
  v39 = (float)(v34 * _Q2.f32[2]) + (float)(v35 * _Q2.f32[1]);
  if (v38 > v39 || _S24 < (float)-v39)
    return 0;
  v41 = fabsf(_Q19.f32[0]);
  v42 = -(float)((float)(_Q19.f32[2] * v4.f32[0]) - (float)(_Q19.f32[0] * v4.f32[2]));
  v43 = -(float)((float)(_Q19.f32[2] * v6.f32[0]) - (float)(_Q19.f32[0] * v6.f32[2]));
  if (v42 >= v43)
    v44 = -(float)((float)(_Q19.f32[2] * v6.f32[0]) - (float)(_Q19.f32[0] * v6.f32[2]));
  else
    v44 = -(float)((float)(_Q19.f32[2] * v4.f32[0]) - (float)(_Q19.f32[0] * v4.f32[2]));
  if (v42 >= v43)
    v43 = -(float)((float)(_Q19.f32[2] * v4.f32[0]) - (float)(_Q19.f32[0] * v4.f32[2]));
  v45 = (float)(v41 * _Q2.f32[2]) + (float)(v35 * _Q2.f32[0]);
  if (v44 > v45 || v43 < (float)-v45)
    return 0;
  v47 = -(float)((float)(_Q19.f32[0] * v4.f32[1]) - (float)(_Q19.f32[1] * v4.f32[0]));
  v48 = -(float)((float)(_Q19.f32[0] * v5.f32[1]) - (float)(_Q19.f32[1] * v5.f32[0]));
  if (v47 >= v48)
    v49 = -(float)((float)(_Q19.f32[0] * v5.f32[1]) - (float)(_Q19.f32[1] * v5.f32[0]));
  else
    v49 = -(float)((float)(_Q19.f32[0] * v4.f32[1]) - (float)(_Q19.f32[1] * v4.f32[0]));
  if (v47 >= v48)
    v48 = -(float)((float)(_Q19.f32[0] * v4.f32[1]) - (float)(_Q19.f32[1] * v4.f32[0]));
  v50 = (float)(v41 * _Q2.f32[1]) + (float)(v34 * _Q2.f32[0]);
  if (v49 > v50 || v48 < (float)-v50)
    return 0;
  _Q23 = vsubq_f32(v4, v6);
  v53 = fabsf(_Q23.f32[1]);
  v54 = fabsf(_Q23.f32[2]);
  __asm
  {
    FMLA            S27, S5, V23.S[2]
    FMLA            S28, S20, V23.S[2]
  }
  if (_S27 >= _S28)
    v57 = _S28;
  else
    v57 = _S27;
  if (_S27 < _S28)
    _S27 = _S28;
  if (v57 > (float)((float)(v53 * _Q2.f32[2]) + (float)(v54 * _Q2.f32[1]))
    || _S27 < (float)-(float)((float)(v53 * _Q2.f32[2]) + (float)(v54 * _Q2.f32[1])))
  {
    return 0;
  }
  v58 = fabsf(_Q23.f32[0]);
  v59 = -(float)((float)(_Q23.f32[2] * v4.f32[0]) - (float)(_Q23.f32[0] * v4.f32[2]));
  v60 = -(float)((float)(_Q23.f32[2] * v5.f32[0]) - (float)(_Q23.f32[0] * v5.f32[2]));
  if (v59 >= v60)
    v61 = -(float)((float)(_Q23.f32[2] * v5.f32[0]) - (float)(_Q23.f32[0] * v5.f32[2]));
  else
    v61 = -(float)((float)(_Q23.f32[2] * v4.f32[0]) - (float)(_Q23.f32[0] * v4.f32[2]));
  if (v59 >= v60)
    v60 = -(float)((float)(_Q23.f32[2] * v4.f32[0]) - (float)(_Q23.f32[0] * v4.f32[2]));
  if (v61 > (float)((float)(v58 * _Q2.f32[2]) + (float)(v54 * _Q2.f32[0]))
    || v60 < (float)-(float)((float)(v58 * _Q2.f32[2]) + (float)(v54 * _Q2.f32[0])))
  {
    return 0;
  }
  v62 = -(float)((float)(_Q23.f32[0] * v5.f32[1]) - (float)(_Q23.f32[1] * v5.f32[0]));
  v63 = -(float)((float)(_Q23.f32[0] * v6.f32[1]) - (float)(_Q23.f32[1] * v6.f32[0]));
  if (v63 >= v62)
    v64 = v62;
  else
    v64 = v63;
  if (v63 < v62)
    v63 = v62;
  if (v64 > (float)((float)(v58 * _Q2.f32[1]) + (float)(v53 * _Q2.f32[0]))
    || v63 < (float)-(float)((float)(v58 * _Q2.f32[1]) + (float)(v53 * _Q2.f32[0])))
  {
    return 0;
  }
  if ((vmovn_s32(vcgtq_f32(v4, v5)).u8[0] & 1) != 0)
    v65 = v5.f32[0];
  else
    v65 = v4.f32[0];
  if ((vmovn_s32(vcgtq_f32(v5, v4)).u8[0] & 1) == 0)
    v5.f32[0] = v4.f32[0];
  if (v6.f32[0] < v65)
    v65 = v6.f32[0];
  if (v6.f32[0] <= v5.f32[0])
    v6.f32[0] = v5.f32[0];
  if (v65 > _Q2.f32[0] || v6.f32[0] < (float)-_Q2.f32[0])
    return 0;
  if (v5.f32[1] >= v4.f32[1])
    v6.f32[0] = v4.f32[1];
  else
    v6.f32[0] = v5.f32[1];
  if (v5.f32[1] > v4.f32[1])
    _S5 = v5.f32[1];
  if (v6.f32[1] < v6.f32[0])
    v6.f32[0] = v6.f32[1];
  if (v6.f32[1] > _S5)
    _S5 = v6.f32[1];
  if (v6.f32[0] > _Q2.f32[1] || _S5 < (float)-_Q2.f32[1])
    return 0;
  if (v5.f32[2] >= v4.f32[2])
    v66 = v4.f32[2];
  else
    v66 = v5.f32[2];
  if (v5.f32[2] > v4.f32[2])
    v11 = v5.f32[2];
  if (v6.f32[2] < v66)
    v66 = v6.f32[2];
  if (v6.f32[2] > v11)
    v11 = v6.f32[2];
  if (v66 > _Q2.f32[2] || v11 < (float)-_Q2.f32[2])
    return 0;
  v67 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q19, (int32x4_t)_Q19), (int8x16_t)_Q19, 0xCuLL), _Q0)), _Q19, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
  return sub_1DCB1E6A0((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v67, v67), (int8x16_t)v67, 0xCuLL), v4, _Q2);
}

void sub_1DCB1EB18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB1EBDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB1EC5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB1EE50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCB1F070(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB1F0A0(void *a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  id v5;
  void *v11;
  const char *v12;
  uint64_t v13;
  float32x4_t v14;
  __int128 v15;
  void *v16;
  id v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  id v37;
  id v38;
  float32x4_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[4];
  float32x4_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  a3[1].i64[0] = 0;
  a3[1].i64[1] = 0;
  __asm { FMOV            V0.4S, #-1.0 }
  *a3 = _Q0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v11 = v5;
  else
    v11 = 0;
  v38 = v11;
  if (v38)
  {
    objc_msgSend_boundingBox(v38, v12, v13);
    v48 = v14;
    v49 = v15;
    sub_1DCB22BEC(a3, (__int128 *)&v48, (float32x4_t *)a2);
  }
  objc_msgSend_children(v5, v12, v13);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16)
  {
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v37 = v16;
    v17 = v16;
    v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v43, v52, 16);
    if (v21)
    {
      v22 = *(_QWORD *)v44;
      do
      {
        for (i = 0; i != v21; ++i)
        {
          if (*(_QWORD *)v44 != v22)
            objc_enumerationMutation(v17);
          v24 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
          objc_msgSend_transform(v24, v19, v20);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = v25;
          if (v25)
          {
            v41 = 0u;
            v42 = 0u;
            v39 = 0u;
            v40 = 0u;
            objc_msgSend_matrix(v25, v26, v27);
            v33 = 0;
            v34 = *(_OWORD *)(a2 + 16);
            v35 = *(_OWORD *)(a2 + 32);
            v36 = *(_OWORD *)(a2 + 48);
            v47[0] = *(_OWORD *)a2;
            v47[1] = v34;
            v47[2] = v35;
            v47[3] = v36;
            v48 = 0u;
            v49 = 0u;
            v50 = 0u;
            v51 = 0u;
            do
            {
              *(float32x4_t *)((char *)&v48 + v33 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(v47[v33])), v30, *(float32x2_t *)&v47[v33], 1), v31, (float32x4_t)v47[v33], 2), v32, (float32x4_t)v47[v33], 3);
              ++v33;
            }
            while (v33 != 4);
            v39 = v48;
            v40 = v49;
            v41 = v50;
            v42 = v51;
            sub_1DCB1F0A0(&v48, v24, &v39);
            sub_1DCB22B5C(a3, &v48);
          }
          else
          {
            sub_1DCB1F0A0(&v48, v24, a2);
            sub_1DCB22B5C(a3, &v48);
          }

        }
        v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v19, (uint64_t)&v43, v52, 16);
      }
      while (v21);
    }

    v16 = v37;
  }

}

void sub_1DCB1F2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1DCB1F3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DCB1F444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB1F5D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCB1F610(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_msgSend_addObject_(v6, v7, (uint64_t)v5);
  objc_msgSend_children(v5, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v9;
  if (v9)
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v13 = v9;
    v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v20, v24, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v21;
      do
      {
        v17 = 0;
        do
        {
          if (*(_QWORD *)v21 != v16)
            objc_enumerationMutation(v13);
          sub_1DCB1F610(a1, *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * v17++), v6);
        }
        while (v15 != v17);
        v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v18, (uint64_t)&v20, v24, 16);
      }
      while (v15);
    }

  }
  objc_msgSend_instance(v5, v10, v11, (_QWORD)v20);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19)
    sub_1DCB1F610(a1, v19, v6);

}

void sub_1DCB1F788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DCB1F870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DCB1FA54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB1FBFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB1FD18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB1FDFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB1FE94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB1FF48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1DCB1FF60(void *a1)
{
  id v1;
  void *v2;
  const char *v3;
  void *v4;
  const char *v5;
  void *v6;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)MEMORY[0x1E0CB35C8];
  v8 = CFSTR("MDLErrorKey");
  v9[0] = v1;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v3, (uint64_t)v9, &v8, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorWithDomain_code_userInfo_(v2, v5, (uint64_t)CFSTR("MDLErrorDomain"), 0, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1DCB2001C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1DCB20040(void *a1, const char *a2, uint64_t a3)
{
  void *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  objc_msgSend_layouts(a1, a2, a3, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v11, v15, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v3);
        if (objc_msgSend_stride(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i), v5, v6))
        {
          v7 = 1;
          goto LABEL_11;
        }
      }
      v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v5, (uint64_t)&v11, v15, 16);
      if (v7)
        continue;
      break;
    }
  }
LABEL_11:

  return v7;
}

void sub_1DCB20138(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB20538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  sub_1DCB20600((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_1DCB205F4()
{
  JUMPOUT(0x1DCB205D8);
}

uint64_t sub_1DCB20600(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));

  return a1;
}

uint64_t sub_1DCB20640(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1DCB20650(uint64_t a1)
{

}

void sub_1DCB20658(uint64_t a1)
{
  NSLog(CFSTR("connection to com.apple.ModelIO.AssetLoader was interrupted"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
}

void sub_1DCB20690(uint64_t a1)
{
  NSLog(CFSTR("connection to com.apple.ModelIO.AssetLoader was invalidated"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
}

void sub_1DCB206C8(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  NSLog(CFSTR("AssetLoader.loadURL errorHandler: %@"), v8);
  objc_msgSend_localizedDescription(v8, v3, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
}

void sub_1DCB20734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCB20748(uint64_t a1, void *a2)
{
  const char *v4;
  uint64_t v5;
  id v6;

  v6 = a2;
  if (objc_msgSend_length(v6, v4, v5))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }

}

void sub_1DCB207A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCB207DC(void *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  id v5;
  const char *v6;
  char *v7;
  std::string::size_type v8;
  int v9;
  std::string::size_type size;
  unint64_t v11;
  unsigned int v12;
  std::string *v13;
  int v14;
  unint64_t v15;
  std::string v16;
  std::string __str;
  char v18;

  memset(&__str, 0, sizeof(__str));
  objc_msgSend_path(a1, a2, a3);
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v7 = (char *)objc_msgSend_cStringUsingEncoding_(v5, v6, 4);
  sub_1DCB0345C(&__str, v7);

  v8 = std::string::rfind(&__str, 46, 0xFFFFFFFFFFFFFFFFLL);
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  a4->__r_.__value_.__r.__words[0] = 0;
  if (v8 != -1)
  {
    std::string::basic_string(&v16, &__str, v8 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v18);
    *a4 = v16;
    v9 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
    size = a4->__r_.__value_.__l.__size_;
    if (v9 >= 0)
      size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if (size)
    {
      v11 = 0;
      v12 = v9 >> 31;
      do
      {
        if ((v12 & 1) != 0)
          v13 = (std::string *)a4->__r_.__value_.__r.__words[0];
        else
          v13 = a4;
        v13->__r_.__value_.__s.__data_[v11] = __toupper(v13->__r_.__value_.__s.__data_[v11]);
        ++v11;
        v14 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
        v12 = v14 >> 31;
        v15 = a4->__r_.__value_.__l.__size_;
        if (v14 >= 0)
          v15 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      }
      while (v11 < v15);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1DCB208F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1DCB20A1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1DCB20B64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1DCB2106C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);
  v22 = va_arg(va1, _QWORD);

  sub_1DCAF8F08((uint64_t)va);
  sub_1DCB20600((uint64_t)va1);
  if (*(char *)(v12 - 137) < 0)
    operator delete(*(void **)(v12 - 160));
  if (*(char *)(v12 - 97) < 0)
    operator delete(*(void **)(v12 - 120));

  _Unwind_Resume(a1);
}

void sub_1DCB21564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v5;
  va_list va;

  va_start(va, a3);
  sub_1DCB81700(va);

  if (*(char *)(v5 - 49) < 0)
    operator delete(*(void **)(v5 - 72));

  _Unwind_Resume(a1);
}

void sub_1DCB21854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1DCB228C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32)
{
  void *v32;
  uint64_t i;

  for (i = 56; i != -8; i -= 8)
  _Unwind_Resume(a1);
}

float32x4_t *sub_1DCB22B5C(float32x4_t *result, float32x4_t *a2)
{
  float32x4_t v2;
  int8x16_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  float32x4_t v7;
  float32x4_t v8;

  v2 = a2[1];
  v3 = (int8x16_t)vcgtq_f32(v2, *a2);
  if (!v3.i32[0]
    || (v3.i32[0] = vextq_s8(v3, v3, 8uLL).u32[0],
        *(int32x2_t *)v3.i8 = vtst_s32(*(int32x2_t *)v3.i8, *(int32x2_t *)v3.i8),
        (v3.i8[4] & 1) == 0)
    || (v3.i8[0] & 1) == 0)
  {
    v4 = *result;
    v5 = result[1];
    v6 = (int8x16_t)vcgtq_f32(v5, *result);
    if (v6.i32[0]
      && (v6.i32[0] = vextq_s8(v6, v6, 8uLL).u32[0],
          *(int32x2_t *)v6.i8 = vtst_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v6.i8),
          (v6.i8[4] & 1) != 0)
      && (v6.i8[0] & 1) != 0)
    {
      result[1] = v2;
      v7 = *a2;
    }
    else
    {
      v5.i32[3] = 0;
      v2.i32[3] = 0;
      result[1] = vminnmq_f32(v5, v2);
      v8 = *a2;
      v4.i32[3] = 0;
      v8.i32[3] = 0;
      v7 = vmaxnmq_f32(v4, v8);
    }
    *result = v7;
  }
  return result;
}

float32x4_t *sub_1DCB22BEC(float32x4_t *a1, __int128 *a2, float32x4_t *a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float32x4_t v23[2];
  _OWORD v24[8];
  uint64_t v25;

  v3 = 0;
  v25 = *MEMORY[0x1E0C80C00];
  v4 = a2[1];
  HIDWORD(v4) = 1.0;
  v5 = *a2;
  HIDWORD(v5) = 1.0;
  v6 = v5;
  DWORD2(v6) = *((_QWORD *)a2 + 1);
  v7 = v4;
  DWORD2(v4) = DWORD2(v6);
  v8 = a2[1];
  DWORD1(v8) = HIDWORD(*(_QWORD *)a2);
  HIDWORD(v8) = 1.0;
  v9 = v8;
  DWORD2(v8) = DWORD2(v6);
  v10 = *a2;
  DWORD1(v10) = HIDWORD(*((_QWORD *)a2 + 2));
  HIDWORD(v10) = 1.0;
  v11 = v10;
  DWORD2(v10) = DWORD2(v6);
  DWORD2(v7) = *((_QWORD *)a2 + 3);
  v24[0] = v7;
  v24[1] = v4;
  DWORD2(v9) = DWORD2(v7);
  DWORD2(v11) = DWORD2(v7);
  v24[2] = v9;
  v24[3] = v8;
  v24[4] = v11;
  v24[5] = v10;
  DWORD2(v5) = DWORD2(v7);
  v24[6] = v5;
  v24[7] = v6;
  v12 = *a3;
  v13 = a3[1];
  v14 = a3[2];
  v15 = a3[3];
  do
  {
    v24[v3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, COERCE_FLOAT(v24[v3])), v13, *(float32x2_t *)&v24[v3], 1), v14, (float32x4_t)v24[v3], 2), v15, (float32x4_t)v24[v3], 3);
    ++v3;
  }
  while (v3 != 8);
  v16 = 0;
  v17 = (float32x4_t)xmmword_1DCC583F0;
  v18 = (float32x4_t)xmmword_1DCC58400;
  do
  {
    v19 = (float32x4_t)v24[v16];
    v20 = vbslq_s8((int8x16_t)vcgtq_f32(v18, v19), (int8x16_t)v19, (int8x16_t)v18);
    v18.i64[0] = v20.i64[0];
    v18.i32[2] = v20.i32[2];
    v21 = vbslq_s8((int8x16_t)vcgtq_f32(v19, v17), (int8x16_t)v19, (int8x16_t)v17);
    v17.i64[0] = v21.i64[0];
    v17.i32[2] = v21.i32[2];
    ++v16;
  }
  while (v16 != 8);
  v23[0] = v17;
  v23[1] = v18;
  return sub_1DCB22B5C(a1, v23);
}

void sub_1DCB22D30(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t NumElements;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t i;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  const void *v40;
  uint64_t v41;
  int *v42;
  char *v43;
  uint64_t v44;
  int v45;
  _DWORD *v46;
  int *v47;
  int v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;
  int *v52;
  int v53;
  _DWORD *v54;
  _DWORD *v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  char *v61;
  unsigned int v62;
  int v63;
  _DWORD *v64;
  char *v65;
  unsigned int v66;
  unsigned int j;
  unsigned int v68;
  unsigned int v69;
  char *v70;
  unint64_t v71;
  _OWORD *v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void *__p[3];
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;

  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(*(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 8));
  v9 = *(int *)(*(_QWORD *)(a1 + 8) + 88);
  v10 = NumElements / v9;
  sub_1DCB231F4((uint64_t)a4, NumElements / v9);
  v11 = *(_QWORD *)(a1 + 152);
  v12 = *a4;
  if (v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 184);
    do
      ++*(_DWORD *)(v12 + 4 * *(int *)(v14 + 4 * v13++));
    while (v11 > v13);
  }
  v84 = 0;
  v85 = 0;
  v86 = 0;
  sub_1DCB231F4((uint64_t)&v84, (a4[1] - v12) >> 2);
  v15 = v84;
  *(_DWORD *)v84 = 0;
  if (v10 >= 2)
  {
    v16 = 0;
    v17 = *a4;
    for (i = 1; i < v10; i = (v16++ + 2))
      v15[i] = *(_DWORD *)(v17 + 4 * v16) + v15[v16];
  }
  sub_1DCB23224((uint64_t)a3, *(_QWORD *)(a1 + 152));
  sub_1DCB23268((uint64_t)a2, *(_QWORD *)(a1 + 152), 0);
  v19 = *(_QWORD *)(a1 + 112);
  if (v19)
  {
    v20 = 0;
    v21 = 0;
    v22 = *(_QWORD *)(a1 + 144);
    v23 = *(_QWORD *)(a1 + 184);
    v24 = v84;
    v25 = *a3;
    do
    {
      v26 = *(_DWORD *)(v22 + 4 * v20);
      if (v26)
      {
        v27 = 0;
        v28 = v26 - 1;
        do
        {
          v29 = v21 + v27;
          v30 = (v28 + v27) % v26 + v21;
          if (v28 == v27)
            v31 = 0;
          else
            v31 = v27 + 1;
          v32 = v31 + v21;
          v33 = *(int *)(v23 + 4 * v29);
          v34 = *(_DWORD *)(v23 + 4 * v32);
          v35 = (_DWORD *)(v25 + 28 * v24[v33]);
          *v35 = *(_DWORD *)(v23 + 4 * v30);
          v35[1] = v33;
          v35[2] = v34;
          v35[3] = v20;
          v35[4] = v30;
          v35[5] = v29;
          v35[6] = v32;
          ++v24[v33];
          ++v27;
        }
        while (v26 != v27);
      }
      v21 += v26;
      ++v20;
    }
    while (v19 > v20);
  }
  if (NumElements < v9)
    goto LABEL_63;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  do
  {
    v39 = *(unsigned int *)(*a4 + 4 * v36);
    v40 = (const void *)(*a3 + 28 * v38);
    v82 = 0;
    v83 = 0;
    v81 = 0;
    sub_1DCB265E0(&v81, v40, (uint64_t)v40 + 28 * v39, v39);
    v78 = 0;
    v79 = 0;
    v80 = 0;
    sub_1DCB233E8((uint64_t)&v78, v39);
    if (!(_DWORD)v39)
      goto LABEL_43;
    v41 = 0;
    v42 = (int *)v81;
    v43 = (char *)v81 + 8;
    do
    {
      v44 = 0;
      v45 = v42[7 * v41];
      v46 = (char *)v78 + 8 * v41;
      v47 = (int *)v43;
      while (1)
      {
        v48 = *v47;
        v47 += 7;
        if (v48 == v45)
          break;
LABEL_24:
        if (v39 == ++v44)
          goto LABEL_27;
      }
      if (*v46 == -1)
      {
        *v46 = v44;
        goto LABEL_24;
      }
      *v46 = -2;
LABEL_27:
      v49 = 0;
      v50 = v42[7 * v41 + 2];
      v51 = (char *)v78 + 8 * v41 + 4;
      v52 = v42;
      while (2)
      {
        v53 = *v52;
        v52 += 7;
        if (v53 != v50)
        {
LABEL_31:
          if (v39 == ++v49)
            goto LABEL_34;
          continue;
        }
        break;
      }
      if (*v51 == -1)
      {
        *v51 = v49;
        goto LABEL_31;
      }
      *v51 = -2;
LABEL_34:
      ++v41;
    }
    while (v41 != v39);
    v54 = v78;
    v55 = (char *)v78 + 4;
    v56 = v39;
    do
    {
      v57 = *(v55 - 1);
      if ((v57 & 0x80000000) == 0)
      {
        v58 = v54[2 * v57 + 1];
        if (v58 < 0)
          *(v55 - 1) = v58;
      }
      v59 = *v55;
      if ((v59 & 0x80000000) == 0)
      {
        v60 = v54[2 * v59];
        if (v60 < 0)
          *v55 = v60;
      }
      v55 += 2;
      --v56;
    }
    while (v56);
LABEL_43:
    memset(__p, 0, sizeof(__p));
    sub_1DCB23268((uint64_t)__p, v39, 0);
    v61 = (char *)__p[0];
    if ((_DWORD)v39)
    {
      v62 = 0;
      v63 = 0;
      v64 = v78;
      v65 = (char *)v81;
      do
      {
        if (((*(_QWORD *)&v61[((unint64_t)v62 >> 3) & 0x1FFFFFF8] >> v62) & 1) == 0)
        {
          v66 = v64[2 * v62];
          for (j = v62; (v66 & 0x80000000) == 0; v66 = v64[2 * v66])
          {
            j = v66;
            if (v62 == v66)
              break;
          }
          v68 = j;
          while (1)
          {
            v69 = v64[2 * v68 + 1];
            *(_QWORD *)&v61[((unint64_t)(int)v68 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v68;
            v70 = &v65[28 * v68];
            v71 = v38 + v63;
            v72 = (_OWORD *)(*a3 + 28 * v71);
            v73 = *(_OWORD *)v70;
            *(_OWORD *)((char *)v72 + 12) = *(_OWORD *)(v70 + 12);
            *v72 = v73;
            v74 = *a2;
            v75 = v71 >> 6;
            v76 = 1 << (v38 + v63);
            if ((v69 & 0x80000000) != 0)
              break;
            *(_QWORD *)(v74 + 8 * v75) |= v76;
            ++v63;
            v68 = v69;
            if (j == v69)
              goto LABEL_54;
          }
          *(_QWORD *)(v74 + 8 * v75) &= ~v76;
          ++v63;
        }
LABEL_54:
        ++v62;
      }
      while (v62 != (_DWORD)v39);
      v38 += v39;
LABEL_57:
      operator delete(v61);
    }
    else if (__p[0])
    {
      goto LABEL_57;
    }
    if (v78)
    {
      v79 = v78;
      operator delete(v78);
    }
    if (v81)
    {
      v82 = v81;
      operator delete(v81);
    }
    v36 = ++v37;
  }
  while (v10 > v37);
LABEL_63:
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
}

void sub_1DCB23198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1DCB231F4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_1DCB26048((char **)a1, a2 - v2);
  }
}

void sub_1DCB23224(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1DCB26150((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 28 * a2;
  }
}

void sub_1DCB23268(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        sub_1DCAE4C44();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      sub_1DCB19F24(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      sub_1DCB26354(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        sub_1DCB26484(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        sub_1DCB26534((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_1DCB233CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1DCB233E8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_1DCB266AC((void **)a1, a2 - v2);
  }
}

void sub_1DCB23418(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, int a5, float a6)
{
  uint64_t v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::VtValue *v10;
  float v11;
  unint64_t v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  __int128 v17;
  float v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v23;
  uint64_t v24;
  float32x4_t v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  unsigned __int32 v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x4_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int32x2_t v54;
  BOOL v55;
  float32x4_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  float32x4_t v66;
  float32x4_t v67;
  float v68;
  float v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x4_t v73;
  float v74;
  float32x4_t v75;
  float v76;
  float32x2_t v77;
  float32x2_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  const char *v86;
  uint64_t v88;
  uint64_t v90;
  float v92;
  unsigned int v93;
  uint64_t v94;
  float32x4_t v96;
  __int128 v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int v101;
  uint64_t v102;
  __int32 v103;
  __n128 v104[2];
  uint64_t v105;
  _OWORD v106[2];
  uint64_t v107;

  v9 = *a4;
  v8 = a4[1];
  v10 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 8);
  v107 = 0;
  memset(v106, 0, sizeof(v106));
  sub_1DCB23B10((uint64_t)v106, *(unsigned int *)(a1 + 152));
  v105 = 0;
  memset(v104, 0, sizeof(v104));
  v94 = sub_1DCB23B80(v10);
  v11 = 1.0;
  if (a5)
    v11 = -1.0;
  v92 = v11;
  if (!atomic_load(MEMORY[0x1E0DF2618]))
    sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    v83 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v83)
    {
      v84 = (const char *)(v83 + 16);
      if (*(char *)(v83 + 39) < 0)
        v84 = *(const char **)v84;
    }
    else
    {
      v84 = "";
    }
    NSLog(CFSTR("Mesh %s does contain valid position data. Skipping normal computation.\n"), v84);
    goto LABEL_56;
  }
  v13 = v8 - v9;
  if ((v13 & 0x3FFFFFFFCLL) == 0)
  {
LABEL_50:
    sub_1DCB23BE8((_QWORD *)a1, v104, (uint64_t)v106);
    goto LABEL_56;
  }
  v14 = 3.1416;
  if (a6 <= 3.1416)
    v14 = a6;
  if (v14 < 0.0)
    v14 = 0.0;
  v18 = cosf(v14);
  v19 = 0;
  v20 = 0;
  v101 = 0;
  v88 = (v13 >> 2);
  while (1)
  {
    v21 = *(_DWORD *)(*a4 + 4 * v19);
    _ZF = !v21 || 2 * v21 == 0;
    v90 = v19;
    if (!_ZF)
      break;
LABEL_49:
    v20 += v21;
    v19 = v90 + 1;
    if (v90 + 1 == v88)
      goto LABEL_50;
  }
  v23 = 0;
  v24 = *(_QWORD *)(v94 + 32) + 12 * v19;
  v15.i64[0] = *(_QWORD *)v24;
  v15.i32[2] = *(_DWORD *)(v24 + 8);
  v100 = v15;
  v25 = 0uLL;
  LODWORD(v17) = 0;
  v26 = 1;
  v93 = v20;
  while (1)
  {
    v27 = v26 - 1;
    if (v26 - 1 - v23 >= v21)
    {
      __asm { FMOV            V1.4S, #1.0 }
      v73 = vmulq_f32(v25, vdivq_f32(_Q1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0)));
      v75 = vmulq_f32(v73, v73);
      v74 = vaddq_f32(vaddq_f32(v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 2)).f32[0];
      v75.i64[0] = 0;
      v75.i32[2] = 0;
      if (v74 > COERCE_FLOAT(512))
      {
        v76 = v74;
        v77 = vrsqrte_f32((float32x2_t)LODWORD(v74));
        v78 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v76), vmul_f32(v77, v77)), v77);
        v75 = vmulq_n_f32(v73, vmul_f32(v78, vrsqrts_f32((float32x2_t)LODWORD(v76), vmul_f32(v78, v78))).f32[0]);
      }
      v102 = v75.i64[0];
      v103 = v75.i32[2];
      sub_1DCB26A94((uint64_t)v104, &v102);
      ++v101;
      goto LABEL_49;
    }
    v28 = v27 % v21 + v20;
    v29 = *a3;
    v30 = (int *)(*a3 + 28 * v28);
    v31 = *(_QWORD *)(v94 + 32);
    v32 = v31 + 12 * *v30;
    v15.i64[0] = *(_QWORD *)v32;
    v15.i32[2] = *(_DWORD *)(v32 + 8);
    v34 = v30[2];
    v33 = v30 + 2;
    v35 = v31 + 12 * v34;
    v16.i64[0] = *(_QWORD *)v35;
    v16.i32[2] = *(_DWORD *)(v35 + 8);
    v36 = vsubq_f32(v15, v100);
    v37 = vsubq_f32(v16, v100);
    v38 = vmlaq_f32(vnegq_f32(vmulq_f32(v37, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL))), v36, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL));
    v39 = vmulq_f32(v38, v38);
    v40 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), v39), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1));
    v41 = 0uLL;
    if (v40.f32[0] > COERCE_FLOAT(512))
    {
      v38 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), (int8x16_t)v38, 0xCuLL);
      v42 = v40.i32[0];
      v43 = vrsqrte_f32((float32x2_t)v40.u32[0]);
      v44 = vmul_f32(vrsqrts_f32((float32x2_t)v42, vmul_f32(v43, v43)), v43);
      v41 = vmulq_n_f32(v38, vmul_f32(v44, vrsqrts_f32((float32x2_t)v42, vmul_f32(v44, v44))).f32[0]);
    }
    v45 = vmulq_n_f32(v41, v92);
    v46 = (int *)(v29 + 28 * (int)(v26 % v21 + v20));
    v47 = v31 + 12 * *v46;
    v38.i64[0] = *(_QWORD *)v47;
    v38.i32[2] = *(_DWORD *)(v47 + 8);
    v48 = v31 + 12 * v46[2];
    v40.i64[0] = *(_QWORD *)v48;
    v40.i32[2] = *(_DWORD *)(v48 + 8);
    v49 = vsubq_f32(v38, v100);
    v50 = vsubq_f32(v40, v100);
    v51 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32(v50, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL))), v49, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL));
    v52 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v51, v51), (int8x16_t)v51, 0xCuLL), v92);
    v53 = vmulq_f32(v52, v52);
    v54 = (int32x2_t)vaddq_f32(vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2)).u64[0];
    *(float *)v54.i32 = sqrtf(*(float *)v54.i32);
    v97 = v17;
    v98 = v25;
    v96 = v45;
    if (*(float *)v54.i32 >= 0.0001)
    {
      __asm { FMOV            V2.4S, #1.0 }
      v60 = vmulq_f32(vmulq_f32(v52, v45), vdivq_f32(_Q2, (float32x4_t)vdupq_lane_s32(v54, 0)));
      v55 = vaddq_f32(vaddq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2)).f32[0] < v18;
    }
    else
    {
      v55 = 1;
    }
    v61 = v101;
    if (v27 >= v21)
    {
      v62 = *(int *)(v29 + 28 * v28 + 20);
      sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v106);
      v61 = *(_DWORD *)(v107 + 4 * v62);
    }
    v63 = *(int *)(v29 + 28 * v28 + 20);
    sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v106);
    v17 = v97;
    v15.i32[3] = v96.i32[3];
    v25 = vaddq_f32(v96, v98);
    *(float *)&v17 = *(float *)&v97 + 1.0;
    *(_DWORD *)(v107 + 4 * v63) = v101;
    v64 = ((*(_QWORD *)(*a2 + ((v28 >> 3) & 0x1FFFFFF8)) >> v28) & 1) == 0 || v55;
    if ((v64 & 1) == 0 && *v46 == *v33)
      goto LABEL_37;
    __asm { FMOV            V1.4S, #1.0 }
    v66 = vmulq_f32(v25, vdivq_f32(_Q1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0)));
    v67 = vmulq_f32(v66, v66);
    v68 = vaddq_f32(vaddq_f32(v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 2)).f32[0];
    v99 = 0u;
    if (v68 > COERCE_FLOAT(512))
    {
      v69 = v68;
      v70 = vrsqrte_f32((float32x2_t)LODWORD(v68));
      v71 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v69), vmul_f32(v70, v70)), v70);
      v99 = vmulq_n_f32(v66, vmul_f32(v71, vrsqrts_f32((float32x2_t)LODWORD(v69), vmul_f32(v71, v71))).f32[0]);
    }
    if (v27 >= v21)
      break;
    v102 = v99.i64[0];
    v103 = v99.i32[2];
    sub_1DCB26A94((uint64_t)v104, &v102);
    ++v101;
    LODWORD(v17) = 0;
    v25 = 0uLL;
    if (v21 == v26)
    {
      v23 = v26;
      v20 = v93;
      if (*v46 != *v33)
        goto LABEL_49;
      goto LABEL_38;
    }
    v23 = v26;
LABEL_37:
    v20 = v93;
LABEL_38:
    if (v23 < v21 && v26++ < 2 * v21)
      continue;
    goto LABEL_49;
  }
  v20 = v93;
  v79 = *(int *)(*a3 + 28 * v93 + 20);
  sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v106);
  v80 = *(int *)(v107 + 4 * v79);
  if (v104[0].n128_u64[0] > v80)
  {
    sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v104);
    v81 = v105 + 12 * (int)v80;
    v15.i32[3] = v99.i32[3];
    *(_QWORD *)v81 = v99.i64[0];
    *(_DWORD *)(v81 + 8) = v99.i32[2];
    if ((v27 & 0x80000000) == 0)
    {
      do
      {
        v82 = *(int *)(*a3 + 28 * (--v26 % v21 + v93) + 20);
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v106);
        if (*(_DWORD *)(v107 + 4 * v82) != v101)
          break;
        sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v106);
        *(_DWORD *)(v107 + 4 * v82) = v61;
      }
      while (v26 > 0);
    }
    goto LABEL_49;
  }
  v85 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
  if (v85)
  {
    v86 = (const char *)(v85 + 16);
    if (*(char *)(v85 + 39) < 0)
      v86 = *(const char **)v86;
  }
  else
  {
    v86 = "";
  }
  NSLog(CFSTR("Mesh %s does contain invalid normals data. Skipping normal computation.\n"), v86);
LABEL_56:
  sub_1DCAEEE78((uint64_t)v104);
  sub_1DCAEEE78((uint64_t)v106);
}

void sub_1DCB23AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_1DCAEEE78((uint64_t)&a33);
  sub_1DCAEEE78(v33 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB23B10(uint64_t a1, unint64_t a2)
{
  int v5;
  int *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_1DCAEEFD4((_QWORD *)a1);
  v6 = &v5;
  sub_1DCB267B0((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_1DCB23B68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB23B80(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCB26964(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_1DCB23BE8(_QWORD *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t result;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  _QWORD *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v38;
  _QWORD *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  __n128 *v44;
  uint64_t *v45;
  _QWORD v46[2];
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  int v53;
  uint64_t v54[3];

  v54[2] = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v45 = a1 + 1;
  if (a1[2] == v5)
    goto LABEL_9;
  v44 = a2;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  do
  {
    MEMORY[0x1DF0D1254](v46, "normals");
    v10 = *(_QWORD *)(v5 + 96 * v6 + 56);
    v11 = (unsigned int *)(v46[0] & 0xFFFFFFFFFFFFFFF8);
    if ((v46[0] & 7) != 0)
    {
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    v13 = v10 & 0xFFFFFFFFFFFFFFF8;
    v9 &= v13 != (_QWORD)v11;
    if ((unsigned int *)v13 == v11)
      v8 = v7;
    v5 = a1[1];
    v6 = ++v7;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 5) > v7);
  a2 = v44;
  if ((v9 & 1) != 0)
  {
LABEL_9:
    v54[0] = 0;
    v54[1] = 0;
    sub_1DCB24508(v54, a2);
    sub_1DCB25EEC(v46, v54);
    v14 = *(_OWORD *)(a3 + 16);
    v47 = *(_OWORD *)a3;
    v48 = v14;
    v15 = *(_QWORD *)(a3 + 32);
    v49 = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 - 16);
      if (*((_QWORD *)&v48 + 1))
        v16 = (unint64_t *)*((_QWORD *)&v48 + 1);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    MEMORY[0x1DF0D1254](&v50, "normals");
    MEMORY[0x1DF0D1254](v51, "normals");
    v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
    if (!v18)
      v18 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    v51[1] = *((_QWORD *)v18 + 77);
    MEMORY[0x1DF0D1254](&v52, "faceVarying");
    v53 = 1;
    v19 = a1[2];
    if (v19 >= a1[3])
    {
      v20 = sub_1DCB274E0(v45, (uint64_t)v46);
    }
    else
    {
      sub_1DCB275EC((uint64_t)(a1 + 3), (_QWORD *)a1[2], (uint64_t)v46);
      v20 = v19 + 96;
      a1[2] = v19 + 96;
    }
    a1[2] = v20;
    if ((v52 & 7) != 0)
    {
      v21 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if ((v51[0] & 7) != 0)
    {
      v23 = (unsigned int *)(v51[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    if ((v50 & 7) != 0)
    {
      v25 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    sub_1DCAEEE78((uint64_t)&v47);
    sub_1DCAEEE2C((uint64_t)v46);
    return sub_1DCAEEE2C((uint64_t)v54);
  }
  else
  {
    sub_1DCB24508((uint64_t *)(v5 + 96 * v8), v44);
    sub_1DCB24648(*v45 + 96 * v8 + 16, (__int128 *)a3);
    MEMORY[0x1DF0D1254](v46, "normals");
    v28 = (_QWORD *)(*v45 + 96 * v8 + 56);
    if (v46 == v28)
    {
      if ((v46[0] & 7) != 0)
      {
        v31 = (unsigned int *)(v46[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
    }
    else
    {
      if ((*v28 & 7) != 0)
      {
        v29 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      *v28 = v46[0];
    }
    MEMORY[0x1DF0D1254](v46, "normals");
    v33 = (_QWORD *)(*v45 + 96 * v8 + 64);
    if (v46 == v33)
    {
      if ((v46[0] & 7) != 0)
      {
        v36 = (unsigned int *)(v46[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
    }
    else
    {
      if ((*v33 & 7) != 0)
      {
        v34 = (unsigned int *)(*v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      *v33 = v46[0];
    }
    v38 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
    if (!v38)
      v38 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    *(_QWORD *)(*v45 + 96 * v8 + 72) = *((_QWORD *)v38 + 77);
    result = MEMORY[0x1DF0D1254](v46, "faceVarying");
    v39 = (_QWORD *)(*v45 + 96 * v8 + 80);
    if (v46 == v39)
    {
      if ((v46[0] & 7) != 0)
      {
        v42 = (unsigned int *)(v46[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v43 = __ldxr(v42);
        while (__stlxr(v43 - 2, v42));
      }
    }
    else
    {
      if ((*v39 & 7) != 0)
      {
        v40 = (unsigned int *)(*v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      *v39 = v46[0];
    }
    *(_DWORD *)(*v45 + 96 * v8 + 88) = 1;
  }
  return result;
}

void sub_1DCB24074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_1DCB245BC(va);
  sub_1DCAEEE2C(v4 - 104);
  _Unwind_Resume(a1);
}

void sub_1DCB2412C(uint64_t a1, int a2)
{
  uint64_t v4;
  float v5;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  float v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  float v26;
  float32x2_t v27;
  float32x2_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  float32x4_t v33;
  float v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int32x4_t v41;
  float32x4_t v42;
  unsigned __int32 v43;
  float32x2_t v44;
  float32x2_t v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  const char *v49;
  float v50;
  uint64_t v51;
  __int32 v52;
  __n128 v53[2];
  uint64_t v54;
  _OWORD v55[2];
  uint64_t v56;

  v56 = 0;
  memset(v55, 0, sizeof(v55));
  sub_1DCB23B10((uint64_t)v55, *(unsigned int *)(a1 + 152));
  v54 = 0;
  memset(v53, 0, sizeof(v53));
  v4 = sub_1DCB23B80(*(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 8));
  v5 = 1.0;
  if (a2)
    v5 = -1.0;
  v50 = v5;
  if (!atomic_load(MEMORY[0x1E0DF2618]))
    sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    if (*(_QWORD *)(a1 + 112))
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(unsigned int *)(*(_QWORD *)(a1 + 144) + 4 * v9);
        if ((_DWORD)v12)
        {
          v13 = 0;
          v14 = *(_QWORD *)(a1 + 184);
          v15 = *(_QWORD *)(v4 + 32);
          v16.i64[0] = 0;
          v16.i32[2] = 0;
          v17 = 1.0;
          do
          {
            v18 = ((int)v12 - 1 + (int)v13) % v12 + v11;
            v19 = v12 - 1 == v13;
            v20 = v15 + 12 * *(int *)(v14 + 4 * (v11 + v13));
            v8.i64[0] = *(_QWORD *)v20;
            v8.i32[2] = *(_DWORD *)(v20 + 8);
            ++v13;
            v21 = v15 + 12 * *(int *)(v14 + 4 * v18);
            v7.i64[0] = *(_QWORD *)v21;
            v7.i32[2] = *(_DWORD *)(v21 + 8);
            if (v19)
              v22 = 0;
            else
              v22 = v13;
            v23 = vsubq_f32(v7, v8);
            v24 = vmulq_f32(v23, v23);
            v25 = vaddq_f32(vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2)).f32[0];
            v7 = 0uLL;
            if (v25 > COERCE_FLOAT(512))
            {
              v26 = v25;
              v27 = vrsqrte_f32((float32x2_t)LODWORD(v25));
              v28 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v26), vmul_f32(v27, v27)), v27);
              v7 = vmulq_n_f32(v23, vmul_f32(v28, vrsqrts_f32((float32x2_t)LODWORD(v26), vmul_f32(v28, v28))).f32[0]);
            }
            v29 = v15 + 12 * *(int *)(v14 + 4 * (v22 + v11));
            v23.i64[0] = *(_QWORD *)v29;
            v23.i32[2] = *(_DWORD *)(v29 + 8);
            v30 = vsubq_f32(v23, v8);
            v31 = vmulq_f32(v30, v30);
            v32 = vaddq_f32(vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2)).f32[0];
            v33 = 0uLL;
            if (v32 > COERCE_FLOAT(512))
            {
              v34 = v32;
              v35 = vrsqrte_f32((float32x2_t)LODWORD(v32));
              v36 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v34), vmul_f32(v35, v35)), v35);
              v33 = vmulq_n_f32(v30, vmul_f32(v36, vrsqrts_f32((float32x2_t)LODWORD(v34), vmul_f32(v36, v36))).f32[0]);
            }
            v37 = vmulq_f32(v7, v7);
            v8 = vaddq_f32(vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2));
            if (sqrtf(v8.f32[0]) != 0.0)
            {
              v38 = vmulq_f32(v33, v33);
              v19 = sqrtf(vaddq_f32(vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2)).f32[0]) == 0.0;
              v39 = vmulq_f32(v33, v7);
              v8 = vaddq_f32(vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2));
              v8.f32[0] = fabsf(v8.f32[0]);
              if (!v19 && v8.f32[0] < v17)
              {
                v41 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32(v33, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL))), v7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), (int8x16_t)v33, 0xCuLL));
                v42 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v41, v41), (int8x16_t)v41, 0xCuLL), v50);
                v16 = vmulq_f32(v42, v42);
                v7 = vaddq_f32(vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2));
                v16.i64[0] = 0;
                v16.i32[2] = 0;
                if (v7.f32[0] > COERCE_FLOAT(512))
                {
                  v43 = v7.i32[0];
                  v44 = vrsqrte_f32((float32x2_t)v7.u32[0]);
                  v45 = vmul_f32(vrsqrts_f32((float32x2_t)v43, vmul_f32(v44, v44)), v44);
                  v16 = vmulq_n_f32(v42, vmul_f32(v45, vrsqrts_f32((float32x2_t)v43, vmul_f32(v45, v45))).f32[0]);
                }
                v17 = v8.f32[0];
              }
            }
          }
          while (v12 != v13);
        }
        else
        {
          v16.i64[0] = 0;
          v16.i32[2] = 0;
        }
        v51 = v16.i64[0];
        v52 = v16.i32[2];
        sub_1DCB26A94((uint64_t)v53, &v51);
        v46 = v12;
        v47 = v11;
        if ((_DWORD)v12)
        {
          do
          {
            sub_1DCAF0F78((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v55);
            *(_DWORD *)(v56 + 4 * v47++) = v10;
            --v46;
          }
          while (v46);
        }
        v11 += v12;
        v9 = ++v10;
      }
      while (*(_QWORD *)(a1 + 112) > (unint64_t)v10);
    }
    sub_1DCB23BE8((_QWORD *)a1, v53, (uint64_t)v55);
  }
  else
  {
    v48 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v48)
    {
      v49 = (const char *)(v48 + 16);
      if (*(char *)(v48 + 39) < 0)
        v49 = *(const char **)v49;
    }
    else
    {
      v49 = "";
    }
    NSLog(CFSTR("Mesh %s does contain valid position data. Skipping normal computation.\n"), v49);
  }
  sub_1DCAEEE78((uint64_t)v53);
  sub_1DCAEEE78((uint64_t)v55);
}

void sub_1DCB244D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_1DCAEEE78((uint64_t)va);
  sub_1DCAEEE78((uint64_t)va1);
  _Unwind_Resume(a1);
}

__n128 sub_1DCB24508(uint64_t *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_1DCB26964((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_1DCB26C28(a1, (uint64_t)v10);
    sub_1DCAEEE78((uint64_t)v10);
  }
  v4 = (__n128 *)sub_1DCB27344(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_1DCB245A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB245BC(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  v2 = a1[10];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = a1[8];
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = a1[7];
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  sub_1DCAEEE78((uint64_t)(a1 + 2));
  return sub_1DCAEEE2C((uint64_t)a1);
}

uint64_t sub_1DCB24648(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_1DCAEEE78(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_1DCAEEE78((uint64_t)&v9);
  }
  return a1;
}

void sub_1DCB246E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB24700(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 112);
}

uint64_t sub_1DCB24710(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 144) + 4 * a2);
}

float sub_1DCB24724(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  float result;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v6 = *(_QWORD *)(sub_1DCB23B80(*(pxrInternal__aapl__pxrReserved__::VtValue **)(v5 + 8)) + 32)
     + 12 * *(int *)(*(_QWORD *)(v5 + 184) + 4 * (3 * a3 + a4));
  *(_DWORD *)a2 = *(_DWORD *)v6;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(v6 + 4);
  result = *(float *)(v6 + 8);
  *(float *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1DCB24794(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  uint64_t v32;

  v5 = *(_QWORD *)(result + 8);
  v6 = *(unsigned int *)(v5 + 4);
  if ((_DWORD)v6 == -1)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return result;
  }
  v9 = *(_QWORD *)(v5 + 8);
  v10 = sub_1DCB23B80((pxrInternal__aapl__pxrReserved__::VtValue *)(*(_QWORD *)(v9 + 8) + 96 * v6));
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 + 96 * v6;
  v13 = *(_QWORD *)(v12 + 80);
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      v13 &= 0xFFFFFFFFFFFFFFF8;
  }
  result = MEMORY[0x1DF0D1254](&v32, "faceVarying");
  v16 = 3 * a3;
  v17 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
  v18 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 7) != 0)
  {
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = (v16 + a4);
  v21 = (_QWORD *)(v12 + 16);
  if (v17 == v18)
  {
    if (!*v21)
    {
      v30 = (_DWORD *)(*(_QWORD *)(v10 + 32) + 12 * v20);
      goto LABEL_31;
    }
    LODWORD(v29) = *(_DWORD *)(*(_QWORD *)(v11 + 96 * v6 + 48) + 4 * v20);
    goto LABEL_27;
  }
  result = MEMORY[0x1DF0D1254](&v32, "vertex");
  v22 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 7) != 0)
  {
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  if (v17 == v22)
  {
    v29 = *(int *)(*(_QWORD *)(v9 + 184) + 4 * v20);
    if (!*v21)
      goto LABEL_27;
    goto LABEL_26;
  }
  result = MEMORY[0x1DF0D1254](&v32, "uniform");
  v24 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 7) != 0)
  {
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if (v17 == v24)
  {
    v29 = v20 / 3uLL;
    if (!*v21)
    {
      v30 = (_DWORD *)(*(_QWORD *)(v10 + 32) + 12 * v29);
      goto LABEL_31;
    }
LABEL_26:
    LODWORD(v29) = *(_DWORD *)(*(_QWORD *)(v11 + 96 * v6 + 48) + 4 * v29);
LABEL_27:
    v30 = (_DWORD *)(*(_QWORD *)(v10 + 32) + 12 * (int)v29);
    goto LABEL_31;
  }
  result = MEMORY[0x1DF0D1254](&v32, "constant");
  v26 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 7) != 0)
  {
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  if (v17 != v26)
  {
    *(_QWORD *)a2 = 0;
    v28 = 0;
    goto LABEL_32;
  }
  v30 = *(_DWORD **)(v10 + 32);
LABEL_31:
  *(_DWORD *)a2 = *v30;
  *(_DWORD *)(a2 + 4) = v30[1];
  v28 = v30[2];
LABEL_32:
  *(_DWORD *)(a2 + 8) = v28;
  if ((v13 & 7) != 0)
  {
    do
      v31 = __ldxr(v17);
    while (__stlxr(v31 - 2, v17));
  }
  return result;
}

void sub_1DCB249FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB24A28(uint64_t result, uint64_t a2, int a3, int a4)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  uint64_t v32;

  v5 = *(unsigned int **)(result + 8);
  v6 = *v5;
  if ((_DWORD)v6 == -1)
  {
    *(_QWORD *)a2 = 0;
    return result;
  }
  v9 = *((_QWORD *)v5 + 1);
  v10 = sub_1DCB24C90((pxrInternal__aapl__pxrReserved__::VtValue *)(*(_QWORD *)(v9 + 8) + 96 * v6));
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 + 96 * v6;
  v13 = *(_QWORD *)(v12 + 80);
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      v13 &= 0xFFFFFFFFFFFFFFF8;
  }
  result = MEMORY[0x1DF0D1254](&v32, "faceVarying");
  v16 = 3 * a3;
  v17 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
  v18 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 7) != 0)
  {
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = (v16 + a4);
  v21 = (_QWORD *)(v12 + 16);
  if (v17 == v18)
  {
    if (!*v21)
    {
      v30 = (_DWORD *)(*(_QWORD *)(v10 + 32) + 8 * v20);
      goto LABEL_28;
    }
    v29 = *(int *)(*(_QWORD *)(v11 + 96 * v6 + 48) + 4 * v20);
    goto LABEL_27;
  }
  result = MEMORY[0x1DF0D1254](&v32, "vertex");
  v22 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 7) != 0)
  {
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  if (v17 == v22)
  {
    v29 = *(int *)(*(_QWORD *)(v9 + 184) + 4 * v20);
    goto LABEL_25;
  }
  result = MEMORY[0x1DF0D1254](&v32, "uniform");
  v24 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 7) != 0)
  {
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if (v17 == v24)
  {
    v29 = v20 / 3uLL;
LABEL_25:
    if (*v21)
      v29 = *(int *)(*(_QWORD *)(v11 + 96 * v6 + 48) + 4 * v29);
LABEL_27:
    v30 = (_DWORD *)(*(_QWORD *)(v10 + 32) + 8 * v29);
    goto LABEL_28;
  }
  result = MEMORY[0x1DF0D1254](&v32, "constant");
  v26 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 7) != 0)
  {
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  if (v17 != v26)
  {
    *(_DWORD *)a2 = 0;
    v28 = 0;
    goto LABEL_29;
  }
  v30 = *(_DWORD **)(v10 + 32);
LABEL_28:
  *(_DWORD *)a2 = *v30;
  v28 = v30[1];
LABEL_29:
  *(_DWORD *)(a2 + 4) = v28;
  if ((v13 & 7) != 0)
  {
    do
      v31 = __ldxr(v17);
    while (__stlxr(v31 - 2, v17));
  }
  return result;
}

void sub_1DCB24C64(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB24C90(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_1DCB27AA4(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

void sub_1DCB24CF8(uint64_t a1, int *a2, int a3, int a4, float a5)
{
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = 3 * a3 + a4;
  v9 = *a2;
  sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v7 + 16));
  *(_DWORD *)(*(_QWORD *)(v7 + 48) + 16 * v8) = v9;
  v10 = a2[1];
  sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v7 + 16));
  *(_DWORD *)(*(_QWORD *)(v7 + 48) + 16 * v8 + 4) = v10;
  v11 = a2[2];
  sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v7 + 16));
  *(_DWORD *)(*(_QWORD *)(v7 + 48) + 16 * v8 + 8) = v11;
  sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v7 + 16));
  *(float *)(*(_QWORD *)(v7 + 48) + 16 * v8 + 12) = a5;
}

void sub_1DCB24D94(uint64_t a1, int *a2, int *a3, int a4, int a5, int a6)
{
  _QWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  float v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;

  v9 = *(_QWORD **)(a1 + 8);
  v10 = (3 * a5 + a6);
  v11 = *a2;
  sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 2));
  *(_DWORD *)(v9[6] + 16 * v10) = v11;
  v12 = a2[1];
  sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 2));
  *(_DWORD *)(v9[6] + 16 * v10 + 4) = v12;
  v13 = a2[2];
  sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 2));
  *(_DWORD *)(v9[6] + 16 * v10 + 8) = v13;
  if (a4)
    v14 = 1.0;
  else
    v14 = -1.0;
  sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 2));
  *(float *)(v9[6] + 16 * v10 + 12) = v14;
  v15 = *a3;
  sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 7));
  v16 = v10 + 2 * v10;
  *(_DWORD *)(v9[11] + 4 * v16) = v15;
  v17 = a3[1];
  sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 7));
  *(_DWORD *)(v9[11] + 4 * v16 + 4) = v17;
  v18 = a3[2];
  sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 7));
  *(_DWORD *)(v9[11] + 4 * v16 + 8) = v18;
}

uint64_t sub_1DCB24EA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  const char *v24;
  __int128 v25;
  __int128 v26;
  unint64_t v28;
  const char *v29;
  unint64_t v30;
  const char *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  *(_QWORD *)a1 = -1;
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) == v5)
  {
    if (*(_DWORD *)(a1 + 4) != -1)
    {
LABEL_47:
      v28 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v28)
      {
        v29 = (const char *)(v28 + 16);
        if (*(char *)(v28 + 39) < 0)
          v29 = *(const char **)v29;
      }
      else
      {
        v29 = "";
      }
      NSLog(CFSTR("Mesh %s does not contain valid texture coordinate data. Skipping tangent computation.\n"), v29);
      return 0;
    }
LABEL_50:
    v30 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v30)
    {
      v31 = (const char *)(v30 + 16);
      if (*(char *)(v30 + 39) < 0)
        v31 = *(const char **)v31;
    }
    else
    {
      v31 = "";
    }
    NSLog(CFSTR("Mesh %s does contain valid normal data. Skipping tangent computation.\n"), v31);
    return 0;
  }
  v7 = 0;
  v8 = 0;
  v9 = -1;
  do
  {
    v10 = v5 + 96 * v7;
    MEMORY[0x1DF0D1254](&v32, "normals");
    v11 = *(_QWORD *)(v10 + 56);
    v12 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    if ((v32 & 7) != 0)
    {
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    if ((unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8) == v12)
    {
      *(_DWORD *)(a1 + 4) = v8;
      goto LABEL_28;
    }
    if (!atomic_load(MEMORY[0x1E0DF2618]))
      sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
    {
      if (!atomic_load(MEMORY[0x1E0DF2618]))
        sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
      if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
        goto LABEL_28;
    }
    if (v9 == -1)
      v9 = v8;
    v16 = *(_QWORD *)(a2 + 8) + 96 * v7;
    MEMORY[0x1DF0D1260](&v32, a3);
    v17 = (unsigned int *)(*(_QWORD *)(v16 + 56) & 0xFFFFFFFFFFFFFFF8);
    v18 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    if (v17 == (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8))
    {
      if ((v32 & 7) != 0)
      {
        do
          v20 = __ldxr(v17);
        while (__stlxr(v20 - 2, v17));
      }
LABEL_27:
      *(_DWORD *)a1 = v8;
      goto LABEL_28;
    }
    if (*((char *)a3 + 23) < 0)
    {
      if (a3[1])
      {
LABEL_17:
        v19 = 0;
        goto LABEL_24;
      }
    }
    else if (*((_BYTE *)a3 + 23))
    {
      goto LABEL_17;
    }
    v19 = 1;
LABEL_24:
    if ((v32 & 7) != 0)
    {
      do
        v21 = __ldxr(v18);
      while (__stlxr(v21 - 2, v18));
    }
    if ((v19 & 1) != 0)
      goto LABEL_27;
LABEL_28:
    v5 = *(_QWORD *)(a2 + 8);
    v7 = ++v8;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 16) - v5) >> 5) > v8);
  v22 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == -1 && v9 != -1)
  {
    v23 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v23)
    {
      v24 = (const char *)(v23 + 16);
      if (*(char *)(v23 + 39) < 0)
        v24 = *(const char **)v24;
    }
    else
    {
      v24 = "";
    }
    if (*((char *)a3 + 23) < 0)
      a3 = (uint64_t *)*a3;
    NSLog(CFSTR("Warning: Mesh %s: unable to find uv set name: %s, use first uv set instead.\n"), v24, a3);
    *(_DWORD *)a1 = v9;
    v22 = v9;
  }
  if (*(_DWORD *)(a1 + 4) == -1)
    goto LABEL_50;
  if (v22 == -1)
    goto LABEL_47;
  sub_1DCAEEB34((uint64_t)&v32, *(unsigned int *)(a2 + 152));
  if ((__int128 *)(a1 + 16) != &v32)
  {
    sub_1DCAEEE78(a1 + 16);
    v25 = v33;
    *(_OWORD *)(a1 + 16) = v32;
    *(_OWORD *)(a1 + 32) = v25;
    v32 = 0u;
    v33 = 0u;
    *(_QWORD *)(a1 + 48) = v34;
    v34 = 0;
  }
  sub_1DCAEEE78((uint64_t)&v32);
  sub_1DCB2525C((uint64_t)&v32, *(unsigned int *)(a2 + 152));
  if ((__int128 *)(a1 + 56) != &v32)
  {
    sub_1DCAEEE78(a1 + 56);
    v26 = v33;
    *(_OWORD *)(a1 + 56) = v32;
    *(_OWORD *)(a1 + 72) = v26;
    v32 = 0u;
    v33 = 0u;
    *(_QWORD *)(a1 + 88) = v34;
    v34 = 0;
  }
  sub_1DCAEEE78((uint64_t)&v32);
  *(_QWORD *)(a1 + 8) = a2;
  return 1;
}

void sub_1DCB25228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1DCAEEE78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB2525C(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  int v6;
  uint64_t *v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = 0;
  v5 = 0;
  sub_1DCAEEFD4((_QWORD *)a1);
  v7 = &v5;
  sub_1DCB27B7C((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_1DCB252B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1DCAEEE78(v1);
  _Unwind_Resume(a1);
}

void sub_1DCB252D0(_QWORD *a1, uint64_t *a2, void *a3, void *a4, uint64_t a5)
{
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  id v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int *v26;
  unsigned int v27;
  id v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  id v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  id v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  _QWORD *v68;
  id v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _QWORD v74[2];
  _OWORD v75[2];
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[2];
  uint64_t v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v70 = a4;
  v10 = a2[1];
  v9 = a2 + 1;
  if (a2[2] == v10)
  {
    v73 = 0;
    v71 = 0u;
    v72 = 0u;
  }
  else
  {
    v68 = a1;
    v11 = 0;
    v12 = 0;
    v13 = -1;
    do
    {
      v14 = objc_retainAutorelease(v8);
      v17 = objc_msgSend_UTF8String(v14, v15, v16);
      MEMORY[0x1DF0D1254](v74, v17);
      v18 = *(_QWORD *)(v10 + 96 * v11 + 56);
      v19 = (unsigned int *)(v74[0] & 0xFFFFFFFFFFFFFFF8);
      if ((v74[0] & 7) != 0)
      {
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      if ((unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8) == v19)
        v13 = v12;
      v10 = a2[1];
      v11 = ++v12;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[2] - v10) >> 5) > v12);
    v73 = 0;
    v71 = 0u;
    v72 = 0u;
    a1 = v68;
    if (v13 != -1)
    {
      sub_1DCB25844((_QWORD *)(v10 + 96 * v13), v68);
      sub_1DCB24648(*v9 + 96 * v13 + 16, &v71);
      v21 = objc_retainAutorelease(v14);
      v24 = objc_msgSend_UTF8String(v21, v22, v23);
      MEMORY[0x1DF0D1254](v74, v24);
      v25 = (_QWORD *)(*v9 + 96 * v13 + 56);
      if (v74 == v25)
      {
        if ((v74[0] & 7) != 0)
        {
          v48 = (unsigned int *)(v74[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v49 = __ldxr(v48);
          while (__stlxr(v49 - 2, v48));
        }
      }
      else
      {
        if ((*v25 & 7) != 0)
        {
          v26 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
          do
            v27 = __ldxr(v26);
          while (__stlxr(v27 - 2, v26));
        }
        *v25 = v74[0];
      }
      v50 = objc_retainAutorelease(v21);
      v53 = objc_msgSend_UTF8String(v50, v51, v52);
      MEMORY[0x1DF0D1254](v74, v53);
      v54 = (_QWORD *)(*v9 + 96 * v13 + 64);
      if (v74 == v54)
      {
        if ((v74[0] & 7) != 0)
        {
          v57 = (unsigned int *)(v74[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v58 = __ldxr(v57);
          while (__stlxr(v58 - 2, v57));
        }
      }
      else
      {
        if ((*v54 & 7) != 0)
        {
          v55 = (unsigned int *)(*v54 & 0xFFFFFFFFFFFFFFF8);
          do
            v56 = __ldxr(v55);
          while (__stlxr(v56 - 2, v55));
        }
        *v54 = v74[0];
      }
      *(_QWORD *)(*v9 + 96 * v13 + 72) = a5;
      v59 = objc_retainAutorelease(v70);
      v62 = objc_msgSend_UTF8String(v59, v60, v61);
      MEMORY[0x1DF0D1254](v74, v62);
      v63 = (_QWORD *)(*v9 + 96 * v13 + 80);
      if (v74 == v63)
      {
        if ((v74[0] & 7) != 0)
        {
          v66 = (unsigned int *)(v74[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v67 = __ldxr(v66);
          while (__stlxr(v67 - 2, v66));
        }
      }
      else
      {
        if ((*v63 & 7) != 0)
        {
          v64 = (unsigned int *)(*v63 & 0xFFFFFFFFFFFFFFF8);
          do
            v65 = __ldxr(v64);
          while (__stlxr(v65 - 2, v64));
        }
        *v63 = v74[0];
      }
      *(_DWORD *)(*v9 + 96 * v13 + 88) = 1;
      goto LABEL_48;
    }
  }
  sub_1DCB25EEC(v74, a1);
  v75[0] = v71;
  v75[1] = v72;
  v76 = v73;
  v28 = objc_retainAutorelease(v8);
  v31 = objc_msgSend_UTF8String(v28, v29, v30);
  MEMORY[0x1DF0D1254](&v77, v31);
  v32 = objc_retainAutorelease(v28);
  v35 = objc_msgSend_UTF8String(v32, v33, v34);
  MEMORY[0x1DF0D1254](v78, v35);
  v78[1] = a5;
  v36 = objc_retainAutorelease(v70);
  v39 = objc_msgSend_UTF8String(v36, v37, v38);
  MEMORY[0x1DF0D1254](&v79, v39);
  v80 = 1;
  v40 = a2[2];
  if (v40 >= a2[3])
  {
    v41 = sub_1DCB274E0(a2 + 1, (uint64_t)v74);
  }
  else
  {
    sub_1DCB275EC((uint64_t)(a2 + 3), (_QWORD *)a2[2], (uint64_t)v74);
    v41 = v40 + 96;
    a2[2] = v40 + 96;
  }
  a2[2] = v41;
  if ((v79 & 7) != 0)
  {
    v42 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  if ((v78[0] & 7) != 0)
  {
    v44 = (unsigned int *)(v78[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  if ((v77 & 7) != 0)
  {
    v46 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v47 = __ldxr(v46);
    while (__stlxr(v47 - 2, v46));
  }
  sub_1DCAEEE78((uint64_t)v75);
  sub_1DCAEEE2C((uint64_t)v74);
LABEL_48:
  sub_1DCAEEE78((uint64_t)&v71);

}

void sub_1DCB25764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, ...)
{
  void *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_1DCB245BC(va1);
  sub_1DCAEEE78((uint64_t)va);

  _Unwind_Resume(a1);
}

_QWORD *sub_1DCB25844(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1[1])
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    sub_1DCB25FE8((uint64_t)&v14, (uint64_t)&v12);
    v4 = a1[1];
    v5 = ~*((_DWORD *)a1 + 2);
    v13 = v4;
    if ((v5 & 3) != 0)
      (*(void (**)(_QWORD *, uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a1, &v12);
    else
      v12 = *a1;
    a1[1] = 0;
    if (v15)
      (*(void (**)(uint64_t *))(v15 + 32))(&v14);
    v6 = a2 + 1;
    if (!a2[1])
    {
      v8 = a1[1];
      if (v8 && (a1[1] & 3) != 3)
        (*(void (**)(_QWORD *))((v8 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      a1[1] = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v6 = a2 + 1;
    if (!a2[1])
      return a1;
    v12 = 0;
    v13 = 0;
  }
  v14 = 0;
  v15 = 0;
  sub_1DCB25FE8((uint64_t)&v14, (uint64_t)a1);
  v7 = *v6;
  a1[1] = *v6;
  if ((~*(_DWORD *)v6 & 3) != 0)
    (*(void (**)(_QWORD *, _QWORD *))((v7 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
  else
    *a1 = *a2;
  *v6 = 0;
  if (v15)
    (*(void (**)(uint64_t *))(v15 + 32))(&v14);
LABEL_19:
  if (v13)
  {
    v14 = 0;
    v15 = 0;
    sub_1DCB25FE8((uint64_t)&v14, (uint64_t)a2);
    v9 = v13;
    v10 = ~(_BYTE)v13;
    *v6 = v13;
    if ((v10 & 3) != 0)
      (*(void (**)(uint64_t *, _QWORD *))((v9 & 0xFFFFFFFFFFFFFFF8) + 40))(&v12, a2);
    else
      *a2 = v12;
    v13 = 0;
    if (v15)
      (*(void (**)(uint64_t *))(v15 + 32))(&v14);
  }
  else
  {
    if (*v6 && (*v6 & 3) != 3)
      (*(void (**)(_QWORD *))((*v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
    *v6 = 0;
  }
  sub_1DCAEEE2C((uint64_t)&v12);
  return a1;
}

void sub_1DCB25A50(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1DCAE4C58(a1);
  _Unwind_Resume(a1);
}

void sub_1DCB25A98(uint64_t *a1, int a2, uint64_t a3, float a4)
{
  int v7;
  int v8;
  void (*v9)(uint64_t, int *, int, int, float);
  void (*v10)(uint64_t, int *, int *, int, int, int);
  float v11;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  _DWORD *v21;
  unint64_t *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v23;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v24;
  _OWORD v25[2];
  uint64_t v26;
  _QWORD v27[2];
  void *__p[2];
  uint64_t v29;
  __int128 v30;
  _OWORD v31[5];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void (*v35)(uint64_t, int *, int *, int, int, int);
  uint64_t v36[2];
  uint64_t v37[2];
  uint64_t v38[3];

  v38[2] = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v32 = 0u;
  v30 = 0u;
  memset(v31, 0, sizeof(v31));
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1DCACA658(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v29 = *(_QWORD *)(a3 + 16);
  }
  v7 = sub_1DCB24EA0((uint64_t)&v30, (uint64_t)a1, (uint64_t *)__p);
  v8 = v7;
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__p[0]);
    if (!v8)
      goto LABEL_34;
  }
  else if (!v7)
  {
    goto LABEL_34;
  }
  *(_QWORD *)&v32 = sub_1DCB24700;
  *((_QWORD *)&v32 + 1) = sub_1DCB24710;
  *(_QWORD *)&v33 = sub_1DCB24724;
  *((_QWORD *)&v33 + 1) = sub_1DCB24794;
  v9 = sub_1DCB24CF8;
  if (!a2)
    v9 = 0;
  *(_QWORD *)&v34 = sub_1DCB24A28;
  *((_QWORD *)&v34 + 1) = v9;
  v10 = sub_1DCB24D94;
  if (a2)
    v10 = 0;
  v35 = v10;
  v27[0] = &v32;
  v27[1] = &v30;
  v11 = 3.1416;
  if (a4 <= 3.1416)
    v11 = a4;
  if (v11 < 0.0)
    v11 = 0.0;
  if (sub_1DCB0DB1C((uint64_t)v27, v11) == 1)
  {
    if (a2)
    {
      v38[1] = (uint64_t)&off_1EA575B08;
      sub_1DCB272BC(v38, (uint64_t)v31);
      v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
      if (!v12)
        v12 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
      sub_1DCB252D0(v38, a1, CFSTR("tangents"), CFSTR("faceVarying"), *((_QWORD *)v12 + 78));
      sub_1DCAEEE2C((uint64_t)v38);
    }
    else
    {
      v26 = 0;
      memset(v25, 0, sizeof(v25));
      sub_1DCB2525C((uint64_t)v25, *(unint64_t *)&v31[0]);
      if (*(_QWORD *)&v31[0])
      {
        v15 = 0;
        v16 = 0;
        v17 = 0;
        do
        {
          sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31);
          v18 = *(_DWORD *)(*(_QWORD *)&v31[2] + v16);
          sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31);
          v19 = *(_DWORD *)(*(_QWORD *)&v31[2] + v16 + 4);
          sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31);
          v20 = *(_DWORD *)(*(_QWORD *)&v31[2] + v16 + 8);
          sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v25);
          v21 = (_DWORD *)(v26 + v15);
          *v21 = v18;
          v21[1] = v19;
          v21[2] = v20;
          ++v17;
          v16 += 16;
          v15 += 12;
        }
        while (*(_QWORD *)&v31[0] > v17);
      }
      v37[1] = (uint64_t)&off_1EA575998;
      sub_1DCB272BC(v37, (uint64_t)v25);
      v22 = (unint64_t *)MEMORY[0x1E0DF2618];
      v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x1E0DF2618]);
      if (!v23)
        v23 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
      sub_1DCB252D0(v37, a1, CFSTR("tangents"), CFSTR("faceVarying"), *((_QWORD *)v23 + 77));
      sub_1DCAEEE2C((uint64_t)v37);
      v36[1] = (uint64_t)&off_1EA575998;
      sub_1DCB272BC(v36, (uint64_t)&v31[2] + 8);
      v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v22);
      if (!v24)
        v24 = sub_1DCB26A3C(MEMORY[0x1E0DF2618]);
      sub_1DCB252D0(v36, a1, CFSTR("bitangents"), CFSTR("faceVarying"), *((_QWORD *)v24 + 77));
      sub_1DCAEEE2C((uint64_t)v36);
      sub_1DCAEEE78((uint64_t)v25);
    }
  }
  else
  {
    v13 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v13)
    {
      v14 = (const char *)(v13 + 16);
      if (*(char *)(v13 + 39) < 0)
        v14 = *(const char **)v14;
    }
    else
    {
      v14 = "";
    }
    NSLog(CFSTR("Failed to generate tangent space for Mesh %s."), v14);
  }
LABEL_34:
  sub_1DCAEEE78((uint64_t)&v31[2] + 8);
  sub_1DCAEEE78((uint64_t)v31);
}

void sub_1DCB25E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;

  sub_1DCAEEE2C(v26 - 136);
  sub_1DCAEEE78((uint64_t)&a11);
  sub_1DCB25EB4((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB25EB4(uint64_t a1)
{
  sub_1DCAEEE78(a1 + 56);
  sub_1DCAEEE78(a1 + 16);
  return a1;
}

_QWORD *sub_1DCB25EEC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  a1[1] = 0;
  if (a2[1])
  {
    v6 = 0;
    v7 = 0;
    sub_1DCB25FE8((uint64_t)&v6, (uint64_t)a1);
    v4 = a2[1];
    a1[1] = v4;
    if ((~*((_DWORD *)a2 + 2) & 3) != 0)
      (*(void (**)(_QWORD *, _QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 24))(a2, a1);
    else
      *a1 = *a2;
    if (v7)
      (*(void (**)(uint64_t *))(v7 + 32))(&v6);
  }
  return a1;
}

void sub_1DCB25FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(char *))(a11 + 32))(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCB25FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    v4 = (~(_BYTE)v3 & 3) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    v5 = v3 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 8) = v5;
    if (v5)
      (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
  }
  return a1;
}

void sub_1DCB26048(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      sub_1DCAE4C44();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1DCAE4D04(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_1DCB26150(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 28 * ((28 * a2 - 28) / 0x1C) + 28;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (_BYTE *)*a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x924924924924924)
      sub_1DCAE4C44();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (_BYTE *)*a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x492492492492492)
      v11 = 0x924924924924924;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_1DCB2630C(v4, v11);
    else
      v12 = 0;
    v14 = &v12[28 * v8];
    v15 = &v12[28 * v11];
    v16 = 28 * ((28 * a2 - 28) / 0x1C) + 28;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 28);
        *((_OWORD *)v14 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)(v14 - 28) = v20;
        v14 -= 28;
        v18 -= 28;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void *sub_1DCB2630C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925)
    sub_1DCAE4CDC();
  return operator new(28 * a2);
}

unint64_t *sub_1DCB26354@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

_QWORD *sub_1DCB26484(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_1DCB26534(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_QWORD *sub_1DCB265E0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1DCB26658(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DCB2663C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DCB26658(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x924924924924925)
    sub_1DCAE4C44();
  result = (char *)sub_1DCB2630C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[28 * v4];
  return result;
}

void sub_1DCB266AC(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      memset(*(void **)(v4 - 8), 255, 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      sub_1DCAE4C44();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_1DCAE79A4(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    memset(v14, 255, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void sub_1DCB267B0(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCAF100C((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 4 * v3;
          do
          {
            *(_DWORD *)((char *)v7 + v13) = *v12;
            v13 += 4;
          }
          while (4 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_1DCAF100C((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 4 * v19;
      v22 = v20;
      do
      {
        v23 = *(_DWORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 4);
        *(_DWORD *)v22 = v23;
        v22 = (unint64_t *)((char *)v22 + 4);
        v21 -= 4;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 4 * v3;
      do
      {
        *(_DWORD *)((char *)v20 + v25) = *v24;
        v25 += 4;
      }
      while (4 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 4 * a2;
  if (4 * a2 / a2 != 4)
  {
LABEL_18:
    sub_1DCAEEFD4(a1);
    return;
  }
  v16 = sub_1DCAF100C((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_DWORD *)((char *)v16 + v17) = *v18;
    v17 += 4;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

uint64_t sub_1DCB26964(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 21)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573B40);
  else
    return 0;
}

double sub_1DCB2699C@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_1DCB269F4;
  a1[2] = (uint64_t)&stru_1EA573B40;
  return result;
}

uint64_t sub_1DCB269F4(uint64_t result)
{
  if (result)
  {
    sub_1DCAEEE78(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *sub_1DCB26A3C(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *result;

  result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x1DF0D10BC]();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(result);
    MEMORY[0x1DF0D228C]();
  }
  return (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(a1);
}

void sub_1DCB26A94(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      v9 = *a2;
      v10 = v5 + 12 * v4;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
      *(_QWORD *)v10 = v9;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v11 = *(uint64_t **)(a1 + 32);
    v12 = 1;
    do
    {
      v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    v14 = sub_1DCAF0ED0(a1, v13);
    v15 = v14;
    if (v4)
    {
      v16 = 12 * v4;
      v17 = v14;
      do
      {
        v18 = *v11;
        *((_DWORD *)v17 + 2) = *((_DWORD *)v11 + 2);
        *v17 = v18;
        v17 = (_QWORD *)((char *)v17 + 12);
        v11 = (uint64_t *)((char *)v11 + 12);
        v16 -= 12;
      }
      while (v16);
    }
    v19 = *a2;
    v20 = (char *)v14 + 12 * v4;
    *((_DWORD *)v20 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v20 = v19;
    sub_1DCAEEE78(a1);
    *(_QWORD *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

uint64_t *sub_1DCB26C28(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6 = 0;
  sub_1DCB25FE8((uint64_t)&v5, (uint64_t)a1);
  a1[1] = (uint64_t)&off_1EA575998;
  sub_1DCB272BC(a1, a2);
  if (v6)
    (*(void (**)(uint64_t *))(v6 + 32))(&v5);
  return a1;
}

void sub_1DCB26CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_1DCAE4C58(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1DCB26CF8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCB26D20(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCB26E78(a1);
}

uint64_t sub_1DCB26D30()
{
  return 1;
}

unint64_t sub_1DCB26D38(uint64_t **a1)
{
  char v2;

  return sub_1DCB26EE0((uint64_t)&v2, *a1);
}

BOOL sub_1DCB26D5C(_QWORD **a1, uint64_t *a2)
{
  return sub_1DCB2704C(*a1, *a2);
}

BOOL sub_1DCB26D68(_QWORD **a1, uint64_t a2)
{
  return sub_1DCB2704C(*a1, a2);
}

uint64_t sub_1DCB26D74()
{
  return 0;
}

uint64_t sub_1DCB26D80(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_1DCB26DC8()
{
  return &unk_1EA573B40;
}

uint64_t sub_1DCB26DD4()
{
  return 1;
}

void *sub_1DCB26DDC()
{
  return &unk_1EA573A38;
}

uint64_t sub_1DCB26DE8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCB26DF0(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_1DCB26DFC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCB26E2C(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573B40, a2);
}

void *sub_1DCB26E4C()
{
  return &unk_1EA573B40;
}

uint64_t sub_1DCB26E58(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCB26E60@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA575998;
  return sub_1DCB272BC(a2, v2);
}

uint64_t *sub_1DCB26E78(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_1DCAEEE78(v2);
      MEMORY[0x1DF0D228C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_1DCB26EE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (unsigned int *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 3;
      sub_1DCB26F54((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_1DCB26F54(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  result = sub_1DCB26FD0((uint64_t)v5, a2, a2 + 1, a2 + 2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_1DCB26FD0(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v4;

  v4 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v4 += (unint64_t)(*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return sub_1DCB27008(a1, a3, a4);
}

uint64_t sub_1DCB27008(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(result + 8))
    v3 += (unint64_t)(*(_QWORD *)result + v3 + (*(_QWORD *)result + v3) * (*(_QWORD *)result + v3)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v3;
  *(_QWORD *)result = *a3 + ((v3 + *a3 + (v3 + *a3) * (v3 + (unint64_t)*a3)) >> 1);
  return result;
}

BOOL sub_1DCB2704C(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  float *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_1DCB27110((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_1DCB27110((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)a1[4];
  v6 = &v5[3 * *a1];
  for (i = *(float **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

BOOL sub_1DCB27110(uint64_t a1, uint64_t a2)
{
  const void *v4;
  int v5;
  int v6;
  int v7;
  const void *v8;
  int v9;
  BOOL v10;
  uint64_t v11;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v6 = *(_DWORD *)(a1 + 8);
  v4 = (const void *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    if (*(_DWORD *)(a1 + 12))
      v7 = *(_DWORD *)(a1 + 16) ? 4 : 3;
    else
      v7 = 2;
  }
  else
  {
    v7 = 1;
  }
  v8 = (const void *)(a2 + 8);
  if (*(_DWORD *)(a2 + 8))
  {
    if (*(_DWORD *)(a2 + 12))
      v9 = *(_DWORD *)(a2 + 16) ? 4 : 3;
    else
      v9 = 2;
  }
  else
  {
    v9 = 1;
  }
  if (v7 != v9)
    return 0;
  if (v5)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      v10 = *(_DWORD *)(a1 + 16) == 0;
      v11 = 3;
      if (!v10)
        v11 = 4;
    }
    else
    {
      v11 = 2;
    }
  }
  else
  {
    v11 = 1;
  }
  return memcmp(v4, v8, 4 * v11 - 4) == 0;
}

uint64_t sub_1DCB271EC(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_1DCB26E78((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t sub_1DCB272A4(_QWORD *a1)
{
  *a1 += 12;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

uint64_t sub_1DCB272BC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  result = operator new();
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(result + 24))
      v7 = *(unint64_t **)(result + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (unsigned int *)(result + 40);
  atomic_store(0, (unsigned int *)(result + 40));
  *a1 = result;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

uint64_t sub_1DCB27344(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_1DCB273D4(a1, v4);
    sub_1DCAEEE2C((uint64_t)v4);
  }
  return sub_1DCB271EC(a1);
}

_QWORD *sub_1DCB273D4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1 != a2)
  {
    if (a2[1])
    {
      v8 = 0;
      v9 = 0;
      sub_1DCB25FE8((uint64_t)&v8, (uint64_t)a1);
      v4 = a2[1];
      a1[1] = v4;
      if ((~*((_DWORD *)a2 + 2) & 3) != 0)
        (*(void (**)(_QWORD *, _QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
      else
        *a1 = *a2;
      a2[1] = 0;
      if (v9)
        (*(void (**)(uint64_t *))(v9 + 32))(&v8);
    }
    else
    {
      v5 = a1[1];
      if (v5)
        v6 = (a1[1] & 3) == 3;
      else
        v6 = 1;
      if (!v6)
        (*(void (**)(_QWORD *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      a1[1] = 0;
    }
  }
  return a1;
}

void sub_1DCB274C8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1DCAE4C58(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB274E0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_1DCAE4C44();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_1DCB27740((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[96 * v3];
  v13 = &v7[96 * v6];
  sub_1DCB275EC((uint64_t)(a1 + 2), v11, a2);
  v12 = v11 + 96;
  sub_1DCACB098(a1, &v10);
  v8 = a1[1];
  sub_1DCACB10C(&v10);
  return v8;
}

void sub_1DCB275D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1DCACB10C((void **)va);
  _Unwind_Resume(a1);
}

double sub_1DCB275EC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  __int128 v5;
  double result;

  v4 = sub_1DCB27664(a2, (_QWORD *)a3);
  v5 = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v4 + 1) = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v4 + 2) = v5;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  v4[6] = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  v4[7] = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 56) = 0;
  v4[8] = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 64) = 0;
  v4[9] = *(_QWORD *)(a3 + 72);
  v4[10] = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 80) = 0;
  *((_DWORD *)v4 + 22) = *(_DWORD *)(a3 + 88);
  return result;
}

_QWORD *sub_1DCB27664(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  a1[1] = 0;
  if (a2[1])
  {
    v6 = 0;
    v7 = 0;
    sub_1DCB25FE8((uint64_t)&v6, (uint64_t)a1);
    v4 = a2[1];
    a1[1] = v4;
    if ((~*((_DWORD *)a2 + 2) & 3) != 0)
      (*(void (**)(_QWORD *, _QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
    else
      *a1 = *a2;
    a2[1] = 0;
    if (v7)
      (*(void (**)(uint64_t *))(v7 + 32))(&v6);
  }
  return a1;
}

void sub_1DCB27728(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1DCAE4C58(a1);
  _Unwind_Resume(a1);
}

void *sub_1DCB27740(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    sub_1DCAE4CDC();
  return operator new(96 * a2);
}

uint64_t sub_1DCB27784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 96;
      sub_1DCB27848(a1, (_QWORD *)(v7 - 96), v9);
      v7 = *((_QWORD *)&v16 + 1) - 96;
      *((_QWORD *)&v16 + 1) -= 96;
    }
    while (v9 != a5);
    v11 = v16;
  }
  LOBYTE(v14) = 1;
  sub_1DCB27950((uint64_t)v13);
  return v11;
}

void sub_1DCB27834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCB27950((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1DCB27848(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;

  result = sub_1DCB25EEC(a2, (_QWORD *)a3);
  v5 = *(_OWORD *)(a3 + 32);
  *((_OWORD *)result + 1) = *(_OWORD *)(a3 + 16);
  *((_OWORD *)result + 2) = v5;
  v6 = *(_QWORD *)(a3 + 48);
  result[6] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (result[5])
      v7 = (unint64_t *)result[5];
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a3 + 56);
  result[7] = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      result[7] &= 0xFFFFFFFFFFFFFFF8;
  }
  v12 = *(_QWORD *)(a3 + 64);
  result[8] = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      result[8] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[9] = *(_QWORD *)(a3 + 72);
  v15 = *(_QWORD *)(a3 + 80);
  result[10] = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      result[10] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)result + 22) = *(_DWORD *)(a3 + 88);
  return result;
}

uint64_t sub_1DCB27950(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1DCB27984((uint64_t *)a1);
  return a1;
}

uint64_t *sub_1DCB27984(uint64_t *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(result[2] + 8);
  v2 = *(_QWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_1DCB279D4(v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1DCB279D4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v3 = a2[10];
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  v6 = a2[8];
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = a2[7];
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  sub_1DCAEEE78((uint64_t)(a2 + 2));
  return sub_1DCAEEE2C((uint64_t)a2);
}

uint64_t sub_1DCB27A60(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 96;
      result = sub_1DCB279D4(v4, (_QWORD *)(v1 - 96));
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1DCB27AA4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 22)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_1EA573B10);
  else
    return 0;
}

double sub_1DCB27ADC@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_1DCB27B34;
  a1[2] = (uint64_t)&stru_1EA573B10;
  return result;
}

uint64_t sub_1DCB27B34(uint64_t result)
{
  if (result)
  {
    sub_1DCAEEE78(result);
    JUMPOUT(0x1DF0D228CLL);
  }
  return result;
}

void sub_1DCB27B7C(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCAF0ED0((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = (char *)v10 + v11;
                v13 = *(_QWORD *)(v9 + v11);
                *((_DWORD *)v12 + 2) = *(_DWORD *)(v9 + v11 + 8);
                *(_QWORD *)v12 = v13;
                v11 += 12;
              }
              while (12 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 12 * v3;
          do
          {
            v16 = (char *)v7 + v15;
            v17 = *v14;
            *((_DWORD *)v16 + 2) = *((_DWORD *)v14 + 2);
            *(_QWORD *)v16 = v17;
            v15 += 12;
          }
          while (12 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (_QWORD *)a1[4];
    }
    if (v3 >= a2)
      v24 = a2;
    else
      v24 = *a1;
    v25 = sub_1DCAF0ED0((uint64_t)a1, a2);
    v18 = v25;
    if (v24)
    {
      v26 = 12 * v24;
      v27 = v25;
      do
      {
        v28 = *v7;
        *((_DWORD *)v27 + 2) = *((_DWORD *)v7 + 2);
        *v27 = v28;
        v27 = (_QWORD *)((char *)v27 + 12);
        v7 = (_QWORD *)((char *)v7 + 12);
        v26 -= 12;
      }
      while (v26);
    }
    if (v3 < a2)
    {
      v29 = *a3;
      v30 = 12 * v3;
      do
      {
        v31 = (char *)v25 + v30;
        v32 = *v29;
        *((_DWORD *)v31 + 2) = *((_DWORD *)v29 + 2);
        *(_QWORD *)v31 = v32;
        v30 += 12;
      }
      while (12 * a2 != v30);
    }
    goto LABEL_29;
  }
  if (a2 >= 0x1555555555555556)
  {
LABEL_18:
    sub_1DCAEEFD4(a1);
    return;
  }
  v19 = sub_1DCAF0ED0((uint64_t)a1, a2);
  v18 = v19;
  v20 = 0;
  v21 = *a3;
  do
  {
    v22 = (char *)v19 + v20;
    v23 = *v21;
    *((_DWORD *)v22 + 2) = *((_DWORD *)v21 + 2);
    *(_QWORD *)v22 = v23;
    v20 += 12;
  }
  while (12 * a2 != v20);
LABEL_29:
  if (v18 != (_QWORD *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

uint64_t *sub_1DCB27D94(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_1DCB27DBC(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_1DCB27F14(a1);
}

uint64_t sub_1DCB27DCC()
{
  return 1;
}

unint64_t sub_1DCB27DD4(uint64_t **a1)
{
  char v2;

  return sub_1DCB27F7C((uint64_t)&v2, *a1);
}

BOOL sub_1DCB27DF8(_QWORD **a1, uint64_t *a2)
{
  return sub_1DCB280AC(*a1, *a2);
}

BOOL sub_1DCB27E04(_QWORD **a1, uint64_t a2)
{
  return sub_1DCB280AC(*a1, a2);
}

uint64_t sub_1DCB27E10()
{
  return 0;
}

uint64_t sub_1DCB27E1C(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_1DCB27E64()
{
  return &unk_1EA573B70;
}

uint64_t sub_1DCB27E70()
{
  return 1;
}

void *sub_1DCB27E78()
{
  return &unk_1EA573A68;
}

uint64_t sub_1DCB27E84(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCB27E8C(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_1DCB27E98(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec4fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_1DCB27EC8(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_1EA573B70, a2);
}

void *sub_1DCB27EE8()
{
  return &unk_1EA573B70;
}

uint64_t sub_1DCB27EF4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1DCB27EFC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&off_1EA575B08;
  return sub_1DCB272BC(a2, v2);
}

uint64_t *sub_1DCB27F14(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_1DCAEEE78(v2);
      MEMORY[0x1DF0D228C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_1DCB27F7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (unsigned int *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      sub_1DCB27FF0((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_1DCB27FF0(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  result = sub_1DCB28070((uint64_t)v5, a2, a2 + 1, a2 + 2, a2 + 3);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_1DCB28070(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;

  v5 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v5 += (unint64_t)(*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return sub_1DCB26FD0(a1, a3, a4, a5);
}

BOOL sub_1DCB280AC(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  float *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_1DCB27110((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_1DCB27110((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)a1[4];
  v6 = &v5[4 * *a1];
  for (i = *(float **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t sub_1DCB2817C(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_1DCB27F14((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t sub_1DCB28234(_QWORD *a1)
{
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_1DCB2824C(const char *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  const char *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  std::string *p_str;
  std::string::size_type size;
  int data;
  int v16;
  std::string *v18;
  int v19;
  int v20;
  std::string *v22;
  int v23;
  int v24;
  std::string *v26;
  int v27;
  int v28;
  std::string *v30;
  int v31;
  int v32;
  BOOL v33;
  char v34;
  std::string *v35;
  int v36;
  int v37;
  std::string *v39;
  uint64_t v40;
  std::string v41;
  void *v42[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *v47[2];
  __int128 v48;
  __int128 v49;
  _OWORD v50[9];
  uint64_t v51;
  void *__p[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  void *v57[2];
  __int128 v58;
  __int128 v59;
  _OWORD v60[9];
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  std::string __str;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  void *v71[2];
  __int128 v72;
  __int128 v73;
  _OWORD v74[9];
  uint64_t v75;
  const char *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;

  if ((unint64_t)a2 <= 0x7F)
  {
    sub_1DCB0345C(a3, "File is too small to be valid STL");
    return;
  }
  if (!strncmp("solid", a1, 5uLL))
  {
    v6 = 0;
    while (strncmp("facet normal", &a1[v6], 0xCuLL))
    {
      if (++v6 == 128)
        goto LABEL_7;
    }
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v76 = a1;
    if (a2 < 1)
      goto LABEL_110;
    v7 = &a1[a2];
    v8 = (void *)*MEMORY[0x1E0DE4F50];
    v9 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
    v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v11 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      v75 = 0;
      v73 = 0u;
      memset(v74, 0, sizeof(v74));
      *(_OWORD *)v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      sub_1DCB28AC8((void **)&v76, (unint64_t)v7, (std::string *)__p);
      sub_1DCB28C4C(&v66, (const std::string *)__p, 24);
      if (SBYTE7(v53) < 0)
        operator delete(__p[0]);
      memset(&__str, 0, sizeof(__str));
      sub_1DCAF22B8((uint64_t *)&v66, (uint64_t)&__str);
      v12 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        size = __str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_ != 5)
          goto LABEL_28;
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 5)
          goto LABEL_24;
        p_str = &__str;
      }
      data = (int)p_str->__r_.__value_.__l.__data_;
      v16 = p_str->__r_.__value_.__s.__data_[4];
      if (data == 1768714099 && v16 == 100)
      {
        sub_1DCAF22B8((uint64_t *)&v66, (uint64_t)&v77);
        v12 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
        {
LABEL_27:
          size = __str.__r_.__value_.__l.__size_;
LABEL_28:
          if (size == 8)
            size = __str.__r_.__value_.__l.__size_;
          if (size != 5)
            goto LABEL_37;
          v18 = (std::string *)__str.__r_.__value_.__r.__words[0];
          goto LABEL_32;
        }
      }
      else if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        goto LABEL_27;
      }
LABEL_24:
      if (v12 != 5)
        goto LABEL_38;
      v18 = &__str;
LABEL_32:
      v19 = (int)v18->__r_.__value_.__l.__data_;
      v20 = v18->__r_.__value_.__s.__data_[4];
      if (v19 == 1701011814 && v20 == 116)
      {
        sub_1DCAF22B8((uint64_t *)&v66, (uint64_t)&__str);
        v64 = 0;
        v63 = 1065353216;
        v62 = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__str.__r_.__value_.__l.__size_ == 6)
          {
            v22 = (std::string *)__str.__r_.__value_.__r.__words[0];
            goto LABEL_47;
          }
        }
        else if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) == 6)
        {
          v22 = &__str;
LABEL_47:
          v23 = (int)v22->__r_.__value_.__l.__data_;
          v24 = WORD2(v22->__r_.__value_.__r.__words[0]);
          if (v23 == 1836216174 && v24 == 27745)
          {
            MEMORY[0x1DF0D20D0](&v66, &v64);
            MEMORY[0x1DF0D20D0](&v66, &v63);
            MEMORY[0x1DF0D20D0](&v66, &v62);
          }
        }
        v61 = 0;
        v59 = 0u;
        memset(v60, 0, sizeof(v60));
        *(_OWORD *)v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        *(_OWORD *)__p = 0u;
        sub_1DCB28AC8((void **)&v76, (unint64_t)v7, (std::string *)v42);
        sub_1DCB28C4C(__p, (const std::string *)v42, 24);
        if (SBYTE7(v43) < 0)
          operator delete(v42[0]);
        sub_1DCAF22B8((uint64_t *)__p, (uint64_t)&__str);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) == 5)
          {
            v26 = &__str;
            goto LABEL_60;
          }
          goto LABEL_98;
        }
        if (__str.__r_.__value_.__l.__size_ != 5)
          goto LABEL_98;
        v26 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_60:
        v27 = (int)v26->__r_.__value_.__l.__data_;
        v28 = v26->__r_.__value_.__s.__data_[4];
        if (v27 != 1702131055 || v28 != 114)
        {
LABEL_98:
          sub_1DCB28AC8((void **)&v76, (unint64_t)v7, (std::string *)v42);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v42;
          __str.__r_.__value_.__r.__words[2] = v43;
          sub_1DCAFB818(&__str);
          std::string::operator=(&__str, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            if (__str.__r_.__value_.__l.__size_ != 8)
              goto LABEL_114;
            v39 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 8)
              goto LABEL_114;
            v39 = &__str;
          }
          if (v39->__r_.__value_.__r.__words[0] != 0x7465636166646E65)
          {
LABEL_114:
            sub_1DCB0345C(a3, "endfacet tag missing, couldn't parse STL");
            __p[0] = v8;
            *(void **)((char *)__p + *((_QWORD *)v8 - 3)) = v9;
            *(_QWORD *)&v53 = v10;
            *((_QWORD *)&v53 + 1) = MEMORY[0x1E0DE4FB8] + 16;
            if (SHIBYTE(v58) < 0)
              operator delete(v57[1]);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1DF0D2238](v60);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            *(_QWORD *)&v66 = v8;
            *(_QWORD *)((char *)&v66 + *((_QWORD *)v8 - 3)) = v9;
            *(_QWORD *)&v67 = v10;
            *((_QWORD *)&v67 + 1) = MEMORY[0x1E0DE4FB8] + 16;
            if (SHIBYTE(v72) < 0)
              operator delete(v71[1]);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1DF0D2238](v74);
            goto LABEL_111;
          }
          __p[0] = v8;
          *(void **)((char *)__p + *((_QWORD *)v8 - 3)) = v9;
          *(_QWORD *)&v53 = v10;
          *((_QWORD *)&v53 + 1) = MEMORY[0x1E0DE4FB8] + 16;
          if (SHIBYTE(v58) < 0)
            operator delete(v57[1]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1DF0D2238](v60);
          if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_38;
LABEL_37:
          operator delete(__str.__r_.__value_.__l.__data_);
          goto LABEL_38;
        }
        while (2)
        {
          v51 = 0;
          v49 = 0u;
          memset(v50, 0, sizeof(v50));
          *(_OWORD *)v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          *(_OWORD *)v42 = 0u;
          sub_1DCB28AC8((void **)&v76, (unint64_t)v7, &v41);
          sub_1DCB28C4C(v42, &v41, 24);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v41.__r_.__value_.__l.__data_);
          sub_1DCAF22B8((uint64_t *)v42, (uint64_t)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            if (__str.__r_.__value_.__l.__size_ == 7)
            {
              v30 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_72:
              v31 = (int)v30->__r_.__value_.__l.__data_;
              v32 = *(_DWORD *)((char *)v30->__r_.__value_.__r.__words + 3);
              v33 = v31 == 1818521189 && v32 == 1886351212;
              v34 = 1;
              if (v33 || v76 == v7)
                goto LABEL_95;
              LODWORD(v41.__r_.__value_.__l.__data_) = 0;
              v40 = 0;
              if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
                goto LABEL_81;
            }
            else
            {
              if (v76 == v7)
                goto LABEL_94;
              LODWORD(v41.__r_.__value_.__l.__data_) = 0;
              v40 = 0;
            }
            if (__str.__r_.__value_.__l.__size_ == 6)
            {
              v35 = (std::string *)__str.__r_.__value_.__r.__words[0];
              goto LABEL_87;
            }
LABEL_93:
            v34 = 0;
          }
          else
          {
            if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 7)
            {
              v30 = &__str;
              goto LABEL_72;
            }
            if (v76 != v7)
            {
              LODWORD(v41.__r_.__value_.__l.__data_) = 0;
              v40 = 0;
LABEL_81:
              if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 6)
              {
                v35 = &__str;
LABEL_87:
                v36 = (int)v35->__r_.__value_.__l.__data_;
                v37 = WORD2(v35->__r_.__value_.__r.__words[0]);
                if (v36 == 1953654134 && v37 == 30821)
                {
                  MEMORY[0x1DF0D20D0](v42, &v41);
                  MEMORY[0x1DF0D20D0](v42, (char *)&v40 + 4);
                  MEMORY[0x1DF0D20D0](v42, &v40);
                }
              }
              goto LABEL_93;
            }
LABEL_94:
            v34 = 1;
          }
LABEL_95:
          v42[0] = v8;
          *(void **)((char *)v42 + *((_QWORD *)v8 - 3)) = v9;
          *(_QWORD *)&v43 = v10;
          *((_QWORD *)&v43 + 1) = v11;
          if (SHIBYTE(v48) < 0)
            operator delete(v47[1]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1DF0D2238](v50);
          if ((v34 & 1) != 0)
            goto LABEL_98;
          continue;
        }
      }
      if ((v12 & 0x80) != 0)
        goto LABEL_37;
LABEL_38:
      *(_QWORD *)&v66 = v8;
      *(_QWORD *)((char *)&v66 + *((_QWORD *)v8 - 3)) = v9;
      *(_QWORD *)&v67 = v10;
      *((_QWORD *)&v67 + 1) = MEMORY[0x1E0DE4FB8] + 16;
      if (SHIBYTE(v72) < 0)
        operator delete(v71[1]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1DF0D2238](v74);
      if (v76 >= v7)
        goto LABEL_110;
    }
  }
LABEL_7:
  v77 = 0;
  v78 = 0;
  v79 = 0;
  MEMORY[0x1DF0D2028](&v77, a1, 80);
  if ((unint64_t)a2 >= 0x85 && *((_DWORD *)a1 + 20) >= 0xE38E38Fu)
  {
    sub_1DCB0345C(a3, "Bad triangle count, couldn't parse STL");
    goto LABEL_111;
  }
LABEL_110:
  sub_1DCB0345C(a3, "");
LABEL_111:
  if (SHIBYTE(v79) < 0)
    operator delete(v77);
}

void sub_1DCB28A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  uint64_t v53;

  sub_1DCB28D6C((uint64_t)&a53);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  sub_1DCB28D6C((uint64_t)&STACK[0x2B0]);
  if (*(char *)(v53 - 89) < 0)
    operator delete(*(void **)(v53 - 112));
  _Unwind_Resume(a1);
}

void sub_1DCB28AC8(void **a1@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  _BYTE *v5;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  unint64_t v9;
  char *v10;
  std::string::size_type size;
  std::string *p_dst;
  unsigned __int8 *v13;
  char *v14;
  std::string *v15;
  unsigned __int8 v16;
  std::string __dst;

  v5 = *a1;
  if ((unint64_t)*a1 >= a2)
  {
    v7 = 0;
    v8 = (char *)*a1;
  }
  else
  {
    v6 = 0;
    v7 = a2 - (_DWORD)v5;
    while (v5[v6] != 10)
    {
      *a1 = &v5[++v6];
      if (a2 - (_QWORD)v5 == v6)
      {
        v8 = (char *)a2;
        goto LABEL_8;
      }
    }
    v8 = &v5[v6];
    v7 = v6;
  }
LABEL_8:
  if ((unint64_t)v8 < a2)
  {
    v9 = a2 - (_QWORD)v8;
    v10 = v8 + 1;
    do
    {
      if (*(v10 - 1) != 10)
        break;
      *a1 = v10++;
      --v9;
    }
    while (v9);
  }
  memset(&__dst, 0, sizeof(__dst));
  sub_1DCB2AC10(&__dst, v5, v7);
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __dst.__r_.__value_.__l.__size_;
  v16 = 92;
  v13 = sub_1DCB2ABAC(p_dst, (unsigned __int8 *)p_dst + size, &v16);
  v14 = (char *)&__dst + HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v15 = &__dst;
  }
  else
  {
    v14 = (char *)(__dst.__r_.__value_.__r.__words[0] + __dst.__r_.__value_.__l.__size_);
    v15 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  std::string::erase(&__dst, v13 - (unsigned __int8 *)v15, v14 - (char *)v13);
  sub_1DCAFB818(&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_1DCACA658(a3, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    *a3 = __dst;
  }
}

void sub_1DCB28C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1DCB28C4C(_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x1E0DE4FD0];
  v6 = MEMORY[0x1E0DE4FD0] + 104;
  a1[16] = MEMORY[0x1E0DE4FD0] + 104;
  a1[2] = v5 + 64;
  v7 = a1 + 2;
  v8 = (uint64_t)(a1 + 3);
  v9 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *a1 = v10;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v10 - 24)) = v11;
  a1[1] = 0;
  v12 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v12, a1 + 3);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  a1[2] = v13;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *a1 = v15;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *a1 = v5 + 24;
  a1[16] = v6;
  a1[2] = v5 + 64;
  sub_1DCB03594(v8, a2, a3);
  return a1;
}

void sub_1DCB28D44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1DF0D2238](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB28D6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1DF0D2238](a1 + 128);
  return a1;
}

void sub_1DCB28DF4(uint64_t a1, unint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  unsigned int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  std::string *p_str;
  std::string::size_type size;
  int data;
  int v17;
  std::string *v19;
  std::string::size_type v20;
  int v21;
  int v22;
  char v24;
  std::string *v25;
  int v26;
  int v27;
  std::string *v29;
  int v30;
  int v31;
  std::string *v33;
  int v34;
  int v35;
  std::string *v37;
  int v38;
  int v39;
  char *v41;
  char *v42;
  char *v43;
  int *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char v50;
  char *v51;
  int v52;
  char *v53;
  int *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  char *v62;
  int *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  int v70;
  int *v71;
  int *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  int *v78;
  int v79;
  char *v80;
  int *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  int *v87;
  int v88;
  char *v89;
  int *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  int v97;
  std::string *v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  int *v102;
  int v103;
  int v104;
  int v105;
  int v106;
  char *v107;
  int v108;
  int v109;
  int v110;
  char *v111;
  char *v112;
  int *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  int v120;
  char *v121;
  int *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  int v129;
  char *v130;
  int *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  int v138;
  char *v139;
  int *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  int v147;
  char *v148;
  int *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  int v156;
  int *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  int v164;
  unsigned int v165;
  std::string *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  _WORD *v170;
  id v171;
  const char *v172;
  void *v173;
  const char *v174;
  uint64_t v175;
  void *v176;
  const char *v177;
  void *v178;
  const char *v179;
  const char *v180;
  void *v181;
  id v182;
  const char *v183;
  void *v184;
  const char *v185;
  uint64_t v186;
  _DWORD *v187;
  id v188;
  const char *v189;
  const char *v190;
  uint64_t v191;
  void *v192;
  const char *v193;
  const char *v194;
  const char *v195;
  void *v196;
  id v197;
  const char *v198;
  void *v199;
  const char *v200;
  MDLSubmesh *v201;
  MDLMaterial *v202;
  void *v203;
  const char *v204;
  void *v205;
  const char *v206;
  void *v207;
  void *v208;
  const char *v209;
  uint64_t v210;
  void *v211;
  const char *v212;
  void *v213;
  const char *v214;
  const char *v215;
  uint64_t v216;
  void *v217;
  const char *v218;
  void *v219;
  const char *v220;
  const char *v221;
  uint64_t v222;
  void *v223;
  const char *v224;
  void *v225;
  const char *v226;
  const char *v227;
  uint64_t v228;
  void *v229;
  const char *v230;
  void *v231;
  const char *v232;
  const char *v233;
  uint64_t v234;
  void *v235;
  const char *v236;
  void *v237;
  const char *v238;
  const char *v239;
  uint64_t v240;
  void *v241;
  const char *v242;
  void *v243;
  const char *v244;
  const char *v245;
  uint64_t v246;
  void *v247;
  const char *v248;
  void *v249;
  const char *v250;
  const char *v251;
  uint64_t v252;
  void *v253;
  const char *v254;
  void *v255;
  const char *v256;
  const char *v257;
  uint64_t v258;
  void *v259;
  const char *v260;
  void *v261;
  const char *v262;
  const char *v263;
  const char *v264;
  void *v265;
  void *v266;
  const char *v267;
  uint64_t v268;
  void *v269;
  const char *v270;
  void *v271;
  const char *v272;
  id v273;
  const char *v274;
  void *v275;
  const char *v276;
  MDLMesh *v277;
  const char *v278;
  void *v279;
  const char *v280;
  void *v281;
  const char *v282;
  uint64_t v283;
  void *v284;
  BOOL v285;
  const char *v286;
  uint64_t v287;
  void *v288;
  const char *v289;
  const char *v290;
  id v291;
  uint64_t v292;
  unsigned int v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  std::string v297;
  void *v298[2];
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  void *v303[2];
  __int128 v304;
  __int128 v305;
  _OWORD v306[9];
  uint64_t v307;
  void *__p[2];
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  void *v313[2];
  __int128 v314;
  __int128 v315;
  _OWORD v316[9];
  uint64_t v317;
  int v318;
  int v319;
  int v320;
  std::string __str;
  void *v322[2];
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  void *v327[2];
  __int128 v328;
  __int128 v329;
  _OWORD v330[9];
  uint64_t v331;
  unint64_t v332;
  int *v333;
  char *v334;
  char *v335;
  std::string v336;
  _QWORD v337[3];

  v337[1] = *MEMORY[0x1E0C80C00];
  v291 = a4;
  if (a3 <= 0x7F)
  {
    NSLog(CFSTR("File is too small to be valid STL"));
    goto LABEL_353;
  }
  if (!strncmp("solid", (const char *)a2, 5uLL))
  {
    v6 = 0;
    while (v6 + 12 > a3 || strncmp("facet normal", (const char *)(a2 + v6), 0xCuLL))
    {
      if (++v6 == 128)
        goto LABEL_8;
    }
    v7 = 1;
  }
  else
  {
LABEL_8:
    v7 = 0;
  }
  memset(&v336, 0, sizeof(v336));
  v8 = a2 + a3;
  v333 = 0;
  v334 = 0;
  v335 = 0;
  if (v7)
  {
    v9 = 0;
    v332 = a2;
    v10 = (void *)*MEMORY[0x1E0DE4F50];
    v11 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
    v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v292 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      if (v332 >= v8)
        goto LABEL_319;
      v331 = 0;
      v329 = 0u;
      memset(v330, 0, sizeof(v330));
      *(_OWORD *)v327 = 0u;
      v328 = 0u;
      v325 = 0u;
      v326 = 0u;
      v323 = 0u;
      v324 = 0u;
      *(_OWORD *)v322 = 0u;
      sub_1DCB28AC8((void **)&v332, v8, (std::string *)__p);
      sub_1DCB28C4C(v322, (const std::string *)__p, 24);
      if (SBYTE7(v309) < 0)
        operator delete(__p[0]);
      memset(&__str, 0, sizeof(__str));
      sub_1DCAF22B8((uint64_t *)v322, (uint64_t)&__str);
      v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        size = __str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_ != 5)
          goto LABEL_28;
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 5)
          goto LABEL_24;
        p_str = &__str;
      }
      data = (int)p_str->__r_.__value_.__l.__data_;
      v17 = p_str->__r_.__value_.__s.__data_[4];
      if (data == 1768714099 && v17 == 100)
      {
        sub_1DCAF22B8((uint64_t *)v322, (uint64_t)&v336);
        v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
        {
LABEL_27:
          size = __str.__r_.__value_.__l.__size_;
LABEL_28:
          v20 = __str.__r_.__value_.__l.__size_;
          if (size != 8)
            v20 = size;
          if (v20 != 5)
            goto LABEL_36;
          v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
          goto LABEL_32;
        }
      }
      else if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        goto LABEL_27;
      }
LABEL_24:
      if (v13 != 5)
        goto LABEL_36;
      v19 = &__str;
LABEL_32:
      v21 = (int)v19->__r_.__value_.__l.__data_;
      v22 = v19->__r_.__value_.__s.__data_[4];
      if (v21 != 1701011814 || v22 != 116)
        goto LABEL_36;
      sub_1DCAF22B8((uint64_t *)v322, (uint64_t)&__str);
      v320 = 0;
      v319 = 1065353216;
      v318 = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__str.__r_.__value_.__l.__size_ != 6)
          goto LABEL_54;
        v25 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 6)
          goto LABEL_54;
        v25 = &__str;
      }
      v26 = (int)v25->__r_.__value_.__l.__data_;
      v27 = WORD2(v25->__r_.__value_.__r.__words[0]);
      if (v26 == 1836216174 && v27 == 27745)
      {
        MEMORY[0x1DF0D20D0](v322, &v320);
        MEMORY[0x1DF0D20D0](v322, &v319);
        MEMORY[0x1DF0D20D0](v322, &v318);
      }
LABEL_54:
      v317 = 0;
      v315 = 0u;
      memset(v316, 0, sizeof(v316));
      *(_OWORD *)v313 = 0u;
      v314 = 0u;
      v311 = 0u;
      v312 = 0u;
      v309 = 0u;
      v310 = 0u;
      *(_OWORD *)__p = 0u;
      sub_1DCB28AC8((void **)&v332, v8, (std::string *)v298);
      sub_1DCB28C4C(__p, (const std::string *)v298, 24);
      if (SBYTE7(v299) < 0)
        operator delete(v298[0]);
      sub_1DCAF22B8((uint64_t *)__p, (uint64_t)&__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__str.__r_.__value_.__l.__size_ == 5)
        {
          v29 = (std::string *)__str.__r_.__value_.__r.__words[0];
          goto LABEL_61;
        }
      }
      else if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) == 5)
      {
        v29 = &__str;
LABEL_61:
        v30 = (int)v29->__r_.__value_.__l.__data_;
        v31 = v29->__r_.__value_.__s.__data_[4];
        if (v30 != 1702131055 || v31 != 114)
          goto LABEL_192;
        while (2)
        {
          v307 = 0;
          v305 = 0u;
          memset(v306, 0, sizeof(v306));
          *(_OWORD *)v303 = 0u;
          v304 = 0u;
          v301 = 0u;
          v302 = 0u;
          v299 = 0u;
          v300 = 0u;
          *(_OWORD *)v298 = 0u;
          sub_1DCB28AC8((void **)&v332, v8, &v297);
          sub_1DCB28C4C(v298, &v297, 24);
          if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v297.__r_.__value_.__l.__data_);
          sub_1DCAF22B8((uint64_t *)v298, (uint64_t)&__str);
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 7)
            {
              v33 = &__str;
              goto LABEL_73;
            }
            LODWORD(v297.__r_.__value_.__l.__data_) = 0;
            v296 = 0;
LABEL_80:
            if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 6)
            {
              v37 = &__str;
LABEL_85:
              v38 = (int)v37->__r_.__value_.__l.__data_;
              v39 = WORD2(v37->__r_.__value_.__r.__words[0]);
              if (v38 == 1953654134 && v39 == 30821)
              {
                MEMORY[0x1DF0D20D0](v298, &v297);
                MEMORY[0x1DF0D20D0](v298, (char *)&v296 + 4);
                MEMORY[0x1DF0D20D0](v298, &v296);
              }
            }
            goto LABEL_91;
          }
          if (__str.__r_.__value_.__l.__size_ == 7)
          {
            v33 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_73:
            v34 = (int)v33->__r_.__value_.__l.__data_;
            v35 = *(_DWORD *)((char *)v33->__r_.__value_.__r.__words + 3);
            if (v34 == 1818521189 && v35 == 1886351212)
            {
              v50 = 0;
            }
            else
            {
              LODWORD(v297.__r_.__value_.__l.__data_) = 0;
              v296 = 0;
              if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
                goto LABEL_80;
LABEL_83:
              if (__str.__r_.__value_.__l.__size_ == 6)
              {
                v37 = (std::string *)__str.__r_.__value_.__r.__words[0];
                goto LABEL_85;
              }
LABEL_91:
              v42 = v334;
              v41 = v335;
              if (v334 >= v335)
              {
                v44 = v333;
                v45 = (v334 - (char *)v333) >> 2;
                v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 62)
                  goto LABEL_355;
                v47 = v335 - (char *)v333;
                if ((v335 - (char *)v333) >> 1 > v46)
                  v46 = v47 >> 1;
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                  v48 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v48 = v46;
                if (v48)
                {
                  v49 = (char *)sub_1DCAE4D04((uint64_t)&v335, v48);
                  v44 = v333;
                  v42 = v334;
                }
                else
                {
                  v49 = 0;
                }
                v51 = &v49[4 * v45];
                *(_DWORD *)v51 = v297.__r_.__value_.__l.__data_;
                v43 = v51 + 4;
                while (v42 != (char *)v44)
                {
                  v52 = *((_DWORD *)v42 - 1);
                  v42 -= 4;
                  *((_DWORD *)v51 - 1) = v52;
                  v51 -= 4;
                }
                v41 = &v49[4 * v48];
                v333 = (int *)v51;
                v334 = v43;
                v335 = v41;
                if (v44)
                {
                  operator delete(v44);
                  v41 = v335;
                }
              }
              else
              {
                *(_DWORD *)v334 = v297.__r_.__value_.__l.__data_;
                v43 = v42 + 4;
              }
              v334 = v43;
              if (v43 >= v41)
              {
                v54 = v333;
                v55 = (v43 - (char *)v333) >> 2;
                v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 62)
                  goto LABEL_355;
                v57 = v41 - (char *)v333;
                if (v57 >> 1 > v56)
                  v56 = v57 >> 1;
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                  v58 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v58 = v56;
                if (v58)
                {
                  v59 = (char *)sub_1DCAE4D04((uint64_t)&v335, v58);
                  v54 = v333;
                  v43 = v334;
                }
                else
                {
                  v59 = 0;
                }
                v60 = &v59[4 * v55];
                *(_DWORD *)v60 = HIDWORD(v296);
                v53 = v60 + 4;
                while (v43 != (char *)v54)
                {
                  v61 = *((_DWORD *)v43 - 1);
                  v43 -= 4;
                  *((_DWORD *)v60 - 1) = v61;
                  v60 -= 4;
                }
                v41 = &v59[4 * v58];
                v333 = (int *)v60;
                v334 = v53;
                v335 = v41;
                if (v54)
                {
                  operator delete(v54);
                  v41 = v335;
                }
              }
              else
              {
                *(_DWORD *)v43 = HIDWORD(v296);
                v53 = v43 + 4;
              }
              v334 = v53;
              if (v53 >= v41)
              {
                v63 = v333;
                v64 = (v53 - (char *)v333) >> 2;
                v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 62)
                  goto LABEL_355;
                v66 = v41 - (char *)v333;
                if (v66 >> 1 > v65)
                  v65 = v66 >> 1;
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
                  v67 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v67 = v65;
                if (v67)
                {
                  v68 = (char *)sub_1DCAE4D04((uint64_t)&v335, v67);
                  v63 = v333;
                  v53 = v334;
                }
                else
                {
                  v68 = 0;
                }
                v69 = &v68[4 * v64];
                *(_DWORD *)v69 = v296;
                v62 = v69 + 4;
                while (v53 != (char *)v63)
                {
                  v70 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *((_DWORD *)v69 - 1) = v70;
                  v69 -= 4;
                }
                v41 = &v68[4 * v67];
                v333 = (int *)v69;
                v334 = v62;
                v335 = v41;
                if (v63)
                {
                  operator delete(v63);
                  v41 = v335;
                }
              }
              else
              {
                *(_DWORD *)v53 = v296;
                v62 = v53 + 4;
              }
              v334 = v62;
              if (v62 >= v41)
              {
                v72 = v333;
                v73 = (v62 - (char *)v333) >> 2;
                v74 = v73 + 1;
                if ((unint64_t)(v73 + 1) >> 62)
                  goto LABEL_355;
                v75 = v41 - (char *)v333;
                if (v75 >> 1 > v74)
                  v74 = v75 >> 1;
                if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
                  v76 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v76 = v74;
                if (v76)
                {
                  v77 = (char *)sub_1DCAE4D04((uint64_t)&v335, v76);
                  v72 = v333;
                  v62 = v334;
                }
                else
                {
                  v77 = 0;
                }
                v78 = (int *)&v77[4 * v73];
                *v78 = v320;
                v71 = v78 + 1;
                while (v62 != (char *)v72)
                {
                  v79 = *((_DWORD *)v62 - 1);
                  v62 -= 4;
                  *--v78 = v79;
                }
                v41 = &v77[4 * v76];
                v333 = v78;
                v334 = (char *)v71;
                v335 = v41;
                if (v72)
                {
                  operator delete(v72);
                  v41 = v335;
                }
              }
              else
              {
                *(_DWORD *)v62 = v320;
                v71 = (int *)(v62 + 4);
              }
              v334 = (char *)v71;
              if (v71 >= (int *)v41)
              {
                v81 = v333;
                v82 = v71 - v333;
                v83 = v82 + 1;
                if ((unint64_t)(v82 + 1) >> 62)
                  goto LABEL_355;
                v84 = v41 - (char *)v333;
                if (v84 >> 1 > v83)
                  v83 = v84 >> 1;
                if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
                  v85 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v85 = v83;
                if (v85)
                {
                  v86 = (char *)sub_1DCAE4D04((uint64_t)&v335, v85);
                  v81 = v333;
                  v71 = (int *)v334;
                }
                else
                {
                  v86 = 0;
                }
                v87 = (int *)&v86[4 * v82];
                *v87 = v319;
                v80 = (char *)(v87 + 1);
                while (v71 != v81)
                {
                  v88 = *--v71;
                  *--v87 = v88;
                }
                v41 = &v86[4 * v85];
                v333 = v87;
                v334 = v80;
                v335 = v41;
                if (v81)
                {
                  operator delete(v81);
                  v41 = v335;
                }
              }
              else
              {
                *v71 = v319;
                v80 = (char *)(v71 + 1);
              }
              v334 = v80;
              if (v80 >= v41)
              {
                v90 = v333;
                v91 = (v80 - (char *)v333) >> 2;
                v92 = v91 + 1;
                if ((unint64_t)(v91 + 1) >> 62)
LABEL_355:
                  sub_1DCAE4C44();
                v93 = v41 - (char *)v333;
                if (v93 >> 1 > v92)
                  v92 = v93 >> 1;
                if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
                  v94 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v94 = v92;
                if (v94)
                {
                  v95 = (char *)sub_1DCAE4D04((uint64_t)&v335, v94);
                  v90 = v333;
                  v80 = v334;
                }
                else
                {
                  v95 = 0;
                }
                v96 = &v95[4 * v91];
                *(_DWORD *)v96 = v318;
                v89 = v96 + 4;
                while (v80 != (char *)v90)
                {
                  v97 = *((_DWORD *)v80 - 1);
                  v80 -= 4;
                  *((_DWORD *)v96 - 1) = v97;
                  v96 -= 4;
                }
                v333 = (int *)v96;
                v334 = v89;
                v335 = &v95[4 * v94];
                if (v90)
                  operator delete(v90);
              }
              else
              {
                *(_DWORD *)v80 = v318;
                v89 = v80 + 4;
              }
              v334 = v89;
              ++v9;
              v50 = 1;
            }
            v298[0] = v10;
            *(void **)((char *)v298 + *((_QWORD *)v10 - 3)) = v11;
            *(_QWORD *)&v299 = v12;
            *((_QWORD *)&v299 + 1) = v292;
            if (SHIBYTE(v304) < 0)
              operator delete(v303[1]);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1DF0D2238](v306);
            if ((v50 & 1) == 0)
              goto LABEL_192;
            continue;
          }
          break;
        }
        LODWORD(v297.__r_.__value_.__l.__data_) = 0;
        v296 = 0;
        goto LABEL_83;
      }
LABEL_192:
      sub_1DCB28AC8((void **)&v332, v8, (std::string *)v298);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v298;
      __str.__r_.__value_.__r.__words[2] = v299;
      sub_1DCAFB818(&__str);
      std::string::operator=(&__str, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__str.__r_.__value_.__l.__size_ != 8)
          goto LABEL_200;
        v98 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 8)
          goto LABEL_200;
        v98 = &__str;
      }
      if (v98->__r_.__value_.__r.__words[0] != 0x7465636166646E65)
      {
LABEL_200:
        NSLog(CFSTR("endfacet tag missing, couldn't parse STL"));
        __p[0] = v10;
        *(void **)((char *)__p + *((_QWORD *)v10 - 3)) = v11;
        *(_QWORD *)&v309 = v12;
        *((_QWORD *)&v309 + 1) = MEMORY[0x1E0DE4FB8] + 16;
        if (SHIBYTE(v314) < 0)
          operator delete(v313[1]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1DF0D2238](v316);
        v24 = 0;
        goto LABEL_37;
      }
      __p[0] = v10;
      *(void **)((char *)__p + *((_QWORD *)v10 - 3)) = v11;
      *(_QWORD *)&v309 = v12;
      *((_QWORD *)&v309 + 1) = MEMORY[0x1E0DE4FB8] + 16;
      if (SHIBYTE(v314) < 0)
        operator delete(v313[1]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1DF0D2238](v316);
LABEL_36:
      v24 = 1;
LABEL_37:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v322[0] = v10;
      *(void **)((char *)v322 + *((_QWORD *)v10 - 3)) = v11;
      *(_QWORD *)&v323 = v12;
      *((_QWORD *)&v323 + 1) = MEMORY[0x1E0DE4FB8] + 16;
      if (SHIBYTE(v328) < 0)
        operator delete(v327[1]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1DF0D2238](v330);
      if ((v24 & 1) == 0)
        goto LABEL_349;
    }
  }
  MEMORY[0x1DF0D2028](&v336, a2, 80);
  if (a3 < 0x85)
  {
    v99 = 0;
LABEL_210:
    sub_1DCB0BBF4((void **)&v333, 18 * v99);
    if (v99)
    {
      v100 = 0;
      v101 = a2 + 84;
      v293 = v99;
      v294 = v99;
      v295 = a2 + 84;
      while (1)
      {
        v102 = (int *)(v101 + 50 * v100);
        if ((unint64_t)(v102 + 12) > v8)
        {
          v165 = v100;
          goto LABEL_318;
        }
        v103 = 0;
        v104 = *v102;
        v105 = v102[1];
        v106 = v102[2];
        v107 = v334;
        do
        {
          v109 = v102[3];
          v108 = v102[4];
          v102 += 3;
          v110 = v102[2];
          v111 = v335;
          if (v107 >= v335)
          {
            v113 = v333;
            v114 = (v107 - (char *)v333) >> 2;
            v115 = v114 + 1;
            if ((unint64_t)(v114 + 1) >> 62)
              goto LABEL_354;
            v116 = v335 - (char *)v333;
            if ((v335 - (char *)v333) >> 1 > v115)
              v115 = v116 >> 1;
            if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL)
              v117 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v117 = v115;
            if (v117)
            {
              v118 = (char *)sub_1DCAE4D04((uint64_t)&v335, v117);
              v113 = v333;
              v107 = v334;
            }
            else
            {
              v118 = 0;
            }
            v119 = &v118[4 * v114];
            *(_DWORD *)v119 = v109;
            v112 = v119 + 4;
            while (v107 != (char *)v113)
            {
              v120 = *((_DWORD *)v107 - 1);
              v107 -= 4;
              *((_DWORD *)v119 - 1) = v120;
              v119 -= 4;
            }
            v111 = &v118[4 * v117];
            v333 = (int *)v119;
            v334 = v112;
            v335 = v111;
            if (v113)
            {
              operator delete(v113);
              v111 = v335;
            }
          }
          else
          {
            *(_DWORD *)v107 = v109;
            v112 = v107 + 4;
          }
          v334 = v112;
          if (v112 >= v111)
          {
            v122 = v333;
            v123 = (v112 - (char *)v333) >> 2;
            v124 = v123 + 1;
            if ((unint64_t)(v123 + 1) >> 62)
              goto LABEL_354;
            v125 = v111 - (char *)v333;
            if (v125 >> 1 > v124)
              v124 = v125 >> 1;
            if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFFCLL)
              v126 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v126 = v124;
            if (v126)
            {
              v127 = (char *)sub_1DCAE4D04((uint64_t)&v335, v126);
              v122 = v333;
              v112 = v334;
            }
            else
            {
              v127 = 0;
            }
            v128 = &v127[4 * v123];
            *(_DWORD *)v128 = v108;
            v121 = v128 + 4;
            while (v112 != (char *)v122)
            {
              v129 = *((_DWORD *)v112 - 1);
              v112 -= 4;
              *((_DWORD *)v128 - 1) = v129;
              v128 -= 4;
            }
            v111 = &v127[4 * v126];
            v333 = (int *)v128;
            v334 = v121;
            v335 = v111;
            if (v122)
            {
              operator delete(v122);
              v111 = v335;
            }
          }
          else
          {
            *(_DWORD *)v112 = v108;
            v121 = v112 + 4;
          }
          v334 = v121;
          if (v121 >= v111)
          {
            v131 = v333;
            v132 = (v121 - (char *)v333) >> 2;
            v133 = v132 + 1;
            if ((unint64_t)(v132 + 1) >> 62)
              goto LABEL_354;
            v134 = v111 - (char *)v333;
            if (v134 >> 1 > v133)
              v133 = v134 >> 1;
            if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
              v135 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v135 = v133;
            if (v135)
            {
              v136 = (char *)sub_1DCAE4D04((uint64_t)&v335, v135);
              v131 = v333;
              v121 = v334;
            }
            else
            {
              v136 = 0;
            }
            v137 = &v136[4 * v132];
            *(_DWORD *)v137 = v110;
            v130 = v137 + 4;
            while (v121 != (char *)v131)
            {
              v138 = *((_DWORD *)v121 - 1);
              v121 -= 4;
              *((_DWORD *)v137 - 1) = v138;
              v137 -= 4;
            }
            v111 = &v136[4 * v135];
            v333 = (int *)v137;
            v334 = v130;
            v335 = v111;
            if (v131)
            {
              operator delete(v131);
              v111 = v335;
            }
          }
          else
          {
            *(_DWORD *)v121 = v110;
            v130 = v121 + 4;
          }
          v334 = v130;
          if (v130 >= v111)
          {
            v140 = v333;
            v141 = (v130 - (char *)v333) >> 2;
            v142 = v141 + 1;
            if ((unint64_t)(v141 + 1) >> 62)
              goto LABEL_354;
            v143 = v111 - (char *)v333;
            if (v143 >> 1 > v142)
              v142 = v143 >> 1;
            if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL)
              v144 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v144 = v142;
            if (v144)
            {
              v145 = (char *)sub_1DCAE4D04((uint64_t)&v335, v144);
              v140 = v333;
              v130 = v334;
            }
            else
            {
              v145 = 0;
            }
            v146 = &v145[4 * v141];
            *(_DWORD *)v146 = v104;
            v139 = v146 + 4;
            while (v130 != (char *)v140)
            {
              v147 = *((_DWORD *)v130 - 1);
              v130 -= 4;
              *((_DWORD *)v146 - 1) = v147;
              v146 -= 4;
            }
            v111 = &v145[4 * v144];
            v333 = (int *)v146;
            v334 = v139;
            v335 = v111;
            if (v140)
            {
              operator delete(v140);
              v111 = v335;
            }
          }
          else
          {
            *(_DWORD *)v130 = v104;
            v139 = v130 + 4;
          }
          v334 = v139;
          if (v139 >= v111)
          {
            v149 = v333;
            v150 = (v139 - (char *)v333) >> 2;
            v151 = v150 + 1;
            if ((unint64_t)(v150 + 1) >> 62)
              goto LABEL_354;
            v152 = v111 - (char *)v333;
            if (v152 >> 1 > v151)
              v151 = v152 >> 1;
            if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL)
              v153 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v153 = v151;
            if (v153)
            {
              v154 = (char *)sub_1DCAE4D04((uint64_t)&v335, v153);
              v149 = v333;
              v139 = v334;
            }
            else
            {
              v154 = 0;
            }
            v155 = &v154[4 * v150];
            *(_DWORD *)v155 = v105;
            v148 = v155 + 4;
            while (v139 != (char *)v149)
            {
              v156 = *((_DWORD *)v139 - 1);
              v139 -= 4;
              *((_DWORD *)v155 - 1) = v156;
              v155 -= 4;
            }
            v111 = &v154[4 * v153];
            v333 = (int *)v155;
            v334 = v148;
            v335 = v111;
            if (v149)
            {
              operator delete(v149);
              v111 = v335;
            }
          }
          else
          {
            *(_DWORD *)v139 = v105;
            v148 = v139 + 4;
          }
          v334 = v148;
          if (v148 >= v111)
          {
            v157 = v333;
            v158 = (v148 - (char *)v333) >> 2;
            v159 = v158 + 1;
            if ((unint64_t)(v158 + 1) >> 62)
LABEL_354:
              sub_1DCAE4C44();
            v160 = v111 - (char *)v333;
            if (v160 >> 1 > v159)
              v159 = v160 >> 1;
            if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
              v161 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v161 = v159;
            if (v161)
            {
              v162 = (char *)sub_1DCAE4D04((uint64_t)&v335, v161);
              v157 = v333;
              v148 = v334;
            }
            else
            {
              v162 = 0;
            }
            v163 = &v162[4 * v158];
            *(_DWORD *)v163 = v106;
            v107 = v163 + 4;
            while (v148 != (char *)v157)
            {
              v164 = *((_DWORD *)v148 - 1);
              v148 -= 4;
              *((_DWORD *)v163 - 1) = v164;
              v163 -= 4;
            }
            v333 = (int *)v163;
            v334 = v107;
            v335 = &v162[4 * v161];
            if (v157)
              operator delete(v157);
          }
          else
          {
            *(_DWORD *)v148 = v106;
            v107 = v148 + 4;
          }
          v334 = v107;
          ++v103;
        }
        while (v103 != 3);
        v101 = v295;
        if (50 * v100 + v295 + 50 > v8)
          break;
        if (++v100 == v294)
        {
          v165 = v293;
          goto LABEL_318;
        }
      }
      v165 = v100 + 1;
    }
    else
    {
      v165 = 0;
    }
LABEL_318:
    v9 = 3 * v165;
LABEL_319:
    v166 = sub_1DCAFB818(&v336);
    std::string::operator=(v166, &v336);
    if (v9 >= 0x10000)
      v167 = 32;
    else
      v167 = 16;
    v168 = v9;
    if (HIWORD(v9))
    {
      v322[1] = 0;
      v322[0] = 0;
      *(_QWORD *)&v323 = 0;
      sub_1DCB231F4((uint64_t)v322, v9);
      v186 = 0;
      v187 = v322[0];
      do
      {
        v187[v186] = v186;
        ++v186;
      }
      while (v9 != v186);
      v188 = objc_alloc(MEMORY[0x1E0C99D50]);
      v173 = (void *)objc_msgSend_initWithBytes_length_(v188, v189, (uint64_t)v322[0], 4 * v9);
      objc_msgSend_bufferAllocator(v291, v190, v191);
      v192 = (void *)objc_claimAutoreleasedReturnValue();
      v178 = (void *)objc_msgSend_newBufferWithData_type_(v192, v193, (uint64_t)v173, 2);

      if (objc_msgSend_conformsToProtocol_(v178, v194, (uint64_t)&unk_1F03B6D88))
      {
        if ((v336.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v195, (uint64_t)&v336, 4);
        else
          objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v195, (uint64_t)v336.__r_.__value_.__l.__data_, 4);
        v196 = (void *)objc_claimAutoreleasedReturnValue();
        v197 = v178;
        objc_msgSend_stringByAppendingString_(v196, v198, (uint64_t)CFSTR("-Indices"));
        v199 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setName_(v197, v200, (uint64_t)v199);

      }
    }
    else
    {
      v322[1] = 0;
      v322[0] = 0;
      *(_QWORD *)&v323 = 0;
      sub_1DCB2A704((uint64_t)v322, v9);
      if (v9)
      {
        v169 = 0;
        v170 = v322[0];
        do
        {
          v170[v169] = v169;
          ++v169;
        }
        while (v169 < (unsigned __int16)v9);
      }
      v171 = objc_alloc(MEMORY[0x1E0C99D50]);
      v173 = (void *)objc_msgSend_initWithBytes_length_(v171, v172, (uint64_t)v322[0], 2 * v9);
      objc_msgSend_bufferAllocator(v291, v174, v175);
      v176 = (void *)objc_claimAutoreleasedReturnValue();
      v178 = (void *)objc_msgSend_newBufferWithData_type_(v176, v177, (uint64_t)v173, 2);

      if (objc_msgSend_conformsToProtocol_(v178, v179, (uint64_t)&unk_1F03B6D88))
      {
        if ((v336.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v180, (uint64_t)&v336, 4);
        else
          objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v180, (uint64_t)v336.__r_.__value_.__l.__data_, 4);
        v181 = (void *)objc_claimAutoreleasedReturnValue();
        v182 = v178;
        objc_msgSend_stringByAppendingString_(v181, v183, (uint64_t)CFSTR("-Indices"));
        v184 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setName_(v182, v185, (uint64_t)v184);

      }
    }

    if (v322[0])
    {
      v322[1] = v322[0];
      operator delete(v322[0]);
    }
    v201 = [MDLSubmesh alloc];
    v202 = [MDLMaterial alloc];
    v203 = (void *)objc_opt_new();
    v205 = (void *)objc_msgSend_initWithName_scatteringFunction_(v202, v204, (uint64_t)CFSTR("STL material"), v203);
    v207 = (void *)objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v201, v206, (uint64_t)v178, v9, v167, 2, v205);

    v208 = (void *)objc_opt_new();
    objc_msgSend_attributes(v208, v209, v210);
    v211 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v211, v212, 0);
    v213 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v213, v214, (uint64_t)CFSTR("position"));

    objc_msgSend_attributes(v208, v215, v216);
    v217 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v217, v218, 0);
    v219 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFormat_(v219, v220, 786435);

    objc_msgSend_attributes(v208, v221, v222);
    v223 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v223, v224, 0);
    v225 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBufferIndex_(v225, v226, 0);

    objc_msgSend_attributes(v208, v227, v228);
    v229 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v229, v230, 0);
    v231 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOffset_(v231, v232, 0);

    objc_msgSend_attributes(v208, v233, v234);
    v235 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v235, v236, 1);
    v237 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v237, v238, (uint64_t)CFSTR("normal"));

    objc_msgSend_attributes(v208, v239, v240);
    v241 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v241, v242, 1);
    v243 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFormat_(v243, v244, 786435);

    objc_msgSend_attributes(v208, v245, v246);
    v247 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v247, v248, 1);
    v249 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBufferIndex_(v249, v250, 0);

    objc_msgSend_attributes(v208, v251, v252);
    v253 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v253, v254, 1);
    v255 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOffset_(v255, v256, 12);

    objc_msgSend_layouts(v208, v257, v258);
    v259 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v259, v260, 0);
    v261 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setStride_(v261, v262, 24);

    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v263, (uint64_t)v333, v334 - (char *)v333);
    v265 = (void *)objc_claimAutoreleasedReturnValue();
    if ((v336.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v264, (uint64_t)&v336, 4);
    else
      objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v264, (uint64_t)v336.__r_.__value_.__l.__data_, 4);
    v266 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_bufferAllocator(v291, v267, v268);
    v269 = (void *)objc_claimAutoreleasedReturnValue();
    v271 = (void *)objc_msgSend_newBufferWithData_type_(v269, v270, (uint64_t)v265, 1);

    if (objc_msgSend_conformsToProtocol_(v271, v272, (uint64_t)&unk_1F03B6D88))
    {
      v273 = v271;
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v274, (uint64_t)CFSTR("%@-%@"), v266, CFSTR("position"));
      v275 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setName_(v273, v276, (uint64_t)v275);

    }
    v277 = [MDLMesh alloc];
    v337[0] = v207;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v278, (uint64_t)v337, 1);
    v279 = (void *)objc_claimAutoreleasedReturnValue();
    v281 = (void *)objc_msgSend_initWithVertexBuffer_vertexCount_descriptor_submeshes_(v277, v280, (uint64_t)v271, v168, v208, v279);

    objc_msgSend_vertexDescriptor(v291, v282, v283);
    v284 = (void *)objc_claimAutoreleasedReturnValue();
    v285 = v284 == 0;

    if (!v285)
    {
      objc_msgSend_vertexDescriptor(v291, v286, v287);
      v288 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setVertexDescriptor_(v281, v289, (uint64_t)v288);

    }
    objc_msgSend_setName_(v281, v286, (uint64_t)v266);
    objc_msgSend_addObject_(v291, v290, (uint64_t)v281);

    goto LABEL_349;
  }
  v99 = *(_DWORD *)(a2 + 80);
  if (v99 < 0xE38E38F)
    goto LABEL_210;
  NSLog(CFSTR("Bad triangle count, couldn't parse STL"));
LABEL_349:
  if (v333)
  {
    v334 = (char *)v333;
    operator delete(v333);
  }
  if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v336.__r_.__value_.__l.__data_);
LABEL_353:

}

void sub_1DCB2A3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v19;
  void *v20;

  v19 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v19;
    operator delete(v19);
  }

  v20 = *(void **)(v17 - 200);
  if (v20)
  {
    *(_QWORD *)(v17 - 192) = v20;
    operator delete(v20);
  }
  if (*(char *)(v17 - 153) < 0)
    operator delete(*(void **)(v17 - 176));

  _Unwind_Resume(a1);
}

void sub_1DCB2A704(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    sub_1DCB2ACB8((char **)a1, a2 - v2);
  }
}

BOOL sub_1DCB2A734(char *a1, void *a2)
{
  id v3;
  FILE *v4;
  std::string *p_str;
  std::string::size_type size;
  char *v7;
  int v8;
  void *v9;
  char v10;
  std::string *p_p;
  std::string::size_type v12;
  char *v13;
  int v14;
  std::string *v15;
  std::string::size_type v16;
  _BOOL8 v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  __int128 v26;
  size_t v27;
  unsigned int v29;
  std::string v30;
  std::string __p;
  std::string __str;
  _BYTE __ptr[32];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = fopen(a1, "wb");
  if (v4)
  {
    memset(&__str, 0, sizeof(__str));
    sub_1DCB0345C(&__str, a1);
    memset(&__p, 0, sizeof(__p));
    memset(&v30, 0, sizeof(v30));
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      size = __str.__r_.__value_.__l.__size_;
    }
    else
    {
      p_str = &__str;
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    v7 = (char *)&p_str[-1].__r_.__value_.__r.__words[2] + 7;
    do
    {
      if (!size)
        goto LABEL_12;
      v8 = v7[size--];
    }
    while (v8 != 46);
    if (size == -1)
    {
LABEL_12:
      v10 = 0;
      v9 = 0;
      std::string::operator=(&__p, &__str);
      goto LABEL_13;
    }
    std::string::basic_string((std::string *)__ptr, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v29);
    v9 = *(void **)__ptr;
    v10 = __ptr[23];
    std::string::basic_string((std::string *)__ptr, &__str, 0, size, (std::allocator<char> *)&v29);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = *(std::string *)__ptr;
LABEL_13:
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = __p.__r_.__value_.__l.__size_;
    v13 = (char *)&p_p[-1].__r_.__value_.__r.__words[2] + 7;
    do
    {
      if (!v12)
        goto LABEL_24;
      v14 = v13[v12--];
    }
    while (v14 != 47);
    if (v12 == -1)
    {
LABEL_24:
      std::string::operator=(&v30, &__p);
      goto LABEL_25;
    }
    std::string::basic_string((std::string *)__ptr, &__p, v12 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v29);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    v30 = *(std::string *)__ptr;
LABEL_25:
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    memset(__ptr, 0, sizeof(__ptr));
    v15 = &v30;
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = (std::string *)v30.__r_.__value_.__r.__words[0];
    snprintf(__ptr, 0x50uLL, "%s", (const char *)v15);
    v16 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v16 = v30.__r_.__value_.__l.__size_;
    if (v16 >= 0x4F)
      v16 = 79;
    memset(&__ptr[v16], 32, 80 - v16);
    fwrite(__ptr, 1uLL, 0x50uLL, v4);
    memset(__ptr, 0, 24);
    sub_1DCADE880(v3, __ptr);
    v29 = -1227133513 * ((*(_QWORD *)&__ptr[8] - *(_QWORD *)__ptr) >> 5);
    fwrite(&v29, 1uLL, 4uLL, v4);
    v17 = v29 < 0x51EB852uLL;
    if (v29 >= 0x51EB852)
    {
      fclose(v4);
      NSLog(CFSTR("Too many triangles to write, file not saved"));
    }
    else
    {
      v18 = (char *)malloc_type_malloc(50 * v29, 0x88B69847uLL);
      if (v29)
      {
        v19 = 0;
        v20 = 0;
        v21 = v18 + 20;
        do
        {
          v22 = &v18[50 * v20];
          *(_QWORD *)v22 = 0;
          *((_DWORD *)v22 + 2) = 0;
          v23 = *(_QWORD *)__ptr + v19;
          v24 = 16;
          v25 = v21;
          do
          {
            v26 = *(_OWORD *)(v23 + v24);
            *((_QWORD *)v25 - 1) = v26;
            *v25 = DWORD2(v26);
            v25 += 3;
            v24 += 16;
          }
          while (v24 != 64);
          *((_WORD *)v22 + 24) = 0;
          ++v20;
          v21 = (_DWORD *)((char *)v21 + 50);
          v19 += 224;
        }
        while (v20 < v29);
        v27 = 50 * v29;
      }
      else
      {
        v27 = 0;
      }
      fwrite(v18, 1uLL, v27, v4);
      fclose(v4);
    }
    if (*(_QWORD *)__ptr)
    {
      *(_QWORD *)&__ptr[8] = *(_QWORD *)__ptr;
      operator delete(*(void **)__ptr);
    }
    if (v10 < 0)
      operator delete(v9);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = 0;
  }

  return v17;
}

void sub_1DCB2AB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31)
{
  void *v31;
  void *v32;
  char v33;

  if (v33 < 0)
    operator delete(v32);
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);

  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1DCB2ABAC(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *result;
  unsigned __int8 *v6;
  int v8;

  result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (_BYTE *)a1);
  if (!result)
    result = a2;
  v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      v8 = *v6;
      if (v8 != *a3)
        *result++ = v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

_QWORD *sub_1DCB2AC10(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_1DCB011AC();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void sub_1DCB2ACB8(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      sub_1DCAE4C44();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1DCB0DAEC(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t sub_1DCB2ADB8(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)a1 = 0x3FC90FDB40200000;
  *(_DWORD *)(a1 + 8) = 1070141403;
  *(_DWORD *)(a1 + 16) = 1036831949;
  *(_OWORD *)(a1 + 48) = xmmword_1DCC58480;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 84) = xmmword_1DCC58490;
  v2 = (_QWORD *)operator new();
  *v2 = 0;
  *(_QWORD *)(a1 + 104) = v2;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  return a1;
}

uint64_t sub_1DCB2AE48(uint64_t a1)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(a1 + 104);
  if (v2)
  {
    if (*v2)
      MEMORY[0x1DF0D228C](*v2, 0x1000C40265AC83CLL);
    MEMORY[0x1DF0D228C](v2, 0x20C4093837F09);
  }
  free(*(void **)(a1 + 136));
  return a1;
}

void sub_1DCB2AEB0(double a1, double a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, float32x4_t *a8, unsigned int a9, uint64_t a10)
{
  float32x4_t *v12;
  int v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  float32x4_t v33;
  double v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned __int32 v43;
  unsigned int v44;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  uint64_t v60;
  float *v61;
  float v62;
  float v63;
  uint64_t v64;
  float v65;
  float32x4_t v66;
  double v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  float *v75;
  float v76;
  float v77;
  uint64_t v78;
  float v79;
  float32x4_t v80;
  double v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float v89;
  float32x4_t v90;
  float v91;
  float v92;
  _OWORD v93[3];
  __int128 v94;
  uint64_t v95;

  v12 = a8;
  v14 = a6 * a5;
  if (a7)
  {
    v15 = 0uLL;
    if (v14 >= 1)
    {
      v16 = (a6 * a5);
      v17 = a8;
      do
      {
        v18 = *v17++;
        HIDWORD(a2) = v18.i32[1];
        v15 = vaddq_f32(v18, v15);
        --v16;
      }
      while (v16);
    }
    *(float *)&a2 = (float)v14;
    __asm { FMOV            V2.4S, #1.0 }
    v23 = vmulq_f32(v15, vdivq_f32(_Q2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0)));
    *(_QWORD *)(a4 + 68) = v23.i64[0];
    *(_DWORD *)(a4 + 76) = v23.i32[2];
    v24 = *(float *)(a4 + 64) * v23.f32[0];
  }
  else
  {
    v24 = -0.0019;
  }
  v95 = 0;
  v94 = 0u;
  memset(v93, 0, sizeof(v93));
  sub_1DCB2B8D4((float *)v93, *(float *)(a4 + 48), *(float *)(a4 + 52), *(float *)(a4 + 56), *(float *)(a4 + 60), v24, *(float *)(a4 + 80), *(float *)(a4 + 84));
  if (a9)
  {
    if (a9 > 2)
    {
      if (a9 == 3 && v14 >= 1)
      {
        v74 = 0;
        v75 = &v12->f32[1];
        do
        {
          v76 = *v75;
          v77 = v75[1];
          *(float *)&v78 = sub_1DCB2B53C((float *)v93, *(v75 - 1));
          v88.i64[0] = v78;
          v92 = sub_1DCB2B53C((float *)&v93[1] + 2, v76);
          v79 = sub_1DCB2B53C((float *)&v94, v77);
          v80 = v88;
          v80.f32[1] = v92;
          v81 = v88.f32[0] * 0.212655 + v92 * 0.715158 + v79 * 0.072187;
          *(float *)&v81 = v81;
          v80.f32[2] = v79;
          v82 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v81, 0);
          v82.i32[3] = 1.0;
          v83 = vmlaq_n_f32(vnegq_f32(v82), v80, COERCE_FLOAT(*(_QWORD *)(a4 + 88)));
          v80.i64[0] = 0xBF000000BF000000;
          v80.i64[1] = 0xBF000000BF000000;
          v84 = vmlaq_n_f32(vaddq_f32(v82, v80), v83, COERCE_FLOAT(*(_OWORD *)(a4 + 92)));
          v80.i64[0] = 0x3F0000003F000000;
          v80.i64[1] = 0x3F0000003F000000;
          v85 = vmlaq_n_f32(v80, v84, COERCE_FLOAT(*(_OWORD *)(a4 + 96)));
          *(_QWORD *)(a10 + 4 * v74) = v85.i64[0];
          *(_DWORD *)(a10 + 4 * (v74 + 2)) = v85.i32[2];
          *(_DWORD *)(a10 + 4 * (v74 + 3)) = 1065353216;
          v74 += 4;
          v75 += 4;
        }
        while (4 * v14 != v74);
      }
    }
    else if (v14 >= 1)
    {
      v25 = 0;
      v26 = 4 * v14;
      v27 = 0uLL;
      do
      {
        v28 = *v12;
        if (a9 != 2)
        {
          LODWORD(v29) = v12->i64[1];
          LODWORD(v30) = HIDWORD(v12->i64[0]);
          *(float *)&v31 = sub_1DCB2B53C((float *)v93, v28.f32[0]);
          v90.i64[0] = v31;
          v89 = sub_1DCB2B53C((float *)&v93[1] + 2, v30);
          v32 = sub_1DCB2B53C((float *)&v94, v29);
          v33 = v90;
          v33.f32[1] = v89;
          v33.f32[2] = v32;
          v34 = v90.f32[0] * 0.212655 + v89 * 0.715158 + v32 * 0.072187;
          *(float *)&v34 = v34;
          v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v34, 0);
          v35.i32[3] = 1.0;
          v36 = vmlaq_n_f32(vnegq_f32(v35), v33, COERCE_FLOAT(*(_QWORD *)(a4 + 88)));
          v33.i64[0] = 0xBF000000BF000000;
          v33.i64[1] = 0xBF000000BF000000;
          v37 = vmlaq_n_f32(vaddq_f32(v35, v33), v36, COERCE_FLOAT(*(_OWORD *)(a4 + 92)));
          v35.i64[0] = 0x3F0000003F000000;
          v35.i64[1] = 0x3F0000003F000000;
          v28 = vmlaq_n_f32(v35, v37, COERCE_FLOAT(*(_OWORD *)(a4 + 96)));
          v27 = 0uLL;
        }
        v28.i32[3] = 0;
        v38 = vmaxnmq_f32(v28, v27);
        v39 = v38.i32[0] & 0x7FFFFFFF;
        v40 = HIWORD(v38.i32[0]) & 0x8000;
        if ((v38.i32[0] & 0x7FFFFFFFu) <= 0x387FFFFF)
        {
          if (v39 >= 0x33000001)
          {
            v42 = 126 - (v39 >> 23);
            v43 = v38.i32[0] & 0x7FFFFF | 0x800000;
            v44 = v43 << ((v39 >> 23) - 94);
            v40 = (v43 >> v42) | HIWORD(v38.i32[0]) & 0x8000;
            if (v44 > 0x80000000 || (v44 == 0x80000000 ? (_ZF = ((v43 >> v42) & 1) == 0) : (_ZF = 1), !_ZF))
              LOWORD(v40) = v40 + 1;
          }
        }
        else
        {
          v41 = v40 | ((v38.i32[0] + 134221823 + (((unsigned __int32)v38.i32[0] >> 13) & 1)) >> 13);
          LOWORD(v40) = v40 | 0x7C00;
          if (v39 > 0x477FEFFF)
            LOWORD(v41) = v40;
          if (v39 != 2139095040)
            LOWORD(v40) = ((((unsigned __int32)v38.i32[0] >> 13) & 0x3FF) == 0) | ((unsigned __int32)v38.i32[0] >> 13) & 0x3FF | v40;
          if (v39 <= 0x7F7FFFFF)
            LOWORD(v40) = v41;
        }
        *(_WORD *)(a10 + 2 * v25) = v40;
        v46 = v38.i32[1] & 0x7FFFFFFF;
        v47 = HIWORD(v38.i32[1]) & 0x8000;
        if ((v38.i32[1] & 0x7FFFFFFFu) <= 0x387FFFFF)
        {
          if (v46 >= 0x33000001)
          {
            v49 = 126 - (v46 >> 23);
            v50 = v38.i32[1] & 0x7FFFFF | 0x800000;
            v51 = v50 << ((v46 >> 23) - 94);
            v47 = (v50 >> v49) | HIWORD(v38.i32[1]) & 0x8000;
            if (v51 > 0x80000000 || (v51 == 0x80000000 ? (v52 = ((v50 >> v49) & 1) == 0) : (v52 = 1), !v52))
              LOWORD(v47) = v47 + 1;
          }
        }
        else
        {
          v48 = v47 | ((v38.i32[1] + 134221823 + (((unsigned __int32)v38.i32[1] >> 13) & 1)) >> 13);
          LOWORD(v47) = v47 | 0x7C00;
          if (v46 > 0x477FEFFF)
            LOWORD(v48) = v47;
          if (v46 != 2139095040)
            LOWORD(v47) = ((((unsigned __int32)v38.i32[1] >> 13) & 0x3FF) == 0) | ((unsigned __int32)v38.i32[1] >> 13) & 0x3FF | v47;
          if (v46 <= 0x7F7FFFFF)
            LOWORD(v47) = v48;
        }
        *(_WORD *)(a10 + 2 * (v25 + 1)) = v47;
        v53 = v38.i32[2] & 0x7FFFFFFF;
        v54 = HIWORD(v38.i32[2]) & 0x8000;
        if ((v38.i32[2] & 0x7FFFFFFFu) <= 0x387FFFFF)
        {
          if (v53 >= 0x33000001)
          {
            v56 = 126 - (v53 >> 23);
            v57 = v38.i32[2] & 0x7FFFFF | 0x800000;
            v58 = v57 << ((v53 >> 23) - 94);
            v54 = (v57 >> v56) | HIWORD(v38.i32[2]) & 0x8000;
            if (v58 > 0x80000000 || (v58 == 0x80000000 ? (v59 = ((v57 >> v56) & 1) == 0) : (v59 = 1), !v59))
              LOWORD(v54) = v54 + 1;
          }
        }
        else
        {
          v55 = v54 | ((v38.i32[2] + 134221823 + (((unsigned __int32)v38.i32[2] >> 13) & 1)) >> 13);
          LOWORD(v54) = v54 | 0x7C00;
          if (v53 > 0x477FEFFF)
            LOWORD(v55) = v54;
          if (v53 != 2139095040)
            LOWORD(v54) = ((((unsigned __int32)v38.i32[2] >> 13) & 0x3FF) == 0) | ((unsigned __int32)v38.i32[2] >> 13) & 0x3FF | v54;
          if (v53 <= 0x7F7FFFFF)
            LOWORD(v54) = v55;
        }
        *(_WORD *)(a10 + 2 * (v25 + 2)) = v54;
        *(_WORD *)(a10 + 2 * (v25 + 3)) = 15360;
        ++v12;
        v25 += 4;
      }
      while (v26 != v25);
    }
  }
  else if (v14 >= 1)
  {
    v60 = 0;
    v61 = &v12->f32[1];
    v86 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v87 = (float32x4_t)vdupq_n_s32(0x42FF0000u);
    do
    {
      v62 = *v61;
      v63 = v61[1];
      *(float *)&v64 = sub_1DCB2B53C((float *)v93, *(v61 - 1));
      v88.i64[0] = v64;
      v91 = sub_1DCB2B53C((float *)&v93[1] + 2, v62);
      v65 = sub_1DCB2B53C((float *)&v94, v63);
      v66 = v88;
      v66.f32[1] = v91;
      v66.f32[2] = v65;
      v67 = v88.f32[0] * 0.212655 + v91 * 0.715158 + v65 * 0.072187;
      *(float *)&v67 = v67;
      v68 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v67, 0);
      v69 = vmulq_n_f32(v66, COERCE_FLOAT(*(_QWORD *)(a4 + 88)));
      v68.i32[3] = 1.0;
      v69.i32[3] = 1.0;
      v70 = vsubq_f32(v69, v68);
      v71.i64[0] = 0xBF000000BF000000;
      v71.i64[1] = 0xBF000000BF000000;
      v72 = vmlaq_n_f32(vaddq_f32(v68, v71), v70, COERCE_FLOAT(*(_OWORD *)(a4 + 92)));
      v70.i32[0] = 1132396544;
      v73 = vminnmq_f32(vmaxnmq_f32(vmlaq_n_f32(v87, v72, vmulq_f32(*(float32x4_t *)(a4 + 96), v70).f32[0]), (float32x4_t)0), v86);
      *(_BYTE *)(a10 + v60) = (int)v73.f32[0];
      *(_BYTE *)(a10 + (v60 + 1)) = (int)v73.f32[1];
      *(_BYTE *)(a10 + (v60 + 2)) = (int)v73.f32[2];
      *(_BYTE *)(a10 + (v60 + 3)) = -1;
      v60 += 4;
      v61 += 4;
    }
    while (4 * v14 != v60);
  }
}

float sub_1DCB2B53C(float *a1, float a2)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = fmaxf(a2 - a1[2], 0.0) * a1[1];
  v4 = a1[3];
  if (v3 > v4)
  {
    v5 = a1[4];
    v3 = (float)(logf((float)(v5 * (float)(v3 - v4)) + 1.0) / v5) + v4;
  }
  v6 = powf(v3, *a1) * a1[5];
  if (v6 < 0.0)
    v6 = 0.0;
  return fminf(v6, 1.0);
}

uint64_t sub_1DCB2B5C4(uint64_t *a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = 1.0;
  if (*a2 >= 1.0)
    v4 = *a2;
  v5 = fminf(v4, 10.0);
  v6 = 0.0;
  if (a2[1] >= 0.0)
    v6 = a2[1];
  v7 = fminf(v6, 1.5708);
  v8 = *a1;
  if (v8)
    MEMORY[0x1DF0D228C](v8, 0x1000C40265AC83CLL);
  v9 = operator new();
  result = sub_1DCB2BAA8(v9, v5, a2[4], v7);
  *a1 = v9;
  return result;
}

void sub_1DCB2B678(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D228C](v1, 0x1000C40265AC83CLL);
  _Unwind_Resume(a1);
}

void sub_1DCB2B69C(uint64_t a1, int a2, int a3, int a4, int a5, float32x4_t *a6, unsigned int a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  int32x4_t v13;
  float32x4_t v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  float32x4_t v20;
  int8x16_t v21;
  unsigned int v22;
  float i;
  float j;
  float32x4_t v32;
  float32x4_t v35;
  double v38;
  float v39;
  float32x4_t v40;

  v11 = dword_1DCC584E0[a2];
  v12 = sub_1DCB2B5C4(*(uint64_t **)(a1 + 104), (float *)a1);
  if (a4 >= 1)
  {
    v16 = 0;
    v13 = vdupq_n_s32(0x3E124925u);
    v35 = (float32x4_t)v13;
    do
    {
      if (a5 >= 1)
      {
        v17 = 0;
        do
        {
          v18 = 0;
          LODWORD(v19) = v16;
          HIDWORD(v19) = a5 - v17;
          v38 = v19;
          v14 = 0uLL;
          do
          {
            v40 = v14;
            LODWORD(v15.f64[0]) = dword_1DCC584F8[v18];
            *(double *)v20.i64 = directionForPixel(v11, *(float *)&a4, v38, v15);
            v21 = (int8x16_t)vnegq_f32(v20);
            if (a3)
              v22 = -1;
            else
              v22 = 0;
            _Q1 = vbslq_s8((int8x16_t)vdupq_n_s32(v22), (int8x16_t)v20, v21);
            _S9 = *(float *)&_Q1.i32[2];
            __asm { FMLA            S0, S9, V1.S[2] }
            v39 = *(float *)_Q1.i32;
            for (i = atan2f(sqrtf(_S0), *(float *)&_Q1.i32[1]); i < 0.0; i = i + 6.28318531)
              ;
            while (i >= 6.28318531)
              i = i + -6.28318531;
            for (j = atan2f(v39, _S9); j < 0.0; j = j + 6.28318531)
              ;
            while (j >= 6.28318531)
              j = j + -6.28318531;
            sub_1DCB2BFA0(**(float ***)(a1 + 104), j, i, *(float *)(a1 + 8), *(float *)(a1 + 12));
            v14 = vaddq_f32(v32, v40);
            ++v18;
          }
          while (v18 != 7);
          v13 = (int32x4_t)vmulq_f32(v14, v35);
          a6[v16 + v17 * a4] = (float32x4_t)v13;
          ++v17;
        }
        while (v17 != a5);
      }
      ++v16;
    }
    while (v16 != a4);
  }
  sub_1DCB2AEB0(*(double *)v13.i64, *(double *)v14.i64, v12, a1, a4, a5, 0, a6, a7, a8);
}

float *sub_1DCB2B8D4(float *a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
  float *v15;

  v15 = sub_1DCB2B970(a1, a2, a5, a6, a7, a8);
  sub_1DCB2B970(v15 + 6, a3, a5, a6, a7, a8);
  sub_1DCB2B970(a1 + 12, a4, a5, a6, a7, a8);
  return a1;
}

float *sub_1DCB2B970(float *a1, float a2, float a3, float a4, float a5, float a6)
{
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  float v18;

  *a1 = a2;
  v11 = exp2(a3 + 2.47393);
  a1[1] = v11;
  a1[2] = a4;
  v12 = exp2(a5);
  a1[3] = v12;
  v13 = exp2(a6) - v12;
  v14 = 11.3137085 - v12;
  v15 = 0.0;
  v16 = 1.0;
  if (logf(v13 + 1.0) > v14)
  {
    do
    {
      v15 = v16;
      v16 = v16 + v16;
    }
    while ((float)(logf((float)(v16 * v13) + 1.0) / v16) > v14);
  }
  v17 = 30;
  do
  {
    if ((float)(logf((float)((float)((float)(v16 + v15) * 0.5) * v13) + 1.0) / (float)((float)(v16 + v15) * 0.5)) >= v14)
      v15 = (float)(v16 + v15) * 0.5;
    else
      v16 = (float)(v16 + v15) * 0.5;
    --v17;
  }
  while (v17);
  a1[4] = (float)(v15 + v16) * 0.5;
  v18 = exp2(a2 * -3.5);
  a1[5] = v18;
  return a1;
}

uint64_t sub_1DCB2BAA8(uint64_t a1, double a2, double a3, double a4)
{
  double v8;
  double v9;
  double v10;

  *(double *)(a1 + 120) = a2;
  *(double *)(a1 + 128) = a3;
  *(double *)(a1 + 136) = a4;
  sub_1DCB2BBA8(a2, a3, a4, a1, (uint64_t)&unk_1F03AD770, a1);
  sub_1DCB2BBA8(a2, a3, a4, a1, (uint64_t)&unk_1F03AF930, a1 + 36);
  sub_1DCB2BBA8(a2, a3, a4, a1, (uint64_t)&unk_1F03B1AF0, a1 + 72);
  sub_1DCB2BE24(a2, a3, a4, a1, (uint64_t)&unk_1F03B3CB0);
  *(float *)&v8 = v8;
  *(_DWORD *)(a1 + 108) = LODWORD(v8);
  sub_1DCB2BE24(a2, a3, a4, a1, (uint64_t)&unk_1F03B4070);
  *(float *)&v9 = v9;
  *(_DWORD *)(a1 + 112) = LODWORD(v9);
  sub_1DCB2BE24(a2, a3, a4, a1, (uint64_t)&unk_1F03B4430);
  *(float *)&v10 = v10;
  *(_DWORD *)(a1 + 116) = LODWORD(v10);
  return a1;
}

void sub_1DCB2BBA8(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9;
  double v10;
  long double v11;
  uint64_t v12;
  long double v13;
  long double v14;
  double v15;
  long double v16;
  long double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  float v25;
  uint64_t v26;
  double *v27;
  float v28;
  uint64_t v29;
  double *v30;
  float v31;
  uint64_t v32;
  double *v33;
  float v34;

  v9 = (int)a1;
  v10 = a1 - trunc(a1);
  v11 = pow(a3 * 0.636619772, 0.333333333);
  v12 = 0;
  v13 = 1.0 - v11;
  v14 = v13 * v13;
  v15 = (1.0 - v11) * (v14 * v14);
  v16 = v11 * v11;
  v17 = v11 * (v11 * v11);
  v18 = v11 * (v16 * v16);
  v19 = 54 * v9;
  v20 = v14 * v14 * v11;
  v21 = v13 * v16 * (v13 * v13);
  v22 = v13 * v13 * v17;
  v23 = v16 * v16 * v13;
  v24 = (double *)(a5 + 8 * (54 * v9 - 54) + 216);
  do
  {
    v25 = (1.0 - v10)
        * (1.0 - a2)
        * (*(v24 - 27) * v15
         + v24[18] * v18
         + (v21 * *(v24 - 9) + v22 * *v24) * 10.0
         + (v20 * *(v24 - 18) + v23 * v24[9]) * 5.0);
    *(float *)(a6 + v12) = v25;
    v12 += 4;
    ++v24;
  }
  while (v12 != 36);
  v26 = 0;
  v27 = (double *)(a5 + 8 * (v19 + 486) + 216);
  do
  {
    v28 = *(float *)(a6 + v26)
        + (1.0 - v10)
        * a2
        * (*(v27 - 27) * v15
         + v27[18] * v18
         + (v21 * *(v27 - 9) + v22 * *v27) * 10.0
         + (v20 * *(v27 - 18) + v23 * v27[9]) * 5.0);
    *(float *)(a6 + v26) = v28;
    v26 += 4;
    ++v27;
  }
  while (v26 != 36);
  if (v9 != 10)
  {
    v29 = 0;
    v30 = (double *)(a5 + 8 * v19 + 144);
    do
    {
      v31 = *(float *)(a6 + v29)
          + v10
          * (1.0 - a2)
          * (*(v30 - 18) * v15
           + v30[27] * v18
           + (v21 * *v30 + v22 * v30[9]) * 10.0
           + (v20 * *(v30 - 9) + v23 * v30[18]) * 5.0);
      *(float *)(a6 + v29) = v31;
      v29 += 4;
      ++v30;
    }
    while (v29 != 36);
    v32 = 0;
    v33 = (double *)(a5 + 8 * (v19 + 540) + 144);
    do
    {
      v34 = *(float *)(a6 + v32)
          + v10
          * a2
          * (*(v33 - 18) * v15
           + v33[27] * v18
           + (v21 * *v33 + v22 * v33[9]) * 10.0
           + (v20 * *(v33 - 9) + v23 * v33[18]) * 5.0);
      *(float *)(a6 + v32) = v34;
      v32 += 4;
      ++v33;
    }
    while (v32 != 36);
  }
}

void sub_1DCB2BE24(double a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  int v6;
  long double v7;
  float64x2_t v8;
  float64x2_t v9;
  int8x16_t v16;

  v6 = (int)a1;
  v7 = pow(a3 * 0.636619772, 0.333333333);
  v8.f64[0] = 1.0 - v7;
  v8.f64[1] = v7;
  v9 = vmulq_f64(v8, v8);
  _Q5 = vmulq_f64(v8, v9);
  __asm { FMOV            V6.2D, #10.0 }
  v16 = (int8x16_t)vmulq_f64(v9, _Q6);
  _Q6 = vmulq_f64((float64x2_t)vextq_s8(v16, v16, 8uLL), _Q5);
  _Q5.f64[0] = *(float64_t *)(a5 + 8 * (6 * v6 - 6) + 24);
  __asm { FMLA            D17, D5, V6.D[1] }
  _D18 = *(_QWORD *)(a5 + 8 * (6 * v6 + 54) + 24);
  __asm { FMLA            D7, D18, V6.D[1] }
}

void sub_1DCB2BFA0(float *a1, float a2, float a3, float a4, float a5)
{
  __float2 v10;
  __float2 v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v10 = __sincosf_stret(a3);
  v11 = __sincosf_stret(a4);
  v12 = (float)(v11.__cosval * v10.__cosval) + (float)((float)(v11.__sinval * v10.__sinval) * cosf(a5 - a2));
  v13 = 0.0;
  if (v12 <= 1.0)
  {
    if (v12 >= -1.0)
      v13 = acosf(v12);
    else
      v13 = 3.1416;
  }
  v14 = 1.5698;
  if (a3 <= 1.5698)
    v14 = a3;
  v15 = cosf(v14);
  v17 = a1[27] * sub_1DCB2C160(v15, v13, (uint64_t)a1, a1);
  v16 = a1[28] * sub_1DCB2C160(v15, v13, (uint64_t)a1, a1 + 9);
  vmulq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_1DCC584B0, v17), (float32x4_t)xmmword_1DCC584C0, v16), (float32x4_t)xmmword_1DCC584D0, a1[29] * sub_1DCB2C160(v15, v13, (uint64_t)a1, a1 + 18)), (float32x4_t)vdupq_n_s32(0x3C96B90Du));
}

float sub_1DCB2C160(float a1, float a2, uint64_t a3, float *a4)
{
  float v7;
  float v8;

  v7 = cosf(a2);
  v8 = expf(a4[4] * a2);
  return (float)((float)((float)((float)(a4[2] + (float)(a4[3] * v8)) + (float)(a4[5] * (float)(v7 * v7)))
                       + (float)((float)(a4[6] * (float)((float)(v7 * v7) + 1.0))
                               / (float)(sqrtf((float)((float)(a4[8] + (float)(v7 * -2.0)) * a4[8]) + 1.0)
                                       * (float)((float)((float)(a4[8] + (float)(v7 * -2.0)) * a4[8]) + 1.0))))
               + (float)(a4[7] * sqrtf(a1)))
       * (float)((float)(expf(a4[1] / (float)(a1 + 0.01)) * *a4) + 1.0);
}

void sub_1DCB2C2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCB2C41C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  MEMORY[0x1DF0D228C](v2, 0x10A1C40D5506429);
  _Unwind_Resume(a1);
}

void sub_1DCB2C4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MDLLight;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1DCB2C61C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB2C6A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DCB2C810(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0D228C](v2, 0x10A1C409F50DDA3);

  _Unwind_Resume(a1);
}

void sub_1DCB2CB00(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  MEMORY[0x1DF0D228C](v2, 0x10A1C402B854A62);
  _Unwind_Resume(a1);
}

void sub_1DCB2CBCC(void **a1@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  unint64_t v10;
  char *v11;
  std::string *v12;
  std::string *p_dst;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  char *v18;
  std::string *v19;
  char v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  std::string *v25;
  unsigned int v26;
  std::string __dst;

  v6 = *a1;
  if ((unint64_t)*a1 >= a2)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = a2 - (_DWORD)v6;
    while (v6[v7] != 10)
    {
      *a1 = &v6[++v7];
      if (a2 - (_QWORD)v6 == v7)
        goto LABEL_8;
    }
    v8 = v7;
  }
LABEL_8:
  memset(&__dst, 0, sizeof(__dst));
  sub_1DCB2AC10(&__dst, v6, v8);
  v9 = (char *)*a1;
  if ((unint64_t)*a1 < a2)
  {
    v10 = a2 - (_QWORD)v9;
    v11 = v9 + 1;
    do
    {
      if (*(v11 - 1) != 10)
        break;
      *a1 = v11++;
      --v10;
    }
    while (v10);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = (std::string *)((char *)&__dst + HIBYTE(__dst.__r_.__value_.__r.__words[2]));
  else
    v12 = (std::string *)(__dst.__r_.__value_.__r.__words[0] + __dst.__r_.__value_.__l.__size_);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v14 = MEMORY[0x1E0C80978];
  while (v12 != p_dst)
  {
    v16 = SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]);
    v12 = (std::string *)((char *)v12 - 1);
    v15 = v16;
    if ((v16 & 0x80000000) != 0)
      v17 = __maskrune(v15, 0x4000uLL);
    else
      v17 = *(_DWORD *)(v14 + 4 * v15 + 60) & 0x4000;
    if (!v17)
    {
      p_dst = (std::string *)((char *)&v12->__r_.__value_.__l.__data_ + 1);
      break;
    }
  }
  v18 = (char *)&__dst + HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v19 = &__dst;
  }
  else
  {
    v18 = (char *)(__dst.__r_.__value_.__r.__words[0] + __dst.__r_.__value_.__l.__size_);
    v19 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  std::string::erase(&__dst, (char *)p_dst - (char *)v19, v18 - (char *)p_dst);
  v20 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v21 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__dst;
  else
    v22 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  if (size)
  {
    v24 = (std::string *)((char *)v22 + size);
    v25 = v22;
    while (1)
    {
      v26 = v25->__r_.__value_.__s.__data_[0];
      if (!((v26 & 0x80000000) != 0 ? __maskrune(v26, 0x4000uLL) : *(_DWORD *)(v14 + 4 * v26 + 60) & 0x4000))
        break;
      v25 = (std::string *)((char *)v25 + 1);
      if (!--size)
      {
        v25 = v24;
        break;
      }
    }
    v20 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    v21 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    v25 = v22;
  }
  if (v20 >= 0)
    v21 = &__dst;
  std::string::erase(&__dst, (char *)v22 - (char *)v21, (char *)v25 - (char *)v22);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_1DCACA658(a3, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    *a3 = __dst;
  }
}

void sub_1DCB2CDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1DCB2CE0C(const char **a1, unint64_t a2, int a3, uint64_t a4)
{
  const char *v5;
  int v9;
  uint64_t v10;
  const char *v11;
  unsigned int v12;
  unint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;

  v5 = *a1;
  if (a3 < 1)
    goto LABEL_37;
  v9 = 0;
  v10 = MEMORY[0x1E0C80978];
  v25 = a4 + 16;
  do
  {
    v11 = *a1;
    while ((unint64_t)v11 < a2)
    {
      v12 = *v5;
      if ((v12 & 0x80000000) != 0)
      {
        if (__maskrune(v12, 0x4000uLL))
        {
LABEL_7:
          v11 = *a1;
          goto LABEL_10;
        }
      }
      else if ((*(_DWORD *)(v10 + 4 * v12 + 60) & 0x4000) != 0)
      {
        goto LABEL_7;
      }
      v11 = *a1;
      if (*v5 != 44)
        break;
LABEL_10:
      ++v5;
    }
    if ((unint64_t)v11 >= a2)
      break;
    v26 = 0;
    sscanf(v5, "%f", &v26);
    v14 = *(_DWORD **)(a4 + 8);
    v13 = *(_QWORD *)(a4 + 16);
    if ((unint64_t)v14 >= v13)
    {
      v16 = *(_DWORD **)a4;
      v17 = ((uint64_t)v14 - *(_QWORD *)a4) >> 2;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62)
        sub_1DCAE4C44();
      v19 = v13 - (_QWORD)v16;
      if (v19 >> 1 > v18)
        v18 = v19 >> 1;
      v20 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v18;
      if (v20)
      {
        v21 = (char *)sub_1DCAE4D04(v25, v20);
        v16 = *(_DWORD **)a4;
        v14 = *(_DWORD **)(a4 + 8);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[4 * v17];
      *(_DWORD *)v22 = v26;
      v15 = v22 + 4;
      while (v14 != v16)
      {
        v23 = *--v14;
        *((_DWORD *)v22 - 1) = v23;
        v22 -= 4;
      }
      *(_QWORD *)a4 = v22;
      *(_QWORD *)(a4 + 8) = v15;
      *(_QWORD *)(a4 + 16) = &v21[4 * v20];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v14 = v26;
      v15 = v14 + 1;
    }
    *(_QWORD *)(a4 + 8) = v15;
    while ((unint64_t)*a1 < a2)
    {
      v24 = *v5;
      if ((v24 & 0x80000000) != 0)
      {
        if (__maskrune(v24, 0x4000uLL))
          break;
      }
      else if ((*(_DWORD *)(v10 + 4 * v24 + 60) & 0x4000) != 0)
      {
        break;
      }
      if (*v5 == 44)
        break;
      ++v5;
    }
    ++v9;
  }
  while (v9 != a3);
LABEL_37:
  *a1 = v5;
}

uint64_t sub_1DCB2D000(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::string *v7;
  int64_t size;
  char *v9;
  int64_t v10;
  std::string *v11;
  char *v12;
  int64_t v14;
  std::string *v15;
  char *v16;
  int64_t v18;
  std::string *v19;
  char *v20;
  std::string *v22;
  char *v23;
  int64_t v25;
  std::string *p_p;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  int64_t v30;
  std::string *v31;
  char *v32;
  std::string *v33;
  char *v34;
  int v36;
  float v37;
  float v38;
  int v39;
  float v40;
  int v41;
  float v42;
  int v43;
  char *v44;
  uint64_t v45;
  float v46;
  float *v47;
  float v48;
  float v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  void *v54;
  _BYTE *v55;
  uint64_t v56;
  std::string v57;
  std::string __p;
  std::string v59;
  void *v60;
  void *v61;
  float *v62;
  uint64_t v63;
  void *v64;
  float *v65;
  uint64_t v66;
  _QWORD v67[4];

  memset(v67, 0, 24);
  v64 = 0;
  v65 = 0;
  v66 = 0;
  *(_DWORD *)(a3 + 88) = -1082130432;
  v6 = a3 + 88;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v60 = a1;
  memset(&v59, 0, sizeof(v59));
  v7 = &v59;
  sub_1DCB2CBCC(&v60, a2, &v59);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  else
    size = v59.__r_.__value_.__l.__size_;
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v59.__r_.__value_.__r.__words[0];
  v9 = (char *)v7 + size;
  if (size >= 16)
  {
    v10 = size;
    v11 = v7;
    do
    {
      v12 = (char *)memchr(v11, 73, v10 - 15);
      if (!v12)
        break;
      if (*(_QWORD *)v12 == 0x4D4C3A414E534549 && *((_QWORD *)v12 + 1) == 0x323030322D33362DLL)
      {
        if (v12 != v9 && v12 - (char *)v7 != -1)
          goto LABEL_51;
        break;
      }
      v11 = (std::string *)(v12 + 1);
      v10 = v9 - (char *)v11;
    }
    while (v9 - (char *)v11 >= 16);
    v14 = size;
    v15 = v7;
    do
    {
      v16 = (char *)memchr(v15, 73, v14 - 15);
      if (!v16)
        break;
      if (*(_QWORD *)v16 == 0x4D4C3A414E534549 && *((_QWORD *)v16 + 1) == 0x353939312D33362DLL)
      {
        if (v16 != v9 && v16 - (char *)v7 != -1)
          goto LABEL_51;
        break;
      }
      v15 = (std::string *)(v16 + 1);
      v14 = v9 - (char *)v15;
    }
    while (v9 - (char *)v15 >= 16);
  }
  if (size >= 7)
  {
    v18 = size;
    v19 = v7;
    do
    {
      v20 = (char *)memchr(v19, 73, v18 - 6);
      if (!v20)
        break;
      if (*(_DWORD *)v20 == 1314080073 && *(_DWORD *)(v20 + 3) == 825835854)
      {
        if (v20 != v9 && v20 - (char *)v7 != -1)
          goto LABEL_51;
        break;
      }
      v19 = (std::string *)(v20 + 1);
      v18 = v9 - (char *)v19;
    }
    while (v9 - (char *)v19 >= 7);
    if (size >= 16)
    {
      v22 = v7;
      do
      {
        v23 = (char *)memchr(v22, 73, size - 15);
        if (!v23)
          break;
        if (*(_QWORD *)v23 == 0x4D4C3A414E534549 && *((_QWORD *)v23 + 1) == 0x313939312D33362DLL)
        {
          if (v23 != v9 && v23 - (char *)v7 != -1)
            goto LABEL_51;
          break;
        }
        v22 = (std::string *)(v23 + 1);
        size = v9 - (char *)v22;
      }
      while (v9 - (char *)v22 >= 16);
    }
  }
  if (sub_1DCB2D724((uint64_t *)&v59, "IESNA:LM-63-1986", 0) == -1)
    v60 = a1;
LABEL_51:
  memset(&__p, 0, sizeof(__p));
  sub_1DCB0345C(&__p, "");
LABEL_52:
  while (1)
  {
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      p_p = &__p;
    }
    else
    {
      v25 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v25 >= 4)
    {
      v27 = (std::string *)((char *)p_p + v25);
      v28 = p_p;
      while (1)
      {
        v29 = (std::string *)memchr(v28, 84, v25 - 3);
        if (!v29)
          goto LABEL_63;
        if (LODWORD(v29->__r_.__value_.__l.__data_) == 1414285652)
          break;
        v28 = (std::string *)((char *)&v29->__r_.__value_.__l.__data_ + 1);
        v25 = (char *)v27 - (char *)v28;
        if ((char *)v27 - (char *)v28 < 4)
          goto LABEL_63;
      }
      if (v29 != v27 && v29 == p_p)
        break;
    }
LABEL_63:
    sub_1DCB2CBCC(&v60, a2, &v57);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v57;
    v30 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v31 = &__p;
    }
    else
    {
      v30 = v57.__r_.__value_.__l.__size_;
      v31 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    if (v30 >= 15)
    {
      v32 = (char *)v31 + v30;
      v33 = v31;
      while (1)
      {
        v34 = (char *)memchr(v33, 95, v30 - 14);
        if (!v34)
          break;
        if (*(_QWORD *)v34 == 0x54554C4F5342415FLL && *(_QWORD *)(v34 + 7) == 0x534E454D554C4554)
        {
          if (v34 != v32 && v34 - (char *)v31 != -1)
            sscanf((const char *)v31, "[_ABSOLUTELUMENS]%f", v6);
          goto LABEL_52;
        }
        v33 = (std::string *)(v34 + 1);
        v30 = v32 - (char *)v33;
        if (v32 - (char *)v33 < 15)
          goto LABEL_52;
      }
    }
  }
  memset(&v57, 0, sizeof(v57));
  sub_1DCB2CE0C((const char **)&v60, a2, 10, (uint64_t)&v57);
  v36 = *(_DWORD *)(v57.__r_.__value_.__r.__words[0] + 8);
  v37 = *(float *)(v57.__r_.__value_.__r.__words[0] + 12);
  v38 = *(float *)(v57.__r_.__value_.__r.__words[0] + 16);
  v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
  sub_1DCB2CE0C((const char **)&v60, a2, 3, (uint64_t)&v57);
  sub_1DCB2CE0C((const char **)&v60, a2, (int)v37, (uint64_t)&v61);
  v39 = (int)v38;
  sub_1DCB2CE0C((const char **)&v60, a2, (int)v38, (uint64_t)&v64);
  if (*(float *)v61 != 0.0)
    goto LABEL_111;
  v40 = *(v62 - 1);
  if (v40 == 90.0)
  {
    v41 = 0;
  }
  else
  {
    if (v40 != 180.0)
      goto LABEL_111;
    v41 = 1;
  }
  *(_DWORD *)a3 = v41;
  if ((char *)v65 - (_BYTE *)v64 != 4)
  {
    if (*(float *)v64 == 0.0)
    {
      v42 = *(v65 - 1);
      if (v42 == 360.0)
        goto LABEL_88;
      if (v42 == 90.0)
      {
        v43 = 0;
        goto LABEL_89;
      }
      if (v42 == 180.0)
      {
        v43 = 1;
        goto LABEL_89;
      }
    }
LABEL_111:
    v52 = 0;
    goto LABEL_112;
  }
LABEL_88:
  v43 = 2;
LABEL_89:
  *(_DWORD *)(a3 + 4) = v43;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  if (v39 < 1)
  {
    v50 = 0;
    v51 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0.0;
  }
  else
  {
    do
    {
      sub_1DCB2CE0C((const char **)&v60, a2, (int)v37, (uint64_t)&v54);
      --v39;
    }
    while (v39);
    v44 = (char *)v54;
    v45 = (uint64_t)v55;
    v46 = 0.0;
    if (v54 != v55)
    {
      v47 = (float *)v54;
      do
      {
        v48 = *v47++;
        v49 = v48;
        if (v46 < v48)
          v46 = v49;
      }
      while (v47 != (float *)v55);
    }
    v50 = v55;
    v51 = v54;
  }
  if ((void **)(a3 + 56) != &v54)
    sub_1DCB2EDD8((char *)(a3 + 56), v44, v45, (v50 - v51) >> 2);
  if ((void **)(a3 + 8) != &v61)
    sub_1DCB2EDD8((char *)(a3 + 8), (char *)v61, (uint64_t)v62, ((char *)v62 - (_BYTE *)v61) >> 2);
  if ((void **)(a3 + 32) != &v64)
    sub_1DCB2EDD8((char *)(a3 + 32), (char *)v64, (uint64_t)v65, ((char *)v65 - (_BYTE *)v64) >> 2);
  *(_DWORD *)(a3 + 80) = v36;
  *(float *)(a3 + 84) = 1.0 / v46;
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  v52 = 1;
LABEL_112:
  if (v57.__r_.__value_.__r.__words[0])
  {
    v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (v61)
  {
    v62 = (float *)v61;
    operator delete(v61);
  }
  if (v64)
  {
    v65 = (float *)v64;
    operator delete(v64);
  }
  v64 = v67;
  sub_1DCB2ED4C((void ***)&v64);
  return v52;
}

void sub_1DCB2D67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  uint64_t v35;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a22 < 0)
    operator delete(a17);
  if (a29 < 0)
    operator delete(a24);
  if (a31)
    operator delete(a31);
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  a34 = (void *)(v35 - 144);
  sub_1DCB2ED4C((void ***)&a34);
  _Unwind_Resume(a1);
}

unint64_t sub_1DCB2D724(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v8;
  void *v9;
  char *v10;
  int64_t v11;
  char *v12;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
  }
  v7 = strlen(__s);
  if (v6 < a3)
    return -1;
  v8 = v7;
  if (v7)
  {
    v9 = (void *)(v5 + a3);
    v10 = (char *)(v5 + v6);
    v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      v14 = *__s;
      do
      {
        v15 = v11 - v8;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16)
          break;
        v12 = v16;
        if (!memcmp(v16, __s, v8))
          goto LABEL_9;
        v9 = v12 + 1;
        v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    v12 = v10;
LABEL_9:
    if (v12 == v10)
      return -1;
    else
      return (unint64_t)&v12[-v5];
  }
  return a3;
}

void sub_1DCB2D860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCB2DB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

_QWORD *sub_1DCB2DC38(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_1DCB2DE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DCB2DFDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB2E65C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DCB2EA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

_QWORD *sub_1DCB2ECD4(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1DCB04A78(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DCB2ED30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DCB2ED4C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1DCB2ED8C((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1DCB2ED8C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

char *sub_1DCB2EDD8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      sub_1DCAE4C44();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1DCB04A78(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void sub_1DCB2EEE0(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v6;
  int v11;
  unint64_t *v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  float v22;
  float v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  const char *v39;
  int v40;
  int v41;
  int v42;
  uint64_t Text;
  unint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  float v69;
  float v70;
  float v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unint64_t v86;
  const char *v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t i;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  int *v101;
  _QWORD v102[3];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _OWORD v107[2];
  float *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;

  v108 = 0;
  memset(v107, 0, sizeof(v107));
  v6 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)sub_1DCAEEB34((uint64_t)v107, 1uLL);
  sub_1DCAEF32C(v6);
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)v108 = _Q0;
  v105 = 0;
  v106 = 0;
  v103 = 0;
  v104 = 0;
  v102[1] = 0;
  v102[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v101 = 0;
  v102[0] = MEMORY[0x1E0DF30A8] + 16;
  v99 = 0u;
  v100 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayColorPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)v102);
  v11 = sub_1DCB2FA84((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v94, (unint64_t *)&v99);
  v12 = (unint64_t *)MEMORY[0x1E0DF24F8];
  if (v11)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v94);
    if ((v106 & 7) != 0)
    {
      v13 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    v106 = v109;
    v15 = (_QWORD *)sub_1DCAEEC08(&v94);
    sub_1DCAEEBA4(&v104, v15);
    v16 = v99;
    v109 = 0;
    v110 = 0;
    v111 = &v109;
    sub_1DCAEF01C((unint64_t *)v107, v99, (_OWORD **)&v111);
    if (v16)
    {
      v17 = atomic_load(v12);
      if (!v17)
        v17 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
      if ((v106 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v17 + 136) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v99);
        v40 = *v101;
        sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
        *(_DWORD *)v108 = v40;
        sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v99);
        v41 = v101[1];
        sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
        *((_DWORD *)v108 + 1) = v41;
        sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v99);
        v42 = v101[2];
        sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
        *((_DWORD *)v108 + 2) = v42;
        if (v16 < 2)
        {
          v16 = 1;
        }
        else
        {
          sub_1DCB2FD04(a1, &v109);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v109);
          v44 = v104 & 0xFFFFFFFFFFFFFFF8;
          if ((v104 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v45 = (const char *)(v44 + 16);
            if (*(char *)(v44 + 39) < 0)
              v45 = *(const char **)v45;
          }
          else
          {
            v45 = "";
          }
          NSLog(CFSTR("Warning: Prim %s has %lu elements for %s even though it is marked constant.\n"), Text, v16, v45);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_1DCAEEC34((uint64_t)&v109);
          v92 = 0;
          for (i = 1; i != v16; ++i)
          {
            sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
            v108[v92 + 4] = 1.0;
            sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
            v108[v92 + 5] = 1.0;
            sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
            v108[v92 + 6] = 1.0;
            v92 += 4;
          }
        }
      }
      else
      {
        v18 = 0;
        v19 = 0;
        v20 = v16;
        do
        {
          sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v99);
          v21 = *(float *)&v101[v19];
          sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
          v108[v18] = v21;
          sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v99);
          v22 = *(float *)&v101[v19 + 1];
          sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
          v108[v18 + 1] = v22;
          sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v99);
          v23 = *(float *)&v101[v19 + 2];
          sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
          v108[v18 + 2] = v23;
          v19 += 3;
          v18 += 4;
          --v20;
        }
        while (v20);
      }
    }
  }
  else
  {
    v16 = 0;
  }
  if ((v98 & 7) != 0)
  {
    v24 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if ((v97 & 7) != 0)
  {
    v26 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v96);
  if (v95)
    sub_1DCAEED94(v95);
  sub_1DCAEEE78((uint64_t)&v99);
  v101 = 0;
  v99 = 0u;
  v100 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayOpacityPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)v102);
  if (!sub_1DCB2FE94((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v94, (unint64_t *)&v99))
  {
    v31 = 0;
    goto LABEL_48;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v94);
  if ((v105 & 7) != 0)
  {
    v28 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  v105 = v109;
  v30 = (_QWORD *)sub_1DCAEEC08(&v94);
  sub_1DCAEEBA4(&v103, v30);
  v31 = v99;
  if ((unint64_t)v99 <= *(_QWORD *)&v107[0])
  {
    if (!(_QWORD)v99)
      goto LABEL_48;
  }
  else
  {
    v109 = 0;
    v110 = 0;
    v111 = &v109;
    sub_1DCAEF01C((unint64_t *)v107, v99, (_OWORD **)&v111);
  }
  v32 = atomic_load(v12);
  if (!v32)
    v32 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
  if ((v105 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v32 + 136) & 0xFFFFFFFFFFFFFFF8))
  {
    sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v99);
    v36 = *v101;
    sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
    *((_DWORD *)v108 + 3) = v36;
    if (v31 < 2)
    {
      v31 = 1;
    }
    else
    {
      sub_1DCB2FD04(a1, &v109);
      v37 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v109);
      v38 = v103 & 0xFFFFFFFFFFFFFFF8;
      if ((v103 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v39 = (const char *)(v38 + 16);
        if (*(char *)(v38 + 39) < 0)
          v39 = *(const char **)v39;
      }
      else
      {
        v39 = "";
      }
      NSLog(CFSTR("Warning: Prim %s has %lu elements for %s even though it is marked constant.\n"), v37, v31, v39);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_1DCAEEC34((uint64_t)&v109);
      v46 = 1;
      v47 = 7;
      do
      {
        sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
        v108[v47] = 1.0;
        ++v46;
        v47 += 4;
      }
      while (v31 != v46);
    }
  }
  else
  {
    v33 = 0;
    v34 = 3;
    do
    {
      sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v99);
      v35 = *(float *)&v101[v33];
      sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
      v108[v34] = v35;
      ++v33;
      v34 += 4;
    }
    while (v31 != v33);
  }
LABEL_48:
  if ((v98 & 7) != 0)
  {
    v48 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  if ((v97 & 7) != 0)
  {
    v50 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stlxr(v51 - 2, v50));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)&v96);
  if (v95)
    sub_1DCAEED94(v95);
  sub_1DCAEEE78((uint64_t)&v99);
  MEMORY[0x1DF0D0CE4](v102);
  v52 = v106 & 0xFFFFFFFFFFFFFFF8;
  v53 = v105 & 0xFFFFFFFFFFFFFFF8;
  if (v16 == v31 || v52 != v53)
  {
    if (v52 != v53)
    {
      v57 = atomic_load(v12);
      if (!v57)
        v57 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
      if ((v106 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v57 + 136) & 0xFFFFFFFFFFFFFFF8))
      {
        v58 = atomic_load(v12);
        if (!v58)
          v58 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
        if (v105)
        {
          if ((v105 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v58 + 136) & 0xFFFFFFFFFFFFFFF8) && v106 != 0)
          {
            sub_1DCB2FD04(a1, &v94);
            v60 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v94);
            v61 = v106 & 0xFFFFFFFFFFFFFFF8;
            if ((v106 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v62 = (const char *)(v61 + 16);
              if (*(char *)(v61 + 39) < 0)
                v62 = *(const char **)v62;
            }
            else
            {
              v62 = "";
            }
            v86 = v104 & 0xFFFFFFFFFFFFFFF8;
            if ((v104 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v87 = (const char *)(v86 + 16);
              if (*(char *)(v86 + 39) < 0)
                v87 = *(const char **)v87;
            }
            else
            {
              v87 = "";
            }
            v88 = v105 & 0xFFFFFFFFFFFFFFF8;
            if ((v105 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v89 = (const char *)(v88 + 16);
              if (*(char *)(v88 + 39) < 0)
                v89 = *(const char **)v89;
            }
            else
            {
              v89 = "";
            }
            v90 = v103 & 0xFFFFFFFFFFFFFFF8;
            if ((v103 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v91 = (const char *)(v90 + 16);
              if (*(char *)(v90 + 39) < 0)
                v91 = *(const char **)v91;
            }
            else
            {
              v91 = "";
            }
            NSLog(&CFSTR("Warning: Prim %s has %s interpolation for %s and %s interpolation for %s; this combination is not support"
                     "ed by UsdImaging\n").isa,
              v60,
              v62,
              v87,
              v89,
              v91);
            sub_1DCB2FDE8((uint64_t)&v94);
          }
        }
      }
    }
  }
  else
  {
    sub_1DCB2FD04(a1, &v94);
    v54 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v94);
    v55 = v104 & 0xFFFFFFFFFFFFFFF8;
    if ((v104 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v56 = (const char *)(v55 + 16);
      if (*(char *)(v55 + 39) < 0)
        v56 = *(const char **)v56;
    }
    else
    {
      v56 = "";
    }
    v63 = v103 & 0xFFFFFFFFFFFFFFF8;
    if ((v103 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v64 = (const char *)(v63 + 16);
      if (*(char *)(v63 + 39) < 0)
        v64 = *(const char **)v64;
    }
    else
    {
      v64 = "";
    }
    v65 = v106 & 0xFFFFFFFFFFFFFFF8;
    if ((v106 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v66 = (const char *)(v65 + 16);
      if (*(char *)(v65 + 39) < 0)
        v66 = *(const char **)v66;
    }
    else
    {
      v66 = "";
    }
    NSLog(CFSTR("Warning: Prim %s has %lu elements for %s and %lu elements for %s even though they have the same interpolation mode %s\n"), v54, v16, v56, v31, v64, v66);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_1DCAEEC34((uint64_t)&v94);
  }
  v67 = *(_QWORD *)&v107[0];
  if (v31 | v16)
  {
    v68 = atomic_load(v12);
    if (v16 >= v31)
    {
      if (!v68)
        v68 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
      v75 = 1.0;
      if ((v105 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v68 + 136) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
        v75 = v108[3];
      }
      v76 = v67 - v31;
      if (v67 > v31)
      {
        v77 = (16 * v31) | 0xC;
        do
        {
          sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
          *(float *)((char *)v108 + v77) = v75;
          v77 += 16;
          --v76;
        }
        while (v76);
      }
    }
    else
    {
      if (!v68)
        v68 = sub_1DCAEF3C0(MEMORY[0x1E0DF24F8]);
      v69 = 1.0;
      v70 = 1.0;
      v71 = 1.0;
      if ((v106 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v68 + 136) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_1DCAEEBA4(&v106, &v105);
        sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
        v69 = *v108;
        sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
        v70 = v108[1];
        sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
        v71 = v108[2];
      }
      v72 = v67 > v16;
      v73 = v67 - v16;
      if (v72)
      {
        v74 = 4 * v16;
        do
        {
          sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
          v108[v74] = v69;
          sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
          v108[v74 + 1] = v70;
          sub_1DCAEF32C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107);
          v108[v74 + 2] = v71;
          v74 += 4;
          --v73;
        }
        while (v73);
      }
    }
  }
  else if (*(_QWORD *)&v107[0])
  {
    sub_1DCAEEFD4(v107);
  }
  sub_1DCAEEBA4(a2, &v106);
  a3[1] = (uint64_t)&off_1EA575B08;
  sub_1DCB272BC(a3, (uint64_t)v107);
  if ((v103 & 7) != 0)
  {
    v78 = (unsigned int *)(v103 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  if ((v104 & 7) != 0)
  {
    v80 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v81 = __ldxr(v80);
    while (__stlxr(v81 - 2, v80));
  }
  if ((v105 & 7) != 0)
  {
    v82 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
    do
      v83 = __ldxr(v82);
    while (__stlxr(v83 - 2, v82));
  }
  if ((v106 & 7) != 0)
  {
    v84 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  sub_1DCAEEE78((uint64_t)v107);
}

void sub_1DCB2F900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;

  if ((a29 & 7) != 0)
  {
    v34 = (unsigned int *)(a29 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  if ((a30 & 7) != 0)
  {
    v36 = (unsigned int *)(a30 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  if ((a31 & 7) != 0)
  {
    v38 = (unsigned int *)(a31 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  if ((a32 & 7) != 0)
  {
    v40 = (unsigned int *)(a32 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  sub_1DCAEEE78(v32 - 176);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB2FA84(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, unint64_t *a2)
{
  uint64_t ElementSize;
  uint64_t v5;
  std::string::size_type size;
  char v7;
  void *__p;
  char v10;
  std::string v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  _OWORD v17[2];
  uint64_t v18;
  __int128 v19[2];
  uint64_t v20;

  v20 = 0;
  memset(v19, 0, sizeof(v19));
  if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>() & 1) != 0)
  {
    if ((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIndexed(a1) & 1) != 0)
    {
      v18 = 0;
      memset(v17, 0, sizeof(v17));
      if ((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices() & 1) != 0)
      {
        if (*(_QWORD *)&v19[0])
        {
          memset(&v11, 0, sizeof(v11));
          ElementSize = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize(a1);
          v5 = sub_1DCB30258(v19, (unint64_t *)v17, ElementSize, a2, &v11);
          size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
          v7 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
          if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v11.__r_.__value_.__l.__size_;
          if (size)
          {
            v12 = "usdGeom/primvar.h";
            v13 = "ComputeFlattened";
            v14 = 849;
            v15 = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(VtArray<ScalarType> *, UsdTime"
                  "Code) const [ScalarType = pxrInternal__aapl__pxrReserved__::GfVec3f]";
            v16 = 0;
            MEMORY[0x1DF0D0C24](&__p, a1);
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
            if (v10 < 0)
              operator delete(__p);
            v7 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
          }
          if (v7 < 0)
            operator delete(v11.__r_.__value_.__l.__data_);
          goto LABEL_17;
        }
      }
      else
      {
        v12 = "usdGeom/primvar.h";
        v13 = "ComputeFlattened";
        v14 = 837;
        v15 = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(VtArray<ScalarType> *, UsdTimeCode"
              ") const [ScalarType = pxrInternal__aapl__pxrReserved__::GfVec3f]";
        v16 = 0;
        sub_1DCB2FD04((uint64_t)a1, &v11);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v11);
      }
      v5 = 0;
LABEL_17:
      sub_1DCAEEE78((uint64_t)v17);
      goto LABEL_18;
    }
    sub_1DCB301A0((uint64_t)a2, v19);
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
LABEL_18:
  sub_1DCAEEE78((uint64_t)v19);
  return v5;
}

void sub_1DCB2FC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  sub_1DCAEEE78((uint64_t)&a29);
  sub_1DCAEEE78(v29 - 96);
  _Unwind_Resume(a1);
}

_DWORD *sub_1DCB2FD04@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    if (*(_DWORD *)a1 == 1)
    {
      sub_1DCB30114(a2, v4);
      v5 = a2 + 1;
      v6 = (_DWORD *)(a1 + 20);
      return sub_1DCB30164(v5, v6);
    }
    v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 24);
    v10 = v4;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (!v7)
    {
      *(_QWORD *)a2 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      return (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    }
    if (*(_DWORD *)a1 == 1)
    {
      sub_1DCB30114(a2, (_DWORD *)(v7 + 16));
      v5 = a2 + 1;
      v6 = (_DWORD *)(v7 + 20);
      return sub_1DCB30164(v5, v6);
    }
    v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 24);
    v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 16);
  }
  return (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v10, v9);
}

uint64_t sub_1DCB2FDE8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_1DCAEEC34(a1);
}

_QWORD *sub_1DCB2FE14(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v2 = a1[4];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = a1[3];
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_1DCAEEC34((uint64_t)(a1 + 2));
  v8 = a1[1];
  if (v8)
    sub_1DCAEED94(v8);
  return a1;
}

uint64_t sub_1DCB2FE94(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, unint64_t *a2)
{
  uint64_t ElementSize;
  uint64_t v5;
  std::string::size_type size;
  char v7;
  void *__p;
  char v10;
  std::string v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  _OWORD v17[2];
  uint64_t v18;
  __int128 v19[2];
  uint64_t v20;

  v20 = 0;
  memset(v19, 0, sizeof(v19));
  if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>() & 1) != 0)
  {
    if ((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIndexed(a1) & 1) != 0)
    {
      v18 = 0;
      memset(v17, 0, sizeof(v17));
      if ((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices() & 1) != 0)
      {
        if (*(_QWORD *)&v19[0])
        {
          memset(&v11, 0, sizeof(v11));
          ElementSize = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize(a1);
          v5 = sub_1DCB30770(v19, (unint64_t *)v17, ElementSize, a2, &v11);
          size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
          v7 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
          if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v11.__r_.__value_.__l.__size_;
          if (size)
          {
            v12 = "usdGeom/primvar.h";
            v13 = "ComputeFlattened";
            v14 = 849;
            v15 = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(VtArray<ScalarType> *, UsdTime"
                  "Code) const [ScalarType = float]";
            v16 = 0;
            MEMORY[0x1DF0D0C24](&__p, a1);
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
            if (v10 < 0)
              operator delete(__p);
            v7 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
          }
          if (v7 < 0)
            operator delete(v11.__r_.__value_.__l.__data_);
          goto LABEL_17;
        }
      }
      else
      {
        v12 = "usdGeom/primvar.h";
        v13 = "ComputeFlattened";
        v14 = 837;
        v15 = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(VtArray<ScalarType> *, UsdTimeCode"
              ") const [ScalarType = float]";
        v16 = 0;
        sub_1DCB2FD04((uint64_t)a1, &v11);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_1DCAEEC34((uint64_t)&v11);
      }
      v5 = 0;
LABEL_17:
      sub_1DCAEEE78((uint64_t)v17);
      goto LABEL_18;
    }
    sub_1DCB306B8((uint64_t)a2, v19);
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
LABEL_18:
  sub_1DCAEEE78((uint64_t)v19);
  return v5;
}

void sub_1DCB30094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  sub_1DCAEEE78((uint64_t)&a29);
  sub_1DCAEEE78(v29 - 96);
  _Unwind_Resume(a1);
}

_DWORD *sub_1DCB30114(_DWORD *a1, _DWORD *a2)
{
  unsigned int *v3;
  unsigned int v4;

  *a1 = *a2;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    v3 = (unsigned int *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr()
                        + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return a1;
}

_DWORD *sub_1DCB30164(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL())
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr();
  return a1;
}

uint64_t sub_1DCB301A0(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_1DCAEEE78(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_1DCAEEE78((uint64_t)&v9);
  }
  return a1;
}

void sub_1DCB3023C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB30258(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  const char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  void **v44;
  BOOL v45;
  void **v46;
  void **v47;
  std::string::size_type v48;
  void *v49;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  std::string *v54;
  void *v55;
  char v56;
  void **v57;
  char v58;
  void *__p[2];
  int64_t v60;
  char *v61;
  char *v62;
  _QWORD v63[2];
  char v64;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    v61 = "usdGeom/primvar.h";
    v62 = "_ComputeFlattenedHelper";
    v63[0] = 862;
    v63[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec3f]";
    v64 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  }
  v10 = *a2 * (int)v7;
  LODWORD(v62) = 0;
  v61 = 0;
  __p[0] = &v61;
  sub_1DCB27B7C(a4, v10, (uint64_t **)__p);
  v61 = 0;
  v62 = 0;
  v63[0] = 0;
  if (*a2)
  {
    v54 = a5;
    v12 = 0;
    v13 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v14 = 1;
    else
      v14 = (int)v7;
    v53 = v14;
    v15 = 12 * (int)v7;
    v16 = 1;
    v51 = v15;
    v52 = a2;
    do
    {
      v17 = *(_DWORD *)(a2[4] + 4 * v13);
      if (v17 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v17))
      {
        v18 = v62;
        if ((unint64_t)v62 >= v63[0])
        {
          v20 = v61;
          v21 = (v62 - v61) >> 3;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61)
            sub_1DCAE4C44();
          v23 = v63[0] - (_QWORD)v61;
          if ((uint64_t)(v63[0] - (_QWORD)v61) >> 2 > v22)
            v22 = v23 >> 2;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v22;
          if (v11)
          {
            v24 = (char *)sub_1DCAE79A4((uint64_t)v63, v11);
            v20 = v61;
            v18 = v62;
          }
          else
          {
            v24 = 0;
          }
          v33 = &v24[8 * v21];
          *(_QWORD *)v33 = v13;
          v19 = v33 + 8;
          while (v18 != v20)
          {
            v34 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *((_QWORD *)v33 - 1) = v34;
            v33 -= 8;
          }
          v61 = v33;
          v62 = v19;
          v63[0] = &v24[8 * v11];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(_QWORD *)v62 = v13;
          v19 = v18 + 8;
        }
        v16 = 0;
        v62 = v19;
      }
      else if ((_DWORD)v7)
      {
        v25 = v16;
        v26 = v7;
        v27 = 12 * v17 * (int)v7;
        v28 = v12;
        v29 = v53;
        do
        {
          v30 = a1[4];
          sub_1DCAF0E2C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4);
          v31 = a4[4] + v28;
          v32 = *(_QWORD *)(v30 + v27);
          *(_DWORD *)(v31 + 8) = *(_DWORD *)(v30 + v27 + 8);
          *(_QWORD *)v31 = v32;
          v28 += 12;
          v27 += 12;
          --v29;
        }
        while (v29);
        v7 = v26;
        v16 = v25;
        v15 = v51;
        a2 = v52;
      }
      ++v13;
      v12 += v15;
    }
    while (v13 < *a2);
    v35 = v61;
    if (v54 && v61 != v62)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, (v62 - v61) >> 3, *a1, v7);
      if (SHIBYTE(v54->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54->__r_.__value_.__l.__data_);
      *(_OWORD *)&v54->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v54->__r_.__value_.__r.__words[2] = v60;
      v35 = v61;
      v37 = (v62 - v61) >> 3;
      if (v37 >= 5)
        v37 = 5;
      if (v37)
      {
        v38 = 0;
        v39 = 8 * v37;
        while (1)
        {
          v40 = *(_QWORD *)&v61[v38];
          v41 = *(unsigned int *)(a2[4] + 4 * v40);
          v42 = (v41 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v36, v42);
            v44 = v57;
            v45 = v58 < 0;
            v46 = (void **)&v57;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v36, (v41 * v7), (v7 - 1 + v42));
            v44 = (void **)v55;
            v45 = v56 < 0;
            v46 = &v55;
          }
          if (v45)
            v46 = v44;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v41, v40, v46);
          if (v60 >= 0)
            v47 = __p;
          else
            v47 = (void **)__p[0];
          if (v60 >= 0)
            v48 = HIBYTE(v60);
          else
            v48 = (std::string::size_type)__p[1];
          std::string::append(v54, (const std::string::value_type *)v47, v48);
          if (SHIBYTE(v60) < 0)
            operator delete(__p[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v58 < 0)
            {
              v49 = v57;
LABEL_58:
              operator delete(v49);
            }
          }
          else if (v56 < 0)
          {
            v49 = v55;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            v35 = v61;
            break;
          }
        }
      }
    }
    if (v35)
    {
      v62 = v35;
      operator delete(v35);
    }
  }
  else
  {
    LOBYTE(v16) = 1;
  }
  return v16 & 1;
}

void sub_1DCB30640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(_QWORD *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DCB306B8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_1DCAEEE78(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_1DCAEEE78((uint64_t)&v9);
  }
  return a1;
}

void sub_1DCB30754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEEE78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DCB30770(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  uint64_t v34;
  char *v35;
  const char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  void **v44;
  BOOL v45;
  void **v46;
  void **v47;
  std::string::size_type v48;
  void *v49;
  unint64_t *v51;
  uint64_t v52;
  std::string *v53;
  void *v54;
  char v55;
  void **v56;
  char v57;
  void *v58[2];
  int64_t v59;
  void *__p;
  char *v61;
  _QWORD v62[2];
  char v63;

  v7 = a3;
  if ((int)a3 <= 0)
  {
    __p = "usdGeom/primvar.h";
    v61 = "_ComputeFlattenedHelper";
    v62[0] = 862;
    v62[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = float]";
    v63 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  }
  v10 = *a2 * (int)v7;
  LODWORD(v58[0]) = 0;
  __p = v58;
  sub_1DCB30BCC(a4, v10, (_DWORD **)&__p);
  __p = 0;
  v61 = 0;
  v62[0] = 0;
  if (*a2)
  {
    v53 = a5;
    v12 = 0;
    v13 = 0;
    if ((unint64_t)(int)v7 <= 1)
      v14 = 1;
    else
      v14 = (int)v7;
    v52 = v14;
    v15 = 4 * (int)v7;
    v16 = 1;
    v51 = a2;
    do
    {
      v17 = *(_DWORD *)(a2[4] + 4 * v13);
      if (v17 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v17))
      {
        v18 = v61;
        if ((unint64_t)v61 >= v62[0])
        {
          v20 = (char *)__p;
          v21 = (v61 - (_BYTE *)__p) >> 3;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61)
            sub_1DCAE4C44();
          v23 = v62[0] - (_QWORD)__p;
          if ((uint64_t)(v62[0] - (_QWORD)__p) >> 2 > v22)
            v22 = v23 >> 2;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v22;
          if (v11)
          {
            v24 = (char *)sub_1DCAE79A4((uint64_t)v62, v11);
            v20 = (char *)__p;
            v18 = v61;
          }
          else
          {
            v24 = 0;
          }
          v33 = &v24[8 * v21];
          *(_QWORD *)v33 = v13;
          v19 = v33 + 8;
          while (v18 != v20)
          {
            v34 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *((_QWORD *)v33 - 1) = v34;
            v33 -= 8;
          }
          __p = v33;
          v61 = v19;
          v62[0] = &v24[8 * v11];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(_QWORD *)v61 = v13;
          v19 = v18 + 8;
        }
        v16 = 0;
        v61 = v19;
      }
      else if ((_DWORD)v7)
      {
        v25 = v15;
        v26 = v7;
        v27 = v16;
        v28 = v26;
        v29 = 4 * v17 * (int)v26;
        v30 = v12;
        v31 = v52;
        do
        {
          v32 = *(_DWORD *)(a1[4] + v29);
          sub_1DCB30E20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4);
          *(_DWORD *)(a4[4] + v30) = v32;
          v30 += 4;
          v29 += 4;
          --v31;
        }
        while (v31);
        v16 = v27;
        v7 = v28;
        v15 = v25;
        a2 = v51;
      }
      ++v13;
      v12 += v15;
    }
    while (v13 < *a2);
    v35 = (char *)__p;
    if (v53 && __p != v61)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, (v61 - (_BYTE *)__p) >> 3, *a1, v7);
      if (SHIBYTE(v53->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53->__r_.__value_.__l.__data_);
      *(_OWORD *)&v53->__r_.__value_.__l.__data_ = *(_OWORD *)v58;
      v35 = (char *)__p;
      v53->__r_.__value_.__r.__words[2] = v59;
      v37 = (v61 - v35) >> 3;
      if (v37 >= 5)
        v37 = 5;
      if (v37)
      {
        v38 = 0;
        v39 = 8 * v37;
        while (1)
        {
          v40 = *(_QWORD *)((char *)__p + v38);
          v41 = *(unsigned int *)(a2[4] + 4 * v40);
          v42 = (v41 * v7);
          if ((_DWORD)v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v36, v42);
            v44 = v56;
            v45 = v57 < 0;
            v46 = (void **)&v56;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v36, (v41 * v7), (v7 - 1 + v42));
            v44 = (void **)v54;
            v45 = v55 < 0;
            v46 = &v54;
          }
          if (v45)
            v46 = v44;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v41, v40, v46);
          if (v59 >= 0)
            v47 = v58;
          else
            v47 = (void **)v58[0];
          if (v59 >= 0)
            v48 = HIBYTE(v59);
          else
            v48 = (std::string::size_type)v58[1];
          std::string::append(v53, (const std::string::value_type *)v47, v48);
          if (SHIBYTE(v59) < 0)
            operator delete(v58[0]);
          if ((_DWORD)v7 == 1)
          {
            if (v57 < 0)
            {
              v49 = v56;
LABEL_58:
              operator delete(v49);
            }
          }
          else if (v55 < 0)
          {
            v49 = v54;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            v35 = (char *)__p;
            break;
          }
        }
      }
    }
    if (v35)
    {
      v61 = v35;
      operator delete(v35);
    }
  }
  else
  {
    LOBYTE(v16) = 1;
  }
  return v16 & 1;
}

void sub_1DCB30B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1DCB30BCC(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_1DCB30D80((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 4 * v3;
          do
          {
            *(_DWORD *)((char *)v7 + v13) = *v12;
            v13 += 4;
          }
          while (4 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_1DCB30D80((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 4 * v19;
      v22 = v20;
      do
      {
        v23 = *(_DWORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 4);
        *(_DWORD *)v22 = v23;
        v22 = (unint64_t *)((char *)v22 + 4);
        v21 -= 4;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 4 * v3;
      do
      {
        *(_DWORD *)((char *)v20 + v25) = *v24;
        v25 += 4;
      }
      while (4 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 4 * a2;
  if (4 * a2 / a2 != 4)
  {
LABEL_18:
    sub_1DCAEEFD4(a1);
    return;
  }
  v16 = sub_1DCB30D80((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_DWORD *)((char *)v16 + v17) = *v18;
    v17 += 4;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_1DCAEEE78((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_1DCB30D80(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_1DCAEF2BC((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL)
    v3 = -1;
  else
    v3 = 4 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_1DCB30E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1DCAEF26C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DCB30E20(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique() [T = float]");
      v4 = (int *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_1DCB30D80((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 4 * v5;
        v9 = v6;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      sub_1DCAEEE78((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t sub_1DCB30EB4(_QWORD *a1, float32x4_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  char v8;
  int v9;
  uint64_t v10;
  float32x4_t v13;
  int32x4_t v14;
  uint64_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x2_t v20;
  int32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float v38;

  v4 = (uint64_t *)a1[17];
  if (v4)
  {
    v8 = 0;
    do
    {
      v9 = *((_DWORD *)v4 + 4);
      v10 = *(_QWORD *)(*a1 + 200);
      v38 = 0.0;
      if (sub_1DCC0EE94((float32x4_t *)(v10 + 224 * v9), &v38, *a2, a2[1]))
      {
        if (a2[3].f32[1] <= v38 && a2[3].f32[2] > v38 && v38 < *(float *)a3)
        {
          sub_1DCAE7240(a4, (int *)v4 + 4, (_DWORD *)v4 + 4);
          v13 = vmlaq_n_f32(*a2, a2[1], v38);
          *(float *)a3 = v38;
          *(float32x4_t *)(a3 + 80) = v13;
          *(__n64 *)v14.i8 = sub_1DCC0EBBC((float32x4_t *)(v10 + 224 * v9), v13);
          v15 = v10 + 224 * v9;
          v16 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 1).u64[0];
          v17 = (float32x2_t)vdupq_laneq_s32(v14, 2).u64[0];
          *(float32x2_t *)(a3 + 96) = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)(v15 + 176), *(float *)v14.i32), v16, *(float32x2_t *)(v15 + 184)), v17, *(float32x2_t *)(v15 + 192));
          *(float32x2_t *)(a3 + 104) = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)(v15 + 200), *(float *)v14.i32), v16, *(float32x2_t *)(v15 + 208)), v17, *(float32x2_t *)(v15 + 216));
          v18 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(v15 + 64), *(float *)v14.i32), *(float32x4_t *)(v15 + 80), *(float32x2_t *)v14.i8, 1), *(float32x4_t *)(v15 + 96), (float32x4_t)v14, 2);
          v19 = (int32x4_t)vmulq_f32(v18, v18);
          v19.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2)).u32[0];
          v20 = vrsqrte_f32((float32x2_t)v19.u32[0]);
          v21 = (int32x4_t)vmulq_n_f32(v18, vmul_f32(vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v20, v20)), v20).f32[0]);
          *(int32x4_t *)(a3 + 16) = v21;
          *(_QWORD *)(a3 + 112) = *(_QWORD *)(v15 + 8);
          v22 = vsubq_f32(*(float32x4_t *)(v15 + 32), *(float32x4_t *)(v15 + 16));
          v23 = (int32x4_t)vmulq_f32(v22, v22);
          v23.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v23, 2)).u32[0];
          v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
          v25 = vmul_f32(vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)), v24);
          v26 = vmlaq_n_f32((float32x4_t)xmmword_1DCC56FE0, v22, vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).f32[0]);
          v27 = (int32x4_t)vmulq_f32(v26, v26);
          v27.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2)).u32[0];
          *(float32x2_t *)v23.i8 = vrsqrte_f32((float32x2_t)v27.u32[0]);
          v28 = (int32x4_t)vmulq_n_f32(v26, vmul_f32(vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8)), *(float32x2_t *)v23.i8).f32[0]);
          v29 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL);
          v30 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v28, v29)), (float32x4_t)v21, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL));
          v31 = (int32x4_t)vmulq_f32((float32x4_t)v30, (float32x4_t)v30);
          v31.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v31, 2), *(float32x2_t *)v31.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1)).u32[0];
          *(float32x2_t *)v23.i8 = vrsqrte_f32((float32x2_t)v31.u32[0]);
          v32 = (int32x4_t)vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL), vmul_f32(vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8)), *(float32x2_t *)v23.i8).f32[0]);
          v33 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v32, v29)), (float32x4_t)v21, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v32, v32), (int8x16_t)v32, 0xCuLL));
          v34 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL);
          v35 = (int32x4_t)vmulq_f32((float32x4_t)v33, (float32x4_t)v33);
          v35.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v35, 2), *(float32x2_t *)v35.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1)).u32[0];
          *(float32x2_t *)v33.i8 = vrsqrte_f32((float32x2_t)v35.u32[0]);
          *(float32x4_t *)(a3 + 32) = vmulq_n_f32(v34, vmul_f32(vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8)), *(float32x2_t *)v33.i8).f32[0]);
          *(int32x4_t *)(a3 + 48) = v32;
          v8 = 1;
        }
      }
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_1DCB31140(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, float32x4_t a7, float32x4_t a8)
{
  uint64_t result;
  unsigned __int32 v10;
  unsigned __int32 v11;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  char v20;
  char v21;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  char v25;
  __n128 v27;
  float32x4_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  _BOOL4 v34;
  char v35;
  __n128 v36;
  float32x4_t v37;
  char v38;
  char v39;
  _BOOL4 v40;
  char v41;
  float32x4_t v42;
  __n128 v43;
  char v44;
  char v45;
  BOOL v46;
  char v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  float32x4_t v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  char v72;
  char v73;
  char v74;
  BOOL v75;
  BOOL v76;
  BOOL v77;
  BOOL v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;

  result = 0;
  if (a8.f32[0] >= 0.0)
  {
    v10 = a8.u32[1];
    if (a8.f32[1] >= 0.0)
    {
      v11 = a8.u32[2];
      if (a8.f32[2] >= 0.0)
      {
        if (*(_BYTE *)(a1 + 112))
        {
          v17 = a7;
          v18.i64[0] = 0x3F0000003F000000;
          v18.i64[1] = 0x3F0000003F000000;
          v19 = (int8x16_t)vmulq_f32(vaddq_f32(a8, a7), v18);
          v20 = 4 * (*(float *)v19.i32 < a7.f32[2]);
          if (*(float *)&v19.i32[1] < a7.f32[2])
            v20 |= 2u;
          v21 = 4 * (*(float *)v19.i32 < a7.f32[1]);
          if (*(float *)&v19.i32[2] < a7.f32[1])
            v21 |= 1u;
          v22.i32[1] = v19.i32[1];
          v22.i32[0] = vextq_s8(v19, v19, 8uLL).u32[0];
          v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 0);
          if (a7.f32[1] < a7.f32[2])
            v20 = v21;
          v24 = vcgt_f32(v23, v22);
          if ((v24.i8[4] & 1) != 0)
            v25 = 2;
          else
            v25 = 0;
          if ((v24.i8[0] & 1) != 0)
            v25 |= 1u;
          if (a7.f32[0] < a7.f32[1] && a7.f32[0] < a7.f32[2])
            v20 = v25;
          v27 = (__n128)v19;
          v27.n128_u32[2] = a7.u32[2];
          v70 = v27;
          v28 = a8;
          v28.i32[2] = v19.i32[2];
          v69 = (__n128)v28;
          v29 = a1 + 48;
          v85 = (_QWORD *)(a1 + 48 + 8 * (a5 ^ 6));
          v30 = a8.f32[0] < a8.f32[1];
          v31 = a8.f32[0] < a8.f32[2];
          if (a8.f32[0] >= *(float *)&v19.i32[1])
            v31 = 0;
          if (a8.f32[0] >= *(float *)&v19.i32[2])
            v30 = 0;
          v77 = v30;
          v78 = v31;
          v32 = a8.f32[0] < *(float *)&v19.i32[2] && a8.f32[0] < *(float *)&v19.i32[1];
          v76 = v32;
          v33 = *(float *)v19.i32 < a8.f32[2] && *(float *)v19.i32 < a8.f32[1];
          v75 = v33;
          v34 = *(float *)v19.i32 < *(float *)&v19.i32[2];
          if (a8.f32[1] >= *(float *)&v19.i32[2])
            v35 = 7;
          else
            v35 = 8;
          v74 = v35;
          v36 = (__n128)v19;
          v36.n128_u32[1] = a7.u32[1];
          v36.n128_u32[2] = v19.u32[2];
          v68 = v36;
          v37 = a8;
          v37.i32[1] = v19.i32[1];
          v84 = (_QWORD *)(v29 + 8 * (a5 ^ 5));
          v37.i32[2] = a8.i32[2];
          v67 = (__n128)v37;
          if (a8.f32[1] >= *(float *)&v19.i32[2])
            v38 = 3;
          else
            v38 = 8;
          if (*(float *)v19.i32 < a8.f32[1] && v34)
            v39 = 6;
          else
            v39 = v38;
          v40 = *(float *)v19.i32 < *(float *)&v19.i32[1];
          if (*(float *)&v19.i32[1] >= a8.f32[2])
            v41 = 8;
          else
            v41 = 7;
          v73 = v41;
          v42 = a7;
          v42.i32[0] = v19.i32[0];
          v66 = (__n128)v42;
          v43 = (__n128)v19;
          v43.n128_u32[0] = a8.i32[0];
          v65 = v43;
          v83 = (_QWORD *)(v29 + 8 * (a5 ^ 4));
          if (*(float *)&v19.i32[1] >= a8.f32[2])
            v44 = 8;
          else
            v44 = 3;
          if (v40 && *(float *)v19.i32 < a8.f32[2])
            v45 = 5;
          else
            v45 = v44;
          v46 = *(float *)&v19.i32[1] < *(float *)&v19.i32[2];
          if (*(float *)&v19.i32[1] >= *(float *)&v19.i32[2])
            v47 = 5;
          else
            v47 = 6;
          v72 = v47;
          v48 = (__n128)v19;
          v48.n128_u32[0] = a7.i32[0];
          v64 = v48;
          v49 = (__n128)v19;
          v49.n128_u32[1] = v10;
          v50 = v49;
          v50.n128_u32[2] = v11;
          v62 = v50;
          v82 = (_QWORD *)(v29 + 8 * (a5 ^ 3));
          v51 = a7;
          v51.i32[1] = v19.i32[1];
          v49.n128_u32[2] = v19.u32[2];
          v63 = v49;
          v81 = (_QWORD *)(v29 + 8 * (a5 ^ 2));
          v51.i32[2] = a7.i32[2];
          v17.i32[2] = v19.i32[2];
          v60 = (__n128)v17;
          v61 = (__n128)v51;
          v71 = (__n128)v19;
          v80 = (_QWORD *)(v29 + 8 * (a5 ^ 1));
          v19.i32[2] = v11;
          v59 = (__n128)v19;
          v79 = (_QWORD *)(v29 + 8 * a5);
          if (v46)
            v52 = 2;
          else
            v52 = 1;
          if (v40 && v34)
            v53 = 4;
          else
            v53 = v52;
          while (2)
          {
            switch(v20)
            {
              case 0:
                v20 = v53;
                if (!*v79)
                  continue;
                v54 = sub_1DCB31140(*v79, a2, a3, a4, a5, a6, (__n128)a7, v71);
                v20 = v53;
                if ((v54 & 1) == 0)
                  continue;
                return 1;
              case 1:
                v20 = v45;
                if (!*v80)
                  continue;
                v55 = sub_1DCB31140(*v80, a2, a3, a4, a5, a6, v60, v59);
                v20 = v45;
                if ((v55 & 1) == 0)
                  continue;
                return 1;
              case 2:
                v20 = v39;
                if (!*v81)
                  continue;
                v56 = sub_1DCB31140(*v81, a2, a3, a4, a5, a6, v61, v63);
                v20 = v39;
                if ((v56 & 1) == 0)
                  continue;
                return 1;
              case 3:
                if (*v82 && (sub_1DCB31140(*v82, a2, a3, a4, a5, a6, v64, v62) & 1) != 0)
                  return 1;
                if (!v75)
                  return 0;
                v20 = 7;
                continue;
              case 4:
                if (*v83 && (sub_1DCB31140(*v83, a2, a3, a4, a5, a6, v66, v65) & 1) != 0)
                  return 1;
                v20 = v72;
                if (v76)
                  return 0;
                continue;
              case 5:
                if (*v84 && (sub_1DCB31140(*v84, a2, a3, a4, a5, a6, v68, v67) & 1) != 0)
                  return 1;
                v20 = v73;
                if (v78)
                  return 0;
                continue;
              case 6:
                if (*v85 && (sub_1DCB31140(*v85, a2, a3, a4, a5, a6, v70, v69) & 1) != 0)
                  return 1;
                v20 = v74;
                if (!v77)
                  continue;
                return 0;
              case 7:
                v57 = *(_QWORD *)(a1 + 8 * (a5 ^ 7) + 48);
                return v57 && (sub_1DCB31140(v57, a2, a3, a4, a5, a6, v71, (__n128)a8) & 1) != 0;
              default:
                return 0;
            }
          }
        }
        return sub_1DCB30EB4((_QWORD *)a1, a3, a4, a6);
      }
    }
  }
  return result;
}

uint64_t sub_1DCB3163C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, float32x4_t a8)
{
  float32x4_t v8;
  __int128 v9;
  uint64_t v10;
  float32x4_t v11;
  float v12;
  uint64_t v13;
  float32x4_t v14;
  float32_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v20;
  __int128 v21;
  float32x4_t v22;
  __int128 v23;

  v22 = 0u;
  v23 = 0u;
  v8 = *(float32x4_t *)a2;
  v9 = *(_OWORD *)(a2 + 16);
  v20 = *(float32x4_t *)a2;
  v21 = v9;
  *(_QWORD *)((char *)&v23 + 4) = *(_QWORD *)(a2 + 52);
  v10 = *a1;
  v11 = *(float32x4_t *)(v10 + 16);
  v12 = *((float *)&v9 + 1);
  if (*(float *)&v9 >= 0.0)
  {
    v13 = 0;
    a8.i32[0] = v9;
  }
  else
  {
    a8.f32[0] = -*(float *)&v9;
    v20.f32[0] = -v8.f32[0];
    *(float *)&v21 = -*(float *)&v9;
    v13 = 4;
  }
  LODWORD(v9) = DWORD2(v9);
  if (*((float *)&v9 + 1) < 0.0)
  {
    v12 = -*((float *)&v9 + 1);
    v20.f32[1] = -v8.f32[1];
    *((float *)&v21 + 1) = -*((float *)&v9 + 1);
    v13 = v13 | 2;
  }
  v14 = *(float32x4_t *)(v10 + 32);
  if (*((float *)&v9 + 2) < 0.0)
  {
    *(float *)&v9 = -*((float *)&v9 + 2);
    v20.f32[2] = -v8.f32[2];
    *((float *)&v21 + 2) = -*((float *)&v9 + 2);
    v13 = v13 | 1;
  }
  a8.f32[0] = 1.0 / a8.f32[0];
  v15 = 1.0 / *(float *)&v9;
  v16 = a8;
  v16.f32[1] = 1.0 / v12;
  v16.f32[2] = v15;
  v22 = v16;
  LOBYTE(v23) = a8.f32[0] < 0.0;
  BYTE1(v23) = (float)(1.0 / v12) < 0.0;
  BYTE2(v23) = v15 < 0.0;
  v17 = vmulq_f32(vsubq_f32(v14, v20), v16);
  v18 = vmulq_f32(vsubq_f32(v11, v20), v16);
  if (fmaxf(v17.f32[0], fmaxf(v17.f32[1], v17.f32[2])) >= fminf(v18.f32[0], fminf(v18.f32[1], v18.f32[2])))
    return 0;
  else
    return sub_1DCB31140(v10, (uint64_t)&v20, (float32x4_t *)a2, a3, v13, a4, v17, v18);
}

id sub_1DCB31784(uint64_t *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  void **v9;
  _DWORD *v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  void *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  int v35;
  uint64_t *v36;
  __n128 **v37;
  unint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  char *v49;
  int v50;
  float v51;
  int v52;
  __n128 *v53;
  float v54;
  _BYTE *v55;
  unint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  _DWORD *v64;
  char *v65;
  int v66;
  MDLMeshBufferDataAllocator *v67;
  _BYTE *v68;
  _BYTE *v69;
  id v70;
  const char *v71;
  const char *v72;
  const char *v73;
  const char *v74;
  id v75;
  const char *v76;
  void *v77;
  const char *v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  void *v84;
  const char *v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  void *v90;
  const char *v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  void *v96;
  const char *v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  void *v102;
  const char *v103;
  const char *v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  void *v108;
  const char *v109;
  const char *v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  void *v114;
  const char *v115;
  const char *v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  void *v120;
  const char *v121;
  const char *v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  void *v126;
  const char *v127;
  unint64_t v128;
  void *v129;
  const char *v130;
  void *v131;
  const char *v132;
  const char *v133;
  void *v134;
  const char *v135;
  const char *v136;
  id v137;
  const char *v138;
  void *v139;
  const char *v140;
  unsigned __int8 v141;
  void *v142;
  double v143;
  const char *v144;
  uint64_t v145;
  const char *v146;
  void *v147;
  double v148;
  const char *v149;
  uint64_t v150;
  MDLSubmesh *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  _BYTE *v156;
  _BYTE *v157;
  MDLMesh *v158;
  const char *v159;
  void *v160;
  const char *v161;
  const char *v162;
  double v163;
  MDLMaterial *v165;
  const char *v166;
  void *v167;
  void *v168;
  const char *v169;
  void *v170;
  void *v171;
  MDLMeshBufferDataAllocator *v172;
  void *v173;
  __n128 v174;
  __n128 v175;
  void *v176;
  void *__p;
  uint64_t *v178;
  uint64_t v179;
  void *v180;
  _BYTE *v181;
  uint64_t v182;
  void *v183;
  _BYTE *v184;
  uint64_t v185;
  _QWORD v186[3];

  v186[1] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if (!*a1)
  {
    v15 = 0;
    return v15;
  }
  v183 = 0;
  v184 = 0;
  v185 = 0;
  v180 = 0;
  v181 = 0;
  v9 = (void **)(a1 + 1);
  v10 = (_DWORD *)a1[1];
  v182 = 0;
  __p = 0;
  v178 = 0;
  v179 = 0;
  a1[2] = (uint64_t)v10;
  v11 = *(__n128 *)(v4 + 32);
  if ((a3 & 1) == 0)
  {
    v174 = *(__n128 *)(v4 + 32);
    sub_1DCB322E4(0, (uint64_t)&v183, (char **)&v180, v11, *(__n128 *)(v4 + 16));
    v16 = a1[3];
    v17 = (char *)a1[2];
    if ((unint64_t)v17 < v16)
    {
      *(_DWORD *)v17 = 1;
      v14 = v17 + 4;
LABEL_32:
      v11 = v174;
      goto LABEL_33;
    }
    v27 = (char *)*v9;
    v28 = (v17 - (_BYTE *)*v9) >> 2;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 62)
      sub_1DCAE4C44();
    v30 = v16 - (_QWORD)v27;
    if (v30 >> 1 > v29)
      v29 = v30 >> 1;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
      v31 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      v32 = (char *)sub_1DCAE4D04((uint64_t)(a1 + 3), v31);
      v27 = (char *)a1[1];
      v17 = (char *)a1[2];
    }
    else
    {
      v32 = 0;
    }
    v33 = &v32[4 * v28];
    v34 = &v32[4 * v31];
    *(_DWORD *)v33 = 1;
    v14 = v33 + 4;
    while (v17 != v27)
    {
      v35 = *((_DWORD *)v17 - 1);
      v17 -= 4;
      *((_DWORD *)v33 - 1) = v35;
      v33 -= 4;
    }
    a1[1] = (uint64_t)v33;
    a1[2] = (uint64_t)v14;
    a1[3] = (uint64_t)v34;
    if (!v27)
      goto LABEL_32;
LABEL_31:
    operator delete(v27);
    goto LABEL_32;
  }
  v12 = (uint64_t)(a1 + 3);
  v13 = a1[3];
  if ((unint64_t)v10 >= v13)
  {
    v174 = v11;
    v18 = v13 - (_QWORD)v10;
    v19 = v18 >> 1;
    if ((unint64_t)(v18 >> 1) <= 1)
      v19 = 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v21 = sub_1DCAE4D04(v12, v20);
    v22 = (char *)a1[1];
    v23 = a1[2];
    v25 = &v21[v24];
    *v21 = 0;
    v14 = v21 + 1;
    while ((char *)v23 != v22)
    {
      v26 = *(_DWORD *)(v23 - 4);
      v23 -= 4;
      *--v21 = v26;
    }
    a1[1] = (uint64_t)v21;
    a1[2] = (uint64_t)v14;
    a1[3] = (uint64_t)v25;
    if (!v22)
      goto LABEL_32;
    v27 = v22;
    goto LABEL_31;
  }
  *v10 = 0;
  v14 = v10 + 1;
LABEL_33:
  a1[2] = (uint64_t)v14;
  sub_1DCADE350((uint64_t **)&__p, *a1, a2 - 1, a3 | a4, a3, vsubq_f32(*(float32x4_t *)(*a1 + 16), *(float32x4_t *)(*a1 + 32)), (int8x16_t)v11);
  v37 = (__n128 **)__p;
  v36 = v178;
  if (v178 != __p)
  {
    sub_1DCB3BFD4((uint64_t)__p, v178, 126 - 2 * __clz(((char *)v178 - (_BYTE *)__p) >> 3), 1);
    v175 = (*v37)[1];
    v38 = a1[3];
    v40 = (_DWORD *)a1[1];
    v39 = (_DWORD *)a1[2];
    if ((unint64_t)v39 >= v38)
    {
      v42 = v39 - v40;
      v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 62)
        sub_1DCAE4C44();
      v44 = v38 - (_QWORD)v40;
      if (v44 >> 1 > v43)
        v43 = v44 >> 1;
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
        v45 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v45 = v43;
      if (v45)
      {
        v46 = (char *)sub_1DCAE4D04((uint64_t)(a1 + 3), v45);
        v47 = (_DWORD *)a1[1];
        v39 = (_DWORD *)a1[2];
      }
      else
      {
        v46 = 0;
        v47 = (_DWORD *)a1[1];
      }
      v48 = &v46[4 * v42];
      v49 = &v46[4 * v45];
      *(_DWORD *)v48 = *v40;
      v41 = v48 + 4;
      while (v39 != v47)
      {
        v50 = *--v39;
        *((_DWORD *)v48 - 1) = v50;
        v48 -= 4;
      }
      a1[1] = (uint64_t)v48;
      a1[2] = (uint64_t)v41;
      a1[3] = (uint64_t)v49;
      if (v47)
        operator delete(v47);
    }
    else
    {
      *v39 = *v40;
      v41 = v39 + 1;
    }
    a1[2] = (uint64_t)v41;
    v51 = v175.n128_f32[1];
    v52 = 1;
    do
    {
      v53 = *v37;
      sub_1DCB322E4(a3, (uint64_t)&v183, (char **)&v180, (*v37)[1], (*v37)[2]);
      v54 = v53[1].n128_f32[1];
      v55 = *v9;
      if (v51 < v54)
      {
        v57 = (_DWORD *)a1[2];
        v56 = a1[3];
        if ((unint64_t)v57 >= v56)
        {
          v59 = ((char *)v57 - v55) >> 2;
          v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62)
            sub_1DCAE4C44();
          v61 = v56 - (_QWORD)v55;
          if (v61 >> 1 > v60)
            v60 = v61 >> 1;
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
            v62 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v62 = v60;
          if (v62)
          {
            v63 = (char *)sub_1DCAE4D04((uint64_t)(a1 + 3), v62);
            v64 = (_DWORD *)a1[1];
            v57 = (_DWORD *)a1[2];
          }
          else
          {
            v63 = 0;
            v64 = *v9;
          }
          v65 = &v63[4 * v59];
          *(_DWORD *)v65 = *(_DWORD *)&v55[4 * v52];
          v58 = v65 + 4;
          while (v57 != v64)
          {
            v66 = *--v57;
            *((_DWORD *)v65 - 1) = v66;
            v65 -= 4;
          }
          a1[1] = (uint64_t)v65;
          a1[2] = (uint64_t)v58;
          a1[3] = (uint64_t)&v63[4 * v62];
          if (v64)
            operator delete(v64);
        }
        else
        {
          *v57 = *(_DWORD *)&v55[4 * v52];
          v58 = v57 + 1;
        }
        ++v52;
        a1[2] = (uint64_t)v58;
        v55 = (_BYTE *)a1[1];
        v51 = v54;
      }
      ++*(_DWORD *)&v55[4 * v52];
      ++v37;
    }
    while (v37 != (__n128 **)v36);
  }
  v67 = objc_alloc_init(MDLMeshBufferDataAllocator);
  v69 = v180;
  v68 = v181;
  v172 = v67;
  v70 = objc_alloc(MEMORY[0x1E0C99D50]);
  v170 = (void *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v70, v71, (uint64_t)v180, v68 - v69, 0);
  v176 = (void *)objc_msgSend_newBufferWithData_type_(v67, v72, (uint64_t)v170, 2);
  if (objc_msgSend_conformsToProtocol_(v176, v73, (uint64_t)&unk_1F03B6D88))
  {
    v75 = v176;
    objc_msgSend_stringByAppendingString_(CFSTR("mesh"), v76, (uint64_t)CFSTR("-Indices"));
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v75, v78, (uint64_t)v77);

  }
  objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x1E0C99D50], v74, (uint64_t)v183, v184 - (_BYTE *)v183, 0);
  v173 = (void *)objc_claimAutoreleasedReturnValue();
  v79 = (void *)objc_opt_new();
  v171 = v79;
  objc_msgSend_attributes(v79, v80, v81);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v82, v83, 0);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setName_(v84, v85, (uint64_t)CFSTR("position"));

  objc_msgSend_attributes(v79, v86, v87);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v88, v89, 0);
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFormat_(v90, v91, 786435);

  objc_msgSend_attributes(v79, v92, v93);
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v94, v95, 0);
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setOffset_(v96, v97, 0);

  objc_msgSend_attributes(v79, v98, v99);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v100, v101, 0);
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setBufferIndex_(v102, v103, 0);

  if ((_DWORD)a3)
  {
    objc_msgSend_attributes(v79, v104, v105);
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v106, v107, 1);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v108, v109, (uint64_t)CFSTR("normal"));

    objc_msgSend_attributes(v79, v110, v111);
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v112, v113, 1);
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setFormat_(v114, v115, 786435);

    objc_msgSend_attributes(v79, v116, v117);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v118, v119, 1);
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setOffset_(v120, v121, 12);

    objc_msgSend_attributes(v79, v122, v123);
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v124, v125, 1);
    v126 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setBufferIndex_(v126, v127, 0);

    v128 = 6;
  }
  else
  {
    v128 = 3;
  }
  objc_msgSend_layouts(v79, v104, v105);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v129, v130, 0);
  v131 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setStride_(v131, v132, 4 * v128);

  v134 = (void *)objc_msgSend_newBufferWithData_type_(v172, v133, (uint64_t)v173, 1);
  if (objc_msgSend_conformsToProtocol_(v134, v135, (uint64_t)&unk_1F03B6D88))
  {
    v137 = v134;
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v138, (uint64_t)CFSTR("%@-%@"), CFSTR("mesh"), CFSTR("position"));
    v139 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setName_(v137, v140, (uint64_t)v139);

  }
  v141 = atomic_load((unsigned __int8 *)&qword_1F03B50E8);
  if ((v141 & 1) == 0 && __cxa_guard_acquire(&qword_1F03B50E8))
  {
    v165 = [MDLMaterial alloc];
    objc_msgSend_stringByAppendingString_(CFSTR("mesh"), v166, (uint64_t)CFSTR("-Material"));
    v167 = (void *)objc_claimAutoreleasedReturnValue();
    v168 = (void *)objc_opt_new();
    qword_1F03B50E0 = objc_msgSend_initWithName_scatteringFunction_(v165, v169, (uint64_t)v167, v168);

    __cxa_guard_release(&qword_1F03B50E8);
  }
  objc_msgSend_propertyWithSemantic_((void *)qword_1F03B50E0, v136, 2);
  v142 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v143) = 0;
  objc_msgSend_setFloatValue_(v142, v144, v145, v143);
  objc_msgSend_propertyWithSemantic_((void *)qword_1F03B50E0, v146, 6);
  v147 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v148) = 1.0;
  objc_msgSend_setFloatValue_(v147, v149, v150, v148);
  v151 = [MDLSubmesh alloc];
  v153 = (v181 - (_BYTE *)v180) >> 2;
  if ((_DWORD)a3)
    v154 = objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v151, v152, (uint64_t)v176, v153, 32, 2, qword_1F03B50E0);
  else
    v154 = objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v151, v152, (uint64_t)v176, v153, 32, 1, qword_1F03B50E0);
  v155 = (void *)v154;
  v157 = v183;
  v156 = v184;
  v158 = [MDLMesh alloc];
  v186[0] = v155;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v159, (uint64_t)v186, 1);
  v160 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend_initWithVertexBuffer_vertexCount_descriptor_submeshes_(v158, v161, (uint64_t)v134, ((v156 - v157) >> 2) / v128, v171, v160);

  if ((_DWORD)a3)
  {
    LODWORD(v163) = 1045220557;
    objc_msgSend_addNormalsWithAttributeNamed_creaseThreshold_(v15, v162, (uint64_t)CFSTR("normal"), v163);
  }

  if (__p)
    operator delete(__p);
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  return v15;
}

void sub_1DCB320BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  void *v24;
  void *v25;
  void *v26;

  __cxa_guard_abort(&qword_1F03B50E8);
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(a1);
}

void sub_1DCB322E4(int a1, uint64_t a2, char **a3, __n128 a4, __n128 a5)
{
  unsigned __int32 *v8;
  unsigned __int32 **v9;
  unsigned __int32 *v10;
  unint64_t v11;
  char *v12;
  char **v13;
  unsigned __int32 *v14;
  unsigned __int32 *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  unsigned __int32 v28;
  unsigned __int32 *v29;
  unsigned __int32 *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  unsigned __int32 v38;
  unsigned __int32 *v39;
  unsigned __int32 *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  unsigned __int32 *v46;
  unsigned __int32 v47;
  unsigned __int32 v48;
  unsigned __int32 *v49;
  unsigned __int32 *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unsigned __int32 *v56;
  unsigned __int32 v57;
  unsigned __int32 *v58;
  unsigned __int32 *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  unsigned __int32 *v65;
  unsigned __int32 v66;
  unsigned __int32 *v67;
  unsigned __int32 *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  unsigned __int32 *v76;
  unsigned __int32 *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  int v84;
  unsigned __int32 *v85;
  unsigned __int32 *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  int v93;
  unsigned __int32 *v94;
  unsigned __int32 *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  unsigned __int32 *v101;
  unsigned __int32 v102;
  unsigned __int32 *v103;
  unsigned __int32 *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  unsigned __int32 *v110;
  unsigned __int32 v111;
  unsigned __int32 *v112;
  unsigned __int32 *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  unsigned __int32 *v119;
  unsigned __int32 v120;
  unsigned __int32 *v121;
  unsigned __int32 *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  int v129;
  unsigned __int32 *v130;
  unsigned __int32 *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  int v138;
  unsigned __int32 *v139;
  unsigned __int32 *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  int v147;
  unsigned __int32 *v148;
  unsigned __int32 *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  unsigned __int32 *v155;
  unsigned __int32 v156;
  unsigned __int32 *v157;
  unsigned __int32 *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  int v165;
  unsigned __int32 *v166;
  unsigned __int32 *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  unsigned __int32 *v173;
  unsigned __int32 v174;
  unsigned __int32 *v175;
  unsigned __int32 *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  int v183;
  unsigned __int32 *v184;
  unsigned __int32 *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  char *v190;
  char *v191;
  int v192;
  unsigned __int32 *v193;
  unsigned __int32 *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  int v201;
  unsigned __int32 *v202;
  unsigned __int32 *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  unsigned __int32 *v209;
  unsigned __int32 v210;
  unsigned __int32 *v211;
  unsigned __int32 *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  int v219;
  unsigned __int32 *v220;
  unsigned __int32 *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  unsigned __int32 *v227;
  unsigned __int32 v228;
  unsigned __int32 *v229;
  unsigned __int32 *v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  int v237;
  unsigned __int32 *v238;
  unsigned __int32 *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  char *v244;
  char *v245;
  int v246;
  unsigned __int32 *v247;
  unsigned __int32 *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  int v255;
  unsigned __int32 *v256;
  unsigned __int32 *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  char *v262;
  char *v263;
  int v264;
  unsigned __int32 *v265;
  unsigned __int32 *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  char *v271;
  unsigned __int32 *v272;
  unsigned __int32 v273;
  unsigned __int32 *v274;
  unsigned __int32 *v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  char *v280;
  unsigned __int32 *v281;
  unsigned __int32 v282;
  unsigned __int32 *v283;
  unsigned __int32 *v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  int v291;
  unsigned __int32 *v292;
  unsigned __int32 *v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char *v298;
  char *v299;
  int v300;
  unsigned __int32 *v301;
  unsigned __int32 *v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  char *v307;
  char *v308;
  int v309;
  unsigned __int32 *v310;
  unsigned __int32 *v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  char *v316;
  char *v317;
  int v318;
  unsigned __int32 *v319;
  unsigned __int32 *v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  char *v325;
  unsigned __int32 *v326;
  unsigned __int32 v327;
  unsigned __int32 v328;
  unsigned __int32 *v329;
  unsigned __int32 *v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t v334;
  char *v335;
  unsigned __int32 *v336;
  unsigned __int32 v337;
  unsigned __int32 *v338;
  unsigned __int32 *v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  char *v344;
  char *v345;
  int v346;
  unsigned __int32 *v347;
  unsigned __int32 *v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  unint64_t v352;
  char *v353;
  char *v354;
  char *v355;
  int v356;
  unsigned __int32 *v357;
  unsigned __int32 *v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  char *v363;
  unsigned __int32 *v364;
  unsigned __int32 v365;
  unsigned __int32 *v366;
  unsigned __int32 *v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  char *v372;
  char *v373;
  int v374;
  unsigned __int32 *v375;
  unsigned __int32 *v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  unint64_t v380;
  char *v381;
  char *v382;
  int v383;
  unsigned __int32 *v384;
  unsigned __int32 *v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  char *v390;
  unsigned __int32 *v391;
  unsigned __int32 v392;
  unsigned __int32 *v393;
  unsigned __int32 *v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  char *v399;
  char *v400;
  int v401;
  unsigned __int32 *v402;
  unsigned __int32 *v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  char *v408;
  char *v409;
  int v410;
  unsigned __int32 *v411;
  unsigned __int32 *v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  char *v417;
  char *v418;
  int v419;
  unsigned __int32 *v420;
  unsigned __int32 *v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  char *v426;
  char *v427;
  int v428;
  unsigned __int32 *v429;
  unsigned __int32 *v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  unint64_t v434;
  char *v435;
  char *v436;
  int v437;
  unsigned __int32 *v438;
  unsigned __int32 *v439;
  uint64_t v440;
  unint64_t v441;
  uint64_t v442;
  unint64_t v443;
  char *v444;
  unsigned __int32 *v445;
  char *v446;
  unsigned __int32 v447;
  unint64_t v448;
  char *v449;
  char **v450;
  char *v451;
  char *v452;
  char *v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  unint64_t v457;
  char *v458;
  char *v459;
  char *v460;
  int v461;
  unint64_t v462;
  char *v463;
  char **v464;
  char *v465;
  char *v466;
  char *v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  unint64_t v471;
  char *v472;
  char *v473;
  int v474;
  int v475;
  char *v476;
  char *v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  unint64_t v481;
  char *v482;
  char *v483;
  int v484;
  int v485;
  char *v486;
  char *v487;
  uint64_t v488;
  unint64_t v489;
  uint64_t v490;
  unint64_t v491;
  char *v492;
  char *v493;
  int v494;
  int v495;
  char *v496;
  char *v497;
  uint64_t v498;
  unint64_t v499;
  uint64_t v500;
  unint64_t v501;
  char *v502;
  char *v503;
  int v504;
  char *v505;
  char *v506;
  uint64_t v507;
  unint64_t v508;
  uint64_t v509;
  unint64_t v510;
  char *v511;
  char *v512;
  int v513;
  char *v514;
  char *v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  unint64_t v519;
  char *v520;
  char *v521;
  int v522;
  int v523;
  char *v524;
  char *v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  unint64_t v529;
  char *v530;
  char *v531;
  int v532;
  char **v533;
  char *v534;
  char *v535;
  uint64_t v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  char *v540;
  char *v541;
  int v542;
  char *v543;
  char *v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  unint64_t v548;
  char *v549;
  char *v550;
  int v551;
  int v552;
  char *v553;
  char *v554;
  uint64_t v555;
  unint64_t v556;
  uint64_t v557;
  unint64_t v558;
  char *v559;
  char *v560;
  int v561;
  int v562;
  char *v563;
  char *v564;
  uint64_t v565;
  unint64_t v566;
  uint64_t v567;
  unint64_t v568;
  char *v569;
  char *v570;
  char *v571;
  int v572;
  unsigned __int32 *v573;
  char *v574;
  unsigned __int32 *v575;
  unsigned __int32 *v576;
  uint64_t v577;
  unint64_t v578;
  uint64_t v579;
  unint64_t v580;
  char *v581;
  char *v582;
  int v583;
  char *v584;
  char *v585;
  uint64_t v586;
  unint64_t v587;
  uint64_t v588;
  unint64_t v589;
  char *v590;
  char *v591;
  int v592;
  unsigned __int32 *v593;
  unsigned __int32 *v594;
  uint64_t v595;
  unint64_t v596;
  uint64_t v597;
  unint64_t v598;
  char *v599;
  char *v600;
  int v601;
  int v602;
  char *v603;
  char *v604;
  uint64_t v605;
  unint64_t v606;
  uint64_t v607;
  unint64_t v608;
  char *v609;
  unsigned __int32 *v610;
  unsigned __int32 v611;
  unsigned __int32 *v612;
  unsigned __int32 *v613;
  uint64_t v614;
  unint64_t v615;
  uint64_t v616;
  unint64_t v617;
  char *v618;
  char *v619;
  int v620;
  char *v621;
  char *v622;
  uint64_t v623;
  unint64_t v624;
  uint64_t v625;
  unint64_t v626;
  char *v627;
  unsigned __int32 *v628;
  unsigned __int32 v629;
  unsigned __int32 *v630;
  unsigned __int32 *v631;
  uint64_t v632;
  unint64_t v633;
  uint64_t v634;
  unint64_t v635;
  char *v636;
  char *v637;
  int v638;
  int v639;
  char *v640;
  char *v641;
  uint64_t v642;
  unint64_t v643;
  uint64_t v644;
  unint64_t v645;
  char *v646;
  char *v647;
  int v648;
  unsigned __int32 *v649;
  unsigned __int32 *v650;
  uint64_t v651;
  unint64_t v652;
  uint64_t v653;
  unint64_t v654;
  char *v655;
  char *v656;
  int v657;
  char *v658;
  char *v659;
  uint64_t v660;
  unint64_t v661;
  uint64_t v662;
  unint64_t v663;
  char *v664;
  unsigned __int32 *v665;
  unsigned __int32 v666;
  unsigned __int32 *v667;
  unsigned __int32 *v668;
  uint64_t v669;
  unint64_t v670;
  uint64_t v671;
  unint64_t v672;
  char *v673;
  char *v674;
  int v675;
  char *v676;
  char *v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t v680;
  unint64_t v681;
  char *v682;
  unsigned __int32 *v683;
  unsigned __int32 v684;
  unsigned __int32 *v685;
  unsigned __int32 *v686;
  uint64_t v687;
  unint64_t v688;
  uint64_t v689;
  unint64_t v690;
  char *v691;
  char *v692;
  int v693;
  char *v694;
  char *v695;
  uint64_t v696;
  unint64_t v697;
  uint64_t v698;
  unint64_t v699;
  char *v700;
  char *v701;
  int v702;
  unsigned __int32 *v703;
  unsigned __int32 *v704;
  uint64_t v705;
  unint64_t v706;
  uint64_t v707;
  unint64_t v708;
  char *v709;
  char *v710;
  int v711;
  int v712;
  char *v713;
  char *v714;
  uint64_t v715;
  unint64_t v716;
  uint64_t v717;
  unint64_t v718;
  char *v719;
  char *v720;
  int v721;
  unsigned __int32 *v722;
  unsigned __int32 *v723;
  uint64_t v724;
  unint64_t v725;
  uint64_t v726;
  unint64_t v727;
  char *v728;
  char *v729;
  int v730;
  char *v731;
  char *v732;
  uint64_t v733;
  unint64_t v734;
  uint64_t v735;
  unint64_t v736;
  char *v737;
  unsigned __int32 *v738;
  unsigned __int32 v739;
  unsigned __int32 *v740;
  unsigned __int32 *v741;
  uint64_t v742;
  unint64_t v743;
  uint64_t v744;
  unint64_t v745;
  char *v746;
  char *v747;
  int v748;
  int v749;
  char *v750;
  char *v751;
  uint64_t v752;
  unint64_t v753;
  uint64_t v754;
  unint64_t v755;
  char *v756;
  char *v757;
  int v758;
  unsigned __int32 *v759;
  unsigned __int32 *v760;
  uint64_t v761;
  unint64_t v762;
  uint64_t v763;
  unint64_t v764;
  char *v765;
  char *v766;
  int v767;
  char *v768;
  char *v769;
  uint64_t v770;
  unint64_t v771;
  uint64_t v772;
  unint64_t v773;
  char *v774;
  char *v775;
  int v776;
  unsigned __int32 *v777;
  unsigned __int32 *v778;
  uint64_t v779;
  unint64_t v780;
  uint64_t v781;
  unint64_t v782;
  char *v783;
  char *v784;
  int v785;
  char *v786;
  char *v787;
  uint64_t v788;
  unint64_t v789;
  uint64_t v790;
  unint64_t v791;
  char *v792;
  unsigned __int32 *v793;
  unsigned __int32 v794;
  unsigned __int32 *v795;
  unsigned __int32 *v796;
  uint64_t v797;
  unint64_t v798;
  uint64_t v799;
  unint64_t v800;
  char *v801;
  char *v802;
  int v803;
  char *v804;
  char *v805;
  uint64_t v806;
  unint64_t v807;
  uint64_t v808;
  unint64_t v809;
  char *v810;
  char *v811;
  int v812;
  unsigned __int32 *v813;
  unsigned __int32 *v814;
  uint64_t v815;
  unint64_t v816;
  uint64_t v817;
  unint64_t v818;
  char *v819;
  char *v820;
  int v821;
  char *v822;
  char *v823;
  uint64_t v824;
  unint64_t v825;
  uint64_t v826;
  unint64_t v827;
  char *v828;
  unsigned __int32 *v829;
  unsigned __int32 v830;
  unsigned __int32 *v831;
  unsigned __int32 *v832;
  uint64_t v833;
  unint64_t v834;
  uint64_t v835;
  unint64_t v836;
  char *v837;
  char *v838;
  int v839;
  char *v840;
  char *v841;
  uint64_t v842;
  unint64_t v843;
  uint64_t v844;
  unint64_t v845;
  char *v846;
  char *v847;
  int v848;
  unsigned __int32 *v849;
  unsigned __int32 *v850;
  uint64_t v851;
  unint64_t v852;
  uint64_t v853;
  unint64_t v854;
  char *v855;
  char *v856;
  int v857;
  char *v858;
  char *v859;
  uint64_t v860;
  unint64_t v861;
  uint64_t v862;
  unint64_t v863;
  char *v864;
  char *v865;
  int v866;
  unsigned __int32 *v867;
  unsigned __int32 *v868;
  uint64_t v869;
  unint64_t v870;
  uint64_t v871;
  unint64_t v872;
  char *v873;
  char *v874;
  int v875;
  char *v876;
  char *v877;
  uint64_t v878;
  unint64_t v879;
  uint64_t v880;
  unint64_t v881;
  char *v882;
  unsigned __int32 *v883;
  unsigned __int32 v884;
  unsigned __int32 *v885;
  unsigned __int32 *v886;
  uint64_t v887;
  unint64_t v888;
  uint64_t v889;
  unint64_t v890;
  char *v891;
  char *v892;
  int v893;
  char *v894;
  char *v895;
  uint64_t v896;
  unint64_t v897;
  uint64_t v898;
  unint64_t v899;
  char *v900;
  char *v901;
  int v902;
  unsigned __int32 *v903;
  unsigned __int32 *v904;
  uint64_t v905;
  unint64_t v906;
  uint64_t v907;
  unint64_t v908;
  char *v909;
  char *v910;
  char *v911;
  int v912;
  char *v913;
  int v914;
  unsigned __int32 *v915;
  unsigned __int32 *v916;
  uint64_t v917;
  unint64_t v918;
  uint64_t v919;
  unint64_t v920;
  char *v921;
  char *v922;
  int v923;
  unsigned __int32 *v924;
  unsigned __int32 *v925;
  uint64_t v926;
  unint64_t v927;
  uint64_t v928;
  unint64_t v929;
  char *v930;
  char *v931;
  int v932;
  unsigned __int32 *v933;
  unsigned __int32 *v934;
  uint64_t v935;
  unint64_t v936;
  uint64_t v937;
  unint64_t v938;
  char *v939;
  char *v940;
  int v941;
  unsigned __int32 *v942;
  unsigned __int32 *v943;
  uint64_t v944;
  unint64_t v945;
  uint64_t v946;
  unint64_t v947;
  char *v948;
  char *v949;
  int v950;
  unsigned __int32 *v951;
  unsigned __int32 *v952;
  uint64_t v953;
  unint64_t v954;
  uint64_t v955;
  unint64_t v956;
  char *v957;
  char *v958;
  char *v959;
  int v960;
  int v961;
  char *v962;
  char *v963;
  char *v964;
  char *v965;
  uint64_t v966;
  unint64_t v967;
  uint64_t v968;
  unint64_t v969;
  char *v970;
  char *v971;
  int v972;
  int v973;
  char *v974;
  char *v975;
  uint64_t v976;
  unint64_t v977;
  uint64_t v978;
  unint64_t v979;
  char *v980;
  char *v981;
  int v982;
  int v983;
  char *v984;
  char *v985;
  uint64_t v986;
  unint64_t v987;
  uint64_t v988;
  unint64_t v989;
  char *v990;
  char *v991;
  int v992;
  char *v993;
  char *v994;
  uint64_t v995;
  unint64_t v996;
  uint64_t v997;
  unint64_t v998;
  char *v999;
  char *v1000;
  int v1001;
  char **v1002;
  char *v1003;
  char *v1004;
  uint64_t v1005;
  unint64_t v1006;
  uint64_t v1007;
  unint64_t v1008;
  char *v1009;
  char *v1010;
  int v1011;
  int v1012;
  char *v1013;
  char *v1014;
  uint64_t v1015;
  unint64_t v1016;
  uint64_t v1017;
  unint64_t v1018;
  char *v1019;
  char *v1020;
  char *v1021;
  int v1022;
  unsigned __int32 *v1023;
  char *v1024;
  unsigned __int32 *v1025;
  unsigned __int32 *v1026;
  uint64_t v1027;
  unint64_t v1028;
  uint64_t v1029;
  unint64_t v1030;
  char *v1031;
  char *v1032;
  int v1033;
  unsigned __int32 *v1034;
  unsigned __int32 *v1035;
  uint64_t v1036;
  unint64_t v1037;
  uint64_t v1038;
  unint64_t v1039;
  char *v1040;
  unsigned __int32 *v1041;
  unsigned __int32 v1042;
  unsigned __int32 *v1043;
  unsigned __int32 *v1044;
  uint64_t v1045;
  unint64_t v1046;
  uint64_t v1047;
  unint64_t v1048;
  char *v1049;
  char *v1050;
  int v1051;
  unsigned __int32 *v1052;
  unsigned __int32 *v1053;
  uint64_t v1054;
  unint64_t v1055;
  uint64_t v1056;
  unint64_t v1057;
  char *v1058;
  char *v1059;
  int v1060;
  unsigned __int32 *v1061;
  unsigned __int32 *v1062;
  uint64_t v1063;
  unint64_t v1064;
  uint64_t v1065;
  unint64_t v1066;
  char *v1067;
  unsigned __int32 *v1068;
  unsigned __int32 v1069;
  unsigned __int32 *v1070;
  unsigned __int32 *v1071;
  uint64_t v1072;
  unint64_t v1073;
  uint64_t v1074;
  unint64_t v1075;
  char *v1076;
  char *v1077;
  int v1078;
  unsigned __int32 *v1079;
  unsigned __int32 *v1080;
  uint64_t v1081;
  unint64_t v1082;
  uint64_t v1083;
  unint64_t v1084;
  char *v1085;
  char *v1086;
  int v1087;
  unsigned __int32 *v1088;
  unsigned __int32 *v1089;
  uint64_t v1090;
  unint64_t v1091;
  uint64_t v1092;
  unint64_t v1093;
  char *v1094;
  unsigned __int32 *v1095;
  unsigned __int32 v1096;
  unsigned __int32 *v1097;
  unsigned __int32 *v1098;
  uint64_t v1099;
  unint64_t v1100;
  uint64_t v1101;
  unint64_t v1102;
  char *v1103;
  char *v1104;
  int v1105;
  unsigned __int32 *v1106;
  unsigned __int32 *v1107;
  uint64_t v1108;
  unint64_t v1109;
  uint64_t v1110;
  unint64_t v1111;
  char *v1112;
  char *v1113;
  int v1114;
  unsigned __int32 *v1115;
  unsigned __int32 *v1116;
  uint64_t v1117;
  unint64_t v1118;
  uint64_t v1119;
  unint64_t v1120;
  char *v1121;
  unsigned __int32 *v1122;
  unsigned __int32 v1123;
  unsigned __int32 *v1124;
  unsigned __int32 *v1125;
  uint64_t v1126;
  unint64_t v1127;
  uint64_t v1128;
  unint64_t v1129;
  char *v1130;
  char *v1131;
  int v1132;
  unsigned __int32 *v1133;
  unsigned __int32 *v1134;
  uint64_t v1135;
  unint64_t v1136;
  uint64_t v1137;
  unint64_t v1138;
  char *v1139;
  char *v1140;
  int v1141;
  unsigned __int32 *v1142;
  unsigned __int32 *v1143;
  uint64_t v1144;
  unint64_t v1145;
  uint64_t v1146;
  unint64_t v1147;
  char *v1148;
  char *v1149;
  int v1150;
  unsigned __int32 *v1151;
  unsigned __int32 *v1152;
  uint64_t v1153;
  unint64_t v1154;
  uint64_t v1155;
  unint64_t v1156;
  char *v1157;
  char *v1158;
  int v1159;
  unsigned __int32 *v1160;
  unsigned __int32 *v1161;
  uint64_t v1162;
  unint64_t v1163;
  uint64_t v1164;
  unint64_t v1165;
  char *v1166;
  char *v1167;
  int v1168;
  unsigned __int32 *v1169;
  unsigned __int32 *v1170;
  uint64_t v1171;
  unint64_t v1172;
  uint64_t v1173;
  unint64_t v1174;
  char *v1175;
  char *v1176;
  int v1177;
  unsigned __int32 *v1178;
  unsigned __int32 *v1179;
  uint64_t v1180;
  unint64_t v1181;
  uint64_t v1182;
  unint64_t v1183;
  char *v1184;
  char *v1185;
  int v1186;
  unsigned __int32 *v1187;
  unsigned __int32 *v1188;
  uint64_t v1189;
  unint64_t v1190;
  uint64_t v1191;
  unint64_t v1192;
  char *v1193;
  char *v1194;
  int v1195;
  unsigned __int32 *v1196;
  unsigned __int32 *v1197;
  uint64_t v1198;
  unint64_t v1199;
  uint64_t v1200;
  unint64_t v1201;
  char *v1202;
  char *v1203;
  int v1204;
  unsigned __int32 *v1205;
  unsigned __int32 *v1206;
  uint64_t v1207;
  unint64_t v1208;
  uint64_t v1209;
  unint64_t v1210;
  char *v1211;
  char *v1212;
  int v1213;
  unsigned __int32 *v1214;
  unsigned __int32 *v1215;
  uint64_t v1216;
  unint64_t v1217;
  uint64_t v1218;
  unint64_t v1219;
  char *v1220;
  char *v1221;
  int v1222;
  unsigned __int32 *v1223;
  unsigned __int32 *v1224;
  uint64_t v1225;
  unint64_t v1226;
  uint64_t v1227;
  unint64_t v1228;
  char *v1229;
  char *v1230;
  int v1231;
  unsigned __int32 *v1232;
  unsigned __int32 *v1233;
  uint64_t v1234;
  unint64_t v1235;
  uint64_t v1236;
  unint64_t v1237;
  char *v1238;
  char *v1239;
  char *v1240;
  int v1241;
  int v1242;
  char *v1243;
  char *v1244;
  char *v1245;
  char *v1246;
  uint64_t v1247;
  unint64_t v1248;
  uint64_t v1249;
  unint64_t v1250;
  char *v1251;
  char *v1252;
  int v1253;
  int v1254;
  char *v1255;
  char *v1256;
  uint64_t v1257;
  unint64_t v1258;
  uint64_t v1259;
  unint64_t v1260;
  char *v1261;
  char *v1262;
  int v1263;
  int v1264;
  char *v1265;
  char *v1266;
  uint64_t v1267;
  unint64_t v1268;
  uint64_t v1269;
  unint64_t v1270;
  char *v1271;
  char *v1272;
  int v1273;
  char *v1274;
  char *v1275;
  uint64_t v1276;
  unint64_t v1277;
  uint64_t v1278;
  unint64_t v1279;
  char *v1280;
  char *v1281;
  int v1282;
  char **v1283;
  int v1284;
  char *v1285;
  char *v1286;
  uint64_t v1287;
  unint64_t v1288;
  uint64_t v1289;
  unint64_t v1290;
  char *v1291;
  char *v1292;
  int v1293;
  char *v1294;
  char *v1295;
  uint64_t v1296;
  unint64_t v1297;
  uint64_t v1298;
  unint64_t v1299;
  char *v1300;
  char *v1301;
  char *v1302;
  int v1303;
  unsigned __int32 *v1304;
  char *v1305;
  unsigned __int32 *v1306;
  unsigned __int32 *v1307;
  uint64_t v1308;
  unint64_t v1309;
  uint64_t v1310;
  unint64_t v1311;
  char *v1312;
  char *v1313;
  int v1314;
  unsigned __int32 *v1315;
  unsigned __int32 *v1316;
  uint64_t v1317;
  unint64_t v1318;
  uint64_t v1319;
  unint64_t v1320;
  char *v1321;
  unsigned __int32 *v1322;
  unsigned __int32 v1323;
  unsigned __int32 *v1324;
  unsigned __int32 *v1325;
  uint64_t v1326;
  unint64_t v1327;
  uint64_t v1328;
  unint64_t v1329;
  char *v1330;
  unsigned __int32 *v1331;
  unsigned __int32 v1332;
  unsigned __int32 *v1333;
  unsigned __int32 *v1334;
  uint64_t v1335;
  unint64_t v1336;
  uint64_t v1337;
  unint64_t v1338;
  char *v1339;
  char *v1340;
  int v1341;
  unsigned __int32 *v1342;
  unsigned __int32 *v1343;
  uint64_t v1344;
  unint64_t v1345;
  uint64_t v1346;
  unint64_t v1347;
  char *v1348;
  unsigned __int32 *v1349;
  unsigned __int32 v1350;
  unsigned __int32 *v1351;
  unsigned __int32 *v1352;
  uint64_t v1353;
  unint64_t v1354;
  uint64_t v1355;
  unint64_t v1356;
  char *v1357;
  unsigned __int32 *v1358;
  unsigned __int32 v1359;
  unsigned __int32 *v1360;
  unsigned __int32 *v1361;
  uint64_t v1362;
  unint64_t v1363;
  uint64_t v1364;
  unint64_t v1365;
  char *v1366;
  char *v1367;
  int v1368;
  unsigned __int32 *v1369;
  unsigned __int32 *v1370;
  uint64_t v1371;
  unint64_t v1372;
  uint64_t v1373;
  unint64_t v1374;
  char *v1375;
  char *v1376;
  int v1377;
  unsigned __int32 *v1378;
  unsigned __int32 *v1379;
  uint64_t v1380;
  unint64_t v1381;
  uint64_t v1382;
  unint64_t v1383;
  char *v1384;
  unsigned __int32 *v1385;
  unsigned __int32 v1386;
  unsigned __int32 *v1387;
  unsigned __int32 *v1388;
  uint64_t v1389;
  unint64_t v1390;
  uint64_t v1391;
  unint64_t v1392;
  char *v1393;
  char *v1394;
  int v1395;
  unsigned __int32 *v1396;
  unsigned __int32 *v1397;
  uint64_t v1398;
  unint64_t v1399;
  uint64_t v1400;
  unint64_t v1401;
  char *v1402;
  char *v1403;
  int v1404;
  unsigned __int32 *v1405;
  unsigned __int32 *v1406;
  uint64_t v1407;
  unint64_t v1408;
  uint64_t v1409;
  unint64_t v1410;
  char *v1411;
  unsigned __int32 *v1412;
  unsigned __int32 v1413;
  unsigned __int32 *v1414;
  unsigned __int32 *v1415;
  uint64_t v1416;
  unint64_t v1417;
  uint64_t v1418;
  unint64_t v1419;
  char *v1420;
  char *v1421;
  int v1422;
  unsigned __int32 *v1423;
  unsigned __int32 *v1424;
  uint64_t v1425;
  unint64_t v1426;
  uint64_t v1427;
  unint64_t v1428;
  char *v1429;
  unsigned __int32 *v1430;
  unsigned __int32 v1431;
  unsigned __int32 *v1432;
  unsigned __int32 *v1433;
  uint64_t v1434;
  unint64_t v1435;
  uint64_t v1436;
  unint64_t v1437;
  char *v1438;
  char *v1439;
  int v1440;
  unsigned __int32 *v1441;
  unsigned __int32 *v1442;
  uint64_t v1443;
  unint64_t v1444;
  uint64_t v1445;
  unint64_t v1446;
  char *v1447;
  char *v1448;
  int v1449;
  unsigned __int32 *v1450;
  unsigned __int32 *v1451;
  uint64_t v1452;
  unint64_t v1453;
  uint64_t v1454;
  unint64_t v1455;
  char *v1456;
  unsigned __int32 *v1457;
  unsigned __int32 v1458;
  unsigned __int32 *v1459;
  unsigned __int32 *v1460;
  uint64_t v1461;
  unint64_t v1462;
  uint64_t v1463;
  unint64_t v1464;
  char *v1465;
  char *v1466;
  int v1467;
  unsigned __int32 *v1468;
  unsigned __int32 *v1469;
  uint64_t v1470;
  unint64_t v1471;
  uint64_t v1472;
  unint64_t v1473;
  char *v1474;
  char *v1475;
  int v1476;
  unsigned __int32 *v1477;
  unsigned __int32 *v1478;
  uint64_t v1479;
  unint64_t v1480;
  uint64_t v1481;
  unint64_t v1482;
  char *v1483;
  char *v1484;
  int v1485;
  unsigned __int32 *v1486;
  unsigned __int32 *v1487;
  uint64_t v1488;
  unint64_t v1489;
  uint64_t v1490;
  unint64_t v1491;
  char *v1492;
  char *v1493;
  int v1494;
  unsigned __int32 *v1495;
  unsigned __int32 *v1496;
  uint64_t v1497;
  unint64_t v1498;
  uint64_t v1499;
  unint64_t v1500;
  char *v1501;
  char *v1502;
  int v1503;
  unsigned __int32 *v1504;
  unsigned __int32 *v1505;
  uint64_t v1506;
  unint64_t v1507;
  uint64_t v1508;
  unint64_t v1509;
  char *v1510;
  char *v1511;
  int v1512;
  unsigned __int32 *v1513;
  unsigned __int32 *v1514;
  uint64_t v1515;
  unint64_t v1516;
  uint64_t v1517;
  unint64_t v1518;
  char *v1519;
  char *v1520;
  char *v1521;
  int v1522;
  int v1523;
  char *v1524;
  char *v1525;
  char *v1526;
  char *v1527;
  uint64_t v1528;
  unint64_t v1529;
  uint64_t v1530;
  unint64_t v1531;
  char *v1532;
  char *v1533;
  int v1534;
  int v1535;
  char *v1536;
  char *v1537;
  uint64_t v1538;
  unint64_t v1539;
  uint64_t v1540;
  unint64_t v1541;
  char *v1542;
  char *v1543;
  int v1544;
  int v1545;
  char *v1546;
  char *v1547;
  uint64_t v1548;
  unint64_t v1549;
  uint64_t v1550;
  unint64_t v1551;
  char *v1552;
  char *v1553;
  int v1554;
  char *v1555;
  char *v1556;
  uint64_t v1557;
  unint64_t v1558;
  uint64_t v1559;
  unint64_t v1560;
  char *v1561;
  char *v1562;
  int v1563;
  char **v1564;
  int v1565;
  char *v1566;
  char *v1567;
  uint64_t v1568;
  unint64_t v1569;
  uint64_t v1570;
  unint64_t v1571;
  char *v1572;
  char *v1573;
  int v1574;
  char *v1575;
  char *v1576;
  uint64_t v1577;
  unint64_t v1578;
  uint64_t v1579;
  unint64_t v1580;
  char *v1581;
  char *v1582;
  char *v1583;
  int v1584;
  unsigned __int32 *v1585;
  char *v1586;
  unsigned __int32 *v1587;
  unsigned __int32 *v1588;
  uint64_t v1589;
  unint64_t v1590;
  uint64_t v1591;
  unint64_t v1592;
  char *v1593;
  char *v1594;
  int v1595;
  unsigned __int32 *v1596;
  unsigned __int32 *v1597;
  uint64_t v1598;
  unint64_t v1599;
  uint64_t v1600;
  unint64_t v1601;
  char *v1602;
  unsigned __int32 *v1603;
  unsigned __int32 v1604;
  unsigned __int32 *v1605;
  unsigned __int32 *v1606;
  uint64_t v1607;
  unint64_t v1608;
  uint64_t v1609;
  unint64_t v1610;
  char *v1611;
  unsigned __int32 *v1612;
  unsigned __int32 v1613;
  unsigned __int32 *v1614;
  unsigned __int32 *v1615;
  uint64_t v1616;
  unint64_t v1617;
  uint64_t v1618;
  unint64_t v1619;
  char *v1620;
  char *v1621;
  int v1622;
  unsigned __int32 *v1623;
  unsigned __int32 *v1624;
  uint64_t v1625;
  unint64_t v1626;
  uint64_t v1627;
  unint64_t v1628;
  char *v1629;
  unsigned __int32 *v1630;
  unsigned __int32 v1631;
  unsigned __int32 *v1632;
  unsigned __int32 *v1633;
  uint64_t v1634;
  unint64_t v1635;
  uint64_t v1636;
  unint64_t v1637;
  char *v1638;
  unsigned __int32 *v1639;
  unsigned __int32 v1640;
  unsigned __int32 *v1641;
  unsigned __int32 *v1642;
  uint64_t v1643;
  unint64_t v1644;
  uint64_t v1645;
  unint64_t v1646;
  char *v1647;
  char *v1648;
  int v1649;
  unsigned __int32 *v1650;
  unsigned __int32 *v1651;
  uint64_t v1652;
  unint64_t v1653;
  uint64_t v1654;
  unint64_t v1655;
  char *v1656;
  unsigned __int32 *v1657;
  unsigned __int32 v1658;
  unsigned __int32 *v1659;
  unsigned __int32 *v1660;
  uint64_t v1661;
  unint64_t v1662;
  uint64_t v1663;
  unint64_t v1664;
  char *v1665;
  unsigned __int32 *v1666;
  unsigned __int32 v1667;
  unsigned __int32 *v1668;
  unsigned __int32 *v1669;
  uint64_t v1670;
  unint64_t v1671;
  uint64_t v1672;
  unint64_t v1673;
  char *v1674;
  char *v1675;
  int v1676;
  unsigned __int32 *v1677;
  unsigned __int32 *v1678;
  uint64_t v1679;
  unint64_t v1680;
  uint64_t v1681;
  unint64_t v1682;
  char *v1683;
  unsigned __int32 *v1684;
  unsigned __int32 v1685;
  unsigned __int32 *v1686;
  unsigned __int32 *v1687;
  uint64_t v1688;
  unint64_t v1689;
  uint64_t v1690;
  unint64_t v1691;
  char *v1692;
  unsigned __int32 *v1693;
  unsigned __int32 v1694;
  unsigned __int32 *v1695;
  unsigned __int32 *v1696;
  uint64_t v1697;
  unint64_t v1698;
  uint64_t v1699;
  unint64_t v1700;
  char *v1701;
  char *v1702;
  int v1703;
  unsigned __int32 *v1704;
  unsigned __int32 *v1705;
  uint64_t v1706;
  unint64_t v1707;
  uint64_t v1708;
  unint64_t v1709;
  char *v1710;
  unsigned __int32 *v1711;
  unsigned __int32 v1712;
  unsigned __int32 *v1713;
  unsigned __int32 *v1714;
  uint64_t v1715;
  unint64_t v1716;
  uint64_t v1717;
  unint64_t v1718;
  char *v1719;
  char *v1720;
  int v1721;
  unsigned __int32 *v1722;
  unsigned __int32 *v1723;
  uint64_t v1724;
  unint64_t v1725;
  uint64_t v1726;
  unint64_t v1727;
  char *v1728;
  char *v1729;
  int v1730;
  unsigned __int32 *v1731;
  unsigned __int32 *v1732;
  uint64_t v1733;
  unint64_t v1734;
  uint64_t v1735;
  unint64_t v1736;
  char *v1737;
  unsigned __int32 *v1738;
  unsigned __int32 v1739;
  unsigned __int32 *v1740;
  unsigned __int32 *v1741;
  uint64_t v1742;
  unint64_t v1743;
  uint64_t v1744;
  unint64_t v1745;
  char *v1746;
  char *v1747;
  int v1748;
  unsigned __int32 *v1749;
  unsigned __int32 *v1750;
  uint64_t v1751;
  unint64_t v1752;
  uint64_t v1753;
  unint64_t v1754;
  char *v1755;
  char *v1756;
  int v1757;
  unsigned __int32 *v1758;
  unsigned __int32 *v1759;
  uint64_t v1760;
  unint64_t v1761;
  uint64_t v1762;
  unint64_t v1763;
  char *v1764;
  unsigned __int32 *v1765;
  unsigned __int32 v1766;
  unsigned __int32 *v1767;
  unsigned __int32 *v1768;
  uint64_t v1769;
  unint64_t v1770;
  uint64_t v1771;
  unint64_t v1772;
  char *v1773;
  char *v1774;
  int v1775;
  unsigned __int32 *v1776;
  unsigned __int32 *v1777;
  uint64_t v1778;
  unint64_t v1779;
  uint64_t v1780;
  unint64_t v1781;
  char *v1782;
  char *v1783;
  int v1784;
  unsigned __int32 *v1785;
  unsigned __int32 *v1786;
  uint64_t v1787;
  unint64_t v1788;
  uint64_t v1789;
  unint64_t v1790;
  char *v1791;
  unsigned __int32 *v1792;
  unsigned __int32 v1793;
  unsigned __int32 *v1794;
  unsigned __int32 *v1795;
  uint64_t v1796;
  unint64_t v1797;
  uint64_t v1798;
  unint64_t v1799;
  char *v1800;
  char *v1801;
  char *v1802;
  int v1803;
  int v1804;
  char *v1805;
  char *v1806;
  char *v1807;
  char *v1808;
  uint64_t v1809;
  unint64_t v1810;
  uint64_t v1811;
  unint64_t v1812;
  char *v1813;
  char *v1814;
  int v1815;
  int v1816;
  char *v1817;
  char *v1818;
  uint64_t v1819;
  unint64_t v1820;
  uint64_t v1821;
  unint64_t v1822;
  char *v1823;
  char *v1824;
  int v1825;
  int v1826;
  char *v1827;
  char *v1828;
  uint64_t v1829;
  unint64_t v1830;
  uint64_t v1831;
  unint64_t v1832;
  char *v1833;
  char *v1834;
  int v1835;
  char *v1836;
  char *v1837;
  uint64_t v1838;
  unint64_t v1839;
  uint64_t v1840;
  unint64_t v1841;
  char *v1842;
  char *v1843;
  int v1844;
  char *v1845;
  char *v1846;
  uint64_t v1847;
  unint64_t v1848;
  uint64_t v1849;
  unint64_t v1850;
  char *v1851;
  char *v1852;
  int v1853;
  int v1854;
  char *v1855;
  char *v1856;
  uint64_t v1857;
  unint64_t v1858;
  uint64_t v1859;
  unint64_t v1860;
  char *v1861;
  char *v1862;
  char *v1863;
  int v1864;
  unsigned __int32 *v1865;
  char *v1866;
  unsigned __int32 *v1867;
  unsigned __int32 *v1868;
  uint64_t v1869;
  unint64_t v1870;
  uint64_t v1871;
  unint64_t v1872;
  char *v1873;
  char *v1874;
  int v1875;
  unsigned __int32 *v1876;
  unsigned __int32 *v1877;
  uint64_t v1878;
  unint64_t v1879;
  uint64_t v1880;
  unint64_t v1881;
  char *v1882;
  char *v1883;
  int v1884;
  unsigned __int32 *v1885;
  unsigned __int32 *v1886;
  uint64_t v1887;
  unint64_t v1888;
  uint64_t v1889;
  unint64_t v1890;
  char *v1891;
  unsigned __int32 *v1892;
  unsigned __int32 v1893;
  unsigned __int32 *v1894;
  unsigned __int32 *v1895;
  uint64_t v1896;
  unint64_t v1897;
  uint64_t v1898;
  unint64_t v1899;
  char *v1900;
  char *v1901;
  int v1902;
  unsigned __int32 *v1903;
  unsigned __int32 *v1904;
  uint64_t v1905;
  unint64_t v1906;
  uint64_t v1907;
  unint64_t v1908;
  char *v1909;
  char *v1910;
  int v1911;
  unsigned __int32 *v1912;
  unsigned __int32 *v1913;
  uint64_t v1914;
  unint64_t v1915;
  uint64_t v1916;
  unint64_t v1917;
  char *v1918;
  unsigned __int32 *v1919;
  unsigned __int32 v1920;
  unsigned __int32 *v1921;
  unsigned __int32 *v1922;
  uint64_t v1923;
  unint64_t v1924;
  uint64_t v1925;
  unint64_t v1926;
  char *v1927;
  char *v1928;
  int v1929;
  unsigned __int32 *v1930;
  unsigned __int32 *v1931;
  uint64_t v1932;
  unint64_t v1933;
  uint64_t v1934;
  unint64_t v1935;
  char *v1936;
  char *v1937;
  int v1938;
  unsigned __int32 *v1939;
  unsigned __int32 *v1940;
  uint64_t v1941;
  unint64_t v1942;
  uint64_t v1943;
  unint64_t v1944;
  char *v1945;
  unsigned __int32 *v1946;
  unsigned __int32 v1947;
  unsigned __int32 *v1948;
  unsigned __int32 *v1949;
  uint64_t v1950;
  unint64_t v1951;
  uint64_t v1952;
  unint64_t v1953;
  char *v1954;
  char *v1955;
  int v1956;
  unsigned __int32 *v1957;
  unsigned __int32 *v1958;
  uint64_t v1959;
  unint64_t v1960;
  uint64_t v1961;
  unint64_t v1962;
  char *v1963;
  char *v1964;
  int v1965;
  unsigned __int32 *v1966;
  unsigned __int32 *v1967;
  uint64_t v1968;
  unint64_t v1969;
  uint64_t v1970;
  unint64_t v1971;
  char *v1972;
  unsigned __int32 *v1973;
  unsigned __int32 v1974;
  unsigned __int32 v1975;
  unsigned __int32 *v1976;
  unsigned __int32 *v1977;
  uint64_t v1978;
  unint64_t v1979;
  uint64_t v1980;
  unint64_t v1981;
  char *v1982;
  char *v1983;
  unsigned __int32 *v1984;
  unsigned __int32 v1985;
  unsigned __int32 *v1986;
  unsigned __int32 *v1987;
  uint64_t v1988;
  unint64_t v1989;
  uint64_t v1990;
  unint64_t v1991;
  char *v1992;
  char *v1993;
  int v1994;
  unsigned __int32 *v1995;
  unsigned __int32 *v1996;
  uint64_t v1997;
  unint64_t v1998;
  uint64_t v1999;
  unint64_t v2000;
  char *v2001;
  char *v2002;
  int v2003;
  unsigned __int32 *v2004;
  unsigned __int32 *v2005;
  uint64_t v2006;
  unint64_t v2007;
  uint64_t v2008;
  unint64_t v2009;
  char *v2010;
  char *v2011;
  unsigned __int32 *v2012;
  unsigned __int32 v2013;
  unsigned __int32 *v2014;
  unsigned __int32 *v2015;
  uint64_t v2016;
  unint64_t v2017;
  uint64_t v2018;
  unint64_t v2019;
  char *v2020;
  char *v2021;
  int v2022;
  unsigned __int32 *v2023;
  unsigned __int32 *v2024;
  uint64_t v2025;
  unint64_t v2026;
  uint64_t v2027;
  unint64_t v2028;
  char *v2029;
  char *v2030;
  int v2031;
  unsigned __int32 *v2032;
  unsigned __int32 *v2033;
  uint64_t v2034;
  unint64_t v2035;
  uint64_t v2036;
  unint64_t v2037;
  char *v2038;
  char *v2039;
  int v2040;
  unsigned __int32 *v2041;
  unsigned __int32 *v2042;
  uint64_t v2043;
  unint64_t v2044;
  uint64_t v2045;
  unint64_t v2046;
  char *v2047;
  char *v2048;
  int v2049;
  unsigned __int32 *v2050;
  unsigned __int32 *v2051;
  uint64_t v2052;
  unint64_t v2053;
  uint64_t v2054;
  unint64_t v2055;
  char *v2056;
  char *v2057;
  int v2058;
  unsigned __int32 *v2059;
  unsigned __int32 *v2060;
  uint64_t v2061;
  unint64_t v2062;
  uint64_t v2063;
  unint64_t v2064;
  char *v2065;
  char *v2066;
  int v2067;
  unsigned __int32 *v2068;
  unsigned __int32 *v2069;
  uint64_t v2070;
  unint64_t v2071;
  uint64_t v2072;
  unint64_t v2073;
  char *v2074;
  char *v2075;
  int v2076;
  unsigned __int32 *v2077;
  unsigned __int32 *v2078;
  uint64_t v2079;
  unint64_t v2080;
  uint64_t v2081;
  unint64_t v2082;
  char *v2083;
  char *v2084;
  char *v2085;
  int v2086;
  int v2087;
  char *v2088;
  char *v2089;
  char *v2090;
  char *v2091;
  uint64_t v2092;
  unint64_t v2093;
  uint64_t v2094;
  unint64_t v2095;
  char *v2096;
  char *v2097;
  int v2098;
  int v2099;
  char *v2100;
  char *v2101;
  uint64_t v2102;
  unint64_t v2103;
  uint64_t v2104;
  unint64_t v2105;
  char *v2106;
  char *v2107;
  int v2108;
  int v2109;
  char *v2110;
  char *v2111;
  uint64_t v2112;
  unint64_t v2113;
  uint64_t v2114;
  unint64_t v2115;
  char *v2116;
  char *v2117;
  int v2118;
  char *v2119;
  char *v2120;
  uint64_t v2121;
  unint64_t v2122;
  uint64_t v2123;
  unint64_t v2124;
  char *v2125;
  char *v2126;
  int v2127;
  char *v2128;
  char *v2129;
  uint64_t v2130;
  unint64_t v2131;
  uint64_t v2132;
  unint64_t v2133;
  char *v2134;
  char *v2135;
  int v2136;
  int v2137;
  char *v2138;
  char *v2139;
  uint64_t v2140;
  unint64_t v2141;
  uint64_t v2142;
  unint64_t v2143;
  char *v2144;
  char *v2145;
  char *v2146;
  int v2147;
  char **v2148;
  __n128 v2149;

  v2149 = a4;
  v9 = (unsigned __int32 **)(a2 + 8);
  v8 = *(unsigned __int32 **)(a2 + 8);
  v10 = *(unsigned __int32 **)a2;
  v11 = ((uint64_t)v8 - *(_QWORD *)a2) >> 2;
  v13 = (char **)(a2 + 16);
  v12 = *(char **)(a2 + 16);
  if (!a1)
  {
    if (v8 >= (unsigned __int32 *)v12)
    {
      v21 = v11 + 1;
      if ((v11 + 1) >> 62)
        goto LABEL_3660;
      v22 = v12 - (char *)v10;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        v24 = (char *)sub_1DCAE4D04((uint64_t)v13, v23);
        a4.n128_u64[0] = v2149.n128_u64[0];
        v25 = v24;
        v10 = *(unsigned __int32 **)a2;
        v8 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v25 = 0;
      }
      v36 = &v25[4 * v11];
      v12 = &v25[4 * v23];
      *(_DWORD *)v36 = a4.n128_u32[0];
      v15 = (unsigned __int32 *)(v36 + 4);
      while (v8 != v10)
      {
        v37 = *--v8;
        *((_DWORD *)v36 - 1) = v37;
        v36 -= 4;
      }
      *(_QWORD *)a2 = v36;
      *(_QWORD *)(a2 + 8) = v15;
      *(_QWORD *)(a2 + 16) = v12;
      if (v10)
      {
        operator delete(v10);
        a4.n128_u32[1] = v2149.n128_u32[1];
        v12 = *v13;
      }
    }
    else
    {
      *v8 = a4.n128_u32[0];
      v15 = v8 + 1;
    }
    *v9 = v15;
    v38 = a4.n128_u32[1];
    if (v15 >= (unsigned __int32 *)v12)
    {
      v40 = *(unsigned __int32 **)a2;
      v41 = ((uint64_t)v15 - *(_QWORD *)a2) >> 2;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62)
        goto LABEL_3660;
      v43 = v12 - (char *)v40;
      if (v43 >> 1 > v42)
        v42 = v43 >> 1;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
        v44 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        v45 = (char *)sub_1DCAE4D04((uint64_t)v13, v44);
        v40 = *(unsigned __int32 **)a2;
        v15 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v45 = 0;
      }
      v56 = (unsigned __int32 *)&v45[4 * v41];
      v12 = &v45[4 * v44];
      *v56 = v38;
      v39 = v56 + 1;
      while (v15 != v40)
      {
        v57 = *--v15;
        *--v56 = v57;
      }
      *(_QWORD *)a2 = v56;
      *(_QWORD *)(a2 + 8) = v39;
      *(_QWORD *)(a2 + 16) = v12;
      if (v40)
      {
        operator delete(v40);
        v12 = *v13;
      }
    }
    else
    {
      *v15 = a4.n128_u32[1];
      v39 = v15 + 1;
    }
    *v9 = v39;
    if (v39 >= (unsigned __int32 *)v12)
    {
      v59 = *(unsigned __int32 **)a2;
      v60 = ((uint64_t)v39 - *(_QWORD *)a2) >> 2;
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 62)
        goto LABEL_3660;
      v62 = v12 - (char *)v59;
      if (v62 >> 1 > v61)
        v61 = v62 >> 1;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
        v63 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v63 = v61;
      if (v63)
      {
        v64 = (char *)sub_1DCAE4D04((uint64_t)v13, v63);
        v59 = *(unsigned __int32 **)a2;
        v39 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v64 = 0;
      }
      v74 = &v64[4 * v60];
      v12 = &v64[4 * v63];
      *(_DWORD *)v74 = v2149.n128_u32[2];
      v58 = (unsigned __int32 *)(v74 + 4);
      while (v39 != v59)
      {
        v75 = *--v39;
        *((_DWORD *)v74 - 1) = v75;
        v74 -= 4;
      }
      *(_QWORD *)a2 = v74;
      *(_QWORD *)(a2 + 8) = v58;
      *(_QWORD *)(a2 + 16) = v12;
      if (v59)
      {
        operator delete(v59);
        v12 = *v13;
      }
    }
    else
    {
      *v39 = v2149.n128_u32[2];
      v58 = v39 + 1;
    }
    *v9 = v58;
    if (v58 >= (unsigned __int32 *)v12)
    {
      v77 = *(unsigned __int32 **)a2;
      v78 = ((uint64_t)v58 - *(_QWORD *)a2) >> 2;
      v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 62)
        goto LABEL_3660;
      v80 = v12 - (char *)v77;
      if (v80 >> 1 > v79)
        v79 = v80 >> 1;
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
        v81 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v81 = v79;
      if (v81)
      {
        v82 = (char *)sub_1DCAE4D04((uint64_t)v13, v81);
        v77 = *(unsigned __int32 **)a2;
        v58 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v82 = 0;
      }
      v92 = &v82[4 * v78];
      v12 = &v82[4 * v81];
      *(_DWORD *)v92 = a5.n128_u32[0];
      v76 = (unsigned __int32 *)(v92 + 4);
      while (v58 != v77)
      {
        v93 = *--v58;
        *((_DWORD *)v92 - 1) = v93;
        v92 -= 4;
      }
      *(_QWORD *)a2 = v92;
      *(_QWORD *)(a2 + 8) = v76;
      *(_QWORD *)(a2 + 16) = v12;
      if (v77)
      {
        operator delete(v77);
        v12 = *v13;
      }
    }
    else
    {
      *v58 = a5.n128_u32[0];
      v76 = v58 + 1;
    }
    *v9 = v76;
    if (v76 >= (unsigned __int32 *)v12)
    {
      v95 = *(unsigned __int32 **)a2;
      v96 = ((uint64_t)v76 - *(_QWORD *)a2) >> 2;
      v97 = v96 + 1;
      if ((unint64_t)(v96 + 1) >> 62)
        goto LABEL_3660;
      v98 = v12 - (char *)v95;
      if (v98 >> 1 > v97)
        v97 = v98 >> 1;
      if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL)
        v99 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v99 = v97;
      if (v99)
      {
        v100 = (char *)sub_1DCAE4D04((uint64_t)v13, v99);
        v95 = *(unsigned __int32 **)a2;
        v76 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v100 = 0;
      }
      v110 = (unsigned __int32 *)&v100[4 * v96];
      v12 = &v100[4 * v99];
      *v110 = v38;
      v94 = v110 + 1;
      while (v76 != v95)
      {
        v111 = *--v76;
        *--v110 = v111;
      }
      *(_QWORD *)a2 = v110;
      *(_QWORD *)(a2 + 8) = v94;
      *(_QWORD *)(a2 + 16) = v12;
      if (v95)
      {
        operator delete(v95);
        v12 = *v13;
      }
    }
    else
    {
      *v76 = v38;
      v94 = v76 + 1;
    }
    *v9 = v94;
    if (v94 >= (unsigned __int32 *)v12)
    {
      v113 = *(unsigned __int32 **)a2;
      v114 = ((uint64_t)v94 - *(_QWORD *)a2) >> 2;
      v115 = v114 + 1;
      if ((unint64_t)(v114 + 1) >> 62)
        goto LABEL_3660;
      v116 = v12 - (char *)v113;
      if (v116 >> 1 > v115)
        v115 = v116 >> 1;
      if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL)
        v117 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v117 = v115;
      if (v117)
      {
        v118 = (char *)sub_1DCAE4D04((uint64_t)v13, v117);
        v113 = *(unsigned __int32 **)a2;
        v94 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v118 = 0;
      }
      v128 = &v118[4 * v114];
      v12 = &v118[4 * v117];
      *(_DWORD *)v128 = v2149.n128_u32[2];
      v112 = (unsigned __int32 *)(v128 + 4);
      while (v94 != v113)
      {
        v129 = *--v94;
        *((_DWORD *)v128 - 1) = v129;
        v128 -= 4;
      }
      *(_QWORD *)a2 = v128;
      *(_QWORD *)(a2 + 8) = v112;
      *(_QWORD *)(a2 + 16) = v12;
      if (v113)
      {
        operator delete(v113);
        v12 = *v13;
      }
    }
    else
    {
      *v94 = v2149.n128_u32[2];
      v112 = v94 + 1;
    }
    *v9 = v112;
    if (v112 >= (unsigned __int32 *)v12)
    {
      v131 = *(unsigned __int32 **)a2;
      v132 = ((uint64_t)v112 - *(_QWORD *)a2) >> 2;
      v133 = v132 + 1;
      if ((unint64_t)(v132 + 1) >> 62)
        goto LABEL_3660;
      v134 = v12 - (char *)v131;
      if (v134 >> 1 > v133)
        v133 = v134 >> 1;
      if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
        v135 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v135 = v133;
      if (v135)
      {
        v136 = (char *)sub_1DCAE4D04((uint64_t)v13, v135);
        v131 = *(unsigned __int32 **)a2;
        v112 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v136 = 0;
      }
      v146 = &v136[4 * v132];
      v12 = &v136[4 * v135];
      *(_DWORD *)v146 = v2149.n128_u32[0];
      v130 = (unsigned __int32 *)(v146 + 4);
      while (v112 != v131)
      {
        v147 = *--v112;
        *((_DWORD *)v146 - 1) = v147;
        v146 -= 4;
      }
      *(_QWORD *)a2 = v146;
      *(_QWORD *)(a2 + 8) = v130;
      *(_QWORD *)(a2 + 16) = v12;
      if (v131)
      {
        operator delete(v131);
        v12 = *v13;
      }
    }
    else
    {
      *v112 = v2149.n128_u32[0];
      v130 = v112 + 1;
    }
    *v9 = v130;
    if (v130 >= (unsigned __int32 *)v12)
    {
      v149 = *(unsigned __int32 **)a2;
      v150 = ((uint64_t)v130 - *(_QWORD *)a2) >> 2;
      v151 = v150 + 1;
      if ((unint64_t)(v150 + 1) >> 62)
        goto LABEL_3660;
      v152 = v12 - (char *)v149;
      if (v152 >> 1 > v151)
        v151 = v152 >> 1;
      if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL)
        v153 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v153 = v151;
      if (v153)
      {
        v154 = (char *)sub_1DCAE4D04((uint64_t)v13, v153);
        v149 = *(unsigned __int32 **)a2;
        v130 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v154 = 0;
      }
      v164 = &v154[4 * v150];
      v12 = &v154[4 * v153];
      *(_DWORD *)v164 = a5.n128_u32[1];
      v148 = (unsigned __int32 *)(v164 + 4);
      while (v130 != v149)
      {
        v165 = *--v130;
        *((_DWORD *)v164 - 1) = v165;
        v164 -= 4;
      }
      *(_QWORD *)a2 = v164;
      *(_QWORD *)(a2 + 8) = v148;
      *(_QWORD *)(a2 + 16) = v12;
      if (v149)
      {
        operator delete(v149);
        v12 = *v13;
      }
    }
    else
    {
      *v130 = a5.n128_u32[1];
      v148 = v130 + 1;
    }
    *v9 = v148;
    if (v148 >= (unsigned __int32 *)v12)
    {
      v167 = *(unsigned __int32 **)a2;
      v168 = ((uint64_t)v148 - *(_QWORD *)a2) >> 2;
      v169 = v168 + 1;
      if ((unint64_t)(v168 + 1) >> 62)
        goto LABEL_3660;
      v170 = v12 - (char *)v167;
      if (v170 >> 1 > v169)
        v169 = v170 >> 1;
      if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFFCLL)
        v171 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v171 = v169;
      if (v171)
      {
        v172 = (char *)sub_1DCAE4D04((uint64_t)v13, v171);
        v167 = *(unsigned __int32 **)a2;
        v148 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v172 = 0;
      }
      v182 = &v172[4 * v168];
      v12 = &v172[4 * v171];
      *(_DWORD *)v182 = v2149.n128_u32[2];
      v166 = (unsigned __int32 *)(v182 + 4);
      while (v148 != v167)
      {
        v183 = *--v148;
        *((_DWORD *)v182 - 1) = v183;
        v182 -= 4;
      }
      *(_QWORD *)a2 = v182;
      *(_QWORD *)(a2 + 8) = v166;
      *(_QWORD *)(a2 + 16) = v12;
      if (v167)
      {
        operator delete(v167);
        v12 = *v13;
      }
    }
    else
    {
      *v148 = v2149.n128_u32[2];
      v166 = v148 + 1;
    }
    *v9 = v166;
    if (v166 >= (unsigned __int32 *)v12)
    {
      v185 = *(unsigned __int32 **)a2;
      v186 = ((uint64_t)v166 - *(_QWORD *)a2) >> 2;
      v187 = v186 + 1;
      if ((unint64_t)(v186 + 1) >> 62)
        goto LABEL_3660;
      v188 = v12 - (char *)v185;
      if (v188 >> 1 > v187)
        v187 = v188 >> 1;
      if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFFCLL)
        v189 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v189 = v187;
      if (v189)
      {
        v190 = (char *)sub_1DCAE4D04((uint64_t)v13, v189);
        v185 = *(unsigned __int32 **)a2;
        v166 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v190 = 0;
      }
      v200 = &v190[4 * v186];
      v12 = &v190[4 * v189];
      *(_DWORD *)v200 = a5.n128_u32[0];
      v184 = (unsigned __int32 *)(v200 + 4);
      while (v166 != v185)
      {
        v201 = *--v166;
        *((_DWORD *)v200 - 1) = v201;
        v200 -= 4;
      }
      *(_QWORD *)a2 = v200;
      *(_QWORD *)(a2 + 8) = v184;
      *(_QWORD *)(a2 + 16) = v12;
      if (v185)
      {
        operator delete(v185);
        v12 = *v13;
      }
    }
    else
    {
      *v166 = a5.n128_u32[0];
      v184 = v166 + 1;
    }
    *v9 = v184;
    if (v184 >= (unsigned __int32 *)v12)
    {
      v203 = *(unsigned __int32 **)a2;
      v204 = ((uint64_t)v184 - *(_QWORD *)a2) >> 2;
      v205 = v204 + 1;
      if ((unint64_t)(v204 + 1) >> 62)
        goto LABEL_3660;
      v206 = v12 - (char *)v203;
      if (v206 >> 1 > v205)
        v205 = v206 >> 1;
      if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFFCLL)
        v207 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v207 = v205;
      if (v207)
      {
        v208 = (char *)sub_1DCAE4D04((uint64_t)v13, v207);
        v203 = *(unsigned __int32 **)a2;
        v184 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v208 = 0;
      }
      v218 = &v208[4 * v204];
      v12 = &v208[4 * v207];
      *(_DWORD *)v218 = a5.n128_u32[1];
      v202 = (unsigned __int32 *)(v218 + 4);
      while (v184 != v203)
      {
        v219 = *--v184;
        *((_DWORD *)v218 - 1) = v219;
        v218 -= 4;
      }
      *(_QWORD *)a2 = v218;
      *(_QWORD *)(a2 + 8) = v202;
      *(_QWORD *)(a2 + 16) = v12;
      if (v203)
      {
        operator delete(v203);
        v12 = *v13;
      }
    }
    else
    {
      *v184 = a5.n128_u32[1];
      v202 = v184 + 1;
    }
    *v9 = v202;
    if (v202 >= (unsigned __int32 *)v12)
    {
      v221 = *(unsigned __int32 **)a2;
      v222 = ((uint64_t)v202 - *(_QWORD *)a2) >> 2;
      v223 = v222 + 1;
      if ((unint64_t)(v222 + 1) >> 62)
        goto LABEL_3660;
      v224 = v12 - (char *)v221;
      if (v224 >> 1 > v223)
        v223 = v224 >> 1;
      if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFFCLL)
        v225 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v225 = v223;
      if (v225)
      {
        v226 = (char *)sub_1DCAE4D04((uint64_t)v13, v225);
        v221 = *(unsigned __int32 **)a2;
        v202 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v226 = 0;
      }
      v236 = &v226[4 * v222];
      v12 = &v226[4 * v225];
      *(_DWORD *)v236 = v2149.n128_u32[2];
      v220 = (unsigned __int32 *)(v236 + 4);
      while (v202 != v221)
      {
        v237 = *--v202;
        *((_DWORD *)v236 - 1) = v237;
        v236 -= 4;
      }
      *(_QWORD *)a2 = v236;
      *(_QWORD *)(a2 + 8) = v220;
      *(_QWORD *)(a2 + 16) = v12;
      if (v221)
      {
        operator delete(v221);
        v12 = *v13;
      }
    }
    else
    {
      *v202 = v2149.n128_u32[2];
      v220 = v202 + 1;
    }
    *v9 = v220;
    if (v220 >= (unsigned __int32 *)v12)
    {
      v239 = *(unsigned __int32 **)a2;
      v240 = ((uint64_t)v220 - *(_QWORD *)a2) >> 2;
      v241 = v240 + 1;
      if ((unint64_t)(v240 + 1) >> 62)
        goto LABEL_3660;
      v242 = v12 - (char *)v239;
      if (v242 >> 1 > v241)
        v241 = v242 >> 1;
      if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFFCLL)
        v243 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v243 = v241;
      if (v243)
      {
        v244 = (char *)sub_1DCAE4D04((uint64_t)v13, v243);
        v239 = *(unsigned __int32 **)a2;
        v220 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v244 = 0;
      }
      v254 = &v244[4 * v240];
      v12 = &v244[4 * v243];
      *(_DWORD *)v254 = v2149.n128_u32[0];
      v238 = (unsigned __int32 *)(v254 + 4);
      while (v220 != v239)
      {
        v255 = *--v220;
        *((_DWORD *)v254 - 1) = v255;
        v254 -= 4;
      }
      *(_QWORD *)a2 = v254;
      *(_QWORD *)(a2 + 8) = v238;
      *(_QWORD *)(a2 + 16) = v12;
      if (v239)
      {
        operator delete(v239);
        v12 = *v13;
      }
    }
    else
    {
      *v220 = v2149.n128_u32[0];
      v238 = v220 + 1;
    }
    *v9 = v238;
    if (v238 >= (unsigned __int32 *)v12)
    {
      v257 = *(unsigned __int32 **)a2;
      v258 = ((uint64_t)v238 - *(_QWORD *)a2) >> 2;
      v259 = v258 + 1;
      if ((unint64_t)(v258 + 1) >> 62)
        goto LABEL_3660;
      v260 = v12 - (char *)v257;
      if (v260 >> 1 > v259)
        v259 = v260 >> 1;
      if ((unint64_t)v260 >= 0x7FFFFFFFFFFFFFFCLL)
        v261 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v261 = v259;
      if (v261)
      {
        v262 = (char *)sub_1DCAE4D04((uint64_t)v13, v261);
        v257 = *(unsigned __int32 **)a2;
        v238 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v262 = 0;
      }
      v272 = (unsigned __int32 *)&v262[4 * v258];
      v12 = &v262[4 * v261];
      *v272 = v38;
      v256 = v272 + 1;
      while (v238 != v257)
      {
        v273 = *--v238;
        *--v272 = v273;
      }
      *(_QWORD *)a2 = v272;
      *(_QWORD *)(a2 + 8) = v256;
      *(_QWORD *)(a2 + 16) = v12;
      if (v257)
      {
        operator delete(v257);
        v12 = *v13;
      }
    }
    else
    {
      *v238 = v38;
      v256 = v238 + 1;
    }
    *v9 = v256;
    if (v256 >= (unsigned __int32 *)v12)
    {
      v275 = *(unsigned __int32 **)a2;
      v276 = ((uint64_t)v256 - *(_QWORD *)a2) >> 2;
      v277 = v276 + 1;
      if ((unint64_t)(v276 + 1) >> 62)
        goto LABEL_3660;
      v278 = v12 - (char *)v275;
      if (v278 >> 1 > v277)
        v277 = v278 >> 1;
      if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFFCLL)
        v279 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v279 = v277;
      if (v279)
      {
        v280 = (char *)sub_1DCAE4D04((uint64_t)v13, v279);
        v275 = *(unsigned __int32 **)a2;
        v256 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v280 = 0;
      }
      v290 = &v280[4 * v276];
      v12 = &v280[4 * v279];
      *(_DWORD *)v290 = a5.n128_u32[2];
      v274 = (unsigned __int32 *)(v290 + 4);
      while (v256 != v275)
      {
        v291 = *--v256;
        *((_DWORD *)v290 - 1) = v291;
        v290 -= 4;
      }
      *(_QWORD *)a2 = v290;
      *(_QWORD *)(a2 + 8) = v274;
      *(_QWORD *)(a2 + 16) = v12;
      if (v275)
      {
        operator delete(v275);
        v12 = *v13;
      }
    }
    else
    {
      *v256 = a5.n128_u32[2];
      v274 = v256 + 1;
    }
    *v9 = v274;
    if (v274 >= (unsigned __int32 *)v12)
    {
      v293 = *(unsigned __int32 **)a2;
      v294 = ((uint64_t)v274 - *(_QWORD *)a2) >> 2;
      v295 = v294 + 1;
      if ((unint64_t)(v294 + 1) >> 62)
        goto LABEL_3660;
      v296 = v12 - (char *)v293;
      if (v296 >> 1 > v295)
        v295 = v296 >> 1;
      if ((unint64_t)v296 >= 0x7FFFFFFFFFFFFFFCLL)
        v297 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v297 = v295;
      if (v297)
      {
        v298 = (char *)sub_1DCAE4D04((uint64_t)v13, v297);
        v293 = *(unsigned __int32 **)a2;
        v274 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v298 = 0;
      }
      v308 = &v298[4 * v294];
      v12 = &v298[4 * v297];
      *(_DWORD *)v308 = a5.n128_u32[0];
      v292 = (unsigned __int32 *)(v308 + 4);
      while (v274 != v293)
      {
        v309 = *--v274;
        *((_DWORD *)v308 - 1) = v309;
        v308 -= 4;
      }
      *(_QWORD *)a2 = v308;
      *(_QWORD *)(a2 + 8) = v292;
      *(_QWORD *)(a2 + 16) = v12;
      if (v293)
      {
        operator delete(v293);
        v12 = *v13;
      }
    }
    else
    {
      *v274 = a5.n128_u32[0];
      v292 = v274 + 1;
    }
    *v9 = v292;
    if (v292 >= (unsigned __int32 *)v12)
    {
      v311 = *(unsigned __int32 **)a2;
      v312 = ((uint64_t)v292 - *(_QWORD *)a2) >> 2;
      v313 = v312 + 1;
      if ((unint64_t)(v312 + 1) >> 62)
        goto LABEL_3660;
      v314 = v12 - (char *)v311;
      if (v314 >> 1 > v313)
        v313 = v314 >> 1;
      if ((unint64_t)v314 >= 0x7FFFFFFFFFFFFFFCLL)
        v315 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v315 = v313;
      if (v315)
      {
        v316 = (char *)sub_1DCAE4D04((uint64_t)v13, v315);
        v311 = *(unsigned __int32 **)a2;
        v292 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v316 = 0;
      }
      v326 = (unsigned __int32 *)&v316[4 * v312];
      v12 = &v316[4 * v315];
      *v326 = v38;
      v310 = v326 + 1;
      while (v292 != v311)
      {
        v327 = *--v292;
        *--v326 = v327;
      }
      *(_QWORD *)a2 = v326;
      *(_QWORD *)(a2 + 8) = v310;
      *(_QWORD *)(a2 + 16) = v12;
      if (v311)
      {
        operator delete(v311);
        v12 = *v13;
      }
    }
    else
    {
      *v292 = v38;
      v310 = v292 + 1;
    }
    *v9 = v310;
    v328 = v2149.n128_u32[0];
    if (v310 >= (unsigned __int32 *)v12)
    {
      v330 = *(unsigned __int32 **)a2;
      v331 = ((uint64_t)v310 - *(_QWORD *)a2) >> 2;
      v332 = v331 + 1;
      if ((unint64_t)(v331 + 1) >> 62)
        goto LABEL_3660;
      v333 = v12 - (char *)v330;
      if (v333 >> 1 > v332)
        v332 = v333 >> 1;
      if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFFCLL)
        v334 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v334 = v332;
      if (v334)
      {
        v335 = (char *)sub_1DCAE4D04((uint64_t)v13, v334);
        v330 = *(unsigned __int32 **)a2;
        v310 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v335 = 0;
      }
      v345 = &v335[4 * v331];
      v12 = &v335[4 * v334];
      *(_DWORD *)v345 = a5.n128_u32[2];
      v329 = (unsigned __int32 *)(v345 + 4);
      while (v310 != v330)
      {
        v346 = *--v310;
        *((_DWORD *)v345 - 1) = v346;
        v345 -= 4;
      }
      *(_QWORD *)a2 = v345;
      *(_QWORD *)(a2 + 8) = v329;
      *(_QWORD *)(a2 + 16) = v12;
      if (v330)
      {
        operator delete(v330);
        v12 = *v13;
      }
      v328 = v2149.n128_u32[0];
    }
    else
    {
      *v310 = a5.n128_u32[2];
      v329 = v310 + 1;
    }
    *v9 = v329;
    if (v329 >= (unsigned __int32 *)v12)
    {
      v348 = *(unsigned __int32 **)a2;
      v349 = ((uint64_t)v329 - *(_QWORD *)a2) >> 2;
      v350 = v349 + 1;
      if ((unint64_t)(v349 + 1) >> 62)
        goto LABEL_3660;
      v351 = v12 - (char *)v348;
      if (v351 >> 1 > v350)
        v350 = v351 >> 1;
      if ((unint64_t)v351 >= 0x7FFFFFFFFFFFFFFCLL)
        v352 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v352 = v350;
      if (v352)
      {
        v353 = (char *)sub_1DCAE4D04((uint64_t)v13, v352);
        v328 = v2149.n128_u32[0];
        v354 = v353;
        v348 = *(unsigned __int32 **)a2;
        v329 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v354 = 0;
      }
      v364 = (unsigned __int32 *)&v354[4 * v349];
      v12 = &v354[4 * v352];
      *v364 = v328;
      v347 = v364 + 1;
      while (v329 != v348)
      {
        v365 = *--v329;
        *--v364 = v365;
      }
      *(_QWORD *)a2 = v364;
      *(_QWORD *)(a2 + 8) = v347;
      *(_QWORD *)(a2 + 16) = v12;
      if (v348)
      {
        operator delete(v348);
        v12 = *v13;
      }
    }
    else
    {
      *v329 = v328;
      v347 = v329 + 1;
    }
    *v9 = v347;
    if (v347 >= (unsigned __int32 *)v12)
    {
      v367 = *(unsigned __int32 **)a2;
      v368 = ((uint64_t)v347 - *(_QWORD *)a2) >> 2;
      v369 = v368 + 1;
      if ((unint64_t)(v368 + 1) >> 62)
        goto LABEL_3660;
      v370 = v12 - (char *)v367;
      if (v370 >> 1 > v369)
        v369 = v370 >> 1;
      if ((unint64_t)v370 >= 0x7FFFFFFFFFFFFFFCLL)
        v371 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v371 = v369;
      if (v371)
      {
        v372 = (char *)sub_1DCAE4D04((uint64_t)v13, v371);
        v367 = *(unsigned __int32 **)a2;
        v347 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v372 = 0;
      }
      v382 = &v372[4 * v368];
      v12 = &v372[4 * v371];
      *(_DWORD *)v382 = a5.n128_u32[1];
      v366 = (unsigned __int32 *)(v382 + 4);
      while (v347 != v367)
      {
        v383 = *--v347;
        *((_DWORD *)v382 - 1) = v383;
        v382 -= 4;
      }
      *(_QWORD *)a2 = v382;
      *(_QWORD *)(a2 + 8) = v366;
      *(_QWORD *)(a2 + 16) = v12;
      if (v367)
      {
        operator delete(v367);
        v12 = *v13;
      }
    }
    else
    {
      *v347 = a5.n128_u32[1];
      v366 = v347 + 1;
    }
    *v9 = v366;
    if (v366 >= (unsigned __int32 *)v12)
    {
      v385 = *(unsigned __int32 **)a2;
      v386 = ((uint64_t)v366 - *(_QWORD *)a2) >> 2;
      v387 = v386 + 1;
      if ((unint64_t)(v386 + 1) >> 62)
        goto LABEL_3660;
      v388 = v12 - (char *)v385;
      if (v388 >> 1 > v387)
        v387 = v388 >> 1;
      if ((unint64_t)v388 >= 0x7FFFFFFFFFFFFFFCLL)
        v389 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v389 = v387;
      if (v389)
      {
        v390 = (char *)sub_1DCAE4D04((uint64_t)v13, v389);
        v385 = *(unsigned __int32 **)a2;
        v366 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v390 = 0;
      }
      v400 = &v390[4 * v386];
      v12 = &v390[4 * v389];
      *(_DWORD *)v400 = a5.n128_u32[2];
      v384 = (unsigned __int32 *)(v400 + 4);
      while (v366 != v385)
      {
        v401 = *--v366;
        *((_DWORD *)v400 - 1) = v401;
        v400 -= 4;
      }
      *(_QWORD *)a2 = v400;
      *(_QWORD *)(a2 + 8) = v384;
      *(_QWORD *)(a2 + 16) = v12;
      if (v385)
      {
        operator delete(v385);
        v12 = *v13;
      }
    }
    else
    {
      *v366 = a5.n128_u32[2];
      v384 = v366 + 1;
    }
    *v9 = v384;
    if (v384 >= (unsigned __int32 *)v12)
    {
      v403 = *(unsigned __int32 **)a2;
      v404 = ((uint64_t)v384 - *(_QWORD *)a2) >> 2;
      v405 = v404 + 1;
      if ((unint64_t)(v404 + 1) >> 62)
        goto LABEL_3660;
      v406 = v12 - (char *)v403;
      if (v406 >> 1 > v405)
        v405 = v406 >> 1;
      if ((unint64_t)v406 >= 0x7FFFFFFFFFFFFFFCLL)
        v407 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v407 = v405;
      if (v407)
      {
        v408 = (char *)sub_1DCAE4D04((uint64_t)v13, v407);
        v403 = *(unsigned __int32 **)a2;
        v384 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v408 = 0;
      }
      v418 = &v408[4 * v404];
      v12 = &v408[4 * v407];
      *(_DWORD *)v418 = a5.n128_u32[0];
      v402 = (unsigned __int32 *)(v418 + 4);
      while (v384 != v403)
      {
        v419 = *--v384;
        *((_DWORD *)v418 - 1) = v419;
        v418 -= 4;
      }
      *(_QWORD *)a2 = v418;
      *(_QWORD *)(a2 + 8) = v402;
      *(_QWORD *)(a2 + 16) = v12;
      if (v403)
      {
        operator delete(v403);
        v12 = *v13;
      }
    }
    else
    {
      *v384 = a5.n128_u32[0];
      v402 = v384 + 1;
    }
    *v9 = v402;
    if (v402 >= (unsigned __int32 *)v12)
    {
      v421 = *(unsigned __int32 **)a2;
      v422 = ((uint64_t)v402 - *(_QWORD *)a2) >> 2;
      v423 = v422 + 1;
      if ((unint64_t)(v422 + 1) >> 62)
        goto LABEL_3660;
      v424 = v12 - (char *)v421;
      if (v424 >> 1 > v423)
        v423 = v424 >> 1;
      if ((unint64_t)v424 >= 0x7FFFFFFFFFFFFFFCLL)
        v425 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v425 = v423;
      if (v425)
      {
        v426 = (char *)sub_1DCAE4D04((uint64_t)v13, v425);
        v421 = *(unsigned __int32 **)a2;
        v402 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v426 = 0;
      }
      v436 = &v426[4 * v422];
      v12 = &v426[4 * v425];
      *(_DWORD *)v436 = a5.n128_u32[1];
      v420 = (unsigned __int32 *)(v436 + 4);
      while (v402 != v421)
      {
        v437 = *--v402;
        *((_DWORD *)v436 - 1) = v437;
        v436 -= 4;
      }
      *(_QWORD *)a2 = v436;
      *(_QWORD *)(a2 + 8) = v420;
      *(_QWORD *)(a2 + 16) = v12;
      if (v421)
      {
        operator delete(v421);
        v12 = *v13;
      }
    }
    else
    {
      *v402 = a5.n128_u32[1];
      v420 = v402 + 1;
    }
    *v9 = v420;
    if (v420 >= (unsigned __int32 *)v12)
    {
      v439 = *(unsigned __int32 **)a2;
      v440 = ((uint64_t)v420 - *(_QWORD *)a2) >> 2;
      v441 = v440 + 1;
      if ((unint64_t)(v440 + 1) >> 62)
        goto LABEL_3660;
      v442 = v12 - (char *)v439;
      if (v442 >> 1 > v441)
        v441 = v442 >> 1;
      if ((unint64_t)v442 >= 0x7FFFFFFFFFFFFFFCLL)
        v443 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v443 = v441;
      if (v443)
      {
        v444 = (char *)sub_1DCAE4D04((uint64_t)v13, v443);
        v439 = *(unsigned __int32 **)a2;
        v420 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v444 = 0;
      }
      v459 = &v444[4 * v440];
      v460 = &v444[4 * v443];
      *(_DWORD *)v459 = a5.n128_u32[2];
      v438 = (unsigned __int32 *)(v459 + 4);
      while (v420 != v439)
      {
        v461 = *--v420;
        *((_DWORD *)v459 - 1) = v461;
        v459 -= 4;
      }
      *(_QWORD *)a2 = v459;
      *(_QWORD *)(a2 + 8) = v438;
      *(_QWORD *)(a2 + 16) = v460;
      if (v439)
        operator delete(v439);
    }
    else
    {
      *v420 = a5.n128_u32[2];
      v438 = v420 + 1;
    }
    v462 = v11 / 3;
    *v9 = v438;
    v464 = a3 + 2;
    v463 = a3[2];
    v465 = a3[1];
    if (v465 >= v463)
    {
      v467 = *a3;
      v468 = (v465 - *a3) >> 2;
      v469 = v468 + 1;
      if ((unint64_t)(v468 + 1) >> 62)
        goto LABEL_3661;
      v470 = v463 - v467;
      if (v470 >> 1 > v469)
        v469 = v470 >> 1;
      if ((unint64_t)v470 >= 0x7FFFFFFFFFFFFFFCLL)
        v471 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v471 = v469;
      if (v471)
      {
        v472 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v471);
        v467 = *a3;
        v465 = a3[1];
      }
      else
      {
        v472 = 0;
      }
      v483 = &v472[4 * v468];
      v463 = &v472[4 * v471];
      *(_DWORD *)v483 = v462;
      v466 = v483 + 4;
      while (v465 != v467)
      {
        v484 = *((_DWORD *)v465 - 1);
        v465 -= 4;
        *((_DWORD *)v483 - 1) = v484;
        v483 -= 4;
      }
      *a3 = v483;
      a3[1] = v466;
      a3[2] = v463;
      if (v467)
      {
        operator delete(v467);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v465 = v462;
      v466 = v465 + 4;
    }
    a3[1] = v466;
    v485 = v462 + 1;
    if (v466 >= v463)
    {
      v487 = *a3;
      v488 = (v466 - *a3) >> 2;
      v489 = v488 + 1;
      if ((unint64_t)(v488 + 1) >> 62)
        goto LABEL_3661;
      v490 = v463 - v487;
      if (v490 >> 1 > v489)
        v489 = v490 >> 1;
      if ((unint64_t)v490 >= 0x7FFFFFFFFFFFFFFCLL)
        v491 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v491 = v489;
      if (v491)
      {
        v492 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v491);
        v487 = *a3;
        v466 = a3[1];
      }
      else
      {
        v492 = 0;
      }
      v503 = &v492[4 * v488];
      v463 = &v492[4 * v491];
      *(_DWORD *)v503 = v485;
      v486 = v503 + 4;
      while (v466 != v487)
      {
        v504 = *((_DWORD *)v466 - 1);
        v466 -= 4;
        *((_DWORD *)v503 - 1) = v504;
        v503 -= 4;
      }
      *a3 = v503;
      a3[1] = v486;
      a3[2] = v463;
      if (v487)
      {
        operator delete(v487);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v466 = v485;
      v486 = v466 + 4;
    }
    a3[1] = v486;
    if (v486 >= v463)
    {
      v506 = *a3;
      v507 = (v486 - *a3) >> 2;
      v508 = v507 + 1;
      if ((unint64_t)(v507 + 1) >> 62)
        goto LABEL_3661;
      v509 = v463 - v506;
      if (v509 >> 1 > v508)
        v508 = v509 >> 1;
      if ((unint64_t)v509 >= 0x7FFFFFFFFFFFFFFCLL)
        v510 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v510 = v508;
      if (v510)
      {
        v511 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v510);
        v506 = *a3;
        v486 = a3[1];
      }
      else
      {
        v511 = 0;
      }
      v521 = &v511[4 * v507];
      v463 = &v511[4 * v510];
      *(_DWORD *)v521 = v462;
      v505 = v521 + 4;
      while (v486 != v506)
      {
        v522 = *((_DWORD *)v486 - 1);
        v486 -= 4;
        *((_DWORD *)v521 - 1) = v522;
        v521 -= 4;
      }
      *a3 = v521;
      a3[1] = v505;
      a3[2] = v463;
      if (v506)
      {
        operator delete(v506);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v486 = v462;
      v505 = v486 + 4;
    }
    a3[1] = v505;
    v523 = v462 + 2;
    if (v505 >= v463)
    {
      v525 = *a3;
      v526 = (v505 - *a3) >> 2;
      v527 = v526 + 1;
      if ((unint64_t)(v526 + 1) >> 62)
        goto LABEL_3661;
      v528 = v463 - v525;
      if (v528 >> 1 > v527)
        v527 = v528 >> 1;
      if ((unint64_t)v528 >= 0x7FFFFFFFFFFFFFFCLL)
        v529 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v529 = v527;
      if (v529)
      {
        v530 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v529);
        v525 = *a3;
        v505 = a3[1];
      }
      else
      {
        v530 = 0;
      }
      v541 = &v530[4 * v526];
      v463 = &v530[4 * v529];
      *(_DWORD *)v541 = v523;
      v524 = v541 + 4;
      while (v505 != v525)
      {
        v542 = *((_DWORD *)v505 - 1);
        v505 -= 4;
        *((_DWORD *)v541 - 1) = v542;
        v541 -= 4;
      }
      *a3 = v541;
      a3[1] = v524;
      a3[2] = v463;
      if (v525)
      {
        operator delete(v525);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v505 = v523;
      v524 = v505 + 4;
    }
    a3[1] = v524;
    if (v524 >= v463)
    {
      v544 = *a3;
      v545 = (v524 - *a3) >> 2;
      v546 = v545 + 1;
      if ((unint64_t)(v545 + 1) >> 62)
        goto LABEL_3661;
      v547 = v463 - v544;
      if (v547 >> 1 > v546)
        v546 = v547 >> 1;
      if ((unint64_t)v547 >= 0x7FFFFFFFFFFFFFFCLL)
        v548 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v548 = v546;
      if (v548)
      {
        v549 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v548);
        v544 = *a3;
        v524 = a3[1];
      }
      else
      {
        v549 = 0;
      }
      v560 = &v549[4 * v545];
      v463 = &v549[4 * v548];
      *(_DWORD *)v560 = v462;
      v543 = v560 + 4;
      while (v524 != v544)
      {
        v561 = *((_DWORD *)v524 - 1);
        v524 -= 4;
        *((_DWORD *)v560 - 1) = v561;
        v560 -= 4;
      }
      *a3 = v560;
      a3[1] = v543;
      a3[2] = v463;
      if (v544)
      {
        operator delete(v544);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v524 = v462;
      v543 = v524 + 4;
    }
    a3[1] = v543;
    v562 = v462 + 4;
    if (v543 >= v463)
    {
      v564 = *a3;
      v565 = (v543 - *a3) >> 2;
      v566 = v565 + 1;
      if ((unint64_t)(v565 + 1) >> 62)
        goto LABEL_3661;
      v567 = v463 - v564;
      if (v567 >> 1 > v566)
        v566 = v567 >> 1;
      if ((unint64_t)v567 >= 0x7FFFFFFFFFFFFFFCLL)
        v568 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v568 = v566;
      if (v568)
      {
        v569 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v568);
        v564 = *a3;
        v543 = a3[1];
      }
      else
      {
        v569 = 0;
      }
      v582 = &v569[4 * v565];
      v463 = &v569[4 * v568];
      *(_DWORD *)v582 = v562;
      v563 = v582 + 4;
      while (v543 != v564)
      {
        v583 = *((_DWORD *)v543 - 1);
        v543 -= 4;
        *((_DWORD *)v582 - 1) = v583;
        v582 -= 4;
      }
      *a3 = v582;
      a3[1] = v563;
      a3[2] = v463;
      if (v564)
      {
        operator delete(v564);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v543 = v562;
      v563 = v543 + 4;
    }
    a3[1] = v563;
    if (v563 >= v463)
    {
      v585 = *a3;
      v586 = (v563 - *a3) >> 2;
      v587 = v586 + 1;
      if ((unint64_t)(v586 + 1) >> 62)
        goto LABEL_3661;
      v588 = v463 - v585;
      if (v588 >> 1 > v587)
        v587 = v588 >> 1;
      if ((unint64_t)v588 >= 0x7FFFFFFFFFFFFFFCLL)
        v589 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v589 = v587;
      if (v589)
      {
        v590 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v589);
        v585 = *a3;
        v563 = a3[1];
      }
      else
      {
        v590 = 0;
      }
      v600 = &v590[4 * v586];
      v463 = &v590[4 * v589];
      *(_DWORD *)v600 = v485;
      v584 = v600 + 4;
      while (v563 != v585)
      {
        v601 = *((_DWORD *)v563 - 1);
        v563 -= 4;
        *((_DWORD *)v600 - 1) = v601;
        v600 -= 4;
      }
      *a3 = v600;
      a3[1] = v584;
      a3[2] = v463;
      if (v585)
      {
        operator delete(v585);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v563 = v485;
      v584 = v563 + 4;
    }
    a3[1] = v584;
    v602 = v462 + 3;
    if (v584 >= v463)
    {
      v604 = *a3;
      v605 = (v584 - *a3) >> 2;
      v606 = v605 + 1;
      if ((unint64_t)(v605 + 1) >> 62)
        goto LABEL_3661;
      v607 = v463 - v604;
      if (v607 >> 1 > v606)
        v606 = v607 >> 1;
      if ((unint64_t)v607 >= 0x7FFFFFFFFFFFFFFCLL)
        v608 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v608 = v606;
      if (v608)
      {
        v609 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v608);
        v604 = *a3;
        v584 = a3[1];
      }
      else
      {
        v609 = 0;
      }
      v619 = &v609[4 * v605];
      v463 = &v609[4 * v608];
      *(_DWORD *)v619 = v602;
      v603 = v619 + 4;
      while (v584 != v604)
      {
        v620 = *((_DWORD *)v584 - 1);
        v584 -= 4;
        *((_DWORD *)v619 - 1) = v620;
        v619 -= 4;
      }
      *a3 = v619;
      a3[1] = v603;
      a3[2] = v463;
      if (v604)
      {
        operator delete(v604);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v584 = v602;
      v603 = v584 + 4;
    }
    a3[1] = v603;
    if (v603 >= v463)
    {
      v622 = *a3;
      v623 = (v603 - *a3) >> 2;
      v624 = v623 + 1;
      if ((unint64_t)(v623 + 1) >> 62)
        goto LABEL_3661;
      v625 = v463 - v622;
      if (v625 >> 1 > v624)
        v624 = v625 >> 1;
      if ((unint64_t)v625 >= 0x7FFFFFFFFFFFFFFCLL)
        v626 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v626 = v624;
      if (v626)
      {
        v627 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v626);
        v622 = *a3;
        v603 = a3[1];
      }
      else
      {
        v627 = 0;
      }
      v637 = &v627[4 * v623];
      v463 = &v627[4 * v626];
      *(_DWORD *)v637 = v485;
      v621 = v637 + 4;
      while (v603 != v622)
      {
        v638 = *((_DWORD *)v603 - 1);
        v603 -= 4;
        *((_DWORD *)v637 - 1) = v638;
        v637 -= 4;
      }
      *a3 = v637;
      a3[1] = v621;
      a3[2] = v463;
      if (v622)
      {
        operator delete(v622);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v603 = v485;
      v621 = v603 + 4;
    }
    a3[1] = v621;
    v639 = v462 + 5;
    if (v621 >= v463)
    {
      v641 = *a3;
      v642 = (v621 - *a3) >> 2;
      v643 = v642 + 1;
      if ((unint64_t)(v642 + 1) >> 62)
        goto LABEL_3661;
      v644 = v463 - v641;
      if (v644 >> 1 > v643)
        v643 = v644 >> 1;
      if ((unint64_t)v644 >= 0x7FFFFFFFFFFFFFFCLL)
        v645 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v645 = v643;
      if (v645)
      {
        v646 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v645);
        v641 = *a3;
        v621 = a3[1];
      }
      else
      {
        v646 = 0;
      }
      v656 = &v646[4 * v642];
      v463 = &v646[4 * v645];
      *(_DWORD *)v656 = v639;
      v640 = v656 + 4;
      while (v621 != v641)
      {
        v657 = *((_DWORD *)v621 - 1);
        v621 -= 4;
        *((_DWORD *)v656 - 1) = v657;
        v656 -= 4;
      }
      *a3 = v656;
      a3[1] = v640;
      a3[2] = v463;
      if (v641)
      {
        operator delete(v641);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v621 = v639;
      v640 = v621 + 4;
    }
    a3[1] = v640;
    if (v640 >= v463)
    {
      v659 = *a3;
      v660 = (v640 - *a3) >> 2;
      v661 = v660 + 1;
      if ((unint64_t)(v660 + 1) >> 62)
        goto LABEL_3661;
      v662 = v463 - v659;
      if (v662 >> 1 > v661)
        v661 = v662 >> 1;
      if ((unint64_t)v662 >= 0x7FFFFFFFFFFFFFFCLL)
        v663 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v663 = v661;
      if (v663)
      {
        v664 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v663);
        v659 = *a3;
        v640 = a3[1];
      }
      else
      {
        v664 = 0;
      }
      v674 = &v664[4 * v660];
      v463 = &v664[4 * v663];
      *(_DWORD *)v674 = v523;
      v658 = v674 + 4;
      while (v640 != v659)
      {
        v675 = *((_DWORD *)v640 - 1);
        v640 -= 4;
        *((_DWORD *)v674 - 1) = v675;
        v674 -= 4;
      }
      *a3 = v674;
      a3[1] = v658;
      a3[2] = v463;
      if (v659)
      {
        operator delete(v659);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v640 = v523;
      v658 = v640 + 4;
    }
    a3[1] = v658;
    if (v658 >= v463)
    {
      v677 = *a3;
      v678 = (v658 - *a3) >> 2;
      v679 = v678 + 1;
      if ((unint64_t)(v678 + 1) >> 62)
        goto LABEL_3661;
      v680 = v463 - v677;
      if (v680 >> 1 > v679)
        v679 = v680 >> 1;
      if ((unint64_t)v680 >= 0x7FFFFFFFFFFFFFFCLL)
        v681 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v681 = v679;
      if (v681)
      {
        v682 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v681);
        v677 = *a3;
        v658 = a3[1];
      }
      else
      {
        v682 = 0;
      }
      v692 = &v682[4 * v678];
      v463 = &v682[4 * v681];
      *(_DWORD *)v692 = v602;
      v676 = v692 + 4;
      while (v658 != v677)
      {
        v693 = *((_DWORD *)v658 - 1);
        v658 -= 4;
        *((_DWORD *)v692 - 1) = v693;
        v692 -= 4;
      }
      *a3 = v692;
      a3[1] = v676;
      a3[2] = v463;
      if (v677)
      {
        operator delete(v677);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v658 = v602;
      v676 = v658 + 4;
    }
    a3[1] = v676;
    if (v676 >= v463)
    {
      v695 = *a3;
      v696 = (v676 - *a3) >> 2;
      v697 = v696 + 1;
      if ((unint64_t)(v696 + 1) >> 62)
        goto LABEL_3661;
      v698 = v463 - v695;
      if (v698 >> 1 > v697)
        v697 = v698 >> 1;
      if ((unint64_t)v698 >= 0x7FFFFFFFFFFFFFFCLL)
        v699 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v699 = v697;
      if (v699)
      {
        v700 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v699);
        v695 = *a3;
        v676 = a3[1];
      }
      else
      {
        v700 = 0;
      }
      v710 = &v700[4 * v696];
      v463 = &v700[4 * v699];
      *(_DWORD *)v710 = v523;
      v694 = v710 + 4;
      while (v676 != v695)
      {
        v711 = *((_DWORD *)v676 - 1);
        v676 -= 4;
        *((_DWORD *)v710 - 1) = v711;
        v710 -= 4;
      }
      *a3 = v710;
      a3[1] = v694;
      a3[2] = v463;
      if (v695)
      {
        operator delete(v695);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v676 = v523;
      v694 = v676 + 4;
    }
    a3[1] = v694;
    v712 = v462 + 6;
    if (v694 >= v463)
    {
      v714 = *a3;
      v715 = (v694 - *a3) >> 2;
      v716 = v715 + 1;
      if ((unint64_t)(v715 + 1) >> 62)
        goto LABEL_3661;
      v717 = v463 - v714;
      if (v717 >> 1 > v716)
        v716 = v717 >> 1;
      if ((unint64_t)v717 >= 0x7FFFFFFFFFFFFFFCLL)
        v718 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v718 = v716;
      if (v718)
      {
        v719 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v718);
        v714 = *a3;
        v694 = a3[1];
      }
      else
      {
        v719 = 0;
      }
      v729 = &v719[4 * v715];
      v463 = &v719[4 * v718];
      *(_DWORD *)v729 = v712;
      v713 = v729 + 4;
      while (v694 != v714)
      {
        v730 = *((_DWORD *)v694 - 1);
        v694 -= 4;
        *((_DWORD *)v729 - 1) = v730;
        v729 -= 4;
      }
      *a3 = v729;
      a3[1] = v713;
      a3[2] = v463;
      if (v714)
      {
        operator delete(v714);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v694 = v712;
      v713 = v694 + 4;
    }
    a3[1] = v713;
    if (v713 >= v463)
    {
      v732 = *a3;
      v733 = (v713 - *a3) >> 2;
      v734 = v733 + 1;
      if ((unint64_t)(v733 + 1) >> 62)
        goto LABEL_3661;
      v735 = v463 - v732;
      if (v735 >> 1 > v734)
        v734 = v735 >> 1;
      if ((unint64_t)v735 >= 0x7FFFFFFFFFFFFFFCLL)
        v736 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v736 = v734;
      if (v736)
      {
        v737 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v736);
        v732 = *a3;
        v713 = a3[1];
      }
      else
      {
        v737 = 0;
      }
      v747 = &v737[4 * v733];
      v463 = &v737[4 * v736];
      *(_DWORD *)v747 = v602;
      v731 = v747 + 4;
      while (v713 != v732)
      {
        v748 = *((_DWORD *)v713 - 1);
        v713 -= 4;
        *((_DWORD *)v747 - 1) = v748;
        v747 -= 4;
      }
      *a3 = v747;
      a3[1] = v731;
      a3[2] = v463;
      if (v732)
      {
        operator delete(v732);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v713 = v602;
      v731 = v713 + 4;
    }
    a3[1] = v731;
    v749 = v462 + 7;
    if (v731 >= v463)
    {
      v751 = *a3;
      v752 = (v731 - *a3) >> 2;
      v753 = v752 + 1;
      if ((unint64_t)(v752 + 1) >> 62)
        goto LABEL_3661;
      v754 = v463 - v751;
      if (v754 >> 1 > v753)
        v753 = v754 >> 1;
      if ((unint64_t)v754 >= 0x7FFFFFFFFFFFFFFCLL)
        v755 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v755 = v753;
      if (v755)
      {
        v756 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v755);
        v751 = *a3;
        v731 = a3[1];
      }
      else
      {
        v756 = 0;
      }
      v766 = &v756[4 * v752];
      v463 = &v756[4 * v755];
      *(_DWORD *)v766 = v749;
      v750 = v766 + 4;
      while (v731 != v751)
      {
        v767 = *((_DWORD *)v731 - 1);
        v731 -= 4;
        *((_DWORD *)v766 - 1) = v767;
        v766 -= 4;
      }
      *a3 = v766;
      a3[1] = v750;
      a3[2] = v463;
      if (v751)
      {
        operator delete(v751);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v731 = v749;
      v750 = v731 + 4;
    }
    a3[1] = v750;
    if (v750 >= v463)
    {
      v769 = *a3;
      v770 = (v750 - *a3) >> 2;
      v771 = v770 + 1;
      if ((unint64_t)(v770 + 1) >> 62)
        goto LABEL_3661;
      v772 = v463 - v769;
      if (v772 >> 1 > v771)
        v771 = v772 >> 1;
      if ((unint64_t)v772 >= 0x7FFFFFFFFFFFFFFCLL)
        v773 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v773 = v771;
      if (v773)
      {
        v774 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v773);
        v769 = *a3;
        v750 = a3[1];
      }
      else
      {
        v774 = 0;
      }
      v784 = &v774[4 * v770];
      v463 = &v774[4 * v773];
      *(_DWORD *)v784 = v562;
      v768 = v784 + 4;
      while (v750 != v769)
      {
        v785 = *((_DWORD *)v750 - 1);
        v750 -= 4;
        *((_DWORD *)v784 - 1) = v785;
        v784 -= 4;
      }
      *a3 = v784;
      a3[1] = v768;
      a3[2] = v463;
      if (v769)
      {
        operator delete(v769);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v750 = v562;
      v768 = v750 + 4;
    }
    a3[1] = v768;
    if (v768 >= v463)
    {
      v787 = *a3;
      v788 = (v768 - *a3) >> 2;
      v789 = v788 + 1;
      if ((unint64_t)(v788 + 1) >> 62)
        goto LABEL_3661;
      v790 = v463 - v787;
      if (v790 >> 1 > v789)
        v789 = v790 >> 1;
      if ((unint64_t)v790 >= 0x7FFFFFFFFFFFFFFCLL)
        v791 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v791 = v789;
      if (v791)
      {
        v792 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v791);
        v787 = *a3;
        v768 = a3[1];
      }
      else
      {
        v792 = 0;
      }
      v802 = &v792[4 * v788];
      v463 = &v792[4 * v791];
      *(_DWORD *)v802 = v639;
      v786 = v802 + 4;
      while (v768 != v787)
      {
        v803 = *((_DWORD *)v768 - 1);
        v768 -= 4;
        *((_DWORD *)v802 - 1) = v803;
        v802 -= 4;
      }
      *a3 = v802;
      a3[1] = v786;
      a3[2] = v463;
      if (v787)
      {
        operator delete(v787);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v768 = v639;
      v786 = v768 + 4;
    }
    a3[1] = v786;
    if (v786 >= v463)
    {
      v805 = *a3;
      v806 = (v786 - *a3) >> 2;
      v807 = v806 + 1;
      if ((unint64_t)(v806 + 1) >> 62)
        goto LABEL_3661;
      v808 = v463 - v805;
      if (v808 >> 1 > v807)
        v807 = v808 >> 1;
      if ((unint64_t)v808 >= 0x7FFFFFFFFFFFFFFCLL)
        v809 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v809 = v807;
      if (v809)
      {
        v810 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v809);
        v805 = *a3;
        v786 = a3[1];
      }
      else
      {
        v810 = 0;
      }
      v820 = &v810[4 * v806];
      v463 = &v810[4 * v809];
      *(_DWORD *)v820 = v562;
      v804 = v820 + 4;
      while (v786 != v805)
      {
        v821 = *((_DWORD *)v786 - 1);
        v786 -= 4;
        *((_DWORD *)v820 - 1) = v821;
        v820 -= 4;
      }
      *a3 = v820;
      a3[1] = v804;
      a3[2] = v463;
      if (v805)
      {
        operator delete(v805);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v786 = v562;
      v804 = v786 + 4;
    }
    a3[1] = v804;
    if (v804 >= v463)
    {
      v823 = *a3;
      v824 = (v804 - *a3) >> 2;
      v825 = v824 + 1;
      if ((unint64_t)(v824 + 1) >> 62)
        goto LABEL_3661;
      v826 = v463 - v823;
      if (v826 >> 1 > v825)
        v825 = v826 >> 1;
      if ((unint64_t)v826 >= 0x7FFFFFFFFFFFFFFCLL)
        v827 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v827 = v825;
      if (v827)
      {
        v828 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v827);
        v823 = *a3;
        v804 = a3[1];
      }
      else
      {
        v828 = 0;
      }
      v838 = &v828[4 * v824];
      v463 = &v828[4 * v827];
      *(_DWORD *)v838 = v712;
      v822 = v838 + 4;
      while (v804 != v823)
      {
        v839 = *((_DWORD *)v804 - 1);
        v804 -= 4;
        *((_DWORD *)v838 - 1) = v839;
        v838 -= 4;
      }
      *a3 = v838;
      a3[1] = v822;
      a3[2] = v463;
      if (v823)
      {
        operator delete(v823);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v804 = v712;
      v822 = v804 + 4;
    }
    a3[1] = v822;
    if (v822 >= v463)
    {
      v841 = *a3;
      v842 = (v822 - *a3) >> 2;
      v843 = v842 + 1;
      if ((unint64_t)(v842 + 1) >> 62)
        goto LABEL_3661;
      v844 = v463 - v841;
      if (v844 >> 1 > v843)
        v843 = v844 >> 1;
      if ((unint64_t)v844 >= 0x7FFFFFFFFFFFFFFCLL)
        v845 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v845 = v843;
      if (v845)
      {
        v846 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v845);
        v841 = *a3;
        v822 = a3[1];
      }
      else
      {
        v846 = 0;
      }
      v856 = &v846[4 * v842];
      v463 = &v846[4 * v845];
      *(_DWORD *)v856 = v639;
      v840 = v856 + 4;
      while (v822 != v841)
      {
        v857 = *((_DWORD *)v822 - 1);
        v822 -= 4;
        *((_DWORD *)v856 - 1) = v857;
        v856 -= 4;
      }
      *a3 = v856;
      a3[1] = v840;
      a3[2] = v463;
      if (v841)
      {
        operator delete(v841);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v822 = v639;
      v840 = v822 + 4;
    }
    a3[1] = v840;
    if (v840 >= v463)
    {
      v859 = *a3;
      v860 = (v840 - *a3) >> 2;
      v861 = v860 + 1;
      if ((unint64_t)(v860 + 1) >> 62)
        goto LABEL_3661;
      v862 = v463 - v859;
      if (v862 >> 1 > v861)
        v861 = v862 >> 1;
      if ((unint64_t)v862 >= 0x7FFFFFFFFFFFFFFCLL)
        v863 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v863 = v861;
      if (v863)
      {
        v864 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v863);
        v859 = *a3;
        v840 = a3[1];
      }
      else
      {
        v864 = 0;
      }
      v874 = &v864[4 * v860];
      v463 = &v864[4 * v863];
      *(_DWORD *)v874 = v749;
      v858 = v874 + 4;
      while (v840 != v859)
      {
        v875 = *((_DWORD *)v840 - 1);
        v840 -= 4;
        *((_DWORD *)v874 - 1) = v875;
        v874 -= 4;
      }
      *a3 = v874;
      a3[1] = v858;
      a3[2] = v463;
      if (v859)
      {
        operator delete(v859);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v840 = v749;
      v858 = v840 + 4;
    }
    a3[1] = v858;
    if (v858 >= v463)
    {
      v877 = *a3;
      v878 = (v858 - *a3) >> 2;
      v879 = v878 + 1;
      if ((unint64_t)(v878 + 1) >> 62)
        goto LABEL_3661;
      v880 = v463 - v877;
      if (v880 >> 1 > v879)
        v879 = v880 >> 1;
      if ((unint64_t)v880 >= 0x7FFFFFFFFFFFFFFCLL)
        v881 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v881 = v879;
      if (v881)
      {
        v882 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v881);
        v877 = *a3;
        v858 = a3[1];
      }
      else
      {
        v882 = 0;
      }
      v892 = &v882[4 * v878];
      v463 = &v882[4 * v881];
      *(_DWORD *)v892 = v712;
      v876 = v892 + 4;
      while (v858 != v877)
      {
        v893 = *((_DWORD *)v858 - 1);
        v858 -= 4;
        *((_DWORD *)v892 - 1) = v893;
        v892 -= 4;
      }
      *a3 = v892;
      a3[1] = v876;
      a3[2] = v463;
      if (v877)
      {
        operator delete(v877);
        v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v858 = v712;
      v876 = v858 + 4;
    }
    a3[1] = v876;
    if (v876 >= v463)
    {
      v895 = *a3;
      v896 = (v876 - *a3) >> 2;
      v897 = v896 + 1;
      if ((unint64_t)(v896 + 1) >> 62)
        goto LABEL_3661;
      v898 = v463 - v895;
      if (v898 >> 1 > v897)
        v897 = v898 >> 1;
      if ((unint64_t)v898 >= 0x7FFFFFFFFFFFFFFCLL)
        v899 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v899 = v897;
      if (v899)
      {
        v900 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v899);
        v895 = *a3;
        v876 = a3[1];
      }
      else
      {
        v900 = 0;
      }
      v910 = &v900[4 * v896];
      v911 = &v900[4 * v899];
      *(_DWORD *)v910 = v749;
      v894 = v910 + 4;
      while (v876 != v895)
      {
        v912 = *((_DWORD *)v876 - 1);
        v876 -= 4;
        *((_DWORD *)v910 - 1) = v912;
        v910 -= 4;
      }
      *a3 = v910;
      a3[1] = v894;
      a3[2] = v911;
      if (v895)
        operator delete(v895);
    }
    else
    {
      *(_DWORD *)v876 = v749;
      v894 = v876 + 4;
    }
    a3[1] = v894;
    return;
  }
  if (v8 >= (unsigned __int32 *)v12)
  {
    v16 = v11 + 1;
    if ((v11 + 1) >> 62)
      goto LABEL_3660;
    v17 = v12 - (char *)v10;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      v19 = (char *)sub_1DCAE4D04((uint64_t)v13, v18);
      a4 = v2149;
      v20 = v19;
      v10 = *(unsigned __int32 **)a2;
      v8 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v20 = 0;
    }
    v26 = &v20[4 * v11];
    v12 = &v20[4 * v18];
    *(_DWORD *)v26 = a4.n128_u32[0];
    v14 = (unsigned __int32 *)(v26 + 4);
    while (v8 != v10)
    {
      v27 = *--v8;
      *((_DWORD *)v26 - 1) = v27;
      v26 -= 4;
    }
    *(_QWORD *)a2 = v26;
    *(_QWORD *)(a2 + 8) = v14;
    *(_QWORD *)(a2 + 16) = v12;
    if (v10)
    {
      operator delete(v10);
      a4 = v2149;
      v12 = *v13;
    }
  }
  else
  {
    *v8 = a4.n128_u32[0];
    v14 = v8 + 1;
  }
  *v9 = v14;
  v28 = a4.n128_u32[1];
  if (v14 >= (unsigned __int32 *)v12)
  {
    v30 = *(unsigned __int32 **)a2;
    v31 = ((uint64_t)v14 - *(_QWORD *)a2) >> 2;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62)
      goto LABEL_3660;
    v33 = v12 - (char *)v30;
    if (v33 >> 1 > v32)
      v32 = v33 >> 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
      v34 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      v35 = (char *)sub_1DCAE4D04((uint64_t)v13, v34);
      v30 = *(unsigned __int32 **)a2;
      v14 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v35 = 0;
    }
    v46 = (unsigned __int32 *)&v35[4 * v31];
    v12 = &v35[4 * v34];
    *v46 = v28;
    v29 = v46 + 1;
    while (v14 != v30)
    {
      v47 = *--v14;
      *--v46 = v47;
    }
    *(_QWORD *)a2 = v46;
    *(_QWORD *)(a2 + 8) = v29;
    *(_QWORD *)(a2 + 16) = v12;
    if (v30)
    {
      operator delete(v30);
      v12 = *v13;
    }
    a4.n128_u32[2] = v2149.n128_u32[2];
  }
  else
  {
    *v14 = a4.n128_u32[1];
    v29 = v14 + 1;
  }
  *v9 = v29;
  v48 = a4.n128_u32[2];
  if (v29 >= (unsigned __int32 *)v12)
  {
    v50 = *(unsigned __int32 **)a2;
    v51 = ((uint64_t)v29 - *(_QWORD *)a2) >> 2;
    v52 = v51 + 1;
    if ((unint64_t)(v51 + 1) >> 62)
      goto LABEL_3660;
    v53 = v12 - (char *)v50;
    if (v53 >> 1 > v52)
      v52 = v53 >> 1;
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
      v54 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v54 = v52;
    if (v54)
    {
      v55 = (char *)sub_1DCAE4D04((uint64_t)v13, v54);
      v50 = *(unsigned __int32 **)a2;
      v29 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v55 = 0;
    }
    v65 = (unsigned __int32 *)&v55[4 * v51];
    v12 = &v55[4 * v54];
    *v65 = v48;
    v49 = v65 + 1;
    while (v29 != v50)
    {
      v66 = *--v29;
      *--v65 = v66;
    }
    *(_QWORD *)a2 = v65;
    *(_QWORD *)(a2 + 8) = v49;
    *(_QWORD *)(a2 + 16) = v12;
    if (v50)
    {
      operator delete(v50);
      v12 = *v13;
    }
  }
  else
  {
    *v29 = a4.n128_u32[2];
    v49 = v29 + 1;
  }
  *v9 = v49;
  if (v49 >= (unsigned __int32 *)v12)
  {
    v68 = *(unsigned __int32 **)a2;
    v69 = ((uint64_t)v49 - *(_QWORD *)a2) >> 2;
    v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 62)
      goto LABEL_3660;
    v71 = v12 - (char *)v68;
    if (v71 >> 1 > v70)
      v70 = v71 >> 1;
    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
      v72 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v72 = v70;
    if (v72)
    {
      v73 = (char *)sub_1DCAE4D04((uint64_t)v13, v72);
      v68 = *(unsigned __int32 **)a2;
      v49 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v73 = 0;
    }
    v83 = &v73[4 * v69];
    v12 = &v73[4 * v72];
    *(_DWORD *)v83 = v2149.n128_u32[0];
    v67 = (unsigned __int32 *)(v83 + 4);
    while (v49 != v68)
    {
      v84 = *--v49;
      *((_DWORD *)v83 - 1) = v84;
      v83 -= 4;
    }
    *(_QWORD *)a2 = v83;
    *(_QWORD *)(a2 + 8) = v67;
    *(_QWORD *)(a2 + 16) = v12;
    if (v68)
    {
      operator delete(v68);
      v12 = *v13;
    }
  }
  else
  {
    *v49 = v2149.n128_u32[0];
    v67 = v49 + 1;
  }
  *v9 = v67;
  if (v67 >= (unsigned __int32 *)v12)
  {
    v86 = *(unsigned __int32 **)a2;
    v87 = ((uint64_t)v67 - *(_QWORD *)a2) >> 2;
    v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 62)
      goto LABEL_3660;
    v89 = v12 - (char *)v86;
    if (v89 >> 1 > v88)
      v88 = v89 >> 1;
    if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
      v90 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v90 = v88;
    if (v90)
    {
      v91 = (char *)sub_1DCAE4D04((uint64_t)v13, v90);
      v86 = *(unsigned __int32 **)a2;
      v67 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v91 = 0;
    }
    v101 = (unsigned __int32 *)&v91[4 * v87];
    v12 = &v91[4 * v90];
    *v101 = v28;
    v85 = v101 + 1;
    while (v67 != v86)
    {
      v102 = *--v67;
      *--v101 = v102;
    }
    *(_QWORD *)a2 = v101;
    *(_QWORD *)(a2 + 8) = v85;
    *(_QWORD *)(a2 + 16) = v12;
    if (v86)
    {
      operator delete(v86);
      v12 = *v13;
    }
  }
  else
  {
    *v67 = v28;
    v85 = v67 + 1;
  }
  *v9 = v85;
  if (v85 >= (unsigned __int32 *)v12)
  {
    v104 = *(unsigned __int32 **)a2;
    v105 = ((uint64_t)v85 - *(_QWORD *)a2) >> 2;
    v106 = v105 + 1;
    if ((unint64_t)(v105 + 1) >> 62)
      goto LABEL_3660;
    v107 = v12 - (char *)v104;
    if (v107 >> 1 > v106)
      v106 = v107 >> 1;
    if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
      v108 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v108 = v106;
    if (v108)
    {
      v109 = (char *)sub_1DCAE4D04((uint64_t)v13, v108);
      v104 = *(unsigned __int32 **)a2;
      v85 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v109 = 0;
    }
    v119 = (unsigned __int32 *)&v109[4 * v105];
    v12 = &v109[4 * v108];
    *v119 = v48;
    v103 = v119 + 1;
    while (v85 != v104)
    {
      v120 = *--v85;
      *--v119 = v120;
    }
    *(_QWORD *)a2 = v119;
    *(_QWORD *)(a2 + 8) = v103;
    *(_QWORD *)(a2 + 16) = v12;
    if (v104)
    {
      operator delete(v104);
      v12 = *v13;
    }
  }
  else
  {
    *v85 = v48;
    v103 = v85 + 1;
  }
  *v9 = v103;
  if (v103 >= (unsigned __int32 *)v12)
  {
    v122 = *(unsigned __int32 **)a2;
    v123 = ((uint64_t)v103 - *(_QWORD *)a2) >> 2;
    v124 = v123 + 1;
    if ((unint64_t)(v123 + 1) >> 62)
      goto LABEL_3660;
    v125 = v12 - (char *)v122;
    if (v125 >> 1 > v124)
      v124 = v125 >> 1;
    if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFFCLL)
      v126 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v126 = v124;
    if (v126)
    {
      v127 = (char *)sub_1DCAE4D04((uint64_t)v13, v126);
      v122 = *(unsigned __int32 **)a2;
      v103 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v127 = 0;
    }
    v137 = &v127[4 * v123];
    v12 = &v127[4 * v126];
    *(_DWORD *)v137 = a5.n128_u32[0];
    v121 = (unsigned __int32 *)(v137 + 4);
    while (v103 != v122)
    {
      v138 = *--v103;
      *((_DWORD *)v137 - 1) = v138;
      v137 -= 4;
    }
    *(_QWORD *)a2 = v137;
    *(_QWORD *)(a2 + 8) = v121;
    *(_QWORD *)(a2 + 16) = v12;
    if (v122)
    {
      operator delete(v122);
      v12 = *v13;
    }
  }
  else
  {
    *v103 = a5.n128_u32[0];
    v121 = v103 + 1;
  }
  *v9 = v121;
  if (v121 >= (unsigned __int32 *)v12)
  {
    v140 = *(unsigned __int32 **)a2;
    v141 = ((uint64_t)v121 - *(_QWORD *)a2) >> 2;
    v142 = v141 + 1;
    if ((unint64_t)(v141 + 1) >> 62)
      goto LABEL_3660;
    v143 = v12 - (char *)v140;
    if (v143 >> 1 > v142)
      v142 = v143 >> 1;
    if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL)
      v144 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v144 = v142;
    if (v144)
    {
      v145 = (char *)sub_1DCAE4D04((uint64_t)v13, v144);
      v140 = *(unsigned __int32 **)a2;
      v121 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v145 = 0;
    }
    v155 = (unsigned __int32 *)&v145[4 * v141];
    v12 = &v145[4 * v144];
    *v155 = v28;
    v139 = v155 + 1;
    while (v121 != v140)
    {
      v156 = *--v121;
      *--v155 = v156;
    }
    *(_QWORD *)a2 = v155;
    *(_QWORD *)(a2 + 8) = v139;
    *(_QWORD *)(a2 + 16) = v12;
    if (v140)
    {
      operator delete(v140);
      v12 = *v13;
    }
  }
  else
  {
    *v121 = v28;
    v139 = v121 + 1;
  }
  *v9 = v139;
  if (v139 >= (unsigned __int32 *)v12)
  {
    v158 = *(unsigned __int32 **)a2;
    v159 = ((uint64_t)v139 - *(_QWORD *)a2) >> 2;
    v160 = v159 + 1;
    if ((unint64_t)(v159 + 1) >> 62)
      goto LABEL_3660;
    v161 = v12 - (char *)v158;
    if (v161 >> 1 > v160)
      v160 = v161 >> 1;
    if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL)
      v162 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v162 = v160;
    if (v162)
    {
      v163 = (char *)sub_1DCAE4D04((uint64_t)v13, v162);
      v158 = *(unsigned __int32 **)a2;
      v139 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v163 = 0;
    }
    v173 = (unsigned __int32 *)&v163[4 * v159];
    v12 = &v163[4 * v162];
    *v173 = v48;
    v157 = v173 + 1;
    while (v139 != v158)
    {
      v174 = *--v139;
      *--v173 = v174;
    }
    *(_QWORD *)a2 = v173;
    *(_QWORD *)(a2 + 8) = v157;
    *(_QWORD *)(a2 + 16) = v12;
    if (v158)
    {
      operator delete(v158);
      v12 = *v13;
    }
  }
  else
  {
    *v139 = v48;
    v157 = v139 + 1;
  }
  *v9 = v157;
  if (v157 >= (unsigned __int32 *)v12)
  {
    v176 = *(unsigned __int32 **)a2;
    v177 = ((uint64_t)v157 - *(_QWORD *)a2) >> 2;
    v178 = v177 + 1;
    if ((unint64_t)(v177 + 1) >> 62)
      goto LABEL_3660;
    v179 = v12 - (char *)v176;
    if (v179 >> 1 > v178)
      v178 = v179 >> 1;
    if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL)
      v180 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v180 = v178;
    if (v180)
    {
      v181 = (char *)sub_1DCAE4D04((uint64_t)v13, v180);
      v176 = *(unsigned __int32 **)a2;
      v157 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v181 = 0;
    }
    v191 = &v181[4 * v177];
    v12 = &v181[4 * v180];
    *(_DWORD *)v191 = a5.n128_u32[0];
    v175 = (unsigned __int32 *)(v191 + 4);
    while (v157 != v176)
    {
      v192 = *--v157;
      *((_DWORD *)v191 - 1) = v192;
      v191 -= 4;
    }
    *(_QWORD *)a2 = v191;
    *(_QWORD *)(a2 + 8) = v175;
    *(_QWORD *)(a2 + 16) = v12;
    if (v176)
    {
      operator delete(v176);
      v12 = *v13;
    }
  }
  else
  {
    *v157 = a5.n128_u32[0];
    v175 = v157 + 1;
  }
  *v9 = v175;
  if (v175 >= (unsigned __int32 *)v12)
  {
    v194 = *(unsigned __int32 **)a2;
    v195 = ((uint64_t)v175 - *(_QWORD *)a2) >> 2;
    v196 = v195 + 1;
    if ((unint64_t)(v195 + 1) >> 62)
      goto LABEL_3660;
    v197 = v12 - (char *)v194;
    if (v197 >> 1 > v196)
      v196 = v197 >> 1;
    if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL)
      v198 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v198 = v196;
    if (v198)
    {
      v199 = (char *)sub_1DCAE4D04((uint64_t)v13, v198);
      v194 = *(unsigned __int32 **)a2;
      v175 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v199 = 0;
    }
    v209 = (unsigned __int32 *)&v199[4 * v195];
    v12 = &v199[4 * v198];
    *v209 = v28;
    v193 = v209 + 1;
    while (v175 != v194)
    {
      v210 = *--v175;
      *--v209 = v210;
    }
    *(_QWORD *)a2 = v209;
    *(_QWORD *)(a2 + 8) = v193;
    *(_QWORD *)(a2 + 16) = v12;
    if (v194)
    {
      operator delete(v194);
      v12 = *v13;
    }
  }
  else
  {
    *v175 = v28;
    v193 = v175 + 1;
  }
  *v9 = v193;
  if (v193 >= (unsigned __int32 *)v12)
  {
    v212 = *(unsigned __int32 **)a2;
    v213 = ((uint64_t)v193 - *(_QWORD *)a2) >> 2;
    v214 = v213 + 1;
    if ((unint64_t)(v213 + 1) >> 62)
      goto LABEL_3660;
    v215 = v12 - (char *)v212;
    if (v215 >> 1 > v214)
      v214 = v215 >> 1;
    if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFFCLL)
      v216 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v216 = v214;
    if (v216)
    {
      v217 = (char *)sub_1DCAE4D04((uint64_t)v13, v216);
      v212 = *(unsigned __int32 **)a2;
      v193 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v217 = 0;
    }
    v227 = (unsigned __int32 *)&v217[4 * v213];
    v12 = &v217[4 * v216];
    *v227 = v48;
    v211 = v227 + 1;
    while (v193 != v212)
    {
      v228 = *--v193;
      *--v227 = v228;
    }
    *(_QWORD *)a2 = v227;
    *(_QWORD *)(a2 + 8) = v211;
    *(_QWORD *)(a2 + 16) = v12;
    if (v212)
    {
      operator delete(v212);
      v12 = *v13;
    }
  }
  else
  {
    *v193 = v48;
    v211 = v193 + 1;
  }
  *v9 = v211;
  if (v211 >= (unsigned __int32 *)v12)
  {
    v230 = *(unsigned __int32 **)a2;
    v231 = ((uint64_t)v211 - *(_QWORD *)a2) >> 2;
    v232 = v231 + 1;
    if ((unint64_t)(v231 + 1) >> 62)
      goto LABEL_3660;
    v233 = v12 - (char *)v230;
    if (v233 >> 1 > v232)
      v232 = v233 >> 1;
    if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFFCLL)
      v234 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v234 = v232;
    if (v234)
    {
      v235 = (char *)sub_1DCAE4D04((uint64_t)v13, v234);
      v230 = *(unsigned __int32 **)a2;
      v211 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v235 = 0;
    }
    v245 = &v235[4 * v231];
    v12 = &v235[4 * v234];
    *(_DWORD *)v245 = v2149.n128_u32[0];
    v229 = (unsigned __int32 *)(v245 + 4);
    while (v211 != v230)
    {
      v246 = *--v211;
      *((_DWORD *)v245 - 1) = v246;
      v245 -= 4;
    }
    *(_QWORD *)a2 = v245;
    *(_QWORD *)(a2 + 8) = v229;
    *(_QWORD *)(a2 + 16) = v12;
    if (v230)
    {
      operator delete(v230);
      v12 = *v13;
    }
  }
  else
  {
    *v211 = v2149.n128_u32[0];
    v229 = v211 + 1;
  }
  *v9 = v229;
  if (v229 >= (unsigned __int32 *)v12)
  {
    v248 = *(unsigned __int32 **)a2;
    v249 = ((uint64_t)v229 - *(_QWORD *)a2) >> 2;
    v250 = v249 + 1;
    if ((unint64_t)(v249 + 1) >> 62)
      goto LABEL_3660;
    v251 = v12 - (char *)v248;
    if (v251 >> 1 > v250)
      v250 = v251 >> 1;
    if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFFCLL)
      v252 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v252 = v250;
    if (v252)
    {
      v253 = (char *)sub_1DCAE4D04((uint64_t)v13, v252);
      v248 = *(unsigned __int32 **)a2;
      v229 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v253 = 0;
    }
    v263 = &v253[4 * v249];
    v12 = &v253[4 * v252];
    *(_DWORD *)v263 = a5.n128_u32[1];
    v247 = (unsigned __int32 *)(v263 + 4);
    while (v229 != v248)
    {
      v264 = *--v229;
      *((_DWORD *)v263 - 1) = v264;
      v263 -= 4;
    }
    *(_QWORD *)a2 = v263;
    *(_QWORD *)(a2 + 8) = v247;
    *(_QWORD *)(a2 + 16) = v12;
    if (v248)
    {
      operator delete(v248);
      v12 = *v13;
    }
  }
  else
  {
    *v229 = a5.n128_u32[1];
    v247 = v229 + 1;
  }
  *v9 = v247;
  if (v247 >= (unsigned __int32 *)v12)
  {
    v266 = *(unsigned __int32 **)a2;
    v267 = ((uint64_t)v247 - *(_QWORD *)a2) >> 2;
    v268 = v267 + 1;
    if ((unint64_t)(v267 + 1) >> 62)
      goto LABEL_3660;
    v269 = v12 - (char *)v266;
    if (v269 >> 1 > v268)
      v268 = v269 >> 1;
    if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFFCLL)
      v270 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v270 = v268;
    if (v270)
    {
      v271 = (char *)sub_1DCAE4D04((uint64_t)v13, v270);
      v266 = *(unsigned __int32 **)a2;
      v247 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v271 = 0;
    }
    v281 = (unsigned __int32 *)&v271[4 * v267];
    v12 = &v271[4 * v270];
    *v281 = v48;
    v265 = v281 + 1;
    while (v247 != v266)
    {
      v282 = *--v247;
      *--v281 = v282;
    }
    *(_QWORD *)a2 = v281;
    *(_QWORD *)(a2 + 8) = v265;
    *(_QWORD *)(a2 + 16) = v12;
    if (v266)
    {
      operator delete(v266);
      v12 = *v13;
    }
  }
  else
  {
    *v247 = v48;
    v265 = v247 + 1;
  }
  *v9 = v265;
  if (v265 >= (unsigned __int32 *)v12)
  {
    v284 = *(unsigned __int32 **)a2;
    v285 = ((uint64_t)v265 - *(_QWORD *)a2) >> 2;
    v286 = v285 + 1;
    if ((unint64_t)(v285 + 1) >> 62)
      goto LABEL_3660;
    v287 = v12 - (char *)v284;
    if (v287 >> 1 > v286)
      v286 = v287 >> 1;
    if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFFCLL)
      v288 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v288 = v286;
    if (v288)
    {
      v289 = (char *)sub_1DCAE4D04((uint64_t)v13, v288);
      v284 = *(unsigned __int32 **)a2;
      v265 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v289 = 0;
    }
    v299 = &v289[4 * v285];
    v12 = &v289[4 * v288];
    *(_DWORD *)v299 = v2149.n128_u32[0];
    v283 = (unsigned __int32 *)(v299 + 4);
    while (v265 != v284)
    {
      v300 = *--v265;
      *((_DWORD *)v299 - 1) = v300;
      v299 -= 4;
    }
    *(_QWORD *)a2 = v299;
    *(_QWORD *)(a2 + 8) = v283;
    *(_QWORD *)(a2 + 16) = v12;
    if (v284)
    {
      operator delete(v284);
      v12 = *v13;
    }
  }
  else
  {
    *v265 = v2149.n128_u32[0];
    v283 = v265 + 1;
  }
  *v9 = v283;
  if (v283 >= (unsigned __int32 *)v12)
  {
    v302 = *(unsigned __int32 **)a2;
    v303 = ((uint64_t)v283 - *(_QWORD *)a2) >> 2;
    v304 = v303 + 1;
    if ((unint64_t)(v303 + 1) >> 62)
      goto LABEL_3660;
    v305 = v12 - (char *)v302;
    if (v305 >> 1 > v304)
      v304 = v305 >> 1;
    if ((unint64_t)v305 >= 0x7FFFFFFFFFFFFFFCLL)
      v306 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v306 = v304;
    if (v306)
    {
      v307 = (char *)sub_1DCAE4D04((uint64_t)v13, v306);
      v302 = *(unsigned __int32 **)a2;
      v283 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v307 = 0;
    }
    v317 = &v307[4 * v303];
    v12 = &v307[4 * v306];
    *(_DWORD *)v317 = a5.n128_u32[1];
    v301 = (unsigned __int32 *)(v317 + 4);
    while (v283 != v302)
    {
      v318 = *--v283;
      *((_DWORD *)v317 - 1) = v318;
      v317 -= 4;
    }
    *(_QWORD *)a2 = v317;
    *(_QWORD *)(a2 + 8) = v301;
    *(_QWORD *)(a2 + 16) = v12;
    if (v302)
    {
      operator delete(v302);
      v12 = *v13;
    }
  }
  else
  {
    *v283 = a5.n128_u32[1];
    v301 = v283 + 1;
  }
  *v9 = v301;
  if (v301 >= (unsigned __int32 *)v12)
  {
    v320 = *(unsigned __int32 **)a2;
    v321 = ((uint64_t)v301 - *(_QWORD *)a2) >> 2;
    v322 = v321 + 1;
    if ((unint64_t)(v321 + 1) >> 62)
      goto LABEL_3660;
    v323 = v12 - (char *)v320;
    if (v323 >> 1 > v322)
      v322 = v323 >> 1;
    if ((unint64_t)v323 >= 0x7FFFFFFFFFFFFFFCLL)
      v324 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v324 = v322;
    if (v324)
    {
      v325 = (char *)sub_1DCAE4D04((uint64_t)v13, v324);
      v320 = *(unsigned __int32 **)a2;
      v301 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v325 = 0;
    }
    v336 = (unsigned __int32 *)&v325[4 * v321];
    v12 = &v325[4 * v324];
    *v336 = v48;
    v319 = v336 + 1;
    while (v301 != v320)
    {
      v337 = *--v301;
      *--v336 = v337;
    }
    *(_QWORD *)a2 = v336;
    *(_QWORD *)(a2 + 8) = v319;
    *(_QWORD *)(a2 + 16) = v12;
    if (v320)
    {
      operator delete(v320);
      v12 = *v13;
    }
  }
  else
  {
    *v301 = v48;
    v319 = v301 + 1;
  }
  *v9 = v319;
  if (v319 >= (unsigned __int32 *)v12)
  {
    v339 = *(unsigned __int32 **)a2;
    v340 = ((uint64_t)v319 - *(_QWORD *)a2) >> 2;
    v341 = v340 + 1;
    if ((unint64_t)(v340 + 1) >> 62)
      goto LABEL_3660;
    v342 = v12 - (char *)v339;
    if (v342 >> 1 > v341)
      v341 = v342 >> 1;
    if ((unint64_t)v342 >= 0x7FFFFFFFFFFFFFFCLL)
      v343 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v343 = v341;
    if (v343)
    {
      v344 = (char *)sub_1DCAE4D04((uint64_t)v13, v343);
      v339 = *(unsigned __int32 **)a2;
      v319 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v344 = 0;
    }
    v355 = &v344[4 * v340];
    v12 = &v344[4 * v343];
    *(_DWORD *)v355 = a5.n128_u32[0];
    v338 = (unsigned __int32 *)(v355 + 4);
    while (v319 != v339)
    {
      v356 = *--v319;
      *((_DWORD *)v355 - 1) = v356;
      v355 -= 4;
    }
    *(_QWORD *)a2 = v355;
    *(_QWORD *)(a2 + 8) = v338;
    *(_QWORD *)(a2 + 16) = v12;
    if (v339)
    {
      operator delete(v339);
      v12 = *v13;
    }
  }
  else
  {
    *v319 = a5.n128_u32[0];
    v338 = v319 + 1;
  }
  *v9 = v338;
  if (v338 >= (unsigned __int32 *)v12)
  {
    v358 = *(unsigned __int32 **)a2;
    v359 = ((uint64_t)v338 - *(_QWORD *)a2) >> 2;
    v360 = v359 + 1;
    if ((unint64_t)(v359 + 1) >> 62)
      goto LABEL_3660;
    v361 = v12 - (char *)v358;
    if (v361 >> 1 > v360)
      v360 = v361 >> 1;
    if ((unint64_t)v361 >= 0x7FFFFFFFFFFFFFFCLL)
      v362 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v362 = v360;
    if (v362)
    {
      v363 = (char *)sub_1DCAE4D04((uint64_t)v13, v362);
      v358 = *(unsigned __int32 **)a2;
      v338 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v363 = 0;
    }
    v373 = &v363[4 * v359];
    v12 = &v363[4 * v362];
    *(_DWORD *)v373 = a5.n128_u32[1];
    v357 = (unsigned __int32 *)(v373 + 4);
    while (v338 != v358)
    {
      v374 = *--v338;
      *((_DWORD *)v373 - 1) = v374;
      v373 -= 4;
    }
    *(_QWORD *)a2 = v373;
    *(_QWORD *)(a2 + 8) = v357;
    *(_QWORD *)(a2 + 16) = v12;
    if (v358)
    {
      operator delete(v358);
      v12 = *v13;
    }
  }
  else
  {
    *v338 = a5.n128_u32[1];
    v357 = v338 + 1;
  }
  *v9 = v357;
  if (v357 >= (unsigned __int32 *)v12)
  {
    v376 = *(unsigned __int32 **)a2;
    v377 = ((uint64_t)v357 - *(_QWORD *)a2) >> 2;
    v378 = v377 + 1;
    if ((unint64_t)(v377 + 1) >> 62)
      goto LABEL_3660;
    v379 = v12 - (char *)v376;
    if (v379 >> 1 > v378)
      v378 = v379 >> 1;
    if ((unint64_t)v379 >= 0x7FFFFFFFFFFFFFFCLL)
      v380 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v380 = v378;
    if (v380)
    {
      v381 = (char *)sub_1DCAE4D04((uint64_t)v13, v380);
      v376 = *(unsigned __int32 **)a2;
      v357 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v381 = 0;
    }
    v391 = (unsigned __int32 *)&v381[4 * v377];
    v12 = &v381[4 * v380];
    *v391 = v48;
    v375 = v391 + 1;
    while (v357 != v376)
    {
      v392 = *--v357;
      *--v391 = v392;
    }
    *(_QWORD *)a2 = v391;
    *(_QWORD *)(a2 + 8) = v375;
    *(_QWORD *)(a2 + 16) = v12;
    if (v376)
    {
      operator delete(v376);
      v12 = *v13;
    }
  }
  else
  {
    *v357 = v48;
    v375 = v357 + 1;
  }
  *v9 = v375;
  if (v375 >= (unsigned __int32 *)v12)
  {
    v394 = *(unsigned __int32 **)a2;
    v395 = ((uint64_t)v375 - *(_QWORD *)a2) >> 2;
    v396 = v395 + 1;
    if ((unint64_t)(v395 + 1) >> 62)
      goto LABEL_3660;
    v397 = v12 - (char *)v394;
    if (v397 >> 1 > v396)
      v396 = v397 >> 1;
    if ((unint64_t)v397 >= 0x7FFFFFFFFFFFFFFCLL)
      v398 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v398 = v396;
    if (v398)
    {
      v399 = (char *)sub_1DCAE4D04((uint64_t)v13, v398);
      v394 = *(unsigned __int32 **)a2;
      v375 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v399 = 0;
    }
    v409 = &v399[4 * v395];
    v12 = &v399[4 * v398];
    *(_DWORD *)v409 = a5.n128_u32[0];
    v393 = (unsigned __int32 *)(v409 + 4);
    while (v375 != v394)
    {
      v410 = *--v375;
      *((_DWORD *)v409 - 1) = v410;
      v409 -= 4;
    }
    *(_QWORD *)a2 = v409;
    *(_QWORD *)(a2 + 8) = v393;
    *(_QWORD *)(a2 + 16) = v12;
    if (v394)
    {
      operator delete(v394);
      v12 = *v13;
    }
  }
  else
  {
    *v375 = a5.n128_u32[0];
    v393 = v375 + 1;
  }
  *v9 = v393;
  if (v393 >= (unsigned __int32 *)v12)
  {
    v412 = *(unsigned __int32 **)a2;
    v413 = ((uint64_t)v393 - *(_QWORD *)a2) >> 2;
    v414 = v413 + 1;
    if ((unint64_t)(v413 + 1) >> 62)
      goto LABEL_3660;
    v415 = v12 - (char *)v412;
    if (v415 >> 1 > v414)
      v414 = v415 >> 1;
    if ((unint64_t)v415 >= 0x7FFFFFFFFFFFFFFCLL)
      v416 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v416 = v414;
    if (v416)
    {
      v417 = (char *)sub_1DCAE4D04((uint64_t)v13, v416);
      v412 = *(unsigned __int32 **)a2;
      v393 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v417 = 0;
    }
    v427 = &v417[4 * v413];
    v12 = &v417[4 * v416];
    *(_DWORD *)v427 = a5.n128_u32[1];
    v411 = (unsigned __int32 *)(v427 + 4);
    while (v393 != v412)
    {
      v428 = *--v393;
      *((_DWORD *)v427 - 1) = v428;
      v427 -= 4;
    }
    *(_QWORD *)a2 = v427;
    *(_QWORD *)(a2 + 8) = v411;
    *(_QWORD *)(a2 + 16) = v12;
    if (v412)
    {
      operator delete(v412);
      v12 = *v13;
    }
  }
  else
  {
    *v393 = a5.n128_u32[1];
    v411 = v393 + 1;
  }
  *v9 = v411;
  if (v411 >= (unsigned __int32 *)v12)
  {
    v430 = *(unsigned __int32 **)a2;
    v431 = ((uint64_t)v411 - *(_QWORD *)a2) >> 2;
    v432 = v431 + 1;
    if ((unint64_t)(v431 + 1) >> 62)
      goto LABEL_3660;
    v433 = v12 - (char *)v430;
    if (v433 >> 1 > v432)
      v432 = v433 >> 1;
    if ((unint64_t)v433 >= 0x7FFFFFFFFFFFFFFCLL)
      v434 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v434 = v432;
    if (v434)
    {
      v435 = (char *)sub_1DCAE4D04((uint64_t)v13, v434);
      v430 = *(unsigned __int32 **)a2;
      v411 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v435 = 0;
    }
    v445 = (unsigned __int32 *)&v435[4 * v431];
    v446 = &v435[4 * v434];
    *v445 = v48;
    v429 = v445 + 1;
    while (v411 != v430)
    {
      v447 = *--v411;
      *--v445 = v447;
    }
    *(_QWORD *)a2 = v445;
    *(_QWORD *)(a2 + 8) = v429;
    *(_QWORD *)(a2 + 16) = v446;
    if (v430)
      operator delete(v430);
  }
  else
  {
    *v411 = v48;
    v429 = v411 + 1;
  }
  v448 = v11 / 6;
  *v9 = v429;
  v450 = a3 + 2;
  v449 = a3[2];
  v451 = a3[1];
  if (v451 >= v449)
  {
    v453 = *a3;
    v454 = (v451 - *a3) >> 2;
    v455 = v454 + 1;
    if ((unint64_t)(v454 + 1) >> 62)
      goto LABEL_3661;
    v456 = v449 - v453;
    if (v456 >> 1 > v455)
      v455 = v456 >> 1;
    if ((unint64_t)v456 >= 0x7FFFFFFFFFFFFFFCLL)
      v457 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v457 = v455;
    if (v457)
    {
      v458 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v457);
      v453 = *a3;
      v451 = a3[1];
    }
    else
    {
      v458 = 0;
    }
    v473 = &v458[4 * v454];
    v449 = &v458[4 * v457];
    *(_DWORD *)v473 = v448;
    v452 = v473 + 4;
    while (v451 != v453)
    {
      v474 = *((_DWORD *)v451 - 1);
      v451 -= 4;
      *((_DWORD *)v473 - 1) = v474;
      v473 -= 4;
    }
    *a3 = v473;
    a3[1] = v452;
    a3[2] = v449;
    if (v453)
    {
      operator delete(v453);
      v449 = *v450;
    }
  }
  else
  {
    *(_DWORD *)v451 = v448;
    v452 = v451 + 4;
  }
  a3[1] = v452;
  v475 = v448 + 2;
  if (v452 >= v449)
  {
    v477 = *a3;
    v478 = (v452 - *a3) >> 2;
    v479 = v478 + 1;
    if ((unint64_t)(v478 + 1) >> 62)
      goto LABEL_3661;
    v480 = v449 - v477;
    if (v480 >> 1 > v479)
      v479 = v480 >> 1;
    if ((unint64_t)v480 >= 0x7FFFFFFFFFFFFFFCLL)
      v481 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v481 = v479;
    if (v481)
    {
      v482 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v481);
      v477 = *a3;
      v452 = a3[1];
    }
    else
    {
      v482 = 0;
    }
    v493 = &v482[4 * v478];
    v449 = &v482[4 * v481];
    *(_DWORD *)v493 = v475;
    v476 = v493 + 4;
    while (v452 != v477)
    {
      v494 = *((_DWORD *)v452 - 1);
      v452 -= 4;
      *((_DWORD *)v493 - 1) = v494;
      v493 -= 4;
    }
    *a3 = v493;
    a3[1] = v476;
    a3[2] = v449;
    if (v477)
    {
      operator delete(v477);
      v449 = *v450;
    }
  }
  else
  {
    *(_DWORD *)v452 = v475;
    v476 = v452 + 4;
  }
  a3[1] = v476;
  v495 = v448 + 1;
  v2148 = a3 + 2;
  if (v476 >= v449)
  {
    v497 = *a3;
    v498 = (v476 - *a3) >> 2;
    v499 = v498 + 1;
    if ((unint64_t)(v498 + 1) >> 62)
      goto LABEL_3661;
    v500 = v449 - v497;
    if (v500 >> 1 > v499)
      v499 = v500 >> 1;
    if ((unint64_t)v500 >= 0x7FFFFFFFFFFFFFFCLL)
      v501 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v501 = v499;
    if (v501)
    {
      v502 = (char *)sub_1DCAE4D04((uint64_t)(a3 + 2), v501);
      v497 = *a3;
      v476 = a3[1];
    }
    else
    {
      v502 = 0;
    }
    v512 = &v502[4 * v498];
    v449 = &v502[4 * v501];
    *(_DWORD *)v512 = v495;
    v496 = v512 + 4;
    while (v476 != v497)
    {
      v513 = *((_DWORD *)v476 - 1);
      v476 -= 4;
      *((_DWORD *)v512 - 1) = v513;
      v512 -= 4;
    }
    *a3 = v512;
    a3[1] = v496;
    a3[2] = v449;
    if (v497)
    {
      operator delete(v497);
      v449 = *v2148;
    }
  }
  else
  {
    *(_DWORD *)v476 = v495;
    v496 = v476 + 4;
  }
  a3[1] = v496;
  if (v496 >= v449)
  {
    v515 = *a3;
    v516 = (v496 - *a3) >> 2;
    v517 = v516 + 1;
    if ((unint64_t)(v516 + 1) >> 62)
      goto LABEL_3661;
    v518 = v449 - v515;
    if (v518 >> 1 > v517)
      v517 = v518 >> 1;
    if ((unint64_t)v518 >= 0x7FFFFFFFFFFFFFFCLL)
      v519 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v519 = v517;
    if (v519)
    {
      v520 = (char *)sub_1DCAE4D04((uint64_t)v2148, v519);
      v515 = *a3;
      v496 = a3[1];
    }
    else
    {
      v520 = 0;
    }
    v531 = &v520[4 * v516];
    v449 = &v520[4 * v519];
    *(_DWORD *)v531 = v495;
    v514 = v531 + 4;
    while (v496 != v515)
    {
      v532 = *((_DWORD *)v496 - 1);
      v496 -= 4;
      *((_DWORD *)v531 - 1) = v532;
      v531 -= 4;
    }
    *a3 = v531;
    a3[1] = v514;
    a3[2] = v449;
    if (v515)
    {
      operator delete(v515);
      v533 = a3 + 2;
      v449 = *v2148;
      goto LABEL_895;
    }
  }
  else
  {
    *(_DWORD *)v496 = v495;
    v514 = v496 + 4;
  }
  v533 = a3 + 2;
LABEL_895:
  a3[1] = v514;
  if (v514 >= v449)
  {
    v535 = *a3;
    v536 = (v514 - *a3) >> 2;
    v537 = v536 + 1;
    if ((unint64_t)(v536 + 1) >> 62)
      goto LABEL_3661;
    v538 = v449 - v535;
    if (v538 >> 1 > v537)
      v537 = v538 >> 1;
    if ((unint64_t)v538 >= 0x7FFFFFFFFFFFFFFCLL)
      v539 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v539 = v537;
    if (v539)
    {
      v540 = (char *)sub_1DCAE4D04((uint64_t)v533, v539);
      v535 = *a3;
      v514 = a3[1];
    }
    else
    {
      v540 = 0;
    }
    v550 = &v540[4 * v536];
    v449 = &v540[4 * v539];
    *(_DWORD *)v550 = v475;
    v534 = v550 + 4;
    while (v514 != v535)
    {
      v551 = *((_DWORD *)v514 - 1);
      v514 -= 4;
      *((_DWORD *)v550 - 1) = v551;
      v550 -= 4;
    }
    *a3 = v550;
    a3[1] = v534;
    a3[2] = v449;
    if (v535)
    {
      operator delete(v535);
      v449 = *v533;
    }
  }
  else
  {
    *(_DWORD *)v514 = v475;
    v534 = v514 + 4;
  }
  a3[1] = v534;
  v552 = v448 + 3;
  if (v534 >= v449)
  {
    v554 = *a3;
    v555 = (v534 - *a3) >> 2;
    v556 = v555 + 1;
    if ((unint64_t)(v555 + 1) >> 62)
      goto LABEL_3661;
    v557 = v449 - v554;
    if (v557 >> 1 > v556)
      v556 = v557 >> 1;
    if ((unint64_t)v557 >= 0x7FFFFFFFFFFFFFFCLL)
      v558 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v558 = v556;
    if (v558)
    {
      v559 = (char *)sub_1DCAE4D04((uint64_t)v533, v558);
      v554 = *a3;
      v534 = a3[1];
    }
    else
    {
      v559 = 0;
    }
    v570 = &v559[4 * v555];
    v571 = &v559[4 * v558];
    *(_DWORD *)v570 = v552;
    v553 = v570 + 4;
    while (v534 != v554)
    {
      v572 = *((_DWORD *)v534 - 1);
      v534 -= 4;
      *((_DWORD *)v570 - 1) = v572;
      v570 -= 4;
    }
    *a3 = v570;
    a3[1] = v553;
    a3[2] = v571;
    if (v554)
      operator delete(v554);
  }
  else
  {
    *(_DWORD *)v534 = v552;
    v553 = v534 + 4;
  }
  a3[1] = v553;
  v573 = *v9;
  v574 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v576 = *(unsigned __int32 **)a2;
    v577 = ((uint64_t)v573 - *(_QWORD *)a2) >> 2;
    v578 = v577 + 1;
    if ((unint64_t)(v577 + 1) >> 62)
      goto LABEL_3660;
    v579 = v574 - (char *)v576;
    if (v579 >> 1 > v578)
      v578 = v579 >> 1;
    if ((unint64_t)v579 >= 0x7FFFFFFFFFFFFFFCLL)
      v580 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v580 = v578;
    if (v580)
    {
      v581 = (char *)sub_1DCAE4D04((uint64_t)v13, v580);
      v576 = *(unsigned __int32 **)a2;
      v573 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v581 = 0;
    }
    v591 = &v581[4 * v577];
    v574 = &v581[4 * v580];
    *(_DWORD *)v591 = v2149.n128_u32[0];
    v575 = (unsigned __int32 *)(v591 + 4);
    while (v573 != v576)
    {
      v592 = *--v573;
      *((_DWORD *)v591 - 1) = v592;
      v591 -= 4;
    }
    *(_QWORD *)a2 = v591;
    *(_QWORD *)(a2 + 8) = v575;
    *(_QWORD *)(a2 + 16) = v574;
    if (v576)
    {
      operator delete(v576);
      v574 = *v13;
    }
  }
  else
  {
    *v573 = v2149.n128_u32[0];
    v575 = v573 + 1;
  }
  *v9 = v575;
  if (v575 >= (unsigned __int32 *)v574)
  {
    v594 = *(unsigned __int32 **)a2;
    v595 = ((uint64_t)v575 - *(_QWORD *)a2) >> 2;
    v596 = v595 + 1;
    if ((unint64_t)(v595 + 1) >> 62)
      goto LABEL_3660;
    v597 = v574 - (char *)v594;
    if (v597 >> 1 > v596)
      v596 = v597 >> 1;
    if ((unint64_t)v597 >= 0x7FFFFFFFFFFFFFFCLL)
      v598 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v598 = v596;
    if (v598)
    {
      v599 = (char *)sub_1DCAE4D04((uint64_t)v13, v598);
      v594 = *(unsigned __int32 **)a2;
      v575 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v599 = 0;
    }
    v610 = (unsigned __int32 *)&v599[4 * v595];
    v574 = &v599[4 * v598];
    *v610 = v28;
    v593 = v610 + 1;
    while (v575 != v594)
    {
      v611 = *--v575;
      *--v610 = v611;
    }
    *(_QWORD *)a2 = v610;
    *(_QWORD *)(a2 + 8) = v593;
    *(_QWORD *)(a2 + 16) = v574;
    if (v594)
    {
      operator delete(v594);
      v574 = *v13;
    }
  }
  else
  {
    *v575 = v28;
    v593 = v575 + 1;
  }
  *v9 = v593;
  if (v593 >= (unsigned __int32 *)v574)
  {
    v613 = *(unsigned __int32 **)a2;
    v614 = ((uint64_t)v593 - *(_QWORD *)a2) >> 2;
    v615 = v614 + 1;
    if ((unint64_t)(v614 + 1) >> 62)
      goto LABEL_3660;
    v616 = v574 - (char *)v613;
    if (v616 >> 1 > v615)
      v615 = v616 >> 1;
    if ((unint64_t)v616 >= 0x7FFFFFFFFFFFFFFCLL)
      v617 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v617 = v615;
    if (v617)
    {
      v618 = (char *)sub_1DCAE4D04((uint64_t)v13, v617);
      v613 = *(unsigned __int32 **)a2;
      v593 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v618 = 0;
    }
    v628 = (unsigned __int32 *)&v618[4 * v614];
    v574 = &v618[4 * v617];
    *v628 = v48;
    v612 = v628 + 1;
    while (v593 != v613)
    {
      v629 = *--v593;
      *--v628 = v629;
    }
    *(_QWORD *)a2 = v628;
    *(_QWORD *)(a2 + 8) = v612;
    *(_QWORD *)(a2 + 16) = v574;
    if (v613)
    {
      operator delete(v613);
      v574 = *v13;
    }
  }
  else
  {
    *v593 = v48;
    v612 = v593 + 1;
  }
  *v9 = v612;
  if (v612 >= (unsigned __int32 *)v574)
  {
    v631 = *(unsigned __int32 **)a2;
    v632 = ((uint64_t)v612 - *(_QWORD *)a2) >> 2;
    v633 = v632 + 1;
    if ((unint64_t)(v632 + 1) >> 62)
      goto LABEL_3660;
    v634 = v574 - (char *)v631;
    if (v634 >> 1 > v633)
      v633 = v634 >> 1;
    if ((unint64_t)v634 >= 0x7FFFFFFFFFFFFFFCLL)
      v635 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v635 = v633;
    if (v635)
    {
      v636 = (char *)sub_1DCAE4D04((uint64_t)v13, v635);
      v631 = *(unsigned __int32 **)a2;
      v612 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v636 = 0;
    }
    v647 = &v636[4 * v632];
    v574 = &v636[4 * v635];
    *(_DWORD *)v647 = v2149.n128_u32[0];
    v630 = (unsigned __int32 *)(v647 + 4);
    while (v612 != v631)
    {
      v648 = *--v612;
      *((_DWORD *)v647 - 1) = v648;
      v647 -= 4;
    }
    *(_QWORD *)a2 = v647;
    *(_QWORD *)(a2 + 8) = v630;
    *(_QWORD *)(a2 + 16) = v574;
    if (v631)
    {
      operator delete(v631);
      v574 = *v13;
    }
  }
  else
  {
    *v612 = v2149.n128_u32[0];
    v630 = v612 + 1;
  }
  *v9 = v630;
  if (v630 >= (unsigned __int32 *)v574)
  {
    v650 = *(unsigned __int32 **)a2;
    v651 = ((uint64_t)v630 - *(_QWORD *)a2) >> 2;
    v652 = v651 + 1;
    if ((unint64_t)(v651 + 1) >> 62)
      goto LABEL_3660;
    v653 = v574 - (char *)v650;
    if (v653 >> 1 > v652)
      v652 = v653 >> 1;
    if ((unint64_t)v653 >= 0x7FFFFFFFFFFFFFFCLL)
      v654 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v654 = v652;
    if (v654)
    {
      v655 = (char *)sub_1DCAE4D04((uint64_t)v13, v654);
      v650 = *(unsigned __int32 **)a2;
      v630 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v655 = 0;
    }
    v665 = (unsigned __int32 *)&v655[4 * v651];
    v574 = &v655[4 * v654];
    *v665 = v28;
    v649 = v665 + 1;
    while (v630 != v650)
    {
      v666 = *--v630;
      *--v665 = v666;
    }
    *(_QWORD *)a2 = v665;
    *(_QWORD *)(a2 + 8) = v649;
    *(_QWORD *)(a2 + 16) = v574;
    if (v650)
    {
      operator delete(v650);
      v574 = *v13;
    }
  }
  else
  {
    *v630 = v28;
    v649 = v630 + 1;
  }
  *v9 = v649;
  if (v649 >= (unsigned __int32 *)v574)
  {
    v668 = *(unsigned __int32 **)a2;
    v669 = ((uint64_t)v649 - *(_QWORD *)a2) >> 2;
    v670 = v669 + 1;
    if ((unint64_t)(v669 + 1) >> 62)
      goto LABEL_3660;
    v671 = v574 - (char *)v668;
    if (v671 >> 1 > v670)
      v670 = v671 >> 1;
    if ((unint64_t)v671 >= 0x7FFFFFFFFFFFFFFCLL)
      v672 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v672 = v670;
    if (v672)
    {
      v673 = (char *)sub_1DCAE4D04((uint64_t)v13, v672);
      v668 = *(unsigned __int32 **)a2;
      v649 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v673 = 0;
    }
    v683 = (unsigned __int32 *)&v673[4 * v669];
    v574 = &v673[4 * v672];
    *v683 = v48;
    v667 = v683 + 1;
    while (v649 != v668)
    {
      v684 = *--v649;
      *--v683 = v684;
    }
    *(_QWORD *)a2 = v683;
    *(_QWORD *)(a2 + 8) = v667;
    *(_QWORD *)(a2 + 16) = v574;
    if (v668)
    {
      operator delete(v668);
      v574 = *v13;
    }
  }
  else
  {
    *v649 = v48;
    v667 = v649 + 1;
  }
  *v9 = v667;
  if (v667 >= (unsigned __int32 *)v574)
  {
    v686 = *(unsigned __int32 **)a2;
    v687 = ((uint64_t)v667 - *(_QWORD *)a2) >> 2;
    v688 = v687 + 1;
    if ((unint64_t)(v687 + 1) >> 62)
      goto LABEL_3660;
    v689 = v574 - (char *)v686;
    if (v689 >> 1 > v688)
      v688 = v689 >> 1;
    if ((unint64_t)v689 >= 0x7FFFFFFFFFFFFFFCLL)
      v690 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v690 = v688;
    if (v690)
    {
      v691 = (char *)sub_1DCAE4D04((uint64_t)v13, v690);
      v686 = *(unsigned __int32 **)a2;
      v667 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v691 = 0;
    }
    v701 = &v691[4 * v687];
    v574 = &v691[4 * v690];
    *(_DWORD *)v701 = v2149.n128_u32[0];
    v685 = (unsigned __int32 *)(v701 + 4);
    while (v667 != v686)
    {
      v702 = *--v667;
      *((_DWORD *)v701 - 1) = v702;
      v701 -= 4;
    }
    *(_QWORD *)a2 = v701;
    *(_QWORD *)(a2 + 8) = v685;
    *(_QWORD *)(a2 + 16) = v574;
    if (v686)
    {
      operator delete(v686);
      v574 = *v13;
    }
  }
  else
  {
    *v667 = v2149.n128_u32[0];
    v685 = v667 + 1;
  }
  *v9 = v685;
  if (v685 >= (unsigned __int32 *)v574)
  {
    v704 = *(unsigned __int32 **)a2;
    v705 = ((uint64_t)v685 - *(_QWORD *)a2) >> 2;
    v706 = v705 + 1;
    if ((unint64_t)(v705 + 1) >> 62)
      goto LABEL_3660;
    v707 = v574 - (char *)v704;
    if (v707 >> 1 > v706)
      v706 = v707 >> 1;
    if ((unint64_t)v707 >= 0x7FFFFFFFFFFFFFFCLL)
      v708 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v708 = v706;
    if (v708)
    {
      v709 = (char *)sub_1DCAE4D04((uint64_t)v13, v708);
      v704 = *(unsigned __int32 **)a2;
      v685 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v709 = 0;
    }
    v720 = &v709[4 * v705];
    v574 = &v709[4 * v708];
    *(_DWORD *)v720 = a5.n128_u32[1];
    v703 = (unsigned __int32 *)(v720 + 4);
    while (v685 != v704)
    {
      v721 = *--v685;
      *((_DWORD *)v720 - 1) = v721;
      v720 -= 4;
    }
    *(_QWORD *)a2 = v720;
    *(_QWORD *)(a2 + 8) = v703;
    *(_QWORD *)(a2 + 16) = v574;
    if (v704)
    {
      operator delete(v704);
      v574 = *v13;
    }
  }
  else
  {
    *v685 = a5.n128_u32[1];
    v703 = v685 + 1;
  }
  *v9 = v703;
  if (v703 >= (unsigned __int32 *)v574)
  {
    v723 = *(unsigned __int32 **)a2;
    v724 = ((uint64_t)v703 - *(_QWORD *)a2) >> 2;
    v725 = v724 + 1;
    if ((unint64_t)(v724 + 1) >> 62)
      goto LABEL_3660;
    v726 = v574 - (char *)v723;
    if (v726 >> 1 > v725)
      v725 = v726 >> 1;
    if ((unint64_t)v726 >= 0x7FFFFFFFFFFFFFFCLL)
      v727 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v727 = v725;
    if (v727)
    {
      v728 = (char *)sub_1DCAE4D04((uint64_t)v13, v727);
      v723 = *(unsigned __int32 **)a2;
      v703 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v728 = 0;
    }
    v738 = (unsigned __int32 *)&v728[4 * v724];
    v574 = &v728[4 * v727];
    *v738 = v48;
    v722 = v738 + 1;
    while (v703 != v723)
    {
      v739 = *--v703;
      *--v738 = v739;
    }
    *(_QWORD *)a2 = v738;
    *(_QWORD *)(a2 + 8) = v722;
    *(_QWORD *)(a2 + 16) = v574;
    if (v723)
    {
      operator delete(v723);
      v574 = *v13;
    }
  }
  else
  {
    *v703 = v48;
    v722 = v703 + 1;
  }
  *v9 = v722;
  if (v722 >= (unsigned __int32 *)v574)
  {
    v741 = *(unsigned __int32 **)a2;
    v742 = ((uint64_t)v722 - *(_QWORD *)a2) >> 2;
    v743 = v742 + 1;
    if ((unint64_t)(v742 + 1) >> 62)
      goto LABEL_3660;
    v744 = v574 - (char *)v741;
    if (v744 >> 1 > v743)
      v743 = v744 >> 1;
    if ((unint64_t)v744 >= 0x7FFFFFFFFFFFFFFCLL)
      v745 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v745 = v743;
    if (v745)
    {
      v746 = (char *)sub_1DCAE4D04((uint64_t)v13, v745);
      v741 = *(unsigned __int32 **)a2;
      v722 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v746 = 0;
    }
    v757 = &v746[4 * v742];
    v574 = &v746[4 * v745];
    *(_DWORD *)v757 = v2149.n128_u32[0];
    v740 = (unsigned __int32 *)(v757 + 4);
    while (v722 != v741)
    {
      v758 = *--v722;
      *((_DWORD *)v757 - 1) = v758;
      v757 -= 4;
    }
    *(_QWORD *)a2 = v757;
    *(_QWORD *)(a2 + 8) = v740;
    *(_QWORD *)(a2 + 16) = v574;
    if (v741)
    {
      operator delete(v741);
      v574 = *v13;
    }
  }
  else
  {
    *v722 = v2149.n128_u32[0];
    v740 = v722 + 1;
  }
  *v9 = v740;
  if (v740 >= (unsigned __int32 *)v574)
  {
    v760 = *(unsigned __int32 **)a2;
    v761 = ((uint64_t)v740 - *(_QWORD *)a2) >> 2;
    v762 = v761 + 1;
    if ((unint64_t)(v761 + 1) >> 62)
      goto LABEL_3660;
    v763 = v574 - (char *)v760;
    if (v763 >> 1 > v762)
      v762 = v763 >> 1;
    if ((unint64_t)v763 >= 0x7FFFFFFFFFFFFFFCLL)
      v764 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v764 = v762;
    if (v764)
    {
      v765 = (char *)sub_1DCAE4D04((uint64_t)v13, v764);
      v760 = *(unsigned __int32 **)a2;
      v740 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v765 = 0;
    }
    v775 = &v765[4 * v761];
    v574 = &v765[4 * v764];
    *(_DWORD *)v775 = a5.n128_u32[1];
    v759 = (unsigned __int32 *)(v775 + 4);
    while (v740 != v760)
    {
      v776 = *--v740;
      *((_DWORD *)v775 - 1) = v776;
      v775 -= 4;
    }
    *(_QWORD *)a2 = v775;
    *(_QWORD *)(a2 + 8) = v759;
    *(_QWORD *)(a2 + 16) = v574;
    if (v760)
    {
      operator delete(v760);
      v574 = *v13;
    }
  }
  else
  {
    *v740 = a5.n128_u32[1];
    v759 = v740 + 1;
  }
  *v9 = v759;
  if (v759 >= (unsigned __int32 *)v574)
  {
    v778 = *(unsigned __int32 **)a2;
    v779 = ((uint64_t)v759 - *(_QWORD *)a2) >> 2;
    v780 = v779 + 1;
    if ((unint64_t)(v779 + 1) >> 62)
      goto LABEL_3660;
    v781 = v574 - (char *)v778;
    if (v781 >> 1 > v780)
      v780 = v781 >> 1;
    if ((unint64_t)v781 >= 0x7FFFFFFFFFFFFFFCLL)
      v782 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v782 = v780;
    if (v782)
    {
      v783 = (char *)sub_1DCAE4D04((uint64_t)v13, v782);
      v778 = *(unsigned __int32 **)a2;
      v759 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v783 = 0;
    }
    v793 = (unsigned __int32 *)&v783[4 * v779];
    v574 = &v783[4 * v782];
    *v793 = v48;
    v777 = v793 + 1;
    while (v759 != v778)
    {
      v794 = *--v759;
      *--v793 = v794;
    }
    *(_QWORD *)a2 = v793;
    *(_QWORD *)(a2 + 8) = v777;
    *(_QWORD *)(a2 + 16) = v574;
    if (v778)
    {
      operator delete(v778);
      v574 = *v13;
    }
  }
  else
  {
    *v759 = v48;
    v777 = v759 + 1;
  }
  *v9 = v777;
  if (v777 >= (unsigned __int32 *)v574)
  {
    v796 = *(unsigned __int32 **)a2;
    v797 = ((uint64_t)v777 - *(_QWORD *)a2) >> 2;
    v798 = v797 + 1;
    if ((unint64_t)(v797 + 1) >> 62)
      goto LABEL_3660;
    v799 = v574 - (char *)v796;
    if (v799 >> 1 > v798)
      v798 = v799 >> 1;
    if ((unint64_t)v799 >= 0x7FFFFFFFFFFFFFFCLL)
      v800 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v800 = v798;
    if (v800)
    {
      v801 = (char *)sub_1DCAE4D04((uint64_t)v13, v800);
      v796 = *(unsigned __int32 **)a2;
      v777 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v801 = 0;
    }
    v811 = &v801[4 * v797];
    v574 = &v801[4 * v800];
    *(_DWORD *)v811 = v2149.n128_u32[0];
    v795 = (unsigned __int32 *)(v811 + 4);
    while (v777 != v796)
    {
      v812 = *--v777;
      *((_DWORD *)v811 - 1) = v812;
      v811 -= 4;
    }
    *(_QWORD *)a2 = v811;
    *(_QWORD *)(a2 + 8) = v795;
    *(_QWORD *)(a2 + 16) = v574;
    if (v796)
    {
      operator delete(v796);
      v574 = *v13;
    }
  }
  else
  {
    *v777 = v2149.n128_u32[0];
    v795 = v777 + 1;
  }
  *v9 = v795;
  if (v795 >= (unsigned __int32 *)v574)
  {
    v814 = *(unsigned __int32 **)a2;
    v815 = ((uint64_t)v795 - *(_QWORD *)a2) >> 2;
    v816 = v815 + 1;
    if ((unint64_t)(v815 + 1) >> 62)
      goto LABEL_3660;
    v817 = v574 - (char *)v814;
    if (v817 >> 1 > v816)
      v816 = v817 >> 1;
    if ((unint64_t)v817 >= 0x7FFFFFFFFFFFFFFCLL)
      v818 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v818 = v816;
    if (v818)
    {
      v819 = (char *)sub_1DCAE4D04((uint64_t)v13, v818);
      v814 = *(unsigned __int32 **)a2;
      v795 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v819 = 0;
    }
    v829 = (unsigned __int32 *)&v819[4 * v815];
    v574 = &v819[4 * v818];
    *v829 = v28;
    v813 = v829 + 1;
    while (v795 != v814)
    {
      v830 = *--v795;
      *--v829 = v830;
    }
    *(_QWORD *)a2 = v829;
    *(_QWORD *)(a2 + 8) = v813;
    *(_QWORD *)(a2 + 16) = v574;
    if (v814)
    {
      operator delete(v814);
      v574 = *v13;
    }
  }
  else
  {
    *v795 = v28;
    v813 = v795 + 1;
  }
  *v9 = v813;
  if (v813 >= (unsigned __int32 *)v574)
  {
    v832 = *(unsigned __int32 **)a2;
    v833 = ((uint64_t)v813 - *(_QWORD *)a2) >> 2;
    v834 = v833 + 1;
    if ((unint64_t)(v833 + 1) >> 62)
      goto LABEL_3660;
    v835 = v574 - (char *)v832;
    if (v835 >> 1 > v834)
      v834 = v835 >> 1;
    if ((unint64_t)v835 >= 0x7FFFFFFFFFFFFFFCLL)
      v836 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v836 = v834;
    if (v836)
    {
      v837 = (char *)sub_1DCAE4D04((uint64_t)v13, v836);
      v832 = *(unsigned __int32 **)a2;
      v813 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v837 = 0;
    }
    v847 = &v837[4 * v833];
    v574 = &v837[4 * v836];
    *(_DWORD *)v847 = a5.n128_u32[2];
    v831 = (unsigned __int32 *)(v847 + 4);
    while (v813 != v832)
    {
      v848 = *--v813;
      *((_DWORD *)v847 - 1) = v848;
      v847 -= 4;
    }
    *(_QWORD *)a2 = v847;
    *(_QWORD *)(a2 + 8) = v831;
    *(_QWORD *)(a2 + 16) = v574;
    if (v832)
    {
      operator delete(v832);
      v574 = *v13;
    }
  }
  else
  {
    *v813 = a5.n128_u32[2];
    v831 = v813 + 1;
  }
  *v9 = v831;
  if (v831 >= (unsigned __int32 *)v574)
  {
    v850 = *(unsigned __int32 **)a2;
    v851 = ((uint64_t)v831 - *(_QWORD *)a2) >> 2;
    v852 = v851 + 1;
    if ((unint64_t)(v851 + 1) >> 62)
      goto LABEL_3660;
    v853 = v574 - (char *)v850;
    if (v853 >> 1 > v852)
      v852 = v853 >> 1;
    if ((unint64_t)v853 >= 0x7FFFFFFFFFFFFFFCLL)
      v854 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v854 = v852;
    if (v854)
    {
      v855 = (char *)sub_1DCAE4D04((uint64_t)v13, v854);
      v850 = *(unsigned __int32 **)a2;
      v831 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v855 = 0;
    }
    v865 = &v855[4 * v851];
    v574 = &v855[4 * v854];
    *(_DWORD *)v865 = v2149.n128_u32[0];
    v849 = (unsigned __int32 *)(v865 + 4);
    while (v831 != v850)
    {
      v866 = *--v831;
      *((_DWORD *)v865 - 1) = v866;
      v865 -= 4;
    }
    *(_QWORD *)a2 = v865;
    *(_QWORD *)(a2 + 8) = v849;
    *(_QWORD *)(a2 + 16) = v574;
    if (v850)
    {
      operator delete(v850);
      v574 = *v13;
    }
  }
  else
  {
    *v831 = v2149.n128_u32[0];
    v849 = v831 + 1;
  }
  *v9 = v849;
  if (v849 >= (unsigned __int32 *)v574)
  {
    v868 = *(unsigned __int32 **)a2;
    v869 = ((uint64_t)v849 - *(_QWORD *)a2) >> 2;
    v870 = v869 + 1;
    if ((unint64_t)(v869 + 1) >> 62)
      goto LABEL_3660;
    v871 = v574 - (char *)v868;
    if (v871 >> 1 > v870)
      v870 = v871 >> 1;
    if ((unint64_t)v871 >= 0x7FFFFFFFFFFFFFFCLL)
      v872 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v872 = v870;
    if (v872)
    {
      v873 = (char *)sub_1DCAE4D04((uint64_t)v13, v872);
      v868 = *(unsigned __int32 **)a2;
      v849 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v873 = 0;
    }
    v883 = (unsigned __int32 *)&v873[4 * v869];
    v574 = &v873[4 * v872];
    *v883 = v28;
    v867 = v883 + 1;
    while (v849 != v868)
    {
      v884 = *--v849;
      *--v883 = v884;
    }
    *(_QWORD *)a2 = v883;
    *(_QWORD *)(a2 + 8) = v867;
    *(_QWORD *)(a2 + 16) = v574;
    if (v868)
    {
      operator delete(v868);
      v574 = *v13;
    }
  }
  else
  {
    *v849 = v28;
    v867 = v849 + 1;
  }
  *v9 = v867;
  if (v867 >= (unsigned __int32 *)v574)
  {
    v886 = *(unsigned __int32 **)a2;
    v887 = ((uint64_t)v867 - *(_QWORD *)a2) >> 2;
    v888 = v887 + 1;
    if ((unint64_t)(v887 + 1) >> 62)
      goto LABEL_3660;
    v889 = v574 - (char *)v886;
    if (v889 >> 1 > v888)
      v888 = v889 >> 1;
    if ((unint64_t)v889 >= 0x7FFFFFFFFFFFFFFCLL)
      v890 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v890 = v888;
    if (v890)
    {
      v891 = (char *)sub_1DCAE4D04((uint64_t)v13, v890);
      v886 = *(unsigned __int32 **)a2;
      v867 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v891 = 0;
    }
    v901 = &v891[4 * v887];
    v574 = &v891[4 * v890];
    *(_DWORD *)v901 = a5.n128_u32[2];
    v885 = (unsigned __int32 *)(v901 + 4);
    while (v867 != v886)
    {
      v902 = *--v867;
      *((_DWORD *)v901 - 1) = v902;
      v901 -= 4;
    }
    *(_QWORD *)a2 = v901;
    *(_QWORD *)(a2 + 8) = v885;
    *(_QWORD *)(a2 + 16) = v574;
    if (v886)
    {
      operator delete(v886);
      v574 = *v13;
    }
  }
  else
  {
    *v867 = a5.n128_u32[2];
    v885 = v867 + 1;
  }
  *v9 = v885;
  if (v885 >= (unsigned __int32 *)v574)
  {
    v904 = *(unsigned __int32 **)a2;
    v905 = ((uint64_t)v885 - *(_QWORD *)a2) >> 2;
    v906 = v905 + 1;
    if ((unint64_t)(v905 + 1) >> 62)
      goto LABEL_3660;
    v907 = v574 - (char *)v904;
    if (v907 >> 1 > v906)
      v906 = v907 >> 1;
    if ((unint64_t)v907 >= 0x7FFFFFFFFFFFFFFCLL)
      v908 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v908 = v906;
    if (v908)
    {
      v909 = (char *)sub_1DCAE4D04((uint64_t)v13, v908);
      v904 = *(unsigned __int32 **)a2;
      v885 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v909 = 0;
    }
    v913 = &v909[4 * v905];
    v574 = &v909[4 * v908];
    *(_DWORD *)v913 = v2149.n128_u32[0];
    v903 = (unsigned __int32 *)(v913 + 4);
    while (v885 != v904)
    {
      v914 = *--v885;
      *((_DWORD *)v913 - 1) = v914;
      v913 -= 4;
    }
    *(_QWORD *)a2 = v913;
    *(_QWORD *)(a2 + 8) = v903;
    *(_QWORD *)(a2 + 16) = v574;
    if (v904)
    {
      operator delete(v904);
      v574 = *v13;
    }
  }
  else
  {
    *v885 = v2149.n128_u32[0];
    v903 = v885 + 1;
  }
  *v9 = v903;
  if (v903 >= (unsigned __int32 *)v574)
  {
    v916 = *(unsigned __int32 **)a2;
    v917 = ((uint64_t)v903 - *(_QWORD *)a2) >> 2;
    v918 = v917 + 1;
    if ((unint64_t)(v917 + 1) >> 62)
      goto LABEL_3660;
    v919 = v574 - (char *)v916;
    if (v919 >> 1 > v918)
      v918 = v919 >> 1;
    if ((unint64_t)v919 >= 0x7FFFFFFFFFFFFFFCLL)
      v920 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v920 = v918;
    if (v920)
    {
      v921 = (char *)sub_1DCAE4D04((uint64_t)v13, v920);
      v916 = *(unsigned __int32 **)a2;
      v903 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v921 = 0;
    }
    v922 = &v921[4 * v917];
    v574 = &v921[4 * v920];
    *(_DWORD *)v922 = a5.n128_u32[1];
    v915 = (unsigned __int32 *)(v922 + 4);
    while (v903 != v916)
    {
      v923 = *--v903;
      *((_DWORD *)v922 - 1) = v923;
      v922 -= 4;
    }
    *(_QWORD *)a2 = v922;
    *(_QWORD *)(a2 + 8) = v915;
    *(_QWORD *)(a2 + 16) = v574;
    if (v916)
    {
      operator delete(v916);
      v574 = *v13;
    }
  }
  else
  {
    *v903 = a5.n128_u32[1];
    v915 = v903 + 1;
  }
  *v9 = v915;
  if (v915 >= (unsigned __int32 *)v574)
  {
    v925 = *(unsigned __int32 **)a2;
    v926 = ((uint64_t)v915 - *(_QWORD *)a2) >> 2;
    v927 = v926 + 1;
    if ((unint64_t)(v926 + 1) >> 62)
      goto LABEL_3660;
    v928 = v574 - (char *)v925;
    if (v928 >> 1 > v927)
      v927 = v928 >> 1;
    if ((unint64_t)v928 >= 0x7FFFFFFFFFFFFFFCLL)
      v929 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v929 = v927;
    if (v929)
    {
      v930 = (char *)sub_1DCAE4D04((uint64_t)v13, v929);
      v925 = *(unsigned __int32 **)a2;
      v915 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v930 = 0;
    }
    v931 = &v930[4 * v926];
    v574 = &v930[4 * v929];
    *(_DWORD *)v931 = a5.n128_u32[2];
    v924 = (unsigned __int32 *)(v931 + 4);
    while (v915 != v925)
    {
      v932 = *--v915;
      *((_DWORD *)v931 - 1) = v932;
      v931 -= 4;
    }
    *(_QWORD *)a2 = v931;
    *(_QWORD *)(a2 + 8) = v924;
    *(_QWORD *)(a2 + 16) = v574;
    if (v925)
    {
      operator delete(v925);
      v574 = *v13;
    }
  }
  else
  {
    *v915 = a5.n128_u32[2];
    v924 = v915 + 1;
  }
  *v9 = v924;
  if (v924 >= (unsigned __int32 *)v574)
  {
    v934 = *(unsigned __int32 **)a2;
    v935 = ((uint64_t)v924 - *(_QWORD *)a2) >> 2;
    v936 = v935 + 1;
    if ((unint64_t)(v935 + 1) >> 62)
      goto LABEL_3660;
    v937 = v574 - (char *)v934;
    if (v937 >> 1 > v936)
      v936 = v937 >> 1;
    if ((unint64_t)v937 >= 0x7FFFFFFFFFFFFFFCLL)
      v938 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v938 = v936;
    if (v938)
    {
      v939 = (char *)sub_1DCAE4D04((uint64_t)v13, v938);
      v934 = *(unsigned __int32 **)a2;
      v924 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v939 = 0;
    }
    v940 = &v939[4 * v935];
    v574 = &v939[4 * v938];
    *(_DWORD *)v940 = v2149.n128_u32[0];
    v933 = (unsigned __int32 *)(v940 + 4);
    while (v924 != v934)
    {
      v941 = *--v924;
      *((_DWORD *)v940 - 1) = v941;
      v940 -= 4;
    }
    *(_QWORD *)a2 = v940;
    *(_QWORD *)(a2 + 8) = v933;
    *(_QWORD *)(a2 + 16) = v574;
    if (v934)
    {
      operator delete(v934);
      v574 = *v13;
    }
  }
  else
  {
    *v924 = v2149.n128_u32[0];
    v933 = v924 + 1;
  }
  *v9 = v933;
  if (v933 >= (unsigned __int32 *)v574)
  {
    v943 = *(unsigned __int32 **)a2;
    v944 = ((uint64_t)v933 - *(_QWORD *)a2) >> 2;
    v945 = v944 + 1;
    if ((unint64_t)(v944 + 1) >> 62)
      goto LABEL_3660;
    v946 = v574 - (char *)v943;
    if (v946 >> 1 > v945)
      v945 = v946 >> 1;
    if ((unint64_t)v946 >= 0x7FFFFFFFFFFFFFFCLL)
      v947 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v947 = v945;
    if (v947)
    {
      v948 = (char *)sub_1DCAE4D04((uint64_t)v13, v947);
      v943 = *(unsigned __int32 **)a2;
      v933 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v948 = 0;
    }
    v949 = &v948[4 * v944];
    v574 = &v948[4 * v947];
    *(_DWORD *)v949 = a5.n128_u32[1];
    v942 = (unsigned __int32 *)(v949 + 4);
    while (v933 != v943)
    {
      v950 = *--v933;
      *((_DWORD *)v949 - 1) = v950;
      v949 -= 4;
    }
    *(_QWORD *)a2 = v949;
    *(_QWORD *)(a2 + 8) = v942;
    *(_QWORD *)(a2 + 16) = v574;
    if (v943)
    {
      operator delete(v943);
      v574 = *v13;
    }
  }
  else
  {
    *v933 = a5.n128_u32[1];
    v942 = v933 + 1;
  }
  *v9 = v942;
  if (v942 >= (unsigned __int32 *)v574)
  {
    v952 = *(unsigned __int32 **)a2;
    v953 = ((uint64_t)v942 - *(_QWORD *)a2) >> 2;
    v954 = v953 + 1;
    if ((unint64_t)(v953 + 1) >> 62)
      goto LABEL_3660;
    v955 = v574 - (char *)v952;
    if (v955 >> 1 > v954)
      v954 = v955 >> 1;
    if ((unint64_t)v955 >= 0x7FFFFFFFFFFFFFFCLL)
      v956 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v956 = v954;
    if (v956)
    {
      v957 = (char *)sub_1DCAE4D04((uint64_t)v13, v956);
      v952 = *(unsigned __int32 **)a2;
      v942 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v957 = 0;
    }
    v958 = &v957[4 * v953];
    v959 = &v957[4 * v956];
    *(_DWORD *)v958 = a5.n128_u32[2];
    v951 = (unsigned __int32 *)(v958 + 4);
    while (v942 != v952)
    {
      v960 = *--v942;
      *((_DWORD *)v958 - 1) = v960;
      v958 -= 4;
    }
    *(_QWORD *)a2 = v958;
    *(_QWORD *)(a2 + 8) = v951;
    *(_QWORD *)(a2 + 16) = v959;
    if (v952)
      operator delete(v952);
  }
  else
  {
    *v942 = a5.n128_u32[2];
    v951 = v942 + 1;
  }
  *v9 = v951;
  v961 = v448 + 4;
  v963 = a3[1];
  v962 = a3[2];
  if (v963 >= v962)
  {
    v965 = *a3;
    v966 = (v963 - *a3) >> 2;
    v967 = v966 + 1;
    if ((unint64_t)(v966 + 1) >> 62)
      goto LABEL_3661;
    v968 = v962 - v965;
    if (v968 >> 1 > v967)
      v967 = v968 >> 1;
    if ((unint64_t)v968 >= 0x7FFFFFFFFFFFFFFCLL)
      v969 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v969 = v967;
    if (v969)
    {
      v970 = (char *)sub_1DCAE4D04((uint64_t)v533, v969);
      v965 = *a3;
      v963 = a3[1];
    }
    else
    {
      v970 = 0;
    }
    v971 = &v970[4 * v966];
    v962 = &v970[4 * v969];
    *(_DWORD *)v971 = v961;
    v964 = v971 + 4;
    while (v963 != v965)
    {
      v972 = *((_DWORD *)v963 - 1);
      v963 -= 4;
      *((_DWORD *)v971 - 1) = v972;
      v971 -= 4;
    }
    *a3 = v971;
    a3[1] = v964;
    a3[2] = v962;
    if (v965)
    {
      operator delete(v965);
      v962 = *v533;
    }
  }
  else
  {
    *(_DWORD *)v963 = v961;
    v964 = v963 + 4;
  }
  a3[1] = v964;
  v973 = v448 + 6;
  if (v964 >= v962)
  {
    v975 = *a3;
    v976 = (v964 - *a3) >> 2;
    v977 = v976 + 1;
    if ((unint64_t)(v976 + 1) >> 62)
      goto LABEL_3661;
    v978 = v962 - v975;
    if (v978 >> 1 > v977)
      v977 = v978 >> 1;
    if ((unint64_t)v978 >= 0x7FFFFFFFFFFFFFFCLL)
      v979 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v979 = v977;
    if (v979)
    {
      v980 = (char *)sub_1DCAE4D04((uint64_t)v533, v979);
      v975 = *a3;
      v964 = a3[1];
    }
    else
    {
      v980 = 0;
    }
    v981 = &v980[4 * v976];
    v962 = &v980[4 * v979];
    *(_DWORD *)v981 = v973;
    v974 = v981 + 4;
    while (v964 != v975)
    {
      v982 = *((_DWORD *)v964 - 1);
      v964 -= 4;
      *((_DWORD *)v981 - 1) = v982;
      v981 -= 4;
    }
    *a3 = v981;
    a3[1] = v974;
    a3[2] = v962;
    if (v975)
    {
      operator delete(v975);
      v962 = *v533;
    }
  }
  else
  {
    *(_DWORD *)v964 = v973;
    v974 = v964 + 4;
  }
  a3[1] = v974;
  v983 = v448 + 5;
  if (v974 >= v962)
  {
    v985 = *a3;
    v986 = (v974 - *a3) >> 2;
    v987 = v986 + 1;
    if ((unint64_t)(v986 + 1) >> 62)
      goto LABEL_3661;
    v988 = v962 - v985;
    if (v988 >> 1 > v987)
      v987 = v988 >> 1;
    if ((unint64_t)v988 >= 0x7FFFFFFFFFFFFFFCLL)
      v989 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v989 = v987;
    if (v989)
    {
      v990 = (char *)sub_1DCAE4D04((uint64_t)v533, v989);
      v985 = *a3;
      v974 = a3[1];
    }
    else
    {
      v990 = 0;
    }
    v991 = &v990[4 * v986];
    v962 = &v990[4 * v989];
    *(_DWORD *)v991 = v983;
    v984 = v991 + 4;
    while (v974 != v985)
    {
      v992 = *((_DWORD *)v974 - 1);
      v974 -= 4;
      *((_DWORD *)v991 - 1) = v992;
      v991 -= 4;
    }
    *a3 = v991;
    a3[1] = v984;
    a3[2] = v962;
    if (v985)
    {
      operator delete(v985);
      v962 = *v2148;
    }
  }
  else
  {
    *(_DWORD *)v974 = v983;
    v984 = v974 + 4;
  }
  a3[1] = v984;
  if (v984 >= v962)
  {
    v994 = *a3;
    v995 = (v984 - *a3) >> 2;
    v996 = v995 + 1;
    if ((unint64_t)(v995 + 1) >> 62)
      goto LABEL_3661;
    v997 = v962 - v994;
    if (v997 >> 1 > v996)
      v996 = v997 >> 1;
    if ((unint64_t)v997 >= 0x7FFFFFFFFFFFFFFCLL)
      v998 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v998 = v996;
    if (v998)
    {
      v999 = (char *)sub_1DCAE4D04((uint64_t)v2148, v998);
      v994 = *a3;
      v984 = a3[1];
    }
    else
    {
      v999 = 0;
    }
    v1000 = &v999[4 * v995];
    v962 = &v999[4 * v998];
    *(_DWORD *)v1000 = v983;
    v993 = v1000 + 4;
    while (v984 != v994)
    {
      v1001 = *((_DWORD *)v984 - 1);
      v984 -= 4;
      *((_DWORD *)v1000 - 1) = v1001;
      v1000 -= 4;
    }
    *a3 = v1000;
    a3[1] = v993;
    a3[2] = v962;
    if (v994)
    {
      operator delete(v994);
      v1002 = a3 + 2;
      v962 = *v2148;
      goto LABEL_1703;
    }
  }
  else
  {
    *(_DWORD *)v984 = v983;
    v993 = v984 + 4;
  }
  v1002 = a3 + 2;
LABEL_1703:
  a3[1] = v993;
  if (v993 >= v962)
  {
    v1004 = *a3;
    v1005 = (v993 - *a3) >> 2;
    v1006 = v1005 + 1;
    if ((unint64_t)(v1005 + 1) >> 62)
      goto LABEL_3661;
    v1007 = v962 - v1004;
    if (v1007 >> 1 > v1006)
      v1006 = v1007 >> 1;
    if ((unint64_t)v1007 >= 0x7FFFFFFFFFFFFFFCLL)
      v1008 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1008 = v1006;
    if (v1008)
    {
      v1009 = (char *)sub_1DCAE4D04((uint64_t)v1002, v1008);
      v1004 = *a3;
      v993 = a3[1];
    }
    else
    {
      v1009 = 0;
    }
    v1010 = &v1009[4 * v1005];
    v962 = &v1009[4 * v1008];
    *(_DWORD *)v1010 = v973;
    v1003 = v1010 + 4;
    while (v993 != v1004)
    {
      v1011 = *((_DWORD *)v993 - 1);
      v993 -= 4;
      *((_DWORD *)v1010 - 1) = v1011;
      v1010 -= 4;
    }
    *a3 = v1010;
    a3[1] = v1003;
    a3[2] = v962;
    if (v1004)
    {
      operator delete(v1004);
      v962 = *v1002;
    }
  }
  else
  {
    *(_DWORD *)v993 = v973;
    v1003 = v993 + 4;
  }
  a3[1] = v1003;
  v1012 = v448 + 7;
  if (v1003 >= v962)
  {
    v1014 = *a3;
    v1015 = (v1003 - *a3) >> 2;
    v1016 = v1015 + 1;
    if ((unint64_t)(v1015 + 1) >> 62)
      goto LABEL_3661;
    v1017 = v962 - v1014;
    if (v1017 >> 1 > v1016)
      v1016 = v1017 >> 1;
    if ((unint64_t)v1017 >= 0x7FFFFFFFFFFFFFFCLL)
      v1018 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1018 = v1016;
    if (v1018)
    {
      v1019 = (char *)sub_1DCAE4D04((uint64_t)v1002, v1018);
      v1014 = *a3;
      v1003 = a3[1];
    }
    else
    {
      v1019 = 0;
    }
    v1020 = &v1019[4 * v1015];
    v1021 = &v1019[4 * v1018];
    *(_DWORD *)v1020 = v1012;
    v1013 = v1020 + 4;
    while (v1003 != v1014)
    {
      v1022 = *((_DWORD *)v1003 - 1);
      v1003 -= 4;
      *((_DWORD *)v1020 - 1) = v1022;
      v1020 -= 4;
    }
    *a3 = v1020;
    a3[1] = v1013;
    a3[2] = v1021;
    if (v1014)
      operator delete(v1014);
  }
  else
  {
    *(_DWORD *)v1003 = v1012;
    v1013 = v1003 + 4;
  }
  a3[1] = v1013;
  v1023 = *v9;
  v1024 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v1026 = *(unsigned __int32 **)a2;
    v1027 = ((uint64_t)v1023 - *(_QWORD *)a2) >> 2;
    v1028 = v1027 + 1;
    if ((unint64_t)(v1027 + 1) >> 62)
      goto LABEL_3660;
    v1029 = v1024 - (char *)v1026;
    if (v1029 >> 1 > v1028)
      v1028 = v1029 >> 1;
    if ((unint64_t)v1029 >= 0x7FFFFFFFFFFFFFFCLL)
      v1030 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1030 = v1028;
    if (v1030)
    {
      v1031 = (char *)sub_1DCAE4D04((uint64_t)v13, v1030);
      v1026 = *(unsigned __int32 **)a2;
      v1023 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1031 = 0;
    }
    v1032 = &v1031[4 * v1027];
    v1024 = &v1031[4 * v1030];
    *(_DWORD *)v1032 = v2149.n128_u32[0];
    v1025 = (unsigned __int32 *)(v1032 + 4);
    while (v1023 != v1026)
    {
      v1033 = *--v1023;
      *((_DWORD *)v1032 - 1) = v1033;
      v1032 -= 4;
    }
    *(_QWORD *)a2 = v1032;
    *(_QWORD *)(a2 + 8) = v1025;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1026)
    {
      operator delete(v1026);
      v1024 = *v13;
    }
  }
  else
  {
    *v1023 = v2149.n128_u32[0];
    v1025 = v1023 + 1;
  }
  *v9 = v1025;
  if (v1025 >= (unsigned __int32 *)v1024)
  {
    v1035 = *(unsigned __int32 **)a2;
    v1036 = ((uint64_t)v1025 - *(_QWORD *)a2) >> 2;
    v1037 = v1036 + 1;
    if ((unint64_t)(v1036 + 1) >> 62)
      goto LABEL_3660;
    v1038 = v1024 - (char *)v1035;
    if (v1038 >> 1 > v1037)
      v1037 = v1038 >> 1;
    if ((unint64_t)v1038 >= 0x7FFFFFFFFFFFFFFCLL)
      v1039 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1039 = v1037;
    if (v1039)
    {
      v1040 = (char *)sub_1DCAE4D04((uint64_t)v13, v1039);
      v1035 = *(unsigned __int32 **)a2;
      v1025 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1040 = 0;
    }
    v1041 = (unsigned __int32 *)&v1040[4 * v1036];
    v1024 = &v1040[4 * v1039];
    *v1041 = v28;
    v1034 = v1041 + 1;
    while (v1025 != v1035)
    {
      v1042 = *--v1025;
      *--v1041 = v1042;
    }
    *(_QWORD *)a2 = v1041;
    *(_QWORD *)(a2 + 8) = v1034;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1035)
    {
      operator delete(v1035);
      v1024 = *v13;
    }
  }
  else
  {
    *v1025 = v28;
    v1034 = v1025 + 1;
  }
  *v9 = v1034;
  if (v1034 >= (unsigned __int32 *)v1024)
  {
    v1044 = *(unsigned __int32 **)a2;
    v1045 = ((uint64_t)v1034 - *(_QWORD *)a2) >> 2;
    v1046 = v1045 + 1;
    if ((unint64_t)(v1045 + 1) >> 62)
      goto LABEL_3660;
    v1047 = v1024 - (char *)v1044;
    if (v1047 >> 1 > v1046)
      v1046 = v1047 >> 1;
    if ((unint64_t)v1047 >= 0x7FFFFFFFFFFFFFFCLL)
      v1048 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1048 = v1046;
    if (v1048)
    {
      v1049 = (char *)sub_1DCAE4D04((uint64_t)v13, v1048);
      v1044 = *(unsigned __int32 **)a2;
      v1034 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1049 = 0;
    }
    v1050 = &v1049[4 * v1045];
    v1024 = &v1049[4 * v1048];
    *(_DWORD *)v1050 = a5.n128_u32[2];
    v1043 = (unsigned __int32 *)(v1050 + 4);
    while (v1034 != v1044)
    {
      v1051 = *--v1034;
      *((_DWORD *)v1050 - 1) = v1051;
      v1050 -= 4;
    }
    *(_QWORD *)a2 = v1050;
    *(_QWORD *)(a2 + 8) = v1043;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1044)
    {
      operator delete(v1044);
      v1024 = *v13;
    }
  }
  else
  {
    *v1034 = a5.n128_u32[2];
    v1043 = v1034 + 1;
  }
  *v9 = v1043;
  if (v1043 >= (unsigned __int32 *)v1024)
  {
    v1053 = *(unsigned __int32 **)a2;
    v1054 = ((uint64_t)v1043 - *(_QWORD *)a2) >> 2;
    v1055 = v1054 + 1;
    if ((unint64_t)(v1054 + 1) >> 62)
      goto LABEL_3660;
    v1056 = v1024 - (char *)v1053;
    if (v1056 >> 1 > v1055)
      v1055 = v1056 >> 1;
    if ((unint64_t)v1056 >= 0x7FFFFFFFFFFFFFFCLL)
      v1057 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1057 = v1055;
    if (v1057)
    {
      v1058 = (char *)sub_1DCAE4D04((uint64_t)v13, v1057);
      v1053 = *(unsigned __int32 **)a2;
      v1043 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1058 = 0;
    }
    v1059 = &v1058[4 * v1054];
    v1024 = &v1058[4 * v1057];
    *(_DWORD *)v1059 = v2149.n128_u32[0];
    v1052 = (unsigned __int32 *)(v1059 + 4);
    while (v1043 != v1053)
    {
      v1060 = *--v1043;
      *((_DWORD *)v1059 - 1) = v1060;
      v1059 -= 4;
    }
    *(_QWORD *)a2 = v1059;
    *(_QWORD *)(a2 + 8) = v1052;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1053)
    {
      operator delete(v1053);
      v1024 = *v13;
    }
  }
  else
  {
    *v1043 = v2149.n128_u32[0];
    v1052 = v1043 + 1;
  }
  *v9 = v1052;
  if (v1052 >= (unsigned __int32 *)v1024)
  {
    v1062 = *(unsigned __int32 **)a2;
    v1063 = ((uint64_t)v1052 - *(_QWORD *)a2) >> 2;
    v1064 = v1063 + 1;
    if ((unint64_t)(v1063 + 1) >> 62)
      goto LABEL_3660;
    v1065 = v1024 - (char *)v1062;
    if (v1065 >> 1 > v1064)
      v1064 = v1065 >> 1;
    if ((unint64_t)v1065 >= 0x7FFFFFFFFFFFFFFCLL)
      v1066 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1066 = v1064;
    if (v1066)
    {
      v1067 = (char *)sub_1DCAE4D04((uint64_t)v13, v1066);
      v1062 = *(unsigned __int32 **)a2;
      v1052 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1067 = 0;
    }
    v1068 = (unsigned __int32 *)&v1067[4 * v1063];
    v1024 = &v1067[4 * v1066];
    *v1068 = v28;
    v1061 = v1068 + 1;
    while (v1052 != v1062)
    {
      v1069 = *--v1052;
      *--v1068 = v1069;
    }
    *(_QWORD *)a2 = v1068;
    *(_QWORD *)(a2 + 8) = v1061;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1062)
    {
      operator delete(v1062);
      v1024 = *v13;
    }
  }
  else
  {
    *v1052 = v28;
    v1061 = v1052 + 1;
  }
  *v9 = v1061;
  if (v1061 >= (unsigned __int32 *)v1024)
  {
    v1071 = *(unsigned __int32 **)a2;
    v1072 = ((uint64_t)v1061 - *(_QWORD *)a2) >> 2;
    v1073 = v1072 + 1;
    if ((unint64_t)(v1072 + 1) >> 62)
      goto LABEL_3660;
    v1074 = v1024 - (char *)v1071;
    if (v1074 >> 1 > v1073)
      v1073 = v1074 >> 1;
    if ((unint64_t)v1074 >= 0x7FFFFFFFFFFFFFFCLL)
      v1075 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1075 = v1073;
    if (v1075)
    {
      v1076 = (char *)sub_1DCAE4D04((uint64_t)v13, v1075);
      v1071 = *(unsigned __int32 **)a2;
      v1061 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1076 = 0;
    }
    v1077 = &v1076[4 * v1072];
    v1024 = &v1076[4 * v1075];
    *(_DWORD *)v1077 = a5.n128_u32[2];
    v1070 = (unsigned __int32 *)(v1077 + 4);
    while (v1061 != v1071)
    {
      v1078 = *--v1061;
      *((_DWORD *)v1077 - 1) = v1078;
      v1077 -= 4;
    }
    *(_QWORD *)a2 = v1077;
    *(_QWORD *)(a2 + 8) = v1070;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1071)
    {
      operator delete(v1071);
      v1024 = *v13;
    }
  }
  else
  {
    *v1061 = a5.n128_u32[2];
    v1070 = v1061 + 1;
  }
  *v9 = v1070;
  if (v1070 >= (unsigned __int32 *)v1024)
  {
    v1080 = *(unsigned __int32 **)a2;
    v1081 = ((uint64_t)v1070 - *(_QWORD *)a2) >> 2;
    v1082 = v1081 + 1;
    if ((unint64_t)(v1081 + 1) >> 62)
      goto LABEL_3660;
    v1083 = v1024 - (char *)v1080;
    if (v1083 >> 1 > v1082)
      v1082 = v1083 >> 1;
    if ((unint64_t)v1083 >= 0x7FFFFFFFFFFFFFFCLL)
      v1084 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1084 = v1082;
    if (v1084)
    {
      v1085 = (char *)sub_1DCAE4D04((uint64_t)v13, v1084);
      v1080 = *(unsigned __int32 **)a2;
      v1070 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1085 = 0;
    }
    v1086 = &v1085[4 * v1081];
    v1024 = &v1085[4 * v1084];
    *(_DWORD *)v1086 = a5.n128_u32[0];
    v1079 = (unsigned __int32 *)(v1086 + 4);
    while (v1070 != v1080)
    {
      v1087 = *--v1070;
      *((_DWORD *)v1086 - 1) = v1087;
      v1086 -= 4;
    }
    *(_QWORD *)a2 = v1086;
    *(_QWORD *)(a2 + 8) = v1079;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1080)
    {
      operator delete(v1080);
      v1024 = *v13;
    }
  }
  else
  {
    *v1070 = a5.n128_u32[0];
    v1079 = v1070 + 1;
  }
  *v9 = v1079;
  if (v1079 >= (unsigned __int32 *)v1024)
  {
    v1089 = *(unsigned __int32 **)a2;
    v1090 = ((uint64_t)v1079 - *(_QWORD *)a2) >> 2;
    v1091 = v1090 + 1;
    if ((unint64_t)(v1090 + 1) >> 62)
      goto LABEL_3660;
    v1092 = v1024 - (char *)v1089;
    if (v1092 >> 1 > v1091)
      v1091 = v1092 >> 1;
    if ((unint64_t)v1092 >= 0x7FFFFFFFFFFFFFFCLL)
      v1093 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1093 = v1091;
    if (v1093)
    {
      v1094 = (char *)sub_1DCAE4D04((uint64_t)v13, v1093);
      v1089 = *(unsigned __int32 **)a2;
      v1079 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1094 = 0;
    }
    v1095 = (unsigned __int32 *)&v1094[4 * v1090];
    v1024 = &v1094[4 * v1093];
    *v1095 = v28;
    v1088 = v1095 + 1;
    while (v1079 != v1089)
    {
      v1096 = *--v1079;
      *--v1095 = v1096;
    }
    *(_QWORD *)a2 = v1095;
    *(_QWORD *)(a2 + 8) = v1088;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1089)
    {
      operator delete(v1089);
      v1024 = *v13;
    }
  }
  else
  {
    *v1079 = v28;
    v1088 = v1079 + 1;
  }
  *v9 = v1088;
  if (v1088 >= (unsigned __int32 *)v1024)
  {
    v1098 = *(unsigned __int32 **)a2;
    v1099 = ((uint64_t)v1088 - *(_QWORD *)a2) >> 2;
    v1100 = v1099 + 1;
    if ((unint64_t)(v1099 + 1) >> 62)
      goto LABEL_3660;
    v1101 = v1024 - (char *)v1098;
    if (v1101 >> 1 > v1100)
      v1100 = v1101 >> 1;
    if ((unint64_t)v1101 >= 0x7FFFFFFFFFFFFFFCLL)
      v1102 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1102 = v1100;
    if (v1102)
    {
      v1103 = (char *)sub_1DCAE4D04((uint64_t)v13, v1102);
      v1098 = *(unsigned __int32 **)a2;
      v1088 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1103 = 0;
    }
    v1104 = &v1103[4 * v1099];
    v1024 = &v1103[4 * v1102];
    *(_DWORD *)v1104 = a5.n128_u32[2];
    v1097 = (unsigned __int32 *)(v1104 + 4);
    while (v1088 != v1098)
    {
      v1105 = *--v1088;
      *((_DWORD *)v1104 - 1) = v1105;
      v1104 -= 4;
    }
    *(_QWORD *)a2 = v1104;
    *(_QWORD *)(a2 + 8) = v1097;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1098)
    {
      operator delete(v1098);
      v1024 = *v13;
    }
  }
  else
  {
    *v1088 = a5.n128_u32[2];
    v1097 = v1088 + 1;
  }
  *v9 = v1097;
  if (v1097 >= (unsigned __int32 *)v1024)
  {
    v1107 = *(unsigned __int32 **)a2;
    v1108 = ((uint64_t)v1097 - *(_QWORD *)a2) >> 2;
    v1109 = v1108 + 1;
    if ((unint64_t)(v1108 + 1) >> 62)
      goto LABEL_3660;
    v1110 = v1024 - (char *)v1107;
    if (v1110 >> 1 > v1109)
      v1109 = v1110 >> 1;
    if ((unint64_t)v1110 >= 0x7FFFFFFFFFFFFFFCLL)
      v1111 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1111 = v1109;
    if (v1111)
    {
      v1112 = (char *)sub_1DCAE4D04((uint64_t)v13, v1111);
      v1107 = *(unsigned __int32 **)a2;
      v1097 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1112 = 0;
    }
    v1113 = &v1112[4 * v1108];
    v1024 = &v1112[4 * v1111];
    *(_DWORD *)v1113 = a5.n128_u32[0];
    v1106 = (unsigned __int32 *)(v1113 + 4);
    while (v1097 != v1107)
    {
      v1114 = *--v1097;
      *((_DWORD *)v1113 - 1) = v1114;
      v1113 -= 4;
    }
    *(_QWORD *)a2 = v1113;
    *(_QWORD *)(a2 + 8) = v1106;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1107)
    {
      operator delete(v1107);
      v1024 = *v13;
    }
  }
  else
  {
    *v1097 = a5.n128_u32[0];
    v1106 = v1097 + 1;
  }
  *v9 = v1106;
  if (v1106 >= (unsigned __int32 *)v1024)
  {
    v1116 = *(unsigned __int32 **)a2;
    v1117 = ((uint64_t)v1106 - *(_QWORD *)a2) >> 2;
    v1118 = v1117 + 1;
    if ((unint64_t)(v1117 + 1) >> 62)
      goto LABEL_3660;
    v1119 = v1024 - (char *)v1116;
    if (v1119 >> 1 > v1118)
      v1118 = v1119 >> 1;
    if ((unint64_t)v1119 >= 0x7FFFFFFFFFFFFFFCLL)
      v1120 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1120 = v1118;
    if (v1120)
    {
      v1121 = (char *)sub_1DCAE4D04((uint64_t)v13, v1120);
      v1116 = *(unsigned __int32 **)a2;
      v1106 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1121 = 0;
    }
    v1122 = (unsigned __int32 *)&v1121[4 * v1117];
    v1024 = &v1121[4 * v1120];
    *v1122 = v28;
    v1115 = v1122 + 1;
    while (v1106 != v1116)
    {
      v1123 = *--v1106;
      *--v1122 = v1123;
    }
    *(_QWORD *)a2 = v1122;
    *(_QWORD *)(a2 + 8) = v1115;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1116)
    {
      operator delete(v1116);
      v1024 = *v13;
    }
  }
  else
  {
    *v1106 = v28;
    v1115 = v1106 + 1;
  }
  *v9 = v1115;
  if (v1115 >= (unsigned __int32 *)v1024)
  {
    v1125 = *(unsigned __int32 **)a2;
    v1126 = ((uint64_t)v1115 - *(_QWORD *)a2) >> 2;
    v1127 = v1126 + 1;
    if ((unint64_t)(v1126 + 1) >> 62)
      goto LABEL_3660;
    v1128 = v1024 - (char *)v1125;
    if (v1128 >> 1 > v1127)
      v1127 = v1128 >> 1;
    if ((unint64_t)v1128 >= 0x7FFFFFFFFFFFFFFCLL)
      v1129 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1129 = v1127;
    if (v1129)
    {
      v1130 = (char *)sub_1DCAE4D04((uint64_t)v13, v1129);
      v1125 = *(unsigned __int32 **)a2;
      v1115 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1130 = 0;
    }
    v1131 = &v1130[4 * v1126];
    v1024 = &v1130[4 * v1129];
    *(_DWORD *)v1131 = a5.n128_u32[2];
    v1124 = (unsigned __int32 *)(v1131 + 4);
    while (v1115 != v1125)
    {
      v1132 = *--v1115;
      *((_DWORD *)v1131 - 1) = v1132;
      v1131 -= 4;
    }
    *(_QWORD *)a2 = v1131;
    *(_QWORD *)(a2 + 8) = v1124;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1125)
    {
      operator delete(v1125);
      v1024 = *v13;
    }
  }
  else
  {
    *v1115 = a5.n128_u32[2];
    v1124 = v1115 + 1;
  }
  *v9 = v1124;
  if (v1124 >= (unsigned __int32 *)v1024)
  {
    v1134 = *(unsigned __int32 **)a2;
    v1135 = ((uint64_t)v1124 - *(_QWORD *)a2) >> 2;
    v1136 = v1135 + 1;
    if ((unint64_t)(v1135 + 1) >> 62)
      goto LABEL_3660;
    v1137 = v1024 - (char *)v1134;
    if (v1137 >> 1 > v1136)
      v1136 = v1137 >> 1;
    if ((unint64_t)v1137 >= 0x7FFFFFFFFFFFFFFCLL)
      v1138 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1138 = v1136;
    if (v1138)
    {
      v1139 = (char *)sub_1DCAE4D04((uint64_t)v13, v1138);
      v1134 = *(unsigned __int32 **)a2;
      v1124 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1139 = 0;
    }
    v1140 = &v1139[4 * v1135];
    v1024 = &v1139[4 * v1138];
    *(_DWORD *)v1140 = v2149.n128_u32[0];
    v1133 = (unsigned __int32 *)(v1140 + 4);
    while (v1124 != v1134)
    {
      v1141 = *--v1124;
      *((_DWORD *)v1140 - 1) = v1141;
      v1140 -= 4;
    }
    *(_QWORD *)a2 = v1140;
    *(_QWORD *)(a2 + 8) = v1133;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1134)
    {
      operator delete(v1134);
      v1024 = *v13;
    }
  }
  else
  {
    *v1124 = v2149.n128_u32[0];
    v1133 = v1124 + 1;
  }
  *v9 = v1133;
  if (v1133 >= (unsigned __int32 *)v1024)
  {
    v1143 = *(unsigned __int32 **)a2;
    v1144 = ((uint64_t)v1133 - *(_QWORD *)a2) >> 2;
    v1145 = v1144 + 1;
    if ((unint64_t)(v1144 + 1) >> 62)
      goto LABEL_3660;
    v1146 = v1024 - (char *)v1143;
    if (v1146 >> 1 > v1145)
      v1145 = v1146 >> 1;
    if ((unint64_t)v1146 >= 0x7FFFFFFFFFFFFFFCLL)
      v1147 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1147 = v1145;
    if (v1147)
    {
      v1148 = (char *)sub_1DCAE4D04((uint64_t)v13, v1147);
      v1143 = *(unsigned __int32 **)a2;
      v1133 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1148 = 0;
    }
    v1149 = &v1148[4 * v1144];
    v1024 = &v1148[4 * v1147];
    *(_DWORD *)v1149 = a5.n128_u32[1];
    v1142 = (unsigned __int32 *)(v1149 + 4);
    while (v1133 != v1143)
    {
      v1150 = *--v1133;
      *((_DWORD *)v1149 - 1) = v1150;
      v1149 -= 4;
    }
    *(_QWORD *)a2 = v1149;
    *(_QWORD *)(a2 + 8) = v1142;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1143)
    {
      operator delete(v1143);
      v1024 = *v13;
    }
  }
  else
  {
    *v1133 = a5.n128_u32[1];
    v1142 = v1133 + 1;
  }
  *v9 = v1142;
  if (v1142 >= (unsigned __int32 *)v1024)
  {
    v1152 = *(unsigned __int32 **)a2;
    v1153 = ((uint64_t)v1142 - *(_QWORD *)a2) >> 2;
    v1154 = v1153 + 1;
    if ((unint64_t)(v1153 + 1) >> 62)
      goto LABEL_3660;
    v1155 = v1024 - (char *)v1152;
    if (v1155 >> 1 > v1154)
      v1154 = v1155 >> 1;
    if ((unint64_t)v1155 >= 0x7FFFFFFFFFFFFFFCLL)
      v1156 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1156 = v1154;
    if (v1156)
    {
      v1157 = (char *)sub_1DCAE4D04((uint64_t)v13, v1156);
      v1152 = *(unsigned __int32 **)a2;
      v1142 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1157 = 0;
    }
    v1158 = &v1157[4 * v1153];
    v1024 = &v1157[4 * v1156];
    *(_DWORD *)v1158 = a5.n128_u32[2];
    v1151 = (unsigned __int32 *)(v1158 + 4);
    while (v1142 != v1152)
    {
      v1159 = *--v1142;
      *((_DWORD *)v1158 - 1) = v1159;
      v1158 -= 4;
    }
    *(_QWORD *)a2 = v1158;
    *(_QWORD *)(a2 + 8) = v1151;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1152)
    {
      operator delete(v1152);
      v1024 = *v13;
    }
  }
  else
  {
    *v1142 = a5.n128_u32[2];
    v1151 = v1142 + 1;
  }
  *v9 = v1151;
  if (v1151 >= (unsigned __int32 *)v1024)
  {
    v1161 = *(unsigned __int32 **)a2;
    v1162 = ((uint64_t)v1151 - *(_QWORD *)a2) >> 2;
    v1163 = v1162 + 1;
    if ((unint64_t)(v1162 + 1) >> 62)
      goto LABEL_3660;
    v1164 = v1024 - (char *)v1161;
    if (v1164 >> 1 > v1163)
      v1163 = v1164 >> 1;
    if ((unint64_t)v1164 >= 0x7FFFFFFFFFFFFFFCLL)
      v1165 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1165 = v1163;
    if (v1165)
    {
      v1166 = (char *)sub_1DCAE4D04((uint64_t)v13, v1165);
      v1161 = *(unsigned __int32 **)a2;
      v1151 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1166 = 0;
    }
    v1167 = &v1166[4 * v1162];
    v1024 = &v1166[4 * v1165];
    *(_DWORD *)v1167 = v2149.n128_u32[0];
    v1160 = (unsigned __int32 *)(v1167 + 4);
    while (v1151 != v1161)
    {
      v1168 = *--v1151;
      *((_DWORD *)v1167 - 1) = v1168;
      v1167 -= 4;
    }
    *(_QWORD *)a2 = v1167;
    *(_QWORD *)(a2 + 8) = v1160;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1161)
    {
      operator delete(v1161);
      v1024 = *v13;
    }
  }
  else
  {
    *v1151 = v2149.n128_u32[0];
    v1160 = v1151 + 1;
  }
  *v9 = v1160;
  if (v1160 >= (unsigned __int32 *)v1024)
  {
    v1170 = *(unsigned __int32 **)a2;
    v1171 = ((uint64_t)v1160 - *(_QWORD *)a2) >> 2;
    v1172 = v1171 + 1;
    if ((unint64_t)(v1171 + 1) >> 62)
      goto LABEL_3660;
    v1173 = v1024 - (char *)v1170;
    if (v1173 >> 1 > v1172)
      v1172 = v1173 >> 1;
    if ((unint64_t)v1173 >= 0x7FFFFFFFFFFFFFFCLL)
      v1174 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1174 = v1172;
    if (v1174)
    {
      v1175 = (char *)sub_1DCAE4D04((uint64_t)v13, v1174);
      v1170 = *(unsigned __int32 **)a2;
      v1160 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1175 = 0;
    }
    v1176 = &v1175[4 * v1171];
    v1024 = &v1175[4 * v1174];
    *(_DWORD *)v1176 = a5.n128_u32[1];
    v1169 = (unsigned __int32 *)(v1176 + 4);
    while (v1160 != v1170)
    {
      v1177 = *--v1160;
      *((_DWORD *)v1176 - 1) = v1177;
      v1176 -= 4;
    }
    *(_QWORD *)a2 = v1176;
    *(_QWORD *)(a2 + 8) = v1169;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1170)
    {
      operator delete(v1170);
      v1024 = *v13;
    }
  }
  else
  {
    *v1160 = a5.n128_u32[1];
    v1169 = v1160 + 1;
  }
  *v9 = v1169;
  if (v1169 >= (unsigned __int32 *)v1024)
  {
    v1179 = *(unsigned __int32 **)a2;
    v1180 = ((uint64_t)v1169 - *(_QWORD *)a2) >> 2;
    v1181 = v1180 + 1;
    if ((unint64_t)(v1180 + 1) >> 62)
      goto LABEL_3660;
    v1182 = v1024 - (char *)v1179;
    if (v1182 >> 1 > v1181)
      v1181 = v1182 >> 1;
    if ((unint64_t)v1182 >= 0x7FFFFFFFFFFFFFFCLL)
      v1183 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1183 = v1181;
    if (v1183)
    {
      v1184 = (char *)sub_1DCAE4D04((uint64_t)v13, v1183);
      v1179 = *(unsigned __int32 **)a2;
      v1169 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1184 = 0;
    }
    v1185 = &v1184[4 * v1180];
    v1024 = &v1184[4 * v1183];
    *(_DWORD *)v1185 = a5.n128_u32[2];
    v1178 = (unsigned __int32 *)(v1185 + 4);
    while (v1169 != v1179)
    {
      v1186 = *--v1169;
      *((_DWORD *)v1185 - 1) = v1186;
      v1185 -= 4;
    }
    *(_QWORD *)a2 = v1185;
    *(_QWORD *)(a2 + 8) = v1178;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1179)
    {
      operator delete(v1179);
      v1024 = *v13;
    }
  }
  else
  {
    *v1169 = a5.n128_u32[2];
    v1178 = v1169 + 1;
  }
  *v9 = v1178;
  if (v1178 >= (unsigned __int32 *)v1024)
  {
    v1188 = *(unsigned __int32 **)a2;
    v1189 = ((uint64_t)v1178 - *(_QWORD *)a2) >> 2;
    v1190 = v1189 + 1;
    if ((unint64_t)(v1189 + 1) >> 62)
      goto LABEL_3660;
    v1191 = v1024 - (char *)v1188;
    if (v1191 >> 1 > v1190)
      v1190 = v1191 >> 1;
    if ((unint64_t)v1191 >= 0x7FFFFFFFFFFFFFFCLL)
      v1192 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1192 = v1190;
    if (v1192)
    {
      v1193 = (char *)sub_1DCAE4D04((uint64_t)v13, v1192);
      v1188 = *(unsigned __int32 **)a2;
      v1178 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1193 = 0;
    }
    v1194 = &v1193[4 * v1189];
    v1024 = &v1193[4 * v1192];
    *(_DWORD *)v1194 = a5.n128_u32[0];
    v1187 = (unsigned __int32 *)(v1194 + 4);
    while (v1178 != v1188)
    {
      v1195 = *--v1178;
      *((_DWORD *)v1194 - 1) = v1195;
      v1194 -= 4;
    }
    *(_QWORD *)a2 = v1194;
    *(_QWORD *)(a2 + 8) = v1187;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1188)
    {
      operator delete(v1188);
      v1024 = *v13;
    }
  }
  else
  {
    *v1178 = a5.n128_u32[0];
    v1187 = v1178 + 1;
  }
  *v9 = v1187;
  if (v1187 >= (unsigned __int32 *)v1024)
  {
    v1197 = *(unsigned __int32 **)a2;
    v1198 = ((uint64_t)v1187 - *(_QWORD *)a2) >> 2;
    v1199 = v1198 + 1;
    if ((unint64_t)(v1198 + 1) >> 62)
      goto LABEL_3660;
    v1200 = v1024 - (char *)v1197;
    if (v1200 >> 1 > v1199)
      v1199 = v1200 >> 1;
    if ((unint64_t)v1200 >= 0x7FFFFFFFFFFFFFFCLL)
      v1201 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1201 = v1199;
    if (v1201)
    {
      v1202 = (char *)sub_1DCAE4D04((uint64_t)v13, v1201);
      v1197 = *(unsigned __int32 **)a2;
      v1187 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1202 = 0;
    }
    v1203 = &v1202[4 * v1198];
    v1024 = &v1202[4 * v1201];
    *(_DWORD *)v1203 = a5.n128_u32[1];
    v1196 = (unsigned __int32 *)(v1203 + 4);
    while (v1187 != v1197)
    {
      v1204 = *--v1187;
      *((_DWORD *)v1203 - 1) = v1204;
      v1203 -= 4;
    }
    *(_QWORD *)a2 = v1203;
    *(_QWORD *)(a2 + 8) = v1196;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1197)
    {
      operator delete(v1197);
      v1024 = *v13;
    }
  }
  else
  {
    *v1187 = a5.n128_u32[1];
    v1196 = v1187 + 1;
  }
  *v9 = v1196;
  if (v1196 >= (unsigned __int32 *)v1024)
  {
    v1206 = *(unsigned __int32 **)a2;
    v1207 = ((uint64_t)v1196 - *(_QWORD *)a2) >> 2;
    v1208 = v1207 + 1;
    if ((unint64_t)(v1207 + 1) >> 62)
      goto LABEL_3660;
    v1209 = v1024 - (char *)v1206;
    if (v1209 >> 1 > v1208)
      v1208 = v1209 >> 1;
    if ((unint64_t)v1209 >= 0x7FFFFFFFFFFFFFFCLL)
      v1210 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1210 = v1208;
    if (v1210)
    {
      v1211 = (char *)sub_1DCAE4D04((uint64_t)v13, v1210);
      v1206 = *(unsigned __int32 **)a2;
      v1196 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1211 = 0;
    }
    v1212 = &v1211[4 * v1207];
    v1024 = &v1211[4 * v1210];
    *(_DWORD *)v1212 = a5.n128_u32[2];
    v1205 = (unsigned __int32 *)(v1212 + 4);
    while (v1196 != v1206)
    {
      v1213 = *--v1196;
      *((_DWORD *)v1212 - 1) = v1213;
      v1212 -= 4;
    }
    *(_QWORD *)a2 = v1212;
    *(_QWORD *)(a2 + 8) = v1205;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1206)
    {
      operator delete(v1206);
      v1024 = *v13;
    }
  }
  else
  {
    *v1196 = a5.n128_u32[2];
    v1205 = v1196 + 1;
  }
  *v9 = v1205;
  if (v1205 >= (unsigned __int32 *)v1024)
  {
    v1215 = *(unsigned __int32 **)a2;
    v1216 = ((uint64_t)v1205 - *(_QWORD *)a2) >> 2;
    v1217 = v1216 + 1;
    if ((unint64_t)(v1216 + 1) >> 62)
      goto LABEL_3660;
    v1218 = v1024 - (char *)v1215;
    if (v1218 >> 1 > v1217)
      v1217 = v1218 >> 1;
    if ((unint64_t)v1218 >= 0x7FFFFFFFFFFFFFFCLL)
      v1219 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1219 = v1217;
    if (v1219)
    {
      v1220 = (char *)sub_1DCAE4D04((uint64_t)v13, v1219);
      v1215 = *(unsigned __int32 **)a2;
      v1205 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1220 = 0;
    }
    v1221 = &v1220[4 * v1216];
    v1024 = &v1220[4 * v1219];
    *(_DWORD *)v1221 = a5.n128_u32[0];
    v1214 = (unsigned __int32 *)(v1221 + 4);
    while (v1205 != v1215)
    {
      v1222 = *--v1205;
      *((_DWORD *)v1221 - 1) = v1222;
      v1221 -= 4;
    }
    *(_QWORD *)a2 = v1221;
    *(_QWORD *)(a2 + 8) = v1214;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1215)
    {
      operator delete(v1215);
      v1024 = *v13;
    }
  }
  else
  {
    *v1205 = a5.n128_u32[0];
    v1214 = v1205 + 1;
  }
  *v9 = v1214;
  if (v1214 >= (unsigned __int32 *)v1024)
  {
    v1224 = *(unsigned __int32 **)a2;
    v1225 = ((uint64_t)v1214 - *(_QWORD *)a2) >> 2;
    v1226 = v1225 + 1;
    if ((unint64_t)(v1225 + 1) >> 62)
      goto LABEL_3660;
    v1227 = v1024 - (char *)v1224;
    if (v1227 >> 1 > v1226)
      v1226 = v1227 >> 1;
    if ((unint64_t)v1227 >= 0x7FFFFFFFFFFFFFFCLL)
      v1228 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1228 = v1226;
    if (v1228)
    {
      v1229 = (char *)sub_1DCAE4D04((uint64_t)v13, v1228);
      v1224 = *(unsigned __int32 **)a2;
      v1214 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1229 = 0;
    }
    v1230 = &v1229[4 * v1225];
    v1024 = &v1229[4 * v1228];
    *(_DWORD *)v1230 = a5.n128_u32[1];
    v1223 = (unsigned __int32 *)(v1230 + 4);
    while (v1214 != v1224)
    {
      v1231 = *--v1214;
      *((_DWORD *)v1230 - 1) = v1231;
      v1230 -= 4;
    }
    *(_QWORD *)a2 = v1230;
    *(_QWORD *)(a2 + 8) = v1223;
    *(_QWORD *)(a2 + 16) = v1024;
    if (v1224)
    {
      operator delete(v1224);
      v1024 = *v13;
    }
  }
  else
  {
    *v1214 = a5.n128_u32[1];
    v1223 = v1214 + 1;
  }
  *v9 = v1223;
  if (v1223 >= (unsigned __int32 *)v1024)
  {
    v1233 = *(unsigned __int32 **)a2;
    v1234 = ((uint64_t)v1223 - *(_QWORD *)a2) >> 2;
    v1235 = v1234 + 1;
    if ((unint64_t)(v1234 + 1) >> 62)
      goto LABEL_3660;
    v1236 = v1024 - (char *)v1233;
    if (v1236 >> 1 > v1235)
      v1235 = v1236 >> 1;
    if ((unint64_t)v1236 >= 0x7FFFFFFFFFFFFFFCLL)
      v1237 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1237 = v1235;
    if (v1237)
    {
      v1238 = (char *)sub_1DCAE4D04((uint64_t)v13, v1237);
      v1233 = *(unsigned __int32 **)a2;
      v1223 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1238 = 0;
    }
    v1239 = &v1238[4 * v1234];
    v1240 = &v1238[4 * v1237];
    *(_DWORD *)v1239 = a5.n128_u32[2];
    v1232 = (unsigned __int32 *)(v1239 + 4);
    while (v1223 != v1233)
    {
      v1241 = *--v1223;
      *((_DWORD *)v1239 - 1) = v1241;
      v1239 -= 4;
    }
    *(_QWORD *)a2 = v1239;
    *(_QWORD *)(a2 + 8) = v1232;
    *(_QWORD *)(a2 + 16) = v1240;
    if (v1233)
      operator delete(v1233);
  }
  else
  {
    *v1223 = a5.n128_u32[2];
    v1232 = v1223 + 1;
  }
  *v9 = v1232;
  v1242 = v448 + 8;
  v1244 = a3[1];
  v1243 = a3[2];
  if (v1244 >= v1243)
  {
    v1246 = *a3;
    v1247 = (v1244 - *a3) >> 2;
    v1248 = v1247 + 1;
    if ((unint64_t)(v1247 + 1) >> 62)
      goto LABEL_3661;
    v1249 = v1243 - v1246;
    if (v1249 >> 1 > v1248)
      v1248 = v1249 >> 1;
    if ((unint64_t)v1249 >= 0x7FFFFFFFFFFFFFFCLL)
      v1250 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1250 = v1248;
    if (v1250)
    {
      v1251 = (char *)sub_1DCAE4D04((uint64_t)v1002, v1250);
      v1246 = *a3;
      v1244 = a3[1];
    }
    else
    {
      v1251 = 0;
    }
    v1252 = &v1251[4 * v1247];
    v1243 = &v1251[4 * v1250];
    *(_DWORD *)v1252 = v1242;
    v1245 = v1252 + 4;
    while (v1244 != v1246)
    {
      v1253 = *((_DWORD *)v1244 - 1);
      v1244 -= 4;
      *((_DWORD *)v1252 - 1) = v1253;
      v1252 -= 4;
    }
    *a3 = v1252;
    a3[1] = v1245;
    a3[2] = v1243;
    if (v1246)
    {
      operator delete(v1246);
      v1243 = *v1002;
    }
  }
  else
  {
    *(_DWORD *)v1244 = v1242;
    v1245 = v1244 + 4;
  }
  a3[1] = v1245;
  v1254 = v448 + 9;
  if (v1245 >= v1243)
  {
    v1256 = *a3;
    v1257 = (v1245 - *a3) >> 2;
    v1258 = v1257 + 1;
    if ((unint64_t)(v1257 + 1) >> 62)
      goto LABEL_3661;
    v1259 = v1243 - v1256;
    if (v1259 >> 1 > v1258)
      v1258 = v1259 >> 1;
    if ((unint64_t)v1259 >= 0x7FFFFFFFFFFFFFFCLL)
      v1260 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1260 = v1258;
    if (v1260)
    {
      v1261 = (char *)sub_1DCAE4D04((uint64_t)v1002, v1260);
      v1256 = *a3;
      v1245 = a3[1];
    }
    else
    {
      v1261 = 0;
    }
    v1262 = &v1261[4 * v1257];
    v1243 = &v1261[4 * v1260];
    *(_DWORD *)v1262 = v1254;
    v1255 = v1262 + 4;
    while (v1245 != v1256)
    {
      v1263 = *((_DWORD *)v1245 - 1);
      v1245 -= 4;
      *((_DWORD *)v1262 - 1) = v1263;
      v1262 -= 4;
    }
    *a3 = v1262;
    a3[1] = v1255;
    a3[2] = v1243;
    if (v1256)
    {
      operator delete(v1256);
      v1243 = *v1002;
    }
  }
  else
  {
    *(_DWORD *)v1245 = v1254;
    v1255 = v1245 + 4;
  }
  a3[1] = v1255;
  v1264 = v448 + 10;
  if (v1255 >= v1243)
  {
    v1266 = *a3;
    v1267 = (v1255 - *a3) >> 2;
    v1268 = v1267 + 1;
    if ((unint64_t)(v1267 + 1) >> 62)
      goto LABEL_3661;
    v1269 = v1243 - v1266;
    if (v1269 >> 1 > v1268)
      v1268 = v1269 >> 1;
    if ((unint64_t)v1269 >= 0x7FFFFFFFFFFFFFFCLL)
      v1270 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1270 = v1268;
    if (v1270)
    {
      v1271 = (char *)sub_1DCAE4D04((uint64_t)v1002, v1270);
      v1266 = *a3;
      v1255 = a3[1];
    }
    else
    {
      v1271 = 0;
    }
    v1272 = &v1271[4 * v1267];
    v1243 = &v1271[4 * v1270];
    *(_DWORD *)v1272 = v1264;
    v1265 = v1272 + 4;
    while (v1255 != v1266)
    {
      v1273 = *((_DWORD *)v1255 - 1);
      v1255 -= 4;
      *((_DWORD *)v1272 - 1) = v1273;
      v1272 -= 4;
    }
    *a3 = v1272;
    a3[1] = v1265;
    a3[2] = v1243;
    if (v1266)
    {
      operator delete(v1266);
      v1243 = *v2148;
    }
  }
  else
  {
    *(_DWORD *)v1255 = v1264;
    v1265 = v1255 + 4;
  }
  a3[1] = v1265;
  if (v1265 >= v1243)
  {
    v1275 = *a3;
    v1276 = (v1265 - *a3) >> 2;
    v1277 = v1276 + 1;
    if ((unint64_t)(v1276 + 1) >> 62)
      goto LABEL_3661;
    v1278 = v1243 - v1275;
    if (v1278 >> 1 > v1277)
      v1277 = v1278 >> 1;
    if ((unint64_t)v1278 >= 0x7FFFFFFFFFFFFFFCLL)
      v1279 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1279 = v1277;
    if (v1279)
    {
      v1280 = (char *)sub_1DCAE4D04((uint64_t)v2148, v1279);
      v1275 = *a3;
      v1265 = a3[1];
    }
    else
    {
      v1280 = 0;
    }
    v1281 = &v1280[4 * v1276];
    v1243 = &v1280[4 * v1279];
    *(_DWORD *)v1281 = v1254;
    v1274 = v1281 + 4;
    while (v1265 != v1275)
    {
      v1282 = *((_DWORD *)v1265 - 1);
      v1265 -= 4;
      *((_DWORD *)v1281 - 1) = v1282;
      v1281 -= 4;
    }
    *a3 = v1281;
    a3[1] = v1274;
    a3[2] = v1243;
    if (v1275)
    {
      operator delete(v1275);
      v1283 = a3 + 2;
      v1243 = *v2148;
      goto LABEL_2184;
    }
  }
  else
  {
    *(_DWORD *)v1265 = v1254;
    v1274 = v1265 + 4;
  }
  v1283 = a3 + 2;
LABEL_2184:
  a3[1] = v1274;
  v1284 = v448 + 11;
  if (v1274 >= v1243)
  {
    v1286 = *a3;
    v1287 = (v1274 - *a3) >> 2;
    v1288 = v1287 + 1;
    if ((unint64_t)(v1287 + 1) >> 62)
      goto LABEL_3661;
    v1289 = v1243 - v1286;
    if (v1289 >> 1 > v1288)
      v1288 = v1289 >> 1;
    if ((unint64_t)v1289 >= 0x7FFFFFFFFFFFFFFCLL)
      v1290 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1290 = v1288;
    if (v1290)
    {
      v1291 = (char *)sub_1DCAE4D04((uint64_t)v1283, v1290);
      v1286 = *a3;
      v1274 = a3[1];
    }
    else
    {
      v1291 = 0;
    }
    v1292 = &v1291[4 * v1287];
    v1243 = &v1291[4 * v1290];
    *(_DWORD *)v1292 = v1284;
    v1285 = v1292 + 4;
    while (v1274 != v1286)
    {
      v1293 = *((_DWORD *)v1274 - 1);
      v1274 -= 4;
      *((_DWORD *)v1292 - 1) = v1293;
      v1292 -= 4;
    }
    *a3 = v1292;
    a3[1] = v1285;
    a3[2] = v1243;
    if (v1286)
    {
      operator delete(v1286);
      v1243 = *v1283;
    }
  }
  else
  {
    *(_DWORD *)v1274 = v1284;
    v1285 = v1274 + 4;
  }
  a3[1] = v1285;
  if (v1285 >= v1243)
  {
    v1295 = *a3;
    v1296 = (v1285 - *a3) >> 2;
    v1297 = v1296 + 1;
    if ((unint64_t)(v1296 + 1) >> 62)
      goto LABEL_3661;
    v1298 = v1243 - v1295;
    if (v1298 >> 1 > v1297)
      v1297 = v1298 >> 1;
    if ((unint64_t)v1298 >= 0x7FFFFFFFFFFFFFFCLL)
      v1299 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1299 = v1297;
    if (v1299)
    {
      v1300 = (char *)sub_1DCAE4D04((uint64_t)v1283, v1299);
      v1295 = *a3;
      v1285 = a3[1];
    }
    else
    {
      v1300 = 0;
    }
    v1301 = &v1300[4 * v1296];
    v1302 = &v1300[4 * v1299];
    *(_DWORD *)v1301 = v1264;
    v1294 = v1301 + 4;
    while (v1285 != v1295)
    {
      v1303 = *((_DWORD *)v1285 - 1);
      v1285 -= 4;
      *((_DWORD *)v1301 - 1) = v1303;
      v1301 -= 4;
    }
    *a3 = v1301;
    a3[1] = v1294;
    a3[2] = v1302;
    if (v1295)
      operator delete(v1295);
  }
  else
  {
    *(_DWORD *)v1285 = v1264;
    v1294 = v1285 + 4;
  }
  a3[1] = v1294;
  v1304 = *v9;
  v1305 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v1307 = *(unsigned __int32 **)a2;
    v1308 = ((uint64_t)v1304 - *(_QWORD *)a2) >> 2;
    v1309 = v1308 + 1;
    if ((unint64_t)(v1308 + 1) >> 62)
      goto LABEL_3660;
    v1310 = v1305 - (char *)v1307;
    if (v1310 >> 1 > v1309)
      v1309 = v1310 >> 1;
    if ((unint64_t)v1310 >= 0x7FFFFFFFFFFFFFFCLL)
      v1311 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1311 = v1309;
    if (v1311)
    {
      v1312 = (char *)sub_1DCAE4D04((uint64_t)v13, v1311);
      v1307 = *(unsigned __int32 **)a2;
      v1304 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1312 = 0;
    }
    v1313 = &v1312[4 * v1308];
    v1305 = &v1312[4 * v1311];
    *(_DWORD *)v1313 = a5.n128_u32[0];
    v1306 = (unsigned __int32 *)(v1313 + 4);
    while (v1304 != v1307)
    {
      v1314 = *--v1304;
      *((_DWORD *)v1313 - 1) = v1314;
      v1313 -= 4;
    }
    *(_QWORD *)a2 = v1313;
    *(_QWORD *)(a2 + 8) = v1306;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1307)
    {
      operator delete(v1307);
      v1305 = *v13;
    }
  }
  else
  {
    *v1304 = a5.n128_u32[0];
    v1306 = v1304 + 1;
  }
  *v9 = v1306;
  if (v1306 >= (unsigned __int32 *)v1305)
  {
    v1316 = *(unsigned __int32 **)a2;
    v1317 = ((uint64_t)v1306 - *(_QWORD *)a2) >> 2;
    v1318 = v1317 + 1;
    if ((unint64_t)(v1317 + 1) >> 62)
      goto LABEL_3660;
    v1319 = v1305 - (char *)v1316;
    if (v1319 >> 1 > v1318)
      v1318 = v1319 >> 1;
    if ((unint64_t)v1319 >= 0x7FFFFFFFFFFFFFFCLL)
      v1320 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1320 = v1318;
    if (v1320)
    {
      v1321 = (char *)sub_1DCAE4D04((uint64_t)v13, v1320);
      v1316 = *(unsigned __int32 **)a2;
      v1306 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1321 = 0;
    }
    v1322 = (unsigned __int32 *)&v1321[4 * v1317];
    v1305 = &v1321[4 * v1320];
    *v1322 = v28;
    v1315 = v1322 + 1;
    while (v1306 != v1316)
    {
      v1323 = *--v1306;
      *--v1322 = v1323;
    }
    *(_QWORD *)a2 = v1322;
    *(_QWORD *)(a2 + 8) = v1315;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1316)
    {
      operator delete(v1316);
      v1305 = *v13;
    }
  }
  else
  {
    *v1306 = v28;
    v1315 = v1306 + 1;
  }
  *v9 = v1315;
  if (v1315 >= (unsigned __int32 *)v1305)
  {
    v1325 = *(unsigned __int32 **)a2;
    v1326 = ((uint64_t)v1315 - *(_QWORD *)a2) >> 2;
    v1327 = v1326 + 1;
    if ((unint64_t)(v1326 + 1) >> 62)
      goto LABEL_3660;
    v1328 = v1305 - (char *)v1325;
    if (v1328 >> 1 > v1327)
      v1327 = v1328 >> 1;
    if ((unint64_t)v1328 >= 0x7FFFFFFFFFFFFFFCLL)
      v1329 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1329 = v1327;
    if (v1329)
    {
      v1330 = (char *)sub_1DCAE4D04((uint64_t)v13, v1329);
      v1325 = *(unsigned __int32 **)a2;
      v1315 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1330 = 0;
    }
    v1331 = (unsigned __int32 *)&v1330[4 * v1326];
    v1305 = &v1330[4 * v1329];
    *v1331 = v48;
    v1324 = v1331 + 1;
    while (v1315 != v1325)
    {
      v1332 = *--v1315;
      *--v1331 = v1332;
    }
    *(_QWORD *)a2 = v1331;
    *(_QWORD *)(a2 + 8) = v1324;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1325)
    {
      operator delete(v1325);
      v1305 = *v13;
    }
  }
  else
  {
    *v1315 = v48;
    v1324 = v1315 + 1;
  }
  *v9 = v1324;
  if (v1324 >= (unsigned __int32 *)v1305)
  {
    v1334 = *(unsigned __int32 **)a2;
    v1335 = ((uint64_t)v1324 - *(_QWORD *)a2) >> 2;
    v1336 = v1335 + 1;
    if ((unint64_t)(v1335 + 1) >> 62)
      goto LABEL_3660;
    v1337 = v1305 - (char *)v1334;
    if (v1337 >> 1 > v1336)
      v1336 = v1337 >> 1;
    if ((unint64_t)v1337 >= 0x7FFFFFFFFFFFFFFCLL)
      v1338 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1338 = v1336;
    if (v1338)
    {
      v1339 = (char *)sub_1DCAE4D04((uint64_t)v13, v1338);
      v1334 = *(unsigned __int32 **)a2;
      v1324 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1339 = 0;
    }
    v1340 = &v1339[4 * v1335];
    v1305 = &v1339[4 * v1338];
    *(_DWORD *)v1340 = a5.n128_u32[0];
    v1333 = (unsigned __int32 *)(v1340 + 4);
    while (v1324 != v1334)
    {
      v1341 = *--v1324;
      *((_DWORD *)v1340 - 1) = v1341;
      v1340 -= 4;
    }
    *(_QWORD *)a2 = v1340;
    *(_QWORD *)(a2 + 8) = v1333;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1334)
    {
      operator delete(v1334);
      v1305 = *v13;
    }
  }
  else
  {
    *v1324 = a5.n128_u32[0];
    v1333 = v1324 + 1;
  }
  *v9 = v1333;
  if (v1333 >= (unsigned __int32 *)v1305)
  {
    v1343 = *(unsigned __int32 **)a2;
    v1344 = ((uint64_t)v1333 - *(_QWORD *)a2) >> 2;
    v1345 = v1344 + 1;
    if ((unint64_t)(v1344 + 1) >> 62)
      goto LABEL_3660;
    v1346 = v1305 - (char *)v1343;
    if (v1346 >> 1 > v1345)
      v1345 = v1346 >> 1;
    if ((unint64_t)v1346 >= 0x7FFFFFFFFFFFFFFCLL)
      v1347 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1347 = v1345;
    if (v1347)
    {
      v1348 = (char *)sub_1DCAE4D04((uint64_t)v13, v1347);
      v1343 = *(unsigned __int32 **)a2;
      v1333 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1348 = 0;
    }
    v1349 = (unsigned __int32 *)&v1348[4 * v1344];
    v1305 = &v1348[4 * v1347];
    *v1349 = v28;
    v1342 = v1349 + 1;
    while (v1333 != v1343)
    {
      v1350 = *--v1333;
      *--v1349 = v1350;
    }
    *(_QWORD *)a2 = v1349;
    *(_QWORD *)(a2 + 8) = v1342;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1343)
    {
      operator delete(v1343);
      v1305 = *v13;
    }
  }
  else
  {
    *v1333 = v28;
    v1342 = v1333 + 1;
  }
  *v9 = v1342;
  if (v1342 >= (unsigned __int32 *)v1305)
  {
    v1352 = *(unsigned __int32 **)a2;
    v1353 = ((uint64_t)v1342 - *(_QWORD *)a2) >> 2;
    v1354 = v1353 + 1;
    if ((unint64_t)(v1353 + 1) >> 62)
      goto LABEL_3660;
    v1355 = v1305 - (char *)v1352;
    if (v1355 >> 1 > v1354)
      v1354 = v1355 >> 1;
    if ((unint64_t)v1355 >= 0x7FFFFFFFFFFFFFFCLL)
      v1356 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1356 = v1354;
    if (v1356)
    {
      v1357 = (char *)sub_1DCAE4D04((uint64_t)v13, v1356);
      v1352 = *(unsigned __int32 **)a2;
      v1342 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1357 = 0;
    }
    v1358 = (unsigned __int32 *)&v1357[4 * v1353];
    v1305 = &v1357[4 * v1356];
    *v1358 = v48;
    v1351 = v1358 + 1;
    while (v1342 != v1352)
    {
      v1359 = *--v1342;
      *--v1358 = v1359;
    }
    *(_QWORD *)a2 = v1358;
    *(_QWORD *)(a2 + 8) = v1351;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1352)
    {
      operator delete(v1352);
      v1305 = *v13;
    }
  }
  else
  {
    *v1342 = v48;
    v1351 = v1342 + 1;
  }
  *v9 = v1351;
  if (v1351 >= (unsigned __int32 *)v1305)
  {
    v1361 = *(unsigned __int32 **)a2;
    v1362 = ((uint64_t)v1351 - *(_QWORD *)a2) >> 2;
    v1363 = v1362 + 1;
    if ((unint64_t)(v1362 + 1) >> 62)
      goto LABEL_3660;
    v1364 = v1305 - (char *)v1361;
    if (v1364 >> 1 > v1363)
      v1363 = v1364 >> 1;
    if ((unint64_t)v1364 >= 0x7FFFFFFFFFFFFFFCLL)
      v1365 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1365 = v1363;
    if (v1365)
    {
      v1366 = (char *)sub_1DCAE4D04((uint64_t)v13, v1365);
      v1361 = *(unsigned __int32 **)a2;
      v1351 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1366 = 0;
    }
    v1367 = &v1366[4 * v1362];
    v1305 = &v1366[4 * v1365];
    *(_DWORD *)v1367 = a5.n128_u32[0];
    v1360 = (unsigned __int32 *)(v1367 + 4);
    while (v1351 != v1361)
    {
      v1368 = *--v1351;
      *((_DWORD *)v1367 - 1) = v1368;
      v1367 -= 4;
    }
    *(_QWORD *)a2 = v1367;
    *(_QWORD *)(a2 + 8) = v1360;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1361)
    {
      operator delete(v1361);
      v1305 = *v13;
    }
  }
  else
  {
    *v1351 = a5.n128_u32[0];
    v1360 = v1351 + 1;
  }
  *v9 = v1360;
  if (v1360 >= (unsigned __int32 *)v1305)
  {
    v1370 = *(unsigned __int32 **)a2;
    v1371 = ((uint64_t)v1360 - *(_QWORD *)a2) >> 2;
    v1372 = v1371 + 1;
    if ((unint64_t)(v1371 + 1) >> 62)
      goto LABEL_3660;
    v1373 = v1305 - (char *)v1370;
    if (v1373 >> 1 > v1372)
      v1372 = v1373 >> 1;
    if ((unint64_t)v1373 >= 0x7FFFFFFFFFFFFFFCLL)
      v1374 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1374 = v1372;
    if (v1374)
    {
      v1375 = (char *)sub_1DCAE4D04((uint64_t)v13, v1374);
      v1370 = *(unsigned __int32 **)a2;
      v1360 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1375 = 0;
    }
    v1376 = &v1375[4 * v1371];
    v1305 = &v1375[4 * v1374];
    *(_DWORD *)v1376 = a5.n128_u32[1];
    v1369 = (unsigned __int32 *)(v1376 + 4);
    while (v1360 != v1370)
    {
      v1377 = *--v1360;
      *((_DWORD *)v1376 - 1) = v1377;
      v1376 -= 4;
    }
    *(_QWORD *)a2 = v1376;
    *(_QWORD *)(a2 + 8) = v1369;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1370)
    {
      operator delete(v1370);
      v1305 = *v13;
    }
  }
  else
  {
    *v1360 = a5.n128_u32[1];
    v1369 = v1360 + 1;
  }
  *v9 = v1369;
  if (v1369 >= (unsigned __int32 *)v1305)
  {
    v1379 = *(unsigned __int32 **)a2;
    v1380 = ((uint64_t)v1369 - *(_QWORD *)a2) >> 2;
    v1381 = v1380 + 1;
    if ((unint64_t)(v1380 + 1) >> 62)
      goto LABEL_3660;
    v1382 = v1305 - (char *)v1379;
    if (v1382 >> 1 > v1381)
      v1381 = v1382 >> 1;
    if ((unint64_t)v1382 >= 0x7FFFFFFFFFFFFFFCLL)
      v1383 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1383 = v1381;
    if (v1383)
    {
      v1384 = (char *)sub_1DCAE4D04((uint64_t)v13, v1383);
      v1379 = *(unsigned __int32 **)a2;
      v1369 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1384 = 0;
    }
    v1385 = (unsigned __int32 *)&v1384[4 * v1380];
    v1305 = &v1384[4 * v1383];
    *v1385 = v48;
    v1378 = v1385 + 1;
    while (v1369 != v1379)
    {
      v1386 = *--v1369;
      *--v1385 = v1386;
    }
    *(_QWORD *)a2 = v1385;
    *(_QWORD *)(a2 + 8) = v1378;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1379)
    {
      operator delete(v1379);
      v1305 = *v13;
    }
  }
  else
  {
    *v1369 = v48;
    v1378 = v1369 + 1;
  }
  *v9 = v1378;
  if (v1378 >= (unsigned __int32 *)v1305)
  {
    v1388 = *(unsigned __int32 **)a2;
    v1389 = ((uint64_t)v1378 - *(_QWORD *)a2) >> 2;
    v1390 = v1389 + 1;
    if ((unint64_t)(v1389 + 1) >> 62)
      goto LABEL_3660;
    v1391 = v1305 - (char *)v1388;
    if (v1391 >> 1 > v1390)
      v1390 = v1391 >> 1;
    if ((unint64_t)v1391 >= 0x7FFFFFFFFFFFFFFCLL)
      v1392 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1392 = v1390;
    if (v1392)
    {
      v1393 = (char *)sub_1DCAE4D04((uint64_t)v13, v1392);
      v1388 = *(unsigned __int32 **)a2;
      v1378 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1393 = 0;
    }
    v1394 = &v1393[4 * v1389];
    v1305 = &v1393[4 * v1392];
    *(_DWORD *)v1394 = a5.n128_u32[0];
    v1387 = (unsigned __int32 *)(v1394 + 4);
    while (v1378 != v1388)
    {
      v1395 = *--v1378;
      *((_DWORD *)v1394 - 1) = v1395;
      v1394 -= 4;
    }
    *(_QWORD *)a2 = v1394;
    *(_QWORD *)(a2 + 8) = v1387;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1388)
    {
      operator delete(v1388);
      v1305 = *v13;
    }
  }
  else
  {
    *v1378 = a5.n128_u32[0];
    v1387 = v1378 + 1;
  }
  *v9 = v1387;
  if (v1387 >= (unsigned __int32 *)v1305)
  {
    v1397 = *(unsigned __int32 **)a2;
    v1398 = ((uint64_t)v1387 - *(_QWORD *)a2) >> 2;
    v1399 = v1398 + 1;
    if ((unint64_t)(v1398 + 1) >> 62)
      goto LABEL_3660;
    v1400 = v1305 - (char *)v1397;
    if (v1400 >> 1 > v1399)
      v1399 = v1400 >> 1;
    if ((unint64_t)v1400 >= 0x7FFFFFFFFFFFFFFCLL)
      v1401 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1401 = v1399;
    if (v1401)
    {
      v1402 = (char *)sub_1DCAE4D04((uint64_t)v13, v1401);
      v1397 = *(unsigned __int32 **)a2;
      v1387 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1402 = 0;
    }
    v1403 = &v1402[4 * v1398];
    v1305 = &v1402[4 * v1401];
    *(_DWORD *)v1403 = a5.n128_u32[1];
    v1396 = (unsigned __int32 *)(v1403 + 4);
    while (v1387 != v1397)
    {
      v1404 = *--v1387;
      *((_DWORD *)v1403 - 1) = v1404;
      v1403 -= 4;
    }
    *(_QWORD *)a2 = v1403;
    *(_QWORD *)(a2 + 8) = v1396;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1397)
    {
      operator delete(v1397);
      v1305 = *v13;
    }
  }
  else
  {
    *v1387 = a5.n128_u32[1];
    v1396 = v1387 + 1;
  }
  *v9 = v1396;
  if (v1396 >= (unsigned __int32 *)v1305)
  {
    v1406 = *(unsigned __int32 **)a2;
    v1407 = ((uint64_t)v1396 - *(_QWORD *)a2) >> 2;
    v1408 = v1407 + 1;
    if ((unint64_t)(v1407 + 1) >> 62)
      goto LABEL_3660;
    v1409 = v1305 - (char *)v1406;
    if (v1409 >> 1 > v1408)
      v1408 = v1409 >> 1;
    if ((unint64_t)v1409 >= 0x7FFFFFFFFFFFFFFCLL)
      v1410 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1410 = v1408;
    if (v1410)
    {
      v1411 = (char *)sub_1DCAE4D04((uint64_t)v13, v1410);
      v1406 = *(unsigned __int32 **)a2;
      v1396 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1411 = 0;
    }
    v1412 = (unsigned __int32 *)&v1411[4 * v1407];
    v1305 = &v1411[4 * v1410];
    *v1412 = v48;
    v1405 = v1412 + 1;
    while (v1396 != v1406)
    {
      v1413 = *--v1396;
      *--v1412 = v1413;
    }
    *(_QWORD *)a2 = v1412;
    *(_QWORD *)(a2 + 8) = v1405;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1406)
    {
      operator delete(v1406);
      v1305 = *v13;
    }
  }
  else
  {
    *v1396 = v48;
    v1405 = v1396 + 1;
  }
  *v9 = v1405;
  if (v1405 >= (unsigned __int32 *)v1305)
  {
    v1415 = *(unsigned __int32 **)a2;
    v1416 = ((uint64_t)v1405 - *(_QWORD *)a2) >> 2;
    v1417 = v1416 + 1;
    if ((unint64_t)(v1416 + 1) >> 62)
      goto LABEL_3660;
    v1418 = v1305 - (char *)v1415;
    if (v1418 >> 1 > v1417)
      v1417 = v1418 >> 1;
    if ((unint64_t)v1418 >= 0x7FFFFFFFFFFFFFFCLL)
      v1419 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1419 = v1417;
    if (v1419)
    {
      v1420 = (char *)sub_1DCAE4D04((uint64_t)v13, v1419);
      v1415 = *(unsigned __int32 **)a2;
      v1405 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1420 = 0;
    }
    v1421 = &v1420[4 * v1416];
    v1305 = &v1420[4 * v1419];
    *(_DWORD *)v1421 = a5.n128_u32[0];
    v1414 = (unsigned __int32 *)(v1421 + 4);
    while (v1405 != v1415)
    {
      v1422 = *--v1405;
      *((_DWORD *)v1421 - 1) = v1422;
      v1421 -= 4;
    }
    *(_QWORD *)a2 = v1421;
    *(_QWORD *)(a2 + 8) = v1414;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1415)
    {
      operator delete(v1415);
      v1305 = *v13;
    }
  }
  else
  {
    *v1405 = a5.n128_u32[0];
    v1414 = v1405 + 1;
  }
  *v9 = v1414;
  if (v1414 >= (unsigned __int32 *)v1305)
  {
    v1424 = *(unsigned __int32 **)a2;
    v1425 = ((uint64_t)v1414 - *(_QWORD *)a2) >> 2;
    v1426 = v1425 + 1;
    if ((unint64_t)(v1425 + 1) >> 62)
      goto LABEL_3660;
    v1427 = v1305 - (char *)v1424;
    if (v1427 >> 1 > v1426)
      v1426 = v1427 >> 1;
    if ((unint64_t)v1427 >= 0x7FFFFFFFFFFFFFFCLL)
      v1428 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1428 = v1426;
    if (v1428)
    {
      v1429 = (char *)sub_1DCAE4D04((uint64_t)v13, v1428);
      v1424 = *(unsigned __int32 **)a2;
      v1414 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1429 = 0;
    }
    v1430 = (unsigned __int32 *)&v1429[4 * v1425];
    v1305 = &v1429[4 * v1428];
    *v1430 = v28;
    v1423 = v1430 + 1;
    while (v1414 != v1424)
    {
      v1431 = *--v1414;
      *--v1430 = v1431;
    }
    *(_QWORD *)a2 = v1430;
    *(_QWORD *)(a2 + 8) = v1423;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1424)
    {
      operator delete(v1424);
      v1305 = *v13;
    }
  }
  else
  {
    *v1414 = v28;
    v1423 = v1414 + 1;
  }
  *v9 = v1423;
  if (v1423 >= (unsigned __int32 *)v1305)
  {
    v1433 = *(unsigned __int32 **)a2;
    v1434 = ((uint64_t)v1423 - *(_QWORD *)a2) >> 2;
    v1435 = v1434 + 1;
    if ((unint64_t)(v1434 + 1) >> 62)
      goto LABEL_3660;
    v1436 = v1305 - (char *)v1433;
    if (v1436 >> 1 > v1435)
      v1435 = v1436 >> 1;
    if ((unint64_t)v1436 >= 0x7FFFFFFFFFFFFFFCLL)
      v1437 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1437 = v1435;
    if (v1437)
    {
      v1438 = (char *)sub_1DCAE4D04((uint64_t)v13, v1437);
      v1433 = *(unsigned __int32 **)a2;
      v1423 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1438 = 0;
    }
    v1439 = &v1438[4 * v1434];
    v1305 = &v1438[4 * v1437];
    *(_DWORD *)v1439 = a5.n128_u32[2];
    v1432 = (unsigned __int32 *)(v1439 + 4);
    while (v1423 != v1433)
    {
      v1440 = *--v1423;
      *((_DWORD *)v1439 - 1) = v1440;
      v1439 -= 4;
    }
    *(_QWORD *)a2 = v1439;
    *(_QWORD *)(a2 + 8) = v1432;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1433)
    {
      operator delete(v1433);
      v1305 = *v13;
    }
  }
  else
  {
    *v1423 = a5.n128_u32[2];
    v1432 = v1423 + 1;
  }
  *v9 = v1432;
  if (v1432 >= (unsigned __int32 *)v1305)
  {
    v1442 = *(unsigned __int32 **)a2;
    v1443 = ((uint64_t)v1432 - *(_QWORD *)a2) >> 2;
    v1444 = v1443 + 1;
    if ((unint64_t)(v1443 + 1) >> 62)
      goto LABEL_3660;
    v1445 = v1305 - (char *)v1442;
    if (v1445 >> 1 > v1444)
      v1444 = v1445 >> 1;
    if ((unint64_t)v1445 >= 0x7FFFFFFFFFFFFFFCLL)
      v1446 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1446 = v1444;
    if (v1446)
    {
      v1447 = (char *)sub_1DCAE4D04((uint64_t)v13, v1446);
      v1442 = *(unsigned __int32 **)a2;
      v1432 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1447 = 0;
    }
    v1448 = &v1447[4 * v1443];
    v1305 = &v1447[4 * v1446];
    *(_DWORD *)v1448 = a5.n128_u32[0];
    v1441 = (unsigned __int32 *)(v1448 + 4);
    while (v1432 != v1442)
    {
      v1449 = *--v1432;
      *((_DWORD *)v1448 - 1) = v1449;
      v1448 -= 4;
    }
    *(_QWORD *)a2 = v1448;
    *(_QWORD *)(a2 + 8) = v1441;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1442)
    {
      operator delete(v1442);
      v1305 = *v13;
    }
  }
  else
  {
    *v1432 = a5.n128_u32[0];
    v1441 = v1432 + 1;
  }
  *v9 = v1441;
  if (v1441 >= (unsigned __int32 *)v1305)
  {
    v1451 = *(unsigned __int32 **)a2;
    v1452 = ((uint64_t)v1441 - *(_QWORD *)a2) >> 2;
    v1453 = v1452 + 1;
    if ((unint64_t)(v1452 + 1) >> 62)
      goto LABEL_3660;
    v1454 = v1305 - (char *)v1451;
    if (v1454 >> 1 > v1453)
      v1453 = v1454 >> 1;
    if ((unint64_t)v1454 >= 0x7FFFFFFFFFFFFFFCLL)
      v1455 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1455 = v1453;
    if (v1455)
    {
      v1456 = (char *)sub_1DCAE4D04((uint64_t)v13, v1455);
      v1451 = *(unsigned __int32 **)a2;
      v1441 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1456 = 0;
    }
    v1457 = (unsigned __int32 *)&v1456[4 * v1452];
    v1305 = &v1456[4 * v1455];
    *v1457 = v28;
    v1450 = v1457 + 1;
    while (v1441 != v1451)
    {
      v1458 = *--v1441;
      *--v1457 = v1458;
    }
    *(_QWORD *)a2 = v1457;
    *(_QWORD *)(a2 + 8) = v1450;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1451)
    {
      operator delete(v1451);
      v1305 = *v13;
    }
  }
  else
  {
    *v1441 = v28;
    v1450 = v1441 + 1;
  }
  *v9 = v1450;
  if (v1450 >= (unsigned __int32 *)v1305)
  {
    v1460 = *(unsigned __int32 **)a2;
    v1461 = ((uint64_t)v1450 - *(_QWORD *)a2) >> 2;
    v1462 = v1461 + 1;
    if ((unint64_t)(v1461 + 1) >> 62)
      goto LABEL_3660;
    v1463 = v1305 - (char *)v1460;
    if (v1463 >> 1 > v1462)
      v1462 = v1463 >> 1;
    if ((unint64_t)v1463 >= 0x7FFFFFFFFFFFFFFCLL)
      v1464 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1464 = v1462;
    if (v1464)
    {
      v1465 = (char *)sub_1DCAE4D04((uint64_t)v13, v1464);
      v1460 = *(unsigned __int32 **)a2;
      v1450 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1465 = 0;
    }
    v1466 = &v1465[4 * v1461];
    v1305 = &v1465[4 * v1464];
    *(_DWORD *)v1466 = a5.n128_u32[2];
    v1459 = (unsigned __int32 *)(v1466 + 4);
    while (v1450 != v1460)
    {
      v1467 = *--v1450;
      *((_DWORD *)v1466 - 1) = v1467;
      v1466 -= 4;
    }
    *(_QWORD *)a2 = v1466;
    *(_QWORD *)(a2 + 8) = v1459;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1460)
    {
      operator delete(v1460);
      v1305 = *v13;
    }
  }
  else
  {
    *v1450 = a5.n128_u32[2];
    v1459 = v1450 + 1;
  }
  *v9 = v1459;
  if (v1459 >= (unsigned __int32 *)v1305)
  {
    v1469 = *(unsigned __int32 **)a2;
    v1470 = ((uint64_t)v1459 - *(_QWORD *)a2) >> 2;
    v1471 = v1470 + 1;
    if ((unint64_t)(v1470 + 1) >> 62)
      goto LABEL_3660;
    v1472 = v1305 - (char *)v1469;
    if (v1472 >> 1 > v1471)
      v1471 = v1472 >> 1;
    if ((unint64_t)v1472 >= 0x7FFFFFFFFFFFFFFCLL)
      v1473 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1473 = v1471;
    if (v1473)
    {
      v1474 = (char *)sub_1DCAE4D04((uint64_t)v13, v1473);
      v1469 = *(unsigned __int32 **)a2;
      v1459 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1474 = 0;
    }
    v1475 = &v1474[4 * v1470];
    v1305 = &v1474[4 * v1473];
    *(_DWORD *)v1475 = a5.n128_u32[0];
    v1468 = (unsigned __int32 *)(v1475 + 4);
    while (v1459 != v1469)
    {
      v1476 = *--v1459;
      *((_DWORD *)v1475 - 1) = v1476;
      v1475 -= 4;
    }
    *(_QWORD *)a2 = v1475;
    *(_QWORD *)(a2 + 8) = v1468;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1469)
    {
      operator delete(v1469);
      v1305 = *v13;
    }
  }
  else
  {
    *v1459 = a5.n128_u32[0];
    v1468 = v1459 + 1;
  }
  *v9 = v1468;
  if (v1468 >= (unsigned __int32 *)v1305)
  {
    v1478 = *(unsigned __int32 **)a2;
    v1479 = ((uint64_t)v1468 - *(_QWORD *)a2) >> 2;
    v1480 = v1479 + 1;
    if ((unint64_t)(v1479 + 1) >> 62)
      goto LABEL_3660;
    v1481 = v1305 - (char *)v1478;
    if (v1481 >> 1 > v1480)
      v1480 = v1481 >> 1;
    if ((unint64_t)v1481 >= 0x7FFFFFFFFFFFFFFCLL)
      v1482 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1482 = v1480;
    if (v1482)
    {
      v1483 = (char *)sub_1DCAE4D04((uint64_t)v13, v1482);
      v1478 = *(unsigned __int32 **)a2;
      v1468 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1483 = 0;
    }
    v1484 = &v1483[4 * v1479];
    v1305 = &v1483[4 * v1482];
    *(_DWORD *)v1484 = a5.n128_u32[1];
    v1477 = (unsigned __int32 *)(v1484 + 4);
    while (v1468 != v1478)
    {
      v1485 = *--v1468;
      *((_DWORD *)v1484 - 1) = v1485;
      v1484 -= 4;
    }
    *(_QWORD *)a2 = v1484;
    *(_QWORD *)(a2 + 8) = v1477;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1478)
    {
      operator delete(v1478);
      v1305 = *v13;
    }
  }
  else
  {
    *v1468 = a5.n128_u32[1];
    v1477 = v1468 + 1;
  }
  *v9 = v1477;
  if (v1477 >= (unsigned __int32 *)v1305)
  {
    v1487 = *(unsigned __int32 **)a2;
    v1488 = ((uint64_t)v1477 - *(_QWORD *)a2) >> 2;
    v1489 = v1488 + 1;
    if ((unint64_t)(v1488 + 1) >> 62)
      goto LABEL_3660;
    v1490 = v1305 - (char *)v1487;
    if (v1490 >> 1 > v1489)
      v1489 = v1490 >> 1;
    if ((unint64_t)v1490 >= 0x7FFFFFFFFFFFFFFCLL)
      v1491 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1491 = v1489;
    if (v1491)
    {
      v1492 = (char *)sub_1DCAE4D04((uint64_t)v13, v1491);
      v1487 = *(unsigned __int32 **)a2;
      v1477 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1492 = 0;
    }
    v1493 = &v1492[4 * v1488];
    v1305 = &v1492[4 * v1491];
    *(_DWORD *)v1493 = a5.n128_u32[2];
    v1486 = (unsigned __int32 *)(v1493 + 4);
    while (v1477 != v1487)
    {
      v1494 = *--v1477;
      *((_DWORD *)v1493 - 1) = v1494;
      v1493 -= 4;
    }
    *(_QWORD *)a2 = v1493;
    *(_QWORD *)(a2 + 8) = v1486;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1487)
    {
      operator delete(v1487);
      v1305 = *v13;
    }
  }
  else
  {
    *v1477 = a5.n128_u32[2];
    v1486 = v1477 + 1;
  }
  *v9 = v1486;
  if (v1486 >= (unsigned __int32 *)v1305)
  {
    v1496 = *(unsigned __int32 **)a2;
    v1497 = ((uint64_t)v1486 - *(_QWORD *)a2) >> 2;
    v1498 = v1497 + 1;
    if ((unint64_t)(v1497 + 1) >> 62)
      goto LABEL_3660;
    v1499 = v1305 - (char *)v1496;
    if (v1499 >> 1 > v1498)
      v1498 = v1499 >> 1;
    if ((unint64_t)v1499 >= 0x7FFFFFFFFFFFFFFCLL)
      v1500 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1500 = v1498;
    if (v1500)
    {
      v1501 = (char *)sub_1DCAE4D04((uint64_t)v13, v1500);
      v1496 = *(unsigned __int32 **)a2;
      v1486 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1501 = 0;
    }
    v1502 = &v1501[4 * v1497];
    v1305 = &v1501[4 * v1500];
    *(_DWORD *)v1502 = a5.n128_u32[0];
    v1495 = (unsigned __int32 *)(v1502 + 4);
    while (v1486 != v1496)
    {
      v1503 = *--v1486;
      *((_DWORD *)v1502 - 1) = v1503;
      v1502 -= 4;
    }
    *(_QWORD *)a2 = v1502;
    *(_QWORD *)(a2 + 8) = v1495;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1496)
    {
      operator delete(v1496);
      v1305 = *v13;
    }
  }
  else
  {
    *v1486 = a5.n128_u32[0];
    v1495 = v1486 + 1;
  }
  *v9 = v1495;
  if (v1495 >= (unsigned __int32 *)v1305)
  {
    v1505 = *(unsigned __int32 **)a2;
    v1506 = ((uint64_t)v1495 - *(_QWORD *)a2) >> 2;
    v1507 = v1506 + 1;
    if ((unint64_t)(v1506 + 1) >> 62)
      goto LABEL_3660;
    v1508 = v1305 - (char *)v1505;
    if (v1508 >> 1 > v1507)
      v1507 = v1508 >> 1;
    if ((unint64_t)v1508 >= 0x7FFFFFFFFFFFFFFCLL)
      v1509 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1509 = v1507;
    if (v1509)
    {
      v1510 = (char *)sub_1DCAE4D04((uint64_t)v13, v1509);
      v1505 = *(unsigned __int32 **)a2;
      v1495 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1510 = 0;
    }
    v1511 = &v1510[4 * v1506];
    v1305 = &v1510[4 * v1509];
    *(_DWORD *)v1511 = a5.n128_u32[1];
    v1504 = (unsigned __int32 *)(v1511 + 4);
    while (v1495 != v1505)
    {
      v1512 = *--v1495;
      *((_DWORD *)v1511 - 1) = v1512;
      v1511 -= 4;
    }
    *(_QWORD *)a2 = v1511;
    *(_QWORD *)(a2 + 8) = v1504;
    *(_QWORD *)(a2 + 16) = v1305;
    if (v1505)
    {
      operator delete(v1505);
      v1305 = *v13;
    }
  }
  else
  {
    *v1495 = a5.n128_u32[1];
    v1504 = v1495 + 1;
  }
  *v9 = v1504;
  if (v1504 >= (unsigned __int32 *)v1305)
  {
    v1514 = *(unsigned __int32 **)a2;
    v1515 = ((uint64_t)v1504 - *(_QWORD *)a2) >> 2;
    v1516 = v1515 + 1;
    if ((unint64_t)(v1515 + 1) >> 62)
      goto LABEL_3660;
    v1517 = v1305 - (char *)v1514;
    if (v1517 >> 1 > v1516)
      v1516 = v1517 >> 1;
    if ((unint64_t)v1517 >= 0x7FFFFFFFFFFFFFFCLL)
      v1518 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1518 = v1516;
    if (v1518)
    {
      v1519 = (char *)sub_1DCAE4D04((uint64_t)v13, v1518);
      v1514 = *(unsigned __int32 **)a2;
      v1504 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1519 = 0;
    }
    v1520 = &v1519[4 * v1515];
    v1521 = &v1519[4 * v1518];
    *(_DWORD *)v1520 = a5.n128_u32[2];
    v1513 = (unsigned __int32 *)(v1520 + 4);
    while (v1504 != v1514)
    {
      v1522 = *--v1504;
      *((_DWORD *)v1520 - 1) = v1522;
      v1520 -= 4;
    }
    *(_QWORD *)a2 = v1520;
    *(_QWORD *)(a2 + 8) = v1513;
    *(_QWORD *)(a2 + 16) = v1521;
    if (v1514)
      operator delete(v1514);
  }
  else
  {
    *v1504 = a5.n128_u32[2];
    v1513 = v1504 + 1;
  }
  *v9 = v1513;
  v1523 = v448 + 12;
  v1525 = a3[1];
  v1524 = a3[2];
  if (v1525 >= v1524)
  {
    v1527 = *a3;
    v1528 = (v1525 - *a3) >> 2;
    v1529 = v1528 + 1;
    if ((unint64_t)(v1528 + 1) >> 62)
      goto LABEL_3661;
    v1530 = v1524 - v1527;
    if (v1530 >> 1 > v1529)
      v1529 = v1530 >> 1;
    if ((unint64_t)v1530 >= 0x7FFFFFFFFFFFFFFCLL)
      v1531 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1531 = v1529;
    if (v1531)
    {
      v1532 = (char *)sub_1DCAE4D04((uint64_t)v1283, v1531);
      v1527 = *a3;
      v1525 = a3[1];
    }
    else
    {
      v1532 = 0;
    }
    v1533 = &v1532[4 * v1528];
    v1524 = &v1532[4 * v1531];
    *(_DWORD *)v1533 = v1523;
    v1526 = v1533 + 4;
    while (v1525 != v1527)
    {
      v1534 = *((_DWORD *)v1525 - 1);
      v1525 -= 4;
      *((_DWORD *)v1533 - 1) = v1534;
      v1533 -= 4;
    }
    *a3 = v1533;
    a3[1] = v1526;
    a3[2] = v1524;
    if (v1527)
    {
      operator delete(v1527);
      v1524 = *v1283;
    }
  }
  else
  {
    *(_DWORD *)v1525 = v1523;
    v1526 = v1525 + 4;
  }
  a3[1] = v1526;
  v1535 = v448 + 15;
  if (v1526 >= v1524)
  {
    v1537 = *a3;
    v1538 = (v1526 - *a3) >> 2;
    v1539 = v1538 + 1;
    if ((unint64_t)(v1538 + 1) >> 62)
      goto LABEL_3661;
    v1540 = v1524 - v1537;
    if (v1540 >> 1 > v1539)
      v1539 = v1540 >> 1;
    if ((unint64_t)v1540 >= 0x7FFFFFFFFFFFFFFCLL)
      v1541 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1541 = v1539;
    if (v1541)
    {
      v1542 = (char *)sub_1DCAE4D04((uint64_t)v1283, v1541);
      v1537 = *a3;
      v1526 = a3[1];
    }
    else
    {
      v1542 = 0;
    }
    v1543 = &v1542[4 * v1538];
    v1524 = &v1542[4 * v1541];
    *(_DWORD *)v1543 = v1535;
    v1536 = v1543 + 4;
    while (v1526 != v1537)
    {
      v1544 = *((_DWORD *)v1526 - 1);
      v1526 -= 4;
      *((_DWORD *)v1543 - 1) = v1544;
      v1543 -= 4;
    }
    *a3 = v1543;
    a3[1] = v1536;
    a3[2] = v1524;
    if (v1537)
    {
      operator delete(v1537);
      v1524 = *v1283;
    }
  }
  else
  {
    *(_DWORD *)v1526 = v1535;
    v1536 = v1526 + 4;
  }
  a3[1] = v1536;
  v1545 = v448 + 14;
  if (v1536 >= v1524)
  {
    v1547 = *a3;
    v1548 = (v1536 - *a3) >> 2;
    v1549 = v1548 + 1;
    if ((unint64_t)(v1548 + 1) >> 62)
      goto LABEL_3661;
    v1550 = v1524 - v1547;
    if (v1550 >> 1 > v1549)
      v1549 = v1550 >> 1;
    if ((unint64_t)v1550 >= 0x7FFFFFFFFFFFFFFCLL)
      v1551 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1551 = v1549;
    if (v1551)
    {
      v1552 = (char *)sub_1DCAE4D04((uint64_t)v2148, v1551);
      v1547 = *a3;
      v1536 = a3[1];
    }
    else
    {
      v1552 = 0;
    }
    v1553 = &v1552[4 * v1548];
    v1524 = &v1552[4 * v1551];
    *(_DWORD *)v1553 = v1545;
    v1546 = v1553 + 4;
    while (v1536 != v1547)
    {
      v1554 = *((_DWORD *)v1536 - 1);
      v1536 -= 4;
      *((_DWORD *)v1553 - 1) = v1554;
      v1553 -= 4;
    }
    *a3 = v1553;
    a3[1] = v1546;
    a3[2] = v1524;
    if (v1547)
    {
      operator delete(v1547);
      v1524 = *v2148;
    }
  }
  else
  {
    *(_DWORD *)v1536 = v1545;
    v1546 = v1536 + 4;
  }
  a3[1] = v1546;
  if (v1546 >= v1524)
  {
    v1556 = *a3;
    v1557 = (v1546 - *a3) >> 2;
    v1558 = v1557 + 1;
    if ((unint64_t)(v1557 + 1) >> 62)
      goto LABEL_3661;
    v1559 = v1524 - v1556;
    if (v1559 >> 1 > v1558)
      v1558 = v1559 >> 1;
    if ((unint64_t)v1559 >= 0x7FFFFFFFFFFFFFFCLL)
      v1560 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1560 = v1558;
    if (v1560)
    {
      v1561 = (char *)sub_1DCAE4D04((uint64_t)v2148, v1560);
      v1556 = *a3;
      v1546 = a3[1];
    }
    else
    {
      v1561 = 0;
    }
    v1562 = &v1561[4 * v1557];
    v1524 = &v1561[4 * v1560];
    *(_DWORD *)v1562 = v1523;
    v1555 = v1562 + 4;
    while (v1546 != v1556)
    {
      v1563 = *((_DWORD *)v1546 - 1);
      v1546 -= 4;
      *((_DWORD *)v1562 - 1) = v1563;
      v1562 -= 4;
    }
    *a3 = v1562;
    a3[1] = v1555;
    a3[2] = v1524;
    if (v1556)
    {
      operator delete(v1556);
      v1564 = a3 + 2;
      v1524 = *v2148;
      goto LABEL_2665;
    }
  }
  else
  {
    *(_DWORD *)v1546 = v1523;
    v1555 = v1546 + 4;
  }
  v1564 = a3 + 2;
LABEL_2665:
  a3[1] = v1555;
  v1565 = v448 + 13;
  if (v1555 >= v1524)
  {
    v1567 = *a3;
    v1568 = (v1555 - *a3) >> 2;
    v1569 = v1568 + 1;
    if ((unint64_t)(v1568 + 1) >> 62)
      goto LABEL_3661;
    v1570 = v1524 - v1567;
    if (v1570 >> 1 > v1569)
      v1569 = v1570 >> 1;
    if ((unint64_t)v1570 >= 0x7FFFFFFFFFFFFFFCLL)
      v1571 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1571 = v1569;
    if (v1571)
    {
      v1572 = (char *)sub_1DCAE4D04((uint64_t)v1564, v1571);
      v1567 = *a3;
      v1555 = a3[1];
    }
    else
    {
      v1572 = 0;
    }
    v1573 = &v1572[4 * v1568];
    v1524 = &v1572[4 * v1571];
    *(_DWORD *)v1573 = v1565;
    v1566 = v1573 + 4;
    while (v1555 != v1567)
    {
      v1574 = *((_DWORD *)v1555 - 1);
      v1555 -= 4;
      *((_DWORD *)v1573 - 1) = v1574;
      v1573 -= 4;
    }
    *a3 = v1573;
    a3[1] = v1566;
    a3[2] = v1524;
    if (v1567)
    {
      operator delete(v1567);
      v1524 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v1555 = v1565;
    v1566 = v1555 + 4;
  }
  a3[1] = v1566;
  if (v1566 >= v1524)
  {
    v1576 = *a3;
    v1577 = (v1566 - *a3) >> 2;
    v1578 = v1577 + 1;
    if ((unint64_t)(v1577 + 1) >> 62)
      goto LABEL_3661;
    v1579 = v1524 - v1576;
    if (v1579 >> 1 > v1578)
      v1578 = v1579 >> 1;
    if ((unint64_t)v1579 >= 0x7FFFFFFFFFFFFFFCLL)
      v1580 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1580 = v1578;
    if (v1580)
    {
      v1581 = (char *)sub_1DCAE4D04((uint64_t)v1564, v1580);
      v1576 = *a3;
      v1566 = a3[1];
    }
    else
    {
      v1581 = 0;
    }
    v1582 = &v1581[4 * v1577];
    v1583 = &v1581[4 * v1580];
    *(_DWORD *)v1582 = v1535;
    v1575 = v1582 + 4;
    while (v1566 != v1576)
    {
      v1584 = *((_DWORD *)v1566 - 1);
      v1566 -= 4;
      *((_DWORD *)v1582 - 1) = v1584;
      v1582 -= 4;
    }
    *a3 = v1582;
    a3[1] = v1575;
    a3[2] = v1583;
    if (v1576)
      operator delete(v1576);
  }
  else
  {
    *(_DWORD *)v1566 = v1535;
    v1575 = v1566 + 4;
  }
  a3[1] = v1575;
  v1585 = *v9;
  v1586 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v1588 = *(unsigned __int32 **)a2;
    v1589 = ((uint64_t)v1585 - *(_QWORD *)a2) >> 2;
    v1590 = v1589 + 1;
    if ((unint64_t)(v1589 + 1) >> 62)
      goto LABEL_3660;
    v1591 = v1586 - (char *)v1588;
    if (v1591 >> 1 > v1590)
      v1590 = v1591 >> 1;
    if ((unint64_t)v1591 >= 0x7FFFFFFFFFFFFFFCLL)
      v1592 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1592 = v1590;
    if (v1592)
    {
      v1593 = (char *)sub_1DCAE4D04((uint64_t)v13, v1592);
      v1588 = *(unsigned __int32 **)a2;
      v1585 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1593 = 0;
    }
    v1594 = &v1593[4 * v1589];
    v1586 = &v1593[4 * v1592];
    *(_DWORD *)v1594 = v2149.n128_u32[0];
    v1587 = (unsigned __int32 *)(v1594 + 4);
    while (v1585 != v1588)
    {
      v1595 = *--v1585;
      *((_DWORD *)v1594 - 1) = v1595;
      v1594 -= 4;
    }
    *(_QWORD *)a2 = v1594;
    *(_QWORD *)(a2 + 8) = v1587;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1588)
    {
      operator delete(v1588);
      v1586 = *v13;
    }
  }
  else
  {
    *v1585 = v2149.n128_u32[0];
    v1587 = v1585 + 1;
  }
  *v9 = v1587;
  if (v1587 >= (unsigned __int32 *)v1586)
  {
    v1597 = *(unsigned __int32 **)a2;
    v1598 = ((uint64_t)v1587 - *(_QWORD *)a2) >> 2;
    v1599 = v1598 + 1;
    if ((unint64_t)(v1598 + 1) >> 62)
      goto LABEL_3660;
    v1600 = v1586 - (char *)v1597;
    if (v1600 >> 1 > v1599)
      v1599 = v1600 >> 1;
    if ((unint64_t)v1600 >= 0x7FFFFFFFFFFFFFFCLL)
      v1601 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1601 = v1599;
    if (v1601)
    {
      v1602 = (char *)sub_1DCAE4D04((uint64_t)v13, v1601);
      v1597 = *(unsigned __int32 **)a2;
      v1587 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1602 = 0;
    }
    v1603 = (unsigned __int32 *)&v1602[4 * v1598];
    v1586 = &v1602[4 * v1601];
    *v1603 = v28;
    v1596 = v1603 + 1;
    while (v1587 != v1597)
    {
      v1604 = *--v1587;
      *--v1603 = v1604;
    }
    *(_QWORD *)a2 = v1603;
    *(_QWORD *)(a2 + 8) = v1596;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1597)
    {
      operator delete(v1597);
      v1586 = *v13;
    }
  }
  else
  {
    *v1587 = v28;
    v1596 = v1587 + 1;
  }
  *v9 = v1596;
  if (v1596 >= (unsigned __int32 *)v1586)
  {
    v1606 = *(unsigned __int32 **)a2;
    v1607 = ((uint64_t)v1596 - *(_QWORD *)a2) >> 2;
    v1608 = v1607 + 1;
    if ((unint64_t)(v1607 + 1) >> 62)
      goto LABEL_3660;
    v1609 = v1586 - (char *)v1606;
    if (v1609 >> 1 > v1608)
      v1608 = v1609 >> 1;
    if ((unint64_t)v1609 >= 0x7FFFFFFFFFFFFFFCLL)
      v1610 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1610 = v1608;
    if (v1610)
    {
      v1611 = (char *)sub_1DCAE4D04((uint64_t)v13, v1610);
      v1606 = *(unsigned __int32 **)a2;
      v1596 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1611 = 0;
    }
    v1612 = (unsigned __int32 *)&v1611[4 * v1607];
    v1586 = &v1611[4 * v1610];
    *v1612 = v48;
    v1605 = v1612 + 1;
    while (v1596 != v1606)
    {
      v1613 = *--v1596;
      *--v1612 = v1613;
    }
    *(_QWORD *)a2 = v1612;
    *(_QWORD *)(a2 + 8) = v1605;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1606)
    {
      operator delete(v1606);
      v1586 = *v13;
    }
  }
  else
  {
    *v1596 = v48;
    v1605 = v1596 + 1;
  }
  *v9 = v1605;
  if (v1605 >= (unsigned __int32 *)v1586)
  {
    v1615 = *(unsigned __int32 **)a2;
    v1616 = ((uint64_t)v1605 - *(_QWORD *)a2) >> 2;
    v1617 = v1616 + 1;
    if ((unint64_t)(v1616 + 1) >> 62)
      goto LABEL_3660;
    v1618 = v1586 - (char *)v1615;
    if (v1618 >> 1 > v1617)
      v1617 = v1618 >> 1;
    if ((unint64_t)v1618 >= 0x7FFFFFFFFFFFFFFCLL)
      v1619 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1619 = v1617;
    if (v1619)
    {
      v1620 = (char *)sub_1DCAE4D04((uint64_t)v13, v1619);
      v1615 = *(unsigned __int32 **)a2;
      v1605 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1620 = 0;
    }
    v1621 = &v1620[4 * v1616];
    v1586 = &v1620[4 * v1619];
    *(_DWORD *)v1621 = v2149.n128_u32[0];
    v1614 = (unsigned __int32 *)(v1621 + 4);
    while (v1605 != v1615)
    {
      v1622 = *--v1605;
      *((_DWORD *)v1621 - 1) = v1622;
      v1621 -= 4;
    }
    *(_QWORD *)a2 = v1621;
    *(_QWORD *)(a2 + 8) = v1614;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1615)
    {
      operator delete(v1615);
      v1586 = *v13;
    }
  }
  else
  {
    *v1605 = v2149.n128_u32[0];
    v1614 = v1605 + 1;
  }
  *v9 = v1614;
  if (v1614 >= (unsigned __int32 *)v1586)
  {
    v1624 = *(unsigned __int32 **)a2;
    v1625 = ((uint64_t)v1614 - *(_QWORD *)a2) >> 2;
    v1626 = v1625 + 1;
    if ((unint64_t)(v1625 + 1) >> 62)
      goto LABEL_3660;
    v1627 = v1586 - (char *)v1624;
    if (v1627 >> 1 > v1626)
      v1626 = v1627 >> 1;
    if ((unint64_t)v1627 >= 0x7FFFFFFFFFFFFFFCLL)
      v1628 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1628 = v1626;
    if (v1628)
    {
      v1629 = (char *)sub_1DCAE4D04((uint64_t)v13, v1628);
      v1624 = *(unsigned __int32 **)a2;
      v1614 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1629 = 0;
    }
    v1630 = (unsigned __int32 *)&v1629[4 * v1625];
    v1586 = &v1629[4 * v1628];
    *v1630 = v28;
    v1623 = v1630 + 1;
    while (v1614 != v1624)
    {
      v1631 = *--v1614;
      *--v1630 = v1631;
    }
    *(_QWORD *)a2 = v1630;
    *(_QWORD *)(a2 + 8) = v1623;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1624)
    {
      operator delete(v1624);
      v1586 = *v13;
    }
  }
  else
  {
    *v1614 = v28;
    v1623 = v1614 + 1;
  }
  *v9 = v1623;
  if (v1623 >= (unsigned __int32 *)v1586)
  {
    v1633 = *(unsigned __int32 **)a2;
    v1634 = ((uint64_t)v1623 - *(_QWORD *)a2) >> 2;
    v1635 = v1634 + 1;
    if ((unint64_t)(v1634 + 1) >> 62)
      goto LABEL_3660;
    v1636 = v1586 - (char *)v1633;
    if (v1636 >> 1 > v1635)
      v1635 = v1636 >> 1;
    if ((unint64_t)v1636 >= 0x7FFFFFFFFFFFFFFCLL)
      v1637 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1637 = v1635;
    if (v1637)
    {
      v1638 = (char *)sub_1DCAE4D04((uint64_t)v13, v1637);
      v1633 = *(unsigned __int32 **)a2;
      v1623 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1638 = 0;
    }
    v1639 = (unsigned __int32 *)&v1638[4 * v1634];
    v1586 = &v1638[4 * v1637];
    *v1639 = v48;
    v1632 = v1639 + 1;
    while (v1623 != v1633)
    {
      v1640 = *--v1623;
      *--v1639 = v1640;
    }
    *(_QWORD *)a2 = v1639;
    *(_QWORD *)(a2 + 8) = v1632;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1633)
    {
      operator delete(v1633);
      v1586 = *v13;
    }
  }
  else
  {
    *v1623 = v48;
    v1632 = v1623 + 1;
  }
  *v9 = v1632;
  if (v1632 >= (unsigned __int32 *)v1586)
  {
    v1642 = *(unsigned __int32 **)a2;
    v1643 = ((uint64_t)v1632 - *(_QWORD *)a2) >> 2;
    v1644 = v1643 + 1;
    if ((unint64_t)(v1643 + 1) >> 62)
      goto LABEL_3660;
    v1645 = v1586 - (char *)v1642;
    if (v1645 >> 1 > v1644)
      v1644 = v1645 >> 1;
    if ((unint64_t)v1645 >= 0x7FFFFFFFFFFFFFFCLL)
      v1646 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1646 = v1644;
    if (v1646)
    {
      v1647 = (char *)sub_1DCAE4D04((uint64_t)v13, v1646);
      v1642 = *(unsigned __int32 **)a2;
      v1632 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1647 = 0;
    }
    v1648 = &v1647[4 * v1643];
    v1586 = &v1647[4 * v1646];
    *(_DWORD *)v1648 = a5.n128_u32[0];
    v1641 = (unsigned __int32 *)(v1648 + 4);
    while (v1632 != v1642)
    {
      v1649 = *--v1632;
      *((_DWORD *)v1648 - 1) = v1649;
      v1648 -= 4;
    }
    *(_QWORD *)a2 = v1648;
    *(_QWORD *)(a2 + 8) = v1641;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1642)
    {
      operator delete(v1642);
      v1586 = *v13;
    }
  }
  else
  {
    *v1632 = a5.n128_u32[0];
    v1641 = v1632 + 1;
  }
  *v9 = v1641;
  if (v1641 >= (unsigned __int32 *)v1586)
  {
    v1651 = *(unsigned __int32 **)a2;
    v1652 = ((uint64_t)v1641 - *(_QWORD *)a2) >> 2;
    v1653 = v1652 + 1;
    if ((unint64_t)(v1652 + 1) >> 62)
      goto LABEL_3660;
    v1654 = v1586 - (char *)v1651;
    if (v1654 >> 1 > v1653)
      v1653 = v1654 >> 1;
    if ((unint64_t)v1654 >= 0x7FFFFFFFFFFFFFFCLL)
      v1655 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1655 = v1653;
    if (v1655)
    {
      v1656 = (char *)sub_1DCAE4D04((uint64_t)v13, v1655);
      v1651 = *(unsigned __int32 **)a2;
      v1641 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1656 = 0;
    }
    v1657 = (unsigned __int32 *)&v1656[4 * v1652];
    v1586 = &v1656[4 * v1655];
    *v1657 = v28;
    v1650 = v1657 + 1;
    while (v1641 != v1651)
    {
      v1658 = *--v1641;
      *--v1657 = v1658;
    }
    *(_QWORD *)a2 = v1657;
    *(_QWORD *)(a2 + 8) = v1650;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1651)
    {
      operator delete(v1651);
      v1586 = *v13;
    }
  }
  else
  {
    *v1641 = v28;
    v1650 = v1641 + 1;
  }
  *v9 = v1650;
  if (v1650 >= (unsigned __int32 *)v1586)
  {
    v1660 = *(unsigned __int32 **)a2;
    v1661 = ((uint64_t)v1650 - *(_QWORD *)a2) >> 2;
    v1662 = v1661 + 1;
    if ((unint64_t)(v1661 + 1) >> 62)
      goto LABEL_3660;
    v1663 = v1586 - (char *)v1660;
    if (v1663 >> 1 > v1662)
      v1662 = v1663 >> 1;
    if ((unint64_t)v1663 >= 0x7FFFFFFFFFFFFFFCLL)
      v1664 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1664 = v1662;
    if (v1664)
    {
      v1665 = (char *)sub_1DCAE4D04((uint64_t)v13, v1664);
      v1660 = *(unsigned __int32 **)a2;
      v1650 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1665 = 0;
    }
    v1666 = (unsigned __int32 *)&v1665[4 * v1661];
    v1586 = &v1665[4 * v1664];
    *v1666 = v48;
    v1659 = v1666 + 1;
    while (v1650 != v1660)
    {
      v1667 = *--v1650;
      *--v1666 = v1667;
    }
    *(_QWORD *)a2 = v1666;
    *(_QWORD *)(a2 + 8) = v1659;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1660)
    {
      operator delete(v1660);
      v1586 = *v13;
    }
  }
  else
  {
    *v1650 = v48;
    v1659 = v1650 + 1;
  }
  *v9 = v1659;
  if (v1659 >= (unsigned __int32 *)v1586)
  {
    v1669 = *(unsigned __int32 **)a2;
    v1670 = ((uint64_t)v1659 - *(_QWORD *)a2) >> 2;
    v1671 = v1670 + 1;
    if ((unint64_t)(v1670 + 1) >> 62)
      goto LABEL_3660;
    v1672 = v1586 - (char *)v1669;
    if (v1672 >> 1 > v1671)
      v1671 = v1672 >> 1;
    if ((unint64_t)v1672 >= 0x7FFFFFFFFFFFFFFCLL)
      v1673 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1673 = v1671;
    if (v1673)
    {
      v1674 = (char *)sub_1DCAE4D04((uint64_t)v13, v1673);
      v1669 = *(unsigned __int32 **)a2;
      v1659 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1674 = 0;
    }
    v1675 = &v1674[4 * v1670];
    v1586 = &v1674[4 * v1673];
    *(_DWORD *)v1675 = a5.n128_u32[0];
    v1668 = (unsigned __int32 *)(v1675 + 4);
    while (v1659 != v1669)
    {
      v1676 = *--v1659;
      *((_DWORD *)v1675 - 1) = v1676;
      v1675 -= 4;
    }
    *(_QWORD *)a2 = v1675;
    *(_QWORD *)(a2 + 8) = v1668;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1669)
    {
      operator delete(v1669);
      v1586 = *v13;
    }
  }
  else
  {
    *v1659 = a5.n128_u32[0];
    v1668 = v1659 + 1;
  }
  *v9 = v1668;
  if (v1668 >= (unsigned __int32 *)v1586)
  {
    v1678 = *(unsigned __int32 **)a2;
    v1679 = ((uint64_t)v1668 - *(_QWORD *)a2) >> 2;
    v1680 = v1679 + 1;
    if ((unint64_t)(v1679 + 1) >> 62)
      goto LABEL_3660;
    v1681 = v1586 - (char *)v1678;
    if (v1681 >> 1 > v1680)
      v1680 = v1681 >> 1;
    if ((unint64_t)v1681 >= 0x7FFFFFFFFFFFFFFCLL)
      v1682 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1682 = v1680;
    if (v1682)
    {
      v1683 = (char *)sub_1DCAE4D04((uint64_t)v13, v1682);
      v1678 = *(unsigned __int32 **)a2;
      v1668 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1683 = 0;
    }
    v1684 = (unsigned __int32 *)&v1683[4 * v1679];
    v1586 = &v1683[4 * v1682];
    *v1684 = v28;
    v1677 = v1684 + 1;
    while (v1668 != v1678)
    {
      v1685 = *--v1668;
      *--v1684 = v1685;
    }
    *(_QWORD *)a2 = v1684;
    *(_QWORD *)(a2 + 8) = v1677;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1678)
    {
      operator delete(v1678);
      v1586 = *v13;
    }
  }
  else
  {
    *v1668 = v28;
    v1677 = v1668 + 1;
  }
  *v9 = v1677;
  if (v1677 >= (unsigned __int32 *)v1586)
  {
    v1687 = *(unsigned __int32 **)a2;
    v1688 = ((uint64_t)v1677 - *(_QWORD *)a2) >> 2;
    v1689 = v1688 + 1;
    if ((unint64_t)(v1688 + 1) >> 62)
      goto LABEL_3660;
    v1690 = v1586 - (char *)v1687;
    if (v1690 >> 1 > v1689)
      v1689 = v1690 >> 1;
    if ((unint64_t)v1690 >= 0x7FFFFFFFFFFFFFFCLL)
      v1691 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1691 = v1689;
    if (v1691)
    {
      v1692 = (char *)sub_1DCAE4D04((uint64_t)v13, v1691);
      v1687 = *(unsigned __int32 **)a2;
      v1677 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1692 = 0;
    }
    v1693 = (unsigned __int32 *)&v1692[4 * v1688];
    v1586 = &v1692[4 * v1691];
    *v1693 = v48;
    v1686 = v1693 + 1;
    while (v1677 != v1687)
    {
      v1694 = *--v1677;
      *--v1693 = v1694;
    }
    *(_QWORD *)a2 = v1693;
    *(_QWORD *)(a2 + 8) = v1686;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1687)
    {
      operator delete(v1687);
      v1586 = *v13;
    }
  }
  else
  {
    *v1677 = v48;
    v1686 = v1677 + 1;
  }
  *v9 = v1686;
  if (v1686 >= (unsigned __int32 *)v1586)
  {
    v1696 = *(unsigned __int32 **)a2;
    v1697 = ((uint64_t)v1686 - *(_QWORD *)a2) >> 2;
    v1698 = v1697 + 1;
    if ((unint64_t)(v1697 + 1) >> 62)
      goto LABEL_3660;
    v1699 = v1586 - (char *)v1696;
    if (v1699 >> 1 > v1698)
      v1698 = v1699 >> 1;
    if ((unint64_t)v1699 >= 0x7FFFFFFFFFFFFFFCLL)
      v1700 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1700 = v1698;
    if (v1700)
    {
      v1701 = (char *)sub_1DCAE4D04((uint64_t)v13, v1700);
      v1696 = *(unsigned __int32 **)a2;
      v1686 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1701 = 0;
    }
    v1702 = &v1701[4 * v1697];
    v1586 = &v1701[4 * v1700];
    *(_DWORD *)v1702 = v2149.n128_u32[0];
    v1695 = (unsigned __int32 *)(v1702 + 4);
    while (v1686 != v1696)
    {
      v1703 = *--v1686;
      *((_DWORD *)v1702 - 1) = v1703;
      v1702 -= 4;
    }
    *(_QWORD *)a2 = v1702;
    *(_QWORD *)(a2 + 8) = v1695;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1696)
    {
      operator delete(v1696);
      v1586 = *v13;
    }
  }
  else
  {
    *v1686 = v2149.n128_u32[0];
    v1695 = v1686 + 1;
  }
  *v9 = v1695;
  if (v1695 >= (unsigned __int32 *)v1586)
  {
    v1705 = *(unsigned __int32 **)a2;
    v1706 = ((uint64_t)v1695 - *(_QWORD *)a2) >> 2;
    v1707 = v1706 + 1;
    if ((unint64_t)(v1706 + 1) >> 62)
      goto LABEL_3660;
    v1708 = v1586 - (char *)v1705;
    if (v1708 >> 1 > v1707)
      v1707 = v1708 >> 1;
    if ((unint64_t)v1708 >= 0x7FFFFFFFFFFFFFFCLL)
      v1709 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1709 = v1707;
    if (v1709)
    {
      v1710 = (char *)sub_1DCAE4D04((uint64_t)v13, v1709);
      v1705 = *(unsigned __int32 **)a2;
      v1695 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1710 = 0;
    }
    v1711 = (unsigned __int32 *)&v1710[4 * v1706];
    v1586 = &v1710[4 * v1709];
    *v1711 = v28;
    v1704 = v1711 + 1;
    while (v1695 != v1705)
    {
      v1712 = *--v1695;
      *--v1711 = v1712;
    }
    *(_QWORD *)a2 = v1711;
    *(_QWORD *)(a2 + 8) = v1704;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1705)
    {
      operator delete(v1705);
      v1586 = *v13;
    }
  }
  else
  {
    *v1695 = v28;
    v1704 = v1695 + 1;
  }
  *v9 = v1704;
  if (v1704 >= (unsigned __int32 *)v1586)
  {
    v1714 = *(unsigned __int32 **)a2;
    v1715 = ((uint64_t)v1704 - *(_QWORD *)a2) >> 2;
    v1716 = v1715 + 1;
    if ((unint64_t)(v1715 + 1) >> 62)
      goto LABEL_3660;
    v1717 = v1586 - (char *)v1714;
    if (v1717 >> 1 > v1716)
      v1716 = v1717 >> 1;
    if ((unint64_t)v1717 >= 0x7FFFFFFFFFFFFFFCLL)
      v1718 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1718 = v1716;
    if (v1718)
    {
      v1719 = (char *)sub_1DCAE4D04((uint64_t)v13, v1718);
      v1714 = *(unsigned __int32 **)a2;
      v1704 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1719 = 0;
    }
    v1720 = &v1719[4 * v1715];
    v1586 = &v1719[4 * v1718];
    *(_DWORD *)v1720 = a5.n128_u32[2];
    v1713 = (unsigned __int32 *)(v1720 + 4);
    while (v1704 != v1714)
    {
      v1721 = *--v1704;
      *((_DWORD *)v1720 - 1) = v1721;
      v1720 -= 4;
    }
    *(_QWORD *)a2 = v1720;
    *(_QWORD *)(a2 + 8) = v1713;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1714)
    {
      operator delete(v1714);
      v1586 = *v13;
    }
  }
  else
  {
    *v1704 = a5.n128_u32[2];
    v1713 = v1704 + 1;
  }
  *v9 = v1713;
  if (v1713 >= (unsigned __int32 *)v1586)
  {
    v1723 = *(unsigned __int32 **)a2;
    v1724 = ((uint64_t)v1713 - *(_QWORD *)a2) >> 2;
    v1725 = v1724 + 1;
    if ((unint64_t)(v1724 + 1) >> 62)
      goto LABEL_3660;
    v1726 = v1586 - (char *)v1723;
    if (v1726 >> 1 > v1725)
      v1725 = v1726 >> 1;
    if ((unint64_t)v1726 >= 0x7FFFFFFFFFFFFFFCLL)
      v1727 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1727 = v1725;
    if (v1727)
    {
      v1728 = (char *)sub_1DCAE4D04((uint64_t)v13, v1727);
      v1723 = *(unsigned __int32 **)a2;
      v1713 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1728 = 0;
    }
    v1729 = &v1728[4 * v1724];
    v1586 = &v1728[4 * v1727];
    *(_DWORD *)v1729 = v2149.n128_u32[0];
    v1722 = (unsigned __int32 *)(v1729 + 4);
    while (v1713 != v1723)
    {
      v1730 = *--v1713;
      *((_DWORD *)v1729 - 1) = v1730;
      v1729 -= 4;
    }
    *(_QWORD *)a2 = v1729;
    *(_QWORD *)(a2 + 8) = v1722;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1723)
    {
      operator delete(v1723);
      v1586 = *v13;
    }
  }
  else
  {
    *v1713 = v2149.n128_u32[0];
    v1722 = v1713 + 1;
  }
  *v9 = v1722;
  if (v1722 >= (unsigned __int32 *)v1586)
  {
    v1732 = *(unsigned __int32 **)a2;
    v1733 = ((uint64_t)v1722 - *(_QWORD *)a2) >> 2;
    v1734 = v1733 + 1;
    if ((unint64_t)(v1733 + 1) >> 62)
      goto LABEL_3660;
    v1735 = v1586 - (char *)v1732;
    if (v1735 >> 1 > v1734)
      v1734 = v1735 >> 1;
    if ((unint64_t)v1735 >= 0x7FFFFFFFFFFFFFFCLL)
      v1736 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1736 = v1734;
    if (v1736)
    {
      v1737 = (char *)sub_1DCAE4D04((uint64_t)v13, v1736);
      v1732 = *(unsigned __int32 **)a2;
      v1722 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1737 = 0;
    }
    v1738 = (unsigned __int32 *)&v1737[4 * v1733];
    v1586 = &v1737[4 * v1736];
    *v1738 = v28;
    v1731 = v1738 + 1;
    while (v1722 != v1732)
    {
      v1739 = *--v1722;
      *--v1738 = v1739;
    }
    *(_QWORD *)a2 = v1738;
    *(_QWORD *)(a2 + 8) = v1731;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1732)
    {
      operator delete(v1732);
      v1586 = *v13;
    }
  }
  else
  {
    *v1722 = v28;
    v1731 = v1722 + 1;
  }
  *v9 = v1731;
  if (v1731 >= (unsigned __int32 *)v1586)
  {
    v1741 = *(unsigned __int32 **)a2;
    v1742 = ((uint64_t)v1731 - *(_QWORD *)a2) >> 2;
    v1743 = v1742 + 1;
    if ((unint64_t)(v1742 + 1) >> 62)
      goto LABEL_3660;
    v1744 = v1586 - (char *)v1741;
    if (v1744 >> 1 > v1743)
      v1743 = v1744 >> 1;
    if ((unint64_t)v1744 >= 0x7FFFFFFFFFFFFFFCLL)
      v1745 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1745 = v1743;
    if (v1745)
    {
      v1746 = (char *)sub_1DCAE4D04((uint64_t)v13, v1745);
      v1741 = *(unsigned __int32 **)a2;
      v1731 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1746 = 0;
    }
    v1747 = &v1746[4 * v1742];
    v1586 = &v1746[4 * v1745];
    *(_DWORD *)v1747 = a5.n128_u32[2];
    v1740 = (unsigned __int32 *)(v1747 + 4);
    while (v1731 != v1741)
    {
      v1748 = *--v1731;
      *((_DWORD *)v1747 - 1) = v1748;
      v1747 -= 4;
    }
    *(_QWORD *)a2 = v1747;
    *(_QWORD *)(a2 + 8) = v1740;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1741)
    {
      operator delete(v1741);
      v1586 = *v13;
    }
  }
  else
  {
    *v1731 = a5.n128_u32[2];
    v1740 = v1731 + 1;
  }
  *v9 = v1740;
  if (v1740 >= (unsigned __int32 *)v1586)
  {
    v1750 = *(unsigned __int32 **)a2;
    v1751 = ((uint64_t)v1740 - *(_QWORD *)a2) >> 2;
    v1752 = v1751 + 1;
    if ((unint64_t)(v1751 + 1) >> 62)
      goto LABEL_3660;
    v1753 = v1586 - (char *)v1750;
    if (v1753 >> 1 > v1752)
      v1752 = v1753 >> 1;
    if ((unint64_t)v1753 >= 0x7FFFFFFFFFFFFFFCLL)
      v1754 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1754 = v1752;
    if (v1754)
    {
      v1755 = (char *)sub_1DCAE4D04((uint64_t)v13, v1754);
      v1750 = *(unsigned __int32 **)a2;
      v1740 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1755 = 0;
    }
    v1756 = &v1755[4 * v1751];
    v1586 = &v1755[4 * v1754];
    *(_DWORD *)v1756 = a5.n128_u32[0];
    v1749 = (unsigned __int32 *)(v1756 + 4);
    while (v1740 != v1750)
    {
      v1757 = *--v1740;
      *((_DWORD *)v1756 - 1) = v1757;
      v1756 -= 4;
    }
    *(_QWORD *)a2 = v1756;
    *(_QWORD *)(a2 + 8) = v1749;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1750)
    {
      operator delete(v1750);
      v1586 = *v13;
    }
  }
  else
  {
    *v1740 = a5.n128_u32[0];
    v1749 = v1740 + 1;
  }
  *v9 = v1749;
  if (v1749 >= (unsigned __int32 *)v1586)
  {
    v1759 = *(unsigned __int32 **)a2;
    v1760 = ((uint64_t)v1749 - *(_QWORD *)a2) >> 2;
    v1761 = v1760 + 1;
    if ((unint64_t)(v1760 + 1) >> 62)
      goto LABEL_3660;
    v1762 = v1586 - (char *)v1759;
    if (v1762 >> 1 > v1761)
      v1761 = v1762 >> 1;
    if ((unint64_t)v1762 >= 0x7FFFFFFFFFFFFFFCLL)
      v1763 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1763 = v1761;
    if (v1763)
    {
      v1764 = (char *)sub_1DCAE4D04((uint64_t)v13, v1763);
      v1759 = *(unsigned __int32 **)a2;
      v1749 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1764 = 0;
    }
    v1765 = (unsigned __int32 *)&v1764[4 * v1760];
    v1586 = &v1764[4 * v1763];
    *v1765 = v28;
    v1758 = v1765 + 1;
    while (v1749 != v1759)
    {
      v1766 = *--v1749;
      *--v1765 = v1766;
    }
    *(_QWORD *)a2 = v1765;
    *(_QWORD *)(a2 + 8) = v1758;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1759)
    {
      operator delete(v1759);
      v1586 = *v13;
    }
  }
  else
  {
    *v1749 = v28;
    v1758 = v1749 + 1;
  }
  *v9 = v1758;
  if (v1758 >= (unsigned __int32 *)v1586)
  {
    v1768 = *(unsigned __int32 **)a2;
    v1769 = ((uint64_t)v1758 - *(_QWORD *)a2) >> 2;
    v1770 = v1769 + 1;
    if ((unint64_t)(v1769 + 1) >> 62)
      goto LABEL_3660;
    v1771 = v1586 - (char *)v1768;
    if (v1771 >> 1 > v1770)
      v1770 = v1771 >> 1;
    if ((unint64_t)v1771 >= 0x7FFFFFFFFFFFFFFCLL)
      v1772 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1772 = v1770;
    if (v1772)
    {
      v1773 = (char *)sub_1DCAE4D04((uint64_t)v13, v1772);
      v1768 = *(unsigned __int32 **)a2;
      v1758 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1773 = 0;
    }
    v1774 = &v1773[4 * v1769];
    v1586 = &v1773[4 * v1772];
    *(_DWORD *)v1774 = a5.n128_u32[2];
    v1767 = (unsigned __int32 *)(v1774 + 4);
    while (v1758 != v1768)
    {
      v1775 = *--v1758;
      *((_DWORD *)v1774 - 1) = v1775;
      v1774 -= 4;
    }
    *(_QWORD *)a2 = v1774;
    *(_QWORD *)(a2 + 8) = v1767;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1768)
    {
      operator delete(v1768);
      v1586 = *v13;
    }
  }
  else
  {
    *v1758 = a5.n128_u32[2];
    v1767 = v1758 + 1;
  }
  *v9 = v1767;
  if (v1767 >= (unsigned __int32 *)v1586)
  {
    v1777 = *(unsigned __int32 **)a2;
    v1778 = ((uint64_t)v1767 - *(_QWORD *)a2) >> 2;
    v1779 = v1778 + 1;
    if ((unint64_t)(v1778 + 1) >> 62)
      goto LABEL_3660;
    v1780 = v1586 - (char *)v1777;
    if (v1780 >> 1 > v1779)
      v1779 = v1780 >> 1;
    if ((unint64_t)v1780 >= 0x7FFFFFFFFFFFFFFCLL)
      v1781 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1781 = v1779;
    if (v1781)
    {
      v1782 = (char *)sub_1DCAE4D04((uint64_t)v13, v1781);
      v1777 = *(unsigned __int32 **)a2;
      v1767 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1782 = 0;
    }
    v1783 = &v1782[4 * v1778];
    v1586 = &v1782[4 * v1781];
    *(_DWORD *)v1783 = a5.n128_u32[0];
    v1776 = (unsigned __int32 *)(v1783 + 4);
    while (v1767 != v1777)
    {
      v1784 = *--v1767;
      *((_DWORD *)v1783 - 1) = v1784;
      v1783 -= 4;
    }
    *(_QWORD *)a2 = v1783;
    *(_QWORD *)(a2 + 8) = v1776;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1777)
    {
      operator delete(v1777);
      v1586 = *v13;
    }
  }
  else
  {
    *v1767 = a5.n128_u32[0];
    v1776 = v1767 + 1;
  }
  *v9 = v1776;
  if (v1776 >= (unsigned __int32 *)v1586)
  {
    v1786 = *(unsigned __int32 **)a2;
    v1787 = ((uint64_t)v1776 - *(_QWORD *)a2) >> 2;
    v1788 = v1787 + 1;
    if ((unint64_t)(v1787 + 1) >> 62)
      goto LABEL_3660;
    v1789 = v1586 - (char *)v1786;
    if (v1789 >> 1 > v1788)
      v1788 = v1789 >> 1;
    if ((unint64_t)v1789 >= 0x7FFFFFFFFFFFFFFCLL)
      v1790 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1790 = v1788;
    if (v1790)
    {
      v1791 = (char *)sub_1DCAE4D04((uint64_t)v13, v1790);
      v1786 = *(unsigned __int32 **)a2;
      v1776 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1791 = 0;
    }
    v1792 = (unsigned __int32 *)&v1791[4 * v1787];
    v1586 = &v1791[4 * v1790];
    *v1792 = v28;
    v1785 = v1792 + 1;
    while (v1776 != v1786)
    {
      v1793 = *--v1776;
      *--v1792 = v1793;
    }
    *(_QWORD *)a2 = v1792;
    *(_QWORD *)(a2 + 8) = v1785;
    *(_QWORD *)(a2 + 16) = v1586;
    if (v1786)
    {
      operator delete(v1786);
      v1586 = *v13;
    }
  }
  else
  {
    *v1776 = v28;
    v1785 = v1776 + 1;
  }
  *v9 = v1785;
  if (v1785 >= (unsigned __int32 *)v1586)
  {
    v1795 = *(unsigned __int32 **)a2;
    v1796 = ((uint64_t)v1785 - *(_QWORD *)a2) >> 2;
    v1797 = v1796 + 1;
    if ((unint64_t)(v1796 + 1) >> 62)
      goto LABEL_3660;
    v1798 = v1586 - (char *)v1795;
    if (v1798 >> 1 > v1797)
      v1797 = v1798 >> 1;
    if ((unint64_t)v1798 >= 0x7FFFFFFFFFFFFFFCLL)
      v1799 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1799 = v1797;
    if (v1799)
    {
      v1800 = (char *)sub_1DCAE4D04((uint64_t)v13, v1799);
      v1795 = *(unsigned __int32 **)a2;
      v1785 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1800 = 0;
    }
    v1801 = &v1800[4 * v1796];
    v1802 = &v1800[4 * v1799];
    *(_DWORD *)v1801 = a5.n128_u32[2];
    v1794 = (unsigned __int32 *)(v1801 + 4);
    while (v1785 != v1795)
    {
      v1803 = *--v1785;
      *((_DWORD *)v1801 - 1) = v1803;
      v1801 -= 4;
    }
    *(_QWORD *)a2 = v1801;
    *(_QWORD *)(a2 + 8) = v1794;
    *(_QWORD *)(a2 + 16) = v1802;
    if (v1795)
      operator delete(v1795);
  }
  else
  {
    *v1785 = a5.n128_u32[2];
    v1794 = v1785 + 1;
  }
  *v9 = v1794;
  v1804 = v448 + 16;
  v1806 = a3[1];
  v1805 = a3[2];
  if (v1806 >= v1805)
  {
    v1808 = *a3;
    v1809 = (v1806 - *a3) >> 2;
    v1810 = v1809 + 1;
    if ((unint64_t)(v1809 + 1) >> 62)
      goto LABEL_3661;
    v1811 = v1805 - v1808;
    if (v1811 >> 1 > v1810)
      v1810 = v1811 >> 1;
    if ((unint64_t)v1811 >= 0x7FFFFFFFFFFFFFFCLL)
      v1812 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1812 = v1810;
    if (v1812)
    {
      v1813 = (char *)sub_1DCAE4D04((uint64_t)v1564, v1812);
      v1808 = *a3;
      v1806 = a3[1];
    }
    else
    {
      v1813 = 0;
    }
    v1814 = &v1813[4 * v1809];
    v1805 = &v1813[4 * v1812];
    *(_DWORD *)v1814 = v1804;
    v1807 = v1814 + 4;
    while (v1806 != v1808)
    {
      v1815 = *((_DWORD *)v1806 - 1);
      v1806 -= 4;
      *((_DWORD *)v1814 - 1) = v1815;
      v1814 -= 4;
    }
    *a3 = v1814;
    a3[1] = v1807;
    a3[2] = v1805;
    if (v1808)
    {
      operator delete(v1808);
      v1805 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v1806 = v1804;
    v1807 = v1806 + 4;
  }
  a3[1] = v1807;
  v1816 = v448 + 17;
  if (v1807 >= v1805)
  {
    v1818 = *a3;
    v1819 = (v1807 - *a3) >> 2;
    v1820 = v1819 + 1;
    if ((unint64_t)(v1819 + 1) >> 62)
      goto LABEL_3661;
    v1821 = v1805 - v1818;
    if (v1821 >> 1 > v1820)
      v1820 = v1821 >> 1;
    if ((unint64_t)v1821 >= 0x7FFFFFFFFFFFFFFCLL)
      v1822 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1822 = v1820;
    if (v1822)
    {
      v1823 = (char *)sub_1DCAE4D04((uint64_t)v1564, v1822);
      v1818 = *a3;
      v1807 = a3[1];
    }
    else
    {
      v1823 = 0;
    }
    v1824 = &v1823[4 * v1819];
    v1805 = &v1823[4 * v1822];
    *(_DWORD *)v1824 = v1816;
    v1817 = v1824 + 4;
    while (v1807 != v1818)
    {
      v1825 = *((_DWORD *)v1807 - 1);
      v1807 -= 4;
      *((_DWORD *)v1824 - 1) = v1825;
      v1824 -= 4;
    }
    *a3 = v1824;
    a3[1] = v1817;
    a3[2] = v1805;
    if (v1818)
    {
      operator delete(v1818);
      v1805 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v1807 = v1816;
    v1817 = v1807 + 4;
  }
  a3[1] = v1817;
  v1826 = v448 + 19;
  if (v1817 >= v1805)
  {
    v1828 = *a3;
    v1829 = (v1817 - *a3) >> 2;
    v1830 = v1829 + 1;
    if ((unint64_t)(v1829 + 1) >> 62)
      goto LABEL_3661;
    v1831 = v1805 - v1828;
    if (v1831 >> 1 > v1830)
      v1830 = v1831 >> 1;
    if ((unint64_t)v1831 >= 0x7FFFFFFFFFFFFFFCLL)
      v1832 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1832 = v1830;
    if (v1832)
    {
      v1833 = (char *)sub_1DCAE4D04((uint64_t)v1564, v1832);
      v1828 = *a3;
      v1817 = a3[1];
    }
    else
    {
      v1833 = 0;
    }
    v1834 = &v1833[4 * v1829];
    v1805 = &v1833[4 * v1832];
    *(_DWORD *)v1834 = v1826;
    v1827 = v1834 + 4;
    while (v1817 != v1828)
    {
      v1835 = *((_DWORD *)v1817 - 1);
      v1817 -= 4;
      *((_DWORD *)v1834 - 1) = v1835;
      v1834 -= 4;
    }
    *a3 = v1834;
    a3[1] = v1827;
    a3[2] = v1805;
    if (v1828)
    {
      operator delete(v1828);
      v1805 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v1817 = v1826;
    v1827 = v1817 + 4;
  }
  a3[1] = v1827;
  if (v1827 >= v1805)
  {
    v1837 = *a3;
    v1838 = (v1827 - *a3) >> 2;
    v1839 = v1838 + 1;
    if ((unint64_t)(v1838 + 1) >> 62)
      goto LABEL_3661;
    v1840 = v1805 - v1837;
    if (v1840 >> 1 > v1839)
      v1839 = v1840 >> 1;
    if ((unint64_t)v1840 >= 0x7FFFFFFFFFFFFFFCLL)
      v1841 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1841 = v1839;
    if (v1841)
    {
      v1842 = (char *)sub_1DCAE4D04((uint64_t)v1564, v1841);
      v1837 = *a3;
      v1827 = a3[1];
    }
    else
    {
      v1842 = 0;
    }
    v1843 = &v1842[4 * v1838];
    v1805 = &v1842[4 * v1841];
    *(_DWORD *)v1843 = v1804;
    v1836 = v1843 + 4;
    while (v1827 != v1837)
    {
      v1844 = *((_DWORD *)v1827 - 1);
      v1827 -= 4;
      *((_DWORD *)v1843 - 1) = v1844;
      v1843 -= 4;
    }
    *a3 = v1843;
    a3[1] = v1836;
    a3[2] = v1805;
    if (v1837)
    {
      operator delete(v1837);
      v1805 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v1827 = v1804;
    v1836 = v1827 + 4;
  }
  a3[1] = v1836;
  if (v1836 >= v1805)
  {
    v1846 = *a3;
    v1847 = (v1836 - *a3) >> 2;
    v1848 = v1847 + 1;
    if ((unint64_t)(v1847 + 1) >> 62)
      goto LABEL_3661;
    v1849 = v1805 - v1846;
    if (v1849 >> 1 > v1848)
      v1848 = v1849 >> 1;
    if ((unint64_t)v1849 >= 0x7FFFFFFFFFFFFFFCLL)
      v1850 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1850 = v1848;
    if (v1850)
    {
      v1851 = (char *)sub_1DCAE4D04((uint64_t)v1564, v1850);
      v1846 = *a3;
      v1836 = a3[1];
    }
    else
    {
      v1851 = 0;
    }
    v1852 = &v1851[4 * v1847];
    v1805 = &v1851[4 * v1850];
    *(_DWORD *)v1852 = v1826;
    v1845 = v1852 + 4;
    while (v1836 != v1846)
    {
      v1853 = *((_DWORD *)v1836 - 1);
      v1836 -= 4;
      *((_DWORD *)v1852 - 1) = v1853;
      v1852 -= 4;
    }
    *a3 = v1852;
    a3[1] = v1845;
    a3[2] = v1805;
    if (v1846)
    {
      operator delete(v1846);
      v1805 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v1836 = v1826;
    v1845 = v1836 + 4;
  }
  a3[1] = v1845;
  v1854 = v448 + 18;
  if (v1845 >= v1805)
  {
    v1856 = *a3;
    v1857 = (v1845 - *a3) >> 2;
    v1858 = v1857 + 1;
    if ((unint64_t)(v1857 + 1) >> 62)
      goto LABEL_3661;
    v1859 = v1805 - v1856;
    if (v1859 >> 1 > v1858)
      v1858 = v1859 >> 1;
    if ((unint64_t)v1859 >= 0x7FFFFFFFFFFFFFFCLL)
      v1860 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1860 = v1858;
    if (v1860)
    {
      v1861 = (char *)sub_1DCAE4D04((uint64_t)v1564, v1860);
      v1856 = *a3;
      v1845 = a3[1];
    }
    else
    {
      v1861 = 0;
    }
    v1862 = &v1861[4 * v1857];
    v1863 = &v1861[4 * v1860];
    *(_DWORD *)v1862 = v1854;
    v1855 = v1862 + 4;
    while (v1845 != v1856)
    {
      v1864 = *((_DWORD *)v1845 - 1);
      v1845 -= 4;
      *((_DWORD *)v1862 - 1) = v1864;
      v1862 -= 4;
    }
    *a3 = v1862;
    a3[1] = v1855;
    a3[2] = v1863;
    if (v1856)
      operator delete(v1856);
  }
  else
  {
    *(_DWORD *)v1845 = v1854;
    v1855 = v1845 + 4;
  }
  a3[1] = v1855;
  v1865 = *v9;
  v1866 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v1868 = *(unsigned __int32 **)a2;
    v1869 = ((uint64_t)v1865 - *(_QWORD *)a2) >> 2;
    v1870 = v1869 + 1;
    if ((unint64_t)(v1869 + 1) >> 62)
      goto LABEL_3660;
    v1871 = v1866 - (char *)v1868;
    if (v1871 >> 1 > v1870)
      v1870 = v1871 >> 1;
    if ((unint64_t)v1871 >= 0x7FFFFFFFFFFFFFFCLL)
      v1872 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1872 = v1870;
    if (v1872)
    {
      v1873 = (char *)sub_1DCAE4D04((uint64_t)v13, v1872);
      v1868 = *(unsigned __int32 **)a2;
      v1865 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1873 = 0;
    }
    v1874 = &v1873[4 * v1869];
    v1866 = &v1873[4 * v1872];
    *(_DWORD *)v1874 = v2149.n128_u32[0];
    v1867 = (unsigned __int32 *)(v1874 + 4);
    while (v1865 != v1868)
    {
      v1875 = *--v1865;
      *((_DWORD *)v1874 - 1) = v1875;
      v1874 -= 4;
    }
    *(_QWORD *)a2 = v1874;
    *(_QWORD *)(a2 + 8) = v1867;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v1868)
    {
      operator delete(v1868);
      v1866 = *v13;
    }
  }
  else
  {
    *v1865 = v2149.n128_u32[0];
    v1867 = v1865 + 1;
  }
  *v9 = v1867;
  if (v1867 >= (unsigned __int32 *)v1866)
  {
    v1877 = *(unsigned __int32 **)a2;
    v1878 = ((uint64_t)v1867 - *(_QWORD *)a2) >> 2;
    v1879 = v1878 + 1;
    if ((unint64_t)(v1878 + 1) >> 62)
      goto LABEL_3660;
    v1880 = v1866 - (char *)v1877;
    if (v1880 >> 1 > v1879)
      v1879 = v1880 >> 1;
    if ((unint64_t)v1880 >= 0x7FFFFFFFFFFFFFFCLL)
      v1881 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1881 = v1879;
    if (v1881)
    {
      v1882 = (char *)sub_1DCAE4D04((uint64_t)v13, v1881);
      v1877 = *(unsigned __int32 **)a2;
      v1867 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1882 = 0;
    }
    v1883 = &v1882[4 * v1878];
    v1866 = &v1882[4 * v1881];
    *(_DWORD *)v1883 = a5.n128_u32[1];
    v1876 = (unsigned __int32 *)(v1883 + 4);
    while (v1867 != v1877)
    {
      v1884 = *--v1867;
      *((_DWORD *)v1883 - 1) = v1884;
      v1883 -= 4;
    }
    *(_QWORD *)a2 = v1883;
    *(_QWORD *)(a2 + 8) = v1876;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v1877)
    {
      operator delete(v1877);
      v1866 = *v13;
    }
  }
  else
  {
    *v1867 = a5.n128_u32[1];
    v1876 = v1867 + 1;
  }
  *v9 = v1876;
  if (v1876 >= (unsigned __int32 *)v1866)
  {
    v1886 = *(unsigned __int32 **)a2;
    v1887 = ((uint64_t)v1876 - *(_QWORD *)a2) >> 2;
    v1888 = v1887 + 1;
    if ((unint64_t)(v1887 + 1) >> 62)
      goto LABEL_3660;
    v1889 = v1866 - (char *)v1886;
    if (v1889 >> 1 > v1888)
      v1888 = v1889 >> 1;
    if ((unint64_t)v1889 >= 0x7FFFFFFFFFFFFFFCLL)
      v1890 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1890 = v1888;
    if (v1890)
    {
      v1891 = (char *)sub_1DCAE4D04((uint64_t)v13, v1890);
      v1886 = *(unsigned __int32 **)a2;
      v1876 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1891 = 0;
    }
    v1892 = (unsigned __int32 *)&v1891[4 * v1887];
    v1866 = &v1891[4 * v1890];
    *v1892 = v48;
    v1885 = v1892 + 1;
    while (v1876 != v1886)
    {
      v1893 = *--v1876;
      *--v1892 = v1893;
    }
    *(_QWORD *)a2 = v1892;
    *(_QWORD *)(a2 + 8) = v1885;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v1886)
    {
      operator delete(v1886);
      v1866 = *v13;
    }
  }
  else
  {
    *v1876 = v48;
    v1885 = v1876 + 1;
  }
  *v9 = v1885;
  if (v1885 >= (unsigned __int32 *)v1866)
  {
    v1895 = *(unsigned __int32 **)a2;
    v1896 = ((uint64_t)v1885 - *(_QWORD *)a2) >> 2;
    v1897 = v1896 + 1;
    if ((unint64_t)(v1896 + 1) >> 62)
      goto LABEL_3660;
    v1898 = v1866 - (char *)v1895;
    if (v1898 >> 1 > v1897)
      v1897 = v1898 >> 1;
    if ((unint64_t)v1898 >= 0x7FFFFFFFFFFFFFFCLL)
      v1899 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1899 = v1897;
    if (v1899)
    {
      v1900 = (char *)sub_1DCAE4D04((uint64_t)v13, v1899);
      v1895 = *(unsigned __int32 **)a2;
      v1885 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1900 = 0;
    }
    v1901 = &v1900[4 * v1896];
    v1866 = &v1900[4 * v1899];
    *(_DWORD *)v1901 = v2149.n128_u32[0];
    v1894 = (unsigned __int32 *)(v1901 + 4);
    while (v1885 != v1895)
    {
      v1902 = *--v1885;
      *((_DWORD *)v1901 - 1) = v1902;
      v1901 -= 4;
    }
    *(_QWORD *)a2 = v1901;
    *(_QWORD *)(a2 + 8) = v1894;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v1895)
    {
      operator delete(v1895);
      v1866 = *v13;
    }
  }
  else
  {
    *v1885 = v2149.n128_u32[0];
    v1894 = v1885 + 1;
  }
  *v9 = v1894;
  if (v1894 >= (unsigned __int32 *)v1866)
  {
    v1904 = *(unsigned __int32 **)a2;
    v1905 = ((uint64_t)v1894 - *(_QWORD *)a2) >> 2;
    v1906 = v1905 + 1;
    if ((unint64_t)(v1905 + 1) >> 62)
      goto LABEL_3660;
    v1907 = v1866 - (char *)v1904;
    if (v1907 >> 1 > v1906)
      v1906 = v1907 >> 1;
    if ((unint64_t)v1907 >= 0x7FFFFFFFFFFFFFFCLL)
      v1908 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1908 = v1906;
    if (v1908)
    {
      v1909 = (char *)sub_1DCAE4D04((uint64_t)v13, v1908);
      v1904 = *(unsigned __int32 **)a2;
      v1894 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1909 = 0;
    }
    v1910 = &v1909[4 * v1905];
    v1866 = &v1909[4 * v1908];
    *(_DWORD *)v1910 = a5.n128_u32[1];
    v1903 = (unsigned __int32 *)(v1910 + 4);
    while (v1894 != v1904)
    {
      v1911 = *--v1894;
      *((_DWORD *)v1910 - 1) = v1911;
      v1910 -= 4;
    }
    *(_QWORD *)a2 = v1910;
    *(_QWORD *)(a2 + 8) = v1903;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v1904)
    {
      operator delete(v1904);
      v1866 = *v13;
    }
  }
  else
  {
    *v1894 = a5.n128_u32[1];
    v1903 = v1894 + 1;
  }
  *v9 = v1903;
  if (v1903 >= (unsigned __int32 *)v1866)
  {
    v1913 = *(unsigned __int32 **)a2;
    v1914 = ((uint64_t)v1903 - *(_QWORD *)a2) >> 2;
    v1915 = v1914 + 1;
    if ((unint64_t)(v1914 + 1) >> 62)
      goto LABEL_3660;
    v1916 = v1866 - (char *)v1913;
    if (v1916 >> 1 > v1915)
      v1915 = v1916 >> 1;
    if ((unint64_t)v1916 >= 0x7FFFFFFFFFFFFFFCLL)
      v1917 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1917 = v1915;
    if (v1917)
    {
      v1918 = (char *)sub_1DCAE4D04((uint64_t)v13, v1917);
      v1913 = *(unsigned __int32 **)a2;
      v1903 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1918 = 0;
    }
    v1919 = (unsigned __int32 *)&v1918[4 * v1914];
    v1866 = &v1918[4 * v1917];
    *v1919 = v48;
    v1912 = v1919 + 1;
    while (v1903 != v1913)
    {
      v1920 = *--v1903;
      *--v1919 = v1920;
    }
    *(_QWORD *)a2 = v1919;
    *(_QWORD *)(a2 + 8) = v1912;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v1913)
    {
      operator delete(v1913);
      v1866 = *v13;
    }
  }
  else
  {
    *v1903 = v48;
    v1912 = v1903 + 1;
  }
  *v9 = v1912;
  if (v1912 >= (unsigned __int32 *)v1866)
  {
    v1922 = *(unsigned __int32 **)a2;
    v1923 = ((uint64_t)v1912 - *(_QWORD *)a2) >> 2;
    v1924 = v1923 + 1;
    if ((unint64_t)(v1923 + 1) >> 62)
      goto LABEL_3660;
    v1925 = v1866 - (char *)v1922;
    if (v1925 >> 1 > v1924)
      v1924 = v1925 >> 1;
    if ((unint64_t)v1925 >= 0x7FFFFFFFFFFFFFFCLL)
      v1926 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1926 = v1924;
    if (v1926)
    {
      v1927 = (char *)sub_1DCAE4D04((uint64_t)v13, v1926);
      v1922 = *(unsigned __int32 **)a2;
      v1912 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1927 = 0;
    }
    v1928 = &v1927[4 * v1923];
    v1866 = &v1927[4 * v1926];
    *(_DWORD *)v1928 = a5.n128_u32[0];
    v1921 = (unsigned __int32 *)(v1928 + 4);
    while (v1912 != v1922)
    {
      v1929 = *--v1912;
      *((_DWORD *)v1928 - 1) = v1929;
      v1928 -= 4;
    }
    *(_QWORD *)a2 = v1928;
    *(_QWORD *)(a2 + 8) = v1921;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v1922)
    {
      operator delete(v1922);
      v1866 = *v13;
    }
  }
  else
  {
    *v1912 = a5.n128_u32[0];
    v1921 = v1912 + 1;
  }
  *v9 = v1921;
  if (v1921 >= (unsigned __int32 *)v1866)
  {
    v1931 = *(unsigned __int32 **)a2;
    v1932 = ((uint64_t)v1921 - *(_QWORD *)a2) >> 2;
    v1933 = v1932 + 1;
    if ((unint64_t)(v1932 + 1) >> 62)
      goto LABEL_3660;
    v1934 = v1866 - (char *)v1931;
    if (v1934 >> 1 > v1933)
      v1933 = v1934 >> 1;
    if ((unint64_t)v1934 >= 0x7FFFFFFFFFFFFFFCLL)
      v1935 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1935 = v1933;
    if (v1935)
    {
      v1936 = (char *)sub_1DCAE4D04((uint64_t)v13, v1935);
      v1931 = *(unsigned __int32 **)a2;
      v1921 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1936 = 0;
    }
    v1937 = &v1936[4 * v1932];
    v1866 = &v1936[4 * v1935];
    *(_DWORD *)v1937 = a5.n128_u32[1];
    v1930 = (unsigned __int32 *)(v1937 + 4);
    while (v1921 != v1931)
    {
      v1938 = *--v1921;
      *((_DWORD *)v1937 - 1) = v1938;
      v1937 -= 4;
    }
    *(_QWORD *)a2 = v1937;
    *(_QWORD *)(a2 + 8) = v1930;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v1931)
    {
      operator delete(v1931);
      v1866 = *v13;
    }
  }
  else
  {
    *v1921 = a5.n128_u32[1];
    v1930 = v1921 + 1;
  }
  *v9 = v1930;
  if (v1930 >= (unsigned __int32 *)v1866)
  {
    v1940 = *(unsigned __int32 **)a2;
    v1941 = ((uint64_t)v1930 - *(_QWORD *)a2) >> 2;
    v1942 = v1941 + 1;
    if ((unint64_t)(v1941 + 1) >> 62)
      goto LABEL_3660;
    v1943 = v1866 - (char *)v1940;
    if (v1943 >> 1 > v1942)
      v1942 = v1943 >> 1;
    if ((unint64_t)v1943 >= 0x7FFFFFFFFFFFFFFCLL)
      v1944 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1944 = v1942;
    if (v1944)
    {
      v1945 = (char *)sub_1DCAE4D04((uint64_t)v13, v1944);
      v1940 = *(unsigned __int32 **)a2;
      v1930 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1945 = 0;
    }
    v1946 = (unsigned __int32 *)&v1945[4 * v1941];
    v1866 = &v1945[4 * v1944];
    *v1946 = v48;
    v1939 = v1946 + 1;
    while (v1930 != v1940)
    {
      v1947 = *--v1930;
      *--v1946 = v1947;
    }
    *(_QWORD *)a2 = v1946;
    *(_QWORD *)(a2 + 8) = v1939;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v1940)
    {
      operator delete(v1940);
      v1866 = *v13;
    }
  }
  else
  {
    *v1930 = v48;
    v1939 = v1930 + 1;
  }
  *v9 = v1939;
  if (v1939 >= (unsigned __int32 *)v1866)
  {
    v1949 = *(unsigned __int32 **)a2;
    v1950 = ((uint64_t)v1939 - *(_QWORD *)a2) >> 2;
    v1951 = v1950 + 1;
    if ((unint64_t)(v1950 + 1) >> 62)
      goto LABEL_3660;
    v1952 = v1866 - (char *)v1949;
    if (v1952 >> 1 > v1951)
      v1951 = v1952 >> 1;
    if ((unint64_t)v1952 >= 0x7FFFFFFFFFFFFFFCLL)
      v1953 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1953 = v1951;
    if (v1953)
    {
      v1954 = (char *)sub_1DCAE4D04((uint64_t)v13, v1953);
      v1949 = *(unsigned __int32 **)a2;
      v1939 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1954 = 0;
    }
    v1955 = &v1954[4 * v1950];
    v1866 = &v1954[4 * v1953];
    *(_DWORD *)v1955 = a5.n128_u32[0];
    v1948 = (unsigned __int32 *)(v1955 + 4);
    while (v1939 != v1949)
    {
      v1956 = *--v1939;
      *((_DWORD *)v1955 - 1) = v1956;
      v1955 -= 4;
    }
    *(_QWORD *)a2 = v1955;
    *(_QWORD *)(a2 + 8) = v1948;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v1949)
    {
      operator delete(v1949);
      v1866 = *v13;
    }
  }
  else
  {
    *v1939 = a5.n128_u32[0];
    v1948 = v1939 + 1;
  }
  *v9 = v1948;
  if (v1948 >= (unsigned __int32 *)v1866)
  {
    v1958 = *(unsigned __int32 **)a2;
    v1959 = ((uint64_t)v1948 - *(_QWORD *)a2) >> 2;
    v1960 = v1959 + 1;
    if ((unint64_t)(v1959 + 1) >> 62)
      goto LABEL_3660;
    v1961 = v1866 - (char *)v1958;
    if (v1961 >> 1 > v1960)
      v1960 = v1961 >> 1;
    if ((unint64_t)v1961 >= 0x7FFFFFFFFFFFFFFCLL)
      v1962 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1962 = v1960;
    if (v1962)
    {
      v1963 = (char *)sub_1DCAE4D04((uint64_t)v13, v1962);
      v1958 = *(unsigned __int32 **)a2;
      v1948 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1963 = 0;
    }
    v1964 = &v1963[4 * v1959];
    v1866 = &v1963[4 * v1962];
    *(_DWORD *)v1964 = a5.n128_u32[1];
    v1957 = (unsigned __int32 *)(v1964 + 4);
    while (v1948 != v1958)
    {
      v1965 = *--v1948;
      *((_DWORD *)v1964 - 1) = v1965;
      v1964 -= 4;
    }
    *(_QWORD *)a2 = v1964;
    *(_QWORD *)(a2 + 8) = v1957;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v1958)
    {
      operator delete(v1958);
      v1866 = *v13;
    }
  }
  else
  {
    *v1948 = a5.n128_u32[1];
    v1957 = v1948 + 1;
  }
  *v9 = v1957;
  if (v1957 >= (unsigned __int32 *)v1866)
  {
    v1967 = *(unsigned __int32 **)a2;
    v1968 = ((uint64_t)v1957 - *(_QWORD *)a2) >> 2;
    v1969 = v1968 + 1;
    if ((unint64_t)(v1968 + 1) >> 62)
      goto LABEL_3660;
    v1970 = v1866 - (char *)v1967;
    if (v1970 >> 1 > v1969)
      v1969 = v1970 >> 1;
    if ((unint64_t)v1970 >= 0x7FFFFFFFFFFFFFFCLL)
      v1971 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1971 = v1969;
    if (v1971)
    {
      v1972 = (char *)sub_1DCAE4D04((uint64_t)v13, v1971);
      v1967 = *(unsigned __int32 **)a2;
      v1957 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1972 = 0;
    }
    v1973 = (unsigned __int32 *)&v1972[4 * v1968];
    v1866 = &v1972[4 * v1971];
    *v1973 = v48;
    v1966 = v1973 + 1;
    while (v1957 != v1967)
    {
      v1974 = *--v1957;
      *--v1973 = v1974;
    }
    *(_QWORD *)a2 = v1973;
    *(_QWORD *)(a2 + 8) = v1966;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v1967)
    {
      operator delete(v1967);
      v1866 = *v13;
    }
  }
  else
  {
    *v1957 = v48;
    v1966 = v1957 + 1;
  }
  v1975 = v2149.n128_u32[0];
  *v9 = v1966;
  if (v1966 >= (unsigned __int32 *)v1866)
  {
    v1977 = *(unsigned __int32 **)a2;
    v1978 = ((uint64_t)v1966 - *(_QWORD *)a2) >> 2;
    v1979 = v1978 + 1;
    if ((unint64_t)(v1978 + 1) >> 62)
      goto LABEL_3660;
    v1980 = v1866 - (char *)v1977;
    if (v1980 >> 1 > v1979)
      v1979 = v1980 >> 1;
    if ((unint64_t)v1980 >= 0x7FFFFFFFFFFFFFFCLL)
      v1981 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1981 = v1979;
    if (v1981)
    {
      v1982 = (char *)sub_1DCAE4D04((uint64_t)v13, v1981);
      v1975 = v2149.n128_u32[0];
      v1983 = v1982;
      v1977 = *(unsigned __int32 **)a2;
      v1966 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1983 = 0;
    }
    v1984 = (unsigned __int32 *)&v1983[4 * v1978];
    v1866 = &v1983[4 * v1981];
    *v1984 = v1975;
    v1976 = v1984 + 1;
    while (v1966 != v1977)
    {
      v1985 = *--v1966;
      *--v1984 = v1985;
    }
    *(_QWORD *)a2 = v1984;
    *(_QWORD *)(a2 + 8) = v1976;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v1977)
    {
      operator delete(v1977);
      v1975 = v2149.n128_u32[0];
      v1866 = *v13;
    }
  }
  else
  {
    *v1966 = v2149.n128_u32[0];
    v1976 = v1966 + 1;
  }
  *v9 = v1976;
  if (v1976 >= (unsigned __int32 *)v1866)
  {
    v1987 = *(unsigned __int32 **)a2;
    v1988 = ((uint64_t)v1976 - *(_QWORD *)a2) >> 2;
    v1989 = v1988 + 1;
    if ((unint64_t)(v1988 + 1) >> 62)
      goto LABEL_3660;
    v1990 = v1866 - (char *)v1987;
    if (v1990 >> 1 > v1989)
      v1989 = v1990 >> 1;
    if ((unint64_t)v1990 >= 0x7FFFFFFFFFFFFFFCLL)
      v1991 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v1991 = v1989;
    if (v1991)
    {
      v1992 = (char *)sub_1DCAE4D04((uint64_t)v13, v1991);
      v1987 = *(unsigned __int32 **)a2;
      v1976 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1992 = 0;
    }
    v1993 = &v1992[4 * v1988];
    v1866 = &v1992[4 * v1991];
    *(_DWORD *)v1993 = a5.n128_u32[1];
    v1986 = (unsigned __int32 *)(v1993 + 4);
    while (v1976 != v1987)
    {
      v1994 = *--v1976;
      *((_DWORD *)v1993 - 1) = v1994;
      v1993 -= 4;
    }
    *(_QWORD *)a2 = v1993;
    *(_QWORD *)(a2 + 8) = v1986;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v1987)
    {
      operator delete(v1987);
      v1866 = *v13;
    }
    v1975 = v2149.n128_u32[0];
  }
  else
  {
    *v1976 = a5.n128_u32[1];
    v1986 = v1976 + 1;
  }
  *v9 = v1986;
  if (v1986 >= (unsigned __int32 *)v1866)
  {
    v1996 = *(unsigned __int32 **)a2;
    v1997 = ((uint64_t)v1986 - *(_QWORD *)a2) >> 2;
    v1998 = v1997 + 1;
    if ((unint64_t)(v1997 + 1) >> 62)
      goto LABEL_3660;
    v1999 = v1866 - (char *)v1996;
    if (v1999 >> 1 > v1998)
      v1998 = v1999 >> 1;
    if ((unint64_t)v1999 >= 0x7FFFFFFFFFFFFFFCLL)
      v2000 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v2000 = v1998;
    if (v2000)
    {
      v2001 = (char *)sub_1DCAE4D04((uint64_t)v13, v2000);
      v1996 = *(unsigned __int32 **)a2;
      v1986 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2001 = 0;
    }
    v2002 = &v2001[4 * v1997];
    v1866 = &v2001[4 * v2000];
    *(_DWORD *)v2002 = a5.n128_u32[2];
    v1995 = (unsigned __int32 *)(v2002 + 4);
    while (v1986 != v1996)
    {
      v2003 = *--v1986;
      *((_DWORD *)v2002 - 1) = v2003;
      v2002 -= 4;
    }
    *(_QWORD *)a2 = v2002;
    *(_QWORD *)(a2 + 8) = v1995;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v1996)
    {
      operator delete(v1996);
      v1866 = *v13;
    }
    v1975 = v2149.n128_u32[0];
  }
  else
  {
    *v1986 = a5.n128_u32[2];
    v1995 = v1986 + 1;
  }
  *v9 = v1995;
  if (v1995 >= (unsigned __int32 *)v1866)
  {
    v2005 = *(unsigned __int32 **)a2;
    v2006 = ((uint64_t)v1995 - *(_QWORD *)a2) >> 2;
    v2007 = v2006 + 1;
    if ((unint64_t)(v2006 + 1) >> 62)
      goto LABEL_3660;
    v2008 = v1866 - (char *)v2005;
    if (v2008 >> 1 > v2007)
      v2007 = v2008 >> 1;
    if ((unint64_t)v2008 >= 0x7FFFFFFFFFFFFFFCLL)
      v2009 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v2009 = v2007;
    if (v2009)
    {
      v2010 = (char *)sub_1DCAE4D04((uint64_t)v13, v2009);
      v1975 = v2149.n128_u32[0];
      v2011 = v2010;
      v2005 = *(unsigned __int32 **)a2;
      v1995 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2011 = 0;
    }
    v2012 = (unsigned __int32 *)&v2011[4 * v2006];
    v1866 = &v2011[4 * v2009];
    *v2012 = v1975;
    v2004 = v2012 + 1;
    while (v1995 != v2005)
    {
      v2013 = *--v1995;
      *--v2012 = v2013;
    }
    *(_QWORD *)a2 = v2012;
    *(_QWORD *)(a2 + 8) = v2004;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v2005)
    {
      operator delete(v2005);
      v1866 = *v13;
    }
  }
  else
  {
    *v1995 = v1975;
    v2004 = v1995 + 1;
  }
  *v9 = v2004;
  if (v2004 >= (unsigned __int32 *)v1866)
  {
    v2015 = *(unsigned __int32 **)a2;
    v2016 = ((uint64_t)v2004 - *(_QWORD *)a2) >> 2;
    v2017 = v2016 + 1;
    if ((unint64_t)(v2016 + 1) >> 62)
      goto LABEL_3660;
    v2018 = v1866 - (char *)v2015;
    if (v2018 >> 1 > v2017)
      v2017 = v2018 >> 1;
    if ((unint64_t)v2018 >= 0x7FFFFFFFFFFFFFFCLL)
      v2019 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v2019 = v2017;
    if (v2019)
    {
      v2020 = (char *)sub_1DCAE4D04((uint64_t)v13, v2019);
      v2015 = *(unsigned __int32 **)a2;
      v2004 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2020 = 0;
    }
    v2021 = &v2020[4 * v2016];
    v1866 = &v2020[4 * v2019];
    *(_DWORD *)v2021 = a5.n128_u32[1];
    v2014 = (unsigned __int32 *)(v2021 + 4);
    while (v2004 != v2015)
    {
      v2022 = *--v2004;
      *((_DWORD *)v2021 - 1) = v2022;
      v2021 -= 4;
    }
    *(_QWORD *)a2 = v2021;
    *(_QWORD *)(a2 + 8) = v2014;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v2015)
    {
      operator delete(v2015);
      v1866 = *v13;
    }
  }
  else
  {
    *v2004 = a5.n128_u32[1];
    v2014 = v2004 + 1;
  }
  *v9 = v2014;
  if (v2014 >= (unsigned __int32 *)v1866)
  {
    v2024 = *(unsigned __int32 **)a2;
    v2025 = ((uint64_t)v2014 - *(_QWORD *)a2) >> 2;
    v2026 = v2025 + 1;
    if ((unint64_t)(v2025 + 1) >> 62)
      goto LABEL_3660;
    v2027 = v1866 - (char *)v2024;
    if (v2027 >> 1 > v2026)
      v2026 = v2027 >> 1;
    if ((unint64_t)v2027 >= 0x7FFFFFFFFFFFFFFCLL)
      v2028 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v2028 = v2026;
    if (v2028)
    {
      v2029 = (char *)sub_1DCAE4D04((uint64_t)v13, v2028);
      v2024 = *(unsigned __int32 **)a2;
      v2014 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2029 = 0;
    }
    v2030 = &v2029[4 * v2025];
    v1866 = &v2029[4 * v2028];
    *(_DWORD *)v2030 = a5.n128_u32[2];
    v2023 = (unsigned __int32 *)(v2030 + 4);
    while (v2014 != v2024)
    {
      v2031 = *--v2014;
      *((_DWORD *)v2030 - 1) = v2031;
      v2030 -= 4;
    }
    *(_QWORD *)a2 = v2030;
    *(_QWORD *)(a2 + 8) = v2023;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v2024)
    {
      operator delete(v2024);
      v1866 = *v13;
    }
  }
  else
  {
    *v2014 = a5.n128_u32[2];
    v2023 = v2014 + 1;
  }
  *v9 = v2023;
  if (v2023 >= (unsigned __int32 *)v1866)
  {
    v2033 = *(unsigned __int32 **)a2;
    v2034 = ((uint64_t)v2023 - *(_QWORD *)a2) >> 2;
    v2035 = v2034 + 1;
    if ((unint64_t)(v2034 + 1) >> 62)
      goto LABEL_3660;
    v2036 = v1866 - (char *)v2033;
    if (v2036 >> 1 > v2035)
      v2035 = v2036 >> 1;
    if ((unint64_t)v2036 >= 0x7FFFFFFFFFFFFFFCLL)
      v2037 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v2037 = v2035;
    if (v2037)
    {
      v2038 = (char *)sub_1DCAE4D04((uint64_t)v13, v2037);
      v2033 = *(unsigned __int32 **)a2;
      v2023 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2038 = 0;
    }
    v2039 = &v2038[4 * v2034];
    v1866 = &v2038[4 * v2037];
    *(_DWORD *)v2039 = a5.n128_u32[0];
    v2032 = (unsigned __int32 *)(v2039 + 4);
    while (v2023 != v2033)
    {
      v2040 = *--v2023;
      *((_DWORD *)v2039 - 1) = v2040;
      v2039 -= 4;
    }
    *(_QWORD *)a2 = v2039;
    *(_QWORD *)(a2 + 8) = v2032;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v2033)
    {
      operator delete(v2033);
      v1866 = *v13;
    }
  }
  else
  {
    *v2023 = a5.n128_u32[0];
    v2032 = v2023 + 1;
  }
  *v9 = v2032;
  if (v2032 >= (unsigned __int32 *)v1866)
  {
    v2042 = *(unsigned __int32 **)a2;
    v2043 = ((uint64_t)v2032 - *(_QWORD *)a2) >> 2;
    v2044 = v2043 + 1;
    if ((unint64_t)(v2043 + 1) >> 62)
      goto LABEL_3660;
    v2045 = v1866 - (char *)v2042;
    if (v2045 >> 1 > v2044)
      v2044 = v2045 >> 1;
    if ((unint64_t)v2045 >= 0x7FFFFFFFFFFFFFFCLL)
      v2046 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v2046 = v2044;
    if (v2046)
    {
      v2047 = (char *)sub_1DCAE4D04((uint64_t)v13, v2046);
      v2042 = *(unsigned __int32 **)a2;
      v2032 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2047 = 0;
    }
    v2048 = &v2047[4 * v2043];
    v1866 = &v2047[4 * v2046];
    *(_DWORD *)v2048 = a5.n128_u32[1];
    v2041 = (unsigned __int32 *)(v2048 + 4);
    while (v2032 != v2042)
    {
      v2049 = *--v2032;
      *((_DWORD *)v2048 - 1) = v2049;
      v2048 -= 4;
    }
    *(_QWORD *)a2 = v2048;
    *(_QWORD *)(a2 + 8) = v2041;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v2042)
    {
      operator delete(v2042);
      v1866 = *v13;
    }
  }
  else
  {
    *v2032 = a5.n128_u32[1];
    v2041 = v2032 + 1;
  }
  *v9 = v2041;
  if (v2041 >= (unsigned __int32 *)v1866)
  {
    v2051 = *(unsigned __int32 **)a2;
    v2052 = ((uint64_t)v2041 - *(_QWORD *)a2) >> 2;
    v2053 = v2052 + 1;
    if ((unint64_t)(v2052 + 1) >> 62)
      goto LABEL_3660;
    v2054 = v1866 - (char *)v2051;
    if (v2054 >> 1 > v2053)
      v2053 = v2054 >> 1;
    if ((unint64_t)v2054 >= 0x7FFFFFFFFFFFFFFCLL)
      v2055 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v2055 = v2053;
    if (v2055)
    {
      v2056 = (char *)sub_1DCAE4D04((uint64_t)v13, v2055);
      v2051 = *(unsigned __int32 **)a2;
      v2041 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2056 = 0;
    }
    v2057 = &v2056[4 * v2052];
    v1866 = &v2056[4 * v2055];
    *(_DWORD *)v2057 = a5.n128_u32[2];
    v2050 = (unsigned __int32 *)(v2057 + 4);
    while (v2041 != v2051)
    {
      v2058 = *--v2041;
      *((_DWORD *)v2057 - 1) = v2058;
      v2057 -= 4;
    }
    *(_QWORD *)a2 = v2057;
    *(_QWORD *)(a2 + 8) = v2050;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v2051)
    {
      operator delete(v2051);
      v1866 = *v13;
    }
  }
  else
  {
    *v2041 = a5.n128_u32[2];
    v2050 = v2041 + 1;
  }
  *v9 = v2050;
  if (v2050 >= (unsigned __int32 *)v1866)
  {
    v2060 = *(unsigned __int32 **)a2;
    v2061 = ((uint64_t)v2050 - *(_QWORD *)a2) >> 2;
    v2062 = v2061 + 1;
    if ((unint64_t)(v2061 + 1) >> 62)
      goto LABEL_3660;
    v2063 = v1866 - (char *)v2060;
    if (v2063 >> 1 > v2062)
      v2062 = v2063 >> 1;
    if ((unint64_t)v2063 >= 0x7FFFFFFFFFFFFFFCLL)
      v2064 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v2064 = v2062;
    if (v2064)
    {
      v2065 = (char *)sub_1DCAE4D04((uint64_t)v13, v2064);
      v2060 = *(unsigned __int32 **)a2;
      v2050 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2065 = 0;
    }
    v2066 = &v2065[4 * v2061];
    v1866 = &v2065[4 * v2064];
    *(_DWORD *)v2066 = a5.n128_u32[0];
    v2059 = (unsigned __int32 *)(v2066 + 4);
    while (v2050 != v2060)
    {
      v2067 = *--v2050;
      *((_DWORD *)v2066 - 1) = v2067;
      v2066 -= 4;
    }
    *(_QWORD *)a2 = v2066;
    *(_QWORD *)(a2 + 8) = v2059;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v2060)
    {
      operator delete(v2060);
      v1866 = *v13;
    }
  }
  else
  {
    *v2050 = a5.n128_u32[0];
    v2059 = v2050 + 1;
  }
  *v9 = v2059;
  if (v2059 >= (unsigned __int32 *)v1866)
  {
    v2069 = *(unsigned __int32 **)a2;
    v2070 = ((uint64_t)v2059 - *(_QWORD *)a2) >> 2;
    v2071 = v2070 + 1;
    if ((unint64_t)(v2070 + 1) >> 62)
      goto LABEL_3660;
    v2072 = v1866 - (char *)v2069;
    if (v2072 >> 1 > v2071)
      v2071 = v2072 >> 1;
    if ((unint64_t)v2072 >= 0x7FFFFFFFFFFFFFFCLL)
      v2073 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v2073 = v2071;
    if (v2073)
    {
      v2074 = (char *)sub_1DCAE4D04((uint64_t)v13, v2073);
      v2069 = *(unsigned __int32 **)a2;
      v2059 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2074 = 0;
    }
    v2075 = &v2074[4 * v2070];
    v1866 = &v2074[4 * v2073];
    *(_DWORD *)v2075 = a5.n128_u32[1];
    v2068 = (unsigned __int32 *)(v2075 + 4);
    while (v2059 != v2069)
    {
      v2076 = *--v2059;
      *((_DWORD *)v2075 - 1) = v2076;
      v2075 -= 4;
    }
    *(_QWORD *)a2 = v2075;
    *(_QWORD *)(a2 + 8) = v2068;
    *(_QWORD *)(a2 + 16) = v1866;
    if (v2069)
    {
      operator delete(v2069);
      v1866 = *v13;
    }
  }
  else
  {
    *v2059 = a5.n128_u32[1];
    v2068 = v2059 + 1;
  }
  *v9 = v2068;
  if (v2068 < (unsigned __int32 *)v1866)
  {
    *v2068 = a5.n128_u32[2];
    v2077 = v2068 + 1;
    goto LABEL_3563;
  }
  v2078 = *(unsigned __int32 **)a2;
  v2079 = ((uint64_t)v2068 - *(_QWORD *)a2) >> 2;
  v2080 = v2079 + 1;
  if ((unint64_t)(v2079 + 1) >> 62)
LABEL_3660:
    sub_1DCAE4C44();
  v2081 = v1866 - (char *)v2078;
  if (v2081 >> 1 > v2080)
    v2080 = v2081 >> 1;
  if ((unint64_t)v2081 >= 0x7FFFFFFFFFFFFFFCLL)
    v2082 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v2082 = v2080;
  if (v2082)
  {
    v2083 = (char *)sub_1DCAE4D04((uint64_t)v13, v2082);
    v2078 = *(unsigned __int32 **)a2;
    v2068 = *(unsigned __int32 **)(a2 + 8);
  }
  else
  {
    v2083 = 0;
  }
  v2084 = &v2083[4 * v2079];
  v2085 = &v2083[4 * v2082];
  *(_DWORD *)v2084 = a5.n128_u32[2];
  v2077 = (unsigned __int32 *)(v2084 + 4);
  while (v2068 != v2078)
  {
    v2086 = *--v2068;
    *((_DWORD *)v2084 - 1) = v2086;
    v2084 -= 4;
  }
  *(_QWORD *)a2 = v2084;
  *(_QWORD *)(a2 + 8) = v2077;
  *(_QWORD *)(a2 + 16) = v2085;
  if (v2078)
    operator delete(v2078);
LABEL_3563:
  *v9 = v2077;
  v2087 = v448 + 20;
  v2089 = a3[1];
  v2088 = a3[2];
  if (v2089 >= v2088)
  {
    v2091 = *a3;
    v2092 = (v2089 - *a3) >> 2;
    v2093 = v2092 + 1;
    if ((unint64_t)(v2092 + 1) >> 62)
      goto LABEL_3661;
    v2094 = v2088 - v2091;
    if (v2094 >> 1 > v2093)
      v2093 = v2094 >> 1;
    if ((unint64_t)v2094 >= 0x7FFFFFFFFFFFFFFCLL)
      v2095 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v2095 = v2093;
    if (v2095)
    {
      v2096 = (char *)sub_1DCAE4D04((uint64_t)v1564, v2095);
      v2091 = *a3;
      v2089 = a3[1];
    }
    else
    {
      v2096 = 0;
    }
    v2097 = &v2096[4 * v2092];
    v2088 = &v2096[4 * v2095];
    *(_DWORD *)v2097 = v2087;
    v2090 = v2097 + 4;
    while (v2089 != v2091)
    {
      v2098 = *((_DWORD *)v2089 - 1);
      v2089 -= 4;
      *((_DWORD *)v2097 - 1) = v2098;
      v2097 -= 4;
    }
    *a3 = v2097;
    a3[1] = v2090;
    a3[2] = v2088;
    if (v2091)
    {
      operator delete(v2091);
      v2088 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v2089 = v2087;
    v2090 = v2089 + 4;
  }
  a3[1] = v2090;
  v2099 = v448 + 22;
  if (v2090 >= v2088)
  {
    v2101 = *a3;
    v2102 = (v2090 - *a3) >> 2;
    v2103 = v2102 + 1;
    if ((unint64_t)(v2102 + 1) >> 62)
      goto LABEL_3661;
    v2104 = v2088 - v2101;
    if (v2104 >> 1 > v2103)
      v2103 = v2104 >> 1;
    if ((unint64_t)v2104 >= 0x7FFFFFFFFFFFFFFCLL)
      v2105 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v2105 = v2103;
    if (v2105)
    {
      v2106 = (char *)sub_1DCAE4D04((uint64_t)v1564, v2105);
      v2101 = *a3;
      v2090 = a3[1];
    }
    else
    {
      v2106 = 0;
    }
    v2107 = &v2106[4 * v2102];
    v2088 = &v2106[4 * v2105];
    *(_DWORD *)v2107 = v2099;
    v2100 = v2107 + 4;
    while (v2090 != v2101)
    {
      v2108 = *((_DWORD *)v2090 - 1);
      v2090 -= 4;
      *((_DWORD *)v2107 - 1) = v2108;
      v2107 -= 4;
    }
    *a3 = v2107;
    a3[1] = v2100;
    a3[2] = v2088;
    if (v2101)
    {
      operator delete(v2101);
      v2088 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v2090 = v2099;
    v2100 = v2090 + 4;
  }
  a3[1] = v2100;
  v2109 = v448 + 21;
  if (v2100 >= v2088)
  {
    v2111 = *a3;
    v2112 = (v2100 - *a3) >> 2;
    v2113 = v2112 + 1;
    if ((unint64_t)(v2112 + 1) >> 62)
      goto LABEL_3661;
    v2114 = v2088 - v2111;
    if (v2114 >> 1 > v2113)
      v2113 = v2114 >> 1;
    if ((unint64_t)v2114 >= 0x7FFFFFFFFFFFFFFCLL)
      v2115 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v2115 = v2113;
    if (v2115)
    {
      v2116 = (char *)sub_1DCAE4D04((uint64_t)v1564, v2115);
      v2111 = *a3;
      v2100 = a3[1];
    }
    else
    {
      v2116 = 0;
    }
    v2117 = &v2116[4 * v2112];
    v2088 = &v2116[4 * v2115];
    *(_DWORD *)v2117 = v2109;
    v2110 = v2117 + 4;
    while (v2100 != v2111)
    {
      v2118 = *((_DWORD *)v2100 - 1);
      v2100 -= 4;
      *((_DWORD *)v2117 - 1) = v2118;
      v2117 -= 4;
    }
    *a3 = v2117;
    a3[1] = v2110;
    a3[2] = v2088;
    if (v2111)
    {
      operator delete(v2111);
      v2088 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v2100 = v2109;
    v2110 = v2100 + 4;
  }
  a3[1] = v2110;
  if (v2110 >= v2088)
  {
    v2120 = *a3;
    v2121 = (v2110 - *a3) >> 2;
    v2122 = v2121 + 1;
    if ((unint64_t)(v2121 + 1) >> 62)
      goto LABEL_3661;
    v2123 = v2088 - v2120;
    if (v2123 >> 1 > v2122)
      v2122 = v2123 >> 1;
    if ((unint64_t)v2123 >= 0x7FFFFFFFFFFFFFFCLL)
      v2124 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v2124 = v2122;
    if (v2124)
    {
      v2125 = (char *)sub_1DCAE4D04((uint64_t)v1564, v2124);
      v2120 = *a3;
      v2110 = a3[1];
    }
    else
    {
      v2125 = 0;
    }
    v2126 = &v2125[4 * v2121];
    v2088 = &v2125[4 * v2124];
    *(_DWORD *)v2126 = v2109;
    v2119 = v2126 + 4;
    while (v2110 != v2120)
    {
      v2127 = *((_DWORD *)v2110 - 1);
      v2110 -= 4;
      *((_DWORD *)v2126 - 1) = v2127;
      v2126 -= 4;
    }
    *a3 = v2126;
    a3[1] = v2119;
    a3[2] = v2088;
    if (v2120)
    {
      operator delete(v2120);
      v2088 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v2110 = v2109;
    v2119 = v2110 + 4;
  }
  a3[1] = v2119;
  if (v2119 >= v2088)
  {
    v2129 = *a3;
    v2130 = (v2119 - *a3) >> 2;
    v2131 = v2130 + 1;
    if ((unint64_t)(v2130 + 1) >> 62)
      goto LABEL_3661;
    v2132 = v2088 - v2129;
    if (v2132 >> 1 > v2131)
      v2131 = v2132 >> 1;
    if ((unint64_t)v2132 >= 0x7FFFFFFFFFFFFFFCLL)
      v2133 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v2133 = v2131;
    if (v2133)
    {
      v2134 = (char *)sub_1DCAE4D04((uint64_t)v1564, v2133);
      v2129 = *a3;
      v2119 = a3[1];
    }
    else
    {
      v2134 = 0;
    }
    v2135 = &v2134[4 * v2130];
    v2088 = &v2134[4 * v2133];
    *(_DWORD *)v2135 = v2099;
    v2128 = v2135 + 4;
    while (v2119 != v2129)
    {
      v2136 = *((_DWORD *)v2119 - 1);
      v2119 -= 4;
      *((_DWORD *)v2135 - 1) = v2136;
      v2135 -= 4;
    }
    *a3 = v2135;
    a3[1] = v2128;
    a3[2] = v2088;
    if (v2129)
    {
      operator delete(v2129);
      v2088 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v2119 = v2099;
    v2128 = v2119 + 4;
  }
  a3[1] = v2128;
  v2137 = v448 + 23;
  if (v2128 >= v2088)
  {
    v2139 = *a3;
    v2140 = (v2128 - *a3) >> 2;
    v2141 = v2140 + 1;
    if (!((unint64_t)(v2140 + 1) >> 62))
    {
      v2142 = v2088 - v2139;
      if (v2142 >> 1 > v2141)
        v2141 = v2142 >> 1;
      if ((unint64_t)v2142 >= 0x7FFFFFFFFFFFFFFCLL)
        v2143 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v2143 = v2141;
      if (v2143)
      {
        v2144 = (char *)sub_1DCAE4D04((uint64_t)v1564, v2143);
        v2139 = *a3;
        v2128 = a3[1];
      }
      else
      {
        v2144 = 0;
      }
      v2145 = &v2144[4 * v2140];
      v2146 = &v2144[4 * v2143];
      *(_DWORD *)v2145 = v2137;
      v2138 = v2145 + 4;
      while (v2128 != v2139)
      {
        v2147 = *((_DWORD *)v2128 - 1);
        v2128 -= 4;
        *((_DWORD *)v2145 - 1) = v2147;
        v2145 -= 4;
      }
      *a3 = v2145;
      a3[1] = v2138;
      a3[2] = v2146;
      if (v2139)
        operator delete(v2139);
      goto LABEL_3659;
    }
LABEL_3661:
    sub_1DCAE4C44();
  }
  *(_DWORD *)v2128 = v2137;
  v2138 = v2128 + 4;
LABEL_3659:
  a3[1] = v2138;
}

