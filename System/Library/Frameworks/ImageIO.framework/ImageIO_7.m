uint64_t try_quantize_rgb_delta_blue_contract(int8x16_t *a1, int8x16_t *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x8_t v8;
  unsigned __int8 v9;
  uint32x4_t *v10;
  float32x4_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int8x16_t v17;
  int8x16_t v18;
  int32x4_t v19;
  int8x16_t v20;
  uint32x4_t v21;
  unsigned __int8 v22;
  uint32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  unsigned __int8 *v30;
  int8x16_t v31;
  int32x4_t v32;
  unsigned __int8 v33;
  int8x16_t v34;
  uint32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int8x16_t v41;
  unsigned __int8 v42;
  int32x4_t v43;
  int8x16_t v44;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  float32x4_t v58;
  int8x16_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int v62;
  uint64_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x8_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t *v70;
  int8x16_t *v71;
  int8x16_t *v72;
  int8x16_t *v73;
  int8x16_t *v74;
  int8x16_t *v75;
  int8x16_t *v76;
  int8x16_t *v77;

  v5 = vaddq_f32(a5, vsubq_f32(a5, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a5, (int32x4_t)a5), (int32x4_t)a5)));
  v6 = vaddq_f32(a4, vsubq_f32(a4, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a4, (int32x4_t)a4), (int32x4_t)a4)));
  v7 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  v8 = (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v6), (int8x16_t)vcgtq_f32(v6, v7)), vorrq_s8((int8x16_t)vcgtq_f32(v5, v7), (int8x16_t)vcltzq_f32(v5))));
  v10 = (uint32x4_t *)&unk_1EDF03000;
  if ((v9 & 1) == 0)
  {
    v70 = a2;
    v74 = a1;
    v62 = a3;
    v66 = v8;
    v55 = v5;
    v58 = v6;
    v5 = v55;
    v6 = v58;
    v8 = v66;
    v10 = (uint32x4_t *)&unk_1EDF03000;
    a3 = v62;
    v47 = v46;
    a2 = v70;
    a1 = v74;
    if (v47)
    {
      mask(vmask4)::shift = xmmword_18820BF90;
      v5 = v55;
      v6 = v58;
      v8 = v66;
      v10 = (uint32x4_t *)&unk_1EDF03000;
      a3 = v62;
      a2 = v70;
      a1 = v74;
    }
  }
  if (vaddvq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vand_s8(v8, (int8x8_t)0x1000100010001)), v10[59])))
    return 0;
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  v12 = vcvtq_s32_f32(vaddq_f32(v5, v11));
  v13 = (int8x16_t)vaddq_s32(v12, v12);
  v14 = vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)vdupq_n_s32(0x1FEu));
  v15 = a3 - 4;
  v16 = &color_unquant_to_uquant_tables[512 * v15];
  v17.i32[0] = v16[v14.i32[0] | 1];
  v17.i32[1] = v16[v14.i32[1] | 1];
  v17.i64[1] = v16[v14.i32[2] | 1];
  v14.i64[0] = 0x10000000100;
  v14.i64[1] = 0x10000000100;
  v18 = vandq_s8(v13, v14);
  v19 = vcvtq_s32_f32(vaddq_f32(v6, v11));
  v20 = (int8x16_t)vsubq_s32(vaddq_s32(v19, v19), (int32x4_t)vorrq_s8(v17, v18));
  v20.i32[3] = 0;
  v19.i64[0] = 0x3F0000003FLL;
  v19.i64[1] = 0x3F0000003FLL;
  v21 = (uint32x4_t)vaddq_s32((int32x4_t)v20, v19);
  if ((v22 & 1) == 0)
  {
    v71 = a2;
    v75 = a1;
    v63 = a3 - 4;
    v67 = v17;
    v56 = v20;
    v59 = v18;
    v54 = v21;
    v21 = v54;
    v20 = v56;
    v18 = v59;
    v17 = v67;
    v15 = v63;
    v10 = (uint32x4_t *)&unk_1EDF03000;
    v49 = v48;
    a2 = v71;
    a1 = v75;
    if (v49)
    {
      mask(vmask4)::shift = xmmword_18820BF90;
      v21 = v54;
      v20 = v56;
      v18 = v59;
      v17 = v67;
      v15 = v63;
      v10 = (uint32x4_t *)&unk_1EDF03000;
      a2 = v71;
      a1 = v75;
    }
  }
  v23.i64[0] = 0x7F0000007FLL;
  v23.i64[1] = 0x7F0000007FLL;
  v24 = (int8x16_t)vcgtq_u32(v23, v21);
  v25.i64[0] = 0x100000001;
  v25.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v24, v25), v10[59])))
    return 0;
  v26.i64[0] = 0x7F0000007FLL;
  v26.i64[1] = 0x7F0000007FLL;
  v27.i64[0] = -1;
  v27.i64[1] = -1;
  v28 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)v18, v27), vandq_s8(v20, v26));
  v29 = (int8x16_t)vaddq_s32((int32x4_t)v28, (int32x4_t)v28);
  v30 = &color_unquant_to_uquant_tables[512 * v15];
  v31.i32[0] = v30[v29.i32[0] | 1];
  v31.i32[1] = v30[v29.i32[1] | 1];
  v31.i64[1] = v30[v29.i32[2] | 1];
  v29.i64[0] = 0xC0000000C0;
  v29.i64[1] = 0xC0000000C0;
  v32 = (int32x4_t)vandq_s8(veorq_s8(v31, v28), v29);
  v32.i32[3] = 0;
  if ((v33 & 1) == 0)
  {
    v72 = a2;
    v76 = a1;
    v68 = v17;
    v60 = v32;
    v64 = v31;
    v32 = v60;
    v31 = v64;
    v17 = v68;
    v10 = (uint32x4_t *)&unk_1EDF03000;
    v51 = v50;
    a2 = v72;
    a1 = v76;
    if (v51)
    {
      mask(vmask4)::shift = xmmword_18820BF90;
      v32 = v60;
      v31 = v64;
      v17 = v68;
      v10 = (uint32x4_t *)&unk_1EDF03000;
      a2 = v72;
      a1 = v76;
    }
  }
  v34.i64[0] = 0x100000001;
  v34.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vbicq_s8(v34, (int8x16_t)vceqzq_s32(v32)), v10[59])))
    return 0;
  v35.i64[0] = -1;
  v35.i64[1] = -1;
  v36 = (int8x16_t)vshlq_u32((uint32x4_t)v31, v35);
  v37.i64[0] = 0x3F0000003FLL;
  v37.i64[1] = 0x3F0000003FLL;
  v38.i64[0] = 0x2000000020;
  v38.i64[1] = 0x2000000020;
  v39 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32((int32x4_t)v36, v38) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8(v36, v37));
  if ((vaddq_s32(vaddq_s32(v39, vdupq_lane_s32(*(int32x2_t *)v39.i8, 1)), vdupq_laneq_s32(v39, 2)).u32[0] & 0x80000000) == 0)
    return 0;
  v40 = vaddq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)v17, v35), (int8x16_t)(*(_OWORD *)&v31 & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80))), v39);
  v41 = (int8x16_t)vshrq_n_u32((uint32x4_t)v40, 0x1FuLL);
  if ((v42 & 1) == 0)
  {
    v73 = a2;
    v77 = a1;
    v69 = v17;
    v61 = v40;
    v65 = v31;
    v57 = v41;
    v41 = v57;
    v40 = v61;
    v31 = v65;
    v17 = v69;
    v10 = (uint32x4_t *)&unk_1EDF03000;
    v53 = v52;
    a2 = v73;
    a1 = v77;
    if (v53)
    {
      mask(vmask4)::shift = xmmword_18820BF90;
      v41 = v57;
      v40 = v61;
      v31 = v65;
      v17 = v69;
      v10 = (uint32x4_t *)&unk_1EDF03000;
      a2 = v73;
      a1 = v77;
    }
  }
  v43.i64[0] = 0xFF000000FFLL;
  v43.i64[1] = 0xFF000000FFLL;
  v44 = (int8x16_t)vcgtq_s32(v40, v43);
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vsubq_s32((int32x4_t)vbicq_s8(v41, v44), (int32x4_t)v44), v10[59])))
    return 0;
  *a1 = v17;
  *a2 = v31;
  return 1;
}

uint64_t try_quantize_rgb_delta(int8x16_t *a1, int8x16_t *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  int32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int8x16_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int8x16_t v14;
  uint32x4_t v15;
  unsigned __int8 v16;
  uint32x4_t *v17;
  uint32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  unsigned __int8 *v25;
  int8x16_t v26;
  int32x4_t v27;
  unsigned __int8 v28;
  int8x16_t v29;
  uint32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int8x16_t v37;
  unsigned __int8 v38;
  int32x4_t v39;
  int8x16_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int32x4_t v52;
  uint64_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t *v59;
  int8x16_t *v60;
  int8x16_t *v61;
  int8x16_t *v62;
  int8x16_t *v63;
  int8x16_t *v64;

  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  v6 = vcvtq_s32_f32(vaddq_f32(a4, v5));
  v7 = (int8x16_t)vaddq_s32(v6, v6);
  v8 = vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)vdupq_n_s32(0x1FEu));
  v9 = a3 - 4;
  v10 = &color_unquant_to_uquant_tables[512 * v9];
  v11.i32[0] = v10[v8.i32[0] | 1];
  v11.i32[1] = v10[v8.i32[1] | 1];
  v11.i64[1] = v10[v8.i32[2] | 1];
  v8.i64[0] = 0x10000000100;
  v8.i64[1] = 0x10000000100;
  v12 = vandq_s8(v7, v8);
  v13 = vcvtq_s32_f32(vaddq_f32(a5, v5));
  v14 = (int8x16_t)vsubq_s32(vaddq_s32(v13, v13), (int32x4_t)vorrq_s8(v11, v12));
  v14.i32[3] = 0;
  v13.i64[0] = 0x3F0000003FLL;
  v13.i64[1] = 0x3F0000003FLL;
  v15 = (uint32x4_t)vaddq_s32((int32x4_t)v14, v13);
  v17 = (uint32x4_t *)&unk_1EDF03000;
  if ((v16 & 1) == 0)
  {
    v59 = a2;
    v62 = a1;
    v53 = a3 - 4;
    v56 = v11;
    v48 = v14;
    v50 = v12;
    v47 = v15;
    v15 = v47;
    v14 = v48;
    v12 = v50;
    v11 = v56;
    v9 = v53;
    v17 = (uint32x4_t *)&unk_1EDF03000;
    v42 = v41;
    a2 = v59;
    a1 = v62;
    if (v42)
    {
      mask(vmask4)::shift = xmmword_18820BF90;
      v15 = v47;
      v14 = v48;
      v12 = v50;
      v11 = v56;
      v9 = v53;
      v17 = (uint32x4_t *)&unk_1EDF03000;
      a2 = v59;
      a1 = v62;
    }
  }
  v18.i64[0] = 0x7F0000007FLL;
  v18.i64[1] = 0x7F0000007FLL;
  v19 = (int8x16_t)vcgtq_u32(v18, v15);
  v20.i64[0] = 0x100000001;
  v20.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v19, v20), v17[59])))
    return 0;
  v21.i64[0] = 0x7F0000007FLL;
  v21.i64[1] = 0x7F0000007FLL;
  v22.i64[0] = -1;
  v22.i64[1] = -1;
  v23 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)v12, v22), vandq_s8(v14, v21));
  v24 = (int8x16_t)vaddq_s32((int32x4_t)v23, (int32x4_t)v23);
  v25 = &color_unquant_to_uquant_tables[512 * v9];
  v26.i32[0] = v25[v24.i32[0] | 1];
  v26.i32[1] = v25[v24.i32[1] | 1];
  v26.i64[1] = v25[v24.i32[2] | 1];
  v24.i64[0] = 0xC0000000C0;
  v24.i64[1] = 0xC0000000C0;
  v27 = (int32x4_t)vandq_s8(veorq_s8(v26, v23), v24);
  v27.i32[3] = 0;
  if ((v28 & 1) == 0)
  {
    v60 = a2;
    v63 = a1;
    v57 = v11;
    v51 = v27;
    v54 = v26;
    v27 = v51;
    v26 = v54;
    v11 = v57;
    v17 = (uint32x4_t *)&unk_1EDF03000;
    v44 = v43;
    a2 = v60;
    a1 = v63;
    if (v44)
    {
      mask(vmask4)::shift = xmmword_18820BF90;
      v27 = v51;
      v26 = v54;
      v11 = v57;
      v17 = (uint32x4_t *)&unk_1EDF03000;
      a2 = v60;
      a1 = v63;
    }
  }
  v29.i64[0] = 0x100000001;
  v29.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vbicq_s8(v29, (int8x16_t)vceqzq_s32(v27)), v17[59])))
    return 0;
  v31.i64[0] = -1;
  v31.i64[1] = -1;
  v32 = (int8x16_t)vshlq_u32((uint32x4_t)v26, v31);
  v33.i64[0] = 0x3F0000003FLL;
  v33.i64[1] = 0x3F0000003FLL;
  v34.i64[0] = 0x2000000020;
  v34.i64[1] = 0x2000000020;
  v35 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32((int32x4_t)v32, v34) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8(v32, v33));
  if ((vaddq_s32(vaddq_s32(v35, vdupq_lane_s32(*(int32x2_t *)v35.i8, 1)), vdupq_laneq_s32(v35, 2)).u32[0] & 0x80000000) != 0)
    return 0;
  v36 = vaddq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)v11, v31), (int8x16_t)(*(_OWORD *)&v26 & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80))), v35);
  v37 = (int8x16_t)vshrq_n_u32((uint32x4_t)v36, 0x1FuLL);
  if ((v38 & 1) == 0)
  {
    v61 = a2;
    v64 = a1;
    v58 = v11;
    v52 = v36;
    v55 = v26;
    v49 = v37;
    v37 = v49;
    v36 = v52;
    v26 = v55;
    v11 = v58;
    v17 = (uint32x4_t *)&unk_1EDF03000;
    v46 = v45;
    a2 = v61;
    a1 = v64;
    if (v46)
    {
      mask(vmask4)::shift = xmmword_18820BF90;
      v37 = v49;
      v36 = v52;
      v26 = v55;
      v11 = v58;
      v17 = (uint32x4_t *)&unk_1EDF03000;
      a2 = v61;
      a1 = v64;
    }
  }
  v39.i64[0] = 0xFF000000FFLL;
  v39.i64[1] = 0xFF000000FFLL;
  v40 = (int8x16_t)vcgtq_s32(v36, v39);
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vsubq_s32((int32x4_t)vbicq_s8(v37, v40), (int32x4_t)v40), v17[59])))
    return 0;
  *a1 = v11;
  *a2 = v26;
  return 1;
}

uint64_t try_quantize_rgb_blue_contract(_OWORD *a1, _OWORD *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x8_t v8;
  unsigned __int8 v9;
  uint32x4_t *v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int32x4_t v19;
  int32x4_t v20;
  __int128 v21;
  __int128 v22;
  int v24;
  int v25;
  float32x4_t v26;
  float32x4_t v27;
  int v28;
  _OWORD *v29;
  int8x8_t v30;
  _OWORD *v31;

  v5 = vaddq_f32(a4, vsubq_f32(a4, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a4, (int32x4_t)a4), (int32x4_t)a4)));
  v6 = vaddq_f32(a5, vsubq_f32(a5, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a5, (int32x4_t)a5), (int32x4_t)a5)));
  v7 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  v8 = (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v5), (int8x16_t)vcgtq_f32(v5, v7)), vorrq_s8((int8x16_t)vcgtq_f32(v6, v7), (int8x16_t)vcltzq_f32(v6))));
  v10 = (uint32x4_t *)&unk_1EDF03000;
  if ((v9 & 1) == 0)
  {
    v31 = a1;
    v29 = a2;
    v28 = a3;
    v30 = v8;
    v26 = v5;
    v27 = v6;
    v5 = v26;
    v6 = v27;
    v10 = (uint32x4_t *)&unk_1EDF03000;
    v8 = v30;
    a3 = v28;
    a2 = v29;
    v25 = v24;
    a1 = v31;
    if (v25)
    {
      mask(vmask4)::shift = xmmword_18820BF90;
      v5 = v26;
      v6 = v27;
      v10 = (uint32x4_t *)&unk_1EDF03000;
      v8 = v30;
      a3 = v28;
      a1 = v31;
      a2 = v29;
    }
  }
  if (vaddvq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vand_s8(v8, (int8x8_t)0x1000100010001)), v10[59])))
    return 0;
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  v12 = vcvtq_s32_f32(vaddq_f32(v5, v11));
  v13 = (float32x4_t)vdupq_n_s32(0xBDCCCCCD);
  v14 = vsubq_s32(vaddq_s32(v12, v12), vcgeq_f32(vsubq_f32(v5, vcvtq_f32_s32(v12)), v13));
  v15 = &color_unquant_to_uquant_tables[512 * (uint64_t)a3 - 2048];
  v16 = v15[v14.i32[0]];
  v17 = v15[v14.i32[1]];
  v18 = v15[v14.i32[2]];
  v19 = vcvtq_s32_f32(vaddq_f32(v6, v11));
  v20 = vsubq_s32(vaddq_s32(v19, v19), vcgeq_f32(vsubq_f32(v6, vcvtq_f32_s32(v19)), v13));
  if (v15[v20.i32[1]] + v15[v20.i32[0]] + v15[v20.i32[2]] <= v17 + v16 + v18)
    return 0;
  LODWORD(v21) = v15[v20.i32[0]];
  DWORD1(v21) = v15[v20.i32[1]];
  *((_QWORD *)&v21 + 1) = v15[v20.i32[2]];
  *(_QWORD *)&v22 = __PAIR64__(v17, v16);
  *((_QWORD *)&v22 + 1) = v18;
  *a1 = v21;
  *a2 = v22;
  return 1;
}

__n128 quantize_rgb(_OWORD *a1, _OWORD *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  float32x4_t v6;
  char *v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int32x4_t v16;
  int32x4_t v17;
  __int128 v18;
  __int128 v19;
  __n128 result;

  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  v6 = (float32x4_t)vdupq_n_s32(0xBDCCCCCD);
  v7 = (char *)&color_unquant_to_uquant_tables + 512 * a3 - 2048;
  v8 = (float32x4_t)vdupq_n_s32(0xBE4CCCCD);
  v9.i64[0] = 0xFF000000FFLL;
  v9.i64[1] = 0xFF000000FFLL;
  v10 = (float32x4_t)vdupq_n_s32(0x3E4CCCCDu);
  do
  {
    v11 = vmaxq_s32(vcvtq_s32_f32(vaddq_f32(a4, v5)), (int32x4_t)0);
    v12 = vsubq_s32(vaddq_s32(v11, v11), vcgeq_f32(vsubq_f32(a4, vcvtq_f32_s32(v11)), v6));
    v13 = v7[v12.i32[0]];
    v14 = v7[v12.i32[1]];
    v15 = v7[v12.i32[2]];
    a4 = vaddq_f32(a4, v8);
    v16 = vminq_s32(vcvtq_s32_f32(vaddq_f32(a5, v5)), v9);
    v17 = vsubq_s32(vaddq_s32(v16, v16), vcgeq_f32(vsubq_f32(a5, vcvtq_f32_s32(v16)), v6));
    a5 = vaddq_f32(a5, v10);
  }
  while (v14 + v13 + v15 > v7[v17.i32[1]]
                          + v7[v17.i32[0]]
                          + v7[v17.i32[2]]);
  LODWORD(v18) = v7[v17.i32[0]];
  DWORD1(v18) = v7[v17.i32[1]];
  *((_QWORD *)&v18 + 1) = v7[v17.i32[2]];
  *(_QWORD *)&v19 = __PAIR64__(v14, v13);
  *((_QWORD *)&v19 + 1) = v15;
  *a1 = v19;
  *a2 = v18;
  result.n128_u64[0] = v19;
  result.n128_u32[2] = DWORD2(v19);
  return result;
}

_BYTE *quantize_rgbs(_BYTE *result, int a2, int8x16_t a3)
{
  float v3;
  float32x2_t v4;
  float v5;
  float32x2_t v6;
  char *v7;
  int v8;
  float32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  int v13;
  int v14;
  float v15;
  float v16;
  BOOL v17;
  BOOL v18;
  float v19;
  int v20;

  v3 = fmaxf(0.0038911 * *(float *)a3.i32, 0.0);
  v4 = (float32x2_t)vdup_n_s32(0x437F0000u);
  if ((float)(0.0038911 * *(float *)a3.i32) <= 255.0)
    v5 = v3;
  else
    v5 = 255.0;
  v6.i32[1] = a3.i32[1];
  v6.i32[0] = vextq_s8(a3, a3, 8uLL).u32[0];
  v7 = (char *)&color_unquant_to_uquant_tables + 512 * (uint64_t)a2 - 2048;
  v8 = v7[((float)(v5 - (float)(int)(float)(v5 + 0.5)) >= -0.1) | (2 * (int)(float)(v5 + 0.5))];
  v9 = vmul_f32(v6, (float32x2_t)vdup_n_s32(0x3B7F00FFu));
  v10 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v9, v4), (int8x8_t)v4, (int8x8_t)vmaxnm_f32(v9, 0));
  v11 = vcvt_s32_f32(vadd_f32(v10, (float32x2_t)0x3F0000003F000000));
  v12 = vcge_f32(vsub_f32(v10, vcvt_f32_s32(v11)), (float32x2_t)vdup_n_s32(0xBDCCCCCD));
  v13 = v7[2 * v11.i32[1] - v12.i32[1]];
  v14 = v7[2 * v11.i32[0] - v12.i32[0]];
  v15 = vmuls_lane_f32((float)(0.0038911* vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)a3, 2), vaddq_f32((float32x4_t)a3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.i8, 1))).f32[0])+ 1.0e-10, (float32x4_t)a3, 3)/ (float)((float)(v13 + v8 + v14) + 1.0e-10);
  v16 = (float)(v15 * 256.0) + 0.5;
  if (v15 <= 0.0)
    v16 = 0.5;
  v17 = v15 == 1.0;
  v18 = v15 < 1.0;
  v19 = 256.5;
  if (v18 || v17)
    v19 = v16;
  v20 = (int)v19 & ~((int)v19 >> 31);
  if (v20 >= 255)
    v20 = 255;
  *result = v8;
  result[1] = v13;
  result[2] = v14;
  result[3] = v7[(2 * v20) | 1];
  return result;
}

_BYTE *quantize_hdr_rgb(_BYTE *result, int a2, float32x4_t a3, float32x4_t a4)
{
  float32x2_t v4;
  float32x4_t v5;
  float32x2x2_t v6;
  int32x4_t v7;
  int v9;
  int8x16_t v10;
  int8x16_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float32x2_t v17;
  float32x2_t v18;
  uint64_t v19;
  float32x2_t v20;
  float32x2_t v21;
  uint64_t v22;
  float *v23;
  float v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  float v29;
  float v30;
  _DWORD *v31;
  unsigned int v32;
  int v33;
  float v34;
  float v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned __int8 v40;
  int v41;
  float32x2_t v42;
  int32x2_t v43;
  int32x2_t v44;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned __int8 v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int8x8_t v55;
  float32x2_t v56;
  int32x2_t v57;
  int32x2_t v58;
  uint64_t v59;
  float *v60;
  float v61;
  float v62;
  float v63;
  uint64_t i;
  char *v65;
  unsigned int v66;
  char v67;
  int v68;
  unsigned int v69;
  int v70;
  int32x2_t v71;
  unsigned int v72;
  int v73;
  unsigned __int8 v74;
  int v75;
  int v76;
  char *v77;
  char v78;
  int v79;
  _DWORD v80[6];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v5 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  v6 = (float32x2x2_t)vminnmq_f32(vmaxnmq_f32(a3, (float32x4_t)0), v5);
  v7 = (int32x4_t)vminnmq_f32(vmaxnmq_f32(a4, (float32x4_t)0), v5);
  if (*(float *)v7.i32 <= *(float *)&v7.i32[1] || *(float *)v7.i32 <= *(float *)&v7.i32[2])
  {
    v10 = (int8x16_t)vrev64q_s32((int32x4_t)v6);
    v11 = (int8x16_t)vrev64q_s32(v7);
    if (*(float *)&v7.i32[1] <= *(float *)&v7.i32[2])
    {
      v10 = vextq_s8(v10, v10, 0xCuLL);
      v11 = vextq_s8(v11, v11, 0xCuLL);
      v9 = 2;
    }
    else
    {
      v10.i64[1] = (uint64_t)v6.val[1];
      v11.i64[1] = v7.i64[1];
      v9 = 1;
    }
  }
  else
  {
    v9 = 0;
    v10 = (int8x16_t)v6;
    v11 = (int8x16_t)v7;
  }
  v12 = fmaxf(*(float *)v11.i32, 0.0);
  if (*(float *)v11.i32 > 65535.0)
    v12 = 65535.0;
  v13 = v12 - *(float *)&v11.i32[1];
  v14 = vabds_f32((float)(v12 - (float)(v12 - *(float *)&v11.i32[1])) - (float)(v12 - *(float *)v10.i32), *(float *)&v10.i32[1]);
  v15 = vabds_f32((float)(v12 - (float)(v12 - *(float *)&v11.i32[2])) - (float)(v12 - *(float *)v10.i32), *(float *)&v10.i32[2]);
  v16 = a2 - 4;
  v17 = (float32x2_t)vextq_s8(v10, v10, 4uLL).u64[0];
  v18 = (float32x2_t)vextq_s8(v11, v11, 4uLL).u64[0];
  v19 = 7;
  v20 = (float32x2_t)vdup_n_s32(0x477FFF00u);
  v21 = (float32x2_t)vdup_n_s32(0xC77FFF00);
  while (1)
  {
    v22 = v19;
    v23 = (float *)((char *)&quantize_hdr_rgb(vfloat4,vfloat4,unsigned char *,quant_method)::mode_cutoffs + 16 * v19);
    v24 = v23[2];
    v25 = v13 <= *v23 && (float)(v12 - *(float *)&v11.i32[2]) <= *v23;
    v26 = v25 && (float)(v12 - *(float *)v10.i32) <= v23[1];
    v27 = v26 && v14 <= v24;
    if (v27 && v15 <= v24)
    {
      v29 = quantize_hdr_rgb(vfloat4,vfloat4,unsigned char *,quant_method)::mode_scales[v19];
      v30 = quantize_hdr_rgb(vfloat4,vfloat4,unsigned char *,quant_method)::mode_rscales[v19];
      v31 = (_DWORD *)((char *)&quantize_hdr_rgb(vfloat4,vfloat4,unsigned char *,quant_method)::mode_bits + 16 * v19);
      v32 = (int)(float)((float)(v12 * v29) + 0.5);
      v33 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v32) | 1u)];
      v4.f32[0] = v30 * (float)(int)(v32 & 0xFFFFFF00 | v33);
      v34 = fmaxf(v4.f32[0] - *(float *)v10.i32, 0.0);
      v35 = (float)(v4.f32[0] - *(float *)v10.i32) <= 65535.0 ? v34 : 65535.0;
      v36 = (int)(float)((float)(v29 * v35) + 0.5);
      if (1 << v31[2] > (int)v36)
      {
        v37 = 1 << v31[1];
        v38 = 1 << (v31[3] - 1);
        v39 = (int)(float)((float)(v29 * v35) + 0.5) & 0x3F | ((_DWORD)v22 << 7) | (v32 >> 2) & 0x40;
        do
        {
          v40 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v39) | 1u)];
          v41 = v39 & 0xC0;
          v39 -= v41 != (v40 & 0xC0);
        }
        while (v41 != (v40 & 0xC0));
        v4 = (float32x2_t)vdup_lane_s32((int32x2_t)v4, 0);
        v42 = vsub_f32(v4, v18);
        v43 = vcgt_f32(v42, v20);
        v44 = vcvt_s32_f32(vadd_f32(vmul_n_f32((float32x2_t)vbsl_s8((int8x8_t)v43, (int8x8_t)v20, (int8x8_t)vmaxnm_f32(v42, 0)), v29), (float32x2_t)0x3F0000003F000000));
        if (v37 > v44.i32[0] && v37 > v44.i32[1])
        {
          if (v22 > 7)
            v46 = 0;
          else
            v46 = ((1 << v22) & 0x5B) != 0 ? ((unsigned __int32)v44.i32[0] >> 6) & 1 : (v32 >> 9) & 1;
          if (v22 > 7)
          {
            v47 = 0;
          }
          else if (((1 << v22) & 0x5B) != 0)
          {
            v47 = ((unsigned __int32)v44.i32[1] >> 6) & 1;
          }
          else
          {
            v47 = ((1 << v22) & 0xA0) != 0 ? (v32 >> 10) & 1 : (v36 >> 6) & 1;
          }
          v48 = v47 << 6;
          v49 = v44.i8[0] & 0x3F | (v46 << 6) & 0xFFFFFF7F | (((v22 >> 1) & 1) << 7);
          do
          {
            v50 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v49) | 1u)];
            v51 = v49 & 0xC0;
            v49 -= v51 != (v50 & 0xC0);
          }
          while (v51 != (v50 & 0xC0));
          v52 = v48 | v44.i8[4] & 0x3F | (32 * v22) & 0x80;
          do
          {
            v53 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v52) | 1u)];
            v54 = v52 & 0xC0;
            v52 -= v54 != (v53 & 0xC0);
          }
          while (v54 != (v53 & 0xC0));
          v55.i32[0] = v50 & 0x3F;
          v55.i32[1] = v53 & 0xFFFFFF3F;
          *(float *)v43.i32 = v30 * (float)(int)(v36 & 0xFFFFFFC0 | v40 & 0x3F);
          v56 = vsub_f32(vsub_f32(vsub_f32(v4, vmul_n_f32(vcvt_f32_s32((int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v44 & 0xFFFFFFC0FFFFFFC0), v55)), v30)), (float32x2_t)vdup_lane_s32(v43, 0)), v17);
          v57 = vcvt_s32_f32(vadd_f32(vmul_n_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v56, v20), (int8x8_t)v20, (int8x8_t)vmaxnm_f32(v56, v21)), v29), (float32x2_t)0x3F0000003F000000));
          v4 = (float32x2_t)vabs_s32(v57);
          v58 = vcgt_s32(vdup_n_s32(v38), (int32x2_t)v4);
          if ((v58.i32[0] & v58.i32[1] & 1) != 0)
            break;
        }
      }
    }
    v19 = v22 - 1;
    if (!v22)
    {
      v59 = 0;
      v60 = (float *)v80;
      vst2_f32(v60, v6);
      v60 += 4;
      *v60 = v6.val[1].f32[0];
      v80[5] = v7.i32[2];
      do
      {
        v61 = *(float *)&v80[v59];
        v62 = fmaxf(v61, 0.0);
        if (v61 <= 65020.0)
          v63 = v62;
        else
          v63 = *(float *)"";
        *(float *)&v80[v59++] = v63;
      }
      while (v59 != 6);
      for (i = 0; i != 4; ++i)
        result[i] = color_unquant_to_uquant_tables[512 * v16
                                                 + 1
                                                 + 2 * (int)(float)((float)(*(float *)&v80[i] * 0.0039062) + 0.5)];
      v65 = (char *)&color_unquant_to_uquant_tables[512 * v16];
      do
      {
        v66 = (int)(float)((float)(*(float *)&v80[i] * 0.0019531) + 0.5) ^ 0xFFFFFF80;
        do
        {
          v67 = v65[(2 * v66) | 1];
          v68 = v66 & 0xC0;
          v66 -= v68 != (v67 & 0xC0);
        }
        while (v68 != (v67 & 0xC0));
        result[i++] = v67;
      }
      while (i != 6);
      return result;
    }
  }
  switch((int)v22)
  {
    case 0:
    case 2:
      v69 = ((unsigned __int32)v57.i32[0] >> 6) & 1;
      goto LABEL_71;
    case 1:
    case 4:
      v69 = ((unsigned __int32)v44.i32[0] >> 7) & 1;
      goto LABEL_71;
    case 3:
      v69 = (v32 >> 9) & 1;
      goto LABEL_77;
    case 5:
      v69 = (v36 >> 7) & 1;
      goto LABEL_77;
    case 6:
    case 7:
      v69 = (v32 >> 11) & 1;
      goto LABEL_71;
    default:
      v69 = 0;
LABEL_71:
      if (v22 > 7)
      {
        v70 = 0;
      }
      else if (((1 << v22) & 0xE8) != 0)
      {
LABEL_77:
        v70 = (v36 >> 6) & 1;
      }
      else
      {
        v70 = ((unsigned __int32)v57.i32[1] >> 6) & 1;
        if (((1 << v22) & 5) == 0)
          v70 = ((unsigned __int32)v44.i32[1] >> 7) & 1;
      }
      if ((v22 | 2) == 6)
        v71 = (int32x2_t)vshl_u32((uint32x2_t)vdup_n_s32(v32), (uint32x2_t)0xFFFFFFF6FFFFFFF7);
      else
        v71 = vshr_n_s32(v57, 5uLL);
      v72 = v57.i8[0] & 0x1F | (v69 << 6) | (32 * (v71.i8[0] & 1)) | (v9 << 7);
      v73 = (v9 << 6) & 0x80;
      do
      {
        v74 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v72) | 1u)];
        v75 = v72 & 0xF0;
        v72 -= v75 != (v74 & 0xF0);
      }
      while (v75 != (v74 & 0xF0));
      v76 = (32 * (v71.i8[4] & 1)) | (v70 << 6) | v57.i8[4] & 0x1F | v73;
      v77 = (char *)&color_unquant_to_uquant_tables[512 * v16];
      do
      {
        v78 = v77[(2 * v76) | 1];
        v79 = v76 & 0xF0;
        v76 -= v79 != (v78 & 0xF0);
      }
      while (v79 != (v78 & 0xF0));
      *result = v33;
      result[1] = v40;
      result[2] = v50;
      result[3] = v53;
      result[4] = v74;
      result[5] = v78;
      break;
  }
  return result;
}

uint64_t try_quantize_alpha_delta(uint64_t a1, uint64_t a2, int a3, __n128 a4, __n128 a5)
{
  unsigned int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = (int)(float)(a4.n128_f32[3] + 0.5);
  v6 = &color_unquant_to_uquant_tables[512 * a3 - 2048];
  v7 = v6[(4 * (v5 & 0x7F)) | 1];
  v8 = v7 | (((v5 >> 7) & 1) << 8);
  v9 = 2 * (int)(float)(a5.n128_f32[3] + 0.5) - v8;
  if ((v9 - 64) < 0xFFFFFF80)
    return 0;
  v10 = v9 & 0x7F | (((2 * v5) & 0x100) >> 1);
  v11 = v6[(2 * v10) | 1];
  if ((v10 ^ v11) > 0x3F || (v11 & 0x7F) + v8 + ((v11 << 25 >> 31) & 0xFFFFFF80) > 0x1FF)
    return 0;
  *(_DWORD *)(a1 + 12) = v7;
  *(_DWORD *)(a2 + 12) = v11;
  return 1;
}

void pack_color_endpoints()
{
  __assert_rtn("pack_color_endpoints", "astcenc_color_quantize.cpp", 1918, "QUANT_6 <= quant_level && quant_level <= QUANT_256");
}

double astc::rand_init(astc *this, unint64_t *a2)
{
  double result;

  result = -2.40530959e284;
  *(_OWORD *)this = xmmword_188236020;
  return result;
}

uint64_t astc::rand(astc *this, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 1);
  v3 = v2 + *(_QWORD *)this;
  v4 = v2 ^ *(_QWORD *)this;
  *(_QWORD *)this = __ROR8__(*(_QWORD *)this, 40) ^ (v4 << 16) ^ v4;
  *((_QWORD *)this + 1) = __ROR8__(v4, 27);
  return v3;
}

uint64_t astcenc_config_init(unsigned int a1, int a2, int a3, unsigned int a4, int a5, uint64_t a6, float a7)
{
  unsigned int v13;
  uint64_t result;
  int v15;
  float v16;
  int32x2_t v17;
  int32x2_t v18;
  uint64_t v19;
  float *v20;
  float *v21;
  float *v22;
  float v23;
  uint64_t v24;
  float *v25;
  float v26;
  float v27;
  int v28;
  float32x2_t v29;
  float v30;
  float v31;
  float *v32;
  float *v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x4_t v36;
  float32x2_t v37;
  float v38;
  float v39;
  float v40;
  int v46;
  int v47;

  if ((float)((float)(2.51 + 12583000.0) + -12583000.0) != 3.0)
    return 2;
  *(_OWORD *)(a6 + 92) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  if (a4 <= 1)
    v13 = 1;
  else
    v13 = a4;
  *(_OWORD *)a6 = 0uLL;
  *(_OWORD *)(a6 + 16) = 0uLL;
  result = validate_block_size(a2, a3, v13);
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a6 + 8) = a2;
    *(_DWORD *)(a6 + 12) = a3;
    *(_DWORD *)(a6 + 16) = v13;
    v15 = a3 * a2 * v13;
    v16 = logf((float)v15);
    result = 6;
    if (a7 >= 0.0 && a7 <= 100.0)
    {
      v19 = 0;
      v20 = (float *)&preset_configs_low;
      if (v15 < 0x40)
        v20 = (float *)&preset_configs_mid;
      v21 = (float *)&preset_configs_high;
      if (v15 >= 25)
        v21 = v20;
      astcenc_config_init(astcenc_profile,unsigned int,unsigned int,unsigned int,float,unsigned int,astcenc_config *)::preset_configs = (uint64_t)v21;
      v22 = v21;
      v23 = v16 / 2.3026;
      do
      {
        if (*v22 >= a7)
          break;
        ++v19;
        v22 += 18;
      }
      while (v19 != 6);
      v24 = v19 - 1;
      if (!v19)
        v24 = 0;
      if (v24 == v19)
      {
        v25 = &v21[18 * v19];
        *(_OWORD *)(a6 + 44) = *(_OWORD *)(v25 + 1);
        *(_OWORD *)(a6 + 60) = *(_OWORD *)(v25 + 5);
        *(_QWORD *)(a6 + 76) = *(_QWORD *)(v25 + 9);
        v26 = v25[11] + (float)(v23 * -35.0);
        v27 = v25[12] + (float)(v23 * -19.0);
        if (v26 > v27)
          v27 = v26;
        v28 = *((_DWORD *)v25 + 13);
        *(float *)(a6 + 84) = v27;
        *(_DWORD *)(a6 + 88) = v28;
        v29 = *(float32x2_t *)(v25 + 14);
        *(float32x2_t *)(a6 + 92) = v29;
        v30 = v25[17];
        *(float *)(a6 + 100) = v25[16];
      }
      else
      {
        *(float *)v17.i32 = v21[18 * v19];
        v31 = v21[18 * v24];
        *(float *)v18.i32 = *(float *)v17.i32 - v31;
        if ((float)(*(float *)v17.i32 - v31) <= 0.0)
          astcenc_config_init();
        *(float *)v17.i32 = (float)(*(float *)v17.i32 - a7) / *(float *)v18.i32;
        *(float *)v18.i32 = (float)(a7 - v31) / *(float *)v18.i32;
        v32 = &v21[18 * v24];
        v33 = &v21[18 * v19];
        v34 = (float32x2_t)vdupq_lane_s32(v18, 0).u64[0];
        v35 = (float32x2_t)vdupq_lane_s32(v17, 0).u64[0];
        v36.i64[0] = 0x3F0000003F000000;
        v36.i64[1] = 0x3F0000003F000000;
        *(int32x4_t *)(a6 + 44) = vcvtq_s32_f32(vaddq_f32(vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_u32(*(uint32x4_t *)(v33 + 1)), *(float *)v18.i32), vcvtq_f32_u32(*(uint32x4_t *)(v32 + 1)), *(float *)v17.i32), v36));
        *(int32x4_t *)(a6 + 60) = vcvtq_s32_f32(vaddq_f32(vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_u32(*(uint32x4_t *)(v33 + 5)), *(float *)v18.i32), vcvtq_f32_u32(*(uint32x4_t *)(v32 + 5)), *(float *)v17.i32), v36));
        *(int32x2_t *)(a6 + 76) = vcvt_s32_f32(vadd_f32(vmla_f32(vmul_f32(v34, vcvt_f32_u32(*(uint32x2_t *)(v33 + 9))), v35, vcvt_f32_u32(*(uint32x2_t *)(v32 + 9))), (float32x2_t)0x3F0000003F000000));
        v37 = vmla_n_f32(vmla_f32(vmul_f32(v34, *(float32x2_t *)(v33 + 11)), v35, *(float32x2_t *)(v32 + 11)), (float32x2_t)0xC1980000C20C0000, v23);
        v27 = v37.f32[1];
        if (v37.f32[0] > v37.f32[1])
          v27 = v37.f32[0];
        v38 = (float)(*(float *)v18.i32 * v33[13]) + (float)(v32[13] * *(float *)v17.i32);
        *(float *)(a6 + 84) = v27;
        *(float *)(a6 + 88) = v38;
        v29 = vmla_f32(vmul_f32(v34, *(float32x2_t *)(v33 + 14)), v35, *(float32x2_t *)(v32 + 14));
        *(float32x2_t *)(a6 + 92) = v29;
        v39 = v33[17];
        v40 = v32[17];
        *(float *)(a6 + 100) = (float)(*(float *)v18.i32 * v33[16]) + (float)(v32[16] * *(float *)v17.i32);
        v30 = (float)(*(float *)v18.i32 * v39) + (float)(v40 * *(float *)v17.i32);
      }
      *(float *)(a6 + 104) = v30;
      __asm { FMOV            V2.4S, #1.0 }
      *(_OWORD *)(a6 + 20) = _Q2;
      *(_QWORD *)(a6 + 36) = 0;
      *(_DWORD *)a6 = a1;
      if (a1 >= 2)
      {
        if (a1 - 2 > 1)
          return 5;
        *(_DWORD *)(a6 + 84) = 1148829696;
        *(_DWORD *)(a6 + 104) = 0;
        v27 = 999.0;
      }
      LODWORD(_Q2) = a5 & 0xFFFFFF82;
      *(int8x8_t *)&_Q2 = vcnt_s8(*(int8x8_t *)&_Q2);
      if (vaddlv_u8(*(uint8x8_t *)&_Q2))
        return 8;
      LODWORD(_Q2) = a5 & 0x41;
      if ((vaddlv_u8((uint8x8_t)vcnt_s8(*(int8x8_t *)&_Q2)) & 0xFFFE) != 0)
      {
        return 8;
      }
      else
      {
        if ((a5 & 1) != 0)
        {
          v46 = *(_DWORD *)(a6 + 44);
          if ((v46 + 1) < 4)
            v47 = v46 + 1;
          else
            v47 = 4;
          *(_DWORD *)(a6 + 44) = v47;
          *(_QWORD *)(a6 + 24) = 0;
          __asm { FMOV            V2.2S, #1.5 }
          *(float32x2_t *)(a6 + 92) = vmul_f32(v29, _D2);
          *(_DWORD *)(a6 + 100) = 1065185444;
          *(float *)(a6 + 84) = v27 * 1.03;
        }
        else if ((a5 & 0x40) != 0)
        {
          *(_DWORD *)(a6 + 40) = 1084227584;
          *(_DWORD *)(a6 + 32) = 1092616192;
        }
        else if ((a5 & 8) != 0)
        {
          *(_QWORD *)(a6 + 20) = 0x3FA9EB853F2CCCCDLL;
          *(_DWORD *)(a6 + 28) = 1048408228;
        }
        result = 0;
        *(_DWORD *)(a6 + 4) = a5;
      }
    }
  }
  return result;
}

uint64_t validate_block_size(int a1, int a2, unsigned int a3)
{
  if (a3 > 1)
  {
    if (!is_legal_3d_block_size(a1, a2, a3))
      return 4;
  }
  else if ((is_legal_2d_block_size(a1, a2) & 1) == 0)
  {
    return 4;
  }
  if (a2 * a1 * a3 >= 0xD9)
    return 10;
  else
    return 0;
}

uint64_t astcenc_context_alloc(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  std::mutex *v8;
  std::mutex *v9;
  std::mutex *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  unsigned int v17;
  unsigned int v18;
  uint32x4_t v19;
  uint32x4_t v20;
  int8x16_t v21;
  float32x2_t v22;
  int32x2_t v23;
  int8x16_t v24;
  int v25;
  block_size_descriptor *v27;
  int32x2_t v28;
  float v29;
  int8x16_t v30;
  uint32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  int v48;
  void *v49;
  BOOL v50;
  void *memptr;

  LODWORD(memptr) = 1075880919;
  if ((float)((float)(2.51 + 12583000.0) + -12583000.0) != 3.0)
    return 2;
  if (!a2)
    return 3;
  v6 = operator new();
  v7 = v6;
  *(_QWORD *)(v6 + 224) = 850045863;
  v8 = (std::mutex *)(v6 + 224);
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_QWORD *)(v6 + 280) = 0;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_QWORD *)(v6 + 296) = 1018212795;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_QWORD *)(v6 + 336) = 0;
  *(_WORD *)(v6 + 288) = 0;
  atomic_store(0, (unsigned int *)(v6 + 344));
  *(_QWORD *)(v6 + 348) = 0;
  v9 = (std::mutex *)(v6 + 360);
  *(_QWORD *)(v6 + 360) = 850045863;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_QWORD *)(v6 + 416) = 0;
  *(_QWORD *)(v6 + 432) = 1018212795;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_QWORD *)(v6 + 472) = 0;
  *(_WORD *)(v6 + 424) = 0;
  atomic_store(0, (unsigned int *)(v6 + 480));
  *(_QWORD *)(v6 + 484) = 0;
  v10 = (std::mutex *)(v6 + 496);
  *(_QWORD *)(v6 + 496) = 850045863;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_QWORD *)(v6 + 552) = 0;
  *(_QWORD *)(v6 + 568) = 1018212795;
  *(_OWORD *)(v6 + 576) = 0u;
  *(_OWORD *)(v6 + 592) = 0u;
  *(_QWORD *)(v6 + 608) = 0;
  *(_WORD *)(v6 + 560) = 0;
  atomic_store(0, (unsigned int *)(v6 + 616));
  *(_QWORD *)(v6 + 620) = 0;
  *(_DWORD *)(v6 + 108) = a2;
  v11 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v6 + 80) = v11;
  *(_OWORD *)(v6 + 92) = *(_OWORD *)(a1 + 92);
  v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 16) = v12;
  v13 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 48) = v13;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  if (*(_DWORD *)v6 > 3u)
  {
    v15 = 5;
    goto LABEL_10;
  }
  v14 = *(_DWORD *)(v6 + 4);
  if (vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v14 & 0xFFFFFF82)))
    || (vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v14 & 0x41))) & 0xFFFE) != 0)
  {
    v15 = 8;
LABEL_10:
    std::condition_variable::~condition_variable((std::condition_variable *)(v7 + 568));
    std::mutex::~mutex(v10);
    std::condition_variable::~condition_variable((std::condition_variable *)(v7 + 432));
    std::mutex::~mutex(v9);
    std::condition_variable::~condition_variable((std::condition_variable *)(v7 + 296));
    std::mutex::~mutex(v8);
    MEMORY[0x18D761C30](v7, 0x10E0C404CB2D1E6);
    return v15;
  }
  v15 = validate_block_size(*(_DWORD *)(v6 + 8), *(_DWORD *)(v6 + 12), *(_DWORD *)(v6 + 16));
  if ((_DWORD)v15)
    goto LABEL_10;
  v17 = *(_DWORD *)(v7 + 60);
  v18 = *(_DWORD *)(v7 + 64);
  if (v17 <= 1)
    v17 = 1;
  if (v17 >= 0x64)
    v17 = 100;
  *(float *)(v7 + 40) = fmaxf(*(float *)(v7 + 40), 1.0);
  v19.i64[0] = 0x100000001;
  v19.i64[1] = 0x100000001;
  *(uint32x4_t *)(v7 + 44) = vminq_u32(vmaxq_u32(*(uint32x4_t *)(v7 + 44), v19), (uint32x4_t)xmmword_188236060);
  if (v18 <= 1)
    v18 = 1;
  *(_DWORD *)(v7 + 60) = v17;
  *(_DWORD *)(v7 + 64) = v18;
  v20.i64[0] = 0x800000008;
  v20.i64[1] = 0x800000008;
  *(uint32x4_t *)(v7 + 68) = vminq_u32(vmaxq_u32(*(uint32x4_t *)(v7 + 68), v19), v20);
  *(float32x4_t *)(v7 + 84) = vmaxnmq_f32(*(float32x4_t *)(v7 + 84), (float32x4_t)xmmword_188236070);
  *(float *)(v7 + 100) = fmaxf(*(float *)(v7 + 100), 0.0);
  v21 = *(int8x16_t *)(v7 + 20);
  v20.i64[0] = vextq_s8(v21, v21, 8uLL).u64[0];
  v22 = (float32x2_t)vzip1_s32(*(int32x2_t *)v21.i8, *(int32x2_t *)v20.i8);
  *(int32x2_t *)v20.i8 = vzip2_s32(*(int32x2_t *)v21.i8, *(int32x2_t *)v20.i8);
  v23 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v22, *(float32x2_t *)v20.i8), (int8x8_t)v22, *(int8x8_t *)v20.i8);
  if (*(float *)v23.i32 <= *(float *)&v23.i32[1])
    v23.i32[0] = v23.i32[1];
  if (*(float *)v23.i32 <= 0.0)
  {
    v15 = 3;
    goto LABEL_10;
  }
  *(float *)v23.i32 = *(float *)v23.i32 / 1000.0;
  v24 = (int8x16_t)vdupq_lane_s32(v23, 0);
  *(int8x16_t *)(v7 + 20) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v21, (float32x4_t)v24), v21, v24);
  memptr = 0;
  v25 = malloc_type_posix_memalign(&memptr, 0x10uLL, 0xE0EC70uLL, 0xB955D883uLL);
  if (memptr)
    _ZF = v25 == 0;
  else
    _ZF = 0;
  if (_ZF)
    v27 = (block_size_descriptor *)memptr;
  else
    v27 = 0;
  *(_QWORD *)(v7 + 112) = v27;
  init_block_size_descriptor(*(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), (*(_DWORD *)(a1 + 4) >> 5) & 1, *(_DWORD *)(a1 + 44), (float)*(unsigned int *)(a1 + 60) / 100.0, v27);
  if ((*(_BYTE *)(v7 + 4) & 0x10) != 0)
    goto LABEL_40;
  v29 = 0.0;
  if (*(_DWORD *)v7 <= 1u)
  {
    *(float *)v28.i32 = *(float *)(v7 + 84) * 0.1;
    v30 = (int8x16_t)vceqzq_f32((float32x4_t)vdupq_lane_s32(v28, 0));
    v31.i64[0] = 0x1600000016;
    v31.i64[1] = 0x1600000016;
    v32 = (float32x4_t)vshlq_u32((uint32x4_t)vdupq_n_s32(0x3D800000u), v31);
    v31.i64[0] = 0x7E0000007ELL;
    v31.i64[1] = 0x7E0000007ELL;
    v33 = vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(vaddq_f32(vcvtq_f32_s32(vaddq_s32((int32x4_t)v32, (int32x4_t)v31)), (float32x4_t)vdupq_n_s32(0x3F2D9864u)), *(float *)v28.i32), (float32x4_t)vdupq_n_s32(0xC2FDFFFF)), (float32x4_t)vdupq_n_s32(0x43010000u));
    v32.i64[0] = 0xBF000000BF000000;
    v32.i64[1] = 0xBF000000BF000000;
    v34 = vcvtq_s32_f32(vaddq_f32(v33, v32));
    v35 = vsubq_f32(v33, vcvtq_f32_s32(v34));
    v31.i64[0] = 0x7F0000007FLL;
    v31.i64[1] = 0x7F0000007FLL;
    v36 = (float32x4_t)vshlq_n_s32(vaddq_s32(v34, (int32x4_t)v31), 0x17uLL);
    v37 = (float32x4_t)vdupq_n_s32(0x3C134806u);
    v38 = vmulq_f32(v35, vaddq_f32(vmulq_f32(v35, (float32x4_t)vdupq_n_s32(0x3AF61905u)), v37));
    v37.i32[0] = 1030007331;
    v39 = vmulq_f32(v35, vaddq_f32(v38, v37));
    v37.i32[0] = 1047915220;
    v40 = vmulq_f32(v35, vaddq_f32(v39, v37));
    v37.i32[0] = 1060205179;
    v41 = vaddq_f32(v40, v37);
    v42 = vmulq_f32(v35, v41);
    v41.i32[0] = 1065353215;
    v43 = (int8x16_t)vmulq_f32(vaddq_f32(v42, v41), v36);
    __asm { FMOV            V2.4S, #1.0 }
    v29 = (float)(65535.0 * *(float *)vbslq_s8(v30, _Q2, v43).i32) * 65535.0;
  }
  *(float *)(v7 + 84) = v29;
  memptr = 0;
  v48 = malloc_type_posix_memalign(&memptr, 0x10uLL, 231744 * a2, 0xB955D883uLL);
  v49 = memptr;
  v50 = v48 || memptr == 0;
  if (v50)
    v49 = 0;
  *(_QWORD *)(v7 + 128) = v49;
  if (v50)
  {
    free(*(void **)(v7 + 112));
    astcenc_context::~astcenc_context((astcenc_context *)v7);
    MEMORY[0x18D761C30]();
    *a3 = 0;
    return 1;
  }
  else
  {
LABEL_40:
    *a3 = v7;
    prepare_angular_tables();
    return 0;
  }
}

void astcenc_context::~astcenc_context(astcenc_context *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 496);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 568));
  std::mutex::~mutex(v2);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 9);
  std::mutex::~mutex((std::mutex *)((char *)this + 360));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 296));
  std::mutex::~mutex((std::mutex *)((char *)this + 224));
}

uint64_t astcenc_context_free(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    free(*(void **)(result + 128));
    free(*(void **)(v1 + 112));
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 568));
    std::mutex::~mutex((std::mutex *)(v1 + 496));
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 432));
    std::mutex::~mutex((std::mutex *)(v1 + 360));
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 296));
    std::mutex::~mutex((std::mutex *)(v1 + 224));
    JUMPOUT(0x18D761C30);
  }
  return result;
}

uint64_t astcenc_compress_image(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v3;
  uint32x4_t *v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint32x4_t *v8;
  uint32x4_t v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int32x4_t v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 *v33;
  int v34;
  signed int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  __n128 v42;
  void (*v43)(unsigned __int32, int *, int8x16_t *, unsigned __int8 *, int, int, int, _DWORD *, int32x4_t);
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  char v55;
  int v56;
  int v57;
  __int128 v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v62;
  ParallelManager *v63;
  unsigned int v64;
  int v65;
  unsigned __int8 *v66;
  void (*v67)(unsigned __int32, int *, int8x16_t *, unsigned __int8 *, int, int, int, _DWORD *, int32x4_t);
  unsigned int v68;
  int32x4_t *v69;
  int *v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  int32x2_t v78;
  int v79;
  int32x2_t v80;
  int v81;
  _QWORD v82[3];
  _QWORD *v83;
  _BYTE v84[24];
  _BYTE *v85;
  _OWORD v86[2];
  __int128 v87;
  int32x2_t v88;
  uint64_t v89;
  char v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  char v96;
  uint64_t v97;

  MEMORY[0x1E0C80A78](a1, a2);
  v75 = v7;
  v70 = v3;
  v97 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(v2 + 4) & 0x10) != 0)
    return 9;
  v8 = v4;
  v9.i64[0] = 0x500000005;
  v9.i64[1] = 0x500000005;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32(*v4, v9))) & 1) != 0)
    return 7;
  v11 = v2;
  v12 = *(_DWORD *)(v2 + 108);
  if (v12 <= v6)
    return 3;
  if (16
     * (*(_DWORD *)(v2 + 8) + *v3 - 1)
     / *(_DWORD *)(v2 + 8)
     * ((*(_DWORD *)(v2 + 12) + v3[1] - 1)
      / *(_DWORD *)(v2 + 12))
     * ((*(_DWORD *)(v2 + 16) + v3[2] - 1)
      / *(_DWORD *)(v2 + 16)) > v5)
    return 1;
  v71 = v6;
  if (v12 == 1)
  {
    *(_WORD *)(v2 + 288) = 0;
    atomic_store(0, (unsigned int *)(v2 + 344));
    *(_QWORD *)(v2 + 348) = 0;
    *(_WORD *)(v2 + 424) = 0;
    atomic_store(0, (unsigned int *)(v2 + 480));
    *(_QWORD *)(v2 + 484) = 0;
  }
  v69 = (int32x4_t *)v4;
  if (*(_DWORD *)(v2 + 36))
  {
    v13 = operator new(0x20uLL);
    *v13 = &unk_1E1BBC058;
    v13[1] = v11;
    v13[2] = v70;
    v13[3] = v8;
    v85 = v13;
    ParallelManager::init(v11 + 224, (uint64_t)v84);
    v14 = v85;
    if (v85 == v84)
    {
      v15 = 4;
      v14 = v84;
    }
    else
    {
      if (!v85)
        goto LABEL_18;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_18:
    v16 = *(_OWORD *)(v11 + 152);
    v86[0] = *(_OWORD *)(v11 + 136);
    v86[1] = v16;
    v87 = *(_OWORD *)(v11 + 168);
    v88 = *(int32x2_t *)(v11 + 184);
    v89 = operator new[]();
    v18 = *(_DWORD *)(v11 + 200);
    v78 = *(int32x2_t *)(v11 + 204);
    v80 = *(int32x2_t *)(v11 + 212);
    v19 = (unsigned int *)(v11 + 344);
    v20 = (v78.i32[0] + v80.i32[0] - 1) / v80.i32[0];
    do
      v21 = __ldxr(v19);
    while (__stxr(v21 + 16, v19));
    v22 = *(_DWORD *)(v11 + 352);
    if (v22 - v21 >= 0x10)
      v23 = 16;
    else
      v23 = v22 - v21;
    if (v22 <= v21 || v23 == 0)
      goto LABEL_49;
    v25.i64[1] = v17;
    do
    {
      v76 = v23;
      v26 = v23 + v21;
      if (v21 < v23 + v21)
      {
        do
        {
          v88.i32[0] = (v21 - v21 / v20 * v80.i32[1] * v20) * v80.i32[0];
          v88.i32[1] = v21 / v20 * v80.i32[1];
          *(int32x2_t *)v25.i8 = vmin_s32(v80, vsub_s32(v78, v88));
          *(_QWORD *)((char *)&v87 + 4) = v25.i64[0];
          if (v18 >= 1)
          {
            v27 = 0;
            v28 = v18;
            do
            {
              if (v80.i32[0] >= v28)
                v29 = v28;
              else
                v29 = v80.i32[0];
              LODWORD(v87) = v29;
              HIDWORD(v87) = v27;
              compute_pixel_region_variance(v11, (uint64_t *)v86, v25);
              v27 += v80.i32[0];
              v28 -= v80.i32[0];
            }
            while (v27 < v18);
          }
          ++v21;
        }
        while (v21 != v26);
      }
      ParallelManager::complete_task_assignment((ParallelManager *)(v11 + 224), v76);
      do
        v30 = __ldxr(v19);
      while (__stxr(v30 + 16, v19));
      v31 = *(_DWORD *)(v11 + 352);
      v23 = v31 - v30;
      if (v31 - v30 >= 0x10)
        v23 = 16;
      if (v31 > v30)
        v21 = v30;
      else
        v21 = 0;
    }
    while (v31 > v30 && v23 != 0);
    if (v89)
LABEL_49:
      MEMORY[0x18D761C18]();
  }
  ParallelManager::wait((ParallelManager *)(v11 + 224));
  v33 = *(unsigned __int8 **)(v11 + 112);
  v68 = *(_DWORD *)v11;
  bzero(v86, 0xFA0uLL);
  v34 = *v33;
  v35 = v33[1];
  v66 = v33;
  v36 = v33[2];
  v90 = v35 * v34 * v36;
  v37 = *v70;
  v81 = v34;
  v38 = (v34 + *v70 - 1) / v34;
  v65 = v70[1];
  v77 = v35;
  v79 = v36;
  v73 = (v35 + v65 - 1) / v35;
  v39 = v73 * v38;
  v40 = v73 * v38 * ((v36 + v70[2] - 1) / v36);
  v95 = *(_OWORD *)(v11 + 20);
  v41 = *(_QWORD *)(v11 + 128);
  v63 = (ParallelManager *)(v11 + 360);
  ParallelManager::init((std::mutex *)(v11 + 360), v40);
  v72 = v41 + 231744 * v71;
  v42 = (__n128)vmvnq_s8((int8x16_t)vceqq_s32(*v69, (int32x4_t)xmmword_18820BF90));
  v42.n128_u64[0] = (unint64_t)vmovn_s32((int32x4_t)v42);
  v42.n128_u16[0] = vmaxv_u16((uint16x4_t)v42.n128_u64[0]);
  if ((v42.n128_u8[0] & 1) != 0)
  {
    v43 = load_image_block;
  }
  else
  {
    v67 = load_image_block;
    if ((v68 & 0xFFFFFFFE) == 2 || v79 != 1)
      goto LABEL_57;
    v43 = load_image_block;
    if (!v70[3])
      v43 = (void (*)(unsigned __int32, int *, int8x16_t *, unsigned __int8 *, int, int, int, _DWORD *, int32x4_t))load_image_block_fast_ldr;
  }
  v67 = v43;
LABEL_57:
  v44 = (unsigned int *)(v11 + 480);
  do
    v45 = __ldxr(v44);
  while (__stxr(v45 + 16, v44));
  v46 = *(_DWORD *)(v11 + 488);
  if (v46 - v45 >= 0x10)
    v47 = 16;
  else
    v47 = v46 - v45;
  if (v46 > v45 && v47 != 0)
  {
    do
    {
      v64 = v47;
      v74 = v47 + v45;
      if (v45 < v47 + v45)
      {
        do
        {
          v49 = v45 % v39 / v38;
          v50 = v45 % v39 % v38;
          v51 = v50 * v81;
          if (v79 != 1)
            goto LABEL_82;
          v52 = *(_DWORD *)(v11 + 36);
          if (!v52)
            goto LABEL_82;
          v53 = v51 + v81;
          if (v37 < v51 + v81)
            v53 = v37;
          v54 = v49 * v77 + v77;
          if (v65 < v54)
            v54 = v65;
          if ((int)(v49 * v77) >= v54)
            goto LABEL_81;
          v55 = 0;
          v42.n128_f32[0] = 0.9 / (float)((float)(int)((2 * v52 - 2 + v81) * (2 * v52 - 2 + v77)) * 255.0);
          v56 = v49 * v77;
          do
          {
            v57 = v50 * v81;
            if (v51 < v53)
            {
              do
              {
                if (*(float *)(*(_QWORD *)(v11 + 120) + 4 * (v57 + v56 * v37)) > v42.n128_f32[0])
                {
                  v55 = 1;
                  v56 = v54;
                  v57 = v53;
                }
                ++v57;
              }
              while (v57 < v53);
            }
            ++v56;
          }
          while (v56 < v54);
          if ((v55 & 1) == 0)
          {
LABEL_81:
            v93 = 0u;
            v94 = 0u;
            v91 = 0u;
            v92 = 0u;
            v96 = 1;
          }
          else
          {
LABEL_82:
            ((void (*)(_QWORD, int *, _OWORD *, unsigned __int8 *, __n128))v67)(v68, v70, v86, v66, v42);
            if ((*(_BYTE *)(v11 + 4) & 4) != 0)
            {
              *(float32x2_t *)&v58 = vmul_n_f32(*(float32x2_t *)(v11 + 20), *((float *)&v94 + 3) * 0.000015259);
              *((float *)&v58 + 2) = (float)(*((float *)&v94 + 3) * 0.000015259) * *(float *)(v11 + 28);
              HIDWORD(v58) = *(_DWORD *)(v11 + 32);
              v95 = v58;
            }
          }
          compress_block(v11, (uint64_t)v86, v75 + (int)(16 * (v50 + (v49 + v45 / v39 * v73) * v38)), v72);
          ++v45;
        }
        while (v45 != v74);
      }
      ParallelManager::complete_task_assignment(v63, v64);
      do
        v59 = __ldxr(v44);
      while (__stxr(v59 + 16, v44));
      v60 = *(_DWORD *)(v11 + 488);
      v47 = v60 - v59;
      if (v60 - v59 >= 0x10)
        v47 = 16;
      if (v60 > v59)
        v45 = v59;
      else
        v45 = 0;
    }
    while (v60 > v59 && v47 != 0);
  }
  ParallelManager::wait(v63);
  v82[0] = &off_1E1BBC0B0;
  v82[1] = v11;
  v83 = v82;
  ParallelManager::term((uint64_t)v63, (uint64_t)v82);
  result = (uint64_t)v83;
  if (v83 == v82)
  {
    v62 = 4;
    result = (uint64_t)v82;
    goto LABEL_101;
  }
  if (v83)
  {
    v62 = 5;
LABEL_101:
    (*(void (**)(void))(*(_QWORD *)result + 8 * v62))();
    return 0;
  }
  return result;
}

void sub_188141B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32)
{
  char *v32;
  char *v34;
  uint64_t v35;

  v34 = a32;
  if (a32 == v32)
  {
    v35 = 4;
    v34 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_6;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ParallelManager::init(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  std::mutex::lock((std::mutex *)a1);
  if (!*(_BYTE *)(a1 + 64))
  {
    v4 = *(_QWORD *)(a2 + 24);
    if (!v4)
      std::__throw_bad_function_call[abi:ne180100]();
    *(_DWORD *)(a1 + 128) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
    *(_BYTE *)(a1 + 64) = 1;
  }
  std::mutex::unlock((std::mutex *)a1);
}

void sub_188141C24(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ParallelManager::wait(ParallelManager *this)
{
  std::unique_lock<std::mutex> v2;

  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)this;
  *(_QWORD *)&v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)this);
  if (*((_DWORD *)this + 31) == *((_DWORD *)this + 32))
    goto LABEL_4;
  do
    std::condition_variable::wait((std::condition_variable *)((char *)this + 72), &v2);
  while (*((_DWORD *)this + 31) != *((_DWORD *)this + 32));
  if (v2.__owns_)
LABEL_4:
    std::mutex::unlock(v2.__m_);
}

void ParallelManager::term(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  std::mutex::lock((std::mutex *)a1);
  if (!*(_BYTE *)(a1 + 65))
  {
    v4 = *(_QWORD *)(a2 + 24);
    if (!v4)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
    *(_BYTE *)(a1 + 65) = 1;
  }
  std::mutex::unlock((std::mutex *)a1);
}

void sub_188141CF8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ParallelManager::init(std::mutex *this, int a2)
{
  std::mutex::lock(this);
  if (!LOBYTE(this[1].__m_.__sig))
  {
    LODWORD(this[2].__m_.__sig) = a2;
    LOBYTE(this[1].__m_.__sig) = 1;
  }
  std::mutex::unlock(this);
}

void ParallelManager::complete_task_assignment(ParallelManager *this, int a2)
{
  int v4;
  int v5;
  std::unique_lock<std::mutex> v6;

  v6.__m_ = (std::unique_lock<std::mutex>::mutex_type *)this;
  *(_QWORD *)&v6.__owns_ = 1;
  std::mutex::lock((std::mutex *)this);
  v4 = *((_DWORD *)this + 32);
  v5 = *((_DWORD *)this + 31) + a2;
  *((_DWORD *)this + 31) = v5;
  if (v5 != v4
    || (std::unique_lock<std::mutex>::unlock(&v6),
        std::condition_variable::notify_all((std::condition_variable *)((char *)this + 72)),
        v6.__owns_))
  {
    std::mutex::unlock(v6.__m_);
  }
}

void sub_188141DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

char *astcenc_get_error_string(unsigned int a1)
{
  if (a1 > 0xA)
    return 0;
  else
    return off_1E1BCCD40[a1];
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x18D761C30);
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (!this->__owns_)
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    JUMPOUT(0x188141E8CLL);
  }
  std::mutex::unlock(this->__m_);
  this->__owns_ = 0;
}

void std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::~__func()
{
  JUMPOUT(0x18D761C30);
}

__n128 std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_1E1BBC058;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E1BBC058;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;

  v2 = operator new[]();
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(int **)(a1 + 16);
  *(_QWORD *)(v4 + 120) = v2;
  return init_compute_averages(v3, *(_DWORD *)(v4 + 36), *(_OWORD **)(a1 + 24), v4 + 136);
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::target_type()
{
}

void std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x18D761C30);
}

_QWORD *std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BBC0B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BBC0B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v2 + 120);
  if (result)
  {
    result = MEMORY[0x18D761C18](result, 0x1000C8052888210);
    v2 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(v2 + 120) = 0;
  return result;
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::target_type()
{
}

void astcenc_config_init()
{
  __assert_rtn("astcenc_config_init", "astcenc_entry.cpp", 529, "wt_range > 0");
}

float *get_2d_percentile_table(int a1, int a2)
{
  float *v4;
  float *v5;
  int v6;
  _QWORD *v7;
  float v8;
  uint64_t v9;
  char v10;
  char v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;

  v4 = (float *)operator new[]();
  v5 = v4;
  v6 = a1 | (a2 << 8);
  if (v6 > 1543)
  {
    if (v6 <= 2057)
    {
      switch(v6)
      {
        case 1544:
          v7 = &block_pcd_8x6;
          goto LABEL_31;
        case 1546:
          v7 = &block_pcd_10x6;
          goto LABEL_31;
        case 2056:
          v7 = &block_pcd_8x8;
          goto LABEL_31;
      }
    }
    else if (v6 > 2571)
    {
      if (v6 == 2572)
      {
        v7 = &block_pcd_12x10;
        goto LABEL_31;
      }
      if (v6 == 3084)
      {
        v7 = &block_pcd_12x12;
        goto LABEL_31;
      }
    }
    else
    {
      if (v6 == 2058)
      {
        v7 = &block_pcd_10x8;
        goto LABEL_31;
      }
      if (v6 == 2570)
      {
        v7 = &block_pcd_10x10;
        goto LABEL_31;
      }
    }
LABEL_25:
    v7 = 0;
    goto LABEL_31;
  }
  if (v6 <= 1284)
  {
    if (v6 == 1028)
    {
      v7 = &block_pcd_4x4;
      goto LABEL_31;
    }
    if (v6 == 1029)
    {
      v7 = &block_pcd_5x4;
      goto LABEL_31;
    }
    goto LABEL_25;
  }
  switch(v6)
  {
    case 1285:
      v7 = &block_pcd_5x5;
      break;
    case 1286:
      v7 = &block_pcd_6x5;
      break;
    case 1287:
    case 1289:
      goto LABEL_25;
    case 1288:
      v7 = &block_pcd_8x5;
      break;
    case 1290:
      v7 = &block_pcd_10x5;
      break;
    default:
      if (v6 != 1542)
        goto LABEL_25;
      v7 = &block_pcd_6x6;
      break;
  }
LABEL_31:
  memset_pattern16(v4, &xmmword_18822ADA0, 0x2000uLL);
  v9 = 0;
  v10 = 1;
  do
  {
    v11 = v10;
    v12 = (unsigned __int16 *)v7 + v9;
    v13 = v12[1];
    if (v12[1])
    {
      v14 = (unsigned __int16 *)v7[v9 + 2];
      v15 = v12[5];
      LOWORD(v8) = v12[3];
      v8 = (float)LODWORD(v8);
      do
      {
        v16 = *v14++;
        v15 += v16 >> 11;
        v5[v16 & 0x7FF] = (float)v15 / v8;
        --v13;
      }
      while (v13);
    }
    v10 = 0;
    v9 = 1;
  }
  while ((v11 & 1) != 0);
  return v5;
}

uint64_t is_legal_2d_block_size(int a1, int a2)
{
  int v2;
  uint64_t result;
  BOOL v4;
  unsigned int v5;

  v2 = a2 | (a1 << 8);
  result = 1;
  if (v2 > 2564)
  {
    v4 = (v2 - 2565) > 5 || ((1 << (v2 - 5)) & 0x2B) == 0;
    if (v4 && v2 != 3082 && v2 != 3084)
      return 0;
  }
  else if (v2 > 2052)
  {
    v5 = v2 - 2053;
    if (v5 > 3 || v5 == 2)
      return 0;
  }
  else if ((v2 - 1284) >= 2 && (v2 - 1541) >= 2 && v2 != 1028)
  {
    return 0;
  }
  return result;
}

uint64_t is_legal_3d_block_size(int a1, int a2, int a3)
{
  int v3;
  uint64_t result;
  BOOL v5;
  int v6;

  v3 = (a2 << 8) | (a1 << 16) | a3;
  result = 1;
  if (v3 > 328963)
  {
    v5 = (v3 - 328964) >= 2 && (v3 - 394757) >= 2;
    v6 = 394501;
LABEL_8:
    if (v5 && v3 != v6)
      return 0;
    return result;
  }
  if (v3 > 263170)
  {
    v5 = (v3 - 263171) >= 2;
    v6 = 328708;
    goto LABEL_8;
  }
  if (v3 != 197379 && v3 != 262915)
    return 0;
  return result;
}

uint64_t compute_ideal_endpoint_formats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  double v20;
  double v21;
  double v22;
  int8x16_t v23;
  uint64_t v24;
  float32x4_t *v25;
  int8x8_t v26;
  float32x4_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  unsigned __int16 *v33;
  float32x4_t v34;
  int32x4_t v35;
  uint32x4_t *v36;
  int8x16_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  int8x16_t v40;
  int32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int32x2_t v45;
  float32x4_t v46;
  unint64_t v47;
  unint64_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int32x4_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  uint16x4_t v70;
  int8x16_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float32x4_t v78;
  __int32 *v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int8x16_t v91;
  float32x4_t v92;
  float32x4_t v93;
  int8x16_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t *v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x4_t v109;
  BOOL v110;
  float32x4_t v111;
  float32x4_t *v112;
  float v113;
  BOOL v114;
  char v115;
  int v116;
  unsigned __int16 *v117;
  uint64_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  unsigned __int32 v122;
  int32x4_t v123;
  float v124;
  char v125;
  int8x16_t v126;
  float *v127;
  char *v128;
  float *v129;
  char *v130;
  float v131;
  _OWORD *v132;
  uint64_t v133;
  float32x4_t *v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float v144;
  float v145;
  float v146;
  int8x16_t v147;
  uint64_t v148;
  float *v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  _BYTE *v157;
  float *v158;
  float *v159;
  float *v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  char v166;
  float v167;
  float v168;
  char v169;
  float32x4_t v170;
  float v171;
  float v172;
  _BOOL4 v173;
  _BOOL4 v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  float *v178;
  int v179;
  int v180;
  _BOOL4 v181;
  _BOOL4 v182;
  _BOOL4 v183;
  _BOOL4 v184;
  BOOL v185;
  _BOOL4 v186;
  BOOL v187;
  BOOL v188;
  _BOOL4 v189;
  _BOOL4 v190;
  _BOOL4 v191;
  BOOL v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  int v196;
  _BOOL4 v197;
  uint64_t v198;
  uint64_t v199;
  _BOOL4 v200;
  _BOOL4 v201;
  uint64_t v202;
  _BOOL4 v203;
  _BOOL4 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  float v209;
  float v210;
  float v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int8x16_t v215;
  unint64_t v216;
  char *v217;
  float v218;
  BOOL v219;
  float *v220;
  float v221;
  float v222;
  float v223;
  float *v224;
  float v225;
  float v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int32x4_t v233;
  unsigned int v234;
  uint64_t v235;
  _BYTE *v236;
  uint64_t v237;
  unsigned int v238;
  float v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  char *v248;
  float v249;
  unsigned __int8 v250;
  int v251;
  float *v252;
  uint64_t v253;
  int v254;
  float v255;
  uint64_t v256;
  char *v257;
  float *v258;
  char *v259;
  int *v260;
  uint64_t v261;
  uint64_t v262;
  int *v263;
  _BYTE *v264;
  uint64_t v265;
  int v266;
  _BYTE *v267;
  unsigned int v268;
  float v269;
  uint64_t v270;
  float v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  _WORD *v275;
  char *v276;
  float v277;
  unsigned __int8 v278;
  int v279;
  int *v280;
  char *v281;
  int v282;
  float v283;
  uint64_t i;
  char *v285;
  float *v286;
  int *v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  int *v292;
  uint64_t v293;
  _BYTE *v294;
  int *v295;
  int v296;
  int v297;
  uint64_t v298;
  _BYTE *v299;
  int v300;
  int v301;
  float v302;
  uint64_t v303;
  float v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  float v310;
  unsigned __int8 v311;
  int v312;
  int *v313;
  char *v314;
  int v315;
  char *v316;
  float v317;
  uint64_t j;
  char *v319;
  float *v320;
  int *v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  _BYTE *v327;
  int *v328;
  int v329;
  int v330;
  uint64_t v331;
  _BYTE *v332;
  int *v333;
  int v334;
  int v335;
  uint64_t v336;
  _BYTE *v337;
  int v338;
  int v339;
  float v340;
  uint64_t v341;
  float v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  char *v346;
  float v347;
  unsigned __int8 v348;
  int v349;
  int *v350;
  char *v351;
  int v352;
  float v353;
  int8x16_t v354;
  uint64_t v355;
  int32x4_t v356;
  int32x4_t v357;
  int8x16_t v358;
  int8x16_t v359;
  unsigned int v360;
  int8x16_t v361;
  int8x16_t v362;
  int8x16_t v363;
  unsigned int v364;
  unsigned int v365;
  uint64_t v366;
  uint64_t v367;
  int v368;
  char *v369;
  uint64_t v370;
  _BYTE *v371;
  char v372;
  float32x4_t v374;
  float32x4_t v375;
  uint64_t v376;
  uint64_t v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  int8x16_t v381;
  int8x16_t v382;
  __int8 v383;
  float32x4_t v384;
  float v385;
  float32x4_t v386;
  float32x4_t v387;
  unsigned __int16 *v388;
  int8x8_t v389;
  char *v390;
  uint64_t v391;
  unsigned int v392;
  uint64_t v393;
  float32x4_t v394;
  float *v395;
  uint64_t v396;
  float32x4_t v397;
  float32x4_t v398;
  int8x8_t v399;
  float *v400;
  int *v401;
  float32x4_t v402;
  _OWORD v403[68];
  int v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  int v409;
  int v410;
  int v411;
  _OWORD v412[21];
  _OWORD v413[8];
  int v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  _OWORD v418[5];
  uint64_t v419;

  MEMORY[0x1E0C80A78](a1, a2);
  v391 = v24;
  v419 = *MEMORY[0x1E0C80C00];
  v393 = *v13;
  if (!*v13)
    compute_ideal_endpoint_formats();
  v25 = (float32x4_t *)v14;
  v380 = v18;
  v376 = v15;
  v377 = v16;
  v379 = v19;
  v378 = v17;
  v26 = *(int8x8_t *)(v14 + 3553);
  v26.i32[0] = v26.u8[0];
  v26.i8[4] = *(_BYTE *)(v14 + 3769);
  v389 = v26;
  memset(v418, 0, sizeof(v418));
  memset(v413, 0, sizeof(v413));
  v388 = v13;
  compute_avgs_and_dirs_3_comp_rgb(v13, v14, (uint64_t)v413, 0.0, v20, v21, v22, v23);
  v28 = v388;
  v29 = 0;
  v30 = v25 + 162;
  v31 = v25 + 54;
  v32 = v25 + 108;
  v33 = v388 + 112;
  v34 = (float32x4_t)vdupq_n_s32(0x3F13CD3Au);
  v35.i64[0] = 0x400000004;
  v35.i64[1] = 0x400000004;
  v36 = (uint32x4_t *)&unk_1EDF03000;
  v37.i64[0] = 0x100000001;
  v37.i64[1] = 0x100000001;
  do
  {
    v38 = (float32x4_t *)&v413[2 * v29];
    v39 = v38[1];
    v40 = (int8x16_t)vmulq_f32(v39, v39);
    *(float32x2_t *)v40.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL), *(float32x2_t *)v40.i8);
    v41 = (int32x2_t)vpadd_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8);
    v42 = (float32x4_t)xmmword_1882323C0;
    if (*(float *)v41.i32 != 0.0)
      v42 = vdivq_f32(v39, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v41, 0)));
    v43 = *v38;
    v44 = (int8x16_t)vmulq_f32(v43, v43);
    *(float32x2_t *)v44.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), *(float32x2_t *)v44.i8);
    v45 = (int32x2_t)vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8);
    v46 = (float32x4_t)xmmword_1882323C0;
    if (*(float *)v45.i32 != 0.0)
      v46 = vdivq_f32(v43, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v45, 0)));
    v47 = *((unsigned __int8 *)v28 + v29 + 4);
    if (!*((_BYTE *)v28 + v29 + 4))
      compute_ideal_endpoint_formats();
    v48 = 0;
    v49 = vmulq_f32(v43, v34);
    v50 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))), 0);
    v51 = v25[221];
    v50.i32[3] = 0;
    v52 = (int32x4_t)vaddq_f32(v43, vmulq_f32(v50, (float32x4_t)xmmword_188239A60));
    v53 = vmulq_f32(v43, v42);
    v54 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1))), 0);
    v54.i32[3] = 0;
    v55 = (int32x4_t)vsubq_f32(v43, vmulq_f32(v42, v54));
    v43.i32[0] = 1190133760;
    if (!v25[235].i8[9])
      v43.f32[0] = 65535.0;
    v56 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 0);
    v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.i8, 0);
    v58 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.i8, 1);
    v59 = (float32x4_t)vdupq_laneq_s32(v55, 2);
    v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.i8, 0);
    v61 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.i8, 1);
    v62 = (float32x4_t)vdupq_laneq_s32(v52, 2);
    v63 = vdupq_n_s32(v47);
    v64 = 0uLL;
    v65 = (int32x4_t)xmmword_18820BF90;
    v66 = 0uLL;
    v67 = 0uLL;
    v68 = 0uLL;
    v69 = 0uLL;
    do
    {
      v397 = (float32x4_t)v68;
      v27.i32[0] = *(_DWORD *)&v33[v48 / 2];
      v70 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v27.f32).u64[0];
      v71 = (int8x16_t)vcgtq_s32(v63, v65);
      v72 = (float32x4_t)vmovl_u16(v70);
      v73.i64[0] = v72.u32[2];
      v73.i64[1] = v72.u32[3];
      v74 = v73;
      v73.i64[1] = v72.u32[1];
      v75 = v74.i64[1];
      v76 = v72.u32[0];
      v77 = v74.i64[0];
      v78.i32[0] = v30->i32[v72.u32[0]];
      v78.i32[1] = v30->i32[v72.u32[1]];
      v78.i32[2] = v30->i32[v74.i64[0]];
      v72.i32[0] = v25->i32[v72.u32[0]];
      v72.i32[1] = v25->i32[v72.u32[1]];
      v72.i32[2] = v25->i32[v74.i64[0]];
      v74.i32[0] = v31->i32[v76];
      v78.i32[3] = v30->i32[v74.i64[1]];
      v74.i32[1] = v31->i32[v73.i64[1]];
      v79 = &v31->i32[v74.i64[1]];
      v72.i32[3] = v25->i32[v74.i64[1]];
      v74.i32[2] = v31->i32[v77];
      v74.i32[3] = *v79;
      v80 = vsubq_f32(v78, v56);
      v78.i32[0] = v32->i32[v76];
      v78.i32[1] = v32->i32[v73.i64[1]];
      v78.i32[2] = v32->i32[v77];
      v78.i32[3] = v32->i32[v75];
      v81 = vaddq_f32(vaddq_f32(vmulq_n_f32(v72, v42.f32[0]), vmulq_lane_f32(v74, *(float32x2_t *)v42.f32, 1)), vmulq_laneq_f32(v78, v42, 2));
      v394 = vaddq_f32((float32x4_t)v69, (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v80, v80), v71));
      v82 = vsubq_f32(vaddq_f32(v57, vmulq_n_f32(v81, v42.f32[0])), v72);
      v83 = vsubq_f32(vaddq_f32(v58, vmulq_lane_f32(v81, *(float32x2_t *)v42.f32, 1)), v74);
      v84 = vsubq_f32(vaddq_f32(v59, vmulq_laneq_f32(v81, v42, 2)), v78);
      v85 = vaddq_f32(vaddq_f32(vmulq_n_f32(v72, v46.f32[0]), vmulq_lane_f32(v74, *(float32x2_t *)v46.f32, 1)), vmulq_laneq_f32(v78, v46, 2));
      v86 = vsubq_f32(vmulq_n_f32(v85, v46.f32[0]), v72);
      v87 = vsubq_f32(vmulq_lane_f32(v85, *(float32x2_t *)v46.f32, 1), v74);
      v88 = vsubq_f32(vmulq_laneq_f32(v85, v46, 2), v78);
      v89 = vaddq_f32(vmulq_n_f32(vmulq_f32(v82, v82), v51.f32[0]), vmulq_lane_f32(vmulq_f32(v83, v83), *(float32x2_t *)v51.f32, 1));
      v90 = vmulq_f32(vaddq_f32(vaddq_f32(vmulq_f32(v72, v34), vmulq_f32(v74, v34)), vmulq_f32(v78, v34)), v34);
      v91 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v88, v88), v51, 2), vaddq_f32(vmulq_n_f32(vmulq_f32(v86, v86), v51.f32[0]), vmulq_lane_f32(vmulq_f32(v87, v87), *(float32x2_t *)v51.f32, 1)));
      v92 = vsubq_f32(vaddq_f32(v60, v90), v72);
      v93 = vsubq_f32(vaddq_f32(v61, v90), v74);
      v94 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v84, v84), v51, 2), v89);
      v65 = vaddq_s32(v65, v35);
      v67 = (int8x16_t)vaddq_f32((float32x4_t)v67, (float32x4_t)vandq_s8(v91, v71));
      v95 = vsubq_f32(vaddq_f32(v62, v90), v78);
      v96 = (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v95, v95), v51, 2), vaddq_f32(vmulq_n_f32(vmulq_f32(v92, v92), v51.f32[0]), vmulq_lane_f32(vmulq_f32(v93, v93), *(float32x2_t *)v51.f32, 1))), v71);
      v97 = vsubq_f32(v90, v72);
      v98 = vsubq_f32(v90, v74);
      v99 = vsubq_f32(v90, v78);
      v69 = (int8x16_t)v394;
      v398 = vaddq_f32(v397, (float32x4_t)vandq_s8(v94, v71));
      v68 = (int8x16_t)v398;
      v66 = (int8x16_t)vaddq_f32((float32x4_t)v66, v96);
      v27 = (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v99, v99), v51, 2), vaddq_f32(vmulq_n_f32(vmulq_f32(v97, v97), v51.f32[0]), vmulq_lane_f32(vmulq_f32(v98, v98), *(float32x2_t *)v51.f32, 1))), v71);
      v64 = (int8x16_t)vaddq_f32((float32x4_t)v64, v27);
      v48 += 4;
    }
    while (v48 < v47);
    v100 = (float32x4_t *)(v391 + 16 * v29);
    v101 = v100[1];
    v102 = v100[5];
    if ((v100 & 1) == 0)
    {
      v386 = v34;
      v381 = v66;
      v375 = v101;
      v374 = v102;
      v102 = v374;
      v101 = v375;
      v69 = (int8x16_t)v394;
      v68 = (int8x16_t)v398;
      v66 = v381;
      v37.i64[0] = 0x100000001;
      v37.i64[1] = 0x100000001;
      v36 = (uint32x4_t *)&unk_1EDF03000;
      v35.i64[0] = 0x400000004;
      v35.i64[1] = 0x400000004;
      v34 = v386;
      v28 = v388;
      if (v116)
      {
        mask(vmask4)::shift = xmmword_18820BF90;
        v102 = v374;
        v101 = v375;
        v69 = (int8x16_t)v394;
        v68 = (int8x16_t)v398;
        v66 = v381;
        v37.i64[0] = 0x100000001;
        v37.i64[1] = 0x100000001;
        v36 = (uint32x4_t *)&unk_1EDF03000;
        v35.i64[0] = 0x400000004;
        v35.i64[1] = 0x400000004;
        v34 = v386;
        v28 = v388;
      }
    }
    v103 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL), *(float32x2_t *)v69.i8);
    v104 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL), *(float32x2_t *)v68.i8);
    v105 = vpadd_f32(v104, v104);
    v106 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL), *(float32x2_t *)v67.i8);
    v107 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL), *(float32x2_t *)v66.i8);
    v108 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), *(float32x2_t *)v64.i8);
    v109 = vsubq_f32(v102, v101);
    v110 = (~vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x45F5C199u), vmaxq_f32(v109, vsubq_f32((float32x4_t)0, v109))), v37), v36[59])) & 7) == 0;
    *(float32x2_t *)v111.f32 = vsub_f32((float32x2_t)vzip1_s32((int32x2_t)vpadd_f32(v106, v106), (int32x2_t)vpadd_f32(v107, v107)), (float32x2_t)vdup_lane_s32((int32x2_t)v105, 0));
    v112 = (float32x4_t *)((char *)v418 + 20 * v29);
    v111.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(vmuls_lane_f32(vpadd_f32(v103, v103).f32[0], v51, 3)), vsub_f32(vpadd_f32(v108, v108), v105).u32[0]);
    *v112 = vmulq_f32(v111, (float32x4_t)xmmword_188239A70);
    v112[1].i8[0] = v110;
    v113 = 30720.0;
    if (!v25[235].i8[9])
      v113 = 65535.0;
    v114 = v25[218].f32[3] != v113 || v25[222].i8[0] == 0;
    v115 = v114;
    if (v25[220].f32[3] != v113)
      v115 = 1;
    v112[1].i8[1] = v115;
    ++v29;
    v33 += 108;
  }
  while (v29 != v393);
  v399 = (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v389, (int8x8_t)0xFF000000FFLL));
  bzero(v413, 0x540uLL);
  v117 = v388;
  v118 = 0;
  v119 = 0uLL;
  memset(v412, 0, sizeof(v412));
  v120 = v25[221];
  v121 = vaddq_f32(v120, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v120.f32, 1));
  v122 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v120, 2), v121).u32[0];
  *(int8x8_t *)v121.f32 = vbsl_s8(v399, (int8x8_t)vdup_n_s32(0x477FFF00u), (int8x8_t)vdup_n_s32(0x47700000u));
  v123 = vzip1q_s32((int32x4_t)v121, (int32x4_t)v121);
  v123.i32[2] = v121.i32[0];
  v384 = (float32x4_t)v123;
  v387 = v120;
  v124 = v120.f32[3];
  if ((v399.i8[4] & 1) != 0)
    v125 = 14;
  else
    v125 = 15;
  v383 = v399.i8[0];
  v126.i64[0] = 0xB0B0B0B0B0B0B0BLL;
  v126.i8[8] = v125;
  v126.i8[9] = v125;
  v126.i8[10] = v125;
  v126.i8[11] = v125;
  v126.i8[12] = v125;
  v126.i8[13] = v125;
  v127 = (float *)&v414;
  v128 = (char *)&v412[2] + 3;
  v129 = (float *)&v413[4] + 3;
  v130 = (char *)&v412[1] + 3;
  v126.i8[14] = v125;
  v126.i8[15] = v125;
  v131 = 0.5;
  v382 = v126;
  v385 = *(float *)&v122;
  do
  {
    v390 = v130;
    v395 = v129;
    v400 = v127;
    v132 = &v413[21 * v118];
    v133 = (uint64_t)v117 + v118;
    v134 = (float32x4_t *)(v391 + 16 * v118);
    v135 = v134[1];
    v136 = v134[5];
    v137 = vmaxnmq_f32(vsubq_f32(v135, v384), v119);
    v138 = vmaxnmq_f32(vsubq_f32(v136, v384), v119);
    v139 = vminnmq_f32(v135, v119);
    v140 = vminnmq_f32(v136, v119);
    v141 = vmulq_f32(v140, v140);
    v142 = vmulq_f32(v387, vaddq_f32(vmulq_f32(v138, v138), vaddq_f32(vmulq_f32(v137, v137), vaddq_f32(vmulq_f32(v139, v139), v141))));
    v143 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v142, 2);
    v138.f32[0] = v131 * vaddq_f32(v143, vaddq_f32(v142, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v142.f32, 1))).f32[0];
    v143.i8[0] = *(_BYTE *)(v133 + 4);
    v144 = (float)v143.u32[0];
    v145 = v138.f32[0] * (float)v143.u32[0];
    v146 = vmuls_lane_f32(v131, v142, 3) * (float)v143.u32[0];
    if ((v383 & 1) != 0)
    {
      memset_pattern16(v132, &xmmword_188235D10, 0x40uLL);
      v148 = 0;
      *(int32x4_t *)((char *)v412 + 84 * v118) = vdupq_n_s32(0xC080600u);
      v149 = (float *)v418 + 5 * v118;
      v150 = 0.625;
      if (*((_BYTE *)v149 + 17))
      {
        v151 = v131;
      }
      else
      {
        v150 = 1.0;
        v151 = 1.0;
      }
      if (*((_BYTE *)v149 + 16))
        v152 = v131;
      else
        v152 = 1.0;
      v153 = 0.25;
      if (!*((_BYTE *)v149 + 16))
        v153 = 1.0;
      v154 = *((float *)v418 + 5 * v118);
      v156 = v149[2];
      v155 = v149[3];
      v157 = v390;
      v158 = v395;
      v159 = v395;
      v160 = v400;
      do
      {
        if ((unint64_t)(v148 + 4) > 0x12)
          v152 = 1.0;
        v161 = compute_color_error_for_every_integer_count_and_quant_level(BOOL,BOOL,int,partition_info const&,encoding_choice_errors const&,endpoints const&,vfloat4,float (*)[4],unsigned char (*)[4])::baseline_quant_error[v148];
        if ((unint64_t)(v148 + 4) > 0x12)
          v153 = 1.0;
        v162 = (float)(v385 * v144) * v161;
        v163 = (float)((float)(v124 * v144) + (float)(v385 * v144)) * v161;
        *v157 = 12;
        v164 = v146 + (float)(v145 + (float)((float)(v150 * v163) * v152));
        v165 = v146 + (float)(v145 + (float)(v163 + v154));
        if (v165 < (float)((float)(v145 + (float)((float)(v151 * v162) * v153)) + v155))
        {
          v166 = 10;
        }
        else
        {
          v165 = (float)(v145 + (float)((float)(v151 * v162) * v153)) + v155;
          v166 = 8;
        }
        *(v157 - 1) = v166;
        v167 = (float)(v145 + v162) + v155;
        v168 = (float)(v146 + (float)(v145 + v163)) + v156;
        *(v159 - 1) = v165;
        *v159 = v164;
        if ((float)(v167 + v154) >= v168)
        {
          v169 = 4;
        }
        else
        {
          v168 = v167 + v154;
          v169 = 6;
        }
        *(v157 - 2) = v169;
        *(v159 - 3) = v167 + v156;
        *(v159 - 2) = v168;
        *(v157 - 3) = 0;
        ++v148;
        v159 += 4;
        v157 += 4;
      }
      while (v148 != 17);
    }
    else
    {
      v170 = v134[5];
      v170.i32[3] = v170.i32[0];
      v171 = fmaxf(vminvq_f32(v170), 0.0);
      LODWORD(v172) = HIDWORD(v134[5].i64[0]);
      v173 = v136.f32[0] > v136.f32[1];
      v174 = v136.f32[0] > v136.f32[2];
      if (v136.f32[1] > v136.f32[2])
        v175 = 1;
      else
        v175 = 2;
      if (v172 <= v136.f32[2])
        v172 = v136.f32[2];
      v176 = !v173 || !v174;
      if (v173 && v174)
        v177 = 0;
      else
        v177 = v175;
      v178 = (float *)((unint64_t)&v402 | (4 * v177));
      if (!v176)
        v172 = v136.f32[0];
      v402 = v135;
      v141.f32[0] = v172 - *v178;
      v179 = (int)(float)(v172 - v171);
      v180 = (int)v141.f32[0];
      v181 = v179 < 0x2000;
      v182 = v179 < 2048;
      v183 = v179 < 1024;
      v184 = (int)v141.f32[0] < 2048 && v179 < 0x2000;
      v185 = v180 < 2048 && v179 < 2048;
      v186 = v180 < 2048 && v179 < 1024;
      v187 = v180 < 0x2000 && v179 < 0x2000;
      v188 = v180 < 0x2000 && v179 < 2048;
      v189 = v179 < 4096;
      if (v180 >= 0x2000)
        v189 = 0;
      v190 = v179 < 0x8000;
      v191 = v180 < 0x2000 && v179 < 0x8000;
      v192 = v179 < 0x4000;
      v193 = vsubq_f32(v136, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v141.f32, 0));
      v193.i32[3] = 0;
      v194 = v135;
      v194.i32[3] = 0;
      v195 = vsubq_f32(v193, v194);
      v196 = (int)vmaxvq_f32(vmaxq_f32(v195, vsubq_f32(v119, v195)));
      if (v180 >= 0x2000)
        v192 = 0;
      v197 = v180 < 0x4000;
      if (v190 && v197)
        v198 = 4;
      else
        v198 = 5;
      if (v181 && v197)
        v199 = 3;
      else
        v199 = v198;
      v200 = v180 < 1024;
      if (v182 && v197)
        v199 = 2;
      v201 = v180 < 4096;
      if (v182 && v200)
        v199 = 1;
      if (v192 && v196 < 0x2000)
        v202 = 0;
      else
        v202 = 8;
      v203 = v196 < 4096;
      if (v191 && v203)
        v202 = 1;
      if (v189 && v203)
        v202 = 2;
      if (v187 && v196 < 2048)
        v202 = 3;
      v204 = v196 < 512;
      if (v184 && v204)
        v205 = 4;
      else
        v205 = v202;
      if (v188 && v196 < 1024)
        v205 = 5;
      if (v185 && v196 < 256)
        v206 = 6;
      else
        v206 = v205;
      v114 = !v186 || !v204;
      v207 = 7;
      if (v114)
        v207 = v206;
      if (v183 && v201)
        v208 = 0;
      else
        v208 = v199;
      v209 = compute_color_error_for_every_integer_count_and_quant_level(BOOL,BOOL,int,partition_info const&,encoding_choice_errors const&,endpoints const&,vfloat4,float (*)[4],unsigned char (*)[4])::rgbo_error_scales[v208];
      v210 = compute_color_error_for_every_integer_count_and_quant_level(BOOL,BOOL,int,partition_info const&,encoding_choice_errors const&,endpoints const&,vfloat4,float (*)[4],unsigned char (*)[4])::rgb_error_scales[v207];
      v211 = (float)((float)(v136.f32[2] + vaddv_f32(*(float32x2_t *)v136.f32)) * 0.33333)
           - (float)(0.33333
                   * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2), vaddq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1))).f32[0]);
      memset_pattern16(v132, &xmmword_188235D10, 0x80uLL);
      v212 = 0;
      v213 = 0x202020202020202;
      v214 = 0x707070707070707;
      v215 = v382;
      v216 = vextq_s8(v215, v215, 8uLL).u64[0];
      v217 = (char *)v412 + 84 * v118;
      vst4_s8(v217, *(int8x8x4_t *)&v213);
      v218 = flt_188239A88[v211 < 3968.0];
      v219 = v211 < 960.0;
      v131 = 0.5;
      if (v219)
        v218 = 0.002;
      v220 = (float *)v418 + 5 * v118;
      v222 = v220[2];
      v221 = v220[3];
      v223 = v220[1];
      v160 = v400;
      v224 = v400;
      v158 = v395;
      do
      {
        v225 = compute_color_error_for_every_integer_count_and_quant_level(BOOL,BOOL,int,partition_info const&,encoding_choice_errors const&,endpoints const&,vfloat4,float (*)[4],unsigned char (*)[4])::baseline_quant_error[v212 + 4]
             * v144;
        v226 = (float)(v385 * v225) + (float)(v385 * v225);
        v227 = &v128[v212 * 4];
        *v227 = v125;
        *(v227 - 1) = 11;
        *(v224 - 1) = v221 + (float)(v145 + (float)(v226 * (float)(v210 * 0.01)));
        *v224 = v146 + (float)(v145 + (float)(v226 + (float)((float)(v124 * v225) + (float)(v124 * v225))));
        *(v224 - 3) = (float)(v221 + (float)(v145 + (float)(v226 * v218))) + v222;
        *(v224 - 2) = (float)(v221 + (float)(v145 + (float)(v226 * (float)(v209 * 0.0015)))) + v223;
        *(_WORD *)(v227 - 3) = 1794;
        ++v212;
        v224 += 4;
      }
      while (v212 != 13);
    }
    ++v118;
    v127 = v160 + 84;
    v128 += 84;
    v129 = v158 + 84;
    v130 = v390 + 84;
    v117 = v388;
    v119 = 0uLL;
  }
  while (v118 != v393);
  v228 = a13;
  v229 = a13 + 157120;
  v230 = a13 + 165312;
  v231 = a13 + 167360;
  v232 = v380 & 0xFFFFFFFC;
  v233 = vdupq_n_s32(0x7149F2CAu);
  *(int32x4_t *)(v229 + 4 * v232) = v233;
  *(_DWORD *)(v230 + v232) = 0;
  *(_DWORD *)(v231 + v232) = 0;
  v234 = v379;
  v235 = (v379 - 1) & 0xFFFFFFFC;
  v396 = a13 + 157120;
  *(int32x4_t *)(v229 + 4 * v235) = v233;
  *(_DWORD *)(v230 + v235) = 0;
  *(_DWORD *)(v231 + v235) = 0;
  switch((int)v393)
  {
    case 1:
      v236 = a9;
      if (v380 >= v379)
      {
        v406 = 0;
        v405 = 0;
        v407 = 0;
        v408 = 0;
        v404 = -1;
        v240 = v378;
        v242 = a11;
        v241 = a12;
        v243 = a10;
        v244 = a13 + 157120;
        goto LABEL_274;
      }
      v237 = v380;
      v238 = -1;
      v239 = 1.0e30;
      v240 = v378;
      v242 = a11;
      v241 = a12;
      v243 = a10;
      v244 = a13 + 157120;
      do
      {
        if (*(float *)(v377 + 4 * v237) >= 1.0e30)
        {
          *(_DWORD *)(v396 + 4 * v237) = 1900671690;
        }
        else
        {
          v245 = 0;
          v246 = 0;
          v247 = *(char *)(v376 + v237);
          v248 = &quant_mode_table[v247 + 128];
          v249 = 1.0e30;
          do
          {
            v251 = *v248;
            v248 += 128;
            v250 = v251;
            if (v251 >= 4)
            {
              v252 = (float *)&v413[v250];
              if (v252[v245] < v249)
              {
                v246 = v245;
                v249 = v252[v245];
              }
            }
            ++v245;
          }
          while (v245 != 4);
          v253 = a13 + 4 * v237;
          v254 = quant_mode_table[128 * (uint64_t)v246 + 128 + v247];
          *(_BYTE *)(v230 + v237) = quant_mode_table[128 * (uint64_t)v246 + 128 + v247];
          *(_BYTE *)(v253 + 169408) = 0;
          if (v254 > 3)
            *(_BYTE *)(v253 + 169408) = *((_BYTE *)v412 + 4 * v254 + v246);
          v255 = v249 + *(float *)(v377 + 4 * v237);
          *(float *)(v396 + 4 * v237) = v255;
          *(_BYTE *)(v231 + v237) = *(_BYTE *)(v230 + v237);
          if (v255 < v239)
          {
            v238 = v237;
            v239 = v255;
          }
        }
        ++v237;
      }
      while (v237 != v379);
      goto LABEL_272;
    case 2:
      v392 = v380 & 0xFFFFFFFC;
      bzero(&v404, 0x24CuLL);
      v256 = 0;
      memset(v403, 0, 294);
      v236 = a9;
      do
      {
        memset_pattern16((char *)&v404 + v256, &xmmword_188235D10, 0x1CuLL);
        v256 += 28;
      }
      while (v256 != 588);
      v257 = (char *)&v412[6] + 4;
      v258 = (float *)&v415;
      v259 = (char *)&v403[3] + 9;
      v260 = &v409;
      v261 = 4;
      v240 = v378;
      v242 = a11;
      v241 = a12;
      v243 = a10;
      do
      {
        v262 = 0;
        v263 = v260;
        v264 = v259;
        do
        {
          v265 = 0;
          v266 = v262;
          v267 = v264;
          do
          {
            if (v266 >= 0)
              v268 = v266;
            else
              v268 = -v266;
            if (v268 <= 1)
            {
              v269 = fminf(*((float *)&v413[v261] + v262) + v258[v265], 1.0e10);
              if (v269 <= *(float *)&v263[v265])
              {
                *(float *)&v263[v265] = v269;
                *(v267 - 1) = *((_BYTE *)v412 + 4 * v261 + v262);
                *v267 = v257[v265];
              }
            }
            ++v265;
            v267 += 2;
            --v266;
          }
          while (v265 != 4);
          ++v262;
          v264 += 2;
          ++v263;
        }
        while (v262 != 4);
        ++v261;
        v257 += 4;
        v258 += 4;
        v259 += 14;
        v260 += 7;
      }
      while (v261 != 21);
      if (v380)
        compute_ideal_endpoint_formats();
      if (!v379)
      {
        v238 = -1;
        goto LABEL_270;
      }
      v270 = 0;
      v238 = -1;
      v271 = 1.0e30;
      v244 = a13 + 157120;
      do
      {
        if (*(float *)(v377 + 4 * v270) >= 1.0e30)
        {
          *(_DWORD *)(v396 + 4 * v270) = 1900671690;
        }
        else
        {
          v272 = 0;
          v273 = 0;
          v274 = *(char *)(v376 + v270);
          v275 = (_WORD *)(a13 + 4 * v270 + 169408);
          v276 = &quant_mode_table[v274 + 256];
          v277 = 1.0e30;
          do
          {
            v279 = *v276;
            v276 += 128;
            v278 = v279;
            if (v279 < 4)
              break;
            v280 = &v404 + 7 * v278;
            if (*(float *)&v280[v272] < v277)
            {
              v277 = *(float *)&v280[v272];
              v273 = v272 + 2;
            }
            ++v272;
          }
          while (v272 != 7);
          v281 = &quant_mode_table[128 * (uint64_t)v273 + v274];
          v282 = *v281;
          LOBYTE(v281) = v281[2];
          *(_BYTE *)(v230 + v270) = v282;
          *(_BYTE *)(v231 + v270) = (_BYTE)v281;
          if (v282 <= 3)
            *v275 = 0;
          else
            *v275 = *((_WORD *)v403 + 7 * v282 + v273 - 2);
          v283 = v277 + *(float *)(v377 + 4 * v270);
          *(float *)(v396 + 4 * v270) = v283;
          if (v283 < v271)
          {
            v238 = v270;
            v271 = v283;
          }
        }
        ++v270;
      }
      while (v270 != v379);
      break;
    case 3:
      v392 = v380 & 0xFFFFFFFC;
      bzero(&v404, 0x348uLL);
      bzero(v403, 0x276uLL);
      for (i = 0; i != 840; i += 40)
        memset_pattern16((char *)&v404 + i, &xmmword_188235D10, 0x28uLL);
      v285 = (char *)&v412[11] + 8;
      v286 = (float *)&v416;
      v287 = &v410;
      v288 = (char *)&v403[7] + 10;
      v289 = 4;
      do
      {
        v290 = 0;
        v291 = v288;
        v292 = v287;
        do
        {
          v293 = 0;
          v294 = v291;
          v295 = v292;
          do
          {
            if ((int)v290 >= (int)v293)
              v296 = v293;
            else
              v296 = v290;
            if ((int)v290 <= (int)v293)
              v297 = v293;
            else
              v297 = v290;
            if (v297 - v296 <= 1)
            {
              v298 = 0;
              v299 = v294;
              do
              {
                if ((int)v298 >= v296)
                  v300 = v296;
                else
                  v300 = v298;
                if ((int)v298 <= v297)
                  v301 = v297;
                else
                  v301 = v298;
                if (v301 - v300 <= 1)
                {
                  v302 = fminf((float)(*((float *)&v413[v289] + v290) + *((float *)&v413[v289 + 21] + v293)) + v286[v298], 1.0e10);
                  if (v302 <= *(float *)&v295[v298])
                  {
                    *(float *)&v295[v298] = v302;
                    *(v299 - 2) = *((_BYTE *)v412 + 4 * v289 + v290);
                    *(v299 - 1) = *((_BYTE *)&v412[5] + 4 * v289 + v293 + 4);
                    *v299 = v285[v298];
                  }
                }
                ++v298;
                v299 += 3;
              }
              while (v298 != 4);
            }
            ++v293;
            ++v295;
            v294 += 3;
          }
          while (v293 != 4);
          ++v290;
          ++v292;
          v291 += 3;
        }
        while (v290 != 4);
        ++v289;
        v285 += 4;
        v286 += 4;
        v287 += 10;
        v288 += 30;
      }
      while (v289 != 21);
      if (v380)
        compute_ideal_endpoint_formats();
      if (!v379)
      {
        v238 = -1;
        v240 = v378;
        v242 = a11;
        v241 = a12;
        v236 = a9;
        v243 = a10;
        goto LABEL_270;
      }
      v303 = 0;
      v238 = -1;
      v304 = 1.0e30;
      v240 = v378;
      v242 = a11;
      v241 = a12;
      v236 = a9;
      v243 = a10;
      v244 = a13 + 157120;
      do
      {
        if (*(float *)(v377 + 4 * v303) >= 1.0e30)
        {
          *(_DWORD *)(v396 + 4 * v303) = 1900671690;
        }
        else
        {
          v305 = 0;
          v306 = 0;
          v307 = *(char *)(v376 + v303);
          v308 = a13 + 4 * v303 + 169408;
          v309 = &quant_mode_table[v307 + 384];
          v310 = 1.0e30;
          do
          {
            v312 = *v309;
            v309 += 128;
            v311 = v312;
            if (v312 < 4)
              break;
            v313 = &v404 + 10 * v311;
            if (*(float *)&v313[v305] < v310)
            {
              v310 = *(float *)&v313[v305];
              v306 = v305 + 3;
            }
            ++v305;
          }
          while (v305 != 7);
          v314 = &quant_mode_table[128 * (uint64_t)v306 + v307];
          v315 = *v314;
          LOBYTE(v314) = v314[5];
          *(_BYTE *)(v230 + v303) = v315;
          *(_BYTE *)(v231 + v303) = (_BYTE)v314;
          if (v315 <= 3)
          {
            *(_BYTE *)(a13 + 4 * v303 + 169410) = 0;
            *(_WORD *)(a13 + 4 * v303 + 169408) = 0;
          }
          else
          {
            v316 = (char *)v403 + 30 * v315 + 3 * v306 - 9;
            *(_WORD *)v308 = *(_WORD *)v316;
            *(_BYTE *)(v308 + 2) = v316[2];
          }
          v317 = v310 + *(float *)(v377 + 4 * v303);
          *(float *)(v396 + 4 * v303) = v317;
          if (v317 < v304)
          {
            v238 = v303;
            v304 = v317;
          }
        }
        ++v303;
      }
      while (v303 != v379);
      break;
    case 4:
      v392 = v380 & 0xFFFFFFFC;
      bzero(&v404, 0x444uLL);
      bzero(v403, 0x444uLL);
      for (j = 0; j != 1092; j += 52)
        memset_pattern16((char *)&v404 + j, &xmmword_188235D10, 0x34uLL);
      v319 = (char *)&v412[16] + 12;
      v320 = (float *)&v417;
      v321 = &v411;
      v322 = (char *)&v403[13] + 3;
      v323 = 4;
      do
      {
        v324 = 0;
        v325 = v322;
        v401 = v321;
        do
        {
          v326 = 0;
          v327 = v325;
          v328 = v321;
          do
          {
            if ((int)v324 >= (int)v326)
              v329 = v326;
            else
              v329 = v324;
            if ((int)v324 <= (int)v326)
              v330 = v326;
            else
              v330 = v324;
            if (v330 - v329 <= 1)
            {
              v331 = 0;
              v332 = v327;
              v333 = v328;
              do
              {
                if ((int)v331 >= v329)
                  v334 = v329;
                else
                  v334 = v331;
                if ((int)v331 <= v330)
                  v335 = v330;
                else
                  v335 = v331;
                if (v335 - v334 <= 1)
                {
                  v336 = 0;
                  v337 = v332;
                  do
                  {
                    if ((int)v336 >= v334)
                      v338 = v334;
                    else
                      v338 = v336;
                    if ((int)v336 <= v335)
                      v339 = v335;
                    else
                      v339 = v336;
                    if (v339 - v338 <= 1)
                    {
                      v340 = fminf((float)((float)(*((float *)&v413[v323] + v324) + *((float *)&v413[v323 + 21] + v326))+ *((float *)&v413[v323 + 42] + v331))+ v320[v336], 1.0e10);
                      if (v340 <= *(float *)&v333[v336])
                      {
                        *(float *)&v333[v336] = v340;
                        *(v337 - 3) = *((_BYTE *)v412 + 4 * v323 + v324);
                        *(v337 - 2) = *((_BYTE *)&v412[5] + 4 * v323 + v326 + 4);
                        *(v337 - 1) = *((_BYTE *)&v412[10] + 4 * v323 + v331 + 8);
                        *v337 = v319[v336];
                      }
                    }
                    ++v336;
                    v337 += 4;
                  }
                  while (v336 != 4);
                }
                ++v331;
                ++v333;
                v332 += 4;
              }
              while (v331 != 4);
            }
            ++v326;
            ++v328;
            v327 += 4;
          }
          while (v326 != 4);
          ++v324;
          ++v321;
          v325 += 4;
        }
        while (v324 != 4);
        ++v323;
        v319 += 4;
        v320 += 4;
        v321 = v401 + 13;
        v322 += 52;
      }
      while (v323 != 21);
      if (v380)
        compute_ideal_endpoint_formats();
      v234 = v379;
      if (v379)
      {
        v341 = 0;
        v238 = -1;
        v342 = 1.0e30;
        v240 = v378;
        v242 = a11;
        v241 = a12;
        v236 = a9;
        v243 = a10;
        v228 = a13;
        v230 = a13 + 165312;
        v231 = a13 + 167360;
        v244 = a13 + 157120;
        do
        {
          if (*(float *)(v377 + 4 * v341) >= 1.0e30)
          {
            *(_DWORD *)(v396 + 4 * v341) = 1900671690;
          }
          else
          {
            v343 = 0;
            v344 = 0;
            v345 = *(char *)(v376 + v341);
            v346 = &quant_mode_table[v345 + 512];
            v347 = 1.0e30;
            do
            {
              v349 = *v346;
              v346 += 128;
              v348 = v349;
              if (v349 < 4)
                break;
              v350 = &v404 + 13 * v348;
              if (*(float *)&v350[v343] < v347)
              {
                v347 = *(float *)&v350[v343];
                v344 = v343 + 4;
              }
              ++v343;
            }
            while (v343 != 6);
            v351 = &quant_mode_table[128 * (uint64_t)v344 + v345];
            v352 = *v351;
            LOBYTE(v351) = v351[8];
            *(_BYTE *)(a13 + 165312 + v341) = v352;
            *(_BYTE *)(a13 + 167360 + v341) = (_BYTE)v351;
            if (v352 <= 3)
              *(_DWORD *)(a13 + 4 * v341 + 169408) = 0;
            else
              *(_DWORD *)(a13 + 4 * v341 + 169408) = *((_DWORD *)&v403[-1] + 13 * v352 + v344);
            v353 = v347 + *(float *)(v377 + 4 * v341);
            *(float *)(v396 + 4 * v341) = v353;
            if (v353 < v342)
            {
              v238 = v341;
              v342 = v353;
            }
          }
          ++v341;
        }
        while (v341 != v379);
      }
      else
      {
        v238 = -1;
        v240 = v378;
        v242 = a11;
        v241 = a12;
        v236 = a9;
        v243 = a10;
        v228 = a13;
        v230 = a13 + 165312;
        v231 = a13 + 167360;
LABEL_270:
        v244 = a13 + 157120;
      }
      break;
    default:
      compute_ideal_endpoint_formats();
  }
  LODWORD(v232) = v392;
LABEL_272:
  v406 = 0;
  v405 = 0;
  v407 = 0;
  v408 = 0;
  v404 = v238;
  if ((v238 & 0x80000000) == 0)
    *(_DWORD *)(v244 + 4 * v238) = 1900671690;
LABEL_274:
  if (v240 >= 2)
  {
    v354 = vorrq_s8((int8x16_t)vdupq_n_s32(v232), (int8x16_t)xmmword_18820BF90);
    v355 = 1;
    v356 = vdupq_n_s32(0x7149F2CAu);
    v357.i64[0] = 0x400000004;
    v357.i64[1] = 0x400000004;
    do
    {
      v358.i64[0] = -1;
      v358.i64[1] = -1;
      v359 = (int8x16_t)v356;
      if (v232 < v234)
      {
        v360 = v232;
        v147 = v354;
        v359 = (int8x16_t)v356;
        do
        {
          v361 = *(int8x16_t *)(v244 + 4 * v360);
          v362 = (int8x16_t)vcgtq_f32((float32x4_t)v359, (float32x4_t)v361);
          v359 = vbslq_s8(v362, v361, v359);
          v358 = vbslq_s8(v362, v147, v358);
          v147 = (int8x16_t)vaddq_s32((int32x4_t)v147, v357);
          v360 += 4;
        }
        while (v360 < v234);
      }
      *(float *)v147.i32 = vminvq_f32((float32x4_t)v359);
      v147 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v147.i8, 0);
      v363 = (int8x16_t)vceqq_f32((float32x4_t)v359, (float32x4_t)v147);
      v364 = vminvq_s32((int32x4_t)vorrq_s8(vandq_s8(v358, v363), (int8x16_t)(*(_OWORD *)&vmvnq_s8(v363) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))));
      *(&v404 + v355) = v364;
      if ((v364 & 0x80000000) != 0)
        break;
      *(_DWORD *)(v244 + 4 * v364) = 1900671690;
      ++v355;
    }
    while (v355 != v240);
  }
  v365 = 0;
  if (v240)
  {
    if (v393 <= 1)
      v366 = 1;
    else
      v366 = v393;
    while (1)
    {
      v367 = *(&v404 + v365);
      if ((v367 & 0x80000000) != 0)
        break;
      *(_DWORD *)(v243 + 4 * v365) = v367;
      *(_DWORD *)(v242 + 4 * v365) = *(unsigned __int8 *)(v230 + v367);
      v368 = *(unsigned __int8 *)(v231 + v367);
      *(_DWORD *)(v241 + 4 * v365) = v368;
      if ((*(_DWORD *)(v242 + 4 * v365) - 4) >= 0x11)
        compute_ideal_endpoint_formats();
      if ((v368 - 4) > 0x10)
        compute_ideal_endpoint_formats();
      v369 = (char *)(v228 + 169408 + 4 * v367);
      v370 = v366;
      v371 = v236;
      do
      {
        v372 = *v369++;
        *v371++ = v372;
        --v370;
      }
      while (v370);
      ++v365;
      v236 += 4;
      if (v365 == v240)
      {
        v365 = v240;
        break;
      }
    }
  }
  if (v365 >= v240)
    return v240;
  else
    return v365;
}

void compute_ideal_endpoint_formats()
{
  __assert_rtn("compute_ideal_endpoint_formats", "astcenc_pick_best_endpoint_format.cpp", 1109, "partition_count > 0");
}

{
  __assert_rtn("compute_error_squared_rgb_single_partition", "astcenc_pick_best_endpoint_format.cpp", 90, "texel_count > 0");
}

{
  __assert_rtn("compute_ideal_endpoint_formats", "astcenc_pick_best_endpoint_format.cpp", 1248, "partition_count == 4");
}

{
  __assert_rtn("compute_ideal_endpoint_formats", "astcenc_pick_best_endpoint_format.cpp", 1339, "quant_level_mod[i] >= QUANT_6 && quant_level_mod[i] <= QUANT_256");
}

{
  __assert_rtn("compute_ideal_endpoint_formats", "astcenc_pick_best_endpoint_format.cpp", 1338, "quant_level[i] >= QUANT_6 && quant_level[i] <= QUANT_256");
}

{
  __assert_rtn("compute_ideal_endpoint_formats", "astcenc_pick_best_endpoint_format.cpp", 1188, "start_block_mode == 0");
}

{
  __assert_rtn("compute_ideal_endpoint_formats", "astcenc_pick_best_endpoint_format.cpp", 1221, "start_block_mode == 0");
}

{
  __assert_rtn("compute_ideal_endpoint_formats", "astcenc_pick_best_endpoint_format.cpp", 1255, "start_block_mode == 0");
}

void prepare_angular_tables(void)
{
  uint64_t v0;
  int *v1;
  int *v2;
  uint64_t v3;
  float *v4;
  float *v5;
  __float2 v6;

  v0 = 0;
  v1 = &sin_table;
  v2 = &cos_table;
  do
  {
    v3 = 0;
    ++v0;
    v4 = (float *)v2;
    v5 = (float *)v1;
    do
    {
      v6 = __sincosf_stret((float)((float)v0 * 0.099733) * (float)v3);
      *v5 = v6.__sinval;
      v5 += 32;
      *v4 = v6.__cosval;
      v4 += 32;
      ++v3;
    }
    while (v3 != 64);
    ++v1;
    ++v2;
  }
  while (v0 != 32);
}

void compute_angular_endpoints_1plane(int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v9;
  int v10;
  _WORD *v11;
  float *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  float v25;

  v5 = 8;
  if (a1)
    v5 = 4;
  v6 = *(_DWORD *)(a2 + v5);
  if (!v6)
    compute_angular_endpoints_1plane();
  v9 = 0;
  v10 = ~(-1 << (a4 + 1));
  v11 = (_WORD *)(a2 + 66);
  v12 = (float *)(a5 + 204224);
  v13 = (unsigned __int8 *)(a2 + 594);
  v14 = (unint64_t)v6 << 6;
  do
  {
    if ((*v11 & (unsigned __int16)v10) != 0)
    {
      v15 = *((unsigned __int8 *)v11 - 2);
      if (v15 >= 7)
        v15 = 7;
      if (v15 >= a4)
        v16 = a4;
      else
        v16 = v15;
      compute_angular_endpoints_for_quant_levels(*v13, (const float *)(a3 + 4 * (v9 & 0xFFFFFFC0)), v16, v12, v12 + 696);
    }
    v9 += 64;
    v11 += 3;
    v12 += 8;
    v13 += 129888;
  }
  while (v14 != v9);
  v17 = 20;
  if (a1)
    v17 = 16;
  v18 = *(unsigned int *)(a2 + v17);
  if (!(_DWORD)v18)
    compute_angular_endpoints_1plane();
  v19 = (float *)(a5 + 187840);
  v20 = (_BYTE *)(a2 + 11304949);
  v21 = (_BYTE *)(a2 + 11304949);
  do
  {
    v22 = *v21;
    v21 += 6;
    if ((v22 & 1) != 0)
      compute_angular_endpoints_1plane();
    v23 = *(v20 - 2);
    if (v23 > 7)
    {
      *v19 = 0.0;
      v25 = 1.0;
    }
    else
    {
      v24 = a5 + 32 * *(v20 - 3) + 4 * v23;
      *v19 = *(float *)(v24 + 204224);
      v25 = *(float *)(v24 + 207008);
    }
    v19[2048] = v25;
    ++v19;
    v20 = v21;
    --v18;
  }
  while (v18);
}

void compute_angular_endpoints_for_quant_levels(unsigned int a1, const float *a2, int a3, float *a4, float *a5)
{
  unint64_t v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  unint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v25;
  int8x16_t v26;
  uint32x4_t *v27;
  float32x4_t v28;
  uint64_t v29;
  int8x16_t v30;
  float32x4_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int v41;
  unint64_t v42;
  float32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int8x16_t v47;
  int8x16_t v48;
  const float *v49;
  uint64_t v50;
  int8x16_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  int8x16_t v71;
  unint64_t v72;
  int v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  char *v80;
  uint64_t v81;
  unsigned int v82;
  float *v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int8x16_t v93;
  float32x4_t v94;
  uint64_t v95;
  uint64_t v96;
  const float *v97;
  unint64_t v98;
  _OWORD __b[36];
  _OWORD v100[8];
  _OWORD v101[8];
  _OWORD v102[8];
  _OWORD v103[8];
  _OWORD v104[8];
  _OWORD v105[8];
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v5 = steps_for_quant_level[a3];
  memset(v105, 0, sizeof(v105));
  if (!a1)
    compute_angular_endpoints_for_quant_levels();
  v9 = 0;
  v10 = 0;
  v11 = a1;
  v12 = (float32x4_t)vdupq_n_s32(0x427C0000u);
  memset(__b, 0, 256);
  v13.i64[0] = 0x3F0000003FLL;
  v13.i64[1] = 0x3F0000003FLL;
  v14 = (float32x4_t)vdupq_n_s32(0x4B400000u);
  do
  {
    __b[v9 / 4] = vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(*(float32x4_t *)&a2[v9], v12), v14), v13);
    v10 += 4;
    v9 += 4;
  }
  while (v10 < a1);
  v15 = 0;
  v16 = 4 * a1;
  v17 = (int8x16_t)vdupq_n_s32(0x3FC90FDBu);
  v18 = 0uLL;
  v19 = (float32x4_t)vdupq_n_s32(0x3E8F5C29u);
  __asm { FMOV            V22.4S, #1.0 }
  v25 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
  v26.i64[0] = 0x8000000080000000;
  v26.i64[1] = 0x8000000080000000;
  v27 = (uint32x4_t *)&unk_1EDF03000;
  v28 = (float32x4_t)vdupq_n_s32(0x3E22F983u);
  do
  {
    v29 = 0;
    v30 = 0uLL;
    v31 = 0uLL;
    do
    {
      v32 = (uint64_t)*(int *)((char *)__b + v29) << 7;
      v31 = vaddq_f32(v31, *(float32x4_t *)((char *)&cos_table[v15] + v32));
      v30 = (int8x16_t)vaddq_f32((float32x4_t)v30, *(float32x4_t *)((char *)&sin_table[v15] + v32));
      v29 += 4;
    }
    while (v16 != v29);
    if ((v33 & 1) == 0)
    {
      v97 = a2;
      v98 = v15;
      v95 = v11;
      v96 = v16;
      v93 = v17;
      v94 = _Q22;
      v91 = v25;
      v92 = v19;
      v89 = v30;
      v90 = v28;
      v88 = v31;
      v31 = v88;
      v30 = v89;
      v28 = v90;
      v25 = v91;
      v26.i64[0] = 0x8000000080000000;
      v26.i64[1] = 0x8000000080000000;
      v19 = v92;
      v17 = v93;
      v18 = 0uLL;
      _Q22 = v94;
      v27 = (uint32x4_t *)&unk_1EDF03000;
      v11 = v95;
      v16 = v96;
      a2 = v97;
      v15 = v98;
      if (v41)
      {
        select_msb(vfloat4,vfloat4,vmask4)::msb = (__int128)v26;
        v31 = v88;
        v30 = v89;
        v28 = v90;
        v25 = v91;
        v26.i64[0] = 0x8000000080000000;
        v26.i64[1] = 0x8000000080000000;
        v19 = v92;
        v17 = v93;
        v18 = 0uLL;
        _Q22 = v94;
        v27 = (uint32x4_t *)&unk_1EDF03000;
        v11 = v95;
        v16 = v96;
        a2 = v97;
        v15 = v98;
      }
    }
    v34 = vdivq_f32((float32x4_t)v30, v31);
    v35 = (int8x16_t)vmaxq_f32(v34, vsubq_f32(v18, v34));
    v36 = (int8x16_t)vcgtq_f32(vmaxq_f32((float32x4_t)v35, vsubq_f32(v18, (float32x4_t)v35)), _Q22);
    v37 = (float32x4_t)vorrq_s8(vandq_s8(v35, v26), v17);
    v38 = (float32x4_t)vbslq_s8(v36, (int8x16_t)vdivq_f32(_Q22, (float32x4_t)v35), v35);
    v39 = (int8x16_t)vdivq_f32(v38, vaddq_f32(vmulq_f32(vmulq_f32(v38, v38), v19), _Q22));
    v40 = vbslq_s8(v36, (int8x16_t)vsubq_f32(v37, (float32x4_t)v39), v39);
    *(float32x4_t *)((char *)v105 + 4 * v15) = vmulq_f32((float32x4_t)veorq_s8(vbslq_s8((int8x16_t)vcgtq_u32(v27[61], (uint32x4_t)v31), v40, (int8x16_t)vsubq_f32(v25, (float32x4_t)v40)), vandq_s8(v30, v26)), v28);
    v15 += 4;
  }
  while (v15 < v5);
  v42 = 0;
  memset(v104, 0, sizeof(v104));
  memset(v103, 0, sizeof(v103));
  memset(v102, 0, sizeof(v102));
  memset(v101, 0, sizeof(v101));
  v43 = (float32x4_t)xmmword_188239B30;
  v44.i64[0] = 0x200000002;
  v44.i64[1] = 0x200000002;
  v45 = vdupq_n_s32((int)v5 + 3);
  memset(v100, 0, sizeof(v100));
  __asm { FMOV            V3.4S, #4.0 }
  do
  {
    v47.i64[0] = 0xC3000000C3000000;
    v47.i64[1] = 0xC3000000C3000000;
    v48.i64[0] = 0x4300000043000000;
    v48.i64[1] = 0x4300000043000000;
    v49 = a2;
    v50 = v11;
    v51 = 0uLL;
    v52 = 0uLL;
    v53 = 0uLL;
    do
    {
      v54 = *v49++;
      v55 = vsubq_f32(vmulq_n_f32(v43, v54), (float32x4_t)v105[v42 / 4]);
      v56 = (int8x16_t)vrndnq_f32(v55);
      v57 = vsubq_f32(v55, (float32x4_t)v56);
      v53 = vaddq_f32(v53, vmulq_f32(v57, v57));
      v58 = (int8x16_t)vcgtq_f32((float32x4_t)v48, (float32x4_t)v56);
      v48 = vbslq_s8(v58, v56, v48);
      v59 = vbicq_s8(v51, v58);
      v60 = vaddq_f32(v57, v57);
      v51 = vbslq_s8((int8x16_t)vceqq_f32((float32x4_t)v56, (float32x4_t)v48), (int8x16_t)vsubq_f32(vaddq_f32((float32x4_t)v59, _Q22), v60), v59);
      v61 = (int8x16_t)vcgtq_f32((float32x4_t)v56, (float32x4_t)v47);
      v47 = vbslq_s8(v61, v56, v47);
      v62 = vbicq_s8(v52, v61);
      v52 = vbslq_s8((int8x16_t)vceqq_f32((float32x4_t)v56, (float32x4_t)v47), (int8x16_t)vaddq_f32(v60, vaddq_f32((float32x4_t)v62, _Q22)), v62);
      --v50;
    }
    while (v50);
    v104[v42 / 4] = v48;
    v103[v42 / 4] = vmaxq_s32(vminq_s32(vcvtq_s32_f32(vaddq_f32(vsubq_f32((float32x4_t)v47, (float32x4_t)v48), _Q22)), v45), v44);
    v63 = vdivq_f32(_Q22, v43);
    v64 = vmulq_f32(v63, v63);
    v102[v42 / 4] = vmulq_f32(v64, v53);
    v101[v42 / 4] = vmulq_f32(v64, (float32x4_t)v51);
    v100[v42 / 4] = vmulq_f32(v64, (float32x4_t)v52);
    v43 = vaddq_f32(v43, _Q3);
    v42 += 4;
  }
  while (v42 < v5);
  bzero(__b, 0x240uLL);
  memset_pattern16(__b, &unk_188239B50, 16 * v5 + 64);
  v67 = 0;
  if (v5 <= 1)
    v68 = 1;
  else
    v68 = v5;
  do
  {
    v69 = *((int *)v103 + v67);
    v65.i32[0] = *((_DWORD *)v102 + v67);
    v66.f32[0] = v65.f32[0] + *((float *)v101 + v67);
    v70 = *((float *)v100 + v67);
    v71 = (int8x16_t)__b[v69];
    LODWORD(v72) = v65.i32[0];
    *((float *)&v72 + 1) = (float)v67;
    v73 = v69 - 1;
    v74 = (int8x16_t)__b[(int)v69 - 1];
    *(int16x4_t *)v75.i8 = vdup_lane_s16(vmovn_s32(vcgtq_f32((float32x4_t)v71, v65)), 0);
    v65.f32[0] = v65.f32[0] + v70;
    v76.i64[1] = 1065353216;
    v76.i32[0] = v66.i32[0];
    *(float *)&v76.i32[1] = (float)v67;
    v77 = vdup_lane_s16(vmovn_s32(vcgtq_f32((float32x4_t)v74, v66)), 0);
    v66.f32[0] = v66.f32[0] + v70;
    v78 = vbslq_s8((int8x16_t)vmovl_s16(v77), v76, v74);
    __b[v69] = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v75.i8), (int8x16_t)v72, v71);
    LODWORD(v72) = v65.i32[0];
    *((float *)&v72 + 1) = (float)v67;
    LODWORD(v69) = v69 - 2;
    v79 = (int8x16_t)__b[(int)v69];
    v75.i64[1] = 1065353216;
    v75.i32[0] = v66.i32[0];
    *(float *)&v75.i32[1] = (float)v67;
    v66 = (float32x4_t)vcgtq_f32((float32x4_t)v79, v66);
    *(int16x4_t *)v66.f32 = vdup_lane_s16(vmovn_s32((int32x4_t)v66), 0);
    __b[v73] = vbslq_s8((int8x16_t)vmovl_s16(vdup_lane_s16(vmovn_s32(vcgtq_f32((float32x4_t)v78, v65)), 0)), (int8x16_t)v72, v78);
    v65 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v66.f32), v75, v79);
    __b[(int)v69] = v65;
    ++v67;
  }
  while (v68 != v67);
  v80 = steps_for_quant_level;
  if ((a3 + 1) > 1)
    v81 = (a3 + 1);
  else
    v81 = 1;
  do
  {
    v82 = *v80++;
    v83 = (float *)&__b[v82];
    v84 = v83[2];
    LODWORD(v83) = (int)v83[1] & ~((int)v83[1] >> 31);
    v85 = *((float *)v104 + v83) + v84;
    v86 = 1.0 / (float)((float)(int)v83 + 1.0);
    v87 = *((float *)v105 + v83);
    *a4++ = (float)(v87 + v85) * v86;
    *a5++ = (float)(v87 + (float)((float)(v85 + (float)v82) + -1.0)) * v86;
    --v81;
  }
  while (v81);
}

unint64_t compute_angular_endpoints_2planes(unint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unint64_t v4;
  int v6;
  unint64_t v7;
  unsigned __int8 *v8;
  float *v9;
  float *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _DWORD *v21;
  float v22;
  unsigned int *v24;
  int v26;

  v4 = *(unsigned int *)(result + 8);
  if (!(_DWORD)v4)
    compute_angular_endpoints_2planes();
  v6 = 0;
  v7 = 0;
  v26 = ~(-1 << (a3 + 1));
  v8 = (unsigned __int8 *)(result + 65);
  v9 = (float *)(a4 + 204224);
  v24 = (unsigned int *)result;
  v10 = (float *)(a4 + 228960);
  v11 = (unsigned __int8 *)(result + 594);
  do
  {
    if ((*(_WORD *)(v8 + 3) & (unsigned __int16)v26) != 0)
    {
      v12 = *v11;
      v13 = *v8;
      if (v13 >= 7)
        v13 = 7;
      if (v13 >= a3)
        v14 = a3;
      else
        v14 = v13;
      compute_angular_endpoints_for_quant_levels(*v11, (const float *)(a2 + 4 * (v6 & 0xFFFFFFC0)), v14, v9, v9 + 696);
      compute_angular_endpoints_for_quant_levels(v12, (const float *)(a2 + 4 * (v6 & 0xFFFFFFC0) + 128), v14, v10 - 696, v10);
      result = (unint64_t)v24;
      v4 = v24[2];
    }
    ++v7;
    v6 += 64;
    v8 += 6;
    v9 += 8;
    v10 += 8;
    v11 += 129888;
  }
  while (v7 < v4);
  v16 = *(unsigned int *)(result + 20);
  v15 = *(unsigned int *)(result + 24);
  if (v16 < v15)
  {
    v17 = a4 + 4 * v16;
    v18 = (float *)(v17 + 217984);
    v19 = v15 - v16;
    v20 = (unsigned __int8 *)(result + 6 * v16 + 11304947);
    v21 = (_DWORD *)(v17 + 187840);
    do
    {
      result = *v20;
      if (result > 7)
      {
        *v21 = 0;
        v21[2048] = 1065353216;
        v22 = 1.0;
        *(v18 - 2048) = 0.0;
      }
      else
      {
        result = a4 + 32 * *(v20 - 1) + 4 * result;
        *v21 = *(_DWORD *)(result + 204224);
        v21[2048] = *(_DWORD *)(result + 207008);
        *(v18 - 2048) = *(float *)(result + 226176);
        v22 = *(float *)(result + 228960);
      }
      *v18++ = v22;
      v20 += 6;
      ++v21;
      --v19;
    }
    while (v19);
  }
  return result;
}

void compute_angular_endpoints_1plane()
{
  __assert_rtn("compute_angular_endpoints_1plane", "astcenc_weight_align.cpp", 352, "max_decimation_modes > 0");
}

{
  __assert_rtn("compute_angular_endpoints_1plane", "astcenc_weight_align.cpp", 382, "max_block_modes > 0");
}

{
  __assert_rtn("compute_angular_endpoints_1plane", "astcenc_weight_align.cpp", 386, "!bm.is_dual_plane");
}

void compute_angular_endpoints_for_quant_levels()
{
  __assert_rtn("compute_angular_offsets", "astcenc_weight_align.cpp", 99, "weight_count > 0");
}

void compute_angular_endpoints_2planes()
{
  __assert_rtn("compute_angular_endpoints_2planes", "astcenc_weight_align.cpp", 421, "bsd.decimation_mode_count_selected > 0");
}

void init_partition_tables(block_size_descriptor *a1, int a2, unsigned int a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v6 = (char *)a1 + 11317232;
  v7 = (char *)a1 + 12431344;
  v8 = (char *)a1 + 13545456;
  generate_one_partition_info_entry((unsigned __int8 *)a1, 1, 0, 0, (uint64_t)a1 + 14659568);
  *((_DWORD *)a1 + 8) = 1;
  *((_DWORD *)a1 + 12) = 1;
  v9 = operator new[]();
  build_partition_table_for_one_partition_count((unsigned __int8 *)a1, a2, a3, 2u, (uint64_t)v6, v9);
  build_partition_table_for_one_partition_count((unsigned __int8 *)a1, a2, a3, 3u, (uint64_t)v7, v9);
  build_partition_table_for_one_partition_count((unsigned __int8 *)a1, a2, a3, 4u, (uint64_t)v8, v9);
  JUMPOUT(0x18D761C18);
}

BOOL generate_one_partition_info_entry(unsigned __int8 *a1, int a2, int a3, int a4, uint64_t a5)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  unsigned int v37;
  char v38;
  char v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  char v47;
  char v48;
  int v49;
  char v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  char v56;
  unsigned __int8 v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  int16x8_t v78;
  uint64_t v79;
  uint64_t i;
  uint64_t v81;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  char v95;
  int32x4_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v8 = a1[3];
  v96 = 0uLL;
  v9 = a1[2];
  if (a1[2])
  {
    v10 = 0;
    v95 = 0;
    v11 = 65537
        * ((-287438703 * (a3 + (a2 << 10) - 1024)) ^ ((-287438703 * (a3 + (a2 << 10) - 1024)) >> 5));
    v12 = v11 ^ (v11 >> 7) ^ ((v11 ^ (v11 >> 7)) >> 3);
    v13 = v12 ^ (v12 << 6);
    v14 = v13 ^ (v13 >> 17);
    v15 = a5 + 8;
    v16 = v8 < 0x20;
    v17 = (v14 & 0xF) * (v14 & 0xF);
    HIDWORD(v18) = v14;
    LODWORD(v18) = v14;
    v19 = (v14 >> 4) * (v14 >> 4);
    v20 = ((v14 >> 8) & 0xF) * ((v14 >> 8) & 0xF);
    v21 = ((unsigned __int16)v14 >> 12) * ((unsigned __int16)v14 >> 12);
    v22 = (HIWORD(v13) & 0xF) * (HIWORD(v13) & 0xF);
    v23 = ((v13 >> 20) & 0xF) * ((v13 >> 20) & 0xF);
    v24 = (HIBYTE(v13) & 0xF) * (HIBYTE(v13) & 0xF);
    v25 = (v13 >> 28) * (v13 >> 28);
    v26 = ((v13 >> 18) & 0xF) * ((v13 >> 18) & 0xF);
    v27 = ((v13 >> 22) & 0xF) * ((v13 >> 22) & 0xF);
    v28 = ((v13 >> 26) & 0xF) * ((v13 >> 26) & 0xF);
    v29 = ((v18 >> 30) & 0xF) * ((v18 >> 30) & 0xF);
    if ((a3 & 2) != 0)
      v30 = 4;
    else
      v30 = 5;
    v31 = v14 >> 14;
    v32 = v14 >> 10;
    if (a2 == 3)
      v33 = 6;
    else
      v33 = 5;
    v34 = v14 >> 6;
    v35 = v14 >> 2;
    if ((a3 & 1) != 0)
      v36 = v30;
    else
      v36 = v33;
    v37 = v17 >> v36;
    if ((a3 & 1) != 0)
      v38 = v33;
    else
      v38 = v30;
    if ((a3 & 0x10) != 0)
      v39 = v36;
    else
      v39 = v38;
    v40 = v20 >> v36;
    v92 = v21 >> v38;
    v93 = v19 >> v38;
    v41 = v22 >> v36;
    v42 = v24 >> v36;
    v90 = v25 >> v38;
    v91 = v23 >> v38;
    v87 = v27 >> v39;
    v88 = v26 >> v39;
    v85 = v29 >> v39;
    v86 = v28 >> v39;
    v43 = a1[1];
    v44 = v43;
    do
    {
      if (v44)
      {
        v45 = 0;
        v89 = v10;
        v46 = *a1;
        v47 = v86 * (v10 << v16);
        v48 = v85 * (v10 << v16);
        v49 = v88 * (v10 << v16);
        v50 = v87 * (v10 << v16);
        do
        {
          if (v46)
          {
            v51 = 0;
            v94 = v45;
            v52 = v45 << v16;
            v53 = v93 * (v45 << v16);
            v54 = v92 * (v45 << v16);
            v55 = v91 * (v45 << v16);
            v56 = v90 * v52;
            do
            {
              v57 = 0;
              v58 = ((_BYTE)v31 + (_BYTE)v37 * ((_DWORD)v51 << v16) + (_BYTE)v53 + v47) & 0x3F;
              v59 = ((_BYTE)v32 + (_BYTE)v40 * ((_DWORD)v51 << v16) + (_BYTE)v54 + v48) & 0x3F;
              v60 = (v34 + v41 * ((_DWORD)v51 << v16) + v55 + v49) & 0x3F;
              v61 = ((_BYTE)v35 + (_BYTE)v42 * ((_DWORD)v51 << v16) + v56 + v50) & 0x3F;
              if (a2 < 4)
                v61 = 0;
              if (a2 < 3)
                v60 = 0;
              if (a2 < 2)
                v59 = 0;
              if (v58 < v59 || v58 < v60 || v58 < v61)
              {
                if (v59 >= v60 && v59 >= v61)
                {
                  v57 = 1;
                }
                else if (v60 >= v61)
                {
                  v57 = 2;
                }
                else
                {
                  v57 = 3;
                }
              }
              v65 = v96.i32[v57];
              v96.i32[v57] = v65 + 1;
              *(_BYTE *)(a5 + 216 * v57 + v65 + 224) = v95 + v51;
              *(_BYTE *)(v15 + v51) = v57;
              v46 = *a1;
              ++v51;
            }
            while (v51 < v46);
            v43 = a1[1];
            v15 += v51;
            v95 += v51;
            v45 = v94;
          }
          ++v45;
        }
        while (v45 < v43);
        v9 = a1[2];
        v44 = v43;
        v10 = v89;
      }
      ++v10;
    }
    while (v10 < v9);
  }
  if (a2)
  {
    v66 = 0;
    v67 = a5 + 224;
    do
    {
      v68 = v96.i32[v66];
      v69 = (v68 + 3) & 0xFFFFFFFC;
      if ((int)v68 < v69)
      {
        v70 = (_BYTE *)(a5 + 216 * v66 + v68 + 223);
        v71 = v69;
        v72 = (_BYTE *)(v67 + v68);
        v73 = v71 - v68;
        do
        {
          *v72++ = *v70;
          --v73;
        }
        while (v73);
      }
      ++v66;
      v67 += 216;
    }
    while (v66 != a2);
  }
  if (v96.i32[0])
  {
    if (v96.i32[1])
    {
      if (v96.i32[2])
      {
        if (v96.i32[3])
          v74 = 4;
        else
          v74 = 3;
      }
      else
      {
        v74 = 2;
      }
    }
    else
    {
      v74 = 1;
    }
  }
  else
  {
    v74 = 0;
  }
  *(_WORD *)a5 = v74;
  *(_WORD *)(a5 + 2) = a3;
  v75 = (uint64_t)&a1[24 * a4 + 14683248];
  v76 = (uint64_t)&a1[16 * a4 + 14666864];
  if (a2 != 2)
    v76 = 0;
  if (a2 != 3)
    v75 = v76;
  if (a2 == 4)
    v77 = &a1[32 * a4 + 14707824];
  else
    v77 = (unsigned __int8 *)v75;
  v78.i64[1] = v96.i64[1];
  *(int16x4_t *)v78.i8 = vmovn_s32(v96);
  *(_DWORD *)(a5 + 4) = vmovn_s16(v78).u32[0];
  if (v77)
  {
    if (a2)
      bzero(v77, 8 * a2);
    if (a1[3] >= 0x40u)
      v79 = 64;
    else
      v79 = a1[3];
    if ((_DWORD)v79)
    {
      for (i = 0; i != v79; ++i)
      {
        v81 = *(unsigned __int8 *)(a5 + a1[i + 14666800] + 8);
        *(_QWORD *)&v77[8 * v81] |= 1 << i;
      }
    }
  }
  return v74 == a2;
}

void build_partition_table_for_one_partition_count(unsigned __int8 *a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t i;
  uint64_t v15;
  _BOOL4 one_partition_info_entry;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  _BYTE v30[1024];
  _QWORD v31[4];

  v31[2] = *MEMORY[0x1E0C80C00];
  v10 = &a1[4 * a4 - 4];
  *((_DWORD *)v10 + 12) = 0;
  v29 = v10 + 48;
  *((_DWORD *)v10 + 8) = 0;
  v27 = v10 + 32;
  if (a2)
  {
    if (a4 > a3)
      return;
    v11 = 1;
  }
  else
  {
    v11 = 2;
  }
  v26 = v11;
  bzero(v30, 0x400uLL);
  v12 = 0;
  v13 = 0;
  v28 = a4 - 2;
  do
  {
    for (i = 0; i != 1024; ++i)
    {
      if (v13 == 1)
      {
        if (v30[i])
          continue;
        v15 = v12;
        one_partition_info_entry = generate_one_partition_info_entry(a1, a4, i, v12, a5 + 1088 * v12);
LABEL_12:
        v17 = a1[3];
        v18 = a6 + 56 * v12;
        *(_QWORD *)(v18 + 48) = 0;
        *(_OWORD *)(v18 + 16) = 0u;
        *(_OWORD *)(v18 + 32) = 0u;
        *(_OWORD *)v18 = 0u;
        v31[0] = -1;
        v31[1] = -1;
        if (v17)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          do
          {
            v22 = *(unsigned __int8 *)(a5 + 1088 * v15 + 8 + v20);
            v23 = *((_DWORD *)v31 + v22);
            if (v23 < 0)
            {
              *((_DWORD *)v31 + v22) = v21;
              v23 = v21++;
            }
            *(_QWORD *)(v18 + 8 * (v20++ >> 5)) |= (uint64_t)v23 << (v19 & 0x3E);
            v19 += 2;
          }
          while (v17 != v20);
        }
        if (v12)
        {
          v24 = 0;
          while (1)
          {
            v25 = (_QWORD *)(a6 + 8 * v24);
            if (*(_QWORD *)v18 == *v25
              && *(_QWORD *)(v18 + 8) == v25[1]
              && *(_QWORD *)(v18 + 16) == v25[2]
              && *(_QWORD *)(v18 + 24) == v25[3]
              && *(_QWORD *)(v18 + 32) == v25[4]
              && *(_QWORD *)(v18 + 40) == v25[5]
              && *(_QWORD *)(v18 + 48) == v25[6])
            {
              break;
            }
            v24 += 7;
            if (!--v15)
              goto LABEL_27;
          }
        }
        else
        {
LABEL_27:
          if (one_partition_info_entry)
          {
            if (v13)
              continue;
            *(_WORD *)&a1[2048 * v28 + 14660656 + 2 * i] = v12;
            ++*v27;
            ++*v29;
            v30[i] = 1;
LABEL_32:
            ++v12;
            continue;
          }
        }
        if (v13 != 1)
          continue;
        *(_WORD *)&a1[2048 * v28 + 14660656 + 2 * i] = v12;
        ++*v29;
        goto LABEL_32;
      }
      v15 = v12;
      one_partition_info_entry = generate_one_partition_info_entry(a1, a4, i, v12, a5 + 1088 * v12);
      if (v13 || one_partition_info_entry)
        goto LABEL_12;
    }
    ++v13;
  }
  while (v13 != v26);
}

uint64_t unpack_weights(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  int32x4_t v6;
  int32x4_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  uint32x4_t v15;
  const float *v16;
  uint8x8_t v17;
  uint64_t v18;
  int32x4_t v19;
  uint64_t v20;
  int32x4_t v21;
  const float *v22;
  uint8x8_t v23;
  int8x16_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  uint32x4_t v29;
  const float *v30;
  uint8x8_t v31;
  uint64_t v32;
  int32x4_t v33;
  uint64_t v34;
  const float *v35;
  uint8x8_t v36;

  v8 = *(_OWORD *)(a2 + 52);
  v9 = *(_OWORD *)(a2 + 68);
  v10 = *(_OWORD *)(a2 + 84);
  v11 = *(_OWORD *)(a2 + 100);
  if ((a4 & 1) != 0)
  {
    if (*(_BYTE *)(result + 3))
    {
      v12 = 0;
      v13 = a3 + 6;
      v14.i64[0] = 0xFFFFFF00FFFFFF00;
      v14.i64[1] = 0xFFFFFF00FFFFFF00;
      v15.i64[0] = 0x300000003;
      v15.i64[1] = 0x300000003;
      do
      {
        v16 = (const float *)(v13 + v12);
        v17 = (uint8x8_t)vld1_dup_f32(v16);
        v17.i32[0] = vmaxvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v17)));
        v18 = v17.u32[0];
        if (v17.i32[0] < 1)
          unpack_weights();
        v19.i64[0] = 0x800000008;
        v19.i64[1] = 0x800000008;
        v20 = a3;
        v21.i64[0] = 0x800000008;
        v21.i64[1] = 0x800000008;
        do
        {
          v22 = (const float *)(v20 + 222);
          v23 = (uint8x8_t)vld1_dup_f32(v22);
          v7.i32[0] = *(_DWORD *)(v20 + 1086);
          v7 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v7.i8));
          v24 = vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v23)), v14);
          v21 = vmlaq_s32(v21, v7, (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)&v8, v24));
          v19 = vmlaq_s32(v19, v7, (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)&v10, v24));
          v20 += 216;
          --v18;
        }
        while (v18);
        v25 = 4 * v12;
        *(uint32x4_t *)(a5 + v25) = vshlq_u32((uint32x4_t)v21, v15);
        *(uint32x4_t *)(a6 + v25) = vshlq_u32((uint32x4_t)v19, v15);
        v12 += 4;
        a3 += 4;
      }
      while (v12 < *(unsigned __int8 *)(result + 3));
    }
  }
  else if (*(_BYTE *)(result + 3))
  {
    v26 = 0;
    v27 = a3 + 6;
    v28.i64[0] = 0xFFFFFF00FFFFFF00;
    v28.i64[1] = 0xFFFFFF00FFFFFF00;
    v29.i64[0] = 0x300000003;
    v29.i64[1] = 0x300000003;
    do
    {
      v30 = (const float *)(v27 + v26);
      v31 = (uint8x8_t)vld1_dup_f32(v30);
      v31.i32[0] = vmaxvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v31)));
      v32 = v31.u32[0];
      if (v31.i32[0] < 1)
        unpack_weights();
      v33.i64[0] = 0x800000008;
      v33.i64[1] = 0x800000008;
      v34 = a3;
      do
      {
        v35 = (const float *)(v34 + 222);
        v36 = (uint8x8_t)vld1_dup_f32(v35);
        v6.i32[0] = *(_DWORD *)(v34 + 1086);
        v6 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v6.i8));
        v33 = vmlaq_s32(v33, v6, (int32x4_t)vqtbl4q_s8(*(int8x16x4_t *)&v8, vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v36)), v28)));
        v34 += 216;
        --v32;
      }
      while (v32);
      *(uint32x4_t *)(a5 + 4 * v26) = vshlq_u32((uint32x4_t)v33, v29);
      v26 += 4;
      a3 += 4;
    }
    while (v26 < *(unsigned __int8 *)(result + 3));
  }
  return result;
}

void compute_symbolic_block_difference_2plane(uint64_t a1, block_size_descriptor *this, uint64_t a3, float32x4_t *a4)
{
  char *v8;
  unsigned int v9;
  __n128 v10;
  double v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint64_t v16;
  float v17;
  float32x4_t v18;
  const float *v19;
  const float *v20;
  int8x16_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  __int16 v45;
  int32x4_t v46;
  int32x4_t v47;
  _BYTE v48[864];
  _BYTE v49[864];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a3)
  {
    if (*(_BYTE *)(a3 + 1) != 1)
      compute_symbolic_block_difference_2plane();
    if ((*(_BYTE *)(block_size_descriptor::get_block_mode(this, *(unsigned __int16 *)(a3 + 4)) + 5) & 1) == 0)
      compute_symbolic_block_difference_2plane();
    v8 = (char *)this
       + 129888 * *(unsigned __int8 *)(block_size_descriptor::get_block_mode(this, *(unsigned __int16 *)(a3 + 4)) + 2)
       + 592;
    bzero(v49, 0x360uLL);
    bzero(v48, 0x360uLL);
    unpack_weights((uint64_t)this, a3, (uint64_t)v8, 1, (uint64_t)v49, (uint64_t)v48);
    v9 = *(char *)(a3 + 3);
    v47 = 0uLL;
    v46 = 0uLL;
    v45 = 0;
    unpack_color_endpoints(*(_DWORD *)a1, *(unsigned __int8 *)(a3 + 8), (unsigned __int8 *)(a3 + 20), (unsigned __int8 *)&v45 + 1, &v45, (uint64_t)&v47, (__n128 *)&v46, v10, v11, v12, v13);
    v16 = *((unsigned __int8 *)this + 3);
    if (*((_BYTE *)this + 3))
    {
      v17 = *(float *)(a1 + 40);
      v18 = a4[221];
      v19 = (const float *)v49;
      v20 = (const float *)v48;
      v21 = (int8x16_t)vceqq_s32(vdupq_n_s32(v9), (int32x4_t)xmmword_18820BF90);
      v22.i64[0] = 0x700000007;
      v22.i64[1] = 0x700000007;
      v23 = vshlq_s32(v47, v22);
      v24 = vshlq_s32(v46, v22);
      v25.i64[0] = 0x4000000040;
      v25.i64[1] = 0x4000000040;
      v26.i64[0] = 0x2000000020;
      v26.i64[1] = 0x2000000020;
      v27.i64[0] = 0x500000005;
      v27.i64[1] = 0x500000005;
      v28 = vdupq_n_s32(0x101u);
      v29 = (float32x4_t)vdupq_n_s32(0x58635FA9u);
      v30 = (float32x4_t)vdupq_n_s32(0x7149F2CAu);
      v31 = 0uLL;
      do
      {
        v32 = (int8x16_t)vld1q_dup_f32(v19++);
        v33 = (int8x16_t)vld1q_dup_f32(v20++);
        v34 = v46;
        v35 = v47;
        if (!*(_DWORD *)a1)
        {
          v34 = v24;
          v35 = v23;
        }
        v15.i32[0] = 0;
        v36 = (int32x4_t)vbslq_s8(v21, v33, v32);
        v14.i32[0] = *(_DWORD *)a1;
        v37 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v14, v15), 0);
        v15 = vsubq_s32(v25, v36);
        v39 = (int8x16_t)vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v35, v15), v34, v36), v26), v27);
        v38 = vcvtq_f32_s32((int32x4_t)vbslq_s8(v37, (int8x16_t)vmulq_s32((int32x4_t)v39, v28), v39));
        v39.i32[0] = a4->i32[0];
        v40 = a4[162].f32[0];
        if ((*(_DWORD *)(a1 + 4) & 0x40) != 0)
        {
          if (v38.f32[3] == 0.0)
            return;
          *(float32x2_t *)v41.f32 = vmul_n_f32(vmul_laneq_f32(*(float32x2_t *)v38.f32, v38, 3), v17);
          v41.f32[2] = vmuls_lane_f32(v38.f32[3], v38, 2) * v17;
          v41.i32[3] = 1.0;
          v39.i32[1] = a4[54].i32[0];
          *(float32x2_t *)v39.i8 = vmul_n_f32(vmul_n_f32(*(float32x2_t *)v39.i8, v40), v17);
          *(float *)&v39.i32[2] = (float)(a4[108].f32[0] * v40) * v17;
          v39.i32[3] = 1.0;
          v38 = v41;
        }
        else
        {
          v39.i32[1] = a4[54].i32[0];
          v39.i32[2] = a4[108].i32[0];
          v39.i32[3] = a4[162].i32[0];
        }
        v42 = vsubq_f32((float32x4_t)v39, v38);
        v43 = vminnmq_f32(vmaxq_f32(v42, vsubq_f32((float32x4_t)0, v42)), v29);
        v44 = (int8x16_t)vmulq_f32(vmulq_f32(v43, v43), v18);
        *(float32x2_t *)v44.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), *(float32x2_t *)v44.i8);
        v31 = vaddq_f32(v31, vminnmq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8), 0), v30));
        a4 = (float32x4_t *)((char *)a4 + 4);
        --v16;
      }
      while (v16);
    }
  }
}

double compute_symbolic_block_difference_1plane(unsigned int *a1, block_size_descriptor *this, uint64_t a3, float32x4_t *a4)
{
  __n128 v8;
  uint64_t v9;
  char *partition_info;
  char *v11;
  double v12;
  int32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  char *v16;
  int8x16_t v17;
  int32x4_t v18;
  uint64_t v19;
  char *v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int v27;
  const float *v28;
  int32x4_t v29;
  float32x4_t v30;
  float *v31;
  int8x16_t v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  __n128 v42;
  __int16 v43;
  int32x4_t v44;
  int32x4_t v45;
  _DWORD v46[216];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(block_size_descriptor::get_block_mode(this, *(unsigned __int16 *)(a3 + 4)) + 5) & 1) != 0)
    compute_symbolic_block_difference_1plane();
  if (*(_BYTE *)a3)
  {
    v9 = *(unsigned __int8 *)(a3 + 1);
    partition_info = block_size_descriptor::get_partition_info(this, *(unsigned __int8 *)(a3 + 1), *(unsigned __int16 *)(a3 + 6));
    v11 = (char *)this
        + 129888 * *(unsigned __int8 *)(block_size_descriptor::get_block_mode(this, *(unsigned __int16 *)(a3 + 4)) + 2)
        + 592;
    bzero(v46, 0x360uLL);
    unpack_weights((uint64_t)this, a3, (uint64_t)v11, 0, (uint64_t)v46, 0);
    if (!(_DWORD)v9)
    {
      v8.n128_u64[0] = 0;
      return v8.n128_f64[0];
    }
    v15 = 0;
    v16 = partition_info + 224;
    v8 = 0uLL;
    v40 = (float32x4_t)vdupq_n_s32(0x58635FA9u);
    v41 = vdupq_n_s32(0x101u);
    v39 = (float32x4_t)vdupq_n_s32(0x7149F2CAu);
    do
    {
      v42 = v8;
      v45 = 0uLL;
      v44 = 0uLL;
      v43 = 0;
      unpack_color_endpoints(*a1, *(unsigned __int8 *)(a3 + v15 + 8), (unsigned __int8 *)(a3 + 20 + 8 * v15), (unsigned __int8 *)&v43 + 1, &v43, (uint64_t)&v45, (__n128 *)&v44, v8, v12, v13, (int32x4_t)v14);
      v19 = partition_info[v15 + 4];
      if (partition_info[v15 + 4])
      {
        v12 = *(double *)v44.i64;
        v13.i32[0] = a1[10];
        v20 = v16;
        v14 = a4[221];
        v8 = v42;
        v21.i64[0] = 0x700000007;
        v21.i64[1] = 0x700000007;
        v22.i64[0] = 0x4000000040;
        v22.i64[1] = 0x4000000040;
        v23.i64[0] = 0x2000000020;
        v23.i64[1] = 0x2000000020;
        v24.i64[0] = 0x500000005;
        v24.i64[1] = 0x500000005;
        while (1)
        {
          v25 = v44;
          v26 = v45;
          if (!*a1)
          {
            v26 = vshlq_s32(v45, v21);
            v25 = vshlq_s32(v44, v21);
          }
          v17.i32[0] = 0;
          v27 = *v20++;
          v28 = (const float *)&v46[v27];
          v29 = (int32x4_t)vld1q_dup_f32(v28);
          v18.i32[0] = *a1;
          v17 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v18, (int32x4_t)v17), 0);
          v18 = vsubq_s32(v22, v29);
          v32 = (int8x16_t)vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v26, v18), v25, v29), v23), v24);
          v30 = vcvtq_f32_s32((int32x4_t)vbslq_s8(v17, (int8x16_t)vmulq_s32((int32x4_t)v32, v41), v32));
          v31 = &a4->f32[v27];
          v32.i32[0] = *(__int32 *)v31;
          v33 = v31[648];
          if ((a1[1] & 0x40) != 0)
          {
            if (v30.f32[3] == 0.0)
            {
              v8.n128_u32[0] = -246811958;
              return v8.n128_f64[0];
            }
            *(float32x2_t *)v34.f32 = vmul_n_f32(vmul_laneq_f32(*(float32x2_t *)v30.f32, v30, 3), *(float *)v13.i32);
            v34.f32[2] = vmuls_lane_f32(v30.f32[3], v30, 2) * *(float *)v13.i32;
            v34.i32[3] = 1.0;
            v32.i32[1] = (__int32)v31[216];
            *(float32x2_t *)v32.i8 = vmul_n_f32(vmul_n_f32(*(float32x2_t *)v32.i8, v33), *(float *)v13.i32);
            *(float *)&v32.i32[2] = (float)(v31[432] * v33) * *(float *)v13.i32;
            v32.i32[3] = 1.0;
            v30 = v34;
          }
          else
          {
            v32.i32[1] = (__int32)v31[216];
            v32.i32[2] = (__int32)v31[432];
            v32.i32[3] = (__int32)v31[648];
          }
          v35 = vsubq_f32((float32x4_t)v32, v30);
          v36 = vminnmq_f32(vmaxq_f32(v35, vsubq_f32((float32x4_t)0, v35)), v40);
          v37 = (int8x16_t)vmulq_f32(vmulq_f32(v36, v36), v14);
          *(float32x2_t *)v37.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), *(float32x2_t *)v37.i8);
          v8 = (__n128)vaddq_f32((float32x4_t)v8, vminnmq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8), 0), v39));
          if (!--v19)
            goto LABEL_16;
        }
      }
      v8 = v42;
LABEL_16:
      ++v15;
      v16 += 216;
    }
    while (v15 != v9);
  }
  else
  {
    v8.n128_u32[0] = 1900671690;
  }
  return v8.n128_f64[0];
}

void compute_symbolic_block_difference_1plane_1partition(unsigned int *a1, block_size_descriptor *this, uint64_t a3, float32x4_t *a4)
{
  char *v8;
  __n128 v9;
  double v10;
  int32x4_t v11;
  int32x4_t v12;
  unsigned int v13;
  int32x4_t v14;
  unint64_t v15;
  unint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  int32x4_t *v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  __int16 v51;
  int32x4_t v52;
  int32x4_t v53;
  _BYTE v54[872];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a3)
  {
    if (*(_WORD *)block_size_descriptor::get_partition_info(this, *(unsigned __int8 *)(a3 + 1), *(unsigned __int16 *)(a3 + 6)) != 1)compute_symbolic_block_difference_1plane_1partition();
    v8 = (char *)this
       + 129888 * *(unsigned __int8 *)(block_size_descriptor::get_block_mode(this, *(unsigned __int16 *)(a3 + 4)) + 2)
       + 592;
    bzero(v54, 0x360uLL);
    unpack_weights((uint64_t)this, a3, (uint64_t)v8, 0, (uint64_t)v54, 0);
    v53 = 0uLL;
    v52 = 0uLL;
    v51 = 0;
    unpack_color_endpoints(*a1, *(unsigned __int8 *)(a3 + 8), (unsigned __int8 *)(a3 + 20), (unsigned __int8 *)&v51 + 1, &v51, (uint64_t)&v53, (__n128 *)&v52, v9, v10, v11, v12);
    if (*a1)
    {
      v13 = 1;
    }
    else
    {
      v14.i64[0] = 0x700000007;
      v14.i64[1] = 0x700000007;
      v52 = vshlq_s32(v52, v14);
      v53 = vshlq_s32(v53, v14);
      v13 = 257;
    }
    v15 = *((unsigned __int8 *)this + 3);
    if (*((_BYTE *)this + 3))
    {
      v16 = 0;
      v17 = vdupq_n_s32(v13);
      v18 = vdupq_lane_s32(*(int32x2_t *)v52.i8, 0);
      v19 = vdupq_lane_s32(*(int32x2_t *)v52.i8, 1);
      v20 = vdupq_laneq_s32(v52, 2);
      v21 = vdupq_laneq_s32(v52, 3);
      v22 = vdupq_lane_s32(*(int32x2_t *)v53.i8, 0);
      v23 = (int32x4_t)xmmword_18820BF90;
      v24 = (float32x4_t)vdupq_n_s32(0x58635FA9u);
      v25 = (int32x4_t *)v54;
      v26 = vdupq_lane_s32(*(int32x2_t *)v53.i8, 1);
      v27.i64[0] = 0x4000000040;
      v27.i64[1] = 0x4000000040;
      v28.i64[0] = 0x2000000020;
      v28.i64[1] = 0x2000000020;
      v29 = vdupq_laneq_s32(v53, 2);
      v30 = vdupq_laneq_s32(v53, 3);
      v31.i64[0] = 0x500000005;
      v31.i64[1] = 0x500000005;
      v32.i64[0] = 0x400000004;
      v32.i64[1] = 0x400000004;
      v33 = a4[221];
      v34 = 0uLL;
      v35 = vdupq_n_s32(v15);
      do
      {
        v36 = *v25++;
        v37 = vsubq_s32(v27, v36);
        v38 = vmulq_s32(v29, v37);
        v39 = vmulq_s32(vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v30, v37), v21, v36), v28), v31), v17);
        v40 = vcvtq_f32_s32(vmulq_s32(vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v26, v37), v19, v36), v28), v31), v17));
        v41 = vsubq_f32(*a4, vcvtq_f32_s32(vmulq_s32(vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v22, v37), v18, v36), v28), v31), v17)));
        v42 = vminnmq_f32(vmaxq_f32(v41, vsubq_f32((float32x4_t)0, v41)), v24);
        v43 = vsubq_f32(a4[54], v40);
        v44 = vsubq_f32(a4[108], vcvtq_f32_s32(vmulq_s32(vshlq_s32(vaddq_s32(vmlaq_s32(v38, v20, v36), v28), v31), v17)));
        v45 = vminnmq_f32(vmaxq_f32(v43, vsubq_f32((float32x4_t)0, v43)), v24);
        v46 = vminnmq_f32(vmaxq_f32(v44, vsubq_f32((float32x4_t)0, v44)), v24);
        v47 = vsubq_f32(a4[162], vcvtq_f32_s32(v39));
        v48 = vminnmq_f32(vmaxq_f32(v47, vsubq_f32((float32x4_t)0, v47)), v24);
        v49 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v48, v48), v33, 3), vaddq_f32(vmulq_laneq_f32(vmulq_f32(v46, v46), v33, 2), vaddq_f32(vmulq_n_f32(vmulq_f32(v42, v42), v33.f32[0]), vmulq_lane_f32(vmulq_f32(v45, v45), *(float32x2_t *)v33.f32, 1))));
        v50 = (int8x16_t)vcgtq_s32(v35, v23);
        v23 = vaddq_s32(v23, v32);
        v34 = vaddq_f32(v34, (float32x4_t)vandq_s8(v49, v50));
        v16 += 4;
        ++a4;
      }
      while (v16 < v15);
    }
  }
}

void unpack_weights()
{
  __assert_rtn("unpack_weights", "astcenc_decompress_symbolic.cpp", 156, "max_weight_count > 0");
}

{
  __assert_rtn("unpack_weights", "astcenc_decompress_symbolic.cpp", 121, "max_weight_count > 0");
}

void compute_symbolic_block_difference_2plane()
{
  __assert_rtn("compute_symbolic_block_difference_2plane", "astcenc_decompress_symbolic.cpp", 341, "bsd.get_block_mode(scb.block_mode).is_dual_plane == 1");
}

{
  __assert_rtn("compute_symbolic_block_difference_2plane", "astcenc_decompress_symbolic.cpp", 340, "scb.partition_count == 1");
}

void compute_symbolic_block_difference_1plane()
{
  __assert_rtn("compute_symbolic_block_difference_1plane", "astcenc_decompress_symbolic.cpp", 425, "bsd.get_block_mode(scb.block_mode).is_dual_plane == 0");
}

void compute_symbolic_block_difference_1plane_1partition()
{
  __assert_rtn("compute_symbolic_block_difference_1plane_1partition", "astcenc_decompress_symbolic.cpp", 528, "bsd.get_partition_info(scb.partition_count, scb.partition_index).partition_count == 1");
}

void load_image_block(unsigned __int32 a1, int *a2, int8x16_t *a3, unsigned __int8 *a4, int a5, int a6, int a7, _DWORD *a8, int32x4_t a9)
{
  int8x16_t *v11;
  int v12;
  __n64 (*v16)(unsigned int *, __n128);
  float v17;
  int8x8_t v18;
  int32x4_t v19;
  uint64_t v20;
  uint32x4_t v21;
  int v22;
  int v23;
  double (*v24)(char *, int);
  double (*v25)(char *, int);
  unsigned __int8 v26;
  double (*v27)(double, __n128);
  unsigned int v28;
  int v29;
  unsigned int v30;
  char v31;
  unsigned int v32;
  int v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint32x4_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  __int32 *v45;
  int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  double (*v49)(char *, int);
  double v50;
  float32x4_t v51;
  int32x4_t v52;
  char *v53;
  int8x16_t v54;
  float32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int32x4_t v60;
  uint32x4_t v61;
  int32x4_t v62;
  uint16x4_t v63;
  uint32x4_t v64;
  int32x4_t v65;
  int8x16_t v66;
  uint32x4_t v67;
  int32x4_t v68;
  unsigned __int8 v69;
  unsigned __int8 *v70;
  uint64_t v71;
  double (*v72)(char *, int);
  int v73;
  int v74;
  int32x4_t v75;
  unsigned int v77;
  __int8 *v79;
  unsigned int v80;
  double (*v81)(double, __n128);
  int8x16_t *v82;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  float v88;
  float v89;
  _DWORD *v90;
  __n128 v91;
  char *v92;
  int v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int8x16_t v97;
  uint32x4_t v98;
  __int8 v99;

  v11 = a3;
  v12 = a2[1];
  v84 = *a2;
  a3[249].i32[1] = a5;
  a3[249].i32[2] = a6;
  a3[249].i32[3] = a7;
  if (a8[3] == 3 && a8[2] == 2 && a8[1] == 1 && *a8 == 0)
    v16 = (__n64 (*)(unsigned int *, __n128))swz_texel_skip;
  else
    v16 = swz_texel;
  a9.i8[0] = a4[3];
  v17 = 1.0 / (float)a9.u32[0];
  a9.i32[0] = a1 & 0xFFFFFFFE;
  a9.i32[1] = a1;
  v18 = (int8x8_t)vceq_s32(*(int32x2_t *)a9.i8, (int32x2_t)0x300000002);
  *(int8x8_t *)a9.i8 = vand_s8(v18, (int8x8_t)0x100000001);
  v19 = vzip1q_s32(a9, a9);
  v19.i32[2] = a9.i32[0];
  v20 = v18.i8[0] & 1;
  v75 = v19;
  v21 = (uint32x4_t)vtstq_s32(v19, v19);
  v23 = a2[2];
  v22 = a2[3];
  v24 = load_texel_u8;
  if (v22 == 2)
    v24 = (double (*)(char *, int))load_texel_f32;
  if (v22 == 1)
    v25 = load_texel_f16;
  else
    v25 = v24;
  v91 = (__n128)v21;
  if ((v26 & 1) == 0)
  {
    v70 = a4;
    v71 = v18.i8[0] & 1;
    v89 = v17;
    v72 = v25;
    v99 = v18.i8[4];
    v18.i8[4] = v99;
    v25 = v72;
    v21 = (uint32x4_t)v91;
    v17 = v89;
    v20 = v71;
    a4 = v70;
    if (v73)
    {
      mask(vmask4)::shift = xmmword_18820BF90;
      v18.i8[4] = v99;
      v25 = v72;
      v21 = (uint32x4_t)v91;
      v17 = v89;
      v20 = v71;
      a4 = v70;
    }
  }
  if (vaddvq_s32((int32x4_t)vshlq_u32(vshrq_n_u32(v21, 0x1FuLL), (uint32x4_t)mask(vmask4)::shift)))
    v27 = (double (*)(double, __n128))encode_texel_lns;
  else
    v27 = (double (*)(double, __n128))encode_texel_unorm;
  v28 = a4[2];
  if (a4[2])
  {
    v81 = v27;
    v90 = a8;
    v29 = 0;
    v30 = 0;
    v31 = v18.i8[4] & 1;
    v77 = v23 - 1;
    v80 = v12 - 1;
    v32 = a4[1];
    v33 = a5;
    v34 = (float32x4_t)vdupq_n_s32(0xFE967699);
    v35 = (float32x4_t)vdupq_n_s32(0x7E967699u);
    v79 = &v11[235].i8[9];
    v36 = 0uLL;
    v37.i64[0] = -1;
    v37.i64[1] = -1;
    v38 = v32;
    v82 = v11;
    v88 = v17;
    do
    {
      v39 = v30 + a7;
      if (v30 + a7 >= v77)
        v39 = v77;
      if (v38)
      {
        v40 = 0;
        v41 = *(char **)(*((_QWORD *)a2 + 2) + 8 * v39);
        v42 = *a4;
        v85 = v30;
        do
        {
          if (v42)
          {
            v43 = 0;
            v86 = v40;
            v87 = v29;
            v44 = v40 + a6;
            if (v40 + a6 >= v80)
              v44 = v80;
            v93 = v44 * v84;
            v45 = &v11->i32[v29];
            v92 = &v79[v29];
            do
            {
              v94 = v36;
              v95 = v35;
              v96 = v34;
              v97 = (int8x16_t)v37;
              v46 = v33 + v43;
              if (v33 + (int)v43 >= (v84 - 1))
                v46 = v84 - 1;
              v47 = a4;
              v48 = v20;
              v49 = v25;
              v25(v41, 4 * (v46 + v93));
              v50 = ((double (*)(_DWORD *))v16)(v90);
              *(double *)v51.i64 = v81(v50, v91);
              v25 = v49;
              v20 = v48;
              a4 = v47;
              v35 = vminnmq_f32(v95, v51);
              v36 = vaddq_f32(v94, vmulq_n_f32(v51, v88));
              v34 = vmaxnmq_f32(v96, v51);
              v52 = (int32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL);
              v37 = (uint32x4_t)vandq_s8(v97, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 0), (float32x4_t)vzip1q_s32(v52, v52)));
              *v45 = v51.i32[0];
              v45[216] = v51.i32[1];
              v45[432] = v51.i32[2];
              v45[648] = v51.i32[3];
              v53 = &v92[v43];
              *(v53 - 216) = v48;
              *v53 = v31;
              v42 = *v47;
              ++v45;
              ++v43;
            }
            while (v43 < v42);
            v40 = v86;
            v29 = v87 + v43;
            v32 = v47[1];
            v11 = v82;
            v30 = v85;
          }
          ++v40;
        }
        while (v40 < v32);
        v28 = a4[2];
        v38 = v32;
      }
      ++v30;
    }
    while (v30 < v28);
  }
  else
  {
    v35 = (float32x4_t)vdupq_n_s32(0x7E967699u);
    v34 = (float32x4_t)vdupq_n_s32(0xFE967699);
    v37.i64[0] = -1;
    v37.i64[1] = -1;
    v36 = 0uLL;
  }
  v54 = (int8x16_t)vceqzq_s32(v75);
  v55 = *(float32x4_t *)v11;
  v55.i32[1] = v11[54].i32[0];
  v55.i32[2] = v11[108].i32[0];
  v55.i32[3] = v11[162].i32[0];
  v56 = (int8x16_t)vdivq_f32(v55, (float32x4_t)vdupq_n_s32(0x477FFF00u));
  v57 = 0uLL;
  if ((v20 & 1) != 0)
  {
    v58 = (int8x16_t)vcvtq_s32_f32(v55);
    v59.i64[0] = 0x700000007;
    v59.i64[1] = 0x700000007;
    v60 = (int32x4_t)vandq_s8(v58, v59);
    v61.i64[0] = 0xA0000000ALL;
    v61.i64[1] = 0xA0000000ALL;
    v62 = (int32x4_t)vshlq_u32((uint32x4_t)v58, v61);
    v63 = (uint16x4_t)vmovn_s32(v60);
    v64.i64[0] = 0x20000000200;
    v64.i64[1] = 0x20000000200;
    v65.i64[0] = 0x100000001;
    v65.i64[1] = 0x100000001;
    v66 = (int8x16_t)vaddq_s32(vshlq_n_s32(v60, 2uLL), v65);
    v65.i64[0] = 0x60000000600;
    v65.i64[1] = 0x60000000600;
    v67.i64[0] = 0x700000007;
    v67.i64[1] = 0x700000007;
    v61.i64[0] = 0x200000002;
    v61.i64[1] = 0x200000002;
    v68 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vbslq_s8((int8x16_t)vcgtq_u32(v64, (uint32x4_t)v60), (int8x16_t)vmull_u16(v63, (uint16x4_t)0x3000300030003), vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v65, (uint32x4_t)v60), v66, (int8x16_t)vmlal_u16(v67, v63, (uint16x4_t)0x5000500050005))), v61), (int8x16_t)vshlq_n_s32(v62, 0xAuLL));
    v60.i64[0] = 0x7B0000007BLL;
    v60.i64[1] = 0x7B0000007BLL;
    v57 = (int8x16_t)vcvtq_f32_f16((float16x4_t)vmovn_s32(vminq_s32(v68, v60)));
  }
  v11[217] = vorrq_s8(vbicq_s8(v57, v54), vandq_s8(v56, v54));
  v11[218] = (int8x16_t)v35;
  v11[219] = (int8x16_t)v36;
  v11[220] = (int8x16_t)v34;
  if ((v69 & 1) == 0)
  {
    v98 = v37;
    v37 = v98;
    if (v74)
    {
      mask(vmask4)::shift = xmmword_18820BF90;
      v37 = v98;
    }
  }
  v11[222].i8[0] = vaddvq_s32((int32x4_t)vshlq_u32(vshrq_n_u32(v37, 0x1FuLL), (uint32x4_t)mask(vmask4)::shift)) == 15;
}

double load_texel_u8(char *a1, int a2)
{
  const float *v2;
  uint8x8_t v3;
  double result;

  v2 = (const float *)&a1[a2];
  v3 = (uint8x8_t)vld1_dup_f32(v2);
  *(_QWORD *)&result = vdivq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v3))), (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double load_texel_f16(char *a1, int a2)
{
  double result;

  *(_QWORD *)&result = vcvtq_f32_f16(*(float16x4_t *)&a1[2 * a2]).u64[0];
  return result;
}

__n128 load_texel_f32(char *a1, int a2)
{
  return *(__n128 *)&a1[4 * a2];
}

__n64 swz_texel(unsigned int *a1, __n128 a2)
{
  __n64 result;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = 0x3F80000000000000;
  result.n64_u32[0] = v3.n128_u32[*a1];
  result.n64_u32[1] = v3.n128_u32[a1[1]];
  return result;
}

double encode_texel_unorm(float32x4_t a1)
{
  double result;

  *(_QWORD *)&result = vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x477FFF00u)).u64[0];
  return result;
}

double encode_texel_lns(float32x4_t a1, int8x16_t a2)
{
  float32x4_t v2;
  int8x16_t v3;
  uint32x4_t v4;
  int8x16_t v5;
  int32x4_t v6;
  unsigned __int128 v7;
  int8x16_t v8;
  int8x16_t v9;
  uint32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  double result;

  v2 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  v3 = (int8x16_t)vmulq_f32(a1, v2);
  v4.i64[0] = 0x1600000016;
  v4.i64[1] = 0x1600000016;
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = (int32x4_t)vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)a1, v4), v5);
  v7 = *(_OWORD *)&vandq_s8((int8x16_t)a1, (int8x16_t)vdupq_n_s32(0x807FFFFF)) | __PAIR128__(0x3F0000003F000000, 0x3F0000003F000000);
  v8 = (int8x16_t)vcgtq_f32(a1, (float32x4_t)vdupq_n_s32(0x32800000u));
  v9 = (int8x16_t)vcgeq_f32(a1, (float32x4_t)vdupq_n_s32(0x47800000u));
  v10.i64[0] = 0x7100000071;
  v10.i64[1] = 0x7100000071;
  v11 = (int8x16_t)vcgtq_u32(v10, (uint32x4_t)v6);
  v12.i64[0] = 0x4C0000004C000000;
  v12.i64[1] = 0x4C0000004C000000;
  v13 = (int8x16_t)vmulq_f32(a1, v12);
  v12.i64[0] = 0xBF000000BF000000;
  v12.i64[1] = 0xBF000000BF000000;
  v14 = vmulq_f32(vaddq_f32((float32x4_t)v7, v12), (float32x4_t)vdupq_n_s32(0x45800000u));
  v12.i64[0] = 0x6F0000006FLL;
  v12.i64[1] = 0x6F0000006FLL;
  v15 = (float32x4_t)vbslq_s8(v11, v13, (int8x16_t)v14);
  v16.i64[0] = 0x4300000043000000;
  v16.i64[1] = 0x4300000043000000;
  v17.i64[0] = 0x4400000044000000;
  v17.i64[1] = 0x4400000044000000;
  v14.i64[0] = 0x4500000045000000;
  v14.i64[1] = 0x4500000045000000;
  v18 = vaddq_f32(vmulq_f32(vcvtq_f32_s32((int32x4_t)vbicq_s8((int8x16_t)vaddq_s32(v6, (int32x4_t)v12), v11)), v14), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x43C00000u), v15), (int8x16_t)vmulq_f32(v15, (float32x4_t)vdupq_n_s32(0x3FAAAAABu)), vbslq_s8((int8x16_t)vcgeq_f32((float32x4_t)vdupq_n_s32(0x44B00000u), v15), (int8x16_t)vaddq_f32(v15, v16), (int8x16_t)vmulq_f32(vaddq_f32(v15, v17), (float32x4_t)vdupq_n_s32(0x3F4CCCCDu)))));
  __asm { FMOV            V4.4S, #1.0 }
  *(_QWORD *)&result = vbslq_s8(a2, vandq_s8(vbslq_s8(v9, (int8x16_t)v2, (int8x16_t)vaddq_f32(v18, _Q4)), v8), v3).u64[0];
  return result;
}

void load_image_block_fast_ldr(uint64_t a1, int *a2, float32x4_t *a3, unsigned __int8 *a4, unsigned int a5, unsigned __int32 a6, __int32 a7)
{
  int v7;
  int v8;
  unsigned __int32 v9;
  int v10;
  uint64_t v11;
  unsigned __int32 v12;
  int v13;
  unsigned int v14;
  float32x4_t v15;
  float32x4_t v16;
  int v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  unsigned __int32 v21;
  uint64_t v22;
  __int32 *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  const float *v27;
  uint8x8_t v28;
  int8x16_t v29;
  int32x4_t v30;
  float32x4_t v31;
  unsigned __int8 v32;
  uint32x4_t *v33;
  int v34;
  int8x16_t v35;
  float32x4_t *v36;

  v8 = *a2;
  v7 = a2[1];
  a3[249].i32[1] = a5;
  a3[249].i32[2] = a6;
  a3[249].i32[3] = a7;
  v9 = a4[1] + a6;
  if (v9 <= a6)
  {
    v16 = (float32x4_t)vdupq_n_s32(0xFE967699);
    v15 = (float32x4_t)vdupq_n_s32(0x7E967699u);
    v19.i64[0] = -1;
    v19.i64[1] = -1;
    v18 = 0uLL;
  }
  else
  {
    v10 = 0;
    v11 = **((_QWORD **)a2 + 2);
    v12 = v7 - 1;
    v13 = *a4;
    v14 = v8 - 1;
    v15 = (float32x4_t)vdupq_n_s32(0x7E967699u);
    v16 = (float32x4_t)vdupq_n_s32(0xFE967699);
    v17 = 4 * v8;
    v18 = 0uLL;
    v19.i64[0] = -1;
    v19.i64[1] = -1;
    v20 = (float32x4_t)vdupq_n_s32(0x43808000u);
    do
    {
      if (v13 + a5 > a5)
      {
        if (a6 >= v12)
          v21 = v12;
        else
          v21 = a6;
        v22 = v11 + v17 * v21;
        v23 = &a3->i32[v10];
        v24 = v13;
        v25 = a5;
        do
        {
          if (v25 >= v14)
            v26 = v14;
          else
            v26 = v25;
          v27 = (const float *)(v22 + 4 * v26);
          v28 = (uint8x8_t)vld1_dup_f32(v27);
          v29 = (int8x16_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v28))), v20);
          v15 = vminnmq_f32(v15, (float32x4_t)v29);
          v18 = vaddq_f32(v18, (float32x4_t)v29);
          v16 = vmaxnmq_f32(v16, (float32x4_t)v29);
          v30 = (int32x4_t)vextq_s8(v29, v29, 4uLL);
          v19 = vandq_s8(v19, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.i8, 0), (float32x4_t)vzip1q_s32(v30, v30)));
          *v23 = v29.i32[0];
          v23[216] = v29.i32[1];
          v23[432] = v29.i32[2];
          v23[648] = v29.i32[3];
          ++v25;
          ++v23;
          ++v10;
          --v24;
        }
        while (v24);
      }
      ++a6;
    }
    while (a6 != v9);
  }
  v31 = *a3;
  v31.i32[1] = a3[54].i32[0];
  v31.i32[2] = a3[108].i32[0];
  v31.i32[3] = a3[162].i32[0];
  a3[217] = vdivq_f32(v31, (float32x4_t)vdupq_n_s32(0x477FFF00u));
  a3[222].i8[1] = 0;
  a3[235].i8[9] = 0;
  a3[218] = v15;
  v15.i8[0] = a4[3];
  v15.f32[0] = (float)v15.u32[0];
  a3[219] = vdivq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 0));
  a3[220] = v16;
  v33 = (uint32x4_t *)&unk_1EDF03000;
  if ((v32 & 1) == 0)
  {
    v36 = a3;
    v35 = v19;
    v19 = v35;
    v33 = (uint32x4_t *)&unk_1EDF03000;
    a3 = v36;
    if (v34)
    {
      mask(vmask4)::shift = xmmword_18820BF90;
      v19 = v35;
      v33 = (uint32x4_t *)&unk_1EDF03000;
      a3 = v36;
    }
  }
  a3[222].i8[0] = vaddvq_s32((int32x4_t)vshlq_u32(vshrq_n_u32((uint32x4_t)v19, 0x1FuLL), v33[59])) == 15;
}

void init_block_size_descriptor(unsigned int a1, unsigned int a2, unsigned int a3, int a4, unsigned int a5, float a6, block_size_descriptor *a7)
{
  unsigned int v9;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  block_size_descriptor *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char *v18;
  unint64_t *v19;
  unsigned int v20;
  block_size_descriptor *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  _BOOL4 v30;
  unsigned int v31;
  BOOL v32;
  BOOL v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  block_size_descriptor *v46;
  unint64_t *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  size_t v67;
  float v68;
  unsigned int v69;
  unsigned __int8 v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 v98;
  uint64_t v99;
  unsigned __int8 v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unsigned int v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t i;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  float *v125;
  uint64_t v126;
  char *v127;
  char v128;
  uint64_t v129;
  char *v130;
  char *v131;
  int v132;
  char *v133;
  char *v134;
  size_t v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  char v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  char *v145;
  int v146;
  int v147;
  unsigned int v148;
  int ise_sequence_bitcount;
  char *v150;
  __int16 v151;
  __int16 v152;
  int v155;
  int v156;
  unsigned int v157;
  char *v158;
  char *v159;
  unsigned int v160;
  unsigned int v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  unsigned int v169;
  _BYTE *v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  float *_2d_percentile_table;
  char *v175;
  unsigned int v177;
  uint64_t v178;
  int v179;
  unsigned int v180;
  unint64_t v181;
  int v182;
  unsigned int v183;
  char v185;
  int v186;
  int v187;
  unsigned int v189;
  _DWORD __b[438];
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _DWORD v195[4];
  uint64_t v196;
  int v197;
  unsigned int v198;
  uint64_t v199;

  v9 = a1;
  v199 = *MEMORY[0x1E0C80C00];
  if (a3 < 2)
  {
    v43 = operator new();
    *(_BYTE *)a7 = a1;
    *((_BYTE *)a7 + 1) = a2;
    *((_BYTE *)a7 + 2) = 1;
    *((_BYTE *)a7 + 3) = a2 * a1;
    memset(__b, 255, 0x330uLL);
    _2d_percentile_table = get_2d_percentile_table(a1, a2);
    v193 = 0;
    v194 = 0;
    v191 = 0;
    v192 = 0;
    memset((char *)a7 + 11300848, 255, 0x1000uLL);
    v44 = 0;
    v45 = 3;
    if (!a4)
      v45 = 4;
    v46 = a7;
    do
    {
      v47 = 0;
      v178 = v44;
      do
      {
        if (*((__int16 *)a7 + (_QWORD)v47 + 5650424) == -1)
        {
          if ((v47 & 3) != 0)
            __asm { BR              X13 }
          if (((v47 >> 2) & 3) != 0)
            __asm { BR              X13 }
        }
        v47 = (unint64_t *)((char *)v47 + 1);
      }
      while (v47 != (unint64_t *)2048);
      ++v44;
    }
    while (v178 + 1 != v45);
    v48 = v193;
    v49 = HIDWORD(v194);
    v50 = v194 + HIDWORD(v193) + v193;
    *((_DWORD *)a7 + 5) = HIDWORD(v193) + v193;
    *((_DWORD *)a7 + 6) = v50;
    *((_DWORD *)a7 + 7) = v49 + v50;
    v51 = v191;
    v52 = HIDWORD(v192);
    v53 = HIDWORD(v191) + v191 + v192;
    *((_DWORD *)a7 + 1) = v191;
    *((_DWORD *)a7 + 2) = v53;
    v54 = v52 + v53;
    *((_DWORD *)a7 + 3) = v54;
    *((_DWORD *)a7 + 4) = v48;
    if (!v48)
      init_block_size_descriptor();
    if (!v51)
      init_block_size_descriptor();
    if (_2d_percentile_table)
    {
      MEMORY[0x18D761C18](_2d_percentile_table, 0x1000C8052888210);
      v46 = a7;
      v54 = *((_DWORD *)a7 + 3);
    }
    v40 = a4;
    if (v54 <= 0x56)
    {
      v55 = v54 + 1;
      v56 = (uint64_t)v46 + 6 * v54 + 68;
      do
      {
        *(_WORD *)(v56 - 4) = -1;
        *(_DWORD *)(v56 - 2) = 0;
        v56 += 6;
        v17 = (_DWORD)v55++ == 87;
      }
      while (!v17);
    }
    assign_kmeans_texels((uint64_t)v46, v47);
    MEMORY[0x18D761C30](v43, 0x1000C403AA0D44CLL);
LABEL_58:
    init_partition_tables(a7, v40, a5);
  }
  v11 = operator new();
  *(_BYTE *)a7 = v9;
  *((_BYTE *)a7 + 1) = a2;
  *((_BYTE *)a7 + 2) = a3;
  v12 = a2 * v9 * a3;
  *((_BYTE *)a7 + 3) = a2 * v9 * a3;
  memset(__b, 255, sizeof(__b));
  v180 = a3;
  v13 = 0;
  if (v9 >= 2)
  {
    if (v12 <= 1)
      v57 = 1;
    else
      v57 = v12;
    v164 = (char *)a7 + 814;
    v163 = (char *)a7 + 19888;
    v162 = (char *)a7 + 6064;
    v58 = 2;
    v156 = 4;
    v159 = (char *)a7 + v12;
    v175 = (char *)a7 + 2544;
    v158 = (char *)a7 + 4 * v12 + 2544;
    v161 = ((v9 >> 1) + 1024) / (v9 - 1);
    v160 = ((a2 >> 1) + 1024) / (a2 - 1);
    v59 = a3;
    v14 = a7;
    v60 = a2;
    v61 = 8;
    v165 = ((_DWORD)v12 + 3) & 0xFFFFFFFC;
    v166 = v57;
    do
    {
      v155 = v61;
      if (v60 >= 2)
      {
        v62 = 2;
        v63 = v156;
        v64 = v61;
        do
        {
          v65 = v62 * v58;
          v167 = v62 - 1;
          v66 = 2;
          v157 = v64;
          v179 = v62;
          v169 = v58 + 8 * v62;
          v168 = v63;
          do
          {
            v67 = v66 * v65;
            if (v67 <= 0x40)
            {
              __b[64 * v66 + v169] = v13;
              if (!(_DWORD)v67)
                init_block_size_descriptor();
              if (!(_DWORD)v12)
                init_block_size_descriptor();
              v172 = v64;
              v183 = v13;
              v173 = v13;
              v170 = (char *)v14 + 129888 * v13 + 592;
              v171 = v64 + 4972;
              v181 = v66 * v65;
              v177 = v66;
              bzero((void *)(v11 + 1944), v67);
              bzero((void *)v11, v12);
              v69 = a2;
              v70 = 0;
              v71 = 0;
              do
              {
                v72 = 0;
                v186 = v71 * v69;
                v182 = v71;
                v73 = ((a3 >> 1) + 1024) / (a3 - 1) * (v177 - 1) * v71 + 32;
                v74 = (v73 >> 6) & 0xF;
                v75 = (v73 >> 10) * v179;
                do
                {
                  v76 = 0;
                  v77 = (v72 + v186) * v9;
                  v78 = v160 * v167 * v72 + 32;
                  v79 = (v78 >> 6) & 0xF;
                  v80 = (v75 + (v78 >> 10)) * v58;
                  v81 = (v179 + v75 + 1 + (v78 >> 10)) * v58 + 1;
                  do
                  {
                    v82 = v161 * (v58 - 1) * v76 + 32;
                    v83 = (v82 >> 6) & 0xF;
                    v84 = v80 + (v82 >> 10);
                    LODWORD(v196) = v84;
                    v198 = v81 + (v82 >> 10);
                    v85 = v79 - v83;
                    switch((2 * (v79 > v74)) | (4 * (v79 < v83)) | (v83 > v74))
                    {
                      case 2:
                        v85 = v74 - v83;
                        v86 = v58;
                        v87 = v65;
                        v88 = v79;
                        v89 = v79 - v74;
                        break;
                      case 3:
                        v87 = 1;
                        v86 = v58;
                        v88 = v79;
                        v89 = v79 - v83;
                        v85 = v83 - v74;
                        goto LABEL_76;
                      case 4:
                        v89 = v74 - v83;
                        v85 = v83 - v79;
                        v87 = 1;
                        v86 = v65;
                        v88 = v74;
                        goto LABEL_80;
                      case 5:
                        v86 = 1;
                        v87 = v65;
                        v88 = (v82 >> 6) & 0xF;
                        v89 = v83 - v74;
                        v85 = v74 - v79;
LABEL_80:
                        v83 = v79;
                        break;
                      case 7:
                        v89 = v83 - v79;
                        v86 = 1;
                        v87 = v58;
                        v88 = v83;
                        v85 = v79 - v74;
LABEL_76:
                        v83 = v74;
                        break;
                      default:
                        v86 = v65;
                        v87 = v58;
                        v88 = v74;
                        v89 = v74 - v79;
                        break;
                    }
                    v90 = 0;
                    HIDWORD(v196) = v86 + v84;
                    v197 = v86 + v84 + v87;
                    v91 = v76 + v77;
                    v195[0] = 16 - v88;
                    v195[1] = v89;
                    v195[2] = v85;
                    v195[3] = v83;
                    v9 = a1;
                    do
                    {
                      v92 = v195[v90];
                      if (v92)
                      {
                        v93 = *(int *)((char *)&v196 + v90 * 4);
                        v94 = v11 + 4 * v91;
                        *(_BYTE *)(v94 + *(unsigned __int8 *)(v11 + v91) + 216) = v93;
                        *(_BYTE *)(v94 + (*(_BYTE *)(v11 + v91))++ + 1080) = v92;
                        v95 = v11 + v93;
                        v96 = *(unsigned __int8 *)(v11 + v93 + 1944);
                        v97 = v11 + 216 * (int)v93;
                        *(_BYTE *)(v97 + v96 + 2008) = v91;
                        *(_BYTE *)(v97 + *(unsigned __int8 *)(v95 + 1944) + 15832) = v92;
                        v98 = *(_BYTE *)(v95 + 1944) + 1;
                        *(_BYTE *)(v95 + 1944) = v98;
                        if (v70 <= v98)
                          v70 = v98;
                      }
                      ++v90;
                    }
                    while (v90 != 4);
                    ++v76;
                  }
                  while (v76 != a1);
                  ++v72;
                  v69 = a2;
                }
                while (v72 != a2);
                ++v71;
              }
              while (v182 + 1 != a3);
              v99 = 0;
              v100 = 0;
              v101 = 129888 * v183;
              v102 = (char *)a7 + v101;
              v103 = &v175[v101];
              v104 = v11;
              v105 = (char *)a7 + v101;
              do
              {
                v106 = 0;
                v107 = *(unsigned __int8 *)(v11 + v99);
                *((_BYTE *)a7 + 129888 * v183 + v99 + 598) = v107;
                do
                {
                  v108 = &v105[v106];
                  v108[1678] = 0;
                  *(_DWORD *)&v103[4 * v106] = 0;
                  v108[814] = 0;
                  v106 += 216;
                }
                while (v106 != 864);
                if (v100 <= v107)
                  v100 = v107;
                if (v107)
                {
                  v109 = 0;
                  v110 = 216 * v107;
                  v111 = v104;
                  do
                  {
                    v112 = *(unsigned __int8 *)(v111 + 1080);
                    v113 = &v105[v109];
                    v113[1678] = v112;
                    v68 = (float)v112 * 0.0625;
                    *(float *)&v103[4 * v109] = v68;
                    v113[814] = *(_BYTE *)(v111 + 216);
                    v109 += 216;
                    ++v111;
                  }
                  while (v110 != v109);
                }
                ++v99;
                ++v105;
                v103 += 4;
                v104 += 4;
              }
              while (v99 != v166);
              v114 = 0;
              if (v181 <= 1)
                v115 = 1;
              else
                v115 = v181;
              *((_BYTE *)a7 + 129888 * v183 + 593) = v100;
              v116 = &v163[v101];
              v117 = &v162[v101];
              do
              {
                v118 = *(unsigned __int8 *)(v11 + v114 + 1944);
                *((_BYTE *)a7 + 129888 * v183 + v114 + 6000) = v118;
                if (v118)
                {
                  for (i = 0; i != v118; ++i)
                  {
                    v120 = 0;
                    v121 = v11 + 216 * v114 + i;
                    v122 = *(unsigned __int8 *)(v121 + 2008);
                    v123 = (char *)a7 + 129888 * v183 + 592;
                    v123[64 * i + 5472 + v114] = v122;
                    LOBYTE(v68) = *(_BYTE *)(v121 + 15832);
                    v68 = (float)LODWORD(v68);
                    v124 = (uint64_t)&v123[256 * i + 4 * v114];
                    *(float *)(v124 + 19296) = v68;
                    v125 = (float *)(v124 + 74592);
                    *v125 = 0.0;
                    v126 = (uint64_t)&v175[4 * v122 + v101];
                    v127 = &v164[v101 + v122];
                    while (1)
                    {
                      if (v114 == v127[v120])
                      {
                        v68 = *(float *)(v126 + 4 * v120);
                        if (v68 != 0.0)
                          break;
                      }
                      v120 += 216;
                      if (v120 == 864)
                        goto LABEL_110;
                    }
                    *v125 = v68;
LABEL_110:
                    ;
                  }
                }
                if (v118 < v70)
                {
                  v128 = *((_BYTE *)a7 + 129888 * v183 + 64 * (unint64_t)(v118 - 1) + v114 + 6064);
                  v129 = v70 - v118;
                  v130 = &v116[256 * v118];
                  v131 = &v117[64 * v118];
                  do
                  {
                    *v131 = v128;
                    v131 += 64;
                    *(_DWORD *)v130 = 0;
                    v130 += 256;
                    --v129;
                  }
                  while (v129);
                }
                ++v114;
                v116 += 4;
                ++v117;
              }
              while (v114 != v115);
              v132 = v181;
              if (v12 < v165)
              {
                v133 = &v159[v101];
                v134 = &v158[v101];
                v135 = v12;
                do
                {
                  v136 = 0;
                  *((_BYTE *)a7 + 129888 * v183 + v135 + 598) = 0;
                  do
                  {
                    *(_DWORD *)&v134[4 * v136] = 0;
                    v137 = &v133[v136];
                    v137[814] = 0;
                    v137[1678] = 0;
                    v136 += 216;
                  }
                  while (v136 != 864);
                  ++v135;
                  ++v133;
                  v134 += 4;
                }
                while (v135 != v165);
              }
              v138 = ((_DWORD)v181 + 3) & 0xFFFFFFFC;
              v139 = v171;
              if (v181 < v138)
              {
                v140 = *((_BYTE *)a7
                       + 129888 * v183
                       + 64 * (unint64_t)*(unsigned __int8 *)(v11 + (v181 - 1) + 1944)
                       + (v181 - 1)
                       + 6000);
                v141 = v181;
                do
                {
                  *((_BYTE *)a7 + 129888 * v183 + v141 + 6000) = 0;
                  v142 = v139;
                  v143 = v70;
                  if (v70)
                  {
                    do
                    {
                      v102[v142 + 1092] = v140;
                      *(_DWORD *)&v102[4 * v142] = 0;
                      v142 += 64;
                      --v143;
                    }
                    while (v143);
                  }
                  ++v141;
                  ++v139;
                }
                while (v141 < v138);
              }
              v144 = 0;
              *v170 = v12;
              v145 = (char *)a7 + 129888 * v183;
              v145[594] = v181;
              v145[595] = v58;
              v145[596] = v179;
              v145[597] = v177;
              v146 = -1;
              v147 = -1;
              do
              {
                v187 = v146;
                v148 = v144;
                if (get_ise_sequence_bitcount(v132, v144) - 24 < 0x49)
                  v147 = v148;
                ise_sequence_bitcount = get_ise_sequence_bitcount(2 * (int)v181, v148);
                v132 = v181;
                v146 = v187;
                if ((ise_sequence_bitcount - 24) < 0x49)
                  v146 = v148;
                v144 = v148 + 1;
              }
              while (v148 != 11);
              if (v181 > 0x20)
                v146 = -1;
              v14 = a7;
              v150 = (char *)a7 + 6 * v183;
              v150[64] = v147;
              v150[65] = v146;
              if (v147 == -1)
                v151 = 0;
              else
                v151 = -1;
              *((_WORD *)v150 + 33) = v151;
              if (v146 == -1)
                v152 = 0;
              else
                v152 = -1;
              *((_WORD *)v150 + 34) = v152;
              v13 = v173 + 1;
              v60 = a2;
              v9 = a1;
              v59 = a3;
              v63 = v168;
              v66 = v177;
              v64 = v172;
            }
            ++v66;
            v64 += v63;
          }
          while (v66 <= v59);
          v62 = v179 + 1;
          v64 = v157 + v156;
          v63 += v58;
        }
        while (v179 + 1 <= v60);
      }
      ++v58;
      v61 = v155 + 4;
      v156 += 2;
    }
    while (v58 <= v9);
    if (v13 > 0x56)
      goto LABEL_7;
  }
  else
  {
    v14 = a7;
  }
  v15 = v13 + 1;
  v16 = (uint64_t)v14 + 6 * v13 + 68;
  do
  {
    *(_WORD *)(v16 - 4) = -1;
    *(_DWORD *)(v16 - 2) = 0;
    v16 += 6;
    v17 = (_DWORD)v15++ == 87;
  }
  while (!v17);
LABEL_7:
  *((_DWORD *)v14 + 1) = 0;
  *((_DWORD *)v14 + 2) = v13;
  *((_DWORD *)v14 + 3) = v13;
  v18 = (char *)v14 + 11300848;
  memset((char *)v14 + 11300848, 255, 0x1000uLL);
  v20 = a3;
  v21 = a7;
  v22 = 0;
  v189 = 0;
  v196 = 0;
  v23 = 1;
  while (1)
  {
    v24 = 0;
    v185 = v23;
    do
    {
      if (*(__int16 *)&v18[2 * v24] == -1)
      {
        v25 = v24 >> 10;
        if ((v24 & 3) != 0)
        {
          v26 = ((v24 >> 2) & 3) + 2;
          v27 = ((v24 >> 7) & 3) + 2;
          v28 = v27 * (((v24 >> 5) & 3) + 2) * v26
              + v27 * (((v24 >> 5) & 3) + 2) * v26 * v25;
          v29 = ((v24 >> 4) | 0xFFFFFFFE) + 6 * ((v24 >> 9) & 1) + 2 * (v24 & 3);
          v30 = v25 != 0;
          v31 = get_ise_sequence_bitcount(v28, v29);
          v20 = v180;
          v21 = a7;
          v32 = v28 < 0x41 && v31 > 0x17;
          v33 = !v32 || v31 >= 0x61;
          v34 = !v33;
          v35 = ((v24 >> 5) & 3) + 2;
        }
        else
        {
          if (((v24 >> 2) & 3) != 0)
            __asm { BR              X14 }
          v35 = 0;
          v27 = 0;
          v26 = 0;
          v30 = 0;
          LOBYTE(v29) = 0;
          v31 = 0;
          v34 = 0;
        }
        if (v26 <= v20 && v27 <= a2 && v35 <= a1 && v34 && v22 != !v30)
        {
          if (v30)
          {
            if (v31 == 109)
              goto LABEL_10;
          }
          else if (v31 == 111)
          {
            goto LABEL_10;
          }
          v36 = (uint64_t)v21 + 6 * v189 + 11304944;
          *(_BYTE *)(v36 + 2) = __b[64 * v26 + (v35 | (8 * v27))];
          *(_BYTE *)(v36 + 3) = v29;
          *(_BYTE *)(v36 + 4) = v31;
          *(_BYTE *)(v36 + 5) = *(_BYTE *)(v36 + 5) & 0xFE | v30;
          *(_WORD *)v36 = v24;
          *(_WORD *)&v18[2 * v24] = v189;
          ++*((_DWORD *)&v196 + v22);
          ++v189;
        }
      }
LABEL_10:
      ++v24;
    }
    while (v24 != 2048);
    v23 = 0;
    v22 = 1;
    if ((v185 & 1) == 0)
    {
      v37 = v196;
      v38 = HIDWORD(v196);
      *((_DWORD *)v21 + 4) = 0;
      *((_DWORD *)v21 + 5) = v37;
      v39 = v38 + v37;
      *((_DWORD *)v21 + 6) = v39;
      *((_DWORD *)v21 + 7) = v39;
      assign_kmeans_texels((uint64_t)v21, v19);
      MEMORY[0x18D761C30](v11, 0x1000C403AA0D44CLL);
      v40 = a4;
      goto LABEL_58;
    }
  }
}

uint64_t assign_kmeans_texels(uint64_t result, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD v9[13];
  uint64_t v10;
  _QWORD v11[3];

  v2 = result;
  v11[2] = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(result + 3);
  if (v3 > 0x40)
  {
    v11[0] = 0;
    v11[1] = 0;
    astc::rand_init((astc *)v11, a2);
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    v5 = *(unsigned __int8 *)(v2 + 3);
    if (*(_BYTE *)(v2 + 3))
      bzero(v9, v5);
    v6 = 0;
    do
    {
      result = astc::rand((astc *)v11, (unint64_t *)v5);
      v7 = result % *(unsigned __int8 *)(v2 + 3);
      if (!*((_BYTE *)v9 + v7))
      {
        v8 = v2 + v6++;
        *(_BYTE *)(v8 + 14666800) = result % *(_BYTE *)(v2 + 3);
        *((_BYTE *)v9 + v7) = 1;
      }
    }
    while (v6 < 0x40);
  }
  else if (*(_BYTE *)(result + 3))
  {
    v4 = 0;
    do
    {
      *(_BYTE *)(result + 14666800 + v4) = v4;
      ++v4;
    }
    while (v3 != v4);
  }
  return result;
}

void init_block_size_descriptor()
{
  __assert_rtn("init_decimation_info_3d", "astcenc_block_sizes.cpp", 451, "weights_per_block > 0");
}

{
  __assert_rtn("init_decimation_info_3d", "astcenc_block_sizes.cpp", 452, "texels_per_block > 0");
}

{
  __assert_rtn("construct_block_size_descriptor_2d", "astcenc_block_sizes.cpp", 961, "bsd.block_mode_count_1plane_always > 0");
}

{
  __assert_rtn("construct_block_size_descriptor_2d", "astcenc_block_sizes.cpp", 962, "bsd.decimation_mode_count_always > 0");
}

{
  __assert_rtn("construct_dt_entry_2d", "astcenc_block_sizes.cpp", 748, "weight_count <= BLOCK_MAX_WEIGHTS");
}

{
  __assert_rtn("init_decimation_info_2d", "astcenc_block_sizes.cpp", 266, "texels_per_block > 0");
}

{
  __assert_rtn("init_decimation_info_2d", "astcenc_block_sizes.cpp", 267, "x_texels > 0");
}

{
  __assert_rtn("init_decimation_info_2d", "astcenc_block_sizes.cpp", 268, "y_texels > 0");
}

{
  __assert_rtn("construct_dt_entry_2d", "astcenc_block_sizes.cpp", 776, "maxprec_1plane >= 0 || maxprec_2planes >= 0");
}

uint64_t compute_pixel_region_variance(uint64_t result, uint64_t *a2, int32x4_t a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __n128 *v22;
  float32x4_t *v23;
  uint64_t i;
  int v25;
  uint64_t v26;
  int v27;
  __n128 *v28;
  float32x4_t *v29;
  int v30;
  float32x4_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  int v39;
  uint64_t v40;
  float32x4_t *v41;
  float32x4_t *v42;
  uint64_t k;
  int v44;
  uint64_t v45;
  int v46;
  float32x4_t *v47;
  float32x4_t *v48;
  int v49;
  uint16x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  float32x4_t *v57;
  __int32 *v58;
  float32x4_t *v59;
  __int32 *v60;
  __int32 *v61;
  int v62;
  uint64_t v63;
  float32x4_t *v64;
  float32x4_t *v65;
  uint64_t j;
  int v67;
  uint64_t v68;
  int v69;
  float32x4_t *v70;
  float32x4_t *v71;
  int v72;
  float32x4_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  uint64_t v77;
  _OWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  uint64_t v82;
  _OWORD *v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t m;
  uint64_t v99;
  uint64_t v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  float *v123;
  uint64_t v124;
  int v125;
  float *v126;
  float *v127;
  float v128;
  float v129;
  float v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;

  v155 = *MEMORY[0x1E0C80C00];
  v3 = (int *)*a2;
  v4 = *((unsigned int *)a2 + 2);
  v5 = *((unsigned int *)a2 + 3);
  v6 = *((unsigned int *)a2 + 4);
  v7 = *((unsigned int *)a2 + 5);
  v135 = *((_DWORD *)a2 + 12);
  v136 = *((_DWORD *)a2 + 11);
  v133 = *((_DWORD *)a2 + 13);
  v8 = *((_DWORD *)a2 + 7);
  v9 = *(_QWORD *)(result + 120);
  v149 = a2[7];
  v150 = *((unsigned int *)a2 + 8);
  v10 = (2 * v8) | 1;
  v138 = *((unsigned __int8 *)a2 + 24);
  v139 = v8;
  if (!*((_BYTE *)a2 + 24))
    v8 = 0;
  v11 = (v10 + *((_DWORD *)a2 + 8));
  v151 = *((unsigned int *)a2 + 9);
  if (*((_BYTE *)a2 + 24))
    v12 = v10;
  else
    v12 = 0;
  v140 = *((unsigned int *)a2 + 10);
  v152 = (v10 + *((_DWORD *)a2 + 9));
  v146 = v11 * (v10 + *((_DWORD *)a2 + 9));
  v147 = (v12 + *((_DWORD *)a2 + 10));
  v13 = v146 * (int)v147;
  v148 = *v3;
  v14 = v3[3];
  v134 = v10;
  v131 = v3[1];
  if (v14)
  {
    if (v14 == 1)
    {
      DWORD2(v153) = 1006632960;
      if ((int)v147 > (int)v138)
      {
        v15 = v138;
        v142 = v133 - v138 - v8;
        v16 = v135 + ~v139;
        v17 = (int)v11 + (int)v138 * (uint64_t)v146;
        v18 = v149 + 16 * v17 + 16;
        v141 = 16 * v146;
        result = 16 * (int)v11;
        v19 = v149 + 16 * (v17 + v13) + 16;
        do
        {
          if (v142 + (int)v15 <= v3[2] - 1)
            v20 = (v142 + v15) & ~((v142 + (int)v15) >> 31);
          else
            v20 = v3[2] - 1;
          if ((int)v152 >= 2)
          {
            v21 = *(_QWORD *)(*((_QWORD *)v3 + 2) + 8 * v20);
            v22 = (__n128 *)v19;
            v23 = (float32x4_t *)v18;
            for (i = 1; i != v152; ++i)
            {
              if (v16 + (int)i <= v3[1] - 1)
                v25 = (v16 + i) & ~((v16 + (int)i) >> 31);
              else
                v25 = v3[1] - 1;
              v26 = v11 - 1;
              v27 = v136 - v139;
              v28 = v22;
              v29 = v23;
              if ((int)v11 >= 2)
              {
                do
                {
                  v30 = v27 & ~(v27 >> 31);
                  if (v27 > *v3 - 1)
                    v30 = *v3 - 1;
                  *(_QWORD *)&v153 = *(_QWORD *)(v21 + 2 * (4 * v30 + 4 * *v3 * v25));
                  a3.i16[3] = WORD3(v153);
                  a3.i32[0] = *((unsigned __int16 *)&v153 + v4);
                  a3.i16[2] = *((_WORD *)&v153 + v5);
                  a3.i16[4] = *((_WORD *)&v153 + v6);
                  a3.i16[6] = *((_WORD *)&v153 + v7);
                  v31 = vcvtq_f32_f16((float16x4_t)vmovn_s32(a3));
                  *v29++ = v31;
                  a3 = (int32x4_t)vmulq_f32(v31, v31);
                  *v28++ = (__n128)a3;
                  ++v27;
                  --v26;
                }
                while (v26);
              }
              v23 = (float32x4_t *)((char *)v23 + result);
              v22 = (__n128 *)((char *)v22 + result);
            }
          }
          ++v15;
          v18 += v141;
          v19 += v141;
        }
        while (v15 != v147);
      }
    }
    else
    {
      if (v14 != 2)
        compute_pixel_region_variance();
      v154 = 0x3F80000000000000;
      if ((int)v147 > (int)v138)
      {
        v52 = v138;
        v53 = (int)v11 + (int)v138 * (uint64_t)v146;
        v144 = v133 - v138 - v8;
        v54 = 16 * v146;
        v55 = 16 * (int)v11;
        v56 = v135 + ~v139;
        v57 = (float32x4_t *)(v149 + 16 * (v53 + v13));
        result = v149 + 16 * v53 + 16;
        v58 = (__int32 *)&v153 + v5;
        v59 = v57 + 1;
        v60 = (__int32 *)&v153 + v6;
        v61 = (__int32 *)&v153 + v7;
        do
        {
          if (v144 + (int)v52 <= v3[2] - 1)
            v62 = (v144 + v52) & ~((v144 + (int)v52) >> 31);
          else
            v62 = v3[2] - 1;
          if ((int)v152 >= 2)
          {
            v63 = *(_QWORD *)(*((_QWORD *)v3 + 2) + 8 * v62);
            v64 = v59;
            v65 = (float32x4_t *)result;
            for (j = 1; j != v152; ++j)
            {
              if (v56 + (int)j <= v3[1] - 1)
                v67 = (v56 + j) & ~((v56 + (int)j) >> 31);
              else
                v67 = v3[1] - 1;
              v68 = v11 - 1;
              v69 = v136 - v139;
              v70 = v64;
              v71 = v65;
              if ((int)v11 >= 2)
              {
                do
                {
                  v72 = v69 & ~(v69 >> 31);
                  if (v69 > *v3 - 1)
                    v72 = *v3 - 1;
                  v153 = *(_OWORD *)(v63 + 4 * (4 * v72 + 4 * *v3 * v67));
                  v73.i32[0] = *((_DWORD *)&v153 + v4);
                  v73.i32[1] = *v58;
                  v73.i32[2] = *v60;
                  v73.i32[3] = *v61;
                  *v71++ = v73;
                  *v70++ = vmulq_f32(v73, v73);
                  ++v69;
                  --v68;
                }
                while (v68);
              }
              v65 = (float32x4_t *)((char *)v65 + v55);
              v64 = (float32x4_t *)((char *)v64 + v55);
            }
          }
          ++v52;
          result += v54;
          v59 = (float32x4_t *)((char *)v59 + v54);
        }
        while (v52 != v147);
      }
    }
  }
  else
  {
    WORD2(v153) = -256;
    if ((int)v147 > (int)v138)
    {
      v32 = v138;
      v143 = v133 - v138 - v8;
      v33 = v135 + ~v139;
      v34 = (int)v11 + (int)v138 * (uint64_t)v146;
      v35 = v149 + 16 * v34 + 16;
      v36 = 16 * v146;
      result = 16 * (int)v11;
      v37 = v149 + 16 * (v34 + v13) + 16;
      v38 = (float32x4_t)vdupq_n_s32(0x3B808081u);
      do
      {
        if (v143 + (int)v32 <= v3[2] - 1)
          v39 = (v143 + v32) & ~((v143 + (int)v32) >> 31);
        else
          v39 = v3[2] - 1;
        if ((int)v152 >= 2)
        {
          v40 = *(_QWORD *)(*((_QWORD *)v3 + 2) + 8 * v39);
          v41 = (float32x4_t *)v37;
          v42 = (float32x4_t *)v35;
          for (k = 1; k != v152; ++k)
          {
            v44 = (v33 + k) & ~((v33 + (int)k) >> 31);
            if (v33 + (int)k > v3[1] - 1)
              v44 = v3[1] - 1;
            v45 = v11 - 1;
            v46 = v136 - v139;
            v47 = v41;
            v48 = v42;
            if ((int)v11 >= 2)
            {
              do
              {
                v49 = v46 & ~(v46 >> 31);
                if (v46 > *v3 - 1)
                  v49 = *v3 - 1;
                LODWORD(v153) = *(_DWORD *)(v40 + (4 * v49 + 4 * *v3 * v44));
                v50.i16[0] = *((unsigned __int8 *)&v153 + v4);
                v50.i16[1] = *((unsigned __int8 *)&v153 + v5);
                v50.i16[2] = *((unsigned __int8 *)&v153 + v6);
                v50.i16[3] = *((unsigned __int8 *)&v153 + v7);
                v51 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v50)), v38);
                *v48++ = v51;
                *v47++ = vmulq_f32(v51, v51);
                ++v46;
                --v45;
              }
              while (v45);
            }
            v42 = (float32x4_t *)((char *)v42 + result);
            v41 = (float32x4_t *)((char *)v41 + result);
          }
        }
        ++v32;
        v35 += v36;
        v37 += v36;
      }
      while (v32 != v147);
    }
  }
  v74 = v13;
  v132 = v147 - 1;
  if ((int)v147 >= 1)
  {
    v75 = 0;
    v76 = (_OWORD *)v149;
    do
    {
      v77 = v152;
      v78 = v76;
      if ((int)v152 >= 1)
      {
        do
        {
          *v78 = 0uLL;
          v78[v13] = 0uLL;
          v78 += (int)v11;
          --v77;
        }
        while (v77);
      }
      if ((int)v11 >= 1)
      {
        v79 = 0;
        do
        {
          v76[v79] = 0uLL;
          v76[v74 + v79++] = 0uLL;
        }
        while (v11 != v79);
      }
      ++v75;
      v76 += v146;
    }
    while (v75 != v147);
  }
  if ((_DWORD)v138 && (int)v152 >= 1)
  {
    v80 = 0;
    v81 = (_OWORD *)v149;
    do
    {
      v82 = v11;
      v83 = v81;
      if ((int)v11 >= 1)
      {
        do
        {
          *v83 = 0uLL;
          v83[v13] = 0uLL;
          ++v83;
          --v82;
        }
        while (v82);
      }
      ++v80;
      v81 += (int)v11;
    }
    while (v80 != v152);
  }
  v137 = 2 * v139;
  if ((int)v147 > (int)v138)
  {
    v84 = v149;
    v85 = v150 + v146 * v138 + v137 + 2;
    v86 = v138;
    do
    {
      v87 = v152 - 1;
      v88 = v85;
      if ((int)v152 >= 2)
      {
        do
        {
          brent_kung_prefix_sum(v84 + 16 * v88, (int)v11 - 1, 1);
          result = brent_kung_prefix_sum(v149 + 16 * v146 * (int)v147 + 16 * v88, (int)v11 - 1, 1);
          v84 = v149;
          v88 += v11;
          --v87;
        }
        while (v87);
      }
      ++v86;
      v85 += v146;
    }
    while (v86 != (_DWORD)v147);
    v89 = (int)v152 - 1;
    v90 = v138;
    v91 = (int)v11 + (int)v138 * (uint64_t)v146;
    v92 = v84 + 16 * v91 + 16;
    v93 = v84 + 16 * (v91 + v13) + 16;
    v145 = 16 * v146;
    do
    {
      v94 = v11 - 1;
      v95 = v93;
      v96 = v92;
      if ((int)v11 >= 2)
      {
        do
        {
          brent_kung_prefix_sum(v96, v89, v11);
          result = brent_kung_prefix_sum(v95, v89, v11);
          v96 += 16;
          v95 += 16;
          --v94;
        }
        while (v94);
      }
      ++v90;
      v92 += v145;
      v93 += v145;
    }
    while (v90 != v147);
  }
  if ((_DWORD)v138 && (int)v152 >= 2)
  {
    v97 = (v151 + v137 + 2) * v11;
    for (m = 1; m != v152; ++m)
    {
      if ((int)v11 >= 2)
      {
        v99 = v149 + 16 + 16 * v97;
        v100 = v11 - 1;
        do
        {
          brent_kung_prefix_sum(v99, v132, v146);
          result = brent_kung_prefix_sum(v99 + v74 * 16, v132, v146);
          v99 += 16;
          --v100;
        }
        while (v100);
      }
      v97 += v11;
    }
  }
  if ((_DWORD)v138)
    v101 = (float)v134;
  else
    v101 = 1.0;
  v102 = 1.0 / (float)((float)(v101 * (float)v134) * (float)v134);
  if ((_DWORD)v138)
  {
    if ((int)v140 >= 1)
    {
      v103 = 0;
      v104 = v149 + 12;
      v105 = v11 * (v137 + 1);
      v106 = 16 * (int)v11;
      v107 = (v137 + 1 + v150 + v146) * (v137 + 1);
      LODWORD(result) = v105 * v152;
      v108 = v136 + v148 * (v135 + v133 * v131);
      v109 = v149 + 12;
      do
      {
        if ((int)v151 >= 1)
        {
          v110 = 0;
          v111 = v104 + 16 * (int)result;
          v112 = v108;
          v113 = v107;
          v114 = v109;
          v115 = v105;
          do
          {
            if ((int)v150 >= 1)
            {
              v116 = 0;
              v117 = v137 + 1;
              v118 = v112;
              do
              {
                *(float *)(v9 + 4 * v118) = v102
                                            * (float)((float)((float)((float)(*(float *)(v111 + v116)
                                                                            - *(float *)(v104
                                                                                       + 16
                                                                                       * (v110 * (int)v11
                                                                                        + (v139 + 1 + v139 + (int)v103)
                                                                                        * v146
                                                                                        + v117)))
                                                                    - *(float *)(v104 + 16 * v113 + v116))
                                                            + *(float *)(v104 + 16 * (v113 + v117)))
                                                    - (float)((float)((float)(*(float *)(v114 + v116)
                                                                            - *(float *)(v104
                                                                                       + 16
                                                                                       * (v110 * (int)v11
                                                                                        + v103 * v146
                                                                                        + v117)))
                                                                    - *(float *)(v104 + 16 * v115 + v116))
                                                            + *(float *)(v104 + 16 * (v115 + v117))));
                v116 += 16;
                ++v118;
                ++v117;
              }
              while (16 * v150 != v116);
            }
            ++v110;
            v115 += v11;
            v114 += v106;
            v113 += v11;
            v111 += v106;
            v112 += v148;
          }
          while (v110 != v151);
        }
        ++v103;
        v105 += v146;
        v109 += 16 * v146;
        v107 += v146;
        result = (result + v146);
        v108 += v131 * v148;
      }
      while (v103 != v140);
    }
  }
  else if ((int)v151 >= 1)
  {
    v119 = 0;
    v120 = v149 + 12;
    v121 = v11 * v134;
    v122 = v136 + v135 * v148;
    v123 = (float *)(v149 + 12);
    do
    {
      if ((int)v150 >= 1)
      {
        v124 = v150;
        v125 = v134;
        LODWORD(result) = v122;
        v126 = v123;
        v127 = (float *)(v120 + 16 * v121);
        do
        {
          v128 = *v126;
          v126 += 4;
          v129 = v128 - *(float *)(v120 + 16 * (v119 * (int)v11 + v125));
          v130 = *v127;
          v127 += 4;
          *(float *)(v9 + 4 * (int)result) = v102
                                             * (float)((float)(v129 - v130) + *(float *)(v120 + 16 * (v121 + v125)));
          result = (result + 1);
          ++v125;
          --v124;
        }
        while (v124);
      }
      ++v119;
      v121 += v11;
      v123 += 4 * (int)v11;
      v122 += v148;
    }
    while (v119 != v151);
  }
  return result;
}

uint64_t brent_kung_prefix_sum(uint64_t result, unint64_t a2, int a3)
{
  unint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  if (a2 >= 2)
  {
    v3 = 2;
    v4 = 1;
    do
    {
      v5 = a2 >> v4;
      if (a2 >> v4)
      {
        v6 = result;
        do
        {
          *(float32x4_t *)(v6 + 16 * a3 * (v3 - 1)) = vaddq_f32(*(float32x4_t *)(v6 + 16 * a3 * (v3 - 1)), *(float32x4_t *)(v6 + a3 * (16 * v3 - 16 * (v3 >> 1) - 16)));
          v6 += 16 * (a3 << v4);
          --v5;
        }
        while (v5);
      }
      ++v4;
      v3 *= 2;
    }
    while (v3 <= a2);
    do
    {
      --v4;
      v7 = v3 >> 1;
      v8 = (a2 - (v3 >> 2)) >> v4;
      if (v8)
      {
        v10 = result;
        do
        {
          v9 = 16 * a3 * (v7 + (v3 >> 2) - 1);
          *(float32x4_t *)(v10 + v9) = vaddq_f32(*(float32x4_t *)(v10 + v9), *(float32x4_t *)(v10 + a3 * (16 * v7 - 16)));
          v10 += 16 * (a3 << v4);
          --v8;
        }
        while (v8);
      }
      v11 = v3 > 5;
      v3 >>= 1;
    }
    while (v11);
  }
  return result;
}

uint64_t init_compute_averages(int *a1, int a2, _OWORD *a3, uint64_t a4)
{
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  char v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  if (v6 <= 1)
    v7 = 32;
  else
    v7 = 16;
  if (v6 <= 1)
    v8 = 1;
  else
    v8 = 16;
  if (v6 <= 1)
    v9 = 0;
  else
    v9 = (2 * a2) | 1;
  if (v6 > 1)
    v10 = 4;
  else
    v10 = 5;
  if (v6 < v8)
    v8 = a1[2];
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_QWORD *)a4 = a1;
  *(_OWORD *)(a4 + 8) = *a3;
  *(_BYTE *)(a4 + 24) = v6 > 1;
  *(_DWORD *)(a4 + 28) = a2;
  *(_DWORD *)(a4 + 64) = v4;
  *(_DWORD *)(a4 + 68) = v5;
  *(_DWORD *)(a4 + 72) = v6;
  *(_DWORD *)(a4 + 76) = v7;
  *(_DWORD *)(a4 + 80) = v8;
  *(_DWORD *)(a4 + 84) = 2 * (v7 + ((2 * a2) | 1)) * (v7 + ((2 * a2) | 1)) * (v8 + v9);
  return (v6 + v8 - 1) / v8 * ((v5 + v7 - 1) >> v10);
}

void compute_pixel_region_variance()
{
  __assert_rtn("compute_pixel_region_variance", "astcenc_compute_variance.cpp", 237, "img->data_type == ASTCENC_TYPE_F32");
}

uint64_t get_ise_sequence_bitcount(int a1, unsigned int a2)
{
  if (a2 > 0x14)
    return 1024;
  else
    return (((ise_sizes[a2] >> 5) | 1) + (ise_sizes[a2] & 0x3Fu) * a1 - 1) / ((ise_sizes[a2] >> 5) | 1u);
}

uint64_t encode_ise(uint64_t result, unsigned int a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5)
{
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  _BYTE *v22;
  char v23;
  _BYTE *v24;
  char v25;
  int v26;
  _BYTE *v27;
  int v28;
  char v29;
  unint64_t v30;
  _BYTE *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned __int8 *v37;
  unsigned int v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  _BYTE *v54;
  int v55;
  char v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned __int8 *v62;
  unsigned int v63;
  char *v64;
  char *v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;

  if (!a2)
    encode_ise();
  v5 = btq_counts[result];
  v6 = v5 & 0x3F;
  v7 = ~(-1 << v5);
  if ((v5 & 0x40) != 0)
  {
    if (a2 >= 5)
    {
      v10 = 0;
      v11 = a2 / 5;
      v12 = v6 + 2;
      v13 = ~(-4 << v6);
      v14 = ~(-2 << v6);
      v15 = 3 * v6 + 5;
      result = (2 * v6 + 4);
      do
      {
        v16 = &a3[v10];
        v17 = a3[v10 + 2] >> v6;
        v18 = a3[v10 + 1] >> v6;
        v19 = a3[v10];
        v20 = integer_of_trits[81 * (a3[v10 + 4] >> v6)
                             + 27 * (a3[v10 + 3] >> v6)
                             + 8 * v17
                             + 2 * v18
                             + v17
                             + v18
                             + (v19 >> v6)];
        *(_WORD *)(a4 + ((unint64_t)a5 >> 3)) = *(_WORD *)(a4 + ((unint64_t)a5 >> 3)) & ~(unsigned __int16)(v13 << (a5 & 7)) | (((((v20 & 3) << v6) | v19 & v7) & v13) << (a5 & 7));
        v21 = a5 + v12;
        v22 = (_BYTE *)(a4 + (v21 >> 3));
        LOBYTE(v19) = (a5 + v12) & 7;
        LODWORD(v17) = ((a3[v10 + 1] & v7 | (((v20 >> 2) & 3) << v6)) & v13) << v19;
        v23 = v22[1];
        *v22 = *v22 & ~(v13 << v19) | v17;
        v22[1] = v23 & ((unsigned __int16)~((_WORD)v13 << v19) >> 8) | BYTE1(v17);
        v24 = (_BYTE *)(a4 + ((unint64_t)(result + a5) >> 3));
        LOBYTE(v17) = (2 * v6 + 4 + a5) & 7;
        v25 = *v24 & ~(v14 << v17);
        v26 = ~(v14 << v17);
        LODWORD(v17) = ((a3[v10 + 2] & v7 | (((v20 >> 4) & 1) << v6)) & v14) << v17;
        *v24 = v25 | v17;
        v24[1] = v24[1] & BYTE1(v26) | BYTE1(v17);
        v27 = (_BYTE *)(a4 + ((unint64_t)(v15 + a5) >> 3));
        LOBYTE(v17) = (v15 + a5) & 7;
        v28 = v13 << v17;
        LODWORD(v17) = ((a3[v10 + 3] & v7 | (((v20 >> 5) & 3) << v6)) & v13) << v17;
        v29 = v27[1];
        *v27 = *v27 & ~(_BYTE)v28 | v17;
        v27[1] = v29 & ~BYTE1(v28) | BYTE1(v17);
        v30 = 4 * v6 + 7 + a5;
        v10 += 5;
        LODWORD(v16) = (v16[4] & v7 | (v20 >> 7 << v6)) & v14;
        v31 = (_BYTE *)(a4 + (v30 >> 3));
        LOBYTE(v30) = v30 & 7;
        LODWORD(v22) = v14 << v30;
        LODWORD(v30) = (_DWORD)v16 << v30;
        LOBYTE(v27) = v31[1];
        *v31 = *v31 & ~(_BYTE)v22 | v30;
        v31[1] = v27 & ((unsigned __int16)~(_WORD)v22 >> 8) | BYTE1(v30);
        a5 = v21 + v12 + v6 + 1 + v12 + v6 + 1;
        --v11;
      }
      while (v11);
    }
    else
    {
      LODWORD(v10) = 0;
    }
    if (a2 != (_DWORD)v10)
    {
      v32 = (int)v10 + 3 >= a2 ? 0 : a3[(v10 + 3)] >> v6;
      v34 = (int)v10 + 2 >= a2 ? 0 : a3[(v10 + 2)] >> v6;
      v35 = (int)v10 + 1 >= a2 ? 0 : a3[(v10 + 1)] >> v6;
      v36 = a2 - v10;
      if (a2 > v10)
      {
        v37 = &a3[v10];
        v38 = integer_of_trits[27 * v32 + 9 * v34 + 3 * v35 + (*v37 >> v6)];
        v39 = &encode_ise(quant_method,unsigned int,unsigned char const*,unsigned char *,unsigned int)::tshift;
        v40 = &encode_ise(quant_method,unsigned int,unsigned char const*,unsigned char *,unsigned int)::tbits;
        do
        {
          v41 = *v37++;
          v42 = v41 & v7;
          LOBYTE(v41) = *v39++;
          v43 = v38 >> v41;
          v44 = *v40++;
          result = a4 + ((unint64_t)a5 >> 3);
          *(_WORD *)result = *(_WORD *)result & ~(unsigned __int16)(~(-1 << (v44 + v6)) << (a5 & 7)) | (((((v43 & ~(-1 << v44)) << v6) | v42) & ~(-1 << (v44 + v6))) << (a5 & 7));
          a5 += v44 + v6;
          --v36;
        }
        while (v36);
      }
    }
  }
  else if ((btq_counts[result] & 0x80) != 0)
  {
    if (a2 >= 3)
    {
      v33 = 0;
      v45 = a2 / 3;
      v46 = v6 + 3;
      v47 = ~(-8 << v6);
      v48 = ~(-4 << v6);
      result = 25;
      do
      {
        v50 = &a3[v33];
        v51 = a3[v33];
        v52 = a3[v33 + 1] >> v6;
        v53 = integer_of_quints[25 * (a3[v33 + 2] >> v6) + 4 * v52 + v52 + (v51 >> v6)];
        LODWORD(v52) = (((v53 & 7) << v6) | v51 & v7) & v47;
        v54 = (_BYTE *)(a4 + ((unint64_t)a5 >> 3));
        v55 = v47 << (a5 & 7);
        LODWORD(v52) = (_DWORD)v52 << (a5 & 7);
        v56 = v54[1];
        *v54 = *v54 & ~(_BYTE)v55 | v52;
        v54[1] = v56 & ((unsigned __int16)~(_WORD)v55 >> 8) | BYTE1(v52);
        v57 = (unsigned __int8 *)(a4 + ((unint64_t)(v46 + a5) >> 3));
        LOBYTE(v52) = (v46 + a5) & 7;
        v58 = *v57 & ~(v48 << v52);
        v59 = ~(v48 << v52);
        LODWORD(v52) = ((a3[v33 + 1] & v7 | (((v53 >> 3) & 3) << v6)) & v48) << v52;
        *v57 = v58 | v52;
        v57[1] = v57[1] & BYTE1(v59) | BYTE1(v52);
        v33 += 3;
        v49 = 2 * v6 + 5;
        *(_WORD *)(a4 + ((unint64_t)(v49 + a5) >> 3)) = *(_WORD *)(a4 + ((unint64_t)(v49 + a5) >> 3)) & ~(unsigned __int16)(v48 << ((v49 + a5) & 7)) | (((v50[2] & v7 | (((v53 >> 5) & 3) << v6)) & v48) << ((v49 + a5) & 7));
        a5 += 3 * v6 + 7;
        --v45;
      }
      while (v45);
    }
    else
    {
      LODWORD(v33) = 0;
    }
    if (a2 != (_DWORD)v33)
    {
      if ((int)v33 + 1 >= a2)
        v60 = 0;
      else
        v60 = a3[(v33 + 1)] >> v6;
      v61 = a2 - v33;
      if (a2 > v33)
      {
        v62 = &a3[v33];
        v63 = integer_of_quints[5 * v60 + (*v62 >> v6)];
        v64 = &encode_ise(quant_method,unsigned int,unsigned char const*,unsigned char *,unsigned int)::tshift;
        v65 = &encode_ise(quant_method,unsigned int,unsigned char const*,unsigned char *,unsigned int)::tbits;
        do
        {
          v66 = *v62++;
          v67 = v66 & v7;
          LOBYTE(v66) = *v64++;
          v68 = v63 >> v66;
          v69 = *v65++;
          result = a4 + ((unint64_t)a5 >> 3);
          *(_WORD *)result = *(_WORD *)result & ~(unsigned __int16)(~(-1 << (v69 + v6)) << (a5 & 7)) | (((((v68 & ~(-1 << v69)) << v6) | v67) & ~(-1 << (v69 + v6))) << (a5 & 7));
          a5 += v69 + v6;
          --v61;
        }
        while (v61);
      }
    }
  }
  else
  {
    v8 = a2;
    do
    {
      v9 = *a3++;
      *(_WORD *)(a4 + ((unint64_t)a5 >> 3)) = *(_WORD *)(a4 + ((unint64_t)a5 >> 3)) & ~(unsigned __int16)(v7 << (a5 & 7)) | ((v9 & v7) << (a5 & 7));
      a5 += v6;
      --v8;
    }
    while (v8);
  }
  return result;
}

void encode_ise()
{
  __assert_rtn("encode_ise", "astcenc_integer_sequence.cpp", 500, "character_count > 0");
}

uint64_t FSE_versionNumber()
{
  return 900;
}

BOOL FSE_isError(unint64_t a1)
{
  return a1 > 0xFFFFFFFFFFFFFF88;
}

const char *FSE_getErrorName(unint64_t a1)
{
  if (a1 >= 0xFFFFFFFFFFFFFF89)
    return ERR_getErrorString(-(int)a1);
  else
    return ERR_getErrorString(0);
}

BOOL HUF_isError(unint64_t a1)
{
  return a1 > 0xFFFFFFFFFFFFFF88;
}

const char *HUF_getErrorName(unint64_t a1)
{
  if (a1 >= 0xFFFFFFFFFFFFFF89)
    return ERR_getErrorString(-(int)a1);
  else
    return ERR_getErrorString(0);
}

unint64_t FSE_readNCount_bmi2(void *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, size_t a5)
{
  unint64_t result;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  signed int v17;
  unsigned int v18;
  unint64_t v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  if (a5 <= 7)
  {
    v42[0] = 0;
    memcpy(v42, a4, a5);
    result = FSE_readNCount_bmi2(a1, a2, a3, v42, 8);
    if (result > a5 && result < 0xFFFFFFFFFFFFFF89)
      return -20;
    return result;
  }
  v12 = (*a2 + 1);
  bzero(a1, 2 * v12);
  v13 = *a4 & 0xF;
  if (v13 > 0xA)
    return -44;
  v14 = 0;
  v15 = *a4 >> 4;
  *a3 = v13 + 5;
  v16 = 32 << v13;
  v17 = (32 << v13) | 1;
  v18 = v13 + 6;
  v19 = (unint64_t)a4 + a5 - 7;
  v20 = (_DWORD *)((char *)a4 + a5 - 4);
  v21 = 4;
  v22 = a4;
  while (1)
  {
    v30 = 2 * v16 - 1;
    v31 = v30 - v17;
    v32 = v15 & (v16 - 1);
    v33 = v15 & v30;
    if (v33 >= v16)
      v34 = v30 - v17;
    else
      v34 = 0;
    v35 = v33 - v34;
    v36 = v18 - 1;
    if (v32 < v31)
      v35 = v32;
    else
      v36 = v18;
    v28 = v36 + v21;
    v37 = v35 - 1;
    if (v35 <= 0)
      v38 = v35 - 1;
    else
      v38 = 1 - v35;
    v17 += v38;
    *((_WORD *)a1 + v14++) = v37;
    v39 = v37 != 0;
    if (v17 < v16)
    {
      if (v17 < 2)
        goto LABEL_43;
      v40 = __clz(v17);
      v18 = 32 - v40;
      v16 = 1 << (v40 ^ 0x1F);
    }
    if (v14 >= v12)
      break;
    v41 = (uint64_t)v28 >> 3;
    if ((unint64_t)v22 <= v19 || (_DWORD *)((char *)v22 + v41) <= v20)
    {
      v22 = (_DWORD *)((char *)v22 + v41);
      v21 = v28 & 7;
      v15 = *v22 >> v21;
      if (!v39)
        goto LABEL_11;
    }
    else
    {
      v21 = ((_BYTE)v28 + 8 * ((_BYTE)v22 - (_BYTE)v20)) & 0x1F;
      v22 = (_DWORD *)((char *)a4 + a5 - 4);
      v15 = *v20 >> v21;
      if (!v39)
      {
LABEL_11:
        v23 = __clz(__rbit32(~v15 | 0x80000000));
        if (v23 >= 0x18)
        {
          do
          {
            v24 = ((_BYTE)v21 + 8 * ((_BYTE)v22 - (_BYTE)v19)) & 0x1F;
            v25 = (unint64_t)v22 > v19;
            if ((unint64_t)v22 <= v19)
              v22 = (_DWORD *)((char *)v22 + 3);
            else
              v22 = (_DWORD *)((char *)a4 + a5 - 4);
            if (v25)
              v21 = v24;
            v15 = *v22 >> v21;
            v23 = __clz(__rbit32(~v15 | 0x80000000));
            v14 += 36;
          }
          while (v23 > 0x17);
        }
        v26 = 3 * (v23 >> 1);
        v27 = v23 & 0x1E;
        v14 += v26 + ((v15 >> v27) & 3);
        v28 = v21 + v27 + 2;
        if (v14 >= v12)
          goto LABEL_43;
        v29 = v28 >> 3;
        if ((unint64_t)v22 <= v19 || (_DWORD *)((char *)v22 + v29) <= v20)
        {
          v22 = (_DWORD *)((char *)v22 + v29);
          v21 = v28 & 7;
        }
        else
        {
          v21 = ((_BYTE)v28 + 8 * ((_BYTE)v22 - (_BYTE)v20)) & 0x1F;
          v22 = (_DWORD *)((char *)a4 + a5 - 4);
        }
        v15 = *v22 >> v21;
      }
    }
  }
  if (v17 != 1)
    return -20;
LABEL_43:
  if (v14 > v12)
    return -48;
  if (v28 > 32)
    return -20;
  *a2 = v14 - 1;
  return (char *)v22 + ((v28 + 7) >> 3) - (char *)a4;
}

uint64_t HUF_readStats(unsigned __int8 *a1, unint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, char *a6, unint64_t a7)
{
  unsigned __int16 v8[178];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  return HUF_readStats_wksp(a1, a2, a3, a4, a5, a6, a7, v8, 0x164uLL);
}

uint64_t HUF_readStats_wksp(unsigned __int8 *a1, unint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, char *a6, unint64_t a7, unsigned __int16 *a8, unint64_t a9)
{
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  char v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  char *v38;
  int8x16_t v39;
  unint64_t v40;
  int8x16_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  int8x8_t v45;
  int8x8x2_t v46;
  int8x16x2_t v47;

  if (!a7)
    return -72;
  v13 = *a6;
  if ((*a6 & 0x80000000) == 0)
  {
    if (v13 < a7)
    {
      v14 = FSE_decompress_wksp_bmi2(a1, a2 - 1, a6 + 1, *a6, 6u, a8, a9);
      v15 = v13;
      v16 = v14;
      if (v14 > 0xFFFFFFFFFFFFFF88)
        return v16;
      goto LABEL_25;
    }
    return -72;
  }
  v15 = (v13 - 126) >> 1;
  if (v15 >= a7)
    return -72;
  v14 = v13 - 127;
  if (v13 - 127 < a2)
  {
    if (v13 != 127)
    {
      if ((v13 - 127) <= 2uLL)
        v18 = 2;
      else
        v18 = (v13 - 127);
      if (v18 < 0xF
        || ((v19 = (unint64_t)(a6 + 1), v20 = (v18 - 1) >> 1, &a6[v20 + 2] > (char *)a1)
          ? (v21 = v19 >= (unint64_t)&a1[((v18 - 1) & 0xFFFFFFFFFFFFFFFELL) + 2])
          : (v21 = 1),
            !v21))
      {
        v24 = 0;
        goto LABEL_23;
      }
      v22 = v20 + 1;
      if (v18 >= 0x3F)
      {
        v37 = 0;
        v23 = v22 & 0x7FFFFFFFFFFFFFE0;
        v38 = (char *)(a1 + 32);
        v39.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v39.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        do
        {
          v40 = v19 + (v37 & 0x7FFFFFFFFFFFFFE0);
          v41 = *(int8x16_t *)(v40 + 16);
          v47.val[0] = (int8x16_t)vshrq_n_u8(*(uint8x16_t *)v40, 4uLL);
          v47.val[1] = vandq_s8(*(int8x16_t *)v40, v39);
          v42 = v38 - 32;
          vst2q_s8(v42, v47);
          v47.val[0] = (int8x16_t)vshrq_n_u8((uint8x16_t)v41, 4uLL);
          v47.val[1] = vandq_s8(v41, v39);
          vst2q_s8(v38, v47);
          v37 += 32;
          v38 += 64;
        }
        while (v23 != v37);
        if (v22 == v23)
          goto LABEL_25;
        if ((v22 & 0x18) == 0)
        {
          v24 = 2 * v23;
LABEL_23:
          v25 = (unsigned __int8 *)&a6[(v24 >> 1) + 1];
          do
          {
            v26 = &a1[v24];
            *v26 = *v25 >> 4;
            v27 = *v25++;
            v26[1] = v27 & 0xF;
            v24 += 2;
          }
          while (v24 < (v13 - 127));
          goto LABEL_25;
        }
      }
      else
      {
        v23 = 0;
      }
      v43 = v22 & 0x7FFFFFFFFFFFFFF8;
      v24 = 2 * (v22 & 0x7FFFFFFFFFFFFFF8);
      v44 = (char *)&a1[2 * v23];
      do
      {
        v45 = *(int8x8_t *)(v19 + (v23 & 0x7FFFFFFFFFFFFFF8));
        v46.val[0] = (int8x8_t)vshr_n_u8((uint8x8_t)v45, 4uLL);
        v46.val[1] = vand_s8(v45, (int8x8_t)0xF0F0F0F0F0F0F0FLL);
        vst2_s8(v44, v46);
        v44 += 16;
        v23 += 8;
      }
      while (v43 != v23);
      if (v22 != v43)
        goto LABEL_23;
LABEL_25:
      *(_DWORD *)(a3 + 48) = 0;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)a3 = 0u;
      if (v14)
      {
        v28 = 0;
        v29 = 0;
        v30 = 1;
        while (1)
        {
          v31 = a1[v28];
          if (v31 > 0xB)
            break;
          ++*(_DWORD *)(a3 + 4 * v31);
          v29 += 1 << a1[v28] >> 1;
          v28 = v30++;
          if (v14 <= v28)
          {
            if (!v29)
              return -20;
            v32 = __clz(v29);
            if ((v32 ^ 0x1F) > 0xB)
              return -20;
            *a5 = 32 - v32;
            v33 = (2 << (v32 ^ 0x1F)) - v29;
            v34 = __clz(v33) ^ 0x1F;
            if (1 << v34 != v33)
              return -20;
            v35 = v34 + 1;
            a1[v14] = v35;
            ++*(_DWORD *)(a3 + 4 * v35);
            v36 = *(_DWORD *)(a3 + 4);
            v16 = -20;
            if (v36 >= 2 && (v36 & 1) == 0)
            {
              *a4 = v14 + 1;
              return v15 + 1;
            }
            return v16;
          }
        }
      }
      return -20;
    }
    *(_DWORD *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return -20;
}

const char *ERR_getErrorString(int a1)
{
  const char *result;

  result = "No error detected";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "Error (generic)";
      break;
    case 10:
      result = "Unknown frame descriptor";
      break;
    case 12:
      result = "Version not supported";
      break;
    case 14:
      result = "Unsupported frame parameter";
      break;
    case 16:
      result = "Frame requires too much memory for decoding";
      break;
    case 20:
      result = "Corrupted block detected";
      break;
    case 22:
      result = "Restored data doesn't match checksum";
      break;
    case 30:
      result = "Dictionary is corrupted";
      break;
    case 32:
      result = "Dictionary mismatch";
      break;
    case 34:
      result = "Cannot create Dictionary from provided samples";
      break;
    case 40:
      result = "Unsupported parameter";
      break;
    case 42:
      result = "Parameter is out of bound";
      break;
    case 44:
      result = "tableLog requires too much memory : unsupported";
      break;
    case 46:
      result = "Unsupported max Symbol Value : too large";
      break;
    case 48:
      result = "Specified maxSymbolValue is too small";
      break;
    case 60:
      result = "Operation not authorized at current processing stage";
      break;
    case 62:
      result = "Context should be init first";
      break;
    case 64:
      result = "Allocation error : not enough memory";
      break;
    case 66:
      result = "workSpace buffer is not large enough";
      break;
    case 70:
      result = "Destination buffer is too small";
      break;
    case 72:
      result = "Src size is incorrect";
      break;
    case 74:
      result = "Operation on NULL destination buffer";
      break;
    case 100:
      result = "Frame index is too large";
      break;
    case 102:
      result = "An I/O error occurred when reading/seeking";
      break;
    case 104:
      result = "Destination buffer is wrong";
      break;
    case 105:
      result = "Source buffer is wrong";
      break;
    default:
      result = "Unspecified error code";
      break;
  }
  return result;
}

void *FSE_createDTable(unsigned int a1)
{
  char v1;

  if (a1 >= 0xF)
    v1 = 15;
  else
    v1 = a1;
  return malloc_type_malloc(((4 << v1) + 4), 0x100004052888210uLL);
}

uint64_t FSE_buildDTable_internal(_WORD *a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 v14;
  unsigned int v15;
  signed int v16;
  _WORD *v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int64x2_t v30;
  int64x2_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int i;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;

  v6 = -46;
  if (a3 > 0xFF)
    return v6;
  v7 = a3 + 1;
  if ((1 << a4) + 2 * (unint64_t)v7 + 8 > a6)
    return v6;
  if (a4 > 0xC)
    return -44;
  v9 = 0;
  v10 = a1 + 2;
  v11 = a5 + 2 * a3;
  v12 = (1 << a4);
  v13 = (v12 - 1);
  v14 = 1;
  v15 = v12 - 1;
  do
  {
    while (1)
    {
      v16 = *(__int16 *)(a2 + 2 * v9);
      if (v16 != -1)
        break;
      v17 = &v10[2 * v15--];
      *((_BYTE *)v17 + 2) = v9;
      *(_WORD *)(a5 + 2 * v9++) = 1;
      if (v7 == v9)
        goto LABEL_12;
    }
    if ((int)((0x8000 << a4) >> 16) <= v16)
      v14 = 0;
    *(_WORD *)(a5 + 2 * v9++) = v16;
  }
  while (v7 != v9);
LABEL_12:
  *a1 = a4;
  a1[1] = v14;
  v18 = v12 >> 1;
  if (v15 == (_DWORD)v13)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = v18 + (v12 >> 3) + 3;
    v23 = a5 + 2 * a3;
    while (1)
    {
      v24 = *(__int16 *)(a2 + 2 * v19);
      v25 = *(unsigned __int16 *)(a2 + 2 * v19);
      *(_QWORD *)(v11 + 2 + v21) = v20;
      if (v24 >= 9)
      {
        if (v25 <= 0x10)
          v26 = 16;
        else
          v26 = v25;
        v27 = v26 - 9;
        if (v27 >= 0x18)
        {
          v29 = (v27 >> 3) + 1;
          v28 = (32 * ((v29 & 0x3FFFFFFFFFFFFFFCuLL) >> 2)) | 8;
          v30 = vdupq_n_s64(v20);
          v31 = (int64x2_t *)(v23 + 26 + v21);
          v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v31[-1] = v30;
            *v31 = v30;
            v31 += 2;
            v32 -= 4;
          }
          while (v32);
          if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_14;
        }
        else
        {
          v28 = 8;
        }
        v33 = v28 + 2;
        do
        {
          *(_QWORD *)(v23 + v21 + v33) = v20;
          v34 = v33 + 6;
          v33 += 8;
        }
        while (v34 < v25);
      }
LABEL_14:
      v21 += (__int16)v25;
      ++v19;
      v20 += 0x101010101010101;
      if (v19 == v7)
      {
        v39 = 0;
        v40 = 0;
        do
        {
          LOBYTE(v10[2 * (v40 & v13) + 1]) = *(_BYTE *)(v11 + v39 + 2);
          LOBYTE(v10[2 * (((_DWORD)v40 + v22) & v13) + 1]) = *(_BYTE *)(v11 + v39 + 3);
          v40 = ((_DWORD)v40 + 2 * v22) & v13;
          v39 += 2;
        }
        while (v39 < v12);
        goto LABEL_40;
      }
    }
  }
  v35 = 0;
  v36 = 0;
  do
  {
    v37 = *(__int16 *)(a2 + 2 * v35);
    if (v37 >= 1)
    {
      for (i = 0; i != v37; ++i)
      {
        LOBYTE(v10[2 * v36 + 1]) = v35;
        do
          v36 = (v18 + (v12 >> 3) + 3 + v36) & v13;
        while (v36 > v15);
      }
    }
    ++v35;
  }
  while (v35 != v7);
  if (v36)
    return -1;
LABEL_40:
  v41 = (char *)a1 + 7;
  v42 = (1 << a4);
  do
  {
    v43 = 2 * *(v41 - 1);
    v44 = *(unsigned __int16 *)(a5 + v43);
    *(_WORD *)(a5 + v43) = v44 + 1;
    LOBYTE(v43) = a4 + 1 + (__clz(v44) ^ 0xE0);
    *v41 = v43;
    *(_WORD *)(v41 - 3) = ((_WORD)v44 << v43) - v12;
    v41 += 4;
    --v42;
  }
  while (v42);
  return 0;
}

uint64_t FSE_buildDTable_rle(uint64_t a1, char a2)
{
  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = a2;
  *(_BYTE *)(a1 + 7) = 0;
  return 0;
}

uint64_t FSE_buildDTable_raw(_WORD *a1, int a2)
{
  unsigned int v2;
  uint64_t v3;

  if (!a2)
    return -1;
  *a1 = a2;
  v2 = 1;
  a1[1] = 1;
  do
  {
    v3 = (uint64_t)&a1[2 * v2];
    *(_WORD *)v3 = 0;
    *(_BYTE *)(v3 + 2) = v2 - 1;
    *(_BYTE *)(v3 + 3) = a2;
  }
  while (!(v2++ >> a2));
  return 0;
}

uint64_t FSE_decompress_usingDTable(_BYTE *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int16 *a5)
{
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unsigned __int16 *v28;
  _BYTE *v29;
  unsigned __int8 *v30;
  _BOOL4 v31;
  unsigned int v32;
  unsigned __int16 *v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  unsigned __int16 *v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  unsigned __int16 *v56;
  uint64_t v57;
  char v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int v63;
  unsigned __int16 *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  _BYTE *v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unsigned int v72;
  unsigned __int16 *v73;
  _BYTE *i;
  unsigned __int8 *v75;
  _BOOL4 v76;
  unsigned int v77;
  unsigned __int16 *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned __int16 *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unsigned __int16 *v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  int v94;
  unsigned __int16 *v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  unint64_t v99;
  _BYTE *v100;
  unsigned __int16 *v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  int v108;
  unint64_t v109;
  unsigned __int16 *v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  _BYTE *v117;

  v5 = &a1[a2];
  v6 = (unint64_t)&a1[a2 - 3];
  if (a5[1])
  {
    if (a4)
    {
      v7 = a4 - 8;
      if (a4 >= 8)
      {
        if (a3[a4 - 1])
        {
          if (a4 > 0xFFFFFFFFFFFFFF88)
            return a4;
          v8 = *(_QWORD *)&a3[v7];
          v9 = __clz(a3[a4 - 1]) - 23;
LABEL_22:
          v14 = *a5;
          v15 = v9 + v14;
          v16 = v8 >> -(char)v15;
          v17 = BIT_mask[v14];
          if (v15 > 0x40)
            goto LABEL_49;
          if (v7 >= 8)
          {
            v18 = v15 >> 3;
            v15 &= 7u;
          }
          else
          {
            if (!v7)
              goto LABEL_49;
            if (&a3[v7 - (v15 >> 3)] >= a3)
              v18 = v15 >> 3;
            else
              v18 = v7;
            v15 -= 8 * v18;
          }
          v7 -= v18;
          v8 = *(_QWORD *)&a3[v7];
LABEL_49:
          v24 = v16 & v17;
          v25 = v15 + v14;
          v26 = (v8 >> -(char)(v15 + v14)) & v17;
          if (v25 > 0x40)
            goto LABEL_58;
          if (v7 >= 8)
          {
            v27 = v25 >> 3;
            v25 &= 7u;
          }
          else
          {
            if (!v7)
              goto LABEL_58;
            if (&a3[v7 - (v25 >> 3)] >= a3)
              v27 = v25 >> 3;
            else
              v27 = v7;
            v25 -= 8 * v27;
          }
          v7 -= v27;
          v8 = *(_QWORD *)&a3[v7];
LABEL_58:
          v28 = a5 + 2;
          v29 = a1;
          if (v25 > 0x40)
          {
LABEL_69:
            v52 = (unint64_t)(v5 - 2);
            if (v29 <= v5 - 2)
            {
LABEL_70:
              v53 = (_BYTE *)(v29 - a1);
              v54 = v29 + 1;
              v55 = 2;
              while (1)
              {
                v56 = &v28[2 * v24];
                v57 = *v56;
                v58 = *((_BYTE *)v56 + 2);
                v59 = *((unsigned __int8 *)v56 + 3);
                v60 = v25 + v59;
                *(v54 - 1) = v58;
                if (v25 + v59 > 0x40)
                {
LABEL_145:
                  *v54 = v28[2 * v26 + 1];
                  return (uint64_t)&v53[v55];
                }
                if (v7 >= 8)
                {
                  v63 = v60 >> 3;
                  v60 &= 7u;
                  v7 -= v63;
                  v62 = *(_QWORD *)&a3[v7];
                  if ((unint64_t)v54 > v52)
                    return -70;
                }
                else if (v7)
                {
                  if (&a3[v7 - (v60 >> 3)] >= a3)
                    v61 = v60 >> 3;
                  else
                    v61 = v7;
                  v60 -= 8 * v61;
                  v7 -= v61;
                  v62 = *(_QWORD *)&a3[v7];
                  if ((unint64_t)v54 > v52)
                    return -70;
                }
                else
                {
                  v62 = v8;
                  if ((unint64_t)v54 > v52)
                    return -70;
                }
                v24 = (v8 << v25 >> -(char)v59) + v57;
                v64 = &v28[2 * v26];
                v65 = *v64;
                v66 = *((unsigned __int8 *)v64 + 3);
                v25 = v60 + v66;
                *v54 = *((_BYTE *)v64 + 2);
                if (v60 + v66 > 0x40)
                {
                  ++v54;
                  v55 = 3;
                  v26 = v24;
                  goto LABEL_145;
                }
                if (v7 >= 8)
                {
                  v67 = v25 >> 3;
                  v25 &= 7u;
                }
                else
                {
                  if (!v7)
                  {
                    v8 = v62;
                    goto LABEL_91;
                  }
                  if (&a3[v7 - (v25 >> 3)] >= a3)
                    v67 = v25 >> 3;
                  else
                    v67 = v7;
                  v25 -= 8 * v67;
                }
                v7 -= v67;
                v8 = *(_QWORD *)&a3[v7];
LABEL_91:
                v26 = (v62 << v60 >> -(char)v66) + v65;
                v53 += 2;
                v68 = v54 + 1;
                v54 += 2;
                a4 = -70;
                if ((unint64_t)v68 > v52)
                  return a4;
              }
            }
          }
          else
          {
            while (1)
            {
              if (v7 >= 8)
              {
                v31 = 0;
                v32 = v25 >> 3;
                v25 &= 7u;
              }
              else
              {
                if (!v7)
                  goto LABEL_69;
                v30 = &a3[v7 - (v25 >> 3)];
                v31 = v30 < a3;
                v32 = v30 >= a3 ? v25 >> 3 : v7;
                v25 -= 8 * v32;
              }
              v7 -= v32;
              v8 = *(_QWORD *)&a3[v7];
              if ((unint64_t)v29 >= v6 || v31)
                break;
              v33 = &v28[2 * v24];
              v34 = *v33;
              v35 = *((_BYTE *)v33 + 2);
              LODWORD(v33) = *((unsigned __int8 *)v33 + 3);
              v36 = v8 << v25 >> -(char)v33;
              v37 = v25 + (_DWORD)v33;
              v38 = v36 + v34;
              *v29 = v35;
              v39 = &v28[2 * v26];
              v40 = *v39;
              v41 = *((_BYTE *)v39 + 2);
              LODWORD(v39) = *((unsigned __int8 *)v39 + 3);
              v42 = v8 << v37 >> -(char)v39;
              LODWORD(v39) = v37 + (_DWORD)v39;
              v43 = v42 + v40;
              v29[1] = v41;
              v44 = &v28[2 * v38];
              v45 = *v44;
              v46 = *((_BYTE *)v44 + 2);
              LODWORD(v44) = *((unsigned __int8 *)v44 + 3);
              v47 = v8 << (char)v39 >> -(char)v44;
              LODWORD(v39) = (_DWORD)v39 + (_DWORD)v44;
              v24 = v47 + v45;
              v29[2] = v46;
              v48 = &v28[2 * v43];
              v49 = *v48;
              v50 = *((_BYTE *)v48 + 2);
              LODWORD(v48) = *((unsigned __int8 *)v48 + 3);
              v51 = v8 << (char)v39 >> -(char)v48;
              v25 = (_DWORD)v39 + (_DWORD)v48;
              v26 = v51 + v49;
              v29[3] = v50;
              v29 += 4;
              if (v25 > 0x40)
                goto LABEL_69;
            }
            v52 = (unint64_t)(v5 - 2);
            if (v29 <= v5 - 2)
              goto LABEL_70;
          }
          return -70;
        }
        return -1;
      }
      v8 = *a3;
      switch(a4)
      {
        case 2uLL:
          goto LABEL_19;
        case 3uLL:
          goto LABEL_18;
        case 4uLL:
          goto LABEL_17;
        case 5uLL:
          goto LABEL_16;
        case 6uLL:
          goto LABEL_15;
        case 7uLL:
          v8 |= (unint64_t)a3[6] << 48;
LABEL_15:
          v8 += (unint64_t)a3[5] << 40;
LABEL_16:
          v8 += (unint64_t)a3[4] << 32;
LABEL_17:
          v8 += (unint64_t)a3[3] << 24;
LABEL_18:
          v8 += (unint64_t)a3[2] << 16;
LABEL_19:
          v8 += (unint64_t)a3[1] << 8;
          break;
        default:
          break;
      }
      if (a3[a4 - 1])
      {
        v7 = 0;
        v9 = __clz(a3[a4 - 1]) - 8 * a4 + 41;
        goto LABEL_22;
      }
      return -20;
    }
    return -72;
  }
  if (!a4)
    return -72;
  v10 = a4 - 8;
  if (a4 < 8)
  {
    v11 = *a3;
    switch(a4)
    {
      case 2uLL:
        goto LABEL_35;
      case 3uLL:
        goto LABEL_34;
      case 4uLL:
        goto LABEL_33;
      case 5uLL:
        goto LABEL_32;
      case 6uLL:
        goto LABEL_31;
      case 7uLL:
        v11 |= (unint64_t)a3[6] << 48;
LABEL_31:
        v11 += (unint64_t)a3[5] << 40;
LABEL_32:
        v11 += (unint64_t)a3[4] << 32;
LABEL_33:
        v11 += (unint64_t)a3[3] << 24;
LABEL_34:
        v11 += (unint64_t)a3[2] << 16;
LABEL_35:
        v11 += (unint64_t)a3[1] << 8;
        break;
      default:
        break;
    }
    if (!a3[a4 - 1])
      return -20;
    v10 = 0;
    v12 = __clz(a3[a4 - 1]) - 8 * a4 + 41;
  }
  else
  {
    if (!a3[a4 - 1])
      return -1;
    if (a4 > 0xFFFFFFFFFFFFFF88)
      return a4;
    v11 = *(_QWORD *)&a3[v10];
    v12 = __clz(a3[a4 - 1]) - 23;
  }
  v19 = *a5;
  v20 = v12 + v19;
  v21 = v11 >> -(char)(v12 + v19);
  v22 = BIT_mask[v19];
  if (v12 + v19 <= 0x40)
  {
    if (v10 >= 8)
    {
      v23 = v20 >> 3;
      v20 &= 7u;
    }
    else
    {
      if (!v10)
        goto LABEL_98;
      if (&a3[v10 - (v20 >> 3)] >= a3)
        v23 = v20 >> 3;
      else
        v23 = v10;
      v20 -= 8 * v23;
    }
    v10 -= v23;
    v11 = *(_QWORD *)&a3[v10];
  }
LABEL_98:
  v69 = v21 & v22;
  v70 = v20 + v19;
  v71 = (v11 >> -(char)(v20 + v19)) & v22;
  if (v70 <= 0x40)
  {
    if (v10 >= 8)
    {
      v72 = v70 >> 3;
      v70 &= 7u;
LABEL_106:
      v10 -= v72;
      v11 = *(_QWORD *)&a3[v10];
      goto LABEL_107;
    }
    if (v10)
    {
      if (&a3[v10 - (v70 >> 3)] >= a3)
        v72 = v70 >> 3;
      else
        v72 = v10;
      v70 -= 8 * v72;
      goto LABEL_106;
    }
  }
LABEL_107:
  v73 = a5 + 2;
  for (i = a1; v70 <= 0x40; i += 4)
  {
    if (v10 >= 8)
    {
      v76 = 0;
      v77 = v70 >> 3;
      v70 &= 7u;
    }
    else
    {
      if (!v10)
        break;
      v75 = &a3[v10 - (v70 >> 3)];
      v76 = v75 < a3;
      if (v75 >= a3)
        v77 = v70 >> 3;
      else
        v77 = v10;
      v70 -= 8 * v77;
    }
    v10 -= v77;
    v11 = *(_QWORD *)&a3[v10];
    if ((unint64_t)i >= v6)
      break;
    if (v76)
      break;
    v78 = &v73[2 * v69];
    v79 = *v78;
    v80 = *((_BYTE *)v78 + 2);
    v81 = *((unsigned __int8 *)v78 + 3);
    v82 = v70 + v81;
    v83 = ((v11 >> -(char)v82) & BIT_mask[v81]) + v79;
    *i = v80;
    v84 = &v73[2 * v71];
    v85 = *v84;
    v86 = *((_BYTE *)v84 + 2);
    v87 = *((unsigned __int8 *)v84 + 3);
    v88 = v82 + v87;
    v89 = ((v11 >> -(char)v88) & BIT_mask[v87]) + v85;
    i[1] = v86;
    v90 = &v73[2 * v83];
    v91 = *v90;
    v92 = *((_BYTE *)v90 + 2);
    v93 = *((unsigned __int8 *)v90 + 3);
    v94 = v88 + v93;
    v69 = ((v11 >> -(char)v94) & BIT_mask[v93]) + v91;
    i[2] = v92;
    v95 = &v73[2 * v89];
    v96 = *v95;
    v97 = *((_BYTE *)v95 + 2);
    v98 = *((unsigned __int8 *)v95 + 3);
    v70 = v94 + v98;
    v71 = ((v11 >> -(char)v70) & BIT_mask[v98]) + v96;
    i[3] = v97;
  }
  v99 = (unint64_t)(v5 - 2);
  if (i > v5 - 2)
    return -70;
  v53 = (_BYTE *)(i - a1);
  v100 = i + 1;
  v55 = 2;
  while (1)
  {
    v101 = &v73[2 * v69];
    v102 = *v101;
    v103 = *((_BYTE *)v101 + 2);
    v104 = *((unsigned __int8 *)v101 + 3);
    v105 = v70 + v104;
    v106 = BIT_mask[v104];
    *(v100 - 1) = v103;
    if (v105 > 0x40)
      break;
    if (v10 >= 8)
    {
      v108 = v105 & 7;
      v10 -= v105 >> 3;
      v109 = *(_QWORD *)&a3[v10];
      if ((unint64_t)v100 > v99)
        return -70;
    }
    else if (v10)
    {
      if (&a3[v10 - (v105 >> 3)] >= a3)
        v107 = v105 >> 3;
      else
        v107 = v10;
      v108 = v105 - 8 * v107;
      v10 -= v107;
      v109 = *(_QWORD *)&a3[v10];
      if ((unint64_t)v100 > v99)
        return -70;
    }
    else
    {
      v109 = v11;
      v108 = v105;
      if ((unint64_t)v100 > v99)
        return -70;
    }
    v69 = ((v11 >> -(char)v105) & v106) + v102;
    v110 = &v73[2 * v71];
    v111 = *v110;
    v112 = *((_BYTE *)v110 + 2);
    v113 = *((unsigned __int8 *)v110 + 3);
    v114 = v108 + v113;
    v115 = BIT_mask[v113];
    *v100 = v112;
    if (v114 > 0x40)
    {
      ++v100;
      v55 = 3;
      v71 = v69;
      break;
    }
    if (v10 >= 8)
    {
      v116 = v114 >> 3;
      v70 = v114 & 7;
    }
    else
    {
      if (!v10)
      {
        v11 = v109;
        v70 = v114;
        goto LABEL_141;
      }
      if (&a3[v10 - (v114 >> 3)] >= a3)
        v116 = v114 >> 3;
      else
        v116 = v10;
      v70 = v114 - 8 * v116;
    }
    v10 -= v116;
    v11 = *(_QWORD *)&a3[v10];
LABEL_141:
    v71 = ((v109 >> -(char)v114) & v115) + v111;
    v53 += 2;
    v117 = v100 + 1;
    v100 += 2;
    a4 = -70;
    if ((unint64_t)v117 > v99)
      return a4;
  }
  *v100 = v73[2 * v71 + 1];
  return (uint64_t)&v53[v55];
}

unint64_t FSE_decompress_wksp_bmi2(_BYTE *a1, uint64_t a2, _DWORD *a3, size_t a4, unsigned int a5, unsigned __int16 *a6, unint64_t a7)
{
  unint64_t result;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned __int16 *v39;
  unsigned int v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  _BOOL4 v51;
  unsigned int v52;
  unsigned __int16 *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unsigned __int16 *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unsigned __int16 *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  int v69;
  unsigned __int16 *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  unsigned __int16 *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  unint64_t v86;
  unsigned __int16 *v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _BYTE *v94;
  uint64_t v95;
  _BOOL4 v96;
  unsigned __int16 *v97;
  uint64_t v98;
  char v99;
  unint64_t v100;
  uint64_t v101;
  unsigned __int16 *v102;
  uint64_t v103;
  char v104;
  unint64_t v105;
  uint64_t v106;
  unsigned __int16 *v107;
  uint64_t v108;
  char v109;
  unint64_t v110;
  unsigned __int16 *v111;
  uint64_t v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  unsigned __int16 *v116;
  uint64_t v117;
  char v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  unsigned __int8 *v122;
  unint64_t v123;
  unsigned int v124;
  unsigned __int16 *v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  _BYTE *v129;
  unsigned int v130;
  unsigned int v131;
  _BYTE v132[512];
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v130 = 255;
  v131 = 0;
  result = FSE_readNCount_bmi2(v132, &v130, &v131, a3, a4);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  if (v131 > a5)
    return -44;
  v15 = (1 << v131) + 1;
  v16 = 4 * v15;
  if ((((1 << v131) + v16 + 2 * (v130 + 1) + 11) & 0xFFFFFFFFFFFFFFFCLL) > a7)
    return -44;
  v17 = result;
  result = FSE_buildDTable_internal(a6, (uint64_t)v132, v130, v131, (uint64_t)&a6[2 * v15], a7 - v16);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  v18 = (unsigned __int8 *)a3 + v17;
  result = a4 - v17;
  v19 = &a1[a2];
  v20 = (unint64_t)&a1[a2 - 3];
  if (!a6[1])
  {
    if (!result)
      return -72;
    v24 = result - 8;
    if (result < 8)
    {
      v25 = *v18;
      switch(result)
      {
        case 2uLL:
          goto LABEL_36;
        case 3uLL:
          goto LABEL_35;
        case 4uLL:
          goto LABEL_34;
        case 5uLL:
          goto LABEL_33;
        case 6uLL:
          goto LABEL_32;
        case 7uLL:
          v25 |= (unint64_t)v18[6] << 48;
LABEL_32:
          v25 += (unint64_t)v18[5] << 40;
LABEL_33:
          v25 += (unint64_t)v18[4] << 32;
LABEL_34:
          v25 += (unint64_t)v18[3] << 24;
LABEL_35:
          v25 += (unint64_t)v18[2] << 16;
LABEL_36:
          v25 += (unint64_t)v18[1] << 8;
          break;
        default:
          break;
      }
      if (!v18[result - 1])
        return -20;
      v24 = 0;
      v26 = __clz(v18[result - 1]) - 8 * result + 41;
    }
    else
    {
      if (!v18[result - 1])
        return -1;
      if (result > 0xFFFFFFFFFFFFFF88)
        return result;
      v25 = *(_QWORD *)&v18[v24];
      v26 = __clz(v18[result - 1]) - 23;
    }
    v33 = *a6;
    v34 = v26 + v33;
    v35 = BIT_mask[v33];
    v36 = (v25 >> -(char)(v26 + v33)) & v35;
    if (v26 + v33 <= 0x40)
    {
      if (v24 >= 8)
      {
        v37 = v34 >> 3;
        v34 &= 7u;
      }
      else
      {
        if (!v24)
          goto LABEL_67;
        if (&v18[v24 - (v34 >> 3)] >= v18)
          v37 = v34 >> 3;
        else
          v37 = v24;
        v34 -= 8 * v37;
      }
      v24 -= v37;
      v25 = *(_QWORD *)&v18[v24];
    }
LABEL_67:
    v39 = a6 + 2;
    v45 = v34 + v33;
    v41 = (v25 >> -(char)v45) & v35;
    if (v45 > 0x40)
    {
LABEL_68:
      v46 = a1;
LABEL_88:
      v74 = (unint64_t)(v19 - 2);
      if (v46 > v19 - 2)
        return -70;
      v75 = (_BYTE *)(v46 - a1);
      v76 = v46 + 1;
      v77 = 2;
      while (1)
      {
        v78 = &v39[2 * v36];
        v79 = *v78;
        v80 = *((_BYTE *)v78 + 2);
        v81 = *((unsigned __int8 *)v78 + 3);
        v82 = v45 + v81;
        v83 = BIT_mask[v81];
        *(v76 - 1) = v80;
        if (v82 > 0x40)
        {
LABEL_153:
          *v76 = v39[2 * v41 + 1];
          return (unint64_t)&v75[v77];
        }
        if (v24 >= 8)
        {
          v85 = v82 & 7;
          v24 -= v82 >> 3;
          v86 = *(_QWORD *)&v18[v24];
          if ((unint64_t)v76 > v74)
            return -70;
        }
        else if (v24)
        {
          if (&v18[v24 - (v82 >> 3)] >= v18)
            v84 = v82 >> 3;
          else
            v84 = v24;
          v85 = v82 - 8 * v84;
          v24 -= v84;
          v86 = *(_QWORD *)&v18[v24];
          if ((unint64_t)v76 > v74)
            return -70;
        }
        else
        {
          v85 = v82;
          v86 = v25;
          if ((unint64_t)v76 > v74)
            return -70;
        }
        v36 = ((v25 >> -(char)v82) & v83) + v79;
        v87 = &v39[2 * v41];
        v88 = *v87;
        v89 = *((_BYTE *)v87 + 2);
        v90 = *((unsigned __int8 *)v87 + 3);
        v91 = v85 + v90;
        v92 = BIT_mask[v90];
        *v76 = v89;
        if (v91 > 0x40)
        {
          ++v76;
          v77 = 3;
          v41 = v36;
          goto LABEL_153;
        }
        if (v24 >= 8)
        {
          v93 = v91 >> 3;
          v45 = v91 & 7;
        }
        else
        {
          if (!v24)
          {
            v45 = v91;
            v25 = v86;
            goto LABEL_110;
          }
          if (&v18[v24 - (v91 >> 3)] >= v18)
            v93 = v91 >> 3;
          else
            v93 = v24;
          v45 = v91 - 8 * v93;
        }
        v24 -= v93;
        v25 = *(_QWORD *)&v18[v24];
LABEL_110:
        v41 = ((v86 >> -(char)v91) & v92) + v88;
        v75 += 2;
        v94 = v76 + 1;
        v76 += 2;
        result = -70;
        if ((unint64_t)v94 > v74)
          return result;
      }
    }
    if (v24 >= 8)
    {
      v49 = v45 >> 3;
      v45 &= 7u;
      v24 -= v49;
      v25 = *(_QWORD *)&v18[v24];
    }
    else if (v24)
    {
      v47 = v45 >> 3;
      v48 = &v18[v24 - v47] >= v18 ? v47 : v24;
      v45 -= 8 * v48;
      v24 -= v48;
      v25 = *(_QWORD *)&v18[v24];
      if (v45 > 0x40)
        goto LABEL_68;
    }
    v46 = a1;
    do
    {
      if (v24 >= 8)
      {
        v51 = 0;
        v52 = v45 >> 3;
        v45 &= 7u;
      }
      else
      {
        if (!v24)
          goto LABEL_88;
        v50 = &v18[v24 - (v45 >> 3)];
        v51 = v50 < v18;
        if (v50 >= v18)
          v52 = v45 >> 3;
        else
          v52 = v24;
        v45 -= 8 * v52;
      }
      v24 -= v52;
      v25 = *(_QWORD *)&v18[v24];
      if ((unint64_t)v46 >= v20)
        break;
      if (v51)
        break;
      v53 = &v39[2 * v36];
      v54 = *v53;
      v55 = *((_BYTE *)v53 + 2);
      v56 = *((unsigned __int8 *)v53 + 3);
      v57 = v45 + v56;
      v58 = ((v25 >> -(char)v57) & BIT_mask[v56]) + v54;
      *v46 = v55;
      v59 = &v39[2 * v41];
      v60 = *v59;
      v61 = *((_BYTE *)v59 + 2);
      v62 = *((unsigned __int8 *)v59 + 3);
      v63 = v57 + v62;
      v64 = ((v25 >> -(char)v63) & BIT_mask[v62]) + v60;
      v46[1] = v61;
      v65 = &v39[2 * v58];
      v66 = *v65;
      v67 = *((_BYTE *)v65 + 2);
      v68 = *((unsigned __int8 *)v65 + 3);
      v69 = v63 + v68;
      v36 = ((v25 >> -(char)v69) & BIT_mask[v68]) + v66;
      v46[2] = v67;
      v70 = &v39[2 * v64];
      v71 = *v70;
      v72 = *((_BYTE *)v70 + 2);
      v73 = *((unsigned __int8 *)v70 + 3);
      v45 = v69 + v73;
      v41 = ((v25 >> -(char)v45) & BIT_mask[v73]) + v71;
      v46[3] = v72;
      v46 += 4;
    }
    while (v45 <= 0x40);
    goto LABEL_88;
  }
  if (!result)
    return -72;
  if (result < 8)
  {
    v21 = *v18;
    switch(result)
    {
      case 2uLL:
        goto LABEL_25;
      case 3uLL:
        goto LABEL_24;
      case 4uLL:
        goto LABEL_23;
      case 5uLL:
        goto LABEL_22;
      case 6uLL:
        goto LABEL_21;
      case 7uLL:
        v21 |= (unint64_t)v18[6] << 48;
LABEL_21:
        v21 += (unint64_t)v18[5] << 40;
LABEL_22:
        v21 += (unint64_t)v18[4] << 32;
LABEL_23:
        v21 += (unint64_t)v18[3] << 24;
LABEL_24:
        v21 += (unint64_t)v18[2] << 16;
LABEL_25:
        v21 += (unint64_t)v18[1] << 8;
        break;
      default:
        break;
    }
    if (v18[result - 1])
    {
      v23 = __clz(v18[result - 1]) - 8 * result + 41;
      v22 = (unsigned __int8 *)a3 + v17;
LABEL_28:
      v27 = v18 + 8;
      v28 = *a6;
      v29 = v23 + v28;
      v30 = BIT_mask[v28];
      v31 = (v21 >> -(char)(v23 + v28)) & v30;
      if (v29 > 0x40)
      {
        v32 = v22;
        goto LABEL_55;
      }
      if (v22 >= v27)
      {
        LODWORD(v38) = v29 >> 3;
        v29 &= 7u;
      }
      else
      {
        v32 = (unsigned __int8 *)a3 + v17;
        if (v22 == v18)
          goto LABEL_55;
        v38 = v29 >> 3;
        if (&v22[-v38] < v18)
          LODWORD(v38) = (_DWORD)v22 - (_DWORD)v18;
        v29 -= 8 * v38;
      }
      v32 = &v22[-v38];
      v21 = *(_QWORD *)v32;
LABEL_55:
      v39 = a6 + 2;
      v40 = v29 + v28;
      v41 = (v21 >> -(char)v40) & v30;
      if (v40 >= 0x41)
      {
LABEL_56:
        v42 = a1;
        goto LABEL_127;
      }
      if (v32 >= v27)
      {
        v44 = v40 >> 3;
        v40 &= 7u;
        v32 -= v44;
        v21 = *(_QWORD *)v32;
      }
      else if (v32 == v18)
      {
        v32 = (unsigned __int8 *)a3 + v17;
      }
      else
      {
        v43 = v40 >> 3;
        if (&v32[-v43] >= v18)
          v43 = v43;
        else
          v43 = ((_DWORD)v32 - (_DWORD)v18);
        v40 -= 8 * v43;
        v32 -= v43;
        v21 = *(_QWORD *)v32;
        if (v40 > 0x40)
          goto LABEL_56;
      }
      v42 = a1;
      while (1)
      {
        if (v32 >= v27)
        {
          v96 = 0;
          LODWORD(v95) = v40 >> 3;
          v40 &= 7u;
        }
        else
        {
          if (v32 == v18)
          {
            v32 = (unsigned __int8 *)a3 + v17;
LABEL_127:
            v115 = (unint64_t)(v19 - 2);
            if (v42 > v19 - 2)
              return -70;
            v75 = (_BYTE *)(v42 - a1);
            v76 = v42 + 1;
            v77 = 2;
            while (2)
            {
              v116 = &v39[2 * v31];
              v117 = *v116;
              v118 = *((_BYTE *)v116 + 2);
              v119 = *((unsigned __int8 *)v116 + 3);
              v120 = v40 + v119;
              *(v76 - 1) = v118;
              if (v40 + v119 > 0x40)
                goto LABEL_153;
              if (v32 >= v27)
              {
                v124 = v120 >> 3;
                v120 &= 7u;
                v122 = &v32[-v124];
                v123 = *(_QWORD *)v122;
                if ((unint64_t)v76 > v115)
                  return -70;
              }
              else if (v32 == v18)
              {
                v122 = (unsigned __int8 *)a3 + v17;
                v123 = v21;
                if ((unint64_t)v76 > v115)
                  return -70;
              }
              else
              {
                v121 = v120 >> 3;
                if (&v32[-v121] < v18)
                  LODWORD(v121) = (_DWORD)v32 - (_DWORD)v18;
                v120 -= 8 * v121;
                v122 = &v32[-v121];
                v123 = *(_QWORD *)v122;
                if ((unint64_t)v76 > v115)
                  return -70;
              }
              v31 = (v21 << v40 >> -(char)v119) + v117;
              v125 = &v39[2 * v41];
              v126 = *v125;
              v127 = *((unsigned __int8 *)v125 + 3);
              v40 = v120 + v127;
              *v76 = *((_BYTE *)v125 + 2);
              if (v120 + v127 > 0x40)
              {
                ++v76;
                v77 = 3;
                v41 = v31;
                goto LABEL_153;
              }
              if (v122 < v27)
              {
                if (v122 == v18)
                {
                  v32 = (unsigned __int8 *)a3 + v17;
                  v21 = v123;
                }
                else
                {
                  v128 = v40 >> 3;
                  if (&v122[-v128] < v18)
                    LODWORD(v128) = (_DWORD)v122 - (_DWORD)v18;
                  v40 -= 8 * v128;
LABEL_147:
                  v32 = &v122[-v128];
                  v21 = *(_QWORD *)v32;
                }
                v41 = (v123 << v120 >> -(char)v127) + v126;
                v75 += 2;
                v129 = v76 + 1;
                v76 += 2;
                result = -70;
                if ((unint64_t)v129 > v115)
                  return result;
                continue;
              }
              break;
            }
            LODWORD(v128) = v40 >> 3;
            v40 &= 7u;
            goto LABEL_147;
          }
          v95 = v40 >> 3;
          v96 = &v32[-v95] < v18;
          if (&v32[-v95] < v18)
            LODWORD(v95) = (_DWORD)v32 - (_DWORD)v18;
          v40 -= 8 * v95;
        }
        v32 -= v95;
        v21 = *(_QWORD *)v32;
        if ((unint64_t)v42 < v20 && !v96)
        {
          v97 = &v39[2 * v31];
          v98 = *v97;
          v99 = *((_BYTE *)v97 + 2);
          LODWORD(v97) = *((unsigned __int8 *)v97 + 3);
          v100 = v21 << v40 >> -(char)v97;
          LODWORD(v97) = v40 + (_DWORD)v97;
          v101 = v100 + v98;
          *v42 = v99;
          v102 = &v39[2 * v41];
          v103 = *v102;
          v104 = *((_BYTE *)v102 + 2);
          LODWORD(v102) = *((unsigned __int8 *)v102 + 3);
          v105 = v21 << (char)v97 >> -(char)v102;
          LODWORD(v97) = (_DWORD)v97 + (_DWORD)v102;
          v106 = v105 + v103;
          v42[1] = v104;
          v107 = &v39[2 * v101];
          v108 = *v107;
          v109 = *((_BYTE *)v107 + 2);
          LODWORD(v107) = *((unsigned __int8 *)v107 + 3);
          v110 = v21 << (char)v97 >> -(char)v107;
          LODWORD(v107) = (_DWORD)v97 + (_DWORD)v107;
          v31 = v110 + v108;
          v42[2] = v109;
          v111 = &v39[2 * v106];
          v112 = *v111;
          v113 = *((_BYTE *)v111 + 2);
          LODWORD(v111) = *((unsigned __int8 *)v111 + 3);
          v114 = v21 << (char)v107 >> -(char)v111;
          v40 = (_DWORD)v107 + (_DWORD)v111;
          v41 = v114 + v112;
          v42[3] = v113;
          v42 += 4;
          if (v40 <= 0x40)
            continue;
        }
        goto LABEL_127;
      }
    }
    return -20;
  }
  if (!v18[result - 1])
    return -1;
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v22 = (unsigned __int8 *)a3 + a4 - 8;
    v21 = *(_QWORD *)v22;
    v23 = __clz(v18[result - 1]) - 23;
    goto LABEL_28;
  }
  return result;
}

uint64_t FSE_buildDTable(uint64_t a1, uint64_t a2)
{
  _WORD *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD v7[4162];

  MEMORY[0x1E0C80A78](a1, a2);
  v7[4161] = *MEMORY[0x1E0C80C00];
  return FSE_buildDTable_internal(v2, v3, v4, v5, (uint64_t)v7, 0x8208uLL);
}

unint64_t FSE_decompress(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  _DWORD *v4;
  size_t v5;
  unsigned __int16 v7[10502];
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  v8 = *MEMORY[0x1E0C80C00];
  return FSE_decompress_wksp_bmi2(v2, v3, v4, v5, 0xCu, v7, 0x520CuLL);
}

_QWORD *ZSTD_createThreadPool(uint64_t a1)
{
  return POOL_create_advanced(a1, 0, &ZSTD_defaultCMem);
}

_QWORD *POOL_create(uint64_t a1, uint64_t a2)
{
  return POOL_create_advanced(a1, a2, &ZSTD_defaultCMem);
}

_QWORD *POOL_create_advanced(uint64_t a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v6;
  void *v8;
  int v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  if (!a1)
    return 0;
  if (*(_QWORD *)a3)
  {
    v6 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))a3)(*((_QWORD *)a3 + 2), 264);
    *(_OWORD *)v6 = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 9) = 0u;
    *((_OWORD *)v6 + 10) = 0u;
    *((_OWORD *)v6 + 11) = 0u;
    *((_OWORD *)v6 + 12) = 0u;
    *((_OWORD *)v6 + 13) = 0u;
    *((_OWORD *)v6 + 14) = 0u;
    *((_OWORD *)v6 + 15) = 0u;
    v6[32] = 0;
    goto LABEL_7;
  }
  v6 = malloc_type_calloc(1uLL, 0x108uLL, 0xEC864E14uLL);
  if (!v6)
    return v6;
LABEL_7:
  v6[9] = a2 + 1;
  if (*(_QWORD *)a3)
    v8 = (void *)(*(uint64_t (**)(_QWORD, uint64_t))a3)(*((_QWORD *)a3 + 2), 16 * (a2 + 1));
  else
    v8 = malloc_type_malloc(16 * (a2 + 1), 0x26AA08A0uLL);
  v6[10] = 0;
  v6[7] = 0;
  v6[8] = 0;
  v6[6] = v8;
  *((_DWORD *)v6 + 22) = 1;
  v9 = pthread_mutex_init((pthread_mutex_t *)(v6 + 12), 0);
  v10 = pthread_cond_init((pthread_cond_t *)(v6 + 20), 0) | v9;
  if (v10 | pthread_cond_init((pthread_cond_t *)(v6 + 26), 0))
    goto LABEL_11;
  *((_DWORD *)v6 + 64) = 0;
  if (*(_QWORD *)a3)
  {
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*((_QWORD *)a3 + 2), 8 * a1);
    v6[3] = v11;
    v6[4] = 0;
    v12 = *a3;
    v6[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v12;
    if (!v11)
      goto LABEL_11;
LABEL_16:
    if (v6[6])
    {
      v15 = 0;
      v16 = 0;
      while (!pthread_create((pthread_t *)(v6[3] + v15), 0, (void *(__cdecl *)(void *))POOL_thread, v6))
      {
        ++v16;
        v15 += 8;
        if (a1 == v16)
        {
          v6[4] = a1;
          v6[5] = a1;
          return v6;
        }
      }
      v6[4] = v16;
    }
    goto LABEL_11;
  }
  v13 = malloc_type_malloc(8 * a1, 0x26AA08A0uLL);
  v6[3] = v13;
  v6[4] = 0;
  v14 = *a3;
  v6[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)v6 = v14;
  if (v13)
    goto LABEL_16;
LABEL_11:
  POOL_free((uint64_t)v6);
  return 0;
}

void ZSTD_customCalloc(size_t size, uint64_t a2)
{
  void *v3;

  if (*(_QWORD *)a2)
  {
    v3 = (void *)(*(uint64_t (**)(_QWORD, size_t))a2)(*(_QWORD *)(a2 + 16), size);
    bzero(v3, size);
  }
  else
  {
    malloc_type_calloc(1uLL, size, 0xEC864E14uLL);
  }
}

void *ZSTD_customMalloc(size_t size, uint64_t a2)
{
  if (*(_QWORD *)a2)
    return (void *)(*(uint64_t (**)(_QWORD, size_t))a2)(*(_QWORD *)(a2 + 16), size);
  else
    return malloc_type_malloc(size, 0x26AA08A0uLL);
}

void POOL_free(uint64_t a1)
{
  pthread_mutex_t *v2;
  unint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  void (*v6)(_QWORD, uint64_t);

  if (a1)
  {
    v2 = (pthread_mutex_t *)(a1 + 96);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
    *(_DWORD *)(a1 + 256) = 1;
    pthread_mutex_unlock(v2);
    pthread_cond_broadcast((pthread_cond_t *)(a1 + 160));
    pthread_cond_broadcast((pthread_cond_t *)(a1 + 208));
    if (*(_QWORD *)(a1 + 32))
    {
      v3 = 0;
      do
        pthread_join(*(pthread_t *)(*(_QWORD *)(a1 + 24) + 8 * v3++), 0);
      while (v3 < *(_QWORD *)(a1 + 32));
    }
    pthread_mutex_destroy(v2);
    pthread_cond_destroy((pthread_cond_t *)(a1 + 160));
    pthread_cond_destroy((pthread_cond_t *)(a1 + 208));
    v5 = *(void (**)(uint64_t))(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(a1 + 48))
    {
      if (v5)
        v5(v4);
      else
        free(*(void **)(a1 + 48));
      v5 = *(void (**)(uint64_t))(a1 + 8);
      v4 = *(_QWORD *)(a1 + 16);
    }
    if (*(_QWORD *)(a1 + 24))
    {
      if (!v5)
      {
        free(*(void **)(a1 + 24));
        v6 = *(void (**)(_QWORD, uint64_t))(a1 + 8);
        if (v6)
          goto LABEL_15;
LABEL_17:
        free((void *)a1);
        return;
      }
      v5(v4);
    }
    v6 = *(void (**)(_QWORD, uint64_t))(a1 + 8);
    if (v6)
    {
LABEL_15:
      v6(*(_QWORD *)(a1 + 16), a1);
      return;
    }
    goto LABEL_17;
  }
}

uint64_t POOL_thread(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;

  if (a1)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
    if (*(_DWORD *)(a1 + 88))
      goto LABEL_4;
    do
    {
LABEL_3:
      v2 = *(_QWORD *)(a1 + 80);
      if (v2 >= *(_QWORD *)(a1 + 40))
        break;
      v3 = *(_QWORD *)(a1 + 56);
      v4 = *(_QWORD *)(a1 + 48) + 16 * v3;
      v5 = *(_QWORD *)(a1 + 64);
      v6 = (unint64_t)(v3 + 1) % *(_QWORD *)(a1 + 72);
      v8 = *(void (**)(uint64_t))v4;
      v7 = *(_QWORD *)(v4 + 8);
      *(_QWORD *)(a1 + 56) = v6;
      *(_QWORD *)(a1 + 80) = v2 + 1;
      *(_DWORD *)(a1 + 88) = v6 == v5;
      pthread_cond_signal((pthread_cond_t *)(a1 + 160));
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 96));
      v8(v7);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
      v9 = *(_QWORD *)(a1 + 72);
      --*(_QWORD *)(a1 + 80);
      if (v9 == 1)
        pthread_cond_signal((pthread_cond_t *)(a1 + 160));
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 96));
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
    }
    while (!*(_DWORD *)(a1 + 88));
LABEL_4:
    while (!*(_DWORD *)(a1 + 256))
    {
      pthread_cond_wait((pthread_cond_t *)(a1 + 208), (pthread_mutex_t *)(a1 + 96));
      if (!*(_DWORD *)(a1 + 88))
        goto LABEL_3;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 96));
  }
  return a1;
}

void ZSTD_customFree(void *a1, uint64_t a2)
{
  void (*v2)(_QWORD, void *);

  if (a1)
  {
    v2 = *(void (**)(_QWORD, void *))(a2 + 8);
    if (v2)
      v2(*(_QWORD *)(a2 + 16), a1);
    else
      free(a1);
  }
}

uint64_t POOL_sizeof(uint64_t result)
{
  if (result)
    return 16 * *(_QWORD *)(result + 72) + 8 * *(_QWORD *)(result + 32) + 264;
  return result;
}

uint64_t POOL_resize(uint64_t a1, unint64_t a2)
{
  pthread_mutex_t *v4;
  char *v5;
  uint64_t v7;
  void (*v8)(_QWORD);
  unint64_t v9;
  pthread_t *v10;

  if (!a1)
    return 1;
  v4 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  if (*(_QWORD *)(a1 + 32) >= a2)
  {
    if (a2)
    {
      v7 = 0;
LABEL_21:
      *(_QWORD *)(a1 + 40) = a2;
      goto LABEL_22;
    }
  }
  else
  {
    if (*(_QWORD *)a1)
    {
      v5 = (char *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 8 * a2);
      if (!v5)
        goto LABEL_15;
LABEL_10:
      memcpy(v5, *(const void **)(a1 + 24), 8 * *(_QWORD *)(a1 + 32));
      if (*(_QWORD *)(a1 + 24))
      {
        v8 = *(void (**)(_QWORD))(a1 + 8);
        if (!v8)
        {
          free(*(void **)(a1 + 24));
          *(_QWORD *)(a1 + 24) = v5;
          v9 = *(_QWORD *)(a1 + 32);
          if (v9 >= a2)
          {
LABEL_20:
            v7 = 0;
            *(_QWORD *)(a1 + 32) = a2;
            goto LABEL_21;
          }
LABEL_17:
          v10 = (pthread_t *)&v5[8 * v9];
          while (!pthread_create(v10, 0, (void *(__cdecl *)(void *))POOL_thread, (void *)a1))
          {
            ++v9;
            ++v10;
            if (a2 == v9)
              goto LABEL_20;
          }
          *(_QWORD *)(a1 + 32) = v9;
          v7 = 1;
          goto LABEL_22;
        }
        v8(*(_QWORD *)(a1 + 16));
      }
      *(_QWORD *)(a1 + 24) = v5;
      v9 = *(_QWORD *)(a1 + 32);
      if (v9 >= a2)
        goto LABEL_20;
      goto LABEL_17;
    }
    v5 = (char *)malloc_type_malloc(8 * a2, 0x26AA08A0uLL);
    if (v5)
      goto LABEL_10;
  }
LABEL_15:
  v7 = 1;
LABEL_22:
  pthread_cond_broadcast((pthread_cond_t *)(a1 + 208));
  pthread_mutex_unlock(v4);
  return v7;
}

uint64_t POOL_add(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  v7 = *(_QWORD *)(a1 + 72);
  if (v7 < 2)
    goto LABEL_4;
LABEL_2:
  if (*(_QWORD *)(a1 + 56) == (*(_QWORD *)(a1 + 64) + 1) % v7)
  {
    while (!*(_DWORD *)(a1 + 256))
    {
      pthread_cond_wait((pthread_cond_t *)(a1 + 160), v6);
      v7 = *(_QWORD *)(a1 + 72);
      if (v7 >= 2)
        goto LABEL_2;
LABEL_4:
      if (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a1 + 40) && *(_DWORD *)(a1 + 88))
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    if (!*(_DWORD *)(a1 + 256))
    {
      *(_DWORD *)(a1 + 88) = 0;
      v8 = *(_QWORD *)(a1 + 64);
      v9 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v8);
      *v9 = a2;
      v9[1] = a3;
      *(_QWORD *)(a1 + 64) = (v8 + 1) % v7;
      pthread_cond_signal((pthread_cond_t *)(a1 + 208));
      return pthread_mutex_unlock(v6);
    }
  }
  return pthread_mutex_unlock(v6);
}

uint64_t POOL_tryAdd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  v7 = *(_QWORD *)(a1 + 72);
  if (v7 < 2)
  {
    if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 40) || !*(_DWORD *)(a1 + 88))
      goto LABEL_9;
  }
  else if (*(_QWORD *)(a1 + 56) == (*(_QWORD *)(a1 + 64) + 1) % v7)
  {
LABEL_9:
    v10 = 0;
    goto LABEL_10;
  }
  if (!*(_DWORD *)(a1 + 256))
  {
    *(_DWORD *)(a1 + 88) = 0;
    v8 = *(_QWORD *)(a1 + 64);
    v9 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v8);
    *v9 = a2;
    v9[1] = a3;
    *(_QWORD *)(a1 + 64) = (v8 + 1) % v7;
    pthread_cond_signal((pthread_cond_t *)(a1 + 208));
  }
  v10 = 1;
LABEL_10:
  pthread_mutex_unlock(v6);
  return v10;
}

uint64_t ZSTD_versionNumber()
{
  return 10409;
}

const char *ZSTD_versionString()
{
  return "1.4.9";
}

BOOL ZSTD_isError(unint64_t a1)
{
  return a1 > 0xFFFFFFFFFFFFFF88;
}

const char *ZSTD_getErrorName(unint64_t a1)
{
  if (a1 >= 0xFFFFFFFFFFFFFF89)
    return ERR_getErrorString(-(int)a1);
  else
    return ERR_getErrorString(0);
}

uint64_t ZSTD_getErrorCode(unint64_t a1)
{
  if (a1 >= 0xFFFFFFFFFFFFFF89)
    return -(int)a1;
  else
    return 0;
}

uint64_t FSE_buildCTable_wksp(_WORD *a1, __int16 *a2, int a3, int a4, _DWORD *a5, unint64_t a6)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  _DWORD *v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  _DWORD *v29;
  int v30;
  int v31;
  unsigned int v33;

  v6 = (1 << a4);
  v7 = v6 >> 1;
  if (a4)
    v8 = v7;
  else
    v8 = 1;
  if ((a5 & 3) != 0)
    return -1;
  v10 = (a3 + 2);
  if (a6 < 4 * ((1 << (a4 - 2)) + v10))
    return -44;
  *a1 = a4;
  a1[1] = a3;
  *a5 = 0;
  v11 = &a5[v10];
  v12 = __CFADD__(a3, 1);
  v13 = a3 + 1;
  if (v12)
  {
    v14 = v6 - 1;
  }
  else
  {
    v15 = 0;
    if (v10 <= 2)
      v10 = 2;
    else
      v10 = v10;
    v16 = v10 - 1;
    v14 = v6 - 1;
    do
    {
      while (1)
      {
        v17 = a2[v15];
        if (v17 == -1)
          break;
        a5[v15 + 1] = a5[v15] + v17;
        if (v16 == ++v15)
          goto LABEL_18;
      }
      a5[v15 + 1] = a5[v15] + 1;
      *((_BYTE *)v11 + v14--) = v15++;
    }
    while (v16 != v15);
  }
LABEL_18:
  v18 = 0;
  v19 = 0;
  a5[v13] = v6 + 1;
  v20 = (v6 >> 3) + v7 + 3;
  if (v13 <= 1)
    v21 = 1;
  else
    v21 = v13;
  do
  {
    v22 = a2[v18];
    if (v22 >= 1)
    {
      for (i = 0; i != v22; ++i)
      {
        *((_BYTE *)v11 + v19) = v18;
        do
          v19 = (v20 + v19) & (v6 - 1);
        while (v19 > v14);
      }
    }
    ++v18;
  }
  while (v18 != v21);
  v24 = 0;
  do
  {
    v25 = *((unsigned __int8 *)v11 + v24);
    v26 = a5[v25];
    a5[v25] = v26 + 1;
    a1[v26 + 2] = v6 + v24++;
  }
  while (v6 != v24);
  v27 = 0;
  v28 = (a4 << 16) - v6;
  v29 = &a1[2 * v8 + 4];
  do
  {
    v31 = *a2++;
    v30 = v31;
    if (v31 == -1 || v30 == 1)
    {
      *(v29 - 1) = v27 - 1;
      *v29 = v28;
      ++v27;
    }
    else if (v30)
    {
      v33 = a4 + 1 + (__clz(v30 - 1) ^ 0xFFFFFFE0);
      *v29 = (v33 << 16) - (v30 << v33);
      *(v29 - 1) = v27 - v30;
      v27 += v30;
    }
    else
    {
      *v29 = v28 + 0x10000;
    }
    v29 += 2;
    --v21;
  }
  while (v21);
  return 0;
}

uint64_t FSE_buildCTable(uint64_t a1, uint64_t a2)
{
  _WORD *v2;
  __int16 *v3;
  int v4;
  int v5;
  _DWORD v7[1024];
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  v8 = *MEMORY[0x1E0C80C00];
  return FSE_buildCTable_wksp(v2, v3, v4, v5, v7, 0x1000uLL);
}

uint64_t FSE_NCountWriteBound(int a1, int a2)
{
  if (a1)
    return ((a2 + a2 * a1) >> 3) + 3;
  else
    return 512;
}

uint64_t FSE_writeNCount(_WORD *a1, unint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  unint64_t v6;

  if (a5 > 0xC)
    return -44;
  if (a5 < 5)
    return -1;
  LODWORD(v6) = ((a5 + a5 * a4) >> 3) + 3;
  if (a4)
    v6 = v6;
  else
    v6 = 512;
  return FSE_writeNCount_generic(a1, a2, a3, a4, a5, v6 <= a2);
}

uint64_t FSE_writeNCount_generic(_WORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6;
  _BOOL4 v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  _WORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  _BOOL4 v30;
  uint64_t i;
  BOOL v33;
  int v34;
  int v35;

  v6 = (a4 + 1);
  if (a4 == -1)
    return -1;
  v7 = 0;
  v8 = 0;
  v9 = 1 << a5;
  v10 = (1 << a5) + 1;
  v11 = a5 - 5;
  v12 = (a5 + 1);
  v13 = (unint64_t)a1 + a2 - 2;
  v14 = 4;
  v15 = a1;
  while (1)
  {
    if (!v7)
    {
      LODWORD(v16) = v8;
      goto LABEL_26;
    }
    LODWORD(v16) = v8;
    if (v8 < v6)
    {
      v16 = v8;
      while (!*(_WORD *)(a3 + 2 * v16))
      {
        if (v6 == ++v16)
          goto LABEL_41;
      }
    }
    if ((_DWORD)v16 == (_DWORD)v6)
      break;
    if (v16 >= v8 + 24)
    {
      v19 = 0xFFFF << v14;
      if (!a6)
      {
        while ((unint64_t)v15 <= v13)
        {
          v22 = v11 + v19;
          *v15++ = v22;
          v11 = HIWORD(v22);
          v17 = v8 + 24;
          v23 = v8 + 48;
          v8 += 24;
          if (v16 < v23)
            goto LABEL_18;
        }
        return -70;
      }
      do
      {
        v20 = v11 + v19;
        *v15++ = v20;
        v11 = HIWORD(v20);
        v17 = v8 + 24;
        v21 = v8 + 48;
        v8 += 24;
      }
      while (v16 >= v21);
LABEL_18:
      v18 = v17 + 3;
    }
    else
    {
      v17 = v8;
      v18 = v8 + 3;
    }
    while (v16 >= v18)
    {
      v11 += 3 << v14;
      v14 += 2;
      v18 = v17 + 6;
      v17 += 3;
    }
    v11 += ((_DWORD)v16 - v17) << v14;
    if (v14 < 15)
    {
      v14 += 2;
    }
    else
    {
      if (!a6 && (unint64_t)v15 > v13)
        return -70;
      *v15++ = v11;
      v11 >>= 16;
      v14 -= 14;
    }
LABEL_26:
    v24 = *(__int16 *)(a3 + 2 * v16);
    v25 = ~v10 + 2 * v9;
    if (v24 >= 0)
      v26 = *(__int16 *)(a3 + 2 * v16);
    else
      v26 = -v24;
    v10 -= v26;
    v27 = v24 + 1;
    if (v27 >= v9)
      v28 = v25;
    else
      v28 = 0;
    v29 = v28 + v27;
    v30 = v28 + v27 < v25;
    v7 = v29 == 1;
    if (v10 < 1)
      return -1;
    for (i = v12; v10 < v9; v9 >>= 1)
      i = (i - 1);
    v11 += v29 << v14;
    v14 = v14 + v12 - v30;
    if (v14 >= 17)
    {
      if (!a6 && (unint64_t)v15 > v13)
        return -70;
      *v15++ = v11;
      v11 >>= 16;
      v14 -= 16;
    }
    v8 = v16 + 1;
    if ((int)v16 + 1 < v6)
    {
      v12 = i;
      if (v10 > 1)
        continue;
    }
    break;
  }
LABEL_41:
  if (v10 != 1)
    return -1;
  if (!a6 && (unint64_t)v15 > v13)
    return -70;
  *v15 = v11;
  v34 = v14 + 7;
  v33 = v14 < -7;
  v35 = v14 + 14;
  if (!v33)
    v35 = v34;
  return (char *)v15 + (v35 >> 3) - (char *)a1;
}

void *FSE_createCTable(int a1, unsigned int a2)
{
  char v2;

  if (a2 >= 0xF)
    v2 = 15;
  else
    v2 = a2;
  return malloc_type_malloc(4 * ((1 << (v2 - 1)) + 2 * a1 + 3), 0x7EA7360BuLL);
}

uint64_t FSE_optimalTableLog_internal(unsigned int a1, unsigned int a2, unsigned int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v4 = (__clz(a2 - 1) ^ 0x1F) - a4;
  v5 = __clz(a2) ^ 0x1F;
  v6 = (__clz(a3) ^ 0x1F) + 2;
  if (v5 + 1 < v6)
    v7 = v5 + 1;
  else
    v7 = v6;
  if (a1)
    v8 = a1;
  else
    v8 = 11;
  if (v4 >= v8)
    v4 = v8;
  if (v7 > v4)
    v4 = v7;
  if (v4 <= 5)
    v4 = 5;
  if (v4 >= 0xC)
    return 12;
  else
    return v4;
}

uint64_t FSE_optimalTableLog(unsigned int a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v3 = (__clz(a2 - 1) ^ 0x1F) - 2;
  v4 = __clz(a2) ^ 0x1F;
  v5 = (__clz(a3) ^ 0x1F) + 2;
  if (v4 + 1 < v5)
    v6 = v4 + 1;
  else
    v6 = v5;
  if (a1)
    v7 = a1;
  else
    v7 = 11;
  if (v3 >= v7)
    v3 = v7;
  if (v6 > v3)
    v3 = v6;
  if (v3 <= 5)
    v3 = 5;
  if (v3 >= 0xC)
    return 12;
  else
    return v3;
}

uint64_t FSE_normalizeCount(__int16 *a1, unsigned int a2, unsigned int *a3, unint64_t a4, unsigned int a5, int a6)
{
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int16 v11;
  int v12;
  unsigned int v13;
  __int16 v14;
  char v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int16 *v23;
  __int16 v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  __int16 *v30;
  uint64_t v31;
  unsigned int v32;
  __int16 *v33;
  uint64_t v34;
  unsigned int *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;

  if (a2)
    result = a2;
  else
    result = 11;
  if (result < 5)
    return -1;
  if (result > 0xC)
    return -44;
  v8 = __clz(a4) ^ 0x1F;
  v9 = (__clz(a5) ^ 0x1F) + 2;
  v10 = v8 + 1 < v9 ? v8 + 1 : v9;
  if (result < v10)
    return -1;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  if (a6)
    v14 = -1;
  else
    v14 = 1;
  v15 = 62 - result;
  v16 = 1 << result;
  v17 = a4 >> result;
  LODWORD(v18) = 1 << result;
  do
  {
    v19 = a3[v13];
    if (v19 == a4)
      return 0;
    v20 = v13;
    if ((_DWORD)v19)
    {
      if (v19 <= v17)
      {
        a1[v13] = v14;
        LODWORD(v18) = v18 - 1;
      }
      else
      {
        v21 = 0x4000000000000000uLL / a4 * v19;
        v22 = v21 >> v15;
        if (((v21 >> v15) & 0xFFF8) == 0
          && v21 - ((unint64_t)(unsigned __int16)(v21 >> v15) << v15) > (unint64_t)FSE_normalizeCount_rtbTable[(unsigned __int16)(v21 >> v15)] << (42 - result))
        {
          LOWORD(v22) = v22 + 1;
        }
        if ((unsigned __int16)v22 > v11)
        {
          v12 = v20;
          v11 = v22;
        }
        a1[v20] = v22;
        LODWORD(v18) = v18 - (unsigned __int16)v22;
      }
    }
    else
    {
      a1[v13] = 0;
    }
    v13 = v20 + 1;
  }
  while ((int)v20 + 1 <= a5);
  v23 = &a1[v12];
  v24 = *v23;
  if (-(int)v18 < *v23 >> 1)
    goto LABEL_54;
  v25 = 0;
  v26 = (3 * a4) >> (result + 1);
  v27 = a5 + 1;
  v28 = a3;
  v29 = v27;
  v30 = a1;
  do
  {
    v32 = *v28++;
    v31 = v32;
    if (!v32)
    {
      *v30 = 0;
      goto LABEL_32;
    }
    if (v31 <= v17)
    {
      *v30 = v14;
    }
    else
    {
      if (v31 > v26)
      {
        *v30 = -2;
        goto LABEL_32;
      }
      *v30 = 1;
    }
    ++v25;
    a4 -= v31;
LABEL_32:
    ++v30;
    --v29;
  }
  while (v29);
  v18 = (v16 - v25);
  if (v16 != v25)
  {
    if (a4 / v18 > v26)
    {
      v33 = a1;
      v34 = a5 + 1;
      v35 = a3;
      v36 = 3 * a4 / (2 * v18);
      do
      {
        if (*v33 == -2)
        {
          v37 = *v35;
          if (v37 <= v36)
          {
            *v33 = 1;
            ++v25;
            a4 -= v37;
          }
        }
        ++v35;
        ++v33;
        --v34;
      }
      while (v34);
      LODWORD(v18) = v16 - v25;
    }
    if (v25 == (_DWORD)v27)
    {
      v38 = 0;
      v39 = 0;
      v40 = 0;
      do
      {
        if (a3[v38] > v39)
        {
          v40 = v38;
          v39 = a3[v38];
        }
        ++v38;
      }
      while (v27 != v38);
      v23 = &a1[v40];
      v24 = *v23;
LABEL_54:
      *v23 = v24 + v18;
      return result;
    }
    if (a4)
    {
      v41 = 0;
      v42 = ~(-1 << (61 - result));
      v43 = (((unint64_t)v18 << v15) + v42) / a4;
      while (1)
      {
        v44 = v41;
        if (a1[v41] == -2)
        {
          v45 = v42 + v43 * a3[v41];
          v46 = (v45 >> v15) - (v42 >> v15);
          if (!v46)
            return -1;
          a1[v44] = v46;
          v42 = v45;
        }
        v41 = v44 + 1;
        if ((int)v44 + 1 > a5)
          return result;
      }
    }
    if ((_DWORD)v18)
    {
      v47 = 0;
      do
      {
        v48 = v47;
        v49 = a1[v47];
        if (v49 >= 1)
        {
          LODWORD(v18) = v18 - 1;
          a1[v48] = v49 + 1;
        }
        if ((_DWORD)v48 == a5)
          v47 = 0;
        else
          v47 = v48 + 1;
      }
      while ((_DWORD)v18);
    }
  }
  return result;
}

uint64_t FSE_buildCTable_raw(_WORD *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int16x8_t *v8;
  int32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int32x4_t v13;
  float *v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  uint64_t v19;
  float *v20;
  int32x4_t v21;
  unsigned int *v23;
  int v24;
  float32x4x2_t v25;

  if (!a2)
    return -1;
  v2 = (1 << a2);
  v3 = v2 >> 1;
  *a1 = a2;
  a1[1] = v2 - 1;
  if (a2 < 4)
    goto LABEL_6;
  v4 = vdupq_n_s32(v2);
  v5 = vdupq_n_s32((int)v2 + 8);
  v6 = (int32x4_t)xmmword_18822AB70;
  v7 = (int32x4_t)xmmword_18820BF90;
  v8 = (int16x8_t *)(a1 + 10);
  v9.i64[0] = 0x1000000010;
  v9.i64[1] = 0x1000000010;
  v10 = v2 & 0xFFFFFFF0;
  do
  {
    v8[-1] = vuzp1q_s16((int16x8_t)vaddq_s32(v4, v7), (int16x8_t)vaddq_s32(v4, v6));
    *v8 = vuzp1q_s16((int16x8_t)vaddq_s32(v5, v7), (int16x8_t)vaddq_s32(v5, v6));
    v7 = vaddq_s32(v7, v9);
    v6 = vaddq_s32(v6, v9);
    v8 += 2;
    v10 -= 16;
  }
  while (v10);
  if ((v2 & 0xFFFFFFF0) == 0)
  {
LABEL_6:
    v11 = 0;
    do
    {
      a1[v11 + 2] = v2 + v11;
      ++v11;
    }
    while (v2 != v11);
  }
  v12 = (a2 << 16) - v2;
  if (a2 >= 3)
  {
    v13 = vdupq_n_s32(v12);
    v14 = (float *)&a1[2 * v3 + 18];
    v15 = (int32x4_t)xmmword_18820BF90;
    v16.i64[0] = -1;
    v16.i64[1] = -1;
    v17.i64[0] = 0x300000003;
    v17.i64[1] = 0x300000003;
    v18.i64[0] = 0x800000008;
    v18.i64[1] = 0x800000008;
    v19 = v2 & 0xFFFFFFF8;
    do
    {
      v20 = v14 - 8;
      v21 = vaddq_s32(v15, v16);
      vst2q_f32(v20, *(float32x4x2_t *)(&v13 - 1));
      v25.val[0] = (float32x4_t)vaddq_s32(v15, v17);
      v25.val[1] = (float32x4_t)v13;
      vst2q_f32(v14, v25);
      v15 = vaddq_s32(v15, v18);
      v14 += 16;
      v19 -= 8;
    }
    while (v19);
    if ((v2 & 0xFFFFFFF8) != 0)
      return 0;
  }
  v23 = (unsigned int *)&a1[2 * v3 + 4];
  v24 = -1;
  do
  {
    *(v23 - 1) = v24;
    *v23 = v12;
    v23 += 2;
    ++v24;
    --v2;
  }
  while (v2);
  return 0;
}

uint64_t FSE_buildCTable_rle(uint64_t a1, unsigned int a2)
{
  *(_WORD *)a1 = 0;
  *(_WORD *)(a1 + 2) = a2;
  *(_DWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 8 * a2 + 8) = 0;
  return 0;
}

uint64_t FSE_compress_usingCTable(unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int16 *a5)
{
  return FSE_compress_usingCTable_generic(a1, a2, a3, a4, a5, a4 + (a4 >> 7) + 12 <= a2);
}

uint64_t FSE_compress_usingCTable_generic(unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int16 *a5, int a6)
{
  unint64_t v6;
  unint64_t v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int16 *v19;
  unsigned int v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unsigned __int16 *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  _QWORD *v31;
  int v32;
  unsigned __int16 *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unsigned __int16 *v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned __int16 *v44;
  int v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unsigned __int16 *v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  _QWORD *v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  char *v74;

  if (a4 < 3 || a2 < 9)
    return 0;
  v6 = a3 + a4;
  v7 = (unint64_t)a1 + a2 - 8;
  v10 = *a5;
  v8 = a5 + 2;
  v9 = v10;
  v11 = 1 << (v10 - 1);
  if (!v10)
    v11 = 1;
  v12 = &v8[2 * v11];
  v13 = &v12[4 * *(unsigned __int8 *)(a3 + a4 - 1)];
  v14 = v8[((unint64_t)(((*((_DWORD *)v13 + 1) + 0x8000) & 0xFFFF0000) - *((_DWORD *)v13 + 1)) >> ((*((_DWORD *)v13 + 1) + 0x8000) >> 16))
         + *(int *)v13];
  if ((a4 & 1) == 0)
  {
    v15 = 0;
    v16 = 0;
    v18 = *(unsigned __int8 *)(v6 - 2);
    v17 = (unsigned __int8 *)(v6 - 2);
    v19 = &v12[4 * v18];
    v20 = v8[((unint64_t)(((*((_DWORD *)v19 + 1) + 0x8000) & 0xFFFF0000) - *((_DWORD *)v19 + 1)) >> ((*((_DWORD *)v19 + 1) + 0x8000) >> 16))
           + *(int *)v19];
    v21 = a1;
    v22 = v8[((unint64_t)(((*((_DWORD *)v13 + 1) + 0x8000) & 0xFFFF0000) - *((_DWORD *)v13 + 1)) >> ((*((_DWORD *)v13 + 1) + 0x8000) >> 16))
           + *(int *)v13];
    v23 = v20;
    if ((a4 & 2) != 0)
      goto LABEL_7;
LABEL_15:
    v32 = *(v17 - 2);
    v17 -= 2;
    v33 = &v12[4 * v17[1]];
    v34 = *(_DWORD *)v33;
    v35 = (*((unsigned int *)v33 + 1) + v22) >> 16;
    v36 = (unint64_t)(BIT_mask[v35] & v22) << v15;
    v37 = v15 + v35;
    v22 = v8[(v22 >> v35) + v34];
    v38 = &v12[4 * v32];
    LODWORD(v35) = *(_DWORD *)v38;
    v39 = (*((unsigned int *)v38 + 1) + v23) >> 16;
    v40 = v36 | ((unint64_t)(BIT_mask[v39] & v23) << v37) | v16;
    v41 = v37 + v39;
    v23 = v8[(v23 >> v39) + (int)v35];
    v42 = v41 >> 3;
    *v21 = v40;
    v21 = (_QWORD *)((char *)v21 + v42);
    if (a6)
    {
      v15 = v41 & 7;
      v16 = v40 >> (8 * v42);
      if ((unint64_t)v17 <= a3)
        goto LABEL_29;
    }
    else
    {
      if ((unint64_t)v21 > v7)
        v21 = (_QWORD *)v7;
      v15 = v41 & 7;
      v16 = v40 >> (8 * v42);
      if ((unint64_t)v17 <= a3)
        goto LABEL_29;
    }
    goto LABEL_21;
  }
  v24 = *(unsigned __int8 *)(v6 - 3);
  v17 = (unsigned __int8 *)(v6 - 3);
  v25 = &v12[4 * v17[1]];
  LODWORD(v22) = v8[((unint64_t)(((*((_DWORD *)v25 + 1) + 0x8000) & 0xFFFF0000) - *((_DWORD *)v25 + 1)) >> ((*((_DWORD *)v25 + 1) + 0x8000) >> 16))
                  + *(int *)v25];
  v26 = *(unsigned int *)&v12[4 * v24 + 2] + v14;
  v27 = v26 >> 16;
  v28 = BIT_mask[v26 >> 16] & v14;
  v29 = v8[(v14 >> SBYTE2(v26)) + *(int *)&v12[4 * v24]];
  v30 = v26 >> 19;
  *a1 = v28;
  v31 = (unint64_t *)((char *)a1 + (v26 >> 19));
  if ((unint64_t)v31 <= v7)
    v21 = (unint64_t *)((char *)a1 + (v26 >> 19));
  else
    v21 = (_QWORD *)v7;
  v15 = v27 & 7;
  v16 = v28 >> (8 * v30);
  if (a6)
    v21 = v31;
  v22 = v22;
  v23 = v29;
  if ((a4 & 2) == 0)
    goto LABEL_15;
LABEL_7:
  if ((unint64_t)v17 <= a3)
  {
LABEL_29:
    v61 = v21;
    goto LABEL_30;
  }
  do
  {
LABEL_21:
    v43 = *(v17 - 4);
    v17 -= 4;
    v44 = &v12[4 * v17[3]];
    v45 = *(_DWORD *)v44;
    v46 = (v22 + *((unsigned int *)v44 + 1)) >> 16;
    v47 = v15 + ((v22 + *((_DWORD *)v44 + 1)) >> 16);
    v48 = v8[(v22 >> v46) + v45];
    v49 = &v12[4 * v17[2]];
    v50 = (v23 + *((unsigned int *)v49 + 1)) >> 16;
    v51 = v15 + v46 + v50;
    v52 = v8[(v23 >> ((v23 + *((_DWORD *)v49 + 1)) >> 16)) + *(int *)v49];
    v53 = (*(unsigned int *)&v12[4 * v17[1] + 2] + v48) >> 16;
    v54 = *(int *)&v12[4 * v43];
    v55 = (*(unsigned int *)&v12[4 * v43 + 2] + v52) >> 16;
    v56 = v51 + v53 + v55;
    v57 = v56 >> 3;
    v58 = (unint64_t)v21 + v57 > v7 && a6 == 0;
    v59 = (unint64_t)(v22 & BIT_mask[v46]) << v15;
    v22 = v8[(v48 >> ((*(_DWORD *)&v12[4 * v17[1] + 2] + v48) >> 16)) + *(int *)&v12[4 * v17[1]]];
    v60 = v59 | v16 | ((unint64_t)(v23 & BIT_mask[v50]) << v47) | ((unint64_t)(BIT_mask[v53] & v48) << v51) | ((unint64_t)(BIT_mask[v55] & v52) << (v51 + ((*(_DWORD *)&v12[4 * v17[1] + 2] + v48) >> 16)));
    v23 = v8[(v52 >> v55) + v54];
    if (v58)
      v61 = (_QWORD *)v7;
    else
      v61 = (_QWORD *)((char *)v21 + v57);
    *v21 = v60;
    v16 = v60 >> (8 * v57);
    v15 = v56 & 7;
    v21 = v61;
  }
  while ((unint64_t)v17 > a3);
LABEL_30:
  v62 = BIT_mask[v9];
  v63 = ((v22 & v62) << v15) | v16;
  v64 = (v15 + v9) >> 3;
  *v61 = v63;
  v65 = (_QWORD *)((char *)v61 + v64);
  if ((unint64_t)v61 + v64 > v7)
    v65 = (_QWORD *)v7;
  v66 = ((_BYTE)v15 + (_BYTE)v9) & 7;
  v67 = ((v23 & v62) << v66) | (v63 >> (8 * v64));
  v68 = v66 + v9;
  v69 = v68 >> 3;
  *v65 = v67;
  v70 = (_QWORD *)((char *)v65 + v69);
  if ((unint64_t)v65 + v69 > v7)
    v70 = (_QWORD *)v7;
  v71 = v68 & 7;
  v72 = (v67 >> (8 * v69)) | (1 << v71);
  v73 = v71 + 1;
  *v70 = v72;
  v74 = (char *)v70 + (v73 >> 3);
  if (v7 <= (unint64_t)v74)
    return 0;
  if ((v73 & 7) != 0)
    return v74 - (char *)a1 + 1;
  else
    return v74 - (char *)a1;
}

uint64_t FSE_compressBound(unint64_t a1)
{
  return a1 + (a1 >> 7) + 524;
}

unint64_t FSE_compress_wksp(_WORD *a1, unint64_t a2, unsigned int *a3, unint64_t a4, unsigned int a5, unsigned int a6, unsigned __int16 *a7, unint64_t a8)
{
  int v8;
  unint64_t result;
  uint64_t v15;
  char *v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  unsigned int *v20;
  unsigned int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint32x4_t *v26;
  uint64_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unint64_t v42;
  _DWORD *v43;
  unint64_t v44;
  unsigned int v45;
  __int16 v46[256];
  unsigned int v47[4];
  _QWORD v48[128];

  v48[126] = *MEMORY[0x1E0C80C00];
  v45 = a5;
  v8 = 1 << (a6 - 2);
  if (a6 <= 0xC)
    v8 = 1024;
  if ((1 << (a6 - 1)) + 2 * a5 + 3 + v8 > a8)
    return -44;
  if (a4 < 2)
    return 0;
  v15 = 4 * ((1 << (a6 - 1)) + 2 * a5 + 3);
  v16 = (char *)&a7[(unint64_t)v15 / 2];
  if (a5)
  {
    if (a6)
      v17 = a6;
    else
      v17 = 11;
    if ((v16 & 3) != 0)
      return -1;
  }
  else
  {
    a5 = 255;
    v45 = 255;
    if (a6)
      v17 = a6;
    else
      v17 = 11;
    if ((v16 & 3) != 0)
      return -1;
  }
  v18 = a8 - v15;
  if (a8 - v15 < 0x1000)
    return -66;
  if (a5 < 0xFF)
  {
    v19 = 1;
    goto LABEL_29;
  }
  v45 = 255;
  if (a4 > 0x5DB)
  {
    v19 = 0;
LABEL_29:
    result = HIST_count_parallel_wksp(v47, &v45, a3, a4, v19, v16);
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    goto LABEL_39;
  }
  v20 = (unsigned int *)((char *)a3 + a4);
  bzero(v47, 0x400uLL);
  v21 = a3;
  do
  {
    v22 = *(unsigned __int8 *)v21;
    v21 = (unsigned int *)((char *)v21 + 1);
    ++v47[v22];
  }
  while (v21 < v20);
  LODWORD(v23) = 256;
  do
    v23 = (v23 - 1);
  while (!v47[v23]);
  v45 = v23;
  if (v23 < 7)
  {
    v24 = 0;
    v25 = 0;
    goto LABEL_34;
  }
  v24 = (v23 + 1) & 0x1FFFFFFF8;
  v26 = (uint32x4_t *)v48;
  v27 = v24;
  v28 = 0uLL;
  v29 = 0uLL;
  do
  {
    v28 = vmaxq_u32(v26[-1], v28);
    v29 = vmaxq_u32(*v26, v29);
    v26 += 2;
    v27 -= 8;
  }
  while (v27);
  v25 = vmaxvq_u32(vmaxq_u32(v28, v29));
  if (v23 + 1 != v24)
  {
LABEL_34:
    v30 = v23 - v24 + 1;
    v31 = &v47[v24];
    do
    {
      v33 = *v31++;
      v32 = v33;
      if (v33 > v25)
        v25 = v32;
      --v30;
    }
    while (v30);
  }
  result = v25;
LABEL_39:
  if (result == a4)
    return 1;
  v34 = a4 >> 7;
  if (result == 1 || result < v34)
    return 0;
  v36 = v45;
  v37 = (__clz(a4 - 1) ^ 0x1F) - 2;
  v38 = __clz(a4) ^ 0x1F;
  v39 = (__clz(v45) ^ 0x1F) + 2;
  if (v38 + 1 < v39)
    v40 = v38 + 1;
  else
    v40 = v39;
  if (v37 >= v17)
    v37 = v17;
  if (v40 > v37)
    v37 = v40;
  if (v37 <= 5)
    v37 = 5;
  if (v37 >= 0xC)
    v41 = 12;
  else
    v41 = v37;
  result = FSE_normalizeCount(v46, v41, v47, a4, v45, a4 > 0x7FF);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    LODWORD(v42) = ((v41 + v41 * v36) >> 3) + 3;
    if (v36)
      v42 = v42;
    else
      v42 = 512;
    result = FSE_writeNCount_generic(a1, a2, (uint64_t)v46, v36, v41, v42 <= a2);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      v43 = v16;
      v44 = result;
      result = FSE_buildCTable_wksp(a7, v46, v36, v41, v43, v18);
      if (result <= 0xFFFFFFFFFFFFFF88)
      {
        result = FSE_compress_usingCTable_generic((unint64_t *)((char *)a1 + v44), a2 - v44, (unint64_t)a3, a4, a7, a4 + v34 + 12 <= a2 - v44);
        if (result <= 0xFFFFFFFFFFFFFF88)
        {
          if (result)
          {
            if (v44 + result >= a4 - 1)
              return 0;
            else
              result += v44;
          }
        }
      }
    }
  }
  return result;
}

uint64_t HIST_count_wksp(uint32x4_t *a1, unsigned int *a2, unsigned int *a3, unint64_t a4, char *a5, unint64_t a6)
{
  uint64_t result;
  unsigned int *v9;
  int v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint32x4_t *v19;
  uint64_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  uint64_t v23;
  char *v24;
  unsigned int v25;
  unsigned int v26;

  if ((a5 & 3) != 0)
    return -1;
  if (a6 < 0x1000)
    return -66;
  v9 = a3;
  if (*a2 <= 0xFE)
  {
    v12 = 1;
    v13 = a5;
    return HIST_count_parallel_wksp(a1, a2, a3, a4, v12, v13);
  }
  *a2 = 255;
  if (a4 > 0x5DB)
  {
    v12 = 0;
    v13 = a5;
    return HIST_count_parallel_wksp(a1, a2, a3, a4, v12, v13);
  }
  bzero(a1, 0x400uLL);
  if (!a4)
  {
    result = 0;
    *a2 = 0;
    return result;
  }
  v14 = (unsigned __int8 *)v9 + a4;
  do
  {
    v15 = *(unsigned __int8 *)v9;
    v9 = (unsigned int *)((char *)v9 + 1);
    ++a1->i32[v15];
  }
  while (v9 < (unsigned int *)v14);
  LODWORD(v16) = 256;
  do
    v16 = (v16 - 1);
  while (!a1->i32[v16]);
  *a2 = v16;
  if (v16 < 7)
  {
    v17 = 0;
    v18 = 0;
    goto LABEL_21;
  }
  v17 = (v16 + 1) & 0x1FFFFFFF8;
  v19 = a1 + 1;
  v20 = v17;
  v21 = 0uLL;
  v22 = 0uLL;
  do
  {
    v21 = vmaxq_u32(v19[-1], v21);
    v22 = vmaxq_u32(*v19, v22);
    v19 += 2;
    v20 -= 8;
  }
  while (v20);
  v18 = vmaxvq_u32(vmaxq_u32(v21, v22));
  if (v16 + 1 != v17)
  {
LABEL_21:
    v23 = v16 - v17 + 1;
    v24 = &a1->i8[4 * v17];
    do
    {
      v26 = *(_DWORD *)v24;
      v24 += 4;
      v25 = v26;
      if (v26 > v18)
        v18 = v25;
      --v23;
    }
    while (v23);
  }
  return v18;
}

unint64_t FSE_compress2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v13;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _OWORD v19[895];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a6 > 0xC)
    return -44;
  v24 = v10;
  v25 = v11;
  v22 = v6;
  v23 = v7;
  v20 = v8;
  v21 = v9;
  MEMORY[0x1E0C80A78](a1, a2);
  memset(v19, 0, 512);
  return FSE_compress_wksp(v13, v14, v15, v16, v17, v18, (unsigned __int16 *)v19, 0x3804uLL);
}

unint64_t FSE_compress(uint64_t a1, uint64_t a2)
{
  _WORD *v2;
  unint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  _OWORD v7[897];

  MEMORY[0x1E0C80A78](a1, a2);
  memset(v7, 0, 512);
  return FSE_compress_wksp(v2, v3, v4, v5, 0xFFu, 0xBu, (unsigned __int16 *)v7, 0x3804uLL);
}

BOOL HIST_isError(unint64_t a1)
{
  return a1 > 0xFFFFFFFFFFFFFF88;
}

uint64_t HIST_count_simple(uint32x4_t *a1, unsigned int *a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned int v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint32x4_t *v16;
  uint64_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  unsigned int v20;

  v8 = *a2;
  bzero(a1, 4 * (*a2 + 1));
  if (!a4)
  {
    result = 0;
    *a2 = 0;
    return result;
  }
  if (a4 >= 1)
  {
    v9 = &a3[a4];
    do
    {
      v10 = *a3++;
      ++a1->i32[v10];
    }
    while (a3 < v9);
  }
  do
    v11 = v8;
  while (!a1->i32[v8--]);
  v13 = v8 + 1;
  *a2 = v13;
  if (v13 >= 7)
  {
    v14 = (v11 + 1) & 0x1FFFFFFF8;
    v16 = a1 + 1;
    v17 = (v13 + 1) & 0x1FFFFFFF8;
    v18 = 0uLL;
    v19 = 0uLL;
    do
    {
      v18 = vmaxq_u32(v16[-1], v18);
      v19 = vmaxq_u32(*v16, v19);
      v16 += 2;
      v17 -= 8;
    }
    while (v17);
    result = vmaxvq_u32(vmaxq_u32(v18, v19));
    if (v11 + 1 == v14)
      return result;
  }
  else
  {
    v14 = 0;
    LODWORD(result) = 0;
  }
  do
  {
    v20 = a1->u32[v14];
    if (v20 <= result)
      result = result;
    else
      result = v20;
  }
  while (v14++ < v11);
  return result;
}

uint64_t HIST_countFast_wksp(uint32x4_t *a1, unsigned int *a2, unsigned int *a3, unint64_t a4, char *a5, unint64_t a6)
{
  unsigned int *v7;
  unsigned int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t result;
  uint64_t v19;
  uint32x4_t *v20;
  uint64_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint64_t v24;
  char *v25;
  unsigned int v26;
  unsigned int v27;

  v7 = a3;
  if (a4 <= 0x5DB)
  {
    v10 = *a2;
    bzero(a1, 4 * (*a2 + 1));
    if (!a4)
    {
      result = 0;
      *a2 = 0;
      return result;
    }
    v11 = (unsigned __int8 *)v7 + a4;
    do
    {
      v12 = *(unsigned __int8 *)v7;
      v7 = (unsigned int *)((char *)v7 + 1);
      ++a1->i32[v12];
    }
    while (v7 < (unsigned int *)v11);
    do
      v13 = v10;
    while (!a1->i32[v10--]);
    v15 = v10 + 1;
    *a2 = v15;
    if (v15 >= 7)
    {
      v19 = v13 + 1;
      v16 = v19 & 0x1FFFFFFF8;
      v20 = a1 + 1;
      v21 = (v15 + 1) & 0x1FFFFFFF8;
      v22 = 0uLL;
      v23 = 0uLL;
      do
      {
        v22 = vmaxq_u32(v20[-1], v22);
        v23 = vmaxq_u32(*v20, v23);
        v20 += 2;
        v21 -= 8;
      }
      while (v21);
      v17 = vmaxvq_u32(vmaxq_u32(v22, v23));
      if (v19 == v16)
        return v17;
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v24 = v15 - v16 + 1;
    v25 = &a1->i8[4 * v16];
    do
    {
      v27 = *(_DWORD *)v25;
      v25 += 4;
      v26 = v27;
      if (v27 > v17)
        v17 = v26;
      --v24;
    }
    while (v24);
    return v17;
  }
  if ((a5 & 3) != 0)
    return -1;
  if (a6 >= 0x1000)
    return HIST_count_parallel_wksp(a1, a2, a3, a4, 0, a5);
  return -66;
}

uint64_t HIST_count_parallel_wksp(void *a1, unsigned int *a2, unsigned int *a3, uint64_t a4, int a5, char *a6)
{
  uint64_t v6;
  size_t v9;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  char *v16;
  char *v17;
  char *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint32x4_t v27;
  uint32x4_t v28;
  uint32x4_t *v29;
  uint32x4_t v30;
  uint32x4_t v31;
  unsigned int v32;

  v6 = a4;
  v9 = 4 * (*a2 + 1);
  if (a4)
  {
    v13 = (unsigned int *)((char *)a3 + a4);
    bzero(a6, 0x1000uLL);
    v14 = a3;
    v15 = a3;
    if (v6 >= 20)
    {
      v16 = a6 + 1024;
      v17 = a6 + 2048;
      v18 = a6 + 3072;
      v19 = *a3;
      v14 = a3;
      v15 = a3;
      do
      {
        v20 = v15[1];
        ++*(_DWORD *)&a6[4 * v19];
        ++*(_DWORD *)&v16[4 * BYTE1(v19)];
        ++*(_DWORD *)&v17[4 * BYTE2(v19)];
        ++*(_DWORD *)&v18[4 * HIBYTE(v19)];
        v21 = v15[2];
        ++*(_DWORD *)&a6[4 * v20];
        ++*(_DWORD *)&v16[4 * BYTE1(v20)];
        ++*(_DWORD *)&v17[4 * BYTE2(v20)];
        ++*(_DWORD *)&v18[(v20 >> 22) & 0x3FC];
        v22 = v15[3];
        ++*(_DWORD *)&a6[4 * v21];
        ++*(_DWORD *)&v16[4 * BYTE1(v21)];
        ++*(_DWORD *)&v17[4 * BYTE2(v21)];
        ++*(_DWORD *)&v18[(v21 >> 22) & 0x3FC];
        v23 = v15[4];
        v15 += 4;
        v19 = v23;
        ++*(_DWORD *)&a6[4 * v22];
        ++*(_DWORD *)&v16[4 * BYTE1(v22)];
        ++*(_DWORD *)&v17[4 * BYTE2(v22)];
        ++*(_DWORD *)&v18[(v22 >> 22) & 0x3FC];
        v14 += 4;
      }
      while (v15 + 1 < (unsigned int *)((char *)a3 + v6 - 15));
    }
    if (v15 < v13)
    {
      v24 = (char *)((char *)a3 + v6 - (char *)v14);
      do
      {
        v25 = *(unsigned __int8 *)v15;
        v15 = (unsigned int *)((char *)v15 + 1);
        ++*(_DWORD *)&a6[4 * v25];
        --v24;
      }
      while (v24);
    }
    v26 = 0;
    v27 = 0uLL;
    v28 = 0uLL;
    do
    {
      v29 = (uint32x4_t *)&a6[v26];
      v30 = (uint32x4_t)vaddq_s32(vaddq_s32(*(int32x4_t *)&a6[v26 + 2048], *(int32x4_t *)&a6[v26 + 1024]), vaddq_s32(*(int32x4_t *)&a6[v26 + 3072], *(int32x4_t *)&a6[v26]));
      v31 = (uint32x4_t)vaddq_s32(vaddq_s32(*(int32x4_t *)&a6[v26 + 2064], *(int32x4_t *)&a6[v26 + 1040]), vaddq_s32(*(int32x4_t *)&a6[v26 + 3088], *(int32x4_t *)&a6[v26 + 16]));
      *v29 = v30;
      v29[1] = v31;
      v27 = vmaxq_u32(v30, v27);
      v28 = vmaxq_u32(v31, v28);
      v26 += 32;
    }
    while (v26 != 1024);
    v6 = vmaxvq_u32(vmaxq_u32(v27, v28));
    v32 = 256;
    do
      --v32;
    while (!*(_DWORD *)&a6[4 * v32]);
    if (a5 && v32 > *a2)
    {
      return -48;
    }
    else
    {
      *a2 = v32;
      memmove(a1, a6, v9);
    }
  }
  else
  {
    bzero(a1, 4 * (*a2 + 1));
    *a2 = 0;
  }
  return v6;
}

uint64_t HIST_countFast(uint64_t a1, uint64_t a2)
{
  uint32x4_t *v2;
  unsigned int *v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint32x4_t *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t result;
  uint64_t v19;
  uint32x4_t *v20;
  uint64_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  char v28[4096];
  uint64_t v29;

  MEMORY[0x1E0C80A78](a1, a2);
  v6 = v5;
  v7 = v4;
  v8 = v3;
  v9 = v2;
  v29 = *MEMORY[0x1E0C80C00];
  if (v5 > 0x5DB)
    return HIST_count_parallel_wksp(v2, v3, v4, v5, 0, v28);
  v10 = *v3;
  bzero(v2, 4 * (*v3 + 1));
  if (!v6)
  {
    result = 0;
    *v8 = 0;
    return result;
  }
  v11 = (unsigned __int8 *)v7 + v6;
  do
  {
    v12 = *(unsigned __int8 *)v7;
    v7 = (unsigned int *)((char *)v7 + 1);
    ++v9->i32[v12];
  }
  while (v7 < (unsigned int *)v11);
  do
    v13 = v10;
  while (!v9->i32[v10--]);
  v15 = v10 + 1;
  *v8 = v15;
  if (v15 < 7)
  {
    v16 = 0;
    v17 = 0;
    goto LABEL_13;
  }
  v19 = v13 + 1;
  v16 = v19 & 0x1FFFFFFF8;
  v20 = v9 + 1;
  v21 = (v15 + 1) & 0x1FFFFFFF8;
  v22 = 0uLL;
  v23 = 0uLL;
  do
  {
    v22 = vmaxq_u32(v20[-1], v22);
    v23 = vmaxq_u32(*v20, v23);
    v20 += 2;
    v21 -= 8;
  }
  while (v21);
  v17 = vmaxvq_u32(vmaxq_u32(v22, v23));
  if (v19 != v16)
  {
LABEL_13:
    v24 = v15 - v16 + 1;
    v25 = (unsigned int *)v9 + v16;
    do
    {
      v27 = *v25++;
      v26 = v27;
      if (v27 > v17)
        v17 = v26;
      --v24;
    }
    while (v24);
  }
  return v17;
}

uint64_t HIST_count(uint64_t a1, uint64_t a2)
{
  uint32x4_t *v2;
  unsigned int *v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint32x4_t *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t result;
  uint32x4_t *v17;
  uint64_t v18;
  uint32x4_t v19;
  uint32x4_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  char v25[4096];
  uint64_t v26;

  MEMORY[0x1E0C80A78](a1, a2);
  v6 = v5;
  v7 = v4;
  v8 = v3;
  v9 = v2;
  v26 = *MEMORY[0x1E0C80C00];
  if (*v3 <= 0xFE)
  {
    v10 = 1;
    return HIST_count_parallel_wksp(v2, v3, v4, v5, v10, v25);
  }
  *v3 = 255;
  if (v5 > 0x5DB)
  {
    v10 = 0;
    return HIST_count_parallel_wksp(v2, v3, v4, v5, v10, v25);
  }
  bzero(v2, 0x400uLL);
  if (!v6)
  {
    result = 0;
    *v8 = 0;
    return result;
  }
  v11 = (unsigned __int8 *)v7 + v6;
  do
  {
    v12 = *(unsigned __int8 *)v7;
    v7 = (unsigned int *)((char *)v7 + 1);
    ++v9->i32[v12];
  }
  while (v7 < (unsigned int *)v11);
  LODWORD(v13) = 256;
  do
    v13 = (v13 - 1);
  while (!v9->i32[v13]);
  *v8 = v13;
  if (v13 < 7)
  {
    v14 = 0;
    v15 = 0;
    goto LABEL_17;
  }
  v14 = (v13 + 1) & 0x1FFFFFFF8;
  v17 = v9 + 1;
  v18 = v14;
  v19 = 0uLL;
  v20 = 0uLL;
  do
  {
    v19 = vmaxq_u32(v17[-1], v19);
    v20 = vmaxq_u32(*v17, v20);
    v17 += 2;
    v18 -= 8;
  }
  while (v18);
  v15 = vmaxvq_u32(vmaxq_u32(v19, v20));
  if (v13 + 1 != v14)
  {
LABEL_17:
    v21 = v13 - v14 + 1;
    v22 = (unsigned int *)v9 + v14;
    do
    {
      v24 = *v22++;
      v23 = v24;
      if (v24 > v15)
        v15 = v23;
      --v21;
    }
    while (v21);
  }
  return v15;
}

uint64_t HUF_optimalTableLog(unsigned int a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v3 = (__clz(a2 - 1) ^ 0x1F) - 1;
  v4 = __clz(a2) ^ 0x1F;
  v5 = (__clz(a3) ^ 0x1F) + 2;
  if (v4 + 1 < v5)
    v6 = v4 + 1;
  else
    v6 = v5;
  if (a1)
    v7 = a1;
  else
    v7 = 11;
  if (v3 >= v7)
    v3 = v7;
  if (v6 > v3)
    v3 = v6;
  if (v3 <= 5)
    v3 = 5;
  if (v3 >= 0xC)
    return 12;
  else
    return v3;
}

unint64_t HUF_writeCTable(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  unint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int32x4_t v12;
  unint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int8x16_t *v18;
  int32x4_t v19;
  int32x4_t v20;
  unint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  _QWORD *v25;
  unint64_t v26;
  int32x4_t v27;
  _BYTE *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  _BYTE *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint32x4_t *v53;
  uint64_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  _BYTE *v80;
  char v81;
  _BYTE v82[5];
  _BYTE v83[6];
  _BYTE v84[13];
  __int16 v85[2];
  _BYTE v86[6];
  __int128 v87;
  _BYTE v88[32];
  int v89;
  int v90[30];
  unsigned __int16 v91[118];
  uint64_t v92;
  int8x8x2_t v93;
  int8x16x2_t v94;
  int8x16x2_t v95;
  int8x16x2_t v96;
  int8x16x4_t v97;
  int8x16x4_t v98;

  v92 = *MEMORY[0x1E0C80C00];
  if (a4 > 0xFF)
    return -46;
  v84[0] = 0;
  v9 = (a5 + 1);
  if (v9 >= 2)
  {
    if (v9 < 9)
    {
      v10 = 1;
      goto LABEL_15;
    }
    v11 = v9 - 1;
    v12 = vdupq_n_s32(v9);
    if (v9 >= 0x21)
    {
      v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      v10 = v11 & 0xFFFFFFFFFFFFFFE0 | 1;
      v14 = (int32x4_t)xmmword_18823D6C0;
      v15 = (int32x4_t)xmmword_18823D6D0;
      v16 = (int32x4_t)xmmword_18823D6E0;
      v17 = (int32x4_t)xmmword_18822B780;
      v18 = (int8x16_t *)v86;
      v19.i64[0] = 0x1000000010;
      v19.i64[1] = 0x1000000010;
      v20.i64[0] = 0x2000000020;
      v20.i64[1] = 0x2000000020;
      v21 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v97.val[0] = (int8x16_t)vsubq_s32(v12, v17);
        v98.val[0] = (int8x16_t)vsubq_s32((int32x4_t)v97.val[0], v19);
        v97.val[1] = (int8x16_t)vsubq_s32(v12, v16);
        v98.val[1] = (int8x16_t)vsubq_s32((int32x4_t)v97.val[1], v19);
        v97.val[2] = (int8x16_t)vsubq_s32(v12, v15);
        v98.val[2] = (int8x16_t)vsubq_s32((int32x4_t)v97.val[2], v19);
        v97.val[3] = (int8x16_t)vsubq_s32(v12, v14);
        v98.val[3] = (int8x16_t)vsubq_s32((int32x4_t)v97.val[3], v19);
        v18[-1] = vqtbl4q_s8(v97, (int8x16_t)xmmword_18823D6F0);
        *v18 = vqtbl4q_s8(v98, (int8x16_t)xmmword_18823D6F0);
        v17 = vaddq_s32(v17, v20);
        v16 = vaddq_s32(v16, v20);
        v15 = vaddq_s32(v15, v20);
        v14 = vaddq_s32(v14, v20);
        v18 += 2;
        v21 -= 32;
      }
      while (v21);
      if (v11 == v13)
        goto LABEL_17;
      if ((v11 & 0x18) == 0)
      {
LABEL_15:
        v28 = &v84[v10];
        v29 = v9 - v10;
        do
          *v28++ = v29--;
        while (v29);
        goto LABEL_17;
      }
    }
    else
    {
      v13 = 0;
      LODWORD(v10) = 1;
    }
    v22 = vdupq_n_s32(v10);
    v10 = v11 & 0xFFFFFFFFFFFFFFF8 | 1;
    v23 = vaddq_s32(v22, (int32x4_t)xmmword_18822AB70);
    v24 = vaddq_s32(v22, (int32x4_t)xmmword_18820BF90);
    v25 = &v84[v13 + 1];
    v26 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v27.i64[0] = 0x800000008;
    v27.i64[1] = 0x800000008;
    do
    {
      v96.val[0] = (int8x16_t)vsubq_s32(v12, v24);
      v96.val[1] = (int8x16_t)vsubq_s32(v12, v23);
      *v25++ = vqtbl2q_s8(v96, (int8x16_t)xmmword_18823D700).u64[0];
      v24 = vaddq_s32(v24, v27);
      v23 = vaddq_s32(v23, v27);
      v26 += 8;
    }
    while (v26);
    if (v11 != (v11 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_15;
  }
LABEL_17:
  if (!a4)
  {
    v30 = 0;
    goto LABEL_45;
  }
  v30 = a4;
  if (a4 == 1)
  {
    v31 = 0;
LABEL_24:
    v38 = &v82[v31 - 1];
    v39 = (unsigned __int8 *)(a3 + 4 * v31 + 2);
    v40 = a4 - v31;
    do
    {
      v41 = *v39;
      v39 += 4;
      *v38++ = v84[v41];
      --v40;
    }
    while (v40);
    goto LABEL_26;
  }
  v31 = a4 & 0xFFFFFFFE;
  v32 = (unsigned __int8 *)(a3 + 6);
  v33 = v82;
  v34 = v31;
  do
  {
    v35 = *(v32 - 4);
    v36 = *v32;
    v32 += 8;
    v37 = v84[v36];
    *(v33 - 1) = v84[v35];
    *v33 = v37;
    v33 += 2;
    v34 -= 2;
  }
  while (v34);
  if (v31 != a4)
    goto LABEL_24;
LABEL_26:
  if (a4 < 2)
    goto LABEL_45;
  v42 = a1 + 1;
  v43 = a2 - 1;
  v44 = a1 + a2;
  v89 = 0;
  memset(v88, 0, sizeof(v88));
  v45 = &v81;
  v87 = 0u;
  do
  {
    v46 = *v45++;
    ++*(_DWORD *)&v88[4 * v46 - 16];
  }
  while (v45 < &v82[a4 - 1]);
  v47 = 14;
  do
  {
    v48 = (v47 - 2);
    --v47;
  }
  while (!*(_DWORD *)&v88[4 * v48 - 16]);
  v49 = (v47 - 1);
  if (v49 >= 7)
  {
    v52 = v48 + 1;
    v50 = (v48 + 1) & 0x1FFFFFFF8;
    v53 = (uint32x4_t *)v88;
    v54 = (v49 + 1) & 0x1FFFFFFF8;
    v55 = 0uLL;
    v56 = 0uLL;
    do
    {
      v55 = vmaxq_u32(v53[-1], v55);
      v56 = vmaxq_u32(*v53, v56);
      v53 += 2;
      v54 -= 8;
    }
    while (v54);
    v51 = vmaxvq_u32(vmaxq_u32(v55, v56));
    if (v52 == v50)
      goto LABEL_40;
  }
  else
  {
    v50 = 0;
    v51 = 0;
  }
  v57 = v49 - v50 + 1;
  v58 = (unsigned int *)&v88[4 * v50 - 16];
  do
  {
    v60 = *v58++;
    v59 = v60;
    if (v60 > v51)
      v51 = v59;
    --v57;
  }
  while (v57);
LABEL_40:
  if (v51 != 1 && v51 != a4)
  {
    v64 = (__clz(a4 - 1) ^ 0x1F) - 2;
    v65 = 32 - __clz(a4);
    v66 = (__clz(v49) ^ 0x1F) + 2;
    if (v65 >= v66)
      v65 = v66;
    if (v64 >= 6)
      v64 = 6;
    if (v65 > v64)
      v64 = v65;
    if (v64 <= 5)
      v64 = 5;
    if (v64 >= 0xC)
      v67 = 12;
    else
      v67 = v64;
    result = FSE_normalizeCount(v85, v67, (unsigned int *)&v87, a4, v47 - 1, 0);
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    LODWORD(v68) = ((v67 * v47) >> 3) + 3;
    v68 = v47 == 1 ? 512 : v68;
    result = FSE_writeNCount_generic((_WORD *)(a1 + 1), a2 - 1, (uint64_t)v85, v47 - 1, v67, v43 >= v68);
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    v69 = result;
    result = FSE_buildCTable_wksp(v91, v85, v47 - 1, v67, v90, 0x78uLL);
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    v70 = (unint64_t *)(v42 + v69);
    result = FSE_compress_usingCTable_generic(v70, v44 - (_QWORD)v70, (unint64_t)&v81, a4, v91, a4 + ((unint64_t)a4 >> 7) + 12 <= v44 - (uint64_t)v70);
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    if (result)
    {
      result = (unint64_t)v70 + result - v42;
      if (result > 0xFFFFFFFFFFFFFF88)
        return result;
      if (result >= 2 && result < a4 >> 1)
      {
        *(_BYTE *)a1 = result++;
        return result;
      }
    }
  }
LABEL_45:
  if (a4 > 0x80)
    return -1;
  result = ((a4 + 1) >> 1) + 1;
  if (result > a2)
    return -70;
  *(_BYTE *)a1 = a4 + 127;
  v82[v30 - 1] = 0;
  if (a4)
  {
    if (v30 <= 2)
      v62 = 2;
    else
      v62 = v30;
    if (v62 < 0xF)
    {
      v63 = 0;
      goto LABEL_91;
    }
    v72 = ((v62 - 1) >> 1) + 1;
    if (v62 >= 0x3F)
    {
      v74 = 0;
      v73 = v72 & 0x7FFFFFFFFFFFFFE0;
      v75 = v83;
      do
      {
        v76 = v75 - 32;
        v94 = vld2q_s8(v76);
        v95 = vld2q_s8(v75);
        v77 = a1 + (v74 & 0x7FFFFFFFFFFFFFE0);
        *(int8x16_t *)(v77 + 1) = vaddq_s8(vshlq_n_s8(v94.val[0], 4uLL), v94.val[1]);
        *(int8x16_t *)(v77 + 17) = vaddq_s8(vshlq_n_s8(v95.val[0], 4uLL), v95.val[1]);
        v74 += 32;
        v75 += 64;
      }
      while (v73 != v74);
      if (v72 == v73)
        return result;
      if ((v72 & 0x18) == 0)
      {
        v63 = 2 * v73;
LABEL_91:
        v80 = (_BYTE *)(a1 + (v63 >> 1) + 1);
        do
        {
          *v80++ = v82[v63] + 16 * v82[v63 - 1];
          v63 += 2;
        }
        while (v63 < v30);
        return result;
      }
    }
    else
    {
      v73 = 0;
    }
    v78 = v72 & 0x7FFFFFFFFFFFFFF8;
    v63 = 2 * (v72 & 0x7FFFFFFFFFFFFFF8);
    v79 = &v82[2 * v73 - 1];
    do
    {
      v93 = vld2_s8(v79);
      v79 += 16;
      *(int8x8_t *)(a1 + (v73 & 0x7FFFFFFFFFFFFFF8) + 1) = vadd_s8(vshl_n_s8(v93.val[0], 4uLL), v93.val[1]);
      v73 += 8;
    }
    while (v78 != v73);
    if (v72 != v78)
      goto LABEL_91;
  }
  return result;
}

unint64_t HUF_readCTable(uint64_t a1, _DWORD *a2, char *a3, unint64_t a4, _DWORD *a5)
{
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _BYTE *v20;
  int8x8_t v21;
  int8x8_t v22;
  int8x16_t v23;
  _BYTE *v24;
  int8x16_t *v25;
  uint64_t v26;
  int8x16_t v27;
  int8x16_t v28;
  unsigned __int8 *v29;
  _BYTE *v30;
  uint64_t v31;
  int v32;
  char v33;
  char v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  __int16 v38;
  _WORD *v39;
  __int16 *v40;
  __int16 v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _DWORD v51[16];
  unsigned __int8 v52[256];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v46 = 0;
  result = HUF_readStats_wksp(v52, 0x100uLL, (uint64_t)v51, &v46, (_DWORD *)&v46 + 1, a3, a4, (unsigned __int16 *)&v53, 0x164uLL);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  *a5 = v51[0] != 0;
  v9 = HIDWORD(v46);
  if (HIDWORD(v46) > 0xC)
    return -44;
  v10 = v46;
  if (v46 > *a2 + 1)
    return -48;
  if (HIDWORD(v46))
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = v51[v11 + 1] << v11;
      v51[v11 + 1] = v12;
      v12 += v13;
      ++v11;
    }
    while (v9 != v11);
  }
  if ((_DWORD)v10)
  {
    v14 = v9 + 1;
    if (v10 < 8)
    {
      v15 = 0;
      goto LABEL_23;
    }
    if (v10 >= 0x10)
    {
      v15 = v10 & 0xFFFFFFF0;
      v23 = vdupq_n_s8(v14);
      v24 = (_BYTE *)(a1 + 34);
      v25 = (int8x16_t *)v52;
      v26 = v15;
      do
      {
        v27 = *v25++;
        v28 = vbicq_s8(vsubq_s8(v23, v27), vceqzq_s8(v27));
        *(v24 - 32) = v28.i8[0];
        *(v24 - 28) = v28.i8[1];
        *(v24 - 24) = v28.i8[2];
        *(v24 - 20) = v28.i8[3];
        *(v24 - 16) = v28.i8[4];
        *(v24 - 12) = v28.i8[5];
        *(v24 - 8) = v28.i8[6];
        *(v24 - 4) = v28.i8[7];
        *v24 = v28.i8[8];
        v24[4] = v28.i8[9];
        v24[8] = v28.i8[10];
        v24[12] = v28.i8[11];
        v24[16] = v28.i8[12];
        v24[20] = v28.i8[13];
        v24[24] = v28.i8[14];
        v24[28] = v28.i8[15];
        v24 += 64;
        v26 -= 16;
      }
      while (v26);
      if (v15 == v10)
        goto LABEL_28;
      if ((v10 & 8) == 0)
      {
LABEL_23:
        v29 = &v52[v15];
        v30 = (_BYTE *)(a1 + 4 * v15 + 2);
        v31 = v10 - v15;
        do
        {
          v32 = *v29++;
          v33 = v14 - v32;
          if (v32)
            v34 = v33;
          else
            v34 = 0;
          *v30 = v34;
          v30 += 4;
          --v31;
        }
        while (v31);
        goto LABEL_28;
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = v15;
    v17 = vdup_n_s8(v14);
    v15 = v10 & 0xFFFFFFF8;
    v18 = v16 - v15;
    v19 = &v52[v16];
    v20 = (_BYTE *)(a1 + 4 * v16 + 18);
    do
    {
      v21 = *(int8x8_t *)v19;
      v19 += 8;
      v22 = vbic_s8(vsub_s8(v17, v21), vceqz_s8(v21));
      *(v20 - 16) = v22.i8[0];
      *(v20 - 12) = v22.i8[1];
      *(v20 - 8) = v22.i8[2];
      *(v20 - 4) = v22.i8[3];
      *v20 = v22.i8[4];
      v20[4] = v22.i8[5];
      v20[8] = v22.i8[6];
      v20[12] = v22.i8[7];
      v20 += 32;
      v18 += 8;
    }
    while (v18);
    if (v15 == v10)
    {
LABEL_28:
      v53 = 0;
      v54 = 0;
      v56 = 0;
      v55 = 0;
      v47 = 0;
      v48 = 0;
      v50 = 0;
      v35 = (unsigned __int8 *)(a1 + 2);
      v36 = v10;
      v49 = 0;
      do
      {
        v37 = *v35;
        v35 += 4;
        ++*((_WORD *)&v53 + v37);
        --v36;
      }
      while (v36);
      goto LABEL_30;
    }
    goto LABEL_23;
  }
  v53 = 0;
  v54 = 0;
  v56 = 0;
  v55 = 0;
  v47 = 0;
  v48 = 0;
  v50 = 0;
  v49 = 0;
LABEL_30:
  *((_WORD *)&v47 + (v9 + 1)) = 0;
  if ((_DWORD)v9)
  {
    v38 = 0;
    v39 = (_WORD *)&v47 + v9;
    v40 = (__int16 *)&v53 + v9;
    do
    {
      *v39-- = v38;
      v41 = *v40--;
      v38 = (unsigned __int16)(v41 + v38) >> 1;
      LODWORD(v9) = v9 - 1;
    }
    while ((_DWORD)v9);
  }
  if ((_DWORD)v10)
  {
    v42 = (unsigned __int8 *)(a1 + 2);
    v43 = v10;
    do
    {
      v44 = 2 * *v42;
      v45 = *(_WORD *)((char *)&v47 + v44);
      *(_WORD *)((char *)&v47 + v44) = v45 + 1;
      *((_WORD *)v42 - 1) = v45;
      v42 += 4;
      --v43;
    }
    while (v43);
  }
  *a2 = v10 - 1;
  return result;
}

uint64_t HUF_getNbBits(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(a1 + 4 * a2 + 2);
}

uint64_t HUF_buildCTable_wksp(uint64_t a1, int *a2, uint64_t a3, unsigned int a4, char *a5, unint64_t a6)
{
  uint64_t result;
  char *v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  char *v68;
  unsigned int v69;
  char *v70;
  unsigned int v71;
  unsigned int v72;
  char *v73;
  int v74;
  uint64_t v75;
  int v76;
  char *v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  unint64_t v83;
  char *v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _DWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  BOOL v101;
  _BOOL4 v102;
  int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  BOOL v107;
  int v108;
  char *v109;
  char *v110;
  int v111;
  char *v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  unsigned int v116;
  unint64_t v117;
  char v118;
  uint64_t v119;
  unsigned int v120;
  int v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  char *v129;
  int v130;
  signed int v131;
  __int128 v132;
  char *v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  int v150;
  int v151;
  unsigned __int8 *v152;
  unsigned int v153;
  __int16 v154;
  BOOL v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  int v161;
  char *v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  int v167;
  unsigned int v168;
  int v169;
  int v170;
  char *v171;
  char v172;
  int v173;
  char *v174;
  int v175;
  uint64_t v176;
  char *v177;
  unsigned __int8 *v178;
  uint64_t v179;
  __int16 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  unint64_t v184;
  _QWORD v185[3];
  __int16 v186;
  uint64_t v187;

  v187 = *MEMORY[0x1E0C80C00];
  if ((a5 & 3) != 0)
    return -1;
  if (a6 >> 8 < 0x11)
    return -66;
  if (a3 > 0xFF)
    return -46;
  v12 = a5 + 8;
  v13 = a5 + 4096;
  v14 = (a3 + 1);
  bzero(a5, 0x1100uLL);
  v15 = a2;
  v16 = (a3 + 1);
  do
  {
    v17 = *v15++;
    v18 = __clz(v17 + 1);
    ++*(_DWORD *)&v13[8 * (v18 ^ 0x1F)];
    --v16;
  }
  while (v16);
  v19 = 0;
  v20 = *((_DWORD *)a5 + 1082);
  v21 = *((_DWORD *)a5 + 1080);
  v22 = *((_DWORD *)a5 + 1078);
  v23 = *((_DWORD *)a5 + 1076);
  v24 = *((_DWORD *)a5 + 1074);
  v25 = *((_DWORD *)a5 + 1072);
  v26 = *((_DWORD *)a5 + 1070);
  v27 = *((_DWORD *)a5 + 1068);
  v28 = *((_DWORD *)a5 + 1066);
  v29 = *((_DWORD *)a5 + 1064);
  v30 = *((_DWORD *)a5 + 1062);
  v31 = *((_DWORD *)a5 + 1060);
  v32 = *((_DWORD *)a5 + 1058);
  v33 = *((_DWORD *)a5 + 1056);
  v34 = *((_DWORD *)a5 + 1054);
  v35 = *((_DWORD *)a5 + 1084) + *((_DWORD *)a5 + 1086);
  v36 = *((_DWORD *)a5 + 1052);
  *((_DWORD *)a5 + 1084) = v35;
  *((_DWORD *)a5 + 1085) = v35;
  v37 = v20 + v35;
  *((_DWORD *)a5 + 1082) = v37;
  *((_DWORD *)a5 + 1083) = v37;
  v38 = v21 + v37;
  *((_DWORD *)a5 + 1080) = v38;
  *((_DWORD *)a5 + 1081) = v38;
  v39 = v22 + v38;
  *((_DWORD *)a5 + 1078) = v39;
  *((_DWORD *)a5 + 1079) = v39;
  v40 = v23 + v39;
  *((_DWORD *)a5 + 1076) = v40;
  *((_DWORD *)a5 + 1077) = v40;
  v41 = v24 + v40;
  *((_DWORD *)a5 + 1074) = v41;
  *((_DWORD *)a5 + 1075) = v41;
  v42 = v25 + v41;
  *((_DWORD *)a5 + 1072) = v42;
  *((_DWORD *)a5 + 1073) = v42;
  v43 = v26 + v42;
  *((_DWORD *)a5 + 1070) = v43;
  *((_DWORD *)a5 + 1071) = v43;
  v44 = v27 + v43;
  *((_DWORD *)a5 + 1068) = v44;
  *((_DWORD *)a5 + 1069) = v44;
  v45 = v28 + v44;
  *((_DWORD *)a5 + 1066) = v45;
  *((_DWORD *)a5 + 1067) = v45;
  v46 = v29 + v45;
  *((_DWORD *)a5 + 1064) = v46;
  *((_DWORD *)a5 + 1065) = v46;
  v47 = v30 + v46;
  *((_DWORD *)a5 + 1062) = v47;
  *((_DWORD *)a5 + 1063) = v47;
  v48 = v31 + v47;
  *((_DWORD *)a5 + 1060) = v48;
  *((_DWORD *)a5 + 1061) = v48;
  v49 = v32 + v48;
  *((_DWORD *)a5 + 1058) = v49;
  *((_DWORD *)a5 + 1059) = v49;
  v50 = v33 + v49;
  *((_DWORD *)a5 + 1056) = v50;
  *((_DWORD *)a5 + 1057) = v50;
  v51 = v34 + v50;
  *((_DWORD *)a5 + 1054) = v51;
  *((_DWORD *)a5 + 1055) = v51;
  v52 = v36 + v51;
  *((_DWORD *)a5 + 1052) = v52;
  *((_DWORD *)a5 + 1053) = v52;
  v53 = *((_DWORD *)a5 + 1050) + v52;
  *((_DWORD *)a5 + 1050) = v53;
  *((_DWORD *)a5 + 1051) = v53;
  v54 = *((_DWORD *)a5 + 1048) + v53;
  *((_DWORD *)a5 + 1048) = v54;
  *((_DWORD *)a5 + 1049) = v54;
  v55 = *((_DWORD *)a5 + 1046) + v54;
  *((_DWORD *)a5 + 1046) = v55;
  *((_DWORD *)a5 + 1047) = v55;
  v56 = *((_DWORD *)a5 + 1044) + v55;
  *((_DWORD *)a5 + 1044) = v56;
  *((_DWORD *)a5 + 1045) = v56;
  v57 = *((_DWORD *)a5 + 1042) + v56;
  *((_DWORD *)a5 + 1042) = v57;
  *((_DWORD *)a5 + 1043) = v57;
  v58 = *((_DWORD *)a5 + 1040) + v57;
  *((_DWORD *)a5 + 1040) = v58;
  *((_DWORD *)a5 + 1041) = v58;
  v59 = *((_DWORD *)a5 + 1038) + v58;
  *((_DWORD *)a5 + 1038) = v59;
  *((_DWORD *)a5 + 1039) = v59;
  v60 = *((_DWORD *)a5 + 1036) + v59;
  *((_DWORD *)a5 + 1036) = v60;
  *((_DWORD *)a5 + 1037) = v60;
  v61 = *((_DWORD *)a5 + 1034) + v60;
  *((_DWORD *)a5 + 1034) = v61;
  *((_DWORD *)a5 + 1035) = v61;
  v62 = *((_DWORD *)a5 + 1032) + v61;
  *((_DWORD *)a5 + 1032) = v62;
  *((_DWORD *)a5 + 1033) = v62;
  v63 = *((_DWORD *)a5 + 1030) + v62;
  *((_DWORD *)a5 + 1030) = v63;
  *((_DWORD *)a5 + 1031) = v63;
  v64 = *((_DWORD *)a5 + 1028) + v63;
  *((_DWORD *)a5 + 1028) = v64;
  *((_DWORD *)a5 + 1029) = v64;
  v65 = *((_DWORD *)a5 + 1026) + v64;
  *((_DWORD *)a5 + 1026) = v65;
  *((_DWORD *)a5 + 1027) = v65;
  v66 = *((_DWORD *)a5 + 1024) + v65;
  *((_DWORD *)a5 + 1024) = v66;
  *((_DWORD *)a5 + 1025) = v66;
  do
  {
    v69 = a2[v19];
    v70 = &v13[8 * (__clz(v69 + 1) ^ 0x1F) + 8];
    v72 = *(_DWORD *)v70;
    v71 = *((_DWORD *)v70 + 1);
    *((_DWORD *)v70 + 1) = v71 + 1;
    if (v71 > v72)
    {
      while (1)
      {
        v67 = v71 - 1;
        v73 = &v12[8 * v71 - 8];
        if (v69 <= *(_DWORD *)v73)
          break;
        *(_QWORD *)&v12[8 * v71--] = *(_QWORD *)v73;
        if (v67 <= *(_DWORD *)v70)
          goto LABEL_11;
      }
    }
    v67 = v71;
LABEL_11:
    v68 = &v12[8 * v67];
    *(_DWORD *)v68 = v69;
    v68[6] = v19++;
  }
  while (v19 != v14);
  v74 = 0;
  v75 = a3 << 32;
  v76 = a3 + 1;
  v77 = &a5[8 * (int)a3 + 20];
  v78 = -1;
  do
  {
    --v74;
    v79 = *((_DWORD *)v77 - 3);
    v75 -= 0x100000000;
    --v76;
    v77 -= 8;
    --v78;
  }
  while (!v79);
  if (a4)
    v80 = a4;
  else
    v80 = 11;
  v81 = a3 + v74;
  v82 = a3 + v74 + 1;
  v83 = (a3 + v74 + 256);
  v84 = &v12[v75 >> 29];
  *((_DWORD *)a5 + 514) = *(_DWORD *)v84 + v79;
  *((_WORD *)v84 + 2) = 256;
  *(_WORD *)v77 = 256;
  if (v82 >= 2)
  {
    v85 = a3 + v78;
    v86 = 257;
    if (v83 <= 0x101)
      v87 = 257;
    else
      v87 = v83;
    v88 = v87 - 256;
    if (v88 < 2)
      goto LABEL_32;
    v86 = (v88 & 0xFFFFFFFFFFFFFFFELL) + 257;
    v89 = a5 + 2072;
    v90 = 257;
    if (v83 > 0x101)
      v90 = (v81 + 256);
    v91 = (v90 - 256) & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(v89 - 2) = 0x40000000;
      *v89 = 0x40000000;
      v89 += 4;
      v91 -= 2;
    }
    while (v91);
    if (v88 != (v88 & 0xFFFFFFFFFFFFFFFELL))
    {
LABEL_32:
      v92 = 257;
      if (v83 > 0x101)
        v92 = (v81 + 256);
      v93 = v92 - v86 + 1;
      v94 = &a5[8 * v86 + 8];
      do
      {
        *(_DWORD *)v94 = 0x40000000;
        v94 += 8;
        --v93;
      }
      while (v93);
    }
    *(_DWORD *)a5 = 0x80000000;
    if ((int)v83 <= 257)
      v95 = 257;
    else
      v95 = v83;
    v96 = a5 + 2064;
    v97 = 256;
    v98 = 256;
    do
    {
      v99 = *(_DWORD *)&v12[8 * v85];
      ++v97;
      v100 = *(_DWORD *)&v12[8 * v98];
      v101 = v99 >= v100;
      v102 = v99 < v100;
      if (v101)
        v103 = v98 + 1;
      else
        v103 = v98;
      if (!v101)
        v98 = v85;
      v104 = v85 - v102;
      v105 = *(_DWORD *)&v12[8 * v104];
      v106 = *(_DWORD *)&v12[8 * v103];
      v107 = v105 >= v106;
      if (v105 >= v106)
        v108 = v103;
      else
        v108 = v104;
      v109 = &v12[8 * v98];
      v110 = &v12[8 * v108];
      *v96 = *(_DWORD *)v110 + *(_DWORD *)v109;
      v96 += 2;
      v111 = !v107;
      if (v107)
        v98 = v103 + 1;
      else
        v98 = v103;
      v85 = v104 - v111;
      *((_WORD *)v110 + 2) = v97;
      *((_WORD *)v109 + 2) = v97;
    }
    while (v95 != v97);
    v12[8 * (int)v83 + 7] = 0;
    v112 = &a5[8 * (v81 + 255) + 15];
    do
    {
      *v112 = v12[8 * *(unsigned __int16 *)(v112 - 3) + 7] + 1;
      v112 -= 8;
      LODWORD(v83) = v83 - 1;
    }
    while ((int)v83 > 256);
  }
  else
  {
    *(_DWORD *)a5 = 0x80000000;
    v12[8 * (int)v83 + 7] = 0;
  }
  v113 = (v81 + 2);
  if ((v82 & 0x80000000) == 0)
  {
    v114 = a5 + 15;
    v115 = v113;
    do
    {
      *v114 = v12[8 * *(unsigned __int16 *)(v114 - 3) + 7] + 1;
      v114 += 8;
      --v115;
    }
    while (v115);
  }
  v116 = v12[8 * v76 + 7];
  LODWORD(v117) = v116;
  v118 = v116 - v80;
  if (v116 > v80)
  {
    LODWORD(v117) = v80;
    v119 = v75 + 0x100000000;
    v120 = v12[((v75 + 0x100000000) >> 29) + 7];
    if (v80 >= v120)
    {
      v121 = 0;
      v126 = v119 >> 32;
      LODWORD(v122) = a3 + v74 + 1;
    }
    else
    {
      v121 = 0;
      v122 = (a3 + v74 + 1);
      v123 = &a5[8 * (int)v122 + 15];
      v124 = v122 << 32;
      do
      {
        v121 += (1 << v118) + (-1 << (v116 - v120));
        *v123 = v80;
        v125 = *(v123 - 8);
        v123 -= 8;
        LOBYTE(v120) = v125;
        v124 -= 0x100000000;
        LODWORD(v122) = v122 - 1;
      }
      while (v80 < v125);
      v126 = v124 >> 32;
    }
    LODWORD(v127) = v122 + 1;
    v128 = v126 + 1;
    v129 = &a5[8 * v126 + 15];
    do
    {
      v130 = *v129;
      v129 -= 8;
      v127 = (v127 - 1);
      --v128;
    }
    while (v80 == v130);
    v131 = v121 >> v118;
    v184 = 0xF0F0F0F0F0F0F0F0;
    *(_QWORD *)&v132 = 0xF0F0F0F0F0F0F0F0;
    *((_QWORD *)&v132 + 1) = 0xF0F0F0F0F0F0F0F0;
    v182 = v132;
    v183 = v132;
    v181 = v132;
    if ((v128 & 0x80000000) == 0)
    {
      v133 = &a5[8 * v127 + 15];
      v134 = v80;
      do
      {
        while (1)
        {
          v137 = *v133;
          v133 -= 8;
          v136 = v137;
          if (v134 <= v137)
            break;
          *((_DWORD *)&v181 + v80 - v136) = v127;
          v135 = v127;
          v134 = v136;
          --v127;
          if (v135 <= 0)
            goto LABEL_73;
        }
        v138 = v127--;
      }
      while (v138 > 0);
    }
LABEL_73:
    if (v131 >= 1)
    {
      do
      {
        v139 = __clz(v131);
        if (v139 == 31)
        {
LABEL_77:
          LODWORD(v140) = 1;
        }
        else
        {
          v140 = 32 - v139;
          while (1)
          {
            v142 = *((unsigned int *)&v181 + v140);
            v143 = v140 - 1;
            if ((_DWORD)v142 != -252645136)
            {
              v144 = *((unsigned int *)&v181 + v143);
              if ((_DWORD)v144 == -252645136
                || *(_DWORD *)&v12[8 * v142] <= (2 * *(_DWORD *)&v12[8 * v144]))
              {
                break;
              }
            }
            --v140;
            if ((v143 & 0xFFFFFFFE) == 0)
              goto LABEL_77;
          }
          if (v140 > 0xC)
            goto LABEL_88;
        }
        v141 = 4 * v140;
        while (*(_DWORD *)((char *)&v181 + v141) == -252645136)
        {
          LODWORD(v140) = v140 + 1;
          v141 += 4;
          if (v141 == 52)
          {
            LODWORD(v140) = 13;
            break;
          }
        }
LABEL_88:
        v145 = v140 - 1;
        v146 = v140;
        v147 = *((unsigned int *)&v181 + v140);
        v148 = *((_DWORD *)&v181 + v145);
        ++v12[8 * v147 + 7];
        if (v148 == -252645136)
          v149 = v147;
        else
          v149 = v148;
        *((_DWORD *)&v181 + v145) = v149;
        v150 = -252645136;
        if ((_DWORD)v147)
        {
          v151 = v147 - 1;
          if (v80 - (_DWORD)v146 == v12[8 * v151 + 7])
            v150 = v151;
          else
            v150 = -252645136;
        }
        v131 += -1 << v145;
        *((_DWORD *)&v181 + v146) = v150;
      }
      while (v131 > 0);
    }
    if (v131 < 0)
    {
      v161 = DWORD1(v181);
      v162 = a5 + 15;
      do
      {
        if (v131 < 0)
          v163 = -1;
        else
          v163 = v131;
        v164 = -252645136 - v161;
        if (v163 - v131 < (-252645136 - v161))
          v164 = v163 - v131;
        v165 = v164 + 1;
        if (v164 + 1 >= 3 && -2 - v161 >= v164 && &v162[8 * (v161 + 1) + 8 * v164] >= &v162[8 * (v161 + 1)])
        {
          v167 = v165 & 1;
          if ((v165 & 1) == 0)
            v167 = 2;
          v168 = v165 - v167;
          v169 = v161 + v168;
          v131 += v168;
          v170 = v161 + 2;
          do
          {
            v171 = &v12[8 * v170];
            v172 = v171[7] - 1;
            --v12[8 * (v170 - 1) + 7];
            v171[7] = v172;
            v170 += 2;
            v168 -= 2;
          }
          while (v168);
          v161 = v169;
        }
        v173 = v163 + 1;
        while (v161 != -252645136)
        {
          --v12[8 * ++v161 + 7];
          if (v173 == ++v131)
            goto LABEL_96;
        }
        v161 = v128 + 2;
        v174 = &v162[8 * v128++];
        do
        {
          v175 = *v174;
          v174 -= 8;
          --v128;
          --v161;
        }
        while (v80 == v175);
        --v12[8 * v161 + 7];
        v155 = v131++ <= -2;
      }
      while (v155);
    }
  }
LABEL_96:
  if (v117 > 0xC)
    return -1;
  v181 = 0uLL;
  WORD4(v182) = 0;
  *(_QWORD *)&v182 = 0;
  memset(v185, 0, sizeof(v185));
  v186 = 0;
  if ((v82 & 0x80000000) == 0)
  {
    v152 = (unsigned __int8 *)(a5 + 15);
    do
    {
      v153 = *v152;
      v152 += 8;
      ++*((_WORD *)&v181 + v153);
      --v113;
    }
    while (v113);
  }
  result = v117;
  if ((int)v117 >= 1)
  {
    v154 = 0;
    v117 = v117;
    do
    {
      *((_WORD *)v185 + v117) = v154;
      v154 = (unsigned __int16)(*((_WORD *)&v181 + v117) + v154) >> 1;
      v155 = v117-- > 1;
    }
    while (v155);
  }
  if ((a3 & 0x80000000) == 0)
  {
    if ((_DWORD)a3)
    {
      v156 = v14 & 0xFFFFFFFE;
      v157 = a5 + 23;
      v158 = v156;
      do
      {
        v159 = *v157;
        v160 = a1 + 4 * *(v157 - 1);
        *(_BYTE *)(a1 + 4 * *(v157 - 9) + 2) = *(v157 - 8);
        *(_BYTE *)(v160 + 2) = v159;
        v157 += 16;
        v158 -= 2;
      }
      while (v158);
      if (v156 == v14)
        goto LABEL_137;
    }
    else
    {
      v156 = 0;
    }
    v176 = v14 - v156;
    v177 = &a5[8 * v156 + 15];
    do
    {
      *(_BYTE *)(a1 + 4 * *(v177 - 1) + 2) = *v177;
      v177 += 8;
      --v176;
    }
    while (v176);
LABEL_137:
    v178 = (unsigned __int8 *)(a1 + 2);
    do
    {
      v179 = 2 * *v178;
      v180 = *(_WORD *)((char *)v185 + v179);
      *(_WORD *)((char *)v185 + v179) = v180 + 1;
      *((_WORD *)v178 - 1) = v180;
      v178 += 4;
      --v14;
    }
    while (v14);
  }
  return result;
}

unint64_t HUF_estimateCompressedSize(uint64_t a1, int32x4_t *a2, unsigned int a3)
{
  int32x4_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t v8;
  unint64_t v9;
  const char *v10;
  int32x4_t *v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  uint64_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  const char *v27;
  unsigned __int128 v28;
  unsigned __int128 v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64x2_t v47;
  int64x2_t v48;
  const char *v49;
  int32x4_t *v50;
  uint64_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  __int32 *v59;
  unsigned __int8 *v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;

  if ((a3 & 0x80000000) != 0)
    return 0;
  v4 = a3 + 1;
  if (a3 >= 8)
  {
    if (a3 >= 0x20)
    {
      v8 = 0uLL;
      v9 = 32;
      if ((((_BYTE)a3 + 1) & 0x1F) != 0)
        v9 = ((_BYTE)a3 + 1) & 0x1F;
      v5 = v4 - v9;
      v10 = (const char *)(a1 + 66);
      v11 = a2 + 4;
      v12 = 0uLL;
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = 0uLL;
      v3 = 0uLL;
      v16 = 0uLL;
      v17 = 0uLL;
      v18 = 0uLL;
      v19 = 0uLL;
      v20 = a3 + 1;
      v21 = 0uLL;
      v22 = 0uLL;
      v23 = 0uLL;
      v24 = 0uLL;
      v25 = 0uLL;
      v26 = 0uLL;
      do
      {
        v27 = v10 - 64;
        v28 = (unsigned __int128)vld4q_s8(v27);
        v29 = (unsigned __int128)vld4q_s8(v10);
        v30 = (int32x4_t)vqtbl1q_s8((int8x16_t)v28, (int8x16_t)xmmword_18823D710);
        v31 = (int32x4_t)vqtbl1q_s8((int8x16_t)v28, (int8x16_t)xmmword_18823D720);
        v32 = (int32x4_t)vqtbl1q_s8((int8x16_t)v28, (int8x16_t)xmmword_18823D730);
        v33 = (int32x4_t)vqtbl1q_s8((int8x16_t)v29, (int8x16_t)xmmword_18823D740);
        v34 = (int32x4_t)vqtbl1q_s8((int8x16_t)v29, (int8x16_t)xmmword_18823D710);
        v35 = (int32x4_t)vqtbl1q_s8((int8x16_t)v29, (int8x16_t)xmmword_18823D720);
        v36 = (uint32x4_t)vmulq_s32(v11[-1], (int32x4_t)vqtbl1q_s8((int8x16_t)v28, (int8x16_t)xmmword_18823D740));
        v37 = (uint32x4_t)vmulq_s32(v11[-2], v32);
        v38 = (uint32x4_t)vmulq_s32(v11[-3], v31);
        v39 = (uint32x4_t)vmulq_s32(v11[-4], v30);
        v40 = (uint32x4_t)vmulq_s32(v11[2], (int32x4_t)vqtbl1q_s8((int8x16_t)v29, (int8x16_t)xmmword_18823D730));
        v41 = (uint32x4_t)vmulq_s32(v11[1], v35);
        v42 = (uint32x4_t)vmulq_s32(*v11, v34);
        v43 = (uint32x4_t)vmulq_s32(v11[3], v33);
        v3 = (int32x4_t)vaddw_high_u32((uint64x2_t)v3, v37);
        v15 = (int64x2_t)vaddw_u32((uint64x2_t)v15, *(uint32x2_t *)v37.i8);
        v14 = (int64x2_t)vaddw_high_u32((uint64x2_t)v14, v38);
        v13 = (int64x2_t)vaddw_u32((uint64x2_t)v13, *(uint32x2_t *)v38.i8);
        v12 = (int64x2_t)vaddw_high_u32((uint64x2_t)v12, v39);
        v8 = (int64x2_t)vaddw_u32((uint64x2_t)v8, *(uint32x2_t *)v39.i8);
        v16 = (int64x2_t)vaddw_u32((uint64x2_t)v16, *(uint32x2_t *)v36.i8);
        v17 = (int64x2_t)vaddw_high_u32((uint64x2_t)v17, v36);
        v24 = (int64x2_t)vaddw_high_u32((uint64x2_t)v24, v40);
        v23 = (int64x2_t)vaddw_u32((uint64x2_t)v23, *(uint32x2_t *)v40.i8);
        v22 = (int64x2_t)vaddw_high_u32((uint64x2_t)v22, v41);
        v21 = (int64x2_t)vaddw_u32((uint64x2_t)v21, *(uint32x2_t *)v41.i8);
        v19 = (int64x2_t)vaddw_high_u32((uint64x2_t)v19, v42);
        v18 = (int64x2_t)vaddw_u32((uint64x2_t)v18, *(uint32x2_t *)v42.i8);
        v25 = (int64x2_t)vaddw_u32((uint64x2_t)v25, *(uint32x2_t *)v43.i8);
        v26 = (int64x2_t)vaddw_high_u32((uint64x2_t)v26, v43);
        v10 += 128;
        v11 += 8;
        v20 -= 32;
      }
      while (v9 != v20);
      v6 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v18, v8), vaddq_s64(v23, v15)), vaddq_s64(vaddq_s64(v21, v13), vaddq_s64(v25, v16))), vaddq_s64(vaddq_s64(vaddq_s64(v19, v12), vaddq_s64(v24, (int64x2_t)v3)), vaddq_s64(vaddq_s64(v22, v14), vaddq_s64(v26, v17)))));
      if (v9 < 9)
        goto LABEL_17;
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
    v44 = ((_BYTE)a3 + 1) & 7;
    if ((((_BYTE)a3 + 1) & 7) == 0)
      v44 = 8;
    v45 = 4 * v5;
    v46 = v44 + v5;
    v5 = v4 - v44;
    v47 = 0uLL;
    v48 = (int64x2_t)v6;
    v49 = (const char *)(v45 + a1 + 2);
    v50 = (int32x4_t *)((char *)a2 + v45);
    v51 = v46 - v4;
    v52 = 0uLL;
    v53 = 0uLL;
    do
    {
      v3.i64[0] = (unint64_t)vld4_s8(v49);
      v49 += 32;
      v54 = (int32x4_t)vqtbl1q_s8((int8x16_t)v3, (int8x16_t)xmmword_18823D710);
      v55 = (int32x4_t)vqtbl1q_s8((int8x16_t)v3, (int8x16_t)xmmword_18823D720);
      v3 = *v50;
      v56 = v50[1];
      v50 += 2;
      v57 = (uint32x4_t)vmulq_s32(v56, v55);
      v58 = (uint32x4_t)vmulq_s32(v3, v54);
      v53 = (int64x2_t)vaddw_high_u32((uint64x2_t)v53, v57);
      v47 = (int64x2_t)vaddw_high_u32((uint64x2_t)v47, v58);
      v52 = (int64x2_t)vaddw_u32((uint64x2_t)v52, *(uint32x2_t *)v57.i8);
      v48 = (int64x2_t)vaddw_u32((uint64x2_t)v48, *(uint32x2_t *)v58.i8);
      v51 += 8;
    }
    while (v51);
    v6 = vaddvq_s64(vaddq_s64(vaddq_s64(v48, v52), vaddq_s64(v47, v53)));
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
LABEL_17:
  v59 = &a2->i32[v5];
  v60 = (unsigned __int8 *)(4 * v5 + a1 + 2);
  v61 = v4 - v5;
  do
  {
    v63 = *v60;
    v60 += 4;
    v62 = v63;
    v64 = *v59++;
    v6 += (v64 * v62);
    --v61;
  }
  while (v61);
  return v6 >> 3;
}

BOOL HUF_validateCTable(uint64_t a1, int32x4_t *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int32 v5;
  unint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  const char *v11;
  int32x4_t *v12;
  uint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  const char *v20;
  unsigned __int128 v21;
  unsigned __int128 v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x8_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x8_t v28;
  int8x8_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x8_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int32x4_t *v41;
  const char *v42;
  uint64_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int8x16_t v47;
  __int32 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  BOOL v54;
  int v55;

  if ((a3 & 0x80000000) != 0)
    return 1;
  v3 = a3 + 1;
  if (a3 >= 8)
  {
    if (a3 >= 0x20)
    {
      v7 = 32;
      v8 = 0uLL;
      v9.i64[0] = 0x100000001;
      v9.i64[1] = 0x100000001;
      v10 = 0uLL;
      if ((((_BYTE)a3 + 1) & 0x1F) != 0)
        v7 = ((_BYTE)a3 + 1) & 0x1F;
      v4 = v3 - v7;
      v11 = (const char *)(a1 + 66);
      v12 = a2 + 4;
      v13 = a3 + 1;
      v14 = 0uLL;
      v15 = 0uLL;
      v16 = 0uLL;
      v17 = 0uLL;
      v18 = 0uLL;
      v19 = 0uLL;
      do
      {
        v20 = v11 - 64;
        v21 = (unsigned __int128)vld4q_s8(v20);
        v22 = (unsigned __int128)vld4q_s8(v11);
        v23 = vceqzq_s8((int8x16_t)v21);
        v24 = vceqzq_s8((int8x16_t)v22);
        v25 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v12[-2]), (int16x8_t)vceqzq_s32(v12[-1])))), (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
        v26 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v25, *(int8x8_t *)v8.i8)), v9);
        v27 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v25, *(int8x8_t *)v8.i8)), v9);
        v28 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v12[-4]), (int16x8_t)vceqzq_s32(v12[-3])))), *(int8x8_t *)v23.i8);
        v29 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(*v12), (int16x8_t)vceqzq_s32(v12[1])))), *(int8x8_t *)v24.i8);
        v30 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v29, *(int8x8_t *)v8.i8)), v9);
        v31 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v29, *(int8x8_t *)v8.i8)), v9);
        v32 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v12[2]), (int16x8_t)vceqzq_s32(v12[3])))), (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
        v33 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v32, *(int8x8_t *)v8.i8)), v9);
        v34 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v32, *(int8x8_t *)v8.i8)), v9);
        v10 = vorrq_s8(v10, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v28, *(int8x8_t *)v8.i8)), v9));
        v8 = vorrq_s8(v8, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v28, *(int8x8_t *)v8.i8)), v9));
        v15 = vorrq_s8(v15, v27);
        v14 = vorrq_s8(v14, v26);
        v19 = vorrq_s8(v19, v34);
        v11 += 128;
        v18 = vorrq_s8(v18, v33);
        v12 += 8;
        v17 = vorrq_s8(v17, v31);
        v13 -= 32;
        v16 = vorrq_s8(v16, v30);
      }
      while (v7 != v13);
      v35 = vorrq_s8(vorrq_s8(vorrq_s8(v16, v8), vorrq_s8(v18, v14)), vorrq_s8(vorrq_s8(v17, v10), vorrq_s8(v19, v15)));
      *(int8x8_t *)v35.i8 = vorr_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
      v5 = v35.i32[0] | v35.i32[1];
      if (v7 < 9)
        goto LABEL_17;
    }
    else
    {
      v5 = 0;
      v4 = 0;
    }
    v36 = ((_BYTE)a3 + 1) & 7;
    if ((((_BYTE)a3 + 1) & 7) == 0)
      v36 = 8;
    v37 = 4 * v4;
    v38 = v36 + v4;
    v4 = v3 - v36;
    v39 = (int8x16_t)v5;
    v40 = 0uLL;
    v41 = (int32x4_t *)((char *)a2 + v37);
    v42 = (const char *)(v37 + a1 + 2);
    v43 = v38 - v3;
    v44.i64[0] = 0x100000001;
    v44.i64[1] = 0x100000001;
    do
    {
      v45 = *v41;
      v46 = v41[1];
      v41 += 2;
      *(int8x8_t *)v45.i8 = vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v45), (int16x8_t)vceqzq_s32(v46))));
      v46.i64[0] = (unint64_t)vld4_s8(v42);
      v42 += 32;
      *(int8x8_t *)v45.i8 = vand_s8(*(int8x8_t *)v45.i8, vceqz_s8(*(int8x8_t *)v46.i8));
      v40 = vorrq_s8(v40, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v45.i8, *(int8x8_t *)v39.i8)), v44));
      v39 = vorrq_s8(v39, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v45.i8, *(int8x8_t *)v39.i8)), v44));
      v43 += 8;
    }
    while (v43);
    v47 = vorrq_s8(v39, v40);
    *(int8x8_t *)v47.i8 = vorr_s8(*(int8x8_t *)v47.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL));
    v5 = v47.i32[0] | v47.i32[1];
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
LABEL_17:
  v48 = &a2->i32[v4];
  v49 = (unsigned __int8 *)(4 * v4 + a1 + 2);
  v50 = v3 - v4;
  do
  {
    v51 = *v48++;
    v54 = v51 == 0;
    v53 = *v49;
    v49 += 4;
    v52 = v53;
    v54 = !v54 && v52 == 0;
    v55 = v54;
    v5 |= v55;
    --v50;
  }
  while (v50);
  return v5 == 0;
}

uint64_t HUF_compressBound(unint64_t a1)
{
  return a1 + (a1 >> 8) + 137;
}

uint64_t HUF_compress1X_usingCTable_internal(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a2 <= 8)
    return 0;
  else
    return ((uint64_t (*)(void))((char *)&loc_18814EF1C + 4 * byte_18823A852[a4 & 3]))();
}

unint64_t HUF_compress4X_usingCTable_internal(_WORD *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t result;
  unint64_t v9;
  _WORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char v14;
  unint64_t v15;

  result = 0;
  if (a2 >= 0x11 && a4 >= 0xC)
  {
    v9 = (a4 + 3) >> 2;
    v10 = a1 + 3;
    result = HUF_compress1X_usingCTable_internal((uint64_t)(a1 + 3), a2 - 6, a3, v9);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      if (result)
      {
        v11 = (char *)a1 + a2;
        *a1 = result;
        v12 = (char *)v10 + result;
        result = HUF_compress1X_usingCTable_internal((uint64_t)v10 + result, v11 - ((char *)v10 + result), a3 + v9, (a4 + 3) >> 2);
        if (result <= 0xFFFFFFFFFFFFFF88)
        {
          if (result)
          {
            a1[1] = result;
            v13 = (uint64_t)&v12[result];
            result = HUF_compress1X_usingCTable_internal(v13, (unint64_t)&v11[-v13], a3 + v9 + v9, (a4 + 3) >> 2);
            if (result <= 0xFFFFFFFFFFFFFF88)
            {
              if (result)
              {
                v14 = a3 + a4;
                a1[2] = result;
                v15 = v13 + result;
                result = HUF_compress1X_usingCTable_internal(v13 + result, (unint64_t)&v11[-v13 - result], a3 + v9 + v9 + v9, v14 - (a3 + v9 + v9 + v9));
                if (result <= 0xFFFFFFFFFFFFFF88)
                {
                  if (result)
                    return v15 + result - (_QWORD)a1;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t HUF_compress1X_wksp(uint64_t a1, unint64_t a2, unsigned int *a3, unint64_t a4, unsigned int a5, unsigned int a6, char *a7, unint64_t a8)
{
  return HUF_compress_internal(a1, a2, a3, a4, a5, a6, 0, a7, a8, 0, 0, 0);
}

uint64_t HUF_compress_internal(uint64_t a1, unint64_t a2, unsigned int *a3, unint64_t a4, unsigned int a5, unsigned int a6, int a7, char *a8, unint64_t a9, char *a10, int *a11, int a12)
{
  unint64_t v12;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  _WORD *v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v28;
  unsigned int *v29;
  unsigned int *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint32x4_t *v35;
  uint64_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int32 v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  const char *v51;
  int32x4_t *v52;
  uint64_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  const char *v60;
  unsigned __int128 v61;
  unsigned __int128 v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x8_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x8_t v68;
  int8x8_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x8_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int32x4_t *v81;
  const char *v82;
  uint64_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int8x8_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int v93;
  int v94;
  int v95;
  int v97;
  char v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  int64x2_t v105;
  uint64_t v106;
  unint64_t v107;
  int64x2_t v108;
  unint64_t v109;
  const char *v110;
  int32x4_t *v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  uint64_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  const char *v127;
  unsigned __int128 v128;
  unsigned __int128 v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  uint32x4_t v136;
  uint32x4_t v137;
  uint32x4_t v138;
  uint32x4_t v139;
  uint32x4_t v140;
  uint32x4_t v141;
  uint32x4_t v142;
  uint32x4_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int64x2_t v147;
  int64x2_t v148;
  const char *v149;
  char *v150;
  uint64_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  uint32x4_t v157;
  uint32x4_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  int64x2_t v168;
  unint64_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int64x2_t v176;
  int64x2_t v177;
  uint64_t v178;
  int32x4_t *v179;
  int64x2_t v180;
  int64x2_t v181;
  int64x2_t v182;
  int64x2_t v183;
  int64x2_t v184;
  int64x2_t v185;
  const char *v186;
  const char *v187;
  unsigned __int128 v188;
  unsigned __int128 v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  uint32x4_t v196;
  uint32x4_t v197;
  uint32x4_t v198;
  uint32x4_t v199;
  uint32x4_t v200;
  uint32x4_t v201;
  uint32x4_t v202;
  uint32x4_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  int64x2_t v207;
  int64x2_t v208;
  uint64_t v209;
  int64x2_t v210;
  int64x2_t v211;
  const char *v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  uint32x4_t v216;
  uint32x4_t v217;
  uint64_t v218;
  char *v219;
  int v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  unsigned int v225;
  int v226;

  v226 = a5;
  if (a9 >> 8 >= 0x19)
  {
    v12 = 0;
    if (!a2 || !a4)
      return v12;
    if (a4 > 0x20000)
      return -72;
    if (a6 > 0xC)
      return -44;
    if (a5 > 0xFF)
      return -46;
    v18 = (_BYTE *)a1;
    v19 = a1 + a2;
    if (!a5)
    {
      a5 = 255;
      v226 = 255;
    }
    if (a6)
      v20 = a6;
    else
      v20 = 11;
    if (a11)
      v21 = a12 == 0;
    else
      v21 = 1;
    v22 = v21;
    if (!v21 && *a11 == 2)
    {
      v23 = (_WORD *)a1;
LABEL_25:
      v24 = (uint64_t)a3;
      v25 = a4;
      v26 = a7;
      return HUF_compressCTable_internal(a1, v23, v19, v24, v25, v26);
    }
    if ((a8 & 3) != 0)
      return -1;
    v223 = a1 + a2;
    v224 = v20;
    if (a5 < 0xFF)
    {
      v28 = 1;
      goto LABEL_40;
    }
    v226 = 255;
    if (a4 > 0x5DB)
    {
      v28 = 0;
LABEL_40:
      v12 = HIST_count_parallel_wksp(a8, (unsigned int *)&v226, a3, a4, v28, a8);
      if (v12 > 0xFFFFFFFFFFFFFF88)
        return v12;
LABEL_50:
      if (v12 == a4)
      {
        *v18 = *(_BYTE *)a3;
        return 1;
      }
      if (v12 <= (a4 >> 7) + 4)
        return 0;
      if (!a11)
      {
LABEL_85:
        v99 = (__clz(a4 - 1) ^ 0x1F) - 1;
        v100 = __clz(a4) ^ 0x1F;
        v101 = (__clz(v226) ^ 0x1F) + 2;
        if (v100 + 1 < v101)
          v102 = v100 + 1;
        else
          v102 = v101;
        if (v99 >= v224)
          v99 = v224;
        if (v102 > v99)
          v99 = v102;
        if (v99 <= 5)
          v99 = 5;
        if (v99 >= 0xC)
          v103 = 12;
        else
          v103 = v99;
        v225 = v226;
        v12 = HUF_buildCTable_wksp((uint64_t)(a8 + 1024), (int *)a8, v226, v103, a8 + 2048, 0x1100uLL);
        if (v12 > 0xFFFFFFFFFFFFFF88)
          return v12;
        v222 = v225 + 1;
        bzero(&a8[4 * v222 + 1024], 1024 - 4 * v222);
        v104 = HUF_writeCTable((uint64_t)v18, a2, (uint64_t)(a8 + 1024), v225, v12);
        v12 = v104;
        if (v104 > 0xFFFFFFFFFFFFFF88)
          return v12;
        if (a11)
        {
          if (*a11)
          {
            if ((v225 & 0x80000000) != 0)
              goto LABEL_145;
            if (v222 < 9)
            {
              v106 = 0;
              v107 = 0;
              goto LABEL_121;
            }
            if (v222 >= 0x21)
            {
              v108 = 0uLL;
              if ((v222 & 0x1F) != 0)
                v109 = v222 & 0x1F;
              else
                v109 = 32;
              v106 = v222 - v109;
              v110 = a10 + 66;
              v111 = (int32x4_t *)(a8 + 64);
              v112 = 0uLL;
              v113 = 0uLL;
              v114 = 0uLL;
              v115 = 0uLL;
              v105 = 0uLL;
              v116 = 0uLL;
              v117 = 0uLL;
              v118 = 0uLL;
              v119 = 0uLL;
              v120 = v225 + 1;
              v121 = 0uLL;
              v122 = 0uLL;
              v123 = 0uLL;
              v124 = 0uLL;
              v125 = 0uLL;
              v126 = 0uLL;
              do
              {
                v127 = v110 - 64;
                v128 = (unsigned __int128)vld4q_s8(v127);
                v129 = (unsigned __int128)vld4q_s8(v110);
                v130 = (int32x4_t)vqtbl1q_s8((int8x16_t)v128, (int8x16_t)xmmword_18823D710);
                v131 = (int32x4_t)vqtbl1q_s8((int8x16_t)v128, (int8x16_t)xmmword_18823D720);
                v132 = (int32x4_t)vqtbl1q_s8((int8x16_t)v128, (int8x16_t)xmmword_18823D730);
                v133 = (int32x4_t)vqtbl1q_s8((int8x16_t)v129, (int8x16_t)xmmword_18823D740);
                v134 = (int32x4_t)vqtbl1q_s8((int8x16_t)v129, (int8x16_t)xmmword_18823D710);
                v135 = (int32x4_t)vqtbl1q_s8((int8x16_t)v129, (int8x16_t)xmmword_18823D720);
                v136 = (uint32x4_t)vmulq_s32(v111[-1], (int32x4_t)vqtbl1q_s8((int8x16_t)v128, (int8x16_t)xmmword_18823D740));
                v137 = (uint32x4_t)vmulq_s32(v111[-2], v132);
                v138 = (uint32x4_t)vmulq_s32(v111[-3], v131);
                v139 = (uint32x4_t)vmulq_s32(v111[-4], v130);
                v140 = (uint32x4_t)vmulq_s32(v111[2], (int32x4_t)vqtbl1q_s8((int8x16_t)v129, (int8x16_t)xmmword_18823D730));
                v141 = (uint32x4_t)vmulq_s32(v111[1], v135);
                v142 = (uint32x4_t)vmulq_s32(*v111, v134);
                v143 = (uint32x4_t)vmulq_s32(v111[3], v133);
                v105 = (int64x2_t)vaddw_high_u32((uint64x2_t)v105, v137);
                v115 = (int64x2_t)vaddw_u32((uint64x2_t)v115, *(uint32x2_t *)v137.i8);
                v114 = (int64x2_t)vaddw_high_u32((uint64x2_t)v114, v138);
                v113 = (int64x2_t)vaddw_u32((uint64x2_t)v113, *(uint32x2_t *)v138.i8);
                v112 = (int64x2_t)vaddw_high_u32((uint64x2_t)v112, v139);
                v108 = (int64x2_t)vaddw_u32((uint64x2_t)v108, *(uint32x2_t *)v139.i8);
                v116 = (int64x2_t)vaddw_u32((uint64x2_t)v116, *(uint32x2_t *)v136.i8);
                v117 = (int64x2_t)vaddw_high_u32((uint64x2_t)v117, v136);
                v124 = (int64x2_t)vaddw_high_u32((uint64x2_t)v124, v140);
                v123 = (int64x2_t)vaddw_u32((uint64x2_t)v123, *(uint32x2_t *)v140.i8);
                v122 = (int64x2_t)vaddw_high_u32((uint64x2_t)v122, v141);
                v121 = (int64x2_t)vaddw_u32((uint64x2_t)v121, *(uint32x2_t *)v141.i8);
                v119 = (int64x2_t)vaddw_high_u32((uint64x2_t)v119, v142);
                v118 = (int64x2_t)vaddw_u32((uint64x2_t)v118, *(uint32x2_t *)v142.i8);
                v125 = (int64x2_t)vaddw_u32((uint64x2_t)v125, *(uint32x2_t *)v143.i8);
                v126 = (int64x2_t)vaddw_high_u32((uint64x2_t)v126, v143);
                v110 += 128;
                v111 += 8;
                v120 -= 32;
              }
              while (v109 != v120);
              v107 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v118, v108), vaddq_s64(v123, v115)), vaddq_s64(vaddq_s64(v121, v113), vaddq_s64(v125, v116))), vaddq_s64(vaddq_s64(vaddq_s64(v119, v112), vaddq_s64(v124, v105)), vaddq_s64(vaddq_s64(v122, v114), vaddq_s64(v126, v117)))));
              if (v109 < 9)
                goto LABEL_121;
            }
            else
            {
              v107 = 0;
              v106 = 0;
            }
            v144 = v222 & 7;
            if ((v222 & 7) == 0)
              v144 = 8;
            v145 = 4 * v106;
            v146 = v144 + v106;
            v106 = v222 - v144;
            v147 = 0uLL;
            v148 = (int64x2_t)v107;
            v149 = &a10[v145 + 2];
            v150 = &a8[v145];
            v151 = v146 - v222;
            v152 = 0uLL;
            v153 = 0uLL;
            do
            {
              v105.i64[0] = (unint64_t)vld4_s8(v149);
              v149 += 32;
              v154 = (int32x4_t)vqtbl1q_s8((int8x16_t)v105, (int8x16_t)xmmword_18823D710);
              v155 = (int32x4_t)vqtbl1q_s8((int8x16_t)v105, (int8x16_t)xmmword_18823D720);
              v105 = *(int64x2_t *)v150;
              v156 = *((int32x4_t *)v150 + 1);
              v150 += 32;
              v157 = (uint32x4_t)vmulq_s32(v156, v155);
              v158 = (uint32x4_t)vmulq_s32((int32x4_t)v105, v154);
              v153 = (int64x2_t)vaddw_high_u32((uint64x2_t)v153, v157);
              v147 = (int64x2_t)vaddw_high_u32((uint64x2_t)v147, v158);
              v152 = (int64x2_t)vaddw_u32((uint64x2_t)v152, *(uint32x2_t *)v157.i8);
              v148 = (int64x2_t)vaddw_u32((uint64x2_t)v148, *(uint32x2_t *)v158.i8);
              v151 += 8;
            }
            while (v151);
            v107 = vaddvq_s64(vaddq_s64(vaddq_s64(v148, v152), vaddq_s64(v147, v153)));
LABEL_121:
            v159 = v222 - v106;
            v160 = 4 * v106;
            v161 = &a8[4 * v106];
            v162 = &a10[v160 + 2];
            do
            {
              v164 = *v162;
              v162 += 4;
              v163 = v164;
              v165 = *(_DWORD *)v161;
              v161 += 4;
              v107 += (v165 * v163);
              --v159;
            }
            while (v159);
            if (v222 < 9)
            {
              v166 = 0;
              v167 = 0;
              goto LABEL_137;
            }
            if (v222 >= 0x21)
            {
              v168 = 0uLL;
              v169 = 32;
              if ((v222 & 0x1F) != 0)
                v169 = v222 & 0x1F;
              v166 = v222 - v169;
              v170 = 0uLL;
              v171 = 0uLL;
              v172 = 0uLL;
              v173 = 0uLL;
              v105 = 0uLL;
              v174 = 0uLL;
              v175 = 0uLL;
              v176 = 0uLL;
              v177 = 0uLL;
              v178 = v225 + 1;
              v179 = (int32x4_t *)a8;
              v180 = 0uLL;
              v181 = 0uLL;
              v182 = 0uLL;
              v183 = 0uLL;
              v184 = 0uLL;
              v185 = 0uLL;
              do
              {
                v186 = &v179[64].i8[2];
                v187 = &v179[68].i8[2];
                v188 = (unsigned __int128)vld4q_s8(v186);
                v189 = (unsigned __int128)vld4q_s8(v187);
                v190 = (int32x4_t)vqtbl1q_s8((int8x16_t)v188, (int8x16_t)xmmword_18823D710);
                v191 = (int32x4_t)vqtbl1q_s8((int8x16_t)v188, (int8x16_t)xmmword_18823D720);
                v192 = (int32x4_t)vqtbl1q_s8((int8x16_t)v188, (int8x16_t)xmmword_18823D730);
                v193 = (int32x4_t)vqtbl1q_s8((int8x16_t)v189, (int8x16_t)xmmword_18823D710);
                v194 = (int32x4_t)vqtbl1q_s8((int8x16_t)v189, (int8x16_t)xmmword_18823D720);
                v195 = (int32x4_t)vqtbl1q_s8((int8x16_t)v189, (int8x16_t)xmmword_18823D730);
                v196 = (uint32x4_t)vmulq_s32(v179[3], (int32x4_t)vqtbl1q_s8((int8x16_t)v188, (int8x16_t)xmmword_18823D740));
                v197 = (uint32x4_t)vmulq_s32(v179[2], v192);
                v198 = (uint32x4_t)vmulq_s32(v179[1], v191);
                v199 = (uint32x4_t)vmulq_s32(*v179, v190);
                v200 = (uint32x4_t)vmulq_s32(v179[7], (int32x4_t)vqtbl1q_s8((int8x16_t)v189, (int8x16_t)xmmword_18823D740));
                v201 = (uint32x4_t)vmulq_s32(v179[6], v195);
                v202 = (uint32x4_t)vmulq_s32(v179[5], v194);
                v203 = (uint32x4_t)vmulq_s32(v179[4], v193);
                v105 = (int64x2_t)vaddw_high_u32((uint64x2_t)v105, v197);
                v173 = (int64x2_t)vaddw_u32((uint64x2_t)v173, *(uint32x2_t *)v197.i8);
                v172 = (int64x2_t)vaddw_high_u32((uint64x2_t)v172, v198);
                v171 = (int64x2_t)vaddw_u32((uint64x2_t)v171, *(uint32x2_t *)v198.i8);
                v170 = (int64x2_t)vaddw_high_u32((uint64x2_t)v170, v199);
                v168 = (int64x2_t)vaddw_u32((uint64x2_t)v168, *(uint32x2_t *)v199.i8);
                v174 = (int64x2_t)vaddw_u32((uint64x2_t)v174, *(uint32x2_t *)v196.i8);
                v175 = (int64x2_t)vaddw_high_u32((uint64x2_t)v175, v196);
                v183 = (int64x2_t)vaddw_high_u32((uint64x2_t)v183, v201);
                v182 = (int64x2_t)vaddw_u32((uint64x2_t)v182, *(uint32x2_t *)v201.i8);
                v181 = (int64x2_t)vaddw_high_u32((uint64x2_t)v181, v202);
                v180 = (int64x2_t)vaddw_u32((uint64x2_t)v180, *(uint32x2_t *)v202.i8);
                v177 = (int64x2_t)vaddw_high_u32((uint64x2_t)v177, v203);
                v176 = (int64x2_t)vaddw_u32((uint64x2_t)v176, *(uint32x2_t *)v203.i8);
                v184 = (int64x2_t)vaddw_u32((uint64x2_t)v184, *(uint32x2_t *)v200.i8);
                v185 = (int64x2_t)vaddw_high_u32((uint64x2_t)v185, v200);
                v179 += 8;
                v178 -= 32;
              }
              while (v169 != v178);
              v167 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v176, v168), vaddq_s64(v182, v173)), vaddq_s64(vaddq_s64(v180, v171), vaddq_s64(v184, v174))), vaddq_s64(vaddq_s64(vaddq_s64(v177, v170), vaddq_s64(v183, v105)), vaddq_s64(vaddq_s64(v181, v172), vaddq_s64(v185, v175)))));
              if (v169 < 9)
              {
LABEL_137:
                v218 = v222 - v166;
                v219 = &a8[4 * v166];
                do
                {
                  v220 = v219[1026];
                  v221 = *(_DWORD *)v219;
                  v219 += 4;
                  v167 += (v221 * v220);
                  --v218;
                }
                while (v218);
                if (v104 + 12 < a4 && v107 >> 3 > v104 + (v167 >> 3))
                  goto LABEL_141;
LABEL_145:
                a1 = (uint64_t)v18;
                v23 = v18;
                v19 = v223;
                goto LABEL_25;
              }
            }
            else
            {
              v167 = 0;
              v166 = 0;
            }
            v204 = 8;
            if ((v222 & 7) != 0)
              v204 = v222 & 7;
            v205 = &a8[4 * v166];
            v206 = v204 + v166;
            v166 = v222 - v204;
            v207 = 0uLL;
            v208 = (int64x2_t)v167;
            v209 = v206 - v222;
            v210 = 0uLL;
            v211 = 0uLL;
            do
            {
              v212 = v205 + 1026;
              v105.i64[0] = (unint64_t)vld4_s8(v212);
              v213 = (int32x4_t)vqtbl1q_s8((int8x16_t)v105, (int8x16_t)xmmword_18823D710);
              v214 = (int32x4_t)vqtbl1q_s8((int8x16_t)v105, (int8x16_t)xmmword_18823D720);
              v105 = *(int64x2_t *)v205;
              v215 = *((int32x4_t *)v205 + 1);
              v205 += 32;
              v216 = (uint32x4_t)vmulq_s32(v215, v214);
              v217 = (uint32x4_t)vmulq_s32((int32x4_t)v105, v213);
              v211 = (int64x2_t)vaddw_high_u32((uint64x2_t)v211, v216);
              v207 = (int64x2_t)vaddw_high_u32((uint64x2_t)v207, v217);
              v210 = (int64x2_t)vaddw_u32((uint64x2_t)v210, *(uint32x2_t *)v216.i8);
              v208 = (int64x2_t)vaddw_u32((uint64x2_t)v208, *(uint32x2_t *)v217.i8);
              v209 += 8;
            }
            while (v209);
            v167 = vaddvq_s64(vaddq_s64(vaddq_s64(v208, v210), vaddq_s64(v207, v211)));
            goto LABEL_137;
          }
          if (v104 + 12 < a4)
          {
LABEL_141:
            *a11 = 0;
LABEL_142:
            if (a10)
              memcpy(a10, a8 + 1024, 0x400uLL);
            a1 = (uint64_t)v18;
            v23 = &v18[v12];
            v19 = v223;
            v24 = (uint64_t)a3;
            v25 = a4;
            v26 = a7;
            return HUF_compressCTable_internal(a1, v23, v19, v24, v25, v26);
          }
        }
        else if (v104 + 12 < a4)
        {
          goto LABEL_142;
        }
        return 0;
      }
      v43 = *a11;
      if (*a11 != 1)
      {
LABEL_81:
        if (v43)
          v98 = v22;
        else
          v98 = 1;
        if ((v98 & 1) == 0)
          goto LABEL_145;
        goto LABEL_85;
      }
      if (v226 < 0)
      {
LABEL_80:
        v43 = 1;
        goto LABEL_81;
      }
      v44 = v226 + 1;
      if (v226 < 8)
      {
        v45 = 0;
        v46 = 0;
        goto LABEL_70;
      }
      if (v226 >= 0x20)
      {
        v47 = 32;
        v48 = 0uLL;
        v49.i64[0] = 0x100000001;
        v49.i64[1] = 0x100000001;
        v50 = 0uLL;
        if ((v44 & 0x1F) != 0)
          v47 = v44 & 0x1F;
        v45 = v44 - v47;
        v51 = a10 + 66;
        v52 = (int32x4_t *)(a8 + 64);
        v53 = v226 + 1;
        v54 = 0uLL;
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = 0uLL;
        v58 = 0uLL;
        v59 = 0uLL;
        do
        {
          v60 = v51 - 64;
          v61 = (unsigned __int128)vld4q_s8(v60);
          v62 = (unsigned __int128)vld4q_s8(v51);
          v63 = vceqzq_s8((int8x16_t)v61);
          v64 = vceqzq_s8((int8x16_t)v62);
          v65 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v52[-2]), (int16x8_t)vceqzq_s32(v52[-1])))), (int8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
          v66 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v65, *(int8x8_t *)v48.i8)), v49);
          v67 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v65, *(int8x8_t *)v48.i8)), v49);
          v68 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v52[-4]), (int16x8_t)vceqzq_s32(v52[-3])))), *(int8x8_t *)v63.i8);
          v69 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(*v52), (int16x8_t)vceqzq_s32(v52[1])))), *(int8x8_t *)v64.i8);
          v70 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v69, *(int8x8_t *)v48.i8)), v49);
          v71 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v69, *(int8x8_t *)v48.i8)), v49);
          v72 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v52[2]), (int16x8_t)vceqzq_s32(v52[3])))), (int8x8_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL));
          v73 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v72, *(int8x8_t *)v48.i8)), v49);
          v74 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v72, *(int8x8_t *)v48.i8)), v49);
          v50 = vorrq_s8(v50, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v68, *(int8x8_t *)v48.i8)), v49));
          v48 = vorrq_s8(v48, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v68, *(int8x8_t *)v48.i8)), v49));
          v55 = vorrq_s8(v55, v67);
          v54 = vorrq_s8(v54, v66);
          v59 = vorrq_s8(v59, v74);
          v51 += 128;
          v58 = vorrq_s8(v58, v73);
          v52 += 8;
          v57 = vorrq_s8(v57, v71);
          v53 -= 32;
          v56 = vorrq_s8(v56, v70);
        }
        while (v47 != v53);
        v75 = vorrq_s8(vorrq_s8(vorrq_s8(v56, v48), vorrq_s8(v58, v54)), vorrq_s8(vorrq_s8(v57, v50), vorrq_s8(v59, v55)));
        *(int8x8_t *)v75.i8 = vorr_s8(*(int8x8_t *)v75.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL));
        v46 = v75.i32[0] | v75.i32[1];
        if (v47 < 9)
        {
LABEL_70:
          v89 = v44 - v45;
          v90 = 4 * v45;
          v91 = &a10[4 * v45 + 2];
          v92 = &a8[v90];
          do
          {
            v93 = *(_DWORD *)v92;
            v92 += 4;
            v21 = v93 == 0;
            v95 = *v91;
            v91 += 4;
            v94 = v95;
            v97 = !v21 && v94 == 0;
            v46 |= v97;
            --v89;
          }
          while (v89);
          if (v46)
          {
            *a11 = 0;
            goto LABEL_85;
          }
          goto LABEL_80;
        }
      }
      else
      {
        v46 = 0;
        v45 = 0;
      }
      v76 = v44 & 7;
      if ((v44 & 7) == 0)
        v76 = 8;
      v77 = 4 * v45;
      v78 = v76 + v45;
      v45 = v44 - v76;
      v79 = (int8x16_t)v46;
      v80 = 0uLL;
      v81 = (int32x4_t *)&a8[v77];
      v82 = &a10[v77 + 2];
      v83 = v78 - v44;
      v84.i64[0] = 0x100000001;
      v84.i64[1] = 0x100000001;
      do
      {
        v85 = *v81;
        v86 = v81[1];
        v81 += 2;
        *(int8x8_t *)v85.i8 = vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v85), (int16x8_t)vceqzq_s32(v86))));
        v86.i64[0] = (unint64_t)vld4_s8(v82);
        v82 += 32;
        *(int8x8_t *)v85.i8 = vand_s8(*(int8x8_t *)v85.i8, vceqz_s8(*(int8x8_t *)v86.i8));
        v80 = vorrq_s8(v80, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v85.i8, *(int8x8_t *)v79.i8)), v84));
        v79 = vorrq_s8(v79, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v85.i8, *(int8x8_t *)v79.i8)), v84));
        v83 += 8;
      }
      while (v83);
      v87 = vorrq_s8(v79, v80);
      v88 = vorr_s8(*(int8x8_t *)v87.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL));
      v46 = v88.i32[0] | v88.i32[1];
      goto LABEL_70;
    }
    v29 = (unsigned int *)((char *)a3 + a4);
    bzero(a8, 0x400uLL);
    v30 = a3;
    do
    {
      v31 = *(unsigned __int8 *)v30;
      v30 = (unsigned int *)((char *)v30 + 1);
      ++*(_DWORD *)&a8[4 * v31];
    }
    while (v30 < v29);
    LODWORD(v32) = 256;
    do
      v32 = (v32 - 1);
    while (!*(_DWORD *)&a8[4 * v32]);
    v226 = v32;
    if (v32 >= 7)
    {
      v33 = (v32 + 1) & 0x1FFFFFFF8;
      v35 = (uint32x4_t *)(a8 + 16);
      v36 = v33;
      v37 = 0uLL;
      v38 = 0uLL;
      do
      {
        v37 = vmaxq_u32(v35[-1], v37);
        v38 = vmaxq_u32(*v35, v38);
        v35 += 2;
        v36 -= 8;
      }
      while (v36);
      v34 = vmaxvq_u32(vmaxq_u32(v37, v38));
      if (v32 + 1 == v33)
      {
LABEL_49:
        v12 = v34;
        goto LABEL_50;
      }
    }
    else
    {
      v33 = 0;
      v34 = 0;
    }
    v39 = v32 - v33 + 1;
    v40 = &a8[4 * v33];
    do
    {
      v42 = *(_DWORD *)v40;
      v40 += 4;
      v41 = v42;
      if (v42 > v34)
        v34 = v41;
      --v39;
    }
    while (v39);
    goto LABEL_49;
  }
  return -66;
}

uint64_t HUF_compress1X_repeat(uint64_t a1, unint64_t a2, unsigned int *a3, unint64_t a4, unsigned int a5, unsigned int a6, char *a7, unint64_t a8, char *a9, int *a10, int a11)
{
  return HUF_compress_internal(a1, a2, a3, a4, a5, a6, 0, a7, a8, a9, a10, a11);
}

uint64_t HUF_compress4X_wksp(uint64_t a1, unint64_t a2, unsigned int *a3, unint64_t a4, unsigned int a5, unsigned int a6, char *a7, unint64_t a8)
{
  return HUF_compress_internal(a1, a2, a3, a4, a5, a6, 1, a7, a8, 0, 0, 0);
}

uint64_t HUF_compress4X_repeat(uint64_t a1, unint64_t a2, unsigned int *a3, unint64_t a4, unsigned int a5, unsigned int a6, char *a7, unint64_t a8, char *a9, int *a10, int a11)
{
  return HUF_compress_internal(a1, a2, a3, a4, a5, a6, 1, a7, a8, a9, a10, a11);
}

uint64_t HUF_buildCTable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  unsigned int v5;
  _OWORD v7[272];

  MEMORY[0x1E0C80A78](a1, a2);
  memset(v7, 0, 512);
  return HUF_buildCTable_wksp(v2, v3, v4, v5, (char *)v7, 0x1100uLL);
}

uint64_t HUF_compress1X(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  char v9[6400];
  uint64_t v10;

  MEMORY[0x1E0C80A78](a1, a2);
  v10 = *MEMORY[0x1E0C80C00];
  return HUF_compress_internal(v2, v3, v4, v5, v6, v7, 0, v9, 0x1900uLL, 0, 0, 0);
}

uint64_t HUF_compress2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  char v9[6400];
  uint64_t v10;

  MEMORY[0x1E0C80A78](a1, a2);
  v10 = *MEMORY[0x1E0C80C00];
  return HUF_compress_internal(v2, v3, v4, v5, v6, v7, 1, v9, 0x1900uLL, 0, 0, 0);
}

uint64_t HUF_compress(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  char v7[6400];
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  v8 = *MEMORY[0x1E0C80C00];
  return HUF_compress_internal(v2, v3, v4, v5, 0xFFu, 0xBu, 1, v7, 0x1900uLL, 0, 0, 0);
}

size_t ZSTD_noCompressLiterals(_DWORD *a1, size_t a2, void *__src, size_t __n)
{
  uint64_t v4;
  size_t v5;

  if (__n <= 0x1F)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = 2;
  if (__n <= 0xFFF)
    v4 = v4;
  else
    v4 = (v4 + 1);
  v5 = v4 + __n;
  if (v4 + __n > a2)
    return -70;
  switch((_DWORD)v4)
  {
    case 3:
      *a1 = (16 * __n) | 0xC;
      break;
    case 2:
      *(_WORD *)a1 = (16 * __n) | 4;
      break;
    case 1:
      *(_BYTE *)a1 = 8 * __n;
      break;
  }
  memcpy((char *)a1 + v4, __src, __n);
  return v5;
}

uint64_t ZSTD_compressRleLiteralsBlock(_DWORD *a1, uint64_t a2, _BYTE *a3, unint64_t a4)
{
  uint64_t v4;

  if (a4 <= 0x1F)
    v4 = 1;
  else
    v4 = 2;
  if (a4 > 0xFFF)
    ++v4;
  if ((_DWORD)v4 == 3)
  {
    *a1 = (16 * a4) | 0xD;
    *((_BYTE *)a1 + v4) = *a3;
    return 4;
  }
  else if ((_DWORD)v4 == 2)
  {
    *(_WORD *)a1 = (16 * a4) | 5;
    *((_BYTE *)a1 + v4) = *a3;
    return 3;
  }
  else
  {
    if ((_DWORD)v4 == 1)
      *(_BYTE *)a1 = (8 * a4) | 1;
    *((_BYTE *)a1 + v4) = *a3;
    return (v4 + 1);
  }
}

uint64_t ZSTD_compressLiterals(void *__src, void *__dst, unsigned int a3, int a4, uint64_t a5, unint64_t a6, unsigned int *a7, unint64_t a8, char *a9, unint64_t a10)
{
  char v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  _BOOL4 v24;
  _BOOL4 v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  int v35;
  int v36;

  if (a3 <= 7)
    v18 = 6;
  else
    v18 = a3 - 1;
  v19 = 3;
  if (a8 > 0x3FF)
    v19 = 4;
  if ((a8 & 0xFFFFFFFFFFFFC000) != 0)
    v20 = v19 + 1;
  else
    v20 = v19;
  memcpy(__dst, __src, 0x404uLL);
  if (!a4)
  {
    v21 = *((_DWORD *)__src + 256);
    v22 = 63;
    if (v21 == 2)
      v22 = 6;
    if (v22 < a8)
    {
      if (a6 <= v20)
        return -70;
      v24 = a3 < 4 && a8 < 0x401;
      v36 = *((_DWORD *)__src + 256);
      v27 = v21 == 2 && v20 == 3 || a8 < 0x100;
      v28 = HUF_compress_internal(a5 + v20, a6 - v20, a7, a8, 0xFFu, 0xBu, !v27, a9, a10, (char *)__dst, &v36, v24);
      if (v36)
        v29 = 3;
      else
        v29 = 2;
      if (v28 < a8 - (a8 >> v18) - 2 && v28 - 1 < 0xFFFFFFFFFFFFFF88)
      {
        if (v28 == 1)
        {
          memcpy(__dst, __src, 0x404uLL);
          return ZSTD_compressRleLiteralsBlock((_DWORD *)a5, v30, a7, a8);
        }
        else
        {
          if (!v36)
            *((_DWORD *)__dst + 256) = 1;
          switch(v20)
          {
            case 5uLL:
              *(_DWORD *)a5 = (((_DWORD)v28 << 22) + 16 * a8) | v29 | 0xC;
              *(_BYTE *)(a5 + 4) = v28 >> 10;
              break;
            case 4uLL:
              *(_DWORD *)a5 = (((_DWORD)v28 << 18) + 16 * a8) | v29 | 8;
              break;
            case 3uLL:
              if (v27)
                v34 = 4;
              else
                v34 = 0;
              v35 = ((v29 | v34 | (16 * a8)) ^ 4) + ((_DWORD)v28 << 14);
              *(_WORD *)a5 = v35;
              *(_BYTE *)(a5 + 2) = BYTE2(v35);
              break;
          }
          return v28 + v20;
        }
      }
      memcpy(__dst, __src, 0x404uLL);
    }
  }
  if (a8 <= 0x1F)
    LODWORD(v32) = 1;
  else
    LODWORD(v32) = 2;
  if (a8 <= 0xFFF)
    v32 = v32;
  else
    v32 = (v32 + 1);
  v31 = v32 + a8;
  if (v32 + a8 > a6)
    return -70;
  switch((_DWORD)v32)
  {
    case 3:
      *(_DWORD *)a5 = (16 * a8) | 0xC;
      break;
    case 2:
      *(_WORD *)a5 = (16 * a8) | 4;
      break;
    case 1:
      *(_BYTE *)a5 = 8 * a8;
      break;
  }
  memcpy((void *)(a5 + v32), a7, a8);
  return v31;
}

uint64_t ZSTD_fseBitCost(unsigned __int16 *a1, unsigned int *a2, unsigned int a3)
{
  int v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v3 = *a1;
  if (*a1)
    v4 = 1 << (v3 - 1);
  else
    v4 = 1;
  if (a1[1] < a3)
    return -1;
  v6 = 0;
  v7 = a3 + 1;
  v8 = &a1[2 * v4 + 4];
  do
  {
    v10 = *(_DWORD *)v8;
    v8 += 4;
    v9 = v10;
    v12 = *a2++;
    v11 = v12;
    if (v12)
    {
      v13 = ((HIWORD(v9) + 1) << 8) - ((((HIWORD(v9) + 1) << 24) - ((v9 + (1 << v3)) << 8)) >> v3);
      if (v13 >= (v3 << 8) + 256)
        return -1;
      v6 += v11 * (unint64_t)v13;
    }
    --v7;
  }
  while (v7);
  return v6 >> 8;
}

unint64_t ZSTD_crossEntropyCost(uint64_t a1, char a2, uint64_t a3, int a4)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned __int16 *v16;
  uint64_t v17;
  int *v18;
  __int16 v19;
  int v20;
  int v21;

  v4 = 8 - a2;
  if ((a4 + 1) > 1)
    v5 = (a4 + 1);
  else
    v5 = 1;
  if (v5 < 2)
  {
    v6 = 0;
    v7 = 0;
LABEL_13:
    v16 = (unsigned __int16 *)(a1 + 2 * v6);
    v17 = v5 - v6;
    v18 = (int *)(a3 + 4 * v6);
    do
    {
      v20 = *v16++;
      v19 = v20;
      if (v20 == 0xFFFF)
        v19 = 1;
      v21 = *v18++;
      v7 += (kInverseProbabilityLog256[v19 << v4] * v21);
      --v17;
    }
    while (v17);
    return v7 >> 8;
  }
  v8 = 0;
  v9 = 0;
  v6 = v5 & 0xFFFFFFFE;
  v10 = (unsigned __int16 *)(a1 + 2);
  v11 = (_DWORD *)(a3 + 4);
  v12 = v6;
  do
  {
    v13 = *(v10 - 1);
    v15 = *v10;
    v10 += 2;
    v14 = v15;
    if (v13 == 0xFFFF)
      LOWORD(v13) = 1;
    if (v14 == 0xFFFF)
      LOWORD(v14) = 1;
    v8 += (kInverseProbabilityLog256[(__int16)v13 << v4] * *(v11 - 1));
    v9 += (kInverseProbabilityLog256[(__int16)v14 << v4] * *v11);
    v11 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v9 + v8;
  if (v6 != v5)
    goto LABEL_13;
  return v7 >> 8;
}

uint64_t ZSTD_selectEncodingType(_DWORD *a1, unsigned int *a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6, unsigned __int16 *a7, uint64_t a8, char a9, int a10, unsigned int a11)
{
  uint64_t result;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned __int16 *v32;
  __int16 v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  int *v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v64;
  unsigned int *v65;
  int v66;
  int v67;
  unint64_t v68;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned __int16 *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  __int16 v81[53];
  _WORD v82[256];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  if (a4 != a5)
  {
    if (a11 <= 3)
    {
      if (a10)
      {
        if (a5 > 0x3E7 || *a1 != 2)
        {
          if (a5 >= (unint64_t)(10 - a11) << a9 >> 3 && a5 >> (a9 - 1) <= a4)
            goto LABEL_93;
LABEL_91:
          result = 0;
          *a1 = 0;
          return result;
        }
        return 3;
      }
      goto LABEL_93;
    }
    if (!a10)
    {
      v21 = -1;
      if (!*a1)
        goto LABEL_39;
LABEL_35:
      v36 = *a7;
      if (*a7)
        v37 = 1 << (v36 - 1);
      else
        v37 = 1;
      if (a7[1] >= a3)
      {
        v72 = 0;
        v73 = a3 + 1;
        v74 = &a7[2 * v37 + 4];
        v75 = a2;
        do
        {
          v77 = *(_DWORD *)v74;
          v74 += 4;
          v76 = v77;
          v79 = *v75++;
          v78 = v79;
          if (v79)
          {
            v80 = ((HIWORD(v76) + 1) << 8) - ((((HIWORD(v76) + 1) << 24) - ((v76 + (1 << v36)) << 8)) >> v36);
            if (v80 >= (v36 << 8) + 256)
              goto LABEL_39;
            v72 += v78 * (unint64_t)v80;
          }
          --v73;
        }
        while (v73);
        v38 = v72 >> 8;
LABEL_40:
        v39 = (__clz(a5 - 1) ^ 0x1F) - 2;
        v40 = __clz(a5) ^ 0x1F;
        v41 = (__clz(a3) ^ 0x1F) + 2;
        if (v40 + 1 < v41)
          v42 = v40 + 1;
        else
          v42 = v41;
        if (a6)
          v43 = a6;
        else
          v43 = 11;
        if (v39 >= v43)
          v39 = v43;
        if (v42 > v39)
          v39 = v42;
        if (v39 <= 5)
          v39 = 5;
        if (v39 >= 0xC)
          v44 = 12;
        else
          v44 = v39;
        v45 = FSE_normalizeCount(v81, v44, a2, a5, a3, a5 > 0x7FF);
        v46 = a3 + 1;
        if (v45 <= 0xFFFFFFFFFFFFFF88)
        {
          if (a3)
            v47 = v44 * v46 >= 0xFF0;
          else
            v47 = 0;
          v48 = !v47;
          v45 = FSE_writeNCount_generic(v82, 512, (uint64_t)v81, a3, v44, v48);
        }
        if (v46 <= 1)
          v49 = 1;
        else
          v49 = v46;
        if (v49 >= 2)
        {
          v52 = 0;
          v53 = 0;
          v50 = v49 & 0xFFFFFFFE;
          v54 = (int *)(a2 + 1);
          v55 = v50;
          do
          {
            v56 = *(v54 - 1);
            v57 = *v54;
            v58 = (v56 << 8);
            v59 = (*v54 << 8);
            v60 = v58 / a5;
            v61 = v58 >= a5 || v56 == 0;
            v62 = v59 / a5;
            if (!v61)
              v60 = 1;
            if (v59 < a5 && v57 != 0)
              v62 = 1;
            v52 += kInverseProbabilityLog256[v60] * v56;
            v53 += kInverseProbabilityLog256[v62] * v57;
            v54 += 2;
            v55 -= 2;
          }
          while (v55);
          v51 = v53 + v52;
          if (v50 == v49)
          {
LABEL_89:
            v71 = (v51 >> 8) + 8 * v45;
            if (v21 <= v38 && v21 <= v71)
              goto LABEL_91;
            if (v38 <= v71)
              return 3;
LABEL_93:
            *a1 = 1;
            return 2;
          }
        }
        else
        {
          v50 = 0;
          v51 = 0;
        }
        v64 = v49 - v50;
        v65 = &a2[v50];
        do
        {
          v67 = *v65++;
          v66 = v67;
          v68 = (v67 << 8);
          if (v68 >= a5 || v66 == 0)
            v70 = v68 / a5;
          else
            v70 = 1;
          v51 += kInverseProbabilityLog256[v70] * v66;
          --v64;
        }
        while (v64);
        goto LABEL_89;
      }
LABEL_39:
      v38 = -1;
      goto LABEL_40;
    }
    v17 = 8 - a9;
    if (a3 + 1 > 1)
      v18 = a3 + 1;
    else
      v18 = 1;
    if (v18 >= 2)
    {
      v22 = 0;
      v23 = 0;
      v19 = v18 & 0xFFFFFFFE;
      v24 = (unsigned __int16 *)(a8 + 2);
      v25 = a2 + 1;
      v26 = v19;
      do
      {
        v27 = *(v24 - 1);
        v29 = *v24;
        v24 += 2;
        v28 = v29;
        if (v27 == 0xFFFF)
          LOWORD(v27) = 1;
        if (v28 == 0xFFFF)
          LOWORD(v28) = 1;
        v22 += (kInverseProbabilityLog256[(__int16)v27 << v17] * *(v25 - 1));
        v23 += (kInverseProbabilityLog256[(__int16)v28 << v17] * *v25);
        v25 += 2;
        v26 -= 2;
      }
      while (v26);
      v20 = v23 + v22;
      if (v19 == v18)
      {
LABEL_34:
        v21 = v20 >> 8;
        if (!*a1)
          goto LABEL_39;
        goto LABEL_35;
      }
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    v30 = v18 - v19;
    v31 = &a2[v19];
    v32 = (unsigned __int16 *)(a8 + 2 * v19);
    do
    {
      v34 = *v32++;
      v33 = v34;
      if (v34 == 0xFFFF)
        v33 = 1;
      v35 = *v31++;
      v20 += (kInverseProbabilityLog256[v33 << v17] * v35);
      --v30;
    }
    while (v30);
    goto LABEL_34;
  }
  *a1 = 0;
  return a4 > 2 || a10 == 0;
}

unint64_t ZSTD_buildCTable(_WORD *a1, unint64_t a2, _WORD *__dst, unsigned int a4, int a5, unsigned int *a6, unsigned int a7, _BYTE *a8, uint64_t a9, __int16 *a10, int a11, int a12, const void *a13, size_t a14, _DWORD *a15, unint64_t a16)
{
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  __int16 v34[53];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  switch(a5)
  {
    case 0:
      v20 = FSE_buildCTable_wksp(__dst, a10, a12, a11, a15, a16);
      if (v20 >= 0xFFFFFFFFFFFFFF89)
        v21 = v20;
      else
        v21 = 0;
      break;
    case 1:
      *__dst = 0;
      __dst[1] = a7;
      *((_DWORD *)__dst + 1) = 0;
      *(_QWORD *)&__dst[4 * a7 + 4] = 0;
      if (a2)
      {
        *(_BYTE *)a1 = *a8;
        v21 = 1;
      }
      else
      {
        v21 = -70;
      }
      break;
    case 2:
      v23 = a9;
      v24 = (__clz(a9 - 1) ^ 0x1F) - 2;
      v25 = __clz(a9) ^ 0x1F;
      v26 = (__clz(a7) ^ 0x1F) + 2;
      if (v25 + 1 < v26)
        v27 = v25 + 1;
      else
        v27 = v26;
      if (!a4)
        a4 = 11;
      if (v24 < a4)
        a4 = v24;
      if (v27 > a4)
        a4 = v27;
      if (a4 <= 5)
        a4 = 5;
      if (a4 >= 0xC)
        v28 = 12;
      else
        v28 = a4;
      v29 = a8[a9 - 1];
      v30 = a6[v29];
      if (v30 >= 2)
      {
        a6[v29] = v30 - 1;
        v23 = a9 - 1;
      }
      v21 = FSE_normalizeCount(v34, v28, a6, v23, a7, v23 > 0x7FF);
      if (v21 <= 0xFFFFFFFFFFFFFF88)
      {
        LODWORD(v31) = ((v28 + v28 * a7) >> 3) + 3;
        if (a7)
          v31 = v31;
        else
          v31 = 512;
        v21 = FSE_writeNCount_generic(a1, a2, (uint64_t)v34, a7, v28, v31 <= a2);
        if (v21 <= 0xFFFFFFFFFFFFFF88)
        {
          v32 = FSE_buildCTable_wksp(__dst, v34, a7, v28, a15, a16);
          if (v32 >= 0xFFFFFFFFFFFFFF89)
            v21 = v32;
        }
      }
      break;
    case 3:
      memcpy(__dst, a13, a14);
      v21 = 0;
      break;
    default:
      v21 = -1;
      break;
  }
  return v21;
}

uint64_t ZSTD_encodeSequences(unint64_t *a1, unint64_t a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, unsigned __int16 *a7, uint64_t a8, uint64_t a9, unint64_t a10, int a11)
{
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unsigned __int16 *v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  unint64_t *v41;
  uint64_t result;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unsigned __int16 *v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  unsigned __int16 *v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t *v86;
  int v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t *v91;
  int v92;
  unint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t *v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  unint64_t *v100;
  uint64_t v101;
  unint64_t *v102;
  int v103;
  int v104;
  int v105;
  unsigned __int16 *v106;

  if (a2 < 9)
    return -70;
  v12 = a10 - 1;
  v13 = *(unsigned __int8 *)(a4 + a10 - 1);
  v15 = *a3;
  v14 = a3 + 2;
  v16 = 1 << (v15 - 1);
  v105 = v15;
  if (!v15)
    v16 = 1;
  v106 = &v14[2 * v16];
  v17 = v14[((unint64_t)(((*(_DWORD *)&v106[4 * v13 + 2] + 0x8000) & 0xFFFF0000) - *(_DWORD *)&v106[4 * v13 + 2]) >> ((*(_DWORD *)&v106[4 * v13 + 2] + 0x8000) >> 16))
          + *(int *)&v106[4 * v13]];
  v18 = (char *)a1 + a2;
  v19 = *(unsigned __int8 *)(a6 + v12);
  v22 = *a5;
  v20 = a5 + 2;
  v21 = v22;
  v23 = 1 << (v22 - 1);
  if (!v22)
    v23 = 1;
  v24 = &v20[2 * v23];
  v25 = v20[((unint64_t)(((*(_DWORD *)&v24[4 * v19 + 2] + 0x8000) & 0xFFFF0000)
                              - *(_DWORD *)&v24[4 * v19 + 2]) >> ((*(_DWORD *)&v24[4 * v19 + 2]
                                                                                             + 0x8000) >> 16))
          + *(int *)&v24[4 * v19]];
  v26 = *(unsigned __int8 *)(a8 + v12);
  v27 = (unint64_t *)(v18 - 8);
  v30 = *a7;
  v28 = a7 + 2;
  v29 = v30;
  v31 = 1 << (v30 - 1);
  if (!v30)
    v31 = 1;
  v32 = &v28[2 * v31];
  v33 = v28[((unint64_t)(((*(_DWORD *)&v32[4 * v26 + 2] + 0x8000) & 0xFFFF0000) - *(_DWORD *)&v32[4 * v26 + 2]) >> ((*(_DWORD *)&v32[4 * v26 + 2] + 0x8000) >> 16))
          + *(int *)&v32[4 * v26]];
  v34 = (unsigned int *)(a9 + 8 * v12);
  v35 = LL_bits[v26];
  v36 = ML_bits[v13];
  v37 = ((unint64_t)(BIT_mask[v36] & *((unsigned __int16 *)v34 + 3)) << v35) | BIT_mask[v35] & (unsigned __int16)v34[1];
  v38 = v36 + v35;
  if (a11)
  {
    if (v19 > 0x37)
    {
      v40 = *v34;
      v39 = v19 - 56;
      if ((_DWORD)v19 == 56)
      {
        LODWORD(v19) = 56;
        v41 = a1;
      }
      else
      {
        v45 = ((unint64_t)(BIT_mask[v39] & v40) << v38) | v37;
        v19 = (v38 + v39) >> 3;
        *a1 = v45;
        if ((unint64_t *)((char *)a1 + v19) <= v27)
          v41 = (unint64_t *)((char *)a1 + v19);
        else
          v41 = v27;
        v38 = ((_BYTE)v38 + (_BYTE)v39) & 7;
        v37 = v45 >> (8 * v19);
        LODWORD(v19) = 56;
      }
    }
    else
    {
      LOBYTE(v39) = 0;
      v40 = *v34;
      v41 = a1;
    }
    v43 = ((unint64_t)(BIT_mask[v19] & (v40 >> v39)) << v38) | v37;
    v44 = v38 + v19;
  }
  else
  {
    v43 = ((unint64_t)(BIT_mask[v19] & *v34) << v38) | v37;
    v44 = v38 + v19;
    v41 = a1;
  }
  v46 = v44 >> 3;
  *v41 = v43;
  v47 = (unint64_t *)((char *)v41 + v46);
  if ((unint64_t *)((char *)v41 + v46) > v27)
    v47 = v27;
  v48 = v43 >> (8 * v46);
  v49 = v44 & 7;
  v50 = a10 - 2;
  v102 = a1;
  v103 = v29;
  v104 = v21;
  if (a10 >= 2)
  {
    v51 = a9 + 8 * a10 - 16;
    do
    {
      v56 = *(unsigned __int8 *)(a8 + v50);
      v57 = *(unsigned __int8 *)(a6 + v50);
      v58 = *(unsigned __int8 *)(a4 + v50);
      v59 = LL_bits[v56];
      v60 = ML_bits[v58];
      v61 = (v25 + *(unsigned int *)&v24[4 * v57 + 2]) >> 16;
      v62 = (unint64_t)(v25 & BIT_mask[v61]) << v49;
      v63 = v49 + v61;
      v25 = v20[(v25 >> ((v25 + *(_DWORD *)&v24[4 * v57 + 2]) >> 16)) + *(int *)&v24[4 * v57]];
      v64 = &v106[4 * v58];
      v65 = *(_DWORD *)v64;
      v66 = (v17 + *((unsigned int *)v64 + 1)) >> 16;
      v67 = (unint64_t)(v17 & BIT_mask[v66]) << v63;
      v68 = v63 + v66;
      v17 = v14[(v17 >> v66) + v65];
      v69 = &v32[4 * v56];
      LODWORD(v66) = *(_DWORD *)v69;
      v70 = (v33 + *((unsigned int *)v69 + 1)) >> 16;
      v71 = v62 | v48 | v67 | ((unint64_t)(v33 & BIT_mask[v70]) << v68);
      v72 = v68 + v70;
      v33 = v28[(v33 >> v70) + (int)v66];
      v73 = v59 + v57 + v60;
      if (v73 >= 0x1F)
      {
        v74 = v72 >> 3;
        *v47 = v71;
        if ((unint64_t *)((char *)v47 + v74) <= v27)
          v47 = (unint64_t *)((char *)v47 + v74);
        else
          v47 = v27;
        v72 &= 7u;
        v71 >>= 8 * v74;
      }
      v75 = v72 + v59;
      v76 = ((unint64_t)(BIT_mask[v59] & *(unsigned __int16 *)(v51 + 4)) << v72) | v71 | ((unint64_t)(BIT_mask[v60] & *(unsigned __int16 *)(v51 + 6)) << (v72 + v59));
      v77 = v75 + v60;
      if (v73 >= 0x39)
      {
        v78 = v77 >> 3;
        *v47 = v76;
        if ((unint64_t *)((char *)v47 + v78) <= v27)
          v47 = (unint64_t *)((char *)v47 + v78);
        else
          v47 = v27;
        v77 &= 7u;
        v76 >>= 8 * v78;
      }
      if (a11)
      {
        if (v57 > 0x37)
        {
          v80 = *(_DWORD *)v51;
          v79 = v57 - 56;
          if ((_DWORD)v57 != 56)
          {
            v81 = ((unint64_t)(BIT_mask[v79] & v80) << v77) | v76;
            v82 = (v77 + v79) >> 3;
            *v47 = v81;
            if ((unint64_t *)((char *)v47 + v82) <= v27)
              v47 = (unint64_t *)((char *)v47 + v82);
            else
              v47 = v27;
            v77 = ((_BYTE)v77 + (_BYTE)v79) & 7;
            v76 = v81 >> (8 * v82);
          }
          LODWORD(v57) = 56;
        }
        else
        {
          LOBYTE(v79) = 0;
          v80 = *(_DWORD *)v51;
        }
        v52 = v80 >> v79;
        v53 = BIT_mask[v57];
      }
      else
      {
        v52 = *(_DWORD *)v51;
        v53 = BIT_mask[v57];
      }
      v54 = ((unint64_t)(v53 & v52) << v77) | v76;
      v55 = (v77 + v57) >> 3;
      *v47 = v54;
      if ((unint64_t *)((char *)v47 + v55) <= v27)
        v47 = (unint64_t *)((char *)v47 + v55);
      else
        v47 = v27;
      v48 = v54 >> (8 * v55);
      --v50;
      v49 = ((_BYTE)v77 + (_BYTE)v57) & 7;
      v51 -= 8;
    }
    while (v50 < a10);
  }
  v83 = ((unint64_t)(v17 & BIT_mask[v105]) << v49) | v48;
  v84 = v49 + v105;
  v85 = v84 >> 3;
  *v47 = v83;
  v86 = (unint64_t *)((char *)v47 + v85);
  if ((unint64_t *)((char *)v47 + v85) > v27)
    v86 = v27;
  v87 = v84 & 7;
  v88 = ((unint64_t)(v25 & BIT_mask[v104]) << v87) | (v83 >> (8 * v85));
  v89 = v87 + v104;
  v90 = v89 >> 3;
  *v86 = v88;
  v91 = (unint64_t *)((char *)v86 + v90);
  if (v91 > v27)
    v91 = v27;
  v92 = v89 & 7;
  v93 = ((unint64_t)(v33 & BIT_mask[v103]) << v92) | (v88 >> (8 * v90));
  v94 = v92 + v103;
  v95 = v94 >> 3;
  *v91 = v93;
  v96 = (uint64_t *)((char *)v91 + v95);
  if (v96 > (uint64_t *)v27)
    v96 = (uint64_t *)v27;
  v97 = v94 & 7;
  v98 = (v93 >> (8 * v95)) | (1 << v97);
  v99 = v97 + 1;
  *v96 = v98;
  v100 = (unint64_t *)((char *)v96 + (v99 >> 3));
  if (v27 <= v100)
    return -70;
  v101 = (v99 & 7) != 0 ? (uint64_t)v100 + 1 : (uint64_t)v96 + (v99 >> 3);
  result = v101 - (_QWORD)v102;
  if ((unint64_t *)v101 == v102)
    return -70;
  return result;
}

uint64_t ZSTD_compressSuperBlock(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, int a6)
{
  uint64_t v9;
  void *v10;
  _OWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint32x4_t *v29;
  uint64_t v30;
  uint32x4_t v31;
  uint32x4_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int32 v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  uint32x4_t *v67;
  uint64_t v68;
  uint32x4_t v69;
  uint32x4_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  unsigned __int16 *v78;
  _WORD *v79;
  uint64_t v80;
  char *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  _WORD *v87;
  uint64_t v88;
  unsigned int v89;
  unint64_t v90;
  uint64_t v91;
  uint32x4_t *v92;
  uint64_t v93;
  uint32x4_t v94;
  uint32x4_t v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  uint64_t v109;
  _WORD *v110;
  uint64_t v111;
  unsigned int v112;
  unint64_t v113;
  uint64_t v114;
  uint32x4_t *v115;
  uint64_t v116;
  uint32x4_t v117;
  uint32x4_t v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned __int16 *v123;
  int v124;
  unint64_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int32x4_t v128;
  unint64_t v129;
  uint64_t v130;
  int32x4_t *v131;
  unint64_t v132;
  unsigned __int16 *v133;
  unint64_t v134;
  uint64_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  unint64_t v139;
  int v140;
  unint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  unsigned int *v145;
  int v146;
  unsigned int v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int64x2_t v156;
  int64x2_t v157;
  unint64_t v158;
  int64x2_t v159;
  int64x2_t v160;
  uint64_t v161;
  int64x2_t v162;
  int32x4_t *v163;
  const char *v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int64x2_t v174;
  const char *v175;
  unsigned __int128 v176;
  unsigned __int128 v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  uint32x4_t v184;
  uint32x4_t v185;
  uint32x4_t v186;
  uint32x4_t v187;
  uint32x4_t v188;
  uint32x4_t v189;
  uint32x4_t v190;
  uint32x4_t v191;
  int64x2_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int64x2_t v196;
  int64x2_t v197;
  const char *v198;
  int32x4_t *v199;
  uint64_t v200;
  int32x4_t v201;
  int32x4_t v202;
  uint64_t v203;
  uint64_t v204;
  __int32 *v205;
  unsigned __int16 *v206;
  int v207;
  int v208;
  int v209;
  size_t v210;
  uint64_t v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  int8x16_t v218;
  uint64_t v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  int8x16_t v226;
  uint64_t v227;
  size_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unsigned __int16 *v232;
  _BYTE *v233;
  uint64_t v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  _DWORD *v239;
  unint64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  size_t v248;
  _WORD *v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  int v254;
  _BYTE *v255;
  uint64_t v256;
  _BOOL4 v257;
  _BYTE *v258;
  int v259;
  char *v260;
  unint64_t *v261;
  unint64_t v262;
  char *v263;
  unint64_t v264;
  _BYTE *v265;
  int v266;
  int v267;
  _BOOL4 v268;
  int v269;
  size_t v270;
  int v271;
  int v272;
  unint64_t v273;
  uint64_t v274;
  unsigned int v275;
  int *v276;
  int v277;
  int v278;
  unsigned int v279;
  uint64_t v280;
  unint64_t v281;
  int8x16_t v282;
  int8x16_t v283;
  int8x16_t v284;
  const char *v285;
  int32x4_t *v286;
  uint64_t v287;
  int8x16_t v288;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;
  const char *v294;
  unsigned __int128 v295;
  unsigned __int128 v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v299;
  int8x16_t v300;
  int8x8_t v301;
  int8x16_t v302;
  int8x16_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int8x16_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int8x16_t v310;
  int8x16_t v311;
  int32x4_t *v312;
  const char *v313;
  uint64_t v314;
  int8x16_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int8x16_t v318;
  int8x8_t v319;
  uint64_t v320;
  uint64_t v321;
  unsigned __int8 *v322;
  int *v323;
  int v324;
  int v325;
  int v326;
  int v327;
  BOOL v328;
  char v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  int32x4_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  int64x2_t v341;
  unint64_t v342;
  const char *v343;
  int32x4_t *v344;
  int64x2_t v345;
  int64x2_t v346;
  int64x2_t v347;
  int64x2_t v348;
  int64x2_t v349;
  int64x2_t v350;
  int64x2_t v351;
  int64x2_t v352;
  uint64_t v353;
  int64x2_t v354;
  int64x2_t v355;
  int64x2_t v356;
  int64x2_t v357;
  int64x2_t v358;
  int64x2_t v359;
  const char *v360;
  unsigned __int128 v361;
  unsigned __int128 v362;
  int32x4_t v363;
  int32x4_t v364;
  int32x4_t v365;
  int32x4_t v366;
  int32x4_t v367;
  int32x4_t v368;
  uint32x4_t v369;
  uint32x4_t v370;
  uint32x4_t v371;
  uint32x4_t v372;
  uint32x4_t v373;
  uint32x4_t v374;
  uint32x4_t v375;
  uint32x4_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  int64x2_t v380;
  int64x2_t v381;
  const char *v382;
  int32x4_t *v383;
  uint64_t v384;
  int64x2_t v385;
  int64x2_t v386;
  int32x4_t v387;
  int32x4_t v388;
  int32x4_t v389;
  uint32x4_t v390;
  uint32x4_t v391;
  uint64_t v392;
  uint64_t v393;
  int32x4_t v394;
  uint64_t v395;
  unint64_t v396;
  int64x2_t v397;
  unint64_t v398;
  const char *v399;
  int32x4_t *v400;
  int64x2_t v401;
  int64x2_t v402;
  int64x2_t v403;
  int64x2_t v404;
  int64x2_t v405;
  int64x2_t v406;
  int64x2_t v407;
  int64x2_t v408;
  uint64_t v409;
  int64x2_t v410;
  int64x2_t v411;
  int64x2_t v412;
  int64x2_t v413;
  int64x2_t v414;
  int64x2_t v415;
  const char *v416;
  unsigned __int128 v417;
  unsigned __int128 v418;
  int32x4_t v419;
  int32x4_t v420;
  int32x4_t v421;
  int32x4_t v422;
  int32x4_t v423;
  int32x4_t v424;
  uint32x4_t v425;
  uint32x4_t v426;
  uint32x4_t v427;
  uint32x4_t v428;
  uint32x4_t v429;
  uint32x4_t v430;
  uint32x4_t v431;
  uint32x4_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int64x2_t v436;
  int64x2_t v437;
  const char *v438;
  int32x4_t *v439;
  uint64_t v440;
  int64x2_t v441;
  int64x2_t v442;
  int32x4_t v443;
  int32x4_t v444;
  int32x4_t v445;
  uint32x4_t v446;
  uint32x4_t v447;
  uint64_t v448;
  uint64_t v449;
  int *v450;
  unsigned __int8 *v451;
  int v452;
  int v453;
  int v454;
  unsigned int v457;
  char *v458;
  char *v459;
  const char *v460;
  size_t v461;
  unsigned __int16 *v462;
  unsigned __int16 *__dst;
  unint64_t v464;
  unint64_t v465;
  int v466;
  unint64_t v467;
  uint64_t v468;
  _BYTE *v469;
  _BOOL4 v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unsigned int *v475;
  unsigned int *v476;
  char *v477;
  char *v478;
  uint64_t v480;
  uint64_t v481;
  unsigned __int16 *v483;
  unsigned int *v484;
  unsigned __int16 *v485;
  int v486[2];
  unsigned __int16 *v487;
  int v489[2];
  unsigned int *v490;
  unsigned int v491;
  unsigned int *v492;
  unsigned int *v493;
  unsigned int *v494;
  uint64_t v495;
  int v496;
  uint64_t v497;
  _DWORD *v498;
  int v499;
  unint64_t v500;
  _DWORD v501[34];
  size_t __n[2];
  int v503[4];
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  size_t v512[2];
  unint64_t v513;
  uint64_t v514;

  v514 = *MEMORY[0x1E0C80C00];
  v513 = 0;
  v511 = 0u;
  *(_OWORD *)v512 = 0u;
  v509 = 0u;
  v510 = 0u;
  v507 = 0u;
  v508 = 0u;
  v505 = 0u;
  v506 = 0u;
  *(_OWORD *)v503 = 0u;
  v504 = 0u;
  *(_OWORD *)__n = 0u;
  memset(&v501[2], 0, 128);
  v9 = *(_QWORD *)(a1 + 2872);
  v10 = *(void **)(a1 + 2880);
  v11 = *(_OWORD **)(a1 + 3120);
  v12 = *(_QWORD *)(a1 + 656);
  v13 = *(unsigned int **)(a1 + 648);
  v14 = *(_DWORD *)(a1 + 256);
  if (v14 == 1)
    goto LABEL_8;
  if (v14 == 2)
  {
    v15 = 0;
LABEL_4:
    v16 = (uint64_t)v10;
    memcpy(v10, (const void *)v9, 0x404uLL);
LABEL_38:
    v501[2] = v15;
    __n[1] = 0;
    goto LABEL_39;
  }
  if (*(_DWORD *)(a1 + 212) != 1)
  {
LABEL_8:
    v19 = (_DWORD *)(v9 + 1024);
    v18 = *(_DWORD *)(v9 + 1024);
    v16 = (uint64_t)v10;
    memcpy(v10, (const void *)v9, 0x404uLL);
  }
  else
  {
    v17 = *(_DWORD *)(a1 + 208);
    v18 = *(_DWORD *)(v9 + 1024);
    v16 = (uint64_t)v10;
    memcpy(v10, (const void *)v9, 0x404uLL);
    if (v17)
    {
LABEL_37:
      v15 = 0;
      goto LABEL_38;
    }
    v19 = (_DWORD *)(v9 + 1024);
  }
  v20 = v12 - (_QWORD)v13;
  v21 = 63;
  if (*v19 == 2)
    v21 = 6;
  if (v21 >= v20)
    goto LABEL_37;
  if ((v11 & 3) != 0)
    return -1;
  LODWORD(v500) = 255;
  if (v20 <= 0x5DB)
  {
    v23 = (unsigned int *)((char *)v13 + v20);
    bzero(v11, 0x400uLL);
    do
    {
      v24 = *(unsigned __int8 *)v13;
      v13 = (unsigned int *)((char *)v13 + 1);
      ++*((_DWORD *)v11 + v24);
    }
    while (v13 < v23);
    LODWORD(v25) = 256;
    do
      v25 = (v25 - 1);
    while (!*((_DWORD *)v11 + v25));
    LODWORD(v500) = v25;
    if (v25 >= 7)
    {
      v26 = (v25 + 1) & 0x1FFFFFFF8;
      v29 = (uint32x4_t *)(v11 + 1);
      v30 = v26;
      v31 = 0uLL;
      v32 = 0uLL;
      do
      {
        v31 = vmaxq_u32(v29[-1], v31);
        v32 = vmaxq_u32(*v29, v32);
        v29 += 2;
        v30 -= 8;
      }
      while (v30);
      v27 = vmaxvq_u32(vmaxq_u32(v31, v32));
      if (v25 + 1 == v26)
        goto LABEL_31;
    }
    else
    {
      v26 = 0;
      v27 = 0;
    }
    v33 = v25 - v26 + 1;
    v34 = (unsigned int *)v11 + v26;
    do
    {
      v36 = *v34++;
      v35 = v36;
      if (v36 > v27)
        v27 = v35;
      --v33;
    }
    while (v33);
LABEL_31:
    v22 = v27;
    if (v27 != v20)
      goto LABEL_32;
LABEL_23:
    v15 = 1;
    goto LABEL_38;
  }
  v28 = HIST_count_parallel_wksp(v11, (unsigned int *)&v500, v13, v20, 0, (char *)v11);
  v22 = v28;
  if (v28 > 0xFFFFFFFFFFFFFF88)
    return v22;
  if (v28 == v20)
    goto LABEL_23;
LABEL_32:
  if (v22 <= (v20 >> 7) + 4)
    goto LABEL_37;
  v37 = v500;
  if (v18 != 1)
    goto LABEL_331;
  if ((v500 & 0x80000000) != 0)
  {
    v18 = 1;
    goto LABEL_331;
  }
  v38 = v500 + 1;
  if (v500 >= 8)
  {
    if (v500 >= 0x20)
    {
      v281 = 32;
      v282 = 0uLL;
      v283.i64[0] = 0x100000001;
      v283.i64[1] = 0x100000001;
      v284 = 0uLL;
      if ((v38 & 0x1F) != 0)
        v281 = v38 & 0x1F;
      v39 = v38 - v281;
      v285 = (const char *)(v9 + 66);
      v286 = (int32x4_t *)(v11 + 4);
      v287 = v500 + 1;
      v288 = 0uLL;
      v289 = 0uLL;
      v290 = 0uLL;
      v291 = 0uLL;
      v292 = 0uLL;
      v293 = 0uLL;
      do
      {
        v294 = v285 - 64;
        v295 = (unsigned __int128)vld4q_s8(v294);
        v296 = (unsigned __int128)vld4q_s8(v285);
        v297 = vbicq_s8(vceqzq_s8((int8x16_t)v295), vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v286[-4]), (int16x8_t)vceqzq_s32(v286[-3])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v286[-2]), (int16x8_t)vceqzq_s32(v286[-1]))));
        v298 = vbicq_s8(vceqzq_s8((int8x16_t)v296), vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(*v286), (int16x8_t)vceqzq_s32(v286[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v286[2]), (int16x8_t)vceqzq_s32(v286[3]))));
        *(_QWORD *)&v295 = vextq_s8(v297, v297, 8uLL).u64[0];
        v299 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)&v295, *(int8x8_t *)v282.i8)), v283);
        v300 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)&v295, *(int8x8_t *)v282.i8)), v283);
        v301 = (int8x8_t)vextq_s8(v298, v298, 8uLL).u64[0];
        v302 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v301, *(int8x8_t *)v282.i8)), v283);
        v303 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v301, *(int8x8_t *)v282.i8)), v283);
        v304 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v298.i8, *(int8x8_t *)v282.i8)), v283);
        v305 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v298.i8, *(int8x8_t *)v282.i8)), v283);
        v284 = vorrq_s8(v284, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v297.i8, *(int8x8_t *)v282.i8)), v283));
        v282 = vorrq_s8(v282, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v297.i8, *(int8x8_t *)v282.i8)), v283));
        v289 = vorrq_s8(v289, v300);
        v288 = vorrq_s8(v288, v299);
        v291 = vorrq_s8(v291, v305);
        v290 = vorrq_s8(v290, v304);
        v293 = vorrq_s8(v293, v303);
        v292 = vorrq_s8(v292, v302);
        v285 += 128;
        v286 += 8;
        v287 -= 32;
      }
      while (v281 != v287);
      v306 = vorrq_s8(vorrq_s8(vorrq_s8(v290, v282), vorrq_s8(v292, v288)), vorrq_s8(vorrq_s8(v291, v284), vorrq_s8(v293, v289)));
      *(int8x8_t *)v306.i8 = vorr_s8(*(int8x8_t *)v306.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v306, v306, 8uLL));
      v40 = v306.i32[0] | v306.i32[1];
      if (v281 < 9)
        goto LABEL_322;
    }
    else
    {
      v40 = 0;
      v39 = 0;
    }
    v307 = v38 & 7;
    if ((v38 & 7) == 0)
      v307 = 8;
    v308 = 4 * v39;
    v309 = v307 + v39;
    v39 = v38 - v307;
    v310 = (int8x16_t)v40;
    v311 = 0uLL;
    v312 = (int32x4_t *)((char *)v11 + v308);
    v313 = (const char *)(v308 + v9 + 2);
    v314 = v309 - v38;
    v315.i64[0] = 0x100000001;
    v315.i64[1] = 0x100000001;
    do
    {
      v316 = *v312;
      v317 = v312[1];
      v312 += 2;
      *(int8x8_t *)v316.i8 = vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v316), (int16x8_t)vceqzq_s32(v317))));
      v317.i64[0] = (unint64_t)vld4_s8(v313);
      v313 += 32;
      *(int8x8_t *)v316.i8 = vand_s8(*(int8x8_t *)v316.i8, vceqz_s8(*(int8x8_t *)v317.i8));
      v311 = vorrq_s8(v311, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v316.i8, *(int8x8_t *)v310.i8)), v315));
      v310 = vorrq_s8(v310, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v316.i8, *(int8x8_t *)v310.i8)), v315));
      v314 += 8;
    }
    while (v314);
    v318 = vorrq_s8(v310, v311);
    v319 = vorr_s8(*(int8x8_t *)v318.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v318, v318, 8uLL));
    v40 = v319.i32[0] | v319.i32[1];
  }
  else
  {
    v39 = 0;
    v40 = 0;
  }
LABEL_322:
  v320 = v38 - v39;
  v321 = 4 * v39;
  v322 = (unsigned __int8 *)(4 * v39 + v9 + 2);
  v323 = (int *)((char *)v11 + v321);
  do
  {
    v325 = *v323++;
    v324 = v325;
    v327 = *v322;
    v322 += 4;
    v326 = v327;
    if (v324)
      v328 = v326 == 0;
    else
      v328 = 0;
    v329 = v328;
    v40 |= v329 & 1;
    --v320;
  }
  while (v320);
  v18 = v40 == 0;
LABEL_331:
  bzero((void *)v16, 0x400uLL);
  v330 = (__clz(v20 - 1) ^ 0x1F) - 1;
  v331 = __clz(v20) ^ 0x1F;
  v332 = (__clz(v37) ^ 0x1F) + 2;
  if (v331 + 1 < v332)
    v333 = v331 + 1;
  else
    v333 = v332;
  if (v330 >= 0xB)
    v330 = 11;
  if (v333 > v330)
    v330 = v333;
  if (v330 <= 5)
    v330 = 5;
  if (v330 >= 0xC)
    v334 = 12;
  else
    v334 = v330;
  v22 = HUF_buildCTable_wksp(v16, (int *)v11, v37, v334, (char *)v11 + 1024, 0x15D8uLL);
  if (v22 > 0xFFFFFFFFFFFFFF88)
    return v22;
  v478 = a4;
  if ((v37 & 0x80000000) != 0)
  {
    v22 = HUF_writeCTable((uint64_t)&v501[3], 0x80uLL, v16, v37, v22);
    v339 = 0;
    v340 = 0;
    if (!v18)
      goto LABEL_389;
    goto LABEL_382;
  }
  v473 = a3;
  v336 = v37 + 1;
  if (v37 < 8)
  {
    v337 = 0;
    v338 = 0;
    goto LABEL_361;
  }
  if (v37 < 0x20)
  {
    v338 = 0;
    v337 = 0;
LABEL_356:
    v377 = v336 & 7;
    if ((v336 & 7) == 0)
      v377 = 8;
    v378 = 4 * v337;
    v379 = v377 + v337;
    v337 = v336 - v377;
    v380 = 0uLL;
    v381 = (int64x2_t)v338;
    v382 = (const char *)(v378 + v16 + 2);
    v383 = (int32x4_t *)((char *)v11 + v378);
    v384 = v379 - v336;
    v385 = 0uLL;
    v386 = 0uLL;
    do
    {
      v335.i64[0] = (unint64_t)vld4_s8(v382);
      v382 += 32;
      v387 = (int32x4_t)vqtbl1q_s8((int8x16_t)v335, (int8x16_t)xmmword_18823D710);
      v388 = (int32x4_t)vqtbl1q_s8((int8x16_t)v335, (int8x16_t)xmmword_18823D720);
      v335 = *v383;
      v389 = v383[1];
      v383 += 2;
      v390 = (uint32x4_t)vmulq_s32(v389, v388);
      v391 = (uint32x4_t)vmulq_s32(v335, v387);
      v386 = (int64x2_t)vaddw_high_u32((uint64x2_t)v386, v390);
      v380 = (int64x2_t)vaddw_high_u32((uint64x2_t)v380, v391);
      v385 = (int64x2_t)vaddw_u32((uint64x2_t)v385, *(uint32x2_t *)v390.i8);
      v381 = (int64x2_t)vaddw_u32((uint64x2_t)v381, *(uint32x2_t *)v391.i8);
      v384 += 8;
    }
    while (v384);
    v338 = vaddvq_s64(vaddq_s64(vaddq_s64(v381, v385), vaddq_s64(v380, v386)));
    goto LABEL_361;
  }
  v341 = 0uLL;
  v342 = 32;
  if ((v336 & 0x1F) != 0)
    v342 = v336 & 0x1F;
  v337 = v336 - v342;
  v343 = (const char *)(v16 + 66);
  v344 = (int32x4_t *)(v11 + 4);
  v345 = 0uLL;
  v346 = 0uLL;
  v347 = 0uLL;
  v348 = 0uLL;
  v335 = 0uLL;
  v349 = 0uLL;
  v350 = 0uLL;
  v351 = 0uLL;
  v352 = 0uLL;
  v353 = v37 + 1;
  v354 = 0uLL;
  v355 = 0uLL;
  v356 = 0uLL;
  v357 = 0uLL;
  v358 = 0uLL;
  v359 = 0uLL;
  do
  {
    v360 = v343 - 64;
    v361 = (unsigned __int128)vld4q_s8(v360);
    v362 = (unsigned __int128)vld4q_s8(v343);
    v363 = (int32x4_t)vqtbl1q_s8((int8x16_t)v361, (int8x16_t)xmmword_18823D710);
    v364 = (int32x4_t)vqtbl1q_s8((int8x16_t)v361, (int8x16_t)xmmword_18823D720);
    v365 = (int32x4_t)vqtbl1q_s8((int8x16_t)v361, (int8x16_t)xmmword_18823D730);
    v366 = (int32x4_t)vqtbl1q_s8((int8x16_t)v362, (int8x16_t)xmmword_18823D740);
    v367 = (int32x4_t)vqtbl1q_s8((int8x16_t)v362, (int8x16_t)xmmword_18823D710);
    v368 = (int32x4_t)vqtbl1q_s8((int8x16_t)v362, (int8x16_t)xmmword_18823D720);
    v369 = (uint32x4_t)vmulq_s32(v344[-1], (int32x4_t)vqtbl1q_s8((int8x16_t)v361, (int8x16_t)xmmword_18823D740));
    v370 = (uint32x4_t)vmulq_s32(v344[-2], v365);
    v371 = (uint32x4_t)vmulq_s32(v344[-3], v364);
    v372 = (uint32x4_t)vmulq_s32(v344[-4], v363);
    v373 = (uint32x4_t)vmulq_s32(v344[2], (int32x4_t)vqtbl1q_s8((int8x16_t)v362, (int8x16_t)xmmword_18823D730));
    v374 = (uint32x4_t)vmulq_s32(v344[1], v368);
    v375 = (uint32x4_t)vmulq_s32(*v344, v367);
    v376 = (uint32x4_t)vmulq_s32(v344[3], v366);
    v335 = (int32x4_t)vaddw_high_u32((uint64x2_t)v335, v370);
    v348 = (int64x2_t)vaddw_u32((uint64x2_t)v348, *(uint32x2_t *)v370.i8);
    v347 = (int64x2_t)vaddw_high_u32((uint64x2_t)v347, v371);
    v346 = (int64x2_t)vaddw_u32((uint64x2_t)v346, *(uint32x2_t *)v371.i8);
    v345 = (int64x2_t)vaddw_high_u32((uint64x2_t)v345, v372);
    v341 = (int64x2_t)vaddw_u32((uint64x2_t)v341, *(uint32x2_t *)v372.i8);
    v349 = (int64x2_t)vaddw_u32((uint64x2_t)v349, *(uint32x2_t *)v369.i8);
    v350 = (int64x2_t)vaddw_high_u32((uint64x2_t)v350, v369);
    v357 = (int64x2_t)vaddw_high_u32((uint64x2_t)v357, v373);
    v356 = (int64x2_t)vaddw_u32((uint64x2_t)v356, *(uint32x2_t *)v373.i8);
    v355 = (int64x2_t)vaddw_high_u32((uint64x2_t)v355, v374);
    v354 = (int64x2_t)vaddw_u32((uint64x2_t)v354, *(uint32x2_t *)v374.i8);
    v352 = (int64x2_t)vaddw_high_u32((uint64x2_t)v352, v375);
    v351 = (int64x2_t)vaddw_u32((uint64x2_t)v351, *(uint32x2_t *)v375.i8);
    v358 = (int64x2_t)vaddw_u32((uint64x2_t)v358, *(uint32x2_t *)v376.i8);
    v359 = (int64x2_t)vaddw_high_u32((uint64x2_t)v359, v376);
    v343 += 128;
    v344 += 8;
    v353 -= 32;
  }
  while (v342 != v353);
  v338 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v351, v341), vaddq_s64(v356, v348)), vaddq_s64(vaddq_s64(v354, v346), vaddq_s64(v358, v349))), vaddq_s64(vaddq_s64(vaddq_s64(v352, v345), vaddq_s64(v357, (int64x2_t)v335)), vaddq_s64(vaddq_s64(v355, v347), vaddq_s64(v359, v350)))));
  if (v342 >= 9)
    goto LABEL_356;
LABEL_361:
  v392 = v336 - v337;
  v393 = 4 * v337;
  do
  {
    v338 += *(_DWORD *)((char *)v11 + v393) * *(unsigned __int8 *)(v16 + v393 + 2);
    v393 += 4;
    --v392;
  }
  while (v392);
  v339 = v338 >> 3;
  v22 = HUF_writeCTable((uint64_t)&v501[3], 0x80uLL, v16, v37, v22);
  if (!v18)
  {
    a3 = v473;
    goto LABEL_389;
  }
  if (v37 >= 8)
  {
    if (v37 >= 0x20)
    {
      v397 = 0uLL;
      v398 = 32;
      if ((v336 & 0x1F) != 0)
        v398 = v336 & 0x1F;
      v395 = v336 - v398;
      v399 = (const char *)(v9 + 66);
      v400 = (int32x4_t *)(v11 + 4);
      v401 = 0uLL;
      v402 = 0uLL;
      v403 = 0uLL;
      v404 = 0uLL;
      v394 = 0uLL;
      v405 = 0uLL;
      v406 = 0uLL;
      v407 = 0uLL;
      v408 = 0uLL;
      v409 = v37 + 1;
      v410 = 0uLL;
      v411 = 0uLL;
      v412 = 0uLL;
      v413 = 0uLL;
      v414 = 0uLL;
      v415 = 0uLL;
      do
      {
        v416 = v399 - 64;
        v417 = (unsigned __int128)vld4q_s8(v416);
        v418 = (unsigned __int128)vld4q_s8(v399);
        v419 = (int32x4_t)vqtbl1q_s8((int8x16_t)v417, (int8x16_t)xmmword_18823D710);
        v420 = (int32x4_t)vqtbl1q_s8((int8x16_t)v417, (int8x16_t)xmmword_18823D720);
        v421 = (int32x4_t)vqtbl1q_s8((int8x16_t)v417, (int8x16_t)xmmword_18823D730);
        v422 = (int32x4_t)vqtbl1q_s8((int8x16_t)v418, (int8x16_t)xmmword_18823D740);
        v423 = (int32x4_t)vqtbl1q_s8((int8x16_t)v418, (int8x16_t)xmmword_18823D710);
        v424 = (int32x4_t)vqtbl1q_s8((int8x16_t)v418, (int8x16_t)xmmword_18823D720);
        v425 = (uint32x4_t)vmulq_s32(v400[-1], (int32x4_t)vqtbl1q_s8((int8x16_t)v417, (int8x16_t)xmmword_18823D740));
        v426 = (uint32x4_t)vmulq_s32(v400[-2], v421);
        v427 = (uint32x4_t)vmulq_s32(v400[-3], v420);
        v428 = (uint32x4_t)vmulq_s32(v400[-4], v419);
        v429 = (uint32x4_t)vmulq_s32(v400[2], (int32x4_t)vqtbl1q_s8((int8x16_t)v418, (int8x16_t)xmmword_18823D730));
        v430 = (uint32x4_t)vmulq_s32(v400[1], v424);
        v431 = (uint32x4_t)vmulq_s32(*v400, v423);
        v432 = (uint32x4_t)vmulq_s32(v400[3], v422);
        v394 = (int32x4_t)vaddw_high_u32((uint64x2_t)v394, v426);
        v404 = (int64x2_t)vaddw_u32((uint64x2_t)v404, *(uint32x2_t *)v426.i8);
        v403 = (int64x2_t)vaddw_high_u32((uint64x2_t)v403, v427);
        v402 = (int64x2_t)vaddw_u32((uint64x2_t)v402, *(uint32x2_t *)v427.i8);
        v401 = (int64x2_t)vaddw_high_u32((uint64x2_t)v401, v428);
        v397 = (int64x2_t)vaddw_u32((uint64x2_t)v397, *(uint32x2_t *)v428.i8);
        v405 = (int64x2_t)vaddw_u32((uint64x2_t)v405, *(uint32x2_t *)v425.i8);
        v406 = (int64x2_t)vaddw_high_u32((uint64x2_t)v406, v425);
        v413 = (int64x2_t)vaddw_high_u32((uint64x2_t)v413, v429);
        v412 = (int64x2_t)vaddw_u32((uint64x2_t)v412, *(uint32x2_t *)v429.i8);
        v411 = (int64x2_t)vaddw_high_u32((uint64x2_t)v411, v430);
        v410 = (int64x2_t)vaddw_u32((uint64x2_t)v410, *(uint32x2_t *)v430.i8);
        v408 = (int64x2_t)vaddw_high_u32((uint64x2_t)v408, v431);
        v407 = (int64x2_t)vaddw_u32((uint64x2_t)v407, *(uint32x2_t *)v431.i8);
        v414 = (int64x2_t)vaddw_u32((uint64x2_t)v414, *(uint32x2_t *)v432.i8);
        v415 = (int64x2_t)vaddw_high_u32((uint64x2_t)v415, v432);
        v399 += 128;
        v400 += 8;
        v409 -= 32;
      }
      while (v398 != v409);
      v396 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v407, v397), vaddq_s64(v412, v404)), vaddq_s64(vaddq_s64(v410, v402), vaddq_s64(v414, v405))), vaddq_s64(vaddq_s64(vaddq_s64(v408, v401), vaddq_s64(v413, (int64x2_t)v394)), vaddq_s64(vaddq_s64(v411, v403), vaddq_s64(v415, v406)))));
      if (v398 < 9)
        goto LABEL_379;
    }
    else
    {
      v396 = 0;
      v395 = 0;
    }
    v433 = v336 & 7;
    if ((v336 & 7) == 0)
      v433 = 8;
    v434 = 4 * v395;
    v435 = v433 + v395;
    v395 = v336 - v433;
    v436 = 0uLL;
    v437 = (int64x2_t)v396;
    v438 = (const char *)(v434 + v9 + 2);
    v439 = (int32x4_t *)((char *)v11 + v434);
    v440 = v435 - v336;
    v441 = 0uLL;
    v442 = 0uLL;
    do
    {
      v394.i64[0] = (unint64_t)vld4_s8(v438);
      v438 += 32;
      v443 = (int32x4_t)vqtbl1q_s8((int8x16_t)v394, (int8x16_t)xmmword_18823D710);
      v444 = (int32x4_t)vqtbl1q_s8((int8x16_t)v394, (int8x16_t)xmmword_18823D720);
      v394 = *v439;
      v445 = v439[1];
      v439 += 2;
      v446 = (uint32x4_t)vmulq_s32(v445, v444);
      v447 = (uint32x4_t)vmulq_s32(v394, v443);
      v442 = (int64x2_t)vaddw_high_u32((uint64x2_t)v442, v446);
      v436 = (int64x2_t)vaddw_high_u32((uint64x2_t)v436, v447);
      v441 = (int64x2_t)vaddw_u32((uint64x2_t)v441, *(uint32x2_t *)v446.i8);
      v437 = (int64x2_t)vaddw_u32((uint64x2_t)v437, *(uint32x2_t *)v447.i8);
      v440 += 8;
    }
    while (v440);
    v396 = vaddvq_s64(vaddq_s64(vaddq_s64(v437, v441), vaddq_s64(v436, v442)));
  }
  else
  {
    v395 = 0;
    v396 = 0;
  }
LABEL_379:
  v448 = v336 - v395;
  v449 = 4 * v395;
  v450 = (int *)v11 + v395;
  v451 = (unsigned __int8 *)(v449 + v9 + 2);
  do
  {
    v453 = *v451;
    v451 += 4;
    v452 = v453;
    v454 = *v450++;
    v396 += (v454 * v452);
    --v448;
  }
  while (v448);
  v340 = v396 >> 3;
  a3 = v473;
LABEL_382:
  if (v340 < v20 && (v340 <= v22 + v339 || v22 + 12 >= v20))
  {
    v15 = 3;
LABEL_393:
    a4 = v478;
    v10 = (void *)v16;
    goto LABEL_4;
  }
LABEL_389:
  if (v339 + v22 >= v20)
  {
    v15 = 0;
    goto LABEL_393;
  }
  v501[2] = 2;
  *(_DWORD *)(v16 + 1024) = 1;
  __n[1] = v22;
  a4 = v478;
  if (v22 > 0xFFFFFFFFFFFFFF88)
    return v22;
LABEL_39:
  v41 = *(_DWORD *)(a1 + 212);
  v484 = *(unsigned int **)(a1 + 680);
  v493 = *(unsigned int **)(a1 + 664);
  v475 = *(unsigned int **)(a1 + 672);
  v42 = *(_QWORD *)(a1 + 640);
  v43 = *(_QWORD *)(a1 + 632);
  bzero(v11, 0x19D8uLL);
  v513 = 0;
  v44 = *(_QWORD *)(a1 + 632);
  v45 = *(_QWORD *)(a1 + 664);
  v46 = *(_QWORD *)(a1 + 672);
  v47 = *(_QWORD *)(a1 + 640) - v44;
  if ((v47 & 0x7FFFFFFF8) != 0)
  {
    v48 = (v47 >> 3);
    v49 = (unsigned __int16 *)(v44 + 6);
    v50 = *(_BYTE **)(a1 + 680);
    v51 = *(_BYTE **)(a1 + 664);
    v52 = *(_BYTE **)(a1 + 672);
    do
    {
      while (1)
      {
        v53 = *(v49 - 1);
        if (v53 < 0x40)
          LOBYTE(v54) = ZSTD_LLcode_LL_Code[*(v49 - 1)];
        else
          v54 = 50 - __clz(v53);
        v55 = *v49;
        *v51 = v54;
        *v50 = __clz(*(_DWORD *)(v49 - 3)) ^ 0x1F;
        if (v55 >= 0x80)
          break;
        v49 += 4;
        *v52++ = ZSTD_MLcode_ML_Code[v55];
        ++v50;
        ++v51;
        if (!--v48)
          goto LABEL_47;
      }
      v49 += 4;
      *v52++ = 67 - __clz(v55);
      ++v50;
      ++v51;
      --v48;
    }
    while (v48);
  }
LABEL_47:
  v471 = a3;
  v56 = v42 - v43;
  v57 = *(_DWORD *)(a1 + 704);
  v58 = v16;
  if (v57 == 1)
  {
    *(_BYTE *)(v45 + *(unsigned int *)(a1 + 708)) = 35;
    v57 = *(_DWORD *)(a1 + 704);
  }
  v498 = (_DWORD *)v11 + 53;
  v59 = v56 >> 3;
  if (v57 == 2)
    *(_BYTE *)(v46 + *(unsigned int *)(a1 + 708)) = 52;
  LODWORD(v500) = 35;
  *(_QWORD *)v489 = (unint64_t)v56 >> 5;
  v495 = v56 >> 3;
  v477 = a4;
  v480 = v42;
  *(_QWORD *)v486 = v43;
  v474 = a1;
  if ((unint64_t)v56 >> 5 <= 0x176)
  {
    v11[7] = 0u;
    v11[8] = 0u;
    v11[5] = 0u;
    v11[6] = 0u;
    v11[3] = 0u;
    v11[4] = 0u;
    v11[1] = 0u;
    v11[2] = 0u;
    *v11 = 0u;
    if (v42 == v43)
    {
      LODWORD(v62) = 0;
      v65 = 0;
      goto LABEL_71;
    }
    v60 = v493;
    do
    {
      v61 = *(unsigned __int8 *)v60;
      v60 = (unsigned int *)((char *)v60 + 1);
      ++*((_DWORD *)v11 + v61);
    }
    while (v60 < (unsigned int *)((char *)v493 + v59));
    LODWORD(v62) = 36;
    do
      v62 = (v62 - 1);
    while (!*((_DWORD *)v11 + v62));
    if (v62 >= 7)
    {
      v63 = (v62 + 1) & 0x1FFFFFFF8;
      v67 = (uint32x4_t *)(v11 + 1);
      v68 = v63;
      v69 = 0uLL;
      v70 = 0uLL;
      do
      {
        v69 = vmaxq_u32(v67[-1], v69);
        v70 = vmaxq_u32(*v67, v70);
        v67 += 2;
        v68 -= 8;
      }
      while (v68);
      v64 = vmaxvq_u32(vmaxq_u32(v69, v70));
      if (v62 + 1 == v63)
      {
LABEL_70:
        v65 = v64;
        goto LABEL_71;
      }
    }
    else
    {
      v63 = 0;
      v64 = 0;
    }
    v71 = v62 - v63 + 1;
    v72 = (unsigned int *)v11 + v63;
    do
    {
      v74 = *v72++;
      v73 = v74;
      if (v74 > v64)
        v64 = v73;
      --v71;
    }
    while (v71);
    goto LABEL_70;
  }
  if ((v11 & 3) != 0)
  {
    v65 = -1;
    LODWORD(v62) = 35;
  }
  else
  {
    v66 = HIST_count_parallel_wksp(v11, (unsigned int *)&v500, v493, v59, 0, (char *)v11);
    v58 = v16;
    v65 = v66;
    LODWORD(v62) = v500;
  }
LABEL_71:
  *(_DWORD *)(v58 + 4576) = *(_DWORD *)(v9 + 4576);
  v491 = v41;
  v75 = v58;
  v76 = ZSTD_selectEncodingType((_DWORD *)(v58 + 4576), (unsigned int *)v11, v62, v65, v495, 9u, (unsigned __int16 *)(v9 + 3252), (uint64_t)LL_defaultNorm, 6, 1, v41);
  v77 = ZSTD_buildCTable(&v503[3], 0x85uLL, (_WORD *)(v16 + 3252), 9u, v76, (unsigned int *)v11, v62, v493, v495, LL_defaultNorm, 6, 35, (const void *)(v9 + 3252), 0x524uLL, v498, 0x1904uLL);
  v22 = v77;
  if (v77 > 0xFFFFFFFFFFFFFF88)
    return v22;
  v78 = (unsigned __int16 *)(v9 + 1028);
  v79 = (_WORD *)(v75 + 1028);
  v80 = v75;
  if (v76 == 2)
    v513 = v77;
  v81 = (char *)&v503[3] + v77;
  v503[0] = v76;
  LODWORD(v500) = 31;
  if (*(_QWORD *)v489 <= 0x176uLL)
  {
    v11[6] = 0u;
    v11[7] = 0u;
    v11[4] = 0u;
    v11[5] = 0u;
    v11[2] = 0u;
    v11[3] = 0u;
    *v11 = 0u;
    v11[1] = 0u;
    v82 = v484;
    v83 = v491;
    if (v480 == *(_QWORD *)v486)
    {
      v87 = v79;
      LODWORD(v86) = 0;
      v90 = 0;
      goto LABEL_94;
    }
    v84 = v484;
    do
    {
      v85 = *(unsigned __int8 *)v84;
      v84 = (unsigned int *)((char *)v84 + 1);
      ++*((_DWORD *)v11 + v85);
    }
    while (v84 < (unsigned int *)((char *)v484 + v495));
    LODWORD(v86) = 32;
    do
      v86 = (v86 - 1);
    while (!*((_DWORD *)v11 + v86));
    if (v86 >= 7)
    {
      v88 = (v86 + 1) & 0x1FFFFFFF8;
      v92 = (uint32x4_t *)(v11 + 1);
      v93 = v88;
      v94 = 0uLL;
      v95 = 0uLL;
      do
      {
        v94 = vmaxq_u32(v92[-1], v94);
        v95 = vmaxq_u32(*v92, v95);
        v92 += 2;
        v93 -= 8;
      }
      while (v93);
      v87 = v79;
      v89 = vmaxvq_u32(vmaxq_u32(v94, v95));
      if (v86 + 1 == v88)
      {
LABEL_93:
        v90 = v89;
        goto LABEL_94;
      }
    }
    else
    {
      v87 = v79;
      v88 = 0;
      v89 = 0;
    }
    v96 = v86 - v88 + 1;
    v97 = (unsigned int *)v11 + v88;
    do
    {
      v99 = *v97++;
      v98 = v99;
      if (v99 > v89)
        v89 = v98;
      --v96;
    }
    while (v96);
    goto LABEL_93;
  }
  v87 = (_WORD *)(v75 + 1028);
  v83 = v491;
  v82 = v484;
  if ((v11 & 3) != 0)
  {
    v90 = -1;
    LODWORD(v86) = 31;
  }
  else
  {
    v86 = v80;
    v91 = HIST_count_parallel_wksp(v11, (unsigned int *)&v500, v484, v495, 0, (char *)v11);
    v80 = v86;
    v90 = v91;
    LODWORD(v86) = v500;
  }
LABEL_94:
  *(_DWORD *)(v80 + 4568) = *(_DWORD *)(v9 + 4568);
  v457 = v83;
  v100 = v80;
  v101 = ZSTD_selectEncodingType((_DWORD *)(v80 + 4568), (unsigned int *)v11, v86, v90, v495, 8u, v78, (uint64_t)OF_defaultNorm, 5, v86 < 0x1D, v457);
  v102 = ZSTD_buildCTable(v81, (char *)v512 + 1 - v81, v87, 8u, v101, (unsigned int *)v11, v86, v82, v495, OF_defaultNorm, 5, 28, v78, 0x304uLL, v498, 0x1904uLL);
  v22 = v102;
  if (v102 > 0xFFFFFFFFFFFFFF88)
    return v22;
  v103 = v100;
  if (v101 == 2)
    v513 = v102;
  v104 = &v81[v102];
  v503[1] = v101;
  LODWORD(v500) = 52;
  if (*(_QWORD *)v489 <= 0x176uLL)
  {
    *((_DWORD *)v11 + 52) = 0;
    v11[11] = 0u;
    v11[12] = 0u;
    v11[9] = 0u;
    v11[10] = 0u;
    v11[7] = 0u;
    v11[8] = 0u;
    v11[5] = 0u;
    v11[6] = 0u;
    v11[3] = 0u;
    v11[4] = 0u;
    v11[1] = 0u;
    v11[2] = 0u;
    *v11 = 0u;
    v105 = v9;
    v106 = v491;
    if (v480 == *(_QWORD *)v486)
    {
      v110 = (_WORD *)(v100 + 1800);
      LODWORD(v109) = 0;
      v113 = 0;
      goto LABEL_117;
    }
    v107 = v475;
    do
    {
      v108 = *(unsigned __int8 *)v107;
      v107 = (unsigned int *)((char *)v107 + 1);
      ++*((_DWORD *)v11 + v108);
    }
    while (v107 < (unsigned int *)((char *)v475 + v495));
    LODWORD(v109) = 53;
    do
      v109 = (v109 - 1);
    while (!*((_DWORD *)v11 + v109));
    if (v109 >= 7)
    {
      v111 = (v109 + 1) & 0x1FFFFFFF8;
      v115 = (uint32x4_t *)(v11 + 1);
      v116 = v111;
      v117 = 0uLL;
      v118 = 0uLL;
      do
      {
        v117 = vmaxq_u32(v115[-1], v117);
        v118 = vmaxq_u32(*v115, v118);
        v115 += 2;
        v116 -= 8;
      }
      while (v116);
      v110 = (_WORD *)(v100 + 1800);
      v112 = vmaxvq_u32(vmaxq_u32(v117, v118));
      if (v109 + 1 == v111)
      {
LABEL_116:
        v113 = v112;
        goto LABEL_117;
      }
    }
    else
    {
      v110 = (_WORD *)(v100 + 1800);
      v111 = 0;
      v112 = 0;
    }
    v119 = v109 - v111 + 1;
    v120 = (unsigned int *)v11 + v111;
    do
    {
      v122 = *v120++;
      v121 = v122;
      if (v122 > v112)
        v112 = v121;
      --v119;
    }
    while (v119);
    goto LABEL_116;
  }
  v110 = (_WORD *)(v100 + 1800);
  v105 = v9;
  v106 = v491;
  if ((v11 & 3) != 0)
  {
    v113 = -1;
    LODWORD(v109) = 52;
  }
  else
  {
    v114 = HIST_count_parallel_wksp(v11, (unsigned int *)&v500, v475, v495, 0, (char *)v11);
    v103 = v100;
    v113 = v114;
    LODWORD(v109) = v500;
  }
LABEL_117:
  *(_DWORD *)(v103 + 4572) = *(_DWORD *)(v105 + 4572);
  v123 = (unsigned __int16 *)(v105 + 1800);
  v124 = ZSTD_selectEncodingType((_DWORD *)(v103 + 4572), (unsigned int *)v11, v109, v113, v495, 9u, v123, (uint64_t)ML_defaultNorm, 6, 1, v106);
  v125 = ZSTD_buildCTable(v104, (char *)v512 + 1 - v104, v110, 9u, v124, (unsigned int *)v11, v109, v475, v495, ML_defaultNorm, 6, 52, v123, 0x5ACuLL, v498, 0x1904uLL);
  v22 = v125;
  if (v125 > 0xFFFFFFFFFFFFFF88)
    return v22;
  if (v124 == 2)
    v513 = v125;
  v503[2] = v124;
  v22 = &v104[v125] - (char *)&v503[3];
  v512[1] = v22;
  if (v22 > 0xFFFFFFFFFFFFFF88)
    return v22;
  v129 = 0;
  v130 = 0;
  v131 = *(int32x4_t **)(v474 + 3120);
  v458 = &v477[a5];
  v481 = a2 + v471;
  v470 = v501[2] == 2;
  v132 = *(_QWORD *)(v474 + 640);
  v467 = v132 - 8;
  v133 = *(unsigned __int16 **)(v474 + 2880);
  v487 = v133 + 514;
  v485 = v133 + 1626;
  v459 = *(char **)(v474 + 2872);
  v483 = v133 + 900;
  v134 = *(_QWORD *)(v474 + 632);
  v460 = (const char *)(v133 + 33);
  v476 = *(unsigned int **)(v474 + 648);
  __dst = v133;
  v462 = v133 + 1;
  v468 = *(_QWORD *)(v474 + 656);
  v492 = *(unsigned int **)(v474 + 672);
  v494 = *(unsigned int **)(v474 + 664);
  v135 = 0xFFFFFF01FFFFFF00;
  v136.i64[0] = 0xFFFFFF05FFFFFF04;
  v137.i64[0] = 0xFFFFFF09FFFFFF08;
  v138.i64[0] = 0xFFFFFF0DFFFFFF0CLL;
  v490 = *(unsigned int **)(v474 + 680);
  v472 = *(_QWORD *)(v474 + 240);
  v469 = (_BYTE *)a2;
  v496 = 1;
  v139 = v134;
  v464 = v132;
  v465 = v134;
  do
  {
    if (v134 == v132)
      goto LABEL_130;
    v141 = v139 + 8 * v130;
    v142 = *(unsigned __int16 *)(v141 + 4);
    if (*(_DWORD *)(v474 + 708) == ((v141 - *(_QWORD *)(v474 + 632)) >> 3)
      && *(_DWORD *)(v474 + 704) == 1)
    {
      v142 += 0xFFFFLL;
    }
    ++v130;
    if (v141 == v467)
    {
LABEL_130:
      v129 = v468 - (_QWORD)v476;
      v499 = 1;
      v143 = v501[2];
      if ((v501[2] - 2) >= 2)
        goto LABEL_131;
    }
    else
    {
      v129 += v142;
      v499 = 0;
      v143 = v501[2];
      if ((v501[2] - 2) >= 2)
      {
LABEL_131:
        if (v143)
          v144 = v143 == 1;
        else
          v144 = v129;
        goto LABEL_167;
      }
    }
    v144 = v129;
    if ((v131 & 3) != 0)
      goto LABEL_167;
    LODWORD(v500) = 255;
    if (v129 > 0x5DB)
    {
      v144 = v129;
      if ((unint64_t)HIST_count_parallel_wksp(v131, (unsigned int *)&v500, v476, v129, 0, v131->i8) > 0xFFFFFFFFFFFFFF88)
        goto LABEL_167;
      v147 = v500;
      v149 = (int8x16_t)xmmword_18823D720;
      v148 = (int8x16_t)xmmword_18823D710;
      v151 = (int8x16_t)xmmword_18823D740;
      v150 = (int8x16_t)xmmword_18823D730;
      if ((v500 & 0x80000000) != 0)
        goto LABEL_147;
LABEL_143:
      v152 = v147 + 1;
      if (v147 >= 8)
      {
        if (v147 >= 0x20)
        {
          v156 = 0uLL;
          v157 = 0uLL;
          v158 = 32;
          if ((((_BYTE)v147 + 1) & 0x1F) != 0)
            v158 = ((_BYTE)v147 + 1) & 0x1F;
          v159 = 0uLL;
          v153 = v152 - v158;
          v160 = 0uLL;
          v161 = v152;
          v162 = 0uLL;
          v163 = v131 + 4;
          v164 = v460;
          v165 = 0uLL;
          v166 = 0uLL;
          v167 = 0uLL;
          v128 = 0uLL;
          v168 = 0uLL;
          v169 = 0uLL;
          v170 = 0uLL;
          v171 = 0uLL;
          v172 = 0uLL;
          v173 = 0uLL;
          v174 = 0uLL;
          do
          {
            v175 = v164 - 64;
            v176 = (unsigned __int128)vld4q_s8(v175);
            v177 = (unsigned __int128)vld4q_s8(v164);
            v178 = (int32x4_t)vqtbl1q_s8((int8x16_t)v176, v148);
            v179 = (int32x4_t)vqtbl1q_s8((int8x16_t)v176, v149);
            v180 = (int32x4_t)vqtbl1q_s8((int8x16_t)v176, v150);
            v181 = (int32x4_t)vqtbl1q_s8((int8x16_t)v177, v151);
            v182 = (int32x4_t)vqtbl1q_s8((int8x16_t)v177, v148);
            v183 = (int32x4_t)vqtbl1q_s8((int8x16_t)v177, v149);
            v184 = (uint32x4_t)vmulq_s32(v163[-1], (int32x4_t)vqtbl1q_s8((int8x16_t)v176, v151));
            v185 = (uint32x4_t)vmulq_s32(v163[-2], v180);
            v186 = (uint32x4_t)vmulq_s32(v163[-3], v179);
            v187 = (uint32x4_t)vmulq_s32(v163[-4], v178);
            v188 = (uint32x4_t)vmulq_s32(v163[2], (int32x4_t)vqtbl1q_s8((int8x16_t)v177, v150));
            v189 = (uint32x4_t)vmulq_s32(v163[1], v183);
            v190 = (uint32x4_t)vmulq_s32(*v163, v182);
            v191 = (uint32x4_t)vmulq_s32(v163[3], v181);
            v165 = (int64x2_t)vaddw_high_u32((uint64x2_t)v165, v185);
            v162 = (int64x2_t)vaddw_u32((uint64x2_t)v162, *(uint32x2_t *)v185.i8);
            v160 = (int64x2_t)vaddw_high_u32((uint64x2_t)v160, v186);
            v159 = (int64x2_t)vaddw_u32((uint64x2_t)v159, *(uint32x2_t *)v186.i8);
            v157 = (int64x2_t)vaddw_high_u32((uint64x2_t)v157, v187);
            v156 = (int64x2_t)vaddw_u32((uint64x2_t)v156, *(uint32x2_t *)v187.i8);
            v166 = (int64x2_t)vaddw_u32((uint64x2_t)v166, *(uint32x2_t *)v184.i8);
            v167 = (int64x2_t)vaddw_high_u32((uint64x2_t)v167, v184);
            v172 = (int64x2_t)vaddw_high_u32((uint64x2_t)v172, v188);
            v171 = (int64x2_t)vaddw_u32((uint64x2_t)v171, *(uint32x2_t *)v188.i8);
            v170 = (int64x2_t)vaddw_high_u32((uint64x2_t)v170, v189);
            v169 = (int64x2_t)vaddw_u32((uint64x2_t)v169, *(uint32x2_t *)v189.i8);
            v168 = (int64x2_t)vaddw_high_u32((uint64x2_t)v168, v190);
            v128 = (int32x4_t)vaddw_u32((uint64x2_t)v128, *(uint32x2_t *)v190.i8);
            v173 = (int64x2_t)vaddw_u32((uint64x2_t)v173, *(uint32x2_t *)v191.i8);
            v174 = (int64x2_t)vaddw_high_u32((uint64x2_t)v174, v191);
            v164 += 128;
            v163 += 8;
            v161 -= 32;
          }
          while (v158 != v161);
          v138 = vaddq_s64(v168, v157);
          v127 = vaddq_s64(v172, v165);
          v126 = vaddq_s64(v173, v166);
          v192 = vaddq_s64(vaddq_s64(vaddq_s64((int64x2_t)v128, v156), vaddq_s64(v171, v162)), vaddq_s64(vaddq_s64(v169, v159), v126));
          v137 = vaddq_s64(vaddq_s64(v170, v160), vaddq_s64(v174, v167));
          v136 = vaddq_s64(vaddq_s64(v138, v127), v137);
          v135 = vaddvq_s64(vaddq_s64(v192, v136));
          v154 = v135;
          if (v158 < 9)
            goto LABEL_161;
        }
        else
        {
          v154 = 0;
          v153 = 0;
        }
        v193 = v152 & 7;
        if ((v152 & 7) == 0)
          v193 = 8;
        v194 = 2 * v153;
        v195 = v193 + v153;
        v153 = v152 - v193;
        v196 = (int64x2_t)v154;
        v197 = 0uLL;
        v198 = (const char *)&v462[v194];
        v199 = (int32x4_t *)((char *)v131 + v194 * 2);
        v200 = v195 - v152;
        v137 = 0uLL;
        v138 = 0uLL;
        do
        {
          v126.i64[0] = (unint64_t)vld4_s8(v198);
          v198 += 32;
          v201 = (int32x4_t)vqtbl1q_s8((int8x16_t)v126, v148);
          v202 = *v199;
          v128 = v199[1];
          v199 += 2;
          v126 = (int64x2_t)vmulq_s32(v128, (int32x4_t)vqtbl1q_s8((int8x16_t)v126, v149));
          v127 = (int64x2_t)vmulq_s32(v202, v201);
          v138 = (int64x2_t)vaddw_high_u32((uint64x2_t)v138, (uint32x4_t)v126);
          v197 = (int64x2_t)vaddw_high_u32((uint64x2_t)v197, (uint32x4_t)v127);
          v137 = (int64x2_t)vaddw_u32((uint64x2_t)v137, *(uint32x2_t *)v126.i8);
          v196 = (int64x2_t)vaddw_u32((uint64x2_t)v196, *(uint32x2_t *)v127.i8);
          v200 += 8;
        }
        while (v200);
        v136 = vaddq_s64(v197, v138);
        v135 = vaddvq_s64(vaddq_s64(vaddq_s64(v196, v137), v136));
        v154 = v135;
LABEL_161:
        v203 = v152 - v153;
        v204 = 2 * v153;
        v205 = &v131->i32[v153];
        v206 = &v462[v204];
        do
        {
          v208 = *(unsigned __int8 *)v206;
          v206 += 2;
          v207 = v208;
          v209 = *v205++;
          v154 += (v209 * v207);
          --v203;
        }
        while (v203);
        v155 = v154 >> 3;
        goto LABEL_164;
      }
LABEL_144:
      v153 = 0;
      v154 = 0;
      goto LABEL_161;
    }
    bzero(v131, 0x400uLL);
    if (!v129)
    {
      v152 = 1;
      goto LABEL_144;
    }
    v145 = v476;
    do
    {
      v146 = *(unsigned __int8 *)v145;
      v145 = (unsigned int *)((char *)v145 + 1);
      ++v131->i32[v146];
    }
    while (v145 < (unsigned int *)((char *)v476 + v129));
    v147 = 256;
    v149 = (int8x16_t)xmmword_18823D720;
    v148 = (int8x16_t)xmmword_18823D710;
    v151 = (int8x16_t)xmmword_18823D740;
    v150 = (int8x16_t)xmmword_18823D730;
    do
      --v147;
    while (!v131->i32[v147]);
    if ((v147 & 0x80000000) == 0)
      goto LABEL_143;
LABEL_147:
    v155 = 0;
LABEL_164:
    v210 = __n[1];
    if (!v470)
      v210 = 0;
    v144 = v155 + v210 + 3;
LABEL_167:
    v211 = ZSTD_estimateSubBlockSize_symbolType(v503[1], v490, 0x1Fu, v130, v487, 0, (uint64_t)OF_defaultNorm, 5, *(double *)&v135, *(double *)v136.i64, *(double *)v137.i64, *(double *)v138.i64, *(double *)v126.i64, *(double *)v127.i64, (int8x16_t)v128, 0x1Cu, v131->i8);
    v219 = ZSTD_estimateSubBlockSize_symbolType(v503[0], v494, 0x23u, v130, v485, (uint64_t)LL_bits, (uint64_t)LL_defaultNorm, 6, v212, v213, v214, v215, v216, v217, v218, 0x23u, v131->i8);
    v227 = ZSTD_estimateSubBlockSize_symbolType(v503[2], v492, 0x34u, v130, v483, (uint64_t)ML_bits, (uint64_t)ML_defaultNorm, 6, v220, v221, v222, v223, v224, v225, v226, 0x34u, v131->i8);
    v228 = v512[1];
    if (!v496)
      v228 = 0;
    v140 = v499;
    if (((v144 + v228 + v211 + v219 + v227 + 6 <= v472) & ~v499) == 0)
    {
      v497 = v139;
      if (v130 < 1)
      {
        v229 = 0;
        v233 = v469;
      }
      else
      {
        v229 = 0;
        v230 = v139 - *(_QWORD *)(v474 + 632);
        v231 = 8 * v130;
        v232 = (unsigned __int16 *)(v139 + 6);
        v233 = v469;
        do
        {
          v235 = *v232;
          v232 += 4;
          v234 = v235;
          v236 = v235 + 3;
          if (*(_DWORD *)(v474 + 708) == (v230 >> 3))
          {
            v237 = v234 + 65538;
            if (*(_DWORD *)(v474 + 704) == 2)
              v236 = v237;
          }
          v229 += v236;
          v230 += 8;
          v231 -= 8;
        }
        while (v231 > 0);
      }
      if (a6)
        v238 = v499;
      else
        v238 = 0;
      v239 = v233 + 3;
      v240 = v481 - (_QWORD)v233 - 3;
      if (v470)
        v241 = 200;
      else
        v241 = 0;
      if (v470)
        v242 = v501[2];
      else
        v242 = 3;
      if (1024 - v241 > v129)
        v243 = 3;
      else
        v243 = 4;
      if (0x4000 - v241 > v129)
        v244 = v243;
      else
        v244 = v243 + 1;
      v466 = v238;
      if (v129)
      {
        if (v501[2] == 1)
        {
          if (v129 <= 0x1F)
            v247 = 1;
          else
            v247 = 2;
          if (v129 > 0xFFF)
            ++v247;
          switch((_DWORD)v247)
          {
            case 3:
              *v239 = (16 * v129) | 0xD;
              break;
            case 2:
              *(_WORD *)v239 = (16 * v129) | 5;
              break;
            case 1:
              *(_BYTE *)v239 = (8 * v129) | 1;
              break;
          }
          v246 = 0;
          *((_BYTE *)v239 + v247) = *(_BYTE *)v476;
          v22 = (v247 + 1);
        }
        else
        {
          if (!v501[2])
            goto LABEL_196;
          v248 = 0;
          v249 = (_WORD *)((char *)v239 + v244);
          if (v470 && v501[2] == 2)
          {
            memcpy((char *)v239 + v244, &v501[3], __n[1]);
            v248 = __n[1];
            v249 = (_WORD *)((char *)v249 + __n[1]);
          }
          v461 = v248;
          v250 = v481 - (_QWORD)v249;
          if (v244 == 3)
            v251 = HUF_compress1X_usingCTable_internal((uint64_t)v249, v250, (uint64_t)v476, v129);
          else
            v251 = HUF_compress4X_usingCTable_internal(v249, v250, (uint64_t)v476, v129);
          if (v251 - 1 > 0xFFFFFFFFFFFFFF87)
            goto LABEL_122;
          v252 = v251 + v461;
          if (!v470 && v252 >= v129)
            goto LABEL_399;
          v253 = 3;
          if (v252 > 0x3FF)
            v253 = 4;
          if ((v252 & 0xFFFFFFFFFFFFC000) != 0)
            ++v253;
          if (v244 >= v253)
          {
            switch(v244)
            {
              case 5uLL:
                *(_DWORD *)(v469 + 3) = v242 + 16 * v129 + ((_DWORD)v252 << 22) + 12;
                v469[7] = v252 >> 10;
                break;
              case 4uLL:
                *v239 = v242 + 16 * v129 + ((_DWORD)v252 << 18) + 8;
                break;
              case 3uLL:
                v254 = 16 * v129 + v242 + ((_DWORD)v252 << 14);
                *(_WORD *)(v469 + 3) = v254;
                v469[5] = BYTE2(v254);
                break;
            }
            v22 = (char *)v249 + v251 - (char *)v239;
            v246 = 1;
            if (v22 > 0xFFFFFFFFFFFFFF88)
              return v22;
          }
          else
          {
LABEL_399:
          {
LABEL_196:
            if (v129 <= 0x1F)
              LODWORD(v245) = 1;
            else
              LODWORD(v245) = 2;
            if (v129 <= 0xFFF)
              v245 = v245;
            else
              v245 = (v245 + 1);
            v22 = v129 + v245;
            if (v129 + v245 > v240)
              return -70;
          }
            switch((_DWORD)v245)
            {
              case 3:
                *v239 = (16 * v129) | 0xC;
                break;
              case 2:
                *(_WORD *)v239 = (16 * v129) | 4;
                break;
              case 1:
                *(_BYTE *)v239 = 8 * v129;
                break;
            }
            memcpy((char *)v239 + v245, v476, v129);
            v246 = 0;
            if (v22 > 0xFFFFFFFFFFFFFF88)
              return v22;
          }
          if (!v22)
          {
LABEL_122:
            v134 = v465;
            v139 = v497;
            goto LABEL_123;
          }
        }
      }
      else
      {
        if (v481 - (_QWORD)v233 == 3)
          return -70;
        v246 = 0;
        *(_BYTE *)v239 = 0;
        v22 = 1;
      }
      v255 = (char *)v239 + v22;
      v256 = v481 - ((_QWORD)v239 + v22);
      v257 = *(_DWORD *)(v474 + 188) > 0x39u;
      if (v256 < 4)
        return -70;
      if ((unint64_t)v130 >= 0x7F)
      {
        if ((unint64_t)v130 >> 8 <= 0x7E)
        {
          *v255 = BYTE1(v130) ^ 0x80;
          v255[1] = v130;
          v258 = v255 + 2;
          goto LABEL_250;
        }
        *v255 = -1;
        *(_WORD *)(v255 + 1) = v130 - 32512;
        v258 = v255 + 3;
        v260 = v255 + 4;
        if (!v496)
          goto LABEL_256;
LABEL_251:
        *v258 = (LOBYTE(v503[0]) << 6) + 16 * LOBYTE(v503[1]) + 4 * LOBYTE(v503[2]);
        memcpy(v260, &v503[3], v512[1]);
        v261 = (unint64_t *)&v260[v512[1]];
        v262 = ZSTD_encodeSequences(v261, v481 - (_QWORD)v261, v483, (uint64_t)v492, v487, (uint64_t)v490, v485, (uint64_t)v494, v497, v130, v257);
        v22 = v262;
        if (v262 >= 0xFFFFFFFFFFFFFF89)
          return v22;
        v263 = (char *)v261 + v262;
        if (v513 && v513 + v262 < 4)
          goto LABEL_122;
      }
      else
      {
        *v255 = v130;
        v258 = v255 + 1;
        if (!v130)
        {
          v259 = 1;
          v22 = 1;
LABEL_262:
          v265 = &v255[v22];
          v22 = &v255[v22] - v469;
          if (v466)
            v266 = -19;
          else
            v266 = -20;
          v267 = v266 + 8 * v22;
          *(_WORD *)v469 = v267;
          v469[2] = BYTE2(v267);
          if (v22 > 0xFFFFFFFFFFFFFF88)
            return v22;
          if (!v22 || v22 >= v229 + v129)
            goto LABEL_122;
          v139 = v497 + 8 * v130;
          v476 = (unsigned int *)((char *)v476 + v129);
          v477 += v229 + v129;
          v494 = (unsigned int *)((char *)v494 + v130);
          v492 = (unsigned int *)((char *)v492 + v130);
          v490 = (unsigned int *)((char *)v490 + v130);
          v268 = v470;
          if (v246)
            v268 = 0;
          v470 = v268;
          v328 = v259 == 0;
          v269 = v496;
          if (v328)
            v269 = 0;
          v496 = v269;
          v469 = v265;
          v129 = 0;
          v130 = 0;
          v134 = v465;
LABEL_123:
          v132 = v464;
          v140 = v499;
          continue;
        }
LABEL_250:
        v260 = v258 + 1;
        if (v496)
          goto LABEL_251;
LABEL_256:
        *v258 = -4;
        v264 = ZSTD_encodeSequences((unint64_t *)v260, v481 - (_QWORD)v260, v483, (uint64_t)v492, v487, (uint64_t)v490, v485, (uint64_t)v494, v497, v130, v257);
        v22 = v264;
        if (v264 >= 0xFFFFFFFFFFFFFF89)
          return v22;
        v263 = &v260[v264];
      }
      if (v263 - v258 < 4)
        goto LABEL_122;
      v22 = v263 - v255;
      if ((unint64_t)(v263 - v255) > 0xFFFFFFFFFFFFFF88)
        return v22;
      if (!v22)
        goto LABEL_122;
      v259 = 0;
      goto LABEL_262;
    }
  }
  while (!v140);
  if (v470)
    memcpy(__dst, v459, 0x404uLL);
  if (v496
    && ((v503[0] - 1) < 2 || (v503[2] - 1) < 2 || (v503[1] - 3) > 0xFFFFFFFD))
  {
    return 0;
  }
  if (v477 >= v458)
    return (uint64_t)&v469[-a2];
  v270 = v458 - v477;
  v22 = v458 - v477 + 3;
  if (v22 > v481 - (uint64_t)v469)
    return -70;
  v271 = a6 + 8 * v270;
  *(_WORD *)v469 = v271;
  v469[2] = BYTE2(v271);
  memcpy(v469 + 3, v477, v270);
  if (v22 <= 0xFFFFFFFFFFFFFF88)
  {
    v469 += v22;
    if (v139 < v132)
    {
      v501[0] = *((_DWORD *)v459 + 1147);
      v500 = *(_QWORD *)(v459 + 4580);
      if (v134 < v139)
      {
        v272 = *(_DWORD *)(v474 + 708);
        v273 = v134 - *(_QWORD *)(v474 + 632);
        do
        {
          v278 = *(unsigned __int16 *)(v134 + 4);
          if (v272 == (v273 >> 3) && *(_DWORD *)(v474 + 704) == 1)
            v278 += 0xFFFF;
          v279 = *(_DWORD *)v134 - 1;
          if (v279 >= 3)
          {
            v274 = v500;
            v275 = *(_DWORD *)v134 - 3;
            v276 = (int *)&v500 + 1;
          }
          else
          {
            if (!v278)
              v279 = *(_DWORD *)v134;
            if (v279)
            {
              if (v279 == 3)
              {
                v274 = v500;
                v275 = v500 - 1;
              }
              else
              {
                v275 = v501[v279 - 2];
                v274 = v500;
              }
              if (v279 <= 1)
                v280 = 2;
              else
                v280 = 1;
              v276 = &v501[v280 - 2];
            }
            else
            {
              v275 = v500;
              v274 = HIDWORD(v500);
              v276 = v501;
            }
          }
          v277 = *v276;
          v500 = v275 | (unint64_t)(v274 << 32);
          v501[0] = v277;
          v273 += 8;
          v134 += 8;
        }
        while (v134 < v139);
      }
      *(_QWORD *)(__dst + 2290) = v500;
      *((_DWORD *)__dst + 1147) = v501[0];
    }
    return (uint64_t)&v469[-a2];
  }
  return v22;
}

unint64_t ZSTD_compressBound(unint64_t a1)
{
  unint64_t v1;

  v1 = (0x20000 - a1) >> 11;
  if (a1 >= 0x20000)
    v1 = 0;
  return a1 + (a1 >> 8) + v1;
}

uint64_t ZSTD_createCCtx()
{
  void *v0;
  uint64_t v1;

  v0 = malloc_type_malloc(0xD00uLL, 0x26AA08A0uLL);
  v1 = (uint64_t)v0;
  if (v0)
  {
    bzero(v0, 0xD00uLL);
    ZSTD_clearAllDicts(v1);
    *(_QWORD *)(v1 + 176) = 0;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_DWORD *)(v1 + 60) = 3;
    *(_DWORD *)(v1 + 48) = 1;
  }
  return v1;
}

char *ZSTD_createCCtx_advanced(__int128 *a1)
{
  uint64_t (*v1)(_QWORD, uint64_t);
  char *v2;
  __int128 v5;
  uint64_t v6;

  v1 = *(uint64_t (**)(_QWORD, uint64_t))a1;
  if ((*(_QWORD *)a1 == 0) != (*((_QWORD *)a1 + 1) == 0))
    return 0;
  if (v1)
  {
    v2 = (char *)v1(*((_QWORD *)a1 + 2), 3328);
    if (!v2)
      return v2;
  }
  else
  {
    v2 = (char *)malloc_type_malloc(0xD00uLL, 0x26AA08A0uLL);
    if (!v2)
      return v2;
  }
  v5 = *a1;
  v6 = *((_QWORD *)a1 + 2);
  bzero(v2, 0xD00uLL);
  *(_OWORD *)(v2 + 552) = v5;
  *((_QWORD *)v2 + 71) = v6;
  ZSTD_clearAllDicts((uint64_t)v2);
  *((_QWORD *)v2 + 22) = 0;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_DWORD *)v2 + 15) = 3;
  *((_DWORD *)v2 + 12) = 1;
  return v2;
}

char *ZSTD_initStaticCCtx(char *a1, uint64_t a2)
{
  char *result;
  unint64_t v5;
  char *v6;
  char *v7;

  result = 0;
  if ((unint64_t)a2 >= 0xD01 && (a1 & 7) == 0)
  {
    result = 0;
    if (a1)
    {
      v5 = a2 - 3328;
      if (a2 >= 3328)
      {
        v6 = &a1[a2];
        bzero(a1, 0xD00uLL);
        result = 0;
        *((_QWORD *)a1 + 46) = a1;
        *((_QWORD *)a1 + 47) = v6;
        *((_QWORD *)a1 + 48) = a1 + 3328;
        *((_QWORD *)a1 + 49) = a1 + 3328;
        *((_QWORD *)a1 + 50) = a1 + 3328;
        *((_QWORD *)a1 + 51) = v6;
        *((_QWORD *)a1 + 52) = 0;
        *((_QWORD *)a1 + 53) = 0x100000000;
        *((_QWORD *)a1 + 73) = a2;
        if (v5 >> 3 >= 0x7B7)
        {
          *((_QWORD *)a1 + 359) = a1 + 3328;
          v7 = a1 + 12512;
          *((_QWORD *)a1 + 48) = a1 + 12512;
          *((_QWORD *)a1 + 49) = a1 + 12512;
          *((_QWORD *)a1 + 50) = a1 + 12512;
          *((_QWORD *)a1 + 360) = a1 + 7920;
          if (a2 > 19127)
          {
            *((_QWORD *)a1 + 48) = a1 + 19128;
            *((_QWORD *)a1 + 49) = a1 + 19128;
            *((_QWORD *)a1 + 50) = a1 + 19128;
          }
          else
          {
            v7 = 0;
            a1[416] = 1;
          }
          *((_QWORD *)a1 + 390) = v7;
          *((_DWORD *)a1 + 2) = 0;
          return a1;
        }
      }
    }
  }
  return result;
}

unint64_t ZSTD_freeCCtx(unint64_t result)
{
  unint64_t v1;
  _OWORD *v2;
  _BOOL4 v3;
  double v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  void *v7;
  void (*v8)(_QWORD, unint64_t);

  if (result)
  {
    v1 = result;
    if (*(_QWORD *)(result + 584))
      return -64;
    v2 = (_OWORD *)(result + 368);
    v3 = *(_QWORD *)(result + 368) <= result && *(_QWORD *)(result + 376) >= result;
    v4 = ZSTD_clearAllDicts(result);
    ZSTDMT_freeCCtx(*(_QWORD *)(v1 + 3320), v4);
    *(_QWORD *)(v1 + 3320) = 0;
    v5 = *(void (**)(uint64_t))(v1 + 560);
    v6 = *(_QWORD *)(v1 + 568);
    v7 = *(void **)(v1 + 368);
    *(_OWORD *)(v1 + 400) = 0u;
    *(_OWORD *)(v1 + 416) = 0u;
    *v2 = 0u;
    *(_OWORD *)(v1 + 384) = 0u;
    if (v7)
    {
      if (!v5)
      {
        free(v7);
        if (!v3)
        {
LABEL_11:
          v8 = *(void (**)(_QWORD, unint64_t))(v1 + 560);
          if (v8)
            v8(*(_QWORD *)(v1 + 568), v1);
          else
            free((void *)v1);
        }
        return 0;
      }
      v5(v6);
    }
    if (!v3)
      goto LABEL_11;
    return 0;
  }
  return result;
}

char *ZSTD_sizeof_CCtx(char *result)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  if (result)
  {
    v1 = (char *)*((_QWORD *)result + 46);
    if (v1 == result)
      v3 = 0;
    else
      v3 = 3328;
    v4 = *((_QWORD *)result + 410);
    if (*((_QWORD *)result + 406))
      v5 = *((_QWORD *)result + 408);
    else
      v5 = 0;
    if (v4)
    {
      v6 = *(_QWORD *)(v4 + 32);
      v7 = *(_QWORD *)(v4 + 40);
      v8 = v6 == v4;
      v9 = 4952;
      if (v8)
        v9 = 0;
      v10 = v7 - v6 + v9;
    }
    else
    {
      v10 = 0;
    }
    v2 = *((_QWORD *)result + 47);
    return (char *)ZSTDMT_sizeof_CCtx(*((_QWORD **)result + 415)) + v2 - (_QWORD)v1 + v3 + v5 + v10;
  }
  return result;
}

char *ZSTD_sizeof_CStream(char *result)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  if (result)
  {
    v1 = (char *)*((_QWORD *)result + 46);
    if (v1 == result)
      v3 = 0;
    else
      v3 = 3328;
    v4 = *((_QWORD *)result + 410);
    if (*((_QWORD *)result + 406))
      v5 = *((_QWORD *)result + 408);
    else
      v5 = 0;
    if (v4)
    {
      v6 = *(_QWORD *)(v4 + 32);
      v7 = *(_QWORD *)(v4 + 40);
      v8 = v6 == v4;
      v9 = 4952;
      if (v8)
        v9 = 0;
      v10 = v7 - v6 + v9;
    }
    else
    {
      v10 = 0;
    }
    v2 = *((_QWORD *)result + 47);
    return (char *)ZSTDMT_sizeof_CCtx(*((_QWORD **)result + 415)) + v2 - (_QWORD)v1 + v3 + v5 + v10;
  }
  return result;
}

uint64_t ZSTD_getSeqStore(uint64_t a1)
{
  return a1 + 632;
}

double ZSTD_createCCtxParams()
{
  _OWORD *v0;
  double result;

  v0 = malloc_type_calloc(1uLL, 0xA8uLL, 0xEC864E14uLL);
  if (v0)
  {
    result = 0.0;
    v0[7] = 0u;
    v0[8] = 0u;
    v0[5] = 0u;
    v0[6] = 0u;
    v0[3] = 0u;
    v0[4] = 0u;
    v0[1] = 0u;
    v0[2] = 0u;
    *v0 = 0u;
    *((_DWORD *)v0 + 11) = 3;
    *((_DWORD *)v0 + 8) = 1;
    *((_QWORD *)v0 + 19) = 0;
    *((_QWORD *)v0 + 20) = 0;
    *((_QWORD *)v0 + 18) = 0;
  }
  return result;
}

uint64_t ZSTD_freeCCtxParams(_QWORD *a1)
{
  void (*v1)(_QWORD);

  if (a1)
  {
    v1 = (void (*)(_QWORD))a1[19];
    if (v1)
      v1(a1[20]);
    else
      free(a1);
  }
  return 0;
}

uint64_t ZSTD_CCtxParams_reset(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return -1;
  result = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 44) = 3;
  *(_DWORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t ZSTD_CCtxParams_init(uint64_t a1, int a2)
{
  uint64_t result;

  if (!a1)
    return -1;
  result = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t ZSTD_CCtxParams_init_advanced(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int32x4_t v3;
  unsigned int v4;

  if (!a1)
    return -1;
  v2 = -42;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_18823D760, (uint32x4_t)vaddq_s32(*(int32x4_t *)a2, (int32x4_t)xmmword_18823D750)))) & 1) != 0|| (*(_DWORD *)(a2 + 16) - 8) < 0xFFFFFFFB|| *(_DWORD *)(a2 + 20) > 0x20000u)
  {
    return v2;
  }
  if ((*(_DWORD *)(a2 + 24) - 1) > 8)
    return -42;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *(int32x4_t *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 12);
  *(int32x4_t *)(a1 + 4) = v3;
  v4 = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 40) = v4;
  return 0;
}

uint64_t ZSTD_checkCParams(_DWORD *a1)
{
  uint64_t result;
  unsigned int v3;

  if ((*a1 - 32) < 0xFFFFFFEA)
    return -42;
  if ((a1[1] - 31) < 0xFFFFFFE7)
    return -42;
  if ((a1[2] - 31) < 0xFFFFFFE7)
    return -42;
  if ((a1[3] - 31) < 0xFFFFFFE2)
    return -42;
  if ((a1[4] - 8) < 0xFFFFFFFB)
    return -42;
  v3 = a1[5];
  result = -42;
  if (v3 <= 0x20000 && (a1[6] - 10) >= 0xFFFFFFF7)
    return 0;
  return result;
}

uint64_t ZSTD_cParam_getBounds(int a1)
{
  int v1;
  uint64_t result;

  if (a1 > 399)
  {
    if (a1 <= 499)
    {
      switch(a1)
      {
        case 400:
          return 0;
        case 401:
          return 0;
        case 402:
          return 0;
        default:
          return -40;
      }
    }
    else
    {
      switch(a1)
      {
        case 1000:
        case 1005:
        case 1006:
        case 1007:
        case 1008:
        case 1009:
          goto LABEL_6;
        case 1001:
          result = 0;
          break;
        case 1002:
          result = 0;
          break;
        case 1003:
          result = 0;
          break;
        case 1004:
          result = 0;
          break;
        default:
          if (a1 != 500)
            return -40;
LABEL_6:
          result = 0;
          break;
      }
    }
  }
  else
  {
    v1 = a1 - 100;
    result = 0;
    switch(v1)
    {
      case 0:
        result = 0;
        break;
      case 1:
        return result;
      case 2:
      case 3:
      case 61:
        result = 0;
        break;
      case 4:
        result = 0;
        break;
      case 5:
        result = 0;
        break;
      case 6:
        result = 0;
        break;
      case 7:
        result = 0;
        break;
      case 60:
      case 100:
      case 101:
      case 102:
        goto LABEL_6;
      case 62:
        result = 0;
        break;
      case 63:
        result = 0;
        break;
      case 64:
        result = 0;
        break;
      default:
        return -40;
    }
  }
  return result;
}

uint64_t ZSTD_minCLevel()
{
  return 4294836224;
}

uint64_t ZSTD_maxCLevel()
{
  return 22;
}

uint64_t ZSTD_CCtx_setParameter(uint64_t a1, int a2, unsigned int a3)
{
  if (*(_DWORD *)(a1 + 3208))
  {
    if ((a2 - 102) >= 6 && a2 != 100)
      return -60;
    *(_DWORD *)(a1 + 4) = 1;
  }
  if (a2 <= 399)
  {
    if ((a2 - 100) >= 8
      && ((a2 - 160) > 0x2A || ((1 << (a2 + 96)) & 0x7000000001FLL) == 0)
      && a2 != 10)
    {
      return -40;
    }
    return ZSTD_CCtxParams_setParameter(a1 + 16, a2, a3);
  }
  if (a2 > 999)
  {
    if ((a2 - 1000) < 0xA)
      return ZSTD_CCtxParams_setParameter(a1 + 16, a2, a3);
    return -40;
  }
  if ((a2 - 401) < 2)
    return ZSTD_CCtxParams_setParameter(a1 + 16, a2, a3);
  if (a2 != 400)
  {
    if (a2 == 500)
      return ZSTD_CCtxParams_setParameter(a1 + 16, a2, a3);
    return -40;
  }
  if (!a3 || !*(_QWORD *)(a1 + 584))
    return ZSTD_CCtxParams_setParameter(a1 + 16, a2, a3);
  return -40;
}

uint64_t ZSTD_CCtxParams_setParameter(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t result;
  int v5;
  BOOL v6;
  int v8;
  int v9;
  BOOL v10;
  int v12;
  BOOL v13;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;

  result = -40;
  if (a2 > 399)
  {
    if (a2 <= 499)
    {
      switch(a2)
      {
        case 400:
          v12 = a3 & ~((int)a3 >> 31);
          v13 = v12 > 0xC8;
          if (v12 >= 200)
            v12 = 200;
          if (v13 || (a3 & 0x80000000) != 0)
            result = v12;
          else
            result = a3;
          *(_DWORD *)(a1 + 76) = result;
          break;
        case 401:
          if ((int)a3 >= 0x100000 || a3 == 0)
            v16 = a3;
          else
            v16 = 0x100000;
          if (v16 >= 0x40000000)
            v17 = 0x40000000;
          else
            v17 = v16;
          if (v16 <= 0x40000000)
            result = v16;
          else
            result = v17;
          *(_QWORD *)(a1 + 80) = result;
          break;
        case 402:
          v9 = a3 & ~((int)a3 >> 31);
          v10 = v9 > 9;
          if (v9 >= 9)
            v9 = 9;
          if (v10 || (a3 & 0x80000000) != 0)
            result = v9;
          else
            result = a3;
          *(_DWORD *)(a1 + 88) = result;
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case 1000:
          result = a3 != 0;
          *(_DWORD *)(a1 + 48) = result;
          return result;
        case 1001:
          if (a3 > 3)
            goto LABEL_119;
          *(_DWORD *)(a1 + 68) = a3;
          return a3;
        case 1002:
          if (a3 > 2)
            goto LABEL_119;
          *(_DWORD *)(a1 + 72) = a3;
          return a3;
        case 1003:
          if (a3 && a3 - 131073 < 0xFFFE003F)
            goto LABEL_119;
          result = a3;
          *(_QWORD *)(a1 + 56) = a3;
          return result;
        case 1004:
          if ((a3 & 0x80000000) != 0)
            goto LABEL_119;
          *(_DWORD *)(a1 + 64) = a3;
          return a3;
        case 1005:
          result = a3 != 0;
          *(_DWORD *)(a1 + 120) = result;
          return result;
        case 1006:
          if (a3 > 1)
            goto LABEL_119;
          *(_DWORD *)(a1 + 124) = a3;
          return a3;
        case 1007:
          if (a3 > 1)
            goto LABEL_119;
          *(_DWORD *)(a1 + 128) = a3;
          return a3;
        case 1008:
          if (a3 > 1)
            goto LABEL_119;
          *(_DWORD *)(a1 + 132) = a3;
          return a3;
        case 1009:
          if (a3 <= 1)
          {
            *(_DWORD *)(a1 + 136) = a3;
            return a3;
          }
LABEL_119:
          result = -42;
          break;
        default:
          if (a2 == 500)
          {
            v18 = a3 & ~((int)a3 >> 31);
            v19 = v18 > 9;
            if (v18 >= 9)
              v18 = 9;
            if (v19 || (a3 & 0x80000000) != 0)
              result = v18;
            else
              result = a3;
            *(_DWORD *)(a1 + 92) = result;
          }
          return result;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 100:
        if ((int)a3 <= -131072)
          v5 = -131072;
        else
          v5 = a3;
        v6 = v5 <= 22;
        if (v5 >= 22)
          v5 = 22;
        if (!v6 || (int)a3 < -131072)
          v8 = v5;
        else
          v8 = a3;
        if (!v8)
          v8 = 3;
        *(_DWORD *)(a1 + 44) = v8;
        return v8 & ~(v8 >> 31);
      case 101:
        if (a3 && a3 - 32 < 0xFFFFFFEA)
          goto LABEL_119;
        *(_DWORD *)(a1 + 4) = a3;
        return a3;
      case 102:
        if (a3 && a3 - 31 < 0xFFFFFFE7)
          goto LABEL_119;
        *(_DWORD *)(a1 + 12) = a3;
        return a3;
      case 103:
        if (a3 && a3 - 31 < 0xFFFFFFE7)
          goto LABEL_119;
        *(_DWORD *)(a1 + 8) = a3;
        return a3;
      case 104:
        if (a3 > 0x1E)
          goto LABEL_119;
        *(_DWORD *)(a1 + 16) = a3;
        return a3;
      case 105:
        if (a3 - 3 >= 5 && a3)
          goto LABEL_119;
        *(_DWORD *)(a1 + 20) = a3;
        return a3;
      case 106:
        if (a3 > 0x20000)
          goto LABEL_119;
        *(_DWORD *)(a1 + 24) = a3;
        return a3;
      case 107:
        if (a3 > 9)
          goto LABEL_119;
        *(_DWORD *)(a1 + 28) = a3;
        return a3;
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
        return result;
      case 160:
        result = a3 != 0;
        *(_DWORD *)(a1 + 96) = result;
        return result;
      case 161:
        if (a3 && a3 - 31 < 0xFFFFFFE7)
          goto LABEL_119;
        *(_DWORD *)(a1 + 100) = a3;
        return a3;
      case 162:
        if (a3 && a3 - 4097 < 0xFFFFF003)
          goto LABEL_119;
        *(_DWORD *)(a1 + 108) = a3;
        return a3;
      case 163:
        if (a3 > 8)
          goto LABEL_119;
        *(_DWORD *)(a1 + 104) = a3;
        return a3;
      case 164:
        if ((int)a3 > 25)
          goto LABEL_119;
        *(_DWORD *)(a1 + 112) = a3;
        return a3;
      case 200:
        result = a3 != 0;
        *(_DWORD *)(a1 + 32) = result;
        return result;
      case 201:
        result = a3 != 0;
        *(_DWORD *)(a1 + 36) = result;
        return result;
      case 202:
        result = a3 != 0;
        *(_DWORD *)(a1 + 40) = a3 == 0;
        return result;
      default:
        if (a2 != 10)
          return result;
        if (a3 > 1)
          goto LABEL_119;
        *(_DWORD *)a1 = a3;
        break;
    }
    return a3;
  }
  return result;
}

uint64_t ZSTD_CCtx_getParameter(uint64_t a1, int a2, _DWORD *a3)
{
  return ZSTD_CCtxParams_getParameter((int *)(a1 + 16), a2, a3);
}

uint64_t ZSTD_CCtxParams_getParameter(int *a1, int a2, _DWORD *a3)
{
  uint64_t v3;
  int v4;

  v3 = -40;
  if (a2 <= 399)
  {
    switch(a2)
    {
      case 100:
        v4 = a1[11];
        goto LABEL_41;
      case 101:
        v4 = a1[1];
        goto LABEL_41;
      case 102:
        v4 = a1[3];
        goto LABEL_41;
      case 103:
        v4 = a1[2];
        goto LABEL_41;
      case 104:
        v4 = a1[4];
        goto LABEL_41;
      case 105:
        v4 = a1[5];
        goto LABEL_41;
      case 106:
        v4 = a1[6];
        goto LABEL_41;
      case 107:
        v4 = a1[7];
        goto LABEL_41;
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
        return v3;
      case 160:
        v4 = a1[24];
        goto LABEL_41;
      case 161:
        v4 = a1[25];
        goto LABEL_41;
      case 162:
        v4 = a1[27];
        goto LABEL_41;
      case 163:
        v4 = a1[26];
        goto LABEL_41;
      case 164:
        v4 = a1[28];
        goto LABEL_41;
      case 200:
        v4 = a1[8];
        goto LABEL_41;
      case 201:
        v4 = a1[9];
        goto LABEL_41;
      case 202:
        v4 = a1[10] == 0;
        goto LABEL_41;
      default:
        if (a2 != 10)
          return v3;
        v4 = *a1;
        break;
    }
    goto LABEL_41;
  }
  if (a2 > 499)
  {
    switch(a2)
    {
      case 1000:
        v4 = a1[12];
        goto LABEL_41;
      case 1001:
        v4 = a1[17];
        goto LABEL_41;
      case 1002:
        v4 = a1[18];
        goto LABEL_41;
      case 1003:
        v4 = a1[14];
        goto LABEL_41;
      case 1004:
        v4 = a1[16];
        goto LABEL_41;
      case 1005:
        v4 = a1[30];
        goto LABEL_41;
      case 1006:
        v4 = a1[31];
        goto LABEL_41;
      case 1007:
        v4 = a1[32];
        goto LABEL_41;
      case 1008:
        v4 = a1[33];
        goto LABEL_41;
      case 1009:
        v4 = a1[34];
        goto LABEL_41;
      default:
        if (a2 != 500)
          return v3;
        v4 = a1[23];
        break;
    }
    goto LABEL_41;
  }
  switch(a2)
  {
    case 400:
      v4 = a1[19];
      goto LABEL_41;
    case 401:
      v4 = a1[20];
      goto LABEL_41;
    case 402:
      v4 = a1[22];
LABEL_41:
      v3 = 0;
      *a3 = v4;
      break;
  }
  return v3;
}

__n128 ZSTD_CCtx_setParametersUsingCCtxParams(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  if (!*(_DWORD *)(a1 + 3208) && !*(_QWORD *)(a1 + 3288))
  {
    v2 = *a2;
    v3 = a2[2];
    *(_OWORD *)(a1 + 32) = a2[1];
    *(_OWORD *)(a1 + 48) = v3;
    *(_OWORD *)(a1 + 16) = v2;
    v4 = a2[3];
    v5 = a2[4];
    v6 = a2[6];
    *(_OWORD *)(a1 + 96) = a2[5];
    *(_OWORD *)(a1 + 112) = v6;
    *(_OWORD *)(a1 + 64) = v4;
    *(_OWORD *)(a1 + 80) = v5;
    result = (__n128)a2[7];
    v8 = a2[8];
    v9 = a2[9];
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 20);
    *(_OWORD *)(a1 + 144) = v8;
    *(_OWORD *)(a1 + 160) = v9;
    *(__n128 *)(a1 + 128) = result;
  }
  return result;
}

uint64_t ZSTD_CCtx_setPledgedSrcSize(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 3208))
    return -60;
  result = 0;
  *(_QWORD *)(a1 + 440) = a2 + 1;
  return result;
}

uint64_t ZSTD_CCtx_loadDictionary_advanced(uint64_t a1, void *a2, size_t a3, int a4, int a5)
{
  uint64_t result;
  double v11;
  void *v12;
  uint64_t (*v13)(_QWORD, size_t, double);
  void *v14;

  if (*(_DWORD *)(a1 + 3208))
    return -60;
  v11 = ZSTD_clearAllDicts(a1);
  result = 0;
  if (a2 && a3)
  {
    if (a4 == 1)
    {
      v12 = a2;
    }
    else
    {
      if (*(_QWORD *)(a1 + 584))
        return -64;
      v13 = *(uint64_t (**)(_QWORD, size_t, double))(a1 + 552);
      v14 = v13 ? (void *)v13(*(_QWORD *)(a1 + 568), a3, v11) : malloc_type_malloc(a3, 0x26AA08A0uLL);
      v12 = v14;
      if (!v14)
        return -64;
      memcpy(v14, a2, a3);
      *(_QWORD *)(a1 + 3248) = v12;
    }
    result = 0;
    *(_QWORD *)(a1 + 3256) = v12;
    *(_QWORD *)(a1 + 3264) = a3;
    *(_DWORD *)(a1 + 3272) = a5;
  }
  return result;
}

double ZSTD_clearAllDicts(uint64_t a1)
{
  void (*v2)(_QWORD);
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  _OWORD *v7;
  _BOOL4 v8;
  void (*v9)(uint64_t);
  double result;

  if (*(_QWORD *)(a1 + 3248))
  {
    v2 = *(void (**)(_QWORD))(a1 + 560);
    if (!v2)
    {
      free(*(void **)(a1 + 3248));
      v3 = a1 + 3248;
      v4 = *(_QWORD *)(a1 + 3280);
      if (!v4)
        goto LABEL_18;
      goto LABEL_5;
    }
    v2(*(_QWORD *)(a1 + 568));
  }
  v3 = a1 + 3248;
  v4 = *(_QWORD *)(a1 + 3280);
  if (!v4)
    goto LABEL_18;
LABEL_5:
  v5 = *(_QWORD *)(v4 + 4936);
  v7 = (_OWORD *)(v4 + 32);
  v6 = *(void **)(v4 + 32);
  if ((unint64_t)v6 <= v4)
  {
    v8 = *(_QWORD *)(v4 + 40) >= v4;
    v9 = *(void (**)(uint64_t))(v4 + 4928);
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *v7 = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    if (!v6)
    {
LABEL_7:
      if (!v8)
        goto LABEL_12;
      goto LABEL_18;
    }
  }
  else
  {
    v8 = 0;
    v9 = *(void (**)(uint64_t))(v4 + 4928);
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *v7 = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    if (!v6)
      goto LABEL_7;
  }
  if (!v9)
  {
    free(v6);
    if (v8)
      goto LABEL_18;
    goto LABEL_17;
  }
  v9(v5);
  if (!v8)
  {
LABEL_12:
    if (v9)
    {
      ((void (*)(uint64_t, unint64_t))v9)(v5, v4);
      goto LABEL_18;
    }
LABEL_17:
    free((void *)v4);
  }
LABEL_18:
  *(_QWORD *)(v3 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  return result;
}

uint64_t ZSTD_CCtx_loadDictionary_byReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 3208))
    return -60;
  ZSTD_clearAllDicts(a1);
  result = 0;
  if (a2)
  {
    if (a3)
    {
      result = 0;
      *(_QWORD *)(a1 + 3256) = a2;
      *(_QWORD *)(a1 + 3264) = a3;
      *(_DWORD *)(a1 + 3272) = 0;
    }
  }
  return result;
}

uint64_t ZSTD_CCtx_loadDictionary(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t result;
  double v7;
  uint64_t (*v8)(_QWORD, size_t, double);
  void *v9;

  if (*(_DWORD *)(a1 + 3208))
    return -60;
  v7 = ZSTD_clearAllDicts(a1);
  result = 0;
  if (a2 && a3)
  {
    if (*(_QWORD *)(a1 + 584))
      return -64;
    v8 = *(uint64_t (**)(_QWORD, size_t, double))(a1 + 552);
    if (v8)
    {
      v9 = (void *)v8(*(_QWORD *)(a1 + 568), a3, v7);
      if (v9)
      {
LABEL_10:
        memcpy(v9, a2, a3);
        result = 0;
        *(_QWORD *)(a1 + 3248) = v9;
        *(_QWORD *)(a1 + 3256) = v9;
        *(_QWORD *)(a1 + 3264) = a3;
        *(_DWORD *)(a1 + 3272) = 0;
        return result;
      }
    }
    else
    {
      v9 = malloc_type_malloc(a3, 0x26AA08A0uLL);
      if (v9)
        goto LABEL_10;
    }
    return -64;
  }
  return result;
}

uint64_t ZSTD_CCtx_refCDict(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 3208))
    return -60;
  ZSTD_clearAllDicts(a1);
  result = 0;
  *(_QWORD *)(a1 + 3288) = a2;
  return result;
}

uint64_t ZSTD_CCtx_refThreadPool(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 3208))
    return -60;
  result = 0;
  *(_QWORD *)(a1 + 576) = a2;
  return result;
}

uint64_t ZSTD_CCtx_refPrefix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 3208))
    return -60;
  ZSTD_clearAllDicts(a1);
  result = 0;
  if (a2)
  {
    if (a3)
    {
      result = 0;
      *(_QWORD *)(a1 + 3296) = a2;
      *(_QWORD *)(a1 + 3304) = a3;
      *(_DWORD *)(a1 + 3312) = 1;
    }
  }
  return result;
}

uint64_t ZSTD_CCtx_refPrefix_advanced(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 3208))
    return -60;
  ZSTD_clearAllDicts(a1);
  result = 0;
  if (a2)
  {
    if (a3)
    {
      result = 0;
      *(_QWORD *)(a1 + 3296) = a2;
      *(_QWORD *)(a1 + 3304) = a3;
      *(_DWORD *)(a1 + 3312) = a4;
    }
  }
  return result;
}

double ZSTD_CCtx_reset(uint64_t a1, int a2)
{
  double result;

  if ((a2 & 0xFFFFFFFD) == 1)
  {
    *(_DWORD *)(a1 + 3208) = 0;
    *(_QWORD *)(a1 + 440) = 0;
    if ((a2 & 0xFFFFFFFE) != 2)
      return result;
  }
  else if ((a2 & 0xFFFFFFFE) != 2)
  {
    return result;
  }
  if (!*(_DWORD *)(a1 + 3208))
  {
    ZSTD_clearAllDicts(a1);
    result = 0.0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_DWORD *)(a1 + 60) = 3;
    *(_DWORD *)(a1 + 48) = 1;
    *(_QWORD *)(a1 + 176) = 0;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  return result;
}

uint64_t ZSTD_cycleLog(int a1, unsigned int a2)
{
  return a1 - (a2 > 5);
}

unsigned int *ZSTD_adjustCParams@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;

  v4 = *result;
  v5 = result[1];
  if ((int)*result >= 10)
  {
    if (v4 >= 0x20)
      v4 = 31;
  }
  else
  {
    v4 = 10;
  }
  v6 = result[2];
  if (v5 >= 6)
  {
    if (v5 >= 0x1F)
      v5 = 30;
  }
  else
  {
    v5 = 6;
  }
  if (v6 >= 6)
  {
    if (v6 >= 0x1F)
      v6 = 30;
  }
  else
  {
    v6 = 6;
  }
  v7 = result[4];
  v8 = result[5];
  v9 = result[3];
  if (v9 < 1)
  {
    v9 = 1;
    if (v7 < 3)
    {
LABEL_17:
      v7 = 3;
      goto LABEL_21;
    }
  }
  else
  {
    if (v9 >= 0x1F)
      v9 = 30;
    if (v7 < 3)
      goto LABEL_17;
  }
  if (v7 >= 8)
    v7 = 7;
LABEL_21:
  v10 = result[6];
  if ((v8 & 0x80000000) == 0)
  {
    if (v8 > 0x20000)
      v8 = 0x20000;
    if (v10 >= 1)
      goto LABEL_25;
LABEL_28:
    v10 = 1;
    goto LABEL_29;
  }
  v8 = 0;
  if (v10 < 1)
    goto LABEL_28;
LABEL_25:
  if (v10 >= 0xA)
    v10 = 9;
LABEL_29:
  *result = v4;
  result[1] = v5;
  result[2] = v6;
  result[3] = v9;
  result[4] = v7;
  result[5] = v8;
  result[6] = v10;
  if (a2)
    v11 = a2;
  else
    v11 = -1;
  if ((v11 | a3) >> 30)
  {
    if (v11 == -1)
      goto LABEL_53;
  }
  else
  {
    v12 = __clz(v11 + a3 - 1) ^ 0x1F;
    if ((v11 + a3) >= 0x40)
      v13 = v12 + 1;
    else
      v13 = 6;
    if (v4 >= v13)
      v4 = v13;
  }
  v14 = v4;
  if (a3)
  {
    v15 = 1 << v4;
    v14 = v4;
    if (1 << v4 < v11 + a3)
    {
      if ((v15 + a3) >> 31)
        v14 = 31;
      else
        v14 = (__clz(v15 + a3 - 1) ^ 0x1F) + 1;
    }
  }
  if (v10 <= 5)
    v16 = v14;
  else
    v16 = v14 + 1;
  if (v6 >= v14 + 1)
    v6 = v14 + 1;
  if (v5 - (v10 > 5) > v14)
    v5 = v16;
  if (v4 <= 0xA)
    v4 = 10;
LABEL_53:
  *(_DWORD *)a4 = v4;
  *(_DWORD *)(a4 + 4) = v5;
  *(_DWORD *)(a4 + 8) = v6;
  *(_QWORD *)(a4 + 12) = *(_QWORD *)(result + 3);
  *(_DWORD *)(a4 + 20) = result[5];
  *(_DWORD *)(a4 + 24) = v10;
  return result;
}

int8x8_t ZSTD_getCParamsFromCCtxParams@<D0>(int8x8_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  int v10;
  unsigned int v11;
  unsigned int v12;
  __int32 v13;
  int8x8_t v14;
  __int32 v15;
  int8x8_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int8x8_t v32;
  int8x8_t result;
  _DWORD v34[3];
  int8x8_t v35;
  __int32 v36;
  unsigned int v37;

  v7 = a2;
  if (a2 == -1)
  {
    if (a1[8].i32[0] <= 0)
      v7 = -1;
    else
      v7 = a1[8].u32[0];
  }
  ZSTD_getCParams_internal((uint64_t)v34, a1[5].i32[1], v7, a3, a4);
  v10 = v34[0];
  if (a1[12].i32[0])
    v10 = 27;
  v11 = a1->u32[1];
  if (!v11)
    v11 = v10;
  v12 = a1[1].u32[1];
  if (!v12)
    v12 = v34[2];
  v13 = v36;
  v14 = v35;
  if (a1[1].i32[0])
    v15 = a1[1].i32[0];
  else
    v15 = v34[1];
  v16 = a1[2];
  v17 = a1[3].u32[1];
  if (!v17)
    v17 = v37;
  v18 = v7 != -1 || a3 == 0;
  v19 = 513;
  if (v18)
    v19 = v7;
  if (a4 == 2)
    v20 = v19;
  else
    v20 = v7;
  if (a4 == 1)
    v21 = 0;
  else
    v21 = a3;
  if (a4 == 1)
    v20 = v7;
  if ((v20 | v21) >> 30)
  {
    if (v20 == -1)
      goto LABEL_53;
  }
  else
  {
    v22 = __clz(v20 + v21 - 1) ^ 0x1F;
    if ((v20 + v21) >= 0x40)
      v23 = v22 + 1;
    else
      v23 = 6;
    if (v11 >= v23)
      v11 = v23;
  }
  v24 = (1 << v11) + v21;
  v25 = v20 + v21;
  v26 = v24 >> 31;
  v27 = __clz(v24 - 1) ^ 0x1F;
  if (v26)
    v28 = 31;
  else
    v28 = v27 + 1;
  if (1 << v11 < v25)
    v29 = v28;
  else
    v29 = v11;
  if (v21)
    v30 = v29;
  else
    v30 = v11;
  if (v12 >= v30 + 1)
    v12 = v30 + 1;
  if (v17 <= 5)
    v31 = v30;
  else
    v31 = v30 + 1;
  if (v15 - (v17 > 5) > v30)
    v15 = v31;
LABEL_53:
  if (a1[3].i32[0])
    v13 = a1[3].i32[0];
  v32 = (int8x8_t)vceqz_s32((int32x2_t)v16);
  if (v11 <= 0xA)
    v11 = 10;
  *(_DWORD *)a5 = v11;
  *(_DWORD *)(a5 + 4) = v15;
  *(_DWORD *)(a5 + 8) = v12;
  result = vbsl_s8(v32, v14, v16);
  *(int8x8_t *)(a5 + 12) = result;
  *(_DWORD *)(a5 + 20) = v13;
  *(_DWORD *)(a5 + 24) = v17;
  return result;
}

uint64_t ZSTD_getCParams_internal(uint64_t result, int a2, uint64_t a3, unint64_t a4, int a5)
{
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  char *v13;
  unsigned int v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;

  if (a5 == 1)
    v5 = 0;
  else
    v5 = a4;
  v6 = -1;
  if (a3 != -1 || v5)
  {
    if (v5)
      v7 = a3 == -1;
    else
      v7 = 0;
    v8 = 500;
    if (!v7)
      v8 = 0;
    v6 = v5 + a3 + v8;
  }
  v9 = v6 < 0x40001;
  if (v6 <= 0x20000)
    ++v9;
  if (v6 > 0x4000)
    v10 = v9;
  else
    v10 = v9 + 1;
  v11 = 3;
  if (a2 >= 0x16)
    v12 = 22;
  else
    v12 = a2;
  if (a2 < 0)
    v12 = 0;
  if (a2)
    v11 = v12;
  v13 = (char *)&ZSTD_defaultCParameters + 644 * v10 + 28 * v11;
  v14 = *((_DWORD *)v13 + 6);
  if (a5 == 1)
  {
    a4 = 0;
  }
  else if (a5 == 2 && a4 && a3 == -1)
  {
    a3 = 513;
  }
  v17 = *(_DWORD *)v13;
  v16 = *((_DWORD *)v13 + 1);
  v18 = *((_DWORD *)v13 + 2);
  v19 = *(_QWORD *)(v13 + 12);
  v20 = *((_DWORD *)v13 + 5);
  if ((a3 | a4) >> 30)
  {
    if (a3 == -1)
      goto LABEL_55;
  }
  else
  {
    v21 = __clz(a3 + a4 - 1) ^ 0x1F;
    if ((a3 + a4) >= 0x40)
      v22 = v21 + 1;
    else
      v22 = 6;
    if (v17 >= v22)
      v17 = v22;
  }
  v23 = (1 << v17) + a4;
  v24 = a3 + a4;
  v25 = v23 >> 31;
  v26 = __clz(v23 - 1) ^ 0x1F;
  if (v25)
    v27 = 31;
  else
    v27 = v26 + 1;
  if (1 << v17 < v24)
    v28 = v27;
  else
    v28 = v17;
  if (!a4)
    v28 = v17;
  if (v18 >= v28 + 1)
    v18 = v28 + 1;
  if (v14 <= 5)
    v29 = v28;
  else
    v29 = v28 + 1;
  if (v16 - (v14 > 5) > v28)
    v16 = v29;
LABEL_55:
  if (a2 <= 0xFFFE0000)
    v30 = -131072;
  else
    v30 = a2;
  if (a2 < 0)
    v20 = -v30;
  if (v17 <= 0xA)
    v17 = 10;
  *(_DWORD *)result = v17;
  *(_DWORD *)(result + 4) = v16;
  *(_DWORD *)(result + 8) = v18;
  *(_QWORD *)(result + 12) = v19;
  *(_DWORD *)(result + 20) = v20;
  *(_DWORD *)(result + 24) = v14;
  return result;
}

uint64_t ZSTD_estimateCCtxSize_usingCCtxParams(int8x8_t *a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int32 v8;
  unsigned __int32 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v13 = 0;
  v14 = 0;
  v16 = 0;
  v15 = 0;
  ZSTD_getCParamsFromCCtxParams(a1, -1, 0, 0, (uint64_t)&v13);
  if (a1[9].i32[1] > 0)
    return -1;
  v3 = 1 << v13;
  if ((unint64_t)(1 << v13) >= 0x20000)
    v3 = 0x20000;
  if (v16 == 1)
    v4 = 0;
  else
    v4 = 4 << SBYTE4(v13);
  if ((_DWORD)v15 == 3)
  {
    v5 = 149000;
    if (v16 <= 6)
      v5 = 0;
    v6 = (4 << v14) + v4;
    if (v13 > 0x11)
    {
      v7 = 0x80000;
      if (!a1[12].i32[0])
        goto LABEL_23;
LABEL_18:
      v8 = a1[13].u32[0];
      v9 = a1[12].u32[1];
      if (v8 >= v9)
        LOBYTE(v8) = a1[12].i32[1];
      v10 = (1 << (v9 - v8)) + (8 << v9);
      v11 = 12 * (v3 / a1[13].i32[1]);
      goto LABEL_24;
    }
    if ((_DWORD)v13)
    {
      v7 = 4 << v13;
      if (a1[12].i32[0])
        goto LABEL_18;
      goto LABEL_23;
    }
  }
  else
  {
    v5 = 149000;
    if (v16 <= 6)
      v5 = 0;
    v6 = (4 << v14) + v4;
  }
  v7 = 0;
  if (a1[12].i32[0])
    goto LABEL_18;
LABEL_23:
  v10 = 0;
  v11 = 0;
LABEL_24:
  if ((_DWORD)v15 == 3)
    v12 = 3;
  else
    v12 = 4;
  return v3 + v6 + v5 + v7 + v10 + v11 + 11 * (v3 / v12) + 19160;
}

uint64_t ZSTD_estimateCCtxSize_usingCParams(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  _OWORD v6[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = *(_DWORD *)a1;
  memset(v6, 0, sizeof(v6));
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  HIDWORD(v7) = 3;
  DWORD1(v6[0]) = v1;
  v3 = *(_DWORD *)(a1 + 20);
  v2 = *(_DWORD *)(a1 + 24);
  *(_OWORD *)((char *)v6 + 8) = *(_OWORD *)(a1 + 4);
  *((_QWORD *)&v6[1] + 1) = __PAIR64__(v2, v3);
  LODWORD(v7) = 1;
  if (v2 >= 7 && v1 >= 0x1B)
  {
    LODWORD(v11) = 1;
    DWORD1(v11) = v1 - 7;
    if (v1 >= v1 - 7)
      v4 = 7;
    else
      v4 = 0;
    *(_QWORD *)&v12 = __PAIR64__(v1, v4);
    *((_QWORD *)&v11 + 1) = 0x4000000003;
  }
  return ZSTD_estimateCCtxSize_usingCCtxParams((int8x8_t *)v6);
}

unint64_t ZSTD_estimateCCtxSize(int a1)
{
  unint64_t v1;
  int v2;
  int v3;
  unint64_t v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v1 = 0;
  if (a1 >= 1)
    v2 = 1;
  else
    v2 = a1;
  v3 = a1 + 1;
  do
  {
    if (v2 >= 0x16)
      v5 = 22;
    else
      v5 = v2;
    if (v2 < 0)
      v5 = 0;
    if (!v2)
      v5 = 3;
    v6 = (char *)&ZSTD_defaultCParameters + 28 * v5;
    v7 = *(_DWORD *)v6;
    v8 = *(_QWORD *)(v6 + 12);
    v9 = *((_DWORD *)v6 + 5);
    v10 = *((_DWORD *)v6 + 6);
    if (v2 <= 0xFFFE0000)
      v11 = -131072;
    else
      v11 = v2;
    if (v2 < 0)
      v9 = -v11;
    v14 = 0u;
    v15 = 0u;
    if (v7 <= 0xA)
      v7 = 10;
    v24 = 0;
    v22 = 0uLL;
    v23 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    HIDWORD(v16) = 3;
    LODWORD(v16) = 1;
    DWORD1(v14) = v7;
    *((_QWORD *)&v14 + 1) = *(_QWORD *)(v6 + 4);
    *(_QWORD *)&v15 = v8;
    *((_QWORD *)&v15 + 1) = __PAIR64__(v10, v9);
    if (v10 >= 7 && v7 >= 0x1B)
    {
      LODWORD(v20) = 1;
      DWORD1(v20) = v7 - 7;
      if (v7 >= v7 - 7)
        v12 = 7;
      else
        v12 = 0;
      *(_QWORD *)&v21 = __PAIR64__(v7, v12);
      *((_QWORD *)&v20 + 1) = 0x4000000003;
    }
    v4 = ZSTD_estimateCCtxSize_usingCCtxParams((int8x8_t *)&v14);
    if (v4 > v1)
      v1 = v4;
    ++v2;
  }
  while (v3 != v2);
  return v1;
}

uint64_t ZSTD_estimateCStreamSize_usingCCtxParams(int8x8_t *a1)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int32 v12;
  uint64_t v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;

  if (a1[9].i32[1] > 0)
    return -1;
  v20 = 0;
  v21 = 0;
  v23 = 0;
  v22 = 0;
  ZSTD_getCParamsFromCCtxParams(a1, -1, 0, 0, (uint64_t)&v20);
  v3 = 0x20000;
  if ((unint64_t)(1 << v20) < 0x20000)
    v3 = 1 << v20;
  v4 = (1 << v20) + v3;
  v5 = (0x20000 - v3) >> 11;
  if (v20 >= 0x11)
    v5 = 0;
  v6 = v3 + (v3 >> 8) + v5;
  if (a1[16].i32[0])
    v7 = 0;
  else
    v7 = v6 + 1;
  if (v23 == 1)
    v8 = 0;
  else
    v8 = 4 << SBYTE4(v20);
  if ((_DWORD)v22 == 3)
  {
    v9 = 149000;
    if (v23 <= 6)
      v9 = 0;
    v10 = (4 << v21) + v8;
    if (v20 > 0x11)
    {
      v11 = 0x80000;
      v12 = a1[15].i32[1];
      v13 = v4 + 32;
      if (!a1[12].i32[0])
        goto LABEL_28;
LABEL_23:
      v14 = a1[13].u32[0];
      v15 = a1[12].u32[1];
      if (v14 >= v15)
        LOBYTE(v14) = a1[12].i32[1];
      v16 = (1 << (v15 - v14)) + (8 << v15);
      v17 = 12 * (v3 / a1[13].i32[1]);
      goto LABEL_29;
    }
    if ((_DWORD)v20)
    {
      v11 = 4 << v20;
      v12 = a1[15].i32[1];
      v13 = v4 + 32;
      if (a1[12].i32[0])
        goto LABEL_23;
      goto LABEL_28;
    }
  }
  else
  {
    v9 = 149000;
    if (v23 <= 6)
      v9 = 0;
    v10 = (4 << v21) + v8;
  }
  v11 = 0;
  v12 = a1[15].i32[1];
  v13 = v4 + 32;
  if (a1[12].i32[0])
    goto LABEL_23;
LABEL_28:
  v16 = 0;
  v17 = 0;
LABEL_29:
  if ((_DWORD)v22 == 3)
    v18 = 3;
  else
    v18 = 4;
  v19 = 11 * (v3 / v18);
  if (v12)
    v13 = 32;
  return v3 + v7 + v10 + v9 + v13 + v11 + v16 + v17 + v19 + 19128;
}

uint64_t ZSTD_estimateCStreamSize_usingCParams(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  _OWORD v6[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = *(_DWORD *)a1;
  memset(v6, 0, sizeof(v6));
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  HIDWORD(v7) = 3;
  DWORD1(v6[0]) = v1;
  v3 = *(_DWORD *)(a1 + 20);
  v2 = *(_DWORD *)(a1 + 24);
  *(_OWORD *)((char *)v6 + 8) = *(_OWORD *)(a1 + 4);
  *((_QWORD *)&v6[1] + 1) = __PAIR64__(v2, v3);
  LODWORD(v7) = 1;
  if (v2 >= 7 && v1 >= 0x1B)
  {
    LODWORD(v11) = 1;
    DWORD1(v11) = v1 - 7;
    if (v1 >= v1 - 7)
      v4 = 7;
    else
      v4 = 0;
    *(_QWORD *)&v12 = __PAIR64__(v1, v4);
    *((_QWORD *)&v11 + 1) = 0x4000000003;
  }
  return ZSTD_estimateCStreamSize_usingCCtxParams((int8x8_t *)v6);
}

unint64_t ZSTD_estimateCStreamSize(int a1)
{
  unint64_t v1;
  int v2;
  int v3;
  unint64_t v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v1 = 0;
  if (a1 >= 1)
    v2 = 1;
  else
    v2 = a1;
  v3 = a1 + 1;
  do
  {
    if (v2 >= 0x16)
      v5 = 22;
    else
      v5 = v2;
    if (v2 < 0)
      v5 = 0;
    if (!v2)
      v5 = 3;
    v6 = (char *)&ZSTD_defaultCParameters + 28 * v5;
    v7 = *(_DWORD *)v6;
    v8 = *(_QWORD *)(v6 + 12);
    v9 = *((_DWORD *)v6 + 5);
    v10 = *((_DWORD *)v6 + 6);
    if (v2 <= 0xFFFE0000)
      v11 = -131072;
    else
      v11 = v2;
    if (v2 < 0)
      v9 = -v11;
    v14 = 0u;
    v15 = 0u;
    if (v7 <= 0xA)
      v7 = 10;
    v24 = 0;
    v22 = 0uLL;
    v23 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    HIDWORD(v16) = 3;
    LODWORD(v16) = 1;
    DWORD1(v14) = v7;
    *((_QWORD *)&v14 + 1) = *(_QWORD *)(v6 + 4);
    *(_QWORD *)&v15 = v8;
    *((_QWORD *)&v15 + 1) = __PAIR64__(v10, v9);
    if (v10 >= 7 && v7 >= 0x1B)
    {
      LODWORD(v20) = 1;
      DWORD1(v20) = v7 - 7;
      if (v7 >= v7 - 7)
        v12 = 7;
      else
        v12 = 0;
      *(_QWORD *)&v21 = __PAIR64__(v7, v12);
      *((_QWORD *)&v20 + 1) = 0x4000000003;
    }
    v4 = ZSTD_estimateCStreamSize_usingCCtxParams((int8x8_t *)&v14);
    if (v4 > v1)
      v1 = v4;
    ++v2;
  }
  while (v3 != v2);
  return v1;
}

uint64_t ZSTD_getFrameProgression@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(int *)(result + 260) >= 1)
    return ZSTDMT_getFrameProgression(*(_QWORD *)(result + 3320), (uint64_t)a2);
  v2 = *(_QWORD *)(result + 3136);
  if (v2)
    v2 = *(_QWORD *)(result + 3160) - *(_QWORD *)(result + 3152);
  v3 = *(_QWORD *)(result + 448);
  v4 = *(_QWORD *)(result + 456);
  *a2 = v3 + v2;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v4;
  a2[4] = 0;
  return result;
}

uint64_t ZSTDMT_getFrameProgression@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  v2 = *(_QWORD *)(result + 2976);
  v3 = *(_QWORD *)(result + 264) + v2;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v2;
  v4 = *(_QWORD *)(result + 2984);
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v4;
  v5 = *(_DWORD *)(result + 2952);
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_DWORD *)(result + 2948);
  v18 = *(_DWORD *)(result + 224) + v5;
  if (v6 < v18)
  {
    v7 = 0;
    v8 = v4;
    v17 = result;
    do
    {
      v11 = *(_DWORD *)(result + 2944) & v6;
      v12 = *(_QWORD *)(result + 8);
      v13 = (uint64_t *)(v12 + 424 * v11);
      pthread_mutex_lock((pthread_mutex_t *)(v13 + 2));
      v14 = 0;
      v15 = v13[1];
      if (v15 >= 0xFFFFFFFFFFFFFF89)
        v16 = 0;
      else
        v16 = v13[1];
      if (v15 <= 0xFFFFFFFFFFFFFF88)
        v14 = *(_QWORD *)(v12 + 424 * v11 + 408);
      v9 = *(_QWORD *)(v12 + 424 * v11 + 200);
      v3 += v9;
      v10 = *v13;
      v2 += *v13;
      *(_QWORD *)a2 = v3;
      *(_QWORD *)(a2 + 8) = v2;
      v4 += v16;
      v8 += v14;
      *(_QWORD *)(a2 + 16) = v4;
      *(_QWORD *)(a2 + 24) = v8;
      if (v10 < v9)
        ++v7;
      *(_DWORD *)(a2 + 36) = v7;
      pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(v17 + 8) + 424 * v11 + 16));
      ++v6;
      result = v17;
    }
    while (v18 != v6);
  }
  return result;
}

uint64_t ZSTD_toFlushNow(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(int *)(a1 + 260) < 1)
    return 0;
  v1 = *(_QWORD *)(a1 + 3320);
  v2 = *(_DWORD *)(v1 + 2948);
  if (v2 == *(_DWORD *)(v1 + 2952))
    return 0;
  v4 = *(_DWORD *)(v1 + 2944) & v2;
  v5 = *(_QWORD *)(v1 + 8);
  v6 = v5 + 424 * v4;
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 16));
  v7 = 0;
  v8 = *(_QWORD *)(v6 + 8);
  if (v8 >= 0xFFFFFFFFFFFFFF89)
    v9 = 0;
  else
    v9 = *(_QWORD *)(v6 + 8);
  if (v8 <= 0xFFFFFFFFFFFFFF88)
    v7 = *(_QWORD *)(v5 + 424 * v4 + 408);
  v10 = v9 - v7;
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(v1 + 8) + 424 * v4 + 16));
  return v10;
}

uint64_t ZSTDMT_toFlushNow(uint64_t a1)
{
  int v1;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_DWORD *)(a1 + 2948);
  if (v1 == *(_DWORD *)(a1 + 2952))
    return 0;
  v4 = *(_DWORD *)(a1 + 2944) & v1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = v5 + 424 * v4;
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 16));
  v7 = 0;
  v8 = *(_QWORD *)(v6 + 8);
  if (v8 >= 0xFFFFFFFFFFFFFF89)
    v9 = 0;
  else
    v9 = *(_QWORD *)(v6 + 8);
  if (v8 <= 0xFFFFFFFFFFFFFF88)
    v7 = *(_QWORD *)(v5 + 424 * v4 + 408);
  v10 = v9 - v7;
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 8) + 424 * v4 + 16));
  return v10;
}

double ZSTD_reset_compressedBlockState(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 4580) = 0x400000001;
  *(_DWORD *)(a1 + 4588) = 8;
  *(_DWORD *)(a1 + 1024) = 0;
  result = 0.0;
  *(_QWORD *)(a1 + 4568) = 0;
  *(_DWORD *)(a1 + 4576) = 0;
  return result;
}

uint64_t ZSTD_invalidateRepCodes(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 2872);
  *(_QWORD *)(v1 + 4580) = 0;
  *(_DWORD *)(v1 + 4588) = 0;
  return result;
}

uint64_t ZSTD_copyCCtx(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  int v12;
  size_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BOOL8 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[28];

  if (*(_DWORD *)a2 != 1)
    return -60;
  v5 = *(_DWORD *)(a2 + 3128);
  v6 = *(_OWORD *)(a2 + 552);
  if (!a3)
    a3 = -1;
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = v6;
  v7 = *(unsigned int *)(a1 + 16);
  v25 = *(_OWORD *)(a1 + 124);
  v26 = *(_OWORD *)(a1 + 140);
  *(_OWORD *)v27 = *(_OWORD *)(a1 + 156);
  *(_OWORD *)&v27[12] = *(_OWORD *)(a1 + 168);
  v21 = *(_OWORD *)(a1 + 60);
  v22 = *(_OWORD *)(a1 + 76);
  v23 = *(_OWORD *)(a1 + 92);
  v24 = *(_OWORD *)(a1 + 108);
  v8 = v7 | ((unint64_t)*(unsigned int *)(a2 + 188) << 32);
  v9 = *(_QWORD *)(a2 + 208);
  v17 = *(_OWORD *)(a2 + 192);
  v16 = v8;
  v18 = v9;
  v19 = a3 != -1;
  v20 = 0;
  ZSTD_resetCCtx_internal(a1, (__int128 *)&v16, a3, 1, v5);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a1 + 384);
  if (*(_DWORD *)(a2 + 212) == 1)
    v10 = 0;
  else
    v10 = 4 << *(_DWORD *)(a2 + 192);
  v12 = *(_DWORD *)(a2 + 2928);
  memcpy(*(void **)(a1 + 2936), *(const void **)(a2 + 2936), 4 << *(_DWORD *)(a2 + 196));
  memcpy(*(void **)(a1 + 2952), *(const void **)(a2 + 2952), v10);
  if (v12)
    v13 = 4 << v12;
  else
    v13 = 0;
  memcpy(*(void **)(a1 + 2944), *(const void **)(a2 + 2944), v13);
  v14 = *(_QWORD *)(a1 + 392);
  if (*(_QWORD *)(a1 + 400) < v14)
    *(_QWORD *)(a1 + 400) = v14;
  v15 = *(_OWORD *)(a2 + 2904);
  *(_OWORD *)(a1 + 2888) = *(_OWORD *)(a2 + 2888);
  *(_OWORD *)(a1 + 2904) = v15;
  *(_QWORD *)(a1 + 2920) = *(_QWORD *)(a2 + 2920);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  memcpy(*(void **)(a1 + 2872), *(const void **)(a2 + 2872), 0x11F0uLL);
  return 0;
}

uint64_t ZSTD_seqToCodes(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v2 = *(_QWORD *)(result + 32);
  v1 = *(_QWORD *)(result + 40);
  v3 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    v4 = (v3 >> 3);
    v5 = (unsigned __int16 *)(*(_QWORD *)result + 6);
    v6 = *(_BYTE **)(result + 48);
    v7 = *(_BYTE **)(result + 40);
    v8 = *(_BYTE **)(result + 32);
    do
    {
      while (1)
      {
        v9 = *(v5 - 1);
        if (v9 < 0x40)
          LOBYTE(v10) = ZSTD_LLcode_LL_Code[*(v5 - 1)];
        else
          v10 = 50 - __clz(v9);
        v11 = *v5;
        *v8 = v10;
        *v6 = __clz(*(_DWORD *)(v5 - 3)) ^ 0x1F;
        if (v11 >= 0x80)
          break;
        *v7++ = ZSTD_MLcode_ML_Code[v11];
        v5 += 4;
        ++v8;
        ++v6;
        if (!--v4)
          goto LABEL_9;
      }
      *v7++ = 67 - __clz(v11);
      v5 += 4;
      ++v8;
      ++v6;
      --v4;
    }
    while (v4);
  }
LABEL_9:
  v12 = *(_DWORD *)(result + 72);
  if (v12 != 1)
  {
    if (v12 != 2)
      return result;
LABEL_13:
    *(_BYTE *)(v1 + *(unsigned int *)(result + 76)) = 52;
    return result;
  }
  *(_BYTE *)(v2 + *(unsigned int *)(result + 76)) = 35;
  if (*(_DWORD *)(result + 72) == 2)
    goto LABEL_13;
  return result;
}

uint64_t ZSTD_selectBlockCompressor(int a1, int a2)
{
  return (uint64_t)*(&ZSTD_selectBlockCompressor_blockCompressor[10 * a2] + a1);
}

int64_t ZSTD_compressBlock_fast(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL4 v12;
  uint64_t v13;
  _BOOL4 v14;
  unsigned __int8 *v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 *v20;
  _BOOL4 v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 *v45;
  int v46;
  _BOOL8 v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  char *v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _OWORD *v56;
  uint64_t v57;
  _OWORD *v58;
  unint64_t v59;
  __int128 *v60;
  __int128 v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  BOOL v66;
  unsigned __int8 *v67;
  char *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  _OWORD *v73;
  __int128 v74;
  unsigned __int8 *v75;
  unint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  unint64_t v86;
  __int128 v87;
  char *v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unsigned __int8 *v100;
  unint64_t v101;
  unint64_t v102;
  unsigned __int8 *v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  _BOOL4 v115;
  uint64_t v116;
  _BOOL4 v117;
  unsigned __int8 *v118;
  unint64_t v119;
  unsigned int v120;
  unsigned __int8 *v122;
  _BOOL4 v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unsigned __int8 *v141;
  int v142;
  _BOOL8 v143;
  uint64_t v144;
  unsigned __int8 *v145;
  uint64_t v146;
  char *v147;
  unsigned __int8 *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  _OWORD *v152;
  uint64_t v153;
  _OWORD *v154;
  unint64_t v155;
  __int128 *v156;
  __int128 v157;
  unsigned __int8 *v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  unsigned __int8 *v162;
  char *v163;
  _BYTE *v164;
  uint64_t v165;
  uint64_t v166;
  unsigned __int8 *v167;
  _OWORD *v168;
  __int128 v169;
  unsigned __int8 *v170;
  unint64_t v171;
  unsigned __int8 *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  __int128 *v179;
  _OWORD *v180;
  unint64_t v181;
  __int128 v182;
  char *v183;
  _QWORD *v184;
  unint64_t v185;
  uint64_t v186;
  char v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  unsigned __int8 *v195;
  unint64_t v196;
  unint64_t v197;
  unsigned __int8 *v198;
  unint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  _BOOL4 v210;
  uint64_t v211;
  _BOOL4 v212;
  unsigned __int8 *v213;
  unint64_t v214;
  unsigned int v215;
  unsigned __int8 *v217;
  _BOOL4 v218;
  int v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  int v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unsigned __int8 *v236;
  int v237;
  _BOOL8 v238;
  uint64_t v239;
  unsigned __int8 *v240;
  uint64_t v241;
  char *v242;
  unsigned __int8 *v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  _OWORD *v247;
  uint64_t v248;
  _OWORD *v249;
  unint64_t v250;
  __int128 *v251;
  __int128 v252;
  unsigned __int8 *v253;
  unsigned __int8 *v254;
  unsigned __int8 *v255;
  unsigned __int8 *v256;
  unsigned __int8 *v257;
  char *v258;
  _BYTE *v259;
  uint64_t v260;
  uint64_t v261;
  unsigned __int8 *v262;
  _OWORD *v263;
  __int128 v264;
  unsigned __int8 *v265;
  unint64_t v266;
  unsigned __int8 *v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  __int128 *v274;
  _OWORD *v275;
  unint64_t v276;
  __int128 v277;
  char *v278;
  _QWORD *v279;
  unint64_t v280;
  uint64_t v281;
  char v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  unsigned __int8 *v290;
  unint64_t v291;
  unint64_t v292;
  unsigned __int8 *v293;
  unint64_t v294;
  char *v295;
  char *v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  int v302;
  unsigned int v303;
  unsigned int v304;
  _BOOL4 v305;
  uint64_t v306;
  _BOOL4 v307;
  unsigned __int8 *v308;
  unint64_t v309;
  unsigned int v310;
  unsigned __int8 *v312;
  _BOOL4 v313;
  int v314;
  unsigned int v315;
  unsigned int v316;
  uint64_t v317;
  int v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  int v323;
  int v324;
  unsigned int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unsigned __int8 *v331;
  int v332;
  _BOOL8 v333;
  uint64_t v334;
  unsigned __int8 *v335;
  uint64_t v336;
  char *v337;
  unsigned __int8 *v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  _OWORD *v342;
  uint64_t v343;
  _OWORD *v344;
  unint64_t v345;
  __int128 *v346;
  __int128 v347;
  unsigned __int8 *v348;
  unsigned __int8 *v349;
  unsigned __int8 *v350;
  unsigned __int8 *v351;
  unsigned __int8 *v352;
  char *v353;
  _BYTE *v354;
  uint64_t v355;
  uint64_t v356;
  unsigned __int8 *v357;
  _OWORD *v358;
  __int128 v359;
  unsigned __int8 *v360;
  unint64_t v361;
  unsigned __int8 *v362;
  uint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  __int128 *v369;
  _OWORD *v370;
  unint64_t v371;
  __int128 v372;
  char *v373;
  _QWORD *v374;
  unint64_t v375;
  uint64_t v376;
  char v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  char *v385;
  unsigned __int8 *v386;
  unint64_t v387;
  unint64_t v388;
  unsigned __int8 *v389;
  unint64_t v390;
  char *v391;
  char *v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  unsigned int v396;
  unsigned int v398;
  unsigned int *v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  unint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;

  v5 = *(_DWORD *)(a1 + 208);
  switch(v5)
  {
    case 5:
      if (*(_DWORD *)(a1 + 212))
        v110 = *(_DWORD *)(a1 + 212);
      else
        v110 = 1;
      v111 = *(_QWORD *)(a1 + 8);
      v8 = &a4[a5];
      v112 = (_DWORD)a4 + a5 - v111;
      v113 = *(_DWORD *)(a1 + 24);
      v114 = 1 << *(_DWORD *)(a1 + 192);
      v115 = v112 - v113 > v114;
      LODWORD(v116) = v112 - v114;
      v117 = *(_DWORD *)(a1 + 32) == 0;
      if (v117 && v115)
        v116 = v116;
      else
        v116 = v113;
      v409 = v116;
      v118 = (unsigned __int8 *)(v111 + v116);
      v119 = (unint64_t)(v8 - 8);
      v17 = *a3;
      v120 = a3[1];
      v405 = (unint64_t)v118;
      if (v118 == a4)
        _X23 = a4 + 1;
      else
        _X23 = a4;
      v122 = _X23 + 1;
      v123 = (_DWORD)_X23 - (_DWORD)v111 - v113 > v114;
      v124 = (_DWORD)_X23 - v111 - v114;
      if (!v117 || !v123)
        v124 = *(_DWORD *)(a1 + 24);
      v125 = (_DWORD)_X23 - v111 - v124;
      if (v120 <= v125)
        v24 = v120;
      else
        v24 = 0;
      if (v120 <= v125)
        v126 = 0;
      else
        v126 = a3[1];
      if (v17 <= v125)
        v26 = v17;
      else
        v26 = 0;
      if (v17 <= v125)
        v17 = v126;
      if ((unint64_t)v122 >= v119)
        goto LABEL_557;
      v398 = v17;
      v127 = *(_QWORD *)(a1 + 48);
      v399 = a3;
      v401 = (v110 + 1);
      v128 = 64 - *(_DWORD *)(a1 + 200);
      v129 = (unint64_t)(v8 - 7);
      v130 = (unint64_t)(v8 - 3);
      v131 = (unint64_t)(v8 - 1);
      v132 = (unint64_t)(v8 - 32);
      while (1)
      {
        v133 = *(_QWORD *)_X23;
        v134 = *(_QWORD *)v122;
        v135 = (_DWORD)_X23 - v111;
        v136 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)_X23) >> v128);
        v137 = *(unsigned int *)(v127 + v136);
        v138 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v122) >> v128);
        v139 = *(unsigned int *)(v127 + v138);
        __asm { PRFM            #0, [X23,#0x100] }
        *(_DWORD *)(v127 + v136) = (_DWORD)_X23 - v111;
        *(_DWORD *)(v127 + v138) = (_DWORD)v122 - v111;
        if (!(_DWORD)v26)
          goto LABEL_565;
        while (2)
        {
          v141 = &_X23[-v26 + 2];
          if (*(_DWORD *)v141 == *(_DWORD *)(_X23 + 2))
          {
            v142 = 0;
            v143 = _X23[1] == *(v141 - 1);
            v144 = _X23[1] == *(v141 - 1) ? 5 : 4;
            _X23 = &_X23[-v143 + 2];
            v145 = &v141[-v143];
            v146 = v26;
            v26 = v24;
          }
          else
          {
LABEL_565:
            if (v137 <= v409
              || (v145 = (unsigned __int8 *)(v111 + v137), *(_DWORD *)(v111 + v137) != (_DWORD)v133))
            {
              if (v139 <= v409
                || (v145 = (unsigned __int8 *)(v111 + v139), *(_DWORD *)(v111 + v139) != (_DWORD)v134))
              {
                v165 = v401 + ((unint64_t)(_X23 - a4) >> 7);
                _X23 += v165;
                v122 += v165;
                if ((unint64_t)v122 >= v119)
                  goto LABEL_556;
                continue;
              }
              _X23 = v122;
            }
            v146 = ((_DWORD)_X23 - (_DWORD)v145);
            v142 = v146 + 2;
            if (_X23 <= a4 || (unint64_t)v145 <= v405)
            {
              v144 = 4;
            }
            else
            {
              v158 = v145 - 1;
              v159 = _X23 - 1;
              v144 = 4;
              while (*v159 == *v158)
              {
                ++v144;
                v160 = v158 - 1;
                v161 = v159 - 1;
                if (v159 > a4)
                {
                  --v159;
                  v66 = (unint64_t)v158-- > v405;
                  if (v66)
                    continue;
                }
                v145 = v160 + 1;
                _X23 = v161 + 1;
                goto LABEL_174;
              }
              v145 = v158 + 1;
              _X23 = v159 + 1;
            }
          }
          break;
        }
LABEL_174:
        v147 = (char *)&_X23[v144];
        v148 = &v145[v144];
        if (v129 <= (unint64_t)&_X23[v144])
          break;
        v149 = *(_QWORD *)v147 ^ *(_QWORD *)v148;
        if (v149)
        {
          v150 = __clz(__rbit64(v149)) >> 3;
          v151 = _X23 - a4;
          v152 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)_X23 <= v132)
            goto LABEL_177;
          goto LABEL_205;
        }
        v173 = 0;
        v174 = (uint64_t)&_X23[v144 + 8];
        do
        {
          v175 = (_QWORD *)(v174 + v173);
          if (v174 + v173 >= v129)
          {
            v162 = &_X23[v144 + 8 + v173];
            v148 = &v145[v144 + 8 + v173];
            if ((unint64_t)v162 >= v130)
              goto LABEL_196;
            goto LABEL_194;
          }
          v176 = *(_QWORD *)&v145[v144 + 8 + v173];
          v173 += 8;
          v177 = *v175 ^ v176;
        }
        while (!v177);
        v150 = v173 + (__clz(__rbit64(v177)) >> 3);
        v151 = _X23 - a4;
        v152 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)_X23 > v132)
          goto LABEL_205;
LABEL_177:
        *v152 = *(_OWORD *)a4;
        v153 = *(_QWORD *)(a2 + 24);
        if (v151 > 0x10)
        {
          v154 = (_OWORD *)(v153 + 16);
          v155 = v153 + v151;
          v156 = (__int128 *)(a4 + 16);
          do
          {
            v157 = *v156++;
            *v154++ = v157;
          }
          while ((unint64_t)v154 < v155);
          goto LABEL_242;
        }
        *(_QWORD *)(a2 + 24) = v153 + v151;
        v166 = *(_QWORD *)(a2 + 8);
LABEL_244:
        v189 = v150 + v144;
        v190 = v150 + v144 - 3;
        *(_WORD *)(v166 + 4) = v151;
        *(_DWORD *)v166 = v142 + 1;
        if (v190 >= 0x10000)
        {
          v191 = (unint64_t)(v166 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v191;
        }
        *(_WORD *)(v166 + 6) = v190;
        v192 = v166 + 8;
        *(_QWORD *)(a2 + 8) = v166 + 8;
        a4 = &_X23[v189];
        if ((unint64_t)&_X23[v189] > v119)
        {
          v24 = v26;
LABEL_167:
          v122 = a4 + 1;
          v26 = v146;
          _X23 = a4;
          if ((unint64_t)(a4 + 1) >= v119)
            goto LABEL_556;
        }
        else
        {
          *(_DWORD *)(v127 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v111 + 2 + v135)) >> v128)) = v135 + 2;
          *(_DWORD *)(v127 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(a4 - 2)) >> v128)) = (_DWORD)a4 - 2 - v111;
          if ((_DWORD)v26)
          {
            v193 = v146;
            while (1)
            {
              v24 = v193;
              v193 = v26;
              if (*(_DWORD *)a4 != *(_DWORD *)&a4[-v26])
                break;
              v194 = (char *)(a4 + 4);
              v195 = &a4[-v26 + 4];
              if (v129 <= (unint64_t)(a4 + 4))
              {
                v198 = a4 + 4;
                if ((unint64_t)v194 >= v130)
                  goto LABEL_257;
LABEL_255:
                if (*(_DWORD *)v195 == *(_DWORD *)v198)
                {
                  v198 += 4;
                  v195 += 4;
                }
LABEL_257:
                if ((unint64_t)v198 >= v131)
                {
                  if (v198 < v8)
                    goto LABEL_263;
                }
                else
                {
                  if (*(unsigned __int16 *)v195 == *(unsigned __int16 *)v198)
                  {
                    v198 += 2;
                    v195 += 2;
                  }
                  if (v198 >= v8)
                    goto LABEL_265;
LABEL_263:
                  if (*v195 == *v198)
                    ++v198;
                }
LABEL_265:
                v197 = v198 - (unsigned __int8 *)v194;
                goto LABEL_266;
              }
              v196 = *(_QWORD *)v194 ^ *(_QWORD *)v195;
              if (v196)
              {
                v197 = __clz(__rbit64(v196)) >> 3;
                goto LABEL_266;
              }
              v200 = (char *)(a4 + 12);
              do
              {
                v201 = &v200[v196];
                if ((unint64_t)&v200[v196] >= v129)
                {
                  v198 = &a4[v196 + 12];
                  v195 = &v198[-v26];
                  if ((unint64_t)v198 >= v130)
                    goto LABEL_257;
                  goto LABEL_255;
                }
                v202 = *(_QWORD *)&a4[v196 + 12 - v26];
                v196 += 8;
                v203 = *(_QWORD *)v201 ^ v202;
              }
              while (!v203);
              v197 = v196 + (__clz(__rbit64(v203)) >> 3);
LABEL_266:
              *(_DWORD *)(v127 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)a4) >> v128)) = (_DWORD)a4 - v111;
              if ((unint64_t)a4 <= v132)
              {
                *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)a4;
                v192 = *(_QWORD *)(a2 + 8);
              }
              *(_WORD *)(v192 + 4) = 0;
              *(_DWORD *)v192 = 1;
              if (v197 + 1 >= 0x10000)
              {
                v199 = (unint64_t)(v192 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v199;
              }
              a4 += v197 + 4;
              *(_WORD *)(v192 + 6) = v197 + 1;
              v192 += 8;
              *(_QWORD *)(a2 + 8) = v192;
              v26 = v24;
              v146 = v193;
              if ((unint64_t)a4 > v119)
                goto LABEL_167;
            }
            v204 = v24;
            v24 = v26;
            v122 = a4 + 1;
            v26 = v204;
            _X23 = a4;
            if ((unint64_t)(a4 + 1) >= v119)
              goto LABEL_556;
          }
          else
          {
            v24 = 0;
            v122 = a4 + 1;
            v26 = v146;
            _X23 += v189;
            if ((unint64_t)(a4 + 1) >= v119)
              goto LABEL_556;
          }
        }
      }
      v162 = &_X23[v144];
      if ((unint64_t)v147 >= v130)
        goto LABEL_196;
LABEL_194:
      if (*(_DWORD *)v148 == *(_DWORD *)v162)
      {
        v162 += 4;
        v148 += 4;
      }
LABEL_196:
      if ((unint64_t)v162 >= v131)
      {
        if (v162 >= v8)
          goto LABEL_204;
      }
      else
      {
        if (*(unsigned __int16 *)v148 == *(unsigned __int16 *)v162)
        {
          v162 += 2;
          v148 += 2;
        }
        if (v162 >= v8)
        {
LABEL_204:
          v150 = v162 - (unsigned __int8 *)v147;
          v151 = _X23 - a4;
          v152 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)_X23 <= v132)
            goto LABEL_177;
LABEL_205:
          if ((unint64_t)a4 <= v132)
          {
            v164 = (char *)v152 + v132 - (_QWORD)a4;
            v167 = a4;
            v168 = v152;
            do
            {
              v169 = *(_OWORD *)v167;
              v167 += 16;
              *v168++ = v169;
            }
            while (v168 < (_OWORD *)v164);
            v163 = (char *)(v8 - 32);
            if (v132 >= (unint64_t)_X23)
              goto LABEL_242;
          }
          else
          {
            v163 = (char *)a4;
            v164 = v152;
            if (a4 >= _X23)
            {
LABEL_242:
              *(_QWORD *)(a2 + 24) += v151;
              v166 = *(_QWORD *)(a2 + 8);
              if (v151 >= 0x10000)
              {
                v188 = (unint64_t)(v166 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 1;
                *(_DWORD *)(a2 + 76) = v188;
              }
              goto LABEL_244;
            }
          }
          if ((unint64_t)a4 <= v132)
            v170 = v8 - 32;
          else
            v170 = a4;
          v171 = _X23 - v170;
          if ((unint64_t)(_X23 - v170) < 8)
          {
            v172 = (unsigned __int8 *)v163;
            goto LABEL_241;
          }
          if ((unint64_t)((char *)v152 - (char *)a4) < 0x20)
          {
            v172 = (unsigned __int8 *)v163;
            goto LABEL_241;
          }
          if (v171 >= 0x20)
          {
            v178 = v171 & 0xFFFFFFFFFFFFFFE0;
            v179 = (__int128 *)(v163 + 16);
            v180 = (_OWORD *)((char *)v152 + v170 - a4 + 16);
            v181 = v171 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v182 = *v179;
              *(v180 - 1) = *(v179 - 1);
              *v180 = v182;
              v179 += 2;
              v180 += 2;
              v181 -= 32;
            }
            while (v181);
            if (v171 == v178)
              goto LABEL_242;
            if ((v171 & 0x18) == 0)
            {
              v172 = (unsigned __int8 *)&v163[v178];
              v164 += v178;
              do
              {
LABEL_241:
                v187 = *v172++;
                *v164++ = v187;
              }
              while (v172 < _X23);
              goto LABEL_242;
            }
          }
          else
          {
            v178 = 0;
          }
          v164 += v171 & 0xFFFFFFFFFFFFFFF8;
          v172 = (unsigned __int8 *)&v163[v171 & 0xFFFFFFFFFFFFFFF8];
          v183 = &v163[v178];
          v184 = (_QWORD *)((char *)v152 + &v170[v178] - a4);
          v185 = v178 - (v171 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v186 = *(_QWORD *)v183;
            v183 += 8;
            *v184++ = v186;
            v185 += 8;
          }
          while (v185);
          if (v171 == (v171 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_242;
          goto LABEL_241;
        }
      }
      if (*v148 == *v162)
        ++v162;
      goto LABEL_204;
    case 6:
      if (*(_DWORD *)(a1 + 212))
        v205 = *(_DWORD *)(a1 + 212);
      else
        v205 = 1;
      v206 = *(_QWORD *)(a1 + 8);
      v8 = &a4[a5];
      v207 = (_DWORD)a4 + a5 - v206;
      v208 = *(_DWORD *)(a1 + 24);
      v209 = 1 << *(_DWORD *)(a1 + 192);
      v210 = v207 - v208 > v209;
      LODWORD(v211) = v207 - v209;
      v212 = *(_DWORD *)(a1 + 32) == 0;
      if (v212 && v210)
        v211 = v211;
      else
        v211 = v208;
      v410 = v211;
      v213 = (unsigned __int8 *)(v206 + v211);
      v214 = (unint64_t)(v8 - 8);
      v17 = *a3;
      v215 = a3[1];
      v402 = (unint64_t)v213;
      if (v213 == a4)
        _X23 = a4 + 1;
      else
        _X23 = a4;
      v217 = _X23 + 1;
      v218 = (_DWORD)_X23 - (_DWORD)v206 - v208 > v209;
      v219 = (_DWORD)_X23 - v206 - v209;
      if (!v212 || !v218)
        v219 = *(_DWORD *)(a1 + 24);
      v220 = (_DWORD)_X23 - v206 - v219;
      if (v215 <= v220)
        v24 = v215;
      else
        v24 = 0;
      if (v215 <= v220)
        v221 = 0;
      else
        v221 = a3[1];
      if (v17 <= v220)
        v26 = v17;
      else
        v26 = 0;
      if (v17 <= v220)
        v17 = v221;
      if ((unint64_t)v217 >= v214)
        goto LABEL_557;
      v398 = v17;
      v399 = a3;
      v222 = *(_QWORD *)(a1 + 48);
      v406 = (v205 + 1);
      v223 = 64 - *(_DWORD *)(a1 + 200);
      v224 = (unint64_t)(v8 - 7);
      v225 = (unint64_t)(v8 - 3);
      v226 = (unint64_t)(v8 - 1);
      v227 = (unint64_t)(v8 - 32);
      while (1)
      {
        v228 = *(_QWORD *)_X23;
        v229 = *(_QWORD *)v217;
        v230 = (_DWORD)_X23 - v206;
        v231 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)_X23) >> v223);
        v232 = *(unsigned int *)(v222 + v231);
        v233 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v217) >> v223);
        v234 = *(unsigned int *)(v222 + v233);
        __asm { PRFM            #0, [X23,#0x100] }
        *(_DWORD *)(v222 + v231) = (_DWORD)_X23 - v206;
        *(_DWORD *)(v222 + v233) = (_DWORD)v217 - v206;
        if (!(_DWORD)v26)
          goto LABEL_566;
        while (2)
        {
          v236 = &_X23[-v26 + 2];
          if (*(_DWORD *)v236 == *(_DWORD *)(_X23 + 2))
          {
            v237 = 0;
            v238 = _X23[1] == *(v236 - 1);
            v239 = _X23[1] == *(v236 - 1) ? 5 : 4;
            _X23 = &_X23[-v238 + 2];
            v240 = &v236[-v238];
            v241 = v26;
            v26 = v24;
          }
          else
          {
LABEL_566:
            if (v232 <= v410
              || (v240 = (unsigned __int8 *)(v206 + v232), *(_DWORD *)(v206 + v232) != (_DWORD)v228))
            {
              if (v234 <= v410
                || (v240 = (unsigned __int8 *)(v206 + v234), *(_DWORD *)(v206 + v234) != (_DWORD)v229))
              {
                v260 = v406 + ((unint64_t)(_X23 - a4) >> 7);
                _X23 += v260;
                v217 += v260;
                if ((unint64_t)v217 >= v214)
                  goto LABEL_556;
                continue;
              }
              _X23 = v217;
            }
            v241 = ((_DWORD)_X23 - (_DWORD)v240);
            v237 = v241 + 2;
            if (_X23 <= a4 || (unint64_t)v240 <= v402)
            {
              v239 = 4;
            }
            else
            {
              v253 = v240 - 1;
              v254 = _X23 - 1;
              v239 = 4;
              while (*v254 == *v253)
              {
                ++v239;
                v255 = v253 - 1;
                v256 = v254 - 1;
                if (v254 > a4)
                {
                  --v254;
                  v66 = (unint64_t)v253-- > v402;
                  if (v66)
                    continue;
                }
                v240 = v255 + 1;
                _X23 = v256 + 1;
                goto LABEL_312;
              }
              v240 = v253 + 1;
              _X23 = v254 + 1;
            }
          }
          break;
        }
LABEL_312:
        v242 = (char *)&_X23[v239];
        v243 = &v240[v239];
        if (v224 <= (unint64_t)&_X23[v239])
          break;
        v244 = *(_QWORD *)v242 ^ *(_QWORD *)v243;
        if (v244)
        {
          v245 = __clz(__rbit64(v244)) >> 3;
          v246 = _X23 - a4;
          v247 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)_X23 <= v227)
            goto LABEL_315;
          goto LABEL_343;
        }
        v268 = 0;
        v269 = (uint64_t)&_X23[v239 + 8];
        do
        {
          v270 = (_QWORD *)(v269 + v268);
          if (v269 + v268 >= v224)
          {
            v257 = &_X23[v239 + 8 + v268];
            v243 = &v240[v239 + 8 + v268];
            if ((unint64_t)v257 >= v225)
              goto LABEL_334;
            goto LABEL_332;
          }
          v271 = *(_QWORD *)&v240[v239 + 8 + v268];
          v268 += 8;
          v272 = *v270 ^ v271;
        }
        while (!v272);
        v245 = v268 + (__clz(__rbit64(v272)) >> 3);
        v246 = _X23 - a4;
        v247 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)_X23 > v227)
          goto LABEL_343;
LABEL_315:
        *v247 = *(_OWORD *)a4;
        v248 = *(_QWORD *)(a2 + 24);
        if (v246 > 0x10)
        {
          v249 = (_OWORD *)(v248 + 16);
          v250 = v248 + v246;
          v251 = (__int128 *)(a4 + 16);
          do
          {
            v252 = *v251++;
            *v249++ = v252;
          }
          while ((unint64_t)v249 < v250);
          goto LABEL_380;
        }
        *(_QWORD *)(a2 + 24) = v248 + v246;
        v261 = *(_QWORD *)(a2 + 8);
LABEL_382:
        v284 = v245 + v239;
        v285 = v245 + v239 - 3;
        *(_WORD *)(v261 + 4) = v246;
        *(_DWORD *)v261 = v237 + 1;
        if (v285 >= 0x10000)
        {
          v286 = (unint64_t)(v261 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v286;
        }
        *(_WORD *)(v261 + 6) = v285;
        v287 = v261 + 8;
        *(_QWORD *)(a2 + 8) = v261 + 8;
        a4 = &_X23[v284];
        if ((unint64_t)&_X23[v284] > v214)
        {
          v24 = v26;
LABEL_305:
          v217 = a4 + 1;
          v26 = v241;
          _X23 = a4;
          if ((unint64_t)(a4 + 1) >= v214)
            goto LABEL_556;
        }
        else
        {
          *(_DWORD *)(v222 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v206 + 2 + v230)) >> v223)) = v230 + 2;
          *(_DWORD *)(v222 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(a4 - 2)) >> v223)) = (_DWORD)a4 - 2 - v206;
          if ((_DWORD)v26)
          {
            v288 = v241;
            while (1)
            {
              v24 = v288;
              v288 = v26;
              if (*(_DWORD *)a4 != *(_DWORD *)&a4[-v26])
                break;
              v289 = (char *)(a4 + 4);
              v290 = &a4[-v26 + 4];
              if (v224 <= (unint64_t)(a4 + 4))
              {
                v293 = a4 + 4;
                if ((unint64_t)v289 >= v225)
                  goto LABEL_395;
LABEL_393:
                if (*(_DWORD *)v290 == *(_DWORD *)v293)
                {
                  v293 += 4;
                  v290 += 4;
                }
LABEL_395:
                if ((unint64_t)v293 >= v226)
                {
                  if (v293 < v8)
                    goto LABEL_401;
                }
                else
                {
                  if (*(unsigned __int16 *)v290 == *(unsigned __int16 *)v293)
                  {
                    v293 += 2;
                    v290 += 2;
                  }
                  if (v293 >= v8)
                    goto LABEL_403;
LABEL_401:
                  if (*v290 == *v293)
                    ++v293;
                }
LABEL_403:
                v292 = v293 - (unsigned __int8 *)v289;
                goto LABEL_404;
              }
              v291 = *(_QWORD *)v289 ^ *(_QWORD *)v290;
              if (v291)
              {
                v292 = __clz(__rbit64(v291)) >> 3;
                goto LABEL_404;
              }
              v295 = (char *)(a4 + 12);
              do
              {
                v296 = &v295[v291];
                if ((unint64_t)&v295[v291] >= v224)
                {
                  v293 = &a4[v291 + 12];
                  v290 = &v293[-v26];
                  if ((unint64_t)v293 >= v225)
                    goto LABEL_395;
                  goto LABEL_393;
                }
                v297 = *(_QWORD *)&a4[v291 + 12 - v26];
                v291 += 8;
                v298 = *(_QWORD *)v296 ^ v297;
              }
              while (!v298);
              v292 = v291 + (__clz(__rbit64(v298)) >> 3);
LABEL_404:
              *(_DWORD *)(v222 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)a4) >> v223)) = (_DWORD)a4 - v206;
              if ((unint64_t)a4 <= v227)
              {
                *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)a4;
                v287 = *(_QWORD *)(a2 + 8);
              }
              *(_WORD *)(v287 + 4) = 0;
              *(_DWORD *)v287 = 1;
              if (v292 + 1 >= 0x10000)
              {
                v294 = (unint64_t)(v287 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v294;
              }
              a4 += v292 + 4;
              *(_WORD *)(v287 + 6) = v292 + 1;
              v287 += 8;
              *(_QWORD *)(a2 + 8) = v287;
              v26 = v24;
              v241 = v288;
              if ((unint64_t)a4 > v214)
                goto LABEL_305;
            }
            v299 = v24;
            v24 = v26;
            v217 = a4 + 1;
            v26 = v299;
            _X23 = a4;
            if ((unint64_t)(a4 + 1) >= v214)
              goto LABEL_556;
          }
          else
          {
            v24 = 0;
            v217 = a4 + 1;
            v26 = v241;
            _X23 += v284;
            if ((unint64_t)(a4 + 1) >= v214)
              goto LABEL_556;
          }
        }
      }
      v257 = &_X23[v239];
      if ((unint64_t)v242 >= v225)
        goto LABEL_334;
LABEL_332:
      if (*(_DWORD *)v243 == *(_DWORD *)v257)
      {
        v257 += 4;
        v243 += 4;
      }
LABEL_334:
      if ((unint64_t)v257 >= v226)
      {
        if (v257 >= v8)
          goto LABEL_342;
      }
      else
      {
        if (*(unsigned __int16 *)v243 == *(unsigned __int16 *)v257)
        {
          v257 += 2;
          v243 += 2;
        }
        if (v257 >= v8)
        {
LABEL_342:
          v245 = v257 - (unsigned __int8 *)v242;
          v246 = _X23 - a4;
          v247 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)_X23 <= v227)
            goto LABEL_315;
LABEL_343:
          if ((unint64_t)a4 <= v227)
          {
            v259 = (char *)v247 + v227 - (_QWORD)a4;
            v262 = a4;
            v263 = v247;
            do
            {
              v264 = *(_OWORD *)v262;
              v262 += 16;
              *v263++ = v264;
            }
            while (v263 < (_OWORD *)v259);
            v258 = (char *)(v8 - 32);
            if (v227 >= (unint64_t)_X23)
              goto LABEL_380;
          }
          else
          {
            v258 = (char *)a4;
            v259 = v247;
            if (a4 >= _X23)
            {
LABEL_380:
              *(_QWORD *)(a2 + 24) += v246;
              v261 = *(_QWORD *)(a2 + 8);
              if (v246 >= 0x10000)
              {
                v283 = (unint64_t)(v261 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 1;
                *(_DWORD *)(a2 + 76) = v283;
              }
              goto LABEL_382;
            }
          }
          if ((unint64_t)a4 <= v227)
            v265 = v8 - 32;
          else
            v265 = a4;
          v266 = _X23 - v265;
          if ((unint64_t)(_X23 - v265) < 8)
          {
            v267 = (unsigned __int8 *)v258;
            goto LABEL_379;
          }
          if ((unint64_t)((char *)v247 - (char *)a4) < 0x20)
          {
            v267 = (unsigned __int8 *)v258;
            goto LABEL_379;
          }
          if (v266 >= 0x20)
          {
            v273 = v266 & 0xFFFFFFFFFFFFFFE0;
            v274 = (__int128 *)(v258 + 16);
            v275 = (_OWORD *)((char *)v247 + v265 - a4 + 16);
            v276 = v266 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v277 = *v274;
              *(v275 - 1) = *(v274 - 1);
              *v275 = v277;
              v274 += 2;
              v275 += 2;
              v276 -= 32;
            }
            while (v276);
            if (v266 == v273)
              goto LABEL_380;
            if ((v266 & 0x18) == 0)
            {
              v267 = (unsigned __int8 *)&v258[v273];
              v259 += v273;
              do
              {
LABEL_379:
                v282 = *v267++;
                *v259++ = v282;
              }
              while (v267 < _X23);
              goto LABEL_380;
            }
          }
          else
          {
            v273 = 0;
          }
          v259 += v266 & 0xFFFFFFFFFFFFFFF8;
          v267 = (unsigned __int8 *)&v258[v266 & 0xFFFFFFFFFFFFFFF8];
          v278 = &v258[v273];
          v279 = (_QWORD *)((char *)v247 + &v265[v273] - a4);
          v280 = v273 - (v266 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v281 = *(_QWORD *)v278;
            v278 += 8;
            *v279++ = v281;
            v280 += 8;
          }
          while (v280);
          if (v266 == (v266 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_380;
          goto LABEL_379;
        }
      }
      if (*v243 == *v257)
        ++v257;
      goto LABEL_342;
    case 7:
      if (*(_DWORD *)(a1 + 212))
        v6 = *(_DWORD *)(a1 + 212);
      else
        v6 = 1;
      v7 = *(_QWORD *)(a1 + 8);
      v8 = &a4[a5];
      v9 = (_DWORD)a4 + a5 - v7;
      v10 = *(_DWORD *)(a1 + 24);
      v11 = 1 << *(_DWORD *)(a1 + 192);
      v12 = v9 - v10 > v11;
      LODWORD(v13) = v9 - v11;
      v14 = *(_DWORD *)(a1 + 32) == 0;
      if (v14 && v12)
        v13 = v13;
      else
        v13 = v10;
      v408 = v13;
      v15 = (unsigned __int8 *)(v7 + v13);
      v16 = (unint64_t)(v8 - 8);
      v17 = *a3;
      v18 = a3[1];
      v404 = (unint64_t)v15;
      if (v15 == a4)
        _X23 = a4 + 1;
      else
        _X23 = a4;
      v20 = _X23 + 1;
      v21 = (_DWORD)_X23 - (_DWORD)v7 - v10 > v11;
      v22 = (_DWORD)_X23 - v7 - v11;
      if (!v14 || !v21)
        v22 = *(_DWORD *)(a1 + 24);
      v23 = (_DWORD)_X23 - v7 - v22;
      if (v18 <= v23)
        v24 = v18;
      else
        v24 = 0;
      if (v18 <= v23)
        v25 = 0;
      else
        v25 = a3[1];
      if (v17 <= v23)
        v26 = v17;
      else
        v26 = 0;
      if (v17 <= v23)
        v17 = v25;
      if ((unint64_t)v20 >= v16)
        goto LABEL_557;
      v398 = v17;
      v27 = *(_QWORD *)(a1 + 48);
      v399 = a3;
      v400 = (v6 + 1);
      v28 = 64 - *(_DWORD *)(a1 + 200);
      v29 = (unint64_t)(v8 - 7);
      v30 = (unint64_t)(v8 - 3);
      v31 = (unint64_t)(v8 - 1);
      v32 = (unint64_t)(v8 - 32);
      while (1)
      {
        v33 = *(_QWORD *)_X23;
        v34 = *(_QWORD *)v20;
        v35 = (_DWORD)_X23 - v7;
        v36 = 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)_X23) >> v28);
        v37 = *(unsigned int *)(v27 + v36);
        v38 = 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)v20) >> v28);
        v39 = *(unsigned int *)(v27 + v38);
        __asm { PRFM            #0, [X23,#0x100] }
        *(_DWORD *)(v27 + v36) = (_DWORD)_X23 - v7;
        *(_DWORD *)(v27 + v38) = (_DWORD)v20 - v7;
        if (!(_DWORD)v26)
          goto LABEL_567;
LABEL_30:
        while (2)
        {
          v45 = &_X23[-v26 + 2];
          if (*(_DWORD *)v45 == *(_DWORD *)(_X23 + 2))
          {
            v46 = 0;
            v47 = _X23[1] == *(v45 - 1);
            v48 = _X23[1] == *(v45 - 1) ? 5 : 4;
            _X23 = &_X23[-v47 + 2];
            v49 = &v45[-v47];
            v50 = v26;
            v26 = v24;
          }
          else
          {
LABEL_567:
            if (v37 <= v408
              || (v49 = (unsigned __int8 *)(v7 + v37), *(_DWORD *)(v7 + v37) != (_DWORD)v33))
            {
              if (v39 <= v408
                || (v49 = (unsigned __int8 *)(v7 + v39), *(_DWORD *)(v7 + v39) != (_DWORD)v34))
              {
                v70 = v400 + ((unint64_t)(_X23 - a4) >> 7);
                _X23 += v70;
                v20 += v70;
                if ((unint64_t)v20 >= v16)
                  goto LABEL_556;
                continue;
              }
              _X23 = v20;
            }
            v50 = ((_DWORD)_X23 - (_DWORD)v49);
            v46 = v50 + 2;
            if (_X23 <= a4 || (unint64_t)v49 <= v404)
            {
              v48 = 4;
            }
            else
            {
              v62 = v49 - 1;
              v63 = _X23 - 1;
              v48 = 4;
              while (*v63 == *v62)
              {
                ++v48;
                v64 = v62 - 1;
                v65 = v63 - 1;
                if (v63 > a4)
                {
                  --v63;
                  v66 = (unint64_t)v62-- > v404;
                  if (v66)
                    continue;
                }
                v49 = v64 + 1;
                _X23 = v65 + 1;
                goto LABEL_36;
              }
              v49 = v62 + 1;
              _X23 = v63 + 1;
            }
          }
          break;
        }
LABEL_36:
        v51 = (char *)&_X23[v48];
        v52 = &v49[v48];
        if (v29 <= (unint64_t)&_X23[v48])
        {
          v67 = &_X23[v48];
          if ((unint64_t)v51 < v30)
          {
LABEL_56:
            if (*(_DWORD *)v52 == *(_DWORD *)v67)
            {
              v67 += 4;
              v52 += 4;
            }
          }
        }
        else
        {
          v53 = *(_QWORD *)v51 ^ *(_QWORD *)v52;
          if (v53)
          {
            v54 = __clz(__rbit64(v53)) >> 3;
            v55 = _X23 - a4;
            v56 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)_X23 <= v32)
              goto LABEL_39;
            goto LABEL_67;
          }
          v78 = 0;
          v79 = (uint64_t)&_X23[v48 + 8];
          while (1)
          {
            v80 = (_QWORD *)(v79 + v78);
            if (v79 + v78 >= v29)
              break;
            v81 = *(_QWORD *)&v49[v48 + 8 + v78];
            v78 += 8;
            v82 = *v80 ^ v81;
            if (v82)
            {
              v54 = v78 + (__clz(__rbit64(v82)) >> 3);
              v55 = _X23 - a4;
              v56 = *(_OWORD **)(a2 + 24);
              if ((unint64_t)_X23 > v32)
                goto LABEL_67;
              goto LABEL_39;
            }
          }
          v67 = &_X23[v48 + 8 + v78];
          v52 = &v49[v48 + 8 + v78];
          if ((unint64_t)v67 < v30)
            goto LABEL_56;
        }
        if ((unint64_t)v67 >= v31)
          break;
        if (*(unsigned __int16 *)v52 == *(unsigned __int16 *)v67)
        {
          v67 += 2;
          v52 += 2;
        }
        if (v67 < v8)
          goto LABEL_64;
LABEL_66:
        v54 = v67 - (unsigned __int8 *)v51;
        v55 = _X23 - a4;
        v56 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)_X23 <= v32)
        {
LABEL_39:
          *v56 = *(_OWORD *)a4;
          v57 = *(_QWORD *)(a2 + 24);
          if (v55 <= 0x10)
          {
            *(_QWORD *)(a2 + 24) = v57 + v55;
            v71 = *(_QWORD *)(a2 + 8);
            goto LABEL_106;
          }
          v58 = (_OWORD *)(v57 + 16);
          v59 = v57 + v55;
          v60 = (__int128 *)(a4 + 16);
          do
          {
            v61 = *v60++;
            *v58++ = v61;
          }
          while ((unint64_t)v58 < v59);
          goto LABEL_104;
        }
LABEL_67:
        if ((unint64_t)a4 <= v32)
        {
          v69 = (char *)v56 + v32 - (_QWORD)a4;
          v72 = a4;
          v73 = v56;
          do
          {
            v74 = *(_OWORD *)v72;
            v72 += 16;
            *v73++ = v74;
          }
          while (v73 < (_OWORD *)v69);
          v68 = (char *)(v8 - 32);
          if (v32 >= (unint64_t)_X23)
            goto LABEL_104;
        }
        else
        {
          v68 = (char *)a4;
          v69 = v56;
          if (a4 >= _X23)
            goto LABEL_104;
        }
        if ((unint64_t)a4 <= v32)
          v75 = v8 - 32;
        else
          v75 = a4;
        v76 = _X23 - v75;
        if ((unint64_t)(_X23 - v75) < 8)
        {
          v77 = (unsigned __int8 *)v68;
          goto LABEL_103;
        }
        if ((unint64_t)((char *)v56 - (char *)a4) < 0x20)
        {
          v77 = (unsigned __int8 *)v68;
          goto LABEL_103;
        }
        if (v76 >= 0x20)
        {
          v83 = v76 & 0xFFFFFFFFFFFFFFE0;
          v84 = (__int128 *)(v68 + 16);
          v85 = (_OWORD *)((char *)v56 + v75 - a4 + 16);
          v86 = v76 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v87 = *v84;
            *(v85 - 1) = *(v84 - 1);
            *v85 = v87;
            v84 += 2;
            v85 += 2;
            v86 -= 32;
          }
          while (v86);
          if (v76 == v83)
            goto LABEL_104;
          if ((v76 & 0x18) == 0)
          {
            v77 = (unsigned __int8 *)&v68[v83];
            v69 += v83;
            do
            {
LABEL_103:
              v92 = *v77++;
              *v69++ = v92;
            }
            while (v77 < _X23);
            goto LABEL_104;
          }
        }
        else
        {
          v83 = 0;
        }
        v69 += v76 & 0xFFFFFFFFFFFFFFF8;
        v77 = (unsigned __int8 *)&v68[v76 & 0xFFFFFFFFFFFFFFF8];
        v88 = &v68[v83];
        v89 = (_QWORD *)((char *)v56 + &v75[v83] - a4);
        v90 = v83 - (v76 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v91 = *(_QWORD *)v88;
          v88 += 8;
          *v89++ = v91;
          v90 += 8;
        }
        while (v90);
        if (v76 != (v76 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_103;
LABEL_104:
        *(_QWORD *)(a2 + 24) += v55;
        v71 = *(_QWORD *)(a2 + 8);
        if (v55 >= 0x10000)
        {
          v93 = (unint64_t)(v71 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v93;
        }
LABEL_106:
        v94 = v54 + v48;
        v95 = v54 + v48 - 3;
        *(_WORD *)(v71 + 4) = v55;
        *(_DWORD *)v71 = v46 + 1;
        if (v95 >= 0x10000)
        {
          v96 = (unint64_t)(v71 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v96;
        }
        *(_WORD *)(v71 + 6) = v95;
        v97 = v71 + 8;
        *(_QWORD *)(a2 + 8) = v71 + 8;
        a4 = &_X23[v94];
        if ((unint64_t)&_X23[v94] <= v16)
        {
          *(_DWORD *)(v27 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v7 + 2 + v35)) >> v28)) = v35 + 2;
          *(_DWORD *)(v27 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(a4 - 2)) >> v28)) = (_DWORD)a4 - 2 - v7;
          if (!(_DWORD)v26)
          {
            v24 = 0;
            v20 = a4 + 1;
            v26 = v50;
            _X23 += v94;
            if ((unint64_t)(a4 + 1) >= v16)
              goto LABEL_556;
            goto LABEL_30;
          }
          v98 = v50;
          while (2)
          {
            v24 = v98;
            v98 = v26;
            if (*(_DWORD *)a4 != *(_DWORD *)&a4[-v26])
            {
              v109 = v24;
              v24 = v26;
              v20 = a4 + 1;
              v26 = v109;
              _X23 = a4;
              if ((unint64_t)(a4 + 1) >= v16)
                goto LABEL_556;
              goto LABEL_30;
            }
            v99 = (char *)(a4 + 4);
            v100 = &a4[-v26 + 4];
            if (v29 <= (unint64_t)(a4 + 4))
            {
              v103 = a4 + 4;
              if ((unint64_t)v99 >= v30)
                goto LABEL_119;
            }
            else
            {
              v101 = *(_QWORD *)v99 ^ *(_QWORD *)v100;
              if (v101)
              {
                v102 = __clz(__rbit64(v101)) >> 3;
                goto LABEL_128;
              }
              v105 = (char *)(a4 + 12);
              while (1)
              {
                v106 = &v105[v101];
                if ((unint64_t)&v105[v101] >= v29)
                  break;
                v107 = *(_QWORD *)&a4[v101 + 12 - v26];
                v101 += 8;
                v108 = *(_QWORD *)v106 ^ v107;
                if (v108)
                {
                  v102 = v101 + (__clz(__rbit64(v108)) >> 3);
                  goto LABEL_128;
                }
              }
              v103 = &a4[v101 + 12];
              v100 = &v103[-v26];
              if ((unint64_t)v103 >= v30)
              {
LABEL_119:
                if ((unint64_t)v103 >= v31)
                {
                  if (v103 < v8)
                    goto LABEL_125;
                }
                else
                {
                  if (*(unsigned __int16 *)v100 == *(unsigned __int16 *)v103)
                  {
                    v103 += 2;
                    v100 += 2;
                  }
                  if (v103 >= v8)
                    goto LABEL_127;
LABEL_125:
                  if (*v100 == *v103)
                    ++v103;
                }
LABEL_127:
                v102 = v103 - (unsigned __int8 *)v99;
LABEL_128:
                *(_DWORD *)(v27 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)a4) >> v28)) = (_DWORD)a4 - v7;
                if ((unint64_t)a4 <= v32)
                {
                  *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)a4;
                  v97 = *(_QWORD *)(a2 + 8);
                }
                *(_WORD *)(v97 + 4) = 0;
                *(_DWORD *)v97 = 1;
                if (v102 + 1 >= 0x10000)
                {
                  v104 = (unint64_t)(v97 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v104;
                }
                a4 += v102 + 4;
                *(_WORD *)(v97 + 6) = v102 + 1;
                v97 += 8;
                *(_QWORD *)(a2 + 8) = v97;
                v26 = v24;
                v50 = v98;
                if ((unint64_t)a4 > v16)
                  goto LABEL_29;
                continue;
              }
            }
            break;
          }
          if (*(_DWORD *)v100 == *(_DWORD *)v103)
          {
            v103 += 4;
            v100 += 4;
          }
          goto LABEL_119;
        }
        v24 = v26;
LABEL_29:
        v20 = a4 + 1;
        v26 = v50;
        _X23 = a4;
        if ((unint64_t)(a4 + 1) >= v16)
          goto LABEL_556;
      }
      if (v67 >= v8)
        goto LABEL_66;
LABEL_64:
      if (*v52 == *v67)
        ++v67;
      goto LABEL_66;
  }
  if (*(_DWORD *)(a1 + 212))
    v300 = *(_DWORD *)(a1 + 212);
  else
    v300 = 1;
  v301 = *(_QWORD *)(a1 + 8);
  v8 = &a4[a5];
  v302 = (_DWORD)a4 + a5 - v301;
  v303 = *(_DWORD *)(a1 + 24);
  v304 = 1 << *(_DWORD *)(a1 + 192);
  v305 = v302 - v303 > v304;
  LODWORD(v306) = v302 - v304;
  v307 = *(_DWORD *)(a1 + 32) == 0;
  if (v307 && v305)
    v306 = v306;
  else
    v306 = v303;
  v411 = v306;
  v308 = (unsigned __int8 *)(v301 + v306);
  v309 = (unint64_t)(v8 - 8);
  v17 = *a3;
  v310 = a3[1];
  v407 = (unint64_t)v308;
  if (v308 == a4)
    _X23 = a4 + 1;
  else
    _X23 = a4;
  v312 = _X23 + 1;
  v313 = (_DWORD)_X23 - (_DWORD)v301 - v303 > v304;
  v314 = (_DWORD)_X23 - v301 - v304;
  if (!v307 || !v313)
    v314 = *(_DWORD *)(a1 + 24);
  v315 = (_DWORD)_X23 - v301 - v314;
  if (v310 <= v315)
    v24 = v310;
  else
    v24 = 0;
  if (v310 <= v315)
    v316 = 0;
  else
    v316 = a3[1];
  if (v17 <= v315)
    v26 = v17;
  else
    v26 = 0;
  if (v17 <= v315)
    v17 = v316;
  if ((unint64_t)v312 >= v309)
    goto LABEL_557;
  v398 = v17;
  v317 = *(_QWORD *)(a1 + 48);
  v399 = a3;
  v403 = (v300 + 1);
  v318 = 32 - *(_DWORD *)(a1 + 200);
  v319 = (unint64_t)(v8 - 7);
  v320 = (unint64_t)(v8 - 3);
  v321 = (unint64_t)(v8 - 1);
  v322 = (unint64_t)(v8 - 32);
  while (1)
  {
LABEL_444:
    v323 = *(_DWORD *)_X23;
    v324 = *(_DWORD *)v312;
    v325 = (_DWORD)_X23 - v301;
    v326 = 4 * ((-1640531535 * *(_DWORD *)_X23) >> v318);
    v327 = *(unsigned int *)(v317 + v326);
    v328 = 4 * ((-1640531535 * *(_DWORD *)v312) >> v318);
    v329 = *(unsigned int *)(v317 + v328);
    __asm { PRFM            #0, [X23,#0x100] }
    *(_DWORD *)(v317 + v326) = (_DWORD)_X23 - v301;
    *(_DWORD *)(v317 + v328) = (_DWORD)v312 - v301;
    if ((_DWORD)v26)
    {
      v331 = &_X23[-v26 + 2];
      if (*(_DWORD *)v331 == *(_DWORD *)(_X23 + 2))
      {
        v332 = 0;
        v333 = _X23[1] == *(v331 - 1);
        if (_X23[1] == *(v331 - 1))
          v334 = 5;
        else
          v334 = 4;
        _X23 = &_X23[-v333 + 2];
        v335 = &v331[-v333];
        v336 = v26;
        v26 = v24;
        goto LABEL_450;
      }
    }
    if (v327 <= v411)
      break;
    v335 = (unsigned __int8 *)(v301 + v327);
    if (*(_DWORD *)(v301 + v327) != v323)
      break;
LABEL_462:
    v336 = ((_DWORD)_X23 - (_DWORD)v335);
    v332 = v336 + 2;
    if (_X23 <= a4 || (unint64_t)v335 <= v407)
    {
      v334 = 4;
    }
    else
    {
      v348 = v335 - 1;
      v349 = _X23 - 1;
      v334 = 4;
      while (*v349 == *v348)
      {
        ++v334;
        v350 = v348 - 1;
        v351 = v349 - 1;
        if (v349 > a4)
        {
          --v349;
          v66 = (unint64_t)v348-- > v407;
          if (v66)
            continue;
        }
        v335 = v350 + 1;
        _X23 = v351 + 1;
        goto LABEL_450;
      }
      v335 = v348 + 1;
      _X23 = v349 + 1;
    }
LABEL_450:
    v337 = (char *)&_X23[v334];
    v338 = &v335[v334];
    if (v319 <= (unint64_t)&_X23[v334])
    {
      v352 = &_X23[v334];
      if ((unint64_t)v337 < v320)
      {
LABEL_470:
        if (*(_DWORD *)v338 == *(_DWORD *)v352)
        {
          v352 += 4;
          v338 += 4;
        }
      }
    }
    else
    {
      v339 = *(_QWORD *)v337 ^ *(_QWORD *)v338;
      if (v339)
      {
        v340 = __clz(__rbit64(v339)) >> 3;
        v341 = _X23 - a4;
        v342 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)_X23 <= v322)
          goto LABEL_453;
        goto LABEL_481;
      }
      v363 = 0;
      v364 = (uint64_t)&_X23[v334 + 8];
      while (1)
      {
        v365 = (_QWORD *)(v364 + v363);
        if (v364 + v363 >= v319)
          break;
        v366 = *(_QWORD *)&v335[v334 + 8 + v363];
        v363 += 8;
        v367 = *v365 ^ v366;
        if (v367)
        {
          v340 = v363 + (__clz(__rbit64(v367)) >> 3);
          v341 = _X23 - a4;
          v342 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)_X23 > v322)
            goto LABEL_481;
          goto LABEL_453;
        }
      }
      v352 = &_X23[v334 + 8 + v363];
      v338 = &v335[v334 + 8 + v363];
      if ((unint64_t)v352 < v320)
        goto LABEL_470;
    }
    if ((unint64_t)v352 >= v321)
    {
      if (v352 >= v8)
        goto LABEL_480;
LABEL_478:
      if (*v338 == *v352)
        ++v352;
      goto LABEL_480;
    }
    if (*(unsigned __int16 *)v338 == *(unsigned __int16 *)v352)
    {
      v352 += 2;
      v338 += 2;
    }
    if (v352 < v8)
      goto LABEL_478;
LABEL_480:
    v340 = v352 - (unsigned __int8 *)v337;
    v341 = _X23 - a4;
    v342 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)_X23 <= v322)
    {
LABEL_453:
      *v342 = *(_OWORD *)a4;
      v343 = *(_QWORD *)(a2 + 24);
      if (v341 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v343 + v341;
        v356 = *(_QWORD *)(a2 + 8);
        goto LABEL_520;
      }
      v344 = (_OWORD *)(v343 + 16);
      v345 = v343 + v341;
      v346 = (__int128 *)(a4 + 16);
      do
      {
        v347 = *v346++;
        *v344++ = v347;
      }
      while ((unint64_t)v344 < v345);
      goto LABEL_518;
    }
LABEL_481:
    if ((unint64_t)a4 <= v322)
    {
      v354 = (char *)v342 + v322 - (_QWORD)a4;
      v357 = a4;
      v358 = v342;
      do
      {
        v359 = *(_OWORD *)v357;
        v357 += 16;
        *v358++ = v359;
      }
      while (v358 < (_OWORD *)v354);
      v353 = (char *)(v8 - 32);
      if (v322 >= (unint64_t)_X23)
        goto LABEL_518;
    }
    else
    {
      v353 = (char *)a4;
      v354 = v342;
      if (a4 >= _X23)
        goto LABEL_518;
    }
    if ((unint64_t)a4 <= v322)
      v360 = v8 - 32;
    else
      v360 = a4;
    v361 = _X23 - v360;
    if ((unint64_t)(_X23 - v360) < 8)
    {
      v362 = (unsigned __int8 *)v353;
      goto LABEL_517;
    }
    if ((unint64_t)((char *)v342 - (char *)a4) < 0x20)
    {
      v362 = (unsigned __int8 *)v353;
      goto LABEL_517;
    }
    if (v361 >= 0x20)
    {
      v368 = v361 & 0xFFFFFFFFFFFFFFE0;
      v369 = (__int128 *)(v353 + 16);
      v370 = (_OWORD *)((char *)v342 + v360 - a4 + 16);
      v371 = v361 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v372 = *v369;
        *(v370 - 1) = *(v369 - 1);
        *v370 = v372;
        v369 += 2;
        v370 += 2;
        v371 -= 32;
      }
      while (v371);
      if (v361 == v368)
        goto LABEL_518;
      if ((v361 & 0x18) == 0)
      {
        v362 = (unsigned __int8 *)&v353[v368];
        v354 += v368;
        do
        {
LABEL_517:
          v377 = *v362++;
          *v354++ = v377;
        }
        while (v362 < _X23);
        goto LABEL_518;
      }
    }
    else
    {
      v368 = 0;
    }
    v354 += v361 & 0xFFFFFFFFFFFFFFF8;
    v362 = (unsigned __int8 *)&v353[v361 & 0xFFFFFFFFFFFFFFF8];
    v373 = &v353[v368];
    v374 = (_QWORD *)((char *)v342 + &v360[v368] - a4);
    v375 = v368 - (v361 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v376 = *(_QWORD *)v373;
      v373 += 8;
      *v374++ = v376;
      v375 += 8;
    }
    while (v375);
    if (v361 != (v361 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_517;
LABEL_518:
    *(_QWORD *)(a2 + 24) += v341;
    v356 = *(_QWORD *)(a2 + 8);
    if (v341 >= 0x10000)
    {
      v378 = (unint64_t)(v356 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v378;
    }
LABEL_520:
    v379 = v340 + v334;
    v380 = v340 + v334 - 3;
    *(_WORD *)(v356 + 4) = v341;
    *(_DWORD *)v356 = v332 + 1;
    if (v380 >= 0x10000)
    {
      v381 = (unint64_t)(v356 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v381;
    }
    *(_WORD *)(v356 + 6) = v380;
    v382 = v356 + 8;
    *(_QWORD *)(a2 + 8) = v356 + 8;
    a4 = &_X23[v379];
    if ((unint64_t)&_X23[v379] <= v309)
    {
      *(_DWORD *)(v317 + 4 * ((-1640531535 * *(_DWORD *)(v301 + 2 + v325)) >> v318)) = v325 + 2;
      *(_DWORD *)(v317 + 4 * ((-1640531535 * *(_DWORD *)(a4 - 2)) >> v318)) = (_DWORD)a4 - 2 - v301;
      if (!(_DWORD)v26)
      {
        v24 = 0;
        v312 = a4 + 1;
        v26 = v336;
        _X23 += v379;
        if ((unint64_t)(a4 + 1) < v309)
          continue;
        goto LABEL_556;
      }
      v383 = v336;
LABEL_526:
      v24 = v383;
      v383 = v26;
      v384 = *(_DWORD *)a4;
      if (*(_DWORD *)a4 != *(_DWORD *)&a4[-v26])
      {
        v395 = v24;
        v24 = v26;
        v312 = a4 + 1;
        v26 = v395;
        _X23 = a4;
        if ((unint64_t)(a4 + 1) >= v309)
          goto LABEL_556;
        continue;
      }
      v385 = (char *)(a4 + 4);
      v386 = &a4[-v26 + 4];
      if (v319 <= (unint64_t)(a4 + 4))
      {
        v389 = a4 + 4;
        if ((unint64_t)v385 < v320)
        {
LABEL_532:
          if (*(_DWORD *)v386 == *(_DWORD *)v389)
          {
            v389 += 4;
            v386 += 4;
          }
        }
      }
      else
      {
        v387 = *(_QWORD *)v385 ^ *(_QWORD *)v386;
        if (v387)
        {
          v388 = __clz(__rbit64(v387)) >> 3;
          *(_DWORD *)(v317 + 4 * ((-1640531535 * v384) >> v318)) = (_DWORD)a4 - v301;
          if ((unint64_t)a4 > v322)
          {
LABEL_544:
            *(_WORD *)(v382 + 4) = 0;
            *(_DWORD *)v382 = 1;
            if (v388 + 1 >= 0x10000)
            {
              v390 = (unint64_t)(v382 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v390;
            }
            a4 += v388 + 4;
            *(_WORD *)(v382 + 6) = v388 + 1;
            v382 += 8;
            *(_QWORD *)(a2 + 8) = v382;
            v26 = v24;
            v336 = v383;
            if ((unint64_t)a4 > v309)
              goto LABEL_443;
            goto LABEL_526;
          }
LABEL_543:
          *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)a4;
          v382 = *(_QWORD *)(a2 + 8);
          goto LABEL_544;
        }
        v391 = (char *)(a4 + 12);
        while (1)
        {
          v392 = &v391[v387];
          if ((unint64_t)&v391[v387] >= v319)
            break;
          v393 = *(_QWORD *)&a4[v387 + 12 - v26];
          v387 += 8;
          v394 = *(_QWORD *)v392 ^ v393;
          if (v394)
          {
            v388 = v387 + (__clz(__rbit64(v394)) >> 3);
            *(_DWORD *)(v317 + 4 * ((-1640531535 * v384) >> v318)) = (_DWORD)a4 - v301;
            if ((unint64_t)a4 <= v322)
              goto LABEL_543;
            goto LABEL_544;
          }
        }
        v389 = &a4[v387 + 12];
        v386 = &v389[-v26];
        if ((unint64_t)v389 < v320)
          goto LABEL_532;
      }
      if ((unint64_t)v389 >= v321)
      {
        if (v389 >= v8)
          goto LABEL_542;
      }
      else
      {
        if (*(unsigned __int16 *)v386 == *(unsigned __int16 *)v389)
        {
          v389 += 2;
          v386 += 2;
        }
        if (v389 >= v8)
        {
LABEL_542:
          v388 = v389 - (unsigned __int8 *)v385;
          *(_DWORD *)(v317 + 4 * ((-1640531535 * v384) >> v318)) = (_DWORD)a4 - v301;
          if ((unint64_t)a4 > v322)
            goto LABEL_544;
          goto LABEL_543;
        }
      }
      if (*v386 == *v389)
        ++v389;
      goto LABEL_542;
    }
    v24 = v26;
LABEL_443:
    v312 = a4 + 1;
    v26 = v336;
    _X23 = a4;
    if ((unint64_t)(a4 + 1) >= v309)
      goto LABEL_556;
  }
  if (v329 > v411)
  {
    v335 = (unsigned __int8 *)(v301 + v329);
    if (*(_DWORD *)(v301 + v329) == v324)
    {
      _X23 = v312;
      goto LABEL_462;
    }
  }
  v355 = v403 + ((unint64_t)(_X23 - a4) >> 7);
  _X23 += v355;
  v312 += v355;
  if ((unint64_t)v312 < v309)
    goto LABEL_444;
LABEL_556:
  a3 = v399;
  v17 = v398;
LABEL_557:
  if ((_DWORD)v26)
    v396 = v26;
  else
    v396 = v17;
  if ((_DWORD)v24)
    v17 = v24;
  *a3 = v396;
  a3[1] = v17;
  return v8 - a4;
}

int64_t ZSTD_compressBlock_doubleFast(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  char *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int8 *v18;
  _BOOL4 v19;
  int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unsigned __int8 *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  _OWORD *v49;
  unint64_t v50;
  __int128 *v51;
  __int128 v52;
  uint64_t v53;
  _QWORD *v54;
  _DWORD *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _DWORD *v66;
  unint64_t v67;
  unint64_t v68;
  unsigned __int8 *v75;
  char *v76;
  _BYTE *v77;
  uint64_t v78;
  char *v79;
  _OWORD *v80;
  __int128 v81;
  char *v82;
  unint64_t v83;
  char *v84;
  char v85;
  unint64_t v86;
  __int16 v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  char *v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  _DWORD *v112;
  unint64_t v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  unint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  uint64_t v124;
  unint64_t v125;
  __int128 *v126;
  _OWORD *v127;
  unint64_t v128;
  __int128 v129;
  char *v130;
  _QWORD *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 *v135;
  unsigned __int8 *v136;
  uint64_t v137;
  unint64_t v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  unint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  _OWORD *v146;
  unint64_t v147;
  __int128 *v148;
  __int128 v149;
  char *v150;
  char *v151;
  __int128 v152;
  char *v153;
  unint64_t v154;
  char *v155;
  unint64_t v156;
  __int128 *v157;
  char *v158;
  unint64_t v159;
  __int128 v160;
  char *v161;
  char *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned __int8 *v166;
  unsigned __int8 *v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  unsigned int v174;
  unsigned int v175;
  _BOOL4 v176;
  uint64_t v177;
  _BOOL4 v178;
  unint64_t v179;
  unint64_t v180;
  unsigned int v181;
  unsigned int v182;
  unsigned __int8 *v183;
  _BOOL4 v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  BOOL v188;
  uint64_t v189;
  int v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  int v200;
  unint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  unsigned __int8 *v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  _OWORD *v209;
  uint64_t v210;
  _OWORD *v211;
  unint64_t v212;
  __int128 *v213;
  __int128 v214;
  uint64_t v215;
  _QWORD *v216;
  _DWORD *v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unsigned __int8 *v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  _DWORD *v228;
  unint64_t v229;
  unint64_t v230;
  unsigned __int8 *v233;
  char *v234;
  _BYTE *v235;
  uint64_t v236;
  char *v237;
  _OWORD *v238;
  __int128 v239;
  char *v240;
  unint64_t v241;
  char *v242;
  char v243;
  unint64_t v244;
  __int16 v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned __int8 *v250;
  unsigned __int8 *v251;
  char *v252;
  char *v253;
  unint64_t v254;
  unint64_t v255;
  char *v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  char *v260;
  char *v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unsigned __int8 *v265;
  unsigned __int8 *v266;
  uint64_t v267;
  unint64_t v268;
  _QWORD *v269;
  _DWORD *v270;
  unint64_t v271;
  unsigned __int8 *v272;
  unsigned __int8 *v273;
  unsigned __int8 *v274;
  unsigned __int8 *v275;
  unsigned __int8 *v276;
  unsigned __int8 *v277;
  unint64_t v278;
  uint64_t v279;
  unsigned __int8 *v280;
  unsigned __int8 *v281;
  uint64_t v282;
  unint64_t v283;
  __int128 *v284;
  _OWORD *v285;
  unint64_t v286;
  __int128 v287;
  char *v288;
  _QWORD *v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unsigned __int8 *v293;
  unsigned __int8 *v294;
  uint64_t v295;
  unint64_t v296;
  unsigned __int8 *v297;
  unsigned __int8 *v298;
  unint64_t v299;
  char *v300;
  char *v301;
  char *v302;
  uint64_t v303;
  _OWORD *v304;
  unint64_t v305;
  __int128 *v306;
  __int128 v307;
  char *v308;
  char *v309;
  __int128 v310;
  char *v311;
  unint64_t v312;
  char *v313;
  unint64_t v314;
  __int128 *v315;
  char *v316;
  unint64_t v317;
  __int128 v318;
  char *v319;
  char *v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unsigned __int8 *v324;
  unsigned __int8 *v325;
  uint64_t v326;
  unint64_t v327;
  char v328;
  unint64_t v329;
  uint64_t v330;
  int v331;
  unsigned int v332;
  unsigned int v333;
  _BOOL4 v334;
  uint64_t v335;
  _BOOL4 v336;
  unint64_t v337;
  unint64_t v338;
  unsigned int v339;
  unsigned int v340;
  unsigned __int8 *v341;
  _BOOL4 v342;
  int v343;
  unsigned int v344;
  unsigned int v345;
  BOOL v346;
  uint64_t v347;
  int v348;
  int v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  int v358;
  unint64_t v359;
  uint64_t v360;
  char *v361;
  char *v362;
  unsigned __int8 *v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  _OWORD *v367;
  uint64_t v368;
  _OWORD *v369;
  unint64_t v370;
  __int128 *v371;
  __int128 v372;
  uint64_t v373;
  _QWORD *v374;
  _DWORD *v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unsigned __int8 *v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  _DWORD *v386;
  unint64_t v387;
  unint64_t v388;
  unsigned __int8 *v391;
  char *v392;
  _BYTE *v393;
  uint64_t v394;
  char *v395;
  _OWORD *v396;
  __int128 v397;
  char *v398;
  unint64_t v399;
  char *v400;
  char v401;
  unint64_t v402;
  __int16 v403;
  unint64_t v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unsigned __int8 *v408;
  unsigned __int8 *v409;
  char *v410;
  char *v411;
  unint64_t v412;
  unint64_t v413;
  char *v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  char *v418;
  char *v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unsigned __int8 *v423;
  unsigned __int8 *v424;
  uint64_t v425;
  unint64_t v426;
  _QWORD *v427;
  _DWORD *v428;
  unint64_t v429;
  unsigned __int8 *v430;
  unsigned __int8 *v431;
  unsigned __int8 *v432;
  unsigned __int8 *v433;
  unsigned __int8 *v434;
  unsigned __int8 *v435;
  unint64_t v436;
  uint64_t v437;
  unsigned __int8 *v438;
  unsigned __int8 *v439;
  uint64_t v440;
  unint64_t v441;
  __int128 *v442;
  _OWORD *v443;
  unint64_t v444;
  __int128 v445;
  char *v446;
  _QWORD *v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unsigned __int8 *v451;
  unsigned __int8 *v452;
  uint64_t v453;
  unint64_t v454;
  unsigned __int8 *v455;
  unsigned __int8 *v456;
  unint64_t v457;
  char *v458;
  char *v459;
  char *v460;
  uint64_t v461;
  _OWORD *v462;
  unint64_t v463;
  __int128 *v464;
  __int128 v465;
  char *v466;
  char *v467;
  __int128 v468;
  char *v469;
  unint64_t v470;
  char *v471;
  unint64_t v472;
  __int128 *v473;
  char *v474;
  unint64_t v475;
  __int128 v476;
  char *v477;
  char *v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unsigned __int8 *v482;
  unsigned __int8 *v483;
  uint64_t v484;
  unint64_t v485;
  char v486;
  unint64_t v487;
  uint64_t v488;
  int v489;
  unsigned int v490;
  unsigned int v491;
  _BOOL4 v492;
  uint64_t v493;
  _BOOL4 v494;
  unint64_t v495;
  unint64_t v496;
  unsigned int v497;
  unsigned int v498;
  unsigned __int8 *v499;
  _BOOL4 v500;
  int v501;
  unsigned int v502;
  unsigned int v503;
  BOOL v504;
  uint64_t v505;
  int v506;
  int v507;
  uint64_t v508;
  unint64_t v509;
  unint64_t v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  uint64_t v514;
  int v515;
  uint64_t v516;
  uint64_t v517;
  char *v518;
  char *v519;
  unsigned __int8 *v520;
  unint64_t v521;
  unint64_t v522;
  unint64_t v523;
  _OWORD *v524;
  uint64_t v525;
  _OWORD *v526;
  unint64_t v527;
  __int128 *v528;
  __int128 v529;
  uint64_t v530;
  _QWORD *v531;
  _DWORD *v532;
  unint64_t v533;
  unint64_t v534;
  uint64_t v535;
  unsigned __int8 *v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  char *v542;
  _DWORD *v543;
  unint64_t v544;
  unint64_t v545;
  unsigned __int8 *v548;
  char *v549;
  _BYTE *v550;
  uint64_t v551;
  char *v552;
  _OWORD *v553;
  __int128 v554;
  char *v555;
  unint64_t v556;
  char *v557;
  char v558;
  unint64_t v559;
  __int16 v560;
  unint64_t v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  unsigned __int8 *v565;
  unsigned __int8 *v566;
  char *v567;
  char *v568;
  unint64_t v569;
  unint64_t v570;
  char *v571;
  unint64_t v572;
  uint64_t v573;
  char *v574;
  char *v575;
  uint64_t v576;
  unint64_t v577;
  uint64_t v578;
  unsigned __int8 *v579;
  unsigned __int8 *v580;
  uint64_t v581;
  unint64_t v582;
  _QWORD *v583;
  _DWORD *v584;
  unint64_t v585;
  unsigned __int8 *v586;
  unsigned __int8 *v587;
  unsigned __int8 *v588;
  unsigned __int8 *v589;
  unsigned __int8 *v590;
  unsigned __int8 *v591;
  unint64_t v592;
  uint64_t v593;
  unsigned __int8 *v594;
  unsigned __int8 *v595;
  uint64_t v596;
  unint64_t v597;
  __int128 *v598;
  _OWORD *v599;
  unint64_t v600;
  __int128 v601;
  char *v602;
  _QWORD *v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unsigned __int8 *v607;
  unsigned __int8 *v608;
  uint64_t v609;
  unint64_t v610;
  unsigned __int8 *v611;
  unsigned __int8 *v612;
  unint64_t v613;
  char *v614;
  char *v615;
  char *v616;
  uint64_t v617;
  _OWORD *v618;
  unint64_t v619;
  __int128 *v620;
  __int128 v621;
  char *v622;
  char *v623;
  __int128 v624;
  char *v625;
  unint64_t v626;
  char *v627;
  unint64_t v628;
  __int128 *v629;
  char *v630;
  unint64_t v631;
  __int128 v632;
  char *v633;
  char *v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  unsigned __int8 *v638;
  unsigned __int8 *v639;
  uint64_t v640;
  unint64_t v641;
  char v642;
  unint64_t v643;
  unsigned int v644;
  unsigned int v645;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  unsigned int v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  unint64_t v656;
  unint64_t v657;
  unint64_t v658;
  unint64_t v659;
  unint64_t v660;
  unint64_t v661;
  unint64_t v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  unint64_t v668;
  unint64_t v669;
  unint64_t v670;
  unint64_t v671;
  unsigned int *v672;
  unsigned int v673;
  unsigned int v674;
  unsigned int v675;
  unsigned int v676;

  v5 = *(_DWORD *)(a1 + 208);
  if (v5 == 5)
  {
    v172 = *(_QWORD *)(a1 + 8);
    v7 = &a4[a5];
    v173 = (_DWORD)a4 + a5 - v172;
    v174 = *(_DWORD *)(a1 + 24);
    v175 = 1 << *(_DWORD *)(a1 + 192);
    v176 = v173 - v174 > v175;
    LODWORD(v177) = v173 - v175;
    v178 = *(_DWORD *)(a1 + 32) == 0;
    if (v178 && v176)
      v177 = v177;
    else
      v177 = v174;
    v674 = v177;
    v179 = v172 + v177;
    v180 = (unint64_t)(v7 - 8);
    v181 = *a3;
    v182 = a3[1];
    if ((_DWORD)a4 == (_DWORD)v179)
      v183 = (unsigned __int8 *)(a4 + 1);
    else
      v183 = (unsigned __int8 *)a4;
    v184 = (_DWORD)v183 - (_DWORD)v172 - v174 > v175;
    v185 = (_DWORD)v183 - v172 - v175;
    if (!v178 || !v184)
      v185 = *(_DWORD *)(a1 + 24);
    v186 = (_DWORD)v183 - v172 - v185;
    if (v182 <= v186)
      v22 = (unsigned __int8 *)v182;
    else
      v22 = 0;
    if (v182 <= v186)
      v187 = 0;
    else
      v187 = a3[1];
    v188 = v181 > v186;
    if (v181 <= v186)
      v25 = v187;
    else
      v25 = *a3;
    if (v188)
      v26 = 0;
    else
      v26 = (unsigned __int8 *)v181;
    if ((unint64_t)v183 >= v180)
      goto LABEL_965;
    v651 = v25;
    v669 = v179;
    v672 = a3;
    v189 = *(_QWORD *)(a1 + 48);
    v190 = 64 - *(_DWORD *)(a1 + 200);
    v191 = 64 - *(_DWORD *)(a1 + 196);
    v192 = (unint64_t)(v7 - 7);
    v193 = (unint64_t)(v7 - 3);
    v194 = (unint64_t)(v7 - 1);
    v195 = *(_QWORD *)(a1 + 64);
    v196 = (unint64_t)(v7 - 32);
    v648 = v172 + 12;
    v665 = v172 - 1;
    v653 = v172 + 16;
    while (1)
    {
      v197 = *(_QWORD *)v183;
      v198 = 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)v183) >> v190);
      v199 = *(unsigned int *)(v189 + v198);
      v200 = (_DWORD)v183 - v172;
      v201 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v183) >> v191);
      v202 = *(unsigned int *)(v195 + v201);
      *(_DWORD *)(v195 + v201) = (_DWORD)v183 - v172;
      *(_DWORD *)(v189 + v198) = (_DWORD)v183 - v172;
      v203 = (char *)(v183 + 1);
      if (!(_DWORD)v26 || *(_DWORD *)&v203[-v26] != *(_DWORD *)(v183 + 1))
      {
        if (v199 > v674)
        {
          v215 = v172 + v199;
          if (*(_QWORD *)(v172 + v199) == v197)
          {
            v216 = v183 + 8;
            v217 = (_DWORD *)(v215 + 8);
            if (v192 <= (unint64_t)(v183 + 8))
            {
              v272 = v183 + 8;
              v219 = v669;
              if ((unint64_t)v216 < v193)
              {
LABEL_363:
                if (*v217 == *(_DWORD *)v272)
                {
                  v272 += 4;
                  ++v217;
                }
              }
            }
            else
            {
              v218 = *v216 ^ *(_QWORD *)v217;
              v219 = v669;
              if (v218)
              {
                v220 = (__clz(__rbit64(v218)) >> 3) + 8;
                v221 = &v183[-v215];
                if (v183 <= (unsigned __int8 *)a4)
                  goto LABEL_418;
LABEL_374:
                v273 = v183 - 1;
                v274 = (unsigned __int8 *)(v665 + v199);
                while (*v273 == *v274)
                {
                  ++v220;
                  v275 = v273 - 1;
                  if ((unint64_t)v274 > v219)
                  {
                    --v274;
                    v24 = v273-- > (unsigned __int8 *)a4;
                    if (v24)
                      continue;
                  }
                  goto LABEL_437;
                }
LABEL_398:
                v203 = (char *)(v273 + 1);
LABEL_438:
                v299 = v203 - a4;
                v300 = *(char **)(a2 + 24);
                if ((unint64_t)v203 <= v196)
                {
                  *(_OWORD *)v300 = *(_OWORD *)a4;
                  v303 = *(_QWORD *)(a2 + 24);
                  if (v299 > 0x10)
                  {
                    v304 = (_OWORD *)(v303 + 16);
                    v305 = v303 + v299;
                    v306 = (__int128 *)(a4 + 16);
                    do
                    {
                      v307 = *v306++;
                      *v304++ = v307;
                    }
                    while ((unint64_t)v304 < v305);
                    goto LABEL_480;
                  }
                  *(_QWORD *)(a2 + 24) = v303 + v299;
                  v236 = *(_QWORD *)(a2 + 8);
LABEL_482:
                  v245 = v220 - 3;
                  *(_WORD *)(v236 + 4) = v299;
                  *(_DWORD *)v236 = (_DWORD)v221 + 3;
                  v22 = v26;
                  v26 = v221;
                  if ((unint64_t)(v220 - 3) < 0x10000)
                    goto LABEL_323;
LABEL_322:
                  v247 = (unint64_t)(v236 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v247;
                  v26 = v221;
                  goto LABEL_323;
                }
                if ((unint64_t)a4 <= v196)
                {
                  v302 = &v300[v196 - (_QWORD)a4];
                  v308 = a4;
                  v309 = *(char **)(a2 + 24);
                  do
                  {
                    v310 = *(_OWORD *)v308;
                    v308 += 16;
                    *(_OWORD *)v309 = v310;
                    v309 += 16;
                  }
                  while (v309 < v302);
                  v301 = v7 - 32;
                  if (v196 >= (unint64_t)v203)
                    goto LABEL_480;
                }
                else
                {
                  v301 = a4;
                  v302 = *(char **)(a2 + 24);
                  if (a4 >= v203)
                  {
LABEL_480:
                    *(_QWORD *)(a2 + 24) += v299;
                    v236 = *(_QWORD *)(a2 + 8);
                    if (v299 >= 0x10000)
                    {
                      v329 = (unint64_t)(v236 - *(_QWORD *)a2) >> 3;
                      *(_DWORD *)(a2 + 72) = 1;
                      *(_DWORD *)(a2 + 76) = v329;
                    }
                    goto LABEL_482;
                  }
                }
                if ((unint64_t)a4 <= v196)
                  v311 = v7 - 32;
                else
                  v311 = a4;
                v312 = v203 - v311;
                if ((unint64_t)(v203 - v311) < 8)
                {
                  v313 = v301;
                  goto LABEL_479;
                }
                if ((unint64_t)(v300 - a4) < 0x20)
                {
                  v313 = v301;
                  goto LABEL_479;
                }
                if (v312 >= 0x20)
                {
                  v659 = v312 & 0xFFFFFFFFFFFFFFE0;
                  v315 = (__int128 *)(v301 + 16);
                  v316 = &v300[v311 - a4 + 16];
                  v317 = v312 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v318 = *v315;
                    *((_OWORD *)v316 - 1) = *(v315 - 1);
                    *(_OWORD *)v316 = v318;
                    v315 += 2;
                    v316 += 32;
                    v317 -= 32;
                  }
                  while (v317);
                  v314 = v312 & 0xFFFFFFFFFFFFFFE0;
                  if (v312 == v659)
                    goto LABEL_480;
                  if ((v312 & 0x18) == 0)
                  {
                    v313 = &v301[v659];
                    v302 += v659;
                    do
                    {
LABEL_479:
                      v328 = *v313++;
                      *v302++ = v328;
                    }
                    while (v313 < v203);
                    goto LABEL_480;
                  }
                }
                else
                {
                  v314 = 0;
                }
                v302 += v312 & 0xFFFFFFFFFFFFFFF8;
                v313 = &v301[v312 & 0xFFFFFFFFFFFFFFF8];
                v319 = &v301[v314];
                v320 = &v300[&v311[v314] - a4];
                v321 = v314 - (v312 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v322 = *(_QWORD *)v319;
                  v319 += 8;
                  *(_QWORD *)v320 = v322;
                  v320 += 8;
                  v321 += 8;
                }
                while (v321);
                if (v312 == (v312 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_480;
                goto LABEL_479;
              }
              v279 = 0;
              v280 = v183 + 16;
              while (1)
              {
                v281 = &v280[v279];
                if ((unint64_t)&v280[v279] >= v192)
                  break;
                v282 = *(_QWORD *)(v653 + v199 + v279);
                v279 += 8;
                v283 = *(_QWORD *)v281 ^ v282;
                if (v283)
                {
                  v220 = v279 + (__clz(__rbit64(v283)) >> 3) + 8;
                  v221 = &v183[-v215];
                  if (v183 > (unsigned __int8 *)a4)
                    goto LABEL_374;
                  goto LABEL_418;
                }
              }
              v272 = &v183[v279 + 16];
              v217 = (_DWORD *)(v653 + v199 + v279);
              if ((unint64_t)v272 < v193)
                goto LABEL_363;
            }
            if ((unint64_t)v272 >= v194)
            {
              if (v272 >= (unsigned __int8 *)v7)
                goto LABEL_373;
            }
            else
            {
              if (*(unsigned __int16 *)v217 == *(unsigned __int16 *)v272)
              {
                v272 += 2;
                v217 = (_DWORD *)((char *)v217 + 2);
              }
              if (v272 >= (unsigned __int8 *)v7)
              {
LABEL_373:
                v220 = v272 - v183;
                v221 = &v183[-v215];
                if (v183 <= (unsigned __int8 *)a4)
                  goto LABEL_418;
                goto LABEL_374;
              }
            }
            if (*(unsigned __int8 *)v217 == *v272)
              ++v272;
            goto LABEL_373;
          }
        }
        if (v202 <= v674 || (v222 = v172 + v202, *(_DWORD *)(v172 + v202) != *(_DWORD *)v183))
        {
          _X10 = &v183[(v183 - (unsigned __int8 *)a4) >> 8];
          v183 = _X10 + 1;
          _X10 += 257;
          __asm { PRFM            #0, [X10] }
          goto LABEL_268;
        }
        v223 = *(_QWORD *)v203;
        v224 = 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)v203) >> v190);
        v225 = *(unsigned int *)(v189 + v224);
        *(_DWORD *)(v189 + v224) = v200 + 1;
        if (v225 > v674)
        {
          v226 = v172 + v225;
          if (*(_QWORD *)(v172 + v225) == v223)
          {
            v227 = (char *)(v183 + 9);
            v228 = (_DWORD *)(v226 + 8);
            if (v192 <= (unint64_t)(v183 + 9))
            {
              v297 = v183 + 9;
              v230 = v669;
              if ((unint64_t)v227 < v193)
              {
LABEL_422:
                if (*v228 == *(_DWORD *)v297)
                {
                  v297 += 4;
                  ++v228;
                }
              }
            }
            else
            {
              v229 = *(_QWORD *)v227 ^ *(_QWORD *)v228;
              v230 = v669;
              if (v229)
              {
                v220 = (__clz(__rbit64(v229)) >> 3) + 8;
                v221 = (unsigned __int8 *)&v203[-v226];
                if (v203 <= a4)
                  goto LABEL_438;
                goto LABEL_433;
              }
              v323 = 0;
              v324 = v183 + 17;
              while (1)
              {
                v325 = &v324[v323];
                if ((unint64_t)&v324[v323] >= v192)
                  break;
                v326 = *(_QWORD *)(v653 + v225 + v323);
                v323 += 8;
                v327 = *(_QWORD *)v325 ^ v326;
                if (v327)
                {
                  v220 = v323 + (__clz(__rbit64(v327)) >> 3) + 8;
                  v221 = (unsigned __int8 *)&v203[-v226];
                  if (v203 > a4)
                    goto LABEL_433;
                  goto LABEL_438;
                }
              }
              v297 = &v183[v323 + 17];
              v228 = (_DWORD *)(v653 + v225 + v323);
              if ((unint64_t)v297 < v193)
                goto LABEL_422;
            }
            if ((unint64_t)v297 >= v194)
            {
              if (v297 >= (unsigned __int8 *)v7)
                goto LABEL_432;
            }
            else
            {
              if (*(unsigned __int16 *)v228 == *(unsigned __int16 *)v297)
              {
                v297 += 2;
                v228 = (_DWORD *)((char *)v228 + 2);
              }
              if (v297 >= (unsigned __int8 *)v7)
              {
LABEL_432:
                v220 = v297 - (unsigned __int8 *)v227 + 8;
                v221 = (unsigned __int8 *)&v203[-v226];
                if (v203 <= a4)
                  goto LABEL_438;
LABEL_433:
                v298 = (unsigned __int8 *)(v665 + v225);
                while (*v183 == *v298)
                {
                  ++v220;
                  v275 = v183 - 1;
                  if (v183 > (unsigned __int8 *)a4)
                  {
                    --v183;
                    v24 = (unint64_t)v298-- > v230;
                    if (v24)
                      continue;
                  }
                  goto LABEL_437;
                }
                v203 = (char *)(v183 + 1);
                goto LABEL_438;
              }
            }
            if (*(unsigned __int8 *)v228 == *v297)
              ++v297;
            goto LABEL_432;
          }
        }
        v269 = v183 + 4;
        v270 = (_DWORD *)(v222 + 4);
        if (v192 <= (unint64_t)(v183 + 4))
        {
          v276 = v183 + 4;
          if ((unint64_t)v269 < v193)
          {
LABEL_382:
            if (*v270 == *(_DWORD *)v276)
            {
              v276 += 4;
              ++v270;
            }
          }
        }
        else
        {
          v271 = *v269 ^ *(_QWORD *)v270;
          if (v271)
          {
            v220 = (__clz(__rbit64(v271)) >> 3) + 4;
            v221 = &v183[-v222];
            if (v183 <= (unsigned __int8 *)a4)
            {
LABEL_418:
              v203 = (char *)v183;
              goto LABEL_438;
            }
LABEL_393:
            v273 = v183 - 1;
            v277 = (unsigned __int8 *)(v665 + v202);
            while (*v273 == *v277)
            {
              ++v220;
              v275 = v273 - 1;
              if ((unint64_t)v277 > v669)
              {
                --v277;
                v24 = v273-- > (unsigned __int8 *)a4;
                if (v24)
                  continue;
              }
LABEL_437:
              v203 = (char *)(v275 + 1);
              goto LABEL_438;
            }
            goto LABEL_398;
          }
          v292 = 0;
          v293 = v183 + 12;
          while (1)
          {
            v294 = &v293[v292];
            if ((unint64_t)&v293[v292] >= v192)
              break;
            v295 = *(_QWORD *)(v648 + v202 + v292);
            v292 += 8;
            v296 = *(_QWORD *)v294 ^ v295;
            if (v296)
            {
              v220 = v292 + (__clz(__rbit64(v296)) >> 3) + 4;
              v221 = &v183[-v222];
              if (v183 > (unsigned __int8 *)a4)
                goto LABEL_393;
              goto LABEL_418;
            }
          }
          v276 = &v183[v292 + 12];
          v270 = (_DWORD *)(v648 + v202 + v292);
          if ((unint64_t)v276 < v193)
            goto LABEL_382;
        }
        if ((unint64_t)v276 >= v194)
        {
          if (v276 >= (unsigned __int8 *)v7)
            goto LABEL_392;
        }
        else
        {
          if (*(unsigned __int16 *)v270 == *(unsigned __int16 *)v276)
          {
            v276 += 2;
            v270 = (_DWORD *)((char *)v270 + 2);
          }
          if (v276 >= (unsigned __int8 *)v7)
          {
LABEL_392:
            v220 = v276 - v183;
            v221 = &v183[-v222];
            if (v183 <= (unsigned __int8 *)a4)
              goto LABEL_418;
            goto LABEL_393;
          }
        }
        if (*(unsigned __int8 *)v270 == *v276)
          ++v276;
        goto LABEL_392;
      }
      v204 = (char *)(v183 + 5);
      v205 = &v183[-v26 + 5];
      if (v192 <= (unint64_t)(v183 + 5))
      {
        v233 = v183 + 5;
        if ((unint64_t)v204 < v193)
        {
LABEL_294:
          if (*(_DWORD *)v205 == *(_DWORD *)v233)
          {
            v233 += 4;
            v205 += 4;
          }
        }
      }
      else
      {
        v206 = *(_QWORD *)v204 ^ *(_QWORD *)v205;
        if (v206)
        {
          v207 = __clz(__rbit64(v206)) >> 3;
          v208 = v203 - a4;
          v209 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)v203 <= v196)
            goto LABEL_274;
          goto LABEL_305;
        }
        v264 = 0;
        v265 = v183 + 13;
        while (1)
        {
          v266 = &v265[v264];
          if ((unint64_t)&v265[v264] >= v192)
            break;
          v267 = *(_QWORD *)&v183[v264 + 13 - v26];
          v264 += 8;
          v268 = *(_QWORD *)v266 ^ v267;
          if (v268)
          {
            v207 = v264 + (__clz(__rbit64(v268)) >> 3);
            v208 = v203 - a4;
            v209 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v203 > v196)
              goto LABEL_305;
            goto LABEL_274;
          }
        }
        v233 = &v183[v264 + 13];
        v205 = &v233[-v26];
        if ((unint64_t)v233 < v193)
          goto LABEL_294;
      }
      if ((unint64_t)v233 >= v194)
        break;
      if (*(unsigned __int16 *)v205 == *(unsigned __int16 *)v233)
      {
        v233 += 2;
        v205 += 2;
      }
      if (v233 < (unsigned __int8 *)v7)
        goto LABEL_302;
LABEL_304:
      v207 = v233 - (unsigned __int8 *)v204;
      v208 = v203 - a4;
      v209 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v203 <= v196)
      {
LABEL_274:
        *v209 = *(_OWORD *)a4;
        v210 = *(_QWORD *)(a2 + 24);
        if (v208 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v210 + v208;
          v236 = *(_QWORD *)(a2 + 8);
          goto LABEL_321;
        }
        v211 = (_OWORD *)(v210 + 16);
        v212 = v210 + v208;
        v213 = (__int128 *)(a4 + 16);
        do
        {
          v214 = *v213++;
          *v211++ = v214;
        }
        while ((unint64_t)v211 < v212);
        goto LABEL_319;
      }
LABEL_305:
      if ((unint64_t)a4 <= v196)
      {
        v235 = (char *)v209 + v196 - (_QWORD)a4;
        v237 = a4;
        v238 = v209;
        do
        {
          v239 = *(_OWORD *)v237;
          v237 += 16;
          *v238++ = v239;
        }
        while (v238 < (_OWORD *)v235);
        v234 = v7 - 32;
        if (v196 >= (unint64_t)v203)
          goto LABEL_319;
      }
      else
      {
        v234 = a4;
        v235 = v209;
        if (a4 >= v203)
          goto LABEL_319;
      }
      if ((unint64_t)a4 <= v196)
        v240 = v7 - 32;
      else
        v240 = a4;
      v241 = v183 - (unsigned __int8 *)v240 + 1;
      if (v241 < 8 || (unint64_t)((char *)v209 - a4) < 0x20)
      {
        v242 = v234;
        goto LABEL_318;
      }
      if (v241 >= 0x20)
      {
        v658 = v241 & 0xFFFFFFFFFFFFFFE0;
        v284 = (__int128 *)(v234 + 16);
        v285 = (_OWORD *)((char *)v209 + v240 - a4 + 16);
        v286 = v241 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v287 = *v284;
          *(v285 - 1) = *(v284 - 1);
          *v285 = v287;
          v284 += 2;
          v285 += 2;
          v286 -= 32;
        }
        while (v286);
        v278 = v241 & 0xFFFFFFFFFFFFFFE0;
        if (v241 == v658)
          goto LABEL_319;
        if ((v241 & 0x18) == 0)
        {
          v242 = &v234[v658];
          v235 += v658;
          do
          {
LABEL_318:
            v243 = *v242++;
            *v235++ = v243;
          }
          while (v242 != &v234[v241]);
          goto LABEL_319;
        }
      }
      else
      {
        v278 = 0;
      }
      v235 += v241 & 0xFFFFFFFFFFFFFFF8;
      v242 = &v234[v241 & 0xFFFFFFFFFFFFFFF8];
      v288 = &v234[v278];
      v289 = (_QWORD *)((char *)v209 + &v240[v278] - a4);
      v290 = v278 - (v241 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v291 = *(_QWORD *)v288;
        v288 += 8;
        *v289++ = v291;
        v290 += 8;
      }
      while (v290);
      if (v241 != (v241 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_318;
LABEL_319:
      *(_QWORD *)(a2 + 24) += v208;
      v236 = *(_QWORD *)(a2 + 8);
      if (v208 >= 0x10000)
      {
        v244 = (unint64_t)(v236 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v244;
      }
LABEL_321:
      v220 = v207 + 4;
      v245 = v207 + 1;
      *(_WORD *)(v236 + 4) = v208;
      *(_DWORD *)v236 = 1;
      v246 = (v207 + 1) >> 16;
      v221 = v26;
      if (v246)
        goto LABEL_322;
LABEL_323:
      *(_WORD *)(v236 + 6) = v245;
      v248 = v236 + 8;
      *(_QWORD *)(a2 + 8) = v236 + 8;
      a4 = &v203[v220];
      if ((unint64_t)&v203[v220] <= v180)
      {
        v249 = *(_QWORD *)(v172 + (v200 + 2));
        *(_DWORD *)(v189 + 4 * ((0xCF1BBCDCB7A56463 * v249) >> v190)) = v200 + 2;
        *(_DWORD *)(v189 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(a4 - 2)) >> v190)) = (_DWORD)a4 - 2 - v172;
        *(_DWORD *)(v195 + 4 * ((0xCF1BBCDCBB000000 * v249) >> v191)) = v200 + 2;
        *(_DWORD *)(v195 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(a4 - 1)) >> v191)) = (_DWORD)a4 - 1 - v172;
        v250 = v26;
        v251 = v22;
        while (1)
        {
          v26 = v251;
          v251 = v250;
          if (!(_DWORD)v26 || *(_DWORD *)a4 != *(_DWORD *)&a4[-v26])
          {
            v22 = v26;
            v26 = v250;
            goto LABEL_267;
          }
          v252 = a4 + 4;
          v253 = &a4[-v26 + 4];
          if (v192 <= (unint64_t)(a4 + 4))
            break;
          v254 = *(_QWORD *)v252 ^ *(_QWORD *)v253;
          if (!v254)
          {
            v259 = 0;
            v260 = a4 + 12;
            while (1)
            {
              v261 = &v260[v259];
              if ((unint64_t)&v260[v259] >= v192)
                break;
              v262 = *(_QWORD *)&a4[v259 + 12 - v26];
              v259 += 8;
              v263 = *(_QWORD *)v261 ^ v262;
              if (v263)
              {
                v255 = v259 + (__clz(__rbit64(v263)) >> 3);
                goto LABEL_343;
              }
            }
            v256 = &a4[v259 + 12];
            v253 = &v256[-v26];
            if ((unint64_t)v256 >= v193)
            {
LABEL_334:
              if ((unint64_t)v256 >= v194)
              {
                if (v256 < v7)
                  goto LABEL_340;
              }
              else
              {
                if (*(unsigned __int16 *)v253 == *(unsigned __int16 *)v256)
                {
                  v256 += 2;
                  v253 += 2;
                }
                if (v256 >= v7)
                  goto LABEL_342;
LABEL_340:
                if (*v253 == *v256)
                  ++v256;
              }
LABEL_342:
              v255 = v256 - v252;
              goto LABEL_343;
            }
LABEL_332:
            if (*(_DWORD *)v253 == *(_DWORD *)v256)
            {
              v256 += 4;
              v253 += 4;
            }
            goto LABEL_334;
          }
          v255 = __clz(__rbit64(v254)) >> 3;
LABEL_343:
          v257 = *(_QWORD *)a4;
          *(_DWORD *)(v195 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)a4) >> v191)) = (_DWORD)a4 - v172;
          *(_DWORD *)(v189 + 4 * ((0xCF1BBCDCB7A56463 * v257) >> v190)) = (_DWORD)a4 - v172;
          if ((unint64_t)a4 <= v196)
          {
            *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)a4;
            v248 = *(_QWORD *)(a2 + 8);
          }
          *(_WORD *)(v248 + 4) = 0;
          *(_DWORD *)v248 = 1;
          if (v255 + 1 >= 0x10000)
          {
            v258 = (unint64_t)(v248 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v258;
          }
          *(_WORD *)(v248 + 6) = v255 + 1;
          v248 += 8;
          a4 += v255 + 4;
          *(_QWORD *)(a2 + 8) = v248;
          v250 = v26;
          v22 = v251;
          v183 = (unsigned __int8 *)a4;
          if ((unint64_t)a4 > v180)
            goto LABEL_268;
        }
        v256 = a4 + 4;
        if ((unint64_t)v252 >= v193)
          goto LABEL_334;
        goto LABEL_332;
      }
LABEL_267:
      v183 = (unsigned __int8 *)a4;
LABEL_268:
      if ((unint64_t)v183 >= v180)
      {
LABEL_964:
        a3 = v672;
        v25 = v651;
        goto LABEL_965;
      }
    }
    if (v233 >= (unsigned __int8 *)v7)
      goto LABEL_304;
LABEL_302:
    if (*v205 == *v233)
      ++v233;
    goto LABEL_304;
  }
  if (v5 == 6)
  {
    v330 = *(_QWORD *)(a1 + 8);
    v7 = &a4[a5];
    v331 = (_DWORD)a4 + a5 - v330;
    v332 = *(_DWORD *)(a1 + 24);
    v333 = 1 << *(_DWORD *)(a1 + 192);
    v334 = v331 - v332 > v333;
    LODWORD(v335) = v331 - v333;
    v336 = *(_DWORD *)(a1 + 32) == 0;
    if (v336 && v334)
      v335 = v335;
    else
      v335 = v332;
    v675 = v335;
    v337 = v330 + v335;
    v338 = (unint64_t)(v7 - 8);
    v339 = *a3;
    v340 = a3[1];
    if ((_DWORD)a4 == (_DWORD)v337)
      v341 = (unsigned __int8 *)(a4 + 1);
    else
      v341 = (unsigned __int8 *)a4;
    v342 = (_DWORD)v341 - (_DWORD)v330 - v332 > v333;
    v343 = (_DWORD)v341 - v330 - v333;
    if (!v336 || !v342)
      v343 = *(_DWORD *)(a1 + 24);
    v344 = (_DWORD)v341 - v330 - v343;
    if (v340 <= v344)
      v22 = (unsigned __int8 *)v340;
    else
      v22 = 0;
    if (v340 <= v344)
      v345 = 0;
    else
      v345 = a3[1];
    v346 = v339 > v344;
    if (v339 <= v344)
      v25 = v345;
    else
      v25 = *a3;
    if (v346)
      v26 = 0;
    else
      v26 = (unsigned __int8 *)v339;
    if ((unint64_t)v341 >= v338)
      goto LABEL_965;
    v651 = v25;
    v670 = v337;
    v672 = a3;
    v347 = *(_QWORD *)(a1 + 48);
    v348 = 64 - *(_DWORD *)(a1 + 200);
    v349 = 64 - *(_DWORD *)(a1 + 196);
    v350 = (unint64_t)(v7 - 7);
    v351 = (unint64_t)(v7 - 3);
    v352 = (unint64_t)(v7 - 1);
    v353 = *(_QWORD *)(a1 + 64);
    v354 = (unint64_t)(v7 - 32);
    v649 = v330 + 12;
    v666 = v330 - 1;
    v654 = v330 + 16;
    while (1)
    {
      v355 = *(_QWORD *)v341;
      v356 = 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)v341) >> v348);
      v357 = *(unsigned int *)(v347 + v356);
      v358 = (_DWORD)v341 - v330;
      v359 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v341) >> v349);
      v360 = *(unsigned int *)(v353 + v359);
      *(_DWORD *)(v353 + v359) = (_DWORD)v341 - v330;
      *(_DWORD *)(v347 + v356) = (_DWORD)v341 - v330;
      v361 = (char *)(v341 + 1);
      if (!(_DWORD)v26 || *(_DWORD *)&v361[-v26] != *(_DWORD *)(v341 + 1))
      {
        if (v357 > v675)
        {
          v373 = v330 + v357;
          if (*(_QWORD *)(v330 + v357) == v355)
          {
            v374 = v341 + 8;
            v375 = (_DWORD *)(v373 + 8);
            if (v350 <= (unint64_t)(v341 + 8))
            {
              v430 = v341 + 8;
              v377 = v670;
              if ((unint64_t)v374 < v351)
              {
LABEL_603:
                if (*v375 == *(_DWORD *)v430)
                {
                  v430 += 4;
                  ++v375;
                }
              }
            }
            else
            {
              v376 = *v374 ^ *(_QWORD *)v375;
              v377 = v670;
              if (v376)
              {
                v378 = (__clz(__rbit64(v376)) >> 3) + 8;
                v379 = &v341[-v373];
                if (v341 <= (unsigned __int8 *)a4)
                  goto LABEL_658;
LABEL_614:
                v431 = v341 - 1;
                v432 = (unsigned __int8 *)(v666 + v357);
                while (*v431 == *v432)
                {
                  ++v378;
                  v433 = v431 - 1;
                  if ((unint64_t)v432 > v377)
                  {
                    --v432;
                    v24 = v431-- > (unsigned __int8 *)a4;
                    if (v24)
                      continue;
                  }
                  goto LABEL_677;
                }
LABEL_638:
                v361 = (char *)(v431 + 1);
LABEL_678:
                v457 = v361 - a4;
                v458 = *(char **)(a2 + 24);
                if ((unint64_t)v361 <= v354)
                {
                  *(_OWORD *)v458 = *(_OWORD *)a4;
                  v461 = *(_QWORD *)(a2 + 24);
                  if (v457 > 0x10)
                  {
                    v462 = (_OWORD *)(v461 + 16);
                    v463 = v461 + v457;
                    v464 = (__int128 *)(a4 + 16);
                    do
                    {
                      v465 = *v464++;
                      *v462++ = v465;
                    }
                    while ((unint64_t)v462 < v463);
                    goto LABEL_720;
                  }
                  *(_QWORD *)(a2 + 24) = v461 + v457;
                  v394 = *(_QWORD *)(a2 + 8);
LABEL_722:
                  v403 = v378 - 3;
                  *(_WORD *)(v394 + 4) = v457;
                  *(_DWORD *)v394 = (_DWORD)v379 + 3;
                  v22 = v26;
                  v26 = v379;
                  if ((unint64_t)(v378 - 3) < 0x10000)
                    goto LABEL_563;
LABEL_562:
                  v405 = (unint64_t)(v394 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v405;
                  v26 = v379;
                  goto LABEL_563;
                }
                if ((unint64_t)a4 <= v354)
                {
                  v460 = &v458[v354 - (_QWORD)a4];
                  v466 = a4;
                  v467 = *(char **)(a2 + 24);
                  do
                  {
                    v468 = *(_OWORD *)v466;
                    v466 += 16;
                    *(_OWORD *)v467 = v468;
                    v467 += 16;
                  }
                  while (v467 < v460);
                  v459 = v7 - 32;
                  if (v354 >= (unint64_t)v361)
                    goto LABEL_720;
                }
                else
                {
                  v459 = a4;
                  v460 = *(char **)(a2 + 24);
                  if (a4 >= v361)
                  {
LABEL_720:
                    *(_QWORD *)(a2 + 24) += v457;
                    v394 = *(_QWORD *)(a2 + 8);
                    if (v457 >= 0x10000)
                    {
                      v487 = (unint64_t)(v394 - *(_QWORD *)a2) >> 3;
                      *(_DWORD *)(a2 + 72) = 1;
                      *(_DWORD *)(a2 + 76) = v487;
                    }
                    goto LABEL_722;
                  }
                }
                if ((unint64_t)a4 <= v354)
                  v469 = v7 - 32;
                else
                  v469 = a4;
                v470 = v361 - v469;
                if ((unint64_t)(v361 - v469) < 8)
                {
                  v471 = v459;
                  goto LABEL_719;
                }
                if ((unint64_t)(v458 - a4) < 0x20)
                {
                  v471 = v459;
                  goto LABEL_719;
                }
                if (v470 >= 0x20)
                {
                  v661 = v470 & 0xFFFFFFFFFFFFFFE0;
                  v473 = (__int128 *)(v459 + 16);
                  v474 = &v458[v469 - a4 + 16];
                  v475 = v470 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v476 = *v473;
                    *((_OWORD *)v474 - 1) = *(v473 - 1);
                    *(_OWORD *)v474 = v476;
                    v473 += 2;
                    v474 += 32;
                    v475 -= 32;
                  }
                  while (v475);
                  v472 = v470 & 0xFFFFFFFFFFFFFFE0;
                  if (v470 == v661)
                    goto LABEL_720;
                  if ((v470 & 0x18) == 0)
                  {
                    v471 = &v459[v661];
                    v460 += v661;
                    do
                    {
LABEL_719:
                      v486 = *v471++;
                      *v460++ = v486;
                    }
                    while (v471 < v361);
                    goto LABEL_720;
                  }
                }
                else
                {
                  v472 = 0;
                }
                v460 += v470 & 0xFFFFFFFFFFFFFFF8;
                v471 = &v459[v470 & 0xFFFFFFFFFFFFFFF8];
                v477 = &v459[v472];
                v478 = &v458[&v469[v472] - a4];
                v479 = v472 - (v470 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v480 = *(_QWORD *)v477;
                  v477 += 8;
                  *(_QWORD *)v478 = v480;
                  v478 += 8;
                  v479 += 8;
                }
                while (v479);
                if (v470 == (v470 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_720;
                goto LABEL_719;
              }
              v437 = 0;
              v438 = v341 + 16;
              while (1)
              {
                v439 = &v438[v437];
                if ((unint64_t)&v438[v437] >= v350)
                  break;
                v440 = *(_QWORD *)(v654 + v357 + v437);
                v437 += 8;
                v441 = *(_QWORD *)v439 ^ v440;
                if (v441)
                {
                  v378 = v437 + (__clz(__rbit64(v441)) >> 3) + 8;
                  v379 = &v341[-v373];
                  if (v341 > (unsigned __int8 *)a4)
                    goto LABEL_614;
                  goto LABEL_658;
                }
              }
              v430 = &v341[v437 + 16];
              v375 = (_DWORD *)(v654 + v357 + v437);
              if ((unint64_t)v430 < v351)
                goto LABEL_603;
            }
            if ((unint64_t)v430 >= v352)
            {
              if (v430 >= (unsigned __int8 *)v7)
                goto LABEL_613;
            }
            else
            {
              if (*(unsigned __int16 *)v375 == *(unsigned __int16 *)v430)
              {
                v430 += 2;
                v375 = (_DWORD *)((char *)v375 + 2);
              }
              if (v430 >= (unsigned __int8 *)v7)
              {
LABEL_613:
                v378 = v430 - v341;
                v379 = &v341[-v373];
                if (v341 <= (unsigned __int8 *)a4)
                  goto LABEL_658;
                goto LABEL_614;
              }
            }
            if (*(unsigned __int8 *)v375 == *v430)
              ++v430;
            goto LABEL_613;
          }
        }
        if (v360 <= v675 || (v380 = v330 + v360, *(_DWORD *)(v330 + v360) != *(_DWORD *)v341))
        {
          _X10 = &v341[(v341 - (unsigned __int8 *)a4) >> 8];
          v341 = _X10 + 1;
          _X10 += 257;
          __asm { PRFM            #0, [X10] }
          goto LABEL_508;
        }
        v381 = *(_QWORD *)v361;
        v382 = 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)v361) >> v348);
        v383 = *(unsigned int *)(v347 + v382);
        *(_DWORD *)(v347 + v382) = v358 + 1;
        if (v383 > v675)
        {
          v384 = v330 + v383;
          if (*(_QWORD *)(v330 + v383) == v381)
          {
            v385 = (char *)(v341 + 9);
            v386 = (_DWORD *)(v384 + 8);
            if (v350 <= (unint64_t)(v341 + 9))
            {
              v455 = v341 + 9;
              v388 = v670;
              if ((unint64_t)v385 < v351)
              {
LABEL_662:
                if (*v386 == *(_DWORD *)v455)
                {
                  v455 += 4;
                  ++v386;
                }
              }
            }
            else
            {
              v387 = *(_QWORD *)v385 ^ *(_QWORD *)v386;
              v388 = v670;
              if (v387)
              {
                v378 = (__clz(__rbit64(v387)) >> 3) + 8;
                v379 = (unsigned __int8 *)&v361[-v384];
                if (v361 <= a4)
                  goto LABEL_678;
                goto LABEL_673;
              }
              v481 = 0;
              v482 = v341 + 17;
              while (1)
              {
                v483 = &v482[v481];
                if ((unint64_t)&v482[v481] >= v350)
                  break;
                v484 = *(_QWORD *)(v654 + v383 + v481);
                v481 += 8;
                v485 = *(_QWORD *)v483 ^ v484;
                if (v485)
                {
                  v378 = v481 + (__clz(__rbit64(v485)) >> 3) + 8;
                  v379 = (unsigned __int8 *)&v361[-v384];
                  if (v361 > a4)
                    goto LABEL_673;
                  goto LABEL_678;
                }
              }
              v455 = &v341[v481 + 17];
              v386 = (_DWORD *)(v654 + v383 + v481);
              if ((unint64_t)v455 < v351)
                goto LABEL_662;
            }
            if ((unint64_t)v455 >= v352)
            {
              if (v455 >= (unsigned __int8 *)v7)
                goto LABEL_672;
            }
            else
            {
              if (*(unsigned __int16 *)v386 == *(unsigned __int16 *)v455)
              {
                v455 += 2;
                v386 = (_DWORD *)((char *)v386 + 2);
              }
              if (v455 >= (unsigned __int8 *)v7)
              {
LABEL_672:
                v378 = v455 - (unsigned __int8 *)v385 + 8;
                v379 = (unsigned __int8 *)&v361[-v384];
                if (v361 <= a4)
                  goto LABEL_678;
LABEL_673:
                v456 = (unsigned __int8 *)(v666 + v383);
                while (*v341 == *v456)
                {
                  ++v378;
                  v433 = v341 - 1;
                  if (v341 > (unsigned __int8 *)a4)
                  {
                    --v341;
                    v24 = (unint64_t)v456-- > v388;
                    if (v24)
                      continue;
                  }
                  goto LABEL_677;
                }
                v361 = (char *)(v341 + 1);
                goto LABEL_678;
              }
            }
            if (*(unsigned __int8 *)v386 == *v455)
              ++v455;
            goto LABEL_672;
          }
        }
        v427 = v341 + 4;
        v428 = (_DWORD *)(v380 + 4);
        if (v350 <= (unint64_t)(v341 + 4))
        {
          v434 = v341 + 4;
          if ((unint64_t)v427 < v351)
          {
LABEL_622:
            if (*v428 == *(_DWORD *)v434)
            {
              v434 += 4;
              ++v428;
            }
          }
        }
        else
        {
          v429 = *v427 ^ *(_QWORD *)v428;
          if (v429)
          {
            v378 = (__clz(__rbit64(v429)) >> 3) + 4;
            v379 = &v341[-v380];
            if (v341 <= (unsigned __int8 *)a4)
            {
LABEL_658:
              v361 = (char *)v341;
              goto LABEL_678;
            }
LABEL_633:
            v431 = v341 - 1;
            v435 = (unsigned __int8 *)(v666 + v360);
            while (*v431 == *v435)
            {
              ++v378;
              v433 = v431 - 1;
              if ((unint64_t)v435 > v670)
              {
                --v435;
                v24 = v431-- > (unsigned __int8 *)a4;
                if (v24)
                  continue;
              }
LABEL_677:
              v361 = (char *)(v433 + 1);
              goto LABEL_678;
            }
            goto LABEL_638;
          }
          v450 = 0;
          v451 = v341 + 12;
          while (1)
          {
            v452 = &v451[v450];
            if ((unint64_t)&v451[v450] >= v350)
              break;
            v453 = *(_QWORD *)(v649 + v360 + v450);
            v450 += 8;
            v454 = *(_QWORD *)v452 ^ v453;
            if (v454)
            {
              v378 = v450 + (__clz(__rbit64(v454)) >> 3) + 4;
              v379 = &v341[-v380];
              if (v341 > (unsigned __int8 *)a4)
                goto LABEL_633;
              goto LABEL_658;
            }
          }
          v434 = &v341[v450 + 12];
          v428 = (_DWORD *)(v649 + v360 + v450);
          if ((unint64_t)v434 < v351)
            goto LABEL_622;
        }
        if ((unint64_t)v434 >= v352)
        {
          if (v434 >= (unsigned __int8 *)v7)
            goto LABEL_632;
        }
        else
        {
          if (*(unsigned __int16 *)v428 == *(unsigned __int16 *)v434)
          {
            v434 += 2;
            v428 = (_DWORD *)((char *)v428 + 2);
          }
          if (v434 >= (unsigned __int8 *)v7)
          {
LABEL_632:
            v378 = v434 - v341;
            v379 = &v341[-v380];
            if (v341 <= (unsigned __int8 *)a4)
              goto LABEL_658;
            goto LABEL_633;
          }
        }
        if (*(unsigned __int8 *)v428 == *v434)
          ++v434;
        goto LABEL_632;
      }
      v362 = (char *)(v341 + 5);
      v363 = &v341[-v26 + 5];
      if (v350 <= (unint64_t)(v341 + 5))
      {
        v391 = v341 + 5;
        if ((unint64_t)v362 < v351)
        {
LABEL_534:
          if (*(_DWORD *)v363 == *(_DWORD *)v391)
          {
            v391 += 4;
            v363 += 4;
          }
        }
      }
      else
      {
        v364 = *(_QWORD *)v362 ^ *(_QWORD *)v363;
        if (v364)
        {
          v365 = __clz(__rbit64(v364)) >> 3;
          v366 = v361 - a4;
          v367 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)v361 <= v354)
            goto LABEL_514;
          goto LABEL_545;
        }
        v422 = 0;
        v423 = v341 + 13;
        while (1)
        {
          v424 = &v423[v422];
          if ((unint64_t)&v423[v422] >= v350)
            break;
          v425 = *(_QWORD *)&v341[v422 + 13 - v26];
          v422 += 8;
          v426 = *(_QWORD *)v424 ^ v425;
          if (v426)
          {
            v365 = v422 + (__clz(__rbit64(v426)) >> 3);
            v366 = v361 - a4;
            v367 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v361 > v354)
              goto LABEL_545;
            goto LABEL_514;
          }
        }
        v391 = &v341[v422 + 13];
        v363 = &v391[-v26];
        if ((unint64_t)v391 < v351)
          goto LABEL_534;
      }
      if ((unint64_t)v391 >= v352)
        break;
      if (*(unsigned __int16 *)v363 == *(unsigned __int16 *)v391)
      {
        v391 += 2;
        v363 += 2;
      }
      if (v391 < (unsigned __int8 *)v7)
        goto LABEL_542;
LABEL_544:
      v365 = v391 - (unsigned __int8 *)v362;
      v366 = v361 - a4;
      v367 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v361 <= v354)
      {
LABEL_514:
        *v367 = *(_OWORD *)a4;
        v368 = *(_QWORD *)(a2 + 24);
        if (v366 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v368 + v366;
          v394 = *(_QWORD *)(a2 + 8);
          goto LABEL_561;
        }
        v369 = (_OWORD *)(v368 + 16);
        v370 = v368 + v366;
        v371 = (__int128 *)(a4 + 16);
        do
        {
          v372 = *v371++;
          *v369++ = v372;
        }
        while ((unint64_t)v369 < v370);
        goto LABEL_559;
      }
LABEL_545:
      if ((unint64_t)a4 <= v354)
      {
        v393 = (char *)v367 + v354 - (_QWORD)a4;
        v395 = a4;
        v396 = v367;
        do
        {
          v397 = *(_OWORD *)v395;
          v395 += 16;
          *v396++ = v397;
        }
        while (v396 < (_OWORD *)v393);
        v392 = v7 - 32;
        if (v354 >= (unint64_t)v361)
          goto LABEL_559;
      }
      else
      {
        v392 = a4;
        v393 = v367;
        if (a4 >= v361)
          goto LABEL_559;
      }
      if ((unint64_t)a4 <= v354)
        v398 = v7 - 32;
      else
        v398 = a4;
      v399 = v341 - (unsigned __int8 *)v398 + 1;
      if (v399 < 8 || (unint64_t)((char *)v367 - a4) < 0x20)
      {
        v400 = v392;
        goto LABEL_558;
      }
      if (v399 >= 0x20)
      {
        v660 = v399 & 0xFFFFFFFFFFFFFFE0;
        v442 = (__int128 *)(v392 + 16);
        v443 = (_OWORD *)((char *)v367 + v398 - a4 + 16);
        v444 = v399 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v445 = *v442;
          *(v443 - 1) = *(v442 - 1);
          *v443 = v445;
          v442 += 2;
          v443 += 2;
          v444 -= 32;
        }
        while (v444);
        v436 = v399 & 0xFFFFFFFFFFFFFFE0;
        if (v399 == v660)
          goto LABEL_559;
        if ((v399 & 0x18) == 0)
        {
          v400 = &v392[v660];
          v393 += v660;
          do
          {
LABEL_558:
            v401 = *v400++;
            *v393++ = v401;
          }
          while (v400 != &v392[v399]);
          goto LABEL_559;
        }
      }
      else
      {
        v436 = 0;
      }
      v393 += v399 & 0xFFFFFFFFFFFFFFF8;
      v400 = &v392[v399 & 0xFFFFFFFFFFFFFFF8];
      v446 = &v392[v436];
      v447 = (_QWORD *)((char *)v367 + &v398[v436] - a4);
      v448 = v436 - (v399 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v449 = *(_QWORD *)v446;
        v446 += 8;
        *v447++ = v449;
        v448 += 8;
      }
      while (v448);
      if (v399 != (v399 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_558;
LABEL_559:
      *(_QWORD *)(a2 + 24) += v366;
      v394 = *(_QWORD *)(a2 + 8);
      if (v366 >= 0x10000)
      {
        v402 = (unint64_t)(v394 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v402;
      }
LABEL_561:
      v378 = v365 + 4;
      v403 = v365 + 1;
      *(_WORD *)(v394 + 4) = v366;
      *(_DWORD *)v394 = 1;
      v404 = (v365 + 1) >> 16;
      v379 = v26;
      if (v404)
        goto LABEL_562;
LABEL_563:
      *(_WORD *)(v394 + 6) = v403;
      v406 = v394 + 8;
      *(_QWORD *)(a2 + 8) = v394 + 8;
      a4 = &v361[v378];
      if ((unint64_t)&v361[v378] <= v338)
      {
        v407 = *(_QWORD *)(v330 + (v358 + 2));
        *(_DWORD *)(v347 + 4 * ((0xCF1BBCDCB7A56463 * v407) >> v348)) = v358 + 2;
        *(_DWORD *)(v347 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(a4 - 2)) >> v348)) = (_DWORD)a4 - 2 - v330;
        *(_DWORD *)(v353 + 4 * ((0xCF1BBCDCBF9B0000 * v407) >> v349)) = v358 + 2;
        *(_DWORD *)(v353 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(a4 - 1)) >> v349)) = (_DWORD)a4 - 1 - v330;
        v408 = v26;
        v409 = v22;
        while (1)
        {
          v26 = v409;
          v409 = v408;
          if (!(_DWORD)v26 || *(_DWORD *)a4 != *(_DWORD *)&a4[-v26])
          {
            v22 = v26;
            v26 = v408;
            goto LABEL_507;
          }
          v410 = a4 + 4;
          v411 = &a4[-v26 + 4];
          if (v350 <= (unint64_t)(a4 + 4))
            break;
          v412 = *(_QWORD *)v410 ^ *(_QWORD *)v411;
          if (!v412)
          {
            v417 = 0;
            v418 = a4 + 12;
            while (1)
            {
              v419 = &v418[v417];
              if ((unint64_t)&v418[v417] >= v350)
                break;
              v420 = *(_QWORD *)&a4[v417 + 12 - v26];
              v417 += 8;
              v421 = *(_QWORD *)v419 ^ v420;
              if (v421)
              {
                v413 = v417 + (__clz(__rbit64(v421)) >> 3);
                goto LABEL_583;
              }
            }
            v414 = &a4[v417 + 12];
            v411 = &v414[-v26];
            if ((unint64_t)v414 >= v351)
            {
LABEL_574:
              if ((unint64_t)v414 >= v352)
              {
                if (v414 < v7)
                  goto LABEL_580;
              }
              else
              {
                if (*(unsigned __int16 *)v411 == *(unsigned __int16 *)v414)
                {
                  v414 += 2;
                  v411 += 2;
                }
                if (v414 >= v7)
                  goto LABEL_582;
LABEL_580:
                if (*v411 == *v414)
                  ++v414;
              }
LABEL_582:
              v413 = v414 - v410;
              goto LABEL_583;
            }
LABEL_572:
            if (*(_DWORD *)v411 == *(_DWORD *)v414)
            {
              v414 += 4;
              v411 += 4;
            }
            goto LABEL_574;
          }
          v413 = __clz(__rbit64(v412)) >> 3;
LABEL_583:
          v415 = *(_QWORD *)a4;
          *(_DWORD *)(v353 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)a4) >> v349)) = (_DWORD)a4 - v330;
          *(_DWORD *)(v347 + 4 * ((0xCF1BBCDCB7A56463 * v415) >> v348)) = (_DWORD)a4 - v330;
          if ((unint64_t)a4 <= v354)
          {
            *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)a4;
            v406 = *(_QWORD *)(a2 + 8);
          }
          *(_WORD *)(v406 + 4) = 0;
          *(_DWORD *)v406 = 1;
          if (v413 + 1 >= 0x10000)
          {
            v416 = (unint64_t)(v406 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v416;
          }
          *(_WORD *)(v406 + 6) = v413 + 1;
          v406 += 8;
          a4 += v413 + 4;
          *(_QWORD *)(a2 + 8) = v406;
          v408 = v26;
          v22 = v409;
          v341 = (unsigned __int8 *)a4;
          if ((unint64_t)a4 > v338)
            goto LABEL_508;
        }
        v414 = a4 + 4;
        if ((unint64_t)v410 >= v351)
          goto LABEL_574;
        goto LABEL_572;
      }
LABEL_507:
      v341 = (unsigned __int8 *)a4;
LABEL_508:
      if ((unint64_t)v341 >= v338)
        goto LABEL_964;
    }
    if (v391 >= (unsigned __int8 *)v7)
      goto LABEL_544;
LABEL_542:
    if (*v363 == *v391)
      ++v391;
    goto LABEL_544;
  }
  if (v5 != 7)
  {
    v488 = *(_QWORD *)(a1 + 8);
    v7 = &a4[a5];
    v489 = (_DWORD)a4 + a5 - v488;
    v490 = *(_DWORD *)(a1 + 24);
    v491 = 1 << *(_DWORD *)(a1 + 192);
    v492 = v489 - v490 > v491;
    LODWORD(v493) = v489 - v491;
    v494 = *(_DWORD *)(a1 + 32) == 0;
    if (v494 && v492)
      v493 = v493;
    else
      v493 = v490;
    v676 = v493;
    v495 = v488 + v493;
    v496 = (unint64_t)(v7 - 8);
    v497 = *a3;
    v498 = a3[1];
    if ((_DWORD)a4 == (_DWORD)v495)
      v499 = (unsigned __int8 *)(a4 + 1);
    else
      v499 = (unsigned __int8 *)a4;
    v500 = (_DWORD)v499 - (_DWORD)v488 - v490 > v491;
    v501 = (_DWORD)v499 - v488 - v491;
    if (!v494 || !v500)
      v501 = *(_DWORD *)(a1 + 24);
    v502 = (_DWORD)v499 - v488 - v501;
    if (v498 <= v502)
      v22 = (unsigned __int8 *)v498;
    else
      v22 = 0;
    if (v498 <= v502)
      v503 = 0;
    else
      v503 = a3[1];
    v504 = v497 > v502;
    if (v497 <= v502)
      v25 = v503;
    else
      v25 = *a3;
    if (v504)
      v26 = 0;
    else
      v26 = (unsigned __int8 *)v497;
    if ((unint64_t)v499 >= v496)
      goto LABEL_965;
    v651 = v25;
    v671 = v495;
    v672 = a3;
    v505 = *(_QWORD *)(a1 + 48);
    v506 = 64 - *(_DWORD *)(a1 + 200);
    v507 = 32 - *(_DWORD *)(a1 + 196);
    v508 = *(_QWORD *)(a1 + 64);
    v509 = (unint64_t)(v7 - 7);
    v510 = (unint64_t)(v7 - 3);
    v511 = (unint64_t)(v7 - 1);
    v512 = (unint64_t)(v7 - 32);
    v650 = v488 + 12;
    v667 = v488 - 1;
    v655 = v488 + 16;
    while (1)
    {
      v513 = 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)v499) >> v506);
      v514 = *(unsigned int *)(v505 + v513);
      v515 = (_DWORD)v499 - v488;
      v516 = 4 * ((-1640531535 * *(_QWORD *)v499) >> v507);
      v517 = *(unsigned int *)(v508 + v516);
      *(_DWORD *)(v508 + v516) = (_DWORD)v499 - v488;
      *(_DWORD *)(v505 + v513) = (_DWORD)v499 - v488;
      v518 = (char *)(v499 + 1);
      if (!(_DWORD)v26 || *(_DWORD *)&v518[-v26] != *(_DWORD *)(v499 + 1))
      {
        if (v514 > v676)
        {
          v530 = v488 + v514;
          if (*(_QWORD *)(v488 + v514) == *(_QWORD *)v499)
          {
            v531 = v499 + 8;
            v532 = (_DWORD *)(v530 + 8);
            if (v509 <= (unint64_t)(v499 + 8))
            {
              v586 = v499 + 8;
              v534 = v671;
              if ((unint64_t)v531 < v510)
              {
LABEL_843:
                if (*v532 == *(_DWORD *)v586)
                {
                  v586 += 4;
                  ++v532;
                }
              }
            }
            else
            {
              v533 = *v531 ^ *(_QWORD *)v532;
              v534 = v671;
              if (v533)
              {
                v535 = (__clz(__rbit64(v533)) >> 3) + 8;
                v536 = &v499[-v530];
                if (v499 <= (unsigned __int8 *)a4)
                  goto LABEL_898;
LABEL_854:
                v587 = v499 - 1;
                v588 = (unsigned __int8 *)(v667 + v514);
                while (*v587 == *v588)
                {
                  ++v535;
                  v589 = v587 - 1;
                  if ((unint64_t)v588 > v534)
                  {
                    --v588;
                    v24 = v587-- > (unsigned __int8 *)a4;
                    if (v24)
                      continue;
                  }
                  goto LABEL_917;
                }
LABEL_878:
                v518 = (char *)(v587 + 1);
LABEL_918:
                v613 = v518 - a4;
                v614 = *(char **)(a2 + 24);
                if ((unint64_t)v518 <= v512)
                {
                  *(_OWORD *)v614 = *(_OWORD *)a4;
                  v617 = *(_QWORD *)(a2 + 24);
                  if (v613 > 0x10)
                  {
                    v618 = (_OWORD *)(v617 + 16);
                    v619 = v617 + v613;
                    v620 = (__int128 *)(a4 + 16);
                    do
                    {
                      v621 = *v620++;
                      *v618++ = v621;
                    }
                    while ((unint64_t)v618 < v619);
                    goto LABEL_960;
                  }
                  *(_QWORD *)(a2 + 24) = v617 + v613;
                  v551 = *(_QWORD *)(a2 + 8);
LABEL_962:
                  v560 = v535 - 3;
                  *(_WORD *)(v551 + 4) = v613;
                  *(_DWORD *)v551 = (_DWORD)v536 + 3;
                  v22 = v26;
                  v26 = v536;
                  if ((unint64_t)(v535 - 3) < 0x10000)
                    goto LABEL_803;
LABEL_802:
                  v562 = (unint64_t)(v551 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v562;
                  v26 = v536;
                  goto LABEL_803;
                }
                if ((unint64_t)a4 <= v512)
                {
                  v616 = &v614[v512 - (_QWORD)a4];
                  v622 = a4;
                  v623 = *(char **)(a2 + 24);
                  do
                  {
                    v624 = *(_OWORD *)v622;
                    v622 += 16;
                    *(_OWORD *)v623 = v624;
                    v623 += 16;
                  }
                  while (v623 < v616);
                  v615 = v7 - 32;
                  if (v512 >= (unint64_t)v518)
                    goto LABEL_960;
                }
                else
                {
                  v615 = a4;
                  v616 = *(char **)(a2 + 24);
                  if (a4 >= v518)
                  {
LABEL_960:
                    *(_QWORD *)(a2 + 24) += v613;
                    v551 = *(_QWORD *)(a2 + 8);
                    if (v613 >= 0x10000)
                    {
                      v643 = (unint64_t)(v551 - *(_QWORD *)a2) >> 3;
                      *(_DWORD *)(a2 + 72) = 1;
                      *(_DWORD *)(a2 + 76) = v643;
                    }
                    goto LABEL_962;
                  }
                }
                if ((unint64_t)a4 <= v512)
                  v625 = v7 - 32;
                else
                  v625 = a4;
                v626 = v518 - v625;
                if ((unint64_t)(v518 - v625) < 8)
                {
                  v627 = v615;
                  goto LABEL_959;
                }
                if ((unint64_t)(v614 - a4) < 0x20)
                {
                  v627 = v615;
                  goto LABEL_959;
                }
                if (v626 >= 0x20)
                {
                  v663 = v626 & 0xFFFFFFFFFFFFFFE0;
                  v629 = (__int128 *)(v615 + 16);
                  v630 = &v614[v625 - a4 + 16];
                  v631 = v626 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v632 = *v629;
                    *((_OWORD *)v630 - 1) = *(v629 - 1);
                    *(_OWORD *)v630 = v632;
                    v629 += 2;
                    v630 += 32;
                    v631 -= 32;
                  }
                  while (v631);
                  v628 = v626 & 0xFFFFFFFFFFFFFFE0;
                  if (v626 == v663)
                    goto LABEL_960;
                  if ((v626 & 0x18) == 0)
                  {
                    v627 = &v615[v663];
                    v616 += v663;
                    do
                    {
LABEL_959:
                      v642 = *v627++;
                      *v616++ = v642;
                    }
                    while (v627 < v518);
                    goto LABEL_960;
                  }
                }
                else
                {
                  v628 = 0;
                }
                v616 += v626 & 0xFFFFFFFFFFFFFFF8;
                v627 = &v615[v626 & 0xFFFFFFFFFFFFFFF8];
                v633 = &v615[v628];
                v634 = &v614[&v625[v628] - a4];
                v635 = v628 - (v626 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v636 = *(_QWORD *)v633;
                  v633 += 8;
                  *(_QWORD *)v634 = v636;
                  v634 += 8;
                  v635 += 8;
                }
                while (v635);
                if (v626 == (v626 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_960;
                goto LABEL_959;
              }
              v593 = 0;
              v594 = v499 + 16;
              while (1)
              {
                v595 = &v594[v593];
                if ((unint64_t)&v594[v593] >= v509)
                  break;
                v596 = *(_QWORD *)(v655 + v514 + v593);
                v593 += 8;
                v597 = *(_QWORD *)v595 ^ v596;
                if (v597)
                {
                  v535 = v593 + (__clz(__rbit64(v597)) >> 3) + 8;
                  v536 = &v499[-v530];
                  if (v499 > (unsigned __int8 *)a4)
                    goto LABEL_854;
                  goto LABEL_898;
                }
              }
              v586 = &v499[v593 + 16];
              v532 = (_DWORD *)(v655 + v514 + v593);
              if ((unint64_t)v586 < v510)
                goto LABEL_843;
            }
            if ((unint64_t)v586 >= v511)
            {
              if (v586 >= (unsigned __int8 *)v7)
                goto LABEL_853;
            }
            else
            {
              if (*(unsigned __int16 *)v532 == *(unsigned __int16 *)v586)
              {
                v586 += 2;
                v532 = (_DWORD *)((char *)v532 + 2);
              }
              if (v586 >= (unsigned __int8 *)v7)
              {
LABEL_853:
                v535 = v586 - v499;
                v536 = &v499[-v530];
                if (v499 <= (unsigned __int8 *)a4)
                  goto LABEL_898;
                goto LABEL_854;
              }
            }
            if (*(unsigned __int8 *)v532 == *v586)
              ++v586;
            goto LABEL_853;
          }
        }
        if (v517 <= v676 || (v537 = v488 + v517, *(_DWORD *)(v488 + v517) != *(_DWORD *)v499))
        {
          _X10 = &v499[(v499 - (unsigned __int8 *)a4) >> 8];
          v499 = _X10 + 1;
          _X10 += 257;
          __asm { PRFM            #0, [X10] }
          goto LABEL_748;
        }
        v538 = *(_QWORD *)v518;
        v539 = 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)v518) >> v506);
        v540 = *(unsigned int *)(v505 + v539);
        *(_DWORD *)(v505 + v539) = v515 + 1;
        if (v540 > v676)
        {
          v541 = v488 + v540;
          if (*(_QWORD *)(v488 + v540) == v538)
          {
            v542 = (char *)(v499 + 9);
            v543 = (_DWORD *)(v541 + 8);
            if (v509 <= (unint64_t)(v499 + 9))
            {
              v611 = v499 + 9;
              v545 = v671;
              if ((unint64_t)v542 < v510)
              {
LABEL_902:
                if (*v543 == *(_DWORD *)v611)
                {
                  v611 += 4;
                  ++v543;
                }
              }
            }
            else
            {
              v544 = *(_QWORD *)v542 ^ *(_QWORD *)v543;
              v545 = v671;
              if (v544)
              {
                v535 = (__clz(__rbit64(v544)) >> 3) + 8;
                v536 = (unsigned __int8 *)&v518[-v541];
                if (v518 <= a4)
                  goto LABEL_918;
                goto LABEL_913;
              }
              v637 = 0;
              v638 = v499 + 17;
              while (1)
              {
                v639 = &v638[v637];
                if ((unint64_t)&v638[v637] >= v509)
                  break;
                v640 = *(_QWORD *)(v655 + v540 + v637);
                v637 += 8;
                v641 = *(_QWORD *)v639 ^ v640;
                if (v641)
                {
                  v535 = v637 + (__clz(__rbit64(v641)) >> 3) + 8;
                  v536 = (unsigned __int8 *)&v518[-v541];
                  if (v518 > a4)
                    goto LABEL_913;
                  goto LABEL_918;
                }
              }
              v611 = &v499[v637 + 17];
              v543 = (_DWORD *)(v655 + v540 + v637);
              if ((unint64_t)v611 < v510)
                goto LABEL_902;
            }
            if ((unint64_t)v611 >= v511)
            {
              if (v611 >= (unsigned __int8 *)v7)
                goto LABEL_912;
            }
            else
            {
              if (*(unsigned __int16 *)v543 == *(unsigned __int16 *)v611)
              {
                v611 += 2;
                v543 = (_DWORD *)((char *)v543 + 2);
              }
              if (v611 >= (unsigned __int8 *)v7)
              {
LABEL_912:
                v535 = v611 - (unsigned __int8 *)v542 + 8;
                v536 = (unsigned __int8 *)&v518[-v541];
                if (v518 <= a4)
                  goto LABEL_918;
LABEL_913:
                v612 = (unsigned __int8 *)(v667 + v540);
                while (*v499 == *v612)
                {
                  ++v535;
                  v589 = v499 - 1;
                  if (v499 > (unsigned __int8 *)a4)
                  {
                    --v499;
                    v24 = (unint64_t)v612-- > v545;
                    if (v24)
                      continue;
                  }
                  goto LABEL_917;
                }
                v518 = (char *)(v499 + 1);
                goto LABEL_918;
              }
            }
            if (*(unsigned __int8 *)v543 == *v611)
              ++v611;
            goto LABEL_912;
          }
        }
        v583 = v499 + 4;
        v584 = (_DWORD *)(v537 + 4);
        if (v509 <= (unint64_t)(v499 + 4))
        {
          v590 = v499 + 4;
          if ((unint64_t)v583 < v510)
          {
LABEL_862:
            if (*v584 == *(_DWORD *)v590)
            {
              v590 += 4;
              ++v584;
            }
          }
        }
        else
        {
          v585 = *v583 ^ *(_QWORD *)v584;
          if (v585)
          {
            v535 = (__clz(__rbit64(v585)) >> 3) + 4;
            v536 = &v499[-v537];
            if (v499 <= (unsigned __int8 *)a4)
            {
LABEL_898:
              v518 = (char *)v499;
              goto LABEL_918;
            }
LABEL_873:
            v587 = v499 - 1;
            v591 = (unsigned __int8 *)(v667 + v517);
            while (*v587 == *v591)
            {
              ++v535;
              v589 = v587 - 1;
              if ((unint64_t)v591 > v671)
              {
                --v591;
                v24 = v587-- > (unsigned __int8 *)a4;
                if (v24)
                  continue;
              }
LABEL_917:
              v518 = (char *)(v589 + 1);
              goto LABEL_918;
            }
            goto LABEL_878;
          }
          v606 = 0;
          v607 = v499 + 12;
          while (1)
          {
            v608 = &v607[v606];
            if ((unint64_t)&v607[v606] >= v509)
              break;
            v609 = *(_QWORD *)(v650 + v517 + v606);
            v606 += 8;
            v610 = *(_QWORD *)v608 ^ v609;
            if (v610)
            {
              v535 = v606 + (__clz(__rbit64(v610)) >> 3) + 4;
              v536 = &v499[-v537];
              if (v499 > (unsigned __int8 *)a4)
                goto LABEL_873;
              goto LABEL_898;
            }
          }
          v590 = &v499[v606 + 12];
          v584 = (_DWORD *)(v650 + v517 + v606);
          if ((unint64_t)v590 < v510)
            goto LABEL_862;
        }
        if ((unint64_t)v590 >= v511)
        {
          if (v590 >= (unsigned __int8 *)v7)
            goto LABEL_872;
        }
        else
        {
          if (*(unsigned __int16 *)v584 == *(unsigned __int16 *)v590)
          {
            v590 += 2;
            v584 = (_DWORD *)((char *)v584 + 2);
          }
          if (v590 >= (unsigned __int8 *)v7)
          {
LABEL_872:
            v535 = v590 - v499;
            v536 = &v499[-v537];
            if (v499 <= (unsigned __int8 *)a4)
              goto LABEL_898;
            goto LABEL_873;
          }
        }
        if (*(unsigned __int8 *)v584 == *v590)
          ++v590;
        goto LABEL_872;
      }
      v519 = (char *)(v499 + 5);
      v520 = &v499[-v26 + 5];
      if (v509 <= (unint64_t)(v499 + 5))
      {
        v548 = v499 + 5;
        if ((unint64_t)v519 < v510)
        {
LABEL_774:
          if (*(_DWORD *)v520 == *(_DWORD *)v548)
          {
            v548 += 4;
            v520 += 4;
          }
        }
      }
      else
      {
        v521 = *(_QWORD *)v519 ^ *(_QWORD *)v520;
        if (v521)
        {
          v522 = __clz(__rbit64(v521)) >> 3;
          v523 = v518 - a4;
          v524 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)v518 <= v512)
            goto LABEL_754;
          goto LABEL_785;
        }
        v578 = 0;
        v579 = v499 + 13;
        while (1)
        {
          v580 = &v579[v578];
          if ((unint64_t)&v579[v578] >= v509)
            break;
          v581 = *(_QWORD *)&v499[v578 + 13 - v26];
          v578 += 8;
          v582 = *(_QWORD *)v580 ^ v581;
          if (v582)
          {
            v522 = v578 + (__clz(__rbit64(v582)) >> 3);
            v523 = v518 - a4;
            v524 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v518 > v512)
              goto LABEL_785;
            goto LABEL_754;
          }
        }
        v548 = &v499[v578 + 13];
        v520 = &v548[-v26];
        if ((unint64_t)v548 < v510)
          goto LABEL_774;
      }
      if ((unint64_t)v548 >= v511)
        break;
      if (*(unsigned __int16 *)v520 == *(unsigned __int16 *)v548)
      {
        v548 += 2;
        v520 += 2;
      }
      if (v548 < (unsigned __int8 *)v7)
        goto LABEL_782;
LABEL_784:
      v522 = v548 - (unsigned __int8 *)v519;
      v523 = v518 - a4;
      v524 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v518 <= v512)
      {
LABEL_754:
        *v524 = *(_OWORD *)a4;
        v525 = *(_QWORD *)(a2 + 24);
        if (v523 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v525 + v523;
          v551 = *(_QWORD *)(a2 + 8);
          goto LABEL_801;
        }
        v526 = (_OWORD *)(v525 + 16);
        v527 = v525 + v523;
        v528 = (__int128 *)(a4 + 16);
        do
        {
          v529 = *v528++;
          *v526++ = v529;
        }
        while ((unint64_t)v526 < v527);
        goto LABEL_799;
      }
LABEL_785:
      if ((unint64_t)a4 <= v512)
      {
        v550 = (char *)v524 + v512 - (_QWORD)a4;
        v552 = a4;
        v553 = v524;
        do
        {
          v554 = *(_OWORD *)v552;
          v552 += 16;
          *v553++ = v554;
        }
        while (v553 < (_OWORD *)v550);
        v549 = v7 - 32;
        if (v512 >= (unint64_t)v518)
          goto LABEL_799;
      }
      else
      {
        v549 = a4;
        v550 = v524;
        if (a4 >= v518)
          goto LABEL_799;
      }
      if ((unint64_t)a4 <= v512)
        v555 = v7 - 32;
      else
        v555 = a4;
      v556 = v499 - (unsigned __int8 *)v555 + 1;
      if (v556 < 8 || (unint64_t)((char *)v524 - a4) < 0x20)
      {
        v557 = v549;
        goto LABEL_798;
      }
      if (v556 >= 0x20)
      {
        v662 = v556 & 0xFFFFFFFFFFFFFFE0;
        v598 = (__int128 *)(v549 + 16);
        v599 = (_OWORD *)((char *)v524 + v555 - a4 + 16);
        v600 = v556 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v601 = *v598;
          *(v599 - 1) = *(v598 - 1);
          *v599 = v601;
          v598 += 2;
          v599 += 2;
          v600 -= 32;
        }
        while (v600);
        v592 = v556 & 0xFFFFFFFFFFFFFFE0;
        if (v556 == v662)
          goto LABEL_799;
        if ((v556 & 0x18) == 0)
        {
          v557 = &v549[v662];
          v550 += v662;
          do
          {
LABEL_798:
            v558 = *v557++;
            *v550++ = v558;
          }
          while (v557 != &v549[v556]);
          goto LABEL_799;
        }
      }
      else
      {
        v592 = 0;
      }
      v550 += v556 & 0xFFFFFFFFFFFFFFF8;
      v557 = &v549[v556 & 0xFFFFFFFFFFFFFFF8];
      v602 = &v549[v592];
      v603 = (_QWORD *)((char *)v524 + &v555[v592] - a4);
      v604 = v592 - (v556 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v605 = *(_QWORD *)v602;
        v602 += 8;
        *v603++ = v605;
        v604 += 8;
      }
      while (v604);
      if (v556 != (v556 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_798;
LABEL_799:
      *(_QWORD *)(a2 + 24) += v523;
      v551 = *(_QWORD *)(a2 + 8);
      if (v523 >= 0x10000)
      {
        v559 = (unint64_t)(v551 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v559;
      }
LABEL_801:
      v535 = v522 + 4;
      v560 = v522 + 1;
      *(_WORD *)(v551 + 4) = v523;
      *(_DWORD *)v551 = 1;
      v561 = (v522 + 1) >> 16;
      v536 = v26;
      if (v561)
        goto LABEL_802;
LABEL_803:
      *(_WORD *)(v551 + 6) = v560;
      v563 = v551 + 8;
      *(_QWORD *)(a2 + 8) = v551 + 8;
      a4 = &v518[v535];
      if ((unint64_t)&v518[v535] <= v496)
      {
        v564 = (v515 + 2);
        *(_DWORD *)(v505 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v488 + v564)) >> v506)) = v564;
        *(_DWORD *)(v505 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(a4 - 2)) >> v506)) = (_DWORD)a4 - 2 - v488;
        *(_DWORD *)(v508 + 4 * ((-1640531535 * *(_DWORD *)(v488 + v564)) >> v507)) = v564;
        *(_DWORD *)(v508 + 4 * ((-1640531535 * *(_DWORD *)(a4 - 1)) >> v507)) = (_DWORD)a4 - 1 - v488;
        v565 = v26;
        v566 = v22;
        while (1)
        {
          v26 = v566;
          v566 = v565;
          if (!(_DWORD)v26 || *(_DWORD *)a4 != *(_DWORD *)&a4[-v26])
          {
            v22 = v26;
            v26 = v565;
            goto LABEL_747;
          }
          v567 = a4 + 4;
          v568 = &a4[-v26 + 4];
          if (v509 <= (unint64_t)(a4 + 4))
            break;
          v569 = *(_QWORD *)v567 ^ *(_QWORD *)v568;
          if (!v569)
          {
            v573 = 0;
            v574 = a4 + 12;
            while (1)
            {
              v575 = &v574[v573];
              if ((unint64_t)&v574[v573] >= v509)
                break;
              v576 = *(_QWORD *)&a4[v573 + 12 - v26];
              v573 += 8;
              v577 = *(_QWORD *)v575 ^ v576;
              if (v577)
              {
                v570 = v573 + (__clz(__rbit64(v577)) >> 3);
                goto LABEL_823;
              }
            }
            v571 = &a4[v573 + 12];
            v568 = &v571[-v26];
            if ((unint64_t)v571 >= v510)
            {
LABEL_814:
              if ((unint64_t)v571 >= v511)
              {
                if (v571 < v7)
                  goto LABEL_820;
              }
              else
              {
                if (*(unsigned __int16 *)v568 == *(unsigned __int16 *)v571)
                {
                  v571 += 2;
                  v568 += 2;
                }
                if (v571 >= v7)
                  goto LABEL_822;
LABEL_820:
                if (*v568 == *v571)
                  ++v571;
              }
LABEL_822:
              v570 = v571 - v567;
              goto LABEL_823;
            }
LABEL_812:
            if (*(_DWORD *)v568 == *(_DWORD *)v571)
            {
              v571 += 4;
              v568 += 4;
            }
            goto LABEL_814;
          }
          v570 = __clz(__rbit64(v569)) >> 3;
LABEL_823:
          *(_DWORD *)(v508 + 4 * ((-1640531535 * *(_DWORD *)a4) >> v507)) = (_DWORD)a4 - v488;
          *(_DWORD *)(v505 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)a4) >> v506)) = (_DWORD)a4 - v488;
          if ((unint64_t)a4 <= v512)
          {
            *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)a4;
            v563 = *(_QWORD *)(a2 + 8);
          }
          *(_WORD *)(v563 + 4) = 0;
          *(_DWORD *)v563 = 1;
          if (v570 + 1 >= 0x10000)
          {
            v572 = (unint64_t)(v563 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v572;
          }
          *(_WORD *)(v563 + 6) = v570 + 1;
          v563 += 8;
          a4 += v570 + 4;
          *(_QWORD *)(a2 + 8) = v563;
          v565 = v26;
          v22 = v566;
          v499 = (unsigned __int8 *)a4;
          if ((unint64_t)a4 > v496)
            goto LABEL_748;
        }
        v571 = a4 + 4;
        if ((unint64_t)v567 >= v510)
          goto LABEL_814;
        goto LABEL_812;
      }
LABEL_747:
      v499 = (unsigned __int8 *)a4;
LABEL_748:
      if ((unint64_t)v499 >= v496)
        goto LABEL_964;
    }
    if (v548 >= (unsigned __int8 *)v7)
      goto LABEL_784;
LABEL_782:
    if (*v520 == *v548)
      ++v548;
    goto LABEL_784;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = &a4[a5];
  v8 = (_DWORD)a4 + a5 - v6;
  v9 = *(_DWORD *)(a1 + 24);
  v10 = 1 << *(_DWORD *)(a1 + 192);
  v11 = v8 - v9 > v10;
  LODWORD(v12) = v8 - v10;
  v13 = *(_DWORD *)(a1 + 32) == 0;
  if (v13 && v11)
    v12 = v12;
  else
    v12 = v9;
  v673 = v12;
  v14 = v6 + v12;
  v15 = (unint64_t)(v7 - 8);
  v16 = *a3;
  v17 = a3[1];
  if ((_DWORD)a4 == (_DWORD)v14)
    v18 = (unsigned __int8 *)(a4 + 1);
  else
    v18 = (unsigned __int8 *)a4;
  v19 = (_DWORD)v18 - (_DWORD)v6 - v9 > v10;
  v20 = (_DWORD)v18 - v6 - v10;
  if (!v13 || !v19)
    v20 = *(_DWORD *)(a1 + 24);
  v21 = (_DWORD)v18 - v6 - v20;
  if (v17 <= v21)
    v22 = (unsigned __int8 *)v17;
  else
    v22 = 0;
  if (v17 <= v21)
    v23 = 0;
  else
    v23 = a3[1];
  v24 = v16 > v21;
  if (v16 <= v21)
    v25 = v23;
  else
    v25 = *a3;
  if (v24)
    v26 = 0;
  else
    v26 = (unsigned __int8 *)v16;
  if ((unint64_t)v18 < v15)
  {
    v651 = v25;
    v668 = v14;
    v672 = a3;
    v27 = *(_QWORD *)(a1 + 48);
    v28 = 64 - *(_DWORD *)(a1 + 200);
    v29 = 64 - *(_DWORD *)(a1 + 196);
    v30 = (unint64_t)(v7 - 7);
    v31 = (unint64_t)(v7 - 3);
    v32 = (unint64_t)(v7 - 1);
    v33 = *(_QWORD *)(a1 + 64);
    v34 = (unint64_t)(v7 - 32);
    v647 = v6 + 12;
    v664 = v6 - 1;
    v652 = v6 + 16;
    while (1)
    {
      v35 = *(_QWORD *)v18;
      v36 = 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)v18) >> v28);
      v37 = *(unsigned int *)(v27 + v36);
      v38 = (_DWORD)v18 - v6;
      v39 = 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)v18) >> v29);
      v40 = *(unsigned int *)(v33 + v39);
      *(_DWORD *)(v33 + v39) = (_DWORD)v18 - v6;
      *(_DWORD *)(v27 + v36) = (_DWORD)v18 - v6;
      v41 = (char *)(v18 + 1);
      if (!(_DWORD)v26 || *(_DWORD *)&v41[-v26] != *(_DWORD *)(v18 + 1))
      {
        if (v37 > v673)
        {
          v53 = v6 + v37;
          if (*(_QWORD *)(v6 + v37) == v35)
          {
            v54 = v18 + 8;
            v55 = (_DWORD *)(v53 + 8);
            if (v30 <= (unint64_t)(v18 + 8))
            {
              v114 = v18 + 8;
              v57 = v668;
              if ((unint64_t)v54 < v31)
              {
LABEL_123:
                if (*v55 == *(_DWORD *)v114)
                {
                  v114 += 4;
                  ++v55;
                }
              }
            }
            else
            {
              v56 = *v54 ^ *(_QWORD *)v55;
              v57 = v668;
              if (v56)
              {
                v58 = (__clz(__rbit64(v56)) >> 3) + 8;
                v59 = &v18[-v53];
                if (v18 <= (unsigned __int8 *)a4)
                  goto LABEL_178;
LABEL_134:
                v115 = v18 - 1;
                v116 = (unsigned __int8 *)(v664 + v37);
                while (*v115 == *v116)
                {
                  ++v58;
                  v117 = v115 - 1;
                  if ((unint64_t)v116 > v57)
                  {
                    --v116;
                    v24 = v115-- > (unsigned __int8 *)a4;
                    if (v24)
                      continue;
                  }
                  goto LABEL_197;
                }
LABEL_158:
                v41 = (char *)(v115 + 1);
LABEL_198:
                v141 = v41 - a4;
                v142 = *(char **)(a2 + 24);
                if ((unint64_t)v41 <= v34)
                {
                  *(_OWORD *)v142 = *(_OWORD *)a4;
                  v145 = *(_QWORD *)(a2 + 24);
                  if (v141 > 0x10)
                  {
                    v146 = (_OWORD *)(v145 + 16);
                    v147 = v145 + v141;
                    v148 = (__int128 *)(a4 + 16);
                    do
                    {
                      v149 = *v148++;
                      *v146++ = v149;
                    }
                    while ((unint64_t)v146 < v147);
                    goto LABEL_240;
                  }
                  *(_QWORD *)(a2 + 24) = v145 + v141;
                  v78 = *(_QWORD *)(a2 + 8);
LABEL_242:
                  v87 = v58 - 3;
                  *(_WORD *)(v78 + 4) = v141;
                  *(_DWORD *)v78 = (_DWORD)v59 + 3;
                  v22 = v26;
                  v26 = v59;
                  if ((unint64_t)(v58 - 3) < 0x10000)
                    goto LABEL_83;
LABEL_82:
                  v89 = (unint64_t)(v78 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v89;
                  v26 = v59;
                  goto LABEL_83;
                }
                if ((unint64_t)a4 <= v34)
                {
                  v144 = &v142[v34 - (_QWORD)a4];
                  v150 = a4;
                  v151 = *(char **)(a2 + 24);
                  do
                  {
                    v152 = *(_OWORD *)v150;
                    v150 += 16;
                    *(_OWORD *)v151 = v152;
                    v151 += 16;
                  }
                  while (v151 < v144);
                  v143 = v7 - 32;
                  if (v34 >= (unint64_t)v41)
                    goto LABEL_240;
                }
                else
                {
                  v143 = a4;
                  v144 = *(char **)(a2 + 24);
                  if (a4 >= v41)
                  {
LABEL_240:
                    *(_QWORD *)(a2 + 24) += v141;
                    v78 = *(_QWORD *)(a2 + 8);
                    if (v141 >= 0x10000)
                    {
                      v171 = (unint64_t)(v78 - *(_QWORD *)a2) >> 3;
                      *(_DWORD *)(a2 + 72) = 1;
                      *(_DWORD *)(a2 + 76) = v171;
                    }
                    goto LABEL_242;
                  }
                }
                if ((unint64_t)a4 <= v34)
                  v153 = v7 - 32;
                else
                  v153 = a4;
                v154 = v41 - v153;
                if ((unint64_t)(v41 - v153) < 8)
                {
                  v155 = v143;
                  goto LABEL_239;
                }
                if ((unint64_t)(v142 - a4) < 0x20)
                {
                  v155 = v143;
                  goto LABEL_239;
                }
                if (v154 >= 0x20)
                {
                  v657 = v154 & 0xFFFFFFFFFFFFFFE0;
                  v157 = (__int128 *)(v143 + 16);
                  v158 = &v142[v153 - a4 + 16];
                  v159 = v154 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v160 = *v157;
                    *((_OWORD *)v158 - 1) = *(v157 - 1);
                    *(_OWORD *)v158 = v160;
                    v157 += 2;
                    v158 += 32;
                    v159 -= 32;
                  }
                  while (v159);
                  v156 = v154 & 0xFFFFFFFFFFFFFFE0;
                  if (v154 == v657)
                    goto LABEL_240;
                  if ((v154 & 0x18) == 0)
                  {
                    v155 = &v143[v657];
                    v144 += v657;
                    do
                    {
LABEL_239:
                      v170 = *v155++;
                      *v144++ = v170;
                    }
                    while (v155 < v41);
                    goto LABEL_240;
                  }
                }
                else
                {
                  v156 = 0;
                }
                v144 += v154 & 0xFFFFFFFFFFFFFFF8;
                v155 = &v143[v154 & 0xFFFFFFFFFFFFFFF8];
                v161 = &v143[v156];
                v162 = &v142[&v153[v156] - a4];
                v163 = v156 - (v154 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v164 = *(_QWORD *)v161;
                  v161 += 8;
                  *(_QWORD *)v162 = v164;
                  v162 += 8;
                  v163 += 8;
                }
                while (v163);
                if (v154 == (v154 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_240;
                goto LABEL_239;
              }
              v121 = 0;
              v122 = v18 + 16;
              while (1)
              {
                v123 = &v122[v121];
                if ((unint64_t)&v122[v121] >= v30)
                  break;
                v124 = *(_QWORD *)(v652 + v37 + v121);
                v121 += 8;
                v125 = *(_QWORD *)v123 ^ v124;
                if (v125)
                {
                  v58 = v121 + (__clz(__rbit64(v125)) >> 3) + 8;
                  v59 = &v18[-v53];
                  if (v18 > (unsigned __int8 *)a4)
                    goto LABEL_134;
                  goto LABEL_178;
                }
              }
              v114 = &v18[v121 + 16];
              v55 = (_DWORD *)(v652 + v37 + v121);
              if ((unint64_t)v114 < v31)
                goto LABEL_123;
            }
            if ((unint64_t)v114 >= v32)
            {
              if (v114 >= (unsigned __int8 *)v7)
                goto LABEL_133;
            }
            else
            {
              if (*(unsigned __int16 *)v55 == *(unsigned __int16 *)v114)
              {
                v114 += 2;
                v55 = (_DWORD *)((char *)v55 + 2);
              }
              if (v114 >= (unsigned __int8 *)v7)
              {
LABEL_133:
                v58 = v114 - v18;
                v59 = &v18[-v53];
                if (v18 <= (unsigned __int8 *)a4)
                  goto LABEL_178;
                goto LABEL_134;
              }
            }
            if (*(unsigned __int8 *)v55 == *v114)
              ++v114;
            goto LABEL_133;
          }
        }
        if (v40 <= v673 || (v60 = v6 + v40, *(_DWORD *)(v6 + v40) != *(_DWORD *)v18))
        {
          _X10 = &v18[(v18 - (unsigned __int8 *)a4) >> 8];
          v18 = _X10 + 1;
          _X10 += 257;
          __asm { PRFM            #0, [X10] }
          goto LABEL_28;
        }
        v61 = *(_QWORD *)v41;
        v62 = 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)v41) >> v28);
        v63 = *(unsigned int *)(v27 + v62);
        *(_DWORD *)(v27 + v62) = v38 + 1;
        if (v63 > v673)
        {
          v64 = v6 + v63;
          if (*(_QWORD *)(v6 + v63) == v61)
          {
            v65 = (char *)(v18 + 9);
            v66 = (_DWORD *)(v64 + 8);
            if (v30 <= (unint64_t)(v18 + 9))
            {
              v139 = v18 + 9;
              v68 = v668;
              if ((unint64_t)v65 < v31)
              {
LABEL_182:
                if (*v66 == *(_DWORD *)v139)
                {
                  v139 += 4;
                  ++v66;
                }
              }
            }
            else
            {
              v67 = *(_QWORD *)v65 ^ *(_QWORD *)v66;
              v68 = v668;
              if (v67)
              {
                v58 = (__clz(__rbit64(v67)) >> 3) + 8;
                v59 = (unsigned __int8 *)&v41[-v64];
                if (v41 <= a4)
                  goto LABEL_198;
                goto LABEL_193;
              }
              v165 = 0;
              v166 = v18 + 17;
              while (1)
              {
                v167 = &v166[v165];
                if ((unint64_t)&v166[v165] >= v30)
                  break;
                v168 = *(_QWORD *)(v652 + v63 + v165);
                v165 += 8;
                v169 = *(_QWORD *)v167 ^ v168;
                if (v169)
                {
                  v58 = v165 + (__clz(__rbit64(v169)) >> 3) + 8;
                  v59 = (unsigned __int8 *)&v41[-v64];
                  if (v41 > a4)
                    goto LABEL_193;
                  goto LABEL_198;
                }
              }
              v139 = &v18[v165 + 17];
              v66 = (_DWORD *)(v652 + v63 + v165);
              if ((unint64_t)v139 < v31)
                goto LABEL_182;
            }
            if ((unint64_t)v139 >= v32)
            {
              if (v139 >= (unsigned __int8 *)v7)
                goto LABEL_192;
            }
            else
            {
              if (*(unsigned __int16 *)v66 == *(unsigned __int16 *)v139)
              {
                v139 += 2;
                v66 = (_DWORD *)((char *)v66 + 2);
              }
              if (v139 >= (unsigned __int8 *)v7)
              {
LABEL_192:
                v58 = v139 - (unsigned __int8 *)v65 + 8;
                v59 = (unsigned __int8 *)&v41[-v64];
                if (v41 <= a4)
                  goto LABEL_198;
LABEL_193:
                v140 = (unsigned __int8 *)(v664 + v63);
                while (*v18 == *v140)
                {
                  ++v58;
                  v117 = v18 - 1;
                  if (v18 > (unsigned __int8 *)a4)
                  {
                    --v18;
                    v24 = (unint64_t)v140-- > v68;
                    if (v24)
                      continue;
                  }
                  goto LABEL_197;
                }
                v41 = (char *)(v18 + 1);
                goto LABEL_198;
              }
            }
            if (*(unsigned __int8 *)v66 == *v139)
              ++v139;
            goto LABEL_192;
          }
        }
        v111 = v18 + 4;
        v112 = (_DWORD *)(v60 + 4);
        if (v30 <= (unint64_t)(v18 + 4))
        {
          v118 = v18 + 4;
          if ((unint64_t)v111 < v31)
          {
LABEL_142:
            if (*v112 == *(_DWORD *)v118)
            {
              v118 += 4;
              ++v112;
            }
          }
        }
        else
        {
          v113 = *v111 ^ *(_QWORD *)v112;
          if (v113)
          {
            v58 = (__clz(__rbit64(v113)) >> 3) + 4;
            v59 = &v18[-v60];
            if (v18 <= (unsigned __int8 *)a4)
            {
LABEL_178:
              v41 = (char *)v18;
              goto LABEL_198;
            }
LABEL_153:
            v115 = v18 - 1;
            v119 = (unsigned __int8 *)(v664 + v40);
            while (*v115 == *v119)
            {
              ++v58;
              v117 = v115 - 1;
              if ((unint64_t)v119 > v668)
              {
                --v119;
                v24 = v115-- > (unsigned __int8 *)a4;
                if (v24)
                  continue;
              }
LABEL_197:
              v41 = (char *)(v117 + 1);
              goto LABEL_198;
            }
            goto LABEL_158;
          }
          v134 = 0;
          v135 = v18 + 12;
          while (1)
          {
            v136 = &v135[v134];
            if ((unint64_t)&v135[v134] >= v30)
              break;
            v137 = *(_QWORD *)(v647 + v40 + v134);
            v134 += 8;
            v138 = *(_QWORD *)v136 ^ v137;
            if (v138)
            {
              v58 = v134 + (__clz(__rbit64(v138)) >> 3) + 4;
              v59 = &v18[-v60];
              if (v18 > (unsigned __int8 *)a4)
                goto LABEL_153;
              goto LABEL_178;
            }
          }
          v118 = &v18[v134 + 12];
          v112 = (_DWORD *)(v647 + v40 + v134);
          if ((unint64_t)v118 < v31)
            goto LABEL_142;
        }
        if ((unint64_t)v118 >= v32)
        {
          if (v118 >= (unsigned __int8 *)v7)
            goto LABEL_152;
        }
        else
        {
          if (*(unsigned __int16 *)v112 == *(unsigned __int16 *)v118)
          {
            v118 += 2;
            v112 = (_DWORD *)((char *)v112 + 2);
          }
          if (v118 >= (unsigned __int8 *)v7)
          {
LABEL_152:
            v58 = v118 - v18;
            v59 = &v18[-v60];
            if (v18 <= (unsigned __int8 *)a4)
              goto LABEL_178;
            goto LABEL_153;
          }
        }
        if (*(unsigned __int8 *)v112 == *v118)
          ++v118;
        goto LABEL_152;
      }
      v42 = (char *)(v18 + 5);
      v43 = &v18[-v26 + 5];
      if (v30 <= (unint64_t)(v18 + 5))
      {
        v75 = v18 + 5;
        if ((unint64_t)v42 < v31)
        {
LABEL_54:
          if (*(_DWORD *)v43 == *(_DWORD *)v75)
          {
            v75 += 4;
            v43 += 4;
          }
        }
      }
      else
      {
        v44 = *(_QWORD *)v42 ^ *(_QWORD *)v43;
        if (v44)
        {
          v45 = __clz(__rbit64(v44)) >> 3;
          v46 = v41 - a4;
          v47 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)v41 <= v34)
            goto LABEL_34;
          goto LABEL_65;
        }
        v106 = 0;
        v107 = v18 + 13;
        while (1)
        {
          v108 = &v107[v106];
          if ((unint64_t)&v107[v106] >= v30)
            break;
          v109 = *(_QWORD *)&v18[v106 + 13 - v26];
          v106 += 8;
          v110 = *(_QWORD *)v108 ^ v109;
          if (v110)
          {
            v45 = v106 + (__clz(__rbit64(v110)) >> 3);
            v46 = v41 - a4;
            v47 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v41 > v34)
              goto LABEL_65;
            goto LABEL_34;
          }
        }
        v75 = &v18[v106 + 13];
        v43 = &v75[-v26];
        if ((unint64_t)v75 < v31)
          goto LABEL_54;
      }
      if ((unint64_t)v75 >= v32)
        break;
      if (*(unsigned __int16 *)v43 == *(unsigned __int16 *)v75)
      {
        v75 += 2;
        v43 += 2;
      }
      if (v75 < (unsigned __int8 *)v7)
        goto LABEL_62;
LABEL_64:
      v45 = v75 - (unsigned __int8 *)v42;
      v46 = v41 - a4;
      v47 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v41 <= v34)
      {
LABEL_34:
        *v47 = *(_OWORD *)a4;
        v48 = *(_QWORD *)(a2 + 24);
        if (v46 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v48 + v46;
          v78 = *(_QWORD *)(a2 + 8);
          goto LABEL_81;
        }
        v49 = (_OWORD *)(v48 + 16);
        v50 = v48 + v46;
        v51 = (__int128 *)(a4 + 16);
        do
        {
          v52 = *v51++;
          *v49++ = v52;
        }
        while ((unint64_t)v49 < v50);
        goto LABEL_79;
      }
LABEL_65:
      if ((unint64_t)a4 <= v34)
      {
        v77 = (char *)v47 + v34 - (_QWORD)a4;
        v79 = a4;
        v80 = v47;
        do
        {
          v81 = *(_OWORD *)v79;
          v79 += 16;
          *v80++ = v81;
        }
        while (v80 < (_OWORD *)v77);
        v76 = v7 - 32;
        if (v34 >= (unint64_t)v41)
          goto LABEL_79;
      }
      else
      {
        v76 = a4;
        v77 = v47;
        if (a4 >= v41)
          goto LABEL_79;
      }
      if ((unint64_t)a4 <= v34)
        v82 = v7 - 32;
      else
        v82 = a4;
      v83 = v18 - (unsigned __int8 *)v82 + 1;
      if (v83 < 8 || (unint64_t)((char *)v47 - a4) < 0x20)
      {
        v84 = v76;
        goto LABEL_78;
      }
      if (v83 >= 0x20)
      {
        v656 = v83 & 0xFFFFFFFFFFFFFFE0;
        v126 = (__int128 *)(v76 + 16);
        v127 = (_OWORD *)((char *)v47 + v82 - a4 + 16);
        v128 = v83 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v129 = *v126;
          *(v127 - 1) = *(v126 - 1);
          *v127 = v129;
          v126 += 2;
          v127 += 2;
          v128 -= 32;
        }
        while (v128);
        v120 = v83 & 0xFFFFFFFFFFFFFFE0;
        if (v83 == v656)
          goto LABEL_79;
        if ((v83 & 0x18) == 0)
        {
          v84 = &v76[v656];
          v77 += v656;
          do
          {
LABEL_78:
            v85 = *v84++;
            *v77++ = v85;
          }
          while (v84 != &v76[v83]);
          goto LABEL_79;
        }
      }
      else
      {
        v120 = 0;
      }
      v77 += v83 & 0xFFFFFFFFFFFFFFF8;
      v84 = &v76[v83 & 0xFFFFFFFFFFFFFFF8];
      v130 = &v76[v120];
      v131 = (_QWORD *)((char *)v47 + &v82[v120] - a4);
      v132 = v120 - (v83 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v133 = *(_QWORD *)v130;
        v130 += 8;
        *v131++ = v133;
        v132 += 8;
      }
      while (v132);
      if (v83 != (v83 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_78;
LABEL_79:
      *(_QWORD *)(a2 + 24) += v46;
      v78 = *(_QWORD *)(a2 + 8);
      if (v46 >= 0x10000)
      {
        v86 = (unint64_t)(v78 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v86;
      }
LABEL_81:
      v58 = v45 + 4;
      v87 = v45 + 1;
      *(_WORD *)(v78 + 4) = v46;
      *(_DWORD *)v78 = 1;
      v88 = (v45 + 1) >> 16;
      v59 = v26;
      if (v88)
        goto LABEL_82;
LABEL_83:
      *(_WORD *)(v78 + 6) = v87;
      v90 = v78 + 8;
      *(_QWORD *)(a2 + 8) = v78 + 8;
      a4 = &v41[v58];
      if ((unint64_t)&v41[v58] <= v15)
      {
        v91 = *(_QWORD *)(v6 + (v38 + 2));
        *(_DWORD *)(v27 + 4 * ((0xCF1BBCDCB7A56463 * v91) >> v28)) = v38 + 2;
        *(_DWORD *)(v27 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(a4 - 2)) >> v28)) = (_DWORD)a4 - 2 - v6;
        *(_DWORD *)(v33 + 4 * ((0xCF1BBCDCBFA56300 * v91) >> v29)) = v38 + 2;
        *(_DWORD *)(v33 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(a4 - 1)) >> v29)) = (_DWORD)a4 - 1 - v6;
        v92 = v26;
        v93 = v22;
        while (1)
        {
          v26 = v93;
          v93 = v92;
          if (!(_DWORD)v26 || *(_DWORD *)a4 != *(_DWORD *)&a4[-v26])
          {
            v22 = v26;
            v26 = v92;
            goto LABEL_27;
          }
          v94 = a4 + 4;
          v95 = &a4[-v26 + 4];
          if (v30 <= (unint64_t)(a4 + 4))
            break;
          v96 = *(_QWORD *)v94 ^ *(_QWORD *)v95;
          if (!v96)
          {
            v101 = 0;
            v102 = a4 + 12;
            while (1)
            {
              v103 = &v102[v101];
              if ((unint64_t)&v102[v101] >= v30)
                break;
              v104 = *(_QWORD *)&a4[v101 + 12 - v26];
              v101 += 8;
              v105 = *(_QWORD *)v103 ^ v104;
              if (v105)
              {
                v97 = v101 + (__clz(__rbit64(v105)) >> 3);
                goto LABEL_103;
              }
            }
            v98 = &a4[v101 + 12];
            v95 = &v98[-v26];
            if ((unint64_t)v98 >= v31)
            {
LABEL_94:
              if ((unint64_t)v98 >= v32)
              {
                if (v98 < v7)
                  goto LABEL_100;
              }
              else
              {
                if (*(unsigned __int16 *)v95 == *(unsigned __int16 *)v98)
                {
                  v98 += 2;
                  v95 += 2;
                }
                if (v98 >= v7)
                  goto LABEL_102;
LABEL_100:
                if (*v95 == *v98)
                  ++v98;
              }
LABEL_102:
              v97 = v98 - v94;
              goto LABEL_103;
            }
LABEL_92:
            if (*(_DWORD *)v95 == *(_DWORD *)v98)
            {
              v98 += 4;
              v95 += 4;
            }
            goto LABEL_94;
          }
          v97 = __clz(__rbit64(v96)) >> 3;
LABEL_103:
          v99 = *(_QWORD *)a4;
          *(_DWORD *)(v33 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)a4) >> v29)) = (_DWORD)a4 - v6;
          *(_DWORD *)(v27 + 4 * ((0xCF1BBCDCB7A56463 * v99) >> v28)) = (_DWORD)a4 - v6;
          if ((unint64_t)a4 <= v34)
          {
            *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)a4;
            v90 = *(_QWORD *)(a2 + 8);
          }
          *(_WORD *)(v90 + 4) = 0;
          *(_DWORD *)v90 = 1;
          if (v97 + 1 >= 0x10000)
          {
            v100 = (unint64_t)(v90 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v100;
          }
          *(_WORD *)(v90 + 6) = v97 + 1;
          v90 += 8;
          a4 += v97 + 4;
          *(_QWORD *)(a2 + 8) = v90;
          v92 = v26;
          v22 = v93;
          v18 = (unsigned __int8 *)a4;
          if ((unint64_t)a4 > v15)
            goto LABEL_28;
        }
        v98 = a4 + 4;
        if ((unint64_t)v94 >= v31)
          goto LABEL_94;
        goto LABEL_92;
      }
LABEL_27:
      v18 = (unsigned __int8 *)a4;
LABEL_28:
      if ((unint64_t)v18 >= v15)
        goto LABEL_964;
    }
    if (v75 >= (unsigned __int8 *)v7)
      goto LABEL_64;
LABEL_62:
    if (*v43 == *v75)
      ++v75;
    goto LABEL_64;
  }
LABEL_965:
  if ((_DWORD)v26)
    v644 = v26;
  else
    v644 = v25;
  if ((_DWORD)v22)
    v645 = v22;
  else
    v645 = v25;
  *a3 = v644;
  a3[1] = v645;
  return v7 - a4;
}

int64_t ZSTD_compressBlock_greedy(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  int v12;
  unsigned int v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  _OWORD *v59;
  char *v60;
  _BYTE *v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  char *v81;
  _QWORD *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  _OWORD *v89;
  __int128 v90;
  char *v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  char *v112;
  uint64_t v113;
  _DWORD *v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  unint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  __int128 *v129;
  _OWORD *v130;
  unint64_t v131;
  __int128 v132;
  char *v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _OWORD *v138;
  unint64_t v139;
  __int128 *v140;
  __int128 v141;
  uint64_t v142;
  __int16 v143;
  char v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  __int16 v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;

  v5 = &a4[a5];
  v6 = (unint64_t)&a4[a5 - 8];
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v10 = *a3;
  v9 = a3[1];
  v168 = v7 + v8;
  if ((_DWORD)a4 == (_DWORD)v7 + (_DWORD)v8)
    v11 = a4 + 1;
  else
    v11 = a4;
  v12 = (_DWORD)v11 - v7;
  v13 = 1 << *(_DWORD *)(a1 + 192);
  if (v12 - (int)v8 > v13 && *(_DWORD *)(a1 + 32) == 0)
    LODWORD(v8) = v12 - v13;
  v15 = v12 - v8;
  if (v9 <= v15)
    v16 = v9;
  else
    v16 = 0;
  if (v10 <= v15)
    v17 = v10;
  else
    v17 = 0;
  if ((unint64_t)v11 < v6)
  {
    v164 = v15;
    v165 = a3[1];
    v166 = *a3;
    v167 = a3;
    v18 = (unint64_t)(v5 - 7);
    v19 = (unint64_t)(v5 - 3);
    v20 = (unint64_t)(v5 - 1);
    v21 = (unint64_t)(v5 - 32);
    while (1)
    {
      if ((_DWORD)v17)
      {
        v22 = v11 + 1;
        if (*(_DWORD *)&v11[-v17 + 1] == *(_DWORD *)(v11 + 1))
          break;
      }
      v27 = *(_DWORD *)(a1 + 208);
      if ((v27 - 6) < 2)
      {
        v28 = *(_QWORD *)(a1 + 64);
        v29 = *(_DWORD *)(a1 + 196);
        v30 = 1 << v29;
        v31 = *(_QWORD *)(a1 + 8);
        v32 = (_DWORD)v11 - v31;
        v33 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)v11 - (int)v31 - *(_DWORD *)(a1 + 28) > v33 && *(_DWORD *)(a1 + 32) == 0)
          v35 = (_DWORD)v11 - v31 - v33;
        else
          v35 = *(_DWORD *)(a1 + 28);
        if (v32 >= v30)
          v36 = v32 - v30;
        else
          v36 = 0;
        v37 = *(_QWORD *)(a1 + 48);
        v38 = *(_DWORD *)(a1 + 204);
        v39 = *(unsigned int *)(a1 + 36);
        v40 = 64 - *(_DWORD *)(a1 + 200);
        if (v39 < v32)
        {
          v41 = ~(-1 << v29);
          do
          {
            v42 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v31 + v39)) >> v40);
            *(_DWORD *)(v28 + 4 * (v39 & v41)) = *(_DWORD *)(v37 + v42);
            *(_DWORD *)(v37 + v42) = v39++;
          }
          while (v39 < ((_DWORD)v11 - v31));
        }
        *(_DWORD *)(a1 + 36) = v32;
        v43 = *(_DWORD *)(v37 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v11) >> v40));
        if (v43 < v35)
          goto LABEL_17;
        v44 = v30 - 1;
        v45 = 1 << v38;
        v46 = v32 + 2;
        v47 = v11 + 8;
        v169 = v31 + 8;
        v48 = 3;
        v49 = 999999999;
        while (1)
        {
          v50 = (_QWORD *)(v31 + v43);
          if (*((unsigned __int8 *)v50 + v48) != v11[v48])
            goto LABEL_53;
          if (v18 <= (unint64_t)v11)
            break;
          v51 = *v50 ^ *(_QWORD *)v11;
          if (v51)
          {
            v52 = __clz(__rbit64(v51)) >> 3;
            if (v52 > v48)
              goto LABEL_52;
            goto LABEL_53;
          }
          v54 = 0;
          do
          {
            v53 = &v47[v54];
            if ((unint64_t)&v47[v54] >= v18)
            {
              v50 = (_QWORD *)(v169 + v43 + v54);
              if ((unint64_t)v53 >= v19)
                goto LABEL_47;
              goto LABEL_45;
            }
            v55 = *(_QWORD *)(v169 + v43 + v54);
            v54 += 8;
            v56 = *(_QWORD *)v53 ^ v55;
          }
          while (!v56);
          v52 = v54 + (__clz(__rbit64(v56)) >> 3);
          if (v52 <= v48)
            goto LABEL_53;
LABEL_52:
          v49 = v46 - v43;
          v48 = v52;
          if (&v11[v52] == v5)
            goto LABEL_179;
LABEL_53:
          if (v43 > v36)
          {
            if (--v45)
            {
              v43 = *(_DWORD *)(v28 + 4 * (v43 & v44));
              if (v43 >= v35)
                continue;
            }
          }
          goto LABEL_178;
        }
        v53 = v11;
        if ((unint64_t)v11 >= v19)
          goto LABEL_47;
LABEL_45:
        if (*(_DWORD *)v50 == *(_DWORD *)v53)
        {
          v53 += 4;
          v50 = (_QWORD *)((char *)v50 + 4);
        }
LABEL_47:
        if ((unint64_t)v53 < v20)
        {
          if (*(unsigned __int16 *)v50 == *(unsigned __int16 *)v53)
          {
            v53 += 2;
            v50 = (_QWORD *)((char *)v50 + 2);
          }
          if (v53 < v5)
          {
LABEL_49:
            if (*(unsigned __int8 *)v50 == *v53)
              ++v53;
          }
        }
        else if (v53 < v5)
        {
          goto LABEL_49;
        }
        v52 = v53 - v11;
        if (v52 > v48)
          goto LABEL_52;
        goto LABEL_53;
      }
      if (v27 == 5)
      {
        v62 = *(_QWORD *)(a1 + 64);
        v63 = *(_DWORD *)(a1 + 196);
        v64 = 1 << v63;
        v65 = *(_QWORD *)(a1 + 8);
        v66 = (_DWORD)v11 - v65;
        v67 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)v11 - (int)v65 - *(_DWORD *)(a1 + 28) > v67 && *(_DWORD *)(a1 + 32) == 0)
          v69 = (_DWORD)v11 - v65 - v67;
        else
          v69 = *(_DWORD *)(a1 + 28);
        if (v66 >= v64)
          v70 = v66 - v64;
        else
          v70 = 0;
        v71 = *(_QWORD *)(a1 + 48);
        v72 = *(_DWORD *)(a1 + 204);
        v73 = *(unsigned int *)(a1 + 36);
        v74 = 64 - *(_DWORD *)(a1 + 200);
        if (v73 < v66)
        {
          v75 = ~(-1 << v63);
          do
          {
            v76 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v65 + v73)) >> v74);
            *(_DWORD *)(v62 + 4 * (v73 & v75)) = *(_DWORD *)(v71 + v76);
            *(_DWORD *)(v71 + v76) = v73++;
          }
          while (v73 < ((_DWORD)v11 - v65));
        }
        *(_DWORD *)(a1 + 36) = v66;
        v77 = *(_DWORD *)(v71 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v11) >> v74));
        if (v77 < v69)
          goto LABEL_17;
        v78 = v64 - 1;
        v79 = 1 << v72;
        v80 = v66 + 2;
        v81 = v11 + 8;
        v170 = v65 + 8;
        v48 = 3;
        v49 = 999999999;
        while (1)
        {
          v82 = (_QWORD *)(v65 + v77);
          if (*((unsigned __int8 *)v82 + v48) != v11[v48])
            goto LABEL_109;
          if (v18 <= (unint64_t)v11)
            break;
          v83 = *v82 ^ *(_QWORD *)v11;
          if (v83)
          {
            v52 = __clz(__rbit64(v83)) >> 3;
            if (v52 > v48)
              goto LABEL_108;
            goto LABEL_109;
          }
          v85 = 0;
          do
          {
            v84 = &v81[v85];
            if ((unint64_t)&v81[v85] >= v18)
            {
              v82 = (_QWORD *)(v170 + v77 + v85);
              if ((unint64_t)v84 >= v19)
                goto LABEL_103;
              goto LABEL_101;
            }
            v86 = *(_QWORD *)(v170 + v77 + v85);
            v85 += 8;
            v87 = *(_QWORD *)v84 ^ v86;
          }
          while (!v87);
          v52 = v85 + (__clz(__rbit64(v87)) >> 3);
          if (v52 <= v48)
            goto LABEL_109;
LABEL_108:
          v49 = v80 - v77;
          v48 = v52;
          if (&v11[v52] == v5)
            goto LABEL_179;
LABEL_109:
          if (v77 > v70)
          {
            if (--v79)
            {
              v77 = *(_DWORD *)(v62 + 4 * (v77 & v78));
              if (v77 >= v69)
                continue;
            }
          }
          goto LABEL_178;
        }
        v84 = v11;
        if ((unint64_t)v11 >= v19)
          goto LABEL_103;
LABEL_101:
        if (*(_DWORD *)v82 == *(_DWORD *)v84)
        {
          v84 += 4;
          v82 = (_QWORD *)((char *)v82 + 4);
        }
LABEL_103:
        if ((unint64_t)v84 < v20)
        {
          if (*(unsigned __int16 *)v82 == *(unsigned __int16 *)v84)
          {
            v84 += 2;
            v82 = (_QWORD *)((char *)v82 + 2);
          }
          if (v84 < v5)
          {
LABEL_105:
            if (*(unsigned __int8 *)v82 == *v84)
              ++v84;
          }
        }
        else if (v84 < v5)
        {
          goto LABEL_105;
        }
        v52 = v84 - v11;
        if (v52 > v48)
          goto LABEL_108;
        goto LABEL_109;
      }
      v94 = *(_QWORD *)(a1 + 64);
      v95 = *(_DWORD *)(a1 + 196);
      v96 = 1 << v95;
      v97 = *(_QWORD *)(a1 + 8);
      v98 = (_DWORD)v11 - v97;
      v99 = 1 << *(_DWORD *)(a1 + 192);
      if ((int)v11 - (int)v97 - *(_DWORD *)(a1 + 28) > v99 && *(_DWORD *)(a1 + 32) == 0)
        v101 = (_DWORD)v11 - v97 - v99;
      else
        v101 = *(_DWORD *)(a1 + 28);
      if (v98 >= v96)
        v102 = v98 - v96;
      else
        v102 = 0;
      v103 = *(_QWORD *)(a1 + 48);
      v104 = *(_DWORD *)(a1 + 204);
      v105 = *(unsigned int *)(a1 + 36);
      v106 = 32 - *(_DWORD *)(a1 + 200);
      if (v105 < v98)
      {
        do
        {
          v107 = 4 * ((-1640531535 * *(_DWORD *)(v97 + v105)) >> v106);
          *(_DWORD *)(v94 + 4 * (v105 & ~(-1 << v95))) = *(_DWORD *)(v103 + v107);
          *(_DWORD *)(v103 + v107) = v105++;
        }
        while (v105 < ((_DWORD)v11 - v97));
      }
      *(_DWORD *)(a1 + 36) = v98;
      v108 = *(_DWORD *)(v103 + 4 * ((-1640531535 * *(_DWORD *)v11) >> v106));
      if (v108 < v101)
        goto LABEL_17;
      v109 = v96 - 1;
      v110 = 1 << v104;
      v111 = v98 + 2;
      v112 = v11 + 8;
      v113 = v97 + 8;
      v48 = 3;
      v49 = 999999999;
      while (1)
      {
        v114 = (_DWORD *)(v97 + v108);
        if (*((unsigned __int8 *)v114 + v48) != v11[v48])
          goto LABEL_163;
        if (v18 <= (unint64_t)v11)
        {
          v116 = v11;
          if ((unint64_t)v11 < v19)
          {
LABEL_155:
            if (*v114 == *(_DWORD *)v116)
            {
              v116 += 4;
              ++v114;
            }
          }
LABEL_157:
          if ((unint64_t)v116 < v20)
          {
            if (*(unsigned __int16 *)v114 == *(unsigned __int16 *)v116)
            {
              v116 += 2;
              v114 = (_DWORD *)((char *)v114 + 2);
            }
            if (v116 < v5)
            {
LABEL_159:
              if (*(unsigned __int8 *)v114 == *v116)
                ++v116;
            }
          }
          else if (v116 < v5)
          {
            goto LABEL_159;
          }
          v52 = v116 - v11;
          if (v116 - v11 > v48)
            goto LABEL_162;
          goto LABEL_163;
        }
        v115 = *(_QWORD *)v11 ^ *(_QWORD *)v114;
        if (v115)
        {
          v52 = __clz(__rbit64(v115)) >> 3;
          if (v52 > v48)
            goto LABEL_162;
          goto LABEL_163;
        }
        v117 = 0;
        do
        {
          v116 = &v112[v117];
          if ((unint64_t)&v112[v117] >= v18)
          {
            v114 = (_DWORD *)(v113 + v108 + v117);
            if ((unint64_t)v116 < v19)
              goto LABEL_155;
            goto LABEL_157;
          }
          v118 = *(_QWORD *)(v113 + v108 + v117);
          v117 += 8;
          v119 = *(_QWORD *)v116 ^ v118;
        }
        while (!v119);
        v52 = v117 + (__clz(__rbit64(v119)) >> 3);
        if (v52 <= v48)
          goto LABEL_163;
LABEL_162:
        v49 = v111 - v108;
        v48 = v52;
        if (&v11[v52] == v5)
          break;
LABEL_163:
        if (v108 > v102)
        {
          if (--v110)
          {
            v108 = *(_DWORD *)(v94 + 4 * (v108 & v109));
            if (v108 >= v101)
              continue;
          }
        }
LABEL_178:
        v52 = v48;
        if (v48)
          break;
LABEL_17:
        v11 += ((v11 - a4) >> 8) + 1;
        goto LABEL_18;
      }
LABEL_179:
      if (v52 <= 3)
        goto LABEL_17;
      if (!v49)
      {
        v58 = v11 - a4;
        v59 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)v11 <= v21)
          goto LABEL_211;
LABEL_77:
        if ((unint64_t)a4 <= v21)
        {
          v61 = (char *)v59 + v21 - (_QWORD)a4;
          v88 = a4;
          v89 = v59;
          do
          {
            v90 = *(_OWORD *)v88;
            v88 += 16;
            *v89++ = v90;
          }
          while (v89 < (_OWORD *)v61);
          v60 = v5 - 32;
          if (v21 >= (unint64_t)v11)
            goto LABEL_219;
        }
        else
        {
          v60 = a4;
          v61 = v59;
          if (a4 >= v11)
            goto LABEL_219;
        }
        if ((unint64_t)a4 <= v21)
          v91 = v5 - 32;
        else
          v91 = a4;
        v92 = v11 - v91;
        if ((unint64_t)(v11 - v91) < 8)
        {
          v93 = v60;
          goto LABEL_218;
        }
        if ((unint64_t)((char *)v59 - a4) < 0x20)
        {
          v93 = v60;
          goto LABEL_218;
        }
        if (v92 < 0x20)
        {
          v128 = 0;
          goto LABEL_205;
        }
        v128 = v92 & 0xFFFFFFFFFFFFFFE0;
        v129 = (__int128 *)(v60 + 16);
        v130 = (_OWORD *)((char *)v59 + v91 - a4 + 16);
        v131 = v92 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v132 = *v129;
          *(v130 - 1) = *(v129 - 1);
          *v130 = v132;
          v129 += 2;
          v130 += 2;
          v131 -= 32;
        }
        while (v131);
        if (v92 == v128)
          goto LABEL_219;
        if ((v92 & 0x18) != 0)
        {
LABEL_205:
          v61 += v92 & 0xFFFFFFFFFFFFFFF8;
          v93 = &v60[v92 & 0xFFFFFFFFFFFFFFF8];
          v133 = &v60[v128];
          v134 = (_QWORD *)((char *)v59 + &v91[v128] - a4);
          v135 = v128 - (v92 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v136 = *(_QWORD *)v133;
            v133 += 8;
            *v134++ = v136;
            v135 += 8;
          }
          while (v135);
          if (v92 == (v92 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_219;
        }
        else
        {
          v93 = &v60[v128];
          v61 += v128;
        }
        do
        {
LABEL_218:
          v144 = *v93++;
          *v61++ = v144;
        }
        while (v93 < v11);
        goto LABEL_219;
      }
      if (v11 <= a4 || (unint64_t)&v11[-v49 + 2] <= v168)
      {
        v121 = (unint64_t)v11;
      }
      else
      {
        v120 = 1 - v49;
        v121 = (unint64_t)v11;
        while (1)
        {
          v122 = *(unsigned __int8 *)--v121;
          if (v122 != v11[v120])
            break;
          ++v52;
          if (v121 > (unint64_t)a4)
          {
            v123 = (unint64_t)&v11[v120];
            v11 = (char *)v121;
            if (v123 > v168)
              continue;
          }
          goto LABEL_210;
        }
        v121 = (unint64_t)v11;
      }
LABEL_210:
      v16 = v17;
      v17 = (v49 - 2);
      v11 = (char *)v121;
      v58 = v121 - (_QWORD)a4;
      v59 = *(_OWORD **)(a2 + 24);
      if (v121 > v21)
        goto LABEL_77;
LABEL_211:
      *v59 = *(_OWORD *)a4;
      v137 = *(_QWORD *)(a2 + 24);
      if (v58 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v137 + v58;
        v142 = *(_QWORD *)(a2 + 8);
        v143 = v52 - 3;
        *(_WORD *)(v142 + 4) = v58;
        *(_DWORD *)v142 = v49 + 1;
        if (v52 - 3 < 0x10000)
          goto LABEL_221;
        goto LABEL_224;
      }
      v138 = (_OWORD *)(v137 + 16);
      v139 = v137 + v58;
      v140 = (__int128 *)(a4 + 16);
      do
      {
        v141 = *v140++;
        *v138++ = v141;
      }
      while ((unint64_t)v138 < v139);
LABEL_219:
      *(_QWORD *)(a2 + 24) += v58;
      v142 = *(_QWORD *)(a2 + 8);
      if (v58 >= 0x10000)
      {
        v146 = (unint64_t)(v142 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v146;
        v143 = v52 - 3;
        *(_WORD *)(v142 + 4) = v58;
        *(_DWORD *)v142 = v49 + 1;
        if (v52 - 3 >= 0x10000)
          goto LABEL_224;
LABEL_221:
        *(_WORD *)(v142 + 6) = v143;
        v145 = v142 + 8;
        *(_QWORD *)(a2 + 8) = v142 + 8;
        a4 = &v11[v52];
        if ((_DWORD)v16)
          goto LABEL_225;
LABEL_258:
        v11 = a4;
        goto LABEL_18;
      }
      v143 = v52 - 3;
      *(_WORD *)(v142 + 4) = v58;
      *(_DWORD *)v142 = v49 + 1;
      if (v52 - 3 < 0x10000)
        goto LABEL_221;
LABEL_224:
      v147 = (unint64_t)(v142 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v147;
      *(_WORD *)(v142 + 6) = v143;
      v145 = v142 + 8;
      *(_QWORD *)(a2 + 8) = v142 + 8;
      a4 = &v11[v52];
      if (!(_DWORD)v16)
        goto LABEL_258;
LABEL_225:
      if ((unint64_t)a4 > v6)
        goto LABEL_258;
      v148 = v17;
      v149 = v16;
      while (2)
      {
        v17 = v149;
        v149 = v148;
        if (*(_DWORD *)a4 != *(_DWORD *)&a4[-v17])
        {
          v16 = v17;
          v17 = v148;
          v11 = a4;
          goto LABEL_18;
        }
        v150 = a4 + 4;
        v151 = &a4[-v17 + 4];
        if (v18 <= (unint64_t)(a4 + 4))
        {
          v154 = a4 + 4;
          if ((unint64_t)v150 < v19)
          {
LABEL_233:
            if (*(_DWORD *)v151 == *(_DWORD *)v154)
            {
              v154 += 4;
              v151 += 4;
            }
          }
          goto LABEL_235;
        }
        v152 = *(_QWORD *)v150 ^ *(_QWORD *)v151;
        if (!v152)
        {
          v157 = a4 + 12;
          while (1)
          {
            v158 = &v157[v152];
            if ((unint64_t)&v157[v152] >= v18)
              break;
            v159 = *(_QWORD *)&a4[v152 + 12 - v17];
            v152 += 8;
            v160 = *(_QWORD *)v158 ^ v159;
            if (v160)
            {
              v153 = v152 + (__clz(__rbit64(v160)) >> 3);
              if ((unint64_t)a4 <= v21)
                goto LABEL_240;
              goto LABEL_241;
            }
          }
          v154 = &a4[v152 + 12];
          v151 = &v154[-v17];
          if ((unint64_t)v154 < v19)
            goto LABEL_233;
LABEL_235:
          if ((unint64_t)v154 < v20)
          {
            if (*(unsigned __int16 *)v151 == *(unsigned __int16 *)v154)
            {
              v154 += 2;
              v151 += 2;
            }
            if (v154 < v5)
            {
LABEL_237:
              if (*v151 == *v154)
                ++v154;
            }
          }
          else if (v154 < v5)
          {
            goto LABEL_237;
          }
          v153 = v154 - v150;
          if ((unint64_t)a4 > v21)
            goto LABEL_241;
LABEL_240:
          *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)a4;
          v145 = *(_QWORD *)(a2 + 8);
          goto LABEL_241;
        }
        v153 = __clz(__rbit64(v152)) >> 3;
        if ((unint64_t)a4 <= v21)
          goto LABEL_240;
LABEL_241:
        v155 = v153 + 1;
        *(_WORD *)(v145 + 4) = 0;
        *(_DWORD *)v145 = 1;
        if (v153 + 1 < 0x10000)
        {
          *(_WORD *)(v145 + 6) = v155;
          v145 += 8;
          *(_QWORD *)(a2 + 8) = v145;
          a4 += v153 + 4;
          if (!(_DWORD)v149)
            break;
          goto LABEL_245;
        }
        v156 = (unint64_t)(v145 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v156;
        *(_WORD *)(v145 + 6) = v155;
        v145 += 8;
        *(_QWORD *)(a2 + 8) = v145;
        a4 += v153 + 4;
        if ((_DWORD)v149)
        {
LABEL_245:
          v148 = v17;
          v16 = v149;
          v11 = a4;
          if ((unint64_t)a4 > v6)
            goto LABEL_18;
          continue;
        }
        break;
      }
      v16 = v149;
      v11 = a4;
LABEL_18:
      if ((unint64_t)v11 >= v6)
      {
        a3 = v167;
        v9 = v165;
        v10 = v166;
        v15 = v164;
        goto LABEL_262;
      }
    }
    v23 = v11 + 5;
    v24 = &v11[-v17 + 5];
    if (v18 <= (unint64_t)(v11 + 5))
    {
      v57 = v11 + 5;
      if ((unint64_t)v23 >= v19)
        goto LABEL_71;
    }
    else
    {
      v25 = *(_QWORD *)v23 ^ *(_QWORD *)v24;
      if (v25)
      {
        v26 = __clz(__rbit64(v25)) >> 3;
        goto LABEL_76;
      }
      v124 = v11 + 13;
      while (1)
      {
        v125 = &v124[v25];
        if ((unint64_t)&v124[v25] >= v18)
          break;
        v126 = *(_QWORD *)&v11[v25 + 13 - v17];
        v25 += 8;
        v127 = *(_QWORD *)v125 ^ v126;
        if (v127)
        {
          v26 = v25 + (__clz(__rbit64(v127)) >> 3);
          goto LABEL_76;
        }
      }
      v57 = &v11[v25 + 13];
      v24 = &v57[-v17];
      if ((unint64_t)v57 >= v19)
      {
LABEL_71:
        if ((unint64_t)v57 < v20)
        {
          if (*(unsigned __int16 *)v24 == *(unsigned __int16 *)v57)
          {
            v57 += 2;
            v24 += 2;
          }
          if (v57 >= v5)
            goto LABEL_75;
        }
        else if (v57 >= v5)
        {
LABEL_75:
          v26 = v57 - v23;
LABEL_76:
          LODWORD(v49) = 0;
          v52 = v26 + 4;
          ++v11;
          v58 = v22 - a4;
          v59 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)v22 <= v21)
            goto LABEL_211;
          goto LABEL_77;
        }
        if (*v24 == *v57)
          ++v57;
        goto LABEL_75;
      }
    }
    if (*(_DWORD *)v24 == *(_DWORD *)v57)
    {
      v57 += 4;
      v24 += 4;
    }
    goto LABEL_71;
  }
LABEL_262:
  if (v9 <= v15)
    v161 = 0;
  else
    v161 = v9;
  if (v10 > v15)
    v161 = v10;
  if ((_DWORD)v17)
    v162 = v17;
  else
    v162 = v161;
  if ((_DWORD)v16)
    v161 = v16;
  *a3 = v162;
  a3[1] = v161;
  return v5 - a4;
}

int64_t ZSTD_compressBlock_lazy(uint64_t a1, uint64_t a2, unsigned int *a3, _OWORD *a4, uint64_t a5)
{
  _OWORD *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  int v70;
  int v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  unint64_t v90;
  int v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _DWORD *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  unint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  uint64_t v147;
  unint64_t v148;
  _DWORD *v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  uint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  int v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  int v188;
  int v189;
  int v190;
  unint64_t v191;
  uint64_t v192;
  unsigned int v193;
  int v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  unint64_t v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  int v207;
  unint64_t v208;
  unint64_t v209;
  _OWORD *v210;
  _OWORD *v211;
  _BYTE *v212;
  __int128 *v213;
  _OWORD *v214;
  __int128 v215;
  char *v216;
  unint64_t v217;
  char *v218;
  uint64_t v219;
  _OWORD *v220;
  unint64_t v221;
  __int128 *v222;
  __int128 v223;
  uint64_t v224;
  __int16 v225;
  unint64_t v226;
  __int128 *v227;
  _OWORD *v228;
  unint64_t v229;
  __int128 v230;
  uint64_t *v231;
  _QWORD *v232;
  unint64_t v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  __int16 v246;
  unint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  unint64_t v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int *v258;
  unint64_t v259;
  unsigned int v261;
  unint64_t v262;
  unint64_t v263;

  v5 = a4;
  v6 = (char *)a4 + a5;
  v7 = (unint64_t)a4 + a5 - 8;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = *a3;
  v11 = a3[1];
  v259 = v8 + v9;
  if ((_DWORD)a4 == (_DWORD)v8 + (_DWORD)v9)
    a4 = (_OWORD *)((char *)a4 + 1);
  v12 = (_DWORD)a4 - v8;
  v13 = 1 << *(_DWORD *)(a1 + 192);
  if (v12 - (int)v9 > v13 && *(_DWORD *)(a1 + 32) == 0)
    LODWORD(v9) = v12 - v13;
  v15 = v12 - v9;
  if (v11 <= v15)
    LODWORD(v16) = a3[1];
  else
    LODWORD(v16) = 0;
  if (v10 <= v15)
    v17 = v10;
  else
    v17 = 0;
  if ((unint64_t)a4 < v7)
  {
    v255 = v15;
    v256 = a3[1];
    v257 = *a3;
    v258 = a3;
    v18 = (unint64_t)(v6 - 7);
    v262 = v7;
    v263 = (unint64_t)(v6 - 3);
    v19 = (unint64_t)(v6 - 1);
    while (1)
    {
      v261 = v16;
      v20 = 0;
      if (!(_DWORD)v17 || *(_DWORD *)((char *)a4 - v17 + 1) != *(_DWORD *)((char *)a4 + 1))
        goto LABEL_39;
      v21 = (char *)a4 + 5;
      v22 = (char *)a4 - v17 + 5;
      if (v18 <= (unint64_t)a4 + 5)
        break;
      v23 = *(_QWORD *)v21 ^ *(_QWORD *)v22;
      if (!v23)
      {
        v26 = (char *)a4 + 13;
        while (1)
        {
          v27 = &v26[v23];
          if ((unint64_t)&v26[v23] >= v18)
            break;
          v28 = *(_QWORD *)((char *)a4 + v23 - v17 + 13);
          v23 += 8;
          v29 = *(_QWORD *)v27 ^ v28;
          if (v29)
          {
            v24 = v23 + (__clz(__rbit64(v29)) >> 3);
            goto LABEL_38;
          }
        }
        v25 = (char *)a4 + v23 + 13;
        v22 = &v25[-v17];
        if ((unint64_t)v25 >= v263)
          goto LABEL_31;
LABEL_24:
        if (*(_DWORD *)v22 == *(_DWORD *)v25)
        {
          v25 += 4;
          v22 += 4;
        }
LABEL_31:
        if ((unint64_t)v25 < v19 && *(unsigned __int16 *)v22 == *(unsigned __int16 *)v25)
        {
          v25 += 2;
          v22 += 2;
        }
        if (v25 < v6 && *v22 == *v25)
          ++v25;
        v24 = v25 - v21;
        goto LABEL_38;
      }
      v24 = __clz(__rbit64(v23)) >> 3;
LABEL_38:
      v20 = v24 + 4;
LABEL_39:
      v30 = *(_DWORD *)(a1 + 208);
      if ((v30 - 6) < 2)
      {
        v31 = *(_QWORD *)(a1 + 64);
        v32 = *(_DWORD *)(a1 + 196);
        v33 = 1 << v32;
        v34 = *(_QWORD *)(a1 + 8);
        v35 = (_DWORD)a4 - v34;
        v36 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)a4 - (int)v34 - *(_DWORD *)(a1 + 28) > v36 && *(_DWORD *)(a1 + 32) == 0)
          v38 = (_DWORD)a4 - v34 - v36;
        else
          v38 = *(_DWORD *)(a1 + 28);
        v39 = v35 - v33;
        if (v35 < v33)
          v39 = 0;
        v40 = *(_QWORD *)(a1 + 48);
        v41 = *(_DWORD *)(a1 + 204);
        v42 = *(unsigned int *)(a1 + 36);
        v43 = 64 - *(_DWORD *)(a1 + 200);
        if (v42 < v35)
        {
          v44 = ~(-1 << v32);
          do
          {
            v45 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v34 + v42)) >> v43);
            *(_DWORD *)(v31 + 4 * (v42 & v44)) = *(_DWORD *)(v40 + v45);
            *(_DWORD *)(v40 + v45) = v42++;
          }
          while (v42 < ((_DWORD)a4 - v34));
        }
        *(_DWORD *)(a1 + 36) = v35;
        v46 = *(_DWORD *)(v40 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)a4) >> v43));
        if (v46 < v38)
        {
LABEL_94:
          v74 = v35;
          goto LABEL_107;
        }
        v47 = 1 << v41;
        v48 = (char *)a4 + 8;
        v49 = v34 + 8;
        v50 = 3;
        v51 = 999999999;
        while (1)
        {
          v52 = v46;
          v53 = (_QWORD *)(v34 + v46);
          if (*((unsigned __int8 *)v53 + v50) != *((unsigned __int8 *)a4 + v50))
            goto LABEL_67;
          if (v18 <= (unint64_t)a4)
            break;
          v54 = *v53 ^ *(_QWORD *)a4;
          if (v54)
          {
            v55 = __clz(__rbit64(v54)) >> 3;
            if (v55 > v50)
              goto LABEL_66;
            goto LABEL_67;
          }
          do
          {
            v56 = &v48[v54];
            if ((unint64_t)&v48[v54] >= v18)
            {
              v53 = (_QWORD *)(v49 + v52 + v54);
              if ((unint64_t)v56 >= v263)
                goto LABEL_61;
              goto LABEL_59;
            }
            v57 = *(_QWORD *)(v49 + v52 + v54);
            v54 += 8;
            v58 = *(_QWORD *)v56 ^ v57;
          }
          while (!v58);
          v55 = v54 + (__clz(__rbit64(v58)) >> 3);
          if (v55 <= v50)
            goto LABEL_67;
LABEL_66:
          v51 = v35 + 2 - v52;
          v50 = v55;
          if ((char *)a4 + v55 == v6)
            goto LABEL_394;
LABEL_67:
          if (v52 > v39)
          {
            if (--v47)
            {
              v46 = *(_DWORD *)(v31 + 4 * (v52 & (v33 - 1)));
              if (v46 >= v38)
                continue;
            }
          }
LABEL_141:
          v74 = v35;
          v55 = v50;
          v7 = v262;
          if (v55 <= v20)
            v90 = v20;
          else
            v90 = v55;
          if (v90 >= 4)
            goto LABEL_180;
LABEL_16:
          a4 = (_OWORD *)((char *)a4 + (((char *)a4 - (char *)v5) >> 8) + 1);
          LODWORD(v16) = v261;
          goto LABEL_17;
        }
        v56 = (char *)a4;
        if ((unint64_t)a4 >= v263)
          goto LABEL_61;
LABEL_59:
        if (*(_DWORD *)v53 == *(_DWORD *)v56)
        {
          v56 += 4;
          v53 = (_QWORD *)((char *)v53 + 4);
        }
LABEL_61:
        if ((unint64_t)v56 < v19)
        {
          if (*(unsigned __int16 *)v53 == *(unsigned __int16 *)v56)
          {
            v56 += 2;
            v53 = (_QWORD *)((char *)v53 + 2);
          }
          if (v56 < v6)
          {
LABEL_63:
            if (*(unsigned __int8 *)v53 == *v56)
              ++v56;
          }
        }
        else if (v56 < v6)
        {
          goto LABEL_63;
        }
        v55 = v56 - (char *)a4;
        if (v56 - (char *)a4 > v50)
          goto LABEL_66;
        goto LABEL_67;
      }
      if (v30 != 5)
      {
        v75 = *(_QWORD *)(a1 + 64);
        v76 = *(_DWORD *)(a1 + 196);
        v77 = 1 << v76;
        v78 = *(_QWORD *)(a1 + 8);
        v74 = (_DWORD)a4 - v78;
        v79 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)a4 - (int)v78 - *(_DWORD *)(a1 + 28) > v79 && *(_DWORD *)(a1 + 32) == 0)
          v81 = (_DWORD)a4 - v78 - v79;
        else
          v81 = *(_DWORD *)(a1 + 28);
        v82 = v74 - v77;
        if (v74 < v77)
          v82 = 0;
        v83 = *(_QWORD *)(a1 + 48);
        v84 = *(_DWORD *)(a1 + 204);
        v85 = *(unsigned int *)(a1 + 36);
        v86 = 32 - *(_DWORD *)(a1 + 200);
        if (v85 < v74)
        {
          v87 = ~(-1 << v76);
          do
          {
            v88 = 4 * ((-1640531535 * *(_DWORD *)(v78 + v85)) >> v86);
            *(_DWORD *)(v75 + 4 * (v85 & v87)) = *(_DWORD *)(v83 + v88);
            *(_DWORD *)(v83 + v88) = v85++;
          }
          while (v85 < ((_DWORD)a4 - v78));
        }
        *(_DWORD *)(a1 + 36) = v74;
        v89 = *(_DWORD *)(v83 + 4 * ((-1640531535 * *(_DWORD *)a4) >> v86));
        if (v89 < v81)
        {
LABEL_107:
          v51 = 999999999;
          v55 = 3;
          if (v20 >= 3)
            v90 = v20;
          else
            v90 = 3;
          if (v90 < 4)
            goto LABEL_16;
          goto LABEL_180;
        }
        v100 = 1 << v84;
        v101 = (char *)a4 + 8;
        v102 = v78 + 8;
        v103 = 3;
        v51 = 999999999;
        while (1)
        {
          v104 = v89;
          v105 = (_QWORD *)(v78 + v89);
          if (*((unsigned __int8 *)v105 + v103) != *((unsigned __int8 *)a4 + v103))
            goto LABEL_161;
          if (v18 <= (unint64_t)a4)
            break;
          v106 = *(_QWORD *)a4 ^ *v105;
          if (v106)
          {
            v55 = __clz(__rbit64(v106)) >> 3;
            if (v55 > v103)
              goto LABEL_160;
            goto LABEL_161;
          }
          do
          {
            v107 = &v101[v106];
            if ((unint64_t)&v101[v106] >= v18)
            {
              v105 = (_QWORD *)(v102 + v104 + v106);
              if ((unint64_t)v107 >= v263)
                goto LABEL_155;
              goto LABEL_153;
            }
            v108 = *(_QWORD *)(v102 + v104 + v106);
            v106 += 8;
            v109 = *(_QWORD *)v107 ^ v108;
          }
          while (!v109);
          v55 = v106 + (__clz(__rbit64(v109)) >> 3);
          if (v55 <= v103)
            goto LABEL_161;
LABEL_160:
          v51 = v74 + 2 - v104;
          v103 = v55;
          if ((char *)a4 + v55 == v6)
          {
LABEL_176:
            v7 = v262;
            if (v55 <= v20)
              v90 = v20;
            else
              v90 = v55;
            if (v90 < 4)
              goto LABEL_16;
            goto LABEL_180;
          }
LABEL_161:
          if (v104 > v82)
          {
            if (--v100)
            {
              v89 = *(_DWORD *)(v75 + 4 * (v104 & (v77 - 1)));
              if (v89 >= v81)
                continue;
            }
          }
          v55 = v103;
          goto LABEL_176;
        }
        v107 = (char *)a4;
        if ((unint64_t)a4 >= v263)
          goto LABEL_155;
LABEL_153:
        if (*(_DWORD *)v105 == *(_DWORD *)v107)
        {
          v107 += 4;
          v105 = (_QWORD *)((char *)v105 + 4);
        }
LABEL_155:
        if ((unint64_t)v107 < v19)
        {
          if (*(unsigned __int16 *)v105 == *(unsigned __int16 *)v107)
          {
            v107 += 2;
            v105 = (_QWORD *)((char *)v105 + 2);
          }
          if (v107 < v6)
          {
LABEL_157:
            if (*(unsigned __int8 *)v105 == *v107)
              ++v107;
          }
        }
        else if (v107 < v6)
        {
          goto LABEL_157;
        }
        v55 = v107 - (char *)a4;
        if (v107 - (char *)a4 > v103)
          goto LABEL_160;
        goto LABEL_161;
      }
      v59 = *(_QWORD *)(a1 + 64);
      v60 = *(_DWORD *)(a1 + 196);
      v61 = 1 << v60;
      v62 = *(_QWORD *)(a1 + 8);
      v35 = (_DWORD)a4 - v62;
      v63 = 1 << *(_DWORD *)(a1 + 192);
      if ((int)a4 - (int)v62 - *(_DWORD *)(a1 + 28) > v63 && *(_DWORD *)(a1 + 32) == 0)
        v65 = (_DWORD)a4 - v62 - v63;
      else
        v65 = *(_DWORD *)(a1 + 28);
      v66 = v35 - v61;
      if (v35 < v61)
        v66 = 0;
      v67 = *(_QWORD *)(a1 + 48);
      v68 = *(_DWORD *)(a1 + 204);
      v69 = *(unsigned int *)(a1 + 36);
      v70 = 64 - *(_DWORD *)(a1 + 200);
      if (v69 < v35)
      {
        v71 = ~(-1 << v60);
        do
        {
          v72 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v62 + v69)) >> v70);
          *(_DWORD *)(v59 + 4 * (v69 & v71)) = *(_DWORD *)(v67 + v72);
          *(_DWORD *)(v67 + v72) = v69++;
        }
        while (v69 < ((_DWORD)a4 - v62));
      }
      *(_DWORD *)(a1 + 36) = v35;
      v73 = *(_DWORD *)(v67 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)a4) >> v70));
      if (v73 < v65)
        goto LABEL_94;
      v91 = 1 << v68;
      v92 = (char *)a4 + 8;
      v93 = v62 + 8;
      v50 = 3;
      v51 = 999999999;
      while (1)
      {
        v94 = v73;
        v95 = (_DWORD *)(v62 + v73);
        if (*((unsigned __int8 *)v95 + v50) != *((unsigned __int8 *)a4 + v50))
          goto LABEL_127;
        if (v18 <= (unint64_t)a4)
        {
          v97 = (char *)a4;
          if ((unint64_t)a4 < v263)
          {
LABEL_119:
            if (*v95 == *(_DWORD *)v97)
            {
              v97 += 4;
              ++v95;
            }
          }
          goto LABEL_121;
        }
        v96 = *(_QWORD *)v95 ^ *(_QWORD *)a4;
        if (!v96)
          break;
        v55 = __clz(__rbit64(v96)) >> 3;
        if (v55 > v50)
          goto LABEL_126;
LABEL_127:
        if (v94 > v66)
        {
          if (--v91)
          {
            v73 = *(_DWORD *)(v59 + 4 * (v94 & (v61 - 1)));
            if (v73 >= v65)
              continue;
          }
        }
        goto LABEL_141;
      }
      while (1)
      {
        v97 = &v92[v96];
        if ((unint64_t)&v92[v96] >= v18)
          break;
        v98 = *(_QWORD *)(v93 + v94 + v96);
        v96 += 8;
        v99 = *(_QWORD *)v97 ^ v98;
        if (v99)
        {
          v55 = v96 + (__clz(__rbit64(v99)) >> 3);
          if (v55 > v50)
            goto LABEL_126;
          goto LABEL_127;
        }
      }
      v95 = (_DWORD *)(v93 + v94 + v96);
      if ((unint64_t)v97 < v263)
        goto LABEL_119;
LABEL_121:
      if ((unint64_t)v97 >= v19)
      {
        if (v97 >= v6)
          goto LABEL_125;
LABEL_123:
        if (*(unsigned __int8 *)v95 == *v97)
          ++v97;
        goto LABEL_125;
      }
      if (*(unsigned __int16 *)v95 == *(unsigned __int16 *)v97)
      {
        v97 += 2;
        v95 = (_DWORD *)((char *)v95 + 2);
      }
      if (v97 < v6)
        goto LABEL_123;
LABEL_125:
      v55 = v97 - (char *)a4;
      if (v97 - (char *)a4 <= v50)
        goto LABEL_127;
LABEL_126:
      v51 = v35 + 2 - v94;
      v50 = v55;
      if ((char *)a4 + v55 != v6)
        goto LABEL_127;
LABEL_394:
      v74 = v35;
      v7 = v262;
      if (v55 <= v20)
        v90 = v20;
      else
        v90 = v55;
      if (v90 < 4)
        goto LABEL_16;
LABEL_180:
      if (v55 <= v20)
        v110 = (unint64_t)a4 + 1;
      else
        v110 = (unint64_t)a4;
      if (v55 <= v20)
        v111 = 0;
      else
        v111 = v51;
      v112 = (_DWORD *)((char *)a4 + 13);
      while (2)
      {
        if ((unint64_t)a4 >= v7)
        {
          v123 = v90;
          v122 = v111;
          v124 = v110;
          v16 = v261;
          if (!v111)
            goto LABEL_385;
LABEL_363:
          if (v124 <= (unint64_t)v5 || v124 - v122 + 2 <= v259)
          {
            v204 = v124;
            v206 = (unint64_t)(v6 - 32);
            v205 = a2;
          }
          else
          {
            v203 = 1 - v122;
            v204 = v124;
            v206 = (unint64_t)(v6 - 32);
            v205 = a2;
            while (1)
            {
              v207 = *(unsigned __int8 *)--v204;
              if (v207 != *(unsigned __int8 *)(v124 + v203))
                break;
              ++v123;
              if (v204 > (unint64_t)v5)
              {
                v208 = v124 + v203;
                v124 = v204;
                if (v208 > v259)
                  continue;
              }
              goto LABEL_372;
            }
            v204 = v124;
          }
LABEL_372:
          v16 = v17;
          v17 = (v122 - 2);
          v124 = v204;
          v209 = v204 - (_QWORD)v5;
          v210 = *(_OWORD **)(v205 + 24);
          if (v124 <= v206)
            goto LABEL_386;
LABEL_373:
          if ((unint64_t)v5 <= v206)
          {
            v212 = (char *)v210 + v206 - (_QWORD)v5;
            v213 = v5;
            v214 = v210;
            do
            {
              v215 = *v213++;
              *v214++ = v215;
            }
            while (v214 < (_OWORD *)v212);
            v211 = (_OWORD *)v206;
            if (v206 >= v124)
              goto LABEL_411;
          }
          else
          {
            v211 = v5;
            v212 = v210;
            if ((unint64_t)v5 >= v124)
              goto LABEL_411;
          }
          if ((unint64_t)v5 <= v206)
            v216 = (char *)v206;
          else
            v216 = (char *)v5;
          v217 = v124 - (_QWORD)v216;
          if (v124 - (unint64_t)v216 < 8)
          {
            v218 = (char *)v211;
            goto LABEL_410;
          }
          if ((unint64_t)((char *)v210 - (char *)v5) < 0x20)
          {
            v218 = (char *)v211;
            goto LABEL_410;
          }
          if (v217 < 0x20)
          {
            v226 = 0;
            goto LABEL_405;
          }
          v226 = v217 & 0xFFFFFFFFFFFFFFE0;
          v227 = v211 + 1;
          v228 = (_OWORD *)((char *)v210 + v216 - (char *)v5 + 16);
          v229 = v217 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v230 = *v227;
            *(v228 - 1) = *(v227 - 1);
            *v228 = v230;
            v227 += 2;
            v228 += 2;
            v229 -= 32;
          }
          while (v229);
          if (v217 == v226)
            goto LABEL_411;
          if ((v217 & 0x18) != 0)
          {
LABEL_405:
            v212 += v217 & 0xFFFFFFFFFFFFFFF8;
            v218 = (char *)v211 + (v217 & 0xFFFFFFFFFFFFFFF8);
            v231 = (uint64_t *)((char *)v211 + v226);
            v232 = (_QWORD *)((char *)v210 + &v216[v226] - (char *)v5);
            v233 = v226 - (v217 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v234 = *v231++;
              *v232++ = v234;
              v233 += 8;
            }
            while (v233);
            if (v217 == (v217 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_411;
          }
          else
          {
            v218 = (char *)v211 + v226;
            v212 += v226;
          }
          do
          {
LABEL_410:
            v235 = *v218++;
            *v212++ = v235;
          }
          while ((unint64_t)v218 < v124);
          goto LABEL_411;
        }
        v113 = (char *)a4 + 1;
        if (!v111)
        {
          v122 = 0;
          v123 = v90;
          v124 = v110;
          v125 = *(_DWORD *)(a1 + 208);
          if ((v125 - 6) < 2)
            goto LABEL_264;
          goto LABEL_220;
        }
        if (!(_DWORD)v17 || *(_DWORD *)v113 != *(_DWORD *)&v113[-v17])
          goto LABEL_263;
        v114 = (char *)a4 + 5;
        v115 = (char *)a4 - v17 + 5;
        if (v18 <= (unint64_t)a4 + 5)
        {
          v116 = (char *)a4 + 5;
          if ((unint64_t)v114 >= v263)
            goto LABEL_203;
LABEL_200:
          if (*(_DWORD *)v115 == *(_DWORD *)v116)
          {
            v116 += 4;
            v115 += 4;
          }
          goto LABEL_203;
        }
        v116 = (char *)v112;
        v117 = *(_QWORD *)v114 ^ *(_QWORD *)v115;
        if (v117)
        {
          v118 = __clz(__rbit64(v117)) >> 3;
          goto LABEL_210;
        }
        while ((unint64_t)v116 < v18)
        {
          v119 = *(_QWORD *)&v116[-v17];
          v120 = *(_QWORD *)v116;
          v116 += 8;
          v121 = v120 ^ v119;
          if (v121)
          {
            v116 = &v116[(__clz(__rbit64(v121)) >> 3) - 8];
            goto LABEL_209;
          }
        }
        v115 = &v116[-v17];
        if ((unint64_t)v116 < v263)
          goto LABEL_200;
LABEL_203:
        if ((unint64_t)v116 < v19 && *(unsigned __int16 *)v115 == *(unsigned __int16 *)v116)
        {
          v116 += 2;
          v115 += 2;
        }
        if (v116 < v6 && *v115 == *v116)
          ++v116;
LABEL_209:
        v118 = v116 - v114;
        if (v118 <= 0xFFFFFFFFFFFFFFFBLL)
        {
LABEL_210:
          v126 = v118 + 4;
          v127 = 3 * v90 + (__clz(v111 + 1) ^ 0xFFFFFFE0) + 2;
          v128 = 3 * v126;
          if (3 * (int)v126 > v127)
            v123 = v126;
          else
            v123 = v90;
          if (v128 > v127)
            v122 = 0;
          else
            v122 = v111;
          if (v128 > v127)
            v124 = (unint64_t)a4 + 1;
          else
            v124 = v110;
          v125 = *(_DWORD *)(a1 + 208);
          if ((v125 - 6) >= 2)
            goto LABEL_220;
LABEL_264:
          v154 = *(_QWORD *)(a1 + 64);
          v155 = *(_DWORD *)(a1 + 196);
          v156 = 1 << v155;
          v157 = *(_QWORD *)(a1 + 8);
          v158 = (_DWORD)v113 - v157;
          v159 = 1 << *(_DWORD *)(a1 + 192);
          if ((int)v113 - (int)v157 - *(_DWORD *)(a1 + 28) > v159 && *(_DWORD *)(a1 + 32) == 0)
            v161 = (_DWORD)v113 - v157 - v159;
          else
            v161 = *(_DWORD *)(a1 + 28);
          if (v158 >= v156)
            v162 = v158 - v156;
          else
            v162 = 0;
          v163 = *(_QWORD *)(a1 + 48);
          v164 = *(_DWORD *)(a1 + 204);
          v165 = 64 - *(_DWORD *)(a1 + 200);
          if (v74 < v158)
          {
            v166 = ~(-1 << v155);
            v167 = v74;
            do
            {
              v168 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v157 + v167)) >> v165);
              *(_DWORD *)(v154 + 4 * (v167 & v166)) = *(_DWORD *)(v163 + v168);
              *(_DWORD *)(v163 + v168) = v167++;
            }
            while (v167 < ((_DWORD)v113 - v157));
          }
          *(_DWORD *)(a1 + 36) = v158;
          v169 = *(_DWORD *)(v163 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v113) >> v165));
          if (v169 < v161)
          {
            v7 = v262;
            break;
          }
          v170 = v156 - 1;
          v171 = 1 << v164;
          v172 = v157 + 8;
          v173 = 3;
          v111 = 999999999;
          while (2)
          {
            v174 = (_QWORD *)(v157 + v169);
            if (*((unsigned __int8 *)v174 + v173) != v113[v173])
              goto LABEL_292;
            if (v18 <= (unint64_t)v113)
            {
              v176 = (char *)a4 + 1;
              if ((unint64_t)v113 >= v263)
                goto LABEL_286;
            }
            else
            {
              v175 = *v174 ^ *(_QWORD *)v113;
              if (v175)
              {
                v90 = __clz(__rbit64(v175)) >> 3;
                if (v90 <= v173)
                  goto LABEL_292;
LABEL_291:
                v111 = v158 + 2 - v169;
                v173 = v90;
                if (&v113[v90] == v6)
                {
                  v74 = (_DWORD)v113 - v157;
                  v7 = v262;
                  if (v90 >= 4)
                    goto LABEL_357;
                  goto LABEL_362;
                }
LABEL_292:
                if (v169 <= v162 || (--v171, !v171) || (v169 = *(_DWORD *)(v154 + 4 * (v169 & v170)), v169 < v161))
                {
                  v74 = (_DWORD)v113 - v157;
                  v90 = v173;
                  v7 = v262;
                  if (v90 < 4)
                    goto LABEL_362;
                  goto LABEL_357;
                }
                continue;
              }
              while (1)
              {
                v176 = (char *)a4 + v175 + 9;
                if ((unint64_t)v176 >= v18)
                  break;
                v177 = *(_QWORD *)(v172 + v169 + v175);
                v175 += 8;
                v178 = *(_QWORD *)v176 ^ v177;
                if (v178)
                {
                  v90 = v175 + (__clz(__rbit64(v178)) >> 3);
                  if (v90 <= v173)
                    goto LABEL_292;
                  goto LABEL_291;
                }
              }
              v174 = (_QWORD *)(v172 + v169 + v175);
              if ((unint64_t)v176 >= v263)
              {
LABEL_286:
                if ((unint64_t)v176 < v19)
                {
                  if (*(unsigned __int16 *)v174 == *(unsigned __int16 *)v176)
                  {
                    v176 += 2;
                    v174 = (_QWORD *)((char *)v174 + 2);
                  }
                  if (v176 < v6)
                  {
LABEL_288:
                    if (*(unsigned __int8 *)v174 == *v176)
                      ++v176;
                  }
                }
                else if (v176 < v6)
                {
                  goto LABEL_288;
                }
                v90 = v176 - v113;
                if (v90 <= v173)
                  goto LABEL_292;
                goto LABEL_291;
              }
            }
            break;
          }
          if (*(_DWORD *)v174 == *(_DWORD *)v176)
          {
            v176 += 4;
            v174 = (_QWORD *)((char *)v174 + 4);
          }
          goto LABEL_286;
        }
LABEL_263:
        v123 = v90;
        v122 = v111;
        v124 = v110;
        v125 = *(_DWORD *)(a1 + 208);
        if ((v125 - 6) < 2)
          goto LABEL_264;
LABEL_220:
        if (v125 != 5)
        {
          v179 = *(_QWORD *)(a1 + 64);
          v180 = *(_DWORD *)(a1 + 196);
          v181 = 1 << v180;
          v182 = *(_QWORD *)(a1 + 8);
          v133 = (_DWORD)v113 - v182;
          v183 = 1 << *(_DWORD *)(a1 + 192);
          if ((int)v113 - (int)v182 - *(_DWORD *)(a1 + 28) > v183 && *(_DWORD *)(a1 + 32) == 0)
            v185 = (_DWORD)v113 - v182 - v183;
          else
            v185 = *(_DWORD *)(a1 + 28);
          if (v133 >= v181)
            v186 = v133 - v181;
          else
            v186 = 0;
          v187 = *(_QWORD *)(a1 + 48);
          v188 = *(_DWORD *)(a1 + 204);
          v189 = 32 - *(_DWORD *)(a1 + 200);
          if (v74 < v133)
          {
            v190 = ~(-1 << v180);
            v191 = v74;
            do
            {
              v192 = 4 * ((-1640531535 * *(_DWORD *)(v182 + v191)) >> v189);
              *(_DWORD *)(v179 + 4 * (v191 & v190)) = *(_DWORD *)(v187 + v192);
              *(_DWORD *)(v187 + v192) = v191++;
            }
            while (v191 < ((_DWORD)v113 - v182));
          }
          *(_DWORD *)(a1 + 36) = v133;
          v193 = *(_DWORD *)(v187 + 4 * ((-1640531535 * *(_DWORD *)v113) >> v189));
          if (v193 < v185)
          {
LABEL_384:
            v7 = v262;
            v16 = v261;
            if (v122)
              goto LABEL_363;
            goto LABEL_385;
          }
          v194 = 1 << v188;
          v195 = v182 + 8;
          v196 = 3;
          v111 = 999999999;
          while (2)
          {
            v197 = v193;
            v198 = (_QWORD *)(v182 + v193);
            if (*((unsigned __int8 *)v198 + v196) != v113[v196])
              goto LABEL_336;
            if (v18 <= (unint64_t)v113)
            {
              v200 = (char *)a4 + 1;
              if ((unint64_t)v113 >= v263)
                goto LABEL_330;
            }
            else
            {
              v199 = *(_QWORD *)v113 ^ *v198;
              if (v199)
              {
                v90 = __clz(__rbit64(v199)) >> 3;
                if (v90 <= v196)
                  goto LABEL_336;
LABEL_335:
                v111 = v133 + 2 - v197;
                v196 = v90;
                if (&v113[v90] == v6)
                {
LABEL_356:
                  v74 = v133;
                  v7 = v262;
                  if (v90 < 4)
                    goto LABEL_362;
                  goto LABEL_357;
                }
LABEL_336:
                if (v197 <= v186
                  || (--v194, !v194)
                  || (v193 = *(_DWORD *)(v179 + 4 * (v197 & (v181 - 1))), v193 < v185))
                {
                  v74 = (_DWORD)v113 - v182;
                  v90 = v196;
                  v7 = v262;
                  if (v196 >= 4)
                    goto LABEL_357;
                  goto LABEL_362;
                }
                continue;
              }
              while (1)
              {
                v200 = (char *)a4 + v199 + 9;
                if ((unint64_t)v200 >= v18)
                  break;
                v201 = *(_QWORD *)(v195 + v197 + v199);
                v199 += 8;
                v202 = *(_QWORD *)v200 ^ v201;
                if (v202)
                {
                  v90 = v199 + (__clz(__rbit64(v202)) >> 3);
                  if (v90 <= v196)
                    goto LABEL_336;
                  goto LABEL_335;
                }
              }
              v198 = (_QWORD *)(v195 + v197 + v199);
              if ((unint64_t)v200 >= v263)
              {
LABEL_330:
                if ((unint64_t)v200 < v19)
                {
                  if (*(unsigned __int16 *)v198 == *(unsigned __int16 *)v200)
                  {
                    v200 += 2;
                    v198 = (_QWORD *)((char *)v198 + 2);
                  }
                  if (v200 < v6)
                  {
LABEL_332:
                    if (*(unsigned __int8 *)v198 == *v200)
                      ++v200;
                  }
                }
                else if (v200 < v6)
                {
                  goto LABEL_332;
                }
                v90 = v200 - v113;
                if (v200 - v113 <= v196)
                  goto LABEL_336;
                goto LABEL_335;
              }
            }
            break;
          }
          if (*(_DWORD *)v198 == *(_DWORD *)v200)
          {
            v200 += 4;
            v198 = (_QWORD *)((char *)v198 + 4);
          }
          goto LABEL_330;
        }
        v129 = *(_QWORD *)(a1 + 64);
        v130 = *(_DWORD *)(a1 + 196);
        v131 = 1 << v130;
        v132 = *(_QWORD *)(a1 + 8);
        v133 = (_DWORD)v113 - v132;
        v134 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)v113 - (int)v132 - *(_DWORD *)(a1 + 28) > v134 && *(_DWORD *)(a1 + 32) == 0)
          v136 = (_DWORD)v113 - v132 - v134;
        else
          v136 = *(_DWORD *)(a1 + 28);
        if (v133 >= v131)
          v137 = v133 - v131;
        else
          v137 = 0;
        v138 = *(_QWORD *)(a1 + 48);
        v139 = *(_DWORD *)(a1 + 204);
        v140 = 64 - *(_DWORD *)(a1 + 200);
        if (v74 < v133)
        {
          v141 = ~(-1 << v130);
          v142 = v74;
          do
          {
            v143 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v132 + v142)) >> v140);
            *(_DWORD *)(v129 + 4 * (v142 & v141)) = *(_DWORD *)(v138 + v143);
            *(_DWORD *)(v138 + v143) = v142++;
          }
          while (v142 < ((_DWORD)v113 - v132));
        }
        *(_DWORD *)(a1 + 36) = v133;
        v144 = *(_DWORD *)(v138 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v113) >> v140));
        if (v144 < v136)
          goto LABEL_384;
        v145 = v131 - 1;
        v146 = 1 << v139;
        v147 = v132 + 8;
        v148 = 3;
        v111 = 999999999;
        while (2)
        {
          v149 = (_DWORD *)(v132 + v144);
          if (*((unsigned __int8 *)v149 + v148) != v113[v148])
            goto LABEL_249;
          if (v18 <= (unint64_t)v113)
          {
            v151 = (char *)a4 + 1;
            if ((unint64_t)v113 < v263)
            {
LABEL_241:
              if (*v149 == *(_DWORD *)v151)
              {
                v151 += 4;
                ++v149;
              }
            }
LABEL_243:
            if ((unint64_t)v151 < v19)
            {
              if (*(unsigned __int16 *)v149 == *(unsigned __int16 *)v151)
              {
                v151 += 2;
                v149 = (_DWORD *)((char *)v149 + 2);
              }
              if (v151 < v6)
              {
LABEL_245:
                if (*(unsigned __int8 *)v149 == *v151)
                  ++v151;
              }
            }
            else if (v151 < v6)
            {
              goto LABEL_245;
            }
            v90 = v151 - v113;
            if (v90 > v148)
              goto LABEL_248;
            goto LABEL_249;
          }
          v150 = *(_QWORD *)v149 ^ *(_QWORD *)v113;
          if (v150)
          {
            v90 = __clz(__rbit64(v150)) >> 3;
            if (v90 > v148)
              goto LABEL_248;
            goto LABEL_249;
          }
          while (2)
          {
            v151 = (char *)a4 + v150 + 9;
            if ((unint64_t)v151 >= v18)
            {
              v149 = (_DWORD *)(v147 + v144 + v150);
              if ((unint64_t)v151 < v263)
                goto LABEL_241;
              goto LABEL_243;
            }
            v152 = *(_QWORD *)(v147 + v144 + v150);
            v150 += 8;
            v153 = *(_QWORD *)v151 ^ v152;
            if (!v153)
              continue;
            break;
          }
          v90 = v150 + (__clz(__rbit64(v153)) >> 3);
          if (v90 <= v148)
            goto LABEL_249;
LABEL_248:
          v111 = v133 + 2 - v144;
          v148 = v90;
          if (&v113[v90] == v6)
            goto LABEL_356;
LABEL_249:
          if (v144 > v137)
          {
            if (--v146)
            {
              v144 = *(_DWORD *)(v129 + 4 * (v144 & v145));
              if (v144 >= v136)
                continue;
            }
          }
          break;
        }
        v74 = (_DWORD)v113 - v132;
        v90 = v148;
        v7 = v262;
        if (v90 < 4)
          break;
LABEL_357:
        v112 = (_DWORD *)((char *)v112 + 1);
        v110 = (unint64_t)a4 + 1;
        a4 = (_OWORD *)((char *)a4 + 1);
        if ((int)((__clz(v111 + 1) ^ 0xFFFFFFE0) + 4 * v90 + 1) > (int)((__clz(v122 + 1) ^ 0xFFFFFFE0) + 4 * v123 + 5))
          continue;
        break;
      }
LABEL_362:
      v16 = v261;
      if (v122)
        goto LABEL_363;
LABEL_385:
      v206 = (unint64_t)(v6 - 32);
      v205 = a2;
      v209 = v124 - (_QWORD)v5;
      v210 = *(_OWORD **)(a2 + 24);
      if (v124 > (unint64_t)(v6 - 32))
        goto LABEL_373;
LABEL_386:
      *v210 = *v5;
      v219 = *(_QWORD *)(v205 + 24);
      if (v209 <= 0x10)
      {
        *(_QWORD *)(v205 + 24) = v219 + v209;
        v224 = *(_QWORD *)(v205 + 8);
        v225 = v123 - 3;
        *(_WORD *)(v224 + 4) = v209;
        *(_DWORD *)v224 = v122 + 1;
        if (v123 - 3 < 0x10000)
          goto LABEL_413;
        goto LABEL_416;
      }
      v220 = (_OWORD *)(v219 + 16);
      v221 = v219 + v209;
      v222 = v5 + 1;
      do
      {
        v223 = *v222++;
        *v220++ = v223;
      }
      while ((unint64_t)v220 < v221);
LABEL_411:
      *(_QWORD *)(v205 + 24) += v209;
      v224 = *(_QWORD *)(v205 + 8);
      if (v209 >= 0x10000)
      {
        v237 = (unint64_t)(v224 - *(_QWORD *)v205) >> 3;
        *(_DWORD *)(v205 + 72) = 1;
        *(_DWORD *)(v205 + 76) = v237;
        v225 = v123 - 3;
        *(_WORD *)(v224 + 4) = v209;
        *(_DWORD *)v224 = v122 + 1;
        if (v123 - 3 >= 0x10000)
          goto LABEL_416;
LABEL_413:
        *(_WORD *)(v224 + 6) = v225;
        v236 = v224 + 8;
        *(_QWORD *)(v205 + 8) = v224 + 8;
        v5 = (_OWORD *)(v124 + v123);
        if ((_DWORD)v16)
          goto LABEL_417;
LABEL_450:
        a4 = v5;
        goto LABEL_17;
      }
      v225 = v123 - 3;
      *(_WORD *)(v224 + 4) = v209;
      *(_DWORD *)v224 = v122 + 1;
      if (v123 - 3 < 0x10000)
        goto LABEL_413;
LABEL_416:
      v238 = (unint64_t)(v224 - *(_QWORD *)v205) >> 3;
      *(_DWORD *)(v205 + 72) = 2;
      *(_DWORD *)(v205 + 76) = v238;
      *(_WORD *)(v224 + 6) = v225;
      v236 = v224 + 8;
      *(_QWORD *)(v205 + 8) = v224 + 8;
      v5 = (_OWORD *)(v124 + v123);
      if (!(_DWORD)v16)
        goto LABEL_450;
LABEL_417:
      if ((unint64_t)v5 > v7)
        goto LABEL_450;
      v239 = v17;
      v240 = v16;
      while (2)
      {
        v17 = v240;
        v240 = v239;
        if (*(_DWORD *)v5 != *(_DWORD *)((char *)v5 - v17))
        {
          LODWORD(v16) = v17;
          v17 = v239;
          a4 = v5;
          goto LABEL_17;
        }
        v241 = (char *)v5 + 4;
        v242 = (char *)v5 - v17 + 4;
        if (v18 <= (unint64_t)v5 + 4)
        {
          v245 = (char *)v5 + 4;
          if ((unint64_t)v241 < v263)
          {
LABEL_425:
            if (*(_DWORD *)v242 == *(_DWORD *)v245)
            {
              v245 += 4;
              v242 += 4;
            }
          }
          goto LABEL_427;
        }
        v243 = *(_QWORD *)v241 ^ *(_QWORD *)v242;
        if (!v243)
        {
          v248 = (char *)v5 + 12;
          while (1)
          {
            v249 = &v248[v243];
            if ((unint64_t)&v248[v243] >= v18)
              break;
            v250 = *(_QWORD *)((char *)v5 + v243 - v17 + 12);
            v243 += 8;
            v251 = *(_QWORD *)v249 ^ v250;
            if (v251)
            {
              v244 = v243 + (__clz(__rbit64(v251)) >> 3);
              if ((unint64_t)v5 <= v206)
                goto LABEL_432;
              goto LABEL_433;
            }
          }
          v245 = (char *)v5 + v243 + 12;
          v242 = &v245[-v17];
          if ((unint64_t)v245 < v263)
            goto LABEL_425;
LABEL_427:
          if ((unint64_t)v245 < v19)
          {
            if (*(unsigned __int16 *)v242 == *(unsigned __int16 *)v245)
            {
              v245 += 2;
              v242 += 2;
            }
            if (v245 < v6)
            {
LABEL_429:
              if (*v242 == *v245)
                ++v245;
            }
          }
          else if (v245 < v6)
          {
            goto LABEL_429;
          }
          v244 = v245 - v241;
          if ((unint64_t)v5 > v206)
            goto LABEL_433;
LABEL_432:
          *(_OWORD *)*(_QWORD *)(v205 + 24) = *v5;
          v236 = *(_QWORD *)(v205 + 8);
          goto LABEL_433;
        }
        v244 = __clz(__rbit64(v243)) >> 3;
        if ((unint64_t)v5 <= v206)
          goto LABEL_432;
LABEL_433:
        v246 = v244 + 1;
        *(_WORD *)(v236 + 4) = 0;
        *(_DWORD *)v236 = 1;
        if (v244 + 1 < 0x10000)
        {
          *(_WORD *)(v236 + 6) = v246;
          v236 += 8;
          *(_QWORD *)(v205 + 8) = v236;
          v5 = (_OWORD *)((char *)v5 + v244 + 4);
          if (!(_DWORD)v240)
            break;
          goto LABEL_437;
        }
        v247 = (unint64_t)(v236 - *(_QWORD *)v205) >> 3;
        *(_DWORD *)(v205 + 72) = 2;
        *(_DWORD *)(v205 + 76) = v247;
        *(_WORD *)(v236 + 6) = v246;
        v236 += 8;
        *(_QWORD *)(v205 + 8) = v236;
        v5 = (_OWORD *)((char *)v5 + v244 + 4);
        if ((_DWORD)v240)
        {
LABEL_437:
          v239 = v17;
          LODWORD(v16) = v240;
          a4 = v5;
          if ((unint64_t)v5 > v7)
            goto LABEL_17;
          continue;
        }
        break;
      }
      LODWORD(v16) = v240;
      a4 = v5;
LABEL_17:
      if ((unint64_t)a4 >= v7)
      {
        a3 = v258;
        v11 = v256;
        v10 = v257;
        v15 = v255;
        goto LABEL_454;
      }
    }
    v25 = (char *)a4 + 5;
    if ((unint64_t)v21 < v263)
      goto LABEL_24;
    goto LABEL_31;
  }
LABEL_454:
  if (v11 <= v15)
    v252 = 0;
  else
    v252 = v11;
  if (v10 > v15)
    v252 = v10;
  if ((_DWORD)v17)
    v253 = v17;
  else
    v253 = v252;
  if ((_DWORD)v16)
    v252 = v16;
  *a3 = v253;
  a3[1] = v252;
  return v6 - (char *)v5;
}

int64_t ZSTD_compressBlock_lazy2(uint64_t a1, uint64_t a2, unsigned int *a3, _OWORD *a4, uint64_t a5)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  int v13;
  unsigned int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  char *v81;
  uint64_t v82;
  _DWORD *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  char *v108;
  uint64_t v109;
  _DWORD *v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int v124;
  int v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  unint64_t v159;
  unsigned int v160;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  int v168;
  unint64_t v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  char *v173;
  _DWORD *v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  int v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  int v190;
  int v191;
  uint64_t v192;
  unsigned int v193;
  char *v194;
  int v195;
  char *v196;
  uint64_t v197;
  unint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  char *v204;
  char *v205;
  unint64_t v206;
  unint64_t v207;
  int v208;
  uint64_t v209;
  int v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v216;
  unsigned int v217;
  uint64_t v218;
  int v219;
  int v220;
  int v221;
  unint64_t v222;
  unsigned int v223;
  unsigned int v224;
  int v225;
  unsigned int v226;
  char *v227;
  uint64_t v228;
  unint64_t v229;
  _DWORD *v230;
  unint64_t v231;
  char *v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  int v236;
  unsigned int v237;
  uint64_t v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v242;
  unsigned int v243;
  uint64_t v244;
  int v245;
  int v246;
  int v247;
  unint64_t v248;
  unsigned int v249;
  unsigned int v250;
  int v251;
  unsigned int v252;
  char *v253;
  uint64_t v254;
  _DWORD *v255;
  unint64_t v256;
  char *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  int v261;
  unsigned int v262;
  uint64_t v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  int v270;
  int v271;
  int v272;
  uint64_t v273;
  unsigned int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  char *v278;
  uint64_t v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  int v299;
  unint64_t v300;
  unint64_t v301;
  _OWORD *v302;
  uint64_t v303;
  _OWORD *v304;
  unint64_t v305;
  __int128 *v306;
  __int128 v307;
  uint64_t v308;
  __int16 v309;
  _OWORD *v310;
  _BYTE *v311;
  __int128 *v312;
  _OWORD *v313;
  __int128 v314;
  char *v315;
  unint64_t v316;
  char *v317;
  unint64_t v318;
  __int128 *v319;
  _OWORD *v320;
  unint64_t v321;
  __int128 v322;
  uint64_t *v323;
  _QWORD *v324;
  unint64_t v325;
  uint64_t v326;
  char v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  char *v334;
  unint64_t v335;
  unint64_t v336;
  char *v337;
  __int16 v338;
  unint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  unint64_t v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int *v350;
  unint64_t v351;
  uint64_t v352;
  unsigned int v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;

  v5 = (char *)a4 + a5;
  v6 = (unint64_t)a4 + a5 - 8;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = v7 + v8;
  v10 = *a3;
  v11 = a3[1];
  if ((_DWORD)a4 == (_DWORD)v7 + (_DWORD)v8)
    v12 = (char *)a4 + 1;
  else
    v12 = (char *)a4;
  v13 = (_DWORD)v12 - v7;
  v14 = 1 << *(_DWORD *)(a1 + 192);
  if (v13 - (int)v8 > v14 && *(_DWORD *)(a1 + 32) == 0)
    LODWORD(v8) = v13 - v14;
  v16 = v13 - v8;
  if (v11 <= v16)
    LODWORD(v17) = a3[1];
  else
    LODWORD(v17) = 0;
  if (v10 <= v16)
    v18 = v10;
  else
    v18 = 0;
  if ((unint64_t)v12 < v6)
  {
    v347 = v16;
    v348 = a3[1];
    v349 = *a3;
    v350 = a3;
    v351 = v9;
    v19 = (unint64_t)(v5 - 7);
    v355 = (unint64_t)(v5 - 1);
    v356 = (unint64_t)(v5 - 3);
    v354 = (uint64_t)a4 + a5 - 8;
    while (1)
    {
      v20 = 0;
      v21 = (unint64_t)(v12 + 1);
      if (!(_DWORD)v18 || *(_DWORD *)(v21 - v18) != *(_DWORD *)(v12 + 1))
        goto LABEL_40;
      v22 = v12 + 5;
      v23 = &v12[-v18 + 5];
      if (v19 <= (unint64_t)(v12 + 5))
        break;
      v24 = *(_QWORD *)v22 ^ *(_QWORD *)v23;
      if (!v24)
      {
        v27 = v12 + 13;
        while (1)
        {
          v28 = &v27[v24];
          if ((unint64_t)&v27[v24] >= v19)
            break;
          v29 = *(_QWORD *)&v12[v24 + 13 - v18];
          v24 += 8;
          v30 = *(_QWORD *)v28 ^ v29;
          if (v30)
          {
            v25 = v24 + (__clz(__rbit64(v30)) >> 3);
            goto LABEL_39;
          }
        }
        v26 = &v12[v24 + 13];
        v23 = &v26[-v18];
        if ((unint64_t)v26 >= v356)
          goto LABEL_32;
LABEL_25:
        if (*(_DWORD *)v23 == *(_DWORD *)v26)
        {
          v26 += 4;
          v23 += 4;
        }
LABEL_32:
        if ((unint64_t)v26 < v355 && *(unsigned __int16 *)v23 == *(unsigned __int16 *)v26)
        {
          v26 += 2;
          v23 += 2;
        }
        if (v26 < v5 && *v23 == *v26)
          ++v26;
        v25 = v26 - v22;
        goto LABEL_39;
      }
      v25 = __clz(__rbit64(v24)) >> 3;
LABEL_39:
      v20 = v25 + 4;
LABEL_40:
      v31 = *(_DWORD *)(a1 + 208);
      v353 = v17;
      if ((v31 - 6) < 2)
      {
        v32 = *(_QWORD *)(a1 + 64);
        v33 = *(_DWORD *)(a1 + 196);
        v34 = 1 << v33;
        v35 = *(_QWORD *)(a1 + 8);
        v36 = (_DWORD)v12 - v35;
        v37 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)v12 - (int)v35 - *(_DWORD *)(a1 + 28) > v37 && *(_DWORD *)(a1 + 32) == 0)
          v39 = (_DWORD)v12 - v35 - v37;
        else
          v39 = *(_DWORD *)(a1 + 28);
        if (v36 >= v34)
          v40 = v36 - v34;
        else
          v40 = 0;
        v41 = *(_QWORD *)(a1 + 48);
        v42 = *(_DWORD *)(a1 + 204);
        v43 = *(unsigned int *)(a1 + 36);
        v44 = 64 - *(_DWORD *)(a1 + 200);
        if (v43 < v36)
        {
          v45 = ~(-1 << v33);
          do
          {
            v46 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v35 + v43)) >> v44);
            *(_DWORD *)(v32 + 4 * (v43 & v45)) = *(_DWORD *)(v41 + v46);
            *(_DWORD *)(v41 + v46) = v43++;
          }
          while (v43 < ((_DWORD)v12 - v35));
        }
        *(_DWORD *)(a1 + 36) = v36;
        v47 = *(_DWORD *)(v41 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v12) >> v44));
        if (v47 >= v39)
        {
          v48 = v34 - 1;
          v49 = 1 << v42;
          v50 = v36 + 2;
          v51 = v12 + 8;
          v52 = v35 + 8;
          v53 = 3;
          v54 = 999999999;
          while (1)
          {
            v55 = (_DWORD *)(v35 + v47);
            if (*((unsigned __int8 *)v55 + v53) != v12[v53])
              goto LABEL_73;
            if (v19 <= (unint64_t)v12)
            {
              v58 = v12;
              if ((unint64_t)v12 < v356)
              {
LABEL_61:
                if (*v55 == *(_DWORD *)v58)
                {
                  v58 += 4;
                  ++v55;
                }
              }
              goto LABEL_63;
            }
            v56 = *(_QWORD *)v55 ^ *(_QWORD *)v12;
            if (!v56)
              break;
            v57 = __clz(__rbit64(v56)) >> 3;
            if (v57 <= v53)
              goto LABEL_73;
LABEL_72:
            v54 = v50 - v47;
            v53 = v57;
            if (&v12[v57] == v5)
              goto LABEL_173;
LABEL_73:
            if (v47 <= v40)
              goto LABEL_172;
            if (!--v49)
              goto LABEL_172;
            v47 = *(_DWORD *)(v32 + 4 * (v47 & v48));
            v57 = v53;
            if (v47 < v39)
              goto LABEL_173;
          }
          v59 = 0;
          while (1)
          {
            v58 = &v51[v59];
            if ((unint64_t)&v51[v59] >= v19)
              break;
            v60 = *(_QWORD *)(v52 + v47 + v59);
            v59 += 8;
            v61 = *(_QWORD *)v58 ^ v60;
            if (v61)
            {
              v57 = v59 + (__clz(__rbit64(v61)) >> 3);
              if (v57 > v53)
                goto LABEL_72;
              goto LABEL_73;
            }
          }
          v55 = (_DWORD *)(v52 + v47 + v59);
          if ((unint64_t)v58 < v356)
            goto LABEL_61;
LABEL_63:
          if ((unint64_t)v58 >= v355)
          {
            if (v58 >= v5)
              goto LABEL_71;
          }
          else
          {
            if (*(unsigned __int16 *)v55 == *(unsigned __int16 *)v58)
            {
              v58 += 2;
              v55 = (_DWORD *)((char *)v55 + 2);
            }
            if (v58 >= v5)
            {
LABEL_71:
              v57 = v58 - v12;
              if (v57 <= v53)
                goto LABEL_73;
              goto LABEL_72;
            }
          }
          if (*(unsigned __int8 *)v55 == *v58)
            ++v58;
          goto LABEL_71;
        }
LABEL_141:
        v54 = 999999999;
        v57 = 3;
        goto LABEL_173;
      }
      if (v31 == 5)
      {
        v62 = *(_QWORD *)(a1 + 64);
        v63 = *(_DWORD *)(a1 + 196);
        v64 = 1 << v63;
        v65 = *(_QWORD *)(a1 + 8);
        v66 = (_DWORD)v12 - v65;
        v67 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)v12 - (int)v65 - *(_DWORD *)(a1 + 28) > v67 && *(_DWORD *)(a1 + 32) == 0)
          v69 = (_DWORD)v12 - v65 - v67;
        else
          v69 = *(_DWORD *)(a1 + 28);
        if (v66 >= v64)
          v70 = v66 - v64;
        else
          v70 = 0;
        v71 = *(_QWORD *)(a1 + 48);
        v72 = *(_DWORD *)(a1 + 204);
        v73 = *(unsigned int *)(a1 + 36);
        v74 = 64 - *(_DWORD *)(a1 + 200);
        if (v73 < v66)
        {
          v75 = ~(-1 << v63);
          do
          {
            v76 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v65 + v73)) >> v74);
            *(_DWORD *)(v62 + 4 * (v73 & v75)) = *(_DWORD *)(v71 + v76);
            *(_DWORD *)(v71 + v76) = v73++;
          }
          while (v73 < ((_DWORD)v12 - v65));
        }
        *(_DWORD *)(a1 + 36) = v66;
        v77 = *(_DWORD *)(v71 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v12) >> v74));
        if (v77 < v69)
          goto LABEL_141;
        v78 = v64 - 1;
        v79 = 1 << v72;
        v80 = v66 + 2;
        v81 = v12 + 8;
        v82 = v65 + 8;
        v53 = 3;
        v54 = 999999999;
        while (2)
        {
          v83 = (_DWORD *)(v65 + v77);
          if (*((unsigned __int8 *)v83 + v53) != v12[v53])
          {
LABEL_117:
            if (v77 <= v70)
              goto LABEL_172;
            if (!--v79)
              goto LABEL_172;
            v77 = *(_DWORD *)(v62 + 4 * (v77 & v78));
            v57 = v53;
            if (v77 < v69)
              goto LABEL_173;
            continue;
          }
          break;
        }
        if (v19 <= (unint64_t)v12)
        {
          v85 = v12;
          if ((unint64_t)v12 < v356)
          {
LABEL_105:
            if (*v83 == *(_DWORD *)v85)
            {
              v85 += 4;
              ++v83;
            }
          }
        }
        else
        {
          v84 = *(_QWORD *)v83 ^ *(_QWORD *)v12;
          if (v84)
          {
            v57 = __clz(__rbit64(v84)) >> 3;
            if (v57 <= v53)
              goto LABEL_117;
LABEL_116:
            v54 = v80 - v77;
            v53 = v57;
            if (&v12[v57] == v5)
              goto LABEL_173;
            goto LABEL_117;
          }
          v86 = 0;
          while (1)
          {
            v85 = &v81[v86];
            if ((unint64_t)&v81[v86] >= v19)
              break;
            v87 = *(_QWORD *)(v82 + v77 + v86);
            v86 += 8;
            v88 = *(_QWORD *)v85 ^ v87;
            if (v88)
            {
              v57 = v86 + (__clz(__rbit64(v88)) >> 3);
              if (v57 > v53)
                goto LABEL_116;
              goto LABEL_117;
            }
          }
          v83 = (_DWORD *)(v82 + v77 + v86);
          if ((unint64_t)v85 < v356)
            goto LABEL_105;
        }
        if ((unint64_t)v85 >= v355)
        {
          if (v85 >= v5)
            goto LABEL_115;
        }
        else
        {
          if (*(unsigned __int16 *)v83 == *(unsigned __int16 *)v85)
          {
            v85 += 2;
            v83 = (_DWORD *)((char *)v83 + 2);
          }
          if (v85 >= v5)
          {
LABEL_115:
            v57 = v85 - v12;
            if (v57 <= v53)
              goto LABEL_117;
            goto LABEL_116;
          }
        }
        if (*(unsigned __int8 *)v83 == *v85)
          ++v85;
        goto LABEL_115;
      }
      v89 = *(_QWORD *)(a1 + 64);
      v90 = *(_DWORD *)(a1 + 196);
      v91 = 1 << v90;
      v92 = *(_QWORD *)(a1 + 8);
      v93 = (_DWORD)v12 - v92;
      v94 = 1 << *(_DWORD *)(a1 + 192);
      if ((int)v12 - (int)v92 - *(_DWORD *)(a1 + 28) > v94 && *(_DWORD *)(a1 + 32) == 0)
        v96 = (_DWORD)v12 - v92 - v94;
      else
        v96 = *(_DWORD *)(a1 + 28);
      if (v93 >= v91)
        v97 = v93 - v91;
      else
        v97 = 0;
      v98 = *(_QWORD *)(a1 + 48);
      v99 = *(_DWORD *)(a1 + 204);
      v100 = *(unsigned int *)(a1 + 36);
      v101 = 32 - *(_DWORD *)(a1 + 200);
      if (v100 < v93)
      {
        v102 = ~(-1 << v90);
        do
        {
          v103 = 4 * ((-1640531535 * *(_DWORD *)(v92 + v100)) >> v101);
          *(_DWORD *)(v89 + 4 * (v100 & v102)) = *(_DWORD *)(v98 + v103);
          *(_DWORD *)(v98 + v103) = v100++;
        }
        while (v100 < ((_DWORD)v12 - v92));
      }
      *(_DWORD *)(a1 + 36) = v93;
      v104 = *(_DWORD *)(v98 + 4 * ((-1640531535 * *(_DWORD *)v12) >> v101));
      if (v104 < v96)
        goto LABEL_141;
      v105 = v91 - 1;
      v106 = 1 << v99;
      v107 = v93 + 2;
      v108 = v12 + 8;
      v109 = v92 + 8;
      v53 = 3;
      v54 = 999999999;
      while (1)
      {
        v110 = (_DWORD *)(v92 + v104);
        if (*((unsigned __int8 *)v110 + v53) != v12[v53])
          goto LABEL_161;
        if (v19 <= (unint64_t)v12)
        {
          v112 = v12;
          if ((unint64_t)v12 < v356)
          {
LABEL_149:
            if (*v110 == *(_DWORD *)v112)
            {
              v112 += 4;
              ++v110;
            }
          }
          goto LABEL_151;
        }
        v111 = *(_QWORD *)v12 ^ *(_QWORD *)v110;
        if (!v111)
        {
          v113 = 0;
          while (1)
          {
            v112 = &v108[v113];
            if ((unint64_t)&v108[v113] >= v19)
              break;
            v114 = *(_QWORD *)(v109 + v104 + v113);
            v113 += 8;
            v115 = *(_QWORD *)v112 ^ v114;
            if (v115)
            {
              v57 = v113 + (__clz(__rbit64(v115)) >> 3);
              if (v57 > v53)
                goto LABEL_160;
              goto LABEL_161;
            }
          }
          v110 = (_DWORD *)(v109 + v104 + v113);
          if ((unint64_t)v112 < v356)
            goto LABEL_149;
LABEL_151:
          if ((unint64_t)v112 >= v355)
          {
            if (v112 >= v5)
              goto LABEL_159;
          }
          else
          {
            if (*(unsigned __int16 *)v110 == *(unsigned __int16 *)v112)
            {
              v112 += 2;
              v110 = (_DWORD *)((char *)v110 + 2);
            }
            if (v112 >= v5)
            {
LABEL_159:
              v57 = v112 - v12;
              if (v57 <= v53)
                goto LABEL_161;
              goto LABEL_160;
            }
          }
          if (*(unsigned __int8 *)v110 == *v112)
            ++v112;
          goto LABEL_159;
        }
        v57 = __clz(__rbit64(v111)) >> 3;
        if (v57 <= v53)
          goto LABEL_161;
LABEL_160:
        v54 = v107 - v104;
        v53 = v57;
        if (&v12[v57] == v5)
          goto LABEL_173;
LABEL_161:
        if (v104 <= v97)
          break;
        if (!--v106)
          break;
        v104 = *(_DWORD *)(v89 + 4 * (v104 & v105));
        v57 = v53;
        if (v104 < v96)
          goto LABEL_173;
      }
LABEL_172:
      v57 = v53;
LABEL_173:
      if (v57 <= v20)
        v116 = v20;
      else
        v116 = v57;
      if (v116 < 4)
      {
        v12 += ((v12 - (char *)a4) >> 8) + 1;
        LODWORD(v17) = v353;
        goto LABEL_18;
      }
      if (v57 <= v20)
      {
        v117 = 0;
      }
      else
      {
        v21 = (unint64_t)v12;
        v117 = v54;
      }
      v118 = -(uint64_t)v18;
      if ((unint64_t)v12 >= v6)
        goto LABEL_505;
      while (2)
      {
        v119 = v12 + 1;
        if (!v117 || !(_DWORD)v18 || *(_DWORD *)v119 != *(_DWORD *)&v119[v118])
          goto LABEL_187;
        v120 = v12 + 5;
        v121 = &v12[v118 + 5];
        if (v19 <= (unint64_t)(v12 + 5))
        {
          v194 = v12 + 5;
          if ((unint64_t)v120 >= v356)
            goto LABEL_485;
LABEL_292:
          if (*(_DWORD *)v121 == *(_DWORD *)v194)
          {
            v194 += 4;
            v121 += 4;
          }
          goto LABEL_485;
        }
        v122 = *(_QWORD *)v120 ^ *(_QWORD *)v121;
        if (v122)
        {
          v123 = __clz(__rbit64(v122)) >> 3;
          v124 = __clz(v117 + 1);
LABEL_493:
          v294 = v123 + 4;
          if (3 * (int)v294 > (int)(3 * v116 + (v124 ^ 0xFFFFFFE0) + 2))
          {
            v117 = 0;
            v116 = v294;
            v21 = (unint64_t)(v12 + 1);
          }
          goto LABEL_187;
        }
        v194 = v12 + 13;
        while ((unint64_t)v194 < v19)
        {
          v288 = *(_QWORD *)&v194[v118];
          v289 = *(_QWORD *)v194;
          v194 += 8;
          v290 = v289 ^ v288;
          if (v290)
          {
            v194 = &v194[(__clz(__rbit64(v290)) >> 3) - 8];
            goto LABEL_491;
          }
        }
        v121 = &v194[v118];
        if ((unint64_t)v194 < v356)
          goto LABEL_292;
LABEL_485:
        if ((unint64_t)v194 < v355 && *(unsigned __int16 *)v121 == *(unsigned __int16 *)v194)
        {
          v194 += 2;
          v121 += 2;
        }
        if (v194 < v5 && *v121 == *v194)
          ++v194;
LABEL_491:
        v123 = v194 - v120;
        if (v123 <= 0xFFFFFFFFFFFFFFFBLL)
        {
          v124 = __clz(v117 + 1);
          goto LABEL_493;
        }
LABEL_187:
        v125 = *(_DWORD *)(a1 + 208);
        if ((v125 - 6) < 2)
        {
          v126 = *(_QWORD *)(a1 + 64);
          v127 = *(_DWORD *)(a1 + 196);
          v128 = 1 << v127;
          v129 = *(_QWORD *)(a1 + 8);
          v130 = (_DWORD)v119 - v129;
          v131 = 1 << *(_DWORD *)(a1 + 192);
          if ((int)v119 - (int)v129 - *(_DWORD *)(a1 + 28) > v131 && *(_DWORD *)(a1 + 32) == 0)
            v133 = (_DWORD)v119 - v129 - v131;
          else
            v133 = *(_DWORD *)(a1 + 28);
          if (v130 >= v128)
            v134 = v130 - v128;
          else
            v134 = 0;
          v135 = *(_QWORD *)(a1 + 48);
          v136 = *(_DWORD *)(a1 + 204);
          v137 = *(unsigned int *)(a1 + 36);
          v138 = 64 - *(_DWORD *)(a1 + 200);
          if (v137 < v130)
          {
            v139 = ~(-1 << v127);
            do
            {
              v140 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v129 + v137)) >> v138);
              *(_DWORD *)(v126 + 4 * (v137 & v139)) = *(_DWORD *)(v135 + v140);
              *(_DWORD *)(v135 + v140) = v137++;
            }
            while ((_DWORD)v119 - (_DWORD)v129 != v137);
          }
          *(_DWORD *)(a1 + 36) = v130;
          v141 = *(_DWORD *)(v135 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v119) >> v138));
          if (v141 >= v133)
          {
            v142 = v128 - 1;
            v143 = 1 << v136;
            v144 = v12 + 9;
            v145 = v129 + 8;
            v146 = 3;
            v147 = 999999999;
            while (1)
            {
              v148 = v141;
              v149 = (_DWORD *)(v129 + v141);
              if (*((unsigned __int8 *)v149 + v146) != v119[v146])
                goto LABEL_220;
              if (v19 <= (unint64_t)v119)
              {
                v152 = v12 + 1;
                if ((unint64_t)v119 < v356)
                {
LABEL_208:
                  if (*v149 == *(_DWORD *)v152)
                  {
                    v152 += 4;
                    ++v149;
                  }
                }
              }
              else
              {
                v150 = *(_QWORD *)v149 ^ *(_QWORD *)v119;
                if (v150)
                {
                  v151 = __clz(__rbit64(v150)) >> 3;
                  if (v151 > v146)
                    goto LABEL_219;
                  goto LABEL_220;
                }
                while (1)
                {
                  v152 = &v144[v150];
                  if ((unint64_t)&v144[v150] >= v19)
                    break;
                  v153 = *(_QWORD *)(v145 + v148 + v150);
                  v150 += 8;
                  v154 = *(_QWORD *)v152 ^ v153;
                  if (v154)
                  {
                    v151 = v150 + (__clz(__rbit64(v154)) >> 3);
                    if (v151 > v146)
                      goto LABEL_219;
                    goto LABEL_220;
                  }
                }
                v149 = (_DWORD *)(v145 + v148 + v150);
                if ((unint64_t)v152 < v356)
                  goto LABEL_208;
              }
              if ((unint64_t)v152 >= v355)
                break;
              if (*(unsigned __int16 *)v149 == *(unsigned __int16 *)v152)
              {
                v152 += 2;
                v149 = (_DWORD *)((char *)v149 + 2);
              }
              if (v152 < v5)
                goto LABEL_216;
LABEL_218:
              v151 = v152 - v119;
              if (v151 > v146)
              {
LABEL_219:
                v147 = v130 + 2 - v148;
                v146 = v151;
                if (&v119[v151] == v5)
                  goto LABEL_482;
              }
LABEL_220:
              if (v148 > v134)
              {
                if (--v143)
                {
                  v141 = *(_DWORD *)(v126 + 4 * (v148 & v142));
                  if (v141 >= v133)
                    continue;
                }
              }
              LODWORD(v159) = (_DWORD)v119 - v129;
              goto LABEL_289;
            }
            if (v152 >= v5)
              goto LABEL_218;
LABEL_216:
            if (*(unsigned __int8 *)v149 == *v152)
              ++v152;
            goto LABEL_218;
          }
LABEL_286:
          LODWORD(v159) = v130;
LABEL_287:
          v6 = v354;
          v118 = -(uint64_t)v18;
          goto LABEL_326;
        }
        if (v125 != 5)
        {
          v179 = *(_QWORD *)(a1 + 64);
          v180 = *(_DWORD *)(a1 + 196);
          v181 = 1 << v180;
          v182 = *(_QWORD *)(a1 + 8);
          v130 = (_DWORD)v119 - v182;
          v183 = 1 << *(_DWORD *)(a1 + 192);
          if ((int)v119 - (int)v182 - *(_DWORD *)(a1 + 28) > v183 && *(_DWORD *)(a1 + 32) == 0)
            v185 = (_DWORD)v119 - v182 - v183;
          else
            v185 = *(_DWORD *)(a1 + 28);
          if (v130 >= v181)
            v186 = v130 - v181;
          else
            v186 = 0;
          v187 = *(_QWORD *)(a1 + 48);
          v188 = *(_DWORD *)(a1 + 204);
          v189 = *(unsigned int *)(a1 + 36);
          v190 = 32 - *(_DWORD *)(a1 + 200);
          if (v189 < v130)
          {
            v191 = ~(-1 << v180);
            do
            {
              v192 = 4 * ((-1640531535 * *(_DWORD *)(v182 + v189)) >> v190);
              *(_DWORD *)(v179 + 4 * (v189 & v191)) = *(_DWORD *)(v187 + v192);
              *(_DWORD *)(v187 + v192) = v189++;
            }
            while ((_DWORD)v119 - (_DWORD)v182 != v189);
          }
          *(_DWORD *)(a1 + 36) = v130;
          v193 = *(_DWORD *)(v187 + 4 * ((-1640531535 * *(_DWORD *)v119) >> v190));
          if (v193 < v185)
            goto LABEL_286;
          v195 = 1 << v188;
          v196 = v12 + 9;
          v197 = v182 + 8;
          v198 = 3;
          v147 = 999999999;
          while (1)
          {
            v199 = (_QWORD *)(v182 + v193);
            if (*((unsigned __int8 *)v199 + v198) != v119[v198])
              goto LABEL_313;
            if (v19 <= (unint64_t)v119)
              break;
            v200 = *(_QWORD *)v119 ^ *v199;
            if (v200)
            {
              v151 = __clz(__rbit64(v200)) >> 3;
              if (v151 <= v198)
                goto LABEL_313;
LABEL_312:
              v147 = v130 + 2 - v193;
              v198 = v151;
              if (&v119[v151] == v5)
              {
LABEL_482:
                LODWORD(v159) = v130;
                v6 = v354;
                v118 = -(uint64_t)v18;
                if (v151 >= 4)
                  goto LABEL_325;
                goto LABEL_326;
              }
              goto LABEL_313;
            }
            do
            {
              v201 = &v196[v200];
              if ((unint64_t)&v196[v200] >= v19)
              {
                v199 = (_QWORD *)(v197 + v193 + v200);
                if ((unint64_t)v201 >= v356)
                  goto LABEL_303;
                goto LABEL_301;
              }
              v202 = *(_QWORD *)(v197 + v193 + v200);
              v200 += 8;
              v203 = *(_QWORD *)v201 ^ v202;
            }
            while (!v203);
            v151 = v200 + (__clz(__rbit64(v203)) >> 3);
            if (v151 > v198)
              goto LABEL_312;
LABEL_313:
            if (v193 > v186)
            {
              if (--v195)
              {
                v193 = *(_DWORD *)(v179 + 4 * (v193 & (v181 - 1)));
                if (v193 >= v185)
                  continue;
              }
            }
            LODWORD(v159) = (_DWORD)v119 - v182;
            v151 = v198;
LABEL_324:
            v6 = v354;
            v118 = -(uint64_t)v18;
            if (v151 >= 4)
              goto LABEL_325;
            goto LABEL_326;
          }
          v201 = v12 + 1;
          if ((unint64_t)v119 >= v356)
            goto LABEL_303;
LABEL_301:
          if (*(_DWORD *)v199 == *(_DWORD *)v201)
          {
            v201 += 4;
            v199 = (_QWORD *)((char *)v199 + 4);
          }
LABEL_303:
          if ((unint64_t)v201 >= v355)
          {
            if (v201 >= v5)
              goto LABEL_311;
          }
          else
          {
            if (*(unsigned __int16 *)v199 == *(unsigned __int16 *)v201)
            {
              v201 += 2;
              v199 = (_QWORD *)((char *)v199 + 2);
            }
            if (v201 >= v5)
            {
LABEL_311:
              v151 = v201 - v119;
              if (v201 - v119 <= v198)
                goto LABEL_313;
              goto LABEL_312;
            }
          }
          if (*(unsigned __int8 *)v199 == *v201)
            ++v201;
          goto LABEL_311;
        }
        v155 = *(_QWORD *)(a1 + 64);
        v156 = *(_DWORD *)(a1 + 196);
        v157 = 1 << v156;
        v158 = *(_QWORD *)(a1 + 8);
        LODWORD(v159) = (_DWORD)v119 - v158;
        v160 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)v119 - (int)v158 - *(_DWORD *)(a1 + 28) > v160 && *(_DWORD *)(a1 + 32) == 0)
          v162 = (_DWORD)v119 - v158 - v160;
        else
          v162 = *(_DWORD *)(a1 + 28);
        if (v159 >= v157)
          v163 = v159 - v157;
        else
          v163 = 0;
        v164 = *(_QWORD *)(a1 + 48);
        v165 = *(_DWORD *)(a1 + 204);
        v166 = *(unsigned int *)(a1 + 36);
        v167 = 64 - *(_DWORD *)(a1 + 200);
        if (v166 < v159)
        {
          v168 = ~(-1 << v156);
          do
          {
            v169 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v158 + v166)) >> v167);
            *(_DWORD *)(v155 + 4 * (v166 & v168)) = *(_DWORD *)(v164 + v169);
            *(_DWORD *)(v164 + v169) = v166++;
          }
          while ((_DWORD)v119 - (_DWORD)v158 != v166);
        }
        *(_DWORD *)(a1 + 36) = v159;
        v170 = *(_DWORD *)(v164 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v119) >> v167));
        if (v170 < v162)
          goto LABEL_287;
        v171 = v157 - 1;
        v172 = 1 << v165;
        v173 = v12 + 9;
        v352 = v158 + 8;
        v146 = 3;
        v147 = 999999999;
        while (2)
        {
          v174 = (_DWORD *)(v158 + v170);
          if (*((unsigned __int8 *)v174 + v146) != v119[v146])
            goto LABEL_263;
          if (v19 <= (unint64_t)v119)
          {
            v176 = v12 + 1;
            if ((unint64_t)v119 < v356)
            {
LABEL_251:
              if (*v174 == *(_DWORD *)v176)
              {
                v176 += 4;
                ++v174;
              }
            }
            goto LABEL_253;
          }
          v175 = *(_QWORD *)v174 ^ *(_QWORD *)v119;
          if (!v175)
          {
            while (1)
            {
              v176 = &v173[v175];
              if ((unint64_t)&v173[v175] >= v19)
                break;
              v177 = *(_QWORD *)(v352 + v170 + v175);
              v175 += 8;
              v178 = *(_QWORD *)v176 ^ v177;
              if (v178)
              {
                v151 = v175 + (__clz(__rbit64(v178)) >> 3);
                if (v151 > v146)
                  goto LABEL_262;
                goto LABEL_263;
              }
            }
            v174 = (_DWORD *)(v352 + v170 + v175);
            if ((unint64_t)v176 < v356)
              goto LABEL_251;
LABEL_253:
            if ((unint64_t)v176 >= v355)
            {
              if (v176 >= v5)
                goto LABEL_261;
            }
            else
            {
              if (*(unsigned __int16 *)v174 == *(unsigned __int16 *)v176)
              {
                v176 += 2;
                v174 = (_DWORD *)((char *)v174 + 2);
              }
              if (v176 >= v5)
              {
LABEL_261:
                v151 = v176 - v119;
                if (v176 - v119 > v146)
                  goto LABEL_262;
                goto LABEL_263;
              }
            }
            if (*(unsigned __int8 *)v174 == *v176)
              ++v176;
            goto LABEL_261;
          }
          v151 = __clz(__rbit64(v175)) >> 3;
          if (v151 <= v146)
            goto LABEL_263;
LABEL_262:
          v147 = (_DWORD)v159 + 2 - v170;
          v146 = v151;
          if (&v119[v151] == v5)
            goto LABEL_324;
LABEL_263:
          if (v170 > v163)
          {
            if (--v172)
            {
              v170 = *(_DWORD *)(v155 + 4 * (v170 & v171));
              if (v170 >= v162)
                continue;
            }
          }
          break;
        }
LABEL_289:
        v151 = v146;
        v6 = v354;
        v118 = -(uint64_t)v18;
        if (v146 < 4)
          goto LABEL_326;
LABEL_325:
        if ((int)((__clz(v147 + 1) ^ 0xFFFFFFE0) + 4 * v151 + 1) > (int)((__clz(v117 + 1) ^ 0xFFFFFFE0) + 4 * v116 + 5))
          goto LABEL_480;
LABEL_326:
        if ((unint64_t)v119 >= v6)
          break;
        v119 = v12 + 2;
        if (!v117 || !(_DWORD)v18 || *(_DWORD *)v119 != *(_DWORD *)&v119[v118])
          goto LABEL_333;
        v204 = v12 + 6;
        v205 = &v12[v118 + 6];
        if (v19 <= (unint64_t)(v12 + 6))
        {
          v287 = v12 + 6;
          if ((unint64_t)v204 >= v356)
            goto LABEL_496;
LABEL_467:
          if (*(_DWORD *)v205 == *(_DWORD *)v287)
          {
            v287 += 4;
            v205 += 4;
          }
          goto LABEL_496;
        }
        v206 = *(_QWORD *)v204 ^ *(_QWORD *)v205;
        if (v206)
        {
          v207 = __clz(__rbit64(v206)) >> 3;
          goto LABEL_503;
        }
        v287 = v12 + 14;
        while ((unint64_t)v287 < v19)
        {
          v291 = *(_QWORD *)&v287[v118];
          v292 = *(_QWORD *)v287;
          v287 += 8;
          v293 = v292 ^ v291;
          if (v293)
          {
            v287 = &v287[(__clz(__rbit64(v293)) >> 3) - 8];
            goto LABEL_502;
          }
        }
        v205 = &v287[v118];
        if ((unint64_t)v287 < v356)
          goto LABEL_467;
LABEL_496:
        if ((unint64_t)v287 < v355 && *(unsigned __int16 *)v205 == *(unsigned __int16 *)v287)
        {
          v287 += 2;
          v205 += 2;
        }
        if (v287 < v5 && *v205 == *v287)
          ++v287;
LABEL_502:
        v207 = v287 - v204;
        if (v207 <= 0xFFFFFFFFFFFFFFFBLL)
        {
LABEL_503:
          v295 = v207 + 4;
          if ((int)((__clz(v117 + 1) ^ 0xFFFFFFE0) + 4 * v116 + 2) < 4 * (int)v295)
          {
            v117 = 0;
            v116 = v295;
            v21 = (unint64_t)(v12 + 2);
          }
        }
LABEL_333:
        v208 = *(_DWORD *)(a1 + 208);
        if ((v208 - 6) < 2)
        {
          v209 = *(_QWORD *)(a1 + 64);
          v210 = *(_DWORD *)(a1 + 196);
          v211 = 1 << v210;
          v212 = *(_QWORD *)(a1 + 8);
          v213 = (_DWORD)v119 - v212;
          v214 = 1 << *(_DWORD *)(a1 + 192);
          if ((int)v119 - (int)v212 - *(_DWORD *)(a1 + 28) > v214 && *(_DWORD *)(a1 + 32) == 0)
            v216 = (_DWORD)v119 - v212 - v214;
          else
            v216 = *(_DWORD *)(a1 + 28);
          if (v213 >= v211)
            v217 = v213 - v211;
          else
            v217 = 0;
          v218 = *(_QWORD *)(a1 + 48);
          v219 = *(_DWORD *)(a1 + 204);
          v220 = 64 - *(_DWORD *)(a1 + 200);
          if (v159 < v213)
          {
            v221 = ~(-1 << v210);
            v159 = v159;
            do
            {
              v222 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v212 + v159)) >> v220);
              *(_DWORD *)(v209 + 4 * (v159 & v221)) = *(_DWORD *)(v218 + v222);
              *(_DWORD *)(v218 + v222) = v159++;
            }
            while (v159 < ((_DWORD)v119 - v212));
          }
          *(_DWORD *)(a1 + 36) = v213;
          v223 = *(_DWORD *)(v218 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v119) >> v220));
          if (v223 < v216)
            break;
          v224 = v211 - 1;
          v225 = 1 << v219;
          v226 = v213 + 2;
          v227 = v12 + 10;
          v228 = v212 + 8;
          v229 = 3;
          v147 = 999999999;
          while (2)
          {
            v230 = (_DWORD *)(v212 + v223);
            if (*((unsigned __int8 *)v230 + v229) != v119[v229])
            {
LABEL_366:
              if (v223 <= v217)
                goto LABEL_419;
              if (!--v225)
                goto LABEL_419;
              v223 = *(_DWORD *)(v209 + 4 * (v223 & v224));
              v151 = v229;
              if (v223 < v216)
                goto LABEL_478;
              continue;
            }
            break;
          }
          if (v19 <= (unint64_t)v119)
          {
            v232 = v119;
            if ((unint64_t)v119 < v356)
            {
LABEL_354:
              if (*v230 == *(_DWORD *)v232)
              {
                v232 += 4;
                ++v230;
              }
            }
          }
          else
          {
            v231 = *(_QWORD *)v230 ^ *(_QWORD *)v119;
            if (v231)
            {
              v151 = __clz(__rbit64(v231)) >> 3;
              if (v151 <= v229)
                goto LABEL_366;
LABEL_365:
              v147 = v226 - v223;
              v229 = v151;
              if (&v119[v151] == v5)
                goto LABEL_478;
              goto LABEL_366;
            }
            while (1)
            {
              v232 = &v227[v231];
              if ((unint64_t)&v227[v231] >= v19)
                break;
              v233 = *(_QWORD *)(v228 + v223 + v231);
              v231 += 8;
              v234 = *(_QWORD *)v232 ^ v233;
              if (v234)
              {
                v151 = v231 + (__clz(__rbit64(v234)) >> 3);
                if (v151 > v229)
                  goto LABEL_365;
                goto LABEL_366;
              }
            }
            v230 = (_DWORD *)(v228 + v223 + v231);
            if ((unint64_t)v232 < v356)
              goto LABEL_354;
          }
          if ((unint64_t)v232 >= v355)
          {
            if (v232 >= v5)
              goto LABEL_364;
          }
          else
          {
            if (*(unsigned __int16 *)v230 == *(unsigned __int16 *)v232)
            {
              v232 += 2;
              v230 = (_DWORD *)((char *)v230 + 2);
            }
            if (v232 >= v5)
            {
LABEL_364:
              v151 = v232 - v119;
              if (v232 - v119 <= v229)
                goto LABEL_366;
              goto LABEL_365;
            }
          }
          if (*(unsigned __int8 *)v230 == *v232)
            ++v232;
          goto LABEL_364;
        }
        if (v208 != 5)
        {
          v260 = *(_QWORD *)(a1 + 64);
          v261 = *(_DWORD *)(a1 + 196);
          v262 = 1 << v261;
          v263 = *(_QWORD *)(a1 + 8);
          v264 = (_DWORD)v119 - v263;
          v265 = 1 << *(_DWORD *)(a1 + 192);
          if ((int)v119 - (int)v263 - *(_DWORD *)(a1 + 28) > v265 && *(_DWORD *)(a1 + 32) == 0)
            v267 = (_DWORD)v119 - v263 - v265;
          else
            v267 = *(_DWORD *)(a1 + 28);
          if (v264 >= v262)
            v268 = v264 - v262;
          else
            v268 = 0;
          v269 = *(_QWORD *)(a1 + 48);
          v270 = *(_DWORD *)(a1 + 204);
          v271 = 32 - *(_DWORD *)(a1 + 200);
          if (v159 < v264)
          {
            v272 = ~(-1 << v261);
            v159 = v159;
            do
            {
              v273 = 4 * ((-1640531535 * *(_DWORD *)(v263 + v159)) >> v271);
              *(_DWORD *)(v260 + 4 * (v159 & v272)) = *(_DWORD *)(v269 + v273);
              *(_DWORD *)(v269 + v273) = v159++;
            }
            while (v159 < ((_DWORD)v119 - v263));
          }
          *(_DWORD *)(a1 + 36) = v264;
          v274 = *(_DWORD *)(v269 + 4 * ((-1640531535 * *(_DWORD *)v119) >> v271));
          if (v274 < v267)
            break;
          v275 = v262 - 1;
          v276 = 1 << v270;
          v277 = v264 + 2;
          v278 = v12 + 10;
          v279 = v263 + 8;
          v280 = 3;
          v147 = 999999999;
          while (1)
          {
            v281 = (_QWORD *)(v263 + v274);
            if (*((unsigned __int8 *)v281 + v280) != v119[v280])
              goto LABEL_453;
            if (v19 <= (unint64_t)v119)
              break;
            v282 = *(_QWORD *)v119 ^ *v281;
            if (v282)
            {
              v151 = __clz(__rbit64(v282)) >> 3;
              if (v151 > v280)
                goto LABEL_452;
              goto LABEL_453;
            }
            v284 = 0;
            do
            {
              v283 = &v278[v284];
              if ((unint64_t)&v278[v284] >= v19)
              {
                v281 = (_QWORD *)(v279 + v274 + v284);
                if ((unint64_t)v283 >= v356)
                  goto LABEL_443;
                goto LABEL_441;
              }
              v285 = *(_QWORD *)(v279 + v274 + v284);
              v284 += 8;
              v286 = *(_QWORD *)v283 ^ v285;
            }
            while (!v286);
            v151 = v284 + (__clz(__rbit64(v286)) >> 3);
            if (v151 <= v280)
              goto LABEL_453;
LABEL_452:
            v147 = v277 - v274;
            v280 = v151;
            if (&v119[v151] == v5)
              goto LABEL_478;
LABEL_453:
            if (v274 <= v268 || (--v276, !v276))
            {
              v151 = v280;
              if (v280 >= 4)
                goto LABEL_479;
              goto LABEL_505;
            }
            v274 = *(_DWORD *)(v260 + 4 * (v274 & v275));
            v151 = v280;
            if (v274 < v267)
              goto LABEL_478;
          }
          v283 = v119;
          if ((unint64_t)v119 >= v356)
            goto LABEL_443;
LABEL_441:
          if (*(_DWORD *)v281 == *(_DWORD *)v283)
          {
            v283 += 4;
            v281 = (_QWORD *)((char *)v281 + 4);
          }
LABEL_443:
          if ((unint64_t)v283 >= v355)
          {
            if (v283 >= v5)
              goto LABEL_451;
          }
          else
          {
            if (*(unsigned __int16 *)v281 == *(unsigned __int16 *)v283)
            {
              v283 += 2;
              v281 = (_QWORD *)((char *)v281 + 2);
            }
            if (v283 >= v5)
            {
LABEL_451:
              v151 = v283 - v119;
              if (v283 - v119 > v280)
                goto LABEL_452;
              goto LABEL_453;
            }
          }
          if (*(unsigned __int8 *)v281 == *v283)
            ++v283;
          goto LABEL_451;
        }
        v235 = *(_QWORD *)(a1 + 64);
        v236 = *(_DWORD *)(a1 + 196);
        v237 = 1 << v236;
        v238 = *(_QWORD *)(a1 + 8);
        v239 = (_DWORD)v119 - v238;
        v240 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)v119 - (int)v238 - *(_DWORD *)(a1 + 28) > v240 && *(_DWORD *)(a1 + 32) == 0)
          v242 = (_DWORD)v119 - v238 - v240;
        else
          v242 = *(_DWORD *)(a1 + 28);
        if (v239 >= v237)
          v243 = v239 - v237;
        else
          v243 = 0;
        v244 = *(_QWORD *)(a1 + 48);
        v245 = *(_DWORD *)(a1 + 204);
        v246 = 64 - *(_DWORD *)(a1 + 200);
        if (v159 < v239)
        {
          v247 = ~(-1 << v236);
          v159 = v159;
          do
          {
            v248 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v238 + v159)) >> v246);
            *(_DWORD *)(v235 + 4 * (v159 & v247)) = *(_DWORD *)(v244 + v248);
            *(_DWORD *)(v244 + v248) = v159++;
          }
          while (v159 < ((_DWORD)v119 - v238));
        }
        *(_DWORD *)(a1 + 36) = v239;
        v249 = *(_DWORD *)(v244 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v119) >> v246));
        if (v249 < v242)
          break;
        v250 = v237 - 1;
        v251 = 1 << v245;
        v252 = v239 + 2;
        v253 = v12 + 10;
        v254 = v238 + 8;
        v229 = 3;
        v147 = 999999999;
        while (2)
        {
          v255 = (_DWORD *)(v238 + v249);
          if (*((unsigned __int8 *)v255 + v229) != v119[v229])
            goto LABEL_409;
          if (v19 <= (unint64_t)v119)
          {
            v257 = v119;
            if ((unint64_t)v119 >= v356)
              goto LABEL_399;
LABEL_397:
            if (*v255 == *(_DWORD *)v257)
            {
              v257 += 4;
              ++v255;
            }
LABEL_399:
            if ((unint64_t)v257 >= v355)
            {
              if (v257 >= v5)
                goto LABEL_407;
            }
            else
            {
              if (*(unsigned __int16 *)v255 == *(unsigned __int16 *)v257)
              {
                v257 += 2;
                v255 = (_DWORD *)((char *)v255 + 2);
              }
              if (v257 >= v5)
              {
LABEL_407:
                v151 = v257 - v119;
                if (v257 - v119 <= v229)
                  goto LABEL_409;
LABEL_408:
                v147 = v252 - v249;
                v229 = v151;
                if (&v119[v151] != v5)
                  goto LABEL_409;
                break;
              }
            }
            if (*(unsigned __int8 *)v255 == *v257)
              ++v257;
            goto LABEL_407;
          }
          v256 = *(_QWORD *)v255 ^ *(_QWORD *)v119;
          if (v256)
          {
            v151 = __clz(__rbit64(v256)) >> 3;
            if (v151 <= v229)
              goto LABEL_409;
            goto LABEL_408;
          }
          while (2)
          {
            v257 = &v253[v256];
            if ((unint64_t)&v253[v256] >= v19)
            {
              v255 = (_DWORD *)(v254 + v249 + v256);
              if ((unint64_t)v257 >= v356)
                goto LABEL_399;
              goto LABEL_397;
            }
            v258 = *(_QWORD *)(v254 + v249 + v256);
            v256 += 8;
            v259 = *(_QWORD *)v257 ^ v258;
            if (!v259)
              continue;
            break;
          }
          v151 = v256 + (__clz(__rbit64(v259)) >> 3);
          if (v151 > v229)
            goto LABEL_408;
LABEL_409:
          if (v249 <= v243)
          {
LABEL_419:
            v151 = v229;
            if (v229 >= 4)
              goto LABEL_479;
            goto LABEL_505;
          }
          if (!--v251)
          {
            v151 = v229;
            break;
          }
          v249 = *(_DWORD *)(v235 + 4 * (v249 & v250));
          v151 = v229;
          if (v249 >= v242)
            continue;
          break;
        }
LABEL_478:
        if (v151 < 4)
          break;
LABEL_479:
        v118 = -(uint64_t)v18;
        if ((int)((__clz(v147 + 1) ^ 0xFFFFFFE0) + 4 * v151 + 1) > (int)((__clz(v117 + 1) ^ 0xFFFFFFE0) + 4 * v116 + 8))
        {
LABEL_480:
          v12 = v119;
          v21 = (unint64_t)v119;
          v117 = v147;
          v116 = v151;
          if ((unint64_t)v119 >= v6)
            break;
          continue;
        }
        break;
      }
LABEL_505:
      if (!v117)
      {
        v298 = (unint64_t)(v5 - 32);
        v17 = v353;
        v301 = v21 - (_QWORD)a4;
        v302 = *(_OWORD **)(a2 + 24);
        if (v21 > (unint64_t)(v5 - 32))
          goto LABEL_523;
LABEL_514:
        *v302 = *a4;
        v303 = *(_QWORD *)(a2 + 24);
        if (v301 > 0x10)
        {
          v304 = (_OWORD *)(v303 + 16);
          v305 = v303 + v301;
          v306 = a4 + 1;
          do
          {
            v307 = *v306++;
            *v304++ = v307;
          }
          while ((unint64_t)v304 < v305);
          goto LABEL_548;
        }
        *(_QWORD *)(a2 + 24) = v303 + v301;
        v308 = *(_QWORD *)(a2 + 8);
        v309 = v116 - 3;
        *(_WORD *)(v308 + 4) = v301;
        *(_DWORD *)v308 = v117 + 1;
        if (v116 - 3 >= 0x10000)
          goto LABEL_553;
        goto LABEL_550;
      }
      if (v21 <= (unint64_t)a4 || v21 - v117 + 2 <= v351)
      {
        v297 = v21;
        v298 = (unint64_t)(v5 - 32);
      }
      else
      {
        v296 = 1 - v117;
        v297 = v21;
        v298 = (unint64_t)(v5 - 32);
        while (1)
        {
          v299 = *(unsigned __int8 *)--v297;
          if (v299 != *(unsigned __int8 *)(v21 + v296))
            break;
          ++v116;
          if (v297 > (unint64_t)a4)
          {
            v300 = v21 + v296;
            v21 = v297;
            if (v300 > v351)
              continue;
          }
          goto LABEL_522;
        }
        v297 = v21;
      }
LABEL_522:
      v17 = v18;
      v18 = (v117 - 2);
      v21 = v297;
      v301 = v297 - (_QWORD)a4;
      v302 = *(_OWORD **)(a2 + 24);
      if (v297 <= v298)
        goto LABEL_514;
LABEL_523:
      if ((unint64_t)a4 <= v298)
      {
        v311 = (char *)v302 + v298 - (_QWORD)a4;
        v312 = a4;
        v313 = v302;
        do
        {
          v314 = *v312++;
          *v313++ = v314;
        }
        while (v313 < (_OWORD *)v311);
        v310 = (_OWORD *)v298;
        if (v298 < v21)
          goto LABEL_529;
      }
      else
      {
        v310 = a4;
        v311 = v302;
        if ((unint64_t)a4 >= v21)
          goto LABEL_548;
LABEL_529:
        if ((unint64_t)a4 <= v298)
          v315 = (char *)v298;
        else
          v315 = (char *)a4;
        v316 = v21 - (_QWORD)v315;
        if (v21 - (unint64_t)v315 < 8)
        {
          v317 = (char *)v310;
          goto LABEL_547;
        }
        if ((unint64_t)((char *)v302 - (char *)a4) < 0x20)
        {
          v317 = (char *)v310;
          goto LABEL_547;
        }
        if (v316 >= 0x20)
        {
          v318 = v316 & 0xFFFFFFFFFFFFFFE0;
          v319 = v310 + 1;
          v320 = (_OWORD *)((char *)v302 + v315 - (char *)a4 + 16);
          v321 = v316 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v322 = *v319;
            *(v320 - 1) = *(v319 - 1);
            *v320 = v322;
            v319 += 2;
            v320 += 2;
            v321 -= 32;
          }
          while (v321);
          if (v316 != v318)
          {
            if ((v316 & 0x18) == 0)
            {
              v317 = (char *)v310 + v318;
              v311 += v318;
              goto LABEL_547;
            }
            goto LABEL_542;
          }
        }
        else
        {
          v318 = 0;
LABEL_542:
          v311 += v316 & 0xFFFFFFFFFFFFFFF8;
          v317 = (char *)v310 + (v316 & 0xFFFFFFFFFFFFFFF8);
          v323 = (uint64_t *)((char *)v310 + v318);
          v324 = (_QWORD *)((char *)v302 + &v315[v318] - (char *)a4);
          v325 = v318 - (v316 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v326 = *v323++;
            *v324++ = v326;
            v325 += 8;
          }
          while (v325);
          if (v316 != (v316 & 0xFFFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_547:
              v327 = *v317++;
              *v311++ = v327;
            }
            while ((unint64_t)v317 < v21);
          }
        }
      }
LABEL_548:
      *(_QWORD *)(a2 + 24) += v301;
      v308 = *(_QWORD *)(a2 + 8);
      if (v301 < 0x10000)
      {
        v309 = v116 - 3;
        *(_WORD *)(v308 + 4) = v301;
        *(_DWORD *)v308 = v117 + 1;
        if (v116 - 3 >= 0x10000)
          goto LABEL_553;
LABEL_550:
        *(_WORD *)(v308 + 6) = v309;
        v329 = v308 + 8;
        *(_QWORD *)(a2 + 8) = v308 + 8;
        a4 = (_OWORD *)(v21 + v116);
        if ((_DWORD)v17)
          goto LABEL_554;
LABEL_588:
        v12 = (char *)a4;
        goto LABEL_18;
      }
      v328 = (unint64_t)(v308 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v328;
      v309 = v116 - 3;
      *(_WORD *)(v308 + 4) = v301;
      *(_DWORD *)v308 = v117 + 1;
      if (v116 - 3 < 0x10000)
        goto LABEL_550;
LABEL_553:
      v330 = (unint64_t)(v308 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v330;
      *(_WORD *)(v308 + 6) = v309;
      v329 = v308 + 8;
      *(_QWORD *)(a2 + 8) = v308 + 8;
      a4 = (_OWORD *)(v21 + v116);
      if (!(_DWORD)v17)
        goto LABEL_588;
LABEL_554:
      if ((unint64_t)a4 > v6)
        goto LABEL_588;
      v331 = v18;
      v332 = v17;
      while (2)
      {
        v18 = v332;
        v332 = v331;
        if (*(_DWORD *)a4 != *(_DWORD *)((char *)a4 - v18))
        {
          LODWORD(v17) = v18;
          v18 = v331;
          goto LABEL_588;
        }
        v333 = (char *)a4 + 4;
        v334 = (char *)a4 - v18 + 4;
        if (v19 <= (unint64_t)a4 + 4)
        {
          v337 = (char *)a4 + 4;
          if ((unint64_t)v333 < v356)
          {
LABEL_562:
            if (*(_DWORD *)v334 == *(_DWORD *)v337)
            {
              v337 += 4;
              v334 += 4;
            }
          }
          goto LABEL_564;
        }
        v335 = *(_QWORD *)v333 ^ *(_QWORD *)v334;
        if (!v335)
        {
          v340 = (char *)a4 + 12;
          while (1)
          {
            v341 = &v340[v335];
            if ((unint64_t)&v340[v335] >= v19)
              break;
            v342 = *(_QWORD *)((char *)a4 + v335 - v18 + 12);
            v335 += 8;
            v343 = *(_QWORD *)v341 ^ v342;
            if (v343)
            {
              v336 = v335 + (__clz(__rbit64(v343)) >> 3);
              if ((unint64_t)a4 <= v298)
                goto LABEL_573;
              goto LABEL_574;
            }
          }
          v337 = (char *)a4 + v335 + 12;
          v334 = &v337[-v18];
          if ((unint64_t)v337 < v356)
            goto LABEL_562;
LABEL_564:
          if ((unint64_t)v337 >= v355)
          {
            if (v337 >= v5)
              goto LABEL_572;
          }
          else
          {
            if (*(unsigned __int16 *)v334 == *(unsigned __int16 *)v337)
            {
              v337 += 2;
              v334 += 2;
            }
            if (v337 >= v5)
            {
LABEL_572:
              v336 = v337 - v333;
              if ((unint64_t)a4 > v298)
                goto LABEL_574;
LABEL_573:
              *(_OWORD *)*(_QWORD *)(a2 + 24) = *a4;
              v329 = *(_QWORD *)(a2 + 8);
              goto LABEL_574;
            }
          }
          if (*v334 == *v337)
            ++v337;
          goto LABEL_572;
        }
        v336 = __clz(__rbit64(v335)) >> 3;
        if ((unint64_t)a4 <= v298)
          goto LABEL_573;
LABEL_574:
        v338 = v336 + 1;
        *(_WORD *)(v329 + 4) = 0;
        *(_DWORD *)v329 = 1;
        if (v336 + 1 >= 0x10000)
        {
          v339 = (unint64_t)(v329 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v339;
          *(_WORD *)(v329 + 6) = v338;
          v329 += 8;
          *(_QWORD *)(a2 + 8) = v329;
          a4 = (_OWORD *)((char *)a4 + v336 + 4);
          if (!(_DWORD)v332)
            break;
          goto LABEL_578;
        }
        *(_WORD *)(v329 + 6) = v338;
        v329 += 8;
        *(_QWORD *)(a2 + 8) = v329;
        a4 = (_OWORD *)((char *)a4 + v336 + 4);
        if ((_DWORD)v332)
        {
LABEL_578:
          v331 = v18;
          LODWORD(v17) = v332;
          v12 = (char *)a4;
          if ((unint64_t)a4 > v6)
            goto LABEL_18;
          continue;
        }
        break;
      }
      LODWORD(v17) = v332;
      v12 = (char *)a4;
LABEL_18:
      if ((unint64_t)v12 >= v6)
      {
        a3 = v350;
        v11 = v348;
        v10 = v349;
        v16 = v347;
        goto LABEL_591;
      }
    }
    v26 = v12 + 5;
    if ((unint64_t)v22 < v356)
      goto LABEL_25;
    goto LABEL_32;
  }
LABEL_591:
  if (v11 <= v16)
    v344 = 0;
  else
    v344 = v11;
  if (v10 > v16)
    v344 = v10;
  if ((_DWORD)v18)
    v345 = v18;
  else
    v345 = v344;
  if ((_DWORD)v17)
    v344 = v17;
  *a3 = v345;
  a3[1] = v344;
  return v5 - (char *)a4;
}

unint64_t ZSTD_compressBlock_btlazy2(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  unint64_t BestMatch_selectMLS;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t BestMatch;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  int v57;
  _DWORD *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  int v67;
  _DWORD *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  _DWORD *v78;
  char *v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  unsigned __int16 *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  int v97;
  _DWORD *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  unint64_t v106;
  int v107;
  _DWORD *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t *v120;
  unint64_t v121;
  int v122;
  char *v123;
  unint64_t v124;
  _OWORD *v125;
  uint64_t v126;
  _OWORD *v127;
  unint64_t v128;
  __int128 *v129;
  __int128 v130;
  uint64_t v131;
  __int16 v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  _OWORD *v137;
  _BYTE *v138;
  uint64_t *v139;
  _OWORD *v140;
  __int128 v141;
  char *v142;
  unint64_t v143;
  uint64_t *v144;
  unint64_t v145;
  __int128 *v146;
  _OWORD *v147;
  unint64_t v148;
  __int128 v149;
  uint64_t *v150;
  _QWORD *v151;
  unint64_t v152;
  uint64_t v153;
  char v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  _DWORD *v161;
  unint64_t v162;
  unint64_t v163;
  _DWORD *v164;
  __int16 v165;
  unint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unsigned int v182;
  uint64_t *v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;

  v5 = a4;
  v6 = (unint64_t)a4 + a5;
  v7 = (unint64_t)a4 + a5 - 8;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = *a3;
  v11 = a3[1];
  v178 = v8 + v9;
  if ((_DWORD)a4 == (_DWORD)v8 + (_DWORD)v9)
    v12 = (uint64_t *)((char *)a4 + 1);
  else
    v12 = a4;
  v13 = (_DWORD)v12 - v8;
  v14 = 1 << *(_DWORD *)(a1 + 192);
  if (v13 - (int)v9 > v14 && *(_DWORD *)(a1 + 32) == 0)
    LODWORD(v9) = v13 - v14;
  v16 = v13 - v9;
  if (v11 <= v16)
    LODWORD(v17) = a3[1];
  else
    LODWORD(v17) = 0;
  if (v10 <= v16)
    v18 = v10;
  else
    v18 = 0;
  if ((unint64_t)v12 < v7)
  {
    v174 = v16;
    v175 = a3[1];
    v176 = *a3;
    v177 = a3;
    v21 = v6 - 7;
    v22 = v6 - 3;
    v23 = v6 - 1;
    v184 = v7;
    v185 = v6;
    v180 = v6 - 1;
    v181 = v6 - 3;
    v179 = v6 - 32;
    while (1)
    {
      v25 = 0;
      v182 = v17;
      if (!(_DWORD)v18 || *(_DWORD *)((char *)v12 - v18 + 1) != *(_DWORD *)((char *)v12 + 1))
        goto LABEL_37;
      v26 = (char *)v12 + 5;
      v27 = (uint64_t *)((char *)v12 - v18 + 5);
      if (v21 <= (unint64_t)v12 + 5)
        break;
      v28 = *(_QWORD *)v26 ^ *v27;
      if (!v28)
      {
        v133 = (char *)v12 + 13;
        while (1)
        {
          v134 = &v133[v28];
          if ((unint64_t)&v133[v28] >= v21)
            break;
          v135 = *(uint64_t *)((char *)v12 + v28 - v18 + 13);
          v28 += 8;
          v136 = *(_QWORD *)v134 ^ v135;
          if (v136)
          {
            v29 = v28 + (__clz(__rbit64(v136)) >> 3);
            goto LABEL_36;
          }
        }
        v30 = (_DWORD *)((char *)v12 + v28 + 13);
        v27 = (_QWORD *)((char *)v30 - v18);
        if ((unint64_t)v30 >= v22)
        {
LABEL_27:
          if ((unint64_t)v30 >= v23)
          {
            if ((unint64_t)v30 < v6)
              goto LABEL_33;
          }
          else
          {
            if (*(unsigned __int16 *)v27 == *(unsigned __int16 *)v30)
            {
              v30 = (_DWORD *)((char *)v30 + 2);
              v27 = (_QWORD *)((char *)v27 + 2);
            }
            if ((unint64_t)v30 >= v6)
              goto LABEL_35;
LABEL_33:
            if (*(unsigned __int8 *)v27 == *(unsigned __int8 *)v30)
              v30 = (_DWORD *)((char *)v30 + 1);
          }
LABEL_35:
          v29 = (char *)v30 - v26;
          goto LABEL_36;
        }
LABEL_25:
        if (*(_DWORD *)v27 == *v30)
        {
          ++v30;
          v27 = (_QWORD *)((char *)v27 + 4);
        }
        goto LABEL_27;
      }
      v29 = __clz(__rbit64(v28)) >> 3;
LABEL_36:
      v25 = v29 + 4;
LABEL_37:
      v186 = 999999999;
      BestMatch_selectMLS = ZSTD_BtFindBestMatch_selectMLS(a1, v12, v6, &v186);
      if (BestMatch_selectMLS <= v25)
        v32 = v25;
      else
        v32 = BestMatch_selectMLS;
      if (v32 < 4)
      {
        v12 = (uint64_t *)((char *)v12 + (((char *)v12 - (char *)v5) >> 8) + 1);
        v24 = v184;
        v6 = v185;
        v23 = v180;
        v22 = v181;
        LODWORD(v17) = v182;
        goto LABEL_18;
      }
      if (BestMatch_selectMLS <= v25)
        v33 = (uint64_t *)((char *)v12 + 1);
      else
        v33 = v12;
      if (BestMatch_selectMLS <= v25)
        v34 = 0;
      else
        v34 = v186;
      BestMatch = v32;
      v36 = v34;
      v37 = v33;
      v24 = v184;
      v6 = v185;
      v38 = -(uint64_t)v18;
      if ((unint64_t)v12 >= v184)
      {
LABEL_136:
        v17 = v182;
        if (!v36)
          goto LABEL_145;
LABEL_137:
        if (v37 <= v5 || (unint64_t)v37 - v36 + 2 <= v178)
        {
          v120 = v37;
          v23 = v180;
          v22 = v181;
          v121 = v179;
        }
        else
        {
          v119 = 1 - v36;
          v120 = v37;
          v23 = v180;
          v22 = v181;
          v121 = v179;
          while (1)
          {
            v122 = *((unsigned __int8 *)v120 - 1);
            v120 = (uint64_t *)((char *)v120 - 1);
            if (v122 != *((unsigned __int8 *)v37 + v119))
              break;
            ++BestMatch;
            if (v120 > v5)
            {
              v123 = (char *)v37 + v119;
              v37 = v120;
              if ((unint64_t)v123 > v178)
                continue;
            }
            goto LABEL_158;
          }
          v120 = v37;
        }
LABEL_158:
        v17 = v18;
        v18 = (v36 - 2);
        v37 = v120;
        v124 = (char *)v120 - (char *)v5;
        v125 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)v37 > v121)
          goto LABEL_159;
LABEL_146:
        *v125 = *(_OWORD *)v5;
        v126 = *(_QWORD *)(a2 + 24);
        if (v124 > 0x10)
        {
          v127 = (_OWORD *)(v126 + 16);
          v128 = v126 + v124;
          v129 = (__int128 *)(v5 + 2);
          do
          {
            v130 = *v129++;
            *v127++ = v130;
          }
          while ((unint64_t)v127 < v128);
          goto LABEL_186;
        }
        *(_QWORD *)(a2 + 24) = v126 + v124;
        v131 = *(_QWORD *)(a2 + 8);
        v132 = BestMatch - 3;
        *(_WORD *)(v131 + 4) = v124;
        *(_DWORD *)v131 = v36 + 1;
        if (BestMatch - 3 >= 0x10000)
          goto LABEL_191;
        goto LABEL_188;
      }
      while (1)
      {
        v37 = (uint64_t *)((char *)v12 + 1);
        v183 = v33;
        if (!v34 || !(_DWORD)v18 || *(_DWORD *)v37 != *(_DWORD *)((char *)v37 + v38))
          goto LABEL_71;
        v39 = (char *)v12 + 5;
        v40 = (uint64_t *)((char *)v12 + v38 + 5);
        if (v21 <= (unint64_t)v12 + 5)
        {
          v43 = (unsigned __int16 *)((char *)v12 + 5);
          if ((unint64_t)v39 < v181)
            goto LABEL_55;
        }
        else
        {
          v41 = *(_QWORD *)v39 ^ *v40;
          if (v41)
          {
            v42 = __clz(__rbit64(v41)) >> 3;
LABEL_69:
            v47 = v42 + 4;
            if (3 * (int)v47 > (int)(3 * v32 + (__clz(v34 + 1) ^ 0xFFFFFFE0) + 2))
            {
              v34 = 0;
              v32 = v47;
              v183 = (uint64_t *)((char *)v12 + 1);
            }
            goto LABEL_71;
          }
          v43 = (unsigned __int16 *)((char *)v12 + 13);
          while ((unint64_t)v43 < v21)
          {
            v44 = *(_QWORD *)((char *)v43 + v38);
            v45 = *(_QWORD *)v43;
            v43 += 4;
            v46 = v45 ^ v44;
            if (v46)
            {
              v43 = (unsigned __int16 *)((char *)v43 + (__clz(__rbit64(v46)) >> 3) - 8);
              goto LABEL_68;
            }
          }
          v40 = (_QWORD *)((char *)v43 + v38);
          if ((unint64_t)v43 < v181)
          {
LABEL_55:
            if (*(_DWORD *)v40 == *(_DWORD *)v43)
            {
              v43 += 2;
              v40 = (_QWORD *)((char *)v40 + 4);
            }
          }
        }
        if ((unint64_t)v43 < v180 && *(unsigned __int16 *)v40 == *v43)
        {
          ++v43;
          v40 = (_QWORD *)((char *)v40 + 2);
        }
        if ((unint64_t)v43 < v6 && *(unsigned __int8 *)v40 == *(unsigned __int8 *)v43)
          v43 = (unsigned __int16 *)((char *)v43 + 1);
LABEL_68:
        v42 = (char *)v43 - v39;
        if (v42 <= 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_69;
LABEL_71:
        v186 = 999999999;
        v48 = *(_DWORD *)(a1 + 208);
        if ((v48 - 6) < 2)
        {
          v49 = *(_QWORD *)(a1 + 8);
          v50 = *(unsigned int *)(a1 + 36);
          if (v49 + v50 > (unint64_t)v37)
            goto LABEL_91;
          v51 = (_DWORD)v37 - v49;
          if (v50 < (int)v37 - (int)v49)
          {
            v52 = *(_QWORD *)(a1 + 48);
            v53 = *(_QWORD *)(a1 + 64);
            v54 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
            v55 = 64 - *(_DWORD *)(a1 + 200);
            do
            {
              v56 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v49 + v50)) >> v55);
              v57 = *(_DWORD *)(v52 + v56);
              v58 = (_DWORD *)(v53 + 8 * (v50 & v54));
              *(_DWORD *)(v52 + v56) = v50;
              *v58 = v57;
              v58[1] = 1;
              ++v50;
            }
            while ((_DWORD)v37 - (_DWORD)v49 != v50);
          }
          v59 = 6;
LABEL_83:
          v69 = v51;
          goto LABEL_89;
        }
        if (v48 == 5)
        {
          v60 = *(_QWORD *)(a1 + 8);
          v61 = *(unsigned int *)(a1 + 36);
          if (v60 + v61 > (unint64_t)v37)
            goto LABEL_91;
          v51 = (_DWORD)v37 - v60;
          if (v61 < (int)v37 - (int)v60)
          {
            v62 = *(_QWORD *)(a1 + 48);
            v63 = *(_QWORD *)(a1 + 64);
            v64 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
            v65 = 64 - *(_DWORD *)(a1 + 200);
            do
            {
              v66 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v60 + v61)) >> v65);
              v67 = *(_DWORD *)(v62 + v66);
              v68 = (_DWORD *)(v63 + 8 * (v61 & v64));
              *(_DWORD *)(v62 + v66) = v61;
              *v68 = v67;
              v68[1] = 1;
              ++v61;
            }
            while ((_DWORD)v37 - (_DWORD)v60 != v61);
          }
          v59 = 5;
          goto LABEL_83;
        }
        v70 = *(_QWORD *)(a1 + 8);
        v71 = *(unsigned int *)(a1 + 36);
        if (v70 + v71 > (unint64_t)v37)
          goto LABEL_91;
        v69 = (_DWORD)v37 - v70;
        if (v71 < (int)v37 - (int)v70)
        {
          v72 = *(_QWORD *)(a1 + 48);
          v73 = *(_QWORD *)(a1 + 64);
          v74 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
          v75 = 32 - *(_DWORD *)(a1 + 200);
          do
          {
            v76 = 4 * ((-1640531535 * *(_DWORD *)(v70 + v71)) >> v75);
            v77 = *(_DWORD *)(v72 + v76);
            v78 = (_DWORD *)(v73 + 8 * (v71 & v74));
            *(_DWORD *)(v72 + v76) = v71;
            *v78 = v77;
            v78[1] = 1;
            ++v71;
          }
          while ((_DWORD)v37 - (_DWORD)v70 != v71);
        }
        v59 = 4;
LABEL_89:
        *(_DWORD *)(a1 + 36) = v69;
        BestMatch = ZSTD_DUBT_findBestMatch(a1, (uint64_t *)((char *)v12 + 1), v6, &v186, v59, 0);
        v24 = v184;
        v6 = v185;
        v38 = -(uint64_t)v18;
        if (BestMatch >= 4)
        {
          v36 = v186;
          if ((int)((__clz(v186 + 1) ^ 0xFFFFFFE0) + 4 * BestMatch + 1) > (int)((__clz(v34 + 1) ^ 0xFFFFFFE0)
                                                                               + 4 * v32
                                                                               + 5))
            goto LABEL_135;
        }
LABEL_91:
        if ((unint64_t)v37 >= v24)
          break;
        v37 = (uint64_t *)((char *)v12 + 2);
        if (!v34 || !(_DWORD)v18 || *(_DWORD *)v37 != *(_DWORD *)((char *)v37 + v38))
          goto LABEL_115;
        v79 = (char *)v12 + 6;
        v80 = (uint64_t *)((char *)v12 + v38 + 6);
        if (v21 > (unint64_t)v12 + 6)
        {
          v81 = *(_QWORD *)v79 ^ *v80;
          if (v81)
          {
            v82 = __clz(__rbit64(v81)) >> 3;
LABEL_113:
            v87 = v82 + 4;
            if ((int)((__clz(v34 + 1) ^ 0xFFFFFFE0) + 4 * v32 + 2) < 4 * (int)v87)
            {
              v34 = 0;
              v32 = v87;
              v183 = (uint64_t *)((char *)v12 + 2);
            }
            goto LABEL_115;
          }
          v83 = (unsigned __int16 *)v12 + 7;
          while ((unint64_t)v83 < v21)
          {
            v84 = *(_QWORD *)((char *)v83 + v38);
            v85 = *(_QWORD *)v83;
            v83 += 4;
            v86 = v85 ^ v84;
            if (v86)
            {
              v83 = (unsigned __int16 *)((char *)v83 + (__clz(__rbit64(v86)) >> 3) - 8);
              goto LABEL_112;
            }
          }
          v80 = (_QWORD *)((char *)v83 + v38);
          if ((unint64_t)v83 >= v181)
            goto LABEL_106;
LABEL_99:
          if (*(_DWORD *)v80 == *(_DWORD *)v83)
          {
            v83 += 2;
            v80 = (_QWORD *)((char *)v80 + 4);
          }
          goto LABEL_106;
        }
        v83 = (unsigned __int16 *)v12 + 3;
        if ((unint64_t)v79 < v181)
          goto LABEL_99;
LABEL_106:
        if ((unint64_t)v83 < v180 && *(unsigned __int16 *)v80 == *v83)
        {
          ++v83;
          v80 = (_QWORD *)((char *)v80 + 2);
        }
        if ((unint64_t)v83 < v6 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83)
          v83 = (unsigned __int16 *)((char *)v83 + 1);
LABEL_112:
        v82 = (char *)v83 - v79;
        if (v82 <= 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_113;
LABEL_115:
        v186 = 999999999;
        v88 = *(_DWORD *)(a1 + 208);
        if ((v88 - 6) < 2)
        {
          v89 = *(_QWORD *)(a1 + 8);
          v90 = *(unsigned int *)(a1 + 36);
          if (v89 + v90 > (unint64_t)v37)
            break;
          v91 = (_DWORD)v37 - v89;
          if (v90 < (int)v37 - (int)v89)
          {
            v92 = *(_QWORD *)(a1 + 48);
            v93 = *(_QWORD *)(a1 + 64);
            v94 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
            v95 = 64 - *(_DWORD *)(a1 + 200);
            do
            {
              v96 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v89 + v90)) >> v95);
              v97 = *(_DWORD *)(v92 + v96);
              v98 = (_DWORD *)(v93 + 8 * (v90 & v94));
              *(_DWORD *)(v92 + v96) = v90;
              *v98 = v97;
              v98[1] = 1;
              ++v90;
            }
            while ((_DWORD)v37 - (_DWORD)v89 != v90);
          }
          v99 = 6;
LABEL_127:
          v109 = v91;
          goto LABEL_133;
        }
        if (v88 == 5)
        {
          v100 = *(_QWORD *)(a1 + 8);
          v101 = *(unsigned int *)(a1 + 36);
          if (v100 + v101 > (unint64_t)v37)
            break;
          v91 = (_DWORD)v37 - v100;
          if (v101 < (int)v37 - (int)v100)
          {
            v102 = *(_QWORD *)(a1 + 48);
            v103 = *(_QWORD *)(a1 + 64);
            v104 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
            v105 = 64 - *(_DWORD *)(a1 + 200);
            do
            {
              v106 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v100 + v101)) >> v105);
              v107 = *(_DWORD *)(v102 + v106);
              v108 = (_DWORD *)(v103 + 8 * (v101 & v104));
              *(_DWORD *)(v102 + v106) = v101;
              *v108 = v107;
              v108[1] = 1;
              ++v101;
            }
            while ((_DWORD)v37 - (_DWORD)v100 != v101);
          }
          v99 = 5;
          goto LABEL_127;
        }
        v110 = *(_QWORD *)(a1 + 8);
        v111 = *(unsigned int *)(a1 + 36);
        if (v110 + v111 > (unint64_t)v37)
          break;
        v109 = (_DWORD)v37 - v110;
        if (v111 < (int)v37 - (int)v110)
        {
          v112 = *(_QWORD *)(a1 + 48);
          v113 = *(_QWORD *)(a1 + 64);
          v114 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
          v115 = 32 - *(_DWORD *)(a1 + 200);
          do
          {
            v116 = 4 * ((-1640531535 * *(_DWORD *)(v110 + v111)) >> v115);
            v117 = *(_DWORD *)(v112 + v116);
            v118 = (_DWORD *)(v113 + 8 * (v111 & v114));
            *(_DWORD *)(v112 + v116) = v111;
            *v118 = v117;
            v118[1] = 1;
            ++v111;
          }
          while ((_DWORD)v37 - (_DWORD)v110 != v111);
        }
        v99 = 4;
LABEL_133:
        *(_DWORD *)(a1 + 36) = v109;
        BestMatch = ZSTD_DUBT_findBestMatch(a1, (uint64_t *)((char *)v12 + 2), v6, &v186, v99, 0);
        v24 = v184;
        v6 = v185;
        v38 = -(uint64_t)v18;
        if (BestMatch < 4)
          break;
        v36 = v186;
        if ((int)((__clz(v186 + 1) ^ 0xFFFFFFE0) + 4 * BestMatch + 1) <= (int)((__clz(v34 + 1) ^ 0xFFFFFFE0)
                                                                              + 4 * v32
                                                                              + 8))
          break;
LABEL_135:
        v12 = v37;
        v33 = v37;
        v34 = v36;
        v32 = BestMatch;
        if ((unint64_t)v37 >= v24)
          goto LABEL_136;
      }
      BestMatch = v32;
      v36 = v34;
      v37 = v183;
      v17 = v182;
      if (v34)
        goto LABEL_137;
LABEL_145:
      v23 = v180;
      v22 = v181;
      v121 = v179;
      v124 = (char *)v37 - (char *)v5;
      v125 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v37 <= v179)
        goto LABEL_146;
LABEL_159:
      if ((unint64_t)v5 <= v121)
      {
        v138 = (char *)v125 + v121 - (_QWORD)v5;
        v139 = v5;
        v140 = v125;
        do
        {
          v141 = *(_OWORD *)v139;
          v139 += 2;
          *v140++ = v141;
        }
        while (v140 < (_OWORD *)v138);
        v137 = (_OWORD *)v121;
        if (v121 < (unint64_t)v37)
          goto LABEL_165;
      }
      else
      {
        v137 = v5;
        v138 = v125;
        if (v5 >= v37)
          goto LABEL_186;
LABEL_165:
        if ((unint64_t)v5 <= v121)
          v142 = (char *)v121;
        else
          v142 = (char *)v5;
        v143 = (char *)v37 - v142;
        if ((unint64_t)((char *)v37 - v142) < 8)
        {
          v144 = (uint64_t *)v137;
          goto LABEL_185;
        }
        if ((unint64_t)((char *)v125 - (char *)v5) < 0x20)
        {
          v144 = (uint64_t *)v137;
          goto LABEL_185;
        }
        if (v143 >= 0x20)
        {
          v145 = v143 & 0xFFFFFFFFFFFFFFE0;
          v146 = v137 + 1;
          v147 = (_OWORD *)((char *)v125 + v142 - (char *)v5 + 16);
          v148 = v143 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v149 = *v146;
            *(v147 - 1) = *(v146 - 1);
            *v147 = v149;
            v146 += 2;
            v147 += 2;
            v148 -= 32;
          }
          while (v148);
          if (v143 != v145)
          {
            if ((v143 & 0x18) == 0)
            {
              v144 = (uint64_t *)((char *)v137 + v145);
              v138 += v145;
              goto LABEL_185;
            }
            goto LABEL_180;
          }
        }
        else
        {
          v145 = 0;
LABEL_180:
          v138 += v143 & 0xFFFFFFFFFFFFFFF8;
          v144 = (uint64_t *)((char *)v137 + (v143 & 0xFFFFFFFFFFFFFFF8));
          v150 = (uint64_t *)((char *)v137 + v145);
          v151 = (_QWORD *)((char *)v125 + &v142[v145] - (char *)v5);
          v152 = v145 - (v143 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v153 = *v150++;
            *v151++ = v153;
            v152 += 8;
          }
          while (v152);
          if (v143 != (v143 & 0xFFFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_185:
              v154 = *(_BYTE *)v144;
              v144 = (uint64_t *)((char *)v144 + 1);
              *v138++ = v154;
            }
            while (v144 < v37);
          }
        }
      }
LABEL_186:
      *(_QWORD *)(a2 + 24) += v124;
      v131 = *(_QWORD *)(a2 + 8);
      if (v124 < 0x10000)
      {
        v132 = BestMatch - 3;
        *(_WORD *)(v131 + 4) = v124;
        *(_DWORD *)v131 = v36 + 1;
        if (BestMatch - 3 >= 0x10000)
          goto LABEL_191;
LABEL_188:
        *(_WORD *)(v131 + 6) = v132;
        v156 = v131 + 8;
        *(_QWORD *)(a2 + 8) = v131 + 8;
        v5 = (uint64_t *)((char *)v37 + BestMatch);
        if ((_DWORD)v17)
          goto LABEL_192;
LABEL_226:
        v12 = v5;
        goto LABEL_18;
      }
      v155 = (unint64_t)(v131 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v155;
      v132 = BestMatch - 3;
      *(_WORD *)(v131 + 4) = v124;
      *(_DWORD *)v131 = v36 + 1;
      if (BestMatch - 3 < 0x10000)
        goto LABEL_188;
LABEL_191:
      v157 = (unint64_t)(v131 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v157;
      *(_WORD *)(v131 + 6) = v132;
      v156 = v131 + 8;
      *(_QWORD *)(a2 + 8) = v131 + 8;
      v5 = (uint64_t *)((char *)v37 + BestMatch);
      if (!(_DWORD)v17)
        goto LABEL_226;
LABEL_192:
      if ((unint64_t)v5 > v24)
        goto LABEL_226;
      v158 = v18;
      v159 = v17;
      while (2)
      {
        v18 = v159;
        v159 = v158;
        if (*(_DWORD *)v5 != *(_DWORD *)((char *)v5 - v18))
        {
          LODWORD(v17) = v18;
          v18 = v158;
          goto LABEL_226;
        }
        v160 = (char *)v5 + 4;
        v161 = (_DWORD *)((char *)v5 - v18 + 4);
        if (v21 <= (unint64_t)v5 + 4)
        {
          v164 = (_DWORD *)v5 + 1;
          if ((unint64_t)v160 < v22)
          {
LABEL_200:
            if (*v161 == *v164)
            {
              ++v164;
              ++v161;
            }
          }
          goto LABEL_202;
        }
        v162 = *(_QWORD *)v160 ^ *(_QWORD *)v161;
        if (!v162)
        {
          v167 = (char *)v5 + 12;
          while (1)
          {
            v168 = &v167[v162];
            if ((unint64_t)&v167[v162] >= v21)
              break;
            v169 = *(uint64_t *)((char *)v5 + v162 - v18 + 12);
            v162 += 8;
            v170 = *(_QWORD *)v168 ^ v169;
            if (v170)
            {
              v163 = v162 + (__clz(__rbit64(v170)) >> 3);
              if ((unint64_t)v5 <= v121)
                goto LABEL_211;
              goto LABEL_212;
            }
          }
          v164 = (_DWORD *)((char *)v5 + v162 + 12);
          v161 = (_DWORD *)((char *)v164 - v18);
          if ((unint64_t)v164 < v22)
            goto LABEL_200;
LABEL_202:
          if ((unint64_t)v164 >= v23)
          {
            if ((unint64_t)v164 >= v6)
              goto LABEL_210;
          }
          else
          {
            if (*(unsigned __int16 *)v161 == *(unsigned __int16 *)v164)
            {
              v164 = (_DWORD *)((char *)v164 + 2);
              v161 = (_DWORD *)((char *)v161 + 2);
            }
            if ((unint64_t)v164 >= v6)
            {
LABEL_210:
              v163 = (char *)v164 - v160;
              if ((unint64_t)v5 > v121)
                goto LABEL_212;
LABEL_211:
              *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
              v156 = *(_QWORD *)(a2 + 8);
              goto LABEL_212;
            }
          }
          if (*(unsigned __int8 *)v161 == *(unsigned __int8 *)v164)
            v164 = (_DWORD *)((char *)v164 + 1);
          goto LABEL_210;
        }
        v163 = __clz(__rbit64(v162)) >> 3;
        if ((unint64_t)v5 <= v121)
          goto LABEL_211;
LABEL_212:
        v165 = v163 + 1;
        *(_WORD *)(v156 + 4) = 0;
        *(_DWORD *)v156 = 1;
        if (v163 + 1 >= 0x10000)
        {
          v166 = (unint64_t)(v156 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v166;
          *(_WORD *)(v156 + 6) = v165;
          v156 += 8;
          *(_QWORD *)(a2 + 8) = v156;
          v5 = (uint64_t *)((char *)v5 + v163 + 4);
          if (!(_DWORD)v159)
            break;
          goto LABEL_216;
        }
        *(_WORD *)(v156 + 6) = v165;
        v156 += 8;
        *(_QWORD *)(a2 + 8) = v156;
        v5 = (uint64_t *)((char *)v5 + v163 + 4);
        if ((_DWORD)v159)
        {
LABEL_216:
          v158 = v18;
          LODWORD(v17) = v159;
          v12 = v5;
          if ((unint64_t)v5 > v24)
            goto LABEL_18;
          continue;
        }
        break;
      }
      LODWORD(v17) = v159;
      v12 = v5;
LABEL_18:
      if ((unint64_t)v12 >= v24)
      {
        a3 = v177;
        v11 = v175;
        v10 = v176;
        v16 = v174;
        goto LABEL_229;
      }
    }
    v30 = (_DWORD *)((char *)v12 + 5);
    if ((unint64_t)v26 >= v22)
      goto LABEL_27;
    goto LABEL_25;
  }
LABEL_229:
  if (v11 <= v16)
    v171 = 0;
  else
    v171 = v11;
  if (v10 > v16)
    v171 = v10;
  if ((_DWORD)v18)
    v172 = v18;
  else
    v172 = v171;
  if ((_DWORD)v17)
    v171 = v17;
  *a3 = v172;
  a3[1] = v171;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_btopt(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  char **v6;
  unint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  __int128 *v12;
  __int128 v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  char **v24;
  int v25;
  unsigned int i;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  char *v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  _QWORD *v47;
  int v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unsigned int v55;
  unint64_t v56;
  char *v57;
  int v58;
  _DWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  char *v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  int v81;
  unint64_t v82;
  _QWORD *v83;
  int v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  unsigned __int8 *v91;
  unsigned int v92;
  unint64_t v93;
  char *v94;
  int v95;
  _DWORD *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  int v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  _QWORD *v111;
  unint64_t v112;
  unsigned __int8 *v113;
  unint64_t v114;
  _QWORD *v115;
  unsigned __int8 *v116;
  _DWORD *v117;
  BOOL v118;
  unsigned int *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  unsigned int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  char *v135;
  unint64_t v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  int v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v146;
  char *v147;
  unint64_t v148;
  unsigned __int8 *v149;
  unsigned int v150;
  unint64_t v151;
  char *v152;
  int v153;
  _DWORD *v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unsigned int v158;
  uint64_t v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  char *v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int *v175;
  int v176;
  unint64_t v177;
  _QWORD *v178;
  int v179;
  unint64_t v180;
  unsigned int v181;
  uint64_t v183;
  char *v184;
  unint64_t v185;
  unsigned __int8 *v186;
  unsigned int v187;
  unint64_t v188;
  char *v189;
  int v190;
  _DWORD *v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  BOOL v200;
  char **v201;
  int v202;
  unsigned __int8 *v203;
  uint64_t v204;
  unsigned int v205;
  int v206;
  unsigned int v207;
  uint64_t v208;
  unsigned int v209;
  char **v210;
  unsigned int v211;
  unsigned int v212;
  _DWORD *v213;
  int v214;
  unsigned int v215;
  unsigned int v216;
  _DWORD *v217;
  unint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int *v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  BOOL v232;
  unsigned int v233;
  int v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int *v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int *v244;
  unsigned int *v245;
  unsigned int *v246;
  unint64_t v247;
  unsigned __int8 *v248;
  int v249;
  unsigned int v250;
  unint64_t v251;
  unsigned int v252;
  unsigned int *v253;
  unsigned int v254;
  uint64_t v255;
  unsigned __int8 *v256;
  unsigned int v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  int v265;
  uint64_t v266;
  signed int v267;
  signed int *v268;
  _DWORD *v269;
  signed int v270;
  signed int v271;
  unsigned int *v272;
  unsigned int v273;
  unsigned int *v274;
  unint64_t v275;
  unsigned int v276;
  unsigned int v277;
  signed int *v278;
  int v279;
  unsigned int *v280;
  unsigned int *v281;
  int v282;
  unint64_t v283;
  uint64_t v284;
  unsigned int v285;
  unint64_t v286;
  unsigned int *v287;
  unsigned int v288;
  uint64_t v289;
  uint64_t v290;
  unsigned int v291;
  int v292;
  unsigned int j;
  unsigned int *v294;
  unsigned int v295;
  uint64_t v296;
  unsigned int v297;
  char *v298;
  unsigned int v299;
  uint64_t v300;
  int v301;
  int v302;
  unsigned int v303;
  int v304;
  unsigned int v305;
  unsigned int v307;
  unsigned int v308;
  unsigned int *v309;
  unsigned int *v310;
  unsigned int v311;
  unint64_t v312;
  unsigned int v313;
  uint64_t v314;
  unint64_t v315;
  unsigned int v316;
  char *v318;
  _QWORD *v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unsigned int v323;
  unint64_t v324;
  _DWORD *v325;
  unsigned int v326;
  uint64_t v327;
  int v328;
  char *v329;
  unsigned int v330;
  int v331;
  int v332;
  unsigned int v333;
  int v334;
  unsigned int v335;
  unsigned int v337;
  unsigned int v338;
  uint64_t v339;
  unsigned int *v340;
  unsigned int *v341;
  int v342;
  unint64_t v343;
  unsigned int v344;
  uint64_t v345;
  unint64_t v346;
  unsigned int v347;
  char *v349;
  _QWORD *v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unsigned int v354;
  unint64_t v355;
  _DWORD *v356;
  unint64_t v357;
  unint64_t v358;
  int v359;
  int v360;
  unint64_t v361;
  uint64_t v362;
  unsigned __int8 *v363;
  _QWORD *v364;
  unint64_t v365;
  unint64_t v366;
  unsigned __int8 *v367;
  uint64_t v368;
  _QWORD *v369;
  char *v370;
  _DWORD *v371;
  BOOL v372;
  unsigned int *v373;
  uint64_t v374;
  char *v375;
  char *v376;
  uint64_t v377;
  unint64_t v378;
  unsigned int v379;
  uint64_t v380;
  int v381;
  char *v382;
  unsigned int v383;
  int v384;
  int v385;
  unsigned int v386;
  int v387;
  unsigned int v388;
  unsigned int v390;
  unsigned int v391;
  uint64_t v392;
  unint64_t v393;
  unsigned int v394;
  uint64_t v395;
  unint64_t v396;
  unsigned int v397;
  char *v399;
  _QWORD *v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  unsigned int v404;
  unint64_t v405;
  _DWORD *v406;
  unsigned int v407;
  uint64_t v408;
  int v409;
  char *v410;
  unsigned int v411;
  int v412;
  int v413;
  unsigned int v414;
  int v415;
  unsigned int v416;
  unsigned int v418;
  unsigned int v419;
  uint64_t v420;
  unint64_t v421;
  unsigned int v422;
  uint64_t v423;
  unint64_t v424;
  unsigned int v425;
  char *v427;
  _QWORD *v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  unsigned int v432;
  unint64_t v433;
  _DWORD *v434;
  uint64_t v435;
  int v436;
  int v437;
  uint64_t v438;
  uint64_t v439;
  BOOL v440;
  unint64_t v441;
  unint64_t v442;
  int v443;
  int v444;
  unint64_t v445;
  uint64_t v446;
  unsigned __int8 *v447;
  _QWORD *v448;
  unint64_t v449;
  unint64_t v450;
  unsigned __int8 *v451;
  _QWORD *v452;
  char *v453;
  _DWORD *v454;
  BOOL v455;
  unsigned int *v456;
  uint64_t v457;
  char *v458;
  char *v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unsigned int v465;
  signed int v466;
  signed int *v467;
  unsigned int v468;
  unsigned int v469;
  signed int v470;
  uint64_t v471;
  int v472;
  int v473;
  int v474;
  unsigned int v475;
  signed int *v476;
  unint64_t v477;
  signed int v478;
  uint64_t v479;
  unint64_t v480;
  unint64_t v481;
  _DWORD *v482;
  _DWORD *v483;
  int v484;
  int v485;
  int v486;
  uint64_t v487;
  uint64_t v488;
  int v489;
  int v490;
  unsigned int v491;
  signed int *v492;
  unsigned int v493;
  unsigned int v494;
  unint64_t v495;
  signed int v496;
  uint64_t v497;
  unint64_t v498;
  unint64_t v499;
  _DWORD *v500;
  _DWORD *v501;
  unint64_t v502;
  unint64_t v503;
  int v504;
  int v505;
  unint64_t v506;
  uint64_t v507;
  unsigned __int8 *v508;
  _QWORD *v509;
  unint64_t v510;
  unint64_t v511;
  unsigned __int8 *v512;
  _QWORD *v513;
  char *v514;
  _DWORD *v515;
  BOOL v516;
  unsigned int *v517;
  uint64_t v518;
  char *v519;
  char *v520;
  uint64_t v521;
  unint64_t v522;
  unint64_t v523;
  unint64_t v524;
  int v525;
  unsigned int v526;
  unint64_t v527;
  uint64_t v528;
  unsigned __int8 *v529;
  _DWORD *v530;
  unint64_t v531;
  _DWORD *v532;
  unint64_t v533;
  _QWORD *v534;
  char *v535;
  _DWORD *v536;
  BOOL v537;
  unsigned int *v538;
  uint64_t v539;
  char *v540;
  char *v541;
  uint64_t v542;
  unint64_t v543;
  _DWORD *v544;
  unint64_t v545;
  unint64_t v546;
  unsigned __int8 *v547;
  uint64_t v549;
  char *v550;
  char *v551;
  uint64_t v552;
  unint64_t v553;
  unsigned int *v554;
  unsigned int *v555;
  unsigned int *v556;
  unint64_t v557;
  unsigned int v558;
  unsigned int v559;
  unsigned int v560;
  unint64_t v561;
  uint64_t v562;
  unsigned int v563;
  unsigned int v564;
  unsigned int *v565;
  unsigned int v566;
  unsigned int *v567;
  unsigned int v568;
  unsigned int *v569;
  __int128 v570;
  BOOL v571;
  unsigned int v572;
  uint64_t v573;
  unsigned int v574;
  uint64_t v575;
  unsigned int v576;
  unsigned int v577;
  char *v578;
  unsigned __int8 *v579;
  uint64_t v580;
  unsigned int v581;
  unsigned int v582;
  unsigned int v583;
  unsigned int v584;
  unsigned int v585;
  unsigned int v586;
  unsigned __int8 *v587;
  char *v588;
  unsigned __int8 *v589;
  char *v590;
  uint64_t v591;
  _OWORD *v592;
  unint64_t v593;
  __int128 *v594;
  __int128 v595;
  unsigned __int8 *v596;
  char *v597;
  __int128 v598;
  unsigned __int8 *v599;
  unint64_t v600;
  unsigned __int8 *v601;
  uint64_t v602;
  unint64_t v603;
  __int128 *v604;
  char *v605;
  unint64_t v606;
  __int128 v607;
  unsigned __int8 *v608;
  char *v609;
  unint64_t v610;
  uint64_t v611;
  char v612;
  unint64_t v613;
  unint64_t v614;
  unsigned int v615;
  unint64_t v616;
  unint64_t v617;
  int v618;
  int v619;
  _QWORD *v620;
  uint64_t v621;
  unsigned int v622;
  unint64_t v623;
  uint64_t v624;
  unsigned __int8 *v625;
  _QWORD *v626;
  unint64_t v627;
  unsigned __int8 *v628;
  unint64_t v629;
  _QWORD *v630;
  unsigned __int8 *v631;
  _DWORD *v632;
  BOOL v633;
  unsigned int *v634;
  char *v635;
  char *v636;
  uint64_t v637;
  unint64_t v638;
  unint64_t v639;
  unint64_t v640;
  int v641;
  int v642;
  _QWORD *v643;
  uint64_t v644;
  unsigned int v645;
  unint64_t v646;
  uint64_t v647;
  unsigned __int8 *v648;
  _QWORD *v649;
  unint64_t v650;
  unsigned __int8 *v651;
  unint64_t v652;
  _QWORD *v653;
  unsigned __int8 *v654;
  _DWORD *v655;
  BOOL v656;
  unsigned int *v657;
  char *v658;
  char *v659;
  uint64_t v660;
  unint64_t v661;
  unint64_t v662;
  unint64_t v663;
  int v664;
  unsigned int v665;
  uint64_t v666;
  unint64_t v667;
  uint64_t v668;
  char *v669;
  _DWORD *v670;
  unint64_t v671;
  unsigned __int8 *v672;
  unint64_t v673;
  _QWORD *v674;
  unsigned __int8 *v675;
  int64_t v676;
  _DWORD *v677;
  BOOL v678;
  unsigned int *v679;
  char *v680;
  char *v681;
  uint64_t v682;
  unint64_t v683;
  unint64_t v684;
  unsigned int v685;
  _DWORD *v686;
  unint64_t v687;
  unint64_t v688;
  unsigned __int8 *v689;
  unsigned int v691;
  unsigned int *v692;
  uint64_t v693;
  _QWORD *v694;
  _QWORD *v695;
  uint64_t v696;
  unint64_t v697;
  uint64_t v699;
  unsigned int *v700;
  unsigned int v701;
  int v702;
  int v703;
  int v704;
  int v705;
  uint64_t v706;
  unint64_t v707;
  unint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  _QWORD *v718;
  unsigned int v720;
  char *v721;
  char *v722;
  char *v723;
  char *v724;
  _DWORD *v725;
  unsigned int v726;
  unsigned int v727;
  unsigned int v728;
  unsigned int v729;
  unsigned int v730;
  unsigned int v731;
  uint64_t v732;
  unint64_t v733;
  char **v734;
  unsigned int v735;
  signed int v736;
  int v737;
  int v738;
  int v739;
  int v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  int v745;
  _QWORD *v746;
  unsigned __int8 *v747;
  unint64_t v748;
  unint64_t v750;
  unint64_t v751;
  unsigned __int8 *v752;
  unsigned int v754;
  unsigned int v755;
  unsigned int v756;
  unsigned int v757;
  unsigned __int8 *v758;
  unsigned __int8 *v759;
  unint64_t v760;
  _DWORD *v761;
  unint64_t v762;
  _DWORD *v763;
  unsigned int v764;
  unsigned int v765;
  unsigned int v766;
  __int128 v767;
  __int128 v768;
  _BYTE v769[24];
  int v770;
  uint64_t v771;
  unsigned int v772;
  uint64_t v773;

  v773 = *MEMORY[0x1E0C80C00];
  v6 = (char **)(a1 + 80);
  v7 = (unint64_t)&a4[a5];
  v747 = a4;
  v748 = (unint64_t)&a4[a5 - 8];
  v8 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 212) >= 0xFFFu)
    v9 = 4095;
  else
    v9 = *(_DWORD *)(a1 + 212);
  v731 = v9;
  if (*(_DWORD *)(a1 + 208) == 3)
    v10 = 3;
  else
    v10 = 4;
  v732 = v10;
  v701 = *(_DWORD *)(a1 + 36);
  v11 = *(unsigned int **)(a1 + 120);
  v761 = *(_DWORD **)(a1 + 112);
  v772 = 0;
  v771 = 0;
  v768 = 0u;
  memset(v769, 0, sizeof(v769));
  v767 = 0u;
  v12 = *(__int128 **)(a1 + 224);
  if (v12)
  {
    v13 = v12[1];
    v767 = *v12;
    v768 = v13;
    *(_QWORD *)v769 = *((_QWORD *)v12 + 4);
  }
  else
  {
    *(_QWORD *)v769 = 0;
    v767 = 0uLL;
    v768 = 0uLL;
  }
  *(_QWORD *)&v769[12] = 0;
  *(_DWORD *)&v769[8] = 0;
  ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t *)&v767, 0, a5);
  ZSTD_rescaleFreqs(v6, v747, a5, 0);
  if (v8 == v747)
    v14 = v747 + 1;
  else
    v14 = v747;
  if ((unint64_t)v14 < v748)
  {
    v726 = 0;
    v762 = v7 - 7;
    v750 = v7 - 1;
    v751 = v7 - 3;
    v15 = (v732 - 1) | 1;
    v763 = v11 + 14;
    v699 = v732 - v15;
    v700 = &v11[7 * v15];
    v16 = v11 + 7;
    v17 = v747;
    v760 = v7;
    v18 = a1;
    v733 = v7 - 32;
    v734 = v6;
    while (1)
    {
      v752 = v17;
      v764 = (_DWORD)v14 - (_DWORD)v17;
      v766 = 0;
      v20 = *(_QWORD *)(v18 + 8);
      v21 = *(unsigned int *)(v18 + 36);
      v759 = v14;
      if (v20 + v21 > (unint64_t)v14)
      {
        v22 = 0;
        v23 = v733;
        v24 = v734;
        v17 = v752;
        goto LABEL_307;
      }
      v25 = *(_DWORD *)(v18 + 208);
      for (i = (_DWORD)v14 - v20;
            v21 < i;
      *(_DWORD *)(v18 + 36) = i;
      if ((v25 - 6) < 2)
      {
        v22 = 0;
        if (*(_DWORD *)(v18 + 212) >= 0xFFFu)
          v63 = 4095;
        else
          v63 = *(_DWORD *)(v18 + 212);
        v64 = *(_QWORD *)(v18 + 8);
        v65 = (_DWORD)v759 - v64;
        v66 = -1 << (*(_DWORD *)(v18 + 196) - 1);
        v67 = ~v66;
        v68 = (_DWORD)v759 - v64 + v66 + 1;
        if ((int)v759 - (int)v64 < ~v66)
          v68 = 0;
        v755 = v68;
        v69 = 1 << *(_DWORD *)(v18 + 192);
        if (v65 - *(_DWORD *)(v18 + 28) > v69 && *(_DWORD *)(v18 + 32) == 0)
          v71 = v65 - v69;
        else
          v71 = *(_DWORD *)(v18 + 28);
        if (v71 <= 1)
          v72 = 1;
        else
          v72 = v71;
        v73 = v65 - *(_DWORD *)(v18 + 24);
        v74 = (char *)(v759 + 12);
        v738 = *(_DWORD *)(v18 + 204);
        v75 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v759) >> -*(_BYTE *)(v18 + 200);
        v742 = *(_QWORD *)(v18 + 48);
        v76 = *(_DWORD *)(v742 + 4 * v75);
        v77 = v764 == 0;
        v78 = *(_QWORD *)(v18 + 64);
        v79 = (unsigned int *)(v78 + 8 * (v65 & ~v66));
        v80 = v79 + 1;
        v81 = v65 + 9;
        v770 = 0;
        if (v764)
          v82 = 3;
        else
          v82 = 4;
        v83 = v759 + 4;
        if (v764)
          v84 = 0;
        else
          v84 = -1;
        v85 = (v732 - 1);
        while (1)
        {
          if (v77 == 3)
          {
            v86 = *a3 - 1;
            if (*a3 - 2 >= v73)
              goto LABEL_100;
          }
          else
          {
            v86 = a3[v77];
            if (v86 - 1 >= v73)
              goto LABEL_100;
          }
          if (v65 - v86 >= v71 && *(_DWORD *)v759 == *(_DWORD *)&v759[-v86])
            break;
LABEL_100:
          if (++v77 >= v82)
          {
            *(_DWORD *)(v742 + 4 * v75) = v65;
            if (v76 < v72)
            {
LABEL_300:
              v106 = a1;
              goto LABEL_301;
            }
            v100 = 0;
            v101 = 0;
            v102 = ~(-1 << v738);
            v103 = v65 + 2;
            v104 = v759 + 8;
            v105 = v64 + 8;
            v106 = a1;
            v107 = v755;
            while (1)
            {
              v108 = v101 >= v100 ? v100 : v101;
              v109 = v64 + v76;
              v110 = &v759[v108];
              v111 = (_QWORD *)(v109 + v108);
              if (v762 <= (unint64_t)&v759[v108])
                break;
              v112 = *(_QWORD *)v110 ^ *v111;
              if (v112)
              {
                v113 = (unsigned __int8 *)v760;
                v114 = (__clz(__rbit64(v112)) >> 3) + v108;
                if (v114 <= v85)
                  goto LABEL_144;
                goto LABEL_157;
              }
              v120 = (char *)v104 + v108;
              do
              {
                v121 = &v120[v112];
                if ((unint64_t)&v120[v112] >= v762)
                {
                  v116 = (unsigned __int8 *)v104 + v108 + v112;
                  v111 = (_QWORD *)(v105 + v108 + v76 + v112);
                  v107 = v755;
                  v113 = (unsigned __int8 *)v760;
                  if ((unint64_t)v116 >= v751)
                    goto LABEL_148;
                  goto LABEL_146;
                }
                v122 = *(_QWORD *)(v105 + v108 + v76 + v112);
                v112 += 8;
                v123 = *(_QWORD *)v121 ^ v122;
              }
              while (!v123);
              v113 = (unsigned __int8 *)v760;
              v106 = a1;
              v107 = v755;
              v114 = v112 + (__clz(__rbit64(v123)) >> 3) + v108;
              if (v114 <= v85)
              {
LABEL_144:
                v115 = v759;
                goto LABEL_163;
              }
LABEL_157:
              if (v114 > v81 - v76)
                v81 = v76 + v114;
              v117 = &v761[2 * v22];
              *v117 = v103 - v76;
              v117[1] = v114;
              ++v22;
              v115 = v759;
              v118 = v114 > 0x1000 || &v759[v114] == v113;
              v85 = v114;
              if (v118)
                goto LABEL_301;
LABEL_163:
              v119 = (unsigned int *)(v78 + 8 * (v76 & v67));
              if (*(unsigned __int8 *)(v109 + v114) >= *((unsigned __int8 *)v115 + v114))
              {
                *v80 = v76;
                if (v76 <= v107)
                  goto LABEL_1082;
                v100 = v114;
                v80 = (unsigned int *)(v78 + 8 * (v76 & v67));
                v232 = v102-- != 0;
                if (!v232)
                {
LABEL_301:
                  *v80 = 0;
                  *v79 = 0;
                  v202 = v81 - 8;
                  goto LABEL_305;
                }
              }
              else
              {
                *v79 = v76;
                if (v76 <= v107)
                {
LABEL_1081:
                  v79 = (unsigned int *)&v770;
                  goto LABEL_301;
                }
                ++v119;
                v101 = v114;
                v79 = v119;
                v232 = v102-- != 0;
                if (!v232)
                  goto LABEL_301;
              }
              v76 = *v119;
              if (*v119 < v72)
                goto LABEL_301;
            }
            v116 = &v759[v108];
            v113 = (unsigned __int8 *)v760;
            if ((unint64_t)v110 >= v751)
              goto LABEL_148;
LABEL_146:
            if (*(_DWORD *)v111 == *(_DWORD *)v116)
            {
              v116 += 4;
              v111 = (_QWORD *)((char *)v111 + 4);
            }
LABEL_148:
            if ((unint64_t)v116 >= v750)
            {
              if (v116 >= v113)
                goto LABEL_156;
            }
            else
            {
              if (*(unsigned __int16 *)v111 == *(unsigned __int16 *)v116)
              {
                v116 += 2;
                v111 = (_QWORD *)((char *)v111 + 2);
              }
              if (v116 >= v113)
              {
LABEL_156:
                v106 = a1;
                v114 = v116 - v759;
                if (v116 - v759 <= v85)
                  goto LABEL_144;
                goto LABEL_157;
              }
            }
            if (*(unsigned __int8 *)v111 == *v116)
              ++v116;
            goto LABEL_156;
          }
        }
        v88 = -(uint64_t)v86;
        v89 = (char *)v83 - v86;
        if (v762 <= (unint64_t)v83)
        {
          v94 = (char *)(v759 + 4);
          if ((unint64_t)v83 >= v751)
            goto LABEL_117;
        }
        else
        {
          v90 = *v83 ^ *(_QWORD *)v89;
          v91 = (unsigned __int8 *)v760;
          if (v90)
          {
            v92 = (__clz(__rbit64(v90)) >> 3) + 4;
            v93 = v92;
            if (v85 < v92)
              goto LABEL_126;
            goto LABEL_100;
          }
          while (1)
          {
            v94 = &v74[v90];
            if ((unint64_t)&v74[v90] >= v762)
              break;
            v97 = *(_QWORD *)&v74[v88 + v90];
            v90 += 8;
            v98 = *(_QWORD *)v94 ^ v97;
            if (v98)
            {
              v99 = __clz(__rbit64(v98));
              v91 = (unsigned __int8 *)v760;
              v92 = v90 + (v99 >> 3) + 4;
              v93 = v92;
              if (v85 < v92)
              {
LABEL_126:
                v96 = &v761[2 * v22];
                *v96 = v77 + v84;
                v96[1] = v92;
                ++v22;
                if (v92 > v63)
                  goto LABEL_306;
                v85 = v93;
                if (&v759[v93] == v91)
                  goto LABEL_306;
              }
              goto LABEL_100;
            }
          }
          v89 = &v94[v88];
          if ((unint64_t)v94 >= v751)
          {
LABEL_117:
            if ((unint64_t)v94 >= v750)
            {
              if ((unint64_t)v94 >= v760)
                goto LABEL_125;
            }
            else
            {
              if (*(unsigned __int16 *)v89 == *(unsigned __int16 *)v94)
              {
                v94 += 2;
                v89 += 2;
              }
              if ((unint64_t)v94 >= v760)
              {
LABEL_125:
                v95 = (_DWORD)v94 - (_DWORD)v83;
                v91 = (unsigned __int8 *)v760;
                v92 = v95 + 4;
                v93 = v92;
                if (v85 < v92)
                  goto LABEL_126;
                goto LABEL_100;
              }
            }
            if (*v89 == *v94)
              LODWORD(v94) = (_DWORD)v94 + 1;
            goto LABEL_125;
          }
        }
        if (*(_DWORD *)v89 == *(_DWORD *)v94)
        {
          v94 += 4;
          v89 += 4;
        }
        goto LABEL_117;
      }
      if (v25 == 5)
      {
        v22 = 0;
        if (*(_DWORD *)(a1 + 212) >= 0xFFFu)
          v124 = 4095;
        else
          v124 = *(_DWORD *)(a1 + 212);
        v125 = *(_QWORD *)(a1 + 8);
        v126 = (_DWORD)v759 - v125;
        v127 = -1 << (*(_DWORD *)(a1 + 196) - 1);
        v128 = ~v127;
        v129 = (_DWORD)v759 - v125 + v127 + 1;
        if ((int)v759 - (int)v125 < ~v127)
          v129 = 0;
        v756 = v129;
        v130 = 1 << *(_DWORD *)(a1 + 192);
        if (v126 - *(_DWORD *)(a1 + 28) > v130 && *(_DWORD *)(a1 + 32) == 0)
          v132 = v126 - v130;
        else
          v132 = *(_DWORD *)(a1 + 28);
        if (v132 <= 1)
          v133 = 1;
        else
          v133 = v132;
        v134 = v126 - *(_DWORD *)(a1 + 24);
        v135 = (char *)(v759 + 12);
        v739 = *(_DWORD *)(a1 + 204);
        v136 = (0xCF1BBCDCBB000000 * *(_QWORD *)v759) >> -(char)*(_DWORD *)(a1 + 200);
        v743 = *(_QWORD *)(a1 + 48);
        v137 = *(_DWORD *)(v743 + 4 * v136);
        v138 = v764 == 0;
        v139 = *(_QWORD *)(a1 + 64);
        v79 = (unsigned int *)(v139 + 8 * (v126 & ~v127));
        v80 = v79 + 1;
        v81 = v126 + 9;
        v770 = 0;
        if (v764)
          v140 = 3;
        else
          v140 = 4;
        v141 = v759 + 4;
        if (v764)
          v142 = 0;
        else
          v142 = -1;
        v143 = (v732 - 1);
        while (1)
        {
          if (v138 == 3)
          {
            v144 = *a3 - 1;
            if (*a3 - 2 >= v134)
              goto LABEL_198;
          }
          else
          {
            v144 = a3[v138];
            if (v144 - 1 >= v134)
              goto LABEL_198;
          }
          if (v126 - v144 >= v132 && *(_DWORD *)v759 == *(_DWORD *)&v759[-v144])
            break;
LABEL_198:
          if (++v138 >= v140)
          {
            *(_DWORD *)(v743 + 4 * v136) = v126;
            if (v137 < v133)
              goto LABEL_300;
            v616 = 0;
            v617 = 0;
            v618 = ~(-1 << v739);
            v619 = v126 + 2;
            v620 = v759 + 8;
            v621 = v125 + 8;
            v106 = a1;
            v622 = v756;
            while (1)
            {
              v623 = v617 >= v616 ? v616 : v617;
              v624 = v125 + v137;
              v625 = &v759[v623];
              v626 = (_QWORD *)(v624 + v623);
              if (v762 <= (unint64_t)&v759[v623])
                break;
              v627 = *(_QWORD *)v625 ^ *v626;
              if (v627)
              {
                v628 = (unsigned __int8 *)v760;
                v629 = (__clz(__rbit64(v627)) >> 3) + v623;
                if (v629 <= v143)
                  goto LABEL_965;
                goto LABEL_978;
              }
              v635 = (char *)v620 + v623;
              do
              {
                v636 = &v635[v627];
                if ((unint64_t)&v635[v627] >= v762)
                {
                  v631 = (unsigned __int8 *)v620 + v623 + v627;
                  v626 = (_QWORD *)(v621 + v623 + v137 + v627);
                  v622 = v756;
                  v628 = (unsigned __int8 *)v760;
                  if ((unint64_t)v631 >= v751)
                    goto LABEL_969;
                  goto LABEL_967;
                }
                v637 = *(_QWORD *)(v621 + v623 + v137 + v627);
                v627 += 8;
                v638 = *(_QWORD *)v636 ^ v637;
              }
              while (!v638);
              v628 = (unsigned __int8 *)v760;
              v106 = a1;
              v622 = v756;
              v629 = v627 + (__clz(__rbit64(v638)) >> 3) + v623;
              if (v629 <= v143)
              {
LABEL_965:
                v630 = v759;
                goto LABEL_984;
              }
LABEL_978:
              if (v629 > v81 - v137)
                v81 = v137 + v629;
              v632 = &v761[2 * v22];
              *v632 = v619 - v137;
              v632[1] = v629;
              ++v22;
              v630 = v759;
              v633 = v629 > 0x1000 || &v759[v629] == v628;
              v143 = v629;
              if (v633)
                goto LABEL_301;
LABEL_984:
              v634 = (unsigned int *)(v139 + 8 * (v137 & v128));
              if (*(unsigned __int8 *)(v624 + v629) >= *((unsigned __int8 *)v630 + v629))
              {
                *v80 = v137;
                if (v137 > v622)
                {
                  v616 = v629;
                  v80 = (unsigned int *)(v139 + 8 * (v137 & v128));
                  v232 = v618-- != 0;
                  if (!v232)
                    goto LABEL_301;
                  goto LABEL_958;
                }
LABEL_1082:
                v80 = (unsigned int *)&v770;
                goto LABEL_301;
              }
              *v79 = v137;
              if (v137 <= v622)
                goto LABEL_1081;
              ++v634;
              v617 = v629;
              v79 = v634;
              v232 = v618-- != 0;
              if (!v232)
                goto LABEL_301;
LABEL_958:
              v137 = *v634;
              if (*v634 < v133)
                goto LABEL_301;
            }
            v631 = &v759[v623];
            v628 = (unsigned __int8 *)v760;
            if ((unint64_t)v625 >= v751)
              goto LABEL_969;
LABEL_967:
            if (*(_DWORD *)v626 == *(_DWORD *)v631)
            {
              v631 += 4;
              v626 = (_QWORD *)((char *)v626 + 4);
            }
LABEL_969:
            if ((unint64_t)v631 >= v750)
            {
              if (v631 >= v628)
                goto LABEL_977;
            }
            else
            {
              if (*(unsigned __int16 *)v626 == *(unsigned __int16 *)v631)
              {
                v631 += 2;
                v626 = (_QWORD *)((char *)v626 + 2);
              }
              if (v631 >= v628)
              {
LABEL_977:
                v106 = a1;
                v629 = v631 - v759;
                if (v631 - v759 <= v143)
                  goto LABEL_965;
                goto LABEL_978;
              }
            }
            if (*(unsigned __int8 *)v626 == *v631)
              ++v631;
            goto LABEL_977;
          }
        }
        v146 = -(uint64_t)v144;
        v147 = (char *)v141 - v144;
        if (v762 <= (unint64_t)v141)
        {
          v152 = (char *)(v759 + 4);
          if ((unint64_t)v141 >= v751)
            goto LABEL_215;
        }
        else
        {
          v148 = *v141 ^ *(_QWORD *)v147;
          v149 = (unsigned __int8 *)v760;
          if (v148)
          {
            v150 = (__clz(__rbit64(v148)) >> 3) + 4;
            v151 = v150;
            if (v143 < v150)
              goto LABEL_224;
            goto LABEL_198;
          }
          while (1)
          {
            v152 = &v135[v148];
            if ((unint64_t)&v135[v148] >= v762)
              break;
            v155 = *(_QWORD *)&v135[v146 + v148];
            v148 += 8;
            v156 = *(_QWORD *)v152 ^ v155;
            if (v156)
            {
              v157 = __clz(__rbit64(v156));
              v149 = (unsigned __int8 *)v760;
              v150 = v148 + (v157 >> 3) + 4;
              v151 = v150;
              if (v143 < v150)
              {
LABEL_224:
                v154 = &v761[2 * v22];
                *v154 = v138 + v142;
                v154[1] = v150;
                ++v22;
                if (v150 > v124)
                  goto LABEL_306;
                v143 = v151;
                if (&v759[v151] == v149)
                  goto LABEL_306;
              }
              goto LABEL_198;
            }
          }
          v147 = &v152[v146];
          if ((unint64_t)v152 >= v751)
          {
LABEL_215:
            if ((unint64_t)v152 >= v750)
            {
              if ((unint64_t)v152 >= v760)
                goto LABEL_223;
            }
            else
            {
              if (*(unsigned __int16 *)v147 == *(unsigned __int16 *)v152)
              {
                v152 += 2;
                v147 += 2;
              }
              if ((unint64_t)v152 >= v760)
              {
LABEL_223:
                v153 = (_DWORD)v152 - (_DWORD)v141;
                v149 = (unsigned __int8 *)v760;
                v150 = v153 + 4;
                v151 = v150;
                if (v143 < v150)
                  goto LABEL_224;
                goto LABEL_198;
              }
            }
            if (*v147 == *v152)
              LODWORD(v152) = (_DWORD)v152 + 1;
            goto LABEL_223;
          }
        }
        if (*(_DWORD *)v147 == *(_DWORD *)v152)
        {
          v152 += 4;
          v147 += 4;
        }
        goto LABEL_215;
      }
      v22 = 0;
      if (v25 != 3)
      {
        if (*(_DWORD *)(a1 + 212) >= 0xFFFu)
          v158 = 4095;
        else
          v158 = *(_DWORD *)(a1 + 212);
        v159 = *(_QWORD *)(a1 + 8);
        v160 = (_DWORD)v759 - v159;
        v161 = -1 << (*(_DWORD *)(a1 + 196) - 1);
        v162 = ~v161;
        v163 = (_DWORD)v759 - v159 + v161 + 1;
        if ((int)v759 - (int)v159 < ~v161)
          v163 = 0;
        v757 = v163;
        v164 = 1 << *(_DWORD *)(a1 + 192);
        if (v160 - *(_DWORD *)(a1 + 28) > v164 && *(_DWORD *)(a1 + 32) == 0)
          v166 = v160 - v164;
        else
          v166 = *(_DWORD *)(a1 + 28);
        if (v166 <= 1)
          v167 = 1;
        else
          v167 = v166;
        v168 = v160 - *(_DWORD *)(a1 + 24);
        v169 = (char *)(v759 + 12);
        v740 = *(_DWORD *)(a1 + 204);
        v170 = (-1640531535 * *(_DWORD *)v759) >> -(char)*(_DWORD *)(a1 + 200);
        v744 = *(_QWORD *)(a1 + 48);
        v171 = *(_DWORD *)(v744 + 4 * v170);
        v172 = v764 == 0;
        v173 = *(_QWORD *)(a1 + 64);
        v174 = (unsigned int *)(v173 + 8 * (v160 & ~v161));
        v175 = v174 + 1;
        v176 = v160 + 9;
        v770 = 0;
        if (v764)
          v177 = 3;
        else
          v177 = 4;
        v178 = v759 + 4;
        if (v764)
          v179 = 0;
        else
          v179 = -1;
        v180 = (v732 - 1);
        while (1)
        {
          if (v172 == 3)
          {
            v181 = *a3 - 1;
            if (*a3 - 2 >= v168)
              goto LABEL_254;
          }
          else
          {
            v181 = a3[v172];
            if (v181 - 1 >= v168)
              goto LABEL_254;
          }
          if (v160 - v181 >= v166 && *(_DWORD *)v759 == *(_DWORD *)&v759[-v181])
            break;
LABEL_254:
          if (++v172 >= v177)
          {
            *(_DWORD *)(v744 + 4 * v170) = v160;
            if (v171 < v167)
            {
              v106 = a1;
              goto LABEL_304;
            }
            v639 = 0;
            v640 = 0;
            v641 = ~(-1 << v740);
            v642 = v160 + 2;
            v643 = v759 + 8;
            v644 = v159 + 8;
            v106 = a1;
            v645 = v757;
            while (1)
            {
              v646 = v640 >= v639 ? v639 : v640;
              v647 = v159 + v171;
              v648 = &v759[v646];
              v649 = (_QWORD *)(v647 + v646);
              if (v762 <= (unint64_t)&v759[v646])
                break;
              v650 = *(_QWORD *)v648 ^ *v649;
              if (v650)
              {
                v651 = (unsigned __int8 *)v760;
                v652 = (__clz(__rbit64(v650)) >> 3) + v646;
                if (v652 <= v180)
                  goto LABEL_1006;
                goto LABEL_1019;
              }
              v658 = (char *)v643 + v646;
              do
              {
                v659 = &v658[v650];
                if ((unint64_t)&v658[v650] >= v762)
                {
                  v654 = (unsigned __int8 *)v643 + v646 + v650;
                  v649 = (_QWORD *)(v644 + v646 + v171 + v650);
                  v645 = v757;
                  v651 = (unsigned __int8 *)v760;
                  if ((unint64_t)v654 >= v751)
                    goto LABEL_1010;
                  goto LABEL_1008;
                }
                v660 = *(_QWORD *)(v644 + v646 + v171 + v650);
                v650 += 8;
                v661 = *(_QWORD *)v659 ^ v660;
              }
              while (!v661);
              v651 = (unsigned __int8 *)v760;
              v106 = a1;
              v645 = v757;
              v652 = v650 + (__clz(__rbit64(v661)) >> 3) + v646;
              if (v652 <= v180)
              {
LABEL_1006:
                v653 = v759;
                goto LABEL_1025;
              }
LABEL_1019:
              if (v652 > v176 - v171)
                v176 = v171 + v652;
              v655 = &v761[2 * v22];
              *v655 = v642 - v171;
              v655[1] = v652;
              ++v22;
              v653 = v759;
              v656 = v652 > 0x1000 || &v759[v652] == v651;
              v180 = v652;
              if (v656)
                goto LABEL_304;
LABEL_1025:
              v657 = (unsigned int *)(v173 + 8 * (v171 & v162));
              if (*(unsigned __int8 *)(v647 + v652) >= *((unsigned __int8 *)v653 + v652))
              {
                *v175 = v171;
                if (v171 <= v645)
                {
                  v175 = (unsigned int *)&v770;
                  goto LABEL_304;
                }
                v639 = v652;
                v175 = (unsigned int *)(v173 + 8 * (v171 & v162));
                v232 = v641-- != 0;
                if (v232)
                  goto LABEL_999;
LABEL_304:
                *v175 = 0;
                *v174 = 0;
                v202 = v176 - 8;
LABEL_305:
                *(_DWORD *)(v106 + 36) = v202;
LABEL_306:
                v18 = a1;
                v23 = v733;
                v24 = v734;
                v16 = v11 + 7;
                v17 = v752;
                v14 = v759;
                goto LABEL_307;
              }
              *v174 = v171;
              if (v171 <= v645)
              {
                v174 = (unsigned int *)&v770;
                goto LABEL_304;
              }
              ++v657;
              v640 = v652;
              v174 = v657;
              v232 = v641-- != 0;
              if (!v232)
                goto LABEL_304;
LABEL_999:
              v171 = *v657;
              if (*v657 < v167)
                goto LABEL_304;
            }
            v654 = &v759[v646];
            v651 = (unsigned __int8 *)v760;
            if ((unint64_t)v648 >= v751)
              goto LABEL_1010;
LABEL_1008:
            if (*(_DWORD *)v649 == *(_DWORD *)v654)
            {
              v654 += 4;
              v649 = (_QWORD *)((char *)v649 + 4);
            }
LABEL_1010:
            if ((unint64_t)v654 >= v750)
            {
              if (v654 >= v651)
                goto LABEL_1018;
            }
            else
            {
              if (*(unsigned __int16 *)v649 == *(unsigned __int16 *)v654)
              {
                v654 += 2;
                v649 = (_QWORD *)((char *)v649 + 2);
              }
              if (v654 >= v651)
              {
LABEL_1018:
                v106 = a1;
                v652 = v654 - v759;
                if (v654 - v759 <= v180)
                  goto LABEL_1006;
                goto LABEL_1019;
              }
            }
            if (*(unsigned __int8 *)v649 == *v654)
              ++v654;
            goto LABEL_1018;
          }
        }
        v183 = -(uint64_t)v181;
        v184 = (char *)v178 - v181;
        if (v762 <= (unint64_t)v178)
        {
          v189 = (char *)(v759 + 4);
          if ((unint64_t)v178 >= v751)
            goto LABEL_271;
        }
        else
        {
          v185 = *v178 ^ *(_QWORD *)v184;
          v186 = (unsigned __int8 *)v760;
          if (v185)
          {
            v187 = (__clz(__rbit64(v185)) >> 3) + 4;
            v188 = v187;
            if (v180 < v187)
              goto LABEL_280;
            goto LABEL_254;
          }
          while (1)
          {
            v189 = &v169[v185];
            if ((unint64_t)&v169[v185] >= v762)
              break;
            v192 = *(_QWORD *)&v169[v183 + v185];
            v185 += 8;
            v193 = *(_QWORD *)v189 ^ v192;
            if (v193)
            {
              v194 = __clz(__rbit64(v193));
              v186 = (unsigned __int8 *)v760;
              v187 = v185 + (v194 >> 3) + 4;
              v188 = v187;
              if (v180 < v187)
              {
LABEL_280:
                v191 = &v761[2 * v22];
                *v191 = v172 + v179;
                v191[1] = v187;
                ++v22;
                if (v187 > v158)
                  goto LABEL_306;
                v180 = v188;
                if (&v759[v188] == v186)
                  goto LABEL_306;
              }
              goto LABEL_254;
            }
          }
          v184 = &v189[v183];
          if ((unint64_t)v189 >= v751)
          {
LABEL_271:
            if ((unint64_t)v189 >= v750)
            {
              if ((unint64_t)v189 >= v760)
                goto LABEL_279;
            }
            else
            {
              if (*(unsigned __int16 *)v184 == *(unsigned __int16 *)v189)
              {
                v189 += 2;
                v184 += 2;
              }
              if ((unint64_t)v189 >= v760)
              {
LABEL_279:
                v190 = (_DWORD)v189 - (_DWORD)v178;
                v186 = (unsigned __int8 *)v760;
                v187 = v190 + 4;
                v188 = v187;
                if (v180 < v187)
                  goto LABEL_280;
                goto LABEL_254;
              }
            }
            if (*v184 == *v189)
              LODWORD(v189) = (_DWORD)v189 + 1;
            goto LABEL_279;
          }
        }
        if (*(_DWORD *)v184 == *(_DWORD *)v189)
        {
          v189 += 4;
          v184 += 4;
        }
        goto LABEL_271;
      }
      if (*(_DWORD *)(a1 + 212) >= 0xFFFu)
        v27 = 4095;
      else
        v27 = *(_DWORD *)(a1 + 212);
      v28 = *(_QWORD *)(a1 + 8);
      v29 = (_DWORD)v759 - v28;
      v30 = -1 << (*(_DWORD *)(a1 + 196) - 1);
      v31 = ~v30;
      v32 = (_DWORD)v759 - v28 + v30 + 1;
      if ((int)v759 - (int)v28 < ~v30)
        v32 = 0;
      v754 = v32;
      v33 = 1 << *(_DWORD *)(a1 + 192);
      if (v29 - *(_DWORD *)(a1 + 28) > v33 && *(_DWORD *)(a1 + 32) == 0)
        v35 = v29 - v33;
      else
        v35 = *(_DWORD *)(a1 + 28);
      if (v35 <= 1)
        v36 = 1;
      else
        v36 = v35;
      v37 = v29 - *(_DWORD *)(a1 + 24);
      v38 = *(_QWORD *)(a1 + 48);
      v39 = (char *)(v759 + 11);
      v737 = *(_DWORD *)(a1 + 204);
      v741 = (-1640531535 * *(_DWORD *)v759) >> -(char)*(_DWORD *)(a1 + 200);
      v40 = *(_DWORD *)(v38 + 4 * v741);
      v41 = v764 == 0;
      v42 = *(_QWORD *)(a1 + 64);
      v43 = (unsigned int *)(v42 + 8 * (v29 & ~v30));
      v44 = v43 + 1;
      v45 = v29 + 9;
      v770 = 0;
      if (v764)
        v46 = 3;
      else
        v46 = 4;
      v47 = v759 + 3;
      if (v764)
        v48 = 0;
      else
        v48 = -1;
      v49 = (v732 - 1);
      do
      {
        if (v41 == 3)
        {
          v50 = *a3 - 1;
          if (*a3 - 2 >= v37)
            goto LABEL_44;
        }
        else
        {
          v50 = a3[v41];
          if (v50 - 1 >= v37)
            goto LABEL_44;
        }
        if (v29 - v50 < v35 || ((*(_DWORD *)&v759[-v50] ^ *(_DWORD *)v759) & 0xFFFFFF) != 0)
        {
          v7 = v760;
          goto LABEL_44;
        }
        v52 = -(uint64_t)v50;
        v53 = (char *)v47 - v50;
        if (v762 <= (unint64_t)v47)
        {
          v57 = (char *)(v759 + 3);
          if ((unint64_t)v47 < v751)
          {
LABEL_59:
            if (*(_DWORD *)v53 == *(_DWORD *)v57)
            {
              v57 += 4;
              v53 += 4;
            }
          }
          goto LABEL_61;
        }
        v54 = *v47 ^ *(_QWORD *)v53;
        v7 = v760;
        if (!v54)
        {
          while (1)
          {
            v57 = &v39[v54];
            if ((unint64_t)&v39[v54] >= v762)
              break;
            v60 = *(_QWORD *)&v39[v52 + v54];
            v54 += 8;
            v61 = *(_QWORD *)v57 ^ v60;
            if (v61)
            {
              v62 = __clz(__rbit64(v61));
              v7 = v760;
              v55 = v54 + (v62 >> 3) + 3;
              v56 = v55;
              if (v49 >= v55)
                goto LABEL_44;
              goto LABEL_70;
            }
          }
          v53 = &v57[v52];
          if ((unint64_t)v57 < v751)
            goto LABEL_59;
LABEL_61:
          if ((unint64_t)v57 >= v750)
          {
            if ((unint64_t)v57 >= v760)
              goto LABEL_69;
          }
          else
          {
            if (*(unsigned __int16 *)v53 == *(unsigned __int16 *)v57)
            {
              v57 += 2;
              v53 += 2;
            }
            if ((unint64_t)v57 >= v760)
            {
LABEL_69:
              v58 = (_DWORD)v57 - (_DWORD)v47;
              v7 = v760;
              v55 = v58 + 3;
              v56 = v55;
              if (v49 >= v55)
                goto LABEL_44;
              goto LABEL_70;
            }
          }
          if (*v53 == *v57)
            LODWORD(v57) = (_DWORD)v57 + 1;
          goto LABEL_69;
        }
        v55 = (__clz(__rbit64(v54)) >> 3) + 3;
        v56 = v55;
        if (v49 >= v55)
          goto LABEL_44;
LABEL_70:
        v59 = &v761[2 * v22];
        *v59 = v41 + v48;
        v59[1] = v55;
        ++v22;
        if (v55 > v27 || (v49 = v56, &v759[v56] == (unsigned __int8 *)v7))
        {
          v18 = a1;
          v23 = v733;
          v201 = v734;
          v16 = v11 + 7;
          v17 = v752;
          goto LABEL_956;
        }
LABEL_44:
        ++v41;
      }
      while (v41 < v46);
      if (v49 > 2)
      {
        v18 = a1;
        v16 = v11 + 7;
        v17 = v752;
        goto LABEL_953;
      }
      v18 = a1;
      v195 = *(_QWORD *)(a1 + 56);
      v196 = *(_DWORD *)v759;
      v197 = 32 - *(_DWORD *)(a1 + 40);
      if (v701 < v29)
      {
        v198 = v701;
        do
        {
          *(_DWORD *)(v195 + 4 * ((900185344 * *(_DWORD *)(v28 + v198)) >> v197)) = v198;
          ++v198;
        }
        while ((_DWORD)v759 - (_DWORD)v28 != v198);
      }
      v199 = *(unsigned int *)(v195 + 4 * ((900185344 * v196) >> v197));
      v200 = v199 >= v36 && (v29 - v199) >> 18 == 0;
      v23 = v733;
      v201 = v734;
      v16 = v11 + 7;
      if (!v200)
      {
        v701 = (_DWORD)v759 - v28;
        v17 = v752;
        goto LABEL_953;
      }
      v686 = (_DWORD *)(v28 + v199);
      v17 = v752;
      if (v762 <= (unint64_t)v759)
      {
        v689 = v759;
        if ((unint64_t)v759 < v751)
        {
LABEL_1090:
          if (*v686 == *(_DWORD *)v689)
          {
            v689 += 4;
            ++v686;
          }
        }
      }
      else
      {
        v687 = *(_QWORD *)v759 ^ *(_QWORD *)v686;
        if (v687)
        {
          v688 = __clz(__rbit64(v687)) >> 3;
          v701 = (_DWORD)v759 - v28;
          if (v688 < 3)
            goto LABEL_953;
          goto LABEL_1101;
        }
        v694 = v759 + 8;
        while (1)
        {
          v695 = (_QWORD *)((char *)v694 + v687);
          if ((unint64_t)v694 + v687 >= v762)
            break;
          v696 = *(_QWORD *)(v28 + v199 + 8 + v687);
          v687 += 8;
          v697 = *v695 ^ v696;
          if (v697)
          {
            v688 = v687 + (__clz(__rbit64(v697)) >> 3);
            v17 = v752;
            v701 = (_DWORD)v759 - v28;
            if (v688 >= 3)
              goto LABEL_1101;
            goto LABEL_953;
          }
        }
        v689 = &v759[v687 + 8];
        v686 = (_DWORD *)(v28 + v199 + v687 + 8);
        v17 = v752;
        if ((unint64_t)v689 < v751)
          goto LABEL_1090;
      }
      if ((unint64_t)v689 >= v750)
      {
        if ((unint64_t)v689 >= v7)
          goto LABEL_1100;
LABEL_1098:
        if (*(unsigned __int8 *)v686 == *v689)
          ++v689;
        goto LABEL_1100;
      }
      if (*(unsigned __int16 *)v686 == *(unsigned __int16 *)v689)
      {
        v689 += 2;
        v686 = (_DWORD *)((char *)v686 + 2);
      }
      if ((unint64_t)v689 < v7)
        goto LABEL_1098;
LABEL_1100:
      v688 = v689 - v759;
      v701 = (_DWORD)v759 - v28;
      if ((unint64_t)(v689 - v759) < 3)
        goto LABEL_953;
LABEL_1101:
      *v761 = v29 - v199 + 2;
      v761[1] = v688;
      if (v688 > v27 || &v759[v688] == (unsigned __int8 *)v7)
      {
        v615 = v29 + 1;
        v22 = 1;
        v701 = v29;
        goto LABEL_955;
      }
      v22 = 1;
      v701 = (_DWORD)v759 - v28;
      v49 = v688;
LABEL_953:
      *(_DWORD *)(v38 + 4 * v741) = v29;
      if (v40 < v36)
        goto LABEL_954;
      v662 = 0;
      v663 = 0;
      v664 = ~(-1 << v737);
      v665 = v29 + 2;
      v746 = v759 + 8;
      v666 = v28 + 8;
      while (2)
      {
        if (v663 >= v662)
          v667 = v662;
        else
          v667 = v663;
        v668 = v28 + v40;
        v669 = (char *)&v759[v667];
        v670 = (_DWORD *)(v668 + v667);
        if (v762 <= (unint64_t)&v759[v667])
        {
          v675 = &v759[v667];
          if ((unint64_t)v669 < v751)
          {
LABEL_1049:
            if (*v670 == *(_DWORD *)v675)
            {
              v675 += 4;
              ++v670;
            }
          }
        }
        else
        {
          v671 = *(_QWORD *)v669 ^ *(_QWORD *)v670;
          if (v671)
          {
            v672 = (unsigned __int8 *)v760;
            v673 = (__clz(__rbit64(v671)) >> 3) + v667;
            if (v673 <= v49)
              goto LABEL_1047;
LABEL_1060:
            if (v673 > v45 - v40)
              v45 = v40 + v673;
            v677 = &v761[2 * v22];
            *v677 = v665 - v40;
            v677[1] = v673;
            ++v22;
            v674 = v759;
            v678 = v673 > 0x1000 || &v759[v673] == v672;
            v49 = v673;
            if (v678)
            {
              v17 = v752;
              goto LABEL_954;
            }
            goto LABEL_1066;
          }
          v680 = (char *)v746 + v667;
          while (1)
          {
            v681 = &v680[v671];
            if ((unint64_t)&v680[v671] >= v762)
              break;
            v682 = *(_QWORD *)(v666 + v667 + v40 + v671);
            v671 += 8;
            v683 = *(_QWORD *)v681 ^ v682;
            if (v683)
            {
              v684 = __clz(__rbit64(v683));
              v672 = (unsigned __int8 *)v760;
              v16 = v11 + 7;
              v18 = a1;
              v673 = v671 + (v684 >> 3) + v667;
              if (v673 <= v49)
                goto LABEL_1047;
              goto LABEL_1060;
            }
          }
          v675 = (unsigned __int8 *)v746 + v667 + v671;
          v670 = (_DWORD *)(v666 + v667 + v40 + v671);
          if ((unint64_t)v675 < v751)
            goto LABEL_1049;
        }
        if ((unint64_t)v675 >= v750)
        {
          if ((unint64_t)v675 < v760)
            goto LABEL_1057;
        }
        else
        {
          if (*(unsigned __int16 *)v670 == *(unsigned __int16 *)v675)
          {
            v675 += 2;
            v670 = (_DWORD *)((char *)v670 + 2);
          }
          if ((unint64_t)v675 >= v760)
            goto LABEL_1059;
LABEL_1057:
          if (*(unsigned __int8 *)v670 == *v675)
            ++v675;
        }
LABEL_1059:
        v676 = v675 - (unsigned __int8 *)v669;
        v672 = (unsigned __int8 *)v760;
        v16 = v11 + 7;
        v18 = a1;
        v673 = v676 + v667;
        if (v673 > v49)
          goto LABEL_1060;
LABEL_1047:
        v674 = v759;
LABEL_1066:
        v679 = (unsigned int *)(v42 + 8 * (v40 & v31));
        if (*(unsigned __int8 *)(v668 + v673) < *((unsigned __int8 *)v674 + v673))
        {
          *v43 = v40;
          if (v40 <= v754)
          {
            v43 = (unsigned int *)&v770;
            v17 = v752;
            goto LABEL_954;
          }
          ++v679;
          v663 = v673;
          v43 = v679;
          v232 = v664-- != 0;
          v17 = v752;
          if (!v232)
            goto LABEL_954;
          goto LABEL_1040;
        }
        *v44 = v40;
        if (v40 > v754)
        {
          v662 = v673;
          v44 = (unsigned int *)(v42 + 8 * (v40 & v31));
          v232 = v664-- != 0;
          v17 = v752;
          if (!v232)
            goto LABEL_954;
LABEL_1040:
          v40 = *v679;
          if (*v679 < v36)
            goto LABEL_954;
          continue;
        }
        break;
      }
      v44 = (unsigned int *)&v770;
      v17 = v752;
LABEL_954:
      *v44 = 0;
      *v43 = 0;
      v615 = v45 - 8;
      v23 = v733;
      v201 = v734;
LABEL_955:
      *(_DWORD *)(v18 + 36) = v615;
LABEL_956:
      v14 = v759;
      v24 = v201;
LABEL_307:
      v766 = v22;
      v203 = v14;
      ZSTD_optLdm_processMatchCandidate((uint64_t *)&v767, (uint64_t)v761, &v766, (_DWORD)v14 - (_DWORD)v747, v760 - (_DWORD)v14);
      LODWORD(v204) = v766;
      if (v766)
      {
        v11[4] = *a3;
        v11[5] = a3[1];
        v11[6] = a3[2];
        v205 = v764;
        v11[2] = 0;
        v11[3] = v764;
        v206 = *(_DWORD *)(v18 + 160);
        if (v206 != 1)
        {
          v210 = v24;
          if (v764 < 0x40)
            v211 = ZSTD_LLcode_LL_Code[v764];
          else
            v211 = 50 - __clz(v764);
          v7 = v760;
          v213 = *(_DWORD **)(v18 + 88);
          v214 = *(_DWORD *)(v18 + 148) + 1;
          v207 = v214 + (LL_bits[v211] << 8) + ((__clz(v213[v211] + 1) << 8) ^ 0xFFFFE0FF);
          *v11 = v207;
          v208 = (v204 - 1);
          v209 = v761[2 * v208 + 1];
          if (v209 <= v731)
          {
            v212 = v214 + ((__clz(*v213 + 1) << 8) ^ 0xFFFFE0FF);
            goto LABEL_320;
          }
LABEL_318:
          v215 = 0;
          v216 = v761[2 * v208];
          goto LABEL_878;
        }
        v207 = (__clz(v764 + 1) << 8) ^ 0x1F00;
        *v11 = v207;
        v208 = (v204 - 1);
        v209 = v761[2 * v208 + 1];
        if (v209 > v731)
        {
          v210 = v24;
          v7 = v760;
          goto LABEL_318;
        }
        v212 = 0;
        v7 = v760;
LABEL_320:
        v217 = v11 + 14;
        v218 = (v732 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v217 - 7) = 0x40000000;
          *v217 = 0x40000000;
          v217 += 14;
          v218 -= 2;
        }
        while (v218);
        if (v732 - 1 != ((v732 - 1) & 0xFFFFFFFFFFFFFFFELL))
        {
          v219 = v699;
          v220 = v700;
          do
          {
            *v220 = 0x40000000;
            v220 += 7;
            --v219;
          }
          while (v219);
        }
        v221 = 0;
        v222 = v212 + v207;
        if (v204 <= 1)
          v204 = 1;
        else
          v204 = v204;
        v223 = v732;
        while (2)
        {
          v224 = &v761[2 * v221];
          v225 = v224[1];
          if (v223 <= v225)
          {
            v226 = *v224;
            v227 = __clz(v226 + 1) ^ 0x1F;
            if (v206 == 1)
            {
              v228 = ((_DWORD)v227 << 8) + 4096;
              if (v223 + 1 <= v225 + 1)
                v229 = v225 + 1;
              else
                v229 = v223 + 1;
              v230 = v229 - v223;
              v231 = v229 - 1;
              v232 = v230 >= 2 && v231 >= v223;
              if (!v232)
              {
                v233 = v223;
                goto LABEL_351;
              }
              v233 = v223 + (v230 & 0xFFFFFFFE);
              v243 = v230 & 0xFFFFFFFE;
              do
              {
                v244 = &v11[7 * v223];
                v244[2] = v223;
                v244[3] = v205;
                v245 = &v11[7 * v223 + 7];
                v245[1] = v226;
                v245[2] = v223 + 1;
                v245[3] = v764;
                *v244 = v222 + v228 + ((__clz(v223 - 2) << 8) ^ 0x1F00);
                v244[1] = v226;
                *v245 = v222 + v228 + ((__clz(v223 - 1) << 8) ^ 0x1F00);
                v205 = v764;
                v223 += 2;
                v243 -= 2;
              }
              while (v243);
              v223 = v233;
              if (v230 != (v230 & 0xFFFFFFFE))
              {
LABEL_351:
                v223 = v233;
                do
                {
                  v246 = &v11[7 * v223];
                  v246[2] = v223;
                  v246[3] = v205;
                  *v246 = v222 + v228 + ((__clz(v223 - 2) << 8) ^ 0x1F00);
                  v246[1] = v226;
                  ++v223;
                }
                while (v223 <= v225);
              }
            }
            else
            {
              if (v227 <= 0x13)
                v234 = 53;
              else
                v234 = ((_DWORD)v227 << 9) - 9675;
              v235 = *(_DWORD *)(v18 + 152);
              v236 = *(_QWORD *)(v18 + 96);
              v237 = *(_QWORD *)(v18 + 104);
              v238 = v234 + *(_DWORD *)(v18 + 156);
              do
              {
                v242 = v223 - 3;
                if (v223 - 3 < 0x80)
                  v239 = ZSTD_MLcode_ML_Code[v242];
                else
                  v239 = 67 - __clz(v242);
                v240 = v222
                     + v238
                     + ((__clz(*(_DWORD *)(v237 + 4 * v227) + 1) << 8) ^ 0xFFFFE0FF)
                     + v235
                     + ((ML_bits[v239] + (_DWORD)v227) << 8)
                     + ((__clz(*(_DWORD *)(v236 + 4 * v239) + 1) << 8) ^ 0xFFFFE0FF);
                v241 = &v11[7 * v223];
                v241[2] = v223;
                v241[3] = v205;
                *v241 = v240;
                v241[1] = v226;
                ++v223;
              }
              while (v223 <= v225);
            }
          }
          if (++v221 != v204)
            continue;
          break;
        }
        LODWORD(v247) = v223 - 1;
        v248 = v759;
        if (v223 == 1)
          goto LABEL_874;
        v718 = v759 + 8;
        v249 = (_DWORD)v759 + 1;
        v250 = 1;
        v251 = v748;
        while (2)
        {
          v252 = v250 - 1;
          v253 = &v11[7 * v250 - 7];
          if (v253[2])
            v254 = 1u;
          else
            v254 = v11[7 * v252 + 3] + 1;
          v255 = v250;
          v256 = &v248[v250];
          v257 = *v253;
          v258 = *(_DWORD *)(v18 + 160);
          if (*(_DWORD *)(v18 + 176) == 2)
          {
            v259 = v257 + 2048;
            if (v258 != 1)
            {
              if (v254 >= 0x40)
                goto LABEL_364;
LABEL_370:
              v260 = ZSTD_LLcode_LL_Code[v254];
              v261 = v254 - 1;
              if (v254 - 1 >= 0x40)
                goto LABEL_371;
LABEL_365:
              v262 = ZSTD_LLcode_LL_Code[v261];
              goto LABEL_372;
            }
LABEL_368:
            v263 = (__clz(v254 + 1) << 8) ^ 0x1F00;
            v264 = ((__clz(v254) << 8) ^ 0xFFFFE0FF) + 1;
          }
          else
          {
            if (v258 == 1)
            {
              v259 = v257 + 1536;
              goto LABEL_368;
            }
            v259 = *(_DWORD *)(v18 + 144)
                 + v257
                 + ((__clz(*(_DWORD *)(*(_QWORD *)(v18 + 80) + 4 * *(v256 - 1)) + 1) << 8) ^ 0xFFFFE0FF)
                 + 1;
            if (v254 < 0x40)
              goto LABEL_370;
LABEL_364:
            v260 = 50 - __clz(v254);
            v261 = v254 - 1;
            if (v254 - 1 < 0x40)
              goto LABEL_365;
LABEL_371:
            v262 = 50 - __clz(v261);
LABEL_372:
            v265 = *(_DWORD *)(v18 + 148);
            v266 = *(_QWORD *)(v18 + 88);
            v263 = v265 + (LL_bits[v260] << 8) + ((__clz(*(_DWORD *)(v266 + 4 * v260) + 1) << 8) ^ 0xFFFFE0FF) + 1;
            v264 = ~v265 - (LL_bits[v262] << 8) + ((__clz(*(_DWORD *)(v266 + 4 * v262) + 1) << 8) ^ 0x1F01);
            v248 = v759;
          }
          v267 = v259 + v263 + v264;
          v268 = (signed int *)&v11[7 * v255];
          v271 = *v268;
          v269 = v268 + 2;
          v270 = v271;
          if (v267 <= v271)
          {
            v278 = (signed int *)&v11[7 * v255];
            v278[1] = 0;
            v278[2] = 0;
            v278[3] = v254;
            *v278 = v267;
            v270 = v267;
LABEL_378:
            v279 = 0;
            v280 = &v11[7 * v255];
            v281 = &v11[7 * v252];
            *((_QWORD *)v280 + 2) = *((_QWORD *)v281 + 2);
            v280[6] = v281[6];
            v282 = 1;
            if ((unint64_t)v256 <= v251)
              goto LABEL_391;
LABEL_356:
            v250 = v255 + 1;
LABEL_357:
            ++v249;
            v17 = v752;
            if (v250 > v247)
              goto LABEL_874;
            continue;
          }
          break;
        }
        if (!*v269)
          goto LABEL_378;
        v272 = &v11[7 * (v255 - *v269) + 4];
        v273 = v11[7 * v255 + 1];
        if (v273 < 3)
        {
          if (!v11[7 * v255 + 3])
            ++v273;
          if (v273)
          {
            if (v273 == 3)
            {
              v275 = *v272;
              v277 = v275 - 1;
            }
            else
            {
              v277 = v272[v273];
              v275 = *v272;
            }
            v571 = v273 > 1;
            v284 = 2;
            if (v571)
              v284 = 1;
            v274 = &v272[v284];
          }
          else
          {
            v283 = *(_QWORD *)v272;
            v274 = &v11[7 * (v255 - *v269) + 6];
            v277 = v283;
            v275 = HIDWORD(v283);
          }
        }
        else
        {
          v276 = *v272;
          v274 = &v11[7 * (v255 - *v269) + 5];
          v275 = v276;
          v277 = v273 - 2;
        }
        v282 = 0;
        v285 = *v274;
        v286 = v277 | (v275 << 32);
        v287 = &v11[7 * v255];
        *((_QWORD *)v287 + 2) = v286;
        v287[6] = v285;
        v279 = 1;
        if ((unint64_t)v256 > v251)
          goto LABEL_356;
LABEL_391:
        if ((_DWORD)v255 == (_DWORD)v247)
        {
          v17 = v752;
LABEL_874:
          v554 = &v11[7 * v247];
          v216 = v554[1];
          v726 = *v554;
          v209 = v554[2];
          v205 = v554[3];
          v771 = *((_QWORD *)v554 + 2);
          v772 = v554[6];
          if (v247 >= v205 + v209)
            v215 = v247 - (v205 + v209);
          else
            v215 = 0;
          v23 = v733;
          v210 = v734;
          if (!v209)
            goto LABEL_1113;
          goto LABEL_878;
        }
        v250 = v255 + 1;
        if ((int)v11[7 * (v255 + 1)] <= v270 + 128)
          goto LABEL_357;
        if (v282)
        {
          v288 = v11[7 * v255 + 3];
          if (*(_DWORD *)(v18 + 160) != 1)
            goto LABEL_395;
LABEL_397:
          v735 = 0;
        }
        else
        {
          v288 = 0;
          if (*(_DWORD *)(v18 + 160) == 1)
            goto LABEL_397;
LABEL_395:
          v735 = *(_DWORD *)(v18 + 148) + ((__clz(**(_DWORD **)(v18 + 88) + 1) << 8) ^ 0xFFFFE0FF) + 1;
        }
        v736 = v270;
        v725 = v269;
        v745 = v249;
        v765 = v288;
        v766 = 0;
        v289 = *(_QWORD *)(v18 + 8);
        v290 = *(unsigned int *)(v18 + 36);
        if (v289 + v290 > (unint64_t)v256)
        {
          v291 = 0;
          v7 = v760;
          goto LABEL_714;
        }
        v720 = v279;
        v292 = *(_DWORD *)(v18 + 208);
        v758 = v256;
        for (j = (_DWORD)v256 - v289;
              v290 < j;
        v294 = &v11[7 * v255 + 4];
        *(_DWORD *)(v18 + 36) = j;
        if ((v292 - 6) < 2)
        {
          v291 = 0;
          if (*(_DWORD *)(v18 + 212) >= 0xFFFu)
            v326 = 4095;
          else
            v326 = *(_DWORD *)(v18 + 212);
          v327 = *(_QWORD *)(v18 + 8);
          v328 = (_DWORD)v758 - v327;
          v329 = (char *)(v758 + 4);
          v703 = *(_DWORD *)(v18 + 204);
          v707 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v758) >> -(char)*(_DWORD *)(v18 + 200);
          v711 = *(_QWORD *)(v18 + 48);
          v330 = *(_DWORD *)(v711 + 4 * v707);
          v331 = -1 << (*(_DWORD *)(v18 + 196) - 1);
          v332 = ~v331;
          v333 = (_DWORD)v758 - v327 + v331 + 1;
          if ((int)v758 - (int)v327 < ~v331)
            v333 = 0;
          v728 = v333;
          v334 = *(_DWORD *)(v18 + 24);
          v335 = 1 << *(_DWORD *)(v18 + 192);
          if (v328 - *(_DWORD *)(v18 + 28) > v335 && *(_DWORD *)(v18 + 32) == 0)
            v337 = v328 - v335;
          else
            v337 = *(_DWORD *)(v18 + 28);
          if (v337 <= 1)
            v338 = 1;
          else
            v338 = v337;
          v339 = *(_QWORD *)(v18 + 64);
          v340 = (unsigned int *)(v339 + 8 * (v328 & ~v331));
          v341 = v340 + 1;
          v342 = v328 + 9;
          v770 = 0;
          if (v720)
            v343 = 4;
          else
            v343 = 3;
          v344 = v328 - v334;
          v345 = v720;
          v346 = (v732 - 1);
          while (1)
          {
            if (v345 == 3)
            {
              v347 = *v294 - 1;
              if (*v294 - 2 >= v344)
                goto LABEL_476;
            }
            else
            {
              v347 = v294[v345];
              if (v347 - 1 >= v344)
                goto LABEL_476;
            }
            if (v328 - v347 < v337 || *(_DWORD *)v758 != *(_DWORD *)&v758[-v347])
              goto LABEL_476;
            v349 = &v329[-v347];
            if (v762 > (unint64_t)v329)
            {
              v350 = v758 + 4;
              v351 = *(_QWORD *)v329 ^ *(_QWORD *)v349;
              if (v351)
              {
                v352 = __clz(__rbit64(v351)) >> 3;
              }
              else
              {
                do
                {
                  v349 += 8;
                  if ((unint64_t)++v350 >= v762)
                    goto LABEL_495;
                  v353 = *v350 ^ *(_QWORD *)v349;
                }
                while (!v353);
                v352 = (char *)v350 + (__clz(__rbit64(v353)) >> 3) - v329;
              }
              v354 = v352 + 4;
              v355 = v354;
              if (v346 >= v354)
                goto LABEL_476;
LABEL_503:
              v356 = &v761[2 * v291];
              *v356 = v345 + ((int)(v720 << 31) >> 31);
              v356[1] = v354;
              ++v291;
              if (v354 > v326)
                goto LABEL_713;
              v346 = v355;
              if (&v758[v355] == (unsigned __int8 *)v760)
                goto LABEL_713;
              goto LABEL_476;
            }
            v350 = v758 + 4;
LABEL_495:
            if ((unint64_t)v350 >= v751)
            {
              if ((unint64_t)v350 >= v750)
                goto LABEL_499;
            }
            else
            {
              if (*(_DWORD *)v349 == *(_DWORD *)v350)
              {
                v350 = (_QWORD *)((char *)v350 + 4);
                v349 += 4;
              }
              if ((unint64_t)v350 >= v750)
              {
LABEL_499:
                if ((unint64_t)v350 >= v760)
                  goto LABEL_502;
LABEL_500:
                if (*v349 == *(_BYTE *)v350)
                  LODWORD(v350) = (_DWORD)v350 + 1;
                goto LABEL_502;
              }
            }
            if (*(unsigned __int16 *)v349 == *(unsigned __int16 *)v350)
            {
              v350 = (_QWORD *)((char *)v350 + 2);
              v349 += 2;
            }
            if ((unint64_t)v350 < v760)
              goto LABEL_500;
LABEL_502:
            v354 = (_DWORD)v350 - (_DWORD)v758;
            v355 = v354;
            if (v346 < v354)
              goto LABEL_503;
LABEL_476:
            if (++v345 >= v343)
            {
              *(_DWORD *)(v711 + 4 * v707) = v328;
              if (v330 < v338)
                goto LABEL_711;
              v357 = 0;
              v358 = 0;
              v359 = ~(-1 << v703);
              v360 = v328 + 2;
              v721 = (char *)v718 + v255;
              v712 = v327 + 8;
              while (1)
              {
                v361 = v358 >= v357 ? v357 : v358;
                v362 = v327 + v330;
                v363 = &v758[v361];
                v364 = (_QWORD *)(v362 + v361);
                if (v762 <= (unint64_t)&v758[v361])
                  break;
                v365 = *(_QWORD *)v363 ^ *v364;
                if (v365)
                {
                  v366 = (__clz(__rbit64(v365)) >> 3) + v361;
                  v367 = (unsigned __int8 *)v760;
                  if (v366 <= v346)
                    goto LABEL_520;
                  goto LABEL_533;
                }
                v374 = 0;
                v375 = &v721[v361];
                do
                {
                  v376 = &v375[v374];
                  if ((unint64_t)&v375[v374] >= v762)
                  {
                    v370 = &v721[v361 + v374];
                    v364 = (_QWORD *)(v712 + v361 + v330 + v374);
                    if ((unint64_t)v370 >= v751)
                      goto LABEL_524;
                    goto LABEL_522;
                  }
                  v377 = *(_QWORD *)(v712 + v361 + v330 + v374);
                  v374 += 8;
                  v378 = *(_QWORD *)v376 ^ v377;
                }
                while (!v378);
                v366 = v374 + (__clz(__rbit64(v378)) >> 3) + v361;
                v367 = (unsigned __int8 *)v760;
                if (v366 <= v346)
                {
LABEL_520:
                  v368 = a1;
                  v369 = v758;
                  goto LABEL_539;
                }
LABEL_533:
                if (v366 > v342 - v330)
                  v342 = v330 + v366;
                v371 = &v761[2 * v291];
                *v371 = v360 - v330;
                v371[1] = v366;
                ++v291;
                v369 = v758;
                v372 = v366 > 0x1000 || &v758[v366] == v367;
                v346 = v366;
                v368 = a1;
                if (v372)
                  goto LABEL_712;
LABEL_539:
                v373 = (unsigned int *)(v339 + 8 * (v330 & v332));
                if (*(unsigned __int8 *)(v362 + v366) >= *((unsigned __int8 *)v369 + v366))
                {
                  *v341 = v330;
                  if (v330 <= v728)
                    goto LABEL_841;
                  v357 = v366;
                  v341 = (unsigned int *)(v339 + 8 * (v330 & v332));
                  v232 = v359-- != 0;
                  if (!v232)
                    goto LABEL_712;
                }
                else
                {
                  *v340 = v330;
                  if (v330 <= v728)
                    goto LABEL_840;
                  ++v373;
                  v358 = v366;
                  v340 = v373;
                  v232 = v359-- != 0;
                  if (!v232)
                    goto LABEL_712;
                }
                v330 = *v373;
                if (*v373 < v338)
                  goto LABEL_712;
              }
              v370 = (char *)&v758[v361];
              if ((unint64_t)v363 >= v751)
                goto LABEL_524;
LABEL_522:
              if (*(_DWORD *)v364 == *(_DWORD *)v370)
              {
                v370 += 4;
                v364 = (_QWORD *)((char *)v364 + 4);
              }
LABEL_524:
              if ((unint64_t)v370 >= v750)
              {
                if ((unint64_t)v370 >= v760)
                  goto LABEL_532;
              }
              else
              {
                if (*(unsigned __int16 *)v364 == *(unsigned __int16 *)v370)
                {
                  v370 += 2;
                  v364 = (_QWORD *)((char *)v364 + 2);
                }
                if ((unint64_t)v370 >= v760)
                {
LABEL_532:
                  v366 = v370 - (char *)v758;
                  v367 = (unsigned __int8 *)v760;
                  if (v366 <= v346)
                    goto LABEL_520;
                  goto LABEL_533;
                }
              }
              if (*(unsigned __int8 *)v364 == *v370)
                ++v370;
              goto LABEL_532;
            }
          }
        }
        if (v292 == 5)
        {
          v291 = 0;
          if (*(_DWORD *)(a1 + 212) >= 0xFFFu)
            v379 = 4095;
          else
            v379 = *(_DWORD *)(a1 + 212);
          v380 = *(_QWORD *)(a1 + 8);
          v381 = (_DWORD)v758 - v380;
          v382 = (char *)(v758 + 4);
          v704 = *(_DWORD *)(a1 + 204);
          v708 = (0xCF1BBCDCBB000000 * *(_QWORD *)v758) >> -(char)*(_DWORD *)(a1 + 200);
          v713 = *(_QWORD *)(a1 + 48);
          v383 = *(_DWORD *)(v713 + 4 * v708);
          v384 = -1 << (*(_DWORD *)(a1 + 196) - 1);
          v385 = ~v384;
          v386 = (_DWORD)v758 - v380 + v384 + 1;
          if ((int)v758 - (int)v380 < ~v384)
            v386 = 0;
          v729 = v386;
          v387 = *(_DWORD *)(a1 + 24);
          v388 = 1 << *(_DWORD *)(a1 + 192);
          if (v381 - *(_DWORD *)(a1 + 28) > v388 && *(_DWORD *)(a1 + 32) == 0)
            v390 = v381 - v388;
          else
            v390 = *(_DWORD *)(a1 + 28);
          if (v390 <= 1)
            v391 = 1;
          else
            v391 = v390;
          v392 = *(_QWORD *)(a1 + 64);
          v340 = (unsigned int *)(v392 + 8 * (v381 & ~v384));
          v341 = v340 + 1;
          v342 = v381 + 9;
          v770 = 0;
          if (v720)
            v393 = 4;
          else
            v393 = 3;
          v394 = v381 - v387;
          v395 = v720;
          v396 = (v732 - 1);
          while (1)
          {
            if (v395 == 3)
            {
              v397 = *v294 - 1;
              if (*v294 - 2 >= v394)
                goto LABEL_571;
            }
            else
            {
              v397 = v294[v395];
              if (v397 - 1 >= v394)
                goto LABEL_571;
            }
            if (v381 - v397 < v390 || *(_DWORD *)v758 != *(_DWORD *)&v758[-v397])
              goto LABEL_571;
            v399 = &v382[-v397];
            if (v762 > (unint64_t)v382)
            {
              v400 = v758 + 4;
              v401 = *(_QWORD *)v382 ^ *(_QWORD *)v399;
              if (v401)
              {
                v402 = __clz(__rbit64(v401)) >> 3;
              }
              else
              {
                do
                {
                  v399 += 8;
                  if ((unint64_t)++v400 >= v762)
                    goto LABEL_590;
                  v403 = *v400 ^ *(_QWORD *)v399;
                }
                while (!v403);
                v402 = (char *)v400 + (__clz(__rbit64(v403)) >> 3) - v382;
              }
              v404 = v402 + 4;
              v405 = v404;
              if (v396 >= v404)
                goto LABEL_571;
LABEL_598:
              v406 = &v761[2 * v291];
              *v406 = v395 + ((int)(v720 << 31) >> 31);
              v406[1] = v404;
              ++v291;
              if (v404 > v379)
                goto LABEL_713;
              v396 = v405;
              if (&v758[v405] == (unsigned __int8 *)v760)
                goto LABEL_713;
              goto LABEL_571;
            }
            v400 = v758 + 4;
LABEL_590:
            if ((unint64_t)v400 >= v751)
            {
              if ((unint64_t)v400 >= v750)
                goto LABEL_594;
            }
            else
            {
              if (*(_DWORD *)v399 == *(_DWORD *)v400)
              {
                v400 = (_QWORD *)((char *)v400 + 4);
                v399 += 4;
              }
              if ((unint64_t)v400 >= v750)
              {
LABEL_594:
                if ((unint64_t)v400 >= v760)
                  goto LABEL_597;
LABEL_595:
                if (*v399 == *(_BYTE *)v400)
                  LODWORD(v400) = (_DWORD)v400 + 1;
                goto LABEL_597;
              }
            }
            if (*(unsigned __int16 *)v399 == *(unsigned __int16 *)v400)
            {
              v400 = (_QWORD *)((char *)v400 + 2);
              v399 += 2;
            }
            if ((unint64_t)v400 < v760)
              goto LABEL_595;
LABEL_597:
            v404 = (_DWORD)v400 - (_DWORD)v758;
            v405 = v404;
            if (v396 < v404)
              goto LABEL_598;
LABEL_571:
            if (++v395 >= v393)
            {
              *(_DWORD *)(v713 + 4 * v708) = v381;
              if (v383 >= v391)
              {
                v441 = 0;
                v442 = 0;
                v443 = ~(-1 << v704);
                v444 = v381 + 2;
                v722 = (char *)v718 + v255;
                v715 = v380 + 8;
                while (1)
                {
                  v445 = v442 >= v441 ? v441 : v442;
                  v446 = v380 + v383;
                  v447 = &v758[v445];
                  v448 = (_QWORD *)(v446 + v445);
                  if (v762 <= (unint64_t)&v758[v445])
                    break;
                  v449 = *(_QWORD *)v447 ^ *v448;
                  if (v449)
                  {
                    v450 = (__clz(__rbit64(v449)) >> 3) + v445;
                    v451 = (unsigned __int8 *)v760;
                    if (v450 <= v396)
                      goto LABEL_677;
                    goto LABEL_690;
                  }
                  v457 = 0;
                  v458 = &v722[v445];
                  do
                  {
                    v459 = &v458[v457];
                    if ((unint64_t)&v458[v457] >= v762)
                    {
                      v453 = &v722[v445 + v457];
                      v448 = (_QWORD *)(v715 + v445 + v383 + v457);
                      if ((unint64_t)v453 >= v751)
                        goto LABEL_681;
                      goto LABEL_679;
                    }
                    v460 = *(_QWORD *)(v715 + v445 + v383 + v457);
                    v457 += 8;
                    v461 = *(_QWORD *)v459 ^ v460;
                  }
                  while (!v461);
                  v450 = v457 + (__clz(__rbit64(v461)) >> 3) + v445;
                  v451 = (unsigned __int8 *)v760;
                  if (v450 <= v396)
                  {
LABEL_677:
                    v368 = a1;
                    v452 = v758;
                    goto LABEL_696;
                  }
LABEL_690:
                  if (v450 > v342 - v383)
                    v342 = v383 + v450;
                  v454 = &v761[2 * v291];
                  *v454 = v444 - v383;
                  v454[1] = v450;
                  ++v291;
                  v452 = v758;
                  v455 = v450 > 0x1000 || &v758[v450] == v451;
                  v396 = v450;
                  v368 = a1;
                  if (v455)
                    goto LABEL_712;
LABEL_696:
                  v456 = (unsigned int *)(v392 + 8 * (v383 & v385));
                  if (*(unsigned __int8 *)(v446 + v450) < *((unsigned __int8 *)v452 + v450))
                  {
                    *v340 = v383;
                    if (v383 > v729)
                    {
                      ++v456;
                      v442 = v450;
                      v340 = v456;
                      v232 = v443-- != 0;
                      if (!v232)
                        goto LABEL_712;
                      goto LABEL_670;
                    }
LABEL_840:
                    v340 = (unsigned int *)&v770;
                    goto LABEL_712;
                  }
                  *v341 = v383;
                  if (v383 <= v729)
                    goto LABEL_841;
                  v441 = v450;
                  v341 = (unsigned int *)(v392 + 8 * (v383 & v385));
                  v232 = v443-- != 0;
                  if (!v232)
                    goto LABEL_712;
LABEL_670:
                  v383 = *v456;
                  if (*v456 < v391)
                    goto LABEL_712;
                }
                v453 = (char *)&v758[v445];
                if ((unint64_t)v447 >= v751)
                  goto LABEL_681;
LABEL_679:
                if (*(_DWORD *)v448 == *(_DWORD *)v453)
                {
                  v453 += 4;
                  v448 = (_QWORD *)((char *)v448 + 4);
                }
LABEL_681:
                if ((unint64_t)v453 >= v750)
                {
                  if ((unint64_t)v453 >= v760)
                    goto LABEL_689;
                }
                else
                {
                  if (*(unsigned __int16 *)v448 == *(unsigned __int16 *)v453)
                  {
                    v453 += 2;
                    v448 = (_QWORD *)((char *)v448 + 2);
                  }
                  if ((unint64_t)v453 >= v760)
                  {
LABEL_689:
                    v450 = v453 - (char *)v758;
                    v451 = (unsigned __int8 *)v760;
                    if (v450 <= v396)
                      goto LABEL_677;
                    goto LABEL_690;
                  }
                }
                if (*(unsigned __int8 *)v448 == *v453)
                  ++v453;
                goto LABEL_689;
              }
LABEL_711:
              v368 = a1;
              goto LABEL_712;
            }
          }
        }
        v291 = 0;
        if (v292 != 3)
        {
          if (*(_DWORD *)(a1 + 212) >= 0xFFFu)
            v407 = 4095;
          else
            v407 = *(_DWORD *)(a1 + 212);
          v408 = *(_QWORD *)(a1 + 8);
          v409 = (_DWORD)v758 - v408;
          v410 = (char *)(v758 + 4);
          v705 = *(_DWORD *)(a1 + 204);
          v709 = (-1640531535 * *(_DWORD *)v758) >> -(char)*(_DWORD *)(a1 + 200);
          v714 = *(_QWORD *)(a1 + 48);
          v411 = *(_DWORD *)(v714 + 4 * v709);
          v412 = -1 << (*(_DWORD *)(a1 + 196) - 1);
          v413 = ~v412;
          v414 = (_DWORD)v758 - v408 + v412 + 1;
          if ((int)v758 - (int)v408 < ~v412)
            v414 = 0;
          v730 = v414;
          v415 = *(_DWORD *)(a1 + 24);
          v416 = 1 << *(_DWORD *)(a1 + 192);
          if (v409 - *(_DWORD *)(a1 + 28) > v416 && *(_DWORD *)(a1 + 32) == 0)
            v418 = v409 - v416;
          else
            v418 = *(_DWORD *)(a1 + 28);
          if (v418 <= 1)
            v419 = 1;
          else
            v419 = v418;
          v420 = *(_QWORD *)(a1 + 64);
          v340 = (unsigned int *)(v420 + 8 * (v409 & ~v412));
          v341 = v340 + 1;
          v342 = v409 + 9;
          v770 = 0;
          if (v720)
            v421 = 4;
          else
            v421 = 3;
          v422 = v409 - v415;
          v423 = v720;
          v424 = (v732 - 1);
          while (1)
          {
            if (v423 == 3)
            {
              v425 = *v294 - 1;
              if (*v294 - 2 >= v422)
                goto LABEL_624;
            }
            else
            {
              v425 = v294[v423];
              if (v425 - 1 >= v422)
                goto LABEL_624;
            }
            if (v409 - v425 < v418 || *(_DWORD *)v758 != *(_DWORD *)&v758[-v425])
              goto LABEL_624;
            v427 = &v410[-v425];
            if (v762 > (unint64_t)v410)
            {
              v428 = v758 + 4;
              v429 = *(_QWORD *)v410 ^ *(_QWORD *)v427;
              if (v429)
              {
                v430 = __clz(__rbit64(v429)) >> 3;
              }
              else
              {
                do
                {
                  v427 += 8;
                  if ((unint64_t)++v428 >= v762)
                    goto LABEL_643;
                  v431 = *v428 ^ *(_QWORD *)v427;
                }
                while (!v431);
                v430 = (char *)v428 + (__clz(__rbit64(v431)) >> 3) - v410;
              }
              v432 = v430 + 4;
              v433 = v432;
              if (v424 >= v432)
                goto LABEL_624;
LABEL_651:
              v434 = &v761[2 * v291];
              *v434 = v423 + ((int)(v720 << 31) >> 31);
              v434[1] = v432;
              ++v291;
              if (v432 > v407)
                goto LABEL_713;
              v424 = v433;
              if (&v758[v433] == (unsigned __int8 *)v760)
                goto LABEL_713;
              goto LABEL_624;
            }
            v428 = v758 + 4;
LABEL_643:
            if ((unint64_t)v428 >= v751)
            {
              if ((unint64_t)v428 >= v750)
                goto LABEL_647;
            }
            else
            {
              if (*(_DWORD *)v427 == *(_DWORD *)v428)
              {
                v428 = (_QWORD *)((char *)v428 + 4);
                v427 += 4;
              }
              if ((unint64_t)v428 >= v750)
              {
LABEL_647:
                if ((unint64_t)v428 >= v760)
                  goto LABEL_650;
LABEL_648:
                if (*v427 == *(_BYTE *)v428)
                  LODWORD(v428) = (_DWORD)v428 + 1;
                goto LABEL_650;
              }
            }
            if (*(unsigned __int16 *)v427 == *(unsigned __int16 *)v428)
            {
              v428 = (_QWORD *)((char *)v428 + 2);
              v427 += 2;
            }
            if ((unint64_t)v428 < v760)
              goto LABEL_648;
LABEL_650:
            v432 = (_DWORD)v428 - (_DWORD)v758;
            v433 = v432;
            if (v424 < v432)
              goto LABEL_651;
LABEL_624:
            if (++v423 >= v421)
            {
              *(_DWORD *)(v714 + 4 * v709) = v409;
              if (v411 < v419)
                goto LABEL_711;
              v502 = 0;
              v503 = 0;
              v504 = ~(-1 << v705);
              v505 = v409 + 2;
              v723 = (char *)v718 + v255;
              v716 = v408 + 8;
              while (1)
              {
                v506 = v503 >= v502 ? v502 : v503;
                v507 = v408 + v411;
                v508 = &v758[v506];
                v509 = (_QWORD *)(v507 + v506);
                if (v762 <= (unint64_t)&v758[v506])
                  break;
                v510 = *(_QWORD *)v508 ^ *v509;
                if (v510)
                {
                  v511 = (__clz(__rbit64(v510)) >> 3) + v506;
                  v512 = (unsigned __int8 *)v760;
                  if (v511 <= v424)
                    goto LABEL_766;
                  goto LABEL_779;
                }
                v518 = 0;
                v519 = &v723[v506];
                do
                {
                  v520 = &v519[v518];
                  if ((unint64_t)&v519[v518] >= v762)
                  {
                    v514 = &v723[v506 + v518];
                    v509 = (_QWORD *)(v716 + v506 + v411 + v518);
                    if ((unint64_t)v514 >= v751)
                      goto LABEL_770;
                    goto LABEL_768;
                  }
                  v521 = *(_QWORD *)(v716 + v506 + v411 + v518);
                  v518 += 8;
                  v522 = *(_QWORD *)v520 ^ v521;
                }
                while (!v522);
                v511 = v518 + (__clz(__rbit64(v522)) >> 3) + v506;
                v512 = (unsigned __int8 *)v760;
                if (v511 <= v424)
                {
LABEL_766:
                  v368 = a1;
                  v513 = v758;
                  goto LABEL_785;
                }
LABEL_779:
                if (v511 > v342 - v411)
                  v342 = v411 + v511;
                v515 = &v761[2 * v291];
                *v515 = v505 - v411;
                v515[1] = v511;
                ++v291;
                v513 = v758;
                v516 = v511 > 0x1000 || &v758[v511] == v512;
                v424 = v511;
                v368 = a1;
                if (v516)
                  goto LABEL_712;
LABEL_785:
                v517 = (unsigned int *)(v420 + 8 * (v411 & v413));
                if (*(unsigned __int8 *)(v507 + v511) >= *((unsigned __int8 *)v513 + v511))
                {
                  *v341 = v411;
                  if (v411 > v730)
                  {
                    v502 = v511;
                    v341 = (unsigned int *)(v420 + 8 * (v411 & v413));
                    v232 = v504-- != 0;
                    if (v232)
                      goto LABEL_759;
LABEL_712:
                    *v341 = 0;
                    *v340 = 0;
                    *(_DWORD *)(v368 + 36) = v342 - 8;
LABEL_713:
                    v7 = v760;
                    v16 = v11 + 7;
                    v18 = a1;
                    LODWORD(v256) = (_DWORD)v758;
                    goto LABEL_714;
                  }
LABEL_841:
                  v341 = (unsigned int *)&v770;
                  goto LABEL_712;
                }
                *v340 = v411;
                if (v411 <= v730)
                  goto LABEL_840;
                ++v517;
                v503 = v511;
                v340 = v517;
                v232 = v504-- != 0;
                if (!v232)
                  goto LABEL_712;
LABEL_759:
                v411 = *v517;
                if (*v517 < v419)
                  goto LABEL_712;
              }
              v514 = (char *)&v758[v506];
              if ((unint64_t)v508 >= v751)
                goto LABEL_770;
LABEL_768:
              if (*(_DWORD *)v509 == *(_DWORD *)v514)
              {
                v514 += 4;
                v509 = (_QWORD *)((char *)v509 + 4);
              }
LABEL_770:
              if ((unint64_t)v514 >= v750)
              {
                if ((unint64_t)v514 >= v760)
                  goto LABEL_778;
              }
              else
              {
                if (*(unsigned __int16 *)v509 == *(unsigned __int16 *)v514)
                {
                  v514 += 2;
                  v509 = (_QWORD *)((char *)v509 + 2);
                }
                if ((unint64_t)v514 >= v760)
                {
LABEL_778:
                  v511 = v514 - (char *)v758;
                  v512 = (unsigned __int8 *)v760;
                  if (v511 <= v424)
                    goto LABEL_766;
                  goto LABEL_779;
                }
              }
              if (*(unsigned __int8 *)v509 == *v514)
                ++v514;
              goto LABEL_778;
            }
          }
        }
        if (*(_DWORD *)(a1 + 212) >= 0xFFFu)
          v295 = 4095;
        else
          v295 = *(_DWORD *)(a1 + 212);
        v296 = *(_QWORD *)(a1 + 8);
        v297 = (_DWORD)v758 - v296;
        v298 = (char *)(v758 + 3);
        v702 = *(_DWORD *)(a1 + 204);
        v706 = (-1640531535 * *(_DWORD *)v758) >> -(char)*(_DWORD *)(a1 + 200);
        v710 = *(_QWORD *)(a1 + 48);
        v299 = *(_DWORD *)(v710 + 4 * v706);
        v300 = *(_QWORD *)(a1 + 64);
        v301 = -1 << (*(_DWORD *)(a1 + 196) - 1);
        v302 = ~v301;
        v303 = (_DWORD)v758 - v296 + v301 + 1;
        if ((int)v758 - (int)v296 < ~v301)
          v303 = 0;
        v727 = v303;
        v304 = *(_DWORD *)(a1 + 24);
        v305 = 1 << *(_DWORD *)(a1 + 192);
        if (v297 - *(_DWORD *)(a1 + 28) > v305 && *(_DWORD *)(a1 + 32) == 0)
          v307 = v297 - v305;
        else
          v307 = *(_DWORD *)(a1 + 28);
        if (v307 <= 1)
          v308 = 1;
        else
          v308 = v307;
        v309 = (unsigned int *)(v300 + 8 * (v297 & ~v301));
        v310 = v309 + 1;
        v311 = v297 + 9;
        v770 = 0;
        if (v720)
          v312 = 4;
        else
          v312 = 3;
        v313 = v297 - v304;
        v314 = v720;
        v315 = (v732 - 1);
        while (2)
        {
          if (v314 != 3)
          {
            v316 = v294[v314];
            if (v316 - 1 < v313)
              goto LABEL_428;
            goto LABEL_423;
          }
          v316 = *v294 - 1;
          if (*v294 - 2 >= v313)
            goto LABEL_423;
LABEL_428:
          if (v297 - v316 >= v307 && ((*(_DWORD *)&v758[-v316] ^ *(_DWORD *)v758) & 0xFFFFFF) == 0)
          {
            v318 = &v298[-v316];
            if (v762 > (unint64_t)v298)
            {
              v319 = v758 + 3;
              v320 = *(_QWORD *)v298 ^ *(_QWORD *)v318;
              if (v320)
              {
                v321 = __clz(__rbit64(v320)) >> 3;
              }
              else
              {
                do
                {
                  v318 += 8;
                  if ((unint64_t)++v319 >= v762)
                    goto LABEL_442;
                  v322 = *v319 ^ *(_QWORD *)v318;
                }
                while (!v322);
                v321 = (char *)v319 + (__clz(__rbit64(v322)) >> 3) - v298;
              }
              v323 = v321 + 3;
              v324 = v323;
              if (v315 >= v323)
                goto LABEL_423;
              goto LABEL_450;
            }
            v319 = v758 + 3;
LABEL_442:
            if ((unint64_t)v319 >= v751)
            {
              if ((unint64_t)v319 >= v750)
                goto LABEL_446;
            }
            else
            {
              if (*(_DWORD *)v318 == *(_DWORD *)v319)
              {
                v319 = (_QWORD *)((char *)v319 + 4);
                v318 += 4;
              }
              if ((unint64_t)v319 >= v750)
              {
LABEL_446:
                if ((unint64_t)v319 >= v760)
                  goto LABEL_449;
                goto LABEL_447;
              }
            }
            if (*(unsigned __int16 *)v318 == *(unsigned __int16 *)v319)
            {
              v319 = (_QWORD *)((char *)v319 + 2);
              v318 += 2;
            }
            if ((unint64_t)v319 >= v760)
            {
LABEL_449:
              v323 = (_DWORD)v319 - (_DWORD)v758;
              v324 = v323;
              if (v315 >= v323)
                goto LABEL_423;
LABEL_450:
              v325 = &v761[2 * v291];
              *v325 = v314 + ((int)(v720 << 31) >> 31);
              v325[1] = v323;
              ++v291;
              if (v323 > v295)
                goto LABEL_713;
              v315 = v324;
              if (&v758[v324] == (unsigned __int8 *)v760)
                goto LABEL_713;
              goto LABEL_423;
            }
LABEL_447:
            if (*v318 == *(_BYTE *)v319)
              LODWORD(v319) = (_DWORD)v319 + 1;
            goto LABEL_449;
          }
LABEL_423:
          if (++v314 < v312)
            continue;
          break;
        }
        if (v315 > 2)
        {
          v7 = v760;
          v16 = v11 + 7;
          v18 = a1;
          goto LABEL_756;
        }
        v18 = a1;
        v435 = *(_QWORD *)(a1 + 56);
        v436 = *(_DWORD *)v758;
        v437 = 32 - *(_DWORD *)(a1 + 40);
        v7 = v760;
        if (v701 < v297)
        {
          v438 = v701;
          do
          {
            *(_DWORD *)(v435 + 4 * ((900185344 * *(_DWORD *)(v296 + v438)) >> v437)) = v438;
            ++v438;
          }
          while (v745 - (_DWORD)v296 != v438);
        }
        v439 = *(unsigned int *)(v435 + 4 * ((900185344 * v436) >> v437));
        v440 = v439 >= v308 && (v297 - v439) >> 18 == 0;
        v16 = v11 + 7;
        if (!v440)
        {
          v701 = (_DWORD)v758 - v296;
          goto LABEL_756;
        }
        v544 = (_DWORD *)(v296 + v439);
        if (v762 <= (unint64_t)v758)
        {
          v547 = v758;
          if ((unint64_t)v758 < v751)
          {
LABEL_847:
            if (*v544 == *(_DWORD *)v547)
            {
              v547 += 4;
              ++v544;
            }
          }
          goto LABEL_849;
        }
        v545 = *(_QWORD *)v758 ^ *(_QWORD *)v544;
        if (!v545)
        {
          v549 = 0;
          v550 = (char *)v718 + v255;
          while (1)
          {
            v551 = &v550[v549];
            if ((unint64_t)&v550[v549] >= v762)
              break;
            v552 = *(_QWORD *)(v296 + v439 + 8 + v549);
            v549 += 8;
            v553 = *(_QWORD *)v551 ^ v552;
            if (v553)
            {
              v546 = v549 + (__clz(__rbit64(v553)) >> 3);
              v701 = (_DWORD)v758 - v296;
              if (v546 < 3)
                goto LABEL_756;
              goto LABEL_858;
            }
          }
          v547 = (unsigned __int8 *)v718 + v255 + v549;
          v544 = (_DWORD *)(v296 + v439 + v549 + 8);
          if ((unint64_t)v547 < v751)
            goto LABEL_847;
LABEL_849:
          if ((unint64_t)v547 >= v750)
          {
            if ((unint64_t)v547 >= v760)
              goto LABEL_857;
          }
          else
          {
            if (*(unsigned __int16 *)v544 == *(unsigned __int16 *)v547)
            {
              v547 += 2;
              v544 = (_DWORD *)((char *)v544 + 2);
            }
            if ((unint64_t)v547 >= v760)
            {
LABEL_857:
              v546 = v547 - v758;
              v701 = (_DWORD)v758 - v296;
              if (v546 >= 3)
                goto LABEL_858;
              goto LABEL_756;
            }
          }
          if (*(unsigned __int8 *)v544 == *v547)
            ++v547;
          goto LABEL_857;
        }
        v546 = __clz(__rbit64(v545)) >> 3;
        v701 = (_DWORD)v758 - v296;
        if (v546 >= 3)
        {
LABEL_858:
          *v761 = v297 - v439 + 2;
          v761[1] = v546;
          LODWORD(v256) = (_DWORD)v758;
          if (v546 > v295 || &v758[v546] == (unsigned __int8 *)v760)
          {
            v291 = 1;
            v701 = (_DWORD)v758 - v296;
            *(_DWORD *)(a1 + 36) = v297 + 1;
            goto LABEL_714;
          }
          v291 = 1;
          v701 = (_DWORD)v758 - v296;
          v315 = v546;
        }
LABEL_756:
        *(_DWORD *)(v710 + 4 * v706) = v297;
        if (v299 < v308)
          goto LABEL_757;
        v523 = 0;
        v524 = 0;
        v525 = ~(-1 << v702);
        v526 = v297 + 2;
        v724 = (char *)v718 + v255;
        v717 = v296 + 8;
        while (2)
        {
          if (v524 >= v523)
            v527 = v523;
          else
            v527 = v524;
          v528 = v296 + v299;
          v529 = &v758[v527];
          v530 = (_DWORD *)(v528 + v527);
          if (v762 <= (unint64_t)&v758[v527])
          {
            v535 = (char *)&v758[v527];
            v532 = v761;
            if ((unint64_t)v529 < v751)
            {
LABEL_809:
              if (*v530 == *(_DWORD *)v535)
              {
                v535 += 4;
                ++v530;
              }
            }
          }
          else
          {
            v531 = *(_QWORD *)v529 ^ *(_QWORD *)v530;
            v532 = v761;
            if (v531)
            {
              v533 = (__clz(__rbit64(v531)) >> 3) + v527;
              v7 = v760;
              if (v533 <= v315)
                goto LABEL_807;
LABEL_820:
              if (v533 > v311 - v299)
                v311 = v299 + v533;
              v536 = &v532[2 * v291];
              *v536 = v526 - v299;
              v536[1] = v533;
              ++v291;
              v534 = v758;
              v537 = v533 > 0x1000 || &v758[v533] == (unsigned __int8 *)v7;
              v315 = v533;
              v18 = a1;
              v16 = v11 + 7;
              if (v537)
                goto LABEL_757;
              goto LABEL_826;
            }
            v539 = 0;
            v540 = &v724[v527];
            while (1)
            {
              v541 = &v540[v539];
              if ((unint64_t)&v540[v539] >= v762)
                break;
              v542 = *(_QWORD *)(v717 + v527 + v299 + v539);
              v539 += 8;
              v543 = *(_QWORD *)v541 ^ v542;
              if (v543)
              {
                v533 = v539 + (__clz(__rbit64(v543)) >> 3) + v527;
                v7 = v760;
                if (v533 > v315)
                  goto LABEL_820;
                goto LABEL_807;
              }
            }
            v535 = &v724[v527 + v539];
            v530 = (_DWORD *)(v717 + v527 + v299 + v539);
            if ((unint64_t)v535 < v751)
              goto LABEL_809;
          }
          if ((unint64_t)v535 >= v750)
          {
            if ((unint64_t)v535 < v760)
              goto LABEL_817;
          }
          else
          {
            if (*(unsigned __int16 *)v530 == *(unsigned __int16 *)v535)
            {
              v535 += 2;
              v530 = (_DWORD *)((char *)v530 + 2);
            }
            if ((unint64_t)v535 >= v760)
              goto LABEL_819;
LABEL_817:
            if (*(unsigned __int8 *)v530 == *v535)
              ++v535;
          }
LABEL_819:
          v533 = v535 - (char *)v758;
          v7 = v760;
          if (v533 > v315)
            goto LABEL_820;
LABEL_807:
          v18 = a1;
          v16 = v11 + 7;
          v534 = v758;
LABEL_826:
          v538 = (unsigned int *)(v300 + 8 * (v299 & v302));
          if (*(unsigned __int8 *)(v528 + v533) < *((unsigned __int8 *)v534 + v533))
          {
            *v309 = v299;
            if (v299 <= v727)
            {
              v309 = (unsigned int *)&v770;
              goto LABEL_757;
            }
            ++v538;
            v524 = v533;
            v309 = v538;
            v232 = v525-- != 0;
            if (!v232)
              goto LABEL_757;
            goto LABEL_800;
          }
          *v310 = v299;
          if (v299 > v727)
          {
            v523 = v533;
            v310 = (unsigned int *)(v300 + 8 * (v299 & v302));
            v232 = v525-- != 0;
            if (!v232)
              goto LABEL_757;
LABEL_800:
            v299 = *v538;
            if (*v538 < v308)
              goto LABEL_757;
            continue;
          }
          break;
        }
        v310 = (unsigned int *)&v770;
LABEL_757:
        *v310 = 0;
        *v309 = 0;
        LODWORD(v256) = (_DWORD)v758;
        *(_DWORD *)(v18 + 36) = v311 - 8;
LABEL_714:
        v766 = v291;
        ZSTD_optLdm_processMatchCandidate((uint64_t *)&v767, (uint64_t)v761, &v766, (_DWORD)v256 - (_DWORD)v747, v7 - (_DWORD)v256);
        v462 = v766;
        if (!v766)
        {
LABEL_754:
          v248 = v759;
          v250 = v255 + 1;
          v249 = v745;
          v251 = v748;
          goto LABEL_357;
        }
        v463 = v766 - 1;
        v209 = v761[2 * v463 + 1];
        if (v209 <= v731 && v209 + v255 <= 0xFFF)
        {
          v464 = 0;
          v465 = v735 + v736;
          v466 = v765;
          while (1)
          {
            v467 = &v761[2 * v464];
            v468 = v732;
            if (v464)
              v468 = *(v467 - 1) + 1;
            v469 = v467[1];
            if (v469 >= v468)
              break;
LABEL_719:
            if (++v464 == v462)
              goto LABEL_754;
          }
          v470 = *v467;
          v471 = __clz(v470 + 1) ^ 0x1F;
          if (*(_DWORD *)(v18 + 160) == 1)
          {
            v472 = 0;
            v473 = ((_DWORD)v471 << 8) + 4096;
            v474 = v255 + v469;
            v475 = v255 + v469;
            while (1)
            {
              v477 = v469 + v255;
              v478 = v465 + v473 + ((__clz(v469 - 2) << 8) ^ 0x1F00);
              if (v477 <= v247)
              {
                if (v478 >= (int)v11[7 * v477])
                  goto LABEL_719;
                goto LABEL_726;
              }
              v479 = v247;
              v480 = (v474 - v472) - (unint64_t)v247;
              if (v480 >= 2)
              {
                v247 = (v480 & 0xFFFFFFFFFFFFFFFELL) + v247;
                v481 = (v475 - v479) & 0xFFFFFFFFFFFFFFFELL;
                v482 = &v763[7 * v479];
                do
                {
                  *(v482 - 7) = 0x40000000;
                  *v482 = 0x40000000;
                  v482 += 14;
                  v481 -= 2;
                }
                while (v481);
                v466 = v765;
                if (v480 == (v480 & 0xFFFFFFFFFFFFFFFELL))
                  goto LABEL_726;
              }
              else
              {
                v247 = v247;
              }
              v483 = &v16[7 * v247];
              do
              {
                ++v247;
                *v483 = 0x40000000;
                v483 += 7;
              }
              while (v247 < v477);
LABEL_726:
              v476 = (signed int *)&v11[7 * v477];
              v476[2] = v469;
              v476[3] = v466;
              *v476 = v478;
              v476[1] = v470;
              --v469;
              ++v472;
              --v475;
              if (v469 < v468)
                goto LABEL_719;
            }
          }
          v484 = 0;
          if (v471 <= 0x13)
            v485 = 53;
          else
            v485 = ((_DWORD)v471 << 9) - 9675;
          v486 = *(_DWORD *)(v18 + 152);
          v487 = *(_QWORD *)(v18 + 96);
          v488 = *(_QWORD *)(v18 + 104);
          v489 = v485 + *(_DWORD *)(v18 + 156);
          v490 = v255 + v469;
          v491 = v255 + v469;
          while (2)
          {
            v493 = v469 - 3;
            if (v469 - 3 < 0x80)
              v494 = ZSTD_MLcode_ML_Code[v493];
            else
              v494 = 67 - __clz(v493);
            v495 = v469 + v255;
            v496 = v465
                 + v489
                 + ((__clz(*(_DWORD *)(v488 + 4 * v471) + 1) << 8) ^ 0xFFFFE0FF)
                 + v486
                 + ((ML_bits[v494] + (_DWORD)v471) << 8)
                 + ((__clz(*(_DWORD *)(v487 + 4 * v494) + 1) << 8) ^ 0xFFFFE0FF);
            if (v495 <= v247)
            {
              if (v496 >= (int)v11[7 * v495])
              {
                v466 = v765;
                goto LABEL_719;
              }
            }
            else
            {
              v497 = v247;
              v498 = (v490 - v484) - (unint64_t)v247;
              if (v498 < 2)
              {
                v247 = v247;
                goto LABEL_751;
              }
              v247 = (v498 & 0xFFFFFFFFFFFFFFFELL) + v247;
              v499 = (v491 - v497) & 0xFFFFFFFFFFFFFFFELL;
              v500 = &v763[7 * v497];
              do
              {
                *(v500 - 7) = 0x40000000;
                *v500 = 0x40000000;
                v500 += 14;
                v499 -= 2;
              }
              while (v499);
              v16 = v11 + 7;
              if (v498 != (v498 & 0xFFFFFFFFFFFFFFFELL))
              {
LABEL_751:
                v501 = &v16[7 * v247];
                do
                {
                  ++v247;
                  *v501 = 0x40000000;
                  v501 += 7;
                }
                while (v247 < v495);
              }
            }
            v466 = v765;
            v492 = (signed int *)&v11[7 * v495];
            v492[2] = v469;
            v492[3] = v765;
            *v492 = v496;
            v492[1] = v470;
            --v469;
            ++v484;
            --v491;
            if (v469 < v468)
              goto LABEL_719;
            continue;
          }
        }
        v205 = v765;
        if (*v725)
          v685 = 0;
        else
          v685 = v11[7 * v255 + 3];
        v23 = v733;
        v210 = v734;
        v216 = v761[2 * v463];
        v691 = v255 - v685;
        if (v691 <= 0x1000)
          v215 = v691;
        else
          v215 = 0;
        v17 = v752;
        if (!v209)
        {
LABEL_1113:
          v692 = &v11[7 * v215];
          v693 = *((_QWORD *)v692 + 2);
          a3[2] = v692[6];
          *(_QWORD *)a3 = v693;
          goto LABEL_892;
        }
LABEL_878:
        v555 = &v11[7 * v215 + 4];
        if (v216 < 3)
        {
          if (v205)
            v560 = v216;
          else
            v560 = v216 + 1;
          if (v560)
          {
            if (v560 == 3)
            {
              v557 = *v555;
              v559 = v557 - 1;
            }
            else
            {
              v559 = v555[v560];
              v557 = *v555;
            }
            v571 = v560 > 1;
            v562 = 2;
            if (v571)
              v562 = 1;
            v556 = &v555[v562];
          }
          else
          {
            v561 = *(_QWORD *)v555;
            v556 = &v11[7 * v215 + 6];
            v559 = v561;
            v557 = HIDWORD(v561);
          }
        }
        else
        {
          v558 = *v555;
          v556 = &v11[7 * v215 + 5];
          v557 = v558;
          v559 = v216 - 2;
        }
        v563 = *v556;
        *(_QWORD *)a3 = v559 | (v557 << 32);
        a3[2] = v563;
LABEL_892:
        v564 = v215 + 1;
        v565 = &v11[7 * v215 + 7];
        *v565 = v726;
        v565[1] = v216;
        v565[2] = v209;
        v565[3] = v205;
        *((_QWORD *)v565 + 2) = v771;
        v565[6] = v772;
        v566 = v215;
        if (!v215)
        {
          v572 = 1;
          v573 = a2;
          goto LABEL_902;
        }
        do
        {
          v567 = &v11[7 * v566];
          v568 = v567[3] + v567[2];
          v569 = &v11[7 * v215];
          v570 = *(_OWORD *)v567;
          *(_OWORD *)(v569 + 3) = *(_OWORD *)(v567 + 3);
          *(_OWORD *)v569 = v570;
          --v215;
          v232 = v566 >= v568;
          v566 -= v568;
          v571 = v566 != 0 && v232;
          if (!v232)
            v566 = 0;
        }
        while (v571);
        v572 = v215 + 1;
        v573 = a2;
        if (v572 <= v564)
        {
          while (1)
          {
LABEL_902:
            while (1)
            {
              v574 = v572;
              v576 = v11[7 * v572 + 2];
              v575 = v11[7 * v572 + 3];
              if (v576)
                break;
              v14 = &v17[v575];
              v572 = v574 + 1;
              if (v574 + 1 > v564)
                goto LABEL_898;
            }
            v577 = v11[7 * v574 + 1];
            if (*(_DWORD *)(v18 + 176) != 2)
            {
              if ((_DWORD)v575)
              {
                v578 = *v210;
                v579 = v17;
                v580 = v575;
                do
                {
                  v581 = *v579++;
                  *(_DWORD *)&v578[4 * v581] += 2;
                  --v580;
                }
                while (v580);
              }
              *(_DWORD *)(v18 + 128) += 2 * v575;
            }
            v582 = v575 < 0x40 ? ZSTD_LLcode_LL_Code[v575] : 50 - __clz(v575);
            ++*(_DWORD *)(*(_QWORD *)(v18 + 88) + 4 * v582);
            ++*(_DWORD *)(v18 + 132);
            v583 = v577 + 1;
            v584 = __clz(v577 + 1);
            ++*(_DWORD *)(*(_QWORD *)(v18 + 104) + 4 * (v584 ^ 0x1F));
            ++*(_DWORD *)(v18 + 140);
            v585 = v576 - 3;
            v586 = v576 - 3 < 0x80 ? ZSTD_MLcode_ML_Code[v585] : 67 - __clz(v585);
            ++*(_DWORD *)(*(_QWORD *)(v18 + 96) + 4 * v586);
            ++*(_DWORD *)(v18 + 136);
            v587 = &v17[v575];
            v588 = *(char **)(v573 + 24);
            if ((unint64_t)&v17[v575] > v23)
              break;
            *(_OWORD *)v588 = *(_OWORD *)v17;
            v591 = *(_QWORD *)(v573 + 24);
            if (v575 > 0x10)
            {
              v592 = (_OWORD *)(v591 + 16);
              v593 = v591 + v575;
              v594 = (__int128 *)(v17 + 16);
              do
              {
                v595 = *v594++;
                *v592++ = v595;
              }
              while ((unint64_t)v592 < v593);
LABEL_947:
              *(_QWORD *)(v573 + 24) += v575;
              v602 = *(_QWORD *)(v573 + 8);
              if (v575 >= 0x10000)
              {
                v613 = (unint64_t)(v602 - *(_QWORD *)v573) >> 3;
                *(_DWORD *)(v573 + 72) = 1;
                *(_DWORD *)(v573 + 76) = v613;
              }
              goto LABEL_949;
            }
            *(_QWORD *)(v573 + 24) = v591 + v575;
            v602 = *(_QWORD *)(v573 + 8);
LABEL_949:
            *(_WORD *)(v602 + 4) = v575;
            *(_DWORD *)v602 = v583;
            if (v585 >= 0x10000)
            {
              v614 = (unint64_t)(v602 - *(_QWORD *)v573) >> 3;
              *(_DWORD *)(v573 + 72) = 2;
              *(_DWORD *)(v573 + 76) = v614;
            }
            *(_WORD *)(v602 + 6) = v585;
            *(_QWORD *)(v573 + 8) = v602 + 8;
            v17 += v576 + v575;
            v14 = v17;
            v572 = v574 + 1;
            if (v574 + 1 > v564)
              goto LABEL_898;
          }
          if ((unint64_t)v17 <= v23)
          {
            v590 = &v588[v23 - (_QWORD)v17];
            v596 = v17;
            v597 = *(char **)(v573 + 24);
            do
            {
              v598 = *(_OWORD *)v596;
              v596 += 16;
              *(_OWORD *)v597 = v598;
              v597 += 16;
            }
            while (v597 < v590);
            v589 = (unsigned __int8 *)v23;
            if (v23 >= (unint64_t)v587)
              goto LABEL_947;
          }
          else
          {
            v589 = v17;
            v590 = *(char **)(v573 + 24);
            if (v17 >= v587)
              goto LABEL_947;
          }
          if ((unint64_t)v17 <= v23)
            v599 = (unsigned __int8 *)v23;
          else
            v599 = v17;
          v600 = &v17[v575] - v599;
          if (v600 < 8)
          {
            v601 = v589;
            goto LABEL_946;
          }
          if ((unint64_t)(v588 - (char *)v17) < 0x20)
          {
            v601 = v589;
            goto LABEL_946;
          }
          if (v600 >= 0x20)
          {
            v603 = v600 & 0xFFFFFFFFFFFFFFE0;
            v604 = (__int128 *)(v589 + 16);
            v605 = &v588[v599 - v17 + 16];
            v606 = v600 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v607 = *v604;
              *((_OWORD *)v605 - 1) = *(v604 - 1);
              *(_OWORD *)v605 = v607;
              v604 += 2;
              v605 += 32;
              v606 -= 32;
            }
            while (v606);
            if (v600 == v603)
              goto LABEL_947;
            if ((v600 & 0x18) == 0)
            {
              v601 = &v589[v603];
              v590 += v603;
              goto LABEL_946;
            }
          }
          else
          {
            v603 = 0;
          }
          v590 += v600 & 0xFFFFFFFFFFFFFFF8;
          v601 = &v589[v600 & 0xFFFFFFFFFFFFFFF8];
          v608 = &v589[v603];
          v609 = &v588[&v599[v603] - v17];
          v610 = v603 - (v600 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v611 = *(_QWORD *)v608;
            v608 += 8;
            *(_QWORD *)v609 = v611;
            v609 += 8;
            v610 += 8;
          }
          while (v610);
          if (v600 == (v600 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_947;
          do
          {
LABEL_946:
            v612 = *v601++;
            *v590++ = v612;
          }
          while (v601 < v587);
          goto LABEL_947;
        }
        v14 = v759;
LABEL_898:
        if (*(_DWORD *)(v18 + 176) != 2)
          *(_DWORD *)(v18 + 144) = (__clz(*(_DWORD *)(v18 + 128) + 1) << 8) ^ 0x1F00;
        v19 = (__clz(*(_DWORD *)(v18 + 140) + 1) << 8) ^ 0x1F00;
        *(int8x8_t *)(v18 + 148) = veor_s8((int8x8_t)vshl_n_s32(vclz_s32(vadd_s32(*(int32x2_t *)(v18 + 132), (int32x2_t)0x100000001)), 8uLL), (int8x8_t)0x1F0000001F00);
        *(_DWORD *)(v18 + 156) = v19;
        if ((unint64_t)v14 >= v748)
        {
LABEL_1126:
          v747 = v17;
          return v7 - (_QWORD)v747;
        }
      }
      else
      {
        v14 = v203 + 1;
        v7 = v760;
        if ((unint64_t)(v203 + 1) >= v748)
          goto LABEL_1126;
      }
    }
  }
  return v7 - (_QWORD)v747;
}

unint64_t ZSTD_compressBlock_btultra(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  char **v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int *v11;
  __int128 *v12;
  __int128 v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int32x2_t v21;
  int32x2_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int i;
  int inserted;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  char *v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unint64_t v48;
  char *v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  unsigned int v57;
  unint64_t v58;
  char *v59;
  int v60;
  _DWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  char *v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int *v82;
  int v83;
  unint64_t v84;
  char *v85;
  int v86;
  unint64_t v87;
  unsigned int v88;
  int v89;
  int v90;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  unsigned int v95;
  unint64_t v96;
  char *v97;
  int v98;
  _DWORD *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  unsigned __int8 *v114;
  _DWORD *v115;
  BOOL v116;
  unsigned int *v117;
  BOOL v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  unsigned int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  char *v135;
  unint64_t v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  int v142;
  unint64_t v143;
  unsigned int v144;
  int v145;
  int v146;
  uint64_t v148;
  char *v149;
  unint64_t v150;
  unsigned int v151;
  unint64_t v152;
  char *v153;
  int v154;
  _DWORD *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unsigned int v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  char *v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int *v175;
  unsigned int *v176;
  int v177;
  unint64_t v178;
  char *v179;
  int v180;
  unint64_t v181;
  unsigned int v182;
  int v183;
  int v184;
  uint64_t v186;
  char *v187;
  unint64_t v188;
  unsigned int v189;
  unint64_t v190;
  char *v191;
  int v192;
  _DWORD *v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  BOOL v202;
  unint64_t v203;
  unint64_t v204;
  int v205;
  int v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  char *v210;
  _QWORD *v211;
  unint64_t v212;
  unint64_t v213;
  unsigned __int8 *v214;
  _DWORD *v215;
  BOOL v216;
  unsigned int *v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  unint64_t v222;
  int v223;
  unint64_t v224;
  unint64_t v225;
  int v226;
  int v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  char *v231;
  _QWORD *v232;
  unint64_t v233;
  unint64_t v234;
  unsigned __int8 *v235;
  _DWORD *v236;
  BOOL v237;
  unsigned int *v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  int v246;
  unsigned int v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  char *v251;
  _DWORD *v252;
  unint64_t v253;
  unint64_t v254;
  unsigned __int8 *v255;
  int64_t v256;
  _DWORD *v257;
  BOOL v258;
  unsigned int *v259;
  char *v260;
  char *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  int v266;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  unsigned int v270;
  int v271;
  unsigned int v272;
  uint64_t v273;
  int v274;
  int v275;
  _DWORD *v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  _DWORD *v282;
  unint64_t v283;
  uint64_t v284;
  unsigned int *v285;
  uint64_t v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int *v289;
  unsigned int v290;
  unsigned int v291;
  uint64_t v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int *v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  uint64_t v302;
  int v303;
  unsigned int v304;
  unsigned int *v305;
  unsigned int v306;
  unint64_t v307;
  int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int *v311;
  unsigned int v312;
  uint64_t v313;
  unsigned __int8 *v314;
  unsigned int v315;
  int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  int v322;
  unsigned int v323;
  int v324;
  unsigned int v325;
  unsigned int v326;
  uint64_t v327;
  int v328;
  int v329;
  uint64_t v330;
  unsigned int v331;
  uint64_t v332;
  int v333;
  signed int v334;
  unsigned int *v335;
  _DWORD *v336;
  int v337;
  signed int v338;
  unsigned int *v339;
  unsigned int v340;
  unsigned int *v341;
  unint64_t v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int *v345;
  int v346;
  unsigned int *v347;
  unsigned int *v348;
  int v349;
  unsigned int v350;
  unint64_t v351;
  uint64_t v352;
  unsigned int v353;
  unint64_t v354;
  unsigned int *v355;
  unsigned int v356;
  unsigned int v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  unsigned int v361;
  unsigned __int8 *v362;
  _DWORD *v363;
  int v364;
  unsigned int j;
  int v366;
  unsigned int *v367;
  unsigned int v368;
  uint64_t v369;
  unsigned int v370;
  char *v371;
  unsigned int v372;
  uint64_t v373;
  int v374;
  int v375;
  unsigned int v376;
  int v377;
  unsigned int v378;
  unsigned int v380;
  unsigned int v381;
  unsigned int *v382;
  unsigned int v383;
  unint64_t v384;
  unsigned int v385;
  uint64_t v386;
  unint64_t v387;
  unsigned int v388;
  char *v390;
  _QWORD *v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unsigned int v395;
  unint64_t v396;
  int v397;
  _DWORD *v398;
  unsigned int v399;
  uint64_t v400;
  int v401;
  _QWORD *v402;
  unsigned int v403;
  int v404;
  int v405;
  unsigned int v406;
  int v407;
  unsigned int v408;
  unsigned int v410;
  int v411;
  uint64_t v412;
  unsigned int *v413;
  int v414;
  unint64_t v415;
  unint64_t v416;
  unsigned int v417;
  uint64_t v418;
  char *v419;
  unsigned int v420;
  _QWORD *v422;
  _QWORD *v423;
  unint64_t v424;
  unsigned int v425;
  unint64_t v426;
  unint64_t v427;
  _DWORD *v428;
  uint64_t v429;
  unsigned int v430;
  int v431;
  _QWORD *v432;
  unsigned int v433;
  int v434;
  int v435;
  unsigned int v436;
  int v437;
  unsigned int v438;
  unsigned int v440;
  unsigned int v441;
  uint64_t v442;
  unsigned int *v443;
  int v444;
  unint64_t v445;
  unsigned int v446;
  uint64_t v447;
  unint64_t v448;
  unsigned int v449;
  _QWORD *v451;
  _QWORD *v452;
  unint64_t v453;
  unsigned int v454;
  unint64_t v455;
  unint64_t v456;
  _DWORD *v457;
  unsigned int v458;
  int v459;
  _QWORD *v460;
  unsigned int v461;
  int v462;
  int v463;
  unsigned int v464;
  int v465;
  unsigned int v466;
  unsigned int v468;
  unsigned int v469;
  uint64_t v470;
  unint64_t v471;
  unsigned int v472;
  uint64_t v473;
  unint64_t v474;
  unsigned int v475;
  _QWORD *v477;
  _QWORD *v478;
  unint64_t v479;
  unsigned int v480;
  unint64_t v481;
  unint64_t v482;
  _DWORD *v483;
  uint64_t v484;
  uint64_t v485;
  int v486;
  int v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v491;
  unint64_t v492;
  int v493;
  int v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t v497;
  unsigned __int8 *v498;
  _QWORD *v499;
  unint64_t v500;
  unint64_t v501;
  _QWORD *v502;
  char *v503;
  _DWORD *v504;
  BOOL v505;
  unsigned int *v506;
  uint64_t v507;
  char *v508;
  char *v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  int v515;
  int v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  unsigned __int8 *v520;
  _QWORD *v521;
  unint64_t v522;
  uint64_t v523;
  unint64_t v524;
  _QWORD *v525;
  char *v526;
  _DWORD *v527;
  BOOL v528;
  unsigned int *v529;
  uint64_t v530;
  char *v531;
  char *v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  int v539;
  signed int *v540;
  unsigned int v541;
  unsigned int v542;
  signed int v543;
  uint64_t v544;
  int v545;
  int v546;
  unsigned int v547;
  signed int *v548;
  unint64_t v549;
  unsigned int v550;
  signed int v551;
  uint64_t v552;
  unint64_t v553;
  unint64_t v554;
  _DWORD *v555;
  _DWORD *v556;
  int v557;
  uint64_t v558;
  uint64_t v559;
  int v560;
  int v561;
  unsigned int v562;
  unsigned int *v563;
  unsigned int v564;
  unsigned int v565;
  unint64_t v566;
  unsigned int v567;
  unsigned int v568;
  uint64_t v569;
  int v570;
  unsigned int v571;
  signed int v572;
  uint64_t v573;
  unint64_t v574;
  unint64_t v575;
  _DWORD *v576;
  _DWORD *v577;
  unint64_t v578;
  unint64_t v579;
  int v580;
  int v581;
  uint64_t v582;
  unint64_t v583;
  uint64_t v584;
  unsigned __int8 *v585;
  _QWORD *v586;
  unint64_t v587;
  unint64_t v588;
  _QWORD *v589;
  char *v590;
  _DWORD *v591;
  BOOL v592;
  unsigned int *v593;
  uint64_t v594;
  char *v595;
  char *v596;
  uint64_t v597;
  unint64_t v598;
  uint64_t v599;
  unint64_t v600;
  unint64_t v601;
  int v602;
  unsigned int v603;
  unint64_t v604;
  uint64_t v605;
  char *v606;
  _DWORD *v607;
  unint64_t v608;
  unint64_t v609;
  unsigned __int8 *v610;
  _DWORD *v611;
  BOOL v612;
  unsigned int *v613;
  uint64_t v614;
  char *v615;
  char *v616;
  uint64_t v617;
  unint64_t v618;
  unint64_t v619;
  _DWORD *v620;
  unint64_t v621;
  unint64_t v622;
  char *v623;
  uint64_t v625;
  uint64_t v626;
  unint64_t v627;
  unsigned int *v628;
  unsigned int *v629;
  unsigned int *v630;
  unint64_t v631;
  unsigned int v632;
  unsigned int v633;
  unsigned int v634;
  unint64_t v635;
  uint64_t v636;
  unsigned int v637;
  unsigned int v638;
  unsigned int *v639;
  unsigned int v640;
  unsigned int *v641;
  unsigned int v642;
  unsigned int *v643;
  __int128 v644;
  BOOL v645;
  unsigned int v646;
  uint64_t v647;
  char **v648;
  unint64_t v649;
  unsigned int v650;
  unsigned int v651;
  unsigned int v652;
  uint64_t v653;
  unsigned int v654;
  unsigned int v655;
  char *v656;
  unsigned __int8 *v657;
  uint64_t v658;
  unsigned int v659;
  unsigned int v660;
  unsigned int v661;
  unsigned int v662;
  unsigned int v663;
  unsigned int v664;
  unsigned __int8 *v665;
  char *v666;
  unsigned __int8 *v667;
  char *v668;
  uint64_t v669;
  _OWORD *v670;
  unint64_t v671;
  __int128 *v672;
  __int128 v673;
  unsigned __int8 *v674;
  char *v675;
  __int128 v676;
  unsigned __int8 *v677;
  unint64_t v678;
  unsigned __int8 *v679;
  uint64_t v680;
  unint64_t v681;
  __int128 *v682;
  char *v683;
  unint64_t v684;
  __int128 v685;
  unsigned __int8 *v686;
  char *v687;
  unint64_t v688;
  uint64_t v689;
  char v690;
  unint64_t v691;
  unint64_t v692;
  unsigned int v693;
  _DWORD *v694;
  unint64_t v695;
  unint64_t v696;
  unsigned int v697;
  unsigned int *v698;
  uint64_t v699;
  unsigned __int8 *v700;
  unint64_t v702;
  _QWORD *v703;
  _QWORD *v704;
  uint64_t v705;
  unint64_t v706;
  char *v708;
  uint64_t v709;
  unsigned int *v710;
  unsigned int v711;
  int v712;
  int v713;
  int v714;
  int v715;
  uint64_t v716;
  unint64_t v717;
  unint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  _QWORD *v725;
  char **v726;
  unsigned int v728;
  unsigned int v729;
  char *v730;
  char *v731;
  char *v732;
  char *v733;
  _DWORD *v734;
  unsigned int v735;
  unsigned int v736;
  unsigned int v737;
  unsigned int v738;
  unsigned int v739;
  uint64_t v740;
  unsigned int v741;
  uint64_t v742;
  uint64_t v743;
  unsigned int *v744;
  unsigned int *v745;
  unsigned int *v746;
  unsigned __int8 *v747;
  int v748;
  int v749;
  int v750;
  int v751;
  int v752;
  int v753;
  unsigned __int8 *v754;
  uint64_t v755;
  uint64_t v756;
  _QWORD *v757;
  uint64_t v758;
  uint64_t v759;
  _QWORD *v760;
  _QWORD *v761;
  int v762;
  uint64_t v763;
  unint64_t v764;
  unint64_t v765;
  unint64_t v766;
  unsigned __int8 *v768;
  unint64_t v769;
  _DWORD *v770;
  uint64_t v771;
  unsigned int v772;
  unsigned int v773;
  unsigned int v774;
  _QWORD *v775;
  unsigned __int8 *v776;
  unint64_t v778;
  _DWORD *v779;
  unsigned int v780;
  __int128 v781;
  __int128 v782;
  _BYTE v783[24];
  int v784;
  uint64_t v785;
  unsigned int v786;
  uint64_t v787;

  v787 = *MEMORY[0x1E0C80C00];
  v6 = (char **)(a1 + 80);
  v754 = a4;
  v769 = (unint64_t)&a4[a5];
  v764 = (unint64_t)&a4[a5 - 8];
  v7 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 212) >= 0xFFFu)
    v8 = 4095;
  else
    v8 = *(_DWORD *)(a1 + 212);
  v735 = v8;
  if (*(_DWORD *)(a1 + 208) == 3)
    v9 = 3;
  else
    v9 = 4;
  v763 = v9;
  v711 = *(_DWORD *)(a1 + 36);
  v10 = *(_DWORD **)(a1 + 112);
  v11 = *(unsigned int **)(a1 + 120);
  v786 = 0;
  v785 = 0;
  v782 = 0u;
  memset(v783, 0, sizeof(v783));
  v781 = 0u;
  v12 = *(__int128 **)(a1 + 224);
  if (v12)
  {
    v13 = v12[1];
    v781 = *v12;
    v782 = v13;
    *(_QWORD *)v783 = *((_QWORD *)v12 + 4);
  }
  else
  {
    *(_QWORD *)v783 = 0;
    v781 = 0uLL;
    v782 = 0uLL;
  }
  *(_QWORD *)&v783[12] = 0;
  *(_DWORD *)&v783[8] = 0;
  ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t *)&v781, 0, a5);
  v726 = v6;
  ZSTD_rescaleFreqs(v6, v754, a5, 2);
  if (v7 == v754)
    v14 = v754 + 1;
  else
    v14 = v754;
  if ((unint64_t)v14 < v764)
  {
    v728 = 0;
    v15 = v763;
    v778 = v769 - 7;
    v765 = v769 - 1;
    v766 = v769 - 3;
    v16 = (v763 - 1) | 1;
    v779 = v11 + 14;
    v709 = v763 - v16;
    v710 = &v11[7 * v16];
    v17 = v754;
    v18 = a1;
    v770 = v10;
    while (1)
    {
      v747 = v17;
      v23 = (_DWORD)v14 - (_DWORD)v17;
      v780 = 0;
      v24 = *(_QWORD *)(v18 + 8);
      v25 = *(unsigned int *)(v18 + 36);
      v768 = v14;
      if (v24 + v25 > (unint64_t)v14)
      {
        v26 = 0;
LABEL_433:
        v17 = v747;
        goto LABEL_434;
      }
      v27 = *(_DWORD *)(v18 + 208);
      for (i = (_DWORD)v14 - v24; v25 < i; LODWORD(v25) = inserted + v25)
      {
        inserted = ZSTD_insertBt1(v18, (_QWORD *)(v24 + v25), v769, v27, 0);
        v18 = a1;
      }
      *(_DWORD *)(v18 + 36) = i;
      if ((v27 - 6) < 2)
        break;
      v10 = v770;
      if (v27 == 5)
      {
        v26 = 0;
        if (*(_DWORD *)(v18 + 212) >= 0xFFFu)
          v124 = 4095;
        else
          v124 = *(_DWORD *)(v18 + 212);
        v125 = *(_QWORD *)(v18 + 8);
        v126 = (_DWORD)v14 - v125;
        v127 = -1 << (*(_DWORD *)(v18 + 196) - 1);
        v128 = ~v127;
        v129 = (_DWORD)v14 - v125 + v127 + 1;
        if ((int)v14 - (int)v125 < ~v127)
          v129 = 0;
        v773 = v129;
        v130 = 1 << *(_DWORD *)(v18 + 192);
        if (v126 - *(_DWORD *)(v18 + 28) > v130 && *(_DWORD *)(v18 + 32) == 0)
          v132 = v126 - v130;
        else
          v132 = *(_DWORD *)(v18 + 28);
        if (v132 <= 1)
          v133 = 1;
        else
          v133 = v132;
        v134 = v126 - *(_DWORD *)(v18 + 24);
        v135 = (char *)(v14 + 12);
        v751 = *(_DWORD *)(v18 + 204);
        v136 = (0xCF1BBCDCBB000000 * *(_QWORD *)v14) >> -(char)*(_DWORD *)(v18 + 200);
        v758 = *(_QWORD *)(v18 + 48);
        v137 = *(_DWORD *)(v758 + 4 * v136);
        v138 = v23 == 0;
        v139 = *(_QWORD *)(v18 + 64);
        v81 = (unsigned int *)(v139 + 8 * (v126 & ~v127));
        v82 = v81 + 1;
        v83 = v126 + 9;
        v784 = 0;
        if (v23)
          v140 = 3;
        else
          v140 = 4;
        v141 = (char *)(v14 + 4);
        if (v23)
          v142 = 0;
        else
          v142 = -1;
        v143 = (v763 - 1);
        while (1)
        {
          if (v138 == 3)
          {
            v144 = *a3 - 1;
            if (*a3 - 2 >= v134)
              goto LABEL_198;
          }
          else
          {
            v144 = a3[v138];
            if (v144 - 1 >= v134)
              goto LABEL_198;
          }
          v145 = *(_DWORD *)v14;
          v146 = *(_DWORD *)&v14[-v144];
          if (v126 - v144 < v132 || v145 != v146)
          {
            v10 = v770;
            v14 = v768;
            goto LABEL_198;
          }
          v148 = -(uint64_t)v144;
          v149 = &v141[-v144];
          if (v778 <= (unint64_t)v141)
            break;
          v150 = *(_QWORD *)v141 ^ *(_QWORD *)v149;
          v14 = v768;
          if (v150)
          {
            v10 = v770;
            v151 = (__clz(__rbit64(v150)) >> 3) + 4;
            v152 = v151;
            if (v143 < v151)
              goto LABEL_224;
            goto LABEL_198;
          }
          while (1)
          {
            v153 = &v135[v150];
            if ((unint64_t)&v135[v150] >= v778)
              break;
            v156 = *(_QWORD *)&v135[v148 + v150];
            v150 += 8;
            v157 = *(_QWORD *)v153 ^ v156;
            if (v157)
            {
              v158 = __clz(__rbit64(v157));
              v18 = a1;
              v10 = v770;
              v14 = v768;
              v151 = v150 + (v158 >> 3) + 4;
              v152 = v151;
              if (v143 >= v151)
                goto LABEL_198;
LABEL_224:
              v155 = &v10[2 * v26];
              *v155 = v138 + v142;
              v155[1] = v151;
              ++v26;
              if (v151 <= v124)
              {
                v143 = v152;
                v10 = v770;
                if (&v14[v152] == (unsigned __int8 *)v769)
                  goto LABEL_432;
                goto LABEL_198;
              }
LABEL_289:
              v10 = v770;
              goto LABEL_432;
            }
          }
          v149 = &v153[v148];
          v14 = v768;
          if ((unint64_t)v153 < v766)
            goto LABEL_213;
LABEL_215:
          if ((unint64_t)v153 >= v765)
          {
            if ((unint64_t)v153 >= v769)
              goto LABEL_223;
LABEL_221:
            if (*v149 == *v153)
              LODWORD(v153) = (_DWORD)v153 + 1;
            goto LABEL_223;
          }
          if (*(unsigned __int16 *)v149 == *(unsigned __int16 *)v153)
          {
            v153 += 2;
            v149 += 2;
          }
          if ((unint64_t)v153 < v769)
            goto LABEL_221;
LABEL_223:
          v10 = v770;
          v154 = (_DWORD)v153 - (_DWORD)v141;
          v18 = a1;
          v151 = v154 + 4;
          v152 = v151;
          if (v143 < v151)
            goto LABEL_224;
LABEL_198:
          if (++v138 >= v140)
          {
            *(_DWORD *)(v758 + 4 * v136) = v126;
            if (v137 < v133)
              goto LABEL_430;
            v203 = 0;
            v204 = 0;
            v205 = ~(-1 << v751);
            v206 = v126 + 2;
            v760 = v14 + 8;
            v207 = v125 + 8;
LABEL_302:
            if (v204 >= v203)
              v208 = v203;
            else
              v208 = v204;
            v209 = v125 + v137;
            v210 = (char *)&v14[v208];
            v211 = (_QWORD *)(v209 + v208);
            if (v778 <= (unint64_t)&v14[v208])
            {
              v214 = &v14[v208];
              v18 = a1;
              if ((unint64_t)v210 >= v766)
                goto LABEL_312;
            }
            else
            {
              v212 = *(_QWORD *)v210 ^ *v211;
              if (v212)
              {
                v18 = a1;
                v213 = (__clz(__rbit64(v212)) >> 3) + v208;
                if (v213 <= v143)
                  goto LABEL_327;
                goto LABEL_321;
              }
              v218 = 0;
              v219 = (char *)v760 + v208;
              while (1)
              {
                v220 = &v219[v218];
                if ((unint64_t)&v219[v218] >= v778)
                  break;
                v221 = *(_QWORD *)(v207 + v208 + v137 + v218);
                v218 += 8;
                v222 = *(_QWORD *)v220 ^ v221;
                v14 = v768;
                if (v222)
                {
                  v18 = a1;
                  v10 = v770;
                  v213 = v218 + (__clz(__rbit64(v222)) >> 3) + v208;
                  if (v213 <= v143)
                    goto LABEL_327;
LABEL_321:
                  if (v213 > v83 - v137)
                    v83 = v137 + v213;
                  v215 = &v10[2 * v26];
                  *v215 = v206 - v137;
                  v215[1] = v213;
                  ++v26;
                  v216 = v213 > 0x1000 || &v14[v213] == (unsigned __int8 *)v769;
                  v143 = v213;
                  if (v216)
                    goto LABEL_430;
LABEL_327:
                  v217 = (unsigned int *)(v139 + 8 * (v137 & v128));
                  if (*(unsigned __int8 *)(v209 + v213) < v14[v213])
                  {
                    *v81 = v137;
                    if (v137 <= v773)
                      goto LABEL_428;
                    ++v217;
                    v204 = v213;
                    v81 = v217;
                    v118 = v205-- != 0;
                    if (!v118)
                      goto LABEL_430;
LABEL_301:
                    v137 = *v217;
                    if (*v217 < v133)
                      goto LABEL_430;
                    goto LABEL_302;
                  }
                  *v82 = v137;
                  if (v137 > v773)
                  {
                    v203 = v213;
                    v82 = (unsigned int *)(v139 + 8 * (v137 & v128));
                    v118 = v205-- != 0;
                    if (!v118)
                      goto LABEL_430;
                    goto LABEL_301;
                  }
LABEL_429:
                  v82 = (unsigned int *)&v784;
LABEL_430:
                  *v82 = 0;
                  *v81 = 0;
                  v223 = v83 - 8;
                  goto LABEL_431;
                }
              }
              v214 = (unsigned __int8 *)v760 + v208 + v218;
              v211 = (_QWORD *)(v207 + v208 + v137 + v218);
              v18 = a1;
              if ((unint64_t)v214 >= v766)
              {
LABEL_312:
                if ((unint64_t)v214 >= v765)
                {
                  if ((unint64_t)v214 >= v769)
                    goto LABEL_320;
                }
                else
                {
                  if (*(unsigned __int16 *)v211 == *(unsigned __int16 *)v214)
                  {
                    v214 += 2;
                    v211 = (_QWORD *)((char *)v211 + 2);
                  }
                  if ((unint64_t)v214 >= v769)
                  {
LABEL_320:
                    v10 = v770;
                    v213 = v214 - (unsigned __int8 *)v210 + v208;
                    if (v213 <= v143)
                      goto LABEL_327;
                    goto LABEL_321;
                  }
                }
                if (*(unsigned __int8 *)v211 == *v214)
                  ++v214;
                goto LABEL_320;
              }
            }
            if (*(_DWORD *)v211 == *(_DWORD *)v214)
            {
              v214 += 4;
              v211 = (_QWORD *)((char *)v211 + 4);
            }
            goto LABEL_312;
          }
        }
        v153 = v141;
        v14 = v768;
        if ((unint64_t)v141 >= v766)
          goto LABEL_215;
LABEL_213:
        if (*(_DWORD *)v149 == *(_DWORD *)v153)
        {
          v153 += 4;
          v149 += 4;
        }
        goto LABEL_215;
      }
      if (v27 != 3)
      {
        v26 = 0;
        if (*(_DWORD *)(v18 + 212) >= 0xFFFu)
          v159 = 4095;
        else
          v159 = *(_DWORD *)(v18 + 212);
        v160 = *(_QWORD *)(v18 + 8);
        v161 = (_DWORD)v14 - v160;
        v162 = -1 << (*(_DWORD *)(v18 + 196) - 1);
        v163 = ~v162;
        v164 = (_DWORD)v14 - v160 + v162 + 1;
        if ((int)v14 - (int)v160 < ~v162)
          v164 = 0;
        v774 = v164;
        v165 = 1 << *(_DWORD *)(v18 + 192);
        if (v161 - *(_DWORD *)(v18 + 28) > v165 && *(_DWORD *)(v18 + 32) == 0)
          v167 = v161 - v165;
        else
          v167 = *(_DWORD *)(v18 + 28);
        if (v167 <= 1)
          v168 = 1;
        else
          v168 = v167;
        v169 = v161 - *(_DWORD *)(v18 + 24);
        v170 = (char *)(v14 + 12);
        v752 = *(_DWORD *)(v18 + 204);
        v171 = (-1640531535 * *(_DWORD *)v14) >> -(char)*(_DWORD *)(v18 + 200);
        v759 = *(_QWORD *)(v18 + 48);
        v172 = *(_DWORD *)(v759 + 4 * v171);
        v173 = v23 == 0;
        v174 = *(_QWORD *)(v18 + 64);
        v175 = (unsigned int *)(v174 + 8 * (v161 & ~v162));
        v176 = v175 + 1;
        v177 = v161 + 9;
        v784 = 0;
        if (v23)
          v178 = 3;
        else
          v178 = 4;
        v179 = (char *)(v14 + 4);
        if (v23)
          v180 = 0;
        else
          v180 = -1;
        v181 = (v763 - 1);
        while (1)
        {
          if (v173 == 3)
          {
            v182 = *a3 - 1;
            if (*a3 - 2 >= v169)
              goto LABEL_254;
          }
          else
          {
            v182 = a3[v173];
            if (v182 - 1 >= v169)
              goto LABEL_254;
          }
          v183 = *(_DWORD *)v14;
          v184 = *(_DWORD *)&v14[-v182];
          if (v161 - v182 < v167 || v183 != v184)
          {
            v10 = v770;
            v14 = v768;
            goto LABEL_254;
          }
          v186 = -(uint64_t)v182;
          v187 = &v179[-v182];
          if (v778 <= (unint64_t)v179)
            break;
          v188 = *(_QWORD *)v179 ^ *(_QWORD *)v187;
          v14 = v768;
          if (v188)
          {
            v10 = v770;
            v189 = (__clz(__rbit64(v188)) >> 3) + 4;
            v190 = v189;
            if (v181 < v189)
              goto LABEL_280;
            goto LABEL_254;
          }
          do
          {
            v191 = &v170[v188];
            if ((unint64_t)&v170[v188] >= v778)
            {
              v187 = &v191[v186];
              v14 = v768;
              if ((unint64_t)v191 >= v766)
                goto LABEL_271;
              goto LABEL_269;
            }
            v194 = *(_QWORD *)&v170[v186 + v188];
            v188 += 8;
            v195 = *(_QWORD *)v191 ^ v194;
          }
          while (!v195);
          v196 = __clz(__rbit64(v195));
          v18 = a1;
          v10 = v770;
          v14 = v768;
          v189 = v188 + (v196 >> 3) + 4;
          v190 = v189;
          if (v181 >= v189)
            goto LABEL_254;
LABEL_280:
          v193 = &v10[2 * v26];
          *v193 = v173 + v180;
          v193[1] = v189;
          ++v26;
          if (v189 > v159)
            goto LABEL_289;
          v181 = v190;
          v10 = v770;
          if (&v14[v190] == (unsigned __int8 *)v769)
          {
LABEL_432:
            v15 = v763;
            goto LABEL_433;
          }
LABEL_254:
          if (++v173 >= v178)
          {
            *(_DWORD *)(v759 + 4 * v171) = v161;
            if (v172 < v168)
              goto LABEL_342;
            v224 = 0;
            v225 = 0;
            v226 = ~(-1 << v752);
            v227 = v161 + 2;
            v761 = v14 + 8;
            v228 = v160 + 8;
            while (1)
            {
              v229 = v225 >= v224 ? v224 : v225;
              v230 = v160 + v172;
              v231 = (char *)&v14[v229];
              v232 = (_QWORD *)(v230 + v229);
              if (v778 <= (unint64_t)&v14[v229])
                break;
              v233 = *(_QWORD *)v231 ^ *v232;
              if (v233)
              {
                v18 = a1;
                v234 = (__clz(__rbit64(v233)) >> 3) + v229;
                if (v234 <= v181)
                  goto LABEL_373;
                goto LABEL_367;
              }
              v239 = 0;
              v240 = (char *)v761 + v229;
              do
              {
                v241 = &v240[v239];
                if ((unint64_t)&v240[v239] >= v778)
                {
                  v235 = (unsigned __int8 *)v761 + v229 + v239;
                  v232 = (_QWORD *)(v228 + v229 + v172 + v239);
                  v18 = a1;
                  if ((unint64_t)v235 >= v766)
                    goto LABEL_358;
                  goto LABEL_356;
                }
                v242 = *(_QWORD *)(v228 + v229 + v172 + v239);
                v239 += 8;
                v243 = *(_QWORD *)v241 ^ v242;
                v14 = v768;
              }
              while (!v243);
              v18 = a1;
              v10 = v770;
              v234 = v239 + (__clz(__rbit64(v243)) >> 3) + v229;
              if (v234 <= v181)
                goto LABEL_373;
LABEL_367:
              if (v234 > v177 - v172)
                v177 = v172 + v234;
              v236 = &v10[2 * v26];
              *v236 = v227 - v172;
              v236[1] = v234;
              ++v26;
              v237 = v234 > 0x1000 || &v14[v234] == (unsigned __int8 *)v769;
              v181 = v234;
              if (v237)
                goto LABEL_342;
LABEL_373:
              v238 = (unsigned int *)(v174 + 8 * (v172 & v163));
              if (*(unsigned __int8 *)(v230 + v234) >= v14[v234])
              {
                *v176 = v172;
                if (v172 <= v774)
                {
                  v176 = (unsigned int *)&v784;
                  goto LABEL_342;
                }
                v224 = v234;
                v176 = (unsigned int *)(v174 + 8 * (v172 & v163));
                v118 = v226-- != 0;
                if (v118)
                  goto LABEL_347;
LABEL_342:
                *v176 = 0;
                *v175 = 0;
                v223 = v177 - 8;
LABEL_431:
                *(_DWORD *)(v18 + 36) = v223;
                goto LABEL_432;
              }
              *v175 = v172;
              if (v172 <= v774)
              {
                v175 = (unsigned int *)&v784;
                goto LABEL_342;
              }
              ++v238;
              v225 = v234;
              v175 = v238;
              v118 = v226-- != 0;
              if (!v118)
                goto LABEL_342;
LABEL_347:
              v172 = *v238;
              if (*v238 < v168)
                goto LABEL_342;
            }
            v235 = &v14[v229];
            v18 = a1;
            if ((unint64_t)v231 >= v766)
              goto LABEL_358;
LABEL_356:
            if (*(_DWORD *)v232 == *(_DWORD *)v235)
            {
              v235 += 4;
              v232 = (_QWORD *)((char *)v232 + 4);
            }
LABEL_358:
            if ((unint64_t)v235 >= v765)
            {
              if ((unint64_t)v235 >= v769)
                goto LABEL_366;
            }
            else
            {
              if (*(unsigned __int16 *)v232 == *(unsigned __int16 *)v235)
              {
                v235 += 2;
                v232 = (_QWORD *)((char *)v232 + 2);
              }
              if ((unint64_t)v235 >= v769)
              {
LABEL_366:
                v10 = v770;
                v234 = v235 - (unsigned __int8 *)v231 + v229;
                if (v234 <= v181)
                  goto LABEL_373;
                goto LABEL_367;
              }
            }
            if (*(unsigned __int8 *)v232 == *v235)
              ++v235;
            goto LABEL_366;
          }
        }
        v191 = v179;
        v14 = v768;
        if ((unint64_t)v179 >= v766)
          goto LABEL_271;
LABEL_269:
        if (*(_DWORD *)v187 == *(_DWORD *)v191)
        {
          v191 += 4;
          v187 += 4;
        }
LABEL_271:
        if ((unint64_t)v191 >= v765)
        {
          if ((unint64_t)v191 >= v769)
            goto LABEL_279;
        }
        else
        {
          if (*(unsigned __int16 *)v187 == *(unsigned __int16 *)v191)
          {
            v191 += 2;
            v187 += 2;
          }
          if ((unint64_t)v191 >= v769)
          {
LABEL_279:
            v10 = v770;
            v192 = (_DWORD)v191 - (_DWORD)v179;
            v18 = a1;
            v189 = v192 + 4;
            v190 = v189;
            if (v181 < v189)
              goto LABEL_280;
            goto LABEL_254;
          }
        }
        if (*v187 == *v191)
          LODWORD(v191) = (_DWORD)v191 + 1;
        goto LABEL_279;
      }
      v26 = 0;
      if (*(_DWORD *)(v18 + 212) >= 0xFFFu)
        v30 = 4095;
      else
        v30 = *(_DWORD *)(v18 + 212);
      v31 = *(_QWORD *)(v18 + 8);
      v32 = (_DWORD)v14 - v31;
      v33 = -1 << (*(_DWORD *)(v18 + 196) - 1);
      v34 = ~v33;
      v35 = (_DWORD)v14 - v31 + v33 + 1;
      if ((int)v14 - (int)v31 < ~v33)
        v35 = 0;
      v36 = 1 << *(_DWORD *)(v18 + 192);
      if (v32 - *(_DWORD *)(v18 + 28) > v36 && *(_DWORD *)(v18 + 32) == 0)
        v38 = v32 - v36;
      else
        v38 = *(_DWORD *)(v18 + 28);
      if (v38 <= 1)
        v39 = 1;
      else
        v39 = v38;
      v40 = v32 - *(_DWORD *)(v18 + 24);
      v41 = (char *)(v14 + 11);
      v749 = *(_DWORD *)(v18 + 204);
      v771 = *(_QWORD *)(v18 + 48);
      v755 = (-1640531535 * *(_DWORD *)v14) >> -(char)*(_DWORD *)(v18 + 200);
      v42 = *(_DWORD *)(v771 + 4 * v755);
      v43 = v23 == 0;
      v44 = *(_QWORD *)(v18 + 64);
      v45 = (unsigned int *)(v44 + 8 * (v32 & ~v33));
      v46 = v45 + 1;
      v47 = v32 + 9;
      v784 = 0;
      if (v23)
        v48 = 3;
      else
        v48 = 4;
      v49 = (char *)(v14 + 3);
      if (v23)
        v50 = 0;
      else
        v50 = -1;
      v51 = (v763 - 1);
      do
      {
        if (v43 == 3)
        {
          v52 = *a3 - 1;
          if (*a3 - 2 >= v40)
            goto LABEL_44;
        }
        else
        {
          v52 = a3[v43];
          if (v52 - 1 >= v40)
            goto LABEL_44;
        }
        if (v32 - v52 < v38 || ((*(_DWORD *)&v14[-v52] ^ *(_DWORD *)v14) & 0xFFFFFF) != 0)
        {
          v10 = v770;
          v14 = v768;
          goto LABEL_44;
        }
        v54 = -(uint64_t)v52;
        v55 = &v49[-v52];
        if (v778 <= (unint64_t)v49)
        {
          v59 = v49;
          v14 = v768;
          if ((unint64_t)v49 < v766)
          {
LABEL_59:
            if (*(_DWORD *)v55 == *(_DWORD *)v59)
            {
              v59 += 4;
              v55 += 4;
            }
          }
LABEL_61:
          if ((unint64_t)v59 >= v765)
          {
            if ((unint64_t)v59 >= v769)
              goto LABEL_69;
          }
          else
          {
            if (*(unsigned __int16 *)v55 == *(unsigned __int16 *)v59)
            {
              v59 += 2;
              v55 += 2;
            }
            if ((unint64_t)v59 >= v769)
            {
LABEL_69:
              v10 = v770;
              v60 = (_DWORD)v59 - (_DWORD)v49;
              v18 = a1;
              v57 = v60 + 3;
              v58 = v57;
              if (v51 < v57)
                goto LABEL_70;
              goto LABEL_44;
            }
          }
          if (*v55 == *v59)
            LODWORD(v59) = (_DWORD)v59 + 1;
          goto LABEL_69;
        }
        v56 = *(_QWORD *)v49 ^ *(_QWORD *)v55;
        v14 = v768;
        if (v56)
        {
          v10 = v770;
          v57 = (__clz(__rbit64(v56)) >> 3) + 3;
          v58 = v57;
          if (v51 < v57)
            goto LABEL_70;
          goto LABEL_44;
        }
        do
        {
          v59 = &v41[v56];
          if ((unint64_t)&v41[v56] >= v778)
          {
            v55 = &v59[v54];
            v14 = v768;
            if ((unint64_t)v59 < v766)
              goto LABEL_59;
            goto LABEL_61;
          }
          v62 = *(_QWORD *)&v41[v54 + v56];
          v56 += 8;
          v63 = *(_QWORD *)v59 ^ v62;
        }
        while (!v63);
        v64 = __clz(__rbit64(v63));
        v18 = a1;
        v10 = v770;
        v14 = v768;
        v57 = v56 + (v64 >> 3) + 3;
        v58 = v57;
        if (v51 >= v57)
          goto LABEL_44;
LABEL_70:
        v61 = &v10[2 * v26];
        *v61 = v43 + v50;
        v61[1] = v57;
        ++v26;
        if (v57 > v30)
        {
          v15 = v763;
          v10 = v770;
          goto LABEL_433;
        }
        v51 = v58;
        v10 = v770;
        if (&v14[v58] == (unsigned __int8 *)v769)
          goto LABEL_432;
LABEL_44:
        ++v43;
      }
      while (v43 < v48);
      if (v51 > 2)
      {
        v15 = v763;
        v17 = v747;
        goto LABEL_344;
      }
      v197 = *(_QWORD *)(v18 + 56);
      v198 = *(_DWORD *)v14;
      v199 = 32 - *(_DWORD *)(v18 + 40);
      if (v711 < v32)
      {
        v200 = v711;
        do
        {
          *(_DWORD *)(v197 + 4 * ((900185344 * *(_DWORD *)(v31 + v200)) >> v199)) = v200;
          ++v200;
        }
        while (v32 != v200);
      }
      v201 = *(unsigned int *)(v197 + 4 * ((900185344 * v198) >> v199));
      v202 = v201 >= v39 && (v32 - v201) >> 18 == 0;
      v15 = v763;
      if (!v202)
      {
        v711 = v32;
        v17 = v747;
        goto LABEL_344;
      }
      v694 = (_DWORD *)(v31 + v201);
      v17 = v747;
      if (v778 <= (unint64_t)v14)
      {
        v700 = v14;
        if ((unint64_t)v14 < v766)
        {
LABEL_1083:
          if (*v694 == *(_DWORD *)v700)
          {
            v700 += 4;
            ++v694;
          }
        }
      }
      else
      {
        v695 = *(_QWORD *)v14 ^ *(_QWORD *)v694;
        if (v695)
        {
          v696 = __clz(__rbit64(v695)) >> 3;
          v711 = v32;
          if (v696 < 3)
            goto LABEL_344;
          goto LABEL_1094;
        }
        v702 = 0;
        v703 = v14 + 8;
        while (1)
        {
          v704 = &v703[v702 / 8];
          if ((unint64_t)&v703[v702 / 8] >= v778)
            break;
          v705 = *(_QWORD *)(v31 + v201 + 8 + v702);
          v702 += 8;
          v706 = *v704 ^ v705;
          if (v706)
          {
            v696 = v702 + (__clz(__rbit64(v706)) >> 3);
            v17 = v747;
            v711 = v32;
            if (v696 >= 3)
              goto LABEL_1094;
            goto LABEL_344;
          }
        }
        v700 = &v14[v702 + 8];
        v694 = (_DWORD *)(v31 + v201 + v702 + 8);
        v17 = v747;
        if ((unint64_t)v700 < v766)
          goto LABEL_1083;
      }
      if ((unint64_t)v700 >= v765)
      {
        if ((unint64_t)v700 >= v769)
          goto LABEL_1093;
LABEL_1091:
        if (*(unsigned __int8 *)v694 == *v700)
          ++v700;
        goto LABEL_1093;
      }
      if (*(unsigned __int16 *)v694 == *(unsigned __int16 *)v700)
      {
        v700 += 2;
        v694 = (_DWORD *)((char *)v694 + 2);
      }
      if ((unint64_t)v700 < v769)
        goto LABEL_1091;
LABEL_1093:
      v696 = v700 - v14;
      v711 = v32;
      if (v696 < 3)
        goto LABEL_344;
LABEL_1094:
      *v10 = v32 - v201 + 2;
      v10[1] = v696;
      if (v696 > v30 || &v14[v696] == (unsigned __int8 *)v769)
      {
        v26 = 1;
        v711 = v32;
        *(_DWORD *)(v18 + 36) = v32 + 1;
        goto LABEL_434;
      }
      v26 = 1;
      v711 = v32;
      v51 = v696;
LABEL_344:
      *(_DWORD *)(v771 + 4 * v755) = v32;
      if (v42 < v39)
        goto LABEL_345;
      v244 = 0;
      v245 = 0;
      v246 = ~(-1 << v749);
      v247 = v32 + 2;
      v775 = v14 + 8;
      v248 = v31 + 8;
      while (2)
      {
        if (v245 >= v244)
          v249 = v244;
        else
          v249 = v245;
        v250 = v31 + v42;
        v251 = (char *)&v14[v249];
        v252 = (_DWORD *)(v250 + v249);
        if (v778 <= (unint64_t)&v14[v249])
        {
          v255 = &v14[v249];
          if ((unint64_t)v251 < v766)
          {
LABEL_397:
            if (*v252 == *(_DWORD *)v255)
            {
              v255 += 4;
              ++v252;
            }
          }
        }
        else
        {
          v253 = *(_QWORD *)v251 ^ *(_QWORD *)v252;
          if (v253)
          {
            v18 = a1;
            v10 = v770;
            v254 = (__clz(__rbit64(v253)) >> 3) + v249;
            if (v254 <= v51)
              goto LABEL_414;
            goto LABEL_408;
          }
          v260 = (char *)v775 + v249;
          while (1)
          {
            v261 = &v260[v253];
            if ((unint64_t)&v260[v253] >= v778)
              break;
            v262 = *(_QWORD *)(v248 + v249 + v42 + v253);
            v253 += 8;
            v263 = *(_QWORD *)v261 ^ v262;
            if (v263)
            {
              v264 = __clz(__rbit64(v263));
              v18 = a1;
              v15 = v763;
              v10 = v770;
              v14 = v768;
              v254 = v253 + (v264 >> 3) + v249;
              if (v254 > v51)
                goto LABEL_408;
              goto LABEL_414;
            }
          }
          v255 = (unsigned __int8 *)v775 + v249 + v253;
          v252 = (_DWORD *)(v248 + v249 + v42 + v253);
          v10 = v770;
          v14 = v768;
          if ((unint64_t)v255 < v766)
            goto LABEL_397;
        }
        if ((unint64_t)v255 >= v765)
        {
          if ((unint64_t)v255 >= v769)
            goto LABEL_407;
LABEL_405:
          v10 = v770;
          if (*(unsigned __int8 *)v252 == *v255)
            ++v255;
          goto LABEL_407;
        }
        if (*(unsigned __int16 *)v252 == *(unsigned __int16 *)v255)
        {
          v255 += 2;
          v252 = (_DWORD *)((char *)v252 + 2);
        }
        if ((unint64_t)v255 < v769)
          goto LABEL_405;
LABEL_407:
        v18 = a1;
        v256 = v255 - (unsigned __int8 *)v251;
        v15 = v763;
        v254 = v256 + v249;
        if (v254 <= v51)
          goto LABEL_414;
LABEL_408:
        if (v254 > v47 - v42)
          v47 = v42 + v254;
        v257 = &v10[2 * v26];
        *v257 = v247 - v42;
        v257[1] = v254;
        ++v26;
        v258 = v254 > 0x1000 || &v14[v254] == (unsigned __int8 *)v769;
        v51 = v254;
        if (v258)
        {
          v17 = v747;
          goto LABEL_345;
        }
LABEL_414:
        v259 = (unsigned int *)(v44 + 8 * (v42 & v34));
        if (*(unsigned __int8 *)(v250 + v254) < v14[v254])
        {
          *v45 = v42;
          v17 = v747;
          if (v42 <= v35)
          {
            v45 = (unsigned int *)&v784;
            goto LABEL_345;
          }
          ++v259;
          v245 = v254;
          v45 = v259;
          v118 = v246-- != 0;
          if (!v118)
            goto LABEL_345;
          goto LABEL_388;
        }
        *v46 = v42;
        v17 = v747;
        if (v42 > v35)
        {
          v244 = v254;
          v46 = (unsigned int *)(v44 + 8 * (v42 & v34));
          v118 = v246-- != 0;
          if (!v118)
            goto LABEL_345;
LABEL_388:
          v42 = *v259;
          if (*v259 < v39)
            goto LABEL_345;
          continue;
        }
        break;
      }
      v46 = (unsigned int *)&v784;
LABEL_345:
      *v46 = 0;
      *v45 = 0;
      *(_DWORD *)(v18 + 36) = v47 - 8;
LABEL_434:
      v780 = v26;
      ZSTD_optLdm_processMatchCandidate((uint64_t *)&v781, (uint64_t)v10, &v780, (_DWORD)v14 - (_DWORD)v754, v769 - (_DWORD)v14);
      LODWORD(v265) = v780;
      if (v780)
      {
        v11[4] = *a3;
        v11[5] = a3[1];
        v11[6] = a3[2];
        v11[2] = 0;
        v11[3] = v23;
        v18 = a1;
        v266 = *(_DWORD *)(a1 + 160);
        if (v266 != 1)
        {
          if (v23 < 0x40)
            v272 = ZSTD_LLcode_LL_Code[v23];
          else
            v272 = 50 - __clz(v23);
          v273 = 4 * v272;
          v274 = *(_DWORD *)(a1 + 148);
          v275 = v274 + (*(unsigned int *)((char *)LL_bits + v273) << 8);
          v276 = *(_DWORD **)(a1 + 88);
          LODWORD(v273) = *(_DWORD *)((char *)v276 + v273) + 1;
          v277 = __clz(v273);
          v268 = v275 - (((_DWORD)v273 << 8 >> (v277 ^ 0x1F)) + ((v277 ^ 0x1F) << 8));
          *v11 = v268;
          v269 = (v265 - 1);
          v270 = v10[2 * v269 + 1];
          if (v270 <= v735)
          {
            v280 = *v276 + 1;
            v281 = __clz(v280) ^ 0x1F;
            v271 = v274 - ((v280 << 8 >> v281) + (v281 << 8));
            goto LABEL_446;
          }
LABEL_444:
          v278 = 0;
          v279 = v10[2 * v269];
          goto LABEL_997;
        }
        v267 = __clz(v23 + 1);
        v268 = ((v23 + 1) << 8 >> (v267 ^ 0x1F)) + ((v267 ^ 0x1F) << 8);
        *v11 = v268;
        v269 = (v265 - 1);
        v270 = v10[2 * v269 + 1];
        if (v270 > v735)
          goto LABEL_444;
        v271 = 256;
LABEL_446:
        v282 = v11 + 14;
        v283 = (v763 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v282 - 7) = 0x40000000;
          *v282 = 0x40000000;
          v282 += 14;
          v283 -= 2;
        }
        while (v283);
        if (v763 - 1 != ((v763 - 1) & 0xFFFFFFFFFFFFFFFELL))
        {
          v284 = v709;
          v285 = v710;
          do
          {
            *v285 = 0x40000000;
            v285 += 7;
            --v284;
          }
          while (v284);
        }
        v286 = 0;
        v287 = v271 + v268;
        if (v265 <= 1)
          v265 = 1;
        else
          v265 = v265;
        v288 = v15;
        do
        {
          v289 = &v10[2 * v286];
          v290 = v289[1];
          if (v288 <= v290)
          {
            v291 = *v289;
            v292 = __clz(v291 + 1) ^ 0x1F;
            if (v266 == 1)
            {
              v293 = (v288 << 8) - 512;
              do
              {
                v294 = __clz(v288 - 2);
                v295 = &v11[7 * v288];
                v295[2] = v288;
                v295[3] = v23;
                *v295 = (v293 >> (v294 ^ 0x1F)) + (((v294 ^ 0x1F) + (_DWORD)v292) << 8) + v287 + 4096;
                v295[1] = v291;
                ++v288;
                v293 += 256;
              }
              while (v288 <= v290);
            }
            else
            {
              v297 = *(_QWORD *)(a1 + 96);
              v296 = *(_QWORD *)(a1 + 104);
              v298 = *(_DWORD *)(a1 + 156) + *(_DWORD *)(a1 + 152) + 51;
              do
              {
                v306 = v288 - 3;
                if (v288 - 3 < 0x80)
                  v299 = ZSTD_MLcode_ML_Code[v306];
                else
                  v299 = 67 - __clz(v306);
                v300 = *(_DWORD *)(v296 + 4 * v292) + 1;
                v301 = __clz(v300);
                v302 = 4 * v299;
                v303 = *(unsigned int *)((char *)ML_bits + v302);
                LODWORD(v302) = *(_DWORD *)(v297 + v302) + 1;
                v304 = __clz(v302) ^ 0x1F;
                LODWORD(v302) = v287
                              + v298
                              - (v300 << 8 >> (v301 ^ 0x1F))
                              - ((_DWORD)v302 << 8 >> v304)
                              + (((_DWORD)v292 + v303 - (v301 ^ 0x1F) - v304) << 8);
                v305 = &v11[7 * v288];
                v305[2] = v288;
                v305[3] = v23;
                *v305 = v302;
                v305[1] = v291;
                ++v288;
              }
              while (v288 <= v290);
            }
          }
          ++v286;
        }
        while (v286 != v265);
        LODWORD(v307) = v288 - 1;
        if (v288 == 1)
        {
LABEL_993:
          v628 = &v11[7 * v307];
          v279 = v628[1];
          v728 = *v628;
          v270 = v628[2];
          v23 = v628[3];
          v785 = *((_QWORD *)v628 + 2);
          v786 = v628[6];
          if (v307 >= v23 + v270)
            v278 = v307 - (v23 + v270);
          else
            v278 = 0;
          v17 = v747;
          if (!v270)
            goto LABEL_1081;
          goto LABEL_997;
        }
        v725 = v14 + 8;
        v308 = (_DWORD)v14 + 1;
        v309 = 1;
        while (2)
        {
          v310 = v309 - 1;
          v311 = &v11[7 * v309 - 7];
          if (v311[2])
            v312 = 1u;
          else
            v312 = v11[7 * v310 + 3] + 1;
          v313 = v309;
          v314 = &v14[v309];
          v315 = *v311;
          v316 = *(_DWORD *)(v18 + 160);
          if (*(_DWORD *)(v18 + 176) == 2)
          {
            v317 = v315 + 2048;
            if (v316 != 1)
            {
              if (v312 >= 0x40)
                goto LABEL_477;
LABEL_483:
              v318 = ZSTD_LLcode_LL_Code[v312];
              v319 = v312 - 1;
              if (v312 - 1 >= 0x40)
                goto LABEL_484;
LABEL_478:
              v320 = ZSTD_LLcode_LL_Code[v319];
              goto LABEL_485;
            }
LABEL_481:
            v321 = __clz(v312 + 1);
            v322 = ((v312 + 1) << 8 >> (v321 ^ 0x1F)) + ((v321 ^ 0x1F) << 8);
            v323 = __clz(v312) ^ 0x1F;
            v324 = -((v312 << 8 >> v323) + (v323 << 8));
          }
          else
          {
            if (v316 == 1)
            {
              v317 = v315 + 1536;
              goto LABEL_481;
            }
            v325 = *(_DWORD *)(*(_QWORD *)(v18 + 80) + 4 * *(v314 - 1)) + 1;
            v326 = __clz(v325);
            v317 = *(_DWORD *)(v18 + 144) - ((v325 << 8 >> (v326 ^ 0x1F)) + ((v326 ^ 0x1F) << 8)) + v315;
            if (v312 < 0x40)
              goto LABEL_483;
LABEL_477:
            v318 = 50 - __clz(v312);
            v319 = v312 - 1;
            if (v312 - 1 < 0x40)
              goto LABEL_478;
LABEL_484:
            v320 = 50 - __clz(v319);
LABEL_485:
            v327 = 4 * v318;
            v328 = *(unsigned int *)((char *)LL_bits + v327);
            v329 = *(_DWORD *)(v18 + 148);
            v330 = *(_QWORD *)(v18 + 88);
            LODWORD(v327) = *(_DWORD *)(v330 + v327) + 1;
            v331 = __clz(v327) ^ 0x1F;
            v322 = v329 - ((_DWORD)v327 << 8 >> v331) + ((v328 - v331) << 8);
            v332 = 4 * v320;
            v333 = *(unsigned int *)((char *)LL_bits + v332);
            LODWORD(v332) = *(_DWORD *)(v330 + v332) + 1;
            LODWORD(v330) = __clz(v332) ^ 0x1F;
            v324 = ((_DWORD)v332 << 8 >> v330) - v329 + (((_DWORD)v330 - v333) << 8);
          }
          v334 = v317 + v322 + v324;
          v335 = &v11[7 * v313];
          v338 = *v335;
          v336 = v335 + 2;
          v337 = v338;
          if (v334 <= v338)
          {
            v345 = &v11[7 * v313];
            v345[1] = 0;
            v345[2] = 0;
            v345[3] = v312;
            *v345 = v334;
            v337 = v334;
LABEL_491:
            v346 = 0;
            v347 = &v11[7 * v313];
            v348 = &v11[7 * v310];
            *((_QWORD *)v347 + 2) = *((_QWORD *)v348 + 2);
            v347[6] = v348[6];
            v349 = 1;
            if ((unint64_t)v314 <= v764)
              goto LABEL_505;
LABEL_470:
            v309 = v313 + 1;
            ++v308;
            if ((int)v313 + 1 > v307)
              goto LABEL_993;
            continue;
          }
          break;
        }
        if (!*v336)
          goto LABEL_491;
        v339 = &v11[7 * (v313 - *v336) + 4];
        v340 = v11[7 * v313 + 1];
        if (v340 < 3)
        {
          if (v11[7 * v313 + 3])
            v350 = v11[7 * v313 + 1];
          else
            v350 = v340 + 1;
          if (v350)
          {
            if (v350 == 3)
            {
              v342 = *v339;
              v344 = v342 - 1;
            }
            else
            {
              v344 = v339[v350];
              v342 = *v339;
            }
            v645 = v350 > 1;
            v352 = 2;
            if (v645)
              v352 = 1;
            v341 = &v339[v352];
          }
          else
          {
            v351 = *(_QWORD *)v339;
            v341 = &v11[7 * (v313 - *v336) + 6];
            v344 = v351;
            v342 = HIDWORD(v351);
          }
        }
        else
        {
          v343 = *v339;
          v341 = &v11[7 * (v313 - *v336) + 5];
          v342 = v343;
          v344 = v340 - 2;
        }
        v349 = 0;
        v353 = *v341;
        v354 = v344 | (v342 << 32);
        v355 = &v11[7 * v313];
        *((_QWORD *)v355 + 2) = v354;
        v355[6] = v353;
        v346 = 1;
        if ((unint64_t)v314 > v764)
          goto LABEL_470;
LABEL_505:
        if ((_DWORD)v313 == (_DWORD)v307)
          goto LABEL_993;
        v762 = v308;
        if (v349)
        {
          v23 = v11[7 * v313 + 3];
          if (*(_DWORD *)(v18 + 160) != 1)
            goto LABEL_508;
LABEL_510:
          v358 = 256;
        }
        else
        {
          v23 = 0;
          if (*(_DWORD *)(v18 + 160) == 1)
            goto LABEL_510;
LABEL_508:
          v356 = **(_DWORD **)(v18 + 88) + 1;
          v357 = __clz(v356) ^ 0x1F;
          v358 = *(_DWORD *)(v18 + 148) - ((v356 << 8 >> v357) + (v357 << 8));
        }
        v748 = v358;
        v753 = v337;
        v734 = v336;
        v780 = 0;
        v359 = *(_QWORD *)(v18 + 8);
        v360 = *(unsigned int *)(v18 + 36);
        if (v359 + v360 > (unint64_t)v314)
        {
          v361 = 0;
          LODWORD(v362) = v769;
          v363 = v11 + 7;
          goto LABEL_831;
        }
        v729 = v346;
        v364 = *(_DWORD *)(v18 + 208);
        v776 = v314;
        for (j = (_DWORD)v314 - v359; v360 < j; LODWORD(v360) = v366 + v360)
        {
          v366 = ZSTD_insertBt1(v18, (_QWORD *)(v359 + v360), v769, v364, 0);
          v18 = a1;
        }
        v367 = &v11[7 * v313 + 4];
        *(_DWORD *)(v18 + 36) = j;
        if ((v364 - 6) < 2)
        {
          v361 = 0;
          if (*(_DWORD *)(v18 + 212) >= 0xFFFu)
            v399 = 4095;
          else
            v399 = *(_DWORD *)(v18 + 212);
          v400 = *(_QWORD *)(v18 + 8);
          v401 = (_DWORD)v776 - v400;
          v402 = v776 + 4;
          v713 = *(_DWORD *)(v18 + 204);
          v717 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v776) >> -(char)*(_DWORD *)(v18 + 200);
          v721 = *(_QWORD *)(v18 + 48);
          v403 = *(_DWORD *)(v721 + 4 * v717);
          v404 = -1 << (*(_DWORD *)(v18 + 196) - 1);
          v405 = ~v404;
          v406 = (_DWORD)v776 - v400 + v404 + 1;
          if ((int)v776 - (int)v400 < ~v404)
            v406 = 0;
          v737 = v406;
          v407 = *(_DWORD *)(v18 + 24);
          v408 = 1 << *(_DWORD *)(v18 + 192);
          if (v401 - *(_DWORD *)(v18 + 28) > v408 && *(_DWORD *)(v18 + 32) == 0)
            v410 = v401 - v408;
          else
            v410 = *(_DWORD *)(v18 + 28);
          if (v410 <= 1)
            v411 = 1;
          else
            v411 = v410;
          v741 = v411;
          v412 = *(_QWORD *)(v18 + 64);
          v413 = (unsigned int *)(v412 + 8 * (v401 & ~v404));
          v745 = v413 + 1;
          v414 = v401 + 9;
          v784 = 0;
          v415 = (v763 - 1);
          if (v729)
            v416 = 4;
          else
            v416 = 3;
          v417 = v401 - v407;
          v418 = v729;
          v419 = (char *)v769;
          v10 = v770;
          v363 = v11 + 7;
          while (1)
          {
            if (v418 == 3)
            {
              v420 = *v367 - 1;
              if (*v367 - 2 >= v417)
                goto LABEL_589;
            }
            else
            {
              v420 = v367[v418];
              if (v420 - 1 >= v417)
                goto LABEL_589;
            }
            if (v401 - v420 < v410 || *(_DWORD *)v776 != *(_DWORD *)&v776[-v420])
            {
              v10 = v770;
              goto LABEL_589;
            }
            v422 = (_QWORD *)((char *)v402 - v420);
            if (v778 <= (unint64_t)v402)
              break;
            v423 = v776 + 4;
            v424 = *v402 ^ *v422;
            if (!v424)
            {
              do
              {
                ++v422;
                if ((unint64_t)++v423 >= v778)
                  goto LABEL_608;
                v427 = *v423 ^ *v422;
              }
              while (!v427);
              v10 = v770;
              v425 = (_DWORD)v423 + (__clz(__rbit64(v427)) >> 3) - (_DWORD)v776;
              v426 = v425;
              if (v415 >= v425)
                goto LABEL_589;
LABEL_616:
              v428 = &v10[2 * v361];
              *v428 = v418 + ((int)(v729 << 31) >> 31);
              v428[1] = v425;
              ++v361;
              if (v425 > v399)
                goto LABEL_627;
              v415 = v426;
              if (&v776[v426] == (unsigned __int8 *)v769)
                goto LABEL_627;
              goto LABEL_589;
            }
            v10 = v770;
            v425 = (__clz(__rbit64(v424)) >> 3) + 4;
            v426 = v425;
            if (v415 < v425)
              goto LABEL_616;
LABEL_589:
            if (++v418 >= v416)
            {
              *(_DWORD *)(v721 + 4 * v717) = v401;
              if (v403 < v741)
              {
                v429 = a1;
                goto LABEL_626;
              }
              v491 = 0;
              v492 = 0;
              v493 = ~(-1 << v713);
              v494 = v401 + 2;
              v730 = (char *)v725 + v313;
              v495 = v400 + 8;
              while (1)
              {
                v496 = v492 >= v491 ? v491 : v492;
                v497 = v400 + v403;
                v498 = &v776[v496];
                v499 = (_QWORD *)(v497 + v496);
                if (v778 <= (unint64_t)&v776[v496])
                  break;
                v500 = *(_QWORD *)v498 ^ *v499;
                if (v500)
                {
                  v429 = a1;
                  v501 = (__clz(__rbit64(v500)) >> 3) + v496;
                  if (v501 <= v415)
                    goto LABEL_751;
                  goto LABEL_764;
                }
                v507 = 0;
                v508 = &v730[v496];
                do
                {
                  v509 = &v508[v507];
                  if ((unint64_t)&v508[v507] >= v778)
                  {
                    v503 = &v730[v496 + v507];
                    v499 = (_QWORD *)(v495 + v496 + v403 + v507);
                    v419 = (char *)v769;
                    v10 = v770;
                    v363 = v11 + 7;
                    if ((unint64_t)v503 >= v766)
                      goto LABEL_755;
                    goto LABEL_753;
                  }
                  v510 = *(_QWORD *)(v495 + v496 + v403 + v507);
                  v507 += 8;
                  v511 = *(_QWORD *)v509 ^ v510;
                }
                while (!v511);
                v512 = v507 + (__clz(__rbit64(v511)) >> 3);
                v419 = (char *)v769;
                v10 = v770;
                v429 = a1;
                v363 = v11 + 7;
                v501 = v512 + v496;
                if (v501 <= v415)
                {
LABEL_751:
                  v502 = v776;
                  goto LABEL_770;
                }
LABEL_764:
                if (v501 > v414 - v403)
                  v414 = v403 + v501;
                v504 = &v10[2 * v361];
                *v504 = v494 - v403;
                v504[1] = v501;
                ++v361;
                v502 = v776;
                v505 = v501 > 0x1000 || &v776[v501] == (unsigned __int8 *)v419;
                v415 = v501;
                if (v505)
                  goto LABEL_626;
LABEL_770:
                v506 = (unsigned int *)(v412 + 8 * (v403 & v405));
                if (*(unsigned __int8 *)(v497 + v501) >= *((unsigned __int8 *)v502 + v501))
                {
                  *v745 = v403;
                  if (v403 <= v737)
                  {
                    v745 = (unsigned int *)&v784;
                    goto LABEL_626;
                  }
                  v491 = v501;
                  v745 = (unsigned int *)(v412 + 8 * (v403 & v405));
                  v118 = v493-- != 0;
                  if (v118)
                    goto LABEL_744;
LABEL_626:
                  *v745 = 0;
                  *v413 = 0;
                  *(_DWORD *)(v429 + 36) = v414 - 8;
LABEL_627:
                  v15 = v763;
                  LODWORD(v362) = (_DWORD)v419;
                  goto LABEL_830;
                }
                *v413 = v403;
                if (v403 <= v737)
                {
                  v413 = (unsigned int *)&v784;
                  goto LABEL_626;
                }
                ++v506;
                v492 = v501;
                v413 = v506;
                v118 = v493-- != 0;
                if (!v118)
                  goto LABEL_626;
LABEL_744:
                v403 = *v506;
                if (*v506 < v741)
                  goto LABEL_626;
              }
              v503 = (char *)&v776[v496];
              if ((unint64_t)v498 >= v766)
                goto LABEL_755;
LABEL_753:
              if (*(_DWORD *)v499 == *(_DWORD *)v503)
              {
                v503 += 4;
                v499 = (_QWORD *)((char *)v499 + 4);
              }
LABEL_755:
              if ((unint64_t)v503 >= v765)
              {
                if (v503 >= v419)
                  goto LABEL_763;
              }
              else
              {
                if (*(unsigned __int16 *)v499 == *(unsigned __int16 *)v503)
                {
                  v503 += 2;
                  v499 = (_QWORD *)((char *)v499 + 2);
                }
                if (v503 >= v419)
                {
LABEL_763:
                  v429 = a1;
                  v501 = v503 - (char *)v776;
                  if (v501 <= v415)
                    goto LABEL_751;
                  goto LABEL_764;
                }
              }
              v10 = v770;
              if (*(unsigned __int8 *)v499 == *v503)
                ++v503;
              goto LABEL_763;
            }
          }
          v423 = v776 + 4;
LABEL_608:
          if ((unint64_t)v423 >= v766)
          {
            if ((unint64_t)v423 >= v765)
              goto LABEL_612;
          }
          else
          {
            if (*(_DWORD *)v422 == *(_DWORD *)v423)
            {
              v423 = (_QWORD *)((char *)v423 + 4);
              v422 = (_QWORD *)((char *)v422 + 4);
            }
            if ((unint64_t)v423 >= v765)
            {
LABEL_612:
              if ((unint64_t)v423 < v769)
                goto LABEL_613;
              goto LABEL_615;
            }
          }
          if (*(unsigned __int16 *)v422 == *(unsigned __int16 *)v423)
          {
            v423 = (_QWORD *)((char *)v423 + 2);
            v422 = (_QWORD *)((char *)v422 + 2);
          }
          if ((unint64_t)v423 < v769)
          {
LABEL_613:
            if (*(unsigned __int8 *)v422 == *(unsigned __int8 *)v423)
              LODWORD(v423) = (_DWORD)v423 + 1;
          }
LABEL_615:
          v10 = v770;
          v425 = (_DWORD)v423 - (_DWORD)v776;
          v426 = v425;
          if (v415 < v425)
            goto LABEL_616;
          goto LABEL_589;
        }
        v362 = (unsigned __int8 *)v769;
        v10 = v770;
        v363 = v11 + 7;
        if (v364 == 5)
        {
          v361 = 0;
          if (*(_DWORD *)(v18 + 212) >= 0xFFFu)
            v430 = 4095;
          else
            v430 = *(_DWORD *)(v18 + 212);
          v742 = *(_QWORD *)(v18 + 8);
          v431 = (_DWORD)v776 - v742;
          v432 = v776 + 4;
          v714 = *(_DWORD *)(v18 + 204);
          v718 = (0xCF1BBCDCBB000000 * *(_QWORD *)v776) >> -(char)*(_DWORD *)(v18 + 200);
          v722 = *(_QWORD *)(v18 + 48);
          v433 = *(_DWORD *)(v722 + 4 * v718);
          v434 = -1 << (*(_DWORD *)(v18 + 196) - 1);
          v435 = ~v434;
          v436 = (_DWORD)v776 - v742 + v434 + 1;
          if ((int)v776 - (int)v742 < ~v434)
            v436 = 0;
          v738 = v436;
          v437 = *(_DWORD *)(v18 + 24);
          v438 = 1 << *(_DWORD *)(v18 + 192);
          if (v431 - *(_DWORD *)(v18 + 28) > v438 && *(_DWORD *)(v18 + 32) == 0)
            v440 = v431 - v438;
          else
            v440 = *(_DWORD *)(v18 + 28);
          if (v440 <= 1)
            v441 = 1;
          else
            v441 = v440;
          v442 = *(_QWORD *)(v18 + 64);
          v443 = (unsigned int *)(v442 + 8 * (v431 & ~v434));
          v746 = v443 + 1;
          v444 = v431 + 9;
          v784 = 0;
          if (v729)
            v445 = 4;
          else
            v445 = 3;
          v446 = v431 - v437;
          v447 = v729;
          v448 = (v763 - 1);
          while (1)
          {
            if (v447 == 3)
            {
              v449 = *v367 - 1;
              if (*v367 - 2 >= v446)
                goto LABEL_646;
            }
            else
            {
              v449 = v367[v447];
              if (v449 - 1 >= v446)
                goto LABEL_646;
            }
            if (v431 - v449 < v440 || *(_DWORD *)v776 != *(_DWORD *)&v776[-v449])
            {
              v10 = v770;
              goto LABEL_646;
            }
            v451 = (_QWORD *)((char *)v432 - v449);
            if (v778 <= (unint64_t)v432)
              break;
            v452 = v776 + 4;
            v453 = *v432 ^ *v451;
            if (!v453)
            {
              do
              {
                ++v451;
                if ((unint64_t)++v452 >= v778)
                  goto LABEL_665;
                v456 = *v452 ^ *v451;
              }
              while (!v456);
              v10 = v770;
              v454 = (_DWORD)v452 + (__clz(__rbit64(v456)) >> 3) - (_DWORD)v776;
              v455 = v454;
              if (v448 >= v454)
                goto LABEL_646;
LABEL_673:
              v457 = &v10[2 * v361];
              *v457 = v447 + ((int)(v729 << 31) >> 31);
              v457[1] = v454;
              ++v361;
              if (v454 > v430)
                goto LABEL_829;
              v448 = v455;
              if (&v776[v455] == (unsigned __int8 *)v769)
                goto LABEL_829;
              goto LABEL_646;
            }
            v10 = v770;
            v454 = (__clz(__rbit64(v453)) >> 3) + 4;
            v455 = v454;
            if (v448 < v454)
              goto LABEL_673;
LABEL_646:
            if (++v447 >= v445)
            {
              *(_DWORD *)(v722 + 4 * v718) = v431;
              if (v433 < v441)
              {
LABEL_827:
                v523 = a1;
                goto LABEL_828;
              }
              v513 = 0;
              v514 = 0;
              v515 = ~(-1 << v714);
              v516 = v431 + 2;
              v731 = (char *)v725 + v313;
              v517 = v742 + 8;
              while (1)
              {
                v518 = v514 >= v513 ? v513 : v514;
                v519 = v742 + v433;
                v520 = &v776[v518];
                v521 = (_QWORD *)(v519 + v518);
                if (v778 <= (unint64_t)&v776[v518])
                  break;
                v522 = *(_QWORD *)v520 ^ *v521;
                if (v522)
                {
                  v523 = a1;
                  v524 = (__clz(__rbit64(v522)) >> 3) + v518;
                  if (v524 <= v448)
                    goto LABEL_793;
                  goto LABEL_806;
                }
                v530 = 0;
                v531 = &v731[v518];
                do
                {
                  v532 = &v531[v530];
                  if ((unint64_t)&v531[v530] >= v778)
                  {
                    v526 = &v731[v518 + v530];
                    v521 = (_QWORD *)(v517 + v518 + v433 + v530);
                    v362 = (unsigned __int8 *)v769;
                    v10 = v770;
                    v363 = v11 + 7;
                    if ((unint64_t)v526 >= v766)
                      goto LABEL_797;
                    goto LABEL_795;
                  }
                  v533 = *(_QWORD *)(v517 + v518 + v433 + v530);
                  v530 += 8;
                  v534 = *(_QWORD *)v532 ^ v533;
                }
                while (!v534);
                v535 = v530 + (__clz(__rbit64(v534)) >> 3);
                v362 = (unsigned __int8 *)v769;
                v10 = v770;
                v523 = a1;
                v363 = v11 + 7;
                v524 = v535 + v518;
                if (v524 <= v448)
                {
LABEL_793:
                  v525 = v776;
                  goto LABEL_812;
                }
LABEL_806:
                if (v524 > v444 - v433)
                  v444 = v433 + v524;
                v527 = &v10[2 * v361];
                *v527 = v516 - v433;
                v527[1] = v524;
                ++v361;
                v525 = v776;
                v528 = v524 > 0x1000 || &v776[v524] == v362;
                v448 = v524;
                if (v528)
                  goto LABEL_828;
LABEL_812:
                v529 = (unsigned int *)(v442 + 8 * (v433 & v435));
                if (*(unsigned __int8 *)(v519 + v524) >= *((unsigned __int8 *)v525 + v524))
                {
                  *v746 = v433;
                  if (v433 <= v738)
                    goto LABEL_964;
                  v513 = v524;
                  v746 = (unsigned int *)(v442 + 8 * (v433 & v435));
                  v118 = v515-- != 0;
                  if (!v118)
                    goto LABEL_828;
                }
                else
                {
                  *v443 = v433;
                  if (v433 <= v738)
                  {
LABEL_965:
                    v443 = (unsigned int *)&v784;
                    goto LABEL_828;
                  }
                  ++v529;
                  v514 = v524;
                  v443 = v529;
                  v118 = v515-- != 0;
                  if (!v118)
                    goto LABEL_828;
                }
                v433 = *v529;
                if (*v529 < v441)
                  goto LABEL_828;
              }
              v526 = (char *)&v776[v518];
              if ((unint64_t)v520 >= v766)
                goto LABEL_797;
LABEL_795:
              if (*(_DWORD *)v521 == *(_DWORD *)v526)
              {
                v526 += 4;
                v521 = (_QWORD *)((char *)v521 + 4);
              }
LABEL_797:
              if ((unint64_t)v526 >= v765)
              {
                if (v526 >= (char *)v362)
                  goto LABEL_805;
              }
              else
              {
                if (*(unsigned __int16 *)v521 == *(unsigned __int16 *)v526)
                {
                  v526 += 2;
                  v521 = (_QWORD *)((char *)v521 + 2);
                }
                if (v526 >= (char *)v362)
                {
LABEL_805:
                  v523 = a1;
                  v524 = v526 - (char *)v776;
                  if (v524 <= v448)
                    goto LABEL_793;
                  goto LABEL_806;
                }
              }
              v10 = v770;
              if (*(unsigned __int8 *)v521 == *v526)
                ++v526;
              goto LABEL_805;
            }
          }
          v452 = v776 + 4;
LABEL_665:
          if ((unint64_t)v452 >= v766)
          {
            if ((unint64_t)v452 >= v765)
              goto LABEL_669;
          }
          else
          {
            if (*(_DWORD *)v451 == *(_DWORD *)v452)
            {
              v452 = (_QWORD *)((char *)v452 + 4);
              v451 = (_QWORD *)((char *)v451 + 4);
            }
            if ((unint64_t)v452 >= v765)
            {
LABEL_669:
              if ((unint64_t)v452 >= v769)
                goto LABEL_672;
              goto LABEL_670;
            }
          }
          if (*(unsigned __int16 *)v451 == *(unsigned __int16 *)v452)
          {
            v452 = (_QWORD *)((char *)v452 + 2);
            v451 = (_QWORD *)((char *)v451 + 2);
          }
          if ((unint64_t)v452 >= v769)
          {
LABEL_672:
            v10 = v770;
            v454 = (_DWORD)v452 - (_DWORD)v776;
            v455 = v454;
            if (v448 < v454)
              goto LABEL_673;
            goto LABEL_646;
          }
LABEL_670:
          if (*(unsigned __int8 *)v451 == *(unsigned __int8 *)v452)
            LODWORD(v452) = (_DWORD)v452 + 1;
          goto LABEL_672;
        }
        if (v364 != 3)
        {
          v361 = 0;
          if (*(_DWORD *)(v18 + 212) >= 0xFFFu)
            v458 = 4095;
          else
            v458 = *(_DWORD *)(v18 + 212);
          v743 = *(_QWORD *)(v18 + 8);
          v459 = (_DWORD)v776 - v743;
          v460 = v776 + 4;
          v715 = *(_DWORD *)(v18 + 204);
          v719 = (-1640531535 * *(_DWORD *)v776) >> -(char)*(_DWORD *)(v18 + 200);
          v723 = *(_QWORD *)(v18 + 48);
          v461 = *(_DWORD *)(v723 + 4 * v719);
          v462 = -1 << (*(_DWORD *)(v18 + 196) - 1);
          v463 = ~v462;
          v464 = (_DWORD)v776 - v743 + v462 + 1;
          if ((int)v776 - (int)v743 < ~v462)
            v464 = 0;
          v739 = v464;
          v465 = *(_DWORD *)(v18 + 24);
          v466 = 1 << *(_DWORD *)(v18 + 192);
          if (v459 - *(_DWORD *)(v18 + 28) > v466 && *(_DWORD *)(v18 + 32) == 0)
            v468 = v459 - v466;
          else
            v468 = *(_DWORD *)(v18 + 28);
          if (v468 <= 1)
            v469 = 1;
          else
            v469 = v468;
          v470 = *(_QWORD *)(v18 + 64);
          v443 = (unsigned int *)(v470 + 8 * (v459 & ~v462));
          v746 = v443 + 1;
          v444 = v459 + 9;
          v784 = 0;
          if (v729)
            v471 = 4;
          else
            v471 = 3;
          v472 = v459 - v465;
          v473 = v729;
          v474 = (v763 - 1);
          while (1)
          {
            if (v473 == 3)
            {
              v475 = *v367 - 1;
              if (*v367 - 2 >= v472)
                goto LABEL_699;
            }
            else
            {
              v475 = v367[v473];
              if (v475 - 1 >= v472)
                goto LABEL_699;
            }
            if (v459 - v475 < v468 || *(_DWORD *)v776 != *(_DWORD *)&v776[-v475])
            {
              v10 = v770;
              goto LABEL_699;
            }
            v477 = (_QWORD *)((char *)v460 - v475);
            if (v778 <= (unint64_t)v460)
              break;
            v478 = v776 + 4;
            v479 = *v460 ^ *v477;
            if (!v479)
            {
              do
              {
                ++v477;
                if ((unint64_t)++v478 >= v778)
                  goto LABEL_718;
                v482 = *v478 ^ *v477;
              }
              while (!v482);
              v10 = v770;
              v480 = (_DWORD)v478 + (__clz(__rbit64(v482)) >> 3) - (_DWORD)v776;
              v481 = v480;
              if (v474 >= v480)
                goto LABEL_699;
LABEL_726:
              v483 = &v10[2 * v361];
              *v483 = v473 + ((int)(v729 << 31) >> 31);
              v483[1] = v480;
              ++v361;
              if (v480 > v458)
                goto LABEL_829;
              v474 = v481;
              if (&v776[v481] == (unsigned __int8 *)v769)
                goto LABEL_829;
              goto LABEL_699;
            }
            v10 = v770;
            v480 = (__clz(__rbit64(v479)) >> 3) + 4;
            v481 = v480;
            if (v474 < v480)
              goto LABEL_726;
LABEL_699:
            if (++v473 >= v471)
            {
              *(_DWORD *)(v723 + 4 * v719) = v459;
              if (v461 < v469)
                goto LABEL_827;
              v578 = 0;
              v579 = 0;
              v580 = ~(-1 << v715);
              v581 = v459 + 2;
              v732 = (char *)v725 + v313;
              v582 = v743 + 8;
              while (1)
              {
                v583 = v579 >= v578 ? v578 : v579;
                v584 = v743 + v461;
                v585 = &v776[v583];
                v586 = (_QWORD *)(v584 + v583);
                if (v778 <= (unint64_t)&v776[v583])
                  break;
                v587 = *(_QWORD *)v585 ^ *v586;
                if (v587)
                {
                  v523 = a1;
                  v588 = (__clz(__rbit64(v587)) >> 3) + v583;
                  if (v588 <= v474)
                    goto LABEL_883;
                  goto LABEL_896;
                }
                v594 = 0;
                v595 = &v732[v583];
                do
                {
                  v596 = &v595[v594];
                  if ((unint64_t)&v595[v594] >= v778)
                  {
                    v590 = &v732[v583 + v594];
                    v586 = (_QWORD *)(v582 + v583 + v461 + v594);
                    v362 = (unsigned __int8 *)v769;
                    v10 = v770;
                    v363 = v11 + 7;
                    if ((unint64_t)v590 >= v766)
                      goto LABEL_887;
                    goto LABEL_885;
                  }
                  v597 = *(_QWORD *)(v582 + v583 + v461 + v594);
                  v594 += 8;
                  v598 = *(_QWORD *)v596 ^ v597;
                }
                while (!v598);
                v599 = v594 + (__clz(__rbit64(v598)) >> 3);
                v362 = (unsigned __int8 *)v769;
                v10 = v770;
                v523 = a1;
                v363 = v11 + 7;
                v588 = v599 + v583;
                if (v588 <= v474)
                {
LABEL_883:
                  v589 = v776;
                  goto LABEL_902;
                }
LABEL_896:
                if (v588 > v444 - v461)
                  v444 = v461 + v588;
                v591 = &v10[2 * v361];
                *v591 = v581 - v461;
                v591[1] = v588;
                ++v361;
                v589 = v776;
                v592 = v588 > 0x1000 || &v776[v588] == v362;
                v474 = v588;
                if (v592)
                  goto LABEL_828;
LABEL_902:
                v593 = (unsigned int *)(v470 + 8 * (v461 & v463));
                if (*(unsigned __int8 *)(v584 + v588) >= *((unsigned __int8 *)v589 + v588))
                {
                  *v746 = v461;
                  if (v461 > v739)
                  {
                    v578 = v588;
                    v746 = (unsigned int *)(v470 + 8 * (v461 & v463));
                    v118 = v580-- != 0;
                    if (v118)
                      goto LABEL_876;
LABEL_828:
                    *v746 = 0;
                    *v443 = 0;
                    *(_DWORD *)(v523 + 36) = v444 - 8;
LABEL_829:
                    v15 = v763;
LABEL_830:
                    LODWORD(v314) = (_DWORD)v776;
                    goto LABEL_831;
                  }
LABEL_964:
                  v746 = (unsigned int *)&v784;
                  goto LABEL_828;
                }
                *v443 = v461;
                if (v461 <= v739)
                  goto LABEL_965;
                ++v593;
                v579 = v588;
                v443 = v593;
                v118 = v580-- != 0;
                if (!v118)
                  goto LABEL_828;
LABEL_876:
                v461 = *v593;
                if (*v593 < v469)
                  goto LABEL_828;
              }
              v590 = (char *)&v776[v583];
              if ((unint64_t)v585 >= v766)
                goto LABEL_887;
LABEL_885:
              if (*(_DWORD *)v586 == *(_DWORD *)v590)
              {
                v590 += 4;
                v586 = (_QWORD *)((char *)v586 + 4);
              }
LABEL_887:
              if ((unint64_t)v590 >= v765)
              {
                if (v590 >= (char *)v362)
                  goto LABEL_895;
              }
              else
              {
                if (*(unsigned __int16 *)v586 == *(unsigned __int16 *)v590)
                {
                  v590 += 2;
                  v586 = (_QWORD *)((char *)v586 + 2);
                }
                if (v590 >= (char *)v362)
                {
LABEL_895:
                  v523 = a1;
                  v588 = v590 - (char *)v776;
                  if (v588 <= v474)
                    goto LABEL_883;
                  goto LABEL_896;
                }
              }
              v10 = v770;
              if (*(unsigned __int8 *)v586 == *v590)
                ++v590;
              goto LABEL_895;
            }
          }
          v478 = v776 + 4;
LABEL_718:
          if ((unint64_t)v478 >= v766)
          {
            if ((unint64_t)v478 >= v765)
              goto LABEL_722;
          }
          else
          {
            if (*(_DWORD *)v477 == *(_DWORD *)v478)
            {
              v478 = (_QWORD *)((char *)v478 + 4);
              v477 = (_QWORD *)((char *)v477 + 4);
            }
            if ((unint64_t)v478 >= v765)
            {
LABEL_722:
              if ((unint64_t)v478 >= v769)
                goto LABEL_725;
              goto LABEL_723;
            }
          }
          if (*(unsigned __int16 *)v477 == *(unsigned __int16 *)v478)
          {
            v478 = (_QWORD *)((char *)v478 + 2);
            v477 = (_QWORD *)((char *)v477 + 2);
          }
          if ((unint64_t)v478 >= v769)
          {
LABEL_725:
            v10 = v770;
            v480 = (_DWORD)v478 - (_DWORD)v776;
            v481 = v480;
            if (v474 < v480)
              goto LABEL_726;
            goto LABEL_699;
          }
LABEL_723:
          if (*(unsigned __int8 *)v477 == *(unsigned __int8 *)v478)
            LODWORD(v478) = (_DWORD)v478 + 1;
          goto LABEL_725;
        }
        v361 = 0;
        v708 = (char *)v725 + v313;
        if (*(_DWORD *)(v18 + 212) >= 0xFFFu)
          v368 = 4095;
        else
          v368 = *(_DWORD *)(v18 + 212);
        v369 = *(_QWORD *)(v18 + 8);
        v370 = (_DWORD)v776 - v369;
        v371 = (char *)(v776 + 3);
        v712 = *(_DWORD *)(v18 + 204);
        v716 = (-1640531535 * *(_DWORD *)v776) >> -(char)*(_DWORD *)(v18 + 200);
        v720 = *(_QWORD *)(v18 + 48);
        v372 = *(_DWORD *)(v720 + 4 * v716);
        v373 = *(_QWORD *)(v18 + 64);
        v374 = -1 << (*(_DWORD *)(v18 + 196) - 1);
        v375 = ~v374;
        v376 = (_DWORD)v776 - v369 + v374 + 1;
        if ((int)v776 - (int)v369 < ~v374)
          v376 = 0;
        v736 = v376;
        v377 = *(_DWORD *)(v18 + 24);
        v378 = 1 << *(_DWORD *)(v18 + 192);
        if (v370 - *(_DWORD *)(v18 + 28) > v378 && *(_DWORD *)(v18 + 32) == 0)
          v380 = v370 - v378;
        else
          v380 = *(_DWORD *)(v18 + 28);
        if (v380 <= 1)
          v381 = 1;
        else
          v381 = v380;
        v382 = (unsigned int *)(v373 + 8 * (v370 & ~v374));
        v740 = v373;
        v744 = v382 + 1;
        v383 = v370 + 9;
        v784 = 0;
        if (v729)
          v384 = 4;
        else
          v384 = 3;
        v385 = v370 - v377;
        v386 = v729;
        v387 = (v763 - 1);
        v15 = v763;
        while (2)
        {
          if (v386 != 3)
          {
            v388 = v367[v386];
            if (v388 - 1 < v385)
              goto LABEL_541;
            goto LABEL_536;
          }
          v388 = *v367 - 1;
          if (*v367 - 2 >= v385)
            goto LABEL_536;
LABEL_541:
          if (v370 - v388 < v380 || ((*(_DWORD *)&v776[-v388] ^ *(_DWORD *)v776) & 0xFFFFFF) != 0)
          {
            v15 = v763;
            v10 = v770;
            goto LABEL_536;
          }
          v390 = &v371[-v388];
          if (v778 > (unint64_t)v371)
          {
            v391 = v776 + 3;
            v392 = *(_QWORD *)v371 ^ *(_QWORD *)v390;
            if (v392)
            {
              v393 = __clz(__rbit64(v392)) >> 3;
            }
            else
            {
              do
              {
                v390 += 8;
                if ((unint64_t)++v391 >= v778)
                  goto LABEL_555;
                v394 = *v391 ^ *(_QWORD *)v390;
              }
              while (!v394);
              v393 = (char *)v391 + (__clz(__rbit64(v394)) >> 3) - v371;
            }
            v15 = v763;
            v10 = v770;
            v395 = v393 + 3;
            v396 = v395;
            if (v387 < v395)
              goto LABEL_563;
            goto LABEL_536;
          }
          v391 = v776 + 3;
LABEL_555:
          if ((unint64_t)v391 >= v766)
          {
            if ((unint64_t)v391 >= v765)
              goto LABEL_559;
          }
          else
          {
            if (*(_DWORD *)v390 == *(_DWORD *)v391)
            {
              v391 = (_QWORD *)((char *)v391 + 4);
              v390 += 4;
            }
            if ((unint64_t)v391 >= v765)
            {
LABEL_559:
              if ((unint64_t)v391 < v769)
                goto LABEL_560;
              goto LABEL_562;
            }
          }
          if (*(unsigned __int16 *)v390 == *(unsigned __int16 *)v391)
          {
            v391 = (_QWORD *)((char *)v391 + 2);
            v390 += 2;
          }
          if ((unint64_t)v391 < v769)
          {
LABEL_560:
            if (*v390 == *(_BYTE *)v391)
              LODWORD(v391) = (_DWORD)v391 + 1;
          }
LABEL_562:
          v10 = v770;
          v397 = (_DWORD)v391 - (_DWORD)v371;
          v15 = v763;
          v395 = v397 + 3;
          v396 = v395;
          if (v387 >= v395)
            goto LABEL_536;
LABEL_563:
          v398 = &v10[2 * v361];
          *v398 = v386 + ((int)(v729 << 31) >> 31);
          v398[1] = v395;
          ++v361;
          if (v395 > v368)
          {
            v10 = v770;
            goto LABEL_830;
          }
          v387 = v396;
          v10 = v770;
          if (&v776[v396] == (unsigned __int8 *)v769)
            goto LABEL_830;
LABEL_536:
          if (++v386 < v384)
            continue;
          break;
        }
        if (v387 > 2)
        {
          v484 = a1;
          goto LABEL_872;
        }
        v484 = a1;
        v485 = *(_QWORD *)(a1 + 56);
        v486 = *(_DWORD *)v776;
        v487 = 32 - *(_DWORD *)(a1 + 40);
        if (v711 < v370)
        {
          v488 = v711;
          do
          {
            *(_DWORD *)(v485 + 4 * ((900185344 * *(_DWORD *)(v369 + v488)) >> v487)) = v488;
            ++v488;
          }
          while (v762 - (_DWORD)v369 != v488);
        }
        v489 = *(unsigned int *)(v485 + 4 * ((900185344 * v486) >> v487));
        if (v489 < v381 || (v370 - v489) >> 18 != 0)
        {
          v711 = (_DWORD)v776 - v369;
          goto LABEL_872;
        }
        v620 = (_DWORD *)(v369 + v489);
        if (v778 <= (unint64_t)v776)
        {
          v623 = (char *)v776;
          if ((unint64_t)v776 < v766)
          {
LABEL_967:
            if (*v620 == *(_DWORD *)v623)
            {
              v623 += 4;
              ++v620;
            }
          }
          goto LABEL_969;
        }
        v621 = *(_QWORD *)v776 ^ *(_QWORD *)v620;
        if (!v621)
        {
          v625 = 0;
          while (1)
          {
            v623 = &v708[v625];
            if ((unint64_t)&v708[v625] >= v778)
              break;
            v626 = *(_QWORD *)(v369 + v489 + 8 + v625);
            v625 += 8;
            v627 = *(_QWORD *)v623 ^ v626;
            if (v627)
            {
              v622 = v625 + (__clz(__rbit64(v627)) >> 3);
              v711 = (_DWORD)v776 - v369;
              if (v622 < 3)
                goto LABEL_872;
              goto LABEL_978;
            }
          }
          v620 = (_DWORD *)(v369 + v489 + v625 + 8);
          if ((unint64_t)v623 < v766)
            goto LABEL_967;
LABEL_969:
          if ((unint64_t)v623 >= v765)
          {
            if ((unint64_t)v623 >= v769)
              goto LABEL_977;
          }
          else
          {
            if (*(unsigned __int16 *)v620 == *(unsigned __int16 *)v623)
            {
              v623 += 2;
              v620 = (_DWORD *)((char *)v620 + 2);
            }
            if ((unint64_t)v623 >= v769)
            {
LABEL_977:
              v622 = v623 - (char *)v776;
              v711 = (_DWORD)v776 - v369;
              if (v622 >= 3)
                goto LABEL_978;
              goto LABEL_872;
            }
          }
          if (*(unsigned __int8 *)v620 == *v623)
            ++v623;
          goto LABEL_977;
        }
        v622 = __clz(__rbit64(v621)) >> 3;
        v711 = (_DWORD)v776 - v369;
        if (v622 >= 3)
        {
LABEL_978:
          *v10 = v370 - v489 + 2;
          v10[1] = v622;
          if (v622 > v368 || &v776[v622] == (unsigned __int8 *)v769)
          {
            v361 = 1;
            v711 = (_DWORD)v776 - v369;
            LODWORD(v314) = (_DWORD)v776;
            *(_DWORD *)(a1 + 36) = v370 + 1;
            goto LABEL_831;
          }
          v361 = 1;
          v711 = (_DWORD)v776 - v369;
          v387 = v622;
        }
LABEL_872:
        *(_DWORD *)(v720 + 4 * v716) = v370;
        if (v372 < v381)
        {
          LODWORD(v314) = (_DWORD)v776;
          goto LABEL_874;
        }
        v600 = 0;
        v601 = 0;
        v602 = ~(-1 << v712);
        v603 = v370 + 2;
        v733 = (char *)v725 + v313;
        v724 = v369 + 8;
        v314 = v776;
        while (2)
        {
          if (v601 >= v600)
            v604 = v600;
          else
            v604 = v601;
          v605 = v369 + v372;
          v606 = (char *)&v314[v604];
          v607 = (_DWORD *)(v605 + v604);
          if (v778 <= (unint64_t)&v314[v604])
          {
            v610 = &v314[v604];
            if ((unint64_t)v606 < v766)
            {
LABEL_926:
              if (*v607 == *(_DWORD *)v610)
              {
                v610 += 4;
                ++v607;
              }
            }
          }
          else
          {
            v608 = *(_QWORD *)v606 ^ *(_QWORD *)v607;
            if (v608)
            {
              v609 = (__clz(__rbit64(v608)) >> 3) + v604;
              v484 = a1;
              if (v609 <= v387)
                goto LABEL_924;
LABEL_937:
              if (v609 > v383 - v372)
                v383 = v372 + v609;
              v611 = &v10[2 * v361];
              *v611 = v603 - v372;
              v611[1] = v609;
              ++v361;
              v612 = v609 > 0x1000 || &v314[v609] == v362;
              v387 = v609;
              v15 = v763;
              if (v612)
                goto LABEL_874;
              goto LABEL_943;
            }
            v614 = 0;
            v615 = &v733[v604];
            while (1)
            {
              v616 = &v615[v614];
              if ((unint64_t)&v615[v614] >= v778)
                break;
              v617 = *(_QWORD *)(v724 + v604 + v372 + v614);
              v614 += 8;
              v618 = *(_QWORD *)v616 ^ v617;
              v363 = v11 + 7;
              v362 = (unsigned __int8 *)v769;
              if (v618)
              {
                v619 = __clz(__rbit64(v618));
                v10 = v770;
                v314 = v776;
                v484 = a1;
                v609 = v614 + (v619 >> 3) + v604;
                if (v609 > v387)
                  goto LABEL_937;
                goto LABEL_924;
              }
            }
            v610 = (unsigned __int8 *)&v733[v604 + v614];
            v607 = (_DWORD *)(v724 + v604 + v372 + v614);
            v10 = v770;
            v314 = v776;
            if ((unint64_t)v610 < v766)
              goto LABEL_926;
          }
          if ((unint64_t)v610 >= v765)
          {
            if (v610 < v362)
              goto LABEL_934;
          }
          else
          {
            if (*(unsigned __int16 *)v607 == *(unsigned __int16 *)v610)
            {
              v610 += 2;
              v607 = (_DWORD *)((char *)v607 + 2);
            }
            if (v610 >= v362)
              goto LABEL_936;
LABEL_934:
            if (*(unsigned __int8 *)v607 == *v610)
              ++v610;
          }
LABEL_936:
          v609 = v610 - (unsigned __int8 *)v606 + v604;
          v484 = a1;
          if (v609 > v387)
            goto LABEL_937;
LABEL_924:
          v15 = v763;
LABEL_943:
          v613 = (unsigned int *)(v740 + 8 * (v372 & v375));
          if (*(unsigned __int8 *)(v605 + v609) < v314[v609])
          {
            *v382 = v372;
            if (v372 <= v736)
            {
              v382 = (unsigned int *)&v784;
              goto LABEL_874;
            }
            ++v613;
            v601 = v609;
            v382 = v613;
            v118 = v602-- != 0;
            if (!v118)
              goto LABEL_874;
            goto LABEL_917;
          }
          *v744 = v372;
          if (v372 > v736)
          {
            v600 = v609;
            v744 = (unsigned int *)(v740 + 8 * (v372 & v375));
            v118 = v602-- != 0;
            if (!v118)
              goto LABEL_874;
LABEL_917:
            v372 = *v613;
            if (*v613 < v381)
              goto LABEL_874;
            continue;
          }
          break;
        }
        v744 = (unsigned int *)&v784;
LABEL_874:
        *v744 = 0;
        *v382 = 0;
        *(_DWORD *)(v484 + 36) = v383 - 8;
LABEL_831:
        v780 = v361;
        ZSTD_optLdm_processMatchCandidate((uint64_t *)&v781, (uint64_t)v10, &v780, (_DWORD)v314 - (_DWORD)v754, (_DWORD)v362 - (_DWORD)v314);
        v536 = v780;
        if (!v780)
        {
          v18 = a1;
LABEL_469:
          v14 = v768;
          v308 = v762;
          goto LABEL_470;
        }
        v537 = v780 - 1;
        v270 = v10[2 * v537 + 1];
        if (v270 <= v735 && v270 + v313 <= 0xFFF)
        {
          v538 = 0;
          v539 = v748 + v753;
          v18 = a1;
          while (1)
          {
            v540 = &v10[2 * v538];
            v541 = v15;
            if (v538)
              v541 = *(v540 - 1) + 1;
            v542 = v540[1];
            if (v542 >= v541)
              break;
LABEL_835:
            if (++v538 == v536)
              goto LABEL_469;
          }
          v543 = *v540;
          v544 = __clz(v543 + 1) ^ 0x1F;
          if (*(_DWORD *)(a1 + 160) == 1)
          {
            v545 = 0;
            v546 = v313 + v542;
            v547 = v313 + v542;
            while (1)
            {
              v549 = v542 + v313;
              v550 = __clz(v542 - 2);
              v551 = ((v542 - 2) << 8 >> (v550 ^ 0x1F)) + (((v550 ^ 0x1F) + (_DWORD)v544) << 8) + v539 + 4096;
              if (v549 <= v307)
              {
                if (v551 >= (int)v11[7 * v549])
                  goto LABEL_842;
                goto LABEL_841;
              }
              v552 = v307;
              v553 = (v546 - v545) - (unint64_t)v307;
              if (v553 >= 2)
              {
                v307 = (v553 & 0xFFFFFFFFFFFFFFFELL) + v307;
                v554 = (v547 - v552) & 0xFFFFFFFFFFFFFFFELL;
                v555 = &v779[7 * v552];
                do
                {
                  *(v555 - 7) = 0x40000000;
                  *v555 = 0x40000000;
                  v555 += 14;
                  v554 -= 2;
                }
                while (v554);
                if (v553 == (v553 & 0xFFFFFFFFFFFFFFFELL))
                  goto LABEL_841;
              }
              else
              {
                v307 = v307;
              }
              v556 = &v363[7 * v307];
              do
              {
                ++v307;
                *v556 = 0x40000000;
                v556 += 7;
              }
              while (v307 < v549);
LABEL_841:
              v548 = (signed int *)&v11[7 * v549];
              v548[2] = v542;
              v548[3] = v23;
              *v548 = v551;
              v548[1] = v543;
LABEL_842:
              --v542;
              ++v545;
              --v547;
              if (v542 < v541)
                goto LABEL_835;
            }
          }
          v557 = 0;
          v559 = *(_QWORD *)(a1 + 96);
          v558 = *(_QWORD *)(a1 + 104);
          v560 = *(_DWORD *)(a1 + 156) + *(_DWORD *)(a1 + 152) + 51;
          v561 = v313 + v542;
          v562 = v313 + v542;
          while (2)
          {
            v564 = v542 - 3;
            if (v542 - 3 < 0x80)
              v565 = ZSTD_MLcode_ML_Code[v564];
            else
              v565 = 67 - __clz(v564);
            v566 = v542 + v313;
            v567 = *(_DWORD *)(v558 + 4 * v544) + 1;
            v568 = __clz(v567) ^ 0x1F;
            v569 = 4 * v565;
            v570 = *(unsigned int *)((char *)ML_bits + v569);
            LODWORD(v569) = *(_DWORD *)(v559 + v569) + 1;
            v571 = __clz(v569) ^ 0x1F;
            v572 = v539
                 + v560
                 - (v567 << 8 >> v568)
                 - ((_DWORD)v569 << 8 >> v571)
                 + (((_DWORD)v544 + v570 - v568 - v571) << 8);
            if (v566 <= v307)
            {
              if (v572 < (int)v11[7 * v566])
                goto LABEL_855;
            }
            else
            {
              v573 = v307;
              v574 = (v561 - v557) - (unint64_t)v307;
              if (v574 < 2)
              {
                v307 = v307;
                goto LABEL_868;
              }
              v307 = (v574 & 0xFFFFFFFFFFFFFFFELL) + v307;
              v575 = (v562 - v573) & 0xFFFFFFFFFFFFFFFELL;
              v576 = &v779[7 * v573];
              do
              {
                *(v576 - 7) = 0x40000000;
                *v576 = 0x40000000;
                v576 += 14;
                v575 -= 2;
              }
              while (v575);
              v363 = v11 + 7;
              if (v574 != (v574 & 0xFFFFFFFFFFFFFFFELL))
              {
LABEL_868:
                v577 = &v363[7 * v307];
                do
                {
                  ++v307;
                  *v577 = 0x40000000;
                  v577 += 7;
                }
                while (v307 < v566);
              }
LABEL_855:
              v563 = &v11[7 * v566];
              v563[2] = v542;
              v563[3] = v23;
              *v563 = v572;
              v563[1] = v543;
            }
            --v542;
            ++v557;
            --v562;
            if (v542 < v541)
              goto LABEL_835;
            continue;
          }
        }
        v18 = a1;
        if (*v734)
          v693 = 0;
        else
          v693 = v11[7 * v313 + 3];
        v17 = v747;
        v14 = v768;
        v279 = v10[2 * v537];
        v697 = v313 - v693;
        if (v697 <= 0x1000)
          v278 = v697;
        else
          v278 = 0;
        if (!v270)
        {
LABEL_1081:
          v698 = &v11[7 * v278];
          v699 = *((_QWORD *)v698 + 2);
          a3[2] = v698[6];
          *(_QWORD *)a3 = v699;
          goto LABEL_1011;
        }
LABEL_997:
        v629 = &v11[7 * v278 + 4];
        if (v279 < 3)
        {
          if (v23)
            v634 = v279;
          else
            v634 = v279 + 1;
          if (v634)
          {
            if (v634 == 3)
            {
              v631 = *v629;
              v633 = v631 - 1;
            }
            else
            {
              v633 = v629[v634];
              v631 = *v629;
            }
            v645 = v634 > 1;
            v636 = 2;
            if (v645)
              v636 = 1;
            v630 = &v629[v636];
          }
          else
          {
            v635 = *(_QWORD *)v629;
            v630 = &v11[7 * v278 + 6];
            v633 = v635;
            v631 = HIDWORD(v635);
          }
        }
        else
        {
          v632 = *v629;
          v630 = &v11[7 * v278 + 5];
          v631 = v632;
          v633 = v279 - 2;
        }
        v637 = *v630;
        *(_QWORD *)a3 = v633 | (v631 << 32);
        a3[2] = v637;
LABEL_1011:
        v638 = v278 + 1;
        v639 = &v11[7 * v278 + 7];
        *v639 = v728;
        v639[1] = v279;
        v639[2] = v270;
        v639[3] = v23;
        *((_QWORD *)v639 + 2) = v785;
        v639[6] = v786;
        v640 = v278;
        if (!v278)
        {
          v646 = 1;
          v648 = v726;
          v647 = a2;
          v649 = v769 - 32;
          goto LABEL_1020;
        }
        do
        {
          v641 = &v11[7 * v640];
          v642 = v641[3] + v641[2];
          v643 = &v11[7 * v278];
          v644 = *(_OWORD *)v641;
          *(_OWORD *)(v643 + 3) = *(_OWORD *)(v641 + 3);
          *(_OWORD *)v643 = v644;
          --v278;
          v118 = v640 >= v642;
          v640 -= v642;
          v645 = v640 != 0 && v118;
          if (!v118)
            v640 = 0;
        }
        while (v645);
        v646 = v278 + 1;
        v648 = v726;
        v647 = a2;
        v649 = v769 - 32;
        if (v646 <= v638)
        {
          while (1)
          {
LABEL_1020:
            while (1)
            {
              v652 = v646;
              v654 = v11[7 * v646 + 2];
              v653 = v11[7 * v646 + 3];
              if (v654)
                break;
              v14 = &v17[v653];
              v646 = v652 + 1;
              if (v652 + 1 > v638)
                goto LABEL_1016;
            }
            v655 = v11[7 * v652 + 1];
            if (*(_DWORD *)(v18 + 176) != 2)
            {
              if ((_DWORD)v653)
              {
                v656 = *v648;
                v657 = v17;
                v658 = v653;
                do
                {
                  v659 = *v657++;
                  *(_DWORD *)&v656[4 * v659] += 2;
                  --v658;
                }
                while (v658);
              }
              *(_DWORD *)(v18 + 128) += 2 * v653;
            }
            v660 = v653 < 0x40 ? ZSTD_LLcode_LL_Code[v653] : 50 - __clz(v653);
            ++*(_DWORD *)(*(_QWORD *)(v18 + 88) + 4 * v660);
            ++*(_DWORD *)(v18 + 132);
            v661 = v655 + 1;
            v662 = __clz(v655 + 1);
            ++*(_DWORD *)(*(_QWORD *)(v18 + 104) + 4 * (v662 ^ 0x1F));
            ++*(_DWORD *)(v18 + 140);
            v663 = v654 - 3;
            v664 = v654 - 3 < 0x80 ? ZSTD_MLcode_ML_Code[v663] : 67 - __clz(v663);
            ++*(_DWORD *)(*(_QWORD *)(v18 + 96) + 4 * v664);
            ++*(_DWORD *)(v18 + 136);
            v665 = &v17[v653];
            v666 = *(char **)(v647 + 24);
            if ((unint64_t)&v17[v653] > v649)
              break;
            *(_OWORD *)v666 = *(_OWORD *)v17;
            v669 = *(_QWORD *)(v647 + 24);
            if (v653 > 0x10)
            {
              v670 = (_OWORD *)(v669 + 16);
              v671 = v669 + v653;
              v672 = (__int128 *)(v17 + 16);
              do
              {
                v673 = *v672++;
                *v670++ = v673;
              }
              while ((unint64_t)v670 < v671);
LABEL_1065:
              *(_QWORD *)(v647 + 24) += v653;
              v680 = *(_QWORD *)(v647 + 8);
              if (v653 >= 0x10000)
              {
                v691 = (unint64_t)(v680 - *(_QWORD *)v647) >> 3;
                *(_DWORD *)(v647 + 72) = 1;
                *(_DWORD *)(v647 + 76) = v691;
              }
              goto LABEL_1067;
            }
            *(_QWORD *)(v647 + 24) = v669 + v653;
            v680 = *(_QWORD *)(v647 + 8);
LABEL_1067:
            *(_WORD *)(v680 + 4) = v653;
            *(_DWORD *)v680 = v661;
            if (v663 >= 0x10000)
            {
              v692 = (unint64_t)(v680 - *(_QWORD *)v647) >> 3;
              *(_DWORD *)(v647 + 72) = 2;
              *(_DWORD *)(v647 + 76) = v692;
            }
            *(_WORD *)(v680 + 6) = v663;
            *(_QWORD *)(v647 + 8) = v680 + 8;
            v17 += v654 + v653;
            v14 = v17;
            v646 = v652 + 1;
            if (v652 + 1 > v638)
              goto LABEL_1016;
          }
          if ((unint64_t)v17 <= v649)
          {
            v668 = &v666[v649 - (_QWORD)v17];
            v674 = v17;
            v675 = *(char **)(v647 + 24);
            do
            {
              v676 = *(_OWORD *)v674;
              v674 += 16;
              *(_OWORD *)v675 = v676;
              v675 += 16;
            }
            while (v675 < v668);
            v667 = (unsigned __int8 *)v649;
            if (v649 >= (unint64_t)v665)
              goto LABEL_1065;
          }
          else
          {
            v667 = v17;
            v668 = *(char **)(v647 + 24);
            if (v17 >= v665)
              goto LABEL_1065;
          }
          if ((unint64_t)v17 <= v649)
            v677 = (unsigned __int8 *)v649;
          else
            v677 = v17;
          v678 = &v17[v653] - v677;
          if (v678 < 8)
          {
            v679 = v667;
            goto LABEL_1064;
          }
          if ((unint64_t)(v666 - (char *)v17) < 0x20)
          {
            v679 = v667;
            goto LABEL_1064;
          }
          if (v678 >= 0x20)
          {
            v681 = v678 & 0xFFFFFFFFFFFFFFE0;
            v682 = (__int128 *)(v667 + 16);
            v683 = &v666[v677 - v17 + 16];
            v684 = v678 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v685 = *v682;
              *((_OWORD *)v683 - 1) = *(v682 - 1);
              *(_OWORD *)v683 = v685;
              v682 += 2;
              v683 += 32;
              v684 -= 32;
            }
            while (v684);
            if (v678 == v681)
              goto LABEL_1065;
            if ((v678 & 0x18) == 0)
            {
              v679 = &v667[v681];
              v668 += v681;
              goto LABEL_1064;
            }
          }
          else
          {
            v681 = 0;
          }
          v668 += v678 & 0xFFFFFFFFFFFFFFF8;
          v679 = &v667[v678 & 0xFFFFFFFFFFFFFFF8];
          v686 = &v667[v681];
          v687 = &v666[&v677[v681] - v17];
          v688 = v681 - (v678 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v689 = *(_QWORD *)v686;
            v686 += 8;
            *(_QWORD *)v687 = v689;
            v687 += 8;
            v688 += 8;
          }
          while (v688);
          if (v678 == (v678 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_1065;
          do
          {
LABEL_1064:
            v690 = *v679++;
            *v668++ = v690;
          }
          while (v679 < v665);
          goto LABEL_1065;
        }
LABEL_1016:
        if (*(_DWORD *)(v18 + 176) != 2)
        {
          v650 = *(_DWORD *)(v18 + 128) + 1;
          v651 = __clz(v650) ^ 0x1F;
          *(_DWORD *)(v18 + 144) = (v650 << 8 >> v651) + (v651 << 8);
        }
        v19 = *(_DWORD *)(v18 + 140) + 1;
        v20 = __clz(v19);
        v21 = vadd_s32(*(int32x2_t *)(v18 + 132), (int32x2_t)0x100000001);
        v22 = (int32x2_t)veor_s8((int8x8_t)vclz_s32(v21), (int8x8_t)0x1F0000001FLL);
        *(int32x2_t *)(v18 + 148) = vadd_s32(vshl_n_s32(v22, 8uLL), (int32x2_t)vshl_u32((uint32x2_t)vshl_n_s32(v21, 8uLL), (uint32x2_t)vneg_s32(v22)));
        *(_DWORD *)(v18 + 156) = (v19 << 8 >> (v20 ^ 0x1F)) + ((v20 ^ 0x1F) << 8);
        if ((unint64_t)v14 >= v764)
        {
LABEL_1112:
          v754 = v17;
          return v769 - (_QWORD)v754;
        }
      }
      else
      {
        ++v14;
        v18 = a1;
        if ((unint64_t)v14 >= v764)
          goto LABEL_1112;
      }
    }
    v26 = 0;
    if (*(_DWORD *)(v18 + 212) >= 0xFFFu)
      v65 = 4095;
    else
      v65 = *(_DWORD *)(v18 + 212);
    v66 = *(_QWORD *)(v18 + 8);
    v67 = (_DWORD)v14 - v66;
    v68 = -1 << (*(_DWORD *)(v18 + 196) - 1);
    v69 = ~v68;
    v70 = (_DWORD)v14 - v66 + v68 + 1;
    if ((int)v14 - (int)v66 < ~v68)
      v70 = 0;
    v772 = v70;
    v71 = 1 << *(_DWORD *)(v18 + 192);
    if (v67 - *(_DWORD *)(v18 + 28) > v71 && *(_DWORD *)(v18 + 32) == 0)
      v73 = v67 - v71;
    else
      v73 = *(_DWORD *)(v18 + 28);
    if (v73 <= 1)
      v74 = 1;
    else
      v74 = v73;
    v75 = v67 - *(_DWORD *)(v18 + 24);
    v76 = (char *)(v14 + 12);
    v750 = *(_DWORD *)(v18 + 204);
    v77 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v14) >> -(char)*(_DWORD *)(v18 + 200);
    v756 = *(_QWORD *)(v18 + 48);
    v78 = *(_DWORD *)(v756 + 4 * v77);
    v79 = v23 == 0;
    v80 = *(_QWORD *)(v18 + 64);
    v81 = (unsigned int *)(v80 + 8 * (v67 & ~v68));
    v82 = v81 + 1;
    v83 = v67 + 9;
    v784 = 0;
    if (v23)
      v84 = 3;
    else
      v84 = 4;
    v85 = (char *)(v14 + 4);
    if (v23)
      v86 = 0;
    else
      v86 = -1;
    v87 = (v763 - 1);
    v10 = v770;
LABEL_101:
    if (v79 == 3)
    {
      v88 = *a3 - 1;
      if (*a3 - 2 >= v75)
        goto LABEL_100;
    }
    else
    {
      v88 = a3[v79];
      if (v88 - 1 >= v75)
        goto LABEL_100;
    }
    v89 = *(_DWORD *)v14;
    v90 = *(_DWORD *)&v14[-v88];
    if (v67 - v88 < v73 || v89 != v90)
    {
      v10 = v770;
      v14 = v768;
      goto LABEL_100;
    }
    v92 = -(uint64_t)v88;
    v93 = &v85[-v88];
    if (v778 <= (unint64_t)v85)
    {
      v97 = v85;
      v14 = v768;
      if ((unint64_t)v85 >= v766)
        goto LABEL_117;
    }
    else
    {
      v94 = *(_QWORD *)v85 ^ *(_QWORD *)v93;
      v14 = v768;
      if (v94)
      {
        v10 = v770;
        v95 = (__clz(__rbit64(v94)) >> 3) + 4;
        v96 = v95;
        if (v87 < v95)
          goto LABEL_126;
        goto LABEL_100;
      }
      while (1)
      {
        v97 = &v76[v94];
        if ((unint64_t)&v76[v94] >= v778)
          break;
        v100 = *(_QWORD *)&v76[v92 + v94];
        v94 += 8;
        v101 = *(_QWORD *)v97 ^ v100;
        if (v101)
        {
          v102 = __clz(__rbit64(v101));
          v18 = a1;
          v10 = v770;
          v14 = v768;
          v95 = v94 + (v102 >> 3) + 4;
          v96 = v95;
          if (v87 < v95)
          {
LABEL_126:
            v99 = &v10[2 * v26];
            *v99 = v79 + v86;
            v99[1] = v95;
            ++v26;
            if (v95 > v65)
              goto LABEL_289;
            v87 = v96;
            v10 = v770;
            if (&v14[v96] == (unsigned __int8 *)v769)
              goto LABEL_432;
          }
LABEL_100:
          if (++v79 < v84)
            goto LABEL_101;
          *(_DWORD *)(v756 + 4 * v77) = v67;
          if (v78 < v74)
            goto LABEL_430;
          v103 = 0;
          v104 = 0;
          v105 = ~(-1 << v750);
          v106 = v67 + 2;
          v757 = v14 + 8;
          v107 = v66 + 8;
          while (2)
          {
            if (v104 >= v103)
              v108 = v103;
            else
              v108 = v104;
            v109 = v66 + v78;
            v110 = (char *)&v14[v108];
            v111 = (_QWORD *)(v109 + v108);
            if (v778 <= (unint64_t)&v14[v108])
            {
              v114 = &v14[v108];
              v18 = a1;
              if ((unint64_t)v110 >= v766)
                goto LABEL_148;
            }
            else
            {
              v112 = *(_QWORD *)v110 ^ *v111;
              if (v112)
              {
                v18 = a1;
                v113 = (__clz(__rbit64(v112)) >> 3) + v108;
                if (v113 <= v87)
                  goto LABEL_163;
LABEL_157:
                if (v113 > v83 - v78)
                  v83 = v78 + v113;
                v115 = &v10[2 * v26];
                *v115 = v106 - v78;
                v115[1] = v113;
                ++v26;
                v116 = v113 > 0x1000 || &v14[v113] == (unsigned __int8 *)v769;
                v87 = v113;
                if (v116)
                  goto LABEL_430;
LABEL_163:
                v117 = (unsigned int *)(v80 + 8 * (v78 & v69));
                if (*(unsigned __int8 *)(v109 + v113) >= v14[v113])
                {
                  *v82 = v78;
                  if (v78 <= v772)
                    goto LABEL_429;
                  v103 = v113;
                  v82 = (unsigned int *)(v80 + 8 * (v78 & v69));
                  v118 = v105-- != 0;
                  if (!v118)
                    goto LABEL_430;
                }
                else
                {
                  *v81 = v78;
                  if (v78 <= v772)
                  {
LABEL_428:
                    v81 = (unsigned int *)&v784;
                    goto LABEL_430;
                  }
                  ++v117;
                  v104 = v113;
                  v81 = v117;
                  v118 = v105-- != 0;
                  if (!v118)
                    goto LABEL_430;
                }
                v78 = *v117;
                if (*v117 < v74)
                  goto LABEL_430;
                continue;
              }
              v119 = 0;
              v120 = (char *)v757 + v108;
              while (1)
              {
                v121 = &v120[v119];
                if ((unint64_t)&v120[v119] >= v778)
                  break;
                v122 = *(_QWORD *)(v107 + v108 + v78 + v119);
                v119 += 8;
                v123 = *(_QWORD *)v121 ^ v122;
                v14 = v768;
                if (v123)
                {
                  v18 = a1;
                  v10 = v770;
                  v113 = v119 + (__clz(__rbit64(v123)) >> 3) + v108;
                  if (v113 <= v87)
                    goto LABEL_163;
                  goto LABEL_157;
                }
              }
              v114 = (unsigned __int8 *)v757 + v108 + v119;
              v111 = (_QWORD *)(v107 + v108 + v78 + v119);
              v18 = a1;
              if ((unint64_t)v114 >= v766)
              {
LABEL_148:
                if ((unint64_t)v114 >= v765)
                {
                  if ((unint64_t)v114 >= v769)
                    goto LABEL_156;
                }
                else
                {
                  if (*(unsigned __int16 *)v111 == *(unsigned __int16 *)v114)
                  {
                    v114 += 2;
                    v111 = (_QWORD *)((char *)v111 + 2);
                  }
                  if ((unint64_t)v114 >= v769)
                  {
LABEL_156:
                    v10 = v770;
                    v113 = v114 - (unsigned __int8 *)v110 + v108;
                    if (v113 <= v87)
                      goto LABEL_163;
                    goto LABEL_157;
                  }
                }
                if (*(unsigned __int8 *)v111 == *v114)
                  ++v114;
                goto LABEL_156;
              }
            }
            break;
          }
          if (*(_DWORD *)v111 == *(_DWORD *)v114)
          {
            v114 += 4;
            v111 = (_QWORD *)((char *)v111 + 4);
          }
          goto LABEL_148;
        }
      }
      v93 = &v97[v92];
      v14 = v768;
      if ((unint64_t)v97 >= v766)
      {
LABEL_117:
        if ((unint64_t)v97 >= v765)
        {
          if ((unint64_t)v97 >= v769)
            goto LABEL_125;
        }
        else
        {
          if (*(unsigned __int16 *)v93 == *(unsigned __int16 *)v97)
          {
            v97 += 2;
            v93 += 2;
          }
          if ((unint64_t)v97 >= v769)
          {
LABEL_125:
            v10 = v770;
            v98 = (_DWORD)v97 - (_DWORD)v85;
            v18 = a1;
            v95 = v98 + 4;
            v96 = v95;
            if (v87 < v95)
              goto LABEL_126;
            goto LABEL_100;
          }
        }
        if (*v93 == *v97)
          LODWORD(v97) = (_DWORD)v97 + 1;
        goto LABEL_125;
      }
    }
    if (*(_DWORD *)v93 == *(_DWORD *)v97)
    {
      v97 += 4;
      v93 += 4;
    }
    goto LABEL_117;
  }
  return v769 - (_QWORD)v754;
}

int64_t ZSTD_compressBlock_btultra2(uint64_t a1, _QWORD *a2, unint64_t *a3, unsigned __int8 *a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  int32x2_t v25;
  int32x2_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int i;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  char *v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unint64_t v51;
  _QWORD *v52;
  int v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  char *v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int *v83;
  int v84;
  unint64_t v85;
  _QWORD *v86;
  int v87;
  unint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  _DWORD *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  int v102;
  _QWORD *v103;
  uint64_t v104;
  unsigned int v105;
  unint64_t v106;
  uint64_t v107;
  unsigned __int8 *v108;
  _QWORD *v109;
  unint64_t v110;
  _DWORD *v111;
  unint64_t v112;
  _QWORD *v113;
  unsigned __int8 *v114;
  _DWORD *v115;
  BOOL v116;
  unsigned int *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unsigned int v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  char *v134;
  unint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  int v141;
  unint64_t v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  _DWORD *v150;
  uint64_t v151;
  unint64_t v152;
  unsigned int v153;
  uint64_t v154;
  int v155;
  int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  char *v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  int v172;
  unint64_t v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  char *v177;
  unint64_t v178;
  unint64_t v179;
  char *v180;
  _DWORD *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  BOOL v189;
  unint64_t v190;
  unint64_t v191;
  int v192;
  int v193;
  _QWORD *v194;
  uint64_t v195;
  unsigned int v196;
  unint64_t v197;
  uint64_t v198;
  unsigned __int8 *v199;
  _QWORD *v200;
  unint64_t v201;
  _DWORD *v202;
  unint64_t v203;
  _QWORD *v204;
  unsigned __int8 *v205;
  _DWORD *v206;
  BOOL v207;
  unsigned int *v208;
  char *v209;
  char *v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  int v215;
  int v216;
  _QWORD *v217;
  uint64_t v218;
  unsigned int v219;
  unint64_t v220;
  uint64_t v221;
  unsigned __int8 *v222;
  _QWORD *v223;
  unint64_t v224;
  _DWORD *v225;
  unint64_t v226;
  _QWORD *v227;
  unsigned __int8 *v228;
  _DWORD *v229;
  BOOL v230;
  unsigned int *v231;
  char *v232;
  char *v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  int v238;
  unsigned int v239;
  _QWORD *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unsigned __int8 *v244;
  _DWORD *v245;
  unint64_t v246;
  unint64_t v247;
  _QWORD *v248;
  unsigned __int8 *v249;
  int64_t v250;
  _DWORD *v251;
  BOOL v252;
  unsigned int *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unsigned __int8 *v259;
  uint64_t v260;
  int64_t v261;
  int v262;
  unsigned int v263;
  unsigned int v264;
  uint64_t v265;
  unsigned int v266;
  int v267;
  unsigned int v268;
  uint64_t v269;
  int v270;
  int v271;
  _DWORD *v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  _DWORD *v278;
  unint64_t v279;
  _DWORD *v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  int *v287;
  unsigned int v288;
  int v289;
  uint64_t v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  BOOL v294;
  unsigned int v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  uint64_t v302;
  int v303;
  unsigned int v304;
  _DWORD *v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  _DWORD *v312;
  _DWORD *v313;
  unsigned int v314;
  unsigned int v315;
  _DWORD *v316;
  unsigned int v317;
  int v318;
  unsigned int v319;
  unsigned int v320;
  int *v321;
  unsigned int v322;
  uint64_t v323;
  unsigned __int8 *v324;
  int v325;
  int v326;
  int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  int v332;
  unsigned int v333;
  int v334;
  unsigned int v335;
  unsigned int v336;
  uint64_t v337;
  int v338;
  int v339;
  uint64_t v340;
  unsigned int v341;
  uint64_t v342;
  int v343;
  int v344;
  int *v345;
  _DWORD *v346;
  int v347;
  int v348;
  unsigned int *v349;
  unsigned int v350;
  unsigned int *v351;
  unint64_t v352;
  unsigned int v353;
  unsigned int v354;
  int *v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  unsigned int v360;
  unint64_t v361;
  uint64_t v362;
  unsigned int v363;
  unint64_t v364;
  uint64_t v365;
  int v366;
  unsigned int v367;
  unsigned int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unsigned int v372;
  int v373;
  unsigned int j;
  _DWORD *v375;
  unsigned int v376;
  uint64_t v377;
  unsigned int v378;
  char *v379;
  unsigned int v380;
  uint64_t v381;
  int v382;
  int v383;
  unsigned int v384;
  int v385;
  unsigned int v386;
  unsigned int v388;
  unsigned int v389;
  unsigned int *v390;
  unsigned int v391;
  unint64_t v392;
  unsigned int v393;
  uint64_t v394;
  unint64_t v395;
  unsigned int v396;
  int v397;
  char *v399;
  _DWORD *v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  unsigned int v404;
  unint64_t v405;
  int v406;
  _DWORD *v407;
  unsigned int v408;
  uint64_t v409;
  int v410;
  char *v411;
  unsigned int v412;
  int v413;
  int v414;
  unsigned int v415;
  int v416;
  unsigned int v417;
  unsigned int v419;
  unsigned int v420;
  uint64_t v421;
  unsigned int *v422;
  int v423;
  unint64_t v424;
  unsigned int v425;
  uint64_t v426;
  unint64_t v427;
  unsigned int v428;
  int v429;
  int v430;
  char *v432;
  _QWORD *v433;
  unint64_t v434;
  unint64_t v435;
  unint64_t v436;
  unsigned int v437;
  unint64_t v438;
  _DWORD *v439;
  unint64_t v440;
  unint64_t v441;
  int v442;
  int v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  char *v447;
  _QWORD *v448;
  unint64_t v449;
  unint64_t v450;
  _DWORD *v451;
  char *v452;
  _DWORD *v453;
  BOOL v454;
  unsigned int *v455;
  uint64_t v456;
  char *v457;
  char *v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  unsigned int v462;
  uint64_t v463;
  int v464;
  char *v465;
  unsigned int v466;
  int v467;
  int v468;
  unsigned int v469;
  int v470;
  unsigned int v471;
  unsigned int v473;
  unsigned int v474;
  uint64_t v475;
  unint64_t v476;
  unsigned int v477;
  uint64_t v478;
  unint64_t v479;
  unsigned int v480;
  int v481;
  int v482;
  char *v484;
  _QWORD *v485;
  unint64_t v486;
  unint64_t v487;
  unint64_t v488;
  unsigned int v489;
  unint64_t v490;
  _DWORD *v491;
  unsigned int v492;
  uint64_t v493;
  int v494;
  char *v495;
  unsigned int v496;
  int v497;
  int v498;
  unsigned int v499;
  int v500;
  unsigned int v501;
  unsigned int v503;
  unsigned int v504;
  uint64_t v505;
  unint64_t v506;
  unsigned int v507;
  uint64_t v508;
  unint64_t v509;
  unsigned int v510;
  int v511;
  int v512;
  char *v514;
  _QWORD *v515;
  unint64_t v516;
  unint64_t v517;
  unint64_t v518;
  unsigned int v519;
  unint64_t v520;
  _DWORD *v521;
  uint64_t v522;
  int v523;
  int v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v528;
  unint64_t v529;
  int v530;
  int v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t v534;
  char *v535;
  _QWORD *v536;
  unint64_t v537;
  unint64_t v538;
  _DWORD *v539;
  char *v540;
  _DWORD *v541;
  BOOL v542;
  unsigned int *v543;
  uint64_t v544;
  char *v545;
  char *v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  unint64_t v550;
  unint64_t v551;
  int v552;
  int v553;
  uint64_t v554;
  unint64_t v555;
  uint64_t v556;
  char *v557;
  _QWORD *v558;
  unint64_t v559;
  unint64_t v560;
  _DWORD *v561;
  char *v562;
  _DWORD *v563;
  BOOL v564;
  unsigned int *v565;
  uint64_t v566;
  char *v567;
  char *v568;
  uint64_t v569;
  unint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  int v575;
  int *v576;
  unsigned int v577;
  unsigned int v578;
  int v579;
  uint64_t v580;
  unsigned int v581;
  signed int *v582;
  unsigned int v583;
  unsigned int v584;
  signed int v585;
  unint64_t v586;
  unint64_t v587;
  _DWORD *v588;
  unint64_t v589;
  unint64_t v590;
  _DWORD *v591;
  uint64_t v592;
  uint64_t v593;
  int v594;
  unsigned int v595;
  int *v596;
  unsigned int v597;
  unsigned int v598;
  unsigned int v599;
  unsigned int v600;
  unsigned int v601;
  uint64_t v602;
  int v603;
  unsigned int v604;
  int v605;
  unint64_t v606;
  unint64_t v607;
  _DWORD *v608;
  unint64_t v609;
  unint64_t v610;
  _DWORD *v611;
  _QWORD *v612;
  unint64_t v613;
  unint64_t v614;
  char *v615;
  unint64_t v617;
  unint64_t v618;
  int v619;
  unsigned int v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  char *v624;
  _DWORD *v625;
  unint64_t v626;
  unint64_t v627;
  char *v628;
  _DWORD *v629;
  BOOL v630;
  unsigned int *v631;
  uint64_t v632;
  char *v633;
  char *v634;
  uint64_t v635;
  unint64_t v636;
  unint64_t v637;
  uint64_t v638;
  uint64_t v639;
  unint64_t v640;
  int *v641;
  unsigned int *v642;
  unsigned int *v643;
  unint64_t v644;
  unsigned int v645;
  unsigned int v646;
  unsigned int v647;
  unint64_t v648;
  uint64_t v649;
  unsigned int v650;
  unsigned int v651;
  uint64_t v652;
  unsigned int v653;
  __int128 *v654;
  unsigned int v655;
  _OWORD *v656;
  __int128 v657;
  BOOL v658;
  unsigned int v659;
  uint64_t *v660;
  unsigned int v661;
  unsigned int v662;
  unsigned int v663;
  uint64_t v664;
  int v665;
  int v666;
  uint64_t v667;
  unsigned __int8 *v668;
  uint64_t v669;
  unsigned int v670;
  unsigned int v671;
  int v672;
  unsigned int v673;
  unsigned int v674;
  unsigned int v675;
  unsigned __int8 *v676;
  char *v677;
  unsigned __int8 *v678;
  char *v679;
  uint64_t v680;
  _OWORD *v681;
  unint64_t v682;
  __int128 *v683;
  __int128 v684;
  unsigned __int8 *v685;
  char *v686;
  __int128 v687;
  unsigned __int8 *v688;
  unint64_t v689;
  unsigned __int8 *v690;
  uint64_t v691;
  unint64_t v692;
  __int128 *v693;
  char *v694;
  unint64_t v695;
  __int128 v696;
  unsigned __int8 *v697;
  char *v698;
  unint64_t v699;
  uint64_t v700;
  char v701;
  unint64_t v702;
  unint64_t v703;
  int v704;
  _DWORD *v705;
  unint64_t v706;
  unint64_t v707;
  unsigned int v708;
  uint64_t v709;
  unsigned __int8 *v710;
  _QWORD *v712;
  _QWORD *v713;
  uint64_t v714;
  unint64_t v715;
  int v716;
  uint64_t v717;
  uint64_t v718;
  int32x4_t v719;
  int32x4_t v720;
  int32x4_t v721;
  int32x4_t *v722;
  int32x4_t v723;
  int32x4_t v724;
  int32x4_t *v725;
  int32x4_t v726;
  int32x4_t v727;
  int32x4_t v728;
  int32x4_t v729;
  int32x4_t v730;
  int32x4_t v731;
  int32x4_t v732;
  int32x4_t v733;
  int32x4_t v734;
  int32x4_t v735;
  int32x4_t *v736;
  int32x4_t v737;
  int32x4_t v738;
  int32x4_t v739;
  int32x4_t v740;
  int32x4_t v741;
  int32x4_t v742;
  int32x4_t v743;
  int32x4_t v744;
  int32x4_t v745;
  int32x4_t v746;
  int32x4_t v747;
  int32x4_t v748;
  int v749;
  int v750;
  int v751;
  int v752;
  int v753;
  int v754;
  int v755;
  int32x4_t *v756;
  int32x4_t v757;
  int32x4_t v758;
  int32x4_t v759;
  int32x4_t v760;
  int32x4_t v761;
  int32x4_t v762;
  int32x4_t v763;
  int32x4_t v764;
  int32x4_t v765;
  int32x4_t v766;
  int32x4_t v767;
  int32x4_t v768;
  int32x4_t v769;
  unsigned __int8 *v770;
  unsigned __int8 *v771;
  unsigned int v772;
  uint64_t v773;
  unsigned int v774;
  unsigned int *v775;
  __int128 *v776;
  __int128 v777;
  uint64_t v778;
  unsigned __int8 *v779;
  unint64_t v780;
  uint64_t v781;
  unsigned __int8 *v782;
  _DWORD *v783;
  unsigned int v784;
  unsigned int v785;
  int32x2_t v786;
  int32x2_t v787;
  uint64_t v788;
  unsigned __int8 *v789;
  uint64_t v790;
  unsigned int v791;
  int v792;
  unsigned int k;
  unsigned int v794;
  uint64_t v795;
  unsigned int v796;
  int v797;
  int v798;
  unsigned int v799;
  unsigned int v800;
  unsigned int v802;
  unsigned int v803;
  unsigned int v804;
  char *v805;
  unsigned int v806;
  unint64_t v807;
  uint64_t v808;
  unsigned int *v809;
  unsigned int *v810;
  unsigned int v811;
  unint64_t v812;
  _QWORD *v813;
  int v814;
  unint64_t v815;
  unsigned int v816;
  int v817;
  uint64_t v819;
  char *v820;
  unint64_t v821;
  unsigned int v822;
  unint64_t v823;
  char *v824;
  int v825;
  _DWORD *v826;
  uint64_t v827;
  unint64_t v828;
  unint64_t v829;
  unsigned int v830;
  uint64_t v831;
  int v832;
  int v833;
  int v834;
  unsigned int v835;
  unsigned int v836;
  unsigned int v838;
  unsigned int v839;
  unsigned int v840;
  char *v841;
  unint64_t v842;
  unsigned int v843;
  uint64_t v844;
  uint64_t v845;
  unsigned int *v846;
  unsigned int *v847;
  int v848;
  unint64_t v849;
  _QWORD *v850;
  int v851;
  unint64_t v852;
  unsigned int v853;
  unsigned __int8 *v854;
  int v855;
  int v856;
  uint64_t v858;
  char *v859;
  unint64_t v860;
  unsigned int v861;
  unint64_t v862;
  char *v863;
  int v864;
  _DWORD *v865;
  uint64_t v866;
  unint64_t v867;
  unint64_t v868;
  unint64_t v869;
  unint64_t v870;
  int v871;
  int v872;
  _DWORD *v873;
  uint64_t v874;
  unint64_t v875;
  uint64_t v876;
  char *v877;
  _QWORD *v878;
  unint64_t v879;
  unsigned __int8 *v880;
  unint64_t v881;
  unsigned __int8 *v882;
  unsigned __int8 *v883;
  _DWORD *v884;
  BOOL v885;
  unsigned int *v886;
  uint64_t v887;
  char *v888;
  char *v889;
  uint64_t v890;
  unint64_t v891;
  uint64_t v892;
  unsigned int v893;
  uint64_t v894;
  int v895;
  int v896;
  int v897;
  unsigned int v898;
  unsigned int v899;
  unsigned int v901;
  unsigned int v902;
  unsigned int v903;
  char *v904;
  unint64_t v905;
  unsigned int v906;
  uint64_t v907;
  uint64_t v908;
  unint64_t v909;
  _QWORD *v910;
  int v911;
  unint64_t v912;
  unsigned int v913;
  unsigned __int8 *v914;
  int v915;
  int v916;
  uint64_t v918;
  char *v919;
  unint64_t v920;
  unsigned int v921;
  unint64_t v922;
  char *v923;
  int v924;
  _DWORD *v925;
  uint64_t v926;
  unint64_t v927;
  unint64_t v928;
  unsigned int v929;
  uint64_t v930;
  int v931;
  int v932;
  int v933;
  unsigned int v934;
  unsigned int v935;
  unsigned int v937;
  unsigned int v938;
  unsigned int v939;
  char *v940;
  uint64_t v941;
  unsigned int v942;
  uint64_t v943;
  uint64_t v944;
  unsigned int *v945;
  unsigned int *v946;
  int v947;
  unint64_t v948;
  _QWORD *v949;
  int v950;
  unint64_t v951;
  unsigned int v952;
  unsigned __int8 *v953;
  int v954;
  int v955;
  uint64_t v957;
  char *v958;
  unint64_t v959;
  unsigned int v960;
  unint64_t v961;
  char *v962;
  int v963;
  _DWORD *v964;
  uint64_t v965;
  unint64_t v966;
  unint64_t v967;
  uint64_t v968;
  int v969;
  int v970;
  uint64_t v971;
  uint64_t v972;
  BOOL v973;
  unint64_t v974;
  unint64_t v975;
  int v976;
  int v977;
  _DWORD *v978;
  uint64_t v979;
  unint64_t v980;
  uint64_t v981;
  char *v982;
  _QWORD *v983;
  unint64_t v984;
  unsigned __int8 *v985;
  unint64_t v986;
  unsigned __int8 *v987;
  _DWORD *v988;
  BOOL v989;
  unsigned int *v990;
  uint64_t v991;
  char *v992;
  char *v993;
  uint64_t v994;
  unint64_t v995;
  uint64_t v996;
  int v997;
  unint64_t v998;
  unint64_t v999;
  int v1000;
  int v1001;
  _DWORD *v1002;
  uint64_t v1003;
  unint64_t v1004;
  uint64_t v1005;
  char *v1006;
  _QWORD *v1007;
  unint64_t v1008;
  unsigned __int8 *v1009;
  unint64_t v1010;
  unsigned __int8 *v1011;
  unsigned __int8 *v1012;
  _DWORD *v1013;
  BOOL v1014;
  unsigned int *v1015;
  uint64_t v1016;
  char *v1017;
  char *v1018;
  uint64_t v1019;
  unint64_t v1020;
  uint64_t v1021;
  unint64_t v1022;
  unint64_t v1023;
  int v1024;
  unsigned int v1025;
  uint64_t v1026;
  unint64_t v1027;
  uint64_t v1028;
  char *v1029;
  _DWORD *v1030;
  unint64_t v1031;
  unint64_t v1032;
  unsigned __int8 *v1033;
  int64_t v1034;
  _DWORD *v1035;
  BOOL v1036;
  unsigned int *v1037;
  uint64_t v1038;
  char *v1039;
  char *v1040;
  uint64_t v1041;
  unint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  unsigned int v1045;
  int v1046;
  unsigned int v1047;
  unsigned int v1048;
  uint64_t v1049;
  unsigned int v1050;
  int v1051;
  unsigned int v1052;
  uint64_t v1053;
  int v1054;
  int v1055;
  _DWORD *v1056;
  unsigned int v1057;
  unsigned int v1058;
  unsigned int v1059;
  unsigned int v1060;
  unsigned int v1061;
  _DWORD *v1062;
  unint64_t v1063;
  uint64_t v1064;
  unsigned int *v1065;
  uint64_t v1066;
  unsigned int v1067;
  unsigned int v1068;
  unsigned int *v1069;
  unsigned int v1070;
  unsigned int v1071;
  uint64_t v1072;
  unsigned int v1073;
  unsigned int v1074;
  unsigned int *v1075;
  uint64_t v1076;
  uint64_t v1077;
  int v1078;
  unsigned int v1079;
  unsigned int v1080;
  unsigned int v1081;
  uint64_t v1082;
  int v1083;
  unsigned int v1084;
  unsigned int *v1085;
  unsigned int v1086;
  unint64_t v1087;
  int v1088;
  unsigned int v1089;
  unsigned int v1090;
  unsigned int *v1091;
  unsigned int v1092;
  uint64_t v1093;
  unsigned int v1094;
  int v1095;
  unsigned int v1096;
  unsigned int v1097;
  unsigned int v1098;
  unsigned int v1099;
  unsigned int v1100;
  int v1101;
  unsigned int v1102;
  int v1103;
  unsigned int v1104;
  unsigned int v1105;
  uint64_t v1106;
  int v1107;
  int v1108;
  uint64_t v1109;
  unsigned int v1110;
  uint64_t v1111;
  int v1112;
  signed int v1113;
  unsigned int *v1114;
  _DWORD *v1115;
  int v1116;
  signed int v1117;
  unsigned int *v1118;
  unsigned int v1119;
  unsigned int *v1120;
  unint64_t v1121;
  unsigned int v1122;
  unsigned int v1123;
  unsigned int *v1124;
  int v1125;
  unsigned int *v1126;
  unsigned int *v1127;
  int v1128;
  unsigned int v1129;
  unint64_t v1130;
  uint64_t v1131;
  unsigned int v1132;
  unint64_t v1133;
  unsigned int *v1134;
  int v1135;
  unsigned int v1136;
  unsigned int v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  unsigned int v1141;
  int v1142;
  _DWORD *v1143;
  unsigned __int8 *v1144;
  int v1145;
  unsigned int m;
  unsigned int *v1147;
  unsigned int v1148;
  uint64_t v1149;
  unsigned int v1150;
  char *v1151;
  unsigned int v1152;
  int v1153;
  int v1154;
  unsigned int v1155;
  int v1156;
  unsigned int v1157;
  unsigned int v1159;
  unsigned int v1160;
  unsigned int *v1161;
  unsigned int v1162;
  unint64_t v1163;
  unsigned int v1164;
  uint64_t v1165;
  unint64_t v1166;
  unsigned int v1167;
  int v1168;
  char *v1170;
  _QWORD *v1171;
  unint64_t v1172;
  unint64_t v1173;
  unint64_t v1174;
  unsigned int v1175;
  unint64_t v1176;
  int v1177;
  _DWORD *v1178;
  unsigned int v1179;
  uint64_t v1180;
  int v1181;
  _QWORD *v1182;
  unsigned int v1183;
  int v1184;
  int v1185;
  unsigned int v1186;
  int v1187;
  unsigned int v1188;
  unsigned int v1190;
  int v1191;
  uint64_t v1192;
  unsigned int *v1193;
  int v1194;
  unint64_t v1195;
  unint64_t v1196;
  unsigned int v1197;
  uint64_t v1198;
  unsigned int v1199;
  int v1200;
  int v1201;
  _QWORD *v1203;
  _QWORD *v1204;
  unint64_t v1205;
  unsigned int v1206;
  unint64_t v1207;
  unint64_t v1208;
  _DWORD *v1209;
  unsigned int v1210;
  int v1211;
  _QWORD *v1212;
  unsigned int v1213;
  int v1214;
  int v1215;
  unsigned int v1216;
  int v1217;
  unsigned int v1218;
  unsigned int v1220;
  unsigned int v1221;
  uint64_t v1222;
  unsigned int *v1223;
  int v1224;
  unint64_t v1225;
  unsigned int v1226;
  uint64_t v1227;
  unint64_t v1228;
  unsigned int v1229;
  int v1230;
  int v1231;
  _QWORD *v1233;
  _QWORD *v1234;
  unint64_t v1235;
  unsigned int v1236;
  unint64_t v1237;
  unint64_t v1238;
  _DWORD *v1239;
  unsigned int v1240;
  int v1241;
  _QWORD *v1242;
  unsigned int v1243;
  int v1244;
  int v1245;
  unsigned int v1246;
  int v1247;
  unsigned int v1248;
  unsigned int v1250;
  unsigned int v1251;
  uint64_t v1252;
  unint64_t v1253;
  unsigned int v1254;
  uint64_t v1255;
  unint64_t v1256;
  unsigned int v1257;
  int v1258;
  int v1259;
  _QWORD *v1261;
  _QWORD *v1262;
  unint64_t v1263;
  unsigned int v1264;
  unint64_t v1265;
  unint64_t v1266;
  _DWORD *v1267;
  uint64_t v1268;
  int v1269;
  int v1270;
  uint64_t v1271;
  uint64_t v1272;
  unint64_t v1274;
  unint64_t v1275;
  int v1276;
  int v1277;
  uint64_t v1278;
  unint64_t v1279;
  uint64_t v1280;
  char *v1281;
  _QWORD *v1282;
  unint64_t v1283;
  _DWORD *v1284;
  unint64_t v1285;
  char *v1286;
  _DWORD *v1287;
  BOOL v1288;
  unsigned int *v1289;
  uint64_t v1290;
  char *v1291;
  char *v1292;
  uint64_t v1293;
  unint64_t v1294;
  uint64_t v1295;
  unint64_t v1296;
  unint64_t v1297;
  int v1298;
  int v1299;
  uint64_t v1300;
  unint64_t v1301;
  uint64_t v1302;
  char *v1303;
  _QWORD *v1304;
  unint64_t v1305;
  _DWORD *v1306;
  unint64_t v1307;
  char *v1308;
  _DWORD *v1309;
  BOOL v1310;
  unsigned int *v1311;
  uint64_t v1312;
  char *v1313;
  char *v1314;
  uint64_t v1315;
  unint64_t v1316;
  uint64_t v1317;
  unint64_t v1318;
  unint64_t v1319;
  int v1320;
  int v1321;
  uint64_t v1322;
  unint64_t v1323;
  uint64_t v1324;
  char *v1325;
  _QWORD *v1326;
  unint64_t v1327;
  _DWORD *v1328;
  unint64_t v1329;
  char *v1330;
  _DWORD *v1331;
  BOOL v1332;
  unsigned int *v1333;
  uint64_t v1334;
  char *v1335;
  char *v1336;
  uint64_t v1337;
  unint64_t v1338;
  uint64_t v1339;
  unint64_t v1340;
  unint64_t v1341;
  int v1342;
  unsigned int v1343;
  uint64_t v1344;
  unint64_t v1345;
  uint64_t v1346;
  char *v1347;
  _DWORD *v1348;
  unint64_t v1349;
  unint64_t v1350;
  char *v1351;
  _DWORD *v1352;
  BOOL v1353;
  unsigned int *v1354;
  uint64_t v1355;
  char *v1356;
  char *v1357;
  uint64_t v1358;
  unint64_t v1359;
  unint64_t v1360;
  _DWORD *v1361;
  unint64_t v1362;
  unint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  int v1367;
  int v1368;
  signed int *v1369;
  unsigned int v1370;
  unsigned int v1371;
  signed int v1372;
  uint64_t v1373;
  int v1374;
  int v1375;
  unsigned int v1376;
  signed int *v1377;
  unint64_t v1378;
  unsigned int v1379;
  signed int v1380;
  uint64_t v1381;
  unint64_t v1382;
  unint64_t v1383;
  _DWORD *v1384;
  _DWORD *v1385;
  int v1386;
  uint64_t v1387;
  uint64_t v1388;
  int v1389;
  int v1390;
  unsigned int v1391;
  unsigned int *v1392;
  unsigned int v1393;
  unsigned int v1394;
  unint64_t v1395;
  unsigned int v1396;
  unsigned int v1397;
  uint64_t v1398;
  int v1399;
  unsigned int v1400;
  signed int v1401;
  uint64_t v1402;
  unint64_t v1403;
  unint64_t v1404;
  _DWORD *v1405;
  _DWORD *v1406;
  char *v1407;
  uint64_t v1409;
  uint64_t v1410;
  unint64_t v1411;
  unsigned int *v1412;
  unsigned int *v1413;
  unsigned int *v1414;
  unint64_t v1415;
  unsigned int v1416;
  unsigned int v1417;
  unsigned int v1418;
  unint64_t v1419;
  uint64_t v1420;
  unsigned int v1421;
  unsigned int v1422;
  unsigned int *v1423;
  unsigned int v1424;
  unsigned int *v1425;
  unsigned int v1426;
  unsigned int *v1427;
  __int128 v1428;
  BOOL v1429;
  unsigned int v1430;
  _QWORD *v1431;
  unsigned int v1432;
  unsigned int v1433;
  unsigned int v1434;
  uint64_t v1435;
  unsigned int v1436;
  unsigned int v1437;
  char *v1438;
  unsigned __int8 *v1439;
  uint64_t v1440;
  int v1441;
  unsigned int v1442;
  unsigned int v1443;
  unsigned int v1444;
  unsigned int v1445;
  unsigned int v1446;
  unsigned __int8 *v1447;
  char *v1448;
  unsigned __int8 *v1449;
  char *v1450;
  uint64_t v1451;
  _OWORD *v1452;
  unint64_t v1453;
  __int128 *v1454;
  __int128 v1455;
  unsigned __int8 *v1456;
  char *v1457;
  __int128 v1458;
  unsigned __int8 *v1459;
  unint64_t v1460;
  unsigned __int8 *v1461;
  uint64_t v1462;
  unint64_t v1463;
  __int128 *v1464;
  char *v1465;
  unint64_t v1466;
  __int128 v1467;
  unsigned __int8 *v1468;
  char *v1469;
  unint64_t v1470;
  uint64_t v1471;
  char v1472;
  unint64_t v1473;
  unint64_t v1474;
  unsigned int v1475;
  _DWORD *v1476;
  unint64_t v1477;
  unint64_t v1478;
  unsigned int v1479;
  unsigned int *v1480;
  unint64_t v1481;
  unsigned __int8 *v1482;
  unint64_t v1484;
  _QWORD *v1485;
  _QWORD *v1486;
  uint64_t v1487;
  unint64_t v1488;
  unint64_t v1490;
  char *v1491;
  char *v1492;
  _DWORD *v1493;
  uint64_t v1494;
  uint64_t v1495;
  unsigned int *v1496;
  unsigned int v1497;
  unsigned int v1498;
  int v1499;
  int v1500;
  int v1501;
  int v1502;
  int v1503;
  int v1504;
  int v1505;
  int v1506;
  uint64_t v1507;
  unint64_t v1508;
  unint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  unint64_t v1512;
  unint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  _QWORD *v1523;
  _DWORD *v1524;
  unsigned int v1526;
  uint64_t *v1527;
  int v1528;
  unsigned int v1529;
  char *v1530;
  char *v1531;
  char *v1532;
  char *v1533;
  _DWORD *v1534;
  unsigned int v1535;
  char *v1536;
  char *v1537;
  char *v1538;
  char *v1539;
  unsigned int v1540;
  _DWORD *v1541;
  uint64_t v1542;
  unsigned int v1543;
  unsigned int v1544;
  unsigned int v1545;
  unsigned int v1546;
  unsigned int v1547;
  unsigned int v1548;
  unsigned int v1549;
  unsigned int v1550;
  unsigned int v1551;
  uint64_t v1552;
  unsigned int v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  unsigned int *v1557;
  unsigned int *v1558;
  unsigned int *v1559;
  unsigned int *v1560;
  unsigned int *v1561;
  int v1562;
  unint64_t v1563;
  int v1564;
  int v1565;
  int v1566;
  int v1567;
  int v1568;
  unint64_t v1569;
  char **v1570;
  unsigned __int8 *v1571;
  int v1572;
  int v1573;
  int v1574;
  int v1575;
  int v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  int v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  int v1586;
  unsigned __int8 *v1587;
  uint64_t v1588;
  unsigned int v1589;
  unsigned int v1590;
  unsigned int v1591;
  int v1592;
  unint64_t v1593;
  unint64_t v1594;
  unsigned __int8 *v1595;
  unsigned __int8 *v1596;
  unint64_t v1597;
  unint64_t v1598;
  unint64_t v1599;
  unint64_t v1602;
  unint64_t v1603;
  unsigned int v1604;
  unsigned int v1605;
  unsigned int v1606;
  unsigned int v1607;
  unsigned __int8 *v1608;
  unsigned __int8 *v1609;
  unsigned __int8 *v1610;
  _DWORD *v1611;
  _DWORD *v1612;
  uint64_t v1613;
  unsigned int v1614;
  unsigned int v1615;
  unsigned int v1616;
  _DWORD *v1617;
  unsigned __int8 *v1618;
  unint64_t v1619;
  unint64_t v1620;
  uint64_t v1621;
  _DWORD *v1622;
  int64_t v1623;
  int v1624;
  unsigned int v1625;
  int v1626;
  unsigned int v1627;
  __int128 v1628;
  __int128 v1629;
  _BYTE v1630[24];
  unsigned int v1631;
  unint64_t v1632;
  unsigned int v1633;
  uint64_t v1634;
  unsigned int v1635;
  uint64_t v1636;

  v1571 = a4;
  v5 = a1;
  v1636 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 8);
  if (!*(_DWORD *)(a1 + 132))
  {
    v7 = a2;
    if (a2[1] == *a2)
    {
      v8 = *(_DWORD *)(a1 + 24);
      if (v8 == *(_DWORD *)(a1 + 28) && a5 >= 0x401 && v8 == (_DWORD)a4 - (_DWORD)v6)
      {
        v1632 = *a3;
        v1633 = *((_DWORD *)a3 + 2);
        v9 = (unint64_t)&a4[a5];
        v1594 = (unint64_t)&a4[a5 - 8];
        v10 = (unsigned __int8 *)(v6 + ((_DWORD)a4 - v6));
        v11 = *(_DWORD *)(a1 + 212);
        if (v11 >= 0xFFF)
          v11 = 4095;
        v1543 = v11;
        if (*(_DWORD *)(a1 + 208) == 3)
          v12 = 3;
        else
          v12 = 4;
        v1556 = v12;
        v13 = *(_DWORD *)(a1 + 36);
        v14 = *(_DWORD **)(a1 + 112);
        v15 = *(_QWORD *)(a1 + 120);
        v1635 = 0;
        v1634 = 0;
        v1629 = 0u;
        memset(v1630, 0, sizeof(v1630));
        v1628 = 0u;
        v16 = *(__int128 **)(a1 + 224);
        v1497 = v13;
        if (v16)
        {
          v17 = v16[1];
          v1628 = *v16;
          v1629 = v17;
          *(_QWORD *)v1630 = *((_QWORD *)v16 + 4);
        }
        else
        {
          *(_QWORD *)v1630 = 0;
          v1628 = 0uLL;
          v1629 = 0uLL;
        }
        *(_QWORD *)&v1630[12] = 0;
        *(_DWORD *)&v1630[8] = 0;
        v18 = a5;
        ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t *)&v1628, 0, a5);
        v1527 = (uint64_t *)(v5 + 80);
        v1490 = v18;
        ZSTD_rescaleFreqs((char **)(v5 + 80), v1571, v18, 2);
        if (v10 == v1571)
          v19 = v1571 + 1;
        else
          v19 = v1571;
        if ((unint64_t)v19 < v1594)
        {
          v1528 = 0;
          v1619 = v9 - 7;
          v1602 = v9 - 3;
          v1598 = v9 - 1;
          v20 = (v1556 - 1) | 1;
          v1621 = v15 + 56;
          v1493 = (_DWORD *)(v15 + 28 * v20);
          v1495 = v1556 - v20;
          v21 = v15 + 28;
          v22 = v1571;
          v1569 = v9;
          v1612 = v14;
          v1563 = v9 - 32;
          while (1)
          {
            v1596 = v22;
            v1623 = v19 - v22;
            v1627 = 0;
            v27 = *(_QWORD *)(v5 + 8);
            v28 = *(unsigned int *)(v5 + 36);
            v1610 = v19;
            if (v27 + v28 > (unint64_t)v19)
            {
              v29 = 0;
              v7 = a2;
              v22 = v1596;
              goto LABEL_431;
            }
            v30 = *(_DWORD *)(v5 + 208);
            for (i = (_DWORD)v19 - v27;
                  v28 < i;
            *(_DWORD *)(v5 + 36) = i;
            if ((v30 - 6) < 2)
              break;
            if (v30 == 5)
            {
              v29 = 0;
              if (*(_DWORD *)(v5 + 212) >= 0xFFFu)
                v122 = 4095;
              else
                v122 = *(_DWORD *)(v5 + 212);
              v123 = *(_QWORD *)(v5 + 8);
              v124 = (_DWORD)v1610 - v123;
              v125 = -1 << (*(_DWORD *)(v5 + 196) - 1);
              v126 = ~v125;
              v127 = (_DWORD)v1610 - v123 + v125 + 1;
              if ((int)v1610 - (int)v123 < ~v125)
                v127 = 0;
              v1590 = v127;
              v128 = 1 << *(_DWORD *)(v5 + 192);
              if (v124 - *(_DWORD *)(v5 + 28) > v128 && *(_DWORD *)(v5 + 32) == 0)
                v130 = v124 - v128;
              else
                v130 = *(_DWORD *)(v5 + 28);
              if (v130 <= 1)
                v131 = 1;
              else
                v131 = v130;
              v1606 = v131;
              v132 = v124 - *(_DWORD *)(v5 + 24);
              v133 = v1632 - 1;
              v134 = (char *)(v1610 + 12);
              v1574 = *(_DWORD *)(v5 + 204);
              v135 = (0xCF1BBCDCBB000000 * *(_QWORD *)v1610) >> -(char)*(_DWORD *)(v5 + 200);
              v1584 = *(_QWORD *)(v5 + 48);
              v136 = *(_DWORD *)(v1584 + 4 * v135);
              v137 = (_DWORD)v1623 == 0;
              v138 = *(_QWORD *)(v5 + 64);
              v82 = (unsigned int *)(v138 + 8 * (v124 & ~v125));
              v83 = v82 + 1;
              v84 = v124 + 9;
              v1631 = 0;
              if ((_DWORD)v1623)
                v139 = 3;
              else
                v139 = 4;
              v140 = v1610 + 4;
              if ((_DWORD)v1623)
                v141 = 0;
              else
                v141 = -1;
              v142 = (v1556 - 1);
              while (1)
              {
                v143 = v133;
                if (v137 != 3)
                  v143 = *((_DWORD *)&v1632 + v137);
                if (v143 - 1 >= v132)
                {
                  v144 = 0;
                  goto LABEL_223;
                }
                v144 = 0;
                if (v124 - v143 >= v130 && *(_DWORD *)v1610 == *(_DWORD *)&v1610[-v143])
                  break;
LABEL_223:
                if (v142 < v144)
                {
                  v150 = &v1612[2 * v29];
                  *v150 = v137 + v141;
                  v150[1] = v144;
                  ++v29;
                  if (v144 > v122)
                    goto LABEL_429;
                  v142 = v144;
                  if (&v1610[v144] == (unsigned __int8 *)v9)
                    goto LABEL_429;
                }
                if (++v137 >= v139)
                {
                  *(_DWORD *)(v1584 + 4 * v135) = v124;
                  if (v136 < v1606)
                    goto LABEL_428;
                  v190 = 0;
                  v191 = 0;
                  v192 = ~(-1 << v1574);
                  v193 = v124 + 2;
                  v194 = v1610 + 8;
                  v195 = v123 + 8;
                  v196 = v1590;
                  while (1)
                  {
                    v197 = v191 >= v190 ? v190 : v191;
                    v198 = v123 + v136;
                    v199 = &v1610[v197];
                    v200 = (_QWORD *)(v198 + v197);
                    if (v1619 <= (unint64_t)&v1610[v197])
                      break;
                    v201 = *(_QWORD *)v199 ^ *v200;
                    if (v201)
                    {
                      v202 = v1612;
                      v203 = (__clz(__rbit64(v201)) >> 3) + v197;
                      if (v203 <= v142)
                        goto LABEL_304;
                      goto LABEL_317;
                    }
                    v209 = (char *)v194 + v197;
                    do
                    {
                      v210 = &v209[v201];
                      if ((unint64_t)&v209[v201] >= v1619)
                      {
                        v205 = (unsigned __int8 *)v194 + v197 + v201;
                        v200 = (_QWORD *)(v195 + v197 + v136 + v201);
                        v196 = v1590;
                        v202 = v1612;
                        if ((unint64_t)v205 >= v1602)
                          goto LABEL_308;
                        goto LABEL_306;
                      }
                      v211 = *(_QWORD *)(v195 + v197 + v136 + v201);
                      v201 += 8;
                      v212 = *(_QWORD *)v210 ^ v211;
                      v5 = a1;
                    }
                    while (!v212);
                    v202 = v1612;
                    v196 = v1590;
                    v203 = v201 + (__clz(__rbit64(v212)) >> 3) + v197;
                    if (v203 <= v142)
                    {
LABEL_304:
                      v204 = v1610;
                      goto LABEL_323;
                    }
LABEL_317:
                    if (v203 > v84 - v136)
                      v84 = v136 + v203;
                    v206 = &v202[2 * v29];
                    *v206 = v193 - v136;
                    v206[1] = v203;
                    ++v29;
                    v204 = v1610;
                    v207 = v203 > 0x1000 || &v1610[v203] == (unsigned __int8 *)v9;
                    v142 = v203;
                    if (v207)
                      goto LABEL_428;
LABEL_323:
                    v208 = (unsigned int *)(v138 + 8 * (v136 & v126));
                    if (*(unsigned __int8 *)(v198 + v203) < *((unsigned __int8 *)v204 + v203))
                    {
                      *v82 = v136;
                      if (v136 > v196)
                      {
                        ++v208;
                        v191 = v203;
                        v82 = v208;
                        goto LABEL_328;
                      }
LABEL_426:
                      v82 = &v1631;
                      goto LABEL_428;
                    }
                    *v83 = v136;
                    if (v136 <= v196)
                      goto LABEL_427;
                    v190 = v203;
                    v83 = (unsigned int *)(v138 + 8 * (v136 & v126));
LABEL_328:
                    v294 = v192-- != 0;
                    if (v294)
                    {
                      v136 = *v208;
                      if (*v208 >= v1606)
                        continue;
                    }
                    goto LABEL_428;
                  }
                  v205 = &v1610[v197];
                  v202 = v1612;
                  if ((unint64_t)v199 >= v1602)
                    goto LABEL_308;
LABEL_306:
                  if (*(_DWORD *)v200 == *(_DWORD *)v205)
                  {
                    v205 += 4;
                    v200 = (_QWORD *)((char *)v200 + 4);
                  }
LABEL_308:
                  if ((unint64_t)v205 >= v1598)
                  {
                    if ((unint64_t)v205 >= v9)
                      goto LABEL_316;
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v200 == *(unsigned __int16 *)v205)
                    {
                      v205 += 2;
                      v200 = (_QWORD *)((char *)v200 + 2);
                    }
                    if ((unint64_t)v205 >= v9)
                    {
LABEL_316:
                      v203 = v205 - v1610;
                      if (v205 - v1610 <= v142)
                        goto LABEL_304;
                      goto LABEL_317;
                    }
                  }
                  if (*(unsigned __int8 *)v200 == *v205)
                    ++v205;
                  goto LABEL_316;
                }
              }
              v145 = -(uint64_t)v143;
              v146 = (char *)v140 - v143;
              if (v1619 <= (unint64_t)v140)
              {
                v149 = (char *)(v1610 + 4);
                if ((unint64_t)v140 >= v1602)
                  goto LABEL_213;
              }
              else
              {
                v147 = *v140 ^ *(_QWORD *)v146;
                if (v147)
                {
                  v148 = __clz(__rbit64(v147)) >> 3;
                  goto LABEL_222;
                }
                while (1)
                {
                  v149 = &v134[v147];
                  if ((unint64_t)&v134[v147] >= v1619)
                    break;
                  v151 = *(_QWORD *)&v134[v145 + v147];
                  v147 += 8;
                  v152 = *(_QWORD *)v149 ^ v151;
                  if (v152)
                  {
                    v148 = v147 + (__clz(__rbit64(v152)) >> 3);
                    v5 = a1;
LABEL_222:
                    v144 = v148 + 4;
                    goto LABEL_223;
                  }
                }
                v146 = &v149[v145];
                v5 = a1;
                if ((unint64_t)v149 >= v1602)
                {
LABEL_213:
                  if ((unint64_t)v149 >= v1598)
                  {
                    if ((unint64_t)v149 < v9)
                      goto LABEL_219;
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v146 == *(unsigned __int16 *)v149)
                    {
                      v149 += 2;
                      v146 += 2;
                    }
                    if ((unint64_t)v149 >= v9)
                      goto LABEL_221;
LABEL_219:
                    if (*v146 == *v149)
                      LODWORD(v149) = (_DWORD)v149 + 1;
                  }
LABEL_221:
                  LODWORD(v148) = (_DWORD)v149 - (_DWORD)v140;
                  goto LABEL_222;
                }
              }
              if (*(_DWORD *)v146 == *(_DWORD *)v149)
              {
                v149 += 4;
                v146 += 4;
              }
              goto LABEL_213;
            }
            if (v30 != 3)
            {
              v29 = 0;
              if (*(_DWORD *)(v5 + 212) >= 0xFFFu)
                v153 = 4095;
              else
                v153 = *(_DWORD *)(v5 + 212);
              v154 = *(_QWORD *)(v5 + 8);
              v155 = (_DWORD)v1610 - v154;
              v156 = -1 << (*(_DWORD *)(v5 + 196) - 1);
              v157 = ~v156;
              v158 = (_DWORD)v1610 - v154 + v156 + 1;
              if ((int)v1610 - (int)v154 < ~v156)
                v158 = 0;
              v1591 = v158;
              v159 = 1 << *(_DWORD *)(v5 + 192);
              if (v155 - *(_DWORD *)(v5 + 28) > v159 && *(_DWORD *)(v5 + 32) == 0)
                v161 = v155 - v159;
              else
                v161 = *(_DWORD *)(v5 + 28);
              if (v161 <= 1)
                v162 = 1;
              else
                v162 = v161;
              v1607 = v162;
              v163 = v155 - *(_DWORD *)(v5 + 24);
              v164 = v1632 - 1;
              v165 = (char *)(v1610 + 12);
              v1575 = *(_DWORD *)(v5 + 204);
              v166 = (-1640531535 * *(_DWORD *)v1610) >> -(char)*(_DWORD *)(v5 + 200);
              v1585 = *(_QWORD *)(v5 + 48);
              v167 = *(_DWORD *)(v1585 + 4 * v166);
              v168 = (_DWORD)v1623 == 0;
              v169 = *(_QWORD *)(v5 + 64);
              v82 = (unsigned int *)(v169 + 8 * (v155 & ~v156));
              v83 = v82 + 1;
              v84 = v155 + 9;
              v1631 = 0;
              if ((_DWORD)v1623)
                v170 = 3;
              else
                v170 = 4;
              v171 = v1610 + 4;
              if ((_DWORD)v1623)
                v172 = 0;
              else
                v172 = -1;
              v173 = (v1556 - 1);
              while (1)
              {
                v174 = v164;
                if (v168 != 3)
                  v174 = *((_DWORD *)&v1632 + v168);
                if (v174 - 1 >= v163)
                {
                  v175 = 0;
                  goto LABEL_277;
                }
                v175 = 0;
                if (v155 - v174 >= v161 && *(_DWORD *)v1610 == *(_DWORD *)&v1610[-v174])
                  break;
LABEL_277:
                if (v173 < v175)
                {
                  v181 = &v1612[2 * v29];
                  *v181 = v168 + v172;
                  v181[1] = v175;
                  ++v29;
                  if (v175 > v153)
                    goto LABEL_429;
                  v173 = v175;
                  if (&v1610[v175] == (unsigned __int8 *)v9)
                    goto LABEL_429;
                }
                if (++v168 >= v170)
                {
                  *(_DWORD *)(v1585 + 4 * v166) = v155;
                  if (v167 < v1607)
                    goto LABEL_428;
                  v213 = 0;
                  v214 = 0;
                  v215 = ~(-1 << v1575);
                  v216 = v155 + 2;
                  v217 = v1610 + 8;
                  v218 = v154 + 8;
                  v219 = v1591;
                  while (1)
                  {
                    v220 = v214 >= v213 ? v213 : v214;
                    v221 = v154 + v167;
                    v222 = &v1610[v220];
                    v223 = (_QWORD *)(v221 + v220);
                    if (v1619 <= (unint64_t)&v1610[v220])
                      break;
                    v224 = *(_QWORD *)v222 ^ *v223;
                    if (v224)
                    {
                      v225 = v1612;
                      v226 = (__clz(__rbit64(v224)) >> 3) + v220;
                      if (v226 <= v173)
                        goto LABEL_347;
                      goto LABEL_360;
                    }
                    v232 = (char *)v217 + v220;
                    do
                    {
                      v233 = &v232[v224];
                      if ((unint64_t)&v232[v224] >= v1619)
                      {
                        v228 = (unsigned __int8 *)v217 + v220 + v224;
                        v223 = (_QWORD *)(v218 + v220 + v167 + v224);
                        v219 = v1591;
                        v225 = v1612;
                        if ((unint64_t)v228 >= v1602)
                          goto LABEL_351;
                        goto LABEL_349;
                      }
                      v234 = *(_QWORD *)(v218 + v220 + v167 + v224);
                      v224 += 8;
                      v235 = *(_QWORD *)v233 ^ v234;
                      v5 = a1;
                    }
                    while (!v235);
                    v225 = v1612;
                    v219 = v1591;
                    v226 = v224 + (__clz(__rbit64(v235)) >> 3) + v220;
                    if (v226 <= v173)
                    {
LABEL_347:
                      v227 = v1610;
                      goto LABEL_366;
                    }
LABEL_360:
                    if (v226 > v84 - v167)
                      v84 = v167 + v226;
                    v229 = &v225[2 * v29];
                    *v229 = v216 - v167;
                    v229[1] = v226;
                    ++v29;
                    v227 = v1610;
                    v230 = v226 > 0x1000 || &v1610[v226] == (unsigned __int8 *)v9;
                    v173 = v226;
                    if (v230)
                      goto LABEL_428;
LABEL_366:
                    v231 = (unsigned int *)(v169 + 8 * (v167 & v157));
                    if (*(unsigned __int8 *)(v221 + v226) >= *((unsigned __int8 *)v227 + v226))
                    {
                      *v83 = v167;
                      if (v167 > v219)
                      {
                        v213 = v226;
                        v83 = (unsigned int *)(v169 + 8 * (v167 & v157));
                        goto LABEL_371;
                      }
                      goto LABEL_427;
                    }
                    *v82 = v167;
                    if (v167 <= v219)
                      goto LABEL_426;
                    ++v231;
                    v214 = v226;
                    v82 = v231;
LABEL_371:
                    v294 = v215-- != 0;
                    if (v294)
                    {
                      v167 = *v231;
                      if (*v231 >= v1607)
                        continue;
                    }
LABEL_428:
                    *v83 = 0;
                    *v82 = 0;
                    *(_DWORD *)(v5 + 36) = v84 - 8;
                    goto LABEL_429;
                  }
                  v228 = &v1610[v220];
                  v225 = v1612;
                  if ((unint64_t)v222 >= v1602)
                    goto LABEL_351;
LABEL_349:
                  if (*(_DWORD *)v223 == *(_DWORD *)v228)
                  {
                    v228 += 4;
                    v223 = (_QWORD *)((char *)v223 + 4);
                  }
LABEL_351:
                  if ((unint64_t)v228 >= v1598)
                  {
                    if ((unint64_t)v228 >= v9)
                      goto LABEL_359;
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v223 == *(unsigned __int16 *)v228)
                    {
                      v228 += 2;
                      v223 = (_QWORD *)((char *)v223 + 2);
                    }
                    if ((unint64_t)v228 >= v9)
                    {
LABEL_359:
                      v226 = v228 - v1610;
                      if (v228 - v1610 <= v173)
                        goto LABEL_347;
                      goto LABEL_360;
                    }
                  }
                  if (*(unsigned __int8 *)v223 == *v228)
                    ++v228;
                  goto LABEL_359;
                }
              }
              v176 = -(uint64_t)v174;
              v177 = (char *)v171 - v174;
              if (v1619 <= (unint64_t)v171)
              {
                v180 = (char *)(v1610 + 4);
                if ((unint64_t)v171 >= v1602)
                  goto LABEL_267;
              }
              else
              {
                v178 = *v171 ^ *(_QWORD *)v177;
                if (v178)
                {
                  v179 = __clz(__rbit64(v178)) >> 3;
                  goto LABEL_276;
                }
                while (1)
                {
                  v180 = &v165[v178];
                  if ((unint64_t)&v165[v178] >= v1619)
                    break;
                  v182 = *(_QWORD *)&v165[v176 + v178];
                  v178 += 8;
                  v183 = *(_QWORD *)v180 ^ v182;
                  if (v183)
                  {
                    v179 = v178 + (__clz(__rbit64(v183)) >> 3);
                    v5 = a1;
LABEL_276:
                    v175 = v179 + 4;
                    goto LABEL_277;
                  }
                }
                v177 = &v180[v176];
                v5 = a1;
                if ((unint64_t)v180 >= v1602)
                {
LABEL_267:
                  if ((unint64_t)v180 >= v1598)
                  {
                    if ((unint64_t)v180 < v9)
                      goto LABEL_273;
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v177 == *(unsigned __int16 *)v180)
                    {
                      v180 += 2;
                      v177 += 2;
                    }
                    if ((unint64_t)v180 >= v9)
                      goto LABEL_275;
LABEL_273:
                    if (*v177 == *v180)
                      LODWORD(v180) = (_DWORD)v180 + 1;
                  }
LABEL_275:
                  LODWORD(v179) = (_DWORD)v180 - (_DWORD)v171;
                  goto LABEL_276;
                }
              }
              if (*(_DWORD *)v177 == *(_DWORD *)v180)
              {
                v180 += 4;
                v177 += 4;
              }
              goto LABEL_267;
            }
            v29 = 0;
            if (*(_DWORD *)(v5 + 212) >= 0xFFFu)
              v32 = 4095;
            else
              v32 = *(_DWORD *)(v5 + 212);
            v33 = *(_QWORD *)(v5 + 8);
            v34 = (_DWORD)v1610 - v33;
            v35 = -1 << (*(_DWORD *)(v5 + 196) - 1);
            v36 = ~v35;
            v37 = (_DWORD)v1610 - v33 + v35 + 1;
            if ((int)v1610 - (int)v33 < ~v35)
              v37 = 0;
            v1604 = v37;
            v38 = 1 << *(_DWORD *)(v5 + 192);
            if (v34 - *(_DWORD *)(v5 + 28) > v38 && *(_DWORD *)(v5 + 32) == 0)
              v40 = v34 - v38;
            else
              v40 = *(_DWORD *)(v5 + 28);
            if (v40 <= 1)
              v41 = 1;
            else
              v41 = v40;
            v42 = v34 - *(_DWORD *)(v5 + 24);
            v43 = v1632 - 1;
            v44 = (char *)(v1610 + 11);
            v1572 = *(_DWORD *)(v5 + 204);
            v1582 = (-1640531535 * *(_DWORD *)v1610) >> -(char)*(_DWORD *)(v5 + 200);
            v1588 = *(_QWORD *)(v5 + 48);
            v45 = *(_DWORD *)(v1588 + 4 * v1582);
            v46 = (_DWORD)v1623 == 0;
            v47 = *(_QWORD *)(v5 + 64);
            v48 = (unsigned int *)(v47 + 8 * (v34 & ~v35));
            v49 = v48 + 1;
            v50 = v34 + 9;
            v1631 = 0;
            if ((_DWORD)v1623)
              v51 = 3;
            else
              v51 = 4;
            v52 = v1610 + 3;
            if ((_DWORD)v1623)
              v53 = 0;
            else
              v53 = -1;
            v54 = (v1556 - 1);
            do
            {
              v55 = v43;
              if (v46 != 3)
                v55 = *((_DWORD *)&v1632 + v46);
              if (v55 - 1 >= v42 || v34 - v55 < v40 || ((*(_DWORD *)&v1610[-v55] ^ *(_DWORD *)v1610) & 0xFFFFFF) != 0)
                goto LABEL_48;
              v56 = -(uint64_t)v55;
              v57 = (char *)v52 - v55;
              if (v1619 <= (unint64_t)v52)
              {
                v62 = (char *)(v1610 + 3);
                if ((unint64_t)v52 < v1602)
                {
LABEL_63:
                  if (*(_DWORD *)v57 == *(_DWORD *)v62)
                  {
                    v62 += 4;
                    v57 += 4;
                  }
                }
LABEL_65:
                if ((unint64_t)v62 >= v1598)
                {
                  if ((unint64_t)v62 >= v9)
                    goto LABEL_73;
                }
                else
                {
                  if (*(unsigned __int16 *)v57 == *(unsigned __int16 *)v62)
                  {
                    v62 += 2;
                    v57 += 2;
                  }
                  if ((unint64_t)v62 >= v9)
                  {
LABEL_73:
                    v59 = (_DWORD)v62 - (_DWORD)v1610;
                    v60 = v59;
                    if (v54 < v59)
                      goto LABEL_59;
                    goto LABEL_48;
                  }
                }
                if (*v57 == *v62)
                  LODWORD(v62) = (_DWORD)v62 + 1;
                goto LABEL_73;
              }
              v58 = *v52 ^ *(_QWORD *)v57;
              if (v58)
              {
                v59 = (__clz(__rbit64(v58)) >> 3) + 3;
                v60 = v59;
                if (v54 < v59)
                  goto LABEL_59;
                goto LABEL_48;
              }
              do
              {
                v62 = &v44[v58];
                if ((unint64_t)&v44[v58] >= v1619)
                {
                  v57 = &v62[v56];
                  v5 = a1;
                  if ((unint64_t)v62 < v1602)
                    goto LABEL_63;
                  goto LABEL_65;
                }
                v63 = *(_QWORD *)&v44[v56 + v58];
                v58 += 8;
                v64 = *(_QWORD *)v62 ^ v63;
              }
              while (!v64);
              v5 = a1;
              v59 = v58 + (__clz(__rbit64(v64)) >> 3) + 3;
              v60 = v59;
              if (v54 >= v59)
                goto LABEL_48;
LABEL_59:
              v61 = &v1612[2 * v29];
              *v61 = v46 + v53;
              v61[1] = v59;
              ++v29;
              if (v59 > v32)
              {
                v7 = a2;
                v14 = v1612;
                goto LABEL_430;
              }
              v54 = v60;
              if (&v1610[v60] == (unsigned __int8 *)v9)
                goto LABEL_429;
LABEL_48:
              ++v46;
            }
            while (v46 < v51);
            if (v54 > 2)
            {
              v7 = a2;
              v14 = v1612;
              v22 = v1596;
              goto LABEL_383;
            }
            v184 = *(_QWORD *)(v5 + 56);
            v185 = *(_DWORD *)v1610;
            v186 = 32 - *(_DWORD *)(v5 + 40);
            v14 = v1612;
            if (v1497 < v34)
            {
              v187 = v1497;
              do
              {
                *(_DWORD *)(v184 + 4 * ((900185344 * *(_DWORD *)(v33 + v187)) >> v186)) = v187;
                ++v187;
              }
              while ((_DWORD)v1610 - (_DWORD)v33 != v187);
            }
            v188 = *(unsigned int *)(v184 + 4 * ((900185344 * v185) >> v186));
            v189 = v188 >= v41 && (v34 - v188) >> 18 == 0;
            v7 = a2;
            v22 = v1596;
            if (!v189)
            {
              v1497 = (_DWORD)v1610 - v33;
              goto LABEL_383;
            }
            v705 = (_DWORD *)(v33 + v188);
            if (v1619 <= (unint64_t)v1610)
            {
              v710 = v1610;
              if ((unint64_t)v1610 < v1602)
              {
LABEL_1089:
                if (*v705 == *(_DWORD *)v710)
                {
                  v710 += 4;
                  ++v705;
                }
              }
            }
            else
            {
              v706 = *(_QWORD *)v1610 ^ *(_QWORD *)v705;
              if (v706)
              {
                v707 = __clz(__rbit64(v706)) >> 3;
                v1497 = (_DWORD)v1610 - v33;
                if (v707 < 3)
                  goto LABEL_383;
                goto LABEL_1100;
              }
              v712 = v1610 + 8;
              while (1)
              {
                v713 = (_QWORD *)((char *)v712 + v706);
                if ((unint64_t)v712 + v706 >= v1619)
                  break;
                v714 = *(_QWORD *)(v33 + v188 + 8 + v706);
                v706 += 8;
                v715 = *v713 ^ v714;
                if (v715)
                {
                  v707 = v706 + (__clz(__rbit64(v715)) >> 3);
                  v7 = a2;
                  v1497 = (_DWORD)v1610 - v33;
                  if (v707 >= 3)
                    goto LABEL_1100;
                  goto LABEL_383;
                }
              }
              v710 = &v1610[v706 + 8];
              v705 = (_DWORD *)(v33 + v188 + v706 + 8);
              v7 = a2;
              if ((unint64_t)v710 < v1602)
                goto LABEL_1089;
            }
            if ((unint64_t)v710 >= v1598)
            {
              if ((unint64_t)v710 >= v9)
                goto LABEL_1099;
LABEL_1097:
              if (*(unsigned __int8 *)v705 == *v710)
                ++v710;
              goto LABEL_1099;
            }
            if (*(unsigned __int16 *)v705 == *(unsigned __int16 *)v710)
            {
              v710 += 2;
              v705 = (_DWORD *)((char *)v705 + 2);
            }
            if ((unint64_t)v710 < v9)
              goto LABEL_1097;
LABEL_1099:
            v707 = v710 - v1610;
            v1497 = (_DWORD)v1610 - v33;
            if ((unint64_t)(v710 - v1610) < 3)
              goto LABEL_383;
LABEL_1100:
            *v1612 = v34 - v188 + 2;
            v1612[1] = v707;
            if (v707 > v32 || &v1610[v707] == (unsigned __int8 *)v9)
            {
              v29 = 1;
              v1497 = (_DWORD)v1610 - v33;
              v19 = v1610;
              *(_DWORD *)(v5 + 36) = v34 + 1;
              goto LABEL_431;
            }
            v29 = 1;
            v1497 = (_DWORD)v1610 - v33;
            v54 = v707;
LABEL_383:
            *(_DWORD *)(v1588 + 4 * v1582) = v34;
            if (v45 < v41)
              goto LABEL_1110;
            v236 = 0;
            v237 = 0;
            v238 = ~(-1 << v1572);
            v239 = v34 + 2;
            v19 = v1610;
            v240 = v1610 + 8;
            v241 = v33 + 8;
            while (2)
            {
              if (v237 >= v236)
                v242 = v236;
              else
                v242 = v237;
              v243 = v33 + v45;
              v244 = &v19[v242];
              v245 = (_DWORD *)(v243 + v242);
              if (v1619 <= (unint64_t)v244)
              {
                v249 = v244;
                if ((unint64_t)v244 < v1602)
                {
LABEL_393:
                  if (*v245 == *(_DWORD *)v249)
                  {
                    v249 += 4;
                    ++v245;
                  }
                }
              }
              else
              {
                v246 = *(_QWORD *)v244 ^ *(_QWORD *)v245;
                if (v246)
                {
                  v247 = (__clz(__rbit64(v246)) >> 3) + v242;
                  if (v247 <= v54)
                    goto LABEL_391;
LABEL_404:
                  if (v247 > v50 - v45)
                    v50 = v45 + v247;
                  v251 = &v14[2 * v29];
                  *v251 = v239 - v45;
                  v251[1] = v247;
                  ++v29;
                  v248 = v1610;
                  v252 = v247 > 0x1000 || &v1610[v247] == (unsigned __int8 *)v9;
                  v54 = v247;
                  if (v252)
                  {
                    v7 = a2;
                    v22 = v1596;
                    v19 = v1610;
                    goto LABEL_1111;
                  }
                  goto LABEL_410;
                }
                v254 = (char *)v240 + v242;
                while (1)
                {
                  v255 = &v254[v246];
                  if ((unint64_t)&v254[v246] >= v1619)
                    break;
                  v256 = *(_QWORD *)(v241 + v242 + v45 + v246);
                  v246 += 8;
                  v257 = *(_QWORD *)v255 ^ v256;
                  if (v257)
                  {
                    v258 = __clz(__rbit64(v257));
                    v5 = a1;
                    v14 = v1612;
                    v247 = v246 + (v258 >> 3) + v242;
                    if (v247 > v54)
                      goto LABEL_404;
                    goto LABEL_391;
                  }
                }
                v249 = (unsigned __int8 *)v240 + v242 + v246;
                v245 = (_DWORD *)(v241 + v242 + v45 + v246);
                v5 = a1;
                if ((unint64_t)v249 < v1602)
                  goto LABEL_393;
              }
              if ((unint64_t)v249 >= v1598)
              {
                if ((unint64_t)v249 < v9)
                  goto LABEL_401;
              }
              else
              {
                if (*(unsigned __int16 *)v245 == *(unsigned __int16 *)v249)
                {
                  v249 += 2;
                  v245 = (_DWORD *)((char *)v245 + 2);
                }
                if ((unint64_t)v249 >= v9)
                  goto LABEL_403;
LABEL_401:
                if (*(unsigned __int8 *)v245 == *v249)
                  ++v249;
              }
LABEL_403:
              v250 = v249 - v244;
              v14 = v1612;
              v247 = v250 + v242;
              if (v247 > v54)
                goto LABEL_404;
LABEL_391:
              v248 = v1610;
LABEL_410:
              v253 = (unsigned int *)(v47 + 8 * (v45 & v36));
              if (*(unsigned __int8 *)(v243 + v247) < *((unsigned __int8 *)v248 + v247))
              {
                *v48 = v45;
                v22 = v1596;
                if (v45 <= v1604)
                {
                  v48 = &v1631;
                  goto LABEL_1109;
                }
                ++v253;
                v237 = v247;
                v48 = v253;
                goto LABEL_415;
              }
              *v49 = v45;
              v22 = v1596;
              if (v45 > v1604)
              {
                v236 = v247;
                v49 = (unsigned int *)(v47 + 8 * (v45 & v36));
LABEL_415:
                v294 = v238-- != 0;
                v7 = a2;
                if (!v294)
                  goto LABEL_1110;
                v45 = *v253;
                v19 = v1610;
                if (v45 < v41)
                  goto LABEL_1111;
                continue;
              }
              break;
            }
            v49 = &v1631;
LABEL_1109:
            v7 = a2;
LABEL_1110:
            v19 = v1610;
LABEL_1111:
            *v49 = 0;
            *v48 = 0;
            *(_DWORD *)(v5 + 36) = v50 - 8;
LABEL_431:
            v1627 = v29;
            v259 = v19;
            ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1628, (uint64_t)v14, &v1627, (_DWORD)v19 - (_DWORD)v1571, v9 - (_DWORD)v19);
            LODWORD(v260) = v1627;
            if (v1627)
            {
              *(_DWORD *)(v15 + 24) = v1633;
              *(_QWORD *)(v15 + 16) = v1632;
              v261 = v1623;
              *(_DWORD *)(v15 + 8) = 0;
              *(_DWORD *)(v15 + 12) = v1623;
              v262 = *(_DWORD *)(v5 + 160);
              if (v262 != 1)
              {
                if (v1623 < 0x40)
                  v268 = ZSTD_LLcode_LL_Code[v1623];
                else
                  v268 = 50 - __clz(v1623);
                v269 = 4 * v268;
                v270 = *(_DWORD *)(v5 + 148);
                v271 = v270 + (*(unsigned int *)((char *)LL_bits + v269) << 8);
                v272 = *(_DWORD **)(v5 + 88);
                LODWORD(v269) = *(_DWORD *)((char *)v272 + v269) + 1;
                v273 = __clz(v269);
                v264 = v271 - (((_DWORD)v269 << 8 >> (v273 ^ 0x1F)) + ((v273 ^ 0x1F) << 8));
                *(_DWORD *)v15 = v264;
                v265 = (v260 - 1);
                v266 = v14[2 * v265 + 1];
                if (v266 <= v1543)
                {
                  v276 = *v272 + 1;
                  v277 = __clz(v276) ^ 0x1F;
                  v267 = v270 - ((v276 << 8 >> v277) + (v277 << 8));
                  goto LABEL_443;
                }
LABEL_441:
                v274 = 0;
                v275 = v14[2 * v265];
                goto LABEL_1002;
              }
              v263 = __clz(v1623 + 1);
              v264 = ((((_DWORD)v1623 + 1) << 8) >> (v263 ^ 0x1F)) + ((v263 ^ 0x1F) << 8);
              *(_DWORD *)v15 = v264;
              v265 = (v260 - 1);
              v266 = v14[2 * v265 + 1];
              if (v266 > v1543)
                goto LABEL_441;
              v267 = 256;
LABEL_443:
              v278 = (_DWORD *)(v15 + 56);
              v279 = (v1556 - 1) & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                *(v278 - 7) = 0x40000000;
                *v278 = 0x40000000;
                v278 += 14;
                v279 -= 2;
              }
              while (v279);
              if (v1556 - 1 != ((v1556 - 1) & 0xFFFFFFFFFFFFFFFELL))
              {
                v280 = v1493;
                v281 = v1495;
                do
                {
                  *v280 = 0x40000000;
                  v280 += 7;
                  --v281;
                }
                while (v281);
              }
              v282 = 0;
              v283 = v267 + v264;
              if (v260 <= 1)
                v260 = 1;
              else
                v260 = v260;
              v284 = v283 + 51;
              v285 = v283 + 4096;
              v286 = v1556;
              while (2)
              {
                v287 = &v14[2 * v282];
                v288 = v287[1];
                if (v286 <= v288)
                {
                  v289 = *v287;
                  v290 = __clz(v289 + 1) ^ 0x1F;
                  if (v262 == 1)
                  {
                    v291 = v286 + 1;
                    if (v286 + 1 <= v288 + 1)
                      v291 = v288 + 1;
                    v292 = v291 - v286;
                    v293 = v291 - 1;
                    v294 = v292 >= 2 && v293 >= v286;
                    if (!v294)
                    {
                      v295 = v286;
                      goto LABEL_470;
                    }
                    v295 = v286 + (v292 & 0xFFFFFFFE);
                    v307 = (v286 << 8) - 256;
                    v308 = v292 & 0xFFFFFFFE;
                    v309 = v261;
                    do
                    {
                      v310 = __clz(v286 - 2);
                      v311 = __clz(v286 - 1) ^ 0x1F;
                      v312 = (_DWORD *)(v15 + 28 * v286);
                      v312[2] = v286;
                      v312[3] = v309;
                      v313 = (_DWORD *)(v15 + 28 * (v286 + 1));
                      v313[2] = v286 + 1;
                      v313[3] = v309;
                      *v312 = v285 + ((v307 - 256) >> (v310 ^ 0x1F)) + (((v310 ^ 0x1F) + (_DWORD)v290) << 8);
                      v312[1] = v289;
                      *v313 = v285 + (v307 >> v311) + ((v311 + (_DWORD)v290) << 8);
                      v313[1] = v289;
                      v307 += 512;
                      v286 += 2;
                      v308 -= 2;
                    }
                    while (v308);
                    v286 = v295;
                    v22 = v1596;
                    v261 = v309;
                    if (v292 != (v292 & 0xFFFFFFFE))
                    {
LABEL_470:
                      v314 = (v295 << 8) - 512;
                      v286 = v295;
                      do
                      {
                        v315 = __clz(v286 - 2);
                        v316 = (_DWORD *)(v15 + 28 * v286);
                        v316[2] = v286;
                        v316[3] = v261;
                        *v316 = v285 + (v314 >> (v315 ^ 0x1F)) + (((v315 ^ 0x1F) + (_DWORD)v290) << 8);
                        v316[1] = v289;
                        ++v286;
                        v314 += 256;
                      }
                      while (v286 <= v288);
                    }
                  }
                  else
                  {
                    v296 = *(_QWORD *)(v5 + 96);
                    v297 = *(_QWORD *)(v5 + 104);
                    v298 = v284 + *(_DWORD *)(v5 + 156) + *(_DWORD *)(v5 + 152);
                    do
                    {
                      v306 = v286 - 3;
                      if (v286 - 3 < 0x80)
                        v299 = ZSTD_MLcode_ML_Code[v306];
                      else
                        v299 = 67 - __clz(v306);
                      v300 = *(_DWORD *)(v297 + 4 * v290) + 1;
                      v301 = __clz(v300);
                      v302 = 4 * v299;
                      v303 = *(unsigned int *)((char *)ML_bits + v302);
                      LODWORD(v302) = *(_DWORD *)(v296 + v302) + 1;
                      v304 = __clz(v302) ^ 0x1F;
                      LODWORD(v302) = v298
                                    - (v300 << 8 >> (v301 ^ 0x1F))
                                    - ((_DWORD)v302 << 8 >> v304)
                                    + (((_DWORD)v290 + v303 - (v301 ^ 0x1F) - v304) << 8);
                      v305 = (_DWORD *)(v15 + 28 * v286);
                      v305[2] = v286;
                      v305[3] = v261;
                      *v305 = v302;
                      v305[1] = v289;
                      ++v286;
                    }
                    while (v286 <= v288);
                  }
                }
                if (++v282 != v260)
                  continue;
                break;
              }
              v317 = v286 - 1;
              if (v286 == 1)
                goto LABEL_998;
              v1523 = v1610 + 8;
              v318 = (_DWORD)v1610 + 1;
              v319 = 1;
              while (2)
              {
                v320 = v319 - 1;
                v321 = (int *)(v15 + 28 * (v319 - 1));
                if (v321[2])
                  v322 = 1u;
                else
                  v322 = *(_DWORD *)(v15 + 28 * v320 + 12) + 1;
                v323 = v319;
                v324 = &v1610[v319];
                v325 = *v321;
                v326 = *(_DWORD *)(v5 + 160);
                if (*(_DWORD *)(v5 + 176) == 2)
                {
                  v327 = v325 + 2048;
                  if (v326 != 1)
                  {
                    if (v322 >= 0x40)
                      goto LABEL_483;
LABEL_489:
                    v328 = ZSTD_LLcode_LL_Code[v322];
                    v329 = v322 - 1;
                    if (v322 - 1 >= 0x40)
                      goto LABEL_490;
LABEL_484:
                    v330 = ZSTD_LLcode_LL_Code[v329];
                    goto LABEL_491;
                  }
LABEL_487:
                  v331 = __clz(v322 + 1);
                  v332 = ((v322 + 1) << 8 >> (v331 ^ 0x1F)) + ((v331 ^ 0x1F) << 8);
                  v333 = __clz(v322) ^ 0x1F;
                  v334 = -((v322 << 8 >> v333) + (v333 << 8));
                }
                else
                {
                  if (v326 == 1)
                  {
                    v327 = v325 + 1536;
                    goto LABEL_487;
                  }
                  v335 = *(_DWORD *)(*(_QWORD *)(v5 + 80) + 4 * *(v324 - 1)) + 1;
                  v336 = __clz(v335);
                  v327 = *(_DWORD *)(v5 + 144) + v325 - ((v335 << 8 >> (v336 ^ 0x1F)) + ((v336 ^ 0x1F) << 8));
                  if (v322 < 0x40)
                    goto LABEL_489;
LABEL_483:
                  v328 = 50 - __clz(v322);
                  v329 = v322 - 1;
                  if (v322 - 1 < 0x40)
                    goto LABEL_484;
LABEL_490:
                  v330 = 50 - __clz(v329);
LABEL_491:
                  v337 = 4 * v328;
                  v338 = *(unsigned int *)((char *)LL_bits + v337);
                  v339 = *(_DWORD *)(v5 + 148);
                  v340 = *(_QWORD *)(v5 + 88);
                  LODWORD(v337) = *(_DWORD *)(v340 + v337) + 1;
                  v341 = __clz(v337) ^ 0x1F;
                  v332 = v339 - ((_DWORD)v337 << 8 >> v341) + ((v338 - v341) << 8);
                  v342 = 4 * v330;
                  v343 = *(unsigned int *)((char *)LL_bits + v342);
                  LODWORD(v342) = *(_DWORD *)(v340 + v342) + 1;
                  LODWORD(v340) = __clz(v342) ^ 0x1F;
                  v334 = ((_DWORD)v342 << 8 >> v340) - v339 + (((_DWORD)v340 - v343) << 8);
                }
                v344 = v332 + v327 + v334;
                v345 = (int *)(v15 + 28 * v323);
                v348 = *v345;
                v346 = v345 + 2;
                v347 = v348;
                if (v344 <= v348)
                {
                  v355 = (int *)(v15 + 28 * v323);
                  v355[1] = 0;
                  v355[2] = 0;
                  v355[3] = v322;
                  *v355 = v344;
                  v347 = v344;
LABEL_497:
                  v356 = 0;
                  v357 = v15 + 28 * v323;
                  v358 = v15 + 28 * v320;
                  *(_QWORD *)(v357 + 16) = *(_QWORD *)(v358 + 16);
                  *(_DWORD *)(v357 + 24) = *(_DWORD *)(v358 + 24);
                  v359 = 1;
                  if ((unint64_t)v324 <= v1594)
                    goto LABEL_511;
LABEL_476:
                  v319 = v323 + 1;
                  ++v318;
                  v22 = v1596;
                  if (v319 > v317)
                    goto LABEL_998;
                  continue;
                }
                break;
              }
              if (!*v346)
                goto LABEL_497;
              v349 = (unsigned int *)(v15 + 28 * (v323 - *v346) + 16);
              v350 = *(_DWORD *)(v15 + 28 * v323 + 4);
              if (v350 < 3)
              {
                if (*(_DWORD *)(v15 + 28 * v323 + 12))
                  v360 = *(_DWORD *)(v15 + 28 * v323 + 4);
                else
                  v360 = v350 + 1;
                if (v360)
                {
                  if (v360 == 3)
                  {
                    v352 = *v349;
                    v354 = v352 - 1;
                  }
                  else
                  {
                    v354 = v349[v360];
                    v352 = *v349;
                  }
                  v658 = v360 > 1;
                  v362 = 2;
                  if (v658)
                    v362 = 1;
                  v351 = &v349[v362];
                }
                else
                {
                  v361 = *(_QWORD *)v349;
                  v351 = (unsigned int *)(v15 + 28 * (v323 - *v346) + 24);
                  v354 = v361;
                  v352 = HIDWORD(v361);
                }
              }
              else
              {
                v353 = *v349;
                v351 = (unsigned int *)(v15 + 28 * (v323 - *v346) + 20);
                v352 = v353;
                v354 = v350 - 2;
              }
              v359 = 0;
              v363 = *v351;
              v364 = v354 | (v352 << 32);
              v365 = v15 + 28 * v323;
              *(_QWORD *)(v365 + 16) = v364;
              *(_DWORD *)(v365 + 24) = v363;
              v356 = 1;
              if ((unint64_t)v324 > v1594)
                goto LABEL_476;
LABEL_511:
              if ((_DWORD)v323 == v317)
              {
                v22 = v1596;
LABEL_998:
                v641 = (int *)(v15 + 28 * v317);
                v275 = v641[1];
                v1528 = *v641;
                v266 = v641[2];
                LODWORD(v261) = v641[3];
                v1634 = *((_QWORD *)v641 + 2);
                v1635 = v641[6];
                if (v317 >= v261 + v266)
                  v274 = v317 - (v261 + v266);
                else
                  v274 = 0;
                v7 = a2;
                if (!v266)
                  goto LABEL_1087;
                goto LABEL_1002;
              }
              if (v359)
                v359 = *(_DWORD *)(v15 + 28 * v323 + 12);
              if (*(_DWORD *)(v5 + 160) == 1)
              {
                v366 = 256;
              }
              else
              {
                v367 = **(_DWORD **)(v5 + 88) + 1;
                v368 = __clz(v367) ^ 0x1F;
                v366 = *(_DWORD *)(v5 + 148) - ((v367 << 8 >> v368) + (v368 << 8));
              }
              v1576 = v366;
              v1586 = v347;
              v1541 = v346;
              v1592 = v318;
              v1627 = 0;
              v369 = *(_QWORD *)(v5 + 8);
              v370 = v5;
              v371 = *(unsigned int *)(v5 + 36);
              v1624 = v359;
              if (v369 + v371 > (unint64_t)v324)
              {
                v372 = 0;
                v5 = v370;
                v9 = v1569;
                goto LABEL_879;
              }
              v1535 = v356;
              v373 = *(_DWORD *)(v370 + 208);
              v1608 = v324;
              for (j = (_DWORD)v324 - v369;
                    v371 < j;
              v375 = (_DWORD *)(v15 + 28 * v323 + 16);
              *(_DWORD *)(v370 + 36) = j;
              v5 = v370;
              if ((v373 - 6) < 2)
              {
                v372 = 0;
                if (*(_DWORD *)(v370 + 212) >= 0xFFFu)
                  v408 = 4095;
                else
                  v408 = *(_DWORD *)(v370 + 212);
                v409 = *(_QWORD *)(v370 + 8);
                v324 = v1608;
                v410 = (_DWORD)v1608 - v409;
                v411 = (char *)(v1608 + 4);
                v1500 = *(_DWORD *)(v370 + 204);
                v1508 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v1608) >> -(char)*(_DWORD *)(v370 + 200);
                v1516 = *(_QWORD *)(v370 + 48);
                v412 = *(_DWORD *)(v1516 + 4 * v1508);
                v413 = -1 << (*(_DWORD *)(v370 + 196) - 1);
                v414 = ~v413;
                v415 = (_DWORD)v1608 - v409 + v413 + 1;
                if ((int)v1608 - (int)v409 < ~v413)
                  v415 = 0;
                v1549 = v415;
                v416 = *(_DWORD *)(v370 + 24);
                v417 = 1 << *(_DWORD *)(v370 + 192);
                if (v410 - *(_DWORD *)(v370 + 28) > v417 && *(_DWORD *)(v370 + 32) == 0)
                  v419 = v410 - v417;
                else
                  v419 = *(_DWORD *)(v370 + 28);
                if (v419 <= 1)
                  v420 = 1;
                else
                  v420 = v419;
                v421 = *(_QWORD *)(v370 + 64);
                v422 = (unsigned int *)(v421 + 8 * (v410 & ~v413));
                v1561 = v422 + 1;
                v423 = v410 + 9;
                v1631 = 0;
                if (v1535)
                  v424 = 4;
                else
                  v424 = 3;
                v425 = v410 - v416;
                v426 = v1535;
                v427 = (v1556 - 1);
                v9 = v1569;
                v21 = v15 + 28;
                while (2)
                {
                  if (v426 != 3)
                  {
                    v428 = v375[v426];
                    if (v428 - 1 < v425)
                      goto LABEL_600;
                    goto LABEL_595;
                  }
                  v428 = *v375 - 1;
                  if (*v375 - 2 >= v425)
                    goto LABEL_595;
LABEL_600:
                  v429 = *(_DWORD *)v324;
                  v430 = *(_DWORD *)&v324[-v428];
                  if (v410 - v428 < v419 || v429 != v430)
                  {
                    v324 = v1608;
                    goto LABEL_595;
                  }
                  v432 = &v411[-v428];
                  if (v1619 > (unint64_t)v411)
                  {
                    v433 = v1608 + 4;
                    v434 = *(_QWORD *)v411 ^ *(_QWORD *)v432;
                    if (v434)
                    {
                      v435 = __clz(__rbit64(v434)) >> 3;
                    }
                    else
                    {
                      do
                      {
                        v432 += 8;
                        if ((unint64_t)++v433 >= v1619)
                          goto LABEL_614;
                        v436 = *v433 ^ *(_QWORD *)v432;
                      }
                      while (!v436);
                      v435 = (char *)v433 + (__clz(__rbit64(v436)) >> 3) - v411;
                    }
                    v324 = v1608;
                    v437 = v435 + 4;
                    v438 = v437;
                    if (v427 < v437)
                      goto LABEL_622;
                    goto LABEL_595;
                  }
                  v433 = v1608 + 4;
LABEL_614:
                  if ((unint64_t)v433 >= v1602)
                  {
                    if ((unint64_t)v433 >= v1598)
                      goto LABEL_618;
                  }
                  else
                  {
                    if (*(_DWORD *)v432 == *(_DWORD *)v433)
                    {
                      v433 = (_QWORD *)((char *)v433 + 4);
                      v432 += 4;
                    }
                    if ((unint64_t)v433 >= v1598)
                    {
LABEL_618:
                      if ((unint64_t)v433 < v1569)
                        goto LABEL_619;
                      goto LABEL_621;
                    }
                  }
                  if (*(unsigned __int16 *)v432 == *(unsigned __int16 *)v433)
                  {
                    v433 = (_QWORD *)((char *)v433 + 2);
                    v432 += 2;
                  }
                  if ((unint64_t)v433 < v1569)
                  {
LABEL_619:
                    if (*v432 == *(_BYTE *)v433)
                      LODWORD(v433) = (_DWORD)v433 + 1;
                  }
LABEL_621:
                  v324 = v1608;
                  v437 = (_DWORD)v433 - (_DWORD)v1608;
                  v438 = v437;
                  if (v427 >= v437)
                    goto LABEL_595;
LABEL_622:
                  v439 = &v1612[2 * v372];
                  *v439 = v426 + ((int)(v1535 << 31) >> 31);
                  v439[1] = v437;
                  ++v372;
                  if (v437 > v408)
                    goto LABEL_878;
                  v427 = v438;
                  if (&v324[v438] == (unsigned __int8 *)v1569)
                    goto LABEL_878;
LABEL_595:
                  if (++v426 < v424)
                    continue;
                  break;
                }
                *(_DWORD *)(v1516 + 4 * v1508) = v410;
                if (v412 < v420)
                  goto LABEL_877;
                v440 = 0;
                v441 = 0;
                v442 = ~(-1 << v1500);
                v443 = v410 + 2;
                v1536 = (char *)v1523 + v323;
                v444 = v409 + 8;
                while (2)
                {
                  if (v441 >= v440)
                    v445 = v440;
                  else
                    v445 = v441;
                  v446 = v409 + v412;
                  v447 = (char *)&v324[v445];
                  v448 = (_QWORD *)(v446 + v445);
                  if (v1619 <= (unint64_t)&v324[v445])
                  {
                    v452 = (char *)&v324[v445];
                    if ((unint64_t)v447 >= v1602)
                      goto LABEL_642;
                  }
                  else
                  {
                    v449 = *(_QWORD *)v447 ^ *v448;
                    if (v449)
                    {
                      v450 = (__clz(__rbit64(v449)) >> 3) + v445;
                      v451 = v1612;
                      if (v450 <= v427)
                        goto LABEL_657;
LABEL_651:
                      if (v450 > v423 - v412)
                        v423 = v412 + v450;
                      v453 = &v451[2 * v372];
                      *v453 = v443 - v412;
                      v453[1] = v450;
                      ++v372;
                      v454 = v450 > 0x1000 || &v324[v450] == (unsigned __int8 *)v1569;
                      v427 = v450;
                      if (v454)
                        goto LABEL_877;
LABEL_657:
                      v455 = (unsigned int *)(v421 + 8 * (v412 & v414));
                      if (*(unsigned __int8 *)(v446 + v450) >= v324[v450])
                      {
                        *v1561 = v412;
                        if (v412 <= v1549)
                        {
LABEL_875:
                          v1561 = &v1631;
                          goto LABEL_877;
                        }
                        v440 = v450;
                        v1561 = (unsigned int *)(v421 + 8 * (v412 & v414));
                      }
                      else
                      {
                        *v422 = v412;
                        if (v412 <= v1549)
                        {
LABEL_876:
                          v422 = &v1631;
                          goto LABEL_877;
                        }
                        ++v455;
                        v441 = v450;
                        v422 = v455;
                      }
                      v294 = v442-- != 0;
                      if (!v294)
                        goto LABEL_877;
                      v412 = *v455;
                      if (*v455 < v420)
                        goto LABEL_877;
                      continue;
                    }
                    v456 = 0;
                    v457 = &v1536[v445];
                    while (1)
                    {
                      v458 = &v457[v456];
                      if ((unint64_t)&v457[v456] >= v1619)
                        break;
                      v459 = *(_QWORD *)(v444 + v445 + v412 + v456);
                      v456 += 8;
                      v460 = *(_QWORD *)v458 ^ v459;
                      if (v460)
                      {
                        v461 = v456 + (__clz(__rbit64(v460)) >> 3);
                        v5 = a1;
                        v21 = v15 + 28;
                        v324 = v1608;
                        v450 = v461 + v445;
                        v451 = v1612;
                        if (v450 <= v427)
                          goto LABEL_657;
                        goto LABEL_651;
                      }
                    }
                    v452 = &v1536[v445 + v456];
                    v448 = (_QWORD *)(v444 + v445 + v412 + v456);
                    v5 = a1;
                    v21 = v15 + 28;
                    v324 = v1608;
                    if ((unint64_t)v452 >= v1602)
                    {
LABEL_642:
                      if ((unint64_t)v452 >= v1598)
                      {
                        if ((unint64_t)v452 >= v1569)
                          goto LABEL_650;
                      }
                      else
                      {
                        if (*(unsigned __int16 *)v448 == *(unsigned __int16 *)v452)
                        {
                          v452 += 2;
                          v448 = (_QWORD *)((char *)v448 + 2);
                        }
                        if ((unint64_t)v452 >= v1569)
                        {
LABEL_650:
                          v450 = v452 - v447 + v445;
                          v451 = v1612;
                          if (v450 <= v427)
                            goto LABEL_657;
                          goto LABEL_651;
                        }
                      }
                      v324 = v1608;
                      if (*(unsigned __int8 *)v448 == *v452)
                        ++v452;
                      goto LABEL_650;
                    }
                  }
                  break;
                }
                if (*(_DWORD *)v448 == *(_DWORD *)v452)
                {
                  v452 += 4;
                  v448 = (_QWORD *)((char *)v448 + 4);
                }
                goto LABEL_642;
              }
              v9 = v1569;
              v21 = v15 + 28;
              v324 = v1608;
              if (v373 == 5)
              {
                v372 = 0;
                if (*(_DWORD *)(v5 + 212) >= 0xFFFu)
                  v462 = 4095;
                else
                  v462 = *(_DWORD *)(v5 + 212);
                v463 = *(_QWORD *)(v5 + 8);
                v464 = (_DWORD)v1608 - v463;
                v465 = (char *)(v1608 + 4);
                v1501 = *(_DWORD *)(v5 + 204);
                v1509 = (0xCF1BBCDCBB000000 * *(_QWORD *)v1608) >> -(char)*(_DWORD *)(v5 + 200);
                v1517 = *(_QWORD *)(v5 + 48);
                v466 = *(_DWORD *)(v1517 + 4 * v1509);
                v467 = -1 << (*(_DWORD *)(v5 + 196) - 1);
                v468 = ~v467;
                v469 = (_DWORD)v1608 - v463 + v467 + 1;
                if ((int)v1608 - (int)v463 < ~v467)
                  v469 = 0;
                v1550 = v469;
                v470 = *(_DWORD *)(v5 + 24);
                v471 = 1 << *(_DWORD *)(v5 + 192);
                if (v464 - *(_DWORD *)(v5 + 28) > v471 && *(_DWORD *)(v5 + 32) == 0)
                  v473 = v464 - v471;
                else
                  v473 = *(_DWORD *)(v5 + 28);
                if (v473 <= 1)
                  v474 = 1;
                else
                  v474 = v473;
                v475 = *(_QWORD *)(v5 + 64);
                v422 = (unsigned int *)(v475 + 8 * (v464 & ~v467));
                v1561 = v422 + 1;
                v423 = v464 + 9;
                v1631 = 0;
                if (v1535)
                  v476 = 4;
                else
                  v476 = 3;
                v477 = v464 - v470;
                v478 = v1535;
                v479 = (v1556 - 1);
                while (2)
                {
                  if (v478 != 3)
                  {
                    v480 = v375[v478];
                    if (v480 - 1 < v477)
                      goto LABEL_696;
                    goto LABEL_691;
                  }
                  v480 = *v375 - 1;
                  if (*v375 - 2 >= v477)
                    goto LABEL_691;
LABEL_696:
                  v481 = *(_DWORD *)v324;
                  v482 = *(_DWORD *)&v324[-v480];
                  if (v464 - v480 < v473 || v481 != v482)
                  {
                    v324 = v1608;
                    goto LABEL_691;
                  }
                  v484 = &v465[-v480];
                  if (v1619 > (unint64_t)v465)
                  {
                    v485 = v1608 + 4;
                    v486 = *(_QWORD *)v465 ^ *(_QWORD *)v484;
                    if (v486)
                    {
                      v487 = __clz(__rbit64(v486)) >> 3;
                    }
                    else
                    {
                      do
                      {
                        v484 += 8;
                        if ((unint64_t)++v485 >= v1619)
                          goto LABEL_710;
                        v488 = *v485 ^ *(_QWORD *)v484;
                      }
                      while (!v488);
                      v487 = (char *)v485 + (__clz(__rbit64(v488)) >> 3) - v465;
                    }
                    v324 = v1608;
                    v489 = v487 + 4;
                    v490 = v489;
                    if (v479 < v489)
                      goto LABEL_718;
                    goto LABEL_691;
                  }
                  v485 = v1608 + 4;
LABEL_710:
                  if ((unint64_t)v485 >= v1602)
                  {
                    if ((unint64_t)v485 >= v1598)
                      goto LABEL_714;
                  }
                  else
                  {
                    if (*(_DWORD *)v484 == *(_DWORD *)v485)
                    {
                      v485 = (_QWORD *)((char *)v485 + 4);
                      v484 += 4;
                    }
                    if ((unint64_t)v485 >= v1598)
                    {
LABEL_714:
                      if ((unint64_t)v485 < v1569)
                        goto LABEL_715;
                      goto LABEL_717;
                    }
                  }
                  if (*(unsigned __int16 *)v484 == *(unsigned __int16 *)v485)
                  {
                    v485 = (_QWORD *)((char *)v485 + 2);
                    v484 += 2;
                  }
                  if ((unint64_t)v485 < v1569)
                  {
LABEL_715:
                    if (*v484 == *(_BYTE *)v485)
                      LODWORD(v485) = (_DWORD)v485 + 1;
                  }
LABEL_717:
                  v324 = v1608;
                  v489 = (_DWORD)v485 - (_DWORD)v1608;
                  v490 = v489;
                  if (v479 >= v489)
                    goto LABEL_691;
LABEL_718:
                  v491 = &v1612[2 * v372];
                  *v491 = v478 + ((int)(v1535 << 31) >> 31);
                  v491[1] = v489;
                  ++v372;
                  if (v489 > v462)
                    goto LABEL_878;
                  v479 = v490;
                  if (&v324[v490] == (unsigned __int8 *)v1569)
                    goto LABEL_878;
LABEL_691:
                  if (++v478 < v476)
                    continue;
                  break;
                }
                *(_DWORD *)(v1517 + 4 * v1509) = v464;
                if (v466 < v474)
                  goto LABEL_877;
                v528 = 0;
                v529 = 0;
                v530 = ~(-1 << v1501);
                v531 = v464 + 2;
                v1537 = (char *)v1523 + v323;
                v532 = v463 + 8;
                while (2)
                {
                  if (v529 >= v528)
                    v533 = v528;
                  else
                    v533 = v529;
                  v534 = v463 + v466;
                  v535 = (char *)&v324[v533];
                  v536 = (_QWORD *)(v534 + v533);
                  if (v1619 <= (unint64_t)&v324[v533])
                  {
                    v540 = (char *)&v324[v533];
                    if ((unint64_t)v535 >= v1602)
                      goto LABEL_801;
                  }
                  else
                  {
                    v537 = *(_QWORD *)v535 ^ *v536;
                    if (v537)
                    {
                      v538 = (__clz(__rbit64(v537)) >> 3) + v533;
                      v539 = v1612;
                      if (v538 <= v479)
                        goto LABEL_816;
LABEL_810:
                      if (v538 > v423 - v466)
                        v423 = v466 + v538;
                      v541 = &v539[2 * v372];
                      *v541 = v531 - v466;
                      v541[1] = v538;
                      ++v372;
                      v542 = v538 > 0x1000 || &v324[v538] == (unsigned __int8 *)v1569;
                      v479 = v538;
                      if (v542)
                        goto LABEL_877;
LABEL_816:
                      v543 = (unsigned int *)(v475 + 8 * (v466 & v468));
                      if (*(unsigned __int8 *)(v534 + v538) >= v324[v538])
                      {
                        *v1561 = v466;
                        if (v466 <= v1550)
                          goto LABEL_875;
                        v528 = v538;
                        v1561 = (unsigned int *)(v475 + 8 * (v466 & v468));
                      }
                      else
                      {
                        *v422 = v466;
                        if (v466 <= v1550)
                          goto LABEL_876;
                        ++v543;
                        v529 = v538;
                        v422 = v543;
                      }
                      v294 = v530-- != 0;
                      if (!v294)
                        goto LABEL_877;
                      v466 = *v543;
                      if (*v543 < v474)
                        goto LABEL_877;
                      continue;
                    }
                    v544 = 0;
                    v545 = &v1537[v533];
                    while (1)
                    {
                      v546 = &v545[v544];
                      if ((unint64_t)&v545[v544] >= v1619)
                        break;
                      v547 = *(_QWORD *)(v532 + v533 + v466 + v544);
                      v544 += 8;
                      v548 = *(_QWORD *)v546 ^ v547;
                      if (v548)
                      {
                        v549 = v544 + (__clz(__rbit64(v548)) >> 3);
                        v5 = a1;
                        v21 = v15 + 28;
                        v324 = v1608;
                        v538 = v549 + v533;
                        v539 = v1612;
                        if (v538 <= v479)
                          goto LABEL_816;
                        goto LABEL_810;
                      }
                    }
                    v540 = &v1537[v533 + v544];
                    v536 = (_QWORD *)(v532 + v533 + v466 + v544);
                    v5 = a1;
                    v21 = v15 + 28;
                    v324 = v1608;
                    if ((unint64_t)v540 >= v1602)
                    {
LABEL_801:
                      if ((unint64_t)v540 >= v1598)
                      {
                        if ((unint64_t)v540 >= v1569)
                          goto LABEL_809;
                      }
                      else
                      {
                        if (*(unsigned __int16 *)v536 == *(unsigned __int16 *)v540)
                        {
                          v540 += 2;
                          v536 = (_QWORD *)((char *)v536 + 2);
                        }
                        if ((unint64_t)v540 >= v1569)
                        {
LABEL_809:
                          v538 = v540 - v535 + v533;
                          v539 = v1612;
                          if (v538 <= v479)
                            goto LABEL_816;
                          goto LABEL_810;
                        }
                      }
                      v324 = v1608;
                      if (*(unsigned __int8 *)v536 == *v540)
                        ++v540;
                      goto LABEL_809;
                    }
                  }
                  break;
                }
                if (*(_DWORD *)v536 == *(_DWORD *)v540)
                {
                  v540 += 4;
                  v536 = (_QWORD *)((char *)v536 + 4);
                }
                goto LABEL_801;
              }
              if (v373 != 3)
              {
                v372 = 0;
                if (*(_DWORD *)(v5 + 212) >= 0xFFFu)
                  v492 = 4095;
                else
                  v492 = *(_DWORD *)(v5 + 212);
                v493 = *(_QWORD *)(v5 + 8);
                v494 = (_DWORD)v1608 - v493;
                v495 = (char *)(v1608 + 4);
                v1502 = *(_DWORD *)(v5 + 204);
                v1510 = (-1640531535 * *(_DWORD *)v1608) >> -(char)*(_DWORD *)(v5 + 200);
                v1518 = *(_QWORD *)(v5 + 48);
                v496 = *(_DWORD *)(v1518 + 4 * v1510);
                v497 = -1 << (*(_DWORD *)(v5 + 196) - 1);
                v498 = ~v497;
                v499 = (_DWORD)v1608 - v493 + v497 + 1;
                if ((int)v1608 - (int)v493 < ~v497)
                  v499 = 0;
                v1551 = v499;
                v500 = *(_DWORD *)(v5 + 24);
                v501 = 1 << *(_DWORD *)(v5 + 192);
                if (v494 - *(_DWORD *)(v5 + 28) > v501 && *(_DWORD *)(v5 + 32) == 0)
                  v503 = v494 - v501;
                else
                  v503 = *(_DWORD *)(v5 + 28);
                if (v503 <= 1)
                  v504 = 1;
                else
                  v504 = v503;
                v505 = *(_QWORD *)(v5 + 64);
                v422 = (unsigned int *)(v505 + 8 * (v494 & ~v497));
                v1561 = v422 + 1;
                v423 = v494 + 9;
                v1631 = 0;
                if (v1535)
                  v506 = 4;
                else
                  v506 = 3;
                v507 = v494 - v500;
                v508 = v1535;
                v509 = (v1556 - 1);
                while (1)
                {
                  if (v508 == 3)
                  {
                    v510 = *v375 - 1;
                    if (*v375 - 2 >= v507)
                      goto LABEL_744;
                  }
                  else
                  {
                    v510 = v375[v508];
                    if (v510 - 1 >= v507)
                      goto LABEL_744;
                  }
                  v511 = *(_DWORD *)v324;
                  v512 = *(_DWORD *)&v324[-v510];
                  if (v494 - v510 < v503 || v511 != v512)
                  {
                    v324 = v1608;
                    goto LABEL_744;
                  }
                  v514 = &v495[-v510];
                  if (v1619 > (unint64_t)v495)
                  {
                    v515 = v1608 + 4;
                    v516 = *(_QWORD *)v495 ^ *(_QWORD *)v514;
                    if (v516)
                    {
                      v517 = __clz(__rbit64(v516)) >> 3;
                    }
                    else
                    {
                      do
                      {
                        v514 += 8;
                        if ((unint64_t)++v515 >= v1619)
                          goto LABEL_763;
                        v518 = *v515 ^ *(_QWORD *)v514;
                      }
                      while (!v518);
                      v517 = (char *)v515 + (__clz(__rbit64(v518)) >> 3) - v495;
                    }
                    v324 = v1608;
                    v519 = v517 + 4;
                    v520 = v519;
                    if (v509 >= v519)
                      goto LABEL_744;
LABEL_771:
                    v521 = &v1612[2 * v372];
                    *v521 = v508 + ((int)(v1535 << 31) >> 31);
                    v521[1] = v519;
                    ++v372;
                    if (v519 > v492)
                      goto LABEL_878;
                    v509 = v520;
                    if (&v324[v520] == (unsigned __int8 *)v1569)
                      goto LABEL_878;
                    goto LABEL_744;
                  }
                  v515 = v1608 + 4;
LABEL_763:
                  if ((unint64_t)v515 >= v1602)
                  {
                    if ((unint64_t)v515 >= v1598)
                      goto LABEL_767;
                  }
                  else
                  {
                    if (*(_DWORD *)v514 == *(_DWORD *)v515)
                    {
                      v515 = (_QWORD *)((char *)v515 + 4);
                      v514 += 4;
                    }
                    if ((unint64_t)v515 >= v1598)
                    {
LABEL_767:
                      if ((unint64_t)v515 >= v1569)
                        goto LABEL_770;
LABEL_768:
                      if (*v514 == *(_BYTE *)v515)
                        LODWORD(v515) = (_DWORD)v515 + 1;
                      goto LABEL_770;
                    }
                  }
                  if (*(unsigned __int16 *)v514 == *(unsigned __int16 *)v515)
                  {
                    v515 = (_QWORD *)((char *)v515 + 2);
                    v514 += 2;
                  }
                  if ((unint64_t)v515 < v1569)
                    goto LABEL_768;
LABEL_770:
                  v324 = v1608;
                  v519 = (_DWORD)v515 - (_DWORD)v1608;
                  v520 = v519;
                  if (v509 < v519)
                    goto LABEL_771;
LABEL_744:
                  if (++v508 >= v506)
                  {
                    *(_DWORD *)(v1518 + 4 * v1510) = v494;
                    if (v496 < v504)
                      goto LABEL_877;
                    v550 = 0;
                    v551 = 0;
                    v552 = ~(-1 << v1502);
                    v553 = v494 + 2;
                    v1538 = (char *)v1523 + v323;
                    v554 = v493 + 8;
                    while (1)
                    {
                      v555 = v551 >= v550 ? v550 : v551;
                      v556 = v493 + v496;
                      v557 = (char *)&v324[v555];
                      v558 = (_QWORD *)(v556 + v555);
                      if (v1619 <= (unint64_t)&v324[v555])
                        break;
                      v559 = *(_QWORD *)v557 ^ *v558;
                      if (v559)
                      {
                        v560 = (__clz(__rbit64(v559)) >> 3) + v555;
                        v561 = v1612;
                        if (v560 <= v509)
                          goto LABEL_859;
                        goto LABEL_853;
                      }
                      v566 = 0;
                      v567 = &v1538[v555];
                      do
                      {
                        v568 = &v567[v566];
                        if ((unint64_t)&v567[v566] >= v1619)
                        {
                          v562 = &v1538[v555 + v566];
                          v558 = (_QWORD *)(v554 + v555 + v496 + v566);
                          v5 = a1;
                          v324 = v1608;
                          if ((unint64_t)v562 >= v1602)
                            goto LABEL_844;
                          goto LABEL_842;
                        }
                        v569 = *(_QWORD *)(v554 + v555 + v496 + v566);
                        v566 += 8;
                        v570 = *(_QWORD *)v568 ^ v569;
                      }
                      while (!v570);
                      v571 = v566 + (__clz(__rbit64(v570)) >> 3);
                      v5 = a1;
                      v324 = v1608;
                      v560 = v571 + v555;
                      v561 = v1612;
                      if (v560 <= v509)
                        goto LABEL_859;
LABEL_853:
                      if (v560 > v423 - v496)
                        v423 = v496 + v560;
                      v563 = &v561[2 * v372];
                      *v563 = v553 - v496;
                      v563[1] = v560;
                      ++v372;
                      v564 = v560 > 0x1000 || &v324[v560] == (unsigned __int8 *)v1569;
                      v509 = v560;
                      if (v564)
                        goto LABEL_877;
LABEL_859:
                      v565 = (unsigned int *)(v505 + 8 * (v496 & v498));
                      if (*(unsigned __int8 *)(v556 + v560) >= v324[v560])
                      {
                        *v1561 = v496;
                        if (v496 > v1551)
                        {
                          v550 = v560;
                          v1561 = (unsigned int *)(v505 + 8 * (v496 & v498));
                          goto LABEL_864;
                        }
                        goto LABEL_875;
                      }
                      *v422 = v496;
                      if (v496 <= v1551)
                        goto LABEL_876;
                      ++v565;
                      v551 = v560;
                      v422 = v565;
LABEL_864:
                      v294 = v552-- != 0;
                      if (v294)
                      {
                        v496 = *v565;
                        if (*v565 >= v504)
                          continue;
                      }
LABEL_877:
                      *v1561 = 0;
                      *v422 = 0;
                      *(_DWORD *)(v5 + 36) = v423 - 8;
LABEL_878:
                      v14 = v1612;
                      goto LABEL_879;
                    }
                    v562 = (char *)&v324[v555];
                    if ((unint64_t)v557 >= v1602)
                      goto LABEL_844;
LABEL_842:
                    if (*(_DWORD *)v558 == *(_DWORD *)v562)
                    {
                      v562 += 4;
                      v558 = (_QWORD *)((char *)v558 + 4);
                    }
LABEL_844:
                    if ((unint64_t)v562 >= v1598)
                    {
                      if ((unint64_t)v562 >= v1569)
                        goto LABEL_852;
                    }
                    else
                    {
                      if (*(unsigned __int16 *)v558 == *(unsigned __int16 *)v562)
                      {
                        v562 += 2;
                        v558 = (_QWORD *)((char *)v558 + 2);
                      }
                      if ((unint64_t)v562 >= v1569)
                      {
LABEL_852:
                        v560 = v562 - v557 + v555;
                        v561 = v1612;
                        if (v560 <= v509)
                          goto LABEL_859;
                        goto LABEL_853;
                      }
                    }
                    v324 = v1608;
                    if (*(unsigned __int8 *)v558 == *v562)
                      ++v562;
                    goto LABEL_852;
                  }
                }
              }
              v372 = 0;
              v1491 = (char *)v1523 + v323;
              if (*(_DWORD *)(v5 + 212) >= 0xFFFu)
                v376 = 4095;
              else
                v376 = *(_DWORD *)(v5 + 212);
              v377 = *(_QWORD *)(v5 + 8);
              v378 = (_DWORD)v1608 - v377;
              v379 = (char *)(v1608 + 3);
              v1499 = *(_DWORD *)(v5 + 204);
              v1507 = (-1640531535 * *(_DWORD *)v1608) >> -(char)*(_DWORD *)(v5 + 200);
              v1515 = *(_QWORD *)(v5 + 48);
              v380 = *(_DWORD *)(v1515 + 4 * v1507);
              v381 = *(_QWORD *)(v5 + 64);
              v382 = -1 << (*(_DWORD *)(v5 + 196) - 1);
              v383 = ~v382;
              v384 = (_DWORD)v1608 - v377 + v382 + 1;
              if ((int)v1608 - (int)v377 < ~v382)
                v384 = 0;
              v1548 = v384;
              v385 = *(_DWORD *)(v5 + 24);
              v386 = 1 << *(_DWORD *)(v5 + 192);
              if (v378 - *(_DWORD *)(v5 + 28) > v386 && *(_DWORD *)(v5 + 32) == 0)
                v388 = v378 - v386;
              else
                v388 = *(_DWORD *)(v5 + 28);
              if (v388 <= 1)
                v389 = 1;
              else
                v389 = v388;
              v390 = (unsigned int *)(v381 + 8 * (v378 & ~v382));
              v1560 = v390 + 1;
              v391 = v378 + 9;
              v1631 = 0;
              if (v1535)
                v392 = 4;
              else
                v392 = 3;
              v393 = v378 - v385;
              v394 = v1535;
              v395 = (v1556 - 1);
              v14 = v1612;
              while (1)
              {
                if (v394 == 3)
                {
                  v396 = *v375 - 1;
                  if (*v375 - 2 >= v393)
                    goto LABEL_542;
                }
                else
                {
                  v396 = v375[v394];
                  if (v396 - 1 >= v393)
                    goto LABEL_542;
                }
                v397 = (*(_DWORD *)&v324[-v396] ^ *(_DWORD *)v324) & 0xFFFFFF;
                if (v378 - v396 < v388 || v397 != 0)
                {
                  v5 = a1;
                  v324 = v1608;
                  goto LABEL_542;
                }
                v399 = &v379[-v396];
                if (v1619 > (unint64_t)v379)
                  break;
                v400 = v1608 + 3;
LABEL_561:
                if ((unint64_t)v400 >= v1602)
                {
                  v5 = a1;
                  if ((unint64_t)v400 >= v1598)
                    goto LABEL_565;
                }
                else
                {
                  if (*(_DWORD *)v399 == *v400)
                  {
                    ++v400;
                    v399 += 4;
                  }
                  v5 = a1;
                  if ((unint64_t)v400 >= v1598)
                  {
LABEL_565:
                    if ((unint64_t)v400 >= v1569)
                      goto LABEL_568;
LABEL_566:
                    if (*v399 == *(_BYTE *)v400)
                      LODWORD(v400) = (_DWORD)v400 + 1;
                    goto LABEL_568;
                  }
                }
                if (*(unsigned __int16 *)v399 == *(unsigned __int16 *)v400)
                {
                  v400 = (_DWORD *)((char *)v400 + 2);
                  v399 += 2;
                }
                if ((unint64_t)v400 < v1569)
                  goto LABEL_566;
LABEL_568:
                v324 = v1608;
                v406 = (_DWORD)v400 - (_DWORD)v379;
                v14 = v1612;
                v404 = v406 + 3;
                v405 = v404;
                if (v395 < v404)
                  goto LABEL_569;
LABEL_542:
                if (++v394 >= v392)
                {
                  if (v395 > 2)
                    goto LABEL_944;
                  v522 = *(_QWORD *)(v5 + 56);
                  v523 = *(_DWORD *)v324;
                  v524 = 32 - *(_DWORD *)(v5 + 40);
                  if (v1497 < v378)
                  {
                    v525 = v1497;
                    do
                    {
                      *(_DWORD *)(v522 + 4 * ((900185344 * *(_DWORD *)(v377 + v525)) >> v524)) = v525;
                      ++v525;
                    }
                    while (v1592 - (_DWORD)v377 != v525);
                  }
                  v526 = *(unsigned int *)(v522 + 4 * ((900185344 * v523) >> v524));
                  if (v526 < v389 || (v378 - v526) >> 18 != 0)
                  {
                    v1497 = (_DWORD)v1608 - v377;
                    goto LABEL_944;
                  }
                  v612 = (_QWORD *)(v377 + v526);
                  if (v1619 <= (unint64_t)v324)
                  {
                    v615 = (char *)v324;
                    if ((unint64_t)v324 >= v1602)
                      goto LABEL_929;
                  }
                  else
                  {
                    v613 = *(_QWORD *)v324 ^ *v612;
                    if (v613)
                    {
                      v614 = __clz(__rbit64(v613)) >> 3;
                      v1497 = (_DWORD)v1608 - v377;
                      if (v614 < 3)
                        goto LABEL_944;
LABEL_938:
                      *v14 = v378 - v526 + 2;
                      v14[1] = v614;
                      if (v614 > v376 || &v324[v614] == (unsigned __int8 *)v1569)
                      {
                        v372 = 1;
                        v1497 = (_DWORD)v1608 - v377;
                        *(_DWORD *)(v5 + 36) = v378 + 1;
                        goto LABEL_879;
                      }
                      v372 = 1;
                      v1497 = (_DWORD)v1608 - v377;
                      v395 = v614;
LABEL_944:
                      *(_DWORD *)(v1515 + 4 * v1507) = v378;
                      if (v380 < v389)
                        goto LABEL_945;
                      v617 = 0;
                      v618 = 0;
                      v619 = ~(-1 << v1499);
                      v620 = v378 + 2;
                      v1539 = (char *)v1523 + v323;
                      v621 = v377 + 8;
                      while (1)
                      {
                        v622 = v618 >= v617 ? v617 : v618;
                        v623 = v377 + v380;
                        v624 = (char *)&v324[v622];
                        v625 = (_DWORD *)(v623 + v622);
                        if (v1619 <= (unint64_t)&v324[v622])
                        {
                          v628 = (char *)&v324[v622];
                          if ((unint64_t)v624 < v1602)
                          {
LABEL_955:
                            if (*v625 == *(_DWORD *)v628)
                            {
                              v628 += 4;
                              ++v625;
                            }
                          }
                        }
                        else
                        {
                          v626 = *(_QWORD *)v624 ^ *(_QWORD *)v625;
                          if (v626)
                          {
                            v627 = (__clz(__rbit64(v626)) >> 3) + v622;
                            if (v627 <= v395)
                              goto LABEL_953;
                            goto LABEL_966;
                          }
                          v632 = 0;
                          v633 = &v1539[v622];
                          while (1)
                          {
                            v634 = &v633[v632];
                            if ((unint64_t)&v633[v632] >= v1619)
                              break;
                            v635 = *(_QWORD *)(v621 + v622 + v380 + v632);
                            v632 += 8;
                            v636 = *(_QWORD *)v634 ^ v635;
                            v5 = a1;
                            if (v636)
                            {
                              v637 = __clz(__rbit64(v636));
                              v21 = v15 + 28;
                              v324 = v1608;
                              v627 = v632 + (v637 >> 3) + v622;
                              if (v627 > v395)
                                goto LABEL_966;
                              goto LABEL_953;
                            }
                          }
                          v628 = &v1539[v622 + v632];
                          v625 = (_DWORD *)(v621 + v622 + v380 + v632);
                          v21 = v15 + 28;
                          v324 = v1608;
                          if ((unint64_t)v628 < v1602)
                            goto LABEL_955;
                        }
                        if ((unint64_t)v628 >= v1598)
                          break;
                        if (*(unsigned __int16 *)v625 == *(unsigned __int16 *)v628)
                        {
                          v628 += 2;
                          v625 = (_DWORD *)((char *)v625 + 2);
                        }
                        if ((unint64_t)v628 < v1569)
                          goto LABEL_963;
LABEL_965:
                        v627 = v628 - v624 + v622;
                        if (v627 <= v395)
                        {
LABEL_953:
                          v14 = v1612;
                          goto LABEL_972;
                        }
LABEL_966:
                        if (v627 > v391 - v380)
                          v391 = v380 + v627;
                        v14 = v1612;
                        v629 = &v1612[2 * v372];
                        *v629 = v620 - v380;
                        v629[1] = v627;
                        ++v372;
                        v630 = v627 > 0x1000 || &v324[v627] == (unsigned __int8 *)v1569;
                        v395 = v627;
                        if (v630)
                          goto LABEL_945;
LABEL_972:
                        v631 = (unsigned int *)(v381 + 8 * (v380 & v383));
                        if (*(unsigned __int8 *)(v623 + v627) >= v324[v627])
                        {
                          *v1560 = v380;
                          if (v380 <= v1548)
                          {
                            v1560 = &v1631;
LABEL_945:
                            *v1560 = 0;
                            *v390 = 0;
                            *(_DWORD *)(v5 + 36) = v391 - 8;
                            goto LABEL_879;
                          }
                          v617 = v627;
                          v1560 = (unsigned int *)(v381 + 8 * (v380 & v383));
                        }
                        else
                        {
                          *v390 = v380;
                          if (v380 <= v1548)
                          {
                            v390 = &v1631;
                            goto LABEL_945;
                          }
                          ++v631;
                          v618 = v627;
                          v390 = v631;
                        }
                        v294 = v619-- != 0;
                        if (v294)
                        {
                          v380 = *v631;
                          if (*v631 >= v389)
                            continue;
                        }
                        goto LABEL_945;
                      }
                      if ((unint64_t)v628 >= v1569)
                        goto LABEL_965;
LABEL_963:
                      if (*(unsigned __int8 *)v625 == *v628)
                        ++v628;
                      goto LABEL_965;
                    }
                    v638 = 0;
                    while (1)
                    {
                      v615 = &v1491[v638];
                      if ((unint64_t)&v1491[v638] >= v1619)
                        break;
                      v639 = *(_QWORD *)(v377 + v526 + 8 + v638);
                      v638 += 8;
                      v640 = *(_QWORD *)v615 ^ v639;
                      if (v640)
                      {
                        v614 = v638 + (__clz(__rbit64(v640)) >> 3);
                        v1497 = (_DWORD)v1608 - v377;
                        if (v614 < 3)
                          goto LABEL_944;
                        goto LABEL_938;
                      }
                    }
                    v612 = (_QWORD *)(v377 + v526 + v638 + 8);
                    if ((unint64_t)v615 >= v1602)
                    {
LABEL_929:
                      if ((unint64_t)v615 >= v1598)
                      {
                        if ((unint64_t)v615 >= v1569)
                          goto LABEL_937;
                      }
                      else
                      {
                        if (*(unsigned __int16 *)v612 == *(unsigned __int16 *)v615)
                        {
                          v615 += 2;
                          v612 = (_QWORD *)((char *)v612 + 2);
                        }
                        if ((unint64_t)v615 >= v1569)
                        {
LABEL_937:
                          v614 = v615 - (char *)v324;
                          v1497 = (_DWORD)v1608 - v377;
                          if (v614 < 3)
                            goto LABEL_944;
                          goto LABEL_938;
                        }
                      }
                      if (*(unsigned __int8 *)v612 == *v615)
                        ++v615;
                      goto LABEL_937;
                    }
                  }
                  if (*(_DWORD *)v612 == *(_DWORD *)v615)
                  {
                    v615 += 4;
                    v612 = (_QWORD *)((char *)v612 + 4);
                  }
                  goto LABEL_929;
                }
              }
              v400 = v1608 + 3;
              v401 = *(_QWORD *)v379 ^ *(_QWORD *)v399;
              v5 = a1;
              if (v401)
              {
                v402 = __clz(__rbit64(v401)) >> 3;
              }
              else
              {
                do
                {
                  v399 += 8;
                  v400 += 2;
                  if ((unint64_t)v400 >= v1619)
                    goto LABEL_561;
                  v403 = *(_QWORD *)v400 ^ *(_QWORD *)v399;
                }
                while (!v403);
                v402 = (char *)v400 + (__clz(__rbit64(v403)) >> 3) - v379;
              }
              v14 = v1612;
              v324 = v1608;
              v404 = v402 + 3;
              v405 = v404;
              if (v395 >= v404)
                goto LABEL_542;
LABEL_569:
              v407 = &v14[2 * v372];
              *v407 = v394 + ((int)(v1535 << 31) >> 31);
              v407[1] = v404;
              ++v372;
              if (v404 > v376)
              {
                LODWORD(v324) = (_DWORD)v1608;
                goto LABEL_879;
              }
              v324 = v1608;
              v395 = v405;
              if (&v1608[v405] != (unsigned __int8 *)v1569)
                goto LABEL_542;
LABEL_879:
              v1627 = v372;
              ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1628, (uint64_t)v14, &v1627, (_DWORD)v324 - (_DWORD)v1571, v9 - (_DWORD)v324);
              v572 = v1627;
              if (!v1627)
              {
LABEL_475:
                v318 = v1592;
                goto LABEL_476;
              }
              v573 = v1627 - 1;
              v266 = v14[2 * v573 + 1];
              if (v266 <= v1543 && v266 + v323 <= 0xFFF)
              {
                v574 = 0;
                v575 = v1624;
                while (1)
                {
                  v576 = &v14[2 * v574];
                  v577 = v1556;
                  if (v574)
                    v577 = *(v576 - 1) + 1;
                  v578 = v576[1];
                  if (v578 >= v577)
                    break;
LABEL_883:
                  if (++v574 == v572)
                    goto LABEL_475;
                }
                v579 = *v576;
                v580 = __clz(v579 + 1) ^ 0x1F;
                if (*(_DWORD *)(v5 + 160) == 1)
                {
                  v581 = v323 + v578;
                  while (1)
                  {
                    v583 = v578 + v323;
                    v584 = __clz(v578 - 2);
                    v585 = v1576
                         + v1586
                         + 4096
                         + ((v578 - 2) << 8 >> (v584 ^ 0x1F))
                         + (((v584 ^ 0x1F) + (_DWORD)v580) << 8);
                    if (v578 + v323 <= v317)
                    {
                      if (v585 >= *(_DWORD *)(v15 + 28 * v583))
                        goto LABEL_891;
                      goto LABEL_890;
                    }
                    v586 = v581 - (unint64_t)v317;
                    if (v586 >= 2)
                    {
                      v587 = (v586 & 0xFFFFFFFFFFFFFFFELL) + v317;
                      v588 = (_DWORD *)(v1621 + 28 * v317);
                      v589 = v586 & 0xFFFFFFFFFFFFFFFELL;
                      do
                      {
                        *(v588 - 7) = 0x40000000;
                        *v588 = 0x40000000;
                        v588 += 14;
                        v589 -= 2;
                      }
                      while (v589);
                      if (v586 == (v586 & 0xFFFFFFFFFFFFFFFELL))
                        goto LABEL_889;
                    }
                    else
                    {
                      v587 = v317;
                    }
                    v590 = v581 - v587;
                    v591 = (_DWORD *)(v21 + 28 * v587);
                    do
                    {
                      *v591 = 0x40000000;
                      v591 += 7;
                      --v590;
                    }
                    while (v590);
LABEL_889:
                    v317 = v581;
LABEL_890:
                    v582 = (signed int *)(v15 + 28 * v583);
                    v582[2] = v578;
                    v582[3] = v575;
                    *v582 = v585;
                    v582[1] = v579;
LABEL_891:
                    --v578;
                    --v581;
                    if (v578 < v577)
                      goto LABEL_883;
                  }
                }
                v593 = *(_QWORD *)(v5 + 96);
                v592 = *(_QWORD *)(v5 + 104);
                v594 = v1576 + v1586 + 51 + *(_DWORD *)(v5 + 156) + *(_DWORD *)(v5 + 152);
                v595 = v323 + v578;
                while (2)
                {
                  v597 = v578 - 3;
                  if (v578 - 3 < 0x80)
                    v598 = ZSTD_MLcode_ML_Code[v597];
                  else
                    v598 = 67 - __clz(v597);
                  v599 = v578 + v323;
                  v600 = *(_DWORD *)(v592 + 4 * v580) + 1;
                  v601 = __clz(v600) ^ 0x1F;
                  v602 = 4 * v598;
                  v603 = *(unsigned int *)((char *)ML_bits + v602);
                  LODWORD(v602) = *(_DWORD *)(v593 + v602) + 1;
                  v604 = __clz(v602) ^ 0x1F;
                  v605 = v594
                       - (v600 << 8 >> v601)
                       - ((_DWORD)v602 << 8 >> v604)
                       + (((_DWORD)v580 + v603 - v601 - v604) << 8);
                  if (v578 + v323 <= v317)
                  {
                    v575 = v1624;
                    if (v605 < *(_DWORD *)(v15 + 28 * v599))
                      goto LABEL_905;
                  }
                  else
                  {
                    v606 = v595 - (unint64_t)v317;
                    if (v606 < 2)
                    {
                      v607 = v317;
                      v575 = v1624;
                      goto LABEL_918;
                    }
                    v607 = (v606 & 0xFFFFFFFFFFFFFFFELL) + v317;
                    v608 = (_DWORD *)(v1621 + 28 * v317);
                    v609 = v606 & 0xFFFFFFFFFFFFFFFELL;
                    do
                    {
                      *(v608 - 7) = 0x40000000;
                      *v608 = 0x40000000;
                      v608 += 14;
                      v609 -= 2;
                    }
                    while (v609);
                    v21 = v15 + 28;
                    v575 = v1624;
                    if (v606 != (v606 & 0xFFFFFFFFFFFFFFFELL))
                    {
LABEL_918:
                      v610 = v595 - v607;
                      v611 = (_DWORD *)(v21 + 28 * v607);
                      do
                      {
                        *v611 = 0x40000000;
                        v611 += 7;
                        --v610;
                      }
                      while (v610);
                    }
                    v317 = v595;
LABEL_905:
                    v596 = (int *)(v15 + 28 * v599);
                    v596[2] = v578;
                    v596[3] = v575;
                    *v596 = v605;
                    v596[1] = v579;
                  }
                  --v578;
                  --v595;
                  if (v578 < v577)
                    goto LABEL_883;
                  continue;
                }
              }
              LODWORD(v261) = v1624;
              if (*v1541)
                v704 = 0;
              else
                v704 = *(_DWORD *)(v15 + 28 * v323 + 12);
              v7 = a2;
              v275 = v14[2 * v573];
              v708 = v323 - v704;
              if (v708 <= 0x1000)
                v274 = v708;
              else
                v274 = 0;
              v22 = v1596;
              if (!v266)
              {
LABEL_1087:
                v709 = v15 + 28 * v274;
                v1632 = *(_QWORD *)(v709 + 16);
                v650 = *(_DWORD *)(v709 + 24);
                goto LABEL_1016;
              }
LABEL_1002:
              v642 = (unsigned int *)(v15 + 28 * v274 + 16);
              if (v275 < 3)
              {
                if ((_DWORD)v261)
                  v647 = v275;
                else
                  v647 = v275 + 1;
                if (v647)
                {
                  if (v647 == 3)
                  {
                    v644 = *v642;
                    v646 = v644 - 1;
                  }
                  else
                  {
                    v646 = v642[v647];
                    v644 = *v642;
                  }
                  v658 = v647 > 1;
                  v649 = 2;
                  if (v658)
                    v649 = 1;
                  v643 = &v642[v649];
                }
                else
                {
                  v648 = *(_QWORD *)v642;
                  v643 = (unsigned int *)(v15 + 28 * v274 + 24);
                  v646 = v648;
                  v644 = HIDWORD(v648);
                }
              }
              else
              {
                v645 = *v642;
                v643 = (unsigned int *)(v15 + 28 * v274 + 20);
                v644 = v645;
                v646 = v275 - 2;
              }
              v650 = *v643;
              v1632 = v646 | (v644 << 32);
LABEL_1016:
              v1633 = v650;
              v651 = v274 + 1;
              v652 = v15 + 28 * (v274 + 1);
              *(_DWORD *)v652 = v1528;
              *(_DWORD *)(v652 + 4) = v275;
              *(_DWORD *)(v652 + 8) = v266;
              *(_DWORD *)(v652 + 12) = v261;
              *(_QWORD *)(v652 + 16) = v1634;
              *(_DWORD *)(v652 + 24) = v1635;
              v653 = v274;
              if (!v274)
              {
                v659 = 1;
                v660 = v1527;
                goto LABEL_1026;
              }
              do
              {
                v654 = (__int128 *)(v15 + 28 * v653);
                v655 = *((_DWORD *)v654 + 3) + *((_DWORD *)v654 + 2);
                v656 = (_OWORD *)(v15 + 28 * v274);
                v657 = *v654;
                *(_OWORD *)((char *)v656 + 12) = *(__int128 *)((char *)v654 + 12);
                *v656 = v657;
                --v274;
                v294 = v653 >= v655;
                v653 -= v655;
                v658 = v653 != 0 && v294;
                if (!v294)
                  v653 = 0;
              }
              while (v658);
              v659 = v274 + 1;
              v660 = v1527;
              if (v659 <= v651)
              {
                while (1)
                {
LABEL_1026:
                  while (1)
                  {
                    v663 = v659;
                    v665 = *(_DWORD *)(v15 + 28 * v659 + 8);
                    v664 = *(unsigned int *)(v15 + 28 * v659 + 12);
                    if (v665)
                      break;
                    v19 = &v22[v664];
                    v659 = v663 + 1;
                    if (v663 + 1 > v651)
                      goto LABEL_1022;
                  }
                  v666 = *(_DWORD *)(v15 + 28 * v663 + 4);
                  if (*(_DWORD *)(v5 + 176) != 2)
                  {
                    if ((_DWORD)v664)
                    {
                      v667 = *v660;
                      v668 = v22;
                      v669 = v664;
                      do
                      {
                        v670 = *v668++;
                        *(_DWORD *)(v667 + 4 * v670) += 2;
                        --v669;
                      }
                      while (v669);
                    }
                    *(_DWORD *)(v5 + 128) += 2 * v664;
                  }
                  v671 = v664 < 0x40 ? ZSTD_LLcode_LL_Code[v664] : 50 - __clz(v664);
                  ++*(_DWORD *)(*(_QWORD *)(v5 + 88) + 4 * v671);
                  ++*(_DWORD *)(v5 + 132);
                  v672 = v666 + 1;
                  v673 = __clz(v666 + 1);
                  ++*(_DWORD *)(*(_QWORD *)(v5 + 104) + 4 * (v673 ^ 0x1F));
                  ++*(_DWORD *)(v5 + 140);
                  v674 = v665 - 3;
                  v675 = (v665 - 3) < 0x80 ? ZSTD_MLcode_ML_Code[v674] : 67 - __clz(v674);
                  ++*(_DWORD *)(*(_QWORD *)(v5 + 96) + 4 * v675);
                  ++*(_DWORD *)(v5 + 136);
                  v676 = &v22[v664];
                  v677 = (char *)v7[3];
                  if ((unint64_t)&v22[v664] > v1563)
                    break;
                  *(_OWORD *)v677 = *(_OWORD *)v22;
                  v680 = v7[3];
                  if (v664 > 0x10)
                  {
                    v681 = (_OWORD *)(v680 + 16);
                    v682 = v680 + v664;
                    v683 = (__int128 *)(v22 + 16);
                    do
                    {
                      v684 = *v683++;
                      *v681++ = v684;
                    }
                    while ((unint64_t)v681 < v682);
LABEL_1071:
                    v7[3] += v664;
                    v691 = v7[1];
                    if (v664 >= 0x10000)
                    {
                      v702 = (unint64_t)(v691 - *v7) >> 3;
                      *((_DWORD *)v7 + 18) = 1;
                      *((_DWORD *)v7 + 19) = v702;
                    }
                    goto LABEL_1073;
                  }
                  v7[3] = v680 + v664;
                  v691 = v7[1];
LABEL_1073:
                  *(_WORD *)(v691 + 4) = v664;
                  *(_DWORD *)v691 = v672;
                  if (v674 >= 0x10000)
                  {
                    v703 = (unint64_t)(v691 - *v7) >> 3;
                    *((_DWORD *)v7 + 18) = 2;
                    *((_DWORD *)v7 + 19) = v703;
                  }
                  *(_WORD *)(v691 + 6) = v674;
                  v7[1] = v691 + 8;
                  v22 += (v665 + v664);
                  v19 = v22;
                  v659 = v663 + 1;
                  if (v663 + 1 > v651)
                    goto LABEL_1022;
                }
                if ((unint64_t)v22 <= v1563)
                {
                  v679 = &v677[v1563 - (_QWORD)v22];
                  v685 = v22;
                  v686 = (char *)v7[3];
                  do
                  {
                    v687 = *(_OWORD *)v685;
                    v685 += 16;
                    *(_OWORD *)v686 = v687;
                    v686 += 16;
                  }
                  while (v686 < v679);
                  v678 = (unsigned __int8 *)v1563;
                  if (v1563 >= (unint64_t)v676)
                    goto LABEL_1071;
                }
                else
                {
                  v678 = v22;
                  v679 = (char *)v7[3];
                  if (v22 >= v676)
                    goto LABEL_1071;
                }
                if ((unint64_t)v22 <= v1563)
                  v688 = (unsigned __int8 *)v1563;
                else
                  v688 = v22;
                v689 = &v22[v664] - v688;
                if (v689 < 8)
                {
                  v690 = v678;
                  goto LABEL_1070;
                }
                if ((unint64_t)(v677 - (char *)v22) < 0x20)
                {
                  v690 = v678;
                  goto LABEL_1070;
                }
                if (v689 >= 0x20)
                {
                  v692 = v689 & 0xFFFFFFFFFFFFFFE0;
                  v693 = (__int128 *)(v678 + 16);
                  v694 = &v677[v688 - v22 + 16];
                  v695 = v689 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v696 = *v693;
                    *((_OWORD *)v694 - 1) = *(v693 - 1);
                    *(_OWORD *)v694 = v696;
                    v693 += 2;
                    v694 += 32;
                    v695 -= 32;
                  }
                  while (v695);
                  if (v689 == v692)
                    goto LABEL_1071;
                  if ((v689 & 0x18) == 0)
                  {
                    v690 = &v678[v692];
                    v679 += v692;
                    goto LABEL_1070;
                  }
                }
                else
                {
                  v692 = 0;
                }
                v679 += v689 & 0xFFFFFFFFFFFFFFF8;
                v690 = &v678[v689 & 0xFFFFFFFFFFFFFFF8];
                v697 = &v678[v692];
                v698 = &v677[&v688[v692] - v22];
                v699 = v692 - (v689 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v700 = *(_QWORD *)v697;
                  v697 += 8;
                  *(_QWORD *)v698 = v700;
                  v698 += 8;
                  v699 += 8;
                }
                while (v699);
                if (v689 == (v689 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_1071;
                do
                {
LABEL_1070:
                  v701 = *v690++;
                  *v679++ = v701;
                }
                while (v690 < v676);
                goto LABEL_1071;
              }
              v19 = v1610;
LABEL_1022:
              if (*(_DWORD *)(v5 + 176) != 2)
              {
                v661 = *(_DWORD *)(v5 + 128) + 1;
                v662 = __clz(v661) ^ 0x1F;
                *(_DWORD *)(v5 + 144) = (v661 << 8 >> v662) + (v662 << 8);
              }
              v23 = *(_DWORD *)(v5 + 140) + 1;
              v24 = __clz(v23);
              v25 = vadd_s32(*(int32x2_t *)(v5 + 132), (int32x2_t)0x100000001);
              v26 = (int32x2_t)veor_s8((int8x8_t)vclz_s32(v25), (int8x8_t)0x1F0000001FLL);
              *(int32x2_t *)(v5 + 148) = vadd_s32(vshl_n_s32(v26, 8uLL), (int32x2_t)vshl_u32((uint32x2_t)vshl_n_s32(v25, 8uLL), (uint32x2_t)vneg_s32(v26)));
              *(_DWORD *)(v5 + 156) = (v23 << 8 >> (v24 ^ 0x1F)) + ((v24 ^ 0x1F) << 8);
              if ((unint64_t)v19 >= v1594)
                goto LABEL_1119;
            }
            else
            {
              v19 = v259 + 1;
              if ((unint64_t)(v259 + 1) >= v1594)
                goto LABEL_1119;
            }
          }
          v29 = 0;
          if (*(_DWORD *)(v5 + 212) >= 0xFFFu)
            v65 = 4095;
          else
            v65 = *(_DWORD *)(v5 + 212);
          v66 = *(_QWORD *)(v5 + 8);
          v67 = (_DWORD)v1610 - v66;
          v68 = -1 << (*(_DWORD *)(v5 + 196) - 1);
          v69 = ~v68;
          v70 = (_DWORD)v1610 - v66 + v68 + 1;
          if ((int)v1610 - (int)v66 < ~v68)
            v70 = 0;
          v1589 = v70;
          v71 = 1 << *(_DWORD *)(v5 + 192);
          if (v67 - *(_DWORD *)(v5 + 28) > v71 && *(_DWORD *)(v5 + 32) == 0)
            v73 = v67 - v71;
          else
            v73 = *(_DWORD *)(v5 + 28);
          if (v73 <= 1)
            v74 = 1;
          else
            v74 = v73;
          v1605 = v74;
          v75 = v67 - *(_DWORD *)(v5 + 24);
          v76 = v1632 - 1;
          v77 = (char *)(v1610 + 12);
          v1573 = *(_DWORD *)(v5 + 204);
          v78 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v1610) >> -(char)*(_DWORD *)(v5 + 200);
          v1583 = *(_QWORD *)(v5 + 48);
          v79 = *(_DWORD *)(v1583 + 4 * v78);
          v80 = (_DWORD)v1623 == 0;
          v81 = *(_QWORD *)(v5 + 64);
          v82 = (unsigned int *)(v81 + 8 * (v67 & ~v68));
          v83 = v82 + 1;
          v84 = v67 + 9;
          v1631 = 0;
          if ((_DWORD)v1623)
            v85 = 3;
          else
            v85 = 4;
          v86 = v1610 + 4;
          if ((_DWORD)v1623)
            v87 = 0;
          else
            v87 = -1;
          v88 = (v1556 - 1);
          while (1)
          {
            v89 = v76;
            if (v80 != 3)
              v89 = *((_DWORD *)&v1632 + v80);
            if (v89 - 1 >= v75)
            {
              v90 = 0;
              goto LABEL_126;
            }
            v90 = 0;
            if (v67 - v89 >= v73 && *(_DWORD *)v1610 == *(_DWORD *)&v1610[-v89])
              break;
LABEL_126:
            if (v88 < v90)
            {
              v96 = &v1612[2 * v29];
              *v96 = v80 + v87;
              v96[1] = v90;
              ++v29;
              if (v90 > v65 || (v88 = v90, &v1610[v90] == (unsigned __int8 *)v9))
              {
LABEL_429:
                v7 = a2;
                v14 = v1612;
LABEL_430:
                v22 = v1596;
                v19 = v1610;
                goto LABEL_431;
              }
            }
            if (++v80 >= v85)
            {
              *(_DWORD *)(v1583 + 4 * v78) = v67;
              if (v79 < v1605)
                goto LABEL_428;
              v99 = 0;
              v100 = 0;
              v101 = ~(-1 << v1573);
              v102 = v67 + 2;
              v103 = v1610 + 8;
              v104 = v66 + 8;
              v105 = v1589;
              while (1)
              {
                v106 = v100 >= v99 ? v99 : v100;
                v107 = v66 + v79;
                v108 = &v1610[v106];
                v109 = (_QWORD *)(v107 + v106);
                if (v1619 <= (unint64_t)&v1610[v106])
                  break;
                v110 = *(_QWORD *)v108 ^ *v109;
                if (v110)
                {
                  v111 = v1612;
                  v112 = (__clz(__rbit64(v110)) >> 3) + v106;
                  if (v112 <= v88)
                    goto LABEL_143;
                  goto LABEL_156;
                }
                v118 = (char *)v103 + v106;
                do
                {
                  v119 = &v118[v110];
                  if ((unint64_t)&v118[v110] >= v1619)
                  {
                    v114 = (unsigned __int8 *)v103 + v106 + v110;
                    v109 = (_QWORD *)(v104 + v106 + v79 + v110);
                    v105 = v1589;
                    v111 = v1612;
                    if ((unint64_t)v114 >= v1602)
                      goto LABEL_147;
                    goto LABEL_145;
                  }
                  v120 = *(_QWORD *)(v104 + v106 + v79 + v110);
                  v110 += 8;
                  v121 = *(_QWORD *)v119 ^ v120;
                  v5 = a1;
                }
                while (!v121);
                v111 = v1612;
                v105 = v1589;
                v112 = v110 + (__clz(__rbit64(v121)) >> 3) + v106;
                if (v112 <= v88)
                {
LABEL_143:
                  v113 = v1610;
                  goto LABEL_162;
                }
LABEL_156:
                if (v112 > v84 - v79)
                  v84 = v79 + v112;
                v115 = &v111[2 * v29];
                *v115 = v102 - v79;
                v115[1] = v112;
                ++v29;
                v113 = v1610;
                v116 = v112 > 0x1000 || &v1610[v112] == (unsigned __int8 *)v9;
                v88 = v112;
                if (v116)
                  goto LABEL_428;
LABEL_162:
                v117 = (unsigned int *)(v81 + 8 * (v79 & v69));
                if (*(unsigned __int8 *)(v107 + v112) >= *((unsigned __int8 *)v113 + v112))
                {
                  *v83 = v79;
                  if (v79 <= v105)
                  {
LABEL_427:
                    v83 = &v1631;
                    goto LABEL_428;
                  }
                  v99 = v112;
                  v83 = (unsigned int *)(v81 + 8 * (v79 & v69));
                }
                else
                {
                  *v82 = v79;
                  if (v79 <= v105)
                    goto LABEL_426;
                  ++v117;
                  v100 = v112;
                  v82 = v117;
                }
                v294 = v101-- != 0;
                if (v294)
                {
                  v79 = *v117;
                  if (*v117 >= v1605)
                    continue;
                }
                goto LABEL_428;
              }
              v114 = &v1610[v106];
              v111 = v1612;
              if ((unint64_t)v108 >= v1602)
                goto LABEL_147;
LABEL_145:
              if (*(_DWORD *)v109 == *(_DWORD *)v114)
              {
                v114 += 4;
                v109 = (_QWORD *)((char *)v109 + 4);
              }
LABEL_147:
              if ((unint64_t)v114 >= v1598)
              {
                if ((unint64_t)v114 >= v9)
                  goto LABEL_155;
              }
              else
              {
                if (*(unsigned __int16 *)v109 == *(unsigned __int16 *)v114)
                {
                  v114 += 2;
                  v109 = (_QWORD *)((char *)v109 + 2);
                }
                if ((unint64_t)v114 >= v9)
                {
LABEL_155:
                  v112 = v114 - v1610;
                  if (v114 - v1610 <= v88)
                    goto LABEL_143;
                  goto LABEL_156;
                }
              }
              if (*(unsigned __int8 *)v109 == *v114)
                ++v114;
              goto LABEL_155;
            }
          }
          v91 = -(uint64_t)v89;
          v92 = (char *)v86 - v89;
          if (v1619 <= (unint64_t)v86)
          {
            v95 = (char *)(v1610 + 4);
            if ((unint64_t)v86 >= v1602)
              goto LABEL_116;
          }
          else
          {
            v93 = *v86 ^ *(_QWORD *)v92;
            if (v93)
            {
              v94 = __clz(__rbit64(v93)) >> 3;
              goto LABEL_125;
            }
            while (1)
            {
              v95 = &v77[v93];
              if ((unint64_t)&v77[v93] >= v1619)
                break;
              v97 = *(_QWORD *)&v77[v91 + v93];
              v93 += 8;
              v98 = *(_QWORD *)v95 ^ v97;
              if (v98)
              {
                v94 = v93 + (__clz(__rbit64(v98)) >> 3);
                v5 = a1;
LABEL_125:
                v90 = v94 + 4;
                goto LABEL_126;
              }
            }
            v92 = &v95[v91];
            v5 = a1;
            if ((unint64_t)v95 >= v1602)
            {
LABEL_116:
              if ((unint64_t)v95 >= v1598)
              {
                if ((unint64_t)v95 >= v9)
                {
LABEL_124:
                  LODWORD(v94) = (_DWORD)v95 - (_DWORD)v86;
                  goto LABEL_125;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v92 == *(unsigned __int16 *)v95)
                {
                  v95 += 2;
                  v92 += 2;
                }
                if ((unint64_t)v95 >= v9)
                  goto LABEL_124;
              }
              if (*v92 == *v95)
                LODWORD(v95) = (_DWORD)v95 + 1;
              goto LABEL_124;
            }
          }
          if (*(_DWORD *)v92 == *(_DWORD *)v95)
          {
            v95 += 4;
            v92 += 4;
          }
          goto LABEL_116;
        }
LABEL_1119:
        v7[3] = v7[2];
        v7[1] = *v7;
        *((_DWORD *)v7 + 18) = 0;
        a5 = v1490;
        *(_QWORD *)(v5 + 8) -= v1490;
        v716 = *(_DWORD *)(v5 + 24) + v1490;
        *(_DWORD *)(v5 + 24) = v716;
        *(_DWORD *)(v5 + 28) = v716;
        *(_DWORD *)(v5 + 36) = v716;
        if (*(_DWORD *)(v5 + 176) != 2)
        {
          v717 = 0;
          v718 = *v1527;
          v719 = 0uLL;
          v720.i64[0] = -1;
          v720.i64[1] = -1;
          v721 = 0uLL;
          do
          {
            v722 = (int32x4_t *)(v718 + v717);
            v723 = vaddq_s32(vshlq_n_s32(*(int32x4_t *)(v718 + v717), 4uLL), v720);
            v724 = vaddq_s32(vshlq_n_s32(*(int32x4_t *)(v718 + v717 + 16), 4uLL), v720);
            *v722 = v723;
            v722[1] = v724;
            v719 = vaddq_s32(v723, v719);
            v721 = vaddq_s32(v724, v721);
            v717 += 32;
          }
          while (v717 != 1024);
          *(_DWORD *)(v5 + 128) = vaddvq_s32(vaddq_s32(v721, v719));
        }
        v725 = *(int32x4_t **)(v5 + 88);
        v726.i64[0] = -1;
        v726.i64[1] = -1;
        v727 = vaddq_s32(vshlq_n_s32(*v725, 4uLL), v726);
        v728 = vaddq_s32(vshlq_n_s32(v725[1], 4uLL), v726);
        *v725 = v727;
        v725[1] = v728;
        v729 = vaddq_s32(vshlq_n_s32(v725[2], 4uLL), v726);
        v730 = vaddq_s32(vshlq_n_s32(v725[3], 4uLL), v726);
        v725[2] = v729;
        v725[3] = v730;
        v731 = vaddq_s32(vshlq_n_s32(v725[4], 4uLL), v726);
        v732 = vaddq_s32(vshlq_n_s32(v725[5], 4uLL), v726);
        v725[4] = v731;
        v725[5] = v732;
        v733 = vaddq_s32(vshlq_n_s32(v725[6], 4uLL), v726);
        v734 = vaddq_s32(vshlq_n_s32(v725[7], 4uLL), v726);
        v725[6] = v733;
        v725[7] = v734;
        v735 = vaddq_s32(vshlq_n_s32(v725[8], 4uLL), v726);
        v725[8] = v735;
        *(_DWORD *)(v5 + 132) = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v735, v734), vaddq_s32(v733, v732)), vaddq_s32(vaddq_s32(v731, v730), vaddq_s32(v729, v728))), v727));
        v736 = *(int32x4_t **)(v5 + 96);
        v737 = vaddq_s32(vshlq_n_s32(*v736, 4uLL), v726);
        v738 = vaddq_s32(vshlq_n_s32(v736[1], 4uLL), v726);
        *v736 = v737;
        v736[1] = v738;
        v739 = vaddq_s32(vshlq_n_s32(v736[2], 4uLL), v726);
        v740 = vaddq_s32(vshlq_n_s32(v736[3], 4uLL), v726);
        v736[2] = v739;
        v736[3] = v740;
        v741 = vaddq_s32(vshlq_n_s32(v736[4], 4uLL), v726);
        v742 = vaddq_s32(vshlq_n_s32(v736[5], 4uLL), v726);
        v736[4] = v741;
        v736[5] = v742;
        v743 = vaddq_s32(vshlq_n_s32(v736[6], 4uLL), v726);
        v744 = vaddq_s32(vshlq_n_s32(v736[7], 4uLL), v726);
        v736[6] = v743;
        v736[7] = v744;
        v745 = vaddq_s32(vshlq_n_s32(v736[8], 4uLL), v726);
        v746 = vaddq_s32(vshlq_n_s32(v736[9], 4uLL), v726);
        v736[8] = v745;
        v736[9] = v746;
        v747 = vaddq_s32(vshlq_n_s32(v736[10], 4uLL), v726);
        v748 = vaddq_s32(vshlq_n_s32(v736[11], 4uLL), v726);
        v736[10] = v747;
        v736[11] = v748;
        v749 = 16 * v736[12].i32[0] - 1;
        v750 = v749
             + vaddvq_s32(vaddq_s32(vaddq_s32(v748, vaddq_s32(v746, vaddq_s32(v744, vaddq_s32(v742, vaddq_s32(v740, v738))))), vaddq_s32(v747, vaddq_s32(v745, vaddq_s32(v743, vaddq_s32(v741, vaddq_s32(v739, v737)))))));
        v751 = 16 * v736[12].i32[1] - 1;
        v736[12].i32[0] = v749;
        v736[12].i32[1] = v751;
        v752 = 16 * v736[12].i32[2] - 1;
        v753 = 16 * v736[12].i32[3] - 1;
        v736[12].i32[2] = v752;
        v736[12].i32[3] = v753;
        v754 = v753 + v752 + v751;
        v755 = 16 * v736[13].i32[0] - 1;
        v736[13].i32[0] = v755;
        *(_DWORD *)(v5 + 136) = v755 + v754 + v750;
        v756 = *(int32x4_t **)(v5 + 104);
        v757 = vaddq_s32(vshlq_n_s32(*v756, 4uLL), v726);
        v758 = vaddq_s32(vshlq_n_s32(v756[1], 4uLL), v726);
        v759 = vaddq_s32(vaddq_s32(vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v757.i8, 1), v757), vaddq_s32(vdupq_laneq_s32(v757, 2), vdupq_laneq_s32(v757, 3))), vaddq_s32(vaddq_s32(v758, vdupq_lane_s32(*(int32x2_t *)v758.i8, 1)), vdupq_laneq_s32(v758, 2)));
        *v756 = v757;
        v756[1] = v758;
        v760 = vdupq_laneq_s32(v758, 3);
        v761 = vaddq_s32(vshlq_n_s32(v756[2], 4uLL), v726);
        v762 = vaddq_s32(vshlq_n_s32(v756[3], 4uLL), v726);
        v756[2] = v761;
        v756[3] = v762;
        v763 = vaddq_s32(vaddq_s32(v759, vaddq_s32(vaddq_s32(vaddq_s32(v760, v761), vdupq_lane_s32(*(int32x2_t *)v761.i8, 1)), vdupq_laneq_s32(v761, 2))), vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vdupq_laneq_s32(v761, 3), v762), vdupq_lane_s32(*(int32x2_t *)v762.i8, 1)), vdupq_laneq_s32(v762, 2)), vdupq_laneq_s32(v762, 3)));
        v764 = vaddq_s32(vshlq_n_s32(v756[4], 4uLL), v726);
        v765 = vaddq_s32(vshlq_n_s32(v756[5], 4uLL), v726);
        v766 = vaddq_s32(v763, vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v764, vdupq_lane_s32(*(int32x2_t *)v764.i8, 1)), vdupq_laneq_s32(v764, 2)), vdupq_laneq_s32(v764, 3)), v765), vdupq_lane_s32(*(int32x2_t *)v765.i8, 1)));
        v756[4] = v764;
        v756[5] = v765;
        v767 = vaddq_s32(vdupq_laneq_s32(v765, 2), vdupq_laneq_s32(v765, 3));
        v768 = vaddq_s32(vshlq_n_s32(v756[6], 4uLL), v726);
        v769 = vaddq_s32(vshlq_n_s32(v756[7], 4uLL), v726);
        v756[6] = v768;
        v756[7] = v769;
        *(_DWORD *)(v5 + 140) = vaddq_s32(vaddq_s32(v766, vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v767, v768), vdupq_lane_s32(*(int32x2_t *)v768.i8, 1)), vdupq_laneq_s32(v768, 2)), vdupq_laneq_s32(v768, 3)), v769)), vaddq_s32(vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v769.i8, 1), vdupq_laneq_s32(v769, 2)), vdupq_laneq_s32(v769, 3))).u32[0];
        v6 = *(_QWORD *)(v5 + 8);
      }
    }
  }
  v1570 = (char **)(v5 + 80);
  v770 = &v1571[a5];
  v1593 = (unint64_t)&v1571[a5 - 8];
  v771 = (unsigned __int8 *)(v6 + *(unsigned int *)(v5 + 24));
  v772 = *(_DWORD *)(v5 + 212);
  if (v772 >= 0xFFF)
    v772 = 4095;
  v1540 = v772;
  if (*(_DWORD *)(v5 + 208) == 3)
    v773 = 3;
  else
    v773 = 4;
  v1542 = v773;
  v774 = *(_DWORD *)(v5 + 36);
  v775 = *(unsigned int **)(v5 + 120);
  v1611 = *(_DWORD **)(v5 + 112);
  v1635 = 0;
  v1634 = 0;
  v1629 = 0u;
  memset(v1630, 0, sizeof(v1630));
  v1628 = 0u;
  v776 = *(__int128 **)(v5 + 224);
  if (v776)
  {
    v777 = v776[1];
    v1628 = *v776;
    v1629 = v777;
    *(_QWORD *)v1630 = *((_QWORD *)v776 + 4);
  }
  else
  {
    *(_QWORD *)v1630 = 0;
    v1628 = 0uLL;
    v1629 = 0uLL;
  }
  *(_QWORD *)&v1630[12] = 0;
  *(_DWORD *)&v1630[8] = 0;
  v778 = a5;
  ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t *)&v1628, 0, a5);
  v779 = v1571;
  ZSTD_rescaleFreqs(v1570, v1571, v778, 2);
  if (v771 == v1571)
    v779 = v1571 + 1;
  if ((unint64_t)v779 < v1593)
  {
    v1498 = v774;
    v1526 = 0;
    v1620 = (unint64_t)(v770 - 7);
    v1597 = (unint64_t)(v770 - 1);
    v1599 = (unint64_t)(v770 - 3);
    v780 = (unint64_t)(v770 - 32);
    v781 = (v1542 - 1) | 1;
    v1622 = v775 + 14;
    v1494 = v1542 - v781;
    v1496 = &v775[7 * v781];
    v1603 = (unint64_t)v770;
    v782 = v1571;
    v783 = v1611;
    v1587 = v770 - 32;
    while (1)
    {
      v1625 = (_DWORD)v779 - (_DWORD)v782;
      v1631 = 0;
      v788 = *(_QWORD *)(v5 + 8);
      v789 = v779;
      v790 = *(unsigned int *)(v5 + 36);
      v1595 = v782;
      v1609 = v789;
      if (v788 + v790 > (unint64_t)v789)
      {
        v791 = 0;
        v779 = v789;
        goto LABEL_1555;
      }
      v792 = *(_DWORD *)(v5 + 208);
      for (k = (_DWORD)v789 - v788;
            v790 < k;
      *(_DWORD *)(v5 + 36) = k;
      if ((v792 - 6) < 2)
        break;
      v779 = v1609;
      if (v792 == 5)
      {
        v791 = 0;
        if (*(_DWORD *)(v5 + 212) >= 0xFFFu)
          v893 = 4095;
        else
          v893 = *(_DWORD *)(v5 + 212);
        v894 = *(_QWORD *)(v5 + 8);
        v895 = (_DWORD)v1609 - v894;
        v896 = -1 << (*(_DWORD *)(v5 + 196) - 1);
        v897 = ~v896;
        v898 = (_DWORD)v1609 - v894 + v896 + 1;
        if ((int)v1609 - (int)v894 < ~v896)
          v898 = 0;
        v1615 = v898;
        v899 = 1 << *(_DWORD *)(v5 + 192);
        if (v895 - *(_DWORD *)(v5 + 28) > v899 && *(_DWORD *)(v5 + 32) == 0)
          v901 = v895 - v899;
        else
          v901 = *(_DWORD *)(v5 + 28);
        if (v901 <= 1)
          v902 = 1;
        else
          v902 = v901;
        v903 = v895 - *(_DWORD *)(v5 + 24);
        v904 = (char *)(v1609 + 12);
        v1566 = *(_DWORD *)(v5 + 204);
        v905 = (0xCF1BBCDCBB000000 * *(_QWORD *)v1609) >> -(char)*(_DWORD *)(v5 + 200);
        v1579 = *(_QWORD *)(v5 + 48);
        v906 = *(_DWORD *)(v1579 + 4 * v905);
        v907 = v1625 == 0;
        v908 = *(_QWORD *)(v5 + 64);
        v846 = (unsigned int *)(v908 + 8 * (v895 & ~v896));
        v847 = v846 + 1;
        v848 = v895 + 9;
        LODWORD(v1632) = 0;
        if (v1625)
          v909 = 3;
        else
          v909 = 4;
        v910 = v1609 + 4;
        if (v1625)
          v911 = 0;
        else
          v911 = -1;
        v912 = (v1542 - 1);
        v783 = v1611;
        while (1)
        {
          if (v907 == 3)
          {
            v913 = *(_DWORD *)a3 - 1;
            if (*(_DWORD *)a3 - 2 >= v903)
              goto LABEL_1319;
          }
          else
          {
            v913 = *((_DWORD *)a3 + v907);
            if (v913 - 1 >= v903)
              goto LABEL_1319;
          }
          v914 = v779;
          v915 = *(_DWORD *)v779;
          v916 = *(_DWORD *)&v914[-v913];
          if (v895 - v913 < v901 || v915 != v916)
          {
            v5 = a1;
            v779 = v1609;
            goto LABEL_1319;
          }
          v918 = -(uint64_t)v913;
          v919 = (char *)v910 - v913;
          v5 = a1;
          if (v1620 <= (unint64_t)v910)
            break;
          v920 = *v910 ^ *(_QWORD *)v919;
          if (v920)
          {
            v779 = v1609;
            v921 = (__clz(__rbit64(v920)) >> 3) + 4;
            v922 = v921;
            if (v912 < v921)
              goto LABEL_1345;
            goto LABEL_1319;
          }
          do
          {
            v923 = &v904[v920];
            if ((unint64_t)&v904[v920] >= v1620)
            {
              v919 = &v923[v918];
              v5 = a1;
              if ((unint64_t)v923 >= v1599)
                goto LABEL_1336;
              goto LABEL_1334;
            }
            v926 = *(_QWORD *)&v904[v918 + v920];
            v920 += 8;
            v927 = *(_QWORD *)v923 ^ v926;
          }
          while (!v927);
          v928 = __clz(__rbit64(v927));
          v5 = a1;
          v779 = v1609;
          v783 = v1611;
          v921 = v920 + (v928 >> 3) + 4;
          v922 = v921;
          if (v912 < v921)
          {
LABEL_1345:
            v925 = &v783[2 * v791];
            *v925 = v907 + v911;
            v925[1] = v921;
            ++v791;
            if (v921 > v893)
              goto LABEL_1410;
            v779 = v1609;
            v912 = v922;
            if (&v1609[v922] == (unsigned __int8 *)v1603)
              goto LABEL_1554;
          }
LABEL_1319:
          if (++v907 >= v909)
          {
            *(_DWORD *)(v1579 + 4 * v905) = v895;
            if (v906 < v902)
              goto LABEL_1552;
            v974 = 0;
            v975 = 0;
            v976 = ~(-1 << v1566);
            v977 = v895 + 2;
            v978 = v779 + 8;
            v979 = v894 + 8;
LABEL_1423:
            if (v975 >= v974)
              v980 = v974;
            else
              v980 = v975;
            v981 = v894 + v906;
            v982 = (char *)&v779[v980];
            v983 = (_QWORD *)(v981 + v980);
            if (v1620 <= (unint64_t)&v779[v980])
            {
              v987 = &v779[v980];
              v783 = v1611;
              if ((unint64_t)v982 >= v1599)
                goto LABEL_1433;
            }
            else
            {
              v984 = *(_QWORD *)v982 ^ *v983;
              if (v984)
              {
                v783 = v1611;
                v985 = (unsigned __int8 *)v1603;
                v986 = (__clz(__rbit64(v984)) >> 3) + v980;
                if (v986 <= v912)
                  goto LABEL_1429;
                goto LABEL_1442;
              }
              v991 = 0;
              v992 = (char *)v978 + v980;
              while (1)
              {
                v993 = &v992[v991];
                if ((unint64_t)&v992[v991] >= v1620)
                  break;
                v994 = *(_QWORD *)(v979 + v980 + v906 + v991);
                v991 += 8;
                v995 = *(_QWORD *)v993 ^ v994;
                v5 = a1;
                if (v995)
                {
                  v996 = v991 + (__clz(__rbit64(v995)) >> 3);
                  v783 = v1611;
                  v985 = (unsigned __int8 *)v1603;
                  v986 = v996 + v980;
                  if (v986 <= v912)
                  {
LABEL_1429:
                    v882 = v1609;
                    goto LABEL_1448;
                  }
LABEL_1442:
                  if (v986 > v848 - v906)
                    v848 = v906 + v986;
                  v988 = &v783[2 * v791];
                  *v988 = v977 - v906;
                  v988[1] = v986;
                  ++v791;
                  v882 = v1609;
                  v989 = v986 > 0x1000 || &v1609[v986] == v985;
                  v912 = v986;
                  if (v989)
                    goto LABEL_1549;
LABEL_1448:
                  v990 = (unsigned int *)(v908 + 8 * (v906 & v897));
                  v779 = v882;
                  if (*(unsigned __int8 *)(v981 + v986) < v882[v986])
                  {
                    *v846 = v906;
                    if (v906 <= v1615)
                      goto LABEL_1550;
                    ++v990;
                    v975 = v986;
                    v846 = v990;
                    v294 = v976-- != 0;
                    if (!v294)
                      goto LABEL_1552;
LABEL_1422:
                    v906 = *v990;
                    if (*v990 < v902)
                      goto LABEL_1552;
                    goto LABEL_1423;
                  }
                  *v847 = v906;
                  if (v906 > v1615)
                  {
                    v974 = v986;
                    v847 = (unsigned int *)(v908 + 8 * (v906 & v897));
                    v294 = v976-- != 0;
                    if (!v294)
                      goto LABEL_1552;
                    goto LABEL_1422;
                  }
LABEL_1551:
                  v847 = (unsigned int *)&v1632;
LABEL_1552:
                  *v847 = 0;
                  *v846 = 0;
                  v997 = v848 - 8;
                  goto LABEL_1553;
                }
              }
              v987 = (unsigned __int8 *)v978 + v980 + v991;
              v983 = (_QWORD *)(v979 + v980 + v906 + v991);
              v783 = v1611;
              if ((unint64_t)v987 >= v1599)
              {
LABEL_1433:
                if ((unint64_t)v987 >= v1597)
                {
                  if ((unint64_t)v987 >= v1603)
                    goto LABEL_1441;
                }
                else
                {
                  if (*(unsigned __int16 *)v983 == *(unsigned __int16 *)v987)
                  {
                    v987 += 2;
                    v983 = (_QWORD *)((char *)v983 + 2);
                  }
                  if ((unint64_t)v987 >= v1603)
                  {
LABEL_1441:
                    v985 = (unsigned __int8 *)v1603;
                    v986 = v987 - (unsigned __int8 *)v982 + v980;
                    if (v986 <= v912)
                      goto LABEL_1429;
                    goto LABEL_1442;
                  }
                }
                if (*(unsigned __int8 *)v983 == *v987)
                  ++v987;
                goto LABEL_1441;
              }
            }
            if (*(_DWORD *)v983 == *(_DWORD *)v987)
            {
              v987 += 4;
              v983 = (_QWORD *)((char *)v983 + 4);
            }
            goto LABEL_1433;
          }
        }
        v923 = (char *)(v1609 + 4);
        if ((unint64_t)v910 >= v1599)
          goto LABEL_1336;
LABEL_1334:
        if (*(_DWORD *)v919 == *(_DWORD *)v923)
        {
          v923 += 4;
          v919 += 4;
        }
LABEL_1336:
        if ((unint64_t)v923 >= v1597)
        {
          if ((unint64_t)v923 >= v1603)
            goto LABEL_1344;
        }
        else
        {
          if (*(unsigned __int16 *)v919 == *(unsigned __int16 *)v923)
          {
            v923 += 2;
            v919 += 2;
          }
          if ((unint64_t)v923 >= v1603)
          {
LABEL_1344:
            v924 = (_DWORD)v923 - (_DWORD)v910;
            v779 = v1609;
            v783 = v1611;
            v921 = v924 + 4;
            v922 = v921;
            if (v912 < v921)
              goto LABEL_1345;
            goto LABEL_1319;
          }
        }
        if (*v919 == *v923)
          LODWORD(v923) = (_DWORD)v923 + 1;
        goto LABEL_1344;
      }
      v783 = v1611;
      v791 = 0;
      if (v792 != 3)
      {
        if (*(_DWORD *)(v5 + 212) >= 0xFFFu)
          v929 = 4095;
        else
          v929 = *(_DWORD *)(v5 + 212);
        v930 = *(_QWORD *)(v5 + 8);
        v931 = (_DWORD)v1609 - v930;
        v932 = -1 << (*(_DWORD *)(v5 + 196) - 1);
        v933 = ~v932;
        v934 = (_DWORD)v1609 - v930 + v932 + 1;
        if ((int)v1609 - (int)v930 < ~v932)
          v934 = 0;
        v1616 = v934;
        v935 = 1 << *(_DWORD *)(v5 + 192);
        if (v931 - *(_DWORD *)(v5 + 28) > v935 && *(_DWORD *)(v5 + 32) == 0)
          v937 = v931 - v935;
        else
          v937 = *(_DWORD *)(v5 + 28);
        if (v937 <= 1)
          v938 = 1;
        else
          v938 = v937;
        v939 = v931 - *(_DWORD *)(v5 + 24);
        v940 = (char *)(v1609 + 12);
        v1567 = *(_DWORD *)(v5 + 204);
        v941 = (-1640531535 * *(_DWORD *)v1609) >> -(char)*(_DWORD *)(v5 + 200);
        v1580 = *(_QWORD *)(v5 + 48);
        v942 = *(_DWORD *)(v1580 + 4 * v941);
        v943 = v1625 == 0;
        v944 = *(_QWORD *)(v5 + 64);
        v945 = (unsigned int *)(v944 + 8 * (v931 & ~v932));
        v946 = v945 + 1;
        v947 = v931 + 9;
        LODWORD(v1632) = 0;
        if (v1625)
          v948 = 3;
        else
          v948 = 4;
        v949 = v1609 + 4;
        if (v1625)
          v950 = 0;
        else
          v950 = -1;
        v951 = (v1542 - 1);
        while (1)
        {
          if (v943 == 3)
          {
            v952 = *(_DWORD *)a3 - 1;
            if (*(_DWORD *)a3 - 2 >= v939)
              goto LABEL_1375;
          }
          else
          {
            v952 = *((_DWORD *)a3 + v943);
            if (v952 - 1 >= v939)
              goto LABEL_1375;
          }
          v953 = v779;
          v954 = *(_DWORD *)v779;
          v955 = *(_DWORD *)&v953[-v952];
          if (v931 - v952 < v937 || v954 != v955)
          {
            v5 = a1;
            v779 = v1609;
            goto LABEL_1375;
          }
          v957 = -(uint64_t)v952;
          v958 = (char *)v949 - v952;
          v5 = a1;
          if (v1620 <= (unint64_t)v949)
            break;
          v959 = *v949 ^ *(_QWORD *)v958;
          if (v959)
          {
            v779 = v1609;
            v960 = (__clz(__rbit64(v959)) >> 3) + 4;
            v961 = v960;
            if (v951 < v960)
              goto LABEL_1401;
            goto LABEL_1375;
          }
          while (1)
          {
            v962 = &v940[v959];
            if ((unint64_t)&v940[v959] >= v1620)
              break;
            v965 = *(_QWORD *)&v940[v957 + v959];
            v959 += 8;
            v966 = *(_QWORD *)v962 ^ v965;
            if (v966)
            {
              v967 = __clz(__rbit64(v966));
              v5 = a1;
              v779 = v1609;
              v783 = v1611;
              v960 = v959 + (v967 >> 3) + 4;
              v961 = v960;
              if (v951 >= v960)
                goto LABEL_1375;
LABEL_1401:
              v964 = &v783[2 * v791];
              *v964 = v943 + v950;
              v964[1] = v960;
              ++v791;
              if (v960 <= v929)
              {
                v779 = v1609;
                v951 = v961;
                if (&v1609[v961] == (unsigned __int8 *)v1603)
                  goto LABEL_1554;
                goto LABEL_1375;
              }
LABEL_1410:
              v779 = v1609;
              goto LABEL_1554;
            }
          }
          v958 = &v962[v957];
          v5 = a1;
          if ((unint64_t)v962 < v1599)
            goto LABEL_1390;
LABEL_1392:
          if ((unint64_t)v962 >= v1597)
          {
            if ((unint64_t)v962 >= v1603)
              goto LABEL_1400;
LABEL_1398:
            if (*v958 == *v962)
              LODWORD(v962) = (_DWORD)v962 + 1;
            goto LABEL_1400;
          }
          if (*(unsigned __int16 *)v958 == *(unsigned __int16 *)v962)
          {
            v962 += 2;
            v958 += 2;
          }
          if ((unint64_t)v962 < v1603)
            goto LABEL_1398;
LABEL_1400:
          v963 = (_DWORD)v962 - (_DWORD)v949;
          v779 = v1609;
          v783 = v1611;
          v960 = v963 + 4;
          v961 = v960;
          if (v951 < v960)
            goto LABEL_1401;
LABEL_1375:
          if (++v943 >= v948)
          {
            *(_DWORD *)(v1580 + 4 * v941) = v931;
            if (v942 < v938)
              goto LABEL_1463;
            v998 = 0;
            v999 = 0;
            v1000 = ~(-1 << v1567);
            v1001 = v931 + 2;
            v1002 = v779 + 8;
            v1003 = v930 + 8;
            while (1)
            {
              v1004 = v999 >= v998 ? v998 : v999;
              v1005 = v930 + v942;
              v1006 = (char *)&v779[v1004];
              v1007 = (_QWORD *)(v1005 + v1004);
              if (v1620 <= (unint64_t)&v779[v1004])
                break;
              v1008 = *(_QWORD *)v1006 ^ *v1007;
              if (v1008)
              {
                v783 = v1611;
                v1009 = (unsigned __int8 *)v1603;
                v1010 = (__clz(__rbit64(v1008)) >> 3) + v1004;
                if (v1010 <= v951)
                  goto LABEL_1475;
                goto LABEL_1488;
              }
              v1016 = 0;
              v1017 = (char *)v1002 + v1004;
              do
              {
                v1018 = &v1017[v1016];
                if ((unint64_t)&v1017[v1016] >= v1620)
                {
                  v1012 = (unsigned __int8 *)v1002 + v1004 + v1016;
                  v1007 = (_QWORD *)(v1003 + v1004 + v942 + v1016);
                  v783 = v1611;
                  if ((unint64_t)v1012 >= v1599)
                    goto LABEL_1479;
                  goto LABEL_1477;
                }
                v1019 = *(_QWORD *)(v1003 + v1004 + v942 + v1016);
                v1016 += 8;
                v1020 = *(_QWORD *)v1018 ^ v1019;
                v5 = a1;
              }
              while (!v1020);
              v1021 = v1016 + (__clz(__rbit64(v1020)) >> 3);
              v783 = v1611;
              v1009 = (unsigned __int8 *)v1603;
              v1010 = v1021 + v1004;
              if (v1010 <= v951)
              {
LABEL_1475:
                v1011 = v1609;
                goto LABEL_1494;
              }
LABEL_1488:
              if (v1010 > v947 - v942)
                v947 = v942 + v1010;
              v1013 = &v783[2 * v791];
              *v1013 = v1001 - v942;
              v1013[1] = v1010;
              ++v791;
              v1011 = v1609;
              v1014 = v1010 > 0x1000 || &v1609[v1010] == v1009;
              v951 = v1010;
              if (v1014)
              {
                v779 = v1609;
                goto LABEL_1463;
              }
LABEL_1494:
              v1015 = (unsigned int *)(v944 + 8 * (v942 & v933));
              v779 = v1011;
              if (*(unsigned __int8 *)(v1005 + v1010) >= v1011[v1010])
              {
                *v946 = v942;
                if (v942 <= v1616)
                {
                  v946 = (unsigned int *)&v1632;
                  goto LABEL_1463;
                }
                v998 = v1010;
                v946 = (unsigned int *)(v944 + 8 * (v942 & v933));
                v294 = v1000-- != 0;
                if (v294)
                  goto LABEL_1468;
LABEL_1463:
                *v946 = 0;
                *v945 = 0;
                v997 = v947 - 8;
LABEL_1553:
                *(_DWORD *)(v5 + 36) = v997;
                goto LABEL_1554;
              }
              *v945 = v942;
              if (v942 <= v1616)
              {
                v945 = (unsigned int *)&v1632;
                goto LABEL_1463;
              }
              ++v1015;
              v999 = v1010;
              v945 = v1015;
              v294 = v1000-- != 0;
              if (!v294)
                goto LABEL_1463;
LABEL_1468:
              v942 = *v1015;
              if (*v1015 < v938)
                goto LABEL_1463;
            }
            v1012 = &v779[v1004];
            v783 = v1611;
            if ((unint64_t)v1006 >= v1599)
              goto LABEL_1479;
LABEL_1477:
            if (*(_DWORD *)v1007 == *(_DWORD *)v1012)
            {
              v1012 += 4;
              v1007 = (_QWORD *)((char *)v1007 + 4);
            }
LABEL_1479:
            if ((unint64_t)v1012 >= v1597)
            {
              if ((unint64_t)v1012 >= v1603)
                goto LABEL_1487;
            }
            else
            {
              if (*(unsigned __int16 *)v1007 == *(unsigned __int16 *)v1012)
              {
                v1012 += 2;
                v1007 = (_QWORD *)((char *)v1007 + 2);
              }
              if ((unint64_t)v1012 >= v1603)
              {
LABEL_1487:
                v1009 = (unsigned __int8 *)v1603;
                v1010 = v1012 - (unsigned __int8 *)v1006 + v1004;
                if (v1010 <= v951)
                  goto LABEL_1475;
                goto LABEL_1488;
              }
            }
            if (*(unsigned __int8 *)v1007 == *v1012)
              ++v1012;
            goto LABEL_1487;
          }
        }
        v962 = (char *)(v1609 + 4);
        if ((unint64_t)v949 >= v1599)
          goto LABEL_1392;
LABEL_1390:
        if (*(_DWORD *)v958 == *(_DWORD *)v962)
        {
          v962 += 4;
          v958 += 4;
        }
        goto LABEL_1392;
      }
      if (*(_DWORD *)(v5 + 212) >= 0xFFFu)
        v794 = 4095;
      else
        v794 = *(_DWORD *)(v5 + 212);
      v795 = *(_QWORD *)(v5 + 8);
      v796 = (_DWORD)v1609 - v795;
      v797 = -1 << (*(_DWORD *)(v5 + 196) - 1);
      v798 = ~v797;
      v799 = (_DWORD)v1609 - v795 + v797 + 1;
      if ((int)v1609 - (int)v795 < ~v797)
        v799 = 0;
      v800 = 1 << *(_DWORD *)(v5 + 192);
      if (v796 - *(_DWORD *)(v5 + 28) > v800 && *(_DWORD *)(v5 + 32) == 0)
        v802 = v796 - v800;
      else
        v802 = *(_DWORD *)(v5 + 28);
      if (v802 <= 1)
        v803 = 1;
      else
        v803 = v802;
      v804 = v796 - *(_DWORD *)(v5 + 24);
      v805 = (char *)(v1609 + 11);
      v1564 = *(_DWORD *)(v5 + 204);
      v1613 = *(_QWORD *)(v5 + 48);
      v1577 = (-1640531535 * *(_DWORD *)v1609) >> -(char)*(_DWORD *)(v5 + 200);
      v806 = *(_DWORD *)(v1613 + 4 * v1577);
      v807 = v1625 == 0;
      v808 = *(_QWORD *)(v5 + 64);
      v809 = (unsigned int *)(v808 + 8 * (v796 & ~v797));
      v810 = v809 + 1;
      v811 = v796 + 9;
      LODWORD(v1632) = 0;
      if (v1625)
        v812 = 3;
      else
        v812 = 4;
      v813 = v1609 + 3;
      if (v1625)
        v814 = 0;
      else
        v814 = -1;
      v815 = (v1542 - 1);
      do
      {
        if (v807 == 3)
        {
          v816 = *(_DWORD *)a3 - 1;
          if (*(_DWORD *)a3 - 2 >= v804)
            goto LABEL_1165;
        }
        else
        {
          v816 = *((_DWORD *)a3 + v807);
          if (v816 - 1 >= v804)
            goto LABEL_1165;
        }
        v817 = (*(_DWORD *)&v779[-v816] ^ *(_DWORD *)v779) & 0xFFFFFF;
        if (v796 - v816 < v802 || v817 != 0)
        {
          v5 = a1;
          v779 = v1609;
          goto LABEL_1165;
        }
        v819 = -(uint64_t)v816;
        v820 = (char *)v813 - v816;
        if (v1620 <= (unint64_t)v813)
        {
          v824 = (char *)(v1609 + 3);
          v5 = a1;
          if ((unint64_t)v813 < v1599)
          {
LABEL_1180:
            if (*(_DWORD *)v820 == *(_DWORD *)v824)
            {
              v824 += 4;
              v820 += 4;
            }
          }
          goto LABEL_1182;
        }
        v821 = *v813 ^ *(_QWORD *)v820;
        v5 = a1;
        if (!v821)
        {
          while (1)
          {
            v824 = &v805[v821];
            if ((unint64_t)&v805[v821] >= v1620)
              break;
            v827 = *(_QWORD *)&v805[v819 + v821];
            v821 += 8;
            v828 = *(_QWORD *)v824 ^ v827;
            if (v828)
            {
              v829 = __clz(__rbit64(v828));
              v5 = a1;
              v779 = v1609;
              v783 = v1611;
              v822 = v821 + (v829 >> 3) + 3;
              v823 = v822;
              if (v815 < v822)
              {
LABEL_1191:
                v826 = &v783[2 * v791];
                *v826 = v807 + v814;
                v826[1] = v822;
                ++v791;
                if (v822 > v794)
                {
                  v780 = (unint64_t)v1587;
                  v782 = v1595;
                  v779 = v1609;
                  goto LABEL_1555;
                }
                v779 = v1609;
                v815 = v823;
                if (&v1609[v823] == (unsigned __int8 *)v1603)
                {
LABEL_1554:
                  v780 = (unint64_t)v1587;
                  v782 = v1595;
                  goto LABEL_1555;
                }
              }
              goto LABEL_1165;
            }
          }
          v820 = &v824[v819];
          v5 = a1;
          if ((unint64_t)v824 < v1599)
            goto LABEL_1180;
LABEL_1182:
          if ((unint64_t)v824 >= v1597)
          {
            if ((unint64_t)v824 >= v1603)
              goto LABEL_1190;
          }
          else
          {
            if (*(unsigned __int16 *)v820 == *(unsigned __int16 *)v824)
            {
              v824 += 2;
              v820 += 2;
            }
            if ((unint64_t)v824 >= v1603)
            {
LABEL_1190:
              v825 = (_DWORD)v824 - (_DWORD)v813;
              v779 = v1609;
              v783 = v1611;
              v822 = v825 + 3;
              v823 = v822;
              if (v815 < v822)
                goto LABEL_1191;
              goto LABEL_1165;
            }
          }
          if (*v820 == *v824)
            LODWORD(v824) = (_DWORD)v824 + 1;
          goto LABEL_1190;
        }
        v779 = v1609;
        v822 = (__clz(__rbit64(v821)) >> 3) + 3;
        v823 = v822;
        if (v815 < v822)
          goto LABEL_1191;
LABEL_1165:
        ++v807;
      }
      while (v807 < v812);
      if (v815 > 2)
      {
        v780 = (unint64_t)v1587;
        v782 = v1595;
        goto LABEL_1465;
      }
      v968 = *(_QWORD *)(v5 + 56);
      v969 = *(_DWORD *)v779;
      v970 = 32 - *(_DWORD *)(v5 + 40);
      if (v1498 < v796)
      {
        v971 = v1498;
        do
        {
          *(_DWORD *)(v968 + 4 * ((900185344 * *(_DWORD *)(v795 + v971)) >> v970)) = v971;
          ++v971;
        }
        while ((_DWORD)v1609 - (_DWORD)v795 != v971);
      }
      v972 = *(unsigned int *)(v968 + 4 * ((900185344 * v969) >> v970));
      v973 = v972 >= v803 && (v796 - v972) >> 18 == 0;
      v780 = (unint64_t)v1587;
      v782 = v1595;
      if (!v973)
      {
        v1498 = (_DWORD)v1609 - v795;
        v779 = v1609;
        goto LABEL_1465;
      }
      v1476 = (_DWORD *)(v795 + v972);
      v779 = v1609;
      if (v1620 <= (unint64_t)v1609)
      {
        v1482 = v1609;
        if ((unint64_t)v1609 < v1599)
        {
LABEL_2200:
          if (*v1476 == *(_DWORD *)v1482)
          {
            v1482 += 4;
            ++v1476;
          }
        }
      }
      else
      {
        v1477 = *(_QWORD *)v1609 ^ *(_QWORD *)v1476;
        if (v1477)
        {
          v1478 = __clz(__rbit64(v1477)) >> 3;
          v1498 = (_DWORD)v1609 - v795;
          if (v1478 < 3)
            goto LABEL_1465;
          goto LABEL_2211;
        }
        v1484 = 0;
        v1485 = v1609 + 8;
        while (1)
        {
          v1486 = &v1485[v1484 / 8];
          if ((unint64_t)&v1485[v1484 / 8] >= v1620)
            break;
          v1487 = *(_QWORD *)(v795 + v972 + 8 + v1484);
          v1484 += 8;
          v1488 = *v1486 ^ v1487;
          if (v1488)
          {
            v1478 = v1484 + (__clz(__rbit64(v1488)) >> 3);
            v779 = v1609;
            v1498 = (_DWORD)v1609 - v795;
            if (v1478 >= 3)
              goto LABEL_2211;
            goto LABEL_1465;
          }
        }
        v779 = v1609;
        v1482 = &v1609[v1484 + 8];
        v1476 = (_DWORD *)(v795 + v972 + v1484 + 8);
        if ((unint64_t)v1482 < v1599)
          goto LABEL_2200;
      }
      if ((unint64_t)v1482 >= v1597)
      {
        if ((unint64_t)v1482 >= v1603)
          goto LABEL_2210;
LABEL_2208:
        if (*(unsigned __int8 *)v1476 == *v1482)
          ++v1482;
        goto LABEL_2210;
      }
      if (*(unsigned __int16 *)v1476 == *(unsigned __int16 *)v1482)
      {
        v1482 += 2;
        v1476 = (_DWORD *)((char *)v1476 + 2);
      }
      if ((unint64_t)v1482 < v1603)
        goto LABEL_2208;
LABEL_2210:
      v1478 = v1482 - v779;
      v1498 = (_DWORD)v1609 - v795;
      if (v1478 < 3)
        goto LABEL_1465;
LABEL_2211:
      *v783 = v796 - v972 + 2;
      v783[1] = v1478;
      if (v1478 > v794 || &v779[v1478] == (unsigned __int8 *)v1603)
      {
        v791 = 1;
        v1498 = (_DWORD)v1609 - v795;
        *(_DWORD *)(v5 + 36) = v796 + 1;
        goto LABEL_1555;
      }
      v791 = 1;
      v1498 = (_DWORD)v1609 - v795;
      v815 = v1478;
LABEL_1465:
      *(_DWORD *)(v1613 + 4 * v1577) = v796;
      if (v806 < v803)
        goto LABEL_1466;
      v1022 = 0;
      v1023 = 0;
      v1024 = ~(-1 << v1564);
      v1025 = v796 + 2;
      v1617 = v779 + 8;
      v1026 = v795 + 8;
      while (2)
      {
        if (v1023 >= v1022)
          v1027 = v1022;
        else
          v1027 = v1023;
        v1028 = v795 + v806;
        v1029 = (char *)&v779[v1027];
        v1030 = (_DWORD *)(v1028 + v1027);
        if (v1620 <= (unint64_t)&v779[v1027])
        {
          v1033 = &v779[v1027];
          if ((unint64_t)v1029 < v1599)
          {
LABEL_1518:
            if (*v1030 == *(_DWORD *)v1033)
            {
              v1033 += 4;
              ++v1030;
            }
          }
        }
        else
        {
          v1031 = *(_QWORD *)v1029 ^ *(_QWORD *)v1030;
          if (v1031)
          {
            v779 = v1609;
            v783 = v1611;
            v1032 = (__clz(__rbit64(v1031)) >> 3) + v1027;
            v780 = (unint64_t)v1587;
            if (v1032 <= v815)
              goto LABEL_1535;
            goto LABEL_1529;
          }
          v1038 = 0;
          v1039 = (char *)v1617 + v1027;
          while (1)
          {
            v1040 = &v1039[v1038];
            if ((unint64_t)&v1039[v1038] >= v1620)
              break;
            v1041 = *(_QWORD *)(v1026 + v1027 + v806 + v1038);
            v1038 += 8;
            v1042 = *(_QWORD *)v1040 ^ v1041;
            if (v1042)
            {
              v1043 = v1038 + (__clz(__rbit64(v1042)) >> 3);
              v5 = a1;
              v779 = v1609;
              v783 = v1611;
              v782 = v1595;
              v1032 = v1043 + v1027;
              v780 = (unint64_t)v1587;
              if (v1032 > v815)
                goto LABEL_1529;
              goto LABEL_1535;
            }
          }
          v1033 = (unsigned __int8 *)v1617 + v1027 + v1038;
          v1030 = (_DWORD *)(v1026 + v1027 + v806 + v1038);
          v5 = a1;
          v779 = v1609;
          if ((unint64_t)v1033 < v1599)
            goto LABEL_1518;
        }
        if ((unint64_t)v1033 >= v1597)
        {
          if ((unint64_t)v1033 >= v1603)
            goto LABEL_1528;
LABEL_1526:
          v779 = v1609;
          if (*(unsigned __int8 *)v1030 == *v1033)
            ++v1033;
          goto LABEL_1528;
        }
        if (*(unsigned __int16 *)v1030 == *(unsigned __int16 *)v1033)
        {
          v1033 += 2;
          v1030 = (_DWORD *)((char *)v1030 + 2);
        }
        if ((unint64_t)v1033 < v1603)
          goto LABEL_1526;
LABEL_1528:
        v783 = v1611;
        v1034 = v1033 - (unsigned __int8 *)v1029;
        v782 = v1595;
        v1032 = v1034 + v1027;
        v780 = (unint64_t)v1587;
        if (v1032 <= v815)
          goto LABEL_1535;
LABEL_1529:
        if (v1032 > v811 - v806)
          v811 = v806 + v1032;
        v1035 = &v783[2 * v791];
        *v1035 = v1025 - v806;
        v1035[1] = v1032;
        ++v791;
        v1036 = v1032 > 0x1000 || &v779[v1032] == (unsigned __int8 *)v1603;
        v815 = v1032;
        if (v1036)
          goto LABEL_1466;
LABEL_1535:
        v1037 = (unsigned int *)(v808 + 8 * (v806 & v798));
        if (*(unsigned __int8 *)(v1028 + v1032) < v779[v1032])
        {
          *v809 = v806;
          if (v806 <= v799)
          {
            v809 = (unsigned int *)&v1632;
            goto LABEL_1466;
          }
          ++v1037;
          v1023 = v1032;
          v809 = v1037;
          v294 = v1024-- != 0;
          if (!v294)
            goto LABEL_1466;
          goto LABEL_1509;
        }
        *v810 = v806;
        if (v806 > v799)
        {
          v1022 = v1032;
          v810 = (unsigned int *)(v808 + 8 * (v806 & v798));
          v294 = v1024-- != 0;
          if (!v294)
            goto LABEL_1466;
LABEL_1509:
          v806 = *v1037;
          if (*v1037 < v803)
            goto LABEL_1466;
          continue;
        }
        break;
      }
      v810 = (unsigned int *)&v1632;
LABEL_1466:
      *v810 = 0;
      *v809 = 0;
      *(_DWORD *)(v5 + 36) = v811 - 8;
LABEL_1555:
      v1631 = v791;
      ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1628, (uint64_t)v783, &v1631, (_DWORD)v779 - (_DWORD)v1571, v1603 - (_DWORD)v779);
      LODWORD(v1044) = v1631;
      if (v1631)
      {
        v775[4] = *(_DWORD *)a3;
        v775[5] = *((_DWORD *)a3 + 1);
        v775[6] = *((_DWORD *)a3 + 2);
        v1045 = v1625;
        v775[2] = 0;
        v775[3] = v1625;
        v1046 = *(_DWORD *)(v5 + 160);
        if (v1046 != 1)
        {
          v783 = v1611;
          if (v1625 < 0x40)
            v1052 = ZSTD_LLcode_LL_Code[v1625];
          else
            v1052 = 50 - __clz(v1625);
          v1053 = 4 * v1052;
          v1054 = *(_DWORD *)(v5 + 148);
          v1055 = v1054 + (*(unsigned int *)((char *)LL_bits + v1053) << 8);
          v1056 = *(_DWORD **)(v5 + 88);
          LODWORD(v1053) = *(_DWORD *)((char *)v1056 + v1053) + 1;
          v1057 = __clz(v1053);
          v1048 = v1055 - (((_DWORD)v1053 << 8 >> (v1057 ^ 0x1F)) + ((v1057 ^ 0x1F) << 8));
          *v775 = v1048;
          v1049 = (v1044 - 1);
          v1050 = v1611[2 * v1049 + 1];
          if (v1050 <= v1540)
          {
            v1060 = *v1056 + 1;
            v1061 = __clz(v1060) ^ 0x1F;
            v1051 = v1054 - ((v1060 << 8 >> v1061) + (v1061 << 8));
            goto LABEL_1567;
          }
LABEL_1565:
          v1058 = 0;
          v1059 = v783[2 * v1049];
          goto LABEL_2114;
        }
        v1047 = __clz(v1625 + 1);
        v1048 = ((v1625 + 1) << 8 >> (v1047 ^ 0x1F)) + ((v1047 ^ 0x1F) << 8);
        *v775 = v1048;
        v1049 = (v1044 - 1);
        v783 = v1611;
        v1050 = v1611[2 * v1049 + 1];
        if (v1050 > v1540)
          goto LABEL_1565;
        v1051 = 256;
LABEL_1567:
        v1062 = v775 + 14;
        v1063 = (v1542 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v1062 - 7) = 0x40000000;
          *v1062 = 0x40000000;
          v1062 += 14;
          v1063 -= 2;
        }
        while (v1063);
        if (v1542 - 1 != ((v1542 - 1) & 0xFFFFFFFFFFFFFFFELL))
        {
          v1064 = v1494;
          v1065 = v1496;
          do
          {
            *v1065 = 0x40000000;
            v1065 += 7;
            --v1064;
          }
          while (v1064);
        }
        v1066 = 0;
        v1067 = v1051 + v1048;
        if (v1044 <= 1)
          v1044 = 1;
        else
          v1044 = v1044;
        v1068 = v1542;
        do
        {
          v1069 = &v783[2 * v1066];
          v1070 = v1069[1];
          if (v1068 <= v1070)
          {
            v1071 = *v1069;
            v1072 = __clz(v1071 + 1) ^ 0x1F;
            if (v1046 == 1)
            {
              v1073 = (v1068 << 8) - 512;
              do
              {
                v1074 = __clz(v1068 - 2);
                v1075 = &v775[7 * v1068];
                v1075[2] = v1068;
                v1075[3] = v1625;
                *v1075 = (v1073 >> (v1074 ^ 0x1F)) + (((v1074 ^ 0x1F) + (_DWORD)v1072) << 8) + v1067 + 4096;
                v1075[1] = v1071;
                ++v1068;
                v1073 += 256;
              }
              while (v1068 <= v1070);
            }
            else
            {
              v1077 = *(_QWORD *)(v5 + 96);
              v1076 = *(_QWORD *)(v5 + 104);
              v1078 = *(_DWORD *)(v5 + 156) + *(_DWORD *)(v5 + 152) + 51;
              do
              {
                v1086 = v1068 - 3;
                if (v1068 - 3 < 0x80)
                  v1079 = ZSTD_MLcode_ML_Code[v1086];
                else
                  v1079 = 67 - __clz(v1086);
                v1080 = *(_DWORD *)(v1076 + 4 * v1072) + 1;
                v1081 = __clz(v1080);
                v1082 = 4 * v1079;
                v1083 = *(unsigned int *)((char *)ML_bits + v1082);
                LODWORD(v1082) = *(_DWORD *)(v1077 + v1082) + 1;
                v1084 = __clz(v1082) ^ 0x1F;
                LODWORD(v1082) = v1067
                               + v1078
                               - (v1080 << 8 >> (v1081 ^ 0x1F))
                               - ((_DWORD)v1082 << 8 >> v1084)
                               + (((_DWORD)v1072 + v1083 - (v1081 ^ 0x1F) - v1084) << 8);
                v1085 = &v775[7 * v1068];
                v1085[2] = v1068;
                v1085[3] = v1625;
                *v1085 = v1082;
                v1085[1] = v1071;
                ++v1068;
              }
              while (v1068 <= v1070);
            }
          }
          ++v1066;
        }
        while (v1066 != v1044);
        LODWORD(v1087) = v1068 - 1;
        if (v1068 == 1)
          goto LABEL_2110;
        v1524 = v779 + 8;
        v1088 = (_DWORD)v779 + 1;
        v1089 = 1;
        while (2)
        {
          v1090 = v1089 - 1;
          v1091 = &v775[7 * v1089 - 7];
          if (v1091[2])
            v1092 = 1u;
          else
            v1092 = v775[7 * v1090 + 3] + 1;
          v1093 = v1089;
          v1618 = &v779[v1089];
          v1094 = *v1091;
          v1095 = *(_DWORD *)(v5 + 160);
          if (*(_DWORD *)(v5 + 176) == 2)
          {
            v1096 = v1094 + 2048;
            if (v1095 != 1)
            {
              if (v1092 >= 0x40)
                goto LABEL_1597;
LABEL_1603:
              v1097 = ZSTD_LLcode_LL_Code[v1092];
              v1098 = v1092 - 1;
              if (v1092 - 1 >= 0x40)
                goto LABEL_1604;
LABEL_1598:
              v1099 = ZSTD_LLcode_LL_Code[v1098];
              goto LABEL_1605;
            }
LABEL_1601:
            v1100 = __clz(v1092 + 1);
            v1101 = ((v1092 + 1) << 8 >> (v1100 ^ 0x1F)) + ((v1100 ^ 0x1F) << 8);
            v1102 = __clz(v1092) ^ 0x1F;
            v1103 = -((v1092 << 8 >> v1102) + (v1102 << 8));
          }
          else
          {
            if (v1095 == 1)
            {
              v1096 = v1094 + 1536;
              goto LABEL_1601;
            }
            v1104 = *(_DWORD *)(*(_QWORD *)(v5 + 80) + 4 * *(v1618 - 1)) + 1;
            v1105 = __clz(v1104);
            v1096 = *(_DWORD *)(v5 + 144) - ((v1104 << 8 >> (v1105 ^ 0x1F)) + ((v1105 ^ 0x1F) << 8)) + v1094;
            if (v1092 < 0x40)
              goto LABEL_1603;
LABEL_1597:
            v1097 = 50 - __clz(v1092);
            v1098 = v1092 - 1;
            if (v1092 - 1 < 0x40)
              goto LABEL_1598;
LABEL_1604:
            v1099 = 50 - __clz(v1098);
LABEL_1605:
            v1106 = 4 * v1097;
            v1107 = *(unsigned int *)((char *)LL_bits + v1106);
            v1108 = *(_DWORD *)(v5 + 148);
            v1109 = *(_QWORD *)(v5 + 88);
            LODWORD(v1106) = *(_DWORD *)(v1109 + v1106) + 1;
            v1110 = __clz(v1106) ^ 0x1F;
            v1101 = v1108 - ((_DWORD)v1106 << 8 >> v1110) + ((v1107 - v1110) << 8);
            v1111 = 4 * v1099;
            v1112 = *(unsigned int *)((char *)LL_bits + v1111);
            LODWORD(v1111) = *(_DWORD *)(v1109 + v1111) + 1;
            LODWORD(v1109) = __clz(v1111) ^ 0x1F;
            v1103 = ((_DWORD)v1111 << 8 >> v1109) - v1108 + (((_DWORD)v1109 - v1112) << 8);
          }
          v1113 = v1096 + v1101 + v1103;
          v1114 = &v775[7 * v1093];
          v1117 = *v1114;
          v1115 = v1114 + 2;
          v1116 = v1117;
          if (v1113 <= v1117)
          {
            v1124 = &v775[7 * v1093];
            v1124[1] = 0;
            v1124[2] = 0;
            v1124[3] = v1092;
            *v1124 = v1113;
            v1116 = v1113;
LABEL_1611:
            v1125 = 0;
            v1126 = &v775[7 * v1093];
            v1127 = &v775[7 * v1090];
            *((_QWORD *)v1126 + 2) = *((_QWORD *)v1127 + 2);
            v1126[6] = v1127[6];
            v1128 = 1;
            if ((unint64_t)v1618 <= v1593)
              goto LABEL_1625;
LABEL_1590:
            v1089 = v1093 + 1;
            ++v1088;
            v782 = v1595;
            if (v1089 > v1087)
              goto LABEL_2110;
            continue;
          }
          break;
        }
        if (!*v1115)
          goto LABEL_1611;
        v1118 = &v775[7 * (v1093 - *v1115) + 4];
        v1119 = v775[7 * v1093 + 1];
        if (v1119 < 3)
        {
          if (v775[7 * v1093 + 3])
            v1129 = v775[7 * v1093 + 1];
          else
            v1129 = v1119 + 1;
          if (v1129)
          {
            if (v1129 == 3)
            {
              v1121 = *v1118;
              v1123 = v1121 - 1;
            }
            else
            {
              v1123 = v1118[v1129];
              v1121 = *v1118;
            }
            v658 = v1129 > 1;
            v1131 = 2;
            if (v658)
              v1131 = 1;
            v1120 = &v1118[v1131];
          }
          else
          {
            v1130 = *(_QWORD *)v1118;
            v1120 = &v775[7 * (v1093 - *v1115) + 6];
            v1123 = v1130;
            v1121 = HIDWORD(v1130);
          }
        }
        else
        {
          v1122 = *v1118;
          v1120 = &v775[7 * (v1093 - *v1115) + 5];
          v1121 = v1122;
          v1123 = v1119 - 2;
        }
        v1128 = 0;
        v1132 = *v1120;
        v1133 = v1123 | (v1121 << 32);
        v1134 = &v775[7 * v1093];
        *((_QWORD *)v1134 + 2) = v1133;
        v1134[6] = v1132;
        v1125 = 1;
        if ((unint64_t)v1618 > v1593)
          goto LABEL_1590;
LABEL_1625:
        if ((_DWORD)v1093 == (_DWORD)v1087)
        {
          v782 = v1595;
LABEL_2110:
          v1412 = &v775[7 * v1087];
          v1059 = v1412[1];
          v1526 = *v1412;
          v1050 = v1412[2];
          v1045 = v1412[3];
          v1634 = *((_QWORD *)v1412 + 2);
          v1635 = v1412[6];
          if (v1087 >= v1045 + v1050)
            v1058 = v1087 - (v1045 + v1050);
          else
            v1058 = 0;
          if (!v1050)
            goto LABEL_2198;
          goto LABEL_2114;
        }
        if (v1128)
          v1128 = v775[7 * v1093 + 3];
        if (*(_DWORD *)(v5 + 160) == 1)
        {
          v1135 = 256;
        }
        else
        {
          v1136 = **(_DWORD **)(v5 + 88) + 1;
          v1137 = __clz(v1136) ^ 0x1F;
          v1135 = *(_DWORD *)(v5 + 148) - ((v1136 << 8 >> v1137) + (v1137 << 8));
        }
        v1562 = v1135;
        v1568 = v1116;
        v1534 = v1115;
        v1581 = v1088;
        v1631 = 0;
        v1138 = *(_QWORD *)(v5 + 8);
        v1139 = v5;
        v1140 = *(unsigned int *)(v5 + 36);
        v1626 = v1128;
        if (v1138 + v1140 > (unint64_t)v1618)
        {
          v1141 = 0;
          v5 = v1139;
          v1142 = v1603;
          v1143 = v775 + 7;
          LODWORD(v1144) = (_DWORD)v1618;
          goto LABEL_2042;
        }
        v1529 = v1125;
        v1145 = *(_DWORD *)(v1139 + 208);
        for (m = (_DWORD)v1618 - v1138;
              v1140 < m;
        v1147 = &v775[7 * v1093 + 4];
        *(_DWORD *)(v1139 + 36) = m;
        v5 = v1139;
        if ((v1145 - 6) < 2)
        {
          v1141 = 0;
          if (*(_DWORD *)(v1139 + 212) >= 0xFFFu)
            v1179 = 4095;
          else
            v1179 = *(_DWORD *)(v1139 + 212);
          v1180 = *(_QWORD *)(v1139 + 8);
          v1144 = v1618;
          v1181 = (_DWORD)v1618 - v1180;
          v1182 = v1618 + 4;
          v1504 = *(_DWORD *)(v1139 + 204);
          v1512 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v1618) >> -(char)*(_DWORD *)(v1139 + 200);
          v1520 = *(_QWORD *)(v1139 + 48);
          v1183 = *(_DWORD *)(v1520 + 4 * v1512);
          v1184 = -1 << (*(_DWORD *)(v1139 + 196) - 1);
          v1185 = ~v1184;
          v1186 = (_DWORD)v1618 - v1180 + v1184 + 1;
          if ((int)v1618 - (int)v1180 < ~v1184)
            v1186 = 0;
          v1545 = v1186;
          v1187 = *(_DWORD *)(v1139 + 24);
          v1188 = 1 << *(_DWORD *)(v1139 + 192);
          if (v1181 - *(_DWORD *)(v1139 + 28) > v1188 && *(_DWORD *)(v1139 + 32) == 0)
            v1190 = v1181 - v1188;
          else
            v1190 = *(_DWORD *)(v1139 + 28);
          if (v1190 <= 1)
            v1191 = 1;
          else
            v1191 = v1190;
          v1553 = v1191;
          v1192 = *(_QWORD *)(v1139 + 64);
          v1193 = (unsigned int *)(v1192 + 8 * (v1181 & ~v1184));
          v1558 = v1193 + 1;
          v1194 = v1181 + 9;
          LODWORD(v1632) = 0;
          v1195 = (v1542 - 1);
          if (v1529)
            v1196 = 4;
          else
            v1196 = 3;
          v1197 = v1181 - v1187;
          v1198 = v1529;
          v1143 = v775 + 7;
          while (1)
          {
            if (v1198 == 3)
            {
              v1199 = *v1147 - 1;
              if (*v1147 - 2 >= v1197)
                goto LABEL_1709;
            }
            else
            {
              v1199 = v1147[v1198];
              if (v1199 - 1 >= v1197)
                goto LABEL_1709;
            }
            v1200 = *(_DWORD *)v1144;
            v1201 = *(_DWORD *)&v1144[-v1199];
            if (v1181 - v1199 < v1190 || v1200 != v1201)
            {
              v1144 = v1618;
              goto LABEL_1709;
            }
            v1203 = (_QWORD *)((char *)v1182 - v1199);
            if (v1620 <= (unint64_t)v1182)
              break;
            v1204 = v1618 + 4;
            v1205 = *v1182 ^ *v1203;
            if (!v1205)
            {
              do
              {
                ++v1203;
                if ((unint64_t)++v1204 >= v1620)
                  goto LABEL_1728;
                v1208 = *v1204 ^ *v1203;
              }
              while (!v1208);
              v1144 = v1618;
              v1206 = (_DWORD)v1204 + (__clz(__rbit64(v1208)) >> 3) - (_DWORD)v1618;
              v1207 = v1206;
              if (v1195 >= v1206)
                goto LABEL_1709;
LABEL_1736:
              v1209 = &v1611[2 * v1141];
              *v1209 = v1198 + ((int)(v1529 << 31) >> 31);
              v1209[1] = v1206;
              ++v1141;
              if (v1206 > v1179)
                goto LABEL_1746;
              v1195 = v1207;
              if (&v1144[v1207] == (unsigned __int8 *)v1603)
                goto LABEL_1746;
              goto LABEL_1709;
            }
            v1144 = v1618;
            v1206 = (__clz(__rbit64(v1205)) >> 3) + 4;
            v1207 = v1206;
            if (v1195 < v1206)
              goto LABEL_1736;
LABEL_1709:
            if (++v1198 >= v1196)
            {
              *(_DWORD *)(v1520 + 4 * v1512) = v1181;
              if (v1183 < v1553)
                goto LABEL_1745;
              v1274 = 0;
              v1275 = 0;
              v1276 = ~(-1 << v1504);
              v1277 = v1181 + 2;
              v1530 = (char *)v1524 + v1093;
              v1278 = v1180 + 8;
              while (1)
              {
                v1279 = v1275 >= v1274 ? v1274 : v1275;
                v1280 = v1180 + v1183;
                v1281 = (char *)&v1144[v1279];
                v1282 = (_QWORD *)(v1280 + v1279);
                if (v1620 <= (unint64_t)&v1144[v1279])
                  break;
                v1283 = *(_QWORD *)v1281 ^ *v1282;
                if (v1283)
                {
                  v1284 = v1611;
                  v1285 = (__clz(__rbit64(v1283)) >> 3) + v1279;
                  if (v1285 <= v1195)
                    goto LABEL_1889;
                  goto LABEL_1883;
                }
                v1290 = 0;
                v1291 = &v1530[v1279];
                do
                {
                  v1292 = &v1291[v1290];
                  if ((unint64_t)&v1291[v1290] >= v1620)
                  {
                    v1286 = &v1530[v1279 + v1290];
                    v1282 = (_QWORD *)(v1278 + v1279 + v1183 + v1290);
                    v5 = a1;
                    v1144 = v1618;
                    if ((unint64_t)v1286 >= v1599)
                      goto LABEL_1874;
                    goto LABEL_1872;
                  }
                  v1293 = *(_QWORD *)(v1278 + v1279 + v1183 + v1290);
                  v1290 += 8;
                  v1294 = *(_QWORD *)v1292 ^ v1293;
                }
                while (!v1294);
                v1295 = v1290 + (__clz(__rbit64(v1294)) >> 3);
                v5 = a1;
                v1284 = v1611;
                v1144 = v1618;
                v1285 = v1295 + v1279;
                if (v1285 <= v1195)
                  goto LABEL_1889;
LABEL_1883:
                if (v1285 > v1194 - v1183)
                  v1194 = v1183 + v1285;
                v1287 = &v1284[2 * v1141];
                *v1287 = v1277 - v1183;
                v1287[1] = v1285;
                ++v1141;
                v1288 = v1285 > 0x1000 || &v1144[v1285] == (unsigned __int8 *)v1603;
                v1195 = v1285;
                if (v1288)
                  goto LABEL_1745;
LABEL_1889:
                v1289 = (unsigned int *)(v1192 + 8 * (v1183 & v1185));
                if (*(unsigned __int8 *)(v1280 + v1285) >= v1144[v1285])
                {
                  *v1558 = v1183;
                  if (v1183 <= v1545)
                  {
                    v1558 = (unsigned int *)&v1632;
                    goto LABEL_1745;
                  }
                  v1274 = v1285;
                  v1558 = (unsigned int *)(v1192 + 8 * (v1183 & v1185));
                  v294 = v1276-- != 0;
                  if (v294)
                    goto LABEL_1863;
LABEL_1745:
                  *v1558 = 0;
                  *v1193 = 0;
                  *(_DWORD *)(v5 + 36) = v1194 - 8;
LABEL_1746:
                  v783 = v1611;
                  v780 = (unint64_t)v1587;
                  v1142 = v1603;
                  goto LABEL_2042;
                }
                *v1193 = v1183;
                if (v1183 <= v1545)
                {
                  v1193 = (unsigned int *)&v1632;
                  goto LABEL_1745;
                }
                ++v1289;
                v1275 = v1285;
                v1193 = v1289;
                v294 = v1276-- != 0;
                if (!v294)
                  goto LABEL_1745;
LABEL_1863:
                v1183 = *v1289;
                if (*v1289 < v1553)
                  goto LABEL_1745;
              }
              v1286 = (char *)&v1144[v1279];
              if ((unint64_t)v1281 >= v1599)
                goto LABEL_1874;
LABEL_1872:
              if (*(_DWORD *)v1282 == *(_DWORD *)v1286)
              {
                v1286 += 4;
                v1282 = (_QWORD *)((char *)v1282 + 4);
              }
LABEL_1874:
              if ((unint64_t)v1286 >= v1597)
              {
                if ((unint64_t)v1286 >= v1603)
                  goto LABEL_1882;
              }
              else
              {
                if (*(unsigned __int16 *)v1282 == *(unsigned __int16 *)v1286)
                {
                  v1286 += 2;
                  v1282 = (_QWORD *)((char *)v1282 + 2);
                }
                if ((unint64_t)v1286 >= v1603)
                {
LABEL_1882:
                  v1284 = v1611;
                  v1285 = v1286 - v1281 + v1279;
                  if (v1285 <= v1195)
                    goto LABEL_1889;
                  goto LABEL_1883;
                }
              }
              v1144 = v1618;
              if (*(unsigned __int8 *)v1282 == *v1286)
                ++v1286;
              goto LABEL_1882;
            }
          }
          v1204 = v1618 + 4;
LABEL_1728:
          if ((unint64_t)v1204 >= v1599)
          {
            if ((unint64_t)v1204 >= v1597)
              goto LABEL_1732;
          }
          else
          {
            if (*(_DWORD *)v1203 == *(_DWORD *)v1204)
            {
              v1204 = (_QWORD *)((char *)v1204 + 4);
              v1203 = (_QWORD *)((char *)v1203 + 4);
            }
            if ((unint64_t)v1204 >= v1597)
            {
LABEL_1732:
              if ((unint64_t)v1204 < v1603)
                goto LABEL_1733;
              goto LABEL_1735;
            }
          }
          if (*(unsigned __int16 *)v1203 == *(unsigned __int16 *)v1204)
          {
            v1204 = (_QWORD *)((char *)v1204 + 2);
            v1203 = (_QWORD *)((char *)v1203 + 2);
          }
          if ((unint64_t)v1204 < v1603)
          {
LABEL_1733:
            if (*(unsigned __int8 *)v1203 == *(unsigned __int8 *)v1204)
              LODWORD(v1204) = (_DWORD)v1204 + 1;
          }
LABEL_1735:
          v1144 = v1618;
          v1206 = (_DWORD)v1204 - (_DWORD)v1618;
          v1207 = v1206;
          if (v1195 < v1206)
            goto LABEL_1736;
          goto LABEL_1709;
        }
        v1142 = v1603;
        v1143 = v775 + 7;
        v1144 = v1618;
        if (v1145 == 5)
        {
          v1141 = 0;
          if (*(_DWORD *)(v5 + 212) >= 0xFFFu)
            v1210 = 4095;
          else
            v1210 = *(_DWORD *)(v5 + 212);
          v1554 = *(_QWORD *)(v5 + 8);
          v1211 = (_DWORD)v1618 - v1554;
          v1212 = v1618 + 4;
          v1505 = *(_DWORD *)(v5 + 204);
          v1513 = (0xCF1BBCDCBB000000 * *(_QWORD *)v1618) >> -(char)*(_DWORD *)(v5 + 200);
          v1521 = *(_QWORD *)(v5 + 48);
          v1213 = *(_DWORD *)(v1521 + 4 * v1513);
          v1214 = -1 << (*(_DWORD *)(v5 + 196) - 1);
          v1215 = ~v1214;
          v1216 = (_DWORD)v1618 - v1554 + v1214 + 1;
          if ((int)v1618 - (int)v1554 < ~v1214)
            v1216 = 0;
          v1546 = v1216;
          v1217 = *(_DWORD *)(v5 + 24);
          v1218 = 1 << *(_DWORD *)(v5 + 192);
          if (v1211 - *(_DWORD *)(v5 + 28) > v1218 && *(_DWORD *)(v5 + 32) == 0)
            v1220 = v1211 - v1218;
          else
            v1220 = *(_DWORD *)(v5 + 28);
          if (v1220 <= 1)
            v1221 = 1;
          else
            v1221 = v1220;
          v1222 = *(_QWORD *)(v5 + 64);
          v1223 = (unsigned int *)(v1222 + 8 * (v1211 & ~v1214));
          v1559 = v1223 + 1;
          v1224 = v1211 + 9;
          LODWORD(v1632) = 0;
          if (v1529)
            v1225 = 4;
          else
            v1225 = 3;
          v1226 = v1211 - v1217;
          v1227 = v1529;
          v1228 = (v1542 - 1);
          while (1)
          {
            if (v1227 == 3)
            {
              v1229 = *v1147 - 1;
              if (*v1147 - 2 >= v1226)
                goto LABEL_1765;
            }
            else
            {
              v1229 = v1147[v1227];
              if (v1229 - 1 >= v1226)
                goto LABEL_1765;
            }
            v1230 = *(_DWORD *)v1144;
            v1231 = *(_DWORD *)&v1144[-v1229];
            if (v1211 - v1229 < v1220 || v1230 != v1231)
            {
              v1144 = v1618;
              goto LABEL_1765;
            }
            v1233 = (_QWORD *)((char *)v1212 - v1229);
            if (v1620 <= (unint64_t)v1212)
              break;
            v1234 = v1618 + 4;
            v1235 = *v1212 ^ *v1233;
            if (!v1235)
            {
              do
              {
                ++v1233;
                if ((unint64_t)++v1234 >= v1620)
                  goto LABEL_1784;
                v1238 = *v1234 ^ *v1233;
              }
              while (!v1238);
              v1144 = v1618;
              v1236 = (_DWORD)v1234 + (__clz(__rbit64(v1238)) >> 3) - (_DWORD)v1618;
              v1237 = v1236;
              if (v1228 >= v1236)
                goto LABEL_1765;
LABEL_1792:
              v1239 = &v1611[2 * v1141];
              *v1239 = v1227 + ((int)(v1529 << 31) >> 31);
              v1239[1] = v1236;
              ++v1141;
              if (v1236 > v1210)
                goto LABEL_2041;
              v1228 = v1237;
              if (&v1144[v1237] == (unsigned __int8 *)v1603)
                goto LABEL_2041;
              goto LABEL_1765;
            }
            v1144 = v1618;
            v1236 = (__clz(__rbit64(v1235)) >> 3) + 4;
            v1237 = v1236;
            if (v1228 < v1236)
              goto LABEL_1792;
LABEL_1765:
            if (++v1227 >= v1225)
            {
              *(_DWORD *)(v1521 + 4 * v1513) = v1211;
              if (v1213 < v1221)
                goto LABEL_2040;
              v1296 = 0;
              v1297 = 0;
              v1298 = ~(-1 << v1505);
              v1299 = v1211 + 2;
              v1531 = (char *)v1524 + v1093;
              v1300 = v1554 + 8;
              while (1)
              {
                v1301 = v1297 >= v1296 ? v1296 : v1297;
                v1302 = v1554 + v1213;
                v1303 = (char *)&v1144[v1301];
                v1304 = (_QWORD *)(v1302 + v1301);
                if (v1620 <= (unint64_t)&v1144[v1301])
                  break;
                v1305 = *(_QWORD *)v1303 ^ *v1304;
                if (v1305)
                {
                  v1306 = v1611;
                  v1307 = (__clz(__rbit64(v1305)) >> 3) + v1301;
                  if (v1307 <= v1228)
                    goto LABEL_1931;
                  goto LABEL_1925;
                }
                v1312 = 0;
                v1313 = &v1531[v1301];
                while (1)
                {
                  v1314 = &v1313[v1312];
                  if ((unint64_t)&v1313[v1312] >= v1620)
                    break;
                  v1315 = *(_QWORD *)(v1300 + v1301 + v1213 + v1312);
                  v1312 += 8;
                  v1316 = *(_QWORD *)v1314 ^ v1315;
                  if (v1316)
                  {
                    v1317 = v1312 + (__clz(__rbit64(v1316)) >> 3);
                    v5 = a1;
                    v1306 = v1611;
                    v1144 = v1618;
                    v1307 = v1317 + v1301;
                    if (v1307 <= v1228)
                      goto LABEL_1931;
                    goto LABEL_1925;
                  }
                }
                v1308 = &v1531[v1301 + v1312];
                v1304 = (_QWORD *)(v1300 + v1301 + v1213 + v1312);
                v5 = a1;
                v1144 = v1618;
                if ((unint64_t)v1308 < v1599)
                  goto LABEL_1914;
LABEL_1916:
                if ((unint64_t)v1308 >= v1597)
                {
                  if ((unint64_t)v1308 >= v1603)
                    goto LABEL_1924;
LABEL_1922:
                  v1144 = v1618;
                  if (*(unsigned __int8 *)v1304 == *v1308)
                    ++v1308;
                  goto LABEL_1924;
                }
                if (*(unsigned __int16 *)v1304 == *(unsigned __int16 *)v1308)
                {
                  v1308 += 2;
                  v1304 = (_QWORD *)((char *)v1304 + 2);
                }
                if ((unint64_t)v1308 < v1603)
                  goto LABEL_1922;
LABEL_1924:
                v1306 = v1611;
                v1307 = v1308 - v1303 + v1301;
                if (v1307 <= v1228)
                  goto LABEL_1931;
LABEL_1925:
                if (v1307 > v1224 - v1213)
                  v1224 = v1213 + v1307;
                v1309 = &v1306[2 * v1141];
                *v1309 = v1299 - v1213;
                v1309[1] = v1307;
                ++v1141;
                v1310 = v1307 > 0x1000 || &v1144[v1307] == (unsigned __int8 *)v1603;
                v1228 = v1307;
                if (v1310)
                  goto LABEL_2040;
LABEL_1931:
                v1311 = (unsigned int *)(v1222 + 8 * (v1213 & v1215));
                if (*(unsigned __int8 *)(v1302 + v1307) >= v1144[v1307])
                {
                  *v1559 = v1213;
                  if (v1213 <= v1546)
                    goto LABEL_2038;
                  v1296 = v1307;
                  v1559 = (unsigned int *)(v1222 + 8 * (v1213 & v1215));
                  v294 = v1298-- != 0;
                  if (!v294)
                    goto LABEL_2040;
                }
                else
                {
                  *v1223 = v1213;
                  if (v1213 <= v1546)
                  {
LABEL_2039:
                    v1223 = (unsigned int *)&v1632;
                    goto LABEL_2040;
                  }
                  ++v1311;
                  v1297 = v1307;
                  v1223 = v1311;
                  v294 = v1298-- != 0;
                  if (!v294)
                    goto LABEL_2040;
                }
                v1213 = *v1311;
                if (*v1311 < v1221)
                  goto LABEL_2040;
              }
              v1308 = (char *)&v1144[v1301];
              if ((unint64_t)v1303 >= v1599)
                goto LABEL_1916;
LABEL_1914:
              if (*(_DWORD *)v1304 == *(_DWORD *)v1308)
              {
                v1308 += 4;
                v1304 = (_QWORD *)((char *)v1304 + 4);
              }
              goto LABEL_1916;
            }
          }
          v1234 = v1618 + 4;
LABEL_1784:
          if ((unint64_t)v1234 >= v1599)
          {
            if ((unint64_t)v1234 >= v1597)
              goto LABEL_1788;
          }
          else
          {
            if (*(_DWORD *)v1233 == *(_DWORD *)v1234)
            {
              v1234 = (_QWORD *)((char *)v1234 + 4);
              v1233 = (_QWORD *)((char *)v1233 + 4);
            }
            if ((unint64_t)v1234 >= v1597)
            {
LABEL_1788:
              if ((unint64_t)v1234 >= v1603)
                goto LABEL_1791;
              goto LABEL_1789;
            }
          }
          if (*(unsigned __int16 *)v1233 == *(unsigned __int16 *)v1234)
          {
            v1234 = (_QWORD *)((char *)v1234 + 2);
            v1233 = (_QWORD *)((char *)v1233 + 2);
          }
          if ((unint64_t)v1234 >= v1603)
          {
LABEL_1791:
            v1144 = v1618;
            v1236 = (_DWORD)v1234 - (_DWORD)v1618;
            v1237 = v1236;
            if (v1228 < v1236)
              goto LABEL_1792;
            goto LABEL_1765;
          }
LABEL_1789:
          if (*(unsigned __int8 *)v1233 == *(unsigned __int8 *)v1234)
            LODWORD(v1234) = (_DWORD)v1234 + 1;
          goto LABEL_1791;
        }
        if (v1145 != 3)
        {
          v1141 = 0;
          if (*(_DWORD *)(v5 + 212) >= 0xFFFu)
            v1240 = 4095;
          else
            v1240 = *(_DWORD *)(v5 + 212);
          v1555 = *(_QWORD *)(v5 + 8);
          v1241 = (_DWORD)v1618 - v1555;
          v1242 = v1618 + 4;
          v1506 = *(_DWORD *)(v5 + 204);
          v1514 = (-1640531535 * *(_DWORD *)v1618) >> -(char)*(_DWORD *)(v5 + 200);
          v1522 = *(_QWORD *)(v5 + 48);
          v1243 = *(_DWORD *)(v1522 + 4 * v1514);
          v1244 = -1 << (*(_DWORD *)(v5 + 196) - 1);
          v1245 = ~v1244;
          v1246 = (_DWORD)v1618 - v1555 + v1244 + 1;
          if ((int)v1618 - (int)v1555 < ~v1244)
            v1246 = 0;
          v1547 = v1246;
          v1247 = *(_DWORD *)(v5 + 24);
          v1248 = 1 << *(_DWORD *)(v5 + 192);
          if (v1241 - *(_DWORD *)(v5 + 28) > v1248 && *(_DWORD *)(v5 + 32) == 0)
            v1250 = v1241 - v1248;
          else
            v1250 = *(_DWORD *)(v5 + 28);
          if (v1250 <= 1)
            v1251 = 1;
          else
            v1251 = v1250;
          v1252 = *(_QWORD *)(v5 + 64);
          v1223 = (unsigned int *)(v1252 + 8 * (v1241 & ~v1244));
          v1559 = v1223 + 1;
          v1224 = v1241 + 9;
          LODWORD(v1632) = 0;
          if (v1529)
            v1253 = 4;
          else
            v1253 = 3;
          v1254 = v1241 - v1247;
          v1255 = v1529;
          v1256 = (v1542 - 1);
          while (1)
          {
            if (v1255 == 3)
            {
              v1257 = *v1147 - 1;
              if (*v1147 - 2 >= v1254)
                goto LABEL_1818;
            }
            else
            {
              v1257 = v1147[v1255];
              if (v1257 - 1 >= v1254)
                goto LABEL_1818;
            }
            v1258 = *(_DWORD *)v1144;
            v1259 = *(_DWORD *)&v1144[-v1257];
            if (v1241 - v1257 < v1250 || v1258 != v1259)
            {
              v1144 = v1618;
              goto LABEL_1818;
            }
            v1261 = (_QWORD *)((char *)v1242 - v1257);
            if (v1620 <= (unint64_t)v1242)
              break;
            v1262 = v1618 + 4;
            v1263 = *v1242 ^ *v1261;
            if (!v1263)
            {
              do
              {
                ++v1261;
                if ((unint64_t)++v1262 >= v1620)
                  goto LABEL_1837;
                v1266 = *v1262 ^ *v1261;
              }
              while (!v1266);
              v1144 = v1618;
              v1264 = (_DWORD)v1262 + (__clz(__rbit64(v1266)) >> 3) - (_DWORD)v1618;
              v1265 = v1264;
              if (v1256 >= v1264)
                goto LABEL_1818;
LABEL_1845:
              v1267 = &v1611[2 * v1141];
              *v1267 = v1255 + ((int)(v1529 << 31) >> 31);
              v1267[1] = v1264;
              ++v1141;
              if (v1264 > v1240)
                goto LABEL_2041;
              v1256 = v1265;
              if (&v1144[v1265] == (unsigned __int8 *)v1603)
                goto LABEL_2041;
              goto LABEL_1818;
            }
            v1144 = v1618;
            v1264 = (__clz(__rbit64(v1263)) >> 3) + 4;
            v1265 = v1264;
            if (v1256 < v1264)
              goto LABEL_1845;
LABEL_1818:
            if (++v1255 >= v1253)
            {
              *(_DWORD *)(v1522 + 4 * v1514) = v1241;
              if (v1243 < v1251)
                goto LABEL_2040;
              v1318 = 0;
              v1319 = 0;
              v1320 = ~(-1 << v1506);
              v1321 = v1241 + 2;
              v1532 = (char *)v1524 + v1093;
              v1322 = v1555 + 8;
              while (1)
              {
                v1323 = v1319 >= v1318 ? v1318 : v1319;
                v1324 = v1555 + v1243;
                v1325 = (char *)&v1144[v1323];
                v1326 = (_QWORD *)(v1324 + v1323);
                if (v1620 <= (unint64_t)&v1144[v1323])
                  break;
                v1327 = *(_QWORD *)v1325 ^ *v1326;
                if (v1327)
                {
                  v1328 = v1611;
                  v1329 = (__clz(__rbit64(v1327)) >> 3) + v1323;
                  if (v1329 <= v1256)
                    goto LABEL_1973;
                  goto LABEL_1967;
                }
                v1334 = 0;
                v1335 = &v1532[v1323];
                do
                {
                  v1336 = &v1335[v1334];
                  if ((unint64_t)&v1335[v1334] >= v1620)
                  {
                    v1330 = &v1532[v1323 + v1334];
                    v1326 = (_QWORD *)(v1322 + v1323 + v1243 + v1334);
                    v5 = a1;
                    v1144 = v1618;
                    if ((unint64_t)v1330 >= v1599)
                      goto LABEL_1958;
                    goto LABEL_1956;
                  }
                  v1337 = *(_QWORD *)(v1322 + v1323 + v1243 + v1334);
                  v1334 += 8;
                  v1338 = *(_QWORD *)v1336 ^ v1337;
                }
                while (!v1338);
                v1339 = v1334 + (__clz(__rbit64(v1338)) >> 3);
                v5 = a1;
                v1328 = v1611;
                v1144 = v1618;
                v1329 = v1339 + v1323;
                if (v1329 <= v1256)
                  goto LABEL_1973;
LABEL_1967:
                if (v1329 > v1224 - v1243)
                  v1224 = v1243 + v1329;
                v1331 = &v1328[2 * v1141];
                *v1331 = v1321 - v1243;
                v1331[1] = v1329;
                ++v1141;
                v1332 = v1329 > 0x1000 || &v1144[v1329] == (unsigned __int8 *)v1603;
                v1256 = v1329;
                if (v1332)
                  goto LABEL_2040;
LABEL_1973:
                v1333 = (unsigned int *)(v1252 + 8 * (v1243 & v1245));
                if (*(unsigned __int8 *)(v1324 + v1329) >= v1144[v1329])
                {
                  *v1559 = v1243;
                  if (v1243 > v1547)
                  {
                    v1318 = v1329;
                    v1559 = (unsigned int *)(v1252 + 8 * (v1243 & v1245));
                    v294 = v1320-- != 0;
                    if (v294)
                      goto LABEL_1947;
LABEL_2040:
                    *v1559 = 0;
                    *v1223 = 0;
                    *(_DWORD *)(v5 + 36) = v1224 - 8;
LABEL_2041:
                    v783 = v1611;
                    v780 = (unint64_t)v1587;
                    goto LABEL_2042;
                  }
LABEL_2038:
                  v1559 = (unsigned int *)&v1632;
                  goto LABEL_2040;
                }
                *v1223 = v1243;
                if (v1243 <= v1547)
                  goto LABEL_2039;
                ++v1333;
                v1319 = v1329;
                v1223 = v1333;
                v294 = v1320-- != 0;
                if (!v294)
                  goto LABEL_2040;
LABEL_1947:
                v1243 = *v1333;
                if (*v1333 < v1251)
                  goto LABEL_2040;
              }
              v1330 = (char *)&v1144[v1323];
              if ((unint64_t)v1325 >= v1599)
                goto LABEL_1958;
LABEL_1956:
              if (*(_DWORD *)v1326 == *(_DWORD *)v1330)
              {
                v1330 += 4;
                v1326 = (_QWORD *)((char *)v1326 + 4);
              }
LABEL_1958:
              if ((unint64_t)v1330 >= v1597)
              {
                if ((unint64_t)v1330 >= v1603)
                  goto LABEL_1966;
              }
              else
              {
                if (*(unsigned __int16 *)v1326 == *(unsigned __int16 *)v1330)
                {
                  v1330 += 2;
                  v1326 = (_QWORD *)((char *)v1326 + 2);
                }
                if ((unint64_t)v1330 >= v1603)
                {
LABEL_1966:
                  v1328 = v1611;
                  v1329 = v1330 - v1325 + v1323;
                  if (v1329 <= v1256)
                    goto LABEL_1973;
                  goto LABEL_1967;
                }
              }
              v1144 = v1618;
              if (*(unsigned __int8 *)v1326 == *v1330)
                ++v1330;
              goto LABEL_1966;
            }
          }
          v1262 = v1618 + 4;
LABEL_1837:
          if ((unint64_t)v1262 >= v1599)
          {
            if ((unint64_t)v1262 >= v1597)
              goto LABEL_1841;
          }
          else
          {
            if (*(_DWORD *)v1261 == *(_DWORD *)v1262)
            {
              v1262 = (_QWORD *)((char *)v1262 + 4);
              v1261 = (_QWORD *)((char *)v1261 + 4);
            }
            if ((unint64_t)v1262 >= v1597)
            {
LABEL_1841:
              if ((unint64_t)v1262 >= v1603)
                goto LABEL_1844;
              goto LABEL_1842;
            }
          }
          if (*(unsigned __int16 *)v1261 == *(unsigned __int16 *)v1262)
          {
            v1262 = (_QWORD *)((char *)v1262 + 2);
            v1261 = (_QWORD *)((char *)v1261 + 2);
          }
          if ((unint64_t)v1262 >= v1603)
          {
LABEL_1844:
            v1144 = v1618;
            v1264 = (_DWORD)v1262 - (_DWORD)v1618;
            v1265 = v1264;
            if (v1256 < v1264)
              goto LABEL_1845;
            goto LABEL_1818;
          }
LABEL_1842:
          if (*(unsigned __int8 *)v1261 == *(unsigned __int8 *)v1262)
            LODWORD(v1262) = (_DWORD)v1262 + 1;
          goto LABEL_1844;
        }
        v1141 = 0;
        v1492 = (char *)v1524 + v1093;
        if (*(_DWORD *)(v5 + 212) >= 0xFFFu)
          v1148 = 4095;
        else
          v1148 = *(_DWORD *)(v5 + 212);
        v1149 = *(_QWORD *)(v5 + 8);
        v1150 = (_DWORD)v1618 - v1149;
        v1151 = (char *)(v1618 + 3);
        v1503 = *(_DWORD *)(v5 + 204);
        v1511 = (-1640531535 * *(_DWORD *)v1618) >> -(char)*(_DWORD *)(v5 + 200);
        v1519 = *(_QWORD *)(v5 + 48);
        v1152 = *(_DWORD *)(v1519 + 4 * v1511);
        v1153 = -1 << (*(_DWORD *)(v5 + 196) - 1);
        v1154 = ~v1153;
        v1155 = (_DWORD)v1618 - v1149 + v1153 + 1;
        if ((int)v1618 - (int)v1149 < ~v1153)
          v1155 = 0;
        v1544 = v1155;
        v1156 = *(_DWORD *)(v5 + 24);
        v1157 = 1 << *(_DWORD *)(v5 + 192);
        if (v1150 - *(_DWORD *)(v5 + 28) > v1157 && *(_DWORD *)(v5 + 32) == 0)
          v1159 = v1150 - v1157;
        else
          v1159 = *(_DWORD *)(v5 + 28);
        if (v1159 <= 1)
          v1160 = 1;
        else
          v1160 = v1159;
        v1161 = (unsigned int *)(*(_QWORD *)(v5 + 64) + 8 * (v1150 & ~v1153));
        v1552 = *(_QWORD *)(v5 + 64);
        v1557 = v1161 + 1;
        v1162 = v1150 + 9;
        LODWORD(v1632) = 0;
        if (v1529)
          v1163 = 4;
        else
          v1163 = 3;
        v1164 = v1150 - v1156;
        v1165 = v1529;
        v1166 = (v1542 - 1);
        v780 = (unint64_t)v1587;
        while (2)
        {
          if (v1165 != 3)
          {
            v1167 = v1147[v1165];
            if (v1167 - 1 < v1164)
              goto LABEL_1661;
            goto LABEL_1656;
          }
          v1167 = *v1147 - 1;
          if (*v1147 - 2 >= v1164)
            goto LABEL_1656;
LABEL_1661:
          v1168 = (*(_DWORD *)&v1144[-v1167] ^ *(_DWORD *)v1144) & 0xFFFFFF;
          if (v1150 - v1167 < v1159 || v1168 != 0)
          {
            v780 = (unint64_t)v1587;
            v1144 = v1618;
            goto LABEL_1656;
          }
          v1170 = &v1151[-v1167];
          if (v1620 <= (unint64_t)v1151)
          {
            v1171 = v1618 + 3;
          }
          else
          {
            v1171 = v1618 + 3;
            v1172 = *(_QWORD *)v1151 ^ *(_QWORD *)v1170;
            if (v1172)
            {
              v1173 = __clz(__rbit64(v1172)) >> 3;
LABEL_1672:
              v780 = (unint64_t)v1587;
              v1144 = v1618;
              v1175 = v1173 + 3;
              v1176 = v1175;
              if (v1166 < v1175)
                goto LABEL_1683;
              goto LABEL_1656;
            }
            while (1)
            {
              v1170 += 8;
              if ((unint64_t)++v1171 >= v1620)
                break;
              v1174 = *v1171 ^ *(_QWORD *)v1170;
              if (v1174)
              {
                v1173 = (char *)v1171 + (__clz(__rbit64(v1174)) >> 3) - v1151;
                goto LABEL_1672;
              }
            }
          }
          if ((unint64_t)v1171 >= v1599)
          {
            if ((unint64_t)v1171 >= v1597)
              goto LABEL_1679;
          }
          else
          {
            if (*(_DWORD *)v1170 == *(_DWORD *)v1171)
            {
              v1171 = (_QWORD *)((char *)v1171 + 4);
              v1170 += 4;
            }
            if ((unint64_t)v1171 >= v1597)
            {
LABEL_1679:
              if ((unint64_t)v1171 < v1603)
                goto LABEL_1680;
              goto LABEL_1682;
            }
          }
          if (*(unsigned __int16 *)v1170 == *(unsigned __int16 *)v1171)
          {
            v1171 = (_QWORD *)((char *)v1171 + 2);
            v1170 += 2;
          }
          if ((unint64_t)v1171 < v1603)
          {
LABEL_1680:
            if (*v1170 == *(_BYTE *)v1171)
              LODWORD(v1171) = (_DWORD)v1171 + 1;
          }
LABEL_1682:
          v1144 = v1618;
          v1177 = (_DWORD)v1171 - (_DWORD)v1151;
          v780 = (unint64_t)v1587;
          v1175 = v1177 + 3;
          v1176 = v1175;
          if (v1166 >= v1175)
            goto LABEL_1656;
LABEL_1683:
          v1178 = &v1611[2 * v1141];
          *v1178 = v1165 + ((int)(v1529 << 31) >> 31);
          v1178[1] = v1175;
          ++v1141;
          if (v1175 > v1148)
          {
            v783 = v1611;
            LODWORD(v1144) = (_DWORD)v1618;
            goto LABEL_2042;
          }
          v1144 = v1618;
          v1166 = v1176;
          if (&v1618[v1176] == (unsigned __int8 *)v1603)
          {
            v783 = v1611;
            goto LABEL_2042;
          }
LABEL_1656:
          if (++v1165 < v1163)
            continue;
          break;
        }
        if (v1166 > 2)
        {
          v783 = v1611;
          goto LABEL_1988;
        }
        v1268 = *(_QWORD *)(v5 + 56);
        v1269 = *(_DWORD *)v1144;
        v1270 = 32 - *(_DWORD *)(v5 + 40);
        v783 = v1611;
        if (v1498 < v1150)
        {
          v1271 = v1498;
          do
          {
            *(_DWORD *)(v1268 + 4 * ((900185344 * *(_DWORD *)(v1149 + v1271)) >> v1270)) = v1271;
            ++v1271;
          }
          while (v1581 - (_DWORD)v1149 != v1271);
        }
        v1272 = *(unsigned int *)(v1268 + 4 * ((900185344 * v1269) >> v1270));
        if (v1272 < v1160 || (v1150 - v1272) >> 18 != 0)
        {
          v1498 = (_DWORD)v1618 - v1149;
          goto LABEL_1988;
        }
        v1361 = (_DWORD *)(v1149 + v1272);
        if (v1620 <= (unint64_t)v1144)
        {
          v1407 = (char *)v1144;
          if ((unint64_t)v1144 < v1599)
          {
LABEL_2083:
            if (*v1361 == *(_DWORD *)v1407)
            {
              v1407 += 4;
              ++v1361;
            }
          }
          goto LABEL_2085;
        }
        v1362 = *(_QWORD *)v1144 ^ *(_QWORD *)v1361;
        if (!v1362)
        {
          v1409 = 0;
          while (1)
          {
            v1407 = &v1492[v1409];
            if ((unint64_t)&v1492[v1409] >= v1620)
              break;
            v1410 = *(_QWORD *)(v1149 + v1272 + 8 + v1409);
            v1409 += 8;
            v1411 = *(_QWORD *)v1407 ^ v1410;
            if (v1411)
            {
              v1363 = v1409 + (__clz(__rbit64(v1411)) >> 3);
              v1498 = (_DWORD)v1618 - v1149;
              if (v1363 < 3)
                goto LABEL_1988;
              goto LABEL_2094;
            }
          }
          v1361 = (_DWORD *)(v1149 + v1272 + v1409 + 8);
          if ((unint64_t)v1407 < v1599)
            goto LABEL_2083;
LABEL_2085:
          if ((unint64_t)v1407 >= v1597)
          {
            if ((unint64_t)v1407 >= v1603)
              goto LABEL_2093;
          }
          else
          {
            if (*(unsigned __int16 *)v1361 == *(unsigned __int16 *)v1407)
            {
              v1407 += 2;
              v1361 = (_DWORD *)((char *)v1361 + 2);
            }
            if ((unint64_t)v1407 >= v1603)
            {
LABEL_2093:
              v1363 = v1407 - (char *)v1144;
              v1498 = (_DWORD)v1618 - v1149;
              if (v1363 >= 3)
                goto LABEL_2094;
              goto LABEL_1988;
            }
          }
          if (*(unsigned __int8 *)v1361 == *v1407)
            ++v1407;
          goto LABEL_2093;
        }
        v1363 = __clz(__rbit64(v1362)) >> 3;
        v1498 = (_DWORD)v1618 - v1149;
        if (v1363 >= 3)
        {
LABEL_2094:
          *v1611 = v1150 - v1272 + 2;
          v1611[1] = v1363;
          if (v1363 > v1148 || &v1144[v1363] == (unsigned __int8 *)v1603)
          {
            v1141 = 1;
            v1498 = (_DWORD)v1618 - v1149;
            *(_DWORD *)(v5 + 36) = v1150 + 1;
            goto LABEL_2042;
          }
          v1141 = 1;
          v1498 = (_DWORD)v1618 - v1149;
          v1166 = v1363;
        }
LABEL_1988:
        *(_DWORD *)(v1519 + 4 * v1511) = v1150;
        if (v1152 < v1160)
          goto LABEL_1989;
        v1340 = 0;
        v1341 = 0;
        v1342 = ~(-1 << v1503);
        v1343 = v1150 + 2;
        v1533 = (char *)v1524 + v1093;
        v1344 = v1149 + 8;
        while (2)
        {
          if (v1341 >= v1340)
            v1345 = v1340;
          else
            v1345 = v1341;
          v1346 = v1149 + v1152;
          v1347 = (char *)&v1144[v1345];
          v1348 = (_DWORD *)(v1346 + v1345);
          if (v1620 <= (unint64_t)&v1144[v1345])
          {
            v1351 = (char *)&v1144[v1345];
            if ((unint64_t)v1347 < v1599)
            {
LABEL_2000:
              if (*v1348 == *(_DWORD *)v1351)
              {
                v1351 += 4;
                ++v1348;
              }
            }
          }
          else
          {
            v1349 = *(_QWORD *)v1347 ^ *(_QWORD *)v1348;
            if (v1349)
            {
              v1350 = (__clz(__rbit64(v1349)) >> 3) + v1345;
              v783 = v1611;
              if (v1350 <= v1166)
                goto LABEL_1998;
LABEL_2011:
              if (v1350 > v1162 - v1152)
                v1162 = v1152 + v1350;
              v1352 = &v783[2 * v1141];
              *v1352 = v1343 - v1152;
              v1352[1] = v1350;
              ++v1141;
              v1353 = v1350 > 0x1000 || &v1144[v1350] == (unsigned __int8 *)v1603;
              v1166 = v1350;
              v780 = (unint64_t)v1587;
              if (v1353)
                goto LABEL_1989;
              goto LABEL_2017;
            }
            v1355 = 0;
            v1356 = &v1533[v1345];
            while (1)
            {
              v1357 = &v1356[v1355];
              if ((unint64_t)&v1356[v1355] >= v1620)
                break;
              v1358 = *(_QWORD *)(v1344 + v1345 + v1152 + v1355);
              v1355 += 8;
              v1359 = *(_QWORD *)v1357 ^ v1358;
              v5 = a1;
              if (v1359)
              {
                v1360 = __clz(__rbit64(v1359));
                v1144 = v1618;
                v1350 = v1355 + (v1360 >> 3) + v1345;
                v783 = v1611;
                if (v1350 > v1166)
                  goto LABEL_2011;
                goto LABEL_1998;
              }
            }
            v1351 = &v1533[v1345 + v1355];
            v1348 = (_DWORD *)(v1344 + v1345 + v1152 + v1355);
            v1144 = v1618;
            if ((unint64_t)v1351 < v1599)
              goto LABEL_2000;
          }
          if ((unint64_t)v1351 >= v1597)
          {
            if ((unint64_t)v1351 < v1603)
              goto LABEL_2008;
          }
          else
          {
            if (*(unsigned __int16 *)v1348 == *(unsigned __int16 *)v1351)
            {
              v1351 += 2;
              v1348 = (_DWORD *)((char *)v1348 + 2);
            }
            if ((unint64_t)v1351 >= v1603)
              goto LABEL_2010;
LABEL_2008:
            if (*(unsigned __int8 *)v1348 == *v1351)
              ++v1351;
          }
LABEL_2010:
          v1350 = v1351 - v1347 + v1345;
          v783 = v1611;
          if (v1350 > v1166)
            goto LABEL_2011;
LABEL_1998:
          v780 = (unint64_t)v1587;
LABEL_2017:
          v1354 = (unsigned int *)(v1552 + 8 * (v1152 & v1154));
          if (*(unsigned __int8 *)(v1346 + v1350) < v1144[v1350])
          {
            *v1161 = v1152;
            if (v1152 <= v1544)
            {
              v1161 = (unsigned int *)&v1632;
              goto LABEL_1989;
            }
            ++v1354;
            v1341 = v1350;
            v1161 = v1354;
            v294 = v1342-- != 0;
            if (!v294)
              goto LABEL_1989;
            goto LABEL_1991;
          }
          *v1557 = v1152;
          if (v1152 > v1544)
          {
            v1340 = v1350;
            v1557 = (unsigned int *)(v1552 + 8 * (v1152 & v1154));
            v294 = v1342-- != 0;
            if (!v294)
              goto LABEL_1989;
LABEL_1991:
            v1152 = *v1354;
            if (*v1354 < v1160)
              goto LABEL_1989;
            continue;
          }
          break;
        }
        v1557 = (unsigned int *)&v1632;
LABEL_1989:
        *v1557 = 0;
        *v1161 = 0;
        *(_DWORD *)(v5 + 36) = v1162 - 8;
LABEL_2042:
        v1631 = v1141;
        ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1628, (uint64_t)v783, &v1631, (_DWORD)v1144 - (_DWORD)v1571, v1142 - (_DWORD)v1144);
        v1364 = v1631;
        if (!v1631)
        {
LABEL_1589:
          v779 = v1609;
          v1088 = v1581;
          goto LABEL_1590;
        }
        v1365 = v1631 - 1;
        v1050 = v783[2 * v1365 + 1];
        if (v1050 <= v1540 && v1050 + v1093 <= 0xFFF)
        {
          v1366 = 0;
          v1367 = v1562 + v1568;
          v1368 = v1626;
          while (1)
          {
            v1369 = &v783[2 * v1366];
            v1370 = v1542;
            if (v1366)
              v1370 = *(v1369 - 1) + 1;
            v1371 = v1369[1];
            if (v1371 >= v1370)
              break;
LABEL_2046:
            if (++v1366 == v1364)
              goto LABEL_1589;
          }
          v1372 = *v1369;
          v1373 = __clz(v1372 + 1) ^ 0x1F;
          if (*(_DWORD *)(v5 + 160) == 1)
          {
            v1374 = 0;
            v1375 = v1093 + v1371;
            v1376 = v1093 + v1371;
            while (1)
            {
              v1378 = v1371 + v1093;
              v1379 = __clz(v1371 - 2);
              v1380 = ((v1371 - 2) << 8 >> (v1379 ^ 0x1F)) + (((v1379 ^ 0x1F) + (_DWORD)v1373) << 8) + v1367 + 4096;
              if (v1378 <= v1087)
              {
                if (v1380 >= (int)v775[7 * v1378])
                  goto LABEL_2053;
                goto LABEL_2052;
              }
              v1381 = v1087;
              v1382 = (v1375 - v1374) - (unint64_t)v1087;
              if (v1382 >= 2)
              {
                v1087 = (v1382 & 0xFFFFFFFFFFFFFFFELL) + v1087;
                v1383 = (v1376 - v1381) & 0xFFFFFFFFFFFFFFFELL;
                v1384 = &v1622[7 * v1381];
                do
                {
                  *(v1384 - 7) = 0x40000000;
                  *v1384 = 0x40000000;
                  v1384 += 14;
                  v1383 -= 2;
                }
                while (v1383);
                if (v1382 == (v1382 & 0xFFFFFFFFFFFFFFFELL))
                  goto LABEL_2052;
              }
              else
              {
                v1087 = v1087;
              }
              v1385 = &v1143[7 * v1087];
              do
              {
                ++v1087;
                *v1385 = 0x40000000;
                v1385 += 7;
              }
              while (v1087 < v1378);
LABEL_2052:
              v1377 = (signed int *)&v775[7 * v1378];
              v1377[2] = v1371;
              v1377[3] = v1368;
              *v1377 = v1380;
              v1377[1] = v1372;
LABEL_2053:
              --v1371;
              ++v1374;
              --v1376;
              if (v1371 < v1370)
                goto LABEL_2046;
            }
          }
          v1386 = 0;
          v1388 = *(_QWORD *)(v5 + 96);
          v1387 = *(_QWORD *)(v5 + 104);
          v1389 = *(_DWORD *)(v5 + 156) + *(_DWORD *)(v5 + 152) + 51;
          v1390 = v1093 + v1371;
          v1391 = v1093 + v1371;
          while (2)
          {
            v1393 = v1371 - 3;
            if (v1371 - 3 < 0x80)
              v1394 = ZSTD_MLcode_ML_Code[v1393];
            else
              v1394 = 67 - __clz(v1393);
            v1395 = v1371 + v1093;
            v1396 = *(_DWORD *)(v1387 + 4 * v1373) + 1;
            v1397 = __clz(v1396) ^ 0x1F;
            v1398 = 4 * v1394;
            v1399 = *(unsigned int *)((char *)ML_bits + v1398);
            LODWORD(v1398) = *(_DWORD *)(v1388 + v1398) + 1;
            v1400 = __clz(v1398) ^ 0x1F;
            v1401 = v1367
                  + v1389
                  - (v1396 << 8 >> v1397)
                  - ((_DWORD)v1398 << 8 >> v1400)
                  + (((_DWORD)v1373 + v1399 - v1397 - v1400) << 8);
            if (v1395 <= v1087)
            {
              v1368 = v1626;
              if (v1401 < (int)v775[7 * v1395])
                goto LABEL_2066;
            }
            else
            {
              v1402 = v1087;
              v1403 = (v1390 - v1386) - (unint64_t)v1087;
              if (v1403 < 2)
              {
                v1087 = v1087;
                v1368 = v1626;
                goto LABEL_2079;
              }
              v1087 = (v1403 & 0xFFFFFFFFFFFFFFFELL) + v1087;
              v1404 = (v1391 - v1402) & 0xFFFFFFFFFFFFFFFELL;
              v1405 = &v1622[7 * v1402];
              do
              {
                *(v1405 - 7) = 0x40000000;
                *v1405 = 0x40000000;
                v1405 += 14;
                v1404 -= 2;
              }
              while (v1404);
              v1143 = v775 + 7;
              v1368 = v1626;
              if (v1403 != (v1403 & 0xFFFFFFFFFFFFFFFELL))
              {
LABEL_2079:
                v1406 = &v1143[7 * v1087];
                do
                {
                  ++v1087;
                  *v1406 = 0x40000000;
                  v1406 += 7;
                }
                while (v1087 < v1395);
              }
LABEL_2066:
              v1392 = &v775[7 * v1395];
              v1392[2] = v1371;
              v1392[3] = v1368;
              *v1392 = v1401;
              v1392[1] = v1372;
            }
            --v1371;
            ++v1386;
            --v1391;
            if (v1371 < v1370)
              goto LABEL_2046;
            continue;
          }
        }
        v1045 = v1626;
        if (*v1534)
          v1475 = 0;
        else
          v1475 = v775[7 * v1093 + 3];
        v779 = v1609;
        v1059 = v783[2 * v1365];
        v1479 = v1093 - v1475;
        if (v1479 <= 0x1000)
          v1058 = v1479;
        else
          v1058 = 0;
        v782 = v1595;
        if (!v1050)
        {
LABEL_2198:
          v1480 = &v775[7 * v1058];
          v1481 = *((_QWORD *)v1480 + 2);
          *((_DWORD *)a3 + 2) = v1480[6];
          *a3 = v1481;
          goto LABEL_2128;
        }
LABEL_2114:
        v1413 = &v775[7 * v1058 + 4];
        if (v1059 < 3)
        {
          if (v1045)
            v1418 = v1059;
          else
            v1418 = v1059 + 1;
          if (v1418)
          {
            if (v1418 == 3)
            {
              v1415 = *v1413;
              v1417 = v1415 - 1;
            }
            else
            {
              v1417 = v1413[v1418];
              v1415 = *v1413;
            }
            v658 = v1418 > 1;
            v1420 = 2;
            if (v658)
              v1420 = 1;
            v1414 = &v1413[v1420];
          }
          else
          {
            v1419 = *(_QWORD *)v1413;
            v1414 = &v775[7 * v1058 + 6];
            v1417 = v1419;
            v1415 = HIDWORD(v1419);
          }
        }
        else
        {
          v1416 = *v1413;
          v1414 = &v775[7 * v1058 + 5];
          v1415 = v1416;
          v1417 = v1059 - 2;
        }
        v1421 = *v1414;
        *a3 = v1417 | (v1415 << 32);
        *((_DWORD *)a3 + 2) = v1421;
LABEL_2128:
        v1422 = v1058 + 1;
        v1423 = &v775[7 * v1058 + 7];
        *v1423 = v1526;
        v1423[1] = v1059;
        v1423[2] = v1050;
        v1423[3] = v1045;
        *((_QWORD *)v1423 + 2) = v1634;
        v1423[6] = v1635;
        v1424 = v1058;
        if (!v1058)
        {
          v1430 = 1;
          v1431 = a2;
          goto LABEL_2137;
        }
        do
        {
          v1425 = &v775[7 * v1424];
          v1426 = v1425[3] + v1425[2];
          v1427 = &v775[7 * v1058];
          v1428 = *(_OWORD *)v1425;
          *(_OWORD *)(v1427 + 3) = *(_OWORD *)(v1425 + 3);
          *(_OWORD *)v1427 = v1428;
          --v1058;
          v294 = v1424 >= v1426;
          v1424 -= v1426;
          v1429 = v1424 != 0 && v294;
          if (!v294)
            v1424 = 0;
        }
        while (v1429);
        v1430 = v1058 + 1;
        v1431 = a2;
        if (v1430 <= v1422)
        {
          while (1)
          {
LABEL_2137:
            while (1)
            {
              v1434 = v1430;
              v1436 = v775[7 * v1430 + 2];
              v1435 = v775[7 * v1430 + 3];
              if (v1436)
                break;
              v779 = &v782[v1435];
              v1430 = v1434 + 1;
              if (v1434 + 1 > v1422)
                goto LABEL_2133;
            }
            v1437 = v775[7 * v1434 + 1];
            if (*(_DWORD *)(v5 + 176) != 2)
            {
              if ((_DWORD)v1435)
              {
                v1438 = *v1570;
                v1439 = v782;
                v1440 = v1435;
                do
                {
                  v1441 = *v1439++;
                  *(_DWORD *)&v1438[4 * v1441] += 2;
                  --v1440;
                }
                while (v1440);
              }
              *(_DWORD *)(v5 + 128) += 2 * v1435;
            }
            v1442 = v1435 < 0x40 ? ZSTD_LLcode_LL_Code[v1435] : 50 - __clz(v1435);
            ++*(_DWORD *)(*(_QWORD *)(v5 + 88) + 4 * v1442);
            ++*(_DWORD *)(v5 + 132);
            v1443 = v1437 + 1;
            v1444 = __clz(v1437 + 1);
            ++*(_DWORD *)(*(_QWORD *)(v5 + 104) + 4 * (v1444 ^ 0x1F));
            ++*(_DWORD *)(v5 + 140);
            v1445 = v1436 - 3;
            v1446 = v1436 - 3 < 0x80 ? ZSTD_MLcode_ML_Code[v1445] : 67 - __clz(v1445);
            ++*(_DWORD *)(*(_QWORD *)(v5 + 96) + 4 * v1446);
            ++*(_DWORD *)(v5 + 136);
            v1447 = &v782[v1435];
            v1448 = (char *)v1431[3];
            if ((unint64_t)&v782[v1435] > v780)
              break;
            *(_OWORD *)v1448 = *(_OWORD *)v782;
            v1451 = v1431[3];
            if (v1435 > 0x10)
            {
              v1452 = (_OWORD *)(v1451 + 16);
              v1453 = v1451 + v1435;
              v1454 = (__int128 *)(v782 + 16);
              do
              {
                v1455 = *v1454++;
                *v1452++ = v1455;
              }
              while ((unint64_t)v1452 < v1453);
LABEL_2182:
              v1431[3] += v1435;
              v1462 = v1431[1];
              if (v1435 >= 0x10000)
              {
                v1473 = (unint64_t)(v1462 - *v1431) >> 3;
                *((_DWORD *)v1431 + 18) = 1;
                *((_DWORD *)v1431 + 19) = v1473;
              }
              goto LABEL_2184;
            }
            v1431[3] = v1451 + v1435;
            v1462 = v1431[1];
LABEL_2184:
            *(_WORD *)(v1462 + 4) = v1435;
            *(_DWORD *)v1462 = v1443;
            if (v1445 >= 0x10000)
            {
              v1474 = (unint64_t)(v1462 - *v1431) >> 3;
              *((_DWORD *)v1431 + 18) = 2;
              *((_DWORD *)v1431 + 19) = v1474;
            }
            *(_WORD *)(v1462 + 6) = v1445;
            v1431[1] = v1462 + 8;
            v782 += v1436 + v1435;
            v779 = v782;
            v1430 = v1434 + 1;
            if (v1434 + 1 > v1422)
              goto LABEL_2133;
          }
          if ((unint64_t)v782 <= v780)
          {
            v1450 = &v1448[v780 - (_QWORD)v782];
            v1456 = v782;
            v1457 = (char *)v1431[3];
            do
            {
              v1458 = *(_OWORD *)v1456;
              v1456 += 16;
              *(_OWORD *)v1457 = v1458;
              v1457 += 16;
            }
            while (v1457 < v1450);
            v1449 = (unsigned __int8 *)v780;
            if (v780 >= (unint64_t)v1447)
              goto LABEL_2182;
          }
          else
          {
            v1449 = v782;
            v1450 = (char *)v1431[3];
            if (v782 >= v1447)
              goto LABEL_2182;
          }
          if ((unint64_t)v782 <= v780)
            v1459 = (unsigned __int8 *)v780;
          else
            v1459 = v782;
          v1460 = &v782[v1435] - v1459;
          if (v1460 < 8)
          {
            v1461 = v1449;
            goto LABEL_2181;
          }
          if ((unint64_t)(v1448 - (char *)v782) < 0x20)
          {
            v1461 = v1449;
            goto LABEL_2181;
          }
          if (v1460 >= 0x20)
          {
            v1463 = v1460 & 0xFFFFFFFFFFFFFFE0;
            v1464 = (__int128 *)(v1449 + 16);
            v1465 = &v1448[v1459 - v782 + 16];
            v1466 = v1460 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v1467 = *v1464;
              *((_OWORD *)v1465 - 1) = *(v1464 - 1);
              *(_OWORD *)v1465 = v1467;
              v1464 += 2;
              v1465 += 32;
              v1466 -= 32;
            }
            while (v1466);
            if (v1460 == v1463)
              goto LABEL_2182;
            if ((v1460 & 0x18) == 0)
            {
              v1461 = &v1449[v1463];
              v1450 += v1463;
              goto LABEL_2181;
            }
          }
          else
          {
            v1463 = 0;
          }
          v1450 += v1460 & 0xFFFFFFFFFFFFFFF8;
          v1461 = &v1449[v1460 & 0xFFFFFFFFFFFFFFF8];
          v1468 = &v1449[v1463];
          v1469 = &v1448[&v1459[v1463] - v782];
          v1470 = v1463 - (v1460 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v1471 = *(_QWORD *)v1468;
            v1468 += 8;
            *(_QWORD *)v1469 = v1471;
            v1469 += 8;
            v1470 += 8;
          }
          while (v1470);
          if (v1460 == (v1460 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_2182;
          do
          {
LABEL_2181:
            v1472 = *v1461++;
            *v1450++ = v1472;
          }
          while (v1461 < v1447);
          goto LABEL_2182;
        }
LABEL_2133:
        if (*(_DWORD *)(v5 + 176) != 2)
        {
          v1432 = *(_DWORD *)(v5 + 128) + 1;
          v1433 = __clz(v1432) ^ 0x1F;
          *(_DWORD *)(v5 + 144) = (v1432 << 8 >> v1433) + (v1433 << 8);
        }
        v784 = *(_DWORD *)(v5 + 140) + 1;
        v785 = __clz(v784);
        v786 = vadd_s32(*(int32x2_t *)(v5 + 132), (int32x2_t)0x100000001);
        v787 = (int32x2_t)veor_s8((int8x8_t)vclz_s32(v786), (int8x8_t)0x1F0000001FLL);
        *(int32x2_t *)(v5 + 148) = vadd_s32(vshl_n_s32(v787, 8uLL), (int32x2_t)vshl_u32((uint32x2_t)vshl_n_s32(v786, 8uLL), (uint32x2_t)vneg_s32(v787)));
        *(_DWORD *)(v5 + 156) = (v784 << 8 >> (v785 ^ 0x1F)) + ((v785 ^ 0x1F) << 8);
        if ((unint64_t)v779 >= v1593)
        {
LABEL_2230:
          v1571 = v782;
          v770 = (unsigned __int8 *)v1603;
          return v770 - v1571;
        }
      }
      else
      {
        ++v779;
        v783 = v1611;
        if ((unint64_t)v779 >= v1593)
          goto LABEL_2230;
      }
    }
    v791 = 0;
    if (*(_DWORD *)(v5 + 212) >= 0xFFFu)
      v830 = 4095;
    else
      v830 = *(_DWORD *)(v5 + 212);
    v831 = *(_QWORD *)(v5 + 8);
    v779 = v1609;
    v832 = (_DWORD)v1609 - v831;
    v833 = -1 << (*(_DWORD *)(v5 + 196) - 1);
    v834 = ~v833;
    v835 = (_DWORD)v1609 - v831 + v833 + 1;
    if ((int)v1609 - (int)v831 < ~v833)
      v835 = 0;
    v1614 = v835;
    v836 = 1 << *(_DWORD *)(v5 + 192);
    if (v832 - *(_DWORD *)(v5 + 28) > v836 && *(_DWORD *)(v5 + 32) == 0)
      v838 = v832 - v836;
    else
      v838 = *(_DWORD *)(v5 + 28);
    if (v838 <= 1)
      v839 = 1;
    else
      v839 = v838;
    v840 = v832 - *(_DWORD *)(v5 + 24);
    v841 = (char *)(v1609 + 12);
    v1565 = *(_DWORD *)(v5 + 204);
    v842 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v1609) >> -(char)*(_DWORD *)(v5 + 200);
    v1578 = *(_QWORD *)(v5 + 48);
    v843 = *(_DWORD *)(v1578 + 4 * v842);
    v844 = v1625 == 0;
    v845 = *(_QWORD *)(v5 + 64);
    v846 = (unsigned int *)(v845 + 8 * (v832 & ~v833));
    v847 = v846 + 1;
    v848 = v832 + 9;
    LODWORD(v1632) = 0;
    if (v1625)
      v849 = 3;
    else
      v849 = 4;
    v850 = v1609 + 4;
    if (v1625)
      v851 = 0;
    else
      v851 = -1;
    v852 = (v1542 - 1);
    v783 = v1611;
    while (1)
    {
      if (v844 == 3)
      {
        v853 = *(_DWORD *)a3 - 1;
        if (*(_DWORD *)a3 - 2 >= v840)
          goto LABEL_1221;
      }
      else
      {
        v853 = *((_DWORD *)a3 + v844);
        if (v853 - 1 >= v840)
          goto LABEL_1221;
      }
      v854 = v779;
      v855 = *(_DWORD *)v779;
      v856 = *(_DWORD *)&v854[-v853];
      if (v832 - v853 < v838 || v855 != v856)
      {
        v5 = a1;
        v779 = v1609;
        goto LABEL_1221;
      }
      v858 = -(uint64_t)v853;
      v859 = (char *)v850 - v853;
      v5 = a1;
      if (v1620 <= (unint64_t)v850)
        break;
      v860 = *v850 ^ *(_QWORD *)v859;
      if (v860)
      {
        v779 = v1609;
        v861 = (__clz(__rbit64(v860)) >> 3) + 4;
        v862 = v861;
        if (v852 < v861)
          goto LABEL_1247;
        goto LABEL_1221;
      }
      do
      {
        v863 = &v841[v860];
        if ((unint64_t)&v841[v860] >= v1620)
        {
          v859 = &v863[v858];
          v5 = a1;
          if ((unint64_t)v863 >= v1599)
            goto LABEL_1238;
          goto LABEL_1236;
        }
        v866 = *(_QWORD *)&v841[v858 + v860];
        v860 += 8;
        v867 = *(_QWORD *)v863 ^ v866;
      }
      while (!v867);
      v868 = __clz(__rbit64(v867));
      v5 = a1;
      v779 = v1609;
      v783 = v1611;
      v861 = v860 + (v868 >> 3) + 4;
      v862 = v861;
      if (v852 < v861)
      {
LABEL_1247:
        v865 = &v783[2 * v791];
        *v865 = v844 + v851;
        v865[1] = v861;
        ++v791;
        if (v861 > v830)
          goto LABEL_1410;
        v779 = v1609;
        v852 = v862;
        if (&v1609[v862] == (unsigned __int8 *)v1603)
          goto LABEL_1554;
      }
LABEL_1221:
      if (++v844 >= v849)
      {
        *(_DWORD *)(v1578 + 4 * v842) = v832;
        if (v843 < v839)
          goto LABEL_1552;
        v869 = 0;
        v870 = 0;
        v871 = ~(-1 << v1565);
        v872 = v832 + 2;
        v873 = v779 + 8;
        v874 = v831 + 8;
        while (1)
        {
          v875 = v870 >= v869 ? v869 : v870;
          v876 = v831 + v843;
          v877 = (char *)&v779[v875];
          v878 = (_QWORD *)(v876 + v875);
          if (v1620 <= (unint64_t)&v779[v875])
            break;
          v879 = *(_QWORD *)v877 ^ *v878;
          if (v879)
          {
            v783 = v1611;
            v880 = (unsigned __int8 *)v1603;
            v881 = (__clz(__rbit64(v879)) >> 3) + v875;
            if (v881 <= v852)
              goto LABEL_1265;
            goto LABEL_1278;
          }
          v887 = 0;
          v888 = (char *)v873 + v875;
          do
          {
            v889 = &v888[v887];
            if ((unint64_t)&v888[v887] >= v1620)
            {
              v883 = (unsigned __int8 *)v873 + v875 + v887;
              v878 = (_QWORD *)(v874 + v875 + v843 + v887);
              v783 = v1611;
              if ((unint64_t)v883 >= v1599)
                goto LABEL_1269;
              goto LABEL_1267;
            }
            v890 = *(_QWORD *)(v874 + v875 + v843 + v887);
            v887 += 8;
            v891 = *(_QWORD *)v889 ^ v890;
            v5 = a1;
          }
          while (!v891);
          v892 = v887 + (__clz(__rbit64(v891)) >> 3);
          v783 = v1611;
          v880 = (unsigned __int8 *)v1603;
          v881 = v892 + v875;
          if (v881 <= v852)
          {
LABEL_1265:
            v882 = v1609;
            goto LABEL_1284;
          }
LABEL_1278:
          if (v881 > v848 - v843)
            v848 = v843 + v881;
          v884 = &v783[2 * v791];
          *v884 = v872 - v843;
          v884[1] = v881;
          ++v791;
          v882 = v1609;
          v885 = v881 > 0x1000 || &v1609[v881] == v880;
          v852 = v881;
          if (v885)
          {
LABEL_1549:
            v779 = v882;
            goto LABEL_1552;
          }
LABEL_1284:
          v886 = (unsigned int *)(v845 + 8 * (v843 & v834));
          v779 = v882;
          if (*(unsigned __int8 *)(v876 + v881) >= v882[v881])
          {
            *v847 = v843;
            if (v843 <= v1614)
              goto LABEL_1551;
            v869 = v881;
            v847 = (unsigned int *)(v845 + 8 * (v843 & v834));
            v294 = v871-- != 0;
            if (!v294)
              goto LABEL_1552;
          }
          else
          {
            *v846 = v843;
            if (v843 <= v1614)
            {
LABEL_1550:
              v846 = (unsigned int *)&v1632;
              goto LABEL_1552;
            }
            ++v886;
            v870 = v881;
            v846 = v886;
            v294 = v871-- != 0;
            if (!v294)
              goto LABEL_1552;
          }
          v843 = *v886;
          if (*v886 < v839)
            goto LABEL_1552;
        }
        v883 = &v779[v875];
        v783 = v1611;
        if ((unint64_t)v877 >= v1599)
          goto LABEL_1269;
LABEL_1267:
        if (*(_DWORD *)v878 == *(_DWORD *)v883)
        {
          v883 += 4;
          v878 = (_QWORD *)((char *)v878 + 4);
        }
LABEL_1269:
        if ((unint64_t)v883 >= v1597)
        {
          if ((unint64_t)v883 >= v1603)
            goto LABEL_1277;
        }
        else
        {
          if (*(unsigned __int16 *)v878 == *(unsigned __int16 *)v883)
          {
            v883 += 2;
            v878 = (_QWORD *)((char *)v878 + 2);
          }
          if ((unint64_t)v883 >= v1603)
          {
LABEL_1277:
            v880 = (unsigned __int8 *)v1603;
            v881 = v883 - (unsigned __int8 *)v877 + v875;
            if (v881 <= v852)
              goto LABEL_1265;
            goto LABEL_1278;
          }
        }
        if (*(unsigned __int8 *)v878 == *v883)
          ++v883;
        goto LABEL_1277;
      }
    }
    v863 = (char *)(v1609 + 4);
    if ((unint64_t)v850 >= v1599)
      goto LABEL_1238;
LABEL_1236:
    if (*(_DWORD *)v859 == *(_DWORD *)v863)
    {
      v863 += 4;
      v859 += 4;
    }
LABEL_1238:
    if ((unint64_t)v863 >= v1597)
    {
      if ((unint64_t)v863 >= v1603)
        goto LABEL_1246;
    }
    else
    {
      if (*(unsigned __int16 *)v859 == *(unsigned __int16 *)v863)
      {
        v863 += 2;
        v859 += 2;
      }
      if ((unint64_t)v863 >= v1603)
      {
LABEL_1246:
        v864 = (_DWORD)v863 - (_DWORD)v850;
        v779 = v1609;
        v783 = v1611;
        v861 = v864 + 4;
        v862 = v861;
        if (v852 < v861)
          goto LABEL_1247;
        goto LABEL_1221;
      }
    }
    if (*v859 == *v863)
      LODWORD(v863) = (_DWORD)v863 + 1;
    goto LABEL_1246;
  }
  return v770 - v1571;
}

unint64_t ZSTD_compressBlock_fast_extDict(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  int v5;

  if ((*(_DWORD *)(a1 + 208) - 5) >= 3)
    v5 = 4;
  else
    v5 = *(_DWORD *)(a1 + 208);
  return ZSTD_compressBlock_fast_extDict_generic(a1, a2, a3, a4, a5, v5);
}

unint64_t ZSTD_compressBlock_doubleFast_extDict(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  int v5;

  if ((*(_DWORD *)(a1 + 208) - 5) >= 3)
    v5 = 4;
  else
    v5 = *(_DWORD *)(a1 + 208);
  return ZSTD_compressBlock_doubleFast_extDict_generic(a1, a2, a3, a4, a5, v5);
}

unint64_t ZSTD_compressBlock_greedy_extDict(uint64_t a1, uint64_t a2, unsigned int *a3, _OWORD *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  _BYTE *v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _DWORD *v65;
  unint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _DWORD *v98;
  unint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  _DWORD *v131;
  unint64_t v132;
  unsigned __int8 *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unsigned __int8 *v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  unsigned int v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  unsigned __int8 *v146;
  _OWORD *v147;
  __int128 v148;
  unsigned __int8 *v149;
  unint64_t v150;
  unsigned __int8 *v151;
  uint64_t v152;
  _OWORD *v153;
  unint64_t v154;
  __int128 *v155;
  __int128 v156;
  uint64_t v157;
  unint64_t v158;
  __int128 *v159;
  _OWORD *v160;
  unint64_t v161;
  __int128 v162;
  uint64_t *v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  char v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 *v173;
  unsigned int v174;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  char *v180;
  _QWORD *v181;
  char *v182;
  unint64_t v183;
  unint64_t v184;
  __int16 v185;
  char *v186;
  _DWORD *v187;
  char *v188;
  unint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  unint64_t v193;
  unsigned __int8 *v194;
  _DWORD *v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  _QWORD *v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  char *v223;
  char *v224;
  char *v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unsigned int v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unsigned int v236;
  char *v237;
  uint64_t v238;
  char *v239;
  unint64_t v240;
  int v241;
  unsigned int v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;

  v5 = (unint64_t)a4 + a5;
  v6 = v5 - 8;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = (_QWORD *)(v7 + v8);
  v11 = *a3;
  v10 = a3[1];
  if ((_OWORD *)(v7 + v8) == a4)
    v12 = (unsigned __int8 *)a4 + 1;
  else
    v12 = (unsigned __int8 *)a4;
  v243 = v12;
  v244 = (unsigned __int8 *)a4;
  if ((unint64_t)v12 < v6)
  {
    v13 = a2;
    v14 = a1;
    v15 = *(_QWORD *)(a1 + 16);
    v237 = (char *)(v15 + v8);
    v204 = v15 + *(unsigned int *)(a1 + 28);
    v241 = v8 - 1;
    v242 = 1 << *(_DWORD *)(a1 + 192);
    v16 = v5 - 7;
    v229 = v5 - 1;
    v230 = v5 - 3;
    v17 = v5 - 32;
    v238 = v8 + v7 + 8;
    v234 = v5;
    v208 = v5 - 8;
    v216 = *(_DWORD *)(a1 + 24);
    v217 = *(_QWORD *)(a1 + 8);
    v214 = v15;
    v215 = (_QWORD *)(v7 + v8);
    v232 = v5 - 32;
    v233 = v5 - 7;
    do
    {
      v236 = v10;
      v239 = (char *)(v243 + 1);
      v18 = (_DWORD)v243 - v7 + 1;
      v19 = *(_DWORD *)(v14 + 28);
      v20 = *(_DWORD *)(v14 + 32);
      v21 = v18 - v242;
      if (v18 - v19 <= v242 || v20 != 0)
        v21 = *(_DWORD *)(v14 + 28);
      v23 = (v18 - v11);
      if (v23 >= v8)
        v24 = v7;
      else
        v24 = v15;
      if ((v241 - v23) >= 3 && v23 > v21)
      {
        v25 = v24 + v23;
        if (*(_DWORD *)v239 == *(_DWORD *)v25)
        {
          if (v23 >= v8)
            v26 = (char *)v5;
          else
            v26 = v237;
          v27 = ZSTD_count_2segments(v243 + 5, (char *)(v25 + 4), v5, v26, v9);
          v17 = v232;
          LODWORD(v28) = 0;
          v29 = v27 + 4;
          v30 = v243 + 1;
          v31 = v239 - (char *)v244;
          v32 = *(_OWORD **)(v13 + 24);
          if ((unint64_t)v239 <= v232)
            goto LABEL_205;
LABEL_24:
          if ((unint64_t)v244 <= v17)
          {
            v146 = v244;
            v34 = (char *)v32 + v17 - (_QWORD)v244;
            v147 = v32;
            do
            {
              v148 = *(_OWORD *)v146;
              v146 += 16;
              *v147++ = v148;
            }
            while (v147 < (_OWORD *)v34);
            v33 = (_OWORD *)v17;
            v5 = v234;
            v16 = v233;
            if (v17 >= (unint64_t)v30)
              goto LABEL_222;
          }
          else
          {
            v33 = v244;
            v34 = v32;
            v5 = v234;
            v16 = v233;
            if (v244 >= v30)
              goto LABEL_222;
          }
          if ((unint64_t)v244 <= v17)
            v149 = (unsigned __int8 *)v17;
          else
            v149 = v244;
          v150 = v30 - v149;
          if ((unint64_t)(v30 - v149) < 8)
          {
            v151 = (unsigned __int8 *)v33;
            goto LABEL_221;
          }
          if ((unint64_t)((char *)v32 - (char *)v244) < 0x20)
          {
            v151 = (unsigned __int8 *)v33;
            goto LABEL_221;
          }
          if (v150 >= 0x20)
          {
            v158 = v150 & 0xFFFFFFFFFFFFFFE0;
            v159 = v33 + 1;
            v160 = (_OWORD *)((char *)v32 + v149 - v244 + 16);
            v161 = v150 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v162 = *v159;
              *(v160 - 1) = *(v159 - 1);
              *v160 = v162;
              v159 += 2;
              v160 += 2;
              v161 -= 32;
            }
            while (v161);
            if (v150 == v158)
              goto LABEL_222;
            if ((v150 & 0x18) == 0)
            {
              v151 = (unsigned __int8 *)v33 + v158;
              v34 += v158;
              do
              {
LABEL_221:
                v167 = *v151++;
                *v34++ = v167;
              }
              while (v151 < v30);
              goto LABEL_222;
            }
          }
          else
          {
            v158 = 0;
          }
          v34 += v150 & 0xFFFFFFFFFFFFFFF8;
          v151 = (unsigned __int8 *)v33 + (v150 & 0xFFFFFFFFFFFFFFF8);
          v163 = (uint64_t *)((char *)v33 + v158);
          v164 = (_QWORD *)((char *)v32 + &v149[v158] - v244);
          v165 = v158 - (v150 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v166 = *v163++;
            *v164++ = v166;
            v165 += 8;
          }
          while (v165);
          if (v150 != (v150 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_221;
LABEL_222:
          *(_QWORD *)(v13 + 24) += v31;
          v157 = *(_QWORD *)(v13 + 8);
          if (v31 >= 0x10000)
          {
            v168 = (unint64_t)(v157 - *(_QWORD *)v13) >> 3;
            *(_DWORD *)(v13 + 72) = 1;
            *(_DWORD *)(v13 + 76) = v168;
          }
          goto LABEL_224;
        }
      }
      v35 = *(_DWORD *)(v14 + 208);
      v231 = v11;
      if ((v35 - 6) < 2)
      {
        v36 = *(_DWORD *)(v14 + 196);
        v37 = 1 << v36;
        v39 = *(_QWORD *)(v14 + 8);
        v38 = *(_QWORD *)(v14 + 16);
        v40 = (_DWORD)v243 - v39;
        v41 = 1 << *(_DWORD *)(v14 + 192);
        v42 = (_DWORD)v243 - (_DWORD)v39 - v19 > v41 && v20 == 0;
        v43 = *(_QWORD *)(v14 + 64);
        v44 = *(unsigned int *)(v14 + 24);
        if (v42)
          v45 = (_DWORD)v243 - (_DWORD)v39 - v41;
        else
          v45 = v19;
        if (v40 >= v37)
          v46 = v40 - v37;
        else
          v46 = 0;
        v47 = *(_QWORD *)(v14 + 48);
        v48 = *(_DWORD *)(v14 + 204);
        v49 = *(unsigned int *)(v14 + 36);
        v50 = 64 - *(_DWORD *)(v14 + 200);
        if (v49 < v40)
        {
          v51 = ~(-1 << v36);
          do
          {
            v52 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v39 + v49)) >> v50);
            *(_DWORD *)(v43 + 4 * (v49 & v51)) = *(_DWORD *)(v47 + v52);
            *(_DWORD *)(v47 + v52) = v49++;
          }
          while (v49 < ((_DWORD)v243 - v39));
        }
        *(_DWORD *)(v14 + 36) = v40;
        v211 = *(_QWORD *)v243;
        v53 = *(_DWORD *)(v47 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v243) >> v50));
        if (v53 >= v45)
        {
          v54 = v37 - 1;
          v224 = (char *)(v38 + v44);
          v55 = 1 << v48;
          v221 = v40 + 2;
          v56 = v243 + 8;
          v205 = v39 + 8;
          v57 = 3;
          v235 = 999999999;
          v218 = v43;
          while (1)
          {
            v58 = v53;
            if (v53 < v44)
            {
              if (*(_DWORD *)(v38 + v53) != *(_DWORD *)v243)
                goto LABEL_64;
              v59 = v38;
              v60 = v46;
              v61 = v45;
              v62 = v54;
              v63 = v57;
              v64 = ZSTD_count_2segments(v243 + 4, (char *)(v38 + v53 + 4), v5, v224, (_QWORD *)(v39 + v44));
              v57 = v63;
              v54 = v62;
              v45 = v61;
              v46 = v60;
              v43 = v218;
              v38 = v59;
              v17 = v232;
              v16 = v233;
              v5 = v234;
              v29 = v64 + 4;
              if (v64 + 4 <= v57)
                goto LABEL_64;
              goto LABEL_63;
            }
            v65 = (_DWORD *)(v39 + v53);
            if (*(unsigned __int8 *)(v39 + v58 + v57) != v243[v57])
              goto LABEL_64;
            if (v16 <= (unint64_t)v243)
            {
              v67 = v243;
              if ((unint64_t)v243 < v230)
              {
LABEL_52:
                if (*v65 == *(_DWORD *)v67)
                {
                  v67 += 4;
                  ++v65;
                }
              }
              goto LABEL_54;
            }
            v66 = *(_QWORD *)v65 ^ v211;
            if (!v66)
              break;
            v29 = __clz(__rbit64(v66)) >> 3;
            if (v29 <= v57)
              goto LABEL_64;
LABEL_63:
            v235 = v221 - v58;
            v57 = v29;
            if (&v243[v29] == (unsigned __int8 *)v5)
              goto LABEL_172;
LABEL_64:
            if (v58 <= v46 || (--v55, !v55))
            {
              v29 = v57;
              goto LABEL_172;
            }
            v53 = *(_DWORD *)(v43 + 4 * (v58 & v54));
            v29 = v57;
            if (v53 < v45)
              goto LABEL_172;
          }
          v68 = 0;
          while (1)
          {
            v67 = (unsigned __int8 *)&v56[v68];
            if ((unint64_t)&v56[v68] >= v16)
              break;
            v69 = *(_QWORD *)(v205 + v58 + v68 * 8);
            ++v68;
            v70 = *(_QWORD *)v67 ^ v69;
            if (v70)
            {
              v29 = v68 * 8 + (__clz(__rbit64(v70)) >> 3);
              if (v29 > v57)
                goto LABEL_63;
              goto LABEL_64;
            }
          }
          v65 = (_DWORD *)(v205 + v58 + v68 * 8);
          if ((unint64_t)v67 < v230)
            goto LABEL_52;
LABEL_54:
          if ((unint64_t)v67 >= v229)
          {
            if ((unint64_t)v67 >= v5)
              goto LABEL_62;
          }
          else
          {
            if (*(unsigned __int16 *)v65 == *(unsigned __int16 *)v67)
            {
              v67 += 2;
              v65 = (_DWORD *)((char *)v65 + 2);
            }
            if ((unint64_t)v67 >= v5)
            {
LABEL_62:
              v29 = v67 - v243;
              if (v29 <= v57)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (*(unsigned __int8 *)v65 == *v67)
            ++v67;
          goto LABEL_62;
        }
LABEL_6:
        v243 += ((v243 - v244) >> 8) + 1;
        LODWORD(v8) = v216;
        v7 = v217;
        v11 = v231;
        v15 = v214;
        v9 = v215;
LABEL_7:
        v10 = v236;
        continue;
      }
      if (v35 == 5)
      {
        v71 = *(_DWORD *)(v14 + 196);
        v72 = 1 << v71;
        v74 = *(_QWORD *)(v14 + 8);
        v73 = *(_QWORD *)(v14 + 16);
        v75 = (_DWORD)v243 - v74;
        v76 = 1 << *(_DWORD *)(v14 + 192);
        v77 = (_DWORD)v243 - (_DWORD)v74 - v19 > v76 && v20 == 0;
        v78 = *(_QWORD *)(v14 + 64);
        v79 = *(unsigned int *)(v14 + 24);
        if (v77)
          v80 = (_DWORD)v243 - v74 - v76;
        else
          v80 = *(_DWORD *)(v14 + 28);
        if (v75 >= v72)
          v81 = v75 - v72;
        else
          v81 = 0;
        v82 = *(_QWORD *)(v14 + 48);
        v83 = *(_DWORD *)(v14 + 204);
        v84 = *(unsigned int *)(v14 + 36);
        v85 = 64 - *(_DWORD *)(v14 + 200);
        if (v84 < v75)
        {
          v86 = ~(-1 << v71);
          do
          {
            v87 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v74 + v84)) >> v85);
            *(_DWORD *)(v78 + 4 * (v84 & v86)) = *(_DWORD *)(v82 + v87);
            *(_DWORD *)(v82 + v87) = v84++;
          }
          while (v84 < ((_DWORD)v243 - v74));
        }
        *(_DWORD *)(v14 + 36) = v75;
        v88 = *(_DWORD *)(v82 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v243) >> v85));
        if (v88 < v80)
          goto LABEL_6;
        v212 = *(_QWORD *)v243;
        v89 = v72 - 1;
        v227 = (_QWORD *)(v74 + v79);
        v225 = (char *)(v73 + v79);
        v90 = 1 << v83;
        v222 = v75 + 2;
        v91 = v243 + 8;
        v206 = v74 + 8;
        v92 = 3;
        v235 = 999999999;
        v219 = v78;
        while (2)
        {
          v93 = v88;
          if (v88 < v79)
          {
            if (*(_DWORD *)(v73 + v88) != *(_DWORD *)v243)
              goto LABEL_112;
            v94 = v79;
            v95 = v73;
            v96 = v81;
            v97 = ZSTD_count_2segments(v243 + 4, (char *)(v73 + v88 + 4), v5, v225, v227);
            v81 = v96;
            v73 = v95;
            v79 = v94;
            v78 = v219;
            v17 = v232;
            v16 = v233;
            v5 = v234;
            v29 = v97 + 4;
            if (v97 + 4 <= v92)
              goto LABEL_112;
LABEL_111:
            v235 = v222 - v93;
            v92 = v29;
            if (&v243[v29] == (unsigned __int8 *)v5)
              goto LABEL_172;
            goto LABEL_112;
          }
          v98 = (_DWORD *)(v74 + v88);
          if (*(unsigned __int8 *)(v74 + v93 + v92) == v243[v92])
          {
            if (v16 <= (unint64_t)v243)
            {
              v100 = v243;
              if ((unint64_t)v243 < v230)
              {
LABEL_100:
                if (*v98 == *(_DWORD *)v100)
                {
                  v100 += 4;
                  ++v98;
                }
              }
            }
            else
            {
              v99 = *(_QWORD *)v98 ^ v212;
              if (v99)
              {
                v29 = __clz(__rbit64(v99)) >> 3;
                if (v29 > v92)
                  goto LABEL_111;
                goto LABEL_112;
              }
              v101 = 0;
              while (1)
              {
                v100 = (unsigned __int8 *)&v91[v101];
                if ((unint64_t)&v91[v101] >= v16)
                  break;
                v102 = *(_QWORD *)(v206 + v93 + v101 * 8);
                ++v101;
                v103 = *(_QWORD *)v100 ^ v102;
                if (v103)
                {
                  v29 = v101 * 8 + (__clz(__rbit64(v103)) >> 3);
                  if (v29 > v92)
                    goto LABEL_111;
                  goto LABEL_112;
                }
              }
              v98 = (_DWORD *)(v206 + v93 + v101 * 8);
              if ((unint64_t)v100 < v230)
                goto LABEL_100;
            }
            if ((unint64_t)v100 >= v229)
            {
              if ((unint64_t)v100 < v5)
                goto LABEL_108;
            }
            else
            {
              if (*(unsigned __int16 *)v98 == *(unsigned __int16 *)v100)
              {
                v100 += 2;
                v98 = (_DWORD *)((char *)v98 + 2);
              }
              if ((unint64_t)v100 >= v5)
                goto LABEL_110;
LABEL_108:
              if (*(unsigned __int8 *)v98 == *v100)
                ++v100;
            }
LABEL_110:
            v29 = v100 - v243;
            if (v29 > v92)
              goto LABEL_111;
          }
LABEL_112:
          if (v93 <= v81)
            goto LABEL_171;
          if (!--v90)
            goto LABEL_171;
          v88 = *(_DWORD *)(v78 + 4 * (v93 & v89));
          v29 = v92;
          if (v88 < v80)
            goto LABEL_172;
          continue;
        }
      }
      v104 = *(_DWORD *)(v14 + 196);
      v105 = 1 << v104;
      v107 = *(_QWORD *)(v14 + 8);
      v106 = *(_QWORD *)(v14 + 16);
      v108 = (_DWORD)v243 - v107;
      v109 = 1 << *(_DWORD *)(v14 + 192);
      v110 = (_DWORD)v243 - (_DWORD)v107 - v19 > v109 && v20 == 0;
      v111 = *(_QWORD *)(v14 + 64);
      v112 = *(unsigned int *)(v14 + 24);
      if (v110)
        v113 = (_DWORD)v243 - (_DWORD)v107 - v109;
      else
        v113 = v19;
      if (v108 >= v105)
        v114 = v108 - v105;
      else
        v114 = 0;
      v115 = *(_QWORD *)(v14 + 48);
      v116 = *(_DWORD *)(v14 + 204);
      v117 = *(unsigned int *)(v14 + 36);
      v118 = 32 - *(_DWORD *)(v14 + 200);
      if (v117 < v108)
      {
        v119 = ~(-1 << v104);
        do
        {
          v120 = 4 * ((-1640531535 * *(_DWORD *)(v107 + v117)) >> v118);
          *(_DWORD *)(v111 + 4 * (v117 & v119)) = *(_DWORD *)(v115 + v120);
          *(_DWORD *)(v115 + v120) = v117++;
        }
        while (v117 < ((_DWORD)v243 - v107));
      }
      *(_DWORD *)(v14 + 36) = v108;
      v121 = *(_DWORD *)v243;
      v122 = *(_DWORD *)(v115 + 4 * ((-1640531535 * *(_DWORD *)v243) >> v118));
      if (v122 < v113)
        goto LABEL_6;
      v123 = v105 - 1;
      v226 = (_QWORD *)(v107 + v112);
      v223 = (char *)(v106 + v112);
      v124 = 1 << v116;
      v220 = v108 + 2;
      v125 = v243 + 8;
      v207 = v107 + 8;
      v92 = 3;
      v235 = 999999999;
      v228 = v111;
      v213 = v112;
      while (1)
      {
        v126 = v122;
        if (v122 < v112)
        {
          if (*(_DWORD *)(v106 + v122) != v121)
            goto LABEL_159;
          v127 = v106;
          v112 = v114;
          v128 = v113;
          v129 = v125;
          v130 = ZSTD_count_2segments(v243 + 4, (char *)(v106 + v122 + 4), v5, v223, v226);
          v125 = v129;
          v113 = v128;
          v114 = v112;
          LODWORD(v112) = v213;
          v111 = v228;
          v106 = v127;
          v17 = v232;
          v16 = v233;
          v5 = v234;
          v29 = v130 + 4;
          if (v130 + 4 <= v92)
            goto LABEL_159;
          goto LABEL_158;
        }
        v131 = (_DWORD *)(v107 + v122);
        if (*(unsigned __int8 *)(v107 + v126 + v92) != v243[v92])
          goto LABEL_159;
        if (v16 <= (unint64_t)v243)
        {
          v133 = v243;
          if ((unint64_t)v243 < v230)
          {
LABEL_147:
            if (*v131 == *(_DWORD *)v133)
            {
              v133 += 4;
              ++v131;
            }
          }
          goto LABEL_149;
        }
        v132 = *(_QWORD *)v243 ^ *(_QWORD *)v131;
        if (!v132)
        {
          v134 = 0;
          while (1)
          {
            v133 = (unsigned __int8 *)&v125[v134];
            if ((unint64_t)&v125[v134] >= v16)
              break;
            v135 = *(_QWORD *)(v207 + v126 + v134 * 8);
            ++v134;
            v136 = *(_QWORD *)v133 ^ v135;
            if (v136)
            {
              v29 = v134 * 8 + (__clz(__rbit64(v136)) >> 3);
              if (v29 > v92)
                goto LABEL_158;
              goto LABEL_159;
            }
          }
          v131 = (_DWORD *)(v207 + v126 + v134 * 8);
          if ((unint64_t)v133 < v230)
            goto LABEL_147;
LABEL_149:
          if ((unint64_t)v133 >= v229)
          {
            if ((unint64_t)v133 >= v5)
              goto LABEL_157;
          }
          else
          {
            if (*(unsigned __int16 *)v131 == *(unsigned __int16 *)v133)
            {
              v133 += 2;
              v131 = (_DWORD *)((char *)v131 + 2);
            }
            if ((unint64_t)v133 >= v5)
            {
LABEL_157:
              v29 = v133 - v243;
              if (v29 <= v92)
                goto LABEL_159;
              goto LABEL_158;
            }
          }
          if (*(unsigned __int8 *)v131 == *v133)
            ++v133;
          goto LABEL_157;
        }
        v29 = __clz(__rbit64(v132)) >> 3;
        if (v29 <= v92)
          goto LABEL_159;
LABEL_158:
        v235 = v220 - v126;
        v92 = v29;
        if (&v243[v29] == (unsigned __int8 *)v5)
          goto LABEL_172;
LABEL_159:
        if (v126 <= v114)
          break;
        if (!--v124)
          break;
        v122 = *(_DWORD *)(v111 + 4 * (v126 & v123));
        v29 = v92;
        if (v122 < v113)
          goto LABEL_172;
      }
LABEL_171:
      v29 = v92;
LABEL_172:
      v28 = v235;
      if (!v29)
        v28 = 0;
      v137 = v243 + 1;
      if (v29)
        v137 = v243;
      v240 = (unint64_t)v137;
      v14 = a1;
      v13 = a2;
      v6 = v208;
      if (v29 <= 3)
        goto LABEL_6;
      if (!v28)
      {
        LODWORD(v8) = v216;
        v7 = v217;
        v11 = v231;
        v15 = v214;
        v9 = v215;
        v30 = v137;
        v31 = v137 - v244;
        v32 = *(_OWORD **)(a2 + 24);
        if (v240 <= v17)
          goto LABEL_205;
        goto LABEL_24;
      }
      LODWORD(v8) = v216;
      v7 = v217;
      v30 = v137;
      v138 = (_DWORD)v137 - (v28 + v217) + 2;
      v15 = v214;
      v9 = v215;
      if (v216 <= v138)
        v139 = v217;
      else
        v139 = v214;
      v140 = v204;
      if (v216 <= v138)
        v140 = (unint64_t)v215;
      if (v240 <= (unint64_t)v244)
      {
        v141 = v231;
      }
      else
      {
        v141 = v231;
        if (v139 + (unint64_t)v138 > v140)
        {
          v142 = (unsigned __int8 *)(v139 + v138 - 1);
          v143 = (unsigned __int8 *)(v240 - 1);
          while (*v143 == *v142)
          {
            ++v29;
            v144 = v143 - 1;
            if (v143 > v244)
            {
              --v143;
              if ((unint64_t)v142-- > v140)
                continue;
            }
            v30 = v144 + 1;
            goto LABEL_204;
          }
          v30 = v143 + 1;
        }
      }
LABEL_204:
      v236 = v141;
      v11 = (v28 - 2);
      v31 = v30 - v244;
      v32 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v30 > v17)
        goto LABEL_24;
LABEL_205:
      *v32 = *(_OWORD *)v244;
      v152 = *(_QWORD *)(v13 + 24);
      if (v31 > 0x10)
      {
        v153 = (_OWORD *)(v152 + 16);
        v154 = v152 + v31;
        v155 = (__int128 *)(v244 + 16);
        v5 = v234;
        v16 = v233;
        do
        {
          v156 = *v155++;
          *v153++ = v156;
        }
        while ((unint64_t)v153 < v154);
        goto LABEL_222;
      }
      *(_QWORD *)(v13 + 24) = v152 + v31;
      v157 = *(_QWORD *)(v13 + 8);
      v5 = v234;
      v16 = v233;
LABEL_224:
      *(_WORD *)(v157 + 4) = v31;
      *(_DWORD *)v157 = v28 + 1;
      if (v29 - 3 >= 0x10000)
      {
        v169 = (unint64_t)(v157 - *(_QWORD *)v13) >> 3;
        *(_DWORD *)(v13 + 72) = 2;
        *(_DWORD *)(v13 + 76) = v169;
      }
      *(_WORD *)(v157 + 6) = v29 - 3;
      v170 = v157 + 8;
      *(_QWORD *)(v13 + 8) = v157 + 8;
      v244 = &v30[v29];
      if ((unint64_t)&v30[v29] > v6)
      {
        v243 = &v30[v29];
        goto LABEL_7;
      }
      v171 = v11;
      v172 = v236;
LABEL_230:
      v11 = v172;
      v172 = v171;
      v174 = *(_DWORD *)(v14 + 28);
      if ((_DWORD)v244 - (_DWORD)v7 - v174 > v242 && *(_DWORD *)(v14 + 32) == 0)
        v174 = (_DWORD)v244 - v7 - v242;
      v176 = ((_DWORD)v244 - v7 - v11);
      if (v176 >= v8)
        v177 = v7;
      else
        v177 = v15;
      if ((v241 - v176) >= 3 && v176 > v174)
      {
        v178 = v177 + v176;
        if (*(_DWORD *)v244 == *(_DWORD *)(v177 + v176))
        {
          if (v176 >= v8)
            v179 = (_QWORD *)v5;
          else
            v179 = v237;
          v180 = (char *)(v244 + 4);
          v181 = (_QWORD *)(v178 + 4);
          v182 = (char *)v179 + (_QWORD)v244 - v178;
          if ((unint64_t)v182 >= v5)
            v182 = (char *)v5;
          if (v182 - 7 <= v180)
          {
            v186 = (char *)(v244 + 4);
            v187 = v181;
            if (v180 < v182 - 3)
            {
LABEL_253:
              if (*v187 == *(_DWORD *)v186)
              {
                v186 += 4;
                ++v187;
              }
            }
          }
          else
          {
            v183 = *(_QWORD *)v180 ^ *v181;
            if (v183)
            {
              v184 = __clz(__rbit64(v183)) >> 3;
              if ((_QWORD *)((char *)v181 + v184) != v179)
                goto LABEL_249;
LABEL_264:
              v188 = &v180[v184];
              if (v16 <= (unint64_t)v188)
              {
                v194 = (unsigned __int8 *)v188;
                v195 = v9;
                if ((unint64_t)v188 < v230)
                {
LABEL_274:
                  if (*v195 == *(_DWORD *)v194)
                  {
                    v194 += 4;
                    ++v195;
                  }
                }
              }
              else
              {
                v189 = *(_QWORD *)v188 ^ *v9;
                if (v189)
                {
                  v184 += __clz(__rbit64(v189)) >> 3;
                  if ((unint64_t)v244 > v17)
                    goto LABEL_250;
LABEL_285:
                  *(_OWORD *)*(_QWORD *)(v13 + 24) = *(_OWORD *)v244;
                  v170 = *(_QWORD *)(v13 + 8);
                  v185 = v184 + 1;
                  *(_WORD *)(v170 + 4) = 0;
                  *(_DWORD *)v170 = 1;
                  if (v184 + 1 >= 0x10000)
                  {
LABEL_286:
                    v196 = (unint64_t)(v170 - *(_QWORD *)v13) >> 3;
                    *(_DWORD *)(v13 + 72) = 2;
                    *(_DWORD *)(v13 + 76) = v196;
                  }
LABEL_229:
                  *(_WORD *)(v170 + 6) = v185;
                  v170 += 8;
                  v173 = &v244[v184 + 4];
                  *(_QWORD *)(v13 + 8) = v170;
                  v171 = v11;
                  v10 = v172;
                  v243 = v173;
                  v244 = v173;
                  if ((unint64_t)v173 > v6)
                    continue;
                  goto LABEL_230;
                }
                v197 = 0;
                v198 = (uint64_t)&v244[v184 + 12];
                while (1)
                {
                  v199 = (_QWORD *)(v198 + v197);
                  if (v198 + v197 >= v16)
                    break;
                  v200 = *(_QWORD *)(v238 + v197);
                  v197 += 8;
                  v201 = *v199 ^ v200;
                  if (v201)
                  {
                    v184 += v197 + (__clz(__rbit64(v201)) >> 3);
                    if ((unint64_t)v244 <= v17)
                      goto LABEL_285;
                    goto LABEL_250;
                  }
                }
                v194 = &v244[v184 + 12 + v197];
                v195 = (_DWORD *)(v238 + v197);
                if ((unint64_t)v194 < v230)
                  goto LABEL_274;
              }
              if ((unint64_t)v194 >= v229)
              {
                if ((unint64_t)v194 >= v5)
                  goto LABEL_284;
              }
              else
              {
                if (*(unsigned __int16 *)v195 == *(unsigned __int16 *)v194)
                {
                  v194 += 2;
                  v195 = (_DWORD *)((char *)v195 + 2);
                }
                if ((unint64_t)v194 >= v5)
                {
LABEL_284:
                  v184 += v194 - (unsigned __int8 *)v188;
                  if ((unint64_t)v244 > v17)
                    goto LABEL_250;
                  goto LABEL_285;
                }
              }
              if (*(unsigned __int8 *)v195 == *v194)
                ++v194;
              goto LABEL_284;
            }
            v190 = (char *)(v244 + 12);
            while (1)
            {
              v191 = &v190[v183];
              if (&v190[v183] >= v182 - 7)
                break;
              v192 = *(_QWORD *)(v177 + v176 + 12 + v183);
              v183 += 8;
              v193 = *(_QWORD *)v191 ^ v192;
              if (v193)
              {
                v184 = v183 + (__clz(__rbit64(v193)) >> 3);
                if ((_QWORD *)((char *)v181 + v184) != v179)
                  goto LABEL_249;
                goto LABEL_264;
              }
            }
            v186 = (char *)&v244[v183 + 12];
            v187 = (_DWORD *)(v177 + v176 + v183 + 12);
            if (v186 < v182 - 3)
              goto LABEL_253;
          }
          if (v186 >= v182 - 1)
          {
            if (v186 >= v182)
              goto LABEL_263;
          }
          else
          {
            if (*(unsigned __int16 *)v187 == *(unsigned __int16 *)v186)
            {
              v186 += 2;
              v187 = (_DWORD *)((char *)v187 + 2);
            }
            if (v186 >= v182)
            {
LABEL_263:
              v184 = v186 - v180;
              if ((_QWORD *)((char *)v181 + v186 - v180) == v179)
                goto LABEL_264;
LABEL_249:
              if ((unint64_t)v244 <= v17)
                goto LABEL_285;
LABEL_250:
              v185 = v184 + 1;
              *(_WORD *)(v170 + 4) = 0;
              *(_DWORD *)v170 = 1;
              if (v184 + 1 >= 0x10000)
                goto LABEL_286;
              goto LABEL_229;
            }
          }
          if (*(unsigned __int8 *)v187 == *v186)
            ++v186;
          goto LABEL_263;
        }
      }
      v10 = v11;
      v11 = v171;
      v243 = v244;
    }
    while ((unint64_t)v243 < v6);
  }
  *a3 = v11;
  a3[1] = v10;
  return v5 - (_QWORD)v244;
}

unint64_t ZSTD_compressBlock_lazy_extDict(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  _QWORD *v45;
  int v46;
  char *v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  char *v63;
  _DWORD *v64;
  char *v65;
  unint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  _DWORD *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  int v95;
  int v96;
  unint64_t v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _DWORD *v107;
  unint64_t v108;
  unsigned __int8 *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  int v125;
  unint64_t v126;
  char v127;
  int v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _DWORD *v137;
  unint64_t v138;
  unsigned __int8 *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  int v148;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  unsigned int v166;
  unint64_t v167;
  unsigned int v169;
  uint64_t v170;
  int v171;
  int v172;
  unint64_t v173;
  unsigned int v174;
  unsigned int v175;
  char *v176;
  int v177;
  char *v178;
  unsigned int v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  _DWORD *v183;
  _QWORD *v184;
  char *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  _DWORD *v189;
  unint64_t v190;
  char *v191;
  _DWORD *v192;
  char *v193;
  unint64_t v194;
  unsigned __int8 *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char *v202;
  _DWORD *v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  int v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  unint64_t v218;
  unsigned int v220;
  uint64_t v221;
  int v222;
  int v223;
  unint64_t v224;
  unsigned int v225;
  unsigned int v226;
  char *v227;
  int v228;
  char *v229;
  unsigned int v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  _DWORD *v234;
  _QWORD *v235;
  char *v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  _QWORD *v240;
  unint64_t v241;
  unsigned __int8 *v242;
  _DWORD *v243;
  char *v244;
  unint64_t v245;
  unsigned __int8 *v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  _DWORD *v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  int v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int v265;
  unsigned int v266;
  uint64_t v267;
  unsigned int v268;
  unint64_t v269;
  unsigned int v271;
  uint64_t v272;
  int v273;
  int v274;
  uint64_t v275;
  unsigned int v276;
  unsigned int v277;
  char *v278;
  int v279;
  char *v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;
  _DWORD *v284;
  _QWORD *v285;
  char *v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  _QWORD *v290;
  unint64_t v291;
  char *v292;
  _DWORD *v293;
  char *v294;
  unint64_t v295;
  unsigned __int8 *v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  char *v303;
  _DWORD *v304;
  uint64_t v305;
  char *v306;
  char *v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unsigned __int8 *v312;
  unsigned __int8 *v313;
  uint64_t v314;
  uint64_t v315;
  unsigned __int8 *v316;
  unsigned __int8 *v317;
  unint64_t v318;
  uint64_t v319;
  unsigned __int8 *v320;
  unint64_t v322;
  _OWORD *v323;
  uint64_t v324;
  _OWORD *v325;
  unint64_t v326;
  __int128 *v327;
  __int128 v328;
  _OWORD *v329;
  _BYTE *v330;
  uint64_t v331;
  unsigned __int8 *v332;
  _OWORD *v333;
  __int128 v334;
  unsigned __int8 *v335;
  unint64_t v336;
  unsigned __int8 *v337;
  unint64_t v338;
  __int128 *v339;
  _OWORD *v340;
  unint64_t v341;
  __int128 v342;
  uint64_t *v343;
  _QWORD *v344;
  unint64_t v345;
  uint64_t v346;
  char v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int v353;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  char *v359;
  _QWORD *v360;
  char *v361;
  unint64_t v362;
  unint64_t v363;
  __int16 v364;
  char *v365;
  _DWORD *v366;
  char *v367;
  unint64_t v368;
  char *v369;
  char *v370;
  uint64_t v371;
  unint64_t v372;
  unsigned __int8 *v373;
  unsigned __int8 *v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  unint64_t v380;
  _QWORD *v383;
  _QWORD *v384;
  uint64_t v385;
  uint64_t v386;
  unsigned __int8 *v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v391;
  int v392;
  uint64_t v393;
  unsigned int v394;
  unsigned int v395;
  unint64_t v396;
  unsigned int v397;
  unsigned __int8 *v398;
  unsigned __int8 *v399;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  _QWORD *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  unsigned int v412;
  _QWORD *v413;
  uint64_t v414;
  char *v415;
  unsigned __int8 *v416;
  int v417;
  unsigned int v418;
  uint64_t v419;
  unint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  int v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v429;
  unint64_t v430;

  v5 = a4;
  v429 = (unint64_t)&a4[a5];
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 24);
  LODWORD(v8) = *a3;
  LODWORD(v9) = a3[1];
  v399 = (unsigned __int8 *)(v6 + v7);
  if ((unsigned __int8 *)(v6 + v7) == a4)
    v10 = a4 + 1;
  else
    v10 = a4;
  v424 = (unint64_t)&a4[a5 - 8];
  if ((unint64_t)v10 < v424)
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = (char *)(v11 + v7);
    v419 = v11;
    v387 = (unsigned __int8 *)(v11 + *(unsigned int *)(a1 + 28));
    v418 = 1 << *(_DWORD *)(a1 + 192);
    v417 = v7 - 1;
    v430 = v429 - 7;
    v426 = v429 - 1;
    v427 = v429 - 3;
    v389 = v429 - 32;
    v400 = *(_QWORD *)(a1 + 8);
    v411 = *(_DWORD *)(a1 + 24);
    v396 = v11 + v7;
    v388 = v7 + v6 + 8;
    do
    {
      v13 = 0;
      v14 = (char *)(v10 + 1);
      v425 = (_DWORD)v10 - v6;
      v15 = (_DWORD)v10 - v6 + 1;
      v16 = *(_DWORD *)(a1 + 28);
      v17 = *(_DWORD *)(a1 + 32);
      v18 = v15 - v418;
      if (v15 - v16 <= v418 || v17 != 0)
        v18 = *(_DWORD *)(a1 + 28);
      v20 = (v15 - v8);
      v21 = v419;
      if (v20 >= v7)
        v21 = v6;
      if ((v417 - v20) >= 3 && v20 > v18)
      {
        v22 = v21 + v20;
        if (*(_DWORD *)v14 == *(_DWORD *)v22)
        {
          if (v20 >= v7)
            v23 = (char *)v429;
          else
            v23 = v12;
          v24 = ZSTD_count_2segments(v10 + 5, (char *)(v22 + 4), v429, v23, v399);
          v14 = (char *)(v10 + 1);
          v13 = v24 + 4;
        }
        else
        {
          v13 = 0;
        }
      }
      v25 = *(_DWORD *)(a1 + 208);
      v412 = v8;
      v398 = v5;
      v397 = v9;
      v415 = v14;
      v420 = v13;
      if ((v25 - 6) < 2)
      {
        v26 = *(_DWORD *)(a1 + 196);
        v27 = 1 << v26;
        v28 = *(_QWORD *)(a1 + 8);
        v29 = *(_QWORD *)(a1 + 16);
        v30 = (_DWORD)v10 - v28;
        v31 = 1 << *(_DWORD *)(a1 + 192);
        v32 = (_DWORD)v10 - v28 - v31;
        v33 = (_DWORD)v10 - (_DWORD)v28 - v16 > v31 && v17 == 0;
        v34 = *(_QWORD *)(a1 + 64);
        v35 = *(unsigned int *)(a1 + 24);
        if (!v33)
          v32 = v16;
        v36 = v30 - v27;
        if (v30 < v27)
          v36 = 0;
        v37 = *(_QWORD *)(a1 + 48);
        v38 = *(_DWORD *)(a1 + 204);
        v39 = *(unsigned int *)(a1 + 36);
        v40 = 64 - *(_DWORD *)(a1 + 200);
        if (v39 < v30)
        {
          v41 = ~(-1 << v26);
          do
          {
            v42 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v28 + v39)) >> v40);
            *(_DWORD *)(v34 + 4 * (v39 & v41)) = *(_DWORD *)(v37 + v42);
            *(_DWORD *)(v37 + v42) = v39++;
          }
          while (v39 < ((_DWORD)v10 - v28));
        }
        *(_DWORD *)(a1 + 36) = v30;
        v43 = *(_DWORD *)(v37 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v10) >> v40));
        if (v43 >= v32)
        {
          v44 = v27 - 1;
          v45 = (_QWORD *)(v29 + v35);
          v46 = 1 << v38;
          v47 = (char *)(v10 + 4);
          v48 = v30 + 2;
          v49 = v10 + 8;
          v50 = v28 + 8;
          v51 = (char *)(v10 + 12);
          v405 = v29 + 12;
          v52 = v28 + 8 + v35;
          v53 = 3;
          v422 = 999999999;
          while (1)
          {
            v54 = v43;
            if (v43 < v35)
            {
              v55 = v29 + v43;
              if (*(_DWORD *)(v29 + v54) != *(_DWORD *)v10)
                goto LABEL_102;
              v56 = (_QWORD *)(v55 + 4);
              v57 = (char *)v45 + (_QWORD)v10 - v55;
              if ((unint64_t)v57 >= v429)
                v57 = (char *)v429;
              if (v57 - 7 <= v47)
              {
                v63 = (char *)(v10 + 4);
                v64 = v56;
                if (v47 < v57 - 3)
                {
LABEL_51:
                  if (*v64 == *(_DWORD *)v63)
                  {
                    v63 += 4;
                    ++v64;
                  }
                }
              }
              else
              {
                v58 = *(_QWORD *)v47 ^ *v56;
                if (v58)
                {
                  v59 = __clz(__rbit64(v58)) >> 3;
                  if ((_QWORD *)((char *)v56 + v59) != v45)
                    goto LABEL_43;
                  goto LABEL_62;
                }
                v68 = 0;
                while (1)
                {
                  v63 = &v51[v68];
                  if (&v51[v68] >= v57 - 7)
                    break;
                  v69 = *(_QWORD *)(v405 + v54 + v68);
                  v68 += 8;
                  v70 = *(_QWORD *)v63 ^ v69;
                  if (v70)
                  {
                    v59 = v68 + (__clz(__rbit64(v70)) >> 3);
                    if ((_QWORD *)((char *)v56 + v59) != v45)
                      goto LABEL_43;
                    goto LABEL_62;
                  }
                }
                v64 = (_DWORD *)(v405 + v54 + v68);
                if (v63 < v57 - 3)
                  goto LABEL_51;
              }
              if (v63 >= v57 - 1)
              {
                if (v63 >= v57)
                  goto LABEL_61;
              }
              else
              {
                if (*(unsigned __int16 *)v64 == *(unsigned __int16 *)v63)
                {
                  v63 += 2;
                  v64 = (_DWORD *)((char *)v64 + 2);
                }
                if (v63 >= v57)
                {
LABEL_61:
                  v59 = v63 - v47;
                  if ((_QWORD *)((char *)v56 + v63 - v47) != v45)
                  {
LABEL_43:
                    v60 = v59 + 4;
                    if (v59 + 4 <= v53)
                      goto LABEL_102;
                    goto LABEL_101;
                  }
LABEL_62:
                  v65 = &v47[v59];
                  if (v430 <= (unint64_t)&v47[v59])
                  {
                    v74 = &v47[v59];
                    v75 = (_DWORD *)(v28 + v35);
                    if ((unint64_t)v65 < v427)
                    {
LABEL_90:
                      if (*v75 == *(_DWORD *)v74)
                      {
                        v74 += 4;
                        ++v75;
                      }
                    }
                  }
                  else
                  {
                    v66 = *(_QWORD *)v65 ^ *(_QWORD *)(v28 + v35);
                    if (v66)
                    {
                      v60 = (__clz(__rbit64(v66)) >> 3) + v59 + 4;
                      if (v60 <= v53)
                        goto LABEL_102;
                      goto LABEL_101;
                    }
                    v76 = 0;
                    v77 = &v51[v59];
                    while (1)
                    {
                      v78 = &v77[v76];
                      if ((unint64_t)&v77[v76] >= v430)
                        break;
                      v79 = *(_QWORD *)(v52 + v76);
                      v76 += 8;
                      v80 = *(_QWORD *)v78 ^ v79;
                      if (v80)
                      {
                        v60 = v76 + (__clz(__rbit64(v80)) >> 3) + v59 + 4;
                        if (v60 <= v53)
                          goto LABEL_102;
                        goto LABEL_101;
                      }
                    }
                    v74 = &v51[v59 + v76];
                    v75 = (_DWORD *)(v52 + v76);
                    if ((unint64_t)v74 < v427)
                      goto LABEL_90;
                  }
                  if ((unint64_t)v74 >= v426)
                  {
                    if ((unint64_t)v74 >= v429)
                      goto LABEL_100;
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v75 == *(unsigned __int16 *)v74)
                    {
                      v74 += 2;
                      v75 = (_DWORD *)((char *)v75 + 2);
                    }
                    if ((unint64_t)v74 >= v429)
                    {
LABEL_100:
                      v60 = v74 - (char *)v10;
                      if (v74 - (char *)v10 <= v53)
                        goto LABEL_102;
                      goto LABEL_101;
                    }
                  }
                  if (*(unsigned __int8 *)v75 == *v74)
                    ++v74;
                  goto LABEL_100;
                }
              }
              if (*(unsigned __int8 *)v64 == *v63)
                ++v63;
              goto LABEL_61;
            }
            v61 = (_DWORD *)(v28 + v43);
            if (*((unsigned __int8 *)v61 + v53) != v10[v53])
              goto LABEL_102;
            if (v430 <= (unint64_t)v10)
            {
              v67 = v10;
              if ((unint64_t)v10 < v427)
              {
LABEL_67:
                if (*v61 == *(_DWORD *)v67)
                {
                  v67 += 4;
                  ++v61;
                }
              }
            }
            else
            {
              v62 = *(_QWORD *)v61 ^ *(_QWORD *)v10;
              if (v62)
              {
                v60 = __clz(__rbit64(v62)) >> 3;
                if (v60 <= v53)
                  goto LABEL_102;
                goto LABEL_101;
              }
              v71 = 0;
              while (1)
              {
                v67 = (unsigned __int8 *)&v49[v71];
                if ((unint64_t)&v49[v71] >= v430)
                  break;
                v72 = *(_QWORD *)(v50 + v54 + v71 * 8);
                ++v71;
                v73 = *(_QWORD *)v67 ^ v72;
                if (v73)
                {
                  v60 = v71 * 8 + (__clz(__rbit64(v73)) >> 3);
                  if (v60 > v53)
                    goto LABEL_101;
                  goto LABEL_102;
                }
              }
              v61 = (_DWORD *)(v50 + v54 + v71 * 8);
              if ((unint64_t)v67 < v427)
                goto LABEL_67;
            }
            if ((unint64_t)v67 >= v426)
              break;
            if (*(unsigned __int16 *)v61 == *(unsigned __int16 *)v67)
            {
              v67 += 2;
              v61 = (_DWORD *)((char *)v61 + 2);
            }
            if ((unint64_t)v67 < v429)
              goto LABEL_75;
LABEL_77:
            v60 = v67 - v10;
            if (v67 - v10 <= v53)
              goto LABEL_102;
LABEL_101:
            v422 = v48 - v54;
            v53 = v60;
            if (&v10[v60] == (unsigned __int8 *)v429)
              goto LABEL_215;
LABEL_102:
            if (v54 <= v36 || (--v46, !v46))
            {
              v60 = v53;
              goto LABEL_215;
            }
            v43 = *(_DWORD *)(v34 + 4 * (v54 & v44));
            v60 = v53;
            if (v43 < v32)
              goto LABEL_215;
          }
          if ((unint64_t)v67 >= v429)
            goto LABEL_77;
LABEL_75:
          if (*(unsigned __int8 *)v61 == *v67)
            ++v67;
          goto LABEL_77;
        }
LABEL_178:
        v422 = 999999999;
        v60 = 3;
        goto LABEL_215;
      }
      if (v25 == 5)
      {
        v81 = *(_DWORD *)(a1 + 196);
        v82 = 1 << v81;
        v84 = *(_QWORD *)(a1 + 8);
        v83 = *(_QWORD *)(a1 + 16);
        v85 = (_DWORD)v10 - v84;
        v86 = 1 << *(_DWORD *)(a1 + 192);
        v87 = (_DWORD)v10 - (_DWORD)v84 - v16 > v86 && v17 == 0;
        v88 = *(_QWORD *)(a1 + 64);
        v89 = *(unsigned int *)(a1 + 24);
        if (v87)
          v90 = (_DWORD)v10 - (_DWORD)v84 - v86;
        else
          v90 = v16;
        if (v85 >= v82)
          v91 = v85 - v82;
        else
          v91 = 0;
        v92 = *(_QWORD *)(a1 + 48);
        v93 = *(_DWORD *)(a1 + 204);
        v94 = *(unsigned int *)(a1 + 36);
        v95 = 64 - *(_DWORD *)(a1 + 200);
        if (v94 < v85)
        {
          v96 = ~(-1 << v81);
          do
          {
            v97 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v84 + v94)) >> v95);
            *(_DWORD *)(v88 + 4 * (v94 & v96)) = *(_DWORD *)(v92 + v97);
            *(_DWORD *)(v92 + v97) = v94++;
          }
          while (v94 < ((_DWORD)v10 - v84));
        }
        *(_DWORD *)(a1 + 36) = v85;
        v391 = *(_QWORD *)v10;
        v98 = *(_DWORD *)(v92 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v10) >> v95));
        if (v98 < v90)
          goto LABEL_178;
        v99 = v82 - 1;
        v413 = (_QWORD *)(v84 + v89);
        v406 = (char *)(v83 + v89);
        v100 = 1 << v93;
        v395 = v85 + 2;
        v383 = v10 + 8;
        v385 = v84 + 8;
        v101 = 3;
        v422 = 999999999;
        v393 = v83;
        while (2)
        {
          v102 = v98;
          if (v98 < v89)
          {
            if (*(_DWORD *)(v83 + v98) != *(_DWORD *)v10)
              goto LABEL_154;
            v103 = v84;
            v104 = v91;
            v105 = v90;
            v106 = ZSTD_count_2segments(v10 + 4, (char *)(v83 + v98 + 4), v429, v406, v413);
            v90 = v105;
            v91 = v104;
            v84 = v103;
            v83 = v393;
            v60 = v106 + 4;
            if (v106 + 4 <= v101)
              goto LABEL_154;
LABEL_153:
            v422 = v395 - v102;
            v101 = v60;
            if (&v10[v60] == (unsigned __int8 *)v429)
              goto LABEL_215;
            goto LABEL_154;
          }
          v107 = (_DWORD *)(v84 + v98);
          if (*((unsigned __int8 *)v107 + v101) == v10[v101])
          {
            if (v430 <= (unint64_t)v10)
            {
              v109 = v10;
              if ((unint64_t)v10 < v427)
              {
LABEL_142:
                if (*v107 == *(_DWORD *)v109)
                {
                  v109 += 4;
                  ++v107;
                }
              }
            }
            else
            {
              v108 = *(_QWORD *)v107 ^ v391;
              if (v108)
              {
                v60 = __clz(__rbit64(v108)) >> 3;
                if (v60 > v101)
                  goto LABEL_153;
                goto LABEL_154;
              }
              v110 = 0;
              while (1)
              {
                v109 = (unsigned __int8 *)&v383[v110];
                if ((unint64_t)&v383[v110] >= v430)
                  break;
                v111 = *(_QWORD *)(v385 + v102 + v110 * 8);
                ++v110;
                v112 = *(_QWORD *)v109 ^ v111;
                if (v112)
                {
                  v60 = v110 * 8 + (__clz(__rbit64(v112)) >> 3);
                  if (v60 > v101)
                    goto LABEL_153;
                  goto LABEL_154;
                }
              }
              v107 = (_DWORD *)(v385 + v102 + v110 * 8);
              if ((unint64_t)v109 < v427)
                goto LABEL_142;
            }
            if ((unint64_t)v109 >= v426)
            {
              if ((unint64_t)v109 < v429)
                goto LABEL_150;
            }
            else
            {
              if (*(unsigned __int16 *)v107 == *(unsigned __int16 *)v109)
              {
                v109 += 2;
                v107 = (_DWORD *)((char *)v107 + 2);
              }
              if ((unint64_t)v109 >= v429)
                goto LABEL_152;
LABEL_150:
              if (*(unsigned __int8 *)v107 == *v109)
                ++v109;
            }
LABEL_152:
            v60 = v109 - v10;
            if (v109 - v10 > v101)
              goto LABEL_153;
          }
LABEL_154:
          if (v102 <= v91)
            goto LABEL_214;
          if (!--v100)
            goto LABEL_214;
          v98 = *(_DWORD *)(v88 + 4 * (v102 & v99));
          v60 = v101;
          if (v98 < v90)
            goto LABEL_215;
          continue;
        }
      }
      v113 = *(_DWORD *)(a1 + 196);
      v114 = 1 << v113;
      v116 = *(_QWORD *)(a1 + 8);
      v115 = *(_QWORD *)(a1 + 16);
      v117 = (_DWORD)v10 - v116;
      v118 = 1 << *(_DWORD *)(a1 + 192);
      v119 = (_DWORD)v10 - (_DWORD)v116 - v16 > v118 && v17 == 0;
      v120 = *(_QWORD *)(a1 + 64);
      v121 = *(unsigned int *)(a1 + 24);
      if (v119)
        v122 = (_DWORD)v10 - v116 - v118;
      else
        v122 = v16;
      if (v117 >= v114)
        v123 = v117 - v114;
      else
        v123 = 0;
      v124 = *(_QWORD *)(a1 + 48);
      v125 = *(_DWORD *)(a1 + 204);
      v126 = *(unsigned int *)(a1 + 36);
      v127 = 32 - *(_DWORD *)(a1 + 200);
      if (v126 < v117)
      {
        v128 = ~(-1 << v113);
        do
        {
          v129 = 4 * ((-1640531535 * *(_DWORD *)(v116 + v126)) >> v127);
          *(_DWORD *)(v120 + 4 * (v126 & v128)) = *(_DWORD *)(v124 + v129);
          *(_DWORD *)(v124 + v129) = v126++;
        }
        while (v126 < ((_DWORD)v10 - v116));
      }
      *(_DWORD *)(a1 + 36) = v117;
      v130 = *(_DWORD *)v10;
      v131 = *(_DWORD *)(v124 + 4 * ((-1640531535 * *(_DWORD *)v10) >> v127));
      if (v131 < v122)
        goto LABEL_178;
      v132 = v114 - 1;
      v407 = (_QWORD *)(v116 + v121);
      v401 = (char *)(v115 + v121);
      v133 = 1 << v125;
      v394 = v117 + 2;
      v384 = v10 + 8;
      v386 = v116 + 8;
      v101 = 3;
      v422 = 999999999;
      v414 = v115;
      v392 = v121;
      while (1)
      {
        v134 = v131;
        if (v131 < v121)
        {
          if (*(_DWORD *)(v115 + v131) != v130)
            goto LABEL_203;
          v135 = v116;
          v136 = ZSTD_count_2segments(v10 + 4, (char *)(v115 + v131 + 4), v429, v401, v407);
          v116 = v135;
          LODWORD(v121) = v392;
          v115 = v414;
          v60 = v136 + 4;
          if (v136 + 4 <= v101)
            goto LABEL_203;
          goto LABEL_202;
        }
        v137 = (_DWORD *)(v116 + v131);
        if (*((unsigned __int8 *)v137 + v101) != v10[v101])
          goto LABEL_203;
        if (v430 <= (unint64_t)v10)
        {
          v139 = v10;
          if ((unint64_t)v10 < v427)
          {
LABEL_191:
            if (*v137 == *(_DWORD *)v139)
            {
              v139 += 4;
              ++v137;
            }
          }
          goto LABEL_193;
        }
        v138 = *(_QWORD *)v10 ^ *(_QWORD *)v137;
        if (!v138)
        {
          v140 = 0;
          while (1)
          {
            v139 = (unsigned __int8 *)&v384[v140];
            if ((unint64_t)&v384[v140] >= v430)
              break;
            v141 = *(_QWORD *)(v386 + v134 + v140 * 8);
            ++v140;
            v142 = *(_QWORD *)v139 ^ v141;
            if (v142)
            {
              v60 = v140 * 8 + (__clz(__rbit64(v142)) >> 3);
              if (v60 > v101)
                goto LABEL_202;
              goto LABEL_203;
            }
          }
          v137 = (_DWORD *)(v386 + v134 + v140 * 8);
          if ((unint64_t)v139 < v427)
            goto LABEL_191;
LABEL_193:
          if ((unint64_t)v139 >= v426)
          {
            if ((unint64_t)v139 >= v429)
              goto LABEL_201;
          }
          else
          {
            if (*(unsigned __int16 *)v137 == *(unsigned __int16 *)v139)
            {
              v139 += 2;
              v137 = (_DWORD *)((char *)v137 + 2);
            }
            if ((unint64_t)v139 >= v429)
            {
LABEL_201:
              v60 = v139 - v10;
              if (v139 - v10 <= v101)
                goto LABEL_203;
              goto LABEL_202;
            }
          }
          if (*(unsigned __int8 *)v137 == *v139)
            ++v139;
          goto LABEL_201;
        }
        v60 = __clz(__rbit64(v138)) >> 3;
        if (v60 <= v101)
          goto LABEL_203;
LABEL_202:
        v422 = v394 - v134;
        v101 = v60;
        if (&v10[v60] == (unsigned __int8 *)v429)
          goto LABEL_215;
LABEL_203:
        if (v134 <= v123)
          break;
        if (!--v133)
          break;
        v131 = *(_DWORD *)(v120 + 4 * (v134 & v132));
        v60 = v101;
        if (v131 < v122)
          goto LABEL_215;
      }
LABEL_214:
      v60 = v101;
LABEL_215:
      if (v60 <= v420)
        v143 = v420;
      else
        v143 = v60;
      if (v143 < 4)
      {
        v5 = v398;
        v10 += ((v10 - v398) >> 8) + 1;
        v6 = v400;
        LODWORD(v7) = v411;
        LODWORD(v8) = v412;
        v12 = (char *)v396;
        LODWORD(v9) = v397;
        continue;
      }
      if (v60 <= v420)
        v144 = v415;
      else
        v144 = (char *)v10;
      if (v60 <= v420)
        v145 = 0;
      else
        v145 = v422;
      v146 = (char *)(v10 + 13);
      while (2)
      {
        if ((unint64_t)v10 >= v424)
        {
          v310 = v145;
          v416 = (unsigned __int8 *)v144;
          v156 = v143;
          v311 = a2;
          v9 = v397;
          if (!v310)
            goto LABEL_553;
          goto LABEL_536;
        }
        v147 = (char *)(v10 + 1);
        v148 = ++v425;
        if (v145)
        {
          if (v148 - *(_DWORD *)(a1 + 28) > v418 && *(_DWORD *)(a1 + 32) == 0)
            v150 = v148 - v418;
          else
            v150 = *(_DWORD *)(a1 + 28);
          v151 = v148 - v412;
          v152 = v400;
          if (v151 < v411)
            v152 = v419;
          if ((v417 - v151) >= 3 && v151 > v150)
          {
            v153 = v152 + v151;
            if (*(_DWORD *)v147 == *(_DWORD *)v153)
            {
              v154 = (char *)(v151 >= v411 ? v429 : v396);
              v155 = ZSTD_count_2segments(v10 + 5, (char *)(v153 + 4), v429, v154, v399);
              if (v155 <= 0xFFFFFFFFFFFFFFFBLL)
              {
                v416 = (unsigned __int8 *)v144;
                v156 = v143;
                if (3 * ((int)v155 + 4) > (int)((__clz(v145 + 1) ^ 0xFFFFFFE0) + 3 * v143 + 2))
                {
                  v145 = 0;
                  v416 = v10 + 1;
                  v156 = v155 + 4;
                }
                v157 = *(_DWORD *)(a1 + 208);
                v421 = v156;
                v423 = v145;
                if ((v157 - 6) < 2)
                  goto LABEL_246;
LABEL_341:
                if (v157 == 5)
                {
                  v209 = *(_QWORD *)(a1 + 64);
                  v210 = *(_DWORD *)(a1 + 196);
                  v211 = 1 << v210;
                  v212 = *(_QWORD *)(a1 + 8);
                  v213 = *(_QWORD *)(a1 + 16);
                  v214 = (_DWORD)v147 - v212;
                  v215 = 1 << *(_DWORD *)(a1 + 192);
                  v216 = *(unsigned int *)(a1 + 24);
                  v217 = *(_DWORD *)(a1 + 28);
                  v218 = *(unsigned int *)(a1 + 36);
                  if ((_DWORD)v147 - (_DWORD)v212 - v217 > v215 && *(_DWORD *)(a1 + 32) == 0)
                    v217 = (_DWORD)v147 - v212 - v215;
                  if (v214 >= v211)
                    v220 = v214 - v211;
                  else
                    v220 = 0;
                  v221 = *(_QWORD *)(a1 + 48);
                  v222 = *(_DWORD *)(a1 + 204);
                  v223 = 64 - *(_DWORD *)(a1 + 200);
                  if (v218 < v214)
                  {
                    do
                    {
                      v224 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v212 + v218)) >> v223);
                      *(_DWORD *)(v209 + 4 * (v218 & ~(-1 << v210))) = *(_DWORD *)(v221 + v224);
                      *(_DWORD *)(v221 + v224) = v218++;
                    }
                    while (v218 < ((_DWORD)v147 - v212));
                  }
                  *(_DWORD *)(a1 + 36) = v214;
                  v225 = *(_DWORD *)(v221 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v147) >> v223));
                  if (v225 >= v217)
                  {
                    v226 = v211 - 1;
                    v227 = (char *)(v213 + v216);
                    v228 = 1 << v222;
                    v229 = (char *)(v10 + 5);
                    v230 = v214 + 2;
                    v403 = v213 + 12;
                    v409 = v212 + 8;
                    v231 = v212 + 8 + v216;
                    v232 = 3;
                    v145 = 999999999;
                    while (1)
                    {
                      v233 = v225;
                      if (v225 >= v216)
                        break;
                      v234 = (_DWORD *)(v213 + v225);
                      if (*v234 != *(_DWORD *)v147)
                        goto LABEL_420;
                      v235 = v234 + 1;
                      v236 = &v229[v227 - (char *)(v234 + 1)];
                      v237 = v429;
                      if ((unint64_t)v236 < v429)
                        v237 = (unint64_t)v236;
                      if (v237 - 7 <= (unint64_t)v229)
                      {
                        v242 = v10 + 5;
                        v243 = v235;
                        if ((unint64_t)v229 < v237 - 3)
                        {
LABEL_369:
                          if (*v243 == *(_DWORD *)v242)
                          {
                            v242 += 4;
                            ++v243;
                          }
                        }
LABEL_371:
                        if ((unint64_t)v242 >= v237 - 1)
                        {
                          if ((unint64_t)v242 < v237)
                            goto LABEL_377;
                        }
                        else
                        {
                          if (*(unsigned __int16 *)v243 == *(unsigned __int16 *)v242)
                          {
                            v242 += 2;
                            v243 = (_DWORD *)((char *)v243 + 2);
                          }
                          if ((unint64_t)v242 >= v237)
                            goto LABEL_379;
LABEL_377:
                          if (*(unsigned __int8 *)v243 == *v242)
                            ++v242;
                        }
LABEL_379:
                        v239 = v242 - (unsigned __int8 *)v229;
                        if ((char *)v235 + v242 - (unsigned __int8 *)v229 == v227)
                          goto LABEL_380;
LABEL_361:
                        v143 = v239 + 4;
                        if (v239 + 4 > v232)
                          goto LABEL_419;
                        goto LABEL_420;
                      }
                      v238 = *(_QWORD *)v229 ^ *v235;
                      if (v238)
                      {
                        v239 = __clz(__rbit64(v238)) >> 3;
                        if ((char *)v235 + v239 == v227)
                          goto LABEL_380;
                        goto LABEL_361;
                      }
                      v247 = 0;
                      do
                      {
                        v242 = &v10[v247 + 13];
                        if ((unint64_t)v242 >= v237 - 7)
                        {
                          v243 = (_DWORD *)(v403 + v233 + v247);
                          if ((unint64_t)v242 < v237 - 3)
                            goto LABEL_369;
                          goto LABEL_371;
                        }
                        v248 = *(_QWORD *)(v403 + v233 + v247);
                        v247 += 8;
                        v249 = *(_QWORD *)v242 ^ v248;
                      }
                      while (!v249);
                      v239 = v247 + (__clz(__rbit64(v249)) >> 3);
                      if ((char *)v235 + v239 != v227)
                        goto LABEL_361;
LABEL_380:
                      v244 = &v229[v239];
                      if (v430 <= (unint64_t)&v229[v239])
                      {
                        v253 = &v229[v239];
                        v254 = (_DWORD *)(v212 + v216);
                        if ((unint64_t)v244 < v427)
                        {
LABEL_408:
                          if (*v254 == *(_DWORD *)v253)
                          {
                            v253 += 4;
                            ++v254;
                          }
                        }
LABEL_410:
                        if ((unint64_t)v253 >= v426)
                        {
                          if ((unint64_t)v253 >= v429)
                            goto LABEL_418;
                        }
                        else
                        {
                          if (*(unsigned __int16 *)v254 == *(unsigned __int16 *)v253)
                          {
                            v253 += 2;
                            v254 = (_DWORD *)((char *)v254 + 2);
                          }
                          if ((unint64_t)v253 >= v429)
                          {
LABEL_418:
                            v143 = v253 - v229 + 4;
                            if (v143 > v232)
                              goto LABEL_419;
                            goto LABEL_420;
                          }
                        }
                        if (*(unsigned __int8 *)v254 == *v253)
                          ++v253;
                        goto LABEL_418;
                      }
                      v245 = *(_QWORD *)v244 ^ *(_QWORD *)(v212 + v216);
                      if (v245)
                      {
                        v143 = (__clz(__rbit64(v245)) >> 3) + v239 + 4;
                        if (v143 > v232)
                          goto LABEL_419;
                        goto LABEL_420;
                      }
                      v255 = 0;
                      v256 = &v146[v239];
                      while (2)
                      {
                        v257 = &v256[v255];
                        if ((unint64_t)&v256[v255] >= v430)
                        {
                          v253 = &v146[v239 + v255];
                          v254 = (_DWORD *)(v231 + v255);
                          if ((unint64_t)v253 < v427)
                            goto LABEL_408;
                          goto LABEL_410;
                        }
                        v258 = *(_QWORD *)(v231 + v255);
                        v255 += 8;
                        v259 = *(_QWORD *)v257 ^ v258;
                        if (!v259)
                          continue;
                        break;
                      }
                      v143 = v255 + (__clz(__rbit64(v259)) >> 3) + v239 + 4;
                      if (v143 > v232)
                      {
LABEL_419:
                        v145 = v230 - v233;
                        v232 = v143;
                        if (&v147[v143] != (char *)v429)
                          goto LABEL_420;
                        goto LABEL_533;
                      }
LABEL_420:
                      if (v233 <= v220)
                        goto LABEL_530;
                      if (!--v228)
                      {
                        v143 = v232;
                        goto LABEL_533;
                      }
                      v225 = *(_DWORD *)(v209 + 4 * (v233 & v226));
                      v143 = v232;
                      if (v225 < v217)
                      {
LABEL_533:
                        if (v143 < 4)
                          goto LABEL_566;
                        goto LABEL_534;
                      }
                    }
                    v240 = (_QWORD *)(v212 + v225);
                    if (*((unsigned __int8 *)v240 + v232) != v147[v232])
                      goto LABEL_420;
                    if (v430 <= (unint64_t)v147)
                    {
                      v246 = v10 + 1;
                      if ((unint64_t)v147 >= v427)
                        goto LABEL_387;
                    }
                    else
                    {
                      v241 = *v240 ^ *(_QWORD *)v147;
                      if (v241)
                      {
                        v143 = __clz(__rbit64(v241)) >> 3;
                        if (v143 > v232)
                          goto LABEL_419;
                        goto LABEL_420;
                      }
                      v250 = 0;
                      while (1)
                      {
                        v246 = &v10[v250 + 9];
                        if ((unint64_t)v246 >= v430)
                          break;
                        v251 = *(_QWORD *)(v409 + v233 + v250);
                        v250 += 8;
                        v252 = *(_QWORD *)v246 ^ v251;
                        if (v252)
                        {
                          v143 = v250 + (__clz(__rbit64(v252)) >> 3);
                          if (v143 > v232)
                            goto LABEL_419;
                          goto LABEL_420;
                        }
                      }
                      v240 = (_QWORD *)(v409 + v233 + v250);
                      if ((unint64_t)v246 >= v427)
                      {
LABEL_387:
                        if ((unint64_t)v246 >= v426)
                        {
                          if ((unint64_t)v246 >= v429)
                            goto LABEL_395;
                        }
                        else
                        {
                          if (*(unsigned __int16 *)v240 == *(unsigned __int16 *)v246)
                          {
                            v246 += 2;
                            v240 = (_QWORD *)((char *)v240 + 2);
                          }
                          if ((unint64_t)v246 >= v429)
                          {
LABEL_395:
                            v143 = v246 - (unsigned __int8 *)v147;
                            if (v246 - (unsigned __int8 *)v147 > v232)
                              goto LABEL_419;
                            goto LABEL_420;
                          }
                        }
                        if (*(unsigned __int8 *)v240 == *v246)
                          ++v246;
                        goto LABEL_395;
                      }
                    }
                    if (*(_DWORD *)v240 == *(_DWORD *)v246)
                    {
                      v246 += 4;
                      v240 = (_QWORD *)((char *)v240 + 4);
                    }
                    goto LABEL_387;
                  }
                  LODWORD(v310) = v423;
                  v311 = a2;
                  v9 = v397;
                  if (!v423)
                    goto LABEL_553;
LABEL_536:
                  v312 = v399;
                  v6 = v400;
                  v313 = v416;
                  LODWORD(v7) = v411;
                  v314 = v419;
                  if (v411 > (int)v416 - ((int)v310 + (int)v400) + 2)
                    v312 = v387;
                  else
                    v314 = v400;
                  if (v416 > v398)
                  {
                    v315 = ((_DWORD)v416 - (v310 + v400) + 2);
                    if (v314 + v315 > (unint64_t)v312)
                    {
                      v316 = (unsigned __int8 *)(v314 + v315 - 1);
                      v317 = v416 - 1;
                      v12 = (char *)v396;
                      v319 = v388;
                      v318 = v429 - 32;
                      while (*v317 == *v316)
                      {
                        ++v156;
                        v320 = v317 - 1;
                        if (v317 > v398)
                        {
                          --v317;
                          if (v316-- > v312)
                            continue;
                        }
                        v313 = v320 + 1;
                        v9 = v412;
                        v8 = (v310 - 2);
                        v322 = v320 + 1 - v398;
                        v323 = *(_OWORD **)(v311 + 24);
                        if ((unint64_t)(v320 + 1) <= v389)
                          goto LABEL_548;
                        goto LABEL_554;
                      }
                      v313 = v317 + 1;
                      v9 = v412;
                      v8 = (v310 - 2);
                      v322 = v317 + 1 - v398;
                      v323 = *(_OWORD **)(v311 + 24);
                      if ((unint64_t)v313 <= v389)
                        goto LABEL_548;
                      goto LABEL_554;
                    }
                  }
                  v12 = (char *)v396;
                  v319 = v388;
                  v318 = v429 - 32;
                  v9 = v412;
                  v8 = (v310 - 2);
                  v322 = v416 - v398;
                  v323 = *(_OWORD **)(v311 + 24);
                  if ((unint64_t)v416 > v389)
                    goto LABEL_554;
                  goto LABEL_548;
                }
                v260 = *(_QWORD *)(a1 + 64);
                v261 = *(_DWORD *)(a1 + 196);
                v262 = 1 << v261;
                v263 = *(_QWORD *)(a1 + 8);
                v264 = *(_QWORD *)(a1 + 16);
                v265 = (_DWORD)v147 - v263;
                v266 = 1 << *(_DWORD *)(a1 + 192);
                v267 = *(unsigned int *)(a1 + 24);
                v268 = *(_DWORD *)(a1 + 28);
                v269 = *(unsigned int *)(a1 + 36);
                if ((_DWORD)v147 - (_DWORD)v263 - v268 > v266 && *(_DWORD *)(a1 + 32) == 0)
                  v268 = (_DWORD)v147 - v263 - v266;
                if (v265 >= v262)
                  v271 = v265 - v262;
                else
                  v271 = 0;
                v272 = *(_QWORD *)(a1 + 48);
                v273 = *(_DWORD *)(a1 + 204);
                v274 = 32 - *(_DWORD *)(a1 + 200);
                if (v269 < v265)
                {
                  do
                  {
                    v275 = 4 * ((-1640531535 * *(_DWORD *)(v263 + v269)) >> v274);
                    *(_DWORD *)(v260 + 4 * (v269 & ~(-1 << v261))) = *(_DWORD *)(v272 + v275);
                    *(_DWORD *)(v272 + v275) = v269++;
                  }
                  while (v269 < ((_DWORD)v147 - v263));
                }
                *(_DWORD *)(a1 + 36) = v265;
                v276 = *(_DWORD *)(v272 + 4 * ((-1640531535 * *(_DWORD *)v147) >> v274));
                if (v276 < v268)
                {
LABEL_568:
                  LODWORD(v310) = v423;
                  v311 = a2;
                  v9 = v397;
                  if (!v423)
                    goto LABEL_553;
                  goto LABEL_536;
                }
                v277 = v262 - 1;
                v278 = (char *)(v264 + v267);
                v279 = 1 << v273;
                v280 = (char *)(v10 + 5);
                v281 = v265 + 2;
                v404 = v264 + 12;
                v410 = v263 + 8;
                v282 = v263 + 8 + v267;
                v232 = 3;
                v145 = 999999999;
                while (1)
                {
                  v283 = v276;
                  if (v276 >= v267)
                    break;
                  v284 = (_DWORD *)(v264 + v276);
                  if (*v284 != *(_DWORD *)v147)
                    goto LABEL_515;
                  v285 = v284 + 1;
                  v286 = &v280[v278 - (char *)(v284 + 1)];
                  v287 = v429;
                  if ((unint64_t)v286 < v429)
                    v287 = (unint64_t)v286;
                  if (v287 - 7 <= (unint64_t)v280)
                  {
                    v292 = (char *)(v10 + 5);
                    v293 = v285;
                    if ((unint64_t)v280 < v287 - 3)
                    {
LABEL_464:
                      if (*v293 == *(_DWORD *)v292)
                      {
                        v292 += 4;
                        ++v293;
                      }
                    }
LABEL_466:
                    if ((unint64_t)v292 >= v287 - 1)
                    {
                      if ((unint64_t)v292 < v287)
                        goto LABEL_472;
                    }
                    else
                    {
                      if (*(unsigned __int16 *)v293 == *(unsigned __int16 *)v292)
                      {
                        v292 += 2;
                        v293 = (_DWORD *)((char *)v293 + 2);
                      }
                      if ((unint64_t)v292 >= v287)
                        goto LABEL_474;
LABEL_472:
                      if (*(unsigned __int8 *)v293 == *v292)
                        ++v292;
                    }
LABEL_474:
                    v289 = v292 - v280;
                    if ((char *)v285 + v292 - v280 == v278)
                      goto LABEL_475;
LABEL_456:
                    v143 = v289 + 4;
                    if (v289 + 4 <= v232)
                      goto LABEL_515;
                    goto LABEL_514;
                  }
                  v288 = *(_QWORD *)v280 ^ *v285;
                  if (v288)
                  {
                    v289 = __clz(__rbit64(v288)) >> 3;
                    if ((char *)v285 + v289 == v278)
                      goto LABEL_475;
                    goto LABEL_456;
                  }
                  v297 = 0;
                  do
                  {
                    v292 = &v146[v297];
                    if ((unint64_t)&v146[v297] >= v287 - 7)
                    {
                      v293 = (_DWORD *)(v404 + v283 + v297);
                      if ((unint64_t)v292 < v287 - 3)
                        goto LABEL_464;
                      goto LABEL_466;
                    }
                    v298 = *(_QWORD *)(v404 + v283 + v297);
                    v297 += 8;
                    v299 = *(_QWORD *)v292 ^ v298;
                  }
                  while (!v299);
                  v289 = v297 + (__clz(__rbit64(v299)) >> 3);
                  if ((char *)v285 + v289 != v278)
                    goto LABEL_456;
LABEL_475:
                  v294 = &v280[v289];
                  if (v430 <= (unint64_t)&v280[v289])
                  {
                    v303 = &v280[v289];
                    v304 = (_DWORD *)(v263 + v267);
                    if ((unint64_t)v294 < v427)
                    {
LABEL_503:
                      if (*v304 == *(_DWORD *)v303)
                      {
                        v303 += 4;
                        ++v304;
                      }
                    }
LABEL_505:
                    if ((unint64_t)v303 >= v426)
                    {
                      if ((unint64_t)v303 >= v429)
                        goto LABEL_513;
                    }
                    else
                    {
                      if (*(unsigned __int16 *)v304 == *(unsigned __int16 *)v303)
                      {
                        v303 += 2;
                        v304 = (_DWORD *)((char *)v304 + 2);
                      }
                      if ((unint64_t)v303 >= v429)
                      {
LABEL_513:
                        v143 = v303 - v280 + 4;
                        if (v143 <= v232)
                          goto LABEL_515;
                        goto LABEL_514;
                      }
                    }
                    if (*(unsigned __int8 *)v304 == *v303)
                      ++v303;
                    goto LABEL_513;
                  }
                  v295 = *(_QWORD *)v294 ^ *(_QWORD *)(v263 + v267);
                  if (v295)
                  {
                    v143 = (__clz(__rbit64(v295)) >> 3) + v289 + 4;
                    if (v143 <= v232)
                      goto LABEL_515;
                    goto LABEL_514;
                  }
                  v305 = 0;
                  v306 = &v146[v289];
                  while (2)
                  {
                    v307 = &v306[v305];
                    if ((unint64_t)&v306[v305] >= v430)
                    {
                      v303 = &v146[v289 + v305];
                      v304 = (_DWORD *)(v282 + v305);
                      if ((unint64_t)v303 < v427)
                        goto LABEL_503;
                      goto LABEL_505;
                    }
                    v308 = *(_QWORD *)(v282 + v305);
                    v305 += 8;
                    v309 = *(_QWORD *)v307 ^ v308;
                    if (!v309)
                      continue;
                    break;
                  }
                  v143 = v305 + (__clz(__rbit64(v309)) >> 3) + v289 + 4;
                  if (v143 > v232)
                    goto LABEL_514;
LABEL_515:
                  if (v283 <= v271 || (--v279, !v279))
                  {
LABEL_530:
                    v143 = v232;
                    if (v232 >= 4)
                      goto LABEL_534;
LABEL_566:
                    v156 = v421;
                    LODWORD(v310) = v423;
                    v311 = a2;
                    v9 = v397;
                    if (!v423)
                      goto LABEL_553;
                    goto LABEL_536;
                  }
                  v276 = *(_DWORD *)(v260 + 4 * (v283 & v277));
                  v143 = v232;
                  if (v276 < v268)
                    goto LABEL_533;
                }
                v290 = (_QWORD *)(v263 + v276);
                if (*((unsigned __int8 *)v290 + v232) != v147[v232])
                  goto LABEL_515;
                if (v430 <= (unint64_t)v147)
                {
                  v296 = v10 + 1;
                  if ((unint64_t)v147 >= v427)
                    goto LABEL_482;
                }
                else
                {
                  v291 = *(_QWORD *)v147 ^ *v290;
                  if (v291)
                  {
                    v143 = __clz(__rbit64(v291)) >> 3;
                    if (v143 <= v232)
                      goto LABEL_515;
                    goto LABEL_514;
                  }
                  v300 = 0;
                  while (1)
                  {
                    v296 = &v10[v300 + 9];
                    if ((unint64_t)v296 >= v430)
                      break;
                    v301 = *(_QWORD *)(v410 + v283 + v300);
                    v300 += 8;
                    v302 = *(_QWORD *)v296 ^ v301;
                    if (v302)
                    {
                      v143 = v300 + (__clz(__rbit64(v302)) >> 3);
                      if (v143 <= v232)
                        goto LABEL_515;
LABEL_514:
                      v145 = v281 - v283;
                      v232 = v143;
                      if (&v147[v143] == (char *)v429)
                        goto LABEL_533;
                      goto LABEL_515;
                    }
                  }
                  v290 = (_QWORD *)(v410 + v283 + v300);
                  if ((unint64_t)v296 >= v427)
                  {
LABEL_482:
                    if ((unint64_t)v296 >= v426)
                    {
                      if ((unint64_t)v296 >= v429)
                        goto LABEL_490;
                    }
                    else
                    {
                      if (*(unsigned __int16 *)v290 == *(unsigned __int16 *)v296)
                      {
                        v296 += 2;
                        v290 = (_QWORD *)((char *)v290 + 2);
                      }
                      if ((unint64_t)v296 >= v429)
                      {
LABEL_490:
                        v143 = v296 - (unsigned __int8 *)v147;
                        if (v296 - (unsigned __int8 *)v147 <= v232)
                          goto LABEL_515;
                        goto LABEL_514;
                      }
                    }
                    if (*(unsigned __int8 *)v290 == *v296)
                      ++v296;
                    goto LABEL_490;
                  }
                }
                if (*(_DWORD *)v290 == *(_DWORD *)v296)
                {
                  v296 += 4;
                  v290 = (_QWORD *)((char *)v290 + 4);
                }
                goto LABEL_482;
              }
            }
          }
        }
        v416 = (unsigned __int8 *)v144;
        v156 = v143;
        v157 = *(_DWORD *)(a1 + 208);
        v421 = v143;
        v423 = v145;
        if ((v157 - 6) >= 2)
          goto LABEL_341;
LABEL_246:
        v158 = *(_QWORD *)(a1 + 64);
        v159 = *(_DWORD *)(a1 + 196);
        v160 = 1 << v159;
        v161 = *(_QWORD *)(a1 + 8);
        v162 = *(_QWORD *)(a1 + 16);
        v163 = (_DWORD)v147 - v161;
        v164 = 1 << *(_DWORD *)(a1 + 192);
        v165 = *(unsigned int *)(a1 + 24);
        v166 = *(_DWORD *)(a1 + 28);
        v167 = *(unsigned int *)(a1 + 36);
        if ((_DWORD)v147 - (_DWORD)v161 - v166 > v164 && *(_DWORD *)(a1 + 32) == 0)
          v166 = (_DWORD)v147 - v161 - v164;
        if (v163 >= v160)
          v169 = v163 - v160;
        else
          v169 = 0;
        v170 = *(_QWORD *)(a1 + 48);
        v171 = *(_DWORD *)(a1 + 204);
        v172 = 64 - *(_DWORD *)(a1 + 200);
        if (v167 < v163)
        {
          do
          {
            v173 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v161 + v167)) >> v172);
            *(_DWORD *)(v158 + 4 * (v167 & ~(-1 << v159))) = *(_DWORD *)(v170 + v173);
            *(_DWORD *)(v170 + v173) = v167++;
          }
          while (v167 < ((_DWORD)v147 - v161));
        }
        *(_DWORD *)(a1 + 36) = v163;
        v174 = *(_DWORD *)(v170 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v147) >> v172));
        if (v174 < v166)
          goto LABEL_568;
        v175 = v160 - 1;
        v176 = (char *)(v162 + v165);
        v177 = 1 << v171;
        v178 = (char *)(v10 + 5);
        v179 = v163 + 2;
        v402 = v162 + 12;
        v408 = v161 + 8;
        v180 = v161 + 8 + v165;
        v181 = 3;
        v145 = 999999999;
        while (2)
        {
          v182 = v174;
          if (v174 >= v165)
          {
            v189 = (_DWORD *)(v161 + v174);
            if (*((unsigned __int8 *)v189 + v181) != v147[v181])
              goto LABEL_325;
            if (v430 <= (unint64_t)v147)
            {
              v195 = v10 + 1;
              if ((unint64_t)v147 < v427)
              {
LABEL_290:
                if (*v189 == *(_DWORD *)v195)
                {
                  v195 += 4;
                  ++v189;
                }
              }
            }
            else
            {
              v190 = *(_QWORD *)v189 ^ *(_QWORD *)v147;
              if (v190)
              {
                v143 = __clz(__rbit64(v190)) >> 3;
                if (v143 <= v181)
                  goto LABEL_325;
                goto LABEL_324;
              }
              v199 = 0;
              while (1)
              {
                v195 = &v10[v199 + 9];
                if ((unint64_t)v195 >= v430)
                  break;
                v200 = *(_QWORD *)(v408 + v182 + v199);
                v199 += 8;
                v201 = *(_QWORD *)v195 ^ v200;
                if (v201)
                {
                  v143 = v199 + (__clz(__rbit64(v201)) >> 3);
                  if (v143 > v181)
                    goto LABEL_324;
                  goto LABEL_325;
                }
              }
              v189 = (_DWORD *)(v408 + v182 + v199);
              if ((unint64_t)v195 < v427)
                goto LABEL_290;
            }
            if ((unint64_t)v195 >= v426)
            {
              if ((unint64_t)v195 >= v429)
                goto LABEL_300;
            }
            else
            {
              if (*(unsigned __int16 *)v189 == *(unsigned __int16 *)v195)
              {
                v195 += 2;
                v189 = (_DWORD *)((char *)v189 + 2);
              }
              if ((unint64_t)v195 >= v429)
              {
LABEL_300:
                v143 = v195 - (unsigned __int8 *)v147;
                if (v195 - (unsigned __int8 *)v147 <= v181)
                  goto LABEL_325;
                goto LABEL_324;
              }
            }
            if (*(unsigned __int8 *)v189 == *v195)
              ++v195;
            goto LABEL_300;
          }
          v183 = (_DWORD *)(v162 + v174);
          if (*v183 != *(_DWORD *)v147)
            goto LABEL_325;
          v184 = v183 + 1;
          v185 = &v178[v176 - (char *)(v183 + 1)];
          if ((unint64_t)v185 >= v429)
            v186 = v429;
          else
            v186 = (unint64_t)v185;
          if (v186 - 7 <= (unint64_t)v178)
          {
            v191 = (char *)(v10 + 5);
            v192 = v184;
            if ((unint64_t)v178 < v186 - 3)
            {
LABEL_274:
              if (*v192 == *(_DWORD *)v191)
              {
                v191 += 4;
                ++v192;
              }
            }
            goto LABEL_276;
          }
          v187 = *(_QWORD *)v178 ^ *v184;
          if (!v187)
          {
            v196 = 0;
            while (1)
            {
              v191 = &v146[v196];
              if ((unint64_t)&v146[v196] >= v186 - 7)
                break;
              v197 = *(_QWORD *)(v402 + v182 + v196);
              v196 += 8;
              v198 = *(_QWORD *)v191 ^ v197;
              if (v198)
              {
                v188 = v196 + (__clz(__rbit64(v198)) >> 3);
                if ((char *)v184 + v188 != v176)
                  goto LABEL_266;
                goto LABEL_285;
              }
            }
            v192 = (_DWORD *)(v402 + v182 + v196);
            if ((unint64_t)v191 < v186 - 3)
              goto LABEL_274;
LABEL_276:
            if ((unint64_t)v191 >= v186 - 1)
            {
              if ((unint64_t)v191 < v186)
                goto LABEL_282;
            }
            else
            {
              if (*(unsigned __int16 *)v192 == *(unsigned __int16 *)v191)
              {
                v191 += 2;
                v192 = (_DWORD *)((char *)v192 + 2);
              }
              if ((unint64_t)v191 >= v186)
                goto LABEL_284;
LABEL_282:
              if (*(unsigned __int8 *)v192 == *v191)
                ++v191;
            }
LABEL_284:
            v188 = v191 - v178;
            if ((char *)v184 + v191 - v178 == v176)
              goto LABEL_285;
LABEL_266:
            v143 = v188 + 4;
            if (v143 <= v181)
              goto LABEL_325;
LABEL_324:
            v145 = v179 - v182;
            v181 = v143;
            if (&v147[v143] == (char *)v429)
              goto LABEL_533;
            goto LABEL_325;
          }
          v188 = __clz(__rbit64(v187)) >> 3;
          if ((char *)v184 + v188 != v176)
            goto LABEL_266;
LABEL_285:
          v193 = &v178[v188];
          if (v430 <= (unint64_t)&v178[v188])
          {
            v202 = &v178[v188];
            v203 = (_DWORD *)(v161 + v165);
            if ((unint64_t)v193 < v427)
            {
LABEL_313:
              if (*v203 == *(_DWORD *)v202)
              {
                v202 += 4;
                ++v203;
              }
            }
            goto LABEL_315;
          }
          v194 = *(_QWORD *)v193 ^ *(_QWORD *)(v161 + v165);
          if (!v194)
          {
            v204 = 0;
            v205 = &v146[v188];
            while (1)
            {
              v206 = &v205[v204];
              if ((unint64_t)&v205[v204] >= v430)
                break;
              v207 = *(_QWORD *)(v180 + v204);
              v204 += 8;
              v208 = *(_QWORD *)v206 ^ v207;
              if (v208)
              {
                v143 = v204 + (__clz(__rbit64(v208)) >> 3) + v188 + 4;
                if (v143 <= v181)
                  goto LABEL_325;
                goto LABEL_324;
              }
            }
            v202 = &v146[v188 + v204];
            v203 = (_DWORD *)(v180 + v204);
            if ((unint64_t)v202 < v427)
              goto LABEL_313;
LABEL_315:
            if ((unint64_t)v202 >= v426)
            {
              if ((unint64_t)v202 >= v429)
                goto LABEL_323;
            }
            else
            {
              if (*(unsigned __int16 *)v203 == *(unsigned __int16 *)v202)
              {
                v202 += 2;
                v203 = (_DWORD *)((char *)v203 + 2);
              }
              if ((unint64_t)v202 >= v429)
              {
LABEL_323:
                v143 = v202 - v178 + 4;
                if (v143 <= v181)
                  goto LABEL_325;
                goto LABEL_324;
              }
            }
            if (*(unsigned __int8 *)v203 == *v202)
              ++v202;
            goto LABEL_323;
          }
          v143 = (__clz(__rbit64(v194)) >> 3) + v188 + 4;
          if (v143 > v181)
            goto LABEL_324;
LABEL_325:
          if (v182 > v169)
          {
            if (--v177)
            {
              v174 = *(_DWORD *)(v158 + 4 * (v182 & v175));
              v143 = v181;
              if (v174 < v166)
                goto LABEL_533;
              continue;
            }
          }
          break;
        }
        v143 = v181;
        if (v181 < 4)
          goto LABEL_566;
LABEL_534:
        v156 = v421;
        LODWORD(v310) = v423;
        ++v146;
        v144 = (char *)++v10;
        if ((int)((__clz(v145 + 1) ^ 0xFFFFFFE0) + 4 * v143 + 1) > (int)((__clz(v423 + 1) ^ 0xFFFFFFE0) + 4 * v421 + 5))
          continue;
        break;
      }
      v311 = a2;
      v9 = v397;
      if (v423)
        goto LABEL_536;
LABEL_553:
      v6 = v400;
      LODWORD(v7) = v411;
      v8 = v412;
      v12 = (char *)v396;
      v319 = v388;
      v318 = v429 - 32;
      v313 = v416;
      v322 = v416 - v398;
      v323 = *(_OWORD **)(v311 + 24);
      if ((unint64_t)v416 > v389)
      {
LABEL_554:
        if ((unint64_t)v398 <= v318)
        {
          v330 = (char *)v323 + v318 - (_QWORD)v398;
          v332 = v398;
          v333 = v323;
          do
          {
            v334 = *(_OWORD *)v332;
            v332 += 16;
            *v333++ = v334;
          }
          while (v333 < (_OWORD *)v330);
          v329 = (_OWORD *)v318;
          if (v318 >= (unint64_t)v313)
            goto LABEL_588;
        }
        else
        {
          v329 = v398;
          v330 = v323;
          if (v398 >= v313)
          {
LABEL_588:
            *(_QWORD *)(v311 + 24) += v322;
            v331 = *(_QWORD *)(v311 + 8);
            if (v322 >= 0x10000)
            {
              v348 = (unint64_t)(v331 - *(_QWORD *)v311) >> 3;
              *(_DWORD *)(v311 + 72) = 1;
              *(_DWORD *)(v311 + 76) = v348;
            }
            goto LABEL_590;
          }
        }
        if ((unint64_t)v398 <= v318)
          v335 = (unsigned __int8 *)v318;
        else
          v335 = v398;
        v336 = v313 - v335;
        if ((unint64_t)(v313 - v335) < 8)
        {
          v337 = (unsigned __int8 *)v329;
          goto LABEL_587;
        }
        if ((unint64_t)((char *)v323 - (char *)v398) < 0x20)
        {
          v337 = (unsigned __int8 *)v329;
          goto LABEL_587;
        }
        if (v336 >= 0x20)
        {
          v338 = v336 & 0xFFFFFFFFFFFFFFE0;
          v339 = v329 + 1;
          v340 = (_OWORD *)((char *)v323 + v335 - v398 + 16);
          v341 = v336 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v342 = *v339;
            *(v340 - 1) = *(v339 - 1);
            *v340 = v342;
            v339 += 2;
            v340 += 2;
            v341 -= 32;
          }
          while (v341);
          if (v336 == v338)
            goto LABEL_588;
          if ((v336 & 0x18) == 0)
          {
            v337 = (unsigned __int8 *)v329 + v338;
            v330 += v338;
            do
            {
LABEL_587:
              v347 = *v337++;
              *v330++ = v347;
            }
            while (v337 < v313);
            goto LABEL_588;
          }
        }
        else
        {
          v338 = 0;
        }
        v330 += v336 & 0xFFFFFFFFFFFFFFF8;
        v337 = (unsigned __int8 *)v329 + (v336 & 0xFFFFFFFFFFFFFFF8);
        v343 = (uint64_t *)((char *)v329 + v338);
        v344 = (_QWORD *)((char *)v323 + &v335[v338] - v398);
        v345 = v338 - (v336 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v346 = *v343++;
          *v344++ = v346;
          v345 += 8;
        }
        while (v345);
        if (v336 == (v336 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_588;
        goto LABEL_587;
      }
LABEL_548:
      *v323 = *(_OWORD *)v398;
      v324 = *(_QWORD *)(v311 + 24);
      if (v322 > 0x10)
      {
        v325 = (_OWORD *)(v324 + 16);
        v326 = v324 + v322;
        v327 = (__int128 *)(v398 + 16);
        do
        {
          v328 = *v327++;
          *v325++ = v328;
        }
        while ((unint64_t)v325 < v326);
        goto LABEL_588;
      }
      *(_QWORD *)(v311 + 24) = v324 + v322;
      v331 = *(_QWORD *)(v311 + 8);
LABEL_590:
      *(_WORD *)(v331 + 4) = v322;
      *(_DWORD *)v331 = v310 + 1;
      if (v156 - 3 >= 0x10000)
      {
        v349 = (unint64_t)(v331 - *(_QWORD *)v311) >> 3;
        *(_DWORD *)(v311 + 72) = 2;
        *(_DWORD *)(v311 + 76) = v349;
      }
      *(_WORD *)(v331 + 6) = v156 - 3;
      v350 = v331 + 8;
      *(_QWORD *)(v311 + 8) = v331 + 8;
      v5 = &v313[v156];
      if ((unint64_t)v5 > v424)
      {
        v10 = v5;
        continue;
      }
      v351 = v8;
      v352 = v9;
LABEL_596:
      v8 = v352;
      v352 = v351;
      v353 = *(_DWORD *)(a1 + 28);
      if ((_DWORD)v5 - (_DWORD)v6 - v353 > v418 && *(_DWORD *)(a1 + 32) == 0)
        v353 = (_DWORD)v5 - v6 - v418;
      v355 = ((_DWORD)v5 - v6 - v8);
      if (v355 >= v7)
        v356 = v6;
      else
        v356 = v419;
      if ((v417 - v355) >= 3 && v355 > v353)
      {
        v357 = v356 + v355;
        if (*(_DWORD *)v5 == *(_DWORD *)(v356 + v355))
        {
          if (v355 >= v7)
            v358 = (_QWORD *)v429;
          else
            v358 = v12;
          v359 = (char *)(v5 + 4);
          v360 = (_QWORD *)(v357 + 4);
          v361 = (char *)v358 + (_QWORD)v5 - v357;
          if ((unint64_t)v361 >= v429)
            v361 = (char *)v429;
          if (v361 - 7 <= v359)
          {
            v365 = (char *)(v5 + 4);
            v366 = v360;
            if (v359 < v361 - 3)
            {
LABEL_619:
              if (*v366 == *(_DWORD *)v365)
              {
                v365 += 4;
                ++v366;
              }
            }
          }
          else
          {
            v362 = *(_QWORD *)v359 ^ *v360;
            if (v362)
            {
              v363 = __clz(__rbit64(v362)) >> 3;
              if ((_QWORD *)((char *)v360 + v363) != v358)
                goto LABEL_615;
LABEL_630:
              v367 = &v359[v363];
              if (v430 <= (unint64_t)v367)
              {
                v373 = (unsigned __int8 *)v367;
                v374 = v399;
                if ((unint64_t)v367 < v427)
                {
LABEL_640:
                  if (*(_DWORD *)v374 == *(_DWORD *)v373)
                  {
                    v373 += 4;
                    v374 += 4;
                  }
                }
              }
              else
              {
                v368 = *(_QWORD *)v367 ^ *(_QWORD *)v399;
                if (v368)
                {
                  v363 += __clz(__rbit64(v368)) >> 3;
                  if ((unint64_t)v5 > v318)
                    goto LABEL_616;
LABEL_651:
                  *(_OWORD *)*(_QWORD *)(v311 + 24) = *(_OWORD *)v5;
                  v350 = *(_QWORD *)(v311 + 8);
                  v364 = v363 + 1;
                  *(_WORD *)(v350 + 4) = 0;
                  *(_DWORD *)v350 = 1;
                  if (v363 + 1 >= 0x10000)
                  {
LABEL_652:
                    v375 = (unint64_t)(v350 - *(_QWORD *)v311) >> 3;
                    *(_DWORD *)(v311 + 72) = 2;
                    *(_DWORD *)(v311 + 76) = v375;
                  }
LABEL_595:
                  *(_WORD *)(v350 + 6) = v364;
                  v350 += 8;
                  v5 += v363 + 4;
                  *(_QWORD *)(v311 + 8) = v350;
                  v351 = v8;
                  LODWORD(v9) = v352;
                  v10 = v5;
                  if ((unint64_t)v5 > v424)
                    continue;
                  goto LABEL_596;
                }
                v376 = 0;
                v377 = (uint64_t)&v5[v363 + 12];
                while (1)
                {
                  v378 = (_QWORD *)(v377 + v376);
                  if (v377 + v376 >= v430)
                    break;
                  v379 = *(_QWORD *)(v319 + v376);
                  v376 += 8;
                  v380 = *v378 ^ v379;
                  if (v380)
                  {
                    v363 += v376 + (__clz(__rbit64(v380)) >> 3);
                    if ((unint64_t)v5 <= v318)
                      goto LABEL_651;
                    goto LABEL_616;
                  }
                }
                v373 = &v5[v363 + 12 + v376];
                v374 = (unsigned __int8 *)(v319 + v376);
                if ((unint64_t)v373 < v427)
                  goto LABEL_640;
              }
              if ((unint64_t)v373 >= v426)
              {
                if ((unint64_t)v373 >= v429)
                  goto LABEL_650;
              }
              else
              {
                if (*(unsigned __int16 *)v374 == *(unsigned __int16 *)v373)
                {
                  v373 += 2;
                  v374 += 2;
                }
                if ((unint64_t)v373 >= v429)
                {
LABEL_650:
                  v363 += v373 - (unsigned __int8 *)v367;
                  if ((unint64_t)v5 > v318)
                    goto LABEL_616;
                  goto LABEL_651;
                }
              }
              if (*v374 == *v373)
                ++v373;
              goto LABEL_650;
            }
            v369 = (char *)(v5 + 12);
            while (1)
            {
              v370 = &v369[v362];
              if (&v369[v362] >= v361 - 7)
                break;
              v371 = *(_QWORD *)(v356 + v355 + 12 + v362);
              v362 += 8;
              v372 = *(_QWORD *)v370 ^ v371;
              if (v372)
              {
                v363 = v362 + (__clz(__rbit64(v372)) >> 3);
                if ((_QWORD *)((char *)v360 + v363) != v358)
                  goto LABEL_615;
                goto LABEL_630;
              }
            }
            v365 = (char *)&v5[v362 + 12];
            v366 = (_DWORD *)(v356 + v355 + v362 + 12);
            if (v365 < v361 - 3)
              goto LABEL_619;
          }
          if (v365 >= v361 - 1)
          {
            if (v365 >= v361)
              goto LABEL_629;
          }
          else
          {
            if (*(unsigned __int16 *)v366 == *(unsigned __int16 *)v365)
            {
              v365 += 2;
              v366 = (_DWORD *)((char *)v366 + 2);
            }
            if (v365 >= v361)
            {
LABEL_629:
              v363 = v365 - v359;
              if ((_QWORD *)((char *)v360 + v365 - v359) == v358)
                goto LABEL_630;
LABEL_615:
              if ((unint64_t)v5 <= v318)
                goto LABEL_651;
LABEL_616:
              v364 = v363 + 1;
              *(_WORD *)(v350 + 4) = 0;
              *(_DWORD *)v350 = 1;
              if (v363 + 1 >= 0x10000)
                goto LABEL_652;
              goto LABEL_595;
            }
          }
          if (*(unsigned __int8 *)v366 == *v365)
            ++v365;
          goto LABEL_629;
        }
      }
      LODWORD(v9) = v8;
      LODWORD(v8) = v351;
      v10 = v5;
    }
    while ((unint64_t)v10 < v424);
  }
  *a3 = v8;
  a3[1] = v9;
  return v429 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy2_extDict(uint64_t a1, uint64_t a2, _DWORD *a3, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  unint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  char *v47;
  int v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  char *v66;
  _DWORD *v67;
  char *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  _DWORD *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  int v104;
  int v105;
  unint64_t v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _DWORD *v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  char v135;
  int v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  unint64_t v140;
  unint64_t v141;
  unsigned int v142;
  int v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  _DWORD *v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  int v158;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  unint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  int v182;
  int v183;
  int v184;
  unint64_t v185;
  unsigned int v186;
  unsigned int v187;
  char *v188;
  int v189;
  char *v190;
  char *v191;
  char *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _DWORD *v196;
  _QWORD *v197;
  char *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  _DWORD *v203;
  unint64_t v204;
  char *v205;
  _DWORD *v206;
  char *v207;
  unint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char *v216;
  _DWORD *v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  int v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int v233;
  unsigned int v234;
  uint64_t v235;
  int v236;
  int v237;
  int v238;
  unint64_t v239;
  unsigned int v240;
  unsigned int v241;
  char *v242;
  int v243;
  char *v244;
  char *v245;
  char *v246;
  uint64_t v247;
  _DWORD *v248;
  _QWORD *v249;
  char *v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  _DWORD *v254;
  unint64_t v255;
  char *v256;
  _DWORD *v257;
  char *v258;
  unint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  char *v267;
  _DWORD *v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  int v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int v284;
  unsigned int v285;
  uint64_t v286;
  int v287;
  int v288;
  int v289;
  uint64_t v290;
  unsigned int v291;
  unsigned int v292;
  char *v293;
  int v294;
  char *v295;
  char *v296;
  char *v297;
  uint64_t v298;
  _DWORD *v299;
  _QWORD *v300;
  char *v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  _DWORD *v305;
  unint64_t v306;
  char *v307;
  _DWORD *v308;
  char *v309;
  unint64_t v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  char *v318;
  _DWORD *v319;
  uint64_t v320;
  char *v321;
  char *v322;
  uint64_t v323;
  unint64_t v324;
  int v325;
  unsigned int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  unint64_t v332;
  int v333;
  uint64_t v334;
  int v335;
  unsigned int v336;
  uint64_t v337;
  uint64_t v338;
  unsigned int v339;
  unsigned int v340;
  uint64_t v341;
  unint64_t v342;
  unsigned int v344;
  unsigned int v345;
  uint64_t v346;
  int v347;
  int v348;
  int v349;
  unint64_t v350;
  unsigned int v351;
  unsigned int v352;
  char *v353;
  int v354;
  char *v355;
  unsigned int v356;
  char *v357;
  char *v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  _DWORD *v362;
  _QWORD *v363;
  char *v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  _DWORD *v368;
  unint64_t v369;
  char *v370;
  _DWORD *v371;
  char *v372;
  unint64_t v373;
  char *v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  char *v380;
  _DWORD *v381;
  char *v382;
  char *v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  int v387;
  unsigned int v388;
  uint64_t v389;
  uint64_t v390;
  unsigned int v391;
  unsigned int v392;
  uint64_t v393;
  unint64_t v394;
  unsigned int v396;
  unsigned int v397;
  uint64_t v398;
  int v399;
  int v400;
  int v401;
  unint64_t v402;
  uint64_t v403;
  unsigned int v404;
  unsigned int v405;
  _QWORD *v406;
  char *v407;
  int v408;
  char *v409;
  uint64_t v410;
  char *v411;
  uint64_t v412;
  char *v413;
  uint64_t v414;
  char *v415;
  char *v416;
  unint64_t v417;
  unint64_t v418;
  _DWORD *v419;
  unint64_t v420;
  char *v421;
  _DWORD *v422;
  char *v423;
  unint64_t v424;
  char *v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  _QWORD *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  unint64_t v435;
  char *v436;
  _DWORD *v437;
  char *v438;
  char *v439;
  uint64_t v440;
  unint64_t v441;
  uint64_t v442;
  int v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t v446;
  unsigned int v447;
  unsigned int v448;
  uint64_t v449;
  unint64_t v450;
  unsigned int v452;
  unsigned int v453;
  uint64_t v454;
  int v455;
  int v456;
  int v457;
  uint64_t v458;
  int v459;
  unsigned int v460;
  unsigned int v461;
  _QWORD *v462;
  char *v463;
  int v464;
  char *v465;
  uint64_t v466;
  char *v467;
  uint64_t v468;
  char *v469;
  uint64_t v470;
  char *v471;
  char *v472;
  unint64_t v473;
  unint64_t v474;
  _QWORD *v475;
  unint64_t v476;
  char *v477;
  _DWORD *v478;
  char *v479;
  unint64_t v480;
  char *v481;
  uint64_t v482;
  char *v483;
  uint64_t v484;
  _QWORD *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  uint64_t v490;
  unint64_t v491;
  char *v492;
  _DWORD *v493;
  char *v494;
  char *v495;
  uint64_t v496;
  unint64_t v497;
  unsigned __int8 *v498;
  unsigned int v499;
  uint64_t v500;
  __int128 *v501;
  unsigned __int8 *v502;
  uint64_t v503;
  unsigned __int8 *v504;
  char *v505;
  uint64_t v506;
  unint64_t v507;
  unint64_t v508;
  unsigned __int8 *v509;
  unint64_t v511;
  __int128 *v512;
  uint64_t v513;
  _OWORD *v514;
  unint64_t v515;
  __int128 *v516;
  uint64_t v517;
  __int128 v518;
  uint64_t v519;
  unsigned __int8 *v520;
  __int128 *v521;
  __int128 *v522;
  __int128 *v523;
  __int128 v524;
  unsigned __int8 *v525;
  unint64_t v526;
  unsigned __int8 *v527;
  unint64_t v528;
  int v529;
  __int128 *v530;
  _OWORD *v531;
  unint64_t v532;
  __int128 v533;
  unsigned __int8 *v534;
  _QWORD *v535;
  unint64_t v536;
  uint64_t v537;
  char v538;
  unint64_t v539;
  unint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unsigned int v544;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  _QWORD *v549;
  char *v550;
  _QWORD *v551;
  char *v552;
  unint64_t v553;
  unint64_t v554;
  __int16 v555;
  char *v556;
  _DWORD *v557;
  char *v558;
  unint64_t v559;
  char *v560;
  char *v561;
  uint64_t v562;
  unint64_t v563;
  char *v564;
  unsigned __int8 *v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t v568;
  _QWORD *v569;
  uint64_t v570;
  unint64_t v571;
  char *v574;
  char *v575;
  uint64_t v576;
  uint64_t v577;
  unsigned __int8 *v578;
  unint64_t v579;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  unsigned int v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  unsigned int v591;
  char *v592;
  unsigned int v593;
  unint64_t v594;
  unsigned __int8 *v595;
  uint64_t v596;
  char *v597;
  unsigned int v598;
  unsigned int v599;
  unsigned int v600;
  uint64_t v601;
  uint64_t v602;
  int v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  unint64_t v609;
  char *v610;
  uint64_t v611;
  unsigned int v612;
  unsigned int v613;
  uint64_t v614;
  char *v615;
  unint64_t v616;
  uint64_t v617;
  int v618;
  int v619;
  unsigned int v620;
  int v621;
  uint64_t v622;
  uint64_t v623;
  unint64_t v624;
  unint64_t v625;
  unint64_t v626;
  char *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t v632;
  unint64_t v633;

  v5 = a4;
  v632 = (unint64_t)&a4[a5];
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 24);
  LODWORD(v9) = *a3;
  LODWORD(v8) = a3[1];
  v595 = (unsigned __int8 *)(v6 + v7);
  if ((char *)(v6 + v7) == a4)
    v10 = (unint64_t)(a4 + 1);
  else
    v10 = (unint64_t)a4;
  v624 = (unint64_t)&a4[a5 - 8];
  v628 = (char *)v10;
  if (v10 < v624)
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = (char *)(v11 + v7);
    v623 = v11;
    v578 = (unsigned __int8 *)(v11 + *(unsigned int *)(a1 + 28));
    v619 = v7 - 1;
    v620 = 1 << *(_DWORD *)(a1 + 192);
    v633 = v632 - 7;
    v625 = v632 - 1;
    v626 = v632 - 3;
    v579 = v632 - 32;
    v581 = v7 + v6 + 8;
    v611 = *(_QWORD *)(a1 + 8);
    v612 = *(_DWORD *)(a1 + 24);
    v592 = (char *)(v11 + v7);
    do
    {
      v13 = 0;
      v621 = (_DWORD)v628 - v6;
      v14 = (_DWORD)v628 - v6 + 1;
      v15 = *(_DWORD *)(a1 + 28);
      v16 = *(_DWORD *)(a1 + 32);
      v17 = v14 - v620;
      if (v14 - v15 <= v620 || v16 != 0)
        v17 = *(_DWORD *)(a1 + 28);
      v19 = (v14 - v9);
      v20 = v623;
      if (v19 >= v7)
        v20 = v6;
      if ((v619 - v19) >= 3 && v19 > v17)
      {
        v21 = v20 + v19;
        if (*(_DWORD *)(v628 + 1) == *(_DWORD *)v21)
        {
          if (v19 >= v7)
            v22 = (char *)v632;
          else
            v22 = v12;
          v23 = v8;
          v24 = ZSTD_count_2segments(v628 + 5, (char *)(v21 + 4), v632, v22, v595);
          LODWORD(v8) = v23;
          v13 = v24 + 4;
        }
        else
        {
          v13 = 0;
        }
      }
      v25 = *(_DWORD *)(a1 + 208);
      v613 = v9;
      v594 = (unint64_t)v5;
      v593 = v8;
      v609 = v13;
      if ((v25 - 6) < 2)
      {
        v26 = *(_DWORD *)(a1 + 196);
        v27 = 1 << v26;
        v28 = *(_QWORD *)(a1 + 8);
        v29 = *(_QWORD *)(a1 + 16);
        v30 = (_DWORD)v628 - v28;
        v31 = 1 << *(_DWORD *)(a1 + 192);
        v32 = (_DWORD)v628 - v28 - v31;
        v33 = (_DWORD)v628 - (_DWORD)v28 - v15 > v31 && v16 == 0;
        v34 = *(_QWORD *)(a1 + 64);
        v35 = *(unsigned int *)(a1 + 24);
        if (!v33)
          v32 = v15;
        v36 = v30 - v27;
        if (v30 < v27)
          v36 = 0;
        v37 = *(_QWORD *)(a1 + 48);
        v38 = *(_DWORD *)(a1 + 204);
        v39 = *(unsigned int *)(a1 + 36);
        v40 = 64 - *(_DWORD *)(a1 + 200);
        if (v39 < v30)
        {
          v41 = ~(-1 << v26);
          do
          {
            v42 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v28 + v39)) >> v40);
            *(_DWORD *)(v34 + 4 * (v39 & v41)) = *(_DWORD *)(v37 + v42);
            *(_DWORD *)(v37 + v42) = v39++;
          }
          while (v39 < ((_DWORD)v628 - v28));
        }
        *(_DWORD *)(a1 + 36) = v30;
        v43 = *(_QWORD *)v628;
        v44 = *(_DWORD *)(v37 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v628) >> v40));
        if (v44 >= v32)
        {
          v45 = v27 - 1;
          v46 = (_QWORD *)(v28 + v35);
          v47 = (char *)(v29 + v35);
          v48 = 1 << v38;
          v49 = v628 + 4;
          v50 = v30 + 2;
          v51 = v628 + 8;
          v52 = v28 + 8;
          v53 = v628 + 12;
          v614 = v29 + 12;
          v54 = v28 + 8 + v35;
          v55 = 3;
          v617 = 999999999;
          while (1)
          {
            v56 = v44;
            if (v44 >= v35)
              break;
            v57 = (_DWORD *)(v29 + v44);
            if (*v57 != *(_DWORD *)v628)
              goto LABEL_103;
            v58 = v57 + 1;
            v59 = (unint64_t)&v628[v47 - (char *)v57];
            if (v59 >= v632)
              v60 = v632;
            else
              v60 = v59;
            if (v60 - 7 <= (unint64_t)v49)
            {
              v66 = v628 + 4;
              v67 = v58;
              if ((unint64_t)v49 < v60 - 3)
              {
LABEL_52:
                if (*v67 == *(_DWORD *)v66)
                {
                  v66 += 4;
                  ++v67;
                }
              }
LABEL_54:
              if ((unint64_t)v66 >= v60 - 1)
              {
                if ((unint64_t)v66 < v60)
                  goto LABEL_60;
              }
              else
              {
                if (*(unsigned __int16 *)v67 == *(unsigned __int16 *)v66)
                {
                  v66 += 2;
                  v67 = (_DWORD *)((char *)v67 + 2);
                }
                if ((unint64_t)v66 >= v60)
                  goto LABEL_62;
LABEL_60:
                if (*(unsigned __int8 *)v67 == *v66)
                  ++v66;
              }
LABEL_62:
              v62 = v66 - v49;
              if ((char *)v58 + v66 - v49 == v47)
                goto LABEL_63;
LABEL_44:
              v63 = v62 + 4;
              if (v62 + 4 > v55)
                goto LABEL_102;
              goto LABEL_103;
            }
            v61 = *(_QWORD *)v49 ^ *v58;
            if (v61)
            {
              v62 = __clz(__rbit64(v61)) >> 3;
              if ((char *)v58 + v62 == v47)
                goto LABEL_63;
              goto LABEL_44;
            }
            v596 = v29;
            v71 = v47;
            v72 = v43;
            v73 = v54;
            v74 = v50;
            v75 = v52;
            v76 = v46;
            v77 = 0;
            do
            {
              v66 = &v53[v77];
              if ((unint64_t)&v53[v77] >= v60 - 7)
              {
                v67 = (_DWORD *)(v614 + v56 + v77);
                v46 = v76;
                v52 = v75;
                v50 = v74;
                v54 = v73;
                v43 = v72;
                v47 = v71;
                v29 = v596;
                if ((unint64_t)v66 < v60 - 3)
                  goto LABEL_52;
                goto LABEL_54;
              }
              v78 = *(_QWORD *)(v614 + v56 + v77);
              v77 += 8;
              v79 = *(_QWORD *)v66 ^ v78;
            }
            while (!v79);
            v62 = v77 + (__clz(__rbit64(v79)) >> 3);
            v46 = v76;
            v52 = v75;
            v50 = v74;
            v54 = v73;
            v43 = v72;
            v47 = v71;
            v29 = v596;
            if ((char *)v58 + v62 != v47)
              goto LABEL_44;
LABEL_63:
            v68 = &v49[v62];
            if (v633 <= (unint64_t)&v49[v62])
            {
              v83 = &v49[v62];
              v84 = v46;
              if ((unint64_t)v68 < v626)
              {
LABEL_91:
                if (*v84 == *(_DWORD *)v83)
                {
                  v83 += 4;
                  ++v84;
                }
              }
LABEL_93:
              if ((unint64_t)v83 >= v625)
              {
                if ((unint64_t)v83 >= v632)
                  goto LABEL_101;
              }
              else
              {
                if (*(unsigned __int16 *)v84 == *(unsigned __int16 *)v83)
                {
                  v83 += 2;
                  v84 = (_DWORD *)((char *)v84 + 2);
                }
                if ((unint64_t)v83 >= v632)
                {
LABEL_101:
                  v63 = v83 - v628;
                  if (v63 > v55)
                    goto LABEL_102;
                  goto LABEL_103;
                }
              }
              if (*(unsigned __int8 *)v84 == *v83)
                ++v83;
              goto LABEL_101;
            }
            v69 = *(_QWORD *)v68 ^ *v46;
            if (v69)
            {
              v63 = (__clz(__rbit64(v69)) >> 3) + v62 + 4;
              if (v63 > v55)
                goto LABEL_102;
              goto LABEL_103;
            }
            v85 = 0;
            v86 = &v53[v62];
            while (2)
            {
              v87 = &v86[v85];
              if ((unint64_t)&v86[v85] >= v633)
              {
                v83 = &v53[v62 + v85];
                v84 = (_DWORD *)(v54 + v85);
                if ((unint64_t)v83 < v626)
                  goto LABEL_91;
                goto LABEL_93;
              }
              v88 = *(_QWORD *)(v54 + v85);
              v85 += 8;
              v89 = *(_QWORD *)v87 ^ v88;
              if (!v89)
                continue;
              break;
            }
            v63 = v85 + (__clz(__rbit64(v89)) >> 3) + v62 + 4;
            if (v63 <= v55)
              goto LABEL_103;
LABEL_102:
            v617 = (v50 - v56);
            v55 = v63;
            if (&v628[v63] == (char *)v632)
              goto LABEL_224;
LABEL_103:
            if (v56 <= v36 || (--v48, !v48))
            {
              v63 = v55;
              v140 = v609;
              if (v55 <= v609)
                v141 = v609;
              else
                v141 = v55;
              if (v141 >= 4)
                goto LABEL_228;
LABEL_6:
              v5 = (char *)v594;
              v628 += ((uint64_t)&v628[-v594] >> 8) + 1;
              v6 = v611;
              LODWORD(v7) = v612;
              LODWORD(v9) = v613;
              v12 = v592;
              LODWORD(v8) = v593;
              goto LABEL_7;
            }
            v44 = *(_DWORD *)(v34 + 4 * (v56 & v45));
            v63 = v55;
            if (v44 < v32)
              goto LABEL_224;
          }
          v64 = (_QWORD *)(v28 + v44);
          if (*((unsigned __int8 *)v64 + v55) != v628[v55])
            goto LABEL_103;
          if (v633 <= (unint64_t)v628)
          {
            v70 = v628;
            if ((unint64_t)v628 >= v626)
              goto LABEL_70;
          }
          else
          {
            v65 = *v64 ^ v43;
            if (v65)
            {
              v63 = __clz(__rbit64(v65)) >> 3;
              if (v63 > v55)
                goto LABEL_102;
              goto LABEL_103;
            }
            v80 = 0;
            while (1)
            {
              v70 = &v51[v80];
              if ((unint64_t)&v51[v80] >= v633)
                break;
              v81 = *(_QWORD *)(v52 + v56 + v80);
              v80 += 8;
              v82 = *(_QWORD *)v70 ^ v81;
              if (v82)
              {
                v63 = v80 + (__clz(__rbit64(v82)) >> 3);
                if (v63 > v55)
                  goto LABEL_102;
                goto LABEL_103;
              }
            }
            v64 = (_QWORD *)(v52 + v56 + v80);
            if ((unint64_t)v70 >= v626)
            {
LABEL_70:
              if ((unint64_t)v70 >= v625)
              {
                if ((unint64_t)v70 >= v632)
                  goto LABEL_78;
              }
              else
              {
                if (*(unsigned __int16 *)v64 == *(unsigned __int16 *)v70)
                {
                  v70 += 2;
                  v64 = (_QWORD *)((char *)v64 + 2);
                }
                if ((unint64_t)v70 >= v632)
                {
LABEL_78:
                  v63 = v70 - v628;
                  if (v70 - v628 > v55)
                    goto LABEL_102;
                  goto LABEL_103;
                }
              }
              if (*(unsigned __int8 *)v64 == *v70)
                ++v70;
              goto LABEL_78;
            }
          }
          if (*(_DWORD *)v64 == *(_DWORD *)v70)
          {
            v70 += 4;
            v64 = (_QWORD *)((char *)v64 + 4);
          }
          goto LABEL_70;
        }
LABEL_179:
        v617 = 999999999;
        v63 = 3;
        v140 = v609;
        if (v609 >= 3)
          v141 = v609;
        else
          v141 = 3;
        if (v141 >= 4)
          goto LABEL_228;
        goto LABEL_6;
      }
      if (v25 == 5)
      {
        v90 = *(_DWORD *)(a1 + 196);
        v91 = 1 << v90;
        v93 = *(_QWORD *)(a1 + 8);
        v92 = *(_QWORD *)(a1 + 16);
        v94 = (_DWORD)v628 - v93;
        v95 = 1 << *(_DWORD *)(a1 + 192);
        v96 = (_DWORD)v628 - (_DWORD)v93 - v15 > v95 && v16 == 0;
        v97 = *(_QWORD *)(a1 + 64);
        v98 = *(unsigned int *)(a1 + 24);
        if (v96)
          v99 = (_DWORD)v628 - v93 - v95;
        else
          v99 = v15;
        if (v94 >= v91)
          v100 = v94 - v91;
        else
          v100 = 0;
        v101 = *(_QWORD *)(a1 + 48);
        v102 = *(_DWORD *)(a1 + 204);
        v103 = *(unsigned int *)(a1 + 36);
        v104 = 64 - *(_DWORD *)(a1 + 200);
        if (v103 < v94)
        {
          v105 = ~(-1 << v90);
          do
          {
            v106 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v93 + v103)) >> v104);
            *(_DWORD *)(v97 + 4 * (v103 & v105)) = *(_DWORD *)(v101 + v106);
            *(_DWORD *)(v101 + v106) = v103++;
          }
          while (v103 < ((_DWORD)v628 - v93));
        }
        *(_DWORD *)(a1 + 36) = v94;
        v582 = *(_QWORD *)v628;
        v107 = *(_DWORD *)(v101 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v628) >> v104));
        if (v107 < v99)
          goto LABEL_179;
        v108 = v91 - 1;
        v615 = (char *)(v92 + v98);
        v109 = 1 << v102;
        v591 = v94 + 2;
        v574 = v628 + 8;
        v576 = v93 + 8;
        v110 = 3;
        v617 = 999999999;
        while (1)
        {
          v111 = v107;
          if (v107 >= v98)
            break;
          if (*(_DWORD *)(v92 + v107) == *(_DWORD *)v628)
          {
            v112 = v92;
            v113 = v97;
            v114 = ZSTD_count_2segments(v628 + 4, (char *)(v92 + v107 + 4), v632, v615, (_QWORD *)(v93 + v98));
            v97 = v113;
            v92 = v112;
            v63 = v114 + 4;
            if (v114 + 4 > v110)
            {
LABEL_154:
              v617 = v591 - v111;
              v110 = v63;
              if (&v628[v63] == (char *)v632)
                goto LABEL_224;
            }
          }
LABEL_155:
          if (v111 <= v100 || (--v109, !v109))
          {
            v63 = v110;
            goto LABEL_224;
          }
          v107 = *(_DWORD *)(v97 + 4 * (v111 & v108));
          v63 = v110;
          if (v107 < v99)
            goto LABEL_224;
        }
        v115 = (_DWORD *)(v93 + v107);
        if (*((unsigned __int8 *)v115 + v110) != v628[v110])
          goto LABEL_155;
        if (v633 <= (unint64_t)v628)
        {
          v117 = v628;
          if ((unint64_t)v628 < v626)
          {
LABEL_143:
            if (*v115 == *(_DWORD *)v117)
            {
              v117 += 4;
              ++v115;
            }
          }
        }
        else
        {
          v116 = *(_QWORD *)v115 ^ v582;
          if (v116)
          {
            v63 = __clz(__rbit64(v116)) >> 3;
            if (v63 > v110)
              goto LABEL_154;
            goto LABEL_155;
          }
          v118 = 0;
          while (1)
          {
            v117 = &v574[v118];
            if ((unint64_t)&v574[v118] >= v633)
              break;
            v119 = *(_QWORD *)(v576 + v111 + v118);
            v118 += 8;
            v120 = *(_QWORD *)v117 ^ v119;
            if (v120)
            {
              v63 = v118 + (__clz(__rbit64(v120)) >> 3);
              if (v63 > v110)
                goto LABEL_154;
              goto LABEL_155;
            }
          }
          v115 = (_DWORD *)(v576 + v111 + v118);
          if ((unint64_t)v117 < v626)
            goto LABEL_143;
        }
        if ((unint64_t)v117 >= v625)
        {
          if ((unint64_t)v117 >= v632)
            goto LABEL_153;
        }
        else
        {
          if (*(unsigned __int16 *)v115 == *(unsigned __int16 *)v117)
          {
            v117 += 2;
            v115 = (_DWORD *)((char *)v115 + 2);
          }
          if ((unint64_t)v117 >= v632)
          {
LABEL_153:
            v63 = v117 - v628;
            if (v117 - v628 > v110)
              goto LABEL_154;
            goto LABEL_155;
          }
        }
        if (*(unsigned __int8 *)v115 == *v117)
          ++v117;
        goto LABEL_153;
      }
      v121 = *(_DWORD *)(a1 + 196);
      v122 = 1 << v121;
      v124 = *(_QWORD *)(a1 + 8);
      v123 = *(_QWORD *)(a1 + 16);
      v125 = (_DWORD)v628 - v124;
      v126 = 1 << *(_DWORD *)(a1 + 192);
      v127 = (_DWORD)v628 - (_DWORD)v124 - v15 > v126 && v16 == 0;
      v128 = *(_QWORD *)(a1 + 64);
      v129 = *(unsigned int *)(a1 + 24);
      if (v127)
        v130 = (_DWORD)v628 - v124 - v126;
      else
        v130 = v15;
      if (v125 >= v122)
        v131 = v125 - v122;
      else
        v131 = 0;
      v132 = *(_QWORD *)(a1 + 48);
      v133 = *(_DWORD *)(a1 + 204);
      v134 = *(unsigned int *)(a1 + 36);
      v135 = 32 - *(_DWORD *)(a1 + 200);
      if (v134 < v125)
      {
        v136 = ~(-1 << v121);
        do
        {
          v137 = 4 * ((-1640531535 * *(_DWORD *)(v124 + v134)) >> v135);
          *(_DWORD *)(v128 + 4 * (v134 & v136)) = *(_DWORD *)(v132 + v137);
          *(_DWORD *)(v132 + v137) = v134++;
        }
        while (v134 < ((_DWORD)v628 - v124));
      }
      *(_DWORD *)(a1 + 36) = v125;
      v138 = *(_DWORD *)v628;
      v139 = *(_DWORD *)(v132 + 4 * ((-1640531535 * *(_DWORD *)v628) >> v135));
      if (v139 < v130)
        goto LABEL_179;
      v142 = v122 - 1;
      v597 = (char *)(v123 + v129);
      v143 = 1 << v133;
      v587 = v125 + 2;
      v575 = v628 + 8;
      v577 = v124 + 8;
      v144 = 3;
      v617 = 999999999;
      v583 = v123;
      do
      {
        v145 = v139;
        if (v139 < v129)
        {
          if (*(_DWORD *)(v123 + v139) != v138)
            goto LABEL_212;
          v146 = v128;
          v147 = v144;
          v148 = ZSTD_count_2segments(v628 + 4, (char *)(v123 + v139 + 4), v632, v597, (_QWORD *)(v124 + v129));
          v144 = v147;
          v128 = v146;
          v123 = v583;
          v63 = v148 + 4;
          if (v148 + 4 <= v144)
            goto LABEL_212;
          goto LABEL_211;
        }
        v149 = (_DWORD *)(v124 + v139);
        if (*((unsigned __int8 *)v149 + v144) != v628[v144])
          goto LABEL_212;
        if (v633 <= (unint64_t)v628)
        {
          v151 = v628;
          if ((unint64_t)v628 < v626)
          {
LABEL_200:
            if (*v149 == *(_DWORD *)v151)
            {
              v151 += 4;
              ++v149;
            }
          }
          goto LABEL_202;
        }
        v150 = *(_QWORD *)v628 ^ *(_QWORD *)v149;
        if (!v150)
        {
          v152 = 0;
          while (1)
          {
            v151 = &v575[v152];
            if ((unint64_t)&v575[v152] >= v633)
              break;
            v153 = *(_QWORD *)(v577 + v145 + v152);
            v152 += 8;
            v154 = *(_QWORD *)v151 ^ v153;
            if (v154)
            {
              v63 = v152 + (__clz(__rbit64(v154)) >> 3);
              if (v63 > v144)
                goto LABEL_211;
              goto LABEL_212;
            }
          }
          v149 = (_DWORD *)(v577 + v145 + v152);
          if ((unint64_t)v151 < v626)
            goto LABEL_200;
LABEL_202:
          if ((unint64_t)v151 >= v625)
          {
            if ((unint64_t)v151 >= v632)
              goto LABEL_210;
          }
          else
          {
            if (*(unsigned __int16 *)v149 == *(unsigned __int16 *)v151)
            {
              v151 += 2;
              v149 = (_DWORD *)((char *)v149 + 2);
            }
            if ((unint64_t)v151 >= v632)
            {
LABEL_210:
              v63 = v151 - v628;
              if (v151 - v628 <= v144)
                goto LABEL_212;
              goto LABEL_211;
            }
          }
          if (*(unsigned __int8 *)v149 == *v151)
            ++v151;
          goto LABEL_210;
        }
        v63 = __clz(__rbit64(v150)) >> 3;
        if (v63 <= v144)
          goto LABEL_212;
LABEL_211:
        v617 = v587 - v145;
        v144 = v63;
        if (&v628[v63] == (char *)v632)
          break;
LABEL_212:
        if (v145 <= v131 || (--v143, !v143))
        {
          v63 = v144;
          v140 = v609;
          if (v144 <= v609)
            v141 = v609;
          else
            v141 = v144;
          if (v141 >= 4)
            goto LABEL_228;
          goto LABEL_6;
        }
        v139 = *(_DWORD *)(v128 + 4 * (v145 & v142));
        v63 = v144;
      }
      while (v139 >= v130);
LABEL_224:
      v140 = v609;
      if (v63 <= v609)
        v141 = v609;
      else
        v141 = v63;
      if (v141 < 4)
        goto LABEL_6;
LABEL_228:
      v616 = v141;
      v155 = v628 + 1;
      if (v63 > v140)
        v155 = v628;
      v610 = v155;
      if (v63 <= v140)
        v156 = 0;
      else
        v156 = v617;
      if ((unint64_t)v628 >= v624)
        goto LABEL_855;
      while (2)
      {
        v157 = v628 + 1;
        v158 = v621 + 1;
        if (v156)
        {
          if (v158 - *(_DWORD *)(a1 + 28) > v620 && *(_DWORD *)(a1 + 32) == 0)
            v160 = v158 - v620;
          else
            v160 = *(_DWORD *)(a1 + 28);
          v161 = v158 - v613;
          v162 = v611;
          if (v161 < v612)
            v162 = v623;
          if ((v619 - v161) >= 3 && v161 > v160)
          {
            v163 = v162 + v161;
            if (*(_DWORD *)v157 == *(_DWORD *)v163)
            {
              v164 = v156;
              if (v161 >= v612)
                v165 = (char *)v632;
              else
                v165 = v592;
              v166 = ZSTD_count_2segments(v628 + 5, (char *)(v163 + 4), v632, v165, v595);
              if (v166 > 0xFFFFFFFFFFFFFFFBLL)
              {
                v156 = v164;
              }
              else
              {
                v156 = v164;
                if (3 * ((int)v166 + 4) > (int)((__clz(v164 + 1) ^ 0xFFFFFFE0) + 3 * v616 + 2))
                {
                  v156 = 0;
                  v610 = v628 + 1;
                  v616 = v166 + 4;
                }
              }
            }
          }
        }
        v167 = *(_DWORD *)(a1 + 208);
        v168 = v156;
        v618 = v621 + 1;
        if ((v167 - 6) < 2)
        {
          v169 = *(_QWORD *)(a1 + 64);
          v170 = *(_DWORD *)(a1 + 196);
          v171 = 1 << v170;
          v172 = *(_QWORD *)(a1 + 8);
          v173 = *(_QWORD *)(a1 + 16);
          v174 = (_DWORD)v157 - v172;
          v175 = 1 << *(_DWORD *)(a1 + 192);
          v176 = *(unsigned int *)(a1 + 24);
          v177 = *(unsigned int *)(a1 + 36);
          if ((int)v157 - (int)v172 - *(_DWORD *)(a1 + 28) > v175 && *(_DWORD *)(a1 + 32) == 0)
            v179 = (_DWORD)v157 - v172 - v175;
          else
            v179 = *(_DWORD *)(a1 + 28);
          v180 = v174 - v171;
          if (v174 < v171)
            v180 = 0;
          v181 = *(_QWORD *)(a1 + 48);
          v182 = *(_DWORD *)(a1 + 204);
          v183 = 64 - *(_DWORD *)(a1 + 200);
          if (v177 < v174)
          {
            v184 = ~(-1 << v170);
            do
            {
              v185 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v172 + v177)) >> v183);
              *(_DWORD *)(v169 + 4 * (v177 & v184)) = *(_DWORD *)(v181 + v185);
              *(_DWORD *)(v181 + v185) = v177++;
            }
            while ((_DWORD)v157 - (_DWORD)v172 != v177);
          }
          *(_DWORD *)(a1 + 36) = v174;
          v186 = *(_DWORD *)(v181 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v157) >> v183));
          v156 = v168;
          if (v186 < v179)
            goto LABEL_545;
          v187 = v171 - 1;
          v188 = (char *)(v173 + v176);
          v189 = 1 << v182;
          v190 = v628 + 5;
          v598 = v174 + 2;
          v191 = v628 + 9;
          v192 = v628 + 13;
          v584 = v173 + 12;
          v588 = v172 + 8;
          v604 = v172 + 8 + v176;
          v193 = 3;
          v194 = 999999999;
          while (2)
          {
            v195 = v186;
            if (v186 < v176)
            {
              v196 = (_DWORD *)(v173 + v186);
              if (*v196 != *(_DWORD *)v157)
                goto LABEL_333;
              v197 = v196 + 1;
              v198 = &v190[v188 - (char *)(v196 + 1)];
              if ((unint64_t)v198 >= v632)
                v199 = v632;
              else
                v199 = (unint64_t)v198;
              if (v199 - 7 <= (unint64_t)v190)
              {
                v205 = v628 + 5;
                v206 = v197;
                if ((unint64_t)v190 < v199 - 3)
                {
LABEL_282:
                  if (*v206 == *(_DWORD *)v205)
                  {
                    v205 += 4;
                    ++v206;
                  }
                }
              }
              else
              {
                v200 = *(_QWORD *)v190 ^ *v197;
                if (v200)
                {
                  v201 = __clz(__rbit64(v200)) >> 3;
                  if ((char *)v197 + v201 != v188)
                    goto LABEL_274;
LABEL_293:
                  v207 = &v190[v201];
                  if (v633 <= (unint64_t)&v190[v201])
                  {
                    v216 = &v190[v201];
                    v217 = (_DWORD *)(v172 + v176);
                    if ((unint64_t)v207 < v626)
                    {
LABEL_321:
                      if (*v217 == *(_DWORD *)v216)
                      {
                        v216 += 4;
                        ++v217;
                      }
                    }
                  }
                  else
                  {
                    v208 = *(_QWORD *)v207 ^ *(_QWORD *)(v172 + v176);
                    if (v208)
                    {
                      v202 = (__clz(__rbit64(v208)) >> 3) + v201 + 4;
                      if (v202 > v193)
                        goto LABEL_332;
LABEL_333:
                      if (v195 <= v180)
                        goto LABEL_539;
                      if (!--v189)
                        goto LABEL_539;
                      v186 = *(_DWORD *)(v169 + 4 * (v195 & v187));
                      v202 = v193;
                      if (v186 < v179)
                        goto LABEL_543;
                      continue;
                    }
                    v218 = 0;
                    v219 = &v192[v201];
                    while (1)
                    {
                      v220 = &v219[v218];
                      if ((unint64_t)&v219[v218] >= v633)
                        break;
                      v221 = *(_QWORD *)(v604 + v218);
                      v218 += 8;
                      v222 = *(_QWORD *)v220 ^ v221;
                      if (v222)
                      {
                        v202 = v218 + (__clz(__rbit64(v222)) >> 3) + v201 + 4;
                        if (v202 <= v193)
                          goto LABEL_333;
                        goto LABEL_332;
                      }
                    }
                    v216 = &v192[v201 + v218];
                    v217 = (_DWORD *)(v604 + v218);
                    if ((unint64_t)v216 < v626)
                      goto LABEL_321;
                  }
                  if ((unint64_t)v216 >= v625)
                  {
                    if ((unint64_t)v216 < v632)
                      goto LABEL_329;
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v217 == *(unsigned __int16 *)v216)
                    {
                      v216 += 2;
                      v217 = (_DWORD *)((char *)v217 + 2);
                    }
                    if ((unint64_t)v216 >= v632)
                      goto LABEL_331;
LABEL_329:
                    if (*(unsigned __int8 *)v217 == *v216)
                      ++v216;
                  }
LABEL_331:
                  v202 = v216 - v190 + 4;
                  if (v202 <= v193)
                    goto LABEL_333;
LABEL_332:
                  v194 = v598 - v195;
                  v193 = v202;
                  if (&v157[v202] == (char *)v632)
                    goto LABEL_543;
                  goto LABEL_333;
                }
                v210 = 0;
                while (1)
                {
                  v205 = &v192[v210];
                  if ((unint64_t)&v192[v210] >= v199 - 7)
                    break;
                  v211 = *(_QWORD *)(v584 + v195 + v210);
                  v210 += 8;
                  v212 = *(_QWORD *)v205 ^ v211;
                  if (v212)
                  {
                    v201 = v210 + (__clz(__rbit64(v212)) >> 3);
                    if ((char *)v197 + v201 != v188)
                      goto LABEL_274;
                    goto LABEL_293;
                  }
                }
                v206 = (_DWORD *)(v584 + v195 + v210);
                if ((unint64_t)v205 < v199 - 3)
                  goto LABEL_282;
              }
              if ((unint64_t)v205 >= v199 - 1)
              {
                if ((unint64_t)v205 >= v199)
                  goto LABEL_292;
              }
              else
              {
                if (*(unsigned __int16 *)v206 == *(unsigned __int16 *)v205)
                {
                  v205 += 2;
                  v206 = (_DWORD *)((char *)v206 + 2);
                }
                if ((unint64_t)v205 >= v199)
                {
LABEL_292:
                  v201 = v205 - v190;
                  if ((char *)v197 + v205 - v190 == v188)
                    goto LABEL_293;
LABEL_274:
                  v202 = v201 + 4;
                  if (v201 + 4 <= v193)
                    goto LABEL_333;
                  goto LABEL_332;
                }
              }
              if (*(unsigned __int8 *)v206 == *v205)
                ++v205;
              goto LABEL_292;
            }
            break;
          }
          v203 = (_DWORD *)(v172 + v186);
          if (*((unsigned __int8 *)v203 + v193) != v157[v193])
            goto LABEL_333;
          if (v633 <= (unint64_t)v157)
          {
            v209 = v628 + 1;
            if ((unint64_t)v157 < v626)
            {
LABEL_298:
              if (*v203 == *(_DWORD *)v209)
              {
                v209 += 4;
                ++v203;
              }
            }
          }
          else
          {
            v204 = *(_QWORD *)v203 ^ *(_QWORD *)v157;
            if (v204)
            {
              v202 = __clz(__rbit64(v204)) >> 3;
              if (v202 <= v193)
                goto LABEL_333;
              goto LABEL_332;
            }
            v213 = 0;
            while (1)
            {
              v209 = &v191[v213];
              if ((unint64_t)&v191[v213] >= v633)
                break;
              v214 = *(_QWORD *)(v588 + v195 + v213);
              v213 += 8;
              v215 = *(_QWORD *)v209 ^ v214;
              if (v215)
              {
                v202 = v213 + (__clz(__rbit64(v215)) >> 3);
                if (v202 > v193)
                  goto LABEL_332;
                goto LABEL_333;
              }
            }
            v203 = (_DWORD *)(v588 + v195 + v213);
            if ((unint64_t)v209 < v626)
              goto LABEL_298;
          }
          if ((unint64_t)v209 >= v625)
          {
            if ((unint64_t)v209 >= v632)
              goto LABEL_308;
          }
          else
          {
            if (*(unsigned __int16 *)v203 == *(unsigned __int16 *)v209)
            {
              v209 += 2;
              v203 = (_DWORD *)((char *)v203 + 2);
            }
            if ((unint64_t)v209 >= v632)
            {
LABEL_308:
              v202 = v209 - v157;
              if (v209 - v157 <= v193)
                goto LABEL_333;
              goto LABEL_332;
            }
          }
          if (*(unsigned __int8 *)v203 == *v209)
            ++v209;
          goto LABEL_308;
        }
        if (v167 == 5)
        {
          v223 = *(_QWORD *)(a1 + 64);
          v224 = *(_DWORD *)(a1 + 196);
          v225 = 1 << v224;
          v226 = *(_QWORD *)(a1 + 8);
          v227 = *(_QWORD *)(a1 + 16);
          v228 = (_DWORD)v157 - v226;
          v229 = 1 << *(_DWORD *)(a1 + 192);
          v230 = *(unsigned int *)(a1 + 24);
          v231 = *(unsigned int *)(a1 + 36);
          if ((int)v157 - (int)v226 - *(_DWORD *)(a1 + 28) > v229 && *(_DWORD *)(a1 + 32) == 0)
            v233 = (_DWORD)v157 - v226 - v229;
          else
            v233 = *(_DWORD *)(a1 + 28);
          v234 = v228 - v225;
          if (v228 < v225)
            v234 = 0;
          v235 = *(_QWORD *)(a1 + 48);
          v236 = *(_DWORD *)(a1 + 204);
          v237 = 64 - *(_DWORD *)(a1 + 200);
          if (v231 < v228)
          {
            v238 = ~(-1 << v224);
            do
            {
              v239 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v226 + v231)) >> v237);
              *(_DWORD *)(v223 + 4 * (v231 & v238)) = *(_DWORD *)(v235 + v239);
              *(_DWORD *)(v235 + v239) = v231++;
            }
            while ((_DWORD)v157 - (_DWORD)v226 != v231);
          }
          *(_DWORD *)(a1 + 36) = v228;
          v240 = *(_DWORD *)(v235 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v157) >> v237));
          v156 = v168;
          if (v240 < v233)
            goto LABEL_545;
          v241 = v225 - 1;
          v242 = (char *)(v227 + v230);
          v243 = 1 << v236;
          v244 = v628 + 5;
          v599 = v228 + 2;
          v245 = v628 + 9;
          v246 = v628 + 13;
          v585 = v227 + 12;
          v589 = v226 + 8;
          v605 = v226 + 8 + v230;
          v193 = 3;
          v194 = 999999999;
          while (2)
          {
            v247 = v240;
            if (v240 < v230)
            {
              v248 = (_DWORD *)(v227 + v240);
              if (*v248 != *(_DWORD *)v157)
                goto LABEL_429;
              v249 = v248 + 1;
              v250 = &v244[v242 - (char *)(v248 + 1)];
              if ((unint64_t)v250 >= v632)
                v251 = v632;
              else
                v251 = (unint64_t)v250;
              if (v251 - 7 <= (unint64_t)v244)
              {
                v256 = v628 + 5;
                v257 = v249;
                if ((unint64_t)v244 < v251 - 3)
                {
LABEL_378:
                  if (*v257 == *(_DWORD *)v256)
                  {
                    v256 += 4;
                    ++v257;
                  }
                }
              }
              else
              {
                v252 = *(_QWORD *)v244 ^ *v249;
                if (v252)
                {
                  v253 = __clz(__rbit64(v252)) >> 3;
                  if ((char *)v249 + v253 != v242)
                    goto LABEL_370;
LABEL_389:
                  v258 = &v244[v253];
                  if (v633 <= (unint64_t)&v244[v253])
                  {
                    v267 = &v244[v253];
                    v268 = (_DWORD *)(v226 + v230);
                    if ((unint64_t)v258 < v626)
                    {
LABEL_417:
                      if (*v268 == *(_DWORD *)v267)
                      {
                        v267 += 4;
                        ++v268;
                      }
                    }
                  }
                  else
                  {
                    v259 = *(_QWORD *)v258 ^ *(_QWORD *)(v226 + v230);
                    if (v259)
                    {
                      v202 = (__clz(__rbit64(v259)) >> 3) + v253 + 4;
                      if (v202 > v193)
                        goto LABEL_428;
LABEL_429:
                      if (v247 <= v234)
                        goto LABEL_539;
                      if (!--v243)
                      {
                        v202 = v193;
                        goto LABEL_543;
                      }
                      v240 = *(_DWORD *)(v223 + 4 * (v247 & v241));
                      v202 = v193;
                      if (v240 < v233)
                        goto LABEL_543;
                      continue;
                    }
                    v269 = 0;
                    v270 = &v246[v253];
                    while (1)
                    {
                      v271 = &v270[v269];
                      if ((unint64_t)&v270[v269] >= v633)
                        break;
                      v272 = *(_QWORD *)(v605 + v269);
                      v269 += 8;
                      v273 = *(_QWORD *)v271 ^ v272;
                      if (v273)
                      {
                        v202 = v269 + (__clz(__rbit64(v273)) >> 3) + v253 + 4;
                        if (v202 <= v193)
                          goto LABEL_429;
                        goto LABEL_428;
                      }
                    }
                    v267 = &v246[v253 + v269];
                    v268 = (_DWORD *)(v605 + v269);
                    if ((unint64_t)v267 < v626)
                      goto LABEL_417;
                  }
                  if ((unint64_t)v267 >= v625)
                  {
                    if ((unint64_t)v267 < v632)
                      goto LABEL_425;
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v268 == *(unsigned __int16 *)v267)
                    {
                      v267 += 2;
                      v268 = (_DWORD *)((char *)v268 + 2);
                    }
                    if ((unint64_t)v267 >= v632)
                      goto LABEL_427;
LABEL_425:
                    if (*(unsigned __int8 *)v268 == *v267)
                      ++v267;
                  }
LABEL_427:
                  v202 = v267 - v244 + 4;
                  if (v202 <= v193)
                    goto LABEL_429;
LABEL_428:
                  v194 = v599 - v247;
                  v193 = v202;
                  if (&v157[v202] == (char *)v632)
                    goto LABEL_543;
                  goto LABEL_429;
                }
                v261 = 0;
                while (1)
                {
                  v256 = &v246[v261];
                  if ((unint64_t)&v246[v261] >= v251 - 7)
                    break;
                  v262 = *(_QWORD *)(v585 + v247 + v261);
                  v261 += 8;
                  v263 = *(_QWORD *)v256 ^ v262;
                  if (v263)
                  {
                    v253 = v261 + (__clz(__rbit64(v263)) >> 3);
                    if ((char *)v249 + v253 != v242)
                      goto LABEL_370;
                    goto LABEL_389;
                  }
                }
                v257 = (_DWORD *)(v585 + v247 + v261);
                if ((unint64_t)v256 < v251 - 3)
                  goto LABEL_378;
              }
              if ((unint64_t)v256 >= v251 - 1)
              {
                if ((unint64_t)v256 >= v251)
                  goto LABEL_388;
              }
              else
              {
                if (*(unsigned __int16 *)v257 == *(unsigned __int16 *)v256)
                {
                  v256 += 2;
                  v257 = (_DWORD *)((char *)v257 + 2);
                }
                if ((unint64_t)v256 >= v251)
                {
LABEL_388:
                  v253 = v256 - v244;
                  if ((char *)v249 + v256 - v244 == v242)
                    goto LABEL_389;
LABEL_370:
                  v202 = v253 + 4;
                  if (v253 + 4 <= v193)
                    goto LABEL_429;
                  goto LABEL_428;
                }
              }
              if (*(unsigned __int8 *)v257 == *v256)
                ++v256;
              goto LABEL_388;
            }
            break;
          }
          v254 = (_DWORD *)(v226 + v240);
          if (*((unsigned __int8 *)v254 + v193) != v157[v193])
            goto LABEL_429;
          if (v633 <= (unint64_t)v157)
          {
            v260 = v628 + 1;
            if ((unint64_t)v157 < v626)
            {
LABEL_394:
              if (*v254 == *(_DWORD *)v260)
              {
                v260 += 4;
                ++v254;
              }
            }
          }
          else
          {
            v255 = *(_QWORD *)v254 ^ *(_QWORD *)v157;
            if (v255)
            {
              v202 = __clz(__rbit64(v255)) >> 3;
              if (v202 <= v193)
                goto LABEL_429;
              goto LABEL_428;
            }
            v264 = 0;
            while (1)
            {
              v260 = &v245[v264];
              if ((unint64_t)&v245[v264] >= v633)
                break;
              v265 = *(_QWORD *)(v589 + v247 + v264);
              v264 += 8;
              v266 = *(_QWORD *)v260 ^ v265;
              if (v266)
              {
                v202 = v264 + (__clz(__rbit64(v266)) >> 3);
                if (v202 > v193)
                  goto LABEL_428;
                goto LABEL_429;
              }
            }
            v254 = (_DWORD *)(v589 + v247 + v264);
            if ((unint64_t)v260 < v626)
              goto LABEL_394;
          }
          if ((unint64_t)v260 >= v625)
          {
            if ((unint64_t)v260 >= v632)
              goto LABEL_404;
          }
          else
          {
            if (*(unsigned __int16 *)v254 == *(unsigned __int16 *)v260)
            {
              v260 += 2;
              v254 = (_DWORD *)((char *)v254 + 2);
            }
            if ((unint64_t)v260 >= v632)
            {
LABEL_404:
              v202 = v260 - v157;
              if (v260 - v157 <= v193)
                goto LABEL_429;
              goto LABEL_428;
            }
          }
          if (*(unsigned __int8 *)v254 == *v260)
            ++v260;
          goto LABEL_404;
        }
        v274 = *(_QWORD *)(a1 + 64);
        v275 = *(_DWORD *)(a1 + 196);
        v276 = 1 << v275;
        v277 = *(_QWORD *)(a1 + 8);
        v278 = *(_QWORD *)(a1 + 16);
        v279 = (_DWORD)v157 - v277;
        v280 = 1 << *(_DWORD *)(a1 + 192);
        v281 = *(unsigned int *)(a1 + 24);
        v282 = *(unsigned int *)(a1 + 36);
        if ((int)v157 - (int)v277 - *(_DWORD *)(a1 + 28) > v280 && *(_DWORD *)(a1 + 32) == 0)
          v284 = (_DWORD)v157 - v277 - v280;
        else
          v284 = *(_DWORD *)(a1 + 28);
        v285 = v279 - v276;
        if (v279 < v276)
          v285 = 0;
        v286 = *(_QWORD *)(a1 + 48);
        v287 = *(_DWORD *)(a1 + 204);
        v288 = 32 - *(_DWORD *)(a1 + 200);
        if (v282 < v279)
        {
          v289 = ~(-1 << v275);
          do
          {
            v290 = 4 * ((-1640531535 * *(_DWORD *)(v277 + v282)) >> v288);
            *(_DWORD *)(v274 + 4 * (v282 & v289)) = *(_DWORD *)(v286 + v290);
            *(_DWORD *)(v286 + v290) = v282++;
          }
          while ((_DWORD)v157 - (_DWORD)v277 != v282);
        }
        *(_DWORD *)(a1 + 36) = v279;
        v291 = *(_DWORD *)(v286 + 4 * ((-1640531535 * *(_DWORD *)v157) >> v288));
        v156 = v168;
        if (v291 < v284)
          goto LABEL_545;
        v292 = v276 - 1;
        v293 = (char *)(v278 + v281);
        v294 = 1 << v287;
        v295 = v628 + 5;
        v600 = v279 + 2;
        v296 = v628 + 9;
        v297 = v628 + 13;
        v586 = v278 + 12;
        v590 = v277 + 8;
        v606 = v277 + 8 + v281;
        v193 = 3;
        v194 = 999999999;
        while (2)
        {
          v298 = v291;
          if (v291 >= v281)
          {
            v305 = (_DWORD *)(v277 + v291);
            if (*((unsigned __int8 *)v305 + v193) != v157[v193])
              goto LABEL_524;
            if (v633 <= (unint64_t)v157)
            {
              v311 = v628 + 1;
              if ((unint64_t)v157 < v626)
              {
LABEL_489:
                if (*v305 == *(_DWORD *)v311)
                {
                  v311 += 4;
                  ++v305;
                }
              }
            }
            else
            {
              v306 = *(_QWORD *)v157 ^ *(_QWORD *)v305;
              if (v306)
              {
                v202 = __clz(__rbit64(v306)) >> 3;
                if (v202 <= v193)
                  goto LABEL_524;
                goto LABEL_523;
              }
              v315 = 0;
              while (1)
              {
                v311 = &v296[v315];
                if ((unint64_t)&v296[v315] >= v633)
                  break;
                v316 = *(_QWORD *)(v590 + v298 + v315);
                v315 += 8;
                v317 = *(_QWORD *)v311 ^ v316;
                if (v317)
                {
                  v202 = v315 + (__clz(__rbit64(v317)) >> 3);
                  if (v202 > v193)
                    goto LABEL_523;
                  goto LABEL_524;
                }
              }
              v305 = (_DWORD *)(v590 + v298 + v315);
              if ((unint64_t)v311 < v626)
                goto LABEL_489;
            }
            if ((unint64_t)v311 >= v625)
            {
              if ((unint64_t)v311 >= v632)
                goto LABEL_499;
            }
            else
            {
              if (*(unsigned __int16 *)v305 == *(unsigned __int16 *)v311)
              {
                v311 += 2;
                v305 = (_DWORD *)((char *)v305 + 2);
              }
              if ((unint64_t)v311 >= v632)
              {
LABEL_499:
                v202 = v311 - v157;
                if (v311 - v157 <= v193)
                  goto LABEL_524;
                goto LABEL_523;
              }
            }
            if (*(unsigned __int8 *)v305 == *v311)
              ++v311;
            goto LABEL_499;
          }
          v299 = (_DWORD *)(v278 + v291);
          if (*v299 != *(_DWORD *)v157)
            goto LABEL_524;
          v300 = v299 + 1;
          v301 = &v295[v293 - (char *)(v299 + 1)];
          if ((unint64_t)v301 >= v632)
            v302 = v632;
          else
            v302 = (unint64_t)v301;
          if (v302 - 7 <= (unint64_t)v295)
          {
            v307 = v628 + 5;
            v308 = v300;
            if ((unint64_t)v295 < v302 - 3)
            {
LABEL_473:
              if (*v308 == *(_DWORD *)v307)
              {
                v307 += 4;
                ++v308;
              }
            }
            goto LABEL_475;
          }
          v303 = *(_QWORD *)v295 ^ *v300;
          if (!v303)
          {
            v312 = 0;
            while (1)
            {
              v307 = &v297[v312];
              if ((unint64_t)&v297[v312] >= v302 - 7)
                break;
              v313 = *(_QWORD *)(v586 + v298 + v312);
              v312 += 8;
              v314 = *(_QWORD *)v307 ^ v313;
              if (v314)
              {
                v304 = v312 + (__clz(__rbit64(v314)) >> 3);
                if ((char *)v300 + v304 != v293)
                  goto LABEL_465;
                goto LABEL_484;
              }
            }
            v308 = (_DWORD *)(v586 + v298 + v312);
            if ((unint64_t)v307 < v302 - 3)
              goto LABEL_473;
LABEL_475:
            if ((unint64_t)v307 >= v302 - 1)
            {
              if ((unint64_t)v307 < v302)
                goto LABEL_481;
            }
            else
            {
              if (*(unsigned __int16 *)v308 == *(unsigned __int16 *)v307)
              {
                v307 += 2;
                v308 = (_DWORD *)((char *)v308 + 2);
              }
              if ((unint64_t)v307 >= v302)
                goto LABEL_483;
LABEL_481:
              if (*(unsigned __int8 *)v308 == *v307)
                ++v307;
            }
LABEL_483:
            v304 = v307 - v295;
            if ((char *)v300 + v307 - v295 == v293)
              goto LABEL_484;
LABEL_465:
            v202 = v304 + 4;
            if (v304 + 4 <= v193)
              goto LABEL_524;
LABEL_523:
            v194 = v600 - v298;
            v193 = v202;
            if (&v157[v202] == (char *)v632)
              break;
            goto LABEL_524;
          }
          v304 = __clz(__rbit64(v303)) >> 3;
          if ((char *)v300 + v304 != v293)
            goto LABEL_465;
LABEL_484:
          v309 = &v295[v304];
          if (v633 <= (unint64_t)&v295[v304])
          {
            v318 = &v295[v304];
            v319 = (_DWORD *)(v277 + v281);
            if ((unint64_t)v309 < v626)
            {
LABEL_512:
              if (*v319 == *(_DWORD *)v318)
              {
                v318 += 4;
                ++v319;
              }
            }
            goto LABEL_514;
          }
          v310 = *(_QWORD *)v309 ^ *(_QWORD *)(v277 + v281);
          if (!v310)
          {
            v320 = 0;
            v321 = &v297[v304];
            while (1)
            {
              v322 = &v321[v320];
              if ((unint64_t)&v321[v320] >= v633)
                break;
              v323 = *(_QWORD *)(v606 + v320);
              v320 += 8;
              v324 = *(_QWORD *)v322 ^ v323;
              if (v324)
              {
                v202 = v320 + (__clz(__rbit64(v324)) >> 3) + v304 + 4;
                if (v202 <= v193)
                  goto LABEL_524;
                goto LABEL_523;
              }
            }
            v318 = &v297[v304 + v320];
            v319 = (_DWORD *)(v606 + v320);
            if ((unint64_t)v318 < v626)
              goto LABEL_512;
LABEL_514:
            if ((unint64_t)v318 >= v625)
            {
              if ((unint64_t)v318 >= v632)
                goto LABEL_522;
            }
            else
            {
              if (*(unsigned __int16 *)v319 == *(unsigned __int16 *)v318)
              {
                v318 += 2;
                v319 = (_DWORD *)((char *)v319 + 2);
              }
              if ((unint64_t)v318 >= v632)
              {
LABEL_522:
                v202 = v318 - v295 + 4;
                if (v202 <= v193)
                  goto LABEL_524;
                goto LABEL_523;
              }
            }
            if (*(unsigned __int8 *)v319 == *v318)
              ++v318;
            goto LABEL_522;
          }
          v202 = (__clz(__rbit64(v310)) >> 3) + v304 + 4;
          if (v202 > v193)
            goto LABEL_523;
LABEL_524:
          if (v298 <= v285 || (--v294, !v294))
          {
LABEL_539:
            v202 = v193;
            v156 = v168;
            if (v193 < 4)
              goto LABEL_545;
            goto LABEL_544;
          }
          v291 = *(_DWORD *)(v274 + 4 * (v298 & v292));
          v202 = v193;
          if (v291 >= v284)
            continue;
          break;
        }
LABEL_543:
        v156 = v168;
        if (v202 < 4)
          goto LABEL_545;
LABEL_544:
        if ((int)((__clz(v194 + 1) ^ 0xFFFFFFE0) + 4 * v202 + 1) > (int)((__clz(v156 + 1) ^ 0xFFFFFFE0) + 4 * v616 + 5))
          goto LABEL_854;
LABEL_545:
        if ((unint64_t)v157 >= v624)
          break;
        v157 = v628 + 2;
        v325 = v621 + 2;
        if (v156)
        {
          if (v325 - *(_DWORD *)(a1 + 28) > v620 && *(_DWORD *)(a1 + 32) == 0)
            v327 = v325 - v620;
          else
            v327 = *(_DWORD *)(a1 + 28);
          v328 = v325 - v613;
          v329 = v611;
          if (v328 < v612)
            v329 = v623;
          if ((v619 - v328) >= 3 && v328 > v327)
          {
            v330 = v329 + v328;
            if (*(_DWORD *)v157 == *(_DWORD *)v330)
            {
              if (v328 >= v612)
                v331 = (char *)v632;
              else
                v331 = v592;
              v332 = ZSTD_count_2segments(v628 + 6, (char *)(v330 + 4), v632, v331, v595);
              if (v332 > 0xFFFFFFFFFFFFFFFBLL)
              {
                v156 = v168;
              }
              else
              {
                v156 = v168;
                if ((int)((__clz(v168 + 1) ^ 0xFFFFFFE0) + 4 * v616 + 2) < 4 * ((int)v332 + 4))
                {
                  v156 = 0;
                  v610 = v628 + 2;
                  v616 = v332 + 4;
                }
              }
            }
          }
        }
        v333 = *(_DWORD *)(a1 + 208);
        v622 = v156;
        v618 = v325;
        if ((v333 - 6) < 2)
        {
          v334 = *(_QWORD *)(a1 + 64);
          v335 = *(_DWORD *)(a1 + 196);
          v336 = 1 << v335;
          v337 = *(_QWORD *)(a1 + 8);
          v338 = *(_QWORD *)(a1 + 16);
          v339 = (_DWORD)v157 - v337;
          v340 = 1 << *(_DWORD *)(a1 + 192);
          v341 = *(unsigned int *)(a1 + 24);
          v342 = *(unsigned int *)(a1 + 36);
          if ((int)v157 - (int)v337 - *(_DWORD *)(a1 + 28) > v340 && *(_DWORD *)(a1 + 32) == 0)
            v344 = (_DWORD)v157 - v337 - v340;
          else
            v344 = *(_DWORD *)(a1 + 28);
          v345 = v339 - v336;
          if (v339 < v336)
            v345 = 0;
          v346 = *(_QWORD *)(a1 + 48);
          v347 = *(_DWORD *)(a1 + 204);
          v348 = 64 - *(_DWORD *)(a1 + 200);
          if (v342 < v339)
          {
            v349 = ~(-1 << v335);
            do
            {
              v350 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v337 + v342)) >> v348);
              *(_DWORD *)(v334 + 4 * (v342 & v349)) = *(_DWORD *)(v346 + v350);
              *(_DWORD *)(v346 + v350) = v342++;
            }
            while (v342 < ((_DWORD)v157 - v337));
          }
          *(_DWORD *)(a1 + 36) = v339;
          v351 = *(_DWORD *)(v346 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v157) >> v348));
          if (v351 >= v344)
          {
            v352 = v336 - 1;
            v353 = (char *)(v338 + v341);
            v354 = 1 << v347;
            v355 = v628 + 6;
            v356 = v339 + 2;
            v357 = v628 + 10;
            v358 = v628 + 14;
            v601 = v338 + 12;
            v629 = v337 + 8;
            v359 = v337 + 8 + v341;
            v360 = 3;
            v194 = 999999999;
            while (1)
            {
              v361 = v351;
              if (v351 < v341)
              {
                v362 = (_DWORD *)(v338 + v351);
                if (*v362 != *(_DWORD *)v157)
                  goto LABEL_644;
                v363 = v362 + 1;
                v364 = &v355[v353 - (char *)(v362 + 1)];
                if ((unint64_t)v364 >= v632)
                  v365 = v632;
                else
                  v365 = (unint64_t)v364;
                if (v365 - 7 <= (unint64_t)v355)
                {
                  v370 = v355;
                  v371 = v363;
                  if ((unint64_t)v355 < v365 - 3)
                  {
LABEL_594:
                    if (*v371 == *(_DWORD *)v370)
                    {
                      v370 += 4;
                      ++v371;
                    }
                  }
                }
                else
                {
                  v366 = *(_QWORD *)v355 ^ *v363;
                  if (v366)
                  {
                    v367 = __clz(__rbit64(v366)) >> 3;
                    if ((char *)v363 + v367 != v353)
                      goto LABEL_586;
                    goto LABEL_605;
                  }
                  while (1)
                  {
                    v370 = &v358[v366];
                    if ((unint64_t)&v358[v366] >= v365 - 7)
                      break;
                    v375 = *(_QWORD *)(v601 + v361 + v366);
                    v366 += 8;
                    v376 = *(_QWORD *)v370 ^ v375;
                    if (v376)
                    {
                      v367 = v366 + (__clz(__rbit64(v376)) >> 3);
                      if ((char *)v363 + v367 != v353)
                        goto LABEL_586;
                      goto LABEL_605;
                    }
                  }
                  v371 = (_DWORD *)(v601 + v361 + v366);
                  if ((unint64_t)v370 < v365 - 3)
                    goto LABEL_594;
                }
                if ((unint64_t)v370 >= v365 - 1)
                {
                  if ((unint64_t)v370 >= v365)
                    goto LABEL_604;
                }
                else
                {
                  if (*(unsigned __int16 *)v371 == *(unsigned __int16 *)v370)
                  {
                    v370 += 2;
                    v371 = (_DWORD *)((char *)v371 + 2);
                  }
                  if ((unint64_t)v370 >= v365)
                  {
LABEL_604:
                    v367 = v370 - v355;
                    if ((char *)v363 + v370 - v355 != v353)
                    {
LABEL_586:
                      v202 = v367 + 4;
                      if (v367 + 4 <= v360)
                        goto LABEL_644;
                      goto LABEL_643;
                    }
LABEL_605:
                    v372 = &v355[v367];
                    if (v633 <= (unint64_t)&v355[v367])
                    {
                      v380 = &v355[v367];
                      v381 = (_DWORD *)(v337 + v341);
                      if ((unint64_t)v372 < v626)
                      {
LABEL_632:
                        if (*v381 == *(_DWORD *)v380)
                        {
                          v380 += 4;
                          ++v381;
                        }
                      }
                    }
                    else
                    {
                      v373 = *(_QWORD *)v372 ^ *(_QWORD *)(v337 + v341);
                      if (v373)
                      {
                        v202 = (__clz(__rbit64(v373)) >> 3) + v367 + 4;
                        if (v202 <= v360)
                          goto LABEL_644;
                        goto LABEL_643;
                      }
                      v382 = &v358[v367];
                      while (1)
                      {
                        v383 = &v382[v373];
                        if ((unint64_t)&v382[v373] >= v633)
                          break;
                        v384 = *(_QWORD *)(v359 + v373);
                        v373 += 8;
                        v385 = *(_QWORD *)v383 ^ v384;
                        if (v385)
                        {
                          v202 = v373 + (__clz(__rbit64(v385)) >> 3) + v367 + 4;
                          if (v202 <= v360)
                            goto LABEL_644;
                          goto LABEL_643;
                        }
                      }
                      v380 = &v358[v367 + v373];
                      v381 = (_DWORD *)(v359 + v373);
                      if ((unint64_t)v380 < v626)
                        goto LABEL_632;
                    }
                    if ((unint64_t)v380 >= v625)
                    {
                      if ((unint64_t)v380 >= v632)
                        goto LABEL_642;
                    }
                    else
                    {
                      if (*(unsigned __int16 *)v381 == *(unsigned __int16 *)v380)
                      {
                        v380 += 2;
                        v381 = (_DWORD *)((char *)v381 + 2);
                      }
                      if ((unint64_t)v380 >= v632)
                      {
LABEL_642:
                        v202 = v380 - v355 + 4;
                        if (v202 <= v360)
                          goto LABEL_644;
                        goto LABEL_643;
                      }
                    }
                    if (*(unsigned __int8 *)v381 == *v380)
                      ++v380;
                    goto LABEL_642;
                  }
                }
                if (*(unsigned __int8 *)v371 == *v370)
                  ++v370;
                goto LABEL_604;
              }
              v368 = (_DWORD *)(v337 + v351);
              if (*((unsigned __int8 *)v368 + v360) != v157[v360])
                goto LABEL_644;
              if (v633 <= (unint64_t)v157)
              {
                v374 = v157;
                if ((unint64_t)v157 < v626)
                {
LABEL_610:
                  if (*v368 == *(_DWORD *)v374)
                  {
                    v374 += 4;
                    ++v368;
                  }
                }
              }
              else
              {
                v369 = *(_QWORD *)v368 ^ *(_QWORD *)v157;
                if (v369)
                {
                  v202 = __clz(__rbit64(v369)) >> 3;
                  if (v202 <= v360)
                    goto LABEL_644;
                  goto LABEL_643;
                }
                v377 = 0;
                while (1)
                {
                  v374 = &v357[v377];
                  if ((unint64_t)&v357[v377] >= v633)
                    break;
                  v378 = *(_QWORD *)(v629 + v361 + v377);
                  v377 += 8;
                  v379 = *(_QWORD *)v374 ^ v378;
                  if (v379)
                  {
                    v202 = v377 + (__clz(__rbit64(v379)) >> 3);
                    if (v202 > v360)
                      goto LABEL_643;
                    goto LABEL_644;
                  }
                }
                v368 = (_DWORD *)(v629 + v361 + v377);
                if ((unint64_t)v374 < v626)
                  goto LABEL_610;
              }
              if ((unint64_t)v374 >= v625)
                break;
              if (*(unsigned __int16 *)v368 == *(unsigned __int16 *)v374)
              {
                v374 += 2;
                v368 = (_DWORD *)((char *)v368 + 2);
              }
              if ((unint64_t)v374 < v632)
                goto LABEL_618;
LABEL_620:
              v202 = v374 - v157;
              if (v374 - v157 <= v360)
                goto LABEL_644;
LABEL_643:
              v194 = v356 - v361;
              v360 = v202;
              if (&v157[v202] == (char *)v632)
                goto LABEL_852;
LABEL_644:
              if (v361 <= v345)
                goto LABEL_848;
              if (!--v354)
                goto LABEL_848;
              v351 = *(_DWORD *)(v334 + 4 * (v361 & v352));
              v202 = v360;
              if (v351 < v344)
                goto LABEL_852;
            }
            if ((unint64_t)v374 >= v632)
              goto LABEL_620;
LABEL_618:
            if (*(unsigned __int8 *)v368 == *v374)
              ++v374;
            goto LABEL_620;
          }
LABEL_875:
          LODWORD(v156) = v622;
          if (!v622)
            goto LABEL_876;
LABEL_856:
          v498 = (unsigned __int8 *)v610;
          v6 = v611;
          v499 = (_DWORD)v610 - (v156 + v611) + 2;
          LODWORD(v7) = v612;
          if (v612 <= v499)
            v500 = v611;
          else
            v500 = v623;
          v501 = (__int128 *)v594;
          v502 = v595;
          if (v612 > v499)
            v502 = v578;
          if ((unint64_t)v610 > v594)
          {
            v503 = ((_DWORD)v610 - (v156 + v611) + 2);
            if (v500 + v503 > (unint64_t)v502)
            {
              v504 = (unsigned __int8 *)(v500 + v503 - 1);
              v505 = v610 - 1;
              v507 = v632 - 32;
              v506 = a2;
              v508 = v616;
              while (*v505 == *v504)
              {
                ++v508;
                v509 = (unsigned __int8 *)(v505 - 1);
                if ((unint64_t)v505 > v594)
                {
                  --v505;
                  if (v504-- > v502)
                    continue;
                }
                v498 = v509 + 1;
                v8 = v613;
                v9 = (v156 - 2);
                v511 = (unint64_t)&v509[-v594 + 1];
                v512 = *(__int128 **)(a2 + 24);
                if ((unint64_t)(v509 + 1) <= v579)
                  goto LABEL_870;
                goto LABEL_877;
              }
              v498 = (unsigned __int8 *)(v505 + 1);
              v8 = v613;
              v9 = (v156 - 2);
              v511 = (unint64_t)&v505[-v594 + 1];
              v512 = *(__int128 **)(a2 + 24);
              if ((unint64_t)v498 <= v579)
                goto LABEL_870;
              goto LABEL_877;
            }
          }
          v507 = v632 - 32;
          v506 = a2;
          v508 = v616;
          v8 = v613;
          v9 = (v156 - 2);
          v511 = (unint64_t)&v610[-v594];
          v512 = *(__int128 **)(a2 + 24);
          if ((unint64_t)v610 > v579)
            goto LABEL_877;
          goto LABEL_870;
        }
        if (v333 != 5)
        {
          v442 = *(_QWORD *)(a1 + 64);
          v443 = *(_DWORD *)(a1 + 196);
          v444 = 1 << v443;
          v445 = *(_QWORD *)(a1 + 8);
          v446 = *(_QWORD *)(a1 + 16);
          v447 = (_DWORD)v157 - v445;
          v448 = 1 << *(_DWORD *)(a1 + 192);
          v449 = *(unsigned int *)(a1 + 24);
          v450 = *(unsigned int *)(a1 + 36);
          if ((int)v157 - (int)v445 - *(_DWORD *)(a1 + 28) > v448 && *(_DWORD *)(a1 + 32) == 0)
            v452 = (_DWORD)v157 - v445 - v448;
          else
            v452 = *(_DWORD *)(a1 + 28);
          v453 = v447 - v444;
          if (v447 < v444)
            v453 = 0;
          v454 = *(_QWORD *)(a1 + 48);
          v455 = *(_DWORD *)(a1 + 204);
          v456 = 32 - *(_DWORD *)(a1 + 200);
          if (v450 < v447)
          {
            v457 = ~(-1 << v443);
            do
            {
              v458 = 4 * ((-1640531535 * *(_DWORD *)(v445 + v450)) >> v456);
              *(_DWORD *)(v442 + 4 * (v450 & v457)) = *(_DWORD *)(v454 + v458);
              *(_DWORD *)(v454 + v458) = v450++;
            }
            while (v450 < ((_DWORD)v157 - v445));
          }
          *(_DWORD *)(a1 + 36) = v447;
          v459 = *(_DWORD *)v157;
          v460 = *(_DWORD *)(v454 + 4 * ((-1640531535 * *(_DWORD *)v157) >> v456));
          if (v460 < v452)
            goto LABEL_875;
          v461 = v444 - 1;
          v462 = (_QWORD *)(v445 + v449);
          v463 = (char *)(v446 + v449);
          v464 = 1 << v455;
          v465 = v628 + 6;
          v466 = v447 + 2;
          v467 = v628 + 10;
          v468 = v445 + 8;
          v469 = v628 + 14;
          v608 = v446 + 12;
          v631 = v445 + 8 + v449;
          v360 = 3;
          v194 = 999999999;
          while (1)
          {
            v470 = v460;
            if (v460 >= v449)
              break;
            if (*(_DWORD *)(v446 + v460) != v459)
              goto LABEL_833;
            v471 = (char *)(v446 + v460 + 4);
            if ((unint64_t)&v465[v463 - v471] >= v632)
              v472 = (char *)v632;
            else
              v472 = &v465[v463 - v471];
            if (v472 - 7 <= v465)
            {
              v477 = v465;
              v478 = (_DWORD *)(v446 + v470 + 4);
              if (v465 < v472 - 3)
              {
LABEL_783:
                if (*v478 == *(_DWORD *)v477)
                {
                  v477 += 4;
                  ++v478;
                }
              }
LABEL_785:
              if (v477 >= v472 - 1)
              {
                if (v477 < v472)
                  goto LABEL_791;
              }
              else
              {
                if (*(unsigned __int16 *)v478 == *(unsigned __int16 *)v477)
                {
                  v477 += 2;
                  v478 = (_DWORD *)((char *)v478 + 2);
                }
                if (v477 >= v472)
                  goto LABEL_793;
LABEL_791:
                if (*(unsigned __int8 *)v478 == *v477)
                  ++v477;
              }
LABEL_793:
              v474 = v477 - v465;
              if (&v471[v477 - v465] == v463)
                goto LABEL_794;
LABEL_775:
              v202 = v474 + 4;
              if (v474 + 4 <= v360)
                goto LABEL_833;
              goto LABEL_832;
            }
            v473 = *(_QWORD *)v465 ^ *(_QWORD *)v471;
            if (v473)
            {
              v474 = __clz(__rbit64(v473)) >> 3;
              if (&v471[v474] == v463)
                goto LABEL_794;
              goto LABEL_775;
            }
            v603 = v459;
            v482 = v446;
            v483 = v463;
            v484 = v468;
            v485 = v462;
            v486 = v466;
            v487 = 0;
            do
            {
              v477 = &v469[v487];
              if (&v469[v487] >= v472 - 7)
              {
                v478 = (_DWORD *)(v608 + v470 + v487);
                v466 = v486;
                v462 = v485;
                v468 = v484;
                v463 = v483;
                v446 = v482;
                v459 = v603;
                if (v477 < v472 - 3)
                  goto LABEL_783;
                goto LABEL_785;
              }
              v488 = *(_QWORD *)(v608 + v470 + v487);
              v487 += 8;
              v489 = *(_QWORD *)v477 ^ v488;
            }
            while (!v489);
            v474 = v487 + (__clz(__rbit64(v489)) >> 3);
            v466 = v486;
            v462 = v485;
            v468 = v484;
            v463 = v483;
            v446 = v482;
            v459 = v603;
            if (&v471[v474] != v463)
              goto LABEL_775;
LABEL_794:
            v479 = &v465[v474];
            if (v633 <= (unint64_t)&v465[v474])
            {
              v492 = &v465[v474];
              v493 = v462;
              if ((unint64_t)v479 < v626)
              {
LABEL_821:
                if (*v493 == *(_DWORD *)v492)
                {
                  v492 += 4;
                  ++v493;
                }
              }
LABEL_823:
              if ((unint64_t)v492 >= v625)
              {
                if ((unint64_t)v492 >= v632)
                  goto LABEL_831;
              }
              else
              {
                if (*(unsigned __int16 *)v493 == *(unsigned __int16 *)v492)
                {
                  v492 += 2;
                  v493 = (_DWORD *)((char *)v493 + 2);
                }
                if ((unint64_t)v492 >= v632)
                {
LABEL_831:
                  v202 = v492 - v465 + 4;
                  if (v202 <= v360)
                    goto LABEL_833;
                  goto LABEL_832;
                }
              }
              if (*(unsigned __int8 *)v493 == *v492)
                ++v492;
              goto LABEL_831;
            }
            v480 = *(_QWORD *)v479 ^ *v462;
            if (v480)
            {
              v202 = (__clz(__rbit64(v480)) >> 3) + v474 + 4;
              if (v202 <= v360)
                goto LABEL_833;
              goto LABEL_832;
            }
            v494 = &v469[v474];
            while (2)
            {
              v495 = &v494[v480];
              if ((unint64_t)&v494[v480] >= v633)
              {
                v492 = &v469[v474 + v480];
                v493 = (_DWORD *)(v631 + v480);
                if ((unint64_t)v492 < v626)
                  goto LABEL_821;
                goto LABEL_823;
              }
              v496 = *(_QWORD *)(v631 + v480);
              v480 += 8;
              v497 = *(_QWORD *)v495 ^ v496;
              if (!v497)
                continue;
              break;
            }
            v202 = v480 + (__clz(__rbit64(v497)) >> 3) + v474 + 4;
            if (v202 > v360)
              goto LABEL_832;
LABEL_833:
            if (v470 <= v453 || (--v464, !v464))
            {
LABEL_848:
              v202 = v360;
              if (v360 >= 4)
                goto LABEL_853;
              goto LABEL_875;
            }
            v460 = *(_DWORD *)(v442 + 4 * (v470 & v461));
            v202 = v360;
            if (v460 < v452)
              goto LABEL_852;
          }
          v475 = (_QWORD *)(v445 + v460);
          if (*((unsigned __int8 *)v475 + v360) != v157[v360])
            goto LABEL_833;
          if (v633 <= (unint64_t)v157)
          {
            v481 = v157;
            if ((unint64_t)v157 >= v626)
              goto LABEL_801;
          }
          else
          {
            v476 = *(_QWORD *)v157 ^ *v475;
            if (v476)
            {
              v202 = __clz(__rbit64(v476)) >> 3;
              if (v202 <= v360)
                goto LABEL_833;
              goto LABEL_832;
            }
            while (1)
            {
              v481 = &v467[v476];
              if ((unint64_t)&v467[v476] >= v633)
                break;
              v490 = *(_QWORD *)(v468 + v470 + v476);
              v476 += 8;
              v491 = *(_QWORD *)v481 ^ v490;
              if (v491)
              {
                v202 = v476 + (__clz(__rbit64(v491)) >> 3);
                if (v202 <= v360)
                  goto LABEL_833;
LABEL_832:
                v194 = (v466 - v470);
                v360 = v202;
                if (&v157[v202] == (char *)v632)
                  goto LABEL_852;
                goto LABEL_833;
              }
            }
            v475 = (_QWORD *)(v468 + v470 + v476);
            if ((unint64_t)v481 >= v626)
            {
LABEL_801:
              if ((unint64_t)v481 >= v625)
              {
                if ((unint64_t)v481 >= v632)
                  goto LABEL_809;
              }
              else
              {
                if (*(unsigned __int16 *)v475 == *(unsigned __int16 *)v481)
                {
                  v481 += 2;
                  v475 = (_QWORD *)((char *)v475 + 2);
                }
                if ((unint64_t)v481 >= v632)
                {
LABEL_809:
                  v202 = v481 - v157;
                  if (v481 - v157 <= v360)
                    goto LABEL_833;
                  goto LABEL_832;
                }
              }
              if (*(unsigned __int8 *)v475 == *v481)
                ++v481;
              goto LABEL_809;
            }
          }
          if (*(_DWORD *)v475 == *(_DWORD *)v481)
          {
            v481 += 4;
            v475 = (_QWORD *)((char *)v475 + 4);
          }
          goto LABEL_801;
        }
        v386 = *(_QWORD *)(a1 + 64);
        v387 = *(_DWORD *)(a1 + 196);
        v388 = 1 << v387;
        v389 = *(_QWORD *)(a1 + 8);
        v390 = *(_QWORD *)(a1 + 16);
        v391 = (_DWORD)v157 - v389;
        v392 = 1 << *(_DWORD *)(a1 + 192);
        v393 = *(unsigned int *)(a1 + 24);
        v394 = *(unsigned int *)(a1 + 36);
        if ((int)v157 - (int)v389 - *(_DWORD *)(a1 + 28) > v392 && *(_DWORD *)(a1 + 32) == 0)
          v396 = (_DWORD)v157 - v389 - v392;
        else
          v396 = *(_DWORD *)(a1 + 28);
        v397 = v391 - v388;
        if (v391 < v388)
          v397 = 0;
        v398 = *(_QWORD *)(a1 + 48);
        v399 = *(_DWORD *)(a1 + 204);
        v400 = 64 - *(_DWORD *)(a1 + 200);
        if (v394 < v391)
        {
          v401 = ~(-1 << v387);
          do
          {
            v402 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v389 + v394)) >> v400);
            *(_DWORD *)(v386 + 4 * (v394 & v401)) = *(_DWORD *)(v398 + v402);
            *(_DWORD *)(v398 + v402) = v394++;
          }
          while (v394 < ((_DWORD)v157 - v389));
        }
        *(_DWORD *)(a1 + 36) = v391;
        v403 = *(_QWORD *)v157;
        v404 = *(_DWORD *)(v398 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v157) >> v400));
        if (v404 < v396)
        {
          LODWORD(v156) = v622;
          if (!v622)
            goto LABEL_876;
          goto LABEL_856;
        }
        v405 = v388 - 1;
        v406 = (_QWORD *)(v389 + v393);
        v407 = (char *)(v390 + v393);
        v408 = 1 << v399;
        v409 = v628 + 6;
        v410 = v391 + 2;
        v411 = v628 + 10;
        v412 = v389 + 8;
        v413 = v628 + 14;
        v607 = v390 + 12;
        v630 = v389 + 8 + v393;
        v360 = 3;
        v194 = 999999999;
        while (2)
        {
          v414 = v404;
          if (v404 >= v393)
          {
            v419 = (_DWORD *)(v389 + v404);
            if (*((unsigned __int8 *)v419 + v360) != v157[v360])
              goto LABEL_739;
            if (v633 <= (unint64_t)v157)
            {
              v425 = v157;
              if ((unint64_t)v157 < v626)
              {
LABEL_705:
                if (*v419 == *(_DWORD *)v425)
                {
                  v425 += 4;
                  ++v419;
                }
              }
            }
            else
            {
              v420 = *(_QWORD *)v419 ^ v403;
              if (v420)
              {
                v202 = __clz(__rbit64(v420)) >> 3;
                if (v202 > v360)
                  goto LABEL_738;
                goto LABEL_739;
              }
              while (1)
              {
                v425 = &v411[v420];
                if ((unint64_t)&v411[v420] >= v633)
                  break;
                v434 = *(_QWORD *)(v412 + v414 + v420);
                v420 += 8;
                v435 = *(_QWORD *)v425 ^ v434;
                if (v435)
                {
                  v202 = v420 + (__clz(__rbit64(v435)) >> 3);
                  if (v202 > v360)
                    goto LABEL_738;
                  goto LABEL_739;
                }
              }
              v419 = (_DWORD *)(v412 + v414 + v420);
              if ((unint64_t)v425 < v626)
                goto LABEL_705;
            }
            if ((unint64_t)v425 >= v625)
            {
              if ((unint64_t)v425 >= v632)
                goto LABEL_715;
            }
            else
            {
              if (*(unsigned __int16 *)v419 == *(unsigned __int16 *)v425)
              {
                v425 += 2;
                v419 = (_DWORD *)((char *)v419 + 2);
              }
              if ((unint64_t)v425 >= v632)
              {
LABEL_715:
                v202 = v425 - v157;
                if (v425 - v157 > v360)
                  goto LABEL_738;
                goto LABEL_739;
              }
            }
            if (*(unsigned __int8 *)v419 == *v425)
              ++v425;
            goto LABEL_715;
          }
          if (*(_DWORD *)(v390 + v404) != *(_DWORD *)v157)
            goto LABEL_739;
          v415 = (char *)(v390 + v404 + 4);
          if ((unint64_t)&v409[v407 - v415] >= v632)
            v416 = (char *)v632;
          else
            v416 = &v409[v407 - v415];
          if (v416 - 7 <= v409)
          {
            v421 = v409;
            v422 = (_DWORD *)(v390 + v414 + 4);
            if (v409 < v416 - 3)
            {
LABEL_689:
              if (*v422 == *(_DWORD *)v421)
              {
                v421 += 4;
                ++v422;
              }
            }
            goto LABEL_691;
          }
          v417 = *(_QWORD *)v409 ^ *(_QWORD *)v415;
          if (!v417)
          {
            v602 = v390;
            v426 = v407;
            v427 = v403;
            v428 = v412;
            v429 = v406;
            v430 = v410;
            v431 = 0;
            while (1)
            {
              v421 = &v413[v431];
              if (&v413[v431] >= v416 - 7)
                break;
              v432 = *(_QWORD *)(v607 + v414 + v431);
              v431 += 8;
              v433 = *(_QWORD *)v421 ^ v432;
              if (v433)
              {
                v418 = v431 + (__clz(__rbit64(v433)) >> 3);
                v410 = v430;
                v406 = v429;
                v412 = v428;
                v403 = v427;
                v407 = v426;
                v390 = v602;
                if (&v415[v418] != v407)
                  goto LABEL_681;
                goto LABEL_700;
              }
            }
            v422 = (_DWORD *)(v607 + v414 + v431);
            v410 = v430;
            v406 = v429;
            v412 = v428;
            v403 = v427;
            v407 = v426;
            v390 = v602;
            if (v421 < v416 - 3)
              goto LABEL_689;
LABEL_691:
            if (v421 >= v416 - 1)
            {
              if (v421 >= v416)
                goto LABEL_699;
            }
            else
            {
              if (*(unsigned __int16 *)v422 == *(unsigned __int16 *)v421)
              {
                v421 += 2;
                v422 = (_DWORD *)((char *)v422 + 2);
              }
              if (v421 >= v416)
              {
LABEL_699:
                v418 = v421 - v409;
                if (&v415[v421 - v409] != v407)
                  goto LABEL_681;
                goto LABEL_700;
              }
            }
            if (*(unsigned __int8 *)v422 == *v421)
              ++v421;
            goto LABEL_699;
          }
          v418 = __clz(__rbit64(v417)) >> 3;
          if (&v415[v418] != v407)
          {
LABEL_681:
            v202 = v418 + 4;
            if (v418 + 4 > v360)
              goto LABEL_738;
            goto LABEL_739;
          }
LABEL_700:
          v423 = &v409[v418];
          if (v633 <= (unint64_t)&v409[v418])
          {
            v436 = &v409[v418];
            v437 = v406;
            if ((unint64_t)v423 < v626)
            {
LABEL_727:
              if (*v437 == *(_DWORD *)v436)
              {
                v436 += 4;
                ++v437;
              }
            }
            goto LABEL_729;
          }
          v424 = *(_QWORD *)v423 ^ *v406;
          if (!v424)
          {
            v438 = &v413[v418];
            while (1)
            {
              v439 = &v438[v424];
              if ((unint64_t)&v438[v424] >= v633)
                break;
              v440 = *(_QWORD *)(v630 + v424);
              v424 += 8;
              v441 = *(_QWORD *)v439 ^ v440;
              if (v441)
              {
                v202 = v424 + (__clz(__rbit64(v441)) >> 3) + v418 + 4;
                if (v202 > v360)
                {
LABEL_738:
                  v194 = (v410 - v414);
                  v360 = v202;
                  if (&v157[v202] != (char *)v632)
                    goto LABEL_739;
                  goto LABEL_852;
                }
                goto LABEL_739;
              }
            }
            v436 = &v413[v418 + v424];
            v437 = (_DWORD *)(v630 + v424);
            if ((unint64_t)v436 < v626)
              goto LABEL_727;
LABEL_729:
            if ((unint64_t)v436 >= v625)
            {
              if ((unint64_t)v436 >= v632)
                goto LABEL_737;
            }
            else
            {
              if (*(unsigned __int16 *)v437 == *(unsigned __int16 *)v436)
              {
                v436 += 2;
                v437 = (_DWORD *)((char *)v437 + 2);
              }
              if ((unint64_t)v436 >= v632)
              {
LABEL_737:
                v202 = v436 - v409 + 4;
                if (v202 > v360)
                  goto LABEL_738;
                goto LABEL_739;
              }
            }
            if (*(unsigned __int8 *)v437 == *v436)
              ++v436;
            goto LABEL_737;
          }
          v202 = (__clz(__rbit64(v424)) >> 3) + v418 + 4;
          if (v202 > v360)
            goto LABEL_738;
LABEL_739:
          if (v414 <= v397)
            goto LABEL_848;
          if (!--v408)
          {
            v202 = v360;
            break;
          }
          v404 = *(_DWORD *)(v386 + 4 * (v414 & v405));
          v202 = v360;
          if (v404 >= v396)
            continue;
          break;
        }
LABEL_852:
        if (v202 < 4)
          goto LABEL_875;
LABEL_853:
        v156 = v622;
        if ((int)((__clz(v194 + 1) ^ 0xFFFFFFE0) + 4 * v202 + 1) <= (int)((__clz(v622 + 1) ^ 0xFFFFFFE0) + 4 * v616 + 8))
          break;
LABEL_854:
        v628 = v157;
        v616 = v202;
        v621 = v618;
        v610 = v157;
        v156 = v194;
        if ((unint64_t)v157 < v624)
          continue;
        break;
      }
LABEL_855:
      if (v156)
        goto LABEL_856;
LABEL_876:
      v507 = v632 - 32;
      v506 = a2;
      v6 = v611;
      LODWORD(v7) = v612;
      v9 = v613;
      v501 = (__int128 *)v594;
      v8 = v593;
      v508 = v616;
      v498 = (unsigned __int8 *)v610;
      v511 = (unint64_t)&v610[-v594];
      v512 = *(__int128 **)(a2 + 24);
      if ((unint64_t)v610 > v579)
      {
LABEL_877:
        if ((unint64_t)v501 <= v507)
        {
          v521 = (__int128 *)((char *)v512 + v507 - (_QWORD)v501);
          v522 = v501;
          v523 = v512;
          do
          {
            v524 = *v522++;
            *v523++ = v524;
          }
          while (v523 < v521);
          v520 = (unsigned __int8 *)v507;
        }
        else
        {
          v520 = (unsigned __int8 *)v501;
          v521 = v512;
        }
        v12 = v592;
        v517 = v581;
        if (v520 < v498)
        {
          if ((unint64_t)v501 <= v507)
            v525 = (unsigned __int8 *)v507;
          else
            v525 = (unsigned __int8 *)v501;
          v526 = v498 - v525;
          if ((unint64_t)(v498 - v525) < 8)
          {
            v527 = v520;
            goto LABEL_910;
          }
          if ((unint64_t)((char *)v512 - (char *)v501) < 0x20)
          {
            v527 = v520;
            goto LABEL_910;
          }
          if (v526 >= 0x20)
          {
            v529 = v156;
            v156 = v8;
            v528 = v526 & 0xFFFFFFFFFFFFFFE0;
            v530 = (__int128 *)(v520 + 16);
            v531 = (__int128 *)((char *)v512 + v525 - (unsigned __int8 *)v501 + 16);
            v532 = v526 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v533 = *v530;
              *(v531 - 1) = *(v530 - 1);
              *v531 = v533;
              v530 += 2;
              v531 += 2;
              v532 -= 32;
            }
            while (v532);
            v8 = v156;
            LODWORD(v156) = v529;
            if (v526 != v528)
            {
              if ((v526 & 0x18) == 0)
              {
                v527 = &v520[v528];
                v521 = (__int128 *)((char *)v521 + v528);
                goto LABEL_910;
              }
              goto LABEL_903;
            }
          }
          else
          {
            v528 = 0;
LABEL_903:
            v521 = (__int128 *)((char *)v521 + (v526 & 0xFFFFFFFFFFFFFFF8));
            v527 = &v520[v526 & 0xFFFFFFFFFFFFFFF8];
            v534 = &v520[v528];
            v535 = (_QWORD *)((char *)v512 + &v525[v528] - (unsigned __int8 *)v501);
            v536 = v528 - (v526 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v537 = *(_QWORD *)v534;
              v534 += 8;
              *v535++ = v537;
              v536 += 8;
            }
            while (v536);
            if (v526 != (v526 & 0xFFFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_910:
                v538 = *v527++;
                *(_BYTE *)v521 = v538;
                v521 = (__int128 *)((char *)v521 + 1);
              }
              while (v527 < v498);
            }
          }
        }
LABEL_911:
        *(_QWORD *)(v506 + 24) += v511;
        v519 = *(_QWORD *)(v506 + 8);
        if (v511 >= 0x10000)
        {
          v539 = (unint64_t)(v519 - *(_QWORD *)v506) >> 3;
          *(_DWORD *)(v506 + 72) = 1;
          *(_DWORD *)(v506 + 76) = v539;
        }
        goto LABEL_913;
      }
LABEL_870:
      *v512 = *v501;
      v513 = *(_QWORD *)(v506 + 24);
      if (v511 > 0x10)
      {
        v514 = (_OWORD *)(v513 + 16);
        v515 = v513 + v511;
        v516 = v501 + 1;
        v12 = v592;
        v517 = v581;
        do
        {
          v518 = *v516++;
          *v514++ = v518;
        }
        while ((unint64_t)v514 < v515);
        goto LABEL_911;
      }
      *(_QWORD *)(v506 + 24) = v513 + v511;
      v519 = *(_QWORD *)(v506 + 8);
      v12 = v592;
      v517 = v581;
LABEL_913:
      *(_WORD *)(v519 + 4) = v511;
      *(_DWORD *)v519 = v156 + 1;
      if (v508 - 3 >= 0x10000)
      {
        v540 = (unint64_t)(v519 - *(_QWORD *)v506) >> 3;
        *(_DWORD *)(v506 + 72) = 2;
        *(_DWORD *)(v506 + 76) = v540;
      }
      *(_WORD *)(v519 + 6) = v508 - 3;
      v541 = v519 + 8;
      *(_QWORD *)(v506 + 8) = v519 + 8;
      v5 = (char *)&v498[v508];
      if ((unint64_t)&v498[v508] > v624)
      {
        v628 = (char *)&v498[v508];
        continue;
      }
      v542 = v9;
      v543 = v8;
LABEL_919:
      v9 = v543;
      v543 = v542;
      v544 = *(_DWORD *)(a1 + 28);
      if ((_DWORD)v5 - (_DWORD)v6 - v544 > v620 && *(_DWORD *)(a1 + 32) == 0)
        v544 = (_DWORD)v5 - v6 - v620;
      v546 = ((_DWORD)v5 - v6 - v9);
      if (v546 >= v7)
        v547 = v6;
      else
        v547 = v623;
      if ((v619 - v546) >= 3 && v546 > v544)
      {
        v548 = v547 + v546;
        if (*(_DWORD *)v5 == *(_DWORD *)(v547 + v546))
        {
          if (v546 >= v7)
            v549 = (_QWORD *)v632;
          else
            v549 = v12;
          v550 = v5 + 4;
          v551 = (_QWORD *)(v548 + 4);
          v552 = (char *)v549 + (_QWORD)v5 - v548;
          if ((unint64_t)v552 >= v632)
            v552 = (char *)v632;
          if (v552 - 7 <= v550)
          {
            v556 = v5 + 4;
            v557 = v551;
            if (v550 < v552 - 3)
            {
LABEL_942:
              if (*v557 == *(_DWORD *)v556)
              {
                v556 += 4;
                ++v557;
              }
            }
          }
          else
          {
            v553 = *(_QWORD *)v550 ^ *v551;
            if (v553)
            {
              v554 = __clz(__rbit64(v553)) >> 3;
              if ((_QWORD *)((char *)v551 + v554) != v549)
                goto LABEL_938;
LABEL_953:
              v558 = &v550[v554];
              if (v633 <= (unint64_t)v558)
              {
                v564 = v558;
                v565 = v595;
                if ((unint64_t)v558 < v626)
                {
LABEL_963:
                  if (*(_DWORD *)v565 == *(_DWORD *)v564)
                  {
                    v564 += 4;
                    v565 += 4;
                  }
                }
              }
              else
              {
                v559 = *(_QWORD *)v558 ^ *(_QWORD *)v595;
                if (v559)
                {
                  v554 += __clz(__rbit64(v559)) >> 3;
                  if ((unint64_t)v5 > v507)
                    goto LABEL_939;
LABEL_974:
                  *(_OWORD *)*(_QWORD *)(v506 + 24) = *(_OWORD *)v5;
                  v541 = *(_QWORD *)(v506 + 8);
                  v555 = v554 + 1;
                  *(_WORD *)(v541 + 4) = 0;
                  *(_DWORD *)v541 = 1;
                  if (v554 + 1 >= 0x10000)
                  {
LABEL_975:
                    v566 = (unint64_t)(v541 - *(_QWORD *)v506) >> 3;
                    *(_DWORD *)(v506 + 72) = 2;
                    *(_DWORD *)(v506 + 76) = v566;
                  }
LABEL_918:
                  *(_WORD *)(v541 + 6) = v555;
                  v541 += 8;
                  v5 += v554 + 4;
                  *(_QWORD *)(v506 + 8) = v541;
                  v542 = v9;
                  LODWORD(v8) = v543;
                  v628 = v5;
                  if ((unint64_t)v5 > v624)
                    continue;
                  goto LABEL_919;
                }
                v567 = 0;
                v568 = (uint64_t)&v5[v554 + 12];
                while (1)
                {
                  v569 = (_QWORD *)(v568 + v567);
                  if (v568 + v567 >= v633)
                    break;
                  v570 = *(_QWORD *)(v517 + v567);
                  v567 += 8;
                  v571 = *v569 ^ v570;
                  if (v571)
                  {
                    v554 += v567 + (__clz(__rbit64(v571)) >> 3);
                    if ((unint64_t)v5 <= v507)
                      goto LABEL_974;
                    goto LABEL_939;
                  }
                }
                v564 = &v5[v554 + 12 + v567];
                v565 = (unsigned __int8 *)(v517 + v567);
                if ((unint64_t)v564 < v626)
                  goto LABEL_963;
              }
              if ((unint64_t)v564 >= v625)
              {
                if ((unint64_t)v564 >= v632)
                  goto LABEL_973;
              }
              else
              {
                if (*(unsigned __int16 *)v565 == *(unsigned __int16 *)v564)
                {
                  v564 += 2;
                  v565 += 2;
                }
                if ((unint64_t)v564 >= v632)
                {
LABEL_973:
                  v554 += v564 - v558;
                  if ((unint64_t)v5 > v507)
                    goto LABEL_939;
                  goto LABEL_974;
                }
              }
              if (*v565 == *v564)
                ++v564;
              goto LABEL_973;
            }
            v560 = v5 + 12;
            while (1)
            {
              v561 = &v560[v553];
              if (&v560[v553] >= v552 - 7)
                break;
              v562 = *(_QWORD *)(v547 + v546 + 12 + v553);
              v553 += 8;
              v563 = *(_QWORD *)v561 ^ v562;
              if (v563)
              {
                v554 = v553 + (__clz(__rbit64(v563)) >> 3);
                if ((_QWORD *)((char *)v551 + v554) != v549)
                  goto LABEL_938;
                goto LABEL_953;
              }
            }
            v556 = &v5[v553 + 12];
            v557 = (_DWORD *)(v547 + v546 + v553 + 12);
            if (v556 < v552 - 3)
              goto LABEL_942;
          }
          if (v556 >= v552 - 1)
          {
            if (v556 >= v552)
              goto LABEL_952;
          }
          else
          {
            if (*(unsigned __int16 *)v557 == *(unsigned __int16 *)v556)
            {
              v556 += 2;
              v557 = (_DWORD *)((char *)v557 + 2);
            }
            if (v556 >= v552)
            {
LABEL_952:
              v554 = v556 - v550;
              if ((_QWORD *)((char *)v551 + v556 - v550) == v549)
                goto LABEL_953;
LABEL_938:
              if ((unint64_t)v5 <= v507)
                goto LABEL_974;
LABEL_939:
              v555 = v554 + 1;
              *(_WORD *)(v541 + 4) = 0;
              *(_DWORD *)v541 = 1;
              if (v554 + 1 >= 0x10000)
                goto LABEL_975;
              goto LABEL_918;
            }
          }
          if (*(unsigned __int8 *)v557 == *v556)
            ++v556;
          goto LABEL_952;
        }
      }
      LODWORD(v8) = v9;
      LODWORD(v9) = v542;
      v628 = v5;
LABEL_7:
      ;
    }
    while ((unint64_t)v628 < v624);
  }
  *a3 = v9;
  a3[1] = v8;
  return v632 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_btlazy2_extDict(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t BestMatch_extDict_selectMLS;
  unint64_t v24;
  BOOL v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t BestMatch;
  unint64_t v30;
  int v31;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  _DWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  int v58;
  _DWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  _DWORD *v69;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  int v86;
  _DWORD *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  int v96;
  _DWORD *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  _DWORD *v107;
  unsigned int v108;
  uint64_t v109;
  unsigned __int8 *v110;
  uint64_t v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unsigned __int8 *v117;
  uint64_t v118;
  unint64_t v119;
  _OWORD *v120;
  uint64_t v121;
  _OWORD *v122;
  unint64_t v123;
  __int128 *v124;
  __int128 v125;
  uint64_t v126;
  char *v127;
  _BYTE *v128;
  char *v129;
  _OWORD *v130;
  __int128 v131;
  char *v132;
  unint64_t v133;
  char *v134;
  unint64_t v135;
  __int128 *v136;
  _OWORD *v137;
  unint64_t v138;
  __int128 v139;
  char *v140;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  _DWORD *v148;
  unint64_t v149;
  unsigned int v150;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  char *v156;
  _QWORD *v157;
  char *v158;
  unint64_t v159;
  unint64_t v160;
  __int16 v161;
  char *v162;
  _DWORD *v163;
  char *v164;
  unint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  unsigned __int8 *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  unint64_t v177;
  _DWORD *v179;
  unsigned __int8 *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v185;
  unint64_t v186;
  unsigned int v187;
  unsigned __int8 *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  uint64_t v196;
  unint64_t v197;
  _QWORD v198[2];

  v5 = (char *)a4;
  v6 = a4 + a5;
  v7 = a4 + a5 - 8;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v179 = (_DWORD *)a3;
  LODWORD(v10) = *(_DWORD *)a3;
  LODWORD(a3) = *(_DWORD *)(a3 + 4);
  v188 = (unsigned __int8 *)(v8 + v9);
  if (v8 + v9 == a4)
    v11 = (uint64_t *)(a4 + 1);
  else
    v11 = (uint64_t *)a4;
  v197 = v7;
  if ((unint64_t)v11 < v7)
  {
    v13 = *(_QWORD *)(a1 + 16);
    v191 = (char *)(v13 + v9);
    v196 = v13;
    v180 = (unsigned __int8 *)(v13 + *(unsigned int *)(a1 + 28));
    v195 = 1 << *(_DWORD *)(a1 + 192);
    v194 = v9 - 1;
    v185 = v6 - 1;
    v186 = v6 - 3;
    v192 = *(_DWORD *)(a1 + 24);
    v183 = v6 - 32;
    v190 = *(_QWORD *)(a1 + 8);
    v181 = v9 + v8 + 8;
    v182 = v6 - 7;
    do
    {
      v14 = 0;
      v15 = (_DWORD)v11 - v8;
      v16 = (_DWORD)v11 - v8 + 1;
      if (v16 - *(_DWORD *)(a1 + 28) > v195 && *(_DWORD *)(a1 + 32) == 0)
        v18 = v16 - v195;
      else
        v18 = *(_DWORD *)(a1 + 28);
      v193 = v10;
      v19 = (v16 - v10);
      v20 = v196;
      if (v19 >= v9)
        v20 = v8;
      v187 = a3;
      if ((v194 - v19) >= 3 && v19 > v18)
      {
        v21 = v20 + v19;
        if (*(_DWORD *)((char *)v11 + 1) == *(_DWORD *)v21)
        {
          if (v19 >= v9)
            v22 = (char *)v6;
          else
            v22 = v191;
          v14 = ZSTD_count_2segments((uint64_t *)((char *)v11 + 5), (char *)(v21 + 4), v6, v22, v188) + 4;
        }
        else
        {
          v14 = 0;
        }
      }
      v198[0] = 999999999;
      BestMatch_extDict_selectMLS = ZSTD_BtFindBestMatch_extDict_selectMLS(a1, v11, v6, v198);
      if (BestMatch_extDict_selectMLS <= v14)
        v24 = v14;
      else
        v24 = BestMatch_extDict_selectMLS;
      if (v24 < 4)
      {
        v11 = (uint64_t *)((char *)v11 + (((char *)v11 - v5) >> 8) + 1);
        v8 = v190;
        LODWORD(v9) = v192;
        LODWORD(v10) = v193;
        LODWORD(a3) = v187;
        continue;
      }
      v25 = BestMatch_extDict_selectMLS > v14;
      if (BestMatch_extDict_selectMLS <= v14)
        v26 = (char *)v11 + 1;
      else
        v26 = (char *)v11;
      if (v25)
        v27 = v198[0];
      else
        v27 = 0;
      v28 = v27;
      v189 = v26;
      BestMatch = v24;
      LODWORD(v9) = v192;
      if ((unint64_t)v11 < v197)
      {
        while (1)
        {
          v30 = v6;
          v26 = (char *)v11 + 1;
          v31 = v15 + 1;
          if (v27)
          {
            if (v31 - *(_DWORD *)(a1 + 28) > v195 && *(_DWORD *)(a1 + 32) == 0)
              v33 = v31 - v195;
            else
              v33 = *(_DWORD *)(a1 + 28);
            v34 = v31 - v193;
            v35 = v190;
            if (v34 < v9)
              v35 = v196;
            if ((v194 - v34) >= 3 && v34 > v33)
            {
              v36 = v35 + v34;
              if (*(_DWORD *)v26 == *(_DWORD *)v36)
              {
                if (v34 >= v9)
                  v37 = (char *)v30;
                else
                  v37 = v191;
                v38 = ZSTD_count_2segments((uint64_t *)((char *)v11 + 5), (char *)(v36 + 4), v30, v37, v188);
                if (v38 > 0xFFFFFFFFFFFFFFFBLL)
                {
                  LODWORD(v9) = v192;
                }
                else
                {
                  LODWORD(v9) = v192;
                  if (3 * ((int)v38 + 4) > (int)((__clz(v27 + 1) ^ 0xFFFFFFE0) + 3 * v24 + 2))
                  {
                    v27 = 0;
                    v189 = (char *)v11 + 1;
                    v24 = v38 + 4;
                  }
                }
              }
            }
          }
          v198[0] = 999999999;
          v39 = *(_DWORD *)(a1 + 208);
          if ((v39 - 6) < 2)
            break;
          if (v39 == 5)
          {
            v51 = *(_QWORD *)(a1 + 8);
            v52 = *(unsigned int *)(a1 + 36);
            if (v51 + v52 > (unint64_t)v26)
              goto LABEL_75;
            v42 = (_DWORD)v26 - v51;
            if (v52 < (int)v26 - (int)v51)
            {
              v53 = *(_QWORD *)(a1 + 48);
              v54 = *(_QWORD *)(a1 + 64);
              v55 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
              v56 = 64 - *(_DWORD *)(a1 + 200);
              do
              {
                v57 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v51 + v52)) >> v56);
                v58 = *(_DWORD *)(v53 + v57);
                v59 = (_DWORD *)(v54 + 8 * (v52 & v55));
                *(_DWORD *)(v53 + v57) = v52;
                *v59 = v58;
                v59[1] = 1;
                ++v52;
              }
              while ((_DWORD)v26 - (_DWORD)v51 != v52);
            }
            v50 = 5;
            goto LABEL_66;
          }
          v61 = *(_QWORD *)(a1 + 8);
          v62 = *(unsigned int *)(a1 + 36);
          if (v61 + v62 > (unint64_t)v26)
            goto LABEL_75;
          v60 = (_DWORD)v26 - v61;
          if (v62 < (int)v26 - (int)v61)
          {
            v63 = *(_QWORD *)(a1 + 48);
            v64 = *(_QWORD *)(a1 + 64);
            v65 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
            v66 = 32 - *(_DWORD *)(a1 + 200);
            do
            {
              v67 = 4 * ((-1640531535 * *(_DWORD *)(v61 + v62)) >> v66);
              v68 = *(_DWORD *)(v63 + v67);
              v69 = (_DWORD *)(v64 + 8 * (v62 & v65));
              *(_DWORD *)(v63 + v67) = v62;
              *v69 = v68;
              v69[1] = 1;
              ++v62;
            }
            while ((_DWORD)v26 - (_DWORD)v61 != v62);
          }
          v50 = 4;
LABEL_72:
          *(_DWORD *)(a1 + 36) = v60;
          BestMatch = ZSTD_DUBT_findBestMatch(a1, (uint64_t *)((char *)v11 + 1), v30, v198, v50, 1);
          LODWORD(v9) = v192;
          if (BestMatch >= 4)
          {
            v28 = v198[0];
            if ((int)((__clz(LODWORD(v198[0]) + 1) ^ 0xFFFFFFE0) + 4 * BestMatch + 1) > (int)((__clz(v27 + 1) ^ 0xFFFFFFE0)
                                                                                             + 4 * v24
                                                                                             + 5))
            {
              ++v15;
              v6 = v30;
              goto LABEL_115;
            }
          }
LABEL_75:
          if ((unint64_t)v26 >= v197)
          {
            LODWORD(v28) = v27;
            v26 = v189;
            BestMatch = v24;
            v6 = v30;
            v10 = v193;
            a3 = v187;
            if (v27)
              goto LABEL_117;
LABEL_131:
            v114 = v183;
            v118 = a2;
            v8 = v190;
            v116 = v181;
            v115 = v182;
            v119 = v26 - v5;
            v120 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v26 <= v183)
              goto LABEL_132;
LABEL_139:
            if ((unint64_t)v5 <= v114)
            {
              v128 = (char *)v120 + v114 - (_QWORD)v5;
              v129 = v5;
              v130 = v120;
              do
              {
                v131 = *(_OWORD *)v129;
                v129 += 16;
                *v130++ = v131;
              }
              while (v130 < (_OWORD *)v128);
              v127 = (char *)v114;
              if (v114 >= (unint64_t)v26)
                goto LABEL_166;
            }
            else
            {
              v127 = v5;
              v128 = v120;
              if (v5 >= v26)
              {
LABEL_166:
                *(_QWORD *)(v118 + 24) += v119;
                v126 = *(_QWORD *)(v118 + 8);
                if (v119 >= 0x10000)
                {
                  v145 = (unint64_t)(v126 - *(_QWORD *)v118) >> 3;
                  *(_DWORD *)(v118 + 72) = 1;
                  *(_DWORD *)(v118 + 76) = v145;
                }
                goto LABEL_168;
              }
            }
            if ((unint64_t)v5 <= v114)
              v132 = (char *)v114;
            else
              v132 = v5;
            v133 = v26 - v132;
            if ((unint64_t)(v26 - v132) < 8)
            {
              v134 = v127;
              goto LABEL_165;
            }
            if ((unint64_t)((char *)v120 - v5) < 0x20)
            {
              v134 = v127;
              goto LABEL_165;
            }
            if (v133 >= 0x20)
            {
              v135 = v133 & 0xFFFFFFFFFFFFFFE0;
              v136 = (__int128 *)(v127 + 16);
              v137 = (_OWORD *)((char *)v120 + v132 - v5 + 16);
              v138 = v133 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v139 = *v136;
                *(v137 - 1) = *(v136 - 1);
                *v137 = v139;
                v136 += 2;
                v137 += 2;
                v138 -= 32;
              }
              while (v138);
              if (v133 == v135)
                goto LABEL_166;
              if ((v133 & 0x18) == 0)
              {
                v134 = &v127[v135];
                v128 += v135;
                do
                {
LABEL_165:
                  v144 = *v134++;
                  *v128++ = v144;
                }
                while (v134 < v26);
                goto LABEL_166;
              }
            }
            else
            {
              v135 = 0;
            }
            v128 += v133 & 0xFFFFFFFFFFFFFFF8;
            v134 = &v127[v133 & 0xFFFFFFFFFFFFFFF8];
            v140 = &v127[v135];
            v141 = (_QWORD *)((char *)v120 + &v132[v135] - v5);
            v142 = v135 - (v133 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v143 = *(_QWORD *)v140;
              v140 += 8;
              *v141++ = v143;
              v142 += 8;
            }
            while (v142);
            if (v133 == (v133 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_166;
            goto LABEL_165;
          }
          v26 = (char *)v11 + 2;
          v15 += 2;
          v6 = v30;
          if (v27)
          {
            if (v15 - *(_DWORD *)(a1 + 28) > v195 && *(_DWORD *)(a1 + 32) == 0)
              v71 = v15 - v195;
            else
              v71 = *(_DWORD *)(a1 + 28);
            v72 = v15 - v193;
            v73 = v190;
            if (v72 < v9)
              v73 = v196;
            if ((v194 - v72) >= 3 && v72 > v71)
            {
              v74 = v73 + v72;
              if (*(_DWORD *)v26 == *(_DWORD *)v74)
              {
                if (v72 >= v9)
                  v75 = (char *)v30;
                else
                  v75 = v191;
                v76 = ZSTD_count_2segments((uint64_t *)((char *)v11 + 6), (char *)(v74 + 4), v30, v75, v188);
                if (v76 > 0xFFFFFFFFFFFFFFFBLL)
                {
                  LODWORD(v9) = v192;
                }
                else
                {
                  LODWORD(v9) = v192;
                  if ((int)((__clz(v27 + 1) ^ 0xFFFFFFE0) + 4 * v24 + 2) < 4 * ((int)v76 + 4))
                  {
                    v27 = 0;
                    v189 = (char *)v11 + 2;
                    v24 = v76 + 4;
                  }
                }
              }
            }
          }
          v198[0] = 999999999;
          v77 = *(_DWORD *)(a1 + 208);
          if ((v77 - 6) >= 2)
          {
            if (v77 != 5)
            {
              v99 = *(_QWORD *)(a1 + 8);
              v100 = *(unsigned int *)(a1 + 36);
              if (v99 + v100 > (unint64_t)v26)
                goto LABEL_130;
              v98 = (_DWORD)v26 - v99;
              if (v100 < (int)v26 - (int)v99)
              {
                v101 = *(_QWORD *)(a1 + 48);
                v102 = *(_QWORD *)(a1 + 64);
                v103 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
                v104 = 32 - *(_DWORD *)(a1 + 200);
                do
                {
                  v105 = 4 * ((-1640531535 * *(_DWORD *)(v99 + v100)) >> v104);
                  v106 = *(_DWORD *)(v101 + v105);
                  v107 = (_DWORD *)(v102 + 8 * (v100 & v103));
                  *(_DWORD *)(v101 + v105) = v100;
                  *v107 = v106;
                  v107[1] = 1;
                  ++v100;
                }
                while ((_DWORD)v26 - (_DWORD)v99 != v100);
              }
              v88 = 4;
              goto LABEL_113;
            }
            v89 = *(_QWORD *)(a1 + 8);
            v90 = *(unsigned int *)(a1 + 36);
            if (v89 + v90 > (unint64_t)v26)
              goto LABEL_130;
            v80 = (_DWORD)v26 - v89;
            if (v90 < (int)v26 - (int)v89)
            {
              v91 = *(_QWORD *)(a1 + 48);
              v92 = *(_QWORD *)(a1 + 64);
              v93 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
              v94 = 64 - *(_DWORD *)(a1 + 200);
              do
              {
                v95 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v89 + v90)) >> v94);
                v96 = *(_DWORD *)(v91 + v95);
                v97 = (_DWORD *)(v92 + 8 * (v90 & v93));
                *(_DWORD *)(v91 + v95) = v90;
                *v97 = v96;
                v97[1] = 1;
                ++v90;
              }
              while ((_DWORD)v26 - (_DWORD)v89 != v90);
            }
            v88 = 5;
          }
          else
          {
            v78 = *(_QWORD *)(a1 + 8);
            v79 = *(unsigned int *)(a1 + 36);
            if (v78 + v79 > (unint64_t)v26)
              goto LABEL_130;
            v80 = (_DWORD)v26 - v78;
            if (v79 < (int)v26 - (int)v78)
            {
              v81 = *(_QWORD *)(a1 + 48);
              v82 = *(_QWORD *)(a1 + 64);
              v83 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
              v84 = 64 - *(_DWORD *)(a1 + 200);
              do
              {
                v85 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v78 + v79)) >> v84);
                v86 = *(_DWORD *)(v81 + v85);
                v87 = (_DWORD *)(v82 + 8 * (v79 & v83));
                *(_DWORD *)(v81 + v85) = v79;
                *v87 = v86;
                v87[1] = 1;
                ++v79;
              }
              while ((_DWORD)v26 - (_DWORD)v78 != v79);
            }
            v88 = 6;
          }
          v98 = v80;
LABEL_113:
          *(_DWORD *)(a1 + 36) = v98;
          BestMatch = ZSTD_DUBT_findBestMatch(a1, (uint64_t *)((char *)v11 + 2), v30, v198, v88, 1);
          LODWORD(v9) = v192;
          if (BestMatch < 4
            || (v28 = v198[0],
                (int)((__clz(LODWORD(v198[0]) + 1) ^ 0xFFFFFFE0) + 4 * BestMatch + 1) <= (int)((__clz(v27 + 1) ^ 0xFFFFFFE0)
                                                                                             + 4 * v24
                                                                                             + 8)))
          {
LABEL_130:
            LODWORD(v28) = v27;
            v26 = v189;
            BestMatch = v24;
            v10 = v193;
            a3 = v187;
            if (v27)
              goto LABEL_117;
            goto LABEL_131;
          }
LABEL_115:
          v11 = (uint64_t *)v26;
          v24 = BestMatch;
          v189 = v26;
          v27 = v28;
          if ((unint64_t)v26 >= v197)
            goto LABEL_116;
        }
        v40 = *(_QWORD *)(a1 + 8);
        v41 = *(unsigned int *)(a1 + 36);
        if (v40 + v41 > (unint64_t)v26)
          goto LABEL_75;
        v42 = (_DWORD)v26 - v40;
        if (v41 < (int)v26 - (int)v40)
        {
          v43 = *(_QWORD *)(a1 + 48);
          v44 = *(_QWORD *)(a1 + 64);
          v45 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
          v46 = 64 - *(_DWORD *)(a1 + 200);
          do
          {
            v47 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v40 + v41)) >> v46);
            v48 = *(_DWORD *)(v43 + v47);
            v49 = (_DWORD *)(v44 + 8 * (v41 & v45));
            *(_DWORD *)(v43 + v47) = v41;
            *v49 = v48;
            v49[1] = 1;
            ++v41;
          }
          while ((_DWORD)v26 - (_DWORD)v40 != v41);
        }
        v50 = 6;
LABEL_66:
        v60 = v42;
        goto LABEL_72;
      }
LABEL_116:
      v10 = v193;
      a3 = v187;
      if (!v28)
        goto LABEL_131;
LABEL_117:
      v8 = v190;
      v108 = (_DWORD)v26 - (v28 + v190) + 2;
      if (v9 <= v108)
        v109 = v190;
      else
        v109 = v196;
      v110 = v188;
      if (v9 > v108)
        v110 = v180;
      if (v26 <= v5 || (v111 = ((_DWORD)v26 - (v28 + v190) + 2), v109 + v111 <= (unint64_t)v110))
      {
        v115 = v182;
        v114 = v183;
        v116 = v181;
      }
      else
      {
        v112 = (unsigned __int8 *)(v109 + v111 - 1);
        v113 = (unsigned __int8 *)(v26 - 1);
        v115 = v182;
        v114 = v183;
        v116 = v181;
        while (*v113 == *v112)
        {
          ++BestMatch;
          v117 = v113 - 1;
          if (v113 > (unsigned __int8 *)v5)
          {
            --v113;
            v25 = v112-- > v110;
            if (v25)
              continue;
          }
          v26 = (char *)(v117 + 1);
          goto LABEL_138;
        }
        v26 = (char *)(v113 + 1);
      }
LABEL_138:
      a3 = v10;
      v10 = (v28 - 2);
      v118 = a2;
      v119 = v26 - v5;
      v120 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v26 > v114)
        goto LABEL_139;
LABEL_132:
      *v120 = *(_OWORD *)v5;
      v121 = *(_QWORD *)(v118 + 24);
      if (v119 > 0x10)
      {
        v122 = (_OWORD *)(v121 + 16);
        v123 = v121 + v119;
        v124 = (__int128 *)(v5 + 16);
        do
        {
          v125 = *v124++;
          *v122++ = v125;
        }
        while ((unint64_t)v122 < v123);
        goto LABEL_166;
      }
      *(_QWORD *)(v118 + 24) = v121 + v119;
      v126 = *(_QWORD *)(v118 + 8);
LABEL_168:
      *(_WORD *)(v126 + 4) = v119;
      *(_DWORD *)v126 = v28 + 1;
      if (BestMatch - 3 >= 0x10000)
      {
        v146 = (unint64_t)(v126 - *(_QWORD *)v118) >> 3;
        *(_DWORD *)(v118 + 72) = 2;
        *(_DWORD *)(v118 + 76) = v146;
      }
      *(_WORD *)(v126 + 6) = BestMatch - 3;
      v147 = v126 + 8;
      *(_QWORD *)(v118 + 8) = v126 + 8;
      v5 = &v26[BestMatch];
      if ((unint64_t)&v26[BestMatch] > v197)
      {
        v11 = (uint64_t *)&v26[BestMatch];
        continue;
      }
      v148 = (_DWORD *)v10;
      v149 = a3;
      while (1)
      {
        v10 = v149;
        v149 = (unint64_t)v148;
        v150 = *(_DWORD *)(a1 + 28);
        if ((_DWORD)v5 - (_DWORD)v8 - v150 > v195 && *(_DWORD *)(a1 + 32) == 0)
          v150 = (_DWORD)v5 - v8 - v195;
        v152 = ((_DWORD)v5 - v8 - v10);
        v153 = v152 >= v9 ? v8 : v196;
        if ((v194 - v152) < 3)
          break;
        if (v152 <= v150)
          break;
        v154 = v153 + v152;
        if (*(_DWORD *)v5 != *(_DWORD *)(v153 + v152))
          break;
        if (v152 >= v9)
          v155 = (_QWORD *)v6;
        else
          v155 = v191;
        v156 = v5 + 4;
        v157 = (_QWORD *)(v154 + 4);
        v158 = (char *)v155 + (_QWORD)v5 - v154;
        if ((unint64_t)v158 >= v6)
          v158 = (char *)v6;
        if (v158 - 7 <= v156)
        {
          v162 = v5 + 4;
          v163 = v157;
          if (v156 < v158 - 3)
          {
LABEL_197:
            if (*v163 == *(_DWORD *)v162)
            {
              v162 += 4;
              ++v163;
            }
          }
        }
        else
        {
          v159 = *(_QWORD *)v156 ^ *v157;
          if (v159)
          {
            v160 = __clz(__rbit64(v159)) >> 3;
            if ((_QWORD *)((char *)v157 + v160) != v155)
              goto LABEL_193;
            goto LABEL_208;
          }
          v166 = v5 + 12;
          while (1)
          {
            v167 = &v166[v159];
            if (&v166[v159] >= v158 - 7)
              break;
            v168 = *(_QWORD *)(v153 + v152 + 12 + v159);
            v159 += 8;
            v169 = *(_QWORD *)v167 ^ v168;
            if (v169)
            {
              v160 = v159 + (__clz(__rbit64(v169)) >> 3);
              if ((_QWORD *)((char *)v157 + v160) != v155)
                goto LABEL_193;
              goto LABEL_208;
            }
          }
          v162 = &v5[v159 + 12];
          v163 = (_DWORD *)(v153 + v152 + v159 + 12);
          if (v162 < v158 - 3)
            goto LABEL_197;
        }
        if (v162 >= v158 - 1)
        {
          if (v162 >= v158)
            goto LABEL_207;
LABEL_205:
          if (*(unsigned __int8 *)v163 == *v162)
            ++v162;
          goto LABEL_207;
        }
        if (*(unsigned __int16 *)v163 == *(unsigned __int16 *)v162)
        {
          v162 += 2;
          v163 = (_DWORD *)((char *)v163 + 2);
        }
        if (v162 < v158)
          goto LABEL_205;
LABEL_207:
        v160 = v162 - v156;
        if ((_QWORD *)((char *)v157 + v162 - v156) != v155)
        {
LABEL_193:
          if ((unint64_t)v5 > v114)
            goto LABEL_194;
          goto LABEL_229;
        }
LABEL_208:
        v164 = &v156[v160];
        if (v115 <= (unint64_t)v164)
        {
          v170 = v164;
          v171 = v188;
          if ((unint64_t)v164 < v186)
          {
LABEL_218:
            if (*(_DWORD *)v171 == *(_DWORD *)v170)
            {
              v170 += 4;
              v171 += 4;
            }
          }
        }
        else
        {
          v165 = *(_QWORD *)v164 ^ *(_QWORD *)v188;
          if (v165)
          {
            v160 += __clz(__rbit64(v165)) >> 3;
            if ((unint64_t)v5 > v114)
              goto LABEL_194;
            goto LABEL_229;
          }
          v173 = 0;
          v174 = (uint64_t)&v5[v160 + 12];
          while (1)
          {
            v175 = (_QWORD *)(v174 + v173);
            if (v174 + v173 >= v115)
              break;
            v176 = *(_QWORD *)(v116 + v173);
            v173 += 8;
            v177 = *v175 ^ v176;
            if (v177)
            {
              v160 += v173 + (__clz(__rbit64(v177)) >> 3);
              if ((unint64_t)v5 <= v114)
                goto LABEL_229;
              goto LABEL_194;
            }
          }
          v170 = &v5[v160 + 12 + v173];
          v171 = (unsigned __int8 *)(v116 + v173);
          if ((unint64_t)v170 < v186)
            goto LABEL_218;
        }
        if ((unint64_t)v170 >= v185)
        {
          if ((unint64_t)v170 >= v6)
            goto LABEL_228;
LABEL_226:
          if (*v171 == *v170)
            ++v170;
          goto LABEL_228;
        }
        if (*(unsigned __int16 *)v171 == *(unsigned __int16 *)v170)
        {
          v170 += 2;
          v171 += 2;
        }
        if ((unint64_t)v170 < v6)
          goto LABEL_226;
LABEL_228:
        v160 += v170 - v164;
        if ((unint64_t)v5 > v114)
        {
LABEL_194:
          v161 = v160 + 1;
          *(_WORD *)(v147 + 4) = 0;
          *(_DWORD *)v147 = 1;
          if (v160 + 1 >= 0x10000)
            goto LABEL_230;
          goto LABEL_173;
        }
LABEL_229:
        *(_OWORD *)*(_QWORD *)(v118 + 24) = *(_OWORD *)v5;
        v147 = *(_QWORD *)(v118 + 8);
        v161 = v160 + 1;
        *(_WORD *)(v147 + 4) = 0;
        *(_DWORD *)v147 = 1;
        if (v160 + 1 >= 0x10000)
        {
LABEL_230:
          v172 = (unint64_t)(v147 - *(_QWORD *)v118) >> 3;
          *(_DWORD *)(v118 + 72) = 2;
          *(_DWORD *)(v118 + 76) = v172;
        }
LABEL_173:
        *(_WORD *)(v147 + 6) = v161;
        v147 += 8;
        v5 += v160 + 4;
        *(_QWORD *)(v118 + 8) = v147;
        v148 = (_DWORD *)v10;
        LODWORD(a3) = v149;
        v11 = (uint64_t *)v5;
        if ((unint64_t)v5 > v197)
          goto LABEL_7;
      }
      LODWORD(a3) = v10;
      LODWORD(v10) = (_DWORD)v148;
      v11 = (uint64_t *)v5;
LABEL_7:
      ;
    }
    while ((unint64_t)v11 < v197);
  }
  *v179 = v10;
  v179[1] = a3;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_btopt_extDict(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v7;
  char **v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  __int128 *v15;
  __int128 v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  int v26;
  unsigned int i;
  int inserted;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  _QWORD *v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  _DWORD *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unsigned int v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  _QWORD *v82;
  int v83;
  unint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v89;
  _QWORD *v90;
  int v91;
  unsigned int v92;
  unint64_t v93;
  _DWORD *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  int v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  unsigned int v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  _QWORD *v123;
  int v124;
  unint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v130;
  _QWORD *v131;
  int v132;
  unsigned int v133;
  unint64_t v134;
  _DWORD *v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unsigned int v149;
  unint64_t v150;
  unsigned int v151;
  unsigned int v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  unint64_t v160;
  _QWORD *v161;
  int v162;
  unint64_t v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  uint64_t v168;
  _QWORD *v169;
  int v170;
  unsigned int v171;
  unint64_t v172;
  _DWORD *v174;
  uint64_t v175;
  char *v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  BOOL v188;
  char **v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  int v193;
  unint64_t v194;
  char *v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  _DWORD *v199;
  _QWORD *v200;
  unint64_t v201;
  unsigned __int8 *v202;
  unsigned int *v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  unsigned int v209;
  unint64_t v210;
  unint64_t v211;
  int v212;
  unint64_t v213;
  char *v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  int v218;
  _DWORD *v219;
  _QWORD *v220;
  unint64_t v221;
  unsigned __int8 *v222;
  unsigned int *v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  unint64_t v228;
  unsigned int v229;
  unint64_t v230;
  unint64_t v231;
  int v232;
  unint64_t v233;
  char *v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  int v238;
  _DWORD *v239;
  _QWORD *v240;
  unint64_t v241;
  unsigned __int8 *v242;
  unsigned int *v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  unint64_t v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unint64_t v252;
  unint64_t v253;
  int v254;
  unint64_t v255;
  char *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  _DWORD *v261;
  _DWORD *v262;
  unint64_t v263;
  unsigned __int8 *v264;
  unsigned int *v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unsigned __int8 *v272;
  uint64_t v273;
  int v274;
  unsigned int v275;
  uint64_t v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  _DWORD *v280;
  int v281;
  unsigned int v282;
  unsigned int v283;
  _DWORD *v284;
  unint64_t v285;
  uint64_t v286;
  unsigned int *v287;
  uint64_t v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int *v291;
  unsigned int v292;
  unsigned int v293;
  uint64_t v294;
  int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v300;
  int v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int *v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int *v311;
  unsigned int *v312;
  unsigned int *v313;
  unint64_t v314;
  unsigned __int8 *v315;
  int v316;
  unsigned int v317;
  unint64_t v318;
  unsigned int v319;
  unsigned int *v320;
  unsigned int v321;
  uint64_t v322;
  unsigned __int8 *v323;
  unsigned int v324;
  int v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  int v332;
  uint64_t v333;
  signed int v334;
  signed int *v335;
  _DWORD *v336;
  signed int v337;
  signed int v338;
  unsigned int *v339;
  unsigned int v340;
  unsigned int *v341;
  unint64_t v342;
  unsigned int v343;
  unsigned int v344;
  signed int *v345;
  uint64_t v346;
  unsigned int *v347;
  unsigned int *v348;
  int v349;
  unint64_t v350;
  uint64_t v351;
  unsigned int v352;
  unint64_t v353;
  unsigned int *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  unsigned int j;
  int v361;
  unsigned int v362;
  uint64_t v363;
  uint64_t v364;
  unsigned int v365;
  _QWORD *v366;
  int v367;
  unint64_t v368;
  unsigned int v369;
  unsigned int v370;
  unsigned int v372;
  int v373;
  uint64_t v374;
  unint64_t v375;
  unsigned int v376;
  unsigned int v377;
  uint64_t v378;
  uint64_t v379;
  unsigned int v380;
  unsigned int v381;
  unsigned int v382;
  uint64_t v384;
  uint64_t v385;
  int v386;
  unsigned int v387;
  unint64_t v388;
  _QWORD *v390;
  _QWORD *v391;
  unint64_t v392;
  unint64_t v393;
  _DWORD *v394;
  unsigned int v395;
  _QWORD *v396;
  uint64_t v397;
  unsigned int v398;
  int v399;
  unint64_t v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v404;
  int v405;
  uint64_t v406;
  unint64_t v407;
  unsigned int v408;
  unsigned int v409;
  uint64_t v410;
  uint64_t v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  uint64_t v416;
  uint64_t v417;
  int v418;
  unsigned int v419;
  unint64_t v420;
  _QWORD *v422;
  _QWORD *v423;
  unint64_t v424;
  unint64_t v425;
  _DWORD *v426;
  unsigned int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  _QWORD *v431;
  uint64_t v432;
  unsigned int v433;
  int v434;
  unint64_t v435;
  unsigned int v436;
  unsigned int v437;
  unsigned int v439;
  int v440;
  uint64_t v441;
  unint64_t v442;
  unsigned int v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int v449;
  uint64_t v451;
  uint64_t v452;
  int v453;
  unsigned int v454;
  unint64_t v455;
  _QWORD *v457;
  _QWORD *v458;
  unint64_t v459;
  unint64_t v460;
  _DWORD *v461;
  unsigned int v462;
  _QWORD *v463;
  uint64_t v464;
  unsigned int v465;
  int v466;
  unint64_t v467;
  unsigned int v468;
  unsigned int v469;
  unsigned int v471;
  int v472;
  uint64_t v473;
  unint64_t v474;
  unsigned int v475;
  unsigned int v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  uint64_t v484;
  uint64_t v485;
  int v486;
  unsigned int v487;
  unint64_t v488;
  _QWORD *v490;
  _QWORD *v491;
  unint64_t v492;
  unint64_t v493;
  _DWORD *v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  int v498;
  uint64_t v499;
  uint64_t v500;
  int v501;
  BOOL v502;
  unsigned int v503;
  unint64_t v504;
  unint64_t v505;
  int v506;
  unint64_t v507;
  uint64_t v508;
  unsigned __int8 *v509;
  unint64_t v510;
  uint64_t v511;
  unint64_t v512;
  unint64_t v513;
  uint64_t v514;
  _DWORD *v515;
  _QWORD *v516;
  unint64_t v517;
  char *v518;
  unsigned int *v519;
  uint64_t v520;
  char *v521;
  char *v522;
  uint64_t v523;
  unint64_t v524;
  unsigned int v525;
  unint64_t v526;
  unint64_t v527;
  int v528;
  unint64_t v529;
  unsigned __int8 *v530;
  uint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  uint64_t v535;
  unsigned int v536;
  _DWORD *v537;
  _QWORD *v538;
  unint64_t v539;
  char *v540;
  unsigned int *v541;
  uint64_t v542;
  char *v543;
  char *v544;
  uint64_t v545;
  unint64_t v546;
  unsigned int v547;
  unint64_t v548;
  unint64_t v549;
  int v550;
  unint64_t v551;
  unsigned __int8 *v552;
  uint64_t v553;
  unint64_t v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  unsigned int v558;
  _DWORD *v559;
  _QWORD *v560;
  unint64_t v561;
  char *v562;
  unsigned int *v563;
  uint64_t v564;
  char *v565;
  char *v566;
  uint64_t v567;
  unint64_t v568;
  unsigned int v569;
  unint64_t v570;
  unint64_t v571;
  int v572;
  unint64_t v573;
  unsigned __int8 *v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  unint64_t v578;
  uint64_t v579;
  unsigned int v580;
  _DWORD *v581;
  _DWORD *v582;
  unint64_t v583;
  char *v584;
  unsigned int *v585;
  uint64_t v586;
  char *v587;
  char *v588;
  uint64_t v589;
  unint64_t v590;
  uint64_t v591;
  unint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  unsigned int v596;
  _DWORD *v597;
  signed int *v598;
  unsigned int v599;
  unsigned int v600;
  signed int v601;
  uint64_t v602;
  int v603;
  int v604;
  int v605;
  unsigned int v606;
  signed int *v607;
  unint64_t v608;
  signed int v609;
  uint64_t v610;
  unint64_t v611;
  unint64_t v612;
  _DWORD *v613;
  _DWORD *v614;
  int v615;
  int v616;
  int v617;
  uint64_t v618;
  uint64_t v619;
  int v620;
  int v621;
  unsigned int v622;
  signed int *v623;
  unsigned int v624;
  unsigned int v625;
  unint64_t v626;
  signed int v627;
  uint64_t v628;
  unint64_t v629;
  unint64_t v630;
  _DWORD *v631;
  _DWORD *v632;
  _DWORD *v633;
  unint64_t v634;
  unsigned __int8 *v635;
  uint64_t v637;
  char *v638;
  char *v639;
  uint64_t v640;
  unint64_t v641;
  unsigned int *v642;
  unsigned int *v643;
  unsigned int *v644;
  unint64_t v645;
  unsigned int v646;
  unsigned int v647;
  unsigned int v648;
  unint64_t v649;
  uint64_t v650;
  unsigned int v651;
  unsigned int v652;
  unsigned int *v653;
  unsigned int v654;
  unsigned int *v655;
  unsigned int v656;
  unsigned int *v657;
  __int128 v658;
  BOOL v659;
  unsigned int v660;
  uint64_t v661;
  unsigned int v662;
  uint64_t v663;
  unsigned int v664;
  unsigned int v665;
  char *v666;
  unsigned __int8 *v667;
  uint64_t v668;
  int v669;
  unsigned int v670;
  unsigned int v671;
  unsigned int v672;
  unsigned int v673;
  unsigned int v674;
  unsigned __int8 *v675;
  char *v676;
  unsigned __int8 *v677;
  unsigned __int8 *v678;
  char *v679;
  uint64_t v680;
  _OWORD *v681;
  unint64_t v682;
  __int128 *v683;
  __int128 v684;
  unsigned __int8 *v685;
  char *v686;
  __int128 v687;
  unint64_t v688;
  unint64_t v689;
  unsigned __int8 *v690;
  uint64_t v691;
  unint64_t v692;
  __int128 *v693;
  char *v694;
  unint64_t v695;
  __int128 v696;
  unsigned __int8 *v697;
  char *v698;
  unint64_t v699;
  uint64_t v700;
  char v701;
  unint64_t v702;
  unint64_t v703;
  unsigned int v704;
  _DWORD *v705;
  unint64_t v706;
  unsigned int v707;
  unsigned int *v708;
  uint64_t v709;
  unsigned __int8 *v710;
  unint64_t v712;
  _QWORD *v713;
  _QWORD *v714;
  uint64_t v715;
  unint64_t v716;
  unsigned int v718;
  uint64_t v719;
  unsigned int *v720;
  int v721;
  int v722;
  int v723;
  int v724;
  uint64_t v725;
  unint64_t v726;
  unint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  unsigned int v733;
  unsigned int v734;
  unsigned int v735;
  unsigned int v736;
  _QWORD *v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  unsigned int v743;
  unsigned int v744;
  unsigned int v745;
  unsigned int v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  unsigned int v750;
  unsigned int v751;
  unsigned int v752;
  unsigned int v753;
  char *v754;
  char *v755;
  char *v756;
  uint64_t v757;
  unint64_t v758;
  unint64_t v759;
  unint64_t v760;
  unint64_t v761;
  unsigned int v762;
  unsigned int v763;
  unsigned int v764;
  char *v765;
  unsigned int v766;
  unsigned int v767;
  unsigned int v768;
  unsigned int v769;
  unint64_t v770;
  unint64_t v771;
  unint64_t v772;
  unsigned int v773;
  int v774;
  int v775;
  int v776;
  int v777;
  unsigned int v778;
  unsigned int v779;
  unsigned int v780;
  unsigned int v781;
  uint64_t v782;
  unint64_t v783;
  uint64_t v784;
  unint64_t v785;
  unint64_t v786;
  uint64_t v787;
  unsigned int v788;
  unsigned int v789;
  unsigned int v790;
  unsigned int v791;
  unint64_t v792;
  unint64_t v793;
  unint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  _DWORD *v799;
  unsigned int v800;
  unsigned int v801;
  unsigned int v802;
  unsigned int v803;
  unsigned int v804;
  uint64_t v805;
  unsigned int v806;
  unsigned int v807;
  unsigned int v808;
  unsigned int v809;
  int v810;
  int v811;
  uint64_t v812;
  int v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  unsigned int v817;
  unsigned int v818;
  int v819;
  unsigned int v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  _DWORD *v824;
  int v825;
  int v826;
  int v827;
  unint64_t v828;
  unsigned int v829;
  unsigned int v830;
  unsigned int v831;
  unsigned int v832;
  _DWORD *v833;
  _DWORD *v834;
  _DWORD *v835;
  unsigned int v836;
  _QWORD *v837;
  uint64_t v838;
  uint64_t v839;
  unint64_t v840;
  unint64_t v841;
  uint64_t v842;
  unsigned int v843;
  unsigned int v844;
  unsigned int v845;
  int v846;
  int v847;
  int v848;
  char *v849;
  unsigned int v850;
  unsigned int v851;
  uint64_t v852;
  unsigned int v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  unint64_t v857;
  _QWORD *v858;
  _QWORD *v859;
  unsigned int v860;
  int v861;
  unsigned int v862;
  unsigned int v863;
  unsigned int v864;
  uint64_t v865;
  char *v866;
  char *v867;
  _QWORD *v868;
  _QWORD *v869;
  int v870;
  int v871;
  int v872;
  unsigned int *v873;
  unint64_t v874;
  unint64_t v875;
  char *v876;
  char *v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  unsigned int *v881;
  unsigned int *v882;
  unsigned int *v883;
  unint64_t v884;
  unsigned int v885;
  unsigned int v886;
  unsigned int v887;
  unsigned int v888;
  unsigned int *v889;
  unsigned int *v890;
  uint64_t v891;
  _QWORD *v892;
  _QWORD *v893;
  _QWORD *v894;
  unsigned int v895;
  unsigned int v896;
  unsigned int v897;
  unsigned int v898;
  char **v899;
  unsigned int v900;
  uint64_t v901;
  char *v902;
  char *v903;
  char *v904;
  unsigned int v905;
  unsigned int *v906;
  unint64_t v907;
  unint64_t v908;
  unint64_t v909;
  signed int v910;
  unsigned int *v911;
  unsigned int *v912;
  unsigned int *v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  unsigned int v918;
  unsigned int *v919;
  unsigned int *v920;
  unsigned int v921;
  unsigned int v922;
  int v923;
  int v924;
  int v925;
  int v926;
  unsigned __int8 *v927;
  unint64_t v928;
  uint64_t v929;
  unsigned int v930;
  unint64_t v931;
  unint64_t v932;
  unint64_t v933;
  int v934;
  int v935;
  int v936;
  int v937;
  unsigned __int8 *v938;
  unint64_t v939;
  unint64_t v940;
  unint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  unint64_t v946;
  unint64_t v947;
  unint64_t v948;
  unint64_t v949;
  unsigned __int8 *v950;
  unsigned int v952;
  unsigned int *v953;
  int v954;
  int v955;
  int v956;
  int v957;
  uint64_t v958;
  unsigned __int8 *v959;
  unint64_t v960;
  unsigned __int8 *v961;
  _DWORD *v962;
  _DWORD *v963;
  unsigned int v964;
  __int128 v965;
  __int128 v966;
  _BYTE v967[24];
  int v968;
  uint64_t v969;
  unsigned int v970;
  uint64_t v971;

  v7 = a1;
  v971 = *MEMORY[0x1E0C80C00];
  v8 = (char **)(a1 + 80);
  v927 = a4;
  v959 = &a4[a5];
  v928 = (unint64_t)&a4[a5 - 8];
  v9 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 212) >= 0xFFFu)
    v10 = 4095;
  else
    v10 = *(_DWORD *)(a1 + 212);
  v900 = v10;
  if (*(_DWORD *)(a1 + 208) == 3)
    v11 = 3;
  else
    v11 = 4;
  v958 = v11;
  v12 = *(_DWORD *)(a1 + 36);
  v13 = *(_QWORD *)(a1 + 112);
  v14 = *(unsigned int **)(a1 + 120);
  v970 = 0;
  v969 = 0;
  v966 = 0u;
  memset(v967, 0, sizeof(v967));
  v965 = 0u;
  v15 = *(__int128 **)(a1 + 224);
  if (v15)
  {
    v16 = v15[1];
    v965 = *v15;
    v966 = v16;
    *(_QWORD *)v967 = *((_QWORD *)v15 + 4);
  }
  else
  {
    *(_QWORD *)v967 = 0;
    v965 = 0uLL;
    v966 = 0uLL;
  }
  *(_QWORD *)&v967[12] = 0;
  *(_DWORD *)&v967[8] = 0;
  ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t *)&v965, 0, a5);
  ZSTD_rescaleFreqs(v8, v927, a5, 0);
  if (v9 == v927)
    v17 = v927 + 1;
  else
    v17 = v927;
  v18 = (unint64_t)v959;
  if ((unint64_t)v17 < v928)
  {
    v718 = v12;
    v800 = 0;
    v960 = (unint64_t)(v959 - 7);
    v939 = (unint64_t)(v959 - 1);
    v940 = (unint64_t)(v959 - 3);
    v19 = (v958 - 1) | 1;
    v963 = v14 + 14;
    v719 = v958 - v19;
    v720 = &v14[7 * v19];
    v20 = v927;
    v929 = v7;
    v899 = v8;
    v962 = (_DWORD *)v13;
    v738 = a2;
    while (1)
    {
      v952 = 0;
      v961 = v20;
      v22 = (_DWORD)v17 - (_DWORD)v20;
      v964 = 0;
      v23 = *(_QWORD *)(v7 + 8);
      v24 = *(unsigned int *)(v7 + 36);
      v950 = v17;
      if (v23 + v24 > (unint64_t)v17)
      {
        v25 = v8;
        goto LABEL_498;
      }
      v26 = *(_DWORD *)(v7 + 208);
      for (i = (_DWORD)v17 - v23; v24 < i; LODWORD(v24) = inserted + v24)
      {
        inserted = ZSTD_insertBt1(v7, (_QWORD *)(v23 + v24), v18, v26, 1);
        v18 = (unint64_t)v959;
      }
      *(_DWORD *)(v7 + 36) = i;
      if ((v26 - 6) < 2)
      {
        v952 = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu)
          v65 = 4095;
        else
          v65 = *(_DWORD *)(v7 + 212);
        v66 = *(_QWORD *)(v7 + 8);
        v67 = *(_QWORD *)(v7 + 16);
        v68 = (_DWORD)v950 - v66;
        v69 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        v870 = ~v69;
        v70 = (_DWORD)v950 - v66 + v69 + 1;
        if ((int)v950 - (int)v66 < ~v69)
          v70 = 0;
        v862 = v70;
        v71 = *(unsigned int *)(v7 + 24);
        v72 = 1 << *(_DWORD *)(v7 + 192);
        if (v68 - *(_DWORD *)(v7 + 28) > v72 && *(_DWORD *)(v7 + 32) == 0)
          v74 = v68 - v72;
        else
          v74 = *(_DWORD *)(v7 + 28);
        v17 = v950;
        if (v74 <= 1)
          v75 = 1;
        else
          v75 = v74;
        v885 = v75;
        v76 = v68 - v71;
        v77 = v68 - v74;
        v78 = v7;
        v79 = v22 == 0;
        v80 = (char *)(v950 + 12);
        v775 = *(_DWORD *)(v78 + 204);
        v785 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v950) >> -(char)*(_DWORD *)(v78 + 200);
        v796 = *(_QWORD *)(v78 + 48);
        v802 = *(_DWORD *)(v796 + 4 * v785);
        v942 = v67;
        v902 = (char *)(v67 + v71);
        v907 = v71;
        v878 = v66;
        v892 = (_QWORD *)(v66 + v71);
        v854 = *(_QWORD *)(v78 + 64);
        v912 = (unsigned int *)(v854 + 8 * (v68 & ~v69));
        v919 = v912 + 1;
        v923 = v68 + 9;
        v968 = 0;
        if (v22)
          v81 = 3;
        else
          v81 = 4;
        v82 = v950 + 4;
        if (v22)
          v83 = 0;
        else
          v83 = -1;
        v84 = (v958 - 1);
        v843 = v65;
        v830 = v74;
        v818 = v68 - v74;
        v810 = (_DWORD)v950 - v66;
        while (1)
        {
          if (v79 == 3)
          {
            v85 = *a3 - 1;
            v86 = v68 - v85;
            v87 = *a3 - 2;
            if (v87 >= v76)
              goto LABEL_112;
          }
          else
          {
            v85 = a3[v79];
            v86 = v68 - v85;
            v87 = v85 - 1;
            if (v85 - 1 >= v76)
            {
LABEL_112:
              if (v87 < v77 && v71 + ~v86 >= 3)
              {
                v89 = v942 + v86;
                if (*(_DWORD *)v17 == *(_DWORD *)v89)
                {
                  v931 = v84;
                  v90 = v82;
                  v91 = ZSTD_count_2segments(v82, (char *)(v89 + 4), v18, v902, v892);
                  v82 = v90;
                  v68 = v810;
                  v84 = v931;
                  v77 = v818;
                  v74 = v830;
                  v71 = v907;
                  v17 = v950;
                  v18 = (unint64_t)v959;
                  v92 = v91 + 4;
                  v65 = v843;
                  v93 = v92;
                  if (v931 < v92)
                    goto LABEL_126;
                }
              }
              goto LABEL_109;
            }
          }
          if (v86 < v74 || *(_DWORD *)v17 != *(_DWORD *)&v17[-v85])
            goto LABEL_109;
          v96 = -(uint64_t)v85;
          v97 = (char *)v82 - v85;
          if (v960 <= (unint64_t)v82)
            break;
          v98 = *v82 ^ *(_QWORD *)v97;
          if (v98)
          {
            v92 = (__clz(__rbit64(v98)) >> 3) + 4;
            v93 = v92;
            if (v84 < v92)
              goto LABEL_126;
            goto LABEL_109;
          }
          v100 = 0;
          do
          {
            v99 = &v80[v100];
            if ((unint64_t)&v80[v100] >= v960)
            {
              v97 = &v99[v96];
              if ((unint64_t)v99 >= v940)
                goto LABEL_136;
              goto LABEL_134;
            }
            v101 = *(_QWORD *)&v80[v96 + v100];
            v100 += 8;
            v102 = *(_QWORD *)v99 ^ v101;
          }
          while (!v102);
          v92 = v100 + (__clz(__rbit64(v102)) >> 3) + 4;
          v93 = v92;
          if (v84 < v92)
          {
LABEL_126:
            v95 = &v962[2 * v952];
            *v95 = v79 + v83;
            v95[1] = v92;
            ++v952;
            if (v92 > v65)
              goto LABEL_497;
            v84 = v93;
            if (&v17[v93] == (unsigned __int8 *)v18)
              goto LABEL_497;
          }
LABEL_109:
          if (++v79 >= v81)
          {
            *(_DWORD *)(v796 + 4 * v785) = v68;
            v103 = v802;
            if (v802 < v885)
            {
              v104 = v923;
              goto LABEL_155;
            }
            v191 = 0;
            v192 = 0;
            v193 = ~(-1 << v775);
            v846 = v68 + 2;
            v833 = v17 + 8;
            v821 = v878 + 8;
            v104 = v923;
            while (1)
            {
              v934 = v193;
              v194 = v192 >= v191 ? v191 : v192;
              v195 = (char *)&v17[v194];
              if (v194 + v103 >= v71)
                break;
              v925 = v104;
              v196 = ZSTD_count_2segments(v195, (char *)(v942 + v103 + v194), v18, v902, v892);
              v71 = v907;
              v197 = v196 + v194;
              if (v196 + v194 + v103 >= v907)
                v198 = v878 + v103;
              else
                v198 = v942 + v103;
              v104 = v925;
              if (v197 > v84)
                goto LABEL_305;
LABEL_326:
              v18 = (unint64_t)v959;
              v17 = v950;
LABEL_327:
              v203 = (unsigned int *)(v854 + 8 * (v103 & v870));
              if (*(unsigned __int8 *)(v198 + v197) >= v17[v197])
              {
                *v919 = v103;
                if (v103 <= v862)
                {
                  v919 = (unsigned int *)&v968;
                  goto LABEL_155;
                }
                v191 = v197;
                v919 = (unsigned int *)(v854 + 8 * (v103 & v870));
                v193 = v934 - 1;
                if (!v934)
                  goto LABEL_155;
              }
              else
              {
                *v912 = v103;
                if (v103 <= v862)
                {
                  v912 = (unsigned int *)&v968;
                  goto LABEL_155;
                }
                ++v203;
                v192 = v197;
                v912 = v203;
                v193 = v934 - 1;
                if (!v934)
                  goto LABEL_155;
              }
              v103 = *v203;
              if (*v203 < v885)
              {
LABEL_155:
                *v919 = 0;
                *v912 = 0;
                v105 = v104 - 8;
                goto LABEL_496;
              }
            }
            v198 = v878 + v103;
            v200 = (_QWORD *)(v198 + v194);
            if (v960 <= (unint64_t)v195)
            {
              v202 = &v17[v194];
              if ((unint64_t)v195 >= v940)
                goto LABEL_317;
            }
            else
            {
              v201 = *(_QWORD *)v195 ^ *v200;
              if (v201)
              {
                v197 = (__clz(__rbit64(v201)) >> 3) + v194;
                if (v197 <= v84)
                  goto LABEL_326;
                goto LABEL_305;
              }
              v204 = 0;
              v205 = (char *)v833 + v194;
              while (1)
              {
                v206 = &v205[v204];
                if ((unint64_t)&v205[v204] >= v960)
                  break;
                v207 = *(_QWORD *)(v821 + v194 + v103 + v204);
                v204 += 8;
                v208 = *(_QWORD *)v206 ^ v207;
                if (v208)
                {
                  v197 = v204 + (__clz(__rbit64(v208)) >> 3) + v194;
                  if (v197 <= v84)
                    goto LABEL_326;
LABEL_305:
                  if (v197 > v104 - v103)
                    v104 = v103 + v197;
                  v199 = &v962[2 * v952];
                  *v199 = v846 - v103;
                  v199[1] = v197;
                  ++v952;
                  v18 = (unint64_t)v959;
                  v17 = v950;
                  if (v197 > 0x1000)
                    goto LABEL_155;
                  v84 = v197;
                  if (&v950[v197] == v959)
                    goto LABEL_155;
                  goto LABEL_327;
                }
              }
              v202 = (unsigned __int8 *)v833 + v194 + v204;
              v200 = (_QWORD *)(v821 + v194 + v103 + v204);
              if ((unint64_t)v202 >= v940)
              {
LABEL_317:
                if ((unint64_t)v202 >= v939)
                {
                  if ((unint64_t)v202 >= v18)
                    goto LABEL_325;
                }
                else
                {
                  if (*(unsigned __int16 *)v200 == *(unsigned __int16 *)v202)
                  {
                    v202 += 2;
                    v200 = (_QWORD *)((char *)v200 + 2);
                  }
                  if ((unint64_t)v202 >= v18)
                  {
LABEL_325:
                    v197 = v202 - (unsigned __int8 *)v195 + v194;
                    if (v197 <= v84)
                      goto LABEL_326;
                    goto LABEL_305;
                  }
                }
                if (*(unsigned __int8 *)v200 == *v202)
                  ++v202;
                goto LABEL_325;
              }
            }
            if (*(_DWORD *)v200 == *(_DWORD *)v202)
            {
              v202 += 4;
              v200 = (_QWORD *)((char *)v200 + 4);
            }
            goto LABEL_317;
          }
        }
        v99 = (char *)v82;
        if ((unint64_t)v82 >= v940)
          goto LABEL_136;
LABEL_134:
        if (*(_DWORD *)v97 == *(_DWORD *)v99)
        {
          v99 += 4;
          v97 += 4;
        }
LABEL_136:
        if ((unint64_t)v99 >= v939)
        {
          if ((unint64_t)v99 >= v18)
            goto LABEL_144;
        }
        else
        {
          if (*(unsigned __int16 *)v97 == *(unsigned __int16 *)v99)
          {
            v99 += 2;
            v97 += 2;
          }
          if ((unint64_t)v99 >= v18)
          {
LABEL_144:
            v92 = (_DWORD)v99 - (_DWORD)v82 + 4;
            v93 = v92;
            if (v84 < v92)
              goto LABEL_126;
            goto LABEL_109;
          }
        }
        if (*v97 == *v99)
          LODWORD(v99) = (_DWORD)v99 + 1;
        goto LABEL_144;
      }
      if (v26 == 5)
      {
        v952 = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu)
          v106 = 4095;
        else
          v106 = *(_DWORD *)(v7 + 212);
        v107 = *(_QWORD *)(v7 + 8);
        v108 = *(_QWORD *)(v7 + 16);
        v109 = (_DWORD)v950 - v107;
        v110 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        v871 = ~v110;
        v111 = (_DWORD)v950 - v107 + v110 + 1;
        if ((int)v950 - (int)v107 < ~v110)
          v111 = 0;
        v863 = v111;
        v112 = *(unsigned int *)(v7 + 24);
        v113 = 1 << *(_DWORD *)(v7 + 192);
        if (v109 - *(_DWORD *)(v7 + 28) > v113 && *(_DWORD *)(v7 + 32) == 0)
          v115 = v109 - v113;
        else
          v115 = *(_DWORD *)(v7 + 28);
        v17 = v950;
        if (v115 <= 1)
          v116 = 1;
        else
          v116 = v115;
        v886 = v116;
        v117 = v109 - v112;
        v118 = v109 - v115;
        v119 = v7;
        v120 = v22 == 0;
        v121 = (char *)(v950 + 12);
        v776 = *(_DWORD *)(v119 + 204);
        v786 = (0xCF1BBCDCBB000000 * *(_QWORD *)v950) >> -(char)*(_DWORD *)(v119 + 200);
        v797 = *(_QWORD *)(v119 + 48);
        v803 = *(_DWORD *)(v797 + 4 * v786);
        v943 = v108;
        v903 = (char *)(v108 + v112);
        v908 = v112;
        v879 = v107;
        v893 = (_QWORD *)(v107 + v112);
        v855 = *(_QWORD *)(v119 + 64);
        v913 = (unsigned int *)(v855 + 8 * (v109 & ~v110));
        v920 = v913 + 1;
        v924 = v109 + 9;
        v968 = 0;
        if (v22)
          v122 = 3;
        else
          v122 = 4;
        v123 = v950 + 4;
        if (v22)
          v124 = 0;
        else
          v124 = -1;
        v125 = (v958 - 1);
        v844 = v115;
        v831 = v109 - v112;
        v819 = (_DWORD)v950 - v107;
        while (1)
        {
          if (v120 == 3)
          {
            v126 = *a3 - 1;
            v127 = v109 - v126;
            v128 = *a3 - 2;
            if (v128 >= v117)
              goto LABEL_180;
          }
          else
          {
            v126 = a3[v120];
            v127 = v109 - v126;
            v128 = v126 - 1;
            if (v126 - 1 >= v117)
            {
LABEL_180:
              if (v128 < v118 && v112 + ~v127 >= 3)
              {
                v130 = v943 + v127;
                if (*(_DWORD *)v17 == *(_DWORD *)v130)
                {
                  v932 = v125;
                  v131 = v123;
                  v132 = ZSTD_count_2segments(v123, (char *)(v130 + 4), v18, v903, v893);
                  v123 = v131;
                  v121 = (char *)(v950 + 12);
                  v109 = v819;
                  v125 = v932;
                  v117 = v831;
                  v112 = v908;
                  v17 = v950;
                  v18 = (unint64_t)v959;
                  v133 = v132 + 4;
                  v115 = v844;
                  v134 = v133;
                  if (v932 < v133)
                    goto LABEL_194;
                }
              }
              goto LABEL_177;
            }
          }
          if (v127 < v115 || *(_DWORD *)v17 != *(_DWORD *)&v17[-v126])
            goto LABEL_177;
          v137 = -(uint64_t)v126;
          v138 = (char *)v123 - v126;
          if (v960 <= (unint64_t)v123)
            break;
          v139 = *v123 ^ *(_QWORD *)v138;
          if (v139)
          {
            v133 = (__clz(__rbit64(v139)) >> 3) + 4;
            v134 = v133;
            if (v125 < v133)
              goto LABEL_194;
            goto LABEL_177;
          }
          v141 = 0;
          do
          {
            v140 = &v121[v141];
            if ((unint64_t)&v121[v141] >= v960)
            {
              v138 = &v140[v137];
              if ((unint64_t)v140 >= v940)
                goto LABEL_204;
              goto LABEL_202;
            }
            v142 = *(_QWORD *)&v121[v137 + v141];
            v141 += 8;
            v143 = *(_QWORD *)v140 ^ v142;
          }
          while (!v143);
          v133 = v141 + (__clz(__rbit64(v143)) >> 3) + 4;
          v134 = v133;
          if (v125 < v133)
          {
LABEL_194:
            v136 = &v962[2 * v952];
            *v136 = v120 + v124;
            v136[1] = v133;
            ++v952;
            if (v133 > v106)
              goto LABEL_497;
            v125 = v134;
            if (&v17[v134] == (unsigned __int8 *)v18)
              goto LABEL_497;
          }
LABEL_177:
          if (++v120 >= v122)
          {
            *(_DWORD *)(v797 + 4 * v786) = v109;
            v209 = v803;
            if (v803 < v886)
              goto LABEL_495;
            v210 = 0;
            v211 = 0;
            v212 = ~(-1 << v776);
            v847 = v109 + 2;
            v834 = v17 + 8;
            v822 = v879 + 8;
            while (1)
            {
              v935 = v212;
              if (v211 >= v210)
                v213 = v210;
              else
                v213 = v211;
              v214 = (char *)&v17[v213];
              if (v213 + v209 < v112)
              {
                v215 = ZSTD_count_2segments(v214, (char *)(v943 + v209 + v213), v18, v903, v893);
                v112 = v908;
                v216 = v215 + v213;
                if (v215 + v213 + v209 >= v908)
                  v217 = v879 + v209;
                else
                  v217 = v943 + v209;
                if (v216 > v125)
                  goto LABEL_352;
LABEL_373:
                v18 = (unint64_t)v959;
                v17 = v950;
                goto LABEL_374;
              }
              v217 = v879 + v209;
              v220 = (_QWORD *)(v217 + v213);
              if (v960 <= (unint64_t)v214)
                break;
              v221 = *(_QWORD *)v214 ^ *v220;
              if (v221)
              {
                v216 = (__clz(__rbit64(v221)) >> 3) + v213;
                if (v216 <= v125)
                  goto LABEL_373;
                goto LABEL_352;
              }
              v224 = 0;
              v225 = (char *)v834 + v213;
              do
              {
                v226 = &v225[v224];
                if ((unint64_t)&v225[v224] >= v960)
                {
                  v222 = (unsigned __int8 *)v834 + v213 + v224;
                  v220 = (_QWORD *)(v822 + v213 + v209 + v224);
                  if ((unint64_t)v222 >= v940)
                    goto LABEL_364;
                  goto LABEL_362;
                }
                v227 = *(_QWORD *)(v822 + v213 + v209 + v224);
                v224 += 8;
                v228 = *(_QWORD *)v226 ^ v227;
              }
              while (!v228);
              v216 = v224 + (__clz(__rbit64(v228)) >> 3) + v213;
              if (v216 <= v125)
                goto LABEL_373;
LABEL_352:
              v218 = v924;
              if (v216 > v924 - v209)
                v218 = v209 + v216;
              v924 = v218;
              v219 = &v962[2 * v952];
              *v219 = v847 - v209;
              v219[1] = v216;
              ++v952;
              v18 = (unint64_t)v959;
              v17 = v950;
              if (v216 > 0x1000)
                goto LABEL_495;
              v125 = v216;
              if (&v950[v216] == v959)
                goto LABEL_495;
LABEL_374:
              v223 = (unsigned int *)(v855 + 8 * (v209 & v871));
              if (*(unsigned __int8 *)(v217 + v216) >= v17[v216])
              {
                *v920 = v209;
                if (v209 <= v863)
                {
LABEL_494:
                  v920 = (unsigned int *)&v968;
                  goto LABEL_495;
                }
                v210 = v216;
                v920 = (unsigned int *)(v855 + 8 * (v209 & v871));
                v212 = v935 - 1;
                if (!v935)
                  goto LABEL_495;
              }
              else
              {
                *v913 = v209;
                if (v209 <= v863)
                  goto LABEL_493;
                ++v223;
                v211 = v216;
                v913 = v223;
                v212 = v935 - 1;
                if (!v935)
                  goto LABEL_495;
              }
              v209 = *v223;
              if (*v223 < v886)
                goto LABEL_495;
            }
            v222 = &v17[v213];
            if ((unint64_t)v214 >= v940)
              goto LABEL_364;
LABEL_362:
            if (*(_DWORD *)v220 == *(_DWORD *)v222)
            {
              v222 += 4;
              v220 = (_QWORD *)((char *)v220 + 4);
            }
LABEL_364:
            if ((unint64_t)v222 >= v939)
            {
              if ((unint64_t)v222 >= v18)
                goto LABEL_372;
            }
            else
            {
              if (*(unsigned __int16 *)v220 == *(unsigned __int16 *)v222)
              {
                v222 += 2;
                v220 = (_QWORD *)((char *)v220 + 2);
              }
              if ((unint64_t)v222 >= v18)
              {
LABEL_372:
                v216 = v222 - (unsigned __int8 *)v214 + v213;
                if (v216 <= v125)
                  goto LABEL_373;
                goto LABEL_352;
              }
            }
            if (*(unsigned __int8 *)v220 == *v222)
              ++v222;
            goto LABEL_372;
          }
        }
        v140 = (char *)v123;
        if ((unint64_t)v123 >= v940)
          goto LABEL_204;
LABEL_202:
        if (*(_DWORD *)v138 == *(_DWORD *)v140)
        {
          v140 += 4;
          v138 += 4;
        }
LABEL_204:
        if ((unint64_t)v140 >= v939)
        {
          if ((unint64_t)v140 >= v18)
            goto LABEL_212;
        }
        else
        {
          if (*(unsigned __int16 *)v138 == *(unsigned __int16 *)v140)
          {
            v140 += 2;
            v138 += 2;
          }
          if ((unint64_t)v140 >= v18)
          {
LABEL_212:
            v133 = (_DWORD)v140 - (_DWORD)v123 + 4;
            v134 = v133;
            if (v125 < v133)
              goto LABEL_194;
            goto LABEL_177;
          }
        }
        if (*v138 == *v140)
          LODWORD(v140) = (_DWORD)v140 + 1;
        goto LABEL_212;
      }
      if (v26 != 3)
      {
        v952 = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu)
          v144 = 4095;
        else
          v144 = *(_DWORD *)(v7 + 212);
        v145 = *(_QWORD *)(v7 + 8);
        v146 = *(_QWORD *)(v7 + 16);
        v147 = (_DWORD)v950 - v145;
        v148 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        v872 = ~v148;
        v149 = (_DWORD)v950 - v145 + v148 + 1;
        if ((int)v950 - (int)v145 < ~v148)
          v149 = 0;
        v864 = v149;
        v150 = *(unsigned int *)(v7 + 24);
        v151 = 1 << *(_DWORD *)(v7 + 192);
        if (v147 - *(_DWORD *)(v7 + 28) > v151 && *(_DWORD *)(v7 + 32) == 0)
          v153 = v147 - v151;
        else
          v153 = *(_DWORD *)(v7 + 28);
        v17 = v950;
        if (v153 <= 1)
          v154 = 1;
        else
          v154 = v153;
        v887 = v154;
        v155 = v147 - v150;
        v156 = v147 - v153;
        v157 = v7;
        v158 = v22 == 0;
        v159 = (char *)(v950 + 12);
        v777 = *(_DWORD *)(v157 + 204);
        v787 = (-1640531535 * *(_DWORD *)v950) >> -(char)*(_DWORD *)(v157 + 200);
        v798 = *(_QWORD *)(v157 + 48);
        v804 = *(_DWORD *)(v798 + 4 * v787);
        v944 = v146;
        v904 = (char *)(v146 + v150);
        v909 = v150;
        v880 = v145;
        v894 = (_QWORD *)(v145 + v150);
        v856 = *(_QWORD *)(v157 + 64);
        v913 = (unsigned int *)(v856 + 8 * (v147 & ~v148));
        v920 = v913 + 1;
        v924 = v147 + 9;
        v968 = 0;
        if (v22)
          v160 = 3;
        else
          v160 = 4;
        v161 = v950 + 4;
        if (v22)
          v162 = 0;
        else
          v162 = -1;
        v163 = (v958 - 1);
        v845 = v153;
        v832 = v147 - v153;
        v820 = v147 - v150;
        v811 = (_DWORD)v950 - v145;
        while (1)
        {
          if (v158 == 3)
          {
            v164 = *a3 - 1;
            v165 = v147 - v164;
            v166 = *a3 - 2;
            if (v166 >= v155)
              goto LABEL_245;
          }
          else
          {
            v164 = a3[v158];
            v165 = v147 - v164;
            v166 = v164 - 1;
            if (v164 - 1 >= v155)
            {
LABEL_245:
              if (v166 < v156 && v150 + ~v165 >= 3)
              {
                v168 = v944 + v165;
                if (*(_DWORD *)v17 == *(_DWORD *)v168)
                {
                  v933 = v163;
                  v169 = v161;
                  v170 = ZSTD_count_2segments(v161, (char *)(v168 + 4), v18, v904, v894);
                  v161 = v169;
                  v147 = v811;
                  v163 = v933;
                  v155 = v820;
                  v156 = v832;
                  v150 = v909;
                  v17 = v950;
                  v18 = (unint64_t)v959;
                  v171 = v170 + 4;
                  v153 = v845;
                  v172 = v171;
                  if (v933 < v171)
                    goto LABEL_259;
                }
              }
              goto LABEL_242;
            }
          }
          if (v165 < v153 || *(_DWORD *)v17 != *(_DWORD *)&v17[-v164])
            goto LABEL_242;
          v175 = -(uint64_t)v164;
          v176 = (char *)v161 - v164;
          if (v960 <= (unint64_t)v161)
            break;
          v177 = *v161 ^ *(_QWORD *)v176;
          if (v177)
          {
            v171 = (__clz(__rbit64(v177)) >> 3) + 4;
            v172 = v171;
            if (v163 < v171)
              goto LABEL_259;
            goto LABEL_242;
          }
          v179 = 0;
          do
          {
            v178 = &v159[v179];
            if ((unint64_t)&v159[v179] >= v960)
            {
              v176 = &v178[v175];
              if ((unint64_t)v178 >= v940)
                goto LABEL_269;
              goto LABEL_267;
            }
            v180 = *(_QWORD *)&v159[v175 + v179];
            v179 += 8;
            v181 = *(_QWORD *)v178 ^ v180;
          }
          while (!v181);
          v171 = v179 + (__clz(__rbit64(v181)) >> 3) + 4;
          v172 = v171;
          if (v163 < v171)
          {
LABEL_259:
            v174 = &v962[2 * v952];
            *v174 = v158 + v162;
            v174[1] = v171;
            ++v952;
            if (v171 > v144)
              goto LABEL_497;
            v163 = v172;
            if (&v17[v172] == (unsigned __int8 *)v18)
              goto LABEL_497;
          }
LABEL_242:
          if (++v158 >= v160)
          {
            *(_DWORD *)(v798 + 4 * v787) = v147;
            v229 = v804;
            if (v804 < v887)
              goto LABEL_495;
            v230 = 0;
            v231 = 0;
            v232 = ~(-1 << v777);
            v848 = v147 + 2;
            v835 = v17 + 8;
            v823 = v880 + 8;
            while (1)
            {
              v936 = v232;
              if (v231 >= v230)
                v233 = v230;
              else
                v233 = v231;
              v234 = (char *)&v17[v233];
              if (v233 + v229 < v150)
              {
                v235 = ZSTD_count_2segments(v234, (char *)(v944 + v229 + v233), v18, v904, v894);
                v150 = v909;
                v236 = v235 + v233;
                if (v235 + v233 + v229 >= v909)
                  v237 = v880 + v229;
                else
                  v237 = v944 + v229;
                if (v236 > v163)
                  goto LABEL_399;
LABEL_420:
                v18 = (unint64_t)v959;
                v17 = v950;
                goto LABEL_421;
              }
              v237 = v880 + v229;
              v240 = (_QWORD *)(v237 + v233);
              if (v960 <= (unint64_t)v234)
                break;
              v241 = *(_QWORD *)v234 ^ *v240;
              if (v241)
              {
                v236 = (__clz(__rbit64(v241)) >> 3) + v233;
                if (v236 <= v163)
                  goto LABEL_420;
                goto LABEL_399;
              }
              v244 = 0;
              v245 = (char *)v835 + v233;
              do
              {
                v246 = &v245[v244];
                if ((unint64_t)&v245[v244] >= v960)
                {
                  v242 = (unsigned __int8 *)v835 + v233 + v244;
                  v240 = (_QWORD *)(v823 + v233 + v229 + v244);
                  if ((unint64_t)v242 >= v940)
                    goto LABEL_411;
                  goto LABEL_409;
                }
                v247 = *(_QWORD *)(v823 + v233 + v229 + v244);
                v244 += 8;
                v248 = *(_QWORD *)v246 ^ v247;
              }
              while (!v248);
              v236 = v244 + (__clz(__rbit64(v248)) >> 3) + v233;
              if (v236 <= v163)
                goto LABEL_420;
LABEL_399:
              v238 = v924;
              if (v236 > v924 - v229)
                v238 = v229 + v236;
              v924 = v238;
              v239 = &v962[2 * v952];
              *v239 = v848 - v229;
              v239[1] = v236;
              ++v952;
              v18 = (unint64_t)v959;
              v17 = v950;
              if (v236 > 0x1000 || (v163 = v236, &v950[v236] == v959))
              {
LABEL_495:
                *v920 = 0;
                *v913 = 0;
                v105 = v924 - 8;
LABEL_496:
                *(_DWORD *)(v929 + 36) = v105;
LABEL_497:
                v7 = v929;
                v25 = v899;
                v13 = (uint64_t)v962;
LABEL_498:
                v190 = (unint64_t)(v959 - 32);
                goto LABEL_499;
              }
LABEL_421:
              v243 = (unsigned int *)(v856 + 8 * (v229 & v872));
              if (*(unsigned __int8 *)(v237 + v236) < v17[v236])
              {
                *v913 = v229;
                if (v229 > v864)
                {
                  ++v243;
                  v231 = v236;
                  v913 = v243;
                  v232 = v936 - 1;
                  if (!v936)
                    goto LABEL_495;
                  goto LABEL_390;
                }
LABEL_493:
                v913 = (unsigned int *)&v968;
                goto LABEL_495;
              }
              *v920 = v229;
              if (v229 <= v864)
                goto LABEL_494;
              v230 = v236;
              v920 = (unsigned int *)(v856 + 8 * (v229 & v872));
              v232 = v936 - 1;
              if (!v936)
                goto LABEL_495;
LABEL_390:
              v229 = *v243;
              if (*v243 < v887)
                goto LABEL_495;
            }
            v242 = &v17[v233];
            if ((unint64_t)v234 >= v940)
              goto LABEL_411;
LABEL_409:
            if (*(_DWORD *)v240 == *(_DWORD *)v242)
            {
              v242 += 4;
              v240 = (_QWORD *)((char *)v240 + 4);
            }
LABEL_411:
            if ((unint64_t)v242 >= v939)
            {
              if ((unint64_t)v242 >= v18)
                goto LABEL_419;
            }
            else
            {
              if (*(unsigned __int16 *)v240 == *(unsigned __int16 *)v242)
              {
                v242 += 2;
                v240 = (_QWORD *)((char *)v240 + 2);
              }
              if ((unint64_t)v242 >= v18)
              {
LABEL_419:
                v236 = v242 - (unsigned __int8 *)v234 + v233;
                if (v236 <= v163)
                  goto LABEL_420;
                goto LABEL_399;
              }
            }
            if (*(unsigned __int8 *)v240 == *v242)
              ++v242;
            goto LABEL_419;
          }
        }
        v178 = (char *)v161;
        if ((unint64_t)v161 >= v940)
          goto LABEL_269;
LABEL_267:
        if (*(_DWORD *)v176 == *(_DWORD *)v178)
        {
          v178 += 4;
          v176 += 4;
        }
LABEL_269:
        if ((unint64_t)v178 >= v939)
        {
          if ((unint64_t)v178 >= v18)
            goto LABEL_277;
        }
        else
        {
          if (*(unsigned __int16 *)v176 == *(unsigned __int16 *)v178)
          {
            v178 += 2;
            v176 += 2;
          }
          if ((unint64_t)v178 >= v18)
          {
LABEL_277:
            v171 = (_DWORD)v178 - (_DWORD)v161 + 4;
            v172 = v171;
            if (v163 < v171)
              goto LABEL_259;
            goto LABEL_242;
          }
        }
        if (*v176 == *v178)
          LODWORD(v178) = (_DWORD)v178 + 1;
        goto LABEL_277;
      }
      v952 = 0;
      if (*(_DWORD *)(v7 + 212) >= 0xFFFu)
        v29 = 4095;
      else
        v29 = *(_DWORD *)(v7 + 212);
      v30 = *(_QWORD *)(v7 + 8);
      v31 = *(_QWORD *)(v7 + 16);
      v32 = (_DWORD)v950 - v30;
      v33 = -1 << (*(_DWORD *)(v7 + 196) - 1);
      v861 = ~v33;
      v34 = (_DWORD)v950 - v30 + v33 + 1;
      if ((int)v950 - (int)v30 < ~v33)
        v34 = 0;
      v853 = v34;
      v35 = *(unsigned int *)(v7 + 24);
      v36 = 1 << *(_DWORD *)(v7 + 192);
      if (v32 - *(_DWORD *)(v7 + 28) > v36 && *(_DWORD *)(v7 + 32) == 0)
        v38 = v32 - v36;
      else
        v38 = *(_DWORD *)(v7 + 28);
      v17 = v950;
      if (v38 <= 1)
        v39 = 1;
      else
        v39 = v38;
      v922 = v39;
      v40 = v32 - v35;
      v41 = v32 - v38;
      v42 = v7;
      v43 = v22 == 0;
      v44 = (char *)(v950 + 11);
      v774 = *(_DWORD *)(v42 + 204);
      v784 = (-1640531535 * *(_DWORD *)v950) >> -(char)*(_DWORD *)(v42 + 200);
      v795 = *(_QWORD *)(v42 + 48);
      v801 = *(_DWORD *)(v795 + 4 * v784);
      v877 = (char *)(v31 + v35);
      v869 = (_QWORD *)(v30 + v35);
      v829 = (_DWORD)v950 - v30;
      v842 = *(_QWORD *)(v42 + 64);
      v911 = (unsigned int *)(v842 + 8 * (v32 & ~v33));
      v901 = v30;
      v906 = v911 + 1;
      v918 = v32 + 9;
      v968 = 0;
      if (v22)
        v45 = 3;
      else
        v45 = 4;
      v46 = v950 + 3;
      if (v22)
        v47 = 0;
      else
        v47 = -1;
      v941 = (v958 - 1);
      v884 = v35;
      v891 = v31;
      v930 = v29;
      v817 = v38;
      v809 = v32 - v35;
      do
      {
        if (v43 == 3)
        {
          v48 = *a3 - 1;
          v49 = v32 - v48;
          v50 = *a3 - 2;
          if (v50 >= v40)
            goto LABEL_47;
        }
        else
        {
          v48 = a3[v43];
          v49 = v32 - v48;
          v50 = v48 - 1;
          if (v48 - 1 >= v40)
          {
LABEL_47:
            v51 = v50 < v41 && v35 + ~v49 >= 3;
            if (!v51)
              goto LABEL_44;
            v52 = v31 + v49;
            if (((*(_DWORD *)v52 ^ *(_DWORD *)v17) & 0xFFFFFF) != 0)
              goto LABEL_44;
            v53 = ZSTD_count_2segments(v46, (char *)(v52 + 3), v18, v877, v869);
            v40 = v809;
            v32 = v829;
            v29 = v930;
            v35 = v884;
            v31 = v891;
            v30 = v901;
            v17 = v950;
            v18 = (unint64_t)v959;
            v54 = v53 + 3;
            v38 = v817;
            v55 = v54;
            if (v941 >= v54)
              goto LABEL_44;
            goto LABEL_61;
          }
        }
        if (v49 < v38 || ((*(_DWORD *)&v17[-v48] ^ *(_DWORD *)v17) & 0xFFFFFF) != 0)
          goto LABEL_44;
        v58 = -(uint64_t)v48;
        v59 = (char *)v46 - v48;
        if (v960 <= (unint64_t)v46)
        {
          v61 = (char *)(v950 + 3);
          if ((unint64_t)v46 < v940)
          {
LABEL_69:
            if (*(_DWORD *)v59 == *(_DWORD *)v61)
            {
              v61 += 4;
              v59 += 4;
            }
          }
          goto LABEL_71;
        }
        v60 = *v46 ^ *(_QWORD *)v59;
        if (!v60)
        {
          v62 = 0;
          while (1)
          {
            v61 = &v44[v62];
            if ((unint64_t)&v44[v62] >= v960)
              break;
            v63 = *(_QWORD *)&v44[v58 + v62];
            v62 += 8;
            v64 = *(_QWORD *)v61 ^ v63;
            if (v64)
            {
              v54 = v62 + (__clz(__rbit64(v64)) >> 3) + 3;
              v55 = v54;
              if (v941 >= v54)
                goto LABEL_44;
              goto LABEL_61;
            }
          }
          v59 = &v61[v58];
          if ((unint64_t)v61 < v940)
            goto LABEL_69;
LABEL_71:
          if ((unint64_t)v61 >= v939)
          {
            if ((unint64_t)v61 >= v18)
              goto LABEL_79;
          }
          else
          {
            if (*(unsigned __int16 *)v59 == *(unsigned __int16 *)v61)
            {
              v61 += 2;
              v59 += 2;
            }
            if ((unint64_t)v61 >= v18)
            {
LABEL_79:
              v54 = (_DWORD)v61 - (_DWORD)v950;
              v55 = v54;
              if (v941 >= v54)
                goto LABEL_44;
              goto LABEL_61;
            }
          }
          if (*v59 == *v61)
            LODWORD(v61) = (_DWORD)v61 + 1;
          goto LABEL_79;
        }
        v54 = (__clz(__rbit64(v60)) >> 3) + 3;
        v55 = v54;
        if (v941 >= v54)
          goto LABEL_44;
LABEL_61:
        v57 = &v962[2 * v952];
        *v57 = v43 + v47;
        v57[1] = v54;
        ++v952;
        if (v54 > v29 || (v941 = v55, &v17[v55] == (unsigned __int8 *)v18))
        {
          v7 = v929;
          v189 = v899;
          v13 = (uint64_t)v962;
          v190 = (unint64_t)(v959 - 32);
          goto LABEL_441;
        }
LABEL_44:
        ++v43;
      }
      while (v43 < v45);
      if (v941 > 2)
      {
        v189 = v899;
        v13 = (uint64_t)v962;
        v190 = (unint64_t)(v959 - 32);
        goto LABEL_437;
      }
      v7 = v929;
      v182 = *(_QWORD *)(v929 + 56);
      v183 = *(_DWORD *)v17;
      v184 = 32 - *(_DWORD *)(v929 + 40);
      v13 = (uint64_t)v962;
      if (v718 < v32)
      {
        v185 = v718;
        do
        {
          *(_DWORD *)(v182 + 4 * ((900185344 * *(_DWORD *)(v30 + v185)) >> v184)) = v185;
          ++v185;
        }
        while (v32 != v185);
      }
      v186 = *(unsigned int *)(v182 + 4 * ((900185344 * v183) >> v184));
      v187 = v32 - v186;
      v188 = v186 >= v922 && (v32 - v186) >> 18 == 0;
      v189 = v899;
      v190 = (unint64_t)(v959 - 32);
      if (!v188)
      {
        v718 = v32;
        v17 = v950;
        goto LABEL_437;
      }
      v17 = v950;
      if (v186 >= v35)
      {
        v705 = (_DWORD *)(v30 + v186);
        if (v960 <= (unint64_t)v950)
        {
          v710 = v950;
          if ((unint64_t)v950 < v940)
          {
LABEL_1206:
            if (*v705 == *(_DWORD *)v710)
            {
              v710 += 4;
              ++v705;
            }
          }
        }
        else
        {
          v706 = *(_QWORD *)v950 ^ *(_QWORD *)v705;
          if (v706)
          {
            v271 = __clz(__rbit64(v706)) >> 3;
            v718 = v32;
            if (v271 >= 3)
              goto LABEL_1217;
            goto LABEL_437;
          }
          v712 = 0;
          v713 = v950 + 8;
          while (1)
          {
            v714 = &v713[v712 / 8];
            if ((unint64_t)&v713[v712 / 8] >= v960)
              break;
            v715 = *(_QWORD *)(v30 + v186 + 8 + v712);
            v712 += 8;
            v716 = *v714 ^ v715;
            if (v716)
            {
              v271 = v712 + (__clz(__rbit64(v716)) >> 3);
              v17 = v950;
              v718 = v32;
              if (v271 >= 3)
                goto LABEL_1217;
              goto LABEL_437;
            }
          }
          v17 = v950;
          v710 = &v950[v712 + 8];
          v705 = (_DWORD *)(v30 + v186 + v712 + 8);
          if ((unint64_t)v710 < v940)
            goto LABEL_1206;
        }
        if ((unint64_t)v710 >= v939)
        {
          if ((unint64_t)v710 >= v18)
            goto LABEL_1216;
        }
        else
        {
          if (*(unsigned __int16 *)v705 == *(unsigned __int16 *)v710)
          {
            v710 += 2;
            v705 = (_DWORD *)((char *)v705 + 2);
          }
          if ((unint64_t)v710 >= v18)
          {
LABEL_1216:
            v271 = v710 - v17;
            v718 = v32;
            if ((unint64_t)(v710 - v17) < 3)
              goto LABEL_437;
            goto LABEL_1217;
          }
        }
        if (*(unsigned __int8 *)v705 == *v710)
          ++v710;
        goto LABEL_1216;
      }
      v271 = ZSTD_count_2segments(v950, (char *)(v31 + v186), v18, v877, v869);
      v32 = v829;
      v29 = v930;
      v35 = v884;
      v31 = v891;
      v30 = v901;
      v189 = v899;
      v17 = v950;
      v18 = (unint64_t)v959;
      v718 = v829;
      if (v271 < 3)
        goto LABEL_437;
LABEL_1217:
      *v962 = v187 + 2;
      v962[1] = v271;
      if (v271 > v29 || &v17[v271] == (unsigned __int8 *)v18)
      {
        v251 = v32 + 1;
        v952 = 1;
        v718 = v32;
        goto LABEL_440;
      }
      v952 = 1;
      v718 = v32;
      v941 = v271;
LABEL_437:
      *(_DWORD *)(v795 + 4 * v784) = v32;
      v249 = v801;
      if (v801 < v922)
      {
        v250 = v918;
        goto LABEL_439;
      }
      v252 = 0;
      v253 = 0;
      v254 = ~(-1 << v774);
      v836 = v32 + 2;
      v812 = v30 + 8;
      v824 = v17 + 8;
      v250 = v918;
      while (2)
      {
        v937 = v254;
        if (v253 >= v252)
          v255 = v252;
        else
          v255 = v253;
        v256 = (char *)&v17[v255];
        if (v255 + v249 >= v35)
        {
          v260 = v30 + v249;
          v262 = (_DWORD *)(v260 + v255);
          if (v960 <= (unint64_t)v256)
          {
            v264 = &v17[v255];
            v189 = v899;
            v13 = (uint64_t)v962;
            if ((unint64_t)v256 < v940)
            {
LABEL_462:
              if (*v262 == *(_DWORD *)v264)
              {
                v264 += 4;
                ++v262;
              }
            }
          }
          else
          {
            v263 = *(_QWORD *)v256 ^ *(_QWORD *)v262;
            if (v263)
            {
              v189 = v899;
              v13 = (uint64_t)v962;
              v259 = (__clz(__rbit64(v263)) >> 3) + v255;
              v190 = (unint64_t)(v959 - 32);
              if (v259 <= v941)
                goto LABEL_473;
              goto LABEL_452;
            }
            v266 = 0;
            v267 = (char *)v824 + v255;
            while (1)
            {
              v268 = &v267[v266];
              if ((unint64_t)&v267[v266] >= v960)
                break;
              v269 = *(_QWORD *)(v812 + v255 + v249 + v266);
              v266 += 8;
              v270 = *(_QWORD *)v268 ^ v269;
              if (v270)
              {
                v189 = v899;
                v13 = (uint64_t)v962;
                v259 = v266 + (__clz(__rbit64(v270)) >> 3) + v255;
                v190 = (unint64_t)(v959 - 32);
                if (v259 > v941)
                  goto LABEL_452;
                goto LABEL_473;
              }
            }
            v264 = (unsigned __int8 *)v824 + v255 + v266;
            v262 = (_DWORD *)(v812 + v255 + v249 + v266);
            v189 = v899;
            v13 = (uint64_t)v962;
            if ((unint64_t)v264 < v940)
              goto LABEL_462;
          }
          if ((unint64_t)v264 >= v939)
          {
            if ((unint64_t)v264 >= v18)
              goto LABEL_472;
          }
          else
          {
            if (*(unsigned __int16 *)v262 == *(unsigned __int16 *)v264)
            {
              v264 += 2;
              v262 = (_DWORD *)((char *)v262 + 2);
            }
            if ((unint64_t)v264 >= v18)
            {
LABEL_472:
              v259 = v264 - (unsigned __int8 *)v256 + v255;
              v190 = (unint64_t)(v959 - 32);
              if (v259 <= v941)
                goto LABEL_473;
LABEL_452:
              if (v259 > v250 - v249)
                v250 = v249 + v259;
              v261 = (_DWORD *)(v13 + 8 * v952);
              *v261 = v836 - v249;
              v261[1] = v259;
              ++v952;
              v18 = (unint64_t)v959;
              v17 = v950;
              if (v259 > 0x1000)
                goto LABEL_439;
              v941 = v259;
              if (&v950[v259] == v959)
                goto LABEL_439;
              goto LABEL_474;
            }
          }
          if (*(unsigned __int8 *)v262 == *v264)
            ++v264;
          goto LABEL_472;
        }
        v921 = v250;
        v257 = v31 + v249;
        v258 = ZSTD_count_2segments(v256, (char *)(v257 + v255), v18, v877, v869);
        v35 = v884;
        v31 = v891;
        v30 = v901;
        v259 = v258 + v255;
        if (v258 + v255 + v249 >= v884)
          v260 = v901 + v249;
        else
          v260 = v257;
        v250 = v921;
        v189 = v899;
        v13 = (uint64_t)v962;
        v190 = (unint64_t)(v959 - 32);
        if (v259 > v941)
          goto LABEL_452;
LABEL_473:
        v18 = (unint64_t)v959;
        v17 = v950;
LABEL_474:
        v265 = (unsigned int *)(v842 + 8 * (v249 & v861));
        if (*(unsigned __int8 *)(v260 + v259) < v17[v259])
        {
          *v911 = v249;
          if (v249 <= v853)
          {
            v911 = (unsigned int *)&v968;
            goto LABEL_439;
          }
          ++v265;
          v253 = v259;
          v911 = v265;
          v254 = v937 - 1;
          if (!v937)
            goto LABEL_439;
          goto LABEL_443;
        }
        *v906 = v249;
        if (v249 > v853)
        {
          v252 = v259;
          v906 = (unsigned int *)(v842 + 8 * (v249 & v861));
          v254 = v937 - 1;
          if (!v937)
            goto LABEL_439;
LABEL_443:
          v249 = *v265;
          if (*v265 < v922)
            goto LABEL_439;
          continue;
        }
        break;
      }
      v906 = (unsigned int *)&v968;
LABEL_439:
      *v906 = 0;
      *v911 = 0;
      v251 = v250 - 8;
      v7 = v929;
LABEL_440:
      *(_DWORD *)(v7 + 36) = v251;
LABEL_441:
      v25 = v189;
LABEL_499:
      v964 = v952;
      v272 = v17;
      ZSTD_optLdm_processMatchCandidate((uint64_t *)&v965, v13, &v964, (_DWORD)v17 - (_DWORD)v927, v18 - (_DWORD)v17);
      LODWORD(v273) = v964;
      if (v964)
      {
        v14[4] = *a3;
        v14[5] = a3[1];
        v14[6] = a3[2];
        v14[2] = 0;
        v14[3] = v22;
        v274 = *(_DWORD *)(v7 + 160);
        if (v274 != 1)
        {
          v18 = (unint64_t)v959;
          v20 = v961;
          v8 = v25;
          if (v22 < 0x40)
            v278 = ZSTD_LLcode_LL_Code[v22];
          else
            v278 = 50 - __clz(v22);
          v280 = *(_DWORD **)(v7 + 88);
          v281 = *(_DWORD *)(v7 + 148) + 1;
          v275 = v281 + (LL_bits[v278] << 8) + ((__clz(v280[v278] + 1) << 8) ^ 0xFFFFE0FF);
          *v14 = v275;
          v276 = (v273 - 1);
          v277 = *(_DWORD *)(v13 + 8 * v276 + 4);
          if (v277 <= v900)
          {
            v279 = v281 + ((__clz(*v280 + 1) << 8) ^ 0xFFFFE0FF);
            goto LABEL_512;
          }
LABEL_510:
          v282 = 0;
          v283 = *(_DWORD *)(v13 + 8 * v276);
          goto LABEL_1118;
        }
        v275 = (__clz(v22 + 1) << 8) ^ 0x1F00;
        *v14 = v275;
        v276 = (v273 - 1);
        v277 = *(_DWORD *)(v13 + 8 * v276 + 4);
        v18 = (unint64_t)v959;
        v20 = v961;
        if (v277 > v900)
        {
          v8 = v25;
          goto LABEL_510;
        }
        v279 = 0;
LABEL_512:
        v284 = v14 + 14;
        v285 = (v958 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v284 - 7) = 0x40000000;
          *v284 = 0x40000000;
          v284 += 14;
          v285 -= 2;
        }
        while (v285);
        if (v958 - 1 != ((v958 - 1) & 0xFFFFFFFFFFFFFFFELL))
        {
          v286 = v719;
          v287 = v720;
          do
          {
            *v287 = 0x40000000;
            v287 += 7;
            --v286;
          }
          while (v286);
        }
        v288 = 0;
        v289 = v279 + v275;
        if (v273 <= 1)
          v273 = 1;
        else
          v273 = v273;
        v290 = v958;
        while (2)
        {
          v291 = (unsigned int *)(v13 + 8 * v288);
          v292 = v291[1];
          if (v290 <= v292)
          {
            v293 = *v291;
            v294 = __clz(v293 + 1) ^ 0x1F;
            if (v274 == 1)
            {
              v295 = ((_DWORD)v294 << 8) + 4096;
              if (v290 + 1 <= v292 + 1)
                v296 = v292 + 1;
              else
                v296 = v290 + 1;
              v297 = v296 - v290;
              v298 = v296 - 1;
              if (v297 < 2 || v298 < v290)
              {
                v300 = v290;
                goto LABEL_543;
              }
              v300 = v290 + (v297 & 0xFFFFFFFE);
              v310 = v297 & 0xFFFFFFFE;
              do
              {
                v311 = &v14[7 * v290];
                v311[2] = v290;
                v311[3] = v22;
                v312 = &v14[7 * v290 + 7];
                v312[2] = v290 + 1;
                v312[3] = v22;
                *v311 = v289 + v295 + ((__clz(v290 - 2) << 8) ^ 0x1F00);
                v311[1] = v293;
                *v312 = v289 + v295 + ((__clz(v290 - 1) << 8) ^ 0x1F00);
                v312[1] = v293;
                v290 += 2;
                v310 -= 2;
              }
              while (v310);
              v290 = v300;
              if (v297 != (v297 & 0xFFFFFFFE))
              {
LABEL_543:
                v290 = v300;
                do
                {
                  v313 = &v14[7 * v290];
                  v313[2] = v290;
                  v313[3] = v22;
                  *v313 = v289 + v295 + ((__clz(v290 - 2) << 8) ^ 0x1F00);
                  v313[1] = v293;
                  ++v290;
                }
                while (v290 <= v292);
              }
            }
            else
            {
              if (v294 <= 0x13)
                v301 = 53;
              else
                v301 = ((_DWORD)v294 << 9) - 9675;
              v302 = *(_DWORD *)(v7 + 152);
              v303 = *(_QWORD *)(v7 + 96);
              v304 = *(_QWORD *)(v7 + 104);
              v305 = v301 + *(_DWORD *)(v7 + 156);
              do
              {
                v309 = v290 - 3;
                if (v290 - 3 < 0x80)
                  v306 = ZSTD_MLcode_ML_Code[v309];
                else
                  v306 = 67 - __clz(v309);
                v307 = v289
                     + v305
                     + ((__clz(*(_DWORD *)(v304 + 4 * v294) + 1) << 8) ^ 0xFFFFE0FF)
                     + v302
                     + ((ML_bits[v306] + (_DWORD)v294) << 8)
                     + ((__clz(*(_DWORD *)(v303 + 4 * v306) + 1) << 8) ^ 0xFFFFE0FF);
                v308 = &v14[7 * v290];
                v308[2] = v290;
                v308[3] = v22;
                *v308 = v307;
                v308[1] = v293;
                ++v290;
              }
              while (v290 <= v292);
            }
          }
          ++v288;
          v20 = v961;
          if (v288 != v273)
            continue;
          break;
        }
        LODWORD(v314) = v290 - 1;
        v315 = v950;
        if (v290 == 1)
          goto LABEL_1114;
        v737 = v950 + 8;
        v316 = (_DWORD)v950 + 1;
        v317 = 1;
        v318 = v928;
        while (2)
        {
          v319 = v317 - 1;
          v320 = &v14[7 * v317 - 7];
          if (v320[2])
            v321 = 1u;
          else
            v321 = v14[7 * v319 + 3] + 1;
          v322 = v317;
          v323 = &v315[v317];
          v324 = *v320;
          v325 = *(_DWORD *)(v7 + 160);
          if (*(_DWORD *)(v7 + 176) == 2)
          {
            v326 = v324 + 2048;
            if (v325 != 1)
            {
              if (v321 >= 0x40)
                goto LABEL_556;
LABEL_562:
              v327 = ZSTD_LLcode_LL_Code[v321];
              v328 = v321 - 1;
              if (v321 - 1 >= 0x40)
                goto LABEL_563;
LABEL_557:
              v329 = ZSTD_LLcode_LL_Code[v328];
              goto LABEL_564;
            }
LABEL_560:
            v330 = (__clz(v321 + 1) << 8) ^ 0x1F00;
            v331 = ((__clz(v321) << 8) ^ 0xFFFFE0FF) + 1;
          }
          else
          {
            if (v325 == 1)
            {
              v326 = v324 + 1536;
              goto LABEL_560;
            }
            v326 = *(_DWORD *)(v7 + 144)
                 + v324
                 + ((__clz(*(_DWORD *)(*(_QWORD *)(v7 + 80) + 4 * *(v323 - 1)) + 1) << 8) ^ 0xFFFFE0FF)
                 + 1;
            if (v321 < 0x40)
              goto LABEL_562;
LABEL_556:
            v327 = 50 - __clz(v321);
            v328 = v321 - 1;
            if (v321 - 1 < 0x40)
              goto LABEL_557;
LABEL_563:
            v329 = 50 - __clz(v328);
LABEL_564:
            v332 = *(_DWORD *)(v7 + 148);
            v333 = *(_QWORD *)(v7 + 88);
            v330 = v332 + (LL_bits[v327] << 8) + ((__clz(*(_DWORD *)(v333 + 4 * v327) + 1) << 8) ^ 0xFFFFE0FF) + 1;
            v331 = ~v332 - (LL_bits[v329] << 8) + ((__clz(*(_DWORD *)(v333 + 4 * v329) + 1) << 8) ^ 0x1F01);
            v315 = v950;
          }
          v334 = v326 + v330 + v331;
          v335 = (signed int *)&v14[7 * v322];
          v338 = *v335;
          v336 = v335 + 2;
          v337 = v338;
          if (v334 <= v338)
          {
            v345 = (signed int *)&v14[7 * v322];
            v345[1] = 0;
            v345[2] = 0;
            v345[3] = v321;
            *v345 = v334;
            v337 = v334;
LABEL_570:
            v346 = 0;
            v347 = &v14[7 * v322];
            v348 = &v14[7 * v319];
            *((_QWORD *)v347 + 2) = *((_QWORD *)v348 + 2);
            v347[6] = v348[6];
            v349 = 1;
            if ((unint64_t)v323 <= v318)
              goto LABEL_583;
LABEL_548:
            v317 = v322 + 1;
LABEL_549:
            ++v316;
            v190 = (unint64_t)(v959 - 32);
            if (v317 > v314)
              goto LABEL_1114;
            continue;
          }
          break;
        }
        if (!*v336)
          goto LABEL_570;
        v339 = &v14[7 * (v322 - *v336) + 4];
        v340 = v14[7 * v322 + 1];
        if (v340 < 3)
        {
          if (!v14[7 * v322 + 3])
            ++v340;
          if (v340)
          {
            if (v340 == 3)
            {
              v342 = *v339;
              v344 = v342 - 1;
            }
            else
            {
              v344 = v339[v340];
              v342 = *v339;
            }
            v659 = v340 > 1;
            v351 = 2;
            if (v659)
              v351 = 1;
            v341 = &v339[v351];
          }
          else
          {
            v350 = *(_QWORD *)v339;
            v341 = &v14[7 * (v322 - *v336) + 6];
            v344 = v350;
            v342 = HIDWORD(v350);
          }
        }
        else
        {
          v343 = *v339;
          v341 = &v14[7 * (v322 - *v336) + 5];
          v342 = v343;
          v344 = v340 - 2;
        }
        v349 = 0;
        v352 = *v341;
        v353 = v344 | (v342 << 32);
        v354 = &v14[7 * v322];
        *((_QWORD *)v354 + 2) = v353;
        v354[6] = v352;
        v346 = 1;
        if ((unint64_t)v323 > v318)
          goto LABEL_548;
LABEL_583:
        if ((_DWORD)v322 == (_DWORD)v314)
        {
          v190 = (unint64_t)(v959 - 32);
LABEL_1114:
          v642 = &v14[7 * v314];
          v283 = v642[1];
          v800 = *v642;
          v277 = v642[2];
          v22 = v642[3];
          v969 = *((_QWORD *)v642 + 2);
          v970 = v642[6];
          if (v314 >= v22 + v277)
            v282 = v314 - (v22 + v277);
          else
            v282 = 0;
          v8 = v899;
          v13 = (uint64_t)v962;
          if (!v277)
            goto LABEL_1202;
          goto LABEL_1118;
        }
        v317 = v322 + 1;
        if ((int)v14[7 * (v322 + 1)] <= v337 + 128)
          goto LABEL_549;
        v926 = v316;
        if (v349)
        {
          v22 = v14[7 * v322 + 3];
          if (*(_DWORD *)(v7 + 160) != 1)
            goto LABEL_587;
LABEL_589:
          v905 = 0;
        }
        else
        {
          v22 = 0;
          if (*(_DWORD *)(v7 + 160) == 1)
            goto LABEL_589;
LABEL_587:
          v905 = *(_DWORD *)(v7 + 148) + ((__clz(**(_DWORD **)(v7 + 88) + 1) << 8) ^ 0xFFFFE0FF) + 1;
        }
        v910 = v337;
        v799 = v336;
        v964 = 0;
        v355 = *(_QWORD *)(v7 + 8);
        v356 = v7;
        v357 = *(unsigned int *)(v7 + 36);
        if (v355 + v357 > (unint64_t)v323)
        {
          LODWORD(v358) = 0;
          goto LABEL_1041;
        }
        v945 = v346;
        v359 = *(_DWORD *)(v356 + 208);
        v938 = v323;
        for (j = (_DWORD)v323 - v355; v357 < j; LODWORD(v357) = v361 + v357)
        {
          v361 = ZSTD_insertBt1(v356, (_QWORD *)(v355 + v357), v18, v359, 1);
          v18 = (unint64_t)v959;
        }
        v953 = &v14[7 * v322 + 4];
        *(_DWORD *)(v356 + 36) = j;
        if ((v359 - 6) < 2)
        {
          v358 = 0;
          if (*(_DWORD *)(v356 + 212) >= 0xFFFu)
            v395 = 4095;
          else
            v395 = *(_DWORD *)(v356 + 212);
          v323 = v938;
          v396 = v938 + 4;
          v722 = *(_DWORD *)(v356 + 204);
          v726 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v938) >> -(char)*(_DWORD *)(v356 + 200);
          v730 = *(_QWORD *)(v356 + 48);
          v896 = *(_DWORD *)(v730 + 4 * v726);
          v397 = *(_QWORD *)(v356 + 8);
          v398 = (_DWORD)v938 - v397;
          v399 = -1 << (*(_DWORD *)(v356 + 196) - 1);
          v400 = *(unsigned int *)(v356 + 24);
          v915 = *(_QWORD *)(v356 + 16);
          v838 = v397;
          v858 = (_QWORD *)(v397 + v400);
          v866 = (char *)(v915 + v400);
          v825 = ~v399;
          v401 = (_DWORD)v938 - v397 + v399 + 1;
          if (v398 < ~v399)
            v401 = 0;
          v806 = v401;
          v402 = 1 << *(_DWORD *)(v356 + 192);
          if (v398 - *(_DWORD *)(v356 + 28) > v402 && *(_DWORD *)(v356 + 32) == 0)
            v404 = v398 - v402;
          else
            v404 = *(_DWORD *)(v356 + 28);
          if (v404 <= 1)
            v405 = 1;
          else
            v405 = v404;
          v850 = v405;
          v814 = *(_QWORD *)(v356 + 64);
          v889 = (unsigned int *)(v814 + 8 * (v398 & ~v399));
          v874 = *(unsigned int *)(v356 + 24);
          v882 = v889 + 1;
          v734 = v398 + 9;
          v968 = 0;
          v406 = v945;
          if ((_DWORD)v945)
            v407 = 4;
          else
            v407 = 3;
          v408 = v398 - v400;
          v409 = v398 - v404;
          v410 = v945;
          v411 = v945 << 63 >> 63;
          v947 = (v958 - 1);
          v789 = v395;
          v779 = v398;
          v767 = v404;
          v759 = v407;
          v751 = v398 - v400;
          v744 = v398 - v404;
          v740 = v406 << 63 >> 63;
          while (1)
          {
            if (v410 == 3)
            {
              v412 = *v953 - 1;
              v413 = v398 - v412;
              v414 = *v953 - 2;
              if (v414 < v408)
                goto LABEL_686;
            }
            else
            {
              v412 = v953[v410];
              v413 = v398 - v412;
              v414 = v412 - 1;
              if (v412 - 1 < v408)
              {
LABEL_686:
                if (v413 < v404 || *(_DWORD *)v323 != *(_DWORD *)&v323[-v412])
                  goto LABEL_674;
                v422 = (_QWORD *)((char *)v396 - v412);
                if (v960 > (unint64_t)v396)
                {
                  v423 = v938 + 4;
                  v424 = *v396 ^ *v422;
                  if (v424)
                  {
                    v419 = (__clz(__rbit64(v424)) >> 3) + 4;
                    v420 = v419;
                    if (v947 < v419)
                      goto LABEL_707;
                    goto LABEL_674;
                  }
                  do
                  {
                    ++v422;
                    if ((unint64_t)++v423 >= v960)
                      goto LABEL_699;
                    v425 = *v423 ^ *v422;
                  }
                  while (!v425);
                  v423 = (_QWORD *)((char *)v423 + (__clz(__rbit64(v425)) >> 3));
                  goto LABEL_706;
                }
                v423 = v938 + 4;
LABEL_699:
                if ((unint64_t)v423 >= v940)
                {
                  if ((unint64_t)v423 >= v939)
                    goto LABEL_703;
                }
                else
                {
                  if (*(_DWORD *)v422 == *(_DWORD *)v423)
                  {
                    v423 = (_QWORD *)((char *)v423 + 4);
                    v422 = (_QWORD *)((char *)v422 + 4);
                  }
                  if ((unint64_t)v423 >= v939)
                  {
LABEL_703:
                    if ((unint64_t)v423 < v18)
                      goto LABEL_704;
                    goto LABEL_706;
                  }
                }
                if (*(unsigned __int16 *)v422 == *(unsigned __int16 *)v423)
                {
                  v423 = (_QWORD *)((char *)v423 + 2);
                  v422 = (_QWORD *)((char *)v422 + 2);
                }
                if ((unint64_t)v423 < v18)
                {
LABEL_704:
                  if (*(unsigned __int8 *)v422 == *(unsigned __int8 *)v423)
                    LODWORD(v423) = (_DWORD)v423 + 1;
                }
LABEL_706:
                v419 = (_DWORD)v423 - (_DWORD)v938;
                v420 = v419;
                if (v947 < v419)
                  goto LABEL_707;
                goto LABEL_674;
              }
            }
            if (v414 < v409 && v400 + ~v413 >= 3)
            {
              v416 = v915 + v413;
              if (*(_DWORD *)v323 == *(_DWORD *)v416)
              {
                v417 = v358;
                v418 = ZSTD_count_2segments(v396, (char *)(v416 + 4), v18, v866, v858);
                LODWORD(v411) = v740;
                v409 = v744;
                v408 = v751;
                v407 = v759;
                v404 = v767;
                v395 = v789;
                v400 = v874;
                v358 = v417;
                v323 = v938;
                v18 = (unint64_t)v959;
                v419 = v418 + 4;
                v398 = v779;
                v420 = v419;
                if (v947 < v419)
                {
LABEL_707:
                  v426 = &v962[2 * v358];
                  *v426 = v410 + v411;
                  v426[1] = v419;
                  v358 = (v358 + 1);
                  if (v419 > v395)
                    goto LABEL_1041;
                  v947 = v420;
                  if (&v323[v420] == (unsigned __int8 *)v18)
                    goto LABEL_1041;
                }
              }
            }
LABEL_674:
            if (++v410 >= v407)
            {
              *(_DWORD *)(v730 + 4 * v726) = v398;
              v427 = v896;
              if (v896 < v850)
              {
                v428 = v734;
                goto LABEL_717;
              }
              v504 = 0;
              v505 = 0;
              v506 = ~(-1 << v722);
              v762 = v398 + 2;
              v754 = (char *)v737 + v322;
              v747 = v838 + 8;
              v428 = v734;
              while (1)
              {
                v954 = v506;
                v507 = v505 >= v504 ? v504 : v505;
                v508 = v427;
                v509 = &v323[v507];
                if (v507 + v427 >= v400)
                  break;
                v782 = v915 + v427;
                v792 = v504;
                v510 = v505;
                v770 = v507;
                v898 = v427;
                v511 = v358;
                v512 = ZSTD_count_2segments(v509, (char *)(v782 + v507), v18, v866, v858);
                v505 = v510;
                v400 = v874;
                v358 = v511;
                v427 = v898;
                v513 = v512 + v770;
                v514 = v782;
                v504 = v792;
                if (v512 + v770 + v508 >= v874)
                  v514 = v838 + v508;
                if (v513 > v947)
                  goto LABEL_854;
LABEL_875:
                v18 = (unint64_t)v959;
                v323 = v938;
LABEL_876:
                v519 = (unsigned int *)(v814 + 8 * (v427 & v825));
                if (*(unsigned __int8 *)(v514 + v513) >= v323[v513])
                {
                  *v882 = v427;
                  if (v427 <= v806)
                  {
                    v882 = (unsigned int *)&v968;
                    goto LABEL_717;
                  }
                  v504 = v513;
                  v882 = (unsigned int *)(v814 + 8 * (v427 & v825));
                  v506 = v954 - 1;
                  if (!v954)
                    goto LABEL_717;
                }
                else
                {
                  *v889 = v427;
                  if (v427 <= v806)
                  {
                    v889 = (unsigned int *)&v968;
                    goto LABEL_717;
                  }
                  ++v519;
                  v505 = v513;
                  v889 = v519;
                  v506 = v954 - 1;
                  if (!v954)
                    goto LABEL_717;
                }
                v427 = *v519;
                if (*v519 < v850)
                {
LABEL_717:
                  *v882 = 0;
                  *v889 = 0;
                  v429 = v428 - 8;
LABEL_1040:
                  *(_DWORD *)(v929 + 36) = v429;
                  goto LABEL_1041;
                }
              }
              v514 = v838 + v427;
              v516 = (_QWORD *)(v514 + v507);
              if (v960 <= (unint64_t)v509)
              {
                v518 = (char *)&v323[v507];
                if ((unint64_t)v509 >= v940)
                  goto LABEL_866;
              }
              else
              {
                v517 = *(_QWORD *)v509 ^ *v516;
                if (v517)
                {
                  v513 = (__clz(__rbit64(v517)) >> 3) + v507;
                  if (v513 <= v947)
                    goto LABEL_875;
                  goto LABEL_854;
                }
                v520 = 0;
                v521 = &v754[v507];
                while (1)
                {
                  v522 = &v521[v520];
                  if ((unint64_t)&v521[v520] >= v960)
                    break;
                  v523 = *(_QWORD *)(v747 + v507 + v427 + v520);
                  v520 += 8;
                  v524 = *(_QWORD *)v522 ^ v523;
                  if (v524)
                  {
                    v513 = v520 + (__clz(__rbit64(v524)) >> 3) + v507;
                    if (v513 <= v947)
                      goto LABEL_875;
LABEL_854:
                    if (v513 > v428 - v427)
                      v428 = v427 + v513;
                    v515 = &v962[2 * v358];
                    *v515 = v762 - v427;
                    v515[1] = v513;
                    v358 = (v358 + 1);
                    v18 = (unint64_t)v959;
                    v323 = v938;
                    if (v513 > 0x1000)
                      goto LABEL_717;
                    v947 = v513;
                    if (&v938[v513] == v959)
                      goto LABEL_717;
                    goto LABEL_876;
                  }
                }
                v518 = &v754[v507 + v520];
                v516 = (_QWORD *)(v747 + v507 + v427 + v520);
                if ((unint64_t)v518 >= v940)
                {
LABEL_866:
                  if ((unint64_t)v518 >= v939)
                  {
                    if ((unint64_t)v518 >= v18)
                      goto LABEL_874;
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v516 == *(unsigned __int16 *)v518)
                    {
                      v518 += 2;
                      v516 = (_QWORD *)((char *)v516 + 2);
                    }
                    if ((unint64_t)v518 >= v18)
                    {
LABEL_874:
                      v513 = v518 - (char *)v323;
                      if (v513 <= v947)
                        goto LABEL_875;
                      goto LABEL_854;
                    }
                  }
                  if (*(unsigned __int8 *)v516 == *v518)
                    ++v518;
                  goto LABEL_874;
                }
              }
              if (*(_DWORD *)v516 == *(_DWORD *)v518)
              {
                v518 += 4;
                v516 = (_QWORD *)((char *)v516 + 4);
              }
              goto LABEL_866;
            }
          }
        }
        v323 = v938;
        if (v359 == 5)
        {
          v358 = 0;
          if (*(_DWORD *)(v356 + 212) >= 0xFFFu)
            v430 = 4095;
          else
            v430 = *(_DWORD *)(v356 + 212);
          v431 = v938 + 4;
          v723 = *(_DWORD *)(v356 + 204);
          v727 = (0xCF1BBCDCBB000000 * *(_QWORD *)v938) >> -(char)*(_DWORD *)(v356 + 200);
          v731 = *(_QWORD *)(v356 + 48);
          v735 = *(_DWORD *)(v731 + 4 * v727);
          v432 = *(_QWORD *)(v356 + 8);
          v433 = (_DWORD)v938 - v432;
          v434 = -1 << (*(_DWORD *)(v356 + 196) - 1);
          v435 = *(unsigned int *)(v356 + 24);
          v916 = *(_QWORD *)(v356 + 16);
          v839 = v432;
          v859 = (_QWORD *)(v432 + v435);
          v867 = (char *)(v916 + v435);
          v826 = ~v434;
          v436 = (_DWORD)v938 - v432 + v434 + 1;
          if (v433 < ~v434)
            v436 = 0;
          v807 = v436;
          v437 = 1 << *(_DWORD *)(v356 + 192);
          if (v433 - *(_DWORD *)(v356 + 28) > v437 && *(_DWORD *)(v356 + 32) == 0)
            v439 = v433 - v437;
          else
            v439 = *(_DWORD *)(v356 + 28);
          if (v439 <= 1)
            v440 = 1;
          else
            v440 = v439;
          v851 = v440;
          v815 = *(_QWORD *)(v356 + 64);
          v890 = (unsigned int *)(v815 + 8 * (v433 & ~v434));
          v875 = *(unsigned int *)(v356 + 24);
          v883 = v890 + 1;
          v897 = v433 + 9;
          v968 = 0;
          v441 = v945;
          if ((_DWORD)v945)
            v442 = 4;
          else
            v442 = 3;
          v443 = v433 - v435;
          v444 = v433 - v439;
          v445 = v945;
          v446 = v945 << 63 >> 63;
          v948 = (v958 - 1);
          v790 = v430;
          v780 = v433;
          v768 = v439;
          v760 = v442;
          v752 = v433 - v435;
          v745 = v433 - v439;
          v741 = v441 << 63 >> 63;
          while (1)
          {
            if (v445 == 3)
            {
              v447 = *v953 - 1;
              v448 = v433 - v447;
              v449 = *v953 - 2;
              if (v449 < v443)
                goto LABEL_748;
            }
            else
            {
              v447 = v953[v445];
              v448 = v433 - v447;
              v449 = v447 - 1;
              if (v447 - 1 < v443)
              {
LABEL_748:
                if (v448 < v439 || *(_DWORD *)v323 != *(_DWORD *)&v323[-v447])
                  goto LABEL_736;
                v457 = (_QWORD *)((char *)v431 - v447);
                if (v960 > (unint64_t)v431)
                {
                  v458 = v938 + 4;
                  v459 = *v431 ^ *v457;
                  if (v459)
                  {
                    v454 = (__clz(__rbit64(v459)) >> 3) + 4;
                    v455 = v454;
                    if (v948 < v454)
                      goto LABEL_769;
                    goto LABEL_736;
                  }
                  do
                  {
                    ++v457;
                    if ((unint64_t)++v458 >= v960)
                      goto LABEL_761;
                    v460 = *v458 ^ *v457;
                  }
                  while (!v460);
                  v458 = (_QWORD *)((char *)v458 + (__clz(__rbit64(v460)) >> 3));
                  goto LABEL_768;
                }
                v458 = v938 + 4;
LABEL_761:
                if ((unint64_t)v458 >= v940)
                {
                  if ((unint64_t)v458 >= v939)
                    goto LABEL_765;
                }
                else
                {
                  if (*(_DWORD *)v457 == *(_DWORD *)v458)
                  {
                    v458 = (_QWORD *)((char *)v458 + 4);
                    v457 = (_QWORD *)((char *)v457 + 4);
                  }
                  if ((unint64_t)v458 >= v939)
                  {
LABEL_765:
                    if ((unint64_t)v458 < v18)
                      goto LABEL_766;
                    goto LABEL_768;
                  }
                }
                if (*(unsigned __int16 *)v457 == *(unsigned __int16 *)v458)
                {
                  v458 = (_QWORD *)((char *)v458 + 2);
                  v457 = (_QWORD *)((char *)v457 + 2);
                }
                if ((unint64_t)v458 < v18)
                {
LABEL_766:
                  if (*(unsigned __int8 *)v457 == *(unsigned __int8 *)v458)
                    LODWORD(v458) = (_DWORD)v458 + 1;
                }
LABEL_768:
                v454 = (_DWORD)v458 - (_DWORD)v938;
                v455 = v454;
                if (v948 < v454)
                  goto LABEL_769;
                goto LABEL_736;
              }
            }
            if (v449 < v444 && v435 + ~v448 >= 3)
            {
              v451 = v916 + v448;
              if (*(_DWORD *)v323 == *(_DWORD *)v451)
              {
                v452 = v358;
                v453 = ZSTD_count_2segments(v431, (char *)(v451 + 4), v18, v867, v859);
                LODWORD(v446) = v741;
                v444 = v745;
                v443 = v752;
                v442 = v760;
                v439 = v768;
                v430 = v790;
                v435 = v875;
                v358 = v452;
                v323 = v938;
                v18 = (unint64_t)v959;
                v454 = v453 + 4;
                v433 = v780;
                v455 = v454;
                if (v948 < v454)
                {
LABEL_769:
                  v461 = &v962[2 * v358];
                  *v461 = v445 + v446;
                  v461[1] = v454;
                  v358 = (v358 + 1);
                  if (v454 > v430)
                    goto LABEL_1041;
                  v948 = v455;
                  if (&v323[v455] == (unsigned __int8 *)v18)
                    goto LABEL_1041;
                }
              }
            }
LABEL_736:
            if (++v445 >= v442)
            {
              *(_DWORD *)(v731 + 4 * v727) = v433;
              v525 = v735;
              if (v735 < v851)
                goto LABEL_1039;
              v526 = 0;
              v527 = 0;
              v528 = ~(-1 << v723);
              v763 = v433 + 2;
              v755 = (char *)v737 + v322;
              v748 = v839 + 8;
              while (1)
              {
                v955 = v528;
                if (v527 >= v526)
                  v529 = v526;
                else
                  v529 = v527;
                v530 = &v323[v529];
                if (v529 + v525 < v435)
                {
                  v793 = v527;
                  v771 = v529;
                  v531 = v358;
                  v532 = v526;
                  v533 = ZSTD_count_2segments(v530, (char *)(v916 + v525 + v529), v18, v867, v859);
                  v526 = v532;
                  v435 = v875;
                  v358 = v531;
                  v534 = v533 + v771;
                  v535 = v916 + v525;
                  v527 = v793;
                  if (v533 + v771 + v525 >= v875)
                    v535 = v839 + v525;
                  if (v534 > v948)
                    goto LABEL_900;
LABEL_921:
                  v18 = (unint64_t)v959;
                  v323 = v938;
                  goto LABEL_922;
                }
                v535 = v839 + v525;
                v538 = (_QWORD *)(v535 + v529);
                if (v960 <= (unint64_t)v530)
                  break;
                v539 = *(_QWORD *)v530 ^ *v538;
                if (v539)
                {
                  v534 = (__clz(__rbit64(v539)) >> 3) + v529;
                  if (v534 <= v948)
                    goto LABEL_921;
                  goto LABEL_900;
                }
                v542 = 0;
                v543 = &v755[v529];
                do
                {
                  v544 = &v543[v542];
                  if ((unint64_t)&v543[v542] >= v960)
                  {
                    v540 = &v755[v529 + v542];
                    v538 = (_QWORD *)(v748 + v529 + v525 + v542);
                    if ((unint64_t)v540 >= v940)
                      goto LABEL_912;
                    goto LABEL_910;
                  }
                  v545 = *(_QWORD *)(v748 + v529 + v525 + v542);
                  v542 += 8;
                  v546 = *(_QWORD *)v544 ^ v545;
                }
                while (!v546);
                v534 = v542 + (__clz(__rbit64(v546)) >> 3) + v529;
                if (v534 <= v948)
                  goto LABEL_921;
LABEL_900:
                v536 = v897;
                if (v534 > v897 - v525)
                  v536 = v525 + v534;
                v897 = v536;
                v537 = &v962[2 * v358];
                *v537 = v763 - v525;
                v537[1] = v534;
                v358 = (v358 + 1);
                v18 = (unint64_t)v959;
                v323 = v938;
                if (v534 > 0x1000)
                  goto LABEL_1039;
                v948 = v534;
                if (&v938[v534] == v959)
                  goto LABEL_1039;
LABEL_922:
                v541 = (unsigned int *)(v815 + 8 * (v525 & v826));
                if (*(unsigned __int8 *)(v535 + v534) >= v323[v534])
                {
                  *v883 = v525;
                  if (v525 <= v807)
                  {
LABEL_1038:
                    v883 = (unsigned int *)&v968;
                    goto LABEL_1039;
                  }
                  v526 = v534;
                  v883 = (unsigned int *)(v815 + 8 * (v525 & v826));
                  v528 = v955 - 1;
                  if (!v955)
                    goto LABEL_1039;
                }
                else
                {
                  *v890 = v525;
                  if (v525 <= v807)
                    goto LABEL_1037;
                  ++v541;
                  v527 = v534;
                  v890 = v541;
                  v528 = v955 - 1;
                  if (!v955)
                    goto LABEL_1039;
                }
                v525 = *v541;
                if (*v541 < v851)
                  goto LABEL_1039;
              }
              v540 = (char *)&v323[v529];
              if ((unint64_t)v530 >= v940)
                goto LABEL_912;
LABEL_910:
              if (*(_DWORD *)v538 == *(_DWORD *)v540)
              {
                v540 += 4;
                v538 = (_QWORD *)((char *)v538 + 4);
              }
LABEL_912:
              if ((unint64_t)v540 >= v939)
              {
                if ((unint64_t)v540 >= v18)
                  goto LABEL_920;
              }
              else
              {
                if (*(unsigned __int16 *)v538 == *(unsigned __int16 *)v540)
                {
                  v540 += 2;
                  v538 = (_QWORD *)((char *)v538 + 2);
                }
                if ((unint64_t)v540 >= v18)
                {
LABEL_920:
                  v534 = v540 - (char *)v323;
                  if (v534 <= v948)
                    goto LABEL_921;
                  goto LABEL_900;
                }
              }
              if (*(unsigned __int8 *)v538 == *v540)
                ++v540;
              goto LABEL_920;
            }
          }
        }
        if (v359 != 3)
        {
          v358 = 0;
          if (*(_DWORD *)(v356 + 212) >= 0xFFFu)
            v462 = 4095;
          else
            v462 = *(_DWORD *)(v356 + 212);
          v463 = v938 + 4;
          v724 = *(_DWORD *)(v356 + 204);
          v728 = (-1640531535 * *(_DWORD *)v938) >> -(char)*(_DWORD *)(v356 + 200);
          v732 = *(_QWORD *)(v356 + 48);
          v736 = *(_DWORD *)(v732 + 4 * v728);
          v464 = *(_QWORD *)(v356 + 8);
          v465 = (_DWORD)v938 - v464;
          v466 = -1 << (*(_DWORD *)(v356 + 196) - 1);
          v467 = *(unsigned int *)(v356 + 24);
          v917 = *(_QWORD *)(v356 + 16);
          v852 = v464;
          v868 = (_QWORD *)(v464 + v467);
          v876 = (char *)(v917 + v467);
          v827 = ~v466;
          v468 = (_DWORD)v938 - v464 + v466 + 1;
          if (v465 < ~v466)
            v468 = 0;
          v808 = v468;
          v469 = 1 << *(_DWORD *)(v356 + 192);
          if (v465 - *(_DWORD *)(v356 + 28) > v469 && *(_DWORD *)(v356 + 32) == 0)
            v471 = v465 - v469;
          else
            v471 = *(_DWORD *)(v356 + 28);
          if (v471 <= 1)
            v472 = 1;
          else
            v472 = v471;
          v860 = v472;
          v816 = *(_QWORD *)(v356 + 64);
          v890 = (unsigned int *)(v816 + 8 * (v465 & ~v466));
          v883 = v890 + 1;
          v897 = v465 + 9;
          v968 = 0;
          v473 = v945;
          if ((_DWORD)v945)
            v474 = 4;
          else
            v474 = 3;
          v475 = v465 - v467;
          v476 = v465 - v471;
          v477 = v945;
          v478 = v945 << 63 >> 63;
          v479 = (v958 - 1);
          v949 = v467;
          v791 = v462;
          v781 = v465;
          v769 = v471;
          v761 = v474;
          v753 = v465 - v467;
          v746 = v465 - v471;
          v742 = v473 << 63 >> 63;
          while (1)
          {
            if (v477 == 3)
            {
              v480 = *v953 - 1;
              v481 = v465 - v480;
              v482 = *v953 - 2;
              if (v482 < v475)
                goto LABEL_807;
            }
            else
            {
              v480 = v953[v477];
              v481 = v465 - v480;
              v482 = v480 - 1;
              if (v480 - 1 < v475)
              {
LABEL_807:
                if (v481 < v471 || *(_DWORD *)v323 != *(_DWORD *)&v323[-v480])
                  goto LABEL_795;
                v490 = (_QWORD *)((char *)v463 - v480);
                if (v960 > (unint64_t)v463)
                {
                  v491 = v938 + 4;
                  v492 = *v463 ^ *v490;
                  if (v492)
                  {
                    v487 = (__clz(__rbit64(v492)) >> 3) + 4;
                    v488 = v487;
                    if (v479 < v487)
                      goto LABEL_828;
                    goto LABEL_795;
                  }
                  do
                  {
                    ++v490;
                    if ((unint64_t)++v491 >= v960)
                      goto LABEL_820;
                    v493 = *v491 ^ *v490;
                  }
                  while (!v493);
                  v491 = (_QWORD *)((char *)v491 + (__clz(__rbit64(v493)) >> 3));
                  goto LABEL_827;
                }
                v491 = v938 + 4;
LABEL_820:
                if ((unint64_t)v491 >= v940)
                {
                  if ((unint64_t)v491 >= v939)
                    goto LABEL_824;
                }
                else
                {
                  if (*(_DWORD *)v490 == *(_DWORD *)v491)
                  {
                    v491 = (_QWORD *)((char *)v491 + 4);
                    v490 = (_QWORD *)((char *)v490 + 4);
                  }
                  if ((unint64_t)v491 >= v939)
                  {
LABEL_824:
                    if ((unint64_t)v491 < v18)
                      goto LABEL_825;
                    goto LABEL_827;
                  }
                }
                if (*(unsigned __int16 *)v490 == *(unsigned __int16 *)v491)
                {
                  v491 = (_QWORD *)((char *)v491 + 2);
                  v490 = (_QWORD *)((char *)v490 + 2);
                }
                if ((unint64_t)v491 < v18)
                {
LABEL_825:
                  if (*(unsigned __int8 *)v490 == *(unsigned __int8 *)v491)
                    LODWORD(v491) = (_DWORD)v491 + 1;
                }
LABEL_827:
                v487 = (_DWORD)v491 - (_DWORD)v938;
                v488 = v487;
                if (v479 < v487)
                  goto LABEL_828;
                goto LABEL_795;
              }
            }
            if (v482 < v476 && v467 + ~v481 >= 3)
            {
              v484 = v917 + v481;
              if (*(_DWORD *)v323 == *(_DWORD *)v484)
              {
                v485 = v358;
                v840 = v479;
                v486 = ZSTD_count_2segments(v463, (char *)(v484 + 4), v18, v876, v868);
                LODWORD(v478) = v742;
                v476 = v746;
                v475 = v753;
                v474 = v761;
                v471 = v769;
                v465 = v781;
                v462 = v791;
                v479 = v840;
                v467 = v949;
                v358 = v485;
                v323 = v938;
                v18 = (unint64_t)v959;
                v487 = v486 + 4;
                v488 = (v486 + 4);
                if (v840 < v488)
                {
LABEL_828:
                  v494 = &v962[2 * v358];
                  *v494 = v477 + v478;
                  v494[1] = v487;
                  v358 = (v358 + 1);
                  if (v487 > v462)
                    goto LABEL_1041;
                  v479 = v488;
                  if (&v323[v488] == (unsigned __int8 *)v18)
                    goto LABEL_1041;
                }
              }
            }
LABEL_795:
            if (++v477 >= v474)
            {
              *(_DWORD *)(v732 + 4 * v728) = v465;
              v547 = v736;
              if (v736 < v860)
                goto LABEL_1039;
              v548 = 0;
              v549 = 0;
              v550 = ~(-1 << v724);
              v764 = v465 + 2;
              v756 = (char *)v737 + v322;
              v749 = v852 + 8;
              while (1)
              {
                v956 = v550;
                if (v549 >= v548)
                  v551 = v548;
                else
                  v551 = v549;
                v552 = &v323[v551];
                if (v551 + v547 < v467)
                {
                  v794 = v549;
                  v841 = v548;
                  v772 = v551;
                  v553 = v358;
                  v554 = v479;
                  v555 = ZSTD_count_2segments(v552, (char *)(v917 + v547 + v551), v18, v876, v868);
                  v548 = v841;
                  v479 = v554;
                  v467 = v949;
                  v358 = v553;
                  v556 = v555 + v772;
                  v557 = v917 + v547;
                  v549 = v794;
                  if (v555 + v772 + v547 >= v949)
                    v557 = v852 + v547;
                  if (v556 > v554)
                    goto LABEL_946;
LABEL_967:
                  v18 = (unint64_t)v959;
                  v323 = v938;
                  goto LABEL_968;
                }
                v557 = v852 + v547;
                v560 = (_QWORD *)(v557 + v551);
                if (v960 <= (unint64_t)v552)
                  break;
                v561 = *(_QWORD *)v552 ^ *v560;
                if (v561)
                {
                  v556 = (__clz(__rbit64(v561)) >> 3) + v551;
                  if (v556 <= v479)
                    goto LABEL_967;
                  goto LABEL_946;
                }
                v564 = 0;
                v565 = &v756[v551];
                do
                {
                  v566 = &v565[v564];
                  if ((unint64_t)&v565[v564] >= v960)
                  {
                    v562 = &v756[v551 + v564];
                    v560 = (_QWORD *)(v749 + v551 + v547 + v564);
                    if ((unint64_t)v562 >= v940)
                      goto LABEL_958;
                    goto LABEL_956;
                  }
                  v567 = *(_QWORD *)(v749 + v551 + v547 + v564);
                  v564 += 8;
                  v568 = *(_QWORD *)v566 ^ v567;
                }
                while (!v568);
                v556 = v564 + (__clz(__rbit64(v568)) >> 3) + v551;
                if (v556 <= v479)
                  goto LABEL_967;
LABEL_946:
                v558 = v897;
                if (v556 > v897 - v547)
                  v558 = v547 + v556;
                v897 = v558;
                v559 = &v962[2 * v358];
                *v559 = v764 - v547;
                v559[1] = v556;
                v358 = (v358 + 1);
                v18 = (unint64_t)v959;
                v323 = v938;
                if (v556 > 0x1000 || (v479 = v556, &v938[v556] == v959))
                {
LABEL_1039:
                  *v883 = 0;
                  *v890 = 0;
                  v429 = v897 - 8;
                  goto LABEL_1040;
                }
LABEL_968:
                v563 = (unsigned int *)(v816 + 8 * (v547 & v827));
                if (*(unsigned __int8 *)(v557 + v556) < v323[v556])
                {
                  *v890 = v547;
                  if (v547 > v808)
                  {
                    ++v563;
                    v549 = v556;
                    v890 = v563;
                    v550 = v956 - 1;
                    if (!v956)
                      goto LABEL_1039;
                    goto LABEL_938;
                  }
LABEL_1037:
                  v890 = (unsigned int *)&v968;
                  goto LABEL_1039;
                }
                *v883 = v547;
                if (v547 <= v808)
                  goto LABEL_1038;
                v548 = v556;
                v883 = (unsigned int *)(v816 + 8 * (v547 & v827));
                v550 = v956 - 1;
                if (!v956)
                  goto LABEL_1039;
LABEL_938:
                v547 = *v563;
                if (*v563 < v860)
                  goto LABEL_1039;
              }
              v562 = (char *)&v323[v551];
              if ((unint64_t)v552 >= v940)
                goto LABEL_958;
LABEL_956:
              if (*(_DWORD *)v560 == *(_DWORD *)v562)
              {
                v562 += 4;
                v560 = (_QWORD *)((char *)v560 + 4);
              }
LABEL_958:
              if ((unint64_t)v562 >= v939)
              {
                if ((unint64_t)v562 >= v18)
                  goto LABEL_966;
              }
              else
              {
                if (*(unsigned __int16 *)v560 == *(unsigned __int16 *)v562)
                {
                  v562 += 2;
                  v560 = (_QWORD *)((char *)v560 + 2);
                }
                if ((unint64_t)v562 >= v18)
                {
LABEL_966:
                  v556 = v562 - (char *)v323;
                  if (v556 <= v479)
                    goto LABEL_967;
                  goto LABEL_946;
                }
              }
              if (*(unsigned __int8 *)v560 == *v562)
                ++v562;
              goto LABEL_966;
            }
          }
        }
        v358 = 0;
        if (*(_DWORD *)(v356 + 212) >= 0xFFFu)
          v362 = 4095;
        else
          v362 = *(_DWORD *)(v356 + 212);
        v363 = *(_QWORD *)(v356 + 8);
        v364 = *(_QWORD *)(v356 + 16);
        v365 = (_DWORD)v938 - v363;
        v366 = v938 + 3;
        v721 = *(_DWORD *)(v356 + 204);
        v725 = (-1640531535 * *(_DWORD *)v938) >> -(char)*(_DWORD *)(v356 + 200);
        v729 = *(_QWORD *)(v356 + 48);
        v733 = *(_DWORD *)(v729 + 4 * v725);
        v367 = -1 << (*(_DWORD *)(v356 + 196) - 1);
        v368 = *(unsigned int *)(v356 + 24);
        v849 = (char *)(v364 + v368);
        v914 = v363;
        v837 = (_QWORD *)(v363 + v368);
        v813 = ~v367;
        v369 = (_DWORD)v938 - v363 + v367 + 1;
        if ((int)v938 - (int)v363 < ~v367)
          v369 = 0;
        v788 = v369;
        v370 = 1 << *(_DWORD *)(v356 + 192);
        if (v365 - *(_DWORD *)(v356 + 28) > v370 && *(_DWORD *)(v356 + 32) == 0)
          v372 = v365 - v370;
        else
          v372 = *(_DWORD *)(v356 + 28);
        if (v372 <= 1)
          v373 = 1;
        else
          v373 = v372;
        v895 = v373;
        v805 = *(_QWORD *)(v356 + 64);
        v881 = (unsigned int *)(v805 + 8 * (v365 & ~v367));
        v865 = *(_QWORD *)(v356 + 16);
        v873 = v881 + 1;
        v888 = v365 + 9;
        v968 = 0;
        v374 = v945;
        if ((_DWORD)v945)
          v375 = 4;
        else
          v375 = 3;
        v376 = v365 - v368;
        v377 = v365 - v372;
        v378 = v945;
        v379 = v945 << 63 >> 63;
        v946 = (v958 - 1);
        v857 = v368;
        v778 = v365;
        v766 = v362;
        v758 = v375;
        v750 = v365 - v368;
        v743 = v365 - v372;
        v739 = v374 << 63 >> 63;
        while (2)
        {
          if (v378 == 3)
          {
            v380 = *v953 - 1;
            v381 = v365 - v380;
            v382 = *v953 - 2;
            if (v382 >= v376)
              goto LABEL_618;
LABEL_627:
            if (v381 < v372 || ((*(_DWORD *)&v323[-v380] ^ *(_DWORD *)v323) & 0xFFFFFF) != 0)
              goto LABEL_615;
            v390 = (_QWORD *)((char *)v366 - v380);
            if (v960 <= (unint64_t)v366)
            {
              v391 = v366;
            }
            else
            {
              v391 = v366;
              v392 = *v366 ^ *v390;
              if (v392)
              {
                v387 = (__clz(__rbit64(v392)) >> 3) + 3;
                v388 = v387;
                if (v946 >= v387)
                  goto LABEL_615;
                goto LABEL_648;
              }
              while (1)
              {
                ++v390;
                if ((unint64_t)++v391 >= v960)
                  break;
                v393 = *v391 ^ *v390;
                if (v393)
                {
                  v391 = (_QWORD *)((char *)v391 + (__clz(__rbit64(v393)) >> 3));
                  goto LABEL_647;
                }
              }
            }
            if ((unint64_t)v391 >= v940)
            {
              if ((unint64_t)v391 >= v939)
                goto LABEL_644;
            }
            else
            {
              if (*(_DWORD *)v390 == *(_DWORD *)v391)
              {
                v391 = (_QWORD *)((char *)v391 + 4);
                v390 = (_QWORD *)((char *)v390 + 4);
              }
              if ((unint64_t)v391 >= v939)
              {
LABEL_644:
                if ((unint64_t)v391 < v18)
                  goto LABEL_645;
                goto LABEL_647;
              }
            }
            if (*(unsigned __int16 *)v390 == *(unsigned __int16 *)v391)
            {
              v391 = (_QWORD *)((char *)v391 + 2);
              v390 = (_QWORD *)((char *)v390 + 2);
            }
            if ((unint64_t)v391 < v18)
            {
LABEL_645:
              if (*(unsigned __int8 *)v390 == *(unsigned __int8 *)v391)
                LODWORD(v391) = (_DWORD)v391 + 1;
            }
LABEL_647:
            v387 = (_DWORD)v391 - (_DWORD)v366 + 3;
            v388 = v387;
            if (v946 >= v387)
              goto LABEL_615;
            goto LABEL_648;
          }
          v380 = v953[v378];
          v381 = v365 - v380;
          v382 = v380 - 1;
          if (v380 - 1 < v376)
            goto LABEL_627;
LABEL_618:
          if (v382 < v377 && v368 + ~v381 >= 3)
          {
            v384 = v364 + v381;
            if (((*(_DWORD *)v384 ^ *(_DWORD *)v323) & 0xFFFFFF) == 0)
            {
              v385 = v358;
              v386 = ZSTD_count_2segments(v938 + 3, (char *)(v384 + 3), v18, v849, v837);
              LODWORD(v379) = v739;
              v377 = v743;
              v375 = v758;
              v362 = v766;
              v365 = v778;
              v368 = v857;
              v364 = v865;
              v358 = v385;
              v323 = v938;
              v18 = (unint64_t)v959;
              v387 = v386 + 3;
              v376 = v750;
              v366 = v938 + 3;
              v388 = v387;
              if (v946 < v387)
              {
LABEL_648:
                v394 = &v962[2 * v358];
                *v394 = v378 + v379;
                v394[1] = v387;
                v358 = (v358 + 1);
                if (v387 > v362)
                  goto LABEL_1041;
                v946 = v388;
                if (&v323[v388] == (unsigned __int8 *)v18)
                  goto LABEL_1041;
              }
            }
          }
LABEL_615:
          if (++v378 < v375)
            continue;
          break;
        }
        if (v946 > 2)
        {
          v495 = v929;
          v503 = v733;
          goto LABEL_983;
        }
        v495 = v929;
        v496 = *(_QWORD *)(v929 + 56);
        v497 = *(_DWORD *)v323;
        v498 = 32 - *(_DWORD *)(v929 + 40);
        if (v718 < v365)
        {
          v499 = v718;
          do
          {
            *(_DWORD *)(v496 + 4 * ((900185344 * *(_DWORD *)(v914 + v499)) >> v498)) = v499;
            ++v499;
          }
          while (v926 - (_DWORD)v914 != v499);
        }
        v500 = *(unsigned int *)(v496 + 4 * ((900185344 * v497) >> v498));
        v501 = v365 - v500;
        v502 = v500 >= v895 && (v365 - v500) >> 18 == 0;
        v503 = v733;
        if (!v502)
        {
          v718 = v365;
          goto LABEL_983;
        }
        if (v500 < v368)
        {
          v591 = v358;
          v592 = ZSTD_count_2segments(v323, (char *)(v364 + v500), v18, v849, v837);
          v362 = v766;
          v365 = v778;
          v503 = v733;
          v368 = v857;
          v364 = v865;
          v358 = v591;
          v323 = v938;
          v18 = (unint64_t)v959;
          v718 = v778;
          if (v592 >= 3)
            goto LABEL_1100;
          goto LABEL_983;
        }
        v633 = (_DWORD *)(v914 + v500);
        if (v960 <= (unint64_t)v323)
        {
          v635 = v323;
          if ((unint64_t)v323 < v940)
          {
LABEL_1089:
            if (*v633 == *(_DWORD *)v635)
            {
              v635 += 4;
              ++v633;
            }
          }
          goto LABEL_1091;
        }
        v634 = *(_QWORD *)v323 ^ *(_QWORD *)v633;
        if (!v634)
        {
          v637 = 0;
          v638 = (char *)v737 + v322;
          while (1)
          {
            v639 = &v638[v637];
            if ((unint64_t)&v638[v637] >= v960)
              break;
            v640 = *(_QWORD *)(v914 + v500 + 8 + v637);
            v637 += 8;
            v641 = *(_QWORD *)v639 ^ v640;
            if (v641)
            {
              v592 = v637 + (__clz(__rbit64(v641)) >> 3);
              v503 = v733;
              v718 = v365;
              if (v592 < 3)
                goto LABEL_983;
              goto LABEL_1100;
            }
          }
          v635 = (unsigned __int8 *)v737 + v322 + v637;
          v633 = (_DWORD *)(v914 + v500 + v637 + 8);
          v503 = v733;
          if ((unint64_t)v635 < v940)
            goto LABEL_1089;
LABEL_1091:
          if ((unint64_t)v635 >= v939)
          {
            if ((unint64_t)v635 >= v18)
              goto LABEL_1099;
          }
          else
          {
            if (*(unsigned __int16 *)v633 == *(unsigned __int16 *)v635)
            {
              v635 += 2;
              v633 = (_DWORD *)((char *)v633 + 2);
            }
            if ((unint64_t)v635 >= v18)
            {
LABEL_1099:
              v592 = v635 - v323;
              v718 = v365;
              if ((unint64_t)(v635 - v323) >= 3)
                goto LABEL_1100;
              goto LABEL_983;
            }
          }
          if (*(unsigned __int8 *)v633 == *v635)
            ++v635;
          goto LABEL_1099;
        }
        v592 = __clz(__rbit64(v634)) >> 3;
        v718 = v365;
        if (v592 >= 3)
        {
LABEL_1100:
          *v962 = v501 + 2;
          v962[1] = v592;
          if (v592 > v362 || &v323[v592] == (unsigned __int8 *)v18)
          {
            v569 = v365 + 1;
            LODWORD(v358) = 1;
            v718 = v365;
            goto LABEL_985;
          }
          v358 = 1;
          v718 = v365;
          v946 = v592;
        }
LABEL_983:
        *(_DWORD *)(v729 + 4 * v725) = v365;
        if (v503 < v895)
          goto LABEL_984;
        v570 = 0;
        v571 = 0;
        v572 = ~(-1 << v721);
        v773 = v365 + 2;
        v765 = (char *)v737 + v322;
        v757 = v914 + 8;
        while (2)
        {
          v957 = v572;
          if (v571 >= v570)
            v573 = v570;
          else
            v573 = v571;
          v574 = &v323[v573];
          if (v573 + v503 >= v368)
          {
            v579 = v914 + v503;
            v582 = (_DWORD *)(v579 + v573);
            if (v960 <= (unint64_t)v574)
            {
              v584 = (char *)&v323[v573];
              v495 = v929;
              if ((unint64_t)v574 < v940)
              {
LABEL_1006:
                if (*v582 == *(_DWORD *)v584)
                {
                  v584 += 4;
                  ++v582;
                }
              }
            }
            else
            {
              v583 = *(_QWORD *)v574 ^ *(_QWORD *)v582;
              if (v583)
              {
                v495 = v929;
                v578 = (__clz(__rbit64(v583)) >> 3) + v573;
                if (v578 <= v946)
                  goto LABEL_1017;
                goto LABEL_996;
              }
              v586 = 0;
              v587 = &v765[v573];
              while (1)
              {
                v588 = &v587[v586];
                if ((unint64_t)&v587[v586] >= v960)
                  break;
                v589 = *(_QWORD *)(v757 + v573 + v503 + v586);
                v586 += 8;
                v590 = *(_QWORD *)v588 ^ v589;
                if (v590)
                {
                  v495 = v929;
                  v578 = v586 + (__clz(__rbit64(v590)) >> 3) + v573;
                  if (v578 > v946)
                    goto LABEL_996;
                  goto LABEL_1017;
                }
              }
              v584 = &v765[v573 + v586];
              v582 = (_DWORD *)(v757 + v573 + v503 + v586);
              v495 = v929;
              if ((unint64_t)v584 < v940)
                goto LABEL_1006;
            }
            if ((unint64_t)v584 >= v939)
            {
              if ((unint64_t)v584 >= v18)
                goto LABEL_1016;
            }
            else
            {
              if (*(unsigned __int16 *)v582 == *(unsigned __int16 *)v584)
              {
                v584 += 2;
                v582 = (_DWORD *)((char *)v582 + 2);
              }
              if ((unint64_t)v584 >= v18)
              {
LABEL_1016:
                v578 = v584 - (char *)v323;
                if (v578 <= v946)
                  goto LABEL_1017;
LABEL_996:
                v580 = v888;
                if (v578 > v888 - v503)
                  v580 = v503 + v578;
                v888 = v580;
                v581 = &v962[2 * v358];
                *v581 = v773 - v503;
                v581[1] = v578;
                v358 = (v358 + 1);
                v18 = (unint64_t)v959;
                v323 = v938;
                if (v578 > 0x1000)
                  goto LABEL_984;
                v946 = v578;
                if (&v938[v578] == v959)
                  goto LABEL_984;
                goto LABEL_1018;
              }
            }
            if (*(unsigned __int8 *)v582 == *v584)
              ++v584;
            goto LABEL_1016;
          }
          v575 = v364 + v503;
          v828 = v570;
          v783 = v571;
          v576 = v358;
          v577 = ZSTD_count_2segments(v574, (char *)(v575 + v573), v18, v849, v837);
          v571 = v783;
          v570 = v828;
          v368 = v857;
          v364 = v865;
          v358 = v576;
          v578 = v577 + v573;
          if (v577 + v573 + v503 >= v857)
            v579 = v914 + v503;
          else
            v579 = v575;
          v495 = v929;
          if (v578 > v946)
            goto LABEL_996;
LABEL_1017:
          v18 = (unint64_t)v959;
          v323 = v938;
LABEL_1018:
          v585 = (unsigned int *)(v805 + 8 * (v503 & v813));
          if (*(unsigned __int8 *)(v579 + v578) < v323[v578])
          {
            *v881 = v503;
            if (v503 <= v788)
            {
              v881 = (unsigned int *)&v968;
              goto LABEL_984;
            }
            ++v585;
            v571 = v578;
            v881 = v585;
            v572 = v957 - 1;
            if (!v957)
              goto LABEL_984;
            goto LABEL_987;
          }
          *v873 = v503;
          if (v503 > v788)
          {
            v570 = v578;
            v873 = (unsigned int *)(v805 + 8 * (v503 & v813));
            v572 = v957 - 1;
            if (!v957)
              goto LABEL_984;
LABEL_987:
            v503 = *v585;
            if (*v585 < v895)
              goto LABEL_984;
            continue;
          }
          break;
        }
        v873 = (unsigned int *)&v968;
LABEL_984:
        *v873 = 0;
        *v881 = 0;
        v569 = v888 - 8;
LABEL_985:
        *(_DWORD *)(v495 + 36) = v569;
LABEL_1041:
        v964 = v358;
        ZSTD_optLdm_processMatchCandidate((uint64_t *)&v965, (uint64_t)v962, &v964, (_DWORD)v323 - (_DWORD)v927, v18 - (_DWORD)v323);
        v593 = v964;
        if (!v964)
        {
          v18 = (unint64_t)v959;
          v7 = v929;
          v20 = v961;
LABEL_1081:
          v315 = v950;
          v318 = v928;
          v316 = v926;
          v317 = v322 + 1;
          goto LABEL_549;
        }
        v594 = v964 - 1;
        v277 = v962[2 * v594 + 1];
        v20 = v961;
        if (v277 <= v900 && v277 + v322 <= 0xFFF)
        {
          v595 = 0;
          v596 = v905 + v910;
          v18 = (unint64_t)v959;
          v597 = v14 + 7;
          v7 = v929;
          while (1)
          {
            v598 = &v962[2 * v595];
            v599 = v958;
            if (v595)
              v599 = *(v598 - 1) + 1;
            v600 = v598[1];
            if (v600 >= v599)
              break;
LABEL_1045:
            ++v595;
            v20 = v961;
            if (v595 == v593)
              goto LABEL_1081;
          }
          v601 = *v598;
          v602 = __clz(v601 + 1) ^ 0x1F;
          if (*(_DWORD *)(v929 + 160) == 1)
          {
            v603 = 0;
            v604 = ((_DWORD)v602 << 8) + 4096;
            v605 = v322 + v600;
            v606 = v322 + v600;
            while (1)
            {
              v608 = v600 + v322;
              v609 = v596 + v604 + ((__clz(v600 - 2) << 8) ^ 0x1F00);
              if (v608 <= v314)
              {
                if (v609 >= (int)v14[7 * v608])
                  goto LABEL_1045;
                goto LABEL_1052;
              }
              v610 = v314;
              v611 = (v605 - v603) - (unint64_t)v314;
              if (v611 >= 2)
              {
                v314 = (v611 & 0xFFFFFFFFFFFFFFFELL) + v314;
                v612 = (v606 - v610) & 0xFFFFFFFFFFFFFFFELL;
                v613 = &v963[7 * v610];
                do
                {
                  *(v613 - 7) = 0x40000000;
                  *v613 = 0x40000000;
                  v613 += 14;
                  v612 -= 2;
                }
                while (v612);
                if (v611 == (v611 & 0xFFFFFFFFFFFFFFFELL))
                  goto LABEL_1052;
              }
              else
              {
                v314 = v314;
              }
              v614 = &v597[7 * v314];
              do
              {
                ++v314;
                *v614 = 0x40000000;
                v614 += 7;
              }
              while (v314 < v608);
LABEL_1052:
              v607 = (signed int *)&v14[7 * v608];
              v607[2] = v600;
              v607[3] = v22;
              *v607 = v609;
              v607[1] = v601;
              --v600;
              ++v603;
              --v606;
              if (v600 < v599)
                goto LABEL_1045;
            }
          }
          v615 = 0;
          if (v602 <= 0x13)
            v616 = 53;
          else
            v616 = ((_DWORD)v602 << 9) - 9675;
          v617 = *(_DWORD *)(v929 + 152);
          v618 = *(_QWORD *)(v929 + 96);
          v619 = *(_QWORD *)(v929 + 104);
          v620 = v616 + *(_DWORD *)(v929 + 156);
          v621 = v322 + v600;
          v622 = v322 + v600;
          while (2)
          {
            v624 = v600 - 3;
            if (v600 - 3 < 0x80)
              v625 = ZSTD_MLcode_ML_Code[v624];
            else
              v625 = 67 - __clz(v624);
            v626 = v600 + v322;
            v627 = v596
                 + v620
                 + ((__clz(*(_DWORD *)(v619 + 4 * v602) + 1) << 8) ^ 0xFFFFE0FF)
                 + v617
                 + ((ML_bits[v625] + (_DWORD)v602) << 8)
                 + ((__clz(*(_DWORD *)(v618 + 4 * v625) + 1) << 8) ^ 0xFFFFE0FF);
            if (v626 <= v314)
            {
              if (v627 >= (int)v14[7 * v626])
                goto LABEL_1045;
            }
            else
            {
              v628 = v314;
              v629 = (v621 - v615) - (unint64_t)v314;
              if (v629 < 2)
              {
                v314 = v314;
                goto LABEL_1077;
              }
              v314 = (v629 & 0xFFFFFFFFFFFFFFFELL) + v314;
              v630 = (v622 - v628) & 0xFFFFFFFFFFFFFFFELL;
              v631 = &v963[7 * v628];
              do
              {
                *(v631 - 7) = 0x40000000;
                *v631 = 0x40000000;
                v631 += 14;
                v630 -= 2;
              }
              while (v630);
              v597 = v14 + 7;
              if (v629 != (v629 & 0xFFFFFFFFFFFFFFFELL))
              {
LABEL_1077:
                v632 = &v597[7 * v314];
                do
                {
                  ++v314;
                  *v632 = 0x40000000;
                  v632 += 7;
                }
                while (v314 < v626);
              }
            }
            v623 = (signed int *)&v14[7 * v626];
            v623[2] = v600;
            v623[3] = v22;
            *v623 = v627;
            v623[1] = v601;
            --v600;
            ++v615;
            --v622;
            if (v600 < v599)
              goto LABEL_1045;
            continue;
          }
        }
        v18 = (unint64_t)v959;
        v7 = v929;
        if (*v799)
          v704 = 0;
        else
          v704 = v14[7 * v322 + 3];
        v8 = v899;
        v13 = (uint64_t)v962;
        v283 = v962[2 * v594];
        v707 = v322 - v704;
        if (v707 <= 0x1000)
          v282 = v707;
        else
          v282 = 0;
        v190 = (unint64_t)(v959 - 32);
        if (!v277)
        {
LABEL_1202:
          v708 = &v14[7 * v282];
          v709 = *((_QWORD *)v708 + 2);
          a3[2] = v708[6];
          *(_QWORD *)a3 = v709;
          goto LABEL_1132;
        }
LABEL_1118:
        v643 = &v14[7 * v282 + 4];
        if (v283 < 3)
        {
          if (v22)
            v648 = v283;
          else
            v648 = v283 + 1;
          if (v648)
          {
            if (v648 == 3)
            {
              v645 = *v643;
              v647 = v645 - 1;
            }
            else
            {
              v647 = v643[v648];
              v645 = *v643;
            }
            v659 = v648 > 1;
            v650 = 2;
            if (v659)
              v650 = 1;
            v644 = &v643[v650];
          }
          else
          {
            v649 = *(_QWORD *)v643;
            v644 = &v14[7 * v282 + 6];
            v647 = v649;
            v645 = HIDWORD(v649);
          }
        }
        else
        {
          v646 = *v643;
          v644 = &v14[7 * v282 + 5];
          v645 = v646;
          v647 = v283 - 2;
        }
        v651 = *v644;
        *(_QWORD *)a3 = v647 | (v645 << 32);
        a3[2] = v651;
LABEL_1132:
        v652 = v282 + 1;
        v653 = &v14[7 * v282 + 7];
        *v653 = v800;
        v653[1] = v283;
        v653[2] = v277;
        v653[3] = v22;
        *((_QWORD *)v653 + 2) = v969;
        v653[6] = v970;
        v654 = v282;
        if (!v282)
        {
          v660 = 1;
          v661 = v738;
          goto LABEL_1140;
        }
        do
        {
          v655 = &v14[7 * v654];
          v656 = v655[3] + v655[2];
          v657 = &v14[7 * v282];
          v658 = *(_OWORD *)v655;
          *(_OWORD *)(v657 + 3) = *(_OWORD *)(v655 + 3);
          *(_OWORD *)v657 = v658;
          --v282;
          v51 = v654 >= v656;
          v654 -= v656;
          v659 = v654 != 0 && v51;
          if (!v51)
            v654 = 0;
        }
        while (v659);
        v660 = v282 + 1;
        v661 = v738;
        if (v660 <= v652)
        {
          while (1)
          {
LABEL_1140:
            while (1)
            {
              v662 = v660;
              v664 = v14[7 * v660 + 2];
              v663 = v14[7 * v660 + 3];
              if (v664)
                break;
              v17 = &v20[v663];
              v660 = v662 + 1;
              if (v662 + 1 > v652)
                goto LABEL_1189;
            }
            v665 = v14[7 * v662 + 1];
            if (*(_DWORD *)(v7 + 176) != 2)
            {
              if ((_DWORD)v663)
              {
                v666 = *v8;
                v667 = v20;
                v668 = v663;
                do
                {
                  v669 = *v667++;
                  *(_DWORD *)&v666[4 * v669] += 2;
                  --v668;
                }
                while (v668);
              }
              *(_DWORD *)(v7 + 128) += 2 * v663;
            }
            if (v663 < 0x40)
              v670 = ZSTD_LLcode_LL_Code[v663];
            else
              v670 = 50 - __clz(v663);
            ++*(_DWORD *)(*(_QWORD *)(v7 + 88) + 4 * v670);
            ++*(_DWORD *)(v7 + 132);
            v671 = v665 + 1;
            v672 = __clz(v665 + 1);
            ++*(_DWORD *)(*(_QWORD *)(v7 + 104) + 4 * (v672 ^ 0x1F));
            ++*(_DWORD *)(v7 + 140);
            v673 = v664 - 3;
            if (v664 - 3 < 0x80)
              v674 = ZSTD_MLcode_ML_Code[v673];
            else
              v674 = 67 - __clz(v673);
            ++*(_DWORD *)(*(_QWORD *)(v7 + 96) + 4 * v674);
            ++*(_DWORD *)(v7 + 136);
            v675 = &v20[v663];
            v676 = *(char **)(v661 + 24);
            if ((unint64_t)&v20[v663] <= v190)
            {
              *(_OWORD *)v676 = *(_OWORD *)v20;
              v680 = *(_QWORD *)(v661 + 24);
              if (v663 <= 0x10)
              {
                *(_QWORD *)(v661 + 24) = v680 + v663;
                v691 = *(_QWORD *)(v661 + 8);
                *(_WORD *)(v691 + 4) = v663;
                *(_DWORD *)v691 = v671;
                if (v673 < 0x10000)
                  goto LABEL_1188;
                goto LABEL_1187;
              }
              v681 = (_OWORD *)(v680 + 16);
              v682 = v680 + v663;
              v677 = v20;
              v683 = (__int128 *)(v20 + 16);
              do
              {
                v684 = *v683++;
                *v681++ = v684;
              }
              while ((unint64_t)v681 < v682);
            }
            else
            {
              if ((unint64_t)v20 <= v190)
              {
                v679 = &v676[v190 - (_QWORD)v20];
                v685 = v20;
                v686 = *(char **)(v661 + 24);
                do
                {
                  v687 = *(_OWORD *)v685;
                  v685 += 16;
                  *(_OWORD *)v686 = v687;
                  v686 += 16;
                }
                while (v686 < v679);
                v677 = v20;
                v678 = (unsigned __int8 *)v190;
                if (v190 >= (unint64_t)v675)
                  goto LABEL_1184;
              }
              else
              {
                v677 = v20;
                v678 = v20;
                v679 = *(char **)(v661 + 24);
                if (v20 >= v675)
                  goto LABEL_1184;
              }
              if ((unint64_t)v677 <= v190)
                v688 = v190;
              else
                v688 = (unint64_t)v677;
              v689 = (unint64_t)&v677[v663 - v688];
              if (v689 < 8)
              {
                v690 = v678;
                goto LABEL_1183;
              }
              if ((unint64_t)(v676 - (char *)v677) < 0x20)
              {
                v690 = v678;
                goto LABEL_1183;
              }
              if (v689 >= 0x20)
              {
                v692 = v689 & 0xFFFFFFFFFFFFFFE0;
                v693 = (__int128 *)(v678 + 16);
                v694 = &v676[v688 - (_QWORD)v677 + 16];
                v695 = v689 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v696 = *v693;
                  *((_OWORD *)v694 - 1) = *(v693 - 1);
                  *(_OWORD *)v694 = v696;
                  v693 += 2;
                  v694 += 32;
                  v695 -= 32;
                }
                while (v695);
                if (v689 == v692)
                  goto LABEL_1184;
                if ((v689 & 0x18) == 0)
                {
                  v690 = &v678[v692];
                  v679 += v692;
                  do
                  {
LABEL_1183:
                    v701 = *v690++;
                    *v679++ = v701;
                  }
                  while (v690 < v675);
                  goto LABEL_1184;
                }
              }
              else
              {
                v692 = 0;
              }
              v679 += v689 & 0xFFFFFFFFFFFFFFF8;
              v690 = &v678[v689 & 0xFFFFFFFFFFFFFFF8];
              v697 = &v678[v692];
              v698 = &v676[v692 + v688 - (_QWORD)v677];
              v699 = v692 - (v689 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v700 = *(_QWORD *)v697;
                v697 += 8;
                *(_QWORD *)v698 = v700;
                v698 += 8;
                v699 += 8;
              }
              while (v699);
              if (v689 != (v689 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_1183;
            }
LABEL_1184:
            *(_QWORD *)(v661 + 24) += v663;
            v691 = *(_QWORD *)(v661 + 8);
            if (v663 >= 0x10000)
            {
              v702 = (unint64_t)(v691 - *(_QWORD *)v661) >> 3;
              *(_DWORD *)(v661 + 72) = 1;
              *(_DWORD *)(v661 + 76) = v702;
            }
            v20 = v677;
            *(_WORD *)(v691 + 4) = v663;
            *(_DWORD *)v691 = v671;
            if (v673 < 0x10000)
              goto LABEL_1188;
LABEL_1187:
            v703 = (unint64_t)(v691 - *(_QWORD *)v661) >> 3;
            *(_DWORD *)(v661 + 72) = 2;
            *(_DWORD *)(v661 + 76) = v703;
LABEL_1188:
            *(_WORD *)(v691 + 6) = v673;
            *(_QWORD *)(v661 + 8) = v691 + 8;
            v20 += v664 + v663;
            v17 = v20;
            v660 = v662 + 1;
            if (v662 + 1 > v652)
              goto LABEL_1189;
          }
        }
        v17 = v950;
LABEL_1189:
        if (*(_DWORD *)(v7 + 176) != 2)
          *(_DWORD *)(v7 + 144) = (__clz(*(_DWORD *)(v7 + 128) + 1) << 8) ^ 0x1F00;
        v21 = __clz(*(_DWORD *)(v7 + 140) + 1);
        *(int8x8_t *)(v7 + 148) = veor_s8((int8x8_t)vshl_n_s32(vclz_s32(vadd_s32(*(int32x2_t *)(v7 + 132), (int32x2_t)0x100000001)), 8uLL), (int8x8_t)0x1F0000001F00);
        *(_DWORD *)(v7 + 156) = (v21 << 8) ^ 0x1F00;
        if ((unint64_t)v17 >= v928)
        {
LABEL_1230:
          v927 = v20;
          return v18 - (_QWORD)v927;
        }
      }
      else
      {
        v17 = v272 + 1;
        v18 = (unint64_t)v959;
        v20 = v961;
        v8 = v25;
        if ((unint64_t)v17 >= v928)
          goto LABEL_1230;
      }
    }
  }
  return v18 - (_QWORD)v927;
}

unint64_t ZSTD_compressBlock_btultra_extDict(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  int32x2_t v21;
  int32x2_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int i;
  int inserted;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  unint64_t v60;
  _DWORD *v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unsigned int v75;
  unint64_t v76;
  unsigned int v77;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  unint64_t v98;
  _DWORD *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  int v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  unsigned int v116;
  unint64_t v117;
  unsigned int v118;
  unsigned int v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  _QWORD *v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v134;
  uint64_t v135;
  int v136;
  unsigned int v137;
  unint64_t v138;
  _DWORD *v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  unsigned int v153;
  unint64_t v154;
  unsigned int v155;
  unsigned int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  unint64_t v164;
  _QWORD *v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v171;
  uint64_t v172;
  int v173;
  unsigned int v174;
  unint64_t v175;
  _DWORD *v177;
  uint64_t v178;
  char *v179;
  unint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  unint64_t v192;
  unint64_t v193;
  int v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  _DWORD *v202;
  _QWORD *v203;
  unint64_t v204;
  unsigned __int8 *v205;
  unsigned int *v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  unsigned int v212;
  unint64_t v213;
  unint64_t v214;
  int v215;
  unint64_t v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  int v222;
  _DWORD *v223;
  _QWORD *v224;
  unint64_t v225;
  unsigned __int8 *v226;
  unsigned int *v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  unsigned int v233;
  unint64_t v234;
  unint64_t v235;
  int v236;
  unint64_t v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  int v243;
  _DWORD *v244;
  _QWORD *v245;
  unint64_t v246;
  unsigned __int8 *v247;
  unsigned int *v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  unint64_t v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unint64_t v257;
  unint64_t v258;
  int v259;
  unint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  _DWORD *v267;
  _DWORD *v268;
  unint64_t v269;
  unsigned __int8 *v270;
  unsigned int *v271;
  uint64_t v272;
  char *v273;
  char *v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unsigned __int8 *v280;
  uint64_t v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  uint64_t v285;
  unsigned int v286;
  int v287;
  unsigned int v288;
  uint64_t v289;
  int v290;
  int v291;
  _DWORD *v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  _DWORD *v298;
  unint64_t v299;
  uint64_t v300;
  unsigned int *v301;
  uint64_t v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int *v305;
  unsigned int v306;
  unsigned int v307;
  uint64_t v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int *v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  uint64_t v318;
  int v319;
  unsigned int v320;
  unsigned int *v321;
  unsigned int v322;
  unint64_t v323;
  unsigned __int8 *v324;
  int v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int *v328;
  unsigned int v329;
  uint64_t v330;
  unsigned __int8 *v331;
  unsigned int v332;
  int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  int v339;
  unsigned int v340;
  int v341;
  unsigned int v342;
  unsigned int v343;
  uint64_t v344;
  int v345;
  int v346;
  uint64_t v347;
  unsigned int v348;
  uint64_t v349;
  int v350;
  signed int v351;
  unsigned int *v352;
  _DWORD *v353;
  int v354;
  signed int v355;
  unsigned int *v356;
  unsigned int v357;
  unsigned int *v358;
  unint64_t v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int *v362;
  uint64_t v363;
  unsigned int *v364;
  unsigned int *v365;
  int v366;
  unsigned int v367;
  unint64_t v368;
  uint64_t v369;
  unsigned int v370;
  unint64_t v371;
  unsigned int *v372;
  unsigned int v373;
  unsigned int v374;
  int v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  uint64_t v380;
  unsigned int j;
  int v382;
  unsigned int v383;
  uint64_t v384;
  uint64_t v385;
  unsigned int v386;
  _QWORD *v387;
  int v388;
  unint64_t v389;
  unsigned int v390;
  unsigned int v391;
  unsigned int v393;
  int v394;
  uint64_t v395;
  unint64_t v396;
  unsigned int v397;
  unsigned int v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  _DWORD *v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  uint64_t v407;
  uint64_t v408;
  int v409;
  unsigned int v410;
  unint64_t v411;
  _QWORD *v413;
  _QWORD *v414;
  unint64_t v415;
  unint64_t v416;
  _DWORD *v417;
  unsigned int v418;
  _QWORD *v419;
  uint64_t v420;
  unsigned int v421;
  int v422;
  unint64_t v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int v427;
  int v428;
  uint64_t v429;
  unint64_t v430;
  unsigned int v431;
  unsigned int v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  unsigned int *v436;
  unsigned int v437;
  unsigned int v438;
  unsigned int v439;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  int v444;
  unsigned int v445;
  unint64_t v446;
  _QWORD *v448;
  _QWORD *v449;
  unint64_t v450;
  unint64_t v451;
  _DWORD *v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  _QWORD *v456;
  uint64_t v457;
  unsigned int v458;
  int v459;
  unint64_t v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v464;
  int v465;
  uint64_t v466;
  unint64_t v467;
  unsigned int v468;
  unsigned int v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  unsigned int v473;
  unsigned int v474;
  unsigned int v475;
  uint64_t v477;
  uint64_t v478;
  int v479;
  unsigned int v480;
  unint64_t v481;
  _QWORD *v483;
  _QWORD *v484;
  unint64_t v485;
  unint64_t v486;
  _DWORD *v487;
  unsigned int v488;
  _QWORD *v489;
  uint64_t v490;
  unsigned int v491;
  int v492;
  unint64_t v493;
  unsigned int v494;
  unsigned int v495;
  unsigned int v497;
  int v498;
  uint64_t v499;
  unint64_t v500;
  unsigned int v501;
  unsigned int v502;
  uint64_t v503;
  uint64_t v504;
  unint64_t v505;
  unsigned int v506;
  unsigned int v507;
  unsigned int v508;
  uint64_t v510;
  uint64_t v511;
  int v512;
  unsigned int v513;
  unint64_t v514;
  _QWORD *v516;
  _QWORD *v517;
  unint64_t v518;
  unint64_t v519;
  _DWORD *v520;
  uint64_t v521;
  int v522;
  int v523;
  uint64_t v524;
  uint64_t v525;
  int v526;
  BOOL v527;
  unsigned int v528;
  unint64_t v529;
  unint64_t v530;
  int v531;
  unint64_t v532;
  unsigned __int8 *v533;
  uint64_t v534;
  unint64_t v535;
  unint64_t v536;
  unint64_t v537;
  uint64_t v538;
  unsigned int v539;
  _DWORD *v540;
  _QWORD *v541;
  unint64_t v542;
  char *v543;
  unsigned int *v544;
  uint64_t v545;
  char *v546;
  char *v547;
  uint64_t v548;
  unint64_t v549;
  unsigned int v550;
  unint64_t v551;
  unint64_t v552;
  int v553;
  unsigned int v554;
  unint64_t v555;
  uint64_t v556;
  unsigned __int8 *v557;
  uint64_t v558;
  uint64_t v559;
  unint64_t v560;
  unint64_t v561;
  uint64_t v562;
  _DWORD *v563;
  _QWORD *v564;
  unint64_t v565;
  char *v566;
  unsigned int *v567;
  uint64_t v568;
  char *v569;
  char *v570;
  uint64_t v571;
  unint64_t v572;
  unsigned int v573;
  unsigned int v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  int v578;
  signed int *v579;
  unsigned int v580;
  unsigned int v581;
  signed int v582;
  uint64_t v583;
  int v584;
  int v585;
  unsigned int v586;
  signed int *v587;
  unint64_t v588;
  unsigned int v589;
  signed int v590;
  uint64_t v591;
  unint64_t v592;
  unint64_t v593;
  _DWORD *v594;
  _DWORD *v595;
  int v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  int v600;
  unsigned int v601;
  unsigned int *v602;
  unsigned int v603;
  unsigned int v604;
  unint64_t v605;
  unsigned int v606;
  unsigned int v607;
  uint64_t v608;
  int v609;
  unsigned int v610;
  signed int v611;
  uint64_t v612;
  unint64_t v613;
  unint64_t v614;
  _DWORD *v615;
  _DWORD *v616;
  unint64_t v617;
  unint64_t v618;
  int v619;
  unint64_t v620;
  uint64_t v621;
  unsigned __int8 *v622;
  uint64_t v623;
  uint64_t v624;
  unint64_t v625;
  unint64_t v626;
  uint64_t v627;
  _DWORD *v628;
  _QWORD *v629;
  unint64_t v630;
  char *v631;
  unsigned int *v632;
  uint64_t v633;
  char *v634;
  char *v635;
  uint64_t v636;
  unint64_t v637;
  unint64_t v638;
  unint64_t v639;
  int v640;
  unint64_t v641;
  uint64_t v642;
  unsigned __int8 *v643;
  uint64_t v644;
  unsigned int v645;
  unint64_t v646;
  unint64_t v647;
  unint64_t v648;
  uint64_t v649;
  unsigned int v650;
  _DWORD *v651;
  _DWORD *v652;
  unint64_t v653;
  char *v654;
  unsigned int *v655;
  unsigned int v656;
  uint64_t v657;
  char *v658;
  char *v659;
  uint64_t v660;
  unint64_t v661;
  uint64_t v662;
  unint64_t v663;
  _DWORD *v664;
  unint64_t v665;
  char *v666;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;
  unsigned int *v671;
  unsigned int *v672;
  unsigned int *v673;
  unint64_t v674;
  unsigned int v675;
  unsigned int v676;
  unsigned int v677;
  unint64_t v678;
  uint64_t v679;
  unsigned int v680;
  unsigned int v681;
  unsigned int *v682;
  unsigned int v683;
  unsigned int *v684;
  unsigned int v685;
  unsigned int *v686;
  __int128 v687;
  BOOL v688;
  unsigned int v689;
  uint64_t v690;
  unsigned int v691;
  unsigned int v692;
  unsigned int v693;
  uint64_t v694;
  unsigned int v695;
  unsigned int v696;
  char *v697;
  unsigned __int8 *v698;
  uint64_t v699;
  int v700;
  unsigned int v701;
  unsigned int v702;
  unsigned int v703;
  unsigned int v704;
  unsigned int v705;
  unsigned __int8 *v706;
  char *v707;
  unsigned __int8 *v708;
  char *v709;
  uint64_t v710;
  _OWORD *v711;
  unint64_t v712;
  __int128 *v713;
  __int128 v714;
  unsigned __int8 *v715;
  char *v716;
  __int128 v717;
  unsigned __int8 *v718;
  unint64_t v719;
  unsigned __int8 *v720;
  uint64_t v721;
  unint64_t v722;
  __int128 *v723;
  char *v724;
  unint64_t v725;
  __int128 v726;
  unsigned __int8 *v727;
  char *v728;
  unint64_t v729;
  uint64_t v730;
  char v731;
  unint64_t v732;
  unint64_t v733;
  unsigned int v734;
  unsigned int v735;
  unsigned int *v736;
  uint64_t v737;
  _DWORD *v738;
  unint64_t v739;
  unsigned __int8 *v740;
  unint64_t v742;
  _QWORD *v743;
  _QWORD *v744;
  uint64_t v745;
  unint64_t v746;
  uint64_t v748;
  unsigned int *v749;
  char *v750;
  int v751;
  unsigned int v752;
  uint64_t v753;
  int v754;
  int v755;
  int v756;
  uint64_t v757;
  unint64_t v758;
  unint64_t v759;
  uint64_t v760;
  unsigned int v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  unsigned int v766;
  unsigned int v767;
  _QWORD *v768;
  uint64_t v769;
  unsigned int v770;
  unsigned int v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unsigned int v779;
  unsigned int v780;
  unsigned int v781;
  unsigned int v782;
  char *v783;
  char *v784;
  char *v785;
  char *v786;
  int v787;
  int v788;
  int v789;
  unint64_t v790;
  unsigned int v791;
  unsigned int v792;
  unsigned int v793;
  unsigned int v794;
  unsigned int v795;
  unsigned int v796;
  unsigned int v797;
  uint64_t v798;
  int v799;
  unint64_t v800;
  uint64_t v801;
  unsigned int v802;
  unint64_t v803;
  unsigned int v804;
  unsigned int v805;
  unint64_t v806;
  unint64_t v807;
  unint64_t v808;
  unint64_t v809;
  uint64_t v810;
  int v811;
  uint64_t v812;
  uint64_t v813;
  unsigned int v814;
  unsigned int v815;
  unsigned int v816;
  unsigned int v817;
  unint64_t v818;
  unint64_t v819;
  uint64_t v820;
  unsigned int v821;
  unint64_t v822;
  unsigned int v823;
  unsigned int v824;
  unsigned int v825;
  unsigned int v826;
  unsigned int v827;
  unsigned int v828;
  unint64_t v829;
  unint64_t v830;
  unint64_t v831;
  unint64_t v832;
  unsigned int v833;
  uint64_t v834;
  int v835;
  int v836;
  uint64_t v837;
  uint64_t v838;
  unsigned int v839;
  uint64_t v840;
  unsigned int v841;
  unint64_t v842;
  unsigned int v843;
  unsigned int v844;
  unsigned int v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  _DWORD *v849;
  unsigned int v850;
  unint64_t v851;
  unint64_t v852;
  unsigned int v853;
  unsigned int v854;
  _DWORD *v855;
  _DWORD *v856;
  _DWORD *v857;
  _DWORD *v858;
  unsigned int v859;
  uint64_t v860;
  unsigned int v861;
  uint64_t v862;
  unsigned int v863;
  unsigned int v864;
  int v865;
  int v866;
  int v867;
  int v868;
  int v869;
  unsigned int v870;
  int v871;
  unsigned int v872;
  int v873;
  int v874;
  unsigned int v875;
  int v876;
  unsigned int v877;
  unsigned int v878;
  unint64_t v879;
  unint64_t v880;
  unint64_t v881;
  _QWORD *v882;
  int v883;
  uint64_t v884;
  uint64_t v885;
  unsigned int v886;
  unsigned int v887;
  uint64_t v888;
  uint64_t v889;
  unint64_t v890;
  unint64_t v891;
  char *v892;
  uint64_t v893;
  unsigned int v894;
  unsigned int v895;
  uint64_t v896;
  uint64_t v897;
  unsigned int v898;
  unsigned int v899;
  unint64_t v900;
  unsigned int v901;
  _QWORD *v902;
  _QWORD *v903;
  unsigned int v904;
  unsigned int v905;
  int v906;
  int v907;
  unsigned int *v908;
  _QWORD *v909;
  char *v910;
  char *v911;
  int v912;
  int v913;
  uint64_t v914;
  uint64_t v915;
  unsigned int *v916;
  char *v917;
  unsigned int *v918;
  _QWORD *v919;
  uint64_t v920;
  unsigned int v921;
  unsigned int v922;
  uint64_t v923;
  uint64_t v924;
  unint64_t v925;
  unint64_t v926;
  unint64_t v927;
  char *v928;
  unsigned int v929;
  _QWORD *v930;
  _QWORD *v931;
  unsigned int v932;
  unsigned int *v933;
  unsigned int *v934;
  unint64_t v935;
  _QWORD *v936;
  char *v937;
  char *v938;
  unsigned int v939;
  unsigned int *v940;
  unsigned int v941;
  unsigned int v942;
  unsigned int v943;
  unsigned int v944;
  uint64_t v945;
  char *v946;
  unint64_t v947;
  unint64_t v948;
  unint64_t v949;
  unsigned int v950;
  uint64_t v951;
  uint64_t v952;
  unint64_t v953;
  unint64_t v954;
  uint64_t v955;
  unint64_t v956;
  unsigned int *v957;
  int v958;
  unsigned int *v959;
  unsigned int *v960;
  unsigned int *v961;
  int v962;
  char **v963;
  uint64_t v964;
  unsigned int *v965;
  unsigned int *v966;
  int v967;
  uint64_t v968;
  uint64_t v969;
  unint64_t v970;
  unint64_t v971;
  unint64_t v972;
  unint64_t v973;
  unsigned __int8 *v974;
  unsigned int v975;
  unsigned int v976;
  unsigned int v977;
  unsigned int v978;
  int v979;
  int v980;
  int v981;
  int v982;
  uint64_t v983;
  unint64_t v984;
  unsigned __int8 *v985;
  unint64_t v986;
  unint64_t v987;
  unsigned int v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  int v992;
  unsigned __int8 *v993;
  unsigned __int8 *v994;
  unint64_t v996;
  unint64_t v997;
  unint64_t v998;
  unint64_t v999;
  unsigned int *v1000;
  int v1001;
  int v1002;
  int v1003;
  int v1004;
  unsigned __int8 *v1005;
  unint64_t v1006;
  _DWORD *v1007;
  _DWORD *v1008;
  unsigned int v1009;
  __int128 v1010;
  __int128 v1011;
  _BYTE v1012[24];
  int v1013;
  uint64_t v1014;
  unsigned int v1015;
  uint64_t v1016;

  v7 = a1;
  v1016 = *MEMORY[0x1E0C80C00];
  v963 = (char **)(a1 + 80);
  v974 = a4;
  v1005 = &a4[a5];
  v984 = (unint64_t)&a4[a5 - 8];
  v8 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 212) >= 0xFFFu)
    v9 = 4095;
  else
    v9 = *(_DWORD *)(a1 + 212);
  v850 = v9;
  if (*(_DWORD *)(a1 + 208) == 3)
    v10 = 3;
  else
    v10 = 4;
  v983 = v10;
  v752 = *(_DWORD *)(a1 + 36);
  v12 = *(_QWORD *)(a1 + 112);
  v11 = *(unsigned int **)(a1 + 120);
  v1015 = 0;
  v1014 = 0;
  v1011 = 0u;
  memset(v1012, 0, sizeof(v1012));
  v1010 = 0u;
  v13 = *(__int128 **)(a1 + 224);
  if (v13)
  {
    v14 = v13[1];
    v1010 = *v13;
    v1011 = v14;
    *(_QWORD *)v1012 = *((_QWORD *)v13 + 4);
  }
  else
  {
    *(_QWORD *)v1012 = 0;
    v1010 = 0uLL;
    v1011 = 0uLL;
  }
  *(_QWORD *)&v1012[12] = 0;
  *(_DWORD *)&v1012[8] = 0;
  ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t *)&v1010, 0, a5);
  ZSTD_rescaleFreqs(v963, v974, a5, 2);
  if (v8 == v974)
    v15 = v974 + 1;
  else
    v15 = v974;
  v16 = (unint64_t)v1005;
  if ((unint64_t)v15 < v984)
  {
    v770 = 0;
    v1006 = (unint64_t)(v1005 - 7);
    v986 = (unint64_t)(v1005 - 1);
    v987 = (unint64_t)(v1005 - 3);
    v17 = (v983 - 1) | 1;
    v1008 = v11 + 14;
    v748 = v983 - v17;
    v749 = &v11[7 * v17];
    v18 = v974;
    v964 = v7;
    v1007 = (_DWORD *)v12;
    v769 = a2;
    while (1)
    {
      v23 = (_DWORD)v15 - (_DWORD)v18;
      v1009 = 0;
      v24 = *(_QWORD *)(v7 + 8);
      v25 = *(unsigned int *)(v7 + 36);
      v985 = v18;
      v994 = v15;
      if (v24 + v25 > (unint64_t)v15)
      {
        LODWORD(v26) = 0;
        v27 = v983;
        goto LABEL_495;
      }
      v28 = *(_DWORD *)(v7 + 208);
      for (i = (_DWORD)v15 - v24; v25 < i; LODWORD(v25) = inserted + v25)
      {
        inserted = ZSTD_insertBt1(v7, (_QWORD *)(v24 + v25), v16, v28, 1);
        v16 = (unint64_t)v1005;
      }
      *(_DWORD *)(v7 + 36) = i;
      if ((v28 - 6) < 2)
        break;
      v18 = v985;
      if (v28 == 5)
      {
        v26 = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu)
          v111 = 4095;
        else
          v111 = *(_DWORD *)(v7 + 212);
        v112 = *(_QWORD *)(v7 + 8);
        v113 = *(_QWORD *)(v7 + 16);
        v114 = (_DWORD)v994 - v112;
        v115 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        v906 = ~v115;
        v116 = (_DWORD)v994 - v112 + v115 + 1;
        if ((int)v994 - (int)v112 < ~v115)
          v116 = 0;
        v898 = v116;
        v117 = *(unsigned int *)(v7 + 24);
        v118 = 1 << *(_DWORD *)(v7 + 192);
        if (v114 - *(_DWORD *)(v7 + 28) > v118 && *(_DWORD *)(v7 + 32) == 0)
          v120 = v114 - v118;
        else
          v120 = *(_DWORD *)(v7 + 28);
        v15 = v994;
        if (v120 <= 1)
          v121 = 1;
        else
          v121 = v120;
        v921 = v121;
        v122 = v114 - v117;
        v123 = v114 - v120;
        v124 = v7;
        v125 = v23 == 0;
        v126 = (char *)(v994 + 12);
        v788 = *(_DWORD *)(v124 + 204);
        v800 = (0xCF1BBCDCBB000000 * *(_QWORD *)v994) >> -(char)*(_DWORD *)(v124 + 200);
        v812 = *(_QWORD *)(v124 + 48);
        v823 = *(_DWORD *)(v812 + 4 * v800);
        v990 = v113;
        v937 = (char *)(v113 + v117);
        v914 = v112;
        v930 = (_QWORD *)(v112 + v117);
        v888 = *(_QWORD *)(v124 + 64);
        v957 = (unsigned int *)(v888 + 8 * (v114 & ~v115));
        v961 = v957 + 1;
        v967 = v114 + 9;
        v1013 = 0;
        if (v23)
          v127 = 3;
        else
          v127 = 4;
        v128 = v994 + 4;
        if (v23)
          v129 = 0;
        else
          v129 = -1;
        v998 = (v983 - 1);
        v947 = v117;
        v977 = v111;
        v865 = (_DWORD)v994 - v112;
        v877 = v120;
        v853 = v114 - v117;
        v844 = v114 - v120;
        v835 = v129;
        while (1)
        {
          if (v125 == 3)
          {
            v130 = *a3 - 1;
            v131 = v114 - v130;
            v132 = *a3 - 2;
            if (v132 >= v122)
              goto LABEL_180;
          }
          else
          {
            v130 = a3[v125];
            v131 = v114 - v130;
            v132 = v130 - 1;
            if (v130 - 1 >= v122)
            {
LABEL_180:
              if (v132 < v123 && v117 + ~v131 >= 3)
              {
                v134 = v990 + v131;
                if (*(_DWORD *)v15 == *(_DWORD *)v134)
                {
                  v135 = v26;
                  v136 = ZSTD_count_2segments(v128, (char *)(v134 + 4), v16, v937, v930);
                  v129 = v835;
                  v123 = v844;
                  v122 = v853;
                  v114 = v865;
                  v120 = v877;
                  v117 = v947;
                  v26 = v135;
                  v15 = v994;
                  v16 = (unint64_t)v1005;
                  v137 = v136 + 4;
                  v111 = v977;
                  v138 = v137;
                  if (v998 < v137)
                    goto LABEL_194;
                }
              }
              goto LABEL_177;
            }
          }
          if (v131 < v120 || *(_DWORD *)v15 != *(_DWORD *)&v15[-v130])
            goto LABEL_177;
          v141 = -(uint64_t)v130;
          v142 = (char *)v128 - v130;
          if (v1006 <= (unint64_t)v128)
            break;
          v143 = *v128 ^ *(_QWORD *)v142;
          if (v143)
          {
            v137 = (__clz(__rbit64(v143)) >> 3) + 4;
            v138 = v137;
            if (v998 < v137)
              goto LABEL_194;
            goto LABEL_177;
          }
          v145 = 0;
          do
          {
            v144 = &v126[v145];
            if ((unint64_t)&v126[v145] >= v1006)
            {
              v142 = &v144[v141];
              if ((unint64_t)v144 >= v987)
                goto LABEL_204;
              goto LABEL_202;
            }
            v146 = *(_QWORD *)&v126[v141 + v145];
            v145 += 8;
            v147 = *(_QWORD *)v144 ^ v146;
          }
          while (!v147);
          v137 = v145 + (__clz(__rbit64(v147)) >> 3) + 4;
          v138 = v137;
          if (v998 < v137)
          {
LABEL_194:
            v140 = &v1007[2 * v26];
            *v140 = v125 + v129;
            v140[1] = v137;
            v26 = (v26 + 1);
            if (v137 > v111)
              goto LABEL_494;
            v998 = v138;
            if (&v15[v138] == (unsigned __int8 *)v16)
              goto LABEL_494;
          }
LABEL_177:
          if (++v125 >= v127)
          {
            *(_DWORD *)(v812 + 4 * v800) = v114;
            v212 = v823;
            if (v823 < v921)
              goto LABEL_492;
            v213 = 0;
            v214 = 0;
            v215 = ~(-1 << v788);
            v868 = v114 + 2;
            v856 = v15 + 8;
            v846 = v914 + 8;
            while (1)
            {
              v980 = v215;
              if (v214 >= v213)
                v216 = v213;
              else
                v216 = v214;
              v217 = (char *)&v15[v216];
              if (v216 + v212 < v117)
              {
                v879 = v214;
                v218 = v26;
                v219 = ZSTD_count_2segments(v217, (char *)(v990 + v212 + v216), v16, v937, v930);
                v214 = v879;
                v117 = v947;
                v26 = v218;
                v220 = v219 + v216;
                if (v219 + v216 + v212 >= v947)
                  v221 = v914 + v212;
                else
                  v221 = v990 + v212;
                if (v220 > v998)
                  goto LABEL_351;
LABEL_372:
                v16 = (unint64_t)v1005;
                v18 = v985;
                v15 = v994;
                goto LABEL_373;
              }
              v221 = v914 + v212;
              v224 = (_QWORD *)(v221 + v216);
              if (v1006 <= (unint64_t)v217)
                break;
              v225 = *(_QWORD *)v217 ^ *v224;
              if (v225)
              {
                v220 = (__clz(__rbit64(v225)) >> 3) + v216;
                if (v220 <= v998)
                  goto LABEL_372;
                goto LABEL_351;
              }
              v228 = 0;
              v229 = (char *)v856 + v216;
              do
              {
                v230 = &v229[v228];
                if ((unint64_t)&v229[v228] >= v1006)
                {
                  v226 = (unsigned __int8 *)v856 + v216 + v228;
                  v224 = (_QWORD *)(v846 + v216 + v212 + v228);
                  if ((unint64_t)v226 >= v987)
                    goto LABEL_363;
                  goto LABEL_361;
                }
                v231 = *(_QWORD *)(v846 + v216 + v212 + v228);
                v228 += 8;
                v232 = *(_QWORD *)v230 ^ v231;
              }
              while (!v232);
              v220 = v228 + (__clz(__rbit64(v232)) >> 3) + v216;
              if (v220 <= v998)
                goto LABEL_372;
LABEL_351:
              v222 = v967;
              if (v220 > v967 - v212)
                v222 = v212 + v220;
              v967 = v222;
              v223 = &v1007[2 * v26];
              *v223 = v868 - v212;
              v223[1] = v220;
              v26 = (v26 + 1);
              v16 = (unint64_t)v1005;
              v18 = v985;
              v15 = v994;
              if (v220 > 0x1000)
                goto LABEL_492;
              v998 = v220;
              if (&v994[v220] == v1005)
                goto LABEL_492;
LABEL_373:
              v227 = (unsigned int *)(v888 + 8 * (v212 & v906));
              if (*(unsigned __int8 *)(v221 + v220) >= v15[v220])
              {
                *v961 = v212;
                if (v212 <= v898)
                {
LABEL_491:
                  v961 = (unsigned int *)&v1013;
                  goto LABEL_492;
                }
                v213 = v220;
                v961 = (unsigned int *)(v888 + 8 * (v212 & v906));
                v215 = v980 - 1;
                if (!v980)
                  goto LABEL_492;
              }
              else
              {
                *v957 = v212;
                if (v212 <= v898)
                  goto LABEL_490;
                ++v227;
                v214 = v220;
                v957 = v227;
                v215 = v980 - 1;
                if (!v980)
                  goto LABEL_492;
              }
              v212 = *v227;
              if (*v227 < v921)
                goto LABEL_492;
            }
            v226 = &v15[v216];
            if ((unint64_t)v217 >= v987)
              goto LABEL_363;
LABEL_361:
            if (*(_DWORD *)v224 == *(_DWORD *)v226)
            {
              v226 += 4;
              v224 = (_QWORD *)((char *)v224 + 4);
            }
LABEL_363:
            if ((unint64_t)v226 >= v986)
            {
              if ((unint64_t)v226 >= v16)
                goto LABEL_371;
            }
            else
            {
              if (*(unsigned __int16 *)v224 == *(unsigned __int16 *)v226)
              {
                v226 += 2;
                v224 = (_QWORD *)((char *)v224 + 2);
              }
              if ((unint64_t)v226 >= v16)
              {
LABEL_371:
                v220 = v226 - (unsigned __int8 *)v217 + v216;
                if (v220 <= v998)
                  goto LABEL_372;
                goto LABEL_351;
              }
            }
            if (*(unsigned __int8 *)v224 == *v226)
              ++v226;
            goto LABEL_371;
          }
        }
        v144 = (char *)(v994 + 4);
        if ((unint64_t)v128 >= v987)
          goto LABEL_204;
LABEL_202:
        if (*(_DWORD *)v142 == *(_DWORD *)v144)
        {
          v144 += 4;
          v142 += 4;
        }
LABEL_204:
        if ((unint64_t)v144 >= v986)
        {
          if ((unint64_t)v144 >= v16)
            goto LABEL_212;
        }
        else
        {
          if (*(unsigned __int16 *)v142 == *(unsigned __int16 *)v144)
          {
            v144 += 2;
            v142 += 2;
          }
          if ((unint64_t)v144 >= v16)
          {
LABEL_212:
            v137 = (_DWORD)v144 - (_DWORD)v994;
            v138 = v137;
            if (v998 < v137)
              goto LABEL_194;
            goto LABEL_177;
          }
        }
        if (*v142 == *v144)
          LODWORD(v144) = (_DWORD)v144 + 1;
        goto LABEL_212;
      }
      if (v28 != 3)
      {
        v26 = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu)
          v148 = 4095;
        else
          v148 = *(_DWORD *)(v7 + 212);
        v149 = *(_QWORD *)(v7 + 8);
        v150 = *(_QWORD *)(v7 + 16);
        v151 = (_DWORD)v994 - v149;
        v152 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        v907 = ~v152;
        v153 = (_DWORD)v994 - v149 + v152 + 1;
        if ((int)v994 - (int)v149 < ~v152)
          v153 = 0;
        v899 = v153;
        v154 = *(unsigned int *)(v7 + 24);
        v155 = 1 << *(_DWORD *)(v7 + 192);
        if (v151 - *(_DWORD *)(v7 + 28) > v155 && *(_DWORD *)(v7 + 32) == 0)
          v157 = v151 - v155;
        else
          v157 = *(_DWORD *)(v7 + 28);
        v15 = v994;
        if (v157 <= 1)
          v158 = 1;
        else
          v158 = v157;
        v922 = v158;
        v159 = v151 - v154;
        v160 = v151 - v157;
        v161 = v7;
        v162 = v23 == 0;
        v163 = (char *)(v994 + 12);
        v789 = *(_DWORD *)(v161 + 204);
        v801 = (-1640531535 * *(_DWORD *)v994) >> -(char)*(_DWORD *)(v161 + 200);
        v813 = *(_QWORD *)(v161 + 48);
        v824 = *(_DWORD *)(v813 + 4 * v801);
        v991 = v150;
        v938 = (char *)(v150 + v154);
        v915 = v149;
        v931 = (_QWORD *)(v149 + v154);
        v889 = *(_QWORD *)(v161 + 64);
        v957 = (unsigned int *)(v889 + 8 * (v151 & ~v152));
        v961 = v957 + 1;
        v967 = v151 + 9;
        v1013 = 0;
        if (v23)
          v164 = 3;
        else
          v164 = 4;
        v165 = v994 + 4;
        if (v23)
          v166 = 0;
        else
          v166 = -1;
        v999 = (v983 - 1);
        v948 = v154;
        v978 = v148;
        v866 = (_DWORD)v994 - v149;
        v878 = v157;
        v854 = v151 - v154;
        v845 = v151 - v157;
        v836 = v166;
        while (1)
        {
          if (v162 == 3)
          {
            v167 = *a3 - 1;
            v168 = v151 - v167;
            v169 = *a3 - 2;
            if (v169 >= v159)
              goto LABEL_245;
          }
          else
          {
            v167 = a3[v162];
            v168 = v151 - v167;
            v169 = v167 - 1;
            if (v167 - 1 >= v159)
            {
LABEL_245:
              if (v169 < v160 && v154 + ~v168 >= 3)
              {
                v171 = v991 + v168;
                if (*(_DWORD *)v15 == *(_DWORD *)v171)
                {
                  v172 = v26;
                  v173 = ZSTD_count_2segments(v165, (char *)(v171 + 4), v16, v938, v931);
                  v166 = v836;
                  v160 = v845;
                  v159 = v854;
                  v151 = v866;
                  v157 = v878;
                  v154 = v948;
                  v26 = v172;
                  v15 = v994;
                  v16 = (unint64_t)v1005;
                  v174 = v173 + 4;
                  v148 = v978;
                  v175 = v174;
                  if (v999 < v174)
                    goto LABEL_259;
                }
              }
              goto LABEL_242;
            }
          }
          if (v168 < v157 || *(_DWORD *)v15 != *(_DWORD *)&v15[-v167])
            goto LABEL_242;
          v178 = -(uint64_t)v167;
          v179 = (char *)v165 - v167;
          if (v1006 <= (unint64_t)v165)
            break;
          v180 = *v165 ^ *(_QWORD *)v179;
          if (v180)
          {
            v174 = (__clz(__rbit64(v180)) >> 3) + 4;
            v175 = v174;
            if (v999 < v174)
              goto LABEL_259;
            goto LABEL_242;
          }
          v182 = 0;
          do
          {
            v181 = &v163[v182];
            if ((unint64_t)&v163[v182] >= v1006)
            {
              v179 = &v181[v178];
              if ((unint64_t)v181 >= v987)
                goto LABEL_269;
              goto LABEL_267;
            }
            v183 = *(_QWORD *)&v163[v178 + v182];
            v182 += 8;
            v184 = *(_QWORD *)v181 ^ v183;
          }
          while (!v184);
          v174 = v182 + (__clz(__rbit64(v184)) >> 3) + 4;
          v175 = v174;
          if (v999 < v174)
          {
LABEL_259:
            v177 = &v1007[2 * v26];
            *v177 = v162 + v166;
            v177[1] = v174;
            v26 = (v26 + 1);
            if (v174 > v148)
              goto LABEL_494;
            v999 = v175;
            if (&v15[v175] == (unsigned __int8 *)v16)
              goto LABEL_494;
          }
LABEL_242:
          if (++v162 >= v164)
          {
            *(_DWORD *)(v813 + 4 * v801) = v151;
            v233 = v824;
            if (v824 < v922)
              goto LABEL_492;
            v234 = 0;
            v235 = 0;
            v236 = ~(-1 << v789);
            v869 = v151 + 2;
            v857 = v15 + 8;
            v847 = v915 + 8;
            while (1)
            {
              v981 = v236;
              if (v235 >= v234)
                v237 = v234;
              else
                v237 = v235;
              v238 = (char *)&v15[v237];
              if (v237 + v233 < v154)
              {
                v880 = v235;
                v239 = v26;
                v240 = ZSTD_count_2segments(v238, (char *)(v991 + v233 + v237), v16, v938, v931);
                v235 = v880;
                v154 = v948;
                v26 = v239;
                v241 = v240 + v237;
                if (v240 + v237 + v233 >= v948)
                  v242 = v915 + v233;
                else
                  v242 = v991 + v233;
                if (v241 > v999)
                  goto LABEL_398;
LABEL_419:
                v16 = (unint64_t)v1005;
                v18 = v985;
                v15 = v994;
                goto LABEL_420;
              }
              v242 = v915 + v233;
              v245 = (_QWORD *)(v242 + v237);
              if (v1006 <= (unint64_t)v238)
                break;
              v246 = *(_QWORD *)v238 ^ *v245;
              if (v246)
              {
                v241 = (__clz(__rbit64(v246)) >> 3) + v237;
                if (v241 <= v999)
                  goto LABEL_419;
                goto LABEL_398;
              }
              v249 = 0;
              v250 = (char *)v857 + v237;
              do
              {
                v251 = &v250[v249];
                if ((unint64_t)&v250[v249] >= v1006)
                {
                  v247 = (unsigned __int8 *)v857 + v237 + v249;
                  v245 = (_QWORD *)(v847 + v237 + v233 + v249);
                  if ((unint64_t)v247 >= v987)
                    goto LABEL_410;
                  goto LABEL_408;
                }
                v252 = *(_QWORD *)(v847 + v237 + v233 + v249);
                v249 += 8;
                v253 = *(_QWORD *)v251 ^ v252;
              }
              while (!v253);
              v241 = v249 + (__clz(__rbit64(v253)) >> 3) + v237;
              if (v241 <= v999)
                goto LABEL_419;
LABEL_398:
              v243 = v967;
              if (v241 > v967 - v233)
                v243 = v233 + v241;
              v967 = v243;
              v244 = &v1007[2 * v26];
              *v244 = v869 - v233;
              v244[1] = v241;
              v26 = (v26 + 1);
              v16 = (unint64_t)v1005;
              v18 = v985;
              v15 = v994;
              if (v241 > 0x1000 || (v999 = v241, &v994[v241] == v1005))
              {
LABEL_492:
                *v961 = 0;
                *v957 = 0;
                v110 = v967 - 8;
LABEL_493:
                *(_DWORD *)(v964 + 36) = v110;
LABEL_494:
                v7 = v964;
                v27 = v983;
                v12 = (uint64_t)v1007;
                goto LABEL_495;
              }
LABEL_420:
              v248 = (unsigned int *)(v889 + 8 * (v233 & v907));
              if (*(unsigned __int8 *)(v242 + v241) < v15[v241])
              {
                *v957 = v233;
                if (v233 > v899)
                {
                  ++v248;
                  v235 = v241;
                  v957 = v248;
                  v236 = v981 - 1;
                  if (!v981)
                    goto LABEL_492;
                  goto LABEL_389;
                }
LABEL_490:
                v957 = (unsigned int *)&v1013;
                goto LABEL_492;
              }
              *v961 = v233;
              if (v233 <= v899)
                goto LABEL_491;
              v234 = v241;
              v961 = (unsigned int *)(v889 + 8 * (v233 & v907));
              v236 = v981 - 1;
              if (!v981)
                goto LABEL_492;
LABEL_389:
              v233 = *v248;
              if (*v248 < v922)
                goto LABEL_492;
            }
            v247 = &v15[v237];
            if ((unint64_t)v238 >= v987)
              goto LABEL_410;
LABEL_408:
            if (*(_DWORD *)v245 == *(_DWORD *)v247)
            {
              v247 += 4;
              v245 = (_QWORD *)((char *)v245 + 4);
            }
LABEL_410:
            if ((unint64_t)v247 >= v986)
            {
              if ((unint64_t)v247 >= v16)
                goto LABEL_418;
            }
            else
            {
              if (*(unsigned __int16 *)v245 == *(unsigned __int16 *)v247)
              {
                v247 += 2;
                v245 = (_QWORD *)((char *)v245 + 2);
              }
              if ((unint64_t)v247 >= v16)
              {
LABEL_418:
                v241 = v247 - (unsigned __int8 *)v238 + v237;
                if (v241 <= v999)
                  goto LABEL_419;
                goto LABEL_398;
              }
            }
            if (*(unsigned __int8 *)v245 == *v247)
              ++v247;
            goto LABEL_418;
          }
        }
        v181 = (char *)(v994 + 4);
        if ((unint64_t)v165 >= v987)
          goto LABEL_269;
LABEL_267:
        if (*(_DWORD *)v179 == *(_DWORD *)v181)
        {
          v181 += 4;
          v179 += 4;
        }
LABEL_269:
        if ((unint64_t)v181 >= v986)
        {
          if ((unint64_t)v181 >= v16)
            goto LABEL_277;
        }
        else
        {
          if (*(unsigned __int16 *)v179 == *(unsigned __int16 *)v181)
          {
            v181 += 2;
            v179 += 2;
          }
          if ((unint64_t)v181 >= v16)
          {
LABEL_277:
            v174 = (_DWORD)v181 - (_DWORD)v994;
            v175 = v174;
            if (v999 < v174)
              goto LABEL_259;
            goto LABEL_242;
          }
        }
        if (*v179 == *v181)
          LODWORD(v181) = (_DWORD)v181 + 1;
        goto LABEL_277;
      }
      v26 = 0;
      if (*(_DWORD *)(v7 + 212) >= 0xFFFu)
        v31 = 4095;
      else
        v31 = *(_DWORD *)(v7 + 212);
      v32 = *(_QWORD *)(v7 + 8);
      v33 = *(_QWORD *)(v7 + 16);
      v34 = (_DWORD)v994 - v32;
      v35 = -1 << (*(_DWORD *)(v7 + 196) - 1);
      v912 = ~v35;
      v36 = (_DWORD)v994 - v32 + v35 + 1;
      if ((int)v994 - (int)v32 < ~v35)
        v36 = 0;
      v904 = v36;
      v37 = *(unsigned int *)(v7 + 24);
      v38 = 1 << *(_DWORD *)(v7 + 192);
      if (v34 - *(_DWORD *)(v7 + 28) > v38 && *(_DWORD *)(v7 + 32) == 0)
        v40 = v34 - v38;
      else
        v40 = *(_DWORD *)(v7 + 28);
      v15 = v994;
      if (v40 <= 1)
        v41 = 1;
      else
        v41 = v40;
      v975 = v41;
      v42 = v34 - v37;
      v43 = v34 - v40;
      v44 = v7;
      v45 = v23 == 0;
      v46 = (char *)(v994 + 11);
      v787 = *(_DWORD *)(v44 + 204);
      v798 = (-1640531535 * *(_DWORD *)v994) >> -(char)*(_DWORD *)(v44 + 200);
      v810 = *(_QWORD *)(v44 + 48);
      v821 = *(_DWORD *)(v810 + 4 * v798);
      v928 = (char *)(v33 + v37);
      v919 = (_QWORD *)(v32 + v37);
      v896 = *(_QWORD *)(v44 + 64);
      v965 = (unsigned int *)(v896 + 8 * (v34 & ~v35));
      v959 = v965 + 1;
      v833 = v34 + 9;
      v1013 = 0;
      if (v23)
        v47 = 3;
      else
        v47 = 4;
      v48 = v994 + 3;
      if (v23)
        v49 = 0;
      else
        v49 = -1;
      v996 = (v983 - 1);
      v945 = v33;
      v955 = v32;
      v935 = v37;
      v988 = v31;
      v886 = (_DWORD)v994 - v32;
      v863 = v34 - v37;
      v875 = v40;
      v851 = v47;
      do
      {
        if (v45 == 3)
        {
          v50 = *a3 - 1;
          v51 = v34 - v50;
          v52 = *a3 - 2;
          if (v52 >= v42)
            goto LABEL_47;
        }
        else
        {
          v50 = a3[v45];
          v51 = v34 - v50;
          v52 = v50 - 1;
          if (v50 - 1 >= v42)
          {
LABEL_47:
            v53 = v52 < v43 && v37 + ~v51 >= 3;
            if (!v53)
              goto LABEL_44;
            v54 = v33 + v51;
            if (((*(_DWORD *)v54 ^ *(_DWORD *)v15) & 0xFFFFFF) != 0)
              goto LABEL_44;
            v55 = v48;
            v56 = v26;
            v57 = v49;
            v58 = ZSTD_count_2segments(v55, (char *)(v54 + 3), v16, v928, v919);
            v47 = v851;
            v49 = v57;
            v48 = v994 + 3;
            v34 = v886;
            v31 = v988;
            v37 = v935;
            v33 = v945;
            v32 = v955;
            v26 = v56;
            v15 = v994;
            v16 = (unint64_t)v1005;
            v59 = v58 + 3;
            v42 = v863;
            v40 = v875;
            v60 = v59;
            if (v996 >= v59)
              goto LABEL_44;
            goto LABEL_61;
          }
        }
        if (v51 < v40 || ((*(_DWORD *)&v15[-v50] ^ *(_DWORD *)v15) & 0xFFFFFF) != 0)
          goto LABEL_44;
        v63 = -(uint64_t)v50;
        v64 = (char *)v48 - v50;
        if (v1006 <= (unint64_t)v48)
        {
          v66 = (char *)v48;
          if ((unint64_t)v48 < v987)
          {
LABEL_69:
            if (*(_DWORD *)v64 == *(_DWORD *)v66)
            {
              v66 += 4;
              v64 += 4;
            }
          }
LABEL_71:
          if ((unint64_t)v66 >= v986)
          {
            if ((unint64_t)v66 >= v16)
              goto LABEL_79;
          }
          else
          {
            if (*(unsigned __int16 *)v64 == *(unsigned __int16 *)v66)
            {
              v66 += 2;
              v64 += 2;
            }
            if ((unint64_t)v66 >= v16)
            {
LABEL_79:
              v59 = (_DWORD)v66 - (_DWORD)v48 + 3;
              v60 = v59;
              if (v996 >= v59)
                goto LABEL_44;
LABEL_61:
              v62 = &v1007[2 * v26];
              *v62 = v45 + v49;
              v62[1] = v59;
              v26 = (v26 + 1);
              if (v59 <= v31)
              {
                v996 = v60;
                if (&v15[v60] != (unsigned __int8 *)v16)
                  goto LABEL_44;
              }
              goto LABEL_494;
            }
          }
          if (*v64 == *v66)
            LODWORD(v66) = (_DWORD)v66 + 1;
          goto LABEL_79;
        }
        v65 = *v48 ^ *(_QWORD *)v64;
        if (v65)
        {
          v59 = (__clz(__rbit64(v65)) >> 3) + 3;
          v60 = v59;
          if (v996 >= v59)
            goto LABEL_44;
          goto LABEL_61;
        }
        v67 = 0;
        do
        {
          v66 = &v46[v67];
          if ((unint64_t)&v46[v67] >= v1006)
          {
            v64 = &v66[v63];
            if ((unint64_t)v66 < v987)
              goto LABEL_69;
            goto LABEL_71;
          }
          v68 = *(_QWORD *)&v46[v63 + v67];
          v67 += 8;
          v69 = *(_QWORD *)v66 ^ v68;
        }
        while (!v69);
        v59 = v67 + (__clz(__rbit64(v69)) >> 3) + 3;
        v60 = v59;
        if (v996 < v59)
          goto LABEL_61;
LABEL_44:
        ++v45;
      }
      while (v45 < v47);
      if (v996 > 2)
      {
        v12 = (uint64_t)v1007;
        goto LABEL_435;
      }
      v7 = v964;
      v185 = *(_QWORD *)(v964 + 56);
      v186 = *(_DWORD *)v15;
      v187 = 32 - *(_DWORD *)(v964 + 40);
      v12 = (uint64_t)v1007;
      if (v752 < v34)
      {
        v188 = v752;
        do
        {
          *(_DWORD *)(v185 + 4 * ((900185344 * *(_DWORD *)(v32 + v188)) >> v187)) = v188;
          ++v188;
        }
        while (v34 != v188);
      }
      v189 = *(unsigned int *)(v185 + 4 * ((900185344 * v186) >> v187));
      v190 = v34 - v189;
      if (v189 < v975 || (v34 - v189) >> 18 != 0)
      {
        v752 = v34;
        v15 = v994;
        goto LABEL_435;
      }
      v15 = v994;
      if (v189 >= v37)
      {
        v738 = (_DWORD *)(v32 + v189);
        if (v1006 <= (unint64_t)v994)
        {
          v740 = v994;
          if ((unint64_t)v994 < v987)
          {
LABEL_1191:
            if (*v738 == *(_DWORD *)v740)
            {
              v740 += 4;
              ++v738;
            }
          }
        }
        else
        {
          v739 = *(_QWORD *)v994 ^ *(_QWORD *)v738;
          if (v739)
          {
            v278 = __clz(__rbit64(v739)) >> 3;
            v752 = v34;
            if (v278 >= 3)
              goto LABEL_1202;
            goto LABEL_435;
          }
          v742 = 0;
          v743 = v994 + 8;
          while (1)
          {
            v744 = &v743[v742 / 8];
            if ((unint64_t)&v743[v742 / 8] >= v1006)
              break;
            v745 = *(_QWORD *)(v32 + v189 + 8 + v742);
            v742 += 8;
            v746 = *v744 ^ v745;
            if (v746)
            {
              v278 = v742 + (__clz(__rbit64(v746)) >> 3);
              v15 = v994;
              v752 = v34;
              if (v278 >= 3)
                goto LABEL_1202;
              goto LABEL_435;
            }
          }
          v15 = v994;
          v740 = &v994[v742 + 8];
          v738 = (_DWORD *)(v32 + v189 + v742 + 8);
          if ((unint64_t)v740 < v987)
            goto LABEL_1191;
        }
        if ((unint64_t)v740 >= v986)
        {
          if ((unint64_t)v740 >= v16)
            goto LABEL_1201;
        }
        else
        {
          if (*(unsigned __int16 *)v738 == *(unsigned __int16 *)v740)
          {
            v740 += 2;
            v738 = (_DWORD *)((char *)v738 + 2);
          }
          if ((unint64_t)v740 >= v16)
          {
LABEL_1201:
            v278 = v740 - v15;
            v752 = v34;
            if ((unint64_t)(v740 - v15) < 3)
              goto LABEL_435;
            goto LABEL_1202;
          }
        }
        if (*(unsigned __int8 *)v738 == *v740)
          ++v740;
        goto LABEL_1201;
      }
      v277 = v26;
      v278 = ZSTD_count_2segments(v994, (char *)(v33 + v189), v16, v928, v919);
      v34 = v886;
      v31 = v988;
      v37 = v935;
      v33 = v945;
      v32 = v955;
      v26 = v277;
      v15 = v994;
      v16 = (unint64_t)v1005;
      v752 = v886;
      if (v278 < 3)
        goto LABEL_435;
LABEL_1202:
      *v1007 = v190 + 2;
      v1007[1] = v278;
      if (v278 > v31 || &v15[v278] == (unsigned __int8 *)v16)
      {
        v256 = v34 + 1;
        LODWORD(v26) = 1;
        v752 = v34;
        goto LABEL_438;
      }
      v26 = 1;
      v752 = v34;
      v996 = v278;
LABEL_435:
      *(_DWORD *)(v810 + 4 * v798) = v34;
      v254 = v821;
      if (v821 < v975)
      {
        v255 = v833;
        goto LABEL_437;
      }
      v257 = 0;
      v258 = 0;
      v259 = ~(-1 << v787);
      v870 = v34 + 2;
      v858 = v15 + 8;
      v848 = v32 + 8;
      v255 = v833;
      while (2)
      {
        v992 = v259;
        if (v258 >= v257)
          v260 = v257;
        else
          v260 = v258;
        v261 = (char *)&v15[v260];
        if (v260 + v254 >= v37)
        {
          v266 = v32 + v254;
          v268 = (_DWORD *)(v266 + v260);
          if (v1006 <= (unint64_t)v261)
          {
            v270 = &v15[v260];
            v18 = v985;
            if ((unint64_t)v261 < v987)
            {
LABEL_459:
              if (*v268 == *(_DWORD *)v270)
              {
                v270 += 4;
                ++v268;
              }
            }
          }
          else
          {
            v269 = *(_QWORD *)v261 ^ *(_QWORD *)v268;
            if (v269)
            {
              v18 = v985;
              v265 = (__clz(__rbit64(v269)) >> 3) + v260;
              if (v265 <= v996)
                goto LABEL_470;
              goto LABEL_449;
            }
            v272 = 0;
            v273 = (char *)v858 + v260;
            while (1)
            {
              v274 = &v273[v272];
              if ((unint64_t)&v273[v272] >= v1006)
                break;
              v275 = *(_QWORD *)(v848 + v260 + v254 + v272);
              v272 += 8;
              v276 = *(_QWORD *)v274 ^ v275;
              if (v276)
              {
                v18 = v985;
                v265 = v272 + (__clz(__rbit64(v276)) >> 3) + v260;
                if (v265 > v996)
                  goto LABEL_449;
                goto LABEL_470;
              }
            }
            v270 = (unsigned __int8 *)v858 + v260 + v272;
            v268 = (_DWORD *)(v848 + v260 + v254 + v272);
            v18 = v985;
            if ((unint64_t)v270 < v987)
              goto LABEL_459;
          }
          if ((unint64_t)v270 >= v986)
          {
            if ((unint64_t)v270 >= v16)
              goto LABEL_469;
          }
          else
          {
            if (*(unsigned __int16 *)v268 == *(unsigned __int16 *)v270)
            {
              v270 += 2;
              v268 = (_DWORD *)((char *)v268 + 2);
            }
            if ((unint64_t)v270 >= v16)
            {
LABEL_469:
              v265 = v270 - (unsigned __int8 *)v261 + v260;
              if (v265 <= v996)
                goto LABEL_470;
LABEL_449:
              if (v265 > v255 - v254)
                v255 = v254 + v265;
              v267 = (_DWORD *)(v12 + 8 * v26);
              *v267 = v870 - v254;
              v267[1] = v265;
              v26 = (v26 + 1);
              v16 = (unint64_t)v1005;
              v15 = v994;
              if (v265 > 0x1000)
                goto LABEL_437;
              v996 = v265;
              if (&v994[v265] == v1005)
                goto LABEL_437;
              goto LABEL_471;
            }
          }
          if (*(unsigned __int8 *)v268 == *v270)
            ++v270;
          goto LABEL_469;
        }
        v262 = v33 + v254;
        v881 = v260;
        v891 = v257;
        v263 = v26;
        v264 = ZSTD_count_2segments(v261, (char *)(v262 + v260), v16, v928, v919);
        v257 = v891;
        v37 = v935;
        v33 = v945;
        v32 = v955;
        v26 = v263;
        v265 = v264 + v881;
        if (v264 + v881 + v254 >= v935)
          v266 = v955 + v254;
        else
          v266 = v262;
        v12 = (uint64_t)v1007;
        v18 = v985;
        if (v265 > v996)
          goto LABEL_449;
LABEL_470:
        v16 = (unint64_t)v1005;
        v15 = v994;
LABEL_471:
        v271 = (unsigned int *)(v896 + 8 * (v254 & v912));
        if (*(unsigned __int8 *)(v266 + v265) < v15[v265])
        {
          *v965 = v254;
          if (v254 <= v904)
          {
            v965 = (unsigned int *)&v1013;
            goto LABEL_437;
          }
          ++v271;
          v258 = v265;
          v965 = v271;
          v259 = v992 - 1;
          if (!v992)
            goto LABEL_437;
          goto LABEL_440;
        }
        *v959 = v254;
        if (v254 > v904)
        {
          v257 = v265;
          v959 = (unsigned int *)(v896 + 8 * (v254 & v912));
          v259 = v992 - 1;
          if (!v992)
            goto LABEL_437;
LABEL_440:
          v254 = *v271;
          if (*v271 < v975)
            goto LABEL_437;
          continue;
        }
        break;
      }
      v959 = (unsigned int *)&v1013;
LABEL_437:
      *v959 = 0;
      v7 = v964;
      *v965 = 0;
      v256 = v255 - 8;
LABEL_438:
      v27 = v983;
      *(_DWORD *)(v7 + 36) = v256;
LABEL_495:
      v279 = (unint64_t)(v1005 - 32);
      v1009 = v26;
      v280 = v15;
      ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1010, v12, &v1009, (_DWORD)v15 - (_DWORD)v974, v16 - (_DWORD)v15);
      LODWORD(v281) = v1009;
      if (v1009)
      {
        v11[4] = *a3;
        v11[5] = a3[1];
        v11[6] = a3[2];
        v11[2] = 0;
        v11[3] = v23;
        v282 = *(_DWORD *)(v7 + 160);
        if (v282 != 1)
        {
          v16 = (unint64_t)v1005;
          if (v23 < 0x40)
            v288 = ZSTD_LLcode_LL_Code[v23];
          else
            v288 = 50 - __clz(v23);
          v289 = 4 * v288;
          v290 = *(_DWORD *)(v7 + 148);
          v291 = v290 + (*(unsigned int *)((char *)LL_bits + v289) << 8);
          v292 = *(_DWORD **)(v7 + 88);
          LODWORD(v289) = *(_DWORD *)((char *)v292 + v289) + 1;
          v293 = __clz(v289);
          v284 = v291 - (((_DWORD)v289 << 8 >> (v293 ^ 0x1F)) + ((v293 ^ 0x1F) << 8));
          *v11 = v284;
          v285 = (v281 - 1);
          v286 = *(_DWORD *)(v12 + 8 * v285 + 4);
          if (v286 <= v850)
          {
            v296 = *v292 + 1;
            v297 = __clz(v296) ^ 0x1F;
            v287 = v290 - ((v296 << 8 >> v297) + (v297 << 8));
            goto LABEL_507;
          }
LABEL_505:
          v294 = 0;
          v295 = *(_DWORD *)(v12 + 8 * v285);
          goto LABEL_1103;
        }
        v283 = __clz(v23 + 1);
        v284 = ((v23 + 1) << 8 >> (v283 ^ 0x1F)) + ((v283 ^ 0x1F) << 8);
        *v11 = v284;
        v285 = (v281 - 1);
        v286 = *(_DWORD *)(v12 + 8 * v285 + 4);
        v16 = (unint64_t)v1005;
        if (v286 > v850)
          goto LABEL_505;
        v287 = 256;
LABEL_507:
        v298 = v11 + 14;
        v299 = (v983 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v298 - 7) = 0x40000000;
          *v298 = 0x40000000;
          v298 += 14;
          v299 -= 2;
        }
        while (v299);
        if (v983 - 1 != ((v983 - 1) & 0xFFFFFFFFFFFFFFFELL))
        {
          v300 = v748;
          v301 = v749;
          do
          {
            *v301 = 0x40000000;
            v301 += 7;
            --v300;
          }
          while (v300);
        }
        v302 = 0;
        v303 = v287 + v284;
        if (v281 <= 1)
          v281 = 1;
        else
          v281 = v281;
        v304 = v27;
        do
        {
          v305 = (unsigned int *)(v12 + 8 * v302);
          v306 = v305[1];
          if (v304 <= v306)
          {
            v307 = *v305;
            v308 = __clz(v307 + 1) ^ 0x1F;
            if (v282 == 1)
            {
              v309 = (v304 << 8) - 512;
              do
              {
                v310 = __clz(v304 - 2);
                v311 = &v11[7 * v304];
                v311[2] = v304;
                v311[3] = v23;
                *v311 = (v309 >> (v310 ^ 0x1F)) + (((v310 ^ 0x1F) + (_DWORD)v308) << 8) + v303 + 4096;
                v311[1] = v307;
                ++v304;
                v309 += 256;
              }
              while (v304 <= v306);
            }
            else
            {
              v313 = *(_QWORD *)(v7 + 96);
              v312 = *(_QWORD *)(v7 + 104);
              v314 = *(_DWORD *)(v7 + 156) + *(_DWORD *)(v7 + 152) + 51;
              do
              {
                v322 = v304 - 3;
                if (v304 - 3 < 0x80)
                  v315 = ZSTD_MLcode_ML_Code[v322];
                else
                  v315 = 67 - __clz(v322);
                v316 = *(_DWORD *)(v312 + 4 * v308) + 1;
                v317 = __clz(v316);
                v318 = 4 * v315;
                v319 = *(unsigned int *)((char *)ML_bits + v318);
                LODWORD(v318) = *(_DWORD *)(v313 + v318) + 1;
                v320 = __clz(v318) ^ 0x1F;
                LODWORD(v318) = v303
                              + v314
                              - (v316 << 8 >> (v317 ^ 0x1F))
                              - ((_DWORD)v318 << 8 >> v320)
                              + (((_DWORD)v308 + v319 - (v317 ^ 0x1F) - v320) << 8);
                v321 = &v11[7 * v304];
                v321[2] = v304;
                v321[3] = v23;
                *v321 = v318;
                v321[1] = v307;
                ++v304;
              }
              while (v304 <= v306);
            }
          }
          ++v302;
        }
        while (v302 != v281);
        LODWORD(v323) = v304 - 1;
        v324 = v994;
        if (v304 == 1)
        {
LABEL_1099:
          v671 = &v11[7 * v323];
          v295 = v671[1];
          v770 = *v671;
          v286 = v671[2];
          v23 = v671[3];
          v1014 = *((_QWORD *)v671 + 2);
          v1015 = v671[6];
          if (v323 >= v23 + v286)
            v294 = v323 - (v23 + v286);
          else
            v294 = 0;
          v12 = (uint64_t)v1007;
          if (!v286)
            goto LABEL_1183;
          goto LABEL_1103;
        }
        v768 = v994 + 8;
        v325 = (_DWORD)v994 + 1;
        v326 = 1;
        while (2)
        {
          v327 = v326 - 1;
          v328 = &v11[7 * v326 - 7];
          if (v328[2])
            v329 = 1u;
          else
            v329 = v11[7 * v327 + 3] + 1;
          v330 = v326;
          v331 = &v324[v326];
          v332 = *v328;
          v333 = *(_DWORD *)(v7 + 160);
          if (*(_DWORD *)(v7 + 176) == 2)
          {
            v334 = v332 + 2048;
            if (v333 != 1)
            {
              if (v329 >= 0x40)
                goto LABEL_538;
LABEL_544:
              v335 = ZSTD_LLcode_LL_Code[v329];
              v336 = v329 - 1;
              if (v329 - 1 >= 0x40)
                goto LABEL_545;
LABEL_539:
              v337 = ZSTD_LLcode_LL_Code[v336];
              goto LABEL_546;
            }
LABEL_542:
            v338 = __clz(v329 + 1);
            v339 = ((v329 + 1) << 8 >> (v338 ^ 0x1F)) + ((v338 ^ 0x1F) << 8);
            v340 = __clz(v329) ^ 0x1F;
            v341 = -((v329 << 8 >> v340) + (v340 << 8));
          }
          else
          {
            if (v333 == 1)
            {
              v334 = v332 + 1536;
              goto LABEL_542;
            }
            v342 = *(_DWORD *)(*(_QWORD *)(v7 + 80) + 4 * *(v331 - 1)) + 1;
            v343 = __clz(v342);
            v334 = *(_DWORD *)(v7 + 144) - ((v342 << 8 >> (v343 ^ 0x1F)) + ((v343 ^ 0x1F) << 8)) + v332;
            if (v329 < 0x40)
              goto LABEL_544;
LABEL_538:
            v335 = 50 - __clz(v329);
            v336 = v329 - 1;
            if (v329 - 1 < 0x40)
              goto LABEL_539;
LABEL_545:
            v337 = 50 - __clz(v336);
LABEL_546:
            v344 = 4 * v335;
            v345 = *(unsigned int *)((char *)LL_bits + v344);
            v346 = *(_DWORD *)(v7 + 148);
            v347 = *(_QWORD *)(v7 + 88);
            LODWORD(v344) = *(_DWORD *)(v347 + v344) + 1;
            v348 = __clz(v344) ^ 0x1F;
            v339 = v346 - ((_DWORD)v344 << 8 >> v348) + ((v345 - v348) << 8);
            v349 = 4 * v337;
            v350 = *(unsigned int *)((char *)LL_bits + v349);
            LODWORD(v349) = *(_DWORD *)(v347 + v349) + 1;
            LODWORD(v347) = __clz(v349) ^ 0x1F;
            v341 = ((_DWORD)v349 << 8 >> v347) - v346 + (((_DWORD)v347 - v350) << 8);
          }
          v351 = v334 + v339 + v341;
          v352 = &v11[7 * v330];
          v355 = *v352;
          v353 = v352 + 2;
          v354 = v355;
          v324 = v994;
          if (v351 <= v355)
          {
            v362 = &v11[7 * v330];
            v362[1] = 0;
            v362[2] = 0;
            v362[3] = v329;
            *v362 = v351;
            v354 = v351;
LABEL_552:
            v363 = 0;
            v364 = &v11[7 * v330];
            v365 = &v11[7 * v327];
            *((_QWORD *)v364 + 2) = *((_QWORD *)v365 + 2);
            v364[6] = v365[6];
            v366 = 1;
            if ((unint64_t)v331 <= v984)
              goto LABEL_566;
LABEL_531:
            v326 = v330 + 1;
            ++v325;
            if ((int)v330 + 1 > v323)
              goto LABEL_1099;
            continue;
          }
          break;
        }
        if (!*v353)
          goto LABEL_552;
        v356 = &v11[7 * (v330 - *v353) + 4];
        v357 = v11[7 * v330 + 1];
        if (v357 < 3)
        {
          if (v11[7 * v330 + 3])
            v367 = v11[7 * v330 + 1];
          else
            v367 = v357 + 1;
          if (v367)
          {
            if (v367 == 3)
            {
              v359 = *v356;
              v361 = v359 - 1;
            }
            else
            {
              v361 = v356[v367];
              v359 = *v356;
            }
            v688 = v367 > 1;
            v369 = 2;
            if (v688)
              v369 = 1;
            v358 = &v356[v369];
          }
          else
          {
            v368 = *(_QWORD *)v356;
            v358 = &v11[7 * (v330 - *v353) + 6];
            v361 = v368;
            v359 = HIDWORD(v368);
          }
        }
        else
        {
          v360 = *v356;
          v358 = &v11[7 * (v330 - *v353) + 5];
          v359 = v360;
          v361 = v357 - 2;
        }
        v366 = 0;
        v370 = *v358;
        v371 = v361 | (v359 << 32);
        v372 = &v11[7 * v330];
        *((_QWORD *)v372 + 2) = v371;
        v372[6] = v370;
        v363 = 1;
        if ((unint64_t)v331 > v984)
          goto LABEL_531;
LABEL_566:
        if ((_DWORD)v330 == (_DWORD)v323)
          goto LABEL_1099;
        v982 = v325;
        if (v366)
        {
          v23 = v11[7 * v330 + 3];
          if (*(_DWORD *)(v7 + 160) != 1)
            goto LABEL_569;
LABEL_571:
          v375 = 256;
        }
        else
        {
          v23 = 0;
          if (*(_DWORD *)(v7 + 160) == 1)
            goto LABEL_571;
LABEL_569:
          v373 = **(_DWORD **)(v7 + 88) + 1;
          v374 = __clz(v373) ^ 0x1F;
          v375 = *(_DWORD *)(v7 + 148) - ((v373 << 8 >> v374) + (v374 << 8));
        }
        v958 = v375;
        v962 = v354;
        v849 = v353;
        v1009 = 0;
        v376 = *(_QWORD *)(v7 + 8);
        v377 = *(unsigned int *)(v7 + 36);
        if (v376 + v377 > (unint64_t)v331)
        {
          LODWORD(v378) = 0;
          goto LABEL_924;
        }
        v923 = v363;
        v379 = *(_DWORD *)(v7 + 208);
        v380 = v7;
        v993 = v331;
        for (j = (_DWORD)v331 - v376; v377 < j; LODWORD(v377) = v382 + v377)
        {
          v382 = ZSTD_insertBt1(v380, (_QWORD *)(v376 + v377), v16, v379, 1);
          v16 = (unint64_t)v1005;
        }
        v1000 = &v11[7 * v330 + 4];
        *(_DWORD *)(v380 + 36) = j;
        if ((v379 - 6) < 2)
        {
          v378 = 0;
          if (*(_DWORD *)(v380 + 212) >= 0xFFFu)
            v418 = 4095;
          else
            v418 = *(_DWORD *)(v380 + 212);
          v331 = v993;
          v419 = v993 + 4;
          v754 = *(_DWORD *)(v380 + 204);
          v758 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v993) >> -(char)*(_DWORD *)(v380 + 200);
          v762 = *(_QWORD *)(v380 + 48);
          v766 = *(_DWORD *)(v762 + 4 * v758);
          v420 = *(_QWORD *)(v380 + 8);
          v421 = (_DWORD)v993 - v420;
          v422 = -1 << (*(_DWORD *)(v380 + 196) - 1);
          v423 = *(unsigned int *)(v380 + 24);
          v969 = *(_QWORD *)(v380 + 16);
          v893 = v420;
          v909 = (_QWORD *)(v420 + v423);
          v917 = (char *)(v969 + v423);
          v424 = (_DWORD)v993 - v420 + v422 + 1;
          if (v421 < ~v422)
            v424 = 0;
          v872 = v424;
          v883 = ~v422;
          v425 = 1 << *(_DWORD *)(v380 + 192);
          if (v421 - *(_DWORD *)(v380 + 28) > v425 && *(_DWORD *)(v380 + 32) == 0)
            v427 = v421 - v425;
          else
            v427 = *(_DWORD *)(v380 + 28);
          if (v427 <= 1)
            v428 = 1;
          else
            v428 = v427;
          v901 = v428;
          v860 = *(_QWORD *)(v380 + 64);
          v940 = (unsigned int *)(v860 + 8 * (v421 & ~v422));
          v933 = v940 + 1;
          v950 = v421 + 9;
          v1013 = 0;
          v429 = v923;
          if ((_DWORD)v923)
            v430 = 4;
          else
            v430 = 3;
          v431 = v421 - v423;
          v432 = v421 - v427;
          v433 = v923;
          v434 = v923 << 63 >> 63;
          v435 = (v983 - 1);
          v436 = &v11[7 * v330 + 4];
          v925 = v423;
          v839 = v418;
          v826 = v421;
          v815 = v427;
          v803 = v430;
          v791 = v421 - v423;
          v780 = v421 - v427;
          v772 = v429 << 63 >> 63;
          while (1)
          {
            if (v433 == 3)
            {
              v437 = *v436 - 1;
              v438 = v421 - v437;
              v439 = *v436 - 2;
              if (v439 < v431)
                goto LABEL_669;
            }
            else
            {
              v437 = v436[v433];
              v438 = v421 - v437;
              v439 = v437 - 1;
              if (v437 - 1 < v431)
              {
LABEL_669:
                if (v438 < v427 || *(_DWORD *)v331 != *(_DWORD *)&v331[-v437])
                  goto LABEL_657;
                v448 = (_QWORD *)((char *)v419 - v437);
                if (v1006 > (unint64_t)v419)
                {
                  v449 = v993 + 4;
                  v450 = *v419 ^ *v448;
                  if (v450)
                  {
                    v445 = (__clz(__rbit64(v450)) >> 3) + 4;
                    v446 = v445;
                    if (v435 < v445)
                      goto LABEL_690;
                    goto LABEL_657;
                  }
                  do
                  {
                    ++v448;
                    if ((unint64_t)++v449 >= v1006)
                      goto LABEL_682;
                    v451 = *v449 ^ *v448;
                  }
                  while (!v451);
                  v449 = (_QWORD *)((char *)v449 + (__clz(__rbit64(v451)) >> 3));
                  goto LABEL_689;
                }
                v449 = v993 + 4;
LABEL_682:
                if ((unint64_t)v449 >= v987)
                {
                  if ((unint64_t)v449 >= v986)
                    goto LABEL_686;
                }
                else
                {
                  if (*(_DWORD *)v448 == *(_DWORD *)v449)
                  {
                    v449 = (_QWORD *)((char *)v449 + 4);
                    v448 = (_QWORD *)((char *)v448 + 4);
                  }
                  if ((unint64_t)v449 >= v986)
                  {
LABEL_686:
                    if ((unint64_t)v449 < v16)
                      goto LABEL_687;
                    goto LABEL_689;
                  }
                }
                if (*(unsigned __int16 *)v448 == *(unsigned __int16 *)v449)
                {
                  v449 = (_QWORD *)((char *)v449 + 2);
                  v448 = (_QWORD *)((char *)v448 + 2);
                }
                if ((unint64_t)v449 < v16)
                {
LABEL_687:
                  if (*(unsigned __int8 *)v448 == *(unsigned __int8 *)v449)
                    LODWORD(v449) = (_DWORD)v449 + 1;
                }
LABEL_689:
                v445 = (_DWORD)v449 - (_DWORD)v993;
                v446 = v445;
                if (v435 < v445)
                  goto LABEL_690;
                goto LABEL_657;
              }
            }
            if (v439 < v432 && v423 + ~v438 >= 3)
            {
              v441 = v969 + v438;
              if (*(_DWORD *)v331 == *(_DWORD *)v441)
              {
                v442 = v378;
                v443 = v435;
                v444 = ZSTD_count_2segments(v419, (char *)(v441 + 4), v16, v917, v909);
                v436 = &v11[7 * v330 + 4];
                v16 = (unint64_t)v1005;
                LODWORD(v434) = v772;
                v432 = v780;
                v431 = v791;
                v430 = v803;
                v427 = v815;
                v421 = v826;
                v418 = v839;
                v435 = v443;
                v423 = v925;
                v378 = v442;
                v331 = v993;
                v445 = v444 + 4;
                v446 = (v444 + 4);
                if (v443 < v446)
                {
LABEL_690:
                  v452 = &v1007[2 * v378];
                  *v452 = v433 + v434;
                  v452[1] = v445;
                  v378 = (v378 + 1);
                  if (v445 > v418)
                    goto LABEL_923;
                  v435 = v446;
                  if (&v331[v446] == (unsigned __int8 *)v16)
                    goto LABEL_923;
                }
              }
            }
LABEL_657:
            if (++v433 >= v430)
            {
              *(_DWORD *)(v762 + 4 * v758) = v421;
              v453 = v766;
              if (v766 < v901)
                goto LABEL_699;
              v529 = 0;
              v530 = 0;
              v531 = ~(-1 << v754);
              v794 = v421 + 2;
              v783 = (char *)v768 + v330;
              v775 = v893 + 8;
              while (1)
              {
                v1001 = v531;
                v532 = v530 >= v529 ? v529 : v530;
                v533 = &v331[v532];
                if (v532 + v453 >= v423)
                  break;
                v829 = v530;
                v842 = v529;
                v806 = v532;
                v534 = v378;
                v535 = v435;
                v536 = ZSTD_count_2segments(v533, (char *)(v969 + v453 + v532), v16, v917, v909);
                v530 = v829;
                v529 = v842;
                v435 = v535;
                v423 = v925;
                v378 = v534;
                v537 = v536 + v806;
                v538 = v969 + v453;
                if (v536 + v806 + v453 >= v925)
                  v538 = v893 + v453;
                if (v537 > v535)
                  goto LABEL_836;
LABEL_857:
                v16 = (unint64_t)v1005;
                v331 = v993;
LABEL_858:
                v544 = (unsigned int *)(v860 + 8 * (v453 & v883));
                if (*(unsigned __int8 *)(v538 + v537) >= v331[v537])
                {
                  *v933 = v453;
                  if (v453 <= v872)
                  {
                    v933 = (unsigned int *)&v1013;
                    goto LABEL_699;
                  }
                  v529 = v537;
                  v933 = (unsigned int *)(v860 + 8 * (v453 & v883));
                  v531 = v1001 - 1;
                  if (!v1001)
                    goto LABEL_699;
                }
                else
                {
                  *v940 = v453;
                  if (v453 <= v872)
                  {
                    v940 = (unsigned int *)&v1013;
                    goto LABEL_699;
                  }
                  ++v544;
                  v530 = v537;
                  v940 = v544;
                  v531 = v1001 - 1;
                  if (!v1001)
                    goto LABEL_699;
                }
                v453 = *v544;
                if (*v544 < v901)
                {
LABEL_699:
                  *v933 = 0;
                  *v940 = 0;
                  v454 = v950 - 8;
                  goto LABEL_922;
                }
              }
              v538 = v893 + v453;
              v541 = (_QWORD *)(v538 + v532);
              if (v1006 <= (unint64_t)v533)
              {
                v543 = (char *)&v331[v532];
                if ((unint64_t)v533 >= v987)
                  goto LABEL_848;
              }
              else
              {
                v542 = *(_QWORD *)v533 ^ *v541;
                if (v542)
                {
                  v537 = (__clz(__rbit64(v542)) >> 3) + v532;
                  if (v537 <= v435)
                    goto LABEL_857;
                  goto LABEL_836;
                }
                v545 = 0;
                v546 = &v783[v532];
                while (1)
                {
                  v547 = &v546[v545];
                  if ((unint64_t)&v546[v545] >= v1006)
                    break;
                  v548 = *(_QWORD *)(v775 + v532 + v453 + v545);
                  v545 += 8;
                  v549 = *(_QWORD *)v547 ^ v548;
                  if (v549)
                  {
                    v537 = v545 + (__clz(__rbit64(v549)) >> 3) + v532;
                    if (v537 <= v435)
                      goto LABEL_857;
LABEL_836:
                    v539 = v950;
                    if (v537 > v950 - v453)
                      v539 = v453 + v537;
                    v950 = v539;
                    v540 = &v1007[2 * v378];
                    *v540 = v794 - v453;
                    v540[1] = v537;
                    v378 = (v378 + 1);
                    v16 = (unint64_t)v1005;
                    v331 = v993;
                    if (v537 > 0x1000)
                      goto LABEL_699;
                    v435 = v537;
                    if (&v993[v537] == v1005)
                      goto LABEL_699;
                    goto LABEL_858;
                  }
                }
                v543 = &v783[v532 + v545];
                v541 = (_QWORD *)(v775 + v532 + v453 + v545);
                if ((unint64_t)v543 >= v987)
                {
LABEL_848:
                  if ((unint64_t)v543 >= v986)
                  {
                    if ((unint64_t)v543 >= v16)
                      goto LABEL_856;
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v541 == *(unsigned __int16 *)v543)
                    {
                      v543 += 2;
                      v541 = (_QWORD *)((char *)v541 + 2);
                    }
                    if ((unint64_t)v543 >= v16)
                    {
LABEL_856:
                      v537 = v543 - (char *)v331;
                      if (v537 <= v435)
                        goto LABEL_857;
                      goto LABEL_836;
                    }
                  }
                  if (*(unsigned __int8 *)v541 == *v543)
                    ++v543;
                  goto LABEL_856;
                }
              }
              if (*(_DWORD *)v541 == *(_DWORD *)v543)
              {
                v543 += 4;
                v541 = (_QWORD *)((char *)v541 + 4);
              }
              goto LABEL_848;
            }
          }
        }
        v331 = v993;
        if (v379 == 5)
        {
          v378 = 0;
          if (*(_DWORD *)(v380 + 212) >= 0xFFFu)
            v455 = 4095;
          else
            v455 = *(_DWORD *)(v380 + 212);
          v456 = v993 + 4;
          v755 = *(_DWORD *)(v380 + 204);
          v759 = (0xCF1BBCDCBB000000 * *(_QWORD *)v993) >> -(char)*(_DWORD *)(v380 + 200);
          v763 = *(_QWORD *)(v380 + 48);
          v941 = *(_DWORD *)(v763 + 4 * v759);
          v457 = *(_QWORD *)(v380 + 8);
          v458 = (_DWORD)v993 - v457;
          v459 = -1 << (*(_DWORD *)(v380 + 196) - 1);
          v460 = *(unsigned int *)(v380 + 24);
          v951 = *(_QWORD *)(v380 + 16);
          v884 = v457;
          v902 = (_QWORD *)(v457 + v460);
          v910 = (char *)(v951 + v460);
          v873 = ~v459;
          v461 = (_DWORD)v993 - v457 + v459 + 1;
          if (v458 < ~v459)
            v461 = 0;
          v861 = v461;
          v462 = 1 << *(_DWORD *)(v380 + 192);
          if (v458 - *(_DWORD *)(v380 + 28) > v462 && *(_DWORD *)(v380 + 32) == 0)
            v464 = v458 - v462;
          else
            v464 = *(_DWORD *)(v380 + 28);
          if (v464 <= 1)
            v465 = 1;
          else
            v465 = v464;
          v894 = v465;
          v840 = *(_QWORD *)(v380 + 64);
          v934 = (unsigned int *)(v840 + 8 * (v458 & ~v459));
          v767 = v458 + 9;
          v1013 = 0;
          v466 = v923;
          if ((_DWORD)v923)
            v467 = 4;
          else
            v467 = 3;
          v468 = v458 - v460;
          v469 = v458 - v464;
          v470 = v923;
          v471 = v923 << 63 >> 63;
          v472 = (v983 - 1);
          v918 = v934 + 1;
          v926 = v460;
          v827 = v458;
          v816 = v464;
          v804 = v455;
          v792 = v458 - v460;
          v781 = v458 - v464;
          v773 = v466 << 63 >> 63;
          while (1)
          {
            if (v470 == 3)
            {
              v473 = *v1000 - 1;
              v474 = v458 - v473;
              v475 = *v1000 - 2;
              if (v475 < v468)
                goto LABEL_730;
            }
            else
            {
              v473 = v1000[v470];
              v474 = v458 - v473;
              v475 = v473 - 1;
              if (v473 - 1 < v468)
              {
LABEL_730:
                if (v474 < v464 || *(_DWORD *)v331 != *(_DWORD *)&v331[-v473])
                  goto LABEL_718;
                v483 = (_QWORD *)((char *)v456 - v473);
                if (v1006 > (unint64_t)v456)
                {
                  v484 = v993 + 4;
                  v485 = *v456 ^ *v483;
                  if (v485)
                  {
                    v480 = (__clz(__rbit64(v485)) >> 3) + 4;
                    v481 = v480;
                    if (v472 < v480)
                      goto LABEL_751;
                    goto LABEL_718;
                  }
                  do
                  {
                    ++v483;
                    if ((unint64_t)++v484 >= v1006)
                      goto LABEL_743;
                    v486 = *v484 ^ *v483;
                  }
                  while (!v486);
                  v484 = (_QWORD *)((char *)v484 + (__clz(__rbit64(v486)) >> 3));
                  goto LABEL_750;
                }
                v484 = v993 + 4;
LABEL_743:
                if ((unint64_t)v484 >= v987)
                {
                  if ((unint64_t)v484 >= v986)
                    goto LABEL_747;
                }
                else
                {
                  if (*(_DWORD *)v483 == *(_DWORD *)v484)
                  {
                    v484 = (_QWORD *)((char *)v484 + 4);
                    v483 = (_QWORD *)((char *)v483 + 4);
                  }
                  if ((unint64_t)v484 >= v986)
                  {
LABEL_747:
                    if ((unint64_t)v484 < v16)
                      goto LABEL_748;
                    goto LABEL_750;
                  }
                }
                if (*(unsigned __int16 *)v483 == *(unsigned __int16 *)v484)
                {
                  v484 = (_QWORD *)((char *)v484 + 2);
                  v483 = (_QWORD *)((char *)v483 + 2);
                }
                if ((unint64_t)v484 < v16)
                {
LABEL_748:
                  if (*(unsigned __int8 *)v483 == *(unsigned __int8 *)v484)
                    LODWORD(v484) = (_DWORD)v484 + 1;
                }
LABEL_750:
                v480 = (_DWORD)v484 - (_DWORD)v993;
                v481 = v480;
                if (v472 < v480)
                  goto LABEL_751;
                goto LABEL_718;
              }
            }
            if (v475 < v469 && v460 + ~v474 >= 3)
            {
              v477 = v951 + v474;
              if (*(_DWORD *)v331 == *(_DWORD *)v477)
              {
                v970 = v472;
                v478 = v378;
                v479 = ZSTD_count_2segments(v456, (char *)(v477 + 4), v16, v910, v902);
                LODWORD(v471) = v773;
                v469 = v781;
                v468 = v792;
                v464 = v816;
                v455 = v804;
                v472 = v970;
                v460 = v926;
                v378 = v478;
                v331 = v993;
                v16 = (unint64_t)v1005;
                v480 = v479 + 4;
                v458 = v827;
                v481 = v480;
                if (v970 < v480)
                {
LABEL_751:
                  v487 = &v1007[2 * v378];
                  *v487 = v470 + v471;
                  v487[1] = v480;
                  v378 = (v378 + 1);
                  if (v480 > v455)
                    goto LABEL_923;
                  v472 = v481;
                  if (&v331[v481] == (unsigned __int8 *)v16)
                    goto LABEL_923;
                }
              }
            }
LABEL_718:
            if (++v470 >= v467)
            {
              *(_DWORD *)(v763 + 4 * v759) = v458;
              v550 = v941;
              if (v941 < v894)
              {
LABEL_920:
                v554 = v767;
                goto LABEL_921;
              }
              v551 = 0;
              v552 = 0;
              v553 = ~(-1 << v755);
              v795 = v458 + 2;
              v784 = (char *)v768 + v330;
              v776 = v884 + 8;
              v554 = v767;
              while (1)
              {
                v1002 = v553;
                if (v552 >= v551)
                  v555 = v551;
                else
                  v555 = v552;
                v556 = v550;
                v557 = &v331[v555];
                if (v555 + v550 < v460)
                {
                  v558 = v951 + v550;
                  v972 = v472;
                  v818 = v552;
                  v830 = v551;
                  v943 = v550;
                  v559 = v378;
                  v807 = v555;
                  v560 = ZSTD_count_2segments(v557, (char *)(v558 + v555), v16, v910, v902);
                  v552 = v818;
                  v551 = v830;
                  v472 = v972;
                  v460 = v926;
                  v378 = v559;
                  v550 = v943;
                  v561 = v560 + v807;
                  if (v560 + v807 + v556 >= v926)
                    v562 = v884 + v556;
                  else
                    v562 = v558;
                  if (v561 > v972)
                    goto LABEL_883;
LABEL_904:
                  v16 = (unint64_t)v1005;
                  v331 = v993;
                  goto LABEL_905;
                }
                v562 = v884 + v550;
                v564 = (_QWORD *)(v562 + v555);
                if (v1006 <= (unint64_t)v557)
                  break;
                v565 = *(_QWORD *)v557 ^ *v564;
                if (v565)
                {
                  v561 = (__clz(__rbit64(v565)) >> 3) + v555;
                  if (v561 <= v472)
                    goto LABEL_904;
                  goto LABEL_883;
                }
                v568 = 0;
                v569 = &v784[v555];
                do
                {
                  v570 = &v569[v568];
                  if ((unint64_t)&v569[v568] >= v1006)
                  {
                    v566 = &v784[v555 + v568];
                    v564 = (_QWORD *)(v776 + v555 + v550 + v568);
                    if ((unint64_t)v566 >= v987)
                      goto LABEL_895;
                    goto LABEL_893;
                  }
                  v571 = *(_QWORD *)(v776 + v555 + v550 + v568);
                  v568 += 8;
                  v572 = *(_QWORD *)v570 ^ v571;
                }
                while (!v572);
                v561 = v568 + (__clz(__rbit64(v572)) >> 3) + v555;
                if (v561 <= v472)
                  goto LABEL_904;
LABEL_883:
                if (v561 > v554 - v550)
                  v554 = v550 + v561;
                v563 = &v1007[2 * v378];
                *v563 = v795 - v550;
                v563[1] = v561;
                v378 = (v378 + 1);
                v16 = (unint64_t)v1005;
                v331 = v993;
                if (v561 > 0x1000)
                  goto LABEL_921;
                v472 = v561;
                if (&v993[v561] == v1005)
                  goto LABEL_921;
LABEL_905:
                v567 = (unsigned int *)(v840 + 8 * (v550 & v873));
                if (*(unsigned __int8 *)(v562 + v561) >= v331[v561])
                {
                  *v918 = v550;
                  if (v550 <= v861)
                  {
LABEL_1067:
                    v918 = (unsigned int *)&v1013;
                    goto LABEL_921;
                  }
                  v551 = v561;
                  v918 = (unsigned int *)(v840 + 8 * (v550 & v873));
                  v553 = v1002 - 1;
                  if (!v1002)
                    goto LABEL_921;
                }
                else
                {
                  *v934 = v550;
                  if (v550 <= v861)
                    goto LABEL_1066;
                  ++v567;
                  v552 = v561;
                  v934 = v567;
                  v553 = v1002 - 1;
                  if (!v1002)
                    goto LABEL_921;
                }
                v550 = *v567;
                if (*v567 < v894)
                  goto LABEL_921;
              }
              v566 = (char *)&v331[v555];
              if ((unint64_t)v557 >= v987)
                goto LABEL_895;
LABEL_893:
              if (*(_DWORD *)v564 == *(_DWORD *)v566)
              {
                v566 += 4;
                v564 = (_QWORD *)((char *)v564 + 4);
              }
LABEL_895:
              if ((unint64_t)v566 >= v986)
              {
                if ((unint64_t)v566 >= v16)
                  goto LABEL_903;
              }
              else
              {
                if (*(unsigned __int16 *)v564 == *(unsigned __int16 *)v566)
                {
                  v566 += 2;
                  v564 = (_QWORD *)((char *)v564 + 2);
                }
                if ((unint64_t)v566 >= v16)
                {
LABEL_903:
                  v561 = v566 - (char *)v331;
                  if (v561 <= v472)
                    goto LABEL_904;
                  goto LABEL_883;
                }
              }
              if (*(unsigned __int8 *)v564 == *v566)
                ++v566;
              goto LABEL_903;
            }
          }
        }
        if (v379 != 3)
        {
          v378 = 0;
          if (*(_DWORD *)(v380 + 212) >= 0xFFFu)
            v488 = 4095;
          else
            v488 = *(_DWORD *)(v380 + 212);
          v489 = v993 + 4;
          v756 = *(_DWORD *)(v380 + 204);
          v760 = (-1640531535 * *(_DWORD *)v993) >> -(char)*(_DWORD *)(v380 + 200);
          v764 = *(_QWORD *)(v380 + 48);
          v942 = *(_DWORD *)(v764 + 4 * v760);
          v490 = *(_QWORD *)(v380 + 8);
          v491 = (_DWORD)v993 - v490;
          v492 = -1 << (*(_DWORD *)(v380 + 196) - 1);
          v493 = *(unsigned int *)(v380 + 24);
          v952 = *(_QWORD *)(v380 + 16);
          v885 = v490;
          v903 = (_QWORD *)(v490 + v493);
          v911 = (char *)(v952 + v493);
          v874 = ~v492;
          v494 = (_DWORD)v993 - v490 + v492 + 1;
          if (v491 < ~v492)
            v494 = 0;
          v841 = v494;
          v495 = 1 << *(_DWORD *)(v380 + 192);
          if (v491 - *(_DWORD *)(v380 + 28) > v495 && *(_DWORD *)(v380 + 32) == 0)
            v497 = v491 - v495;
          else
            v497 = *(_DWORD *)(v380 + 28);
          if (v497 <= 1)
            v498 = 1;
          else
            v498 = v497;
          v895 = v498;
          v862 = *(_QWORD *)(v380 + 64);
          v934 = (unsigned int *)(v862 + 8 * (v491 & ~v492));
          v767 = v491 + 9;
          v1013 = 0;
          v499 = v923;
          if ((_DWORD)v923)
            v500 = 4;
          else
            v500 = 3;
          v501 = v491 - v493;
          v502 = v491 - v497;
          v503 = v923;
          v504 = v923 << 63 >> 63;
          v505 = (v983 - 1);
          v918 = v934 + 1;
          v927 = v493;
          v828 = v491;
          v817 = v497;
          v805 = v488;
          v793 = v491 - v493;
          v782 = v491 - v497;
          v774 = v499 << 63 >> 63;
          while (1)
          {
            if (v503 == 3)
            {
              v506 = *v1000 - 1;
              v507 = v491 - v506;
              v508 = *v1000 - 2;
              if (v508 < v501)
                goto LABEL_789;
            }
            else
            {
              v506 = v1000[v503];
              v507 = v491 - v506;
              v508 = v506 - 1;
              if (v506 - 1 < v501)
              {
LABEL_789:
                if (v507 < v497 || *(_DWORD *)v331 != *(_DWORD *)&v331[-v506])
                  goto LABEL_777;
                v516 = (_QWORD *)((char *)v489 - v506);
                if (v1006 > (unint64_t)v489)
                {
                  v517 = v993 + 4;
                  v518 = *v489 ^ *v516;
                  if (v518)
                  {
                    v513 = (__clz(__rbit64(v518)) >> 3) + 4;
                    v514 = v513;
                    if (v505 < v513)
                      goto LABEL_810;
                    goto LABEL_777;
                  }
                  do
                  {
                    ++v516;
                    if ((unint64_t)++v517 >= v1006)
                      goto LABEL_802;
                    v519 = *v517 ^ *v516;
                  }
                  while (!v519);
                  v517 = (_QWORD *)((char *)v517 + (__clz(__rbit64(v519)) >> 3));
                  goto LABEL_809;
                }
                v517 = v993 + 4;
LABEL_802:
                if ((unint64_t)v517 >= v987)
                {
                  if ((unint64_t)v517 >= v986)
                    goto LABEL_806;
                }
                else
                {
                  if (*(_DWORD *)v516 == *(_DWORD *)v517)
                  {
                    v517 = (_QWORD *)((char *)v517 + 4);
                    v516 = (_QWORD *)((char *)v516 + 4);
                  }
                  if ((unint64_t)v517 >= v986)
                  {
LABEL_806:
                    if ((unint64_t)v517 < v16)
                      goto LABEL_807;
                    goto LABEL_809;
                  }
                }
                if (*(unsigned __int16 *)v516 == *(unsigned __int16 *)v517)
                {
                  v517 = (_QWORD *)((char *)v517 + 2);
                  v516 = (_QWORD *)((char *)v516 + 2);
                }
                if ((unint64_t)v517 < v16)
                {
LABEL_807:
                  if (*(unsigned __int8 *)v516 == *(unsigned __int8 *)v517)
                    LODWORD(v517) = (_DWORD)v517 + 1;
                }
LABEL_809:
                v513 = (_DWORD)v517 - (_DWORD)v993;
                v514 = v513;
                if (v505 < v513)
                  goto LABEL_810;
                goto LABEL_777;
              }
            }
            if (v508 < v502 && v493 + ~v507 >= 3)
            {
              v510 = v952 + v507;
              if (*(_DWORD *)v331 == *(_DWORD *)v510)
              {
                v971 = v505;
                v511 = v378;
                v512 = ZSTD_count_2segments(v489, (char *)(v510 + 4), v16, v911, v903);
                LODWORD(v504) = v774;
                v502 = v782;
                v501 = v793;
                v497 = v817;
                v488 = v805;
                v505 = v971;
                v493 = v927;
                v378 = v511;
                v331 = v993;
                v16 = (unint64_t)v1005;
                v513 = v512 + 4;
                v491 = v828;
                v514 = v513;
                if (v971 < v513)
                {
LABEL_810:
                  v520 = &v1007[2 * v378];
                  *v520 = v503 + v504;
                  v520[1] = v513;
                  v378 = (v378 + 1);
                  if (v513 > v488)
                    goto LABEL_923;
                  v505 = v514;
                  if (&v331[v514] == (unsigned __int8 *)v16)
                    goto LABEL_923;
                }
              }
            }
LABEL_777:
            if (++v503 >= v500)
            {
              *(_DWORD *)(v764 + 4 * v760) = v491;
              v573 = v942;
              if (v942 < v895)
                goto LABEL_920;
              v617 = 0;
              v618 = 0;
              v619 = ~(-1 << v756);
              v796 = v491 + 2;
              v785 = (char *)v768 + v330;
              v777 = v885 + 8;
              v554 = v767;
              while (1)
              {
                v1003 = v619;
                if (v618 >= v617)
                  v620 = v617;
                else
                  v620 = v618;
                v621 = v573;
                v622 = &v331[v620];
                if (v620 + v573 < v493)
                {
                  v623 = v952 + v573;
                  v973 = v505;
                  v819 = v618;
                  v831 = v617;
                  v944 = v573;
                  v624 = v378;
                  v808 = v620;
                  v625 = ZSTD_count_2segments(v622, (char *)(v623 + v620), v16, v911, v903);
                  v618 = v819;
                  v617 = v831;
                  v505 = v973;
                  v493 = v927;
                  v378 = v624;
                  v573 = v944;
                  v626 = v625 + v808;
                  if (v625 + v808 + v621 >= v927)
                    v627 = v885 + v621;
                  else
                    v627 = v623;
                  if (v626 > v973)
                    goto LABEL_980;
LABEL_1001:
                  v16 = (unint64_t)v1005;
                  v331 = v993;
                  goto LABEL_1002;
                }
                v627 = v885 + v573;
                v629 = (_QWORD *)(v627 + v620);
                if (v1006 <= (unint64_t)v622)
                  break;
                v630 = *(_QWORD *)v622 ^ *v629;
                if (v630)
                {
                  v626 = (__clz(__rbit64(v630)) >> 3) + v620;
                  if (v626 <= v505)
                    goto LABEL_1001;
                  goto LABEL_980;
                }
                v633 = 0;
                v634 = &v785[v620];
                do
                {
                  v635 = &v634[v633];
                  if ((unint64_t)&v634[v633] >= v1006)
                  {
                    v631 = &v785[v620 + v633];
                    v629 = (_QWORD *)(v777 + v620 + v573 + v633);
                    if ((unint64_t)v631 >= v987)
                      goto LABEL_992;
                    goto LABEL_990;
                  }
                  v636 = *(_QWORD *)(v777 + v620 + v573 + v633);
                  v633 += 8;
                  v637 = *(_QWORD *)v635 ^ v636;
                }
                while (!v637);
                v626 = v633 + (__clz(__rbit64(v637)) >> 3) + v620;
                if (v626 <= v505)
                  goto LABEL_1001;
LABEL_980:
                if (v626 > v554 - v573)
                  v554 = v573 + v626;
                v628 = &v1007[2 * v378];
                *v628 = v796 - v573;
                v628[1] = v626;
                v378 = (v378 + 1);
                v16 = (unint64_t)v1005;
                v331 = v993;
                if (v626 > 0x1000 || (v505 = v626, &v993[v626] == v1005))
                {
LABEL_921:
                  *v918 = 0;
                  *v934 = 0;
                  v454 = v554 - 8;
LABEL_922:
                  *(_DWORD *)(v964 + 36) = v454;
LABEL_923:
                  v7 = v964;
LABEL_924:
                  v574 = v983;
                  v402 = v11 + 7;
                  goto LABEL_925;
                }
LABEL_1002:
                v632 = (unsigned int *)(v862 + 8 * (v573 & v874));
                if (*(unsigned __int8 *)(v627 + v626) < v331[v626])
                {
                  *v934 = v573;
                  if (v573 > v841)
                  {
                    ++v632;
                    v618 = v626;
                    v934 = v632;
                    v619 = v1003 - 1;
                    if (!v1003)
                      goto LABEL_921;
                    goto LABEL_971;
                  }
LABEL_1066:
                  v934 = (unsigned int *)&v1013;
                  goto LABEL_921;
                }
                *v918 = v573;
                if (v573 <= v841)
                  goto LABEL_1067;
                v617 = v626;
                v918 = (unsigned int *)(v862 + 8 * (v573 & v874));
                v619 = v1003 - 1;
                if (!v1003)
                  goto LABEL_921;
LABEL_971:
                v573 = *v632;
                if (*v632 < v895)
                  goto LABEL_921;
              }
              v631 = (char *)&v331[v620];
              if ((unint64_t)v622 >= v987)
                goto LABEL_992;
LABEL_990:
              if (*(_DWORD *)v629 == *(_DWORD *)v631)
              {
                v631 += 4;
                v629 = (_QWORD *)((char *)v629 + 4);
              }
LABEL_992:
              if ((unint64_t)v631 >= v986)
              {
                if ((unint64_t)v631 >= v16)
                  goto LABEL_1000;
              }
              else
              {
                if (*(unsigned __int16 *)v629 == *(unsigned __int16 *)v631)
                {
                  v631 += 2;
                  v629 = (_QWORD *)((char *)v629 + 2);
                }
                if ((unint64_t)v631 >= v16)
                {
LABEL_1000:
                  v626 = v631 - (char *)v331;
                  if (v626 <= v505)
                    goto LABEL_1001;
                  goto LABEL_980;
                }
              }
              if (*(unsigned __int8 *)v629 == *v631)
                ++v631;
              goto LABEL_1000;
            }
          }
        }
        v378 = 0;
        v750 = (char *)v768 + v330;
        if (*(_DWORD *)(v380 + 212) >= 0xFFFu)
          v383 = 4095;
        else
          v383 = *(_DWORD *)(v380 + 212);
        v384 = *(_QWORD *)(v380 + 8);
        v385 = *(_QWORD *)(v380 + 16);
        v386 = (_DWORD)v993 - v384;
        v387 = v993 + 3;
        v751 = *(_DWORD *)(v380 + 204);
        v753 = (-1640531535 * *(_DWORD *)v993) >> -(char)*(_DWORD *)(v380 + 200);
        v757 = *(_QWORD *)(v380 + 48);
        v761 = *(_DWORD *)(v757 + 4 * v753);
        v388 = -1 << (*(_DWORD *)(v380 + 196) - 1);
        v389 = *(unsigned int *)(v380 + 24);
        v892 = (char *)(v385 + v389);
        v968 = v384;
        v882 = (_QWORD *)(v384 + v389);
        v871 = ~v388;
        v390 = (_DWORD)v993 - v384 + v388 + 1;
        if ((int)v993 - (int)v384 < ~v388)
          v390 = 0;
        v859 = v390;
        v391 = 1 << *(_DWORD *)(v380 + 192);
        if (v386 - *(_DWORD *)(v380 + 28) > v391 && *(_DWORD *)(v380 + 32) == 0)
          v393 = v386 - v391;
        else
          v393 = *(_DWORD *)(v380 + 28);
        if (v393 <= 1)
          v394 = 1;
        else
          v394 = v393;
        v939 = v394;
        v838 = *(_QWORD *)(v380 + 64);
        v916 = (unsigned int *)(v838 + 8 * (v386 & ~v388));
        v908 = v916 + 1;
        v932 = v386 + 9;
        v1013 = 0;
        v395 = v923;
        if ((_DWORD)v923)
          v396 = 4;
        else
          v396 = 3;
        v397 = v386 - v389;
        v398 = v386 - v393;
        v399 = v923;
        v400 = v923 << 63 >> 63;
        v401 = (v983 - 1);
        v402 = v11 + 7;
        v924 = v385;
        v900 = v389;
        v825 = v386;
        v814 = v383;
        v802 = v393;
        v790 = v396;
        v779 = v386 - v389;
        v771 = v386 - v393;
        v765 = v395 << 63 >> 63;
        while (2)
        {
          if (v399 == 3)
          {
            v403 = *v1000 - 1;
            v404 = v386 - v403;
            v405 = *v1000 - 2;
            if (v405 >= v397)
              goto LABEL_600;
LABEL_609:
            if (v404 < v393 || ((*(_DWORD *)&v331[-v403] ^ *(_DWORD *)v331) & 0xFFFFFF) != 0)
              goto LABEL_597;
            v413 = (_QWORD *)((char *)v387 - v403);
            if (v1006 <= (unint64_t)v387)
            {
              v414 = v993 + 3;
            }
            else
            {
              v414 = v993 + 3;
              v415 = *v387 ^ *v413;
              if (v415)
              {
                v410 = (__clz(__rbit64(v415)) >> 3) + 3;
                v411 = v410;
                if (v401 >= v410)
                  goto LABEL_597;
                goto LABEL_631;
              }
              while (1)
              {
                ++v413;
                if ((unint64_t)++v414 >= v1006)
                  break;
                v416 = *v414 ^ *v413;
                if (v416)
                {
                  v410 = (_DWORD)v414 + (__clz(__rbit64(v416)) >> 3) - (_DWORD)v993;
                  v411 = v410;
                  if (v401 >= v410)
                    goto LABEL_597;
                  goto LABEL_631;
                }
              }
            }
            if ((unint64_t)v414 >= v987)
            {
              if ((unint64_t)v414 >= v986)
                goto LABEL_627;
            }
            else
            {
              if (*(_DWORD *)v413 == *(_DWORD *)v414)
              {
                v414 = (_QWORD *)((char *)v414 + 4);
                v413 = (_QWORD *)((char *)v413 + 4);
              }
              if ((unint64_t)v414 >= v986)
              {
LABEL_627:
                if ((unint64_t)v414 < v16)
                  goto LABEL_628;
                goto LABEL_630;
              }
            }
            if (*(unsigned __int16 *)v413 == *(unsigned __int16 *)v414)
            {
              v414 = (_QWORD *)((char *)v414 + 2);
              v413 = (_QWORD *)((char *)v413 + 2);
            }
            if ((unint64_t)v414 < v16)
            {
LABEL_628:
              if (*(unsigned __int8 *)v413 == *(unsigned __int8 *)v414)
                LODWORD(v414) = (_DWORD)v414 + 1;
            }
LABEL_630:
            v410 = (_DWORD)v414 - (_DWORD)v993;
            v411 = v410;
            if (v401 >= v410)
              goto LABEL_597;
            goto LABEL_631;
          }
          v403 = v1000[v399];
          v404 = v386 - v403;
          v405 = v403 - 1;
          if (v403 - 1 < v397)
            goto LABEL_609;
LABEL_600:
          if (v405 < v398 && v389 + ~v404 >= 3)
          {
            v407 = v385 + v404;
            if (((*(_DWORD *)v407 ^ *(_DWORD *)v331) & 0xFFFFFF) == 0)
            {
              v949 = v401;
              v408 = v378;
              v409 = ZSTD_count_2segments(v387, (char *)(v407 + 3), v16, v892, v882);
              LODWORD(v400) = v765;
              v398 = v771;
              v396 = v790;
              v393 = v802;
              v383 = v814;
              v386 = v825;
              v401 = v949;
              v389 = v900;
              v385 = v924;
              v378 = v408;
              v331 = v993;
              v16 = (unint64_t)v1005;
              v410 = v409 + 3;
              v397 = v779;
              v411 = v410;
              if (v949 < v410)
              {
LABEL_631:
                v417 = &v1007[2 * v378];
                *v417 = v399 + v400;
                v417[1] = v410;
                v378 = (v378 + 1);
                if (v410 > v383 || (v401 = v411, &v331[v411] == (unsigned __int8 *)v16))
                {
                  v7 = v964;
                  v574 = v983;
                  goto LABEL_925;
                }
              }
            }
          }
LABEL_597:
          if (++v399 < v396)
            continue;
          break;
        }
        if (v401 > 2)
        {
          v7 = v964;
          v528 = v761;
          goto LABEL_967;
        }
        v7 = v964;
        v521 = *(_QWORD *)(v964 + 56);
        v522 = *(_DWORD *)v331;
        v523 = 32 - *(_DWORD *)(v964 + 40);
        if (v752 < v386)
        {
          v524 = v752;
          do
          {
            *(_DWORD *)(v521 + 4 * ((900185344 * *(_DWORD *)(v968 + v524)) >> v523)) = v524;
            ++v524;
          }
          while (v982 - (_DWORD)v968 != v524);
        }
        v525 = *(unsigned int *)(v521 + 4 * ((900185344 * v522) >> v523));
        v526 = v386 - v525;
        v527 = v525 >= v939 && (v386 - v525) >> 18 == 0;
        v528 = v761;
        if (!v527)
        {
          v752 = v386;
          goto LABEL_967;
        }
        if (v525 < v389)
        {
          v954 = v401;
          v662 = v378;
          v663 = ZSTD_count_2segments(v331, (char *)(v385 + v525), v16, v892, v882);
          v383 = v814;
          v386 = v825;
          v401 = v954;
          v528 = v761;
          v389 = v900;
          v385 = v924;
          v378 = v662;
          v331 = v993;
          v16 = (unint64_t)v1005;
          v752 = v825;
          if (v663 >= 3)
            goto LABEL_1086;
          goto LABEL_967;
        }
        v664 = (_DWORD *)(v968 + v525);
        if (v1006 <= (unint64_t)v331)
        {
          v666 = (char *)v331;
          if ((unint64_t)v331 < v987)
          {
LABEL_1075:
            if (*v664 == *(_DWORD *)v666)
            {
              v666 += 4;
              ++v664;
            }
          }
          goto LABEL_1077;
        }
        v665 = *(_QWORD *)v331 ^ *(_QWORD *)v664;
        if (!v665)
        {
          v668 = 0;
          while (1)
          {
            v666 = &v750[v668];
            if ((unint64_t)&v750[v668] >= v1006)
              break;
            v669 = *(_QWORD *)(v968 + v525 + 8 + v668);
            v668 += 8;
            v670 = *(_QWORD *)v666 ^ v669;
            if (v670)
            {
              v663 = v668 + (__clz(__rbit64(v670)) >> 3);
              v752 = v386;
              if (v663 < 3)
                goto LABEL_967;
              goto LABEL_1086;
            }
          }
          v664 = (_DWORD *)(v968 + v525 + v668 + 8);
          if ((unint64_t)v666 < v987)
            goto LABEL_1075;
LABEL_1077:
          if ((unint64_t)v666 >= v986)
          {
            if ((unint64_t)v666 >= v16)
              goto LABEL_1085;
          }
          else
          {
            if (*(unsigned __int16 *)v664 == *(unsigned __int16 *)v666)
            {
              v666 += 2;
              v664 = (_DWORD *)((char *)v664 + 2);
            }
            if ((unint64_t)v666 >= v16)
            {
LABEL_1085:
              v663 = v666 - (char *)v331;
              v752 = v386;
              if ((unint64_t)(v666 - (char *)v331) >= 3)
                goto LABEL_1086;
              goto LABEL_967;
            }
          }
          if (*(unsigned __int8 *)v664 == *v666)
            ++v666;
          goto LABEL_1085;
        }
        v663 = __clz(__rbit64(v665)) >> 3;
        v752 = v386;
        if (v663 >= 3)
        {
LABEL_1086:
          *v1007 = v526 + 2;
          v1007[1] = v663;
          if (v663 > v383 || &v331[v663] == (unsigned __int8 *)v16)
          {
            LODWORD(v378) = 1;
            v752 = v386;
            v574 = v983;
            *(_DWORD *)(v964 + 36) = v386 + 1;
            goto LABEL_925;
          }
          v378 = 1;
          v752 = v386;
          v401 = v663;
        }
LABEL_967:
        *(_DWORD *)(v757 + 4 * v753) = v386;
        if (v528 < v939)
        {
          v574 = v983;
          goto LABEL_969;
        }
        v638 = 0;
        v639 = 0;
        v640 = ~(-1 << v751);
        v797 = v386 + 2;
        v786 = (char *)v768 + v330;
        v778 = v968 + 8;
        while (2)
        {
          v1004 = v640;
          if (v639 >= v638)
            v641 = v638;
          else
            v641 = v639;
          v642 = v528;
          v643 = &v331[v641];
          if (v641 + v528 >= v389)
          {
            v649 = v968 + v528;
            v652 = (_DWORD *)(v649 + v641);
            if (v1006 <= (unint64_t)v643)
            {
              v654 = (char *)&v331[v641];
              v402 = v11 + 7;
              if ((unint64_t)v643 < v987)
              {
LABEL_1035:
                if (*v652 == *(_DWORD *)v654)
                {
                  v654 += 4;
                  ++v652;
                }
              }
            }
            else
            {
              v653 = *(_QWORD *)v643 ^ *(_QWORD *)v652;
              if (v653)
              {
                v402 = v11 + 7;
                v648 = (__clz(__rbit64(v653)) >> 3) + v641;
                v574 = v983;
                if (v648 <= v401)
                  goto LABEL_1046;
                goto LABEL_1025;
              }
              v656 = v528;
              v657 = 0;
              v658 = &v786[v641];
              while (1)
              {
                v659 = &v658[v657];
                if ((unint64_t)&v658[v657] >= v1006)
                  break;
                v660 = *(_QWORD *)(v778 + v641 + v642 + v657);
                v657 += 8;
                v661 = *(_QWORD *)v659 ^ v660;
                if (v661)
                {
                  v402 = v11 + 7;
                  v528 = v656;
                  v648 = v657 + (__clz(__rbit64(v661)) >> 3) + v641;
                  v574 = v983;
                  if (v648 > v401)
                    goto LABEL_1025;
                  goto LABEL_1046;
                }
              }
              v654 = &v786[v641 + v657];
              v652 = (_DWORD *)(v778 + v641 + v642 + v657);
              v528 = v656;
              v402 = v11 + 7;
              if ((unint64_t)v654 < v987)
                goto LABEL_1035;
            }
            if ((unint64_t)v654 >= v986)
            {
              if ((unint64_t)v654 >= v16)
                goto LABEL_1045;
            }
            else
            {
              if (*(unsigned __int16 *)v652 == *(unsigned __int16 *)v654)
              {
                v654 += 2;
                v652 = (_DWORD *)((char *)v652 + 2);
              }
              if ((unint64_t)v654 >= v16)
              {
LABEL_1045:
                v648 = v654 - (char *)v331;
                v574 = v983;
                if (v648 <= v401)
                  goto LABEL_1046;
LABEL_1025:
                v650 = v932;
                if (v648 > v932 - v528)
                  v650 = v528 + v648;
                v932 = v650;
                v651 = &v1007[2 * v378];
                *v651 = v797 - v528;
                v651[1] = v648;
                v378 = (v378 + 1);
                v16 = (unint64_t)v1005;
                v7 = v964;
                v331 = v993;
                if (v648 > 0x1000)
                  goto LABEL_969;
                v401 = v648;
                if (&v993[v648] == v1005)
                  goto LABEL_969;
                goto LABEL_1047;
              }
            }
            if (*(unsigned __int8 *)v652 == *v654)
              ++v654;
            goto LABEL_1045;
          }
          v809 = v641;
          v820 = v385 + v528;
          v953 = v401;
          v832 = v638;
          v644 = v378;
          v645 = v528;
          v646 = v639;
          v647 = ZSTD_count_2segments(v643, (char *)(v820 + v641), v16, v892, v882);
          v639 = v646;
          v401 = v953;
          v528 = v645;
          v389 = v900;
          v385 = v924;
          v378 = v644;
          v648 = v647 + v809;
          v649 = v820;
          v638 = v832;
          if (v647 + v809 + v642 >= v900)
            v649 = v968 + v642;
          v402 = v11 + 7;
          v574 = v983;
          if (v648 > v953)
            goto LABEL_1025;
LABEL_1046:
          v16 = (unint64_t)v1005;
          v7 = v964;
          v331 = v993;
LABEL_1047:
          v655 = (unsigned int *)(v838 + 8 * (v528 & v871));
          if (*(unsigned __int8 *)(v649 + v648) < v331[v648])
          {
            *v916 = v528;
            if (v528 <= v859)
            {
              v916 = (unsigned int *)&v1013;
              goto LABEL_969;
            }
            ++v655;
            v639 = v648;
            v916 = v655;
            v640 = v1004 - 1;
            if (!v1004)
              goto LABEL_969;
            goto LABEL_1017;
          }
          *v908 = v528;
          if (v528 > v859)
          {
            v638 = v648;
            v908 = (unsigned int *)(v838 + 8 * (v528 & v871));
            v640 = v1004 - 1;
            if (!v1004)
              goto LABEL_969;
LABEL_1017:
            v528 = *v655;
            if (*v655 < v939)
              goto LABEL_969;
            continue;
          }
          break;
        }
        v908 = (unsigned int *)&v1013;
LABEL_969:
        *v908 = 0;
        *v916 = 0;
        *(_DWORD *)(v7 + 36) = v932 - 8;
LABEL_925:
        v1009 = v378;
        ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1010, (uint64_t)v1007, &v1009, (_DWORD)v331 - (_DWORD)v974, v16 - (_DWORD)v331);
        v575 = v1009;
        if (!v1009)
        {
          v16 = (unint64_t)v1005;
LABEL_530:
          v279 = (unint64_t)(v1005 - 32);
          v18 = v985;
          v324 = v994;
          v325 = v982;
          goto LABEL_531;
        }
        v576 = v1009 - 1;
        v286 = v1007[2 * v576 + 1];
        v16 = (unint64_t)v1005;
        if (v286 <= v850 && v286 + v330 <= 0xFFF)
        {
          v577 = 0;
          v578 = v958 + v962;
          while (1)
          {
            v579 = &v1007[2 * v577];
            v580 = v574;
            if (v577)
              v580 = *(v579 - 1) + 1;
            v581 = v579[1];
            if (v581 >= v580)
              break;
LABEL_929:
            if (++v577 == v575)
              goto LABEL_530;
          }
          v582 = *v579;
          v583 = __clz(v582 + 1) ^ 0x1F;
          if (*(_DWORD *)(v7 + 160) == 1)
          {
            v584 = 0;
            v585 = v330 + v581;
            v586 = v330 + v581;
            while (1)
            {
              v588 = v581 + v330;
              v589 = __clz(v581 - 2);
              v590 = ((v581 - 2) << 8 >> (v589 ^ 0x1F)) + (((v589 ^ 0x1F) + (_DWORD)v583) << 8) + v578 + 4096;
              if (v588 <= v323)
              {
                if (v590 >= (int)v11[7 * v588])
                  goto LABEL_936;
                goto LABEL_935;
              }
              v591 = v323;
              v592 = (v585 - v584) - (unint64_t)v323;
              if (v592 >= 2)
              {
                v323 = (v592 & 0xFFFFFFFFFFFFFFFELL) + v323;
                v593 = (v586 - v591) & 0xFFFFFFFFFFFFFFFELL;
                v594 = &v1008[7 * v591];
                do
                {
                  *(v594 - 7) = 0x40000000;
                  *v594 = 0x40000000;
                  v594 += 14;
                  v593 -= 2;
                }
                while (v593);
                if (v592 == (v592 & 0xFFFFFFFFFFFFFFFELL))
                  goto LABEL_935;
              }
              else
              {
                v323 = v323;
              }
              v595 = &v402[7 * v323];
              do
              {
                ++v323;
                *v595 = 0x40000000;
                v595 += 7;
              }
              while (v323 < v588);
LABEL_935:
              v587 = (signed int *)&v11[7 * v588];
              v587[2] = v581;
              v587[3] = v23;
              *v587 = v590;
              v587[1] = v582;
LABEL_936:
              --v581;
              ++v584;
              --v586;
              if (v581 < v580)
                goto LABEL_929;
            }
          }
          v596 = 0;
          v598 = *(_QWORD *)(v7 + 96);
          v597 = *(_QWORD *)(v7 + 104);
          v599 = *(_DWORD *)(v7 + 156) + *(_DWORD *)(v7 + 152) + 51;
          v600 = v330 + v581;
          v601 = v330 + v581;
          while (2)
          {
            v603 = v581 - 3;
            if (v581 - 3 < 0x80)
              v604 = ZSTD_MLcode_ML_Code[v603];
            else
              v604 = 67 - __clz(v603);
            v605 = v581 + v330;
            v606 = *(_DWORD *)(v597 + 4 * v583) + 1;
            v607 = __clz(v606) ^ 0x1F;
            v608 = 4 * v604;
            v609 = *(unsigned int *)((char *)ML_bits + v608);
            LODWORD(v608) = *(_DWORD *)(v598 + v608) + 1;
            v610 = __clz(v608) ^ 0x1F;
            v611 = v578
                 + v599
                 - (v606 << 8 >> v607)
                 - ((_DWORD)v608 << 8 >> v610)
                 + (((_DWORD)v583 + v609 - v607 - v610) << 8);
            if (v605 <= v323)
            {
              if (v611 < (int)v11[7 * v605])
                goto LABEL_949;
            }
            else
            {
              v612 = v323;
              v613 = (v600 - v596) - (unint64_t)v323;
              if (v613 < 2)
              {
                v323 = v323;
                goto LABEL_962;
              }
              v323 = (v613 & 0xFFFFFFFFFFFFFFFELL) + v323;
              v614 = (v601 - v612) & 0xFFFFFFFFFFFFFFFELL;
              v615 = &v1008[7 * v612];
              do
              {
                *(v615 - 7) = 0x40000000;
                *v615 = 0x40000000;
                v615 += 14;
                v614 -= 2;
              }
              while (v614);
              v402 = v11 + 7;
              if (v613 != (v613 & 0xFFFFFFFFFFFFFFFELL))
              {
LABEL_962:
                v616 = &v402[7 * v323];
                do
                {
                  ++v323;
                  *v616 = 0x40000000;
                  v616 += 7;
                }
                while (v323 < v605);
              }
LABEL_949:
              v602 = &v11[7 * v605];
              v602[2] = v581;
              v602[3] = v23;
              *v602 = v611;
              v602[1] = v582;
            }
            --v581;
            ++v596;
            --v601;
            if (v581 < v580)
              goto LABEL_929;
            continue;
          }
        }
        if (*v849)
          v734 = 0;
        else
          v734 = v11[7 * v330 + 3];
        v12 = (uint64_t)v1007;
        v279 = (unint64_t)(v1005 - 32);
        v18 = v985;
        v295 = v1007[2 * v576];
        v735 = v330 - v734;
        if (v735 <= 0x1000)
          v294 = v735;
        else
          v294 = 0;
        if (!v286)
        {
LABEL_1183:
          v736 = &v11[7 * v294];
          v737 = *((_QWORD *)v736 + 2);
          a3[2] = v736[6];
          *(_QWORD *)a3 = v737;
          goto LABEL_1117;
        }
LABEL_1103:
        v672 = &v11[7 * v294 + 4];
        if (v295 < 3)
        {
          if (v23)
            v677 = v295;
          else
            v677 = v295 + 1;
          if (v677)
          {
            if (v677 == 3)
            {
              v674 = *v672;
              v676 = v674 - 1;
            }
            else
            {
              v676 = v672[v677];
              v674 = *v672;
            }
            v688 = v677 > 1;
            v679 = 2;
            if (v688)
              v679 = 1;
            v673 = &v672[v679];
          }
          else
          {
            v678 = *(_QWORD *)v672;
            v673 = &v11[7 * v294 + 6];
            v676 = v678;
            v674 = HIDWORD(v678);
          }
        }
        else
        {
          v675 = *v672;
          v673 = &v11[7 * v294 + 5];
          v674 = v675;
          v676 = v295 - 2;
        }
        v680 = *v673;
        *(_QWORD *)a3 = v676 | (v674 << 32);
        a3[2] = v680;
LABEL_1117:
        v681 = v294 + 1;
        v682 = &v11[7 * v294 + 7];
        *v682 = v770;
        v682[1] = v295;
        v682[2] = v286;
        v682[3] = v23;
        *((_QWORD *)v682 + 2) = v1014;
        v682[6] = v1015;
        v683 = v294;
        if (!v294)
        {
          v689 = 1;
          v690 = v769;
          goto LABEL_1127;
        }
        do
        {
          v684 = &v11[7 * v683];
          v685 = v684[3] + v684[2];
          v686 = &v11[7 * v294];
          v687 = *(_OWORD *)v684;
          *(_OWORD *)(v686 + 3) = *(_OWORD *)(v684 + 3);
          *(_OWORD *)v686 = v687;
          --v294;
          v53 = v683 >= v685;
          v683 -= v685;
          v688 = v683 != 0 && v53;
          if (!v53)
            v683 = 0;
        }
        while (v688);
        v689 = v294 + 1;
        v690 = v769;
        if (v689 <= v681)
        {
          while (1)
          {
LABEL_1127:
            while (1)
            {
              v693 = v689;
              v695 = v11[7 * v689 + 2];
              v694 = v11[7 * v689 + 3];
              if (v695)
                break;
              v15 = &v18[v694];
              v689 = v693 + 1;
              if (v693 + 1 > v681)
                goto LABEL_1123;
            }
            v696 = v11[7 * v693 + 1];
            if (*(_DWORD *)(v7 + 176) != 2)
            {
              if ((_DWORD)v694)
              {
                v697 = *v963;
                v698 = v18;
                v699 = v694;
                do
                {
                  v700 = *v698++;
                  *(_DWORD *)&v697[4 * v700] += 2;
                  --v699;
                }
                while (v699);
              }
              *(_DWORD *)(v7 + 128) += 2 * v694;
            }
            v701 = v694 < 0x40 ? ZSTD_LLcode_LL_Code[v694] : 50 - __clz(v694);
            ++*(_DWORD *)(*(_QWORD *)(v7 + 88) + 4 * v701);
            ++*(_DWORD *)(v7 + 132);
            v702 = v696 + 1;
            v703 = __clz(v696 + 1);
            ++*(_DWORD *)(*(_QWORD *)(v7 + 104) + 4 * (v703 ^ 0x1F));
            ++*(_DWORD *)(v7 + 140);
            v704 = v695 - 3;
            v705 = v695 - 3 < 0x80 ? ZSTD_MLcode_ML_Code[v704] : 67 - __clz(v704);
            ++*(_DWORD *)(*(_QWORD *)(v7 + 96) + 4 * v705);
            ++*(_DWORD *)(v7 + 136);
            v706 = &v18[v694];
            v707 = *(char **)(v690 + 24);
            if ((unint64_t)&v18[v694] > v279)
              break;
            *(_OWORD *)v707 = *(_OWORD *)v18;
            v710 = *(_QWORD *)(v690 + 24);
            if (v694 > 0x10)
            {
              v711 = (_OWORD *)(v710 + 16);
              v712 = v710 + v694;
              v713 = (__int128 *)(v18 + 16);
              do
              {
                v714 = *v713++;
                *v711++ = v714;
              }
              while ((unint64_t)v711 < v712);
LABEL_1172:
              *(_QWORD *)(v690 + 24) += v694;
              v721 = *(_QWORD *)(v690 + 8);
              if (v694 >= 0x10000)
              {
                v732 = (unint64_t)(v721 - *(_QWORD *)v690) >> 3;
                *(_DWORD *)(v690 + 72) = 1;
                *(_DWORD *)(v690 + 76) = v732;
              }
              goto LABEL_1174;
            }
            *(_QWORD *)(v690 + 24) = v710 + v694;
            v721 = *(_QWORD *)(v690 + 8);
LABEL_1174:
            *(_WORD *)(v721 + 4) = v694;
            *(_DWORD *)v721 = v702;
            if (v704 >= 0x10000)
            {
              v733 = (unint64_t)(v721 - *(_QWORD *)v690) >> 3;
              *(_DWORD *)(v690 + 72) = 2;
              *(_DWORD *)(v690 + 76) = v733;
            }
            *(_WORD *)(v721 + 6) = v704;
            *(_QWORD *)(v690 + 8) = v721 + 8;
            v18 += v695 + v694;
            v15 = v18;
            v689 = v693 + 1;
            if (v693 + 1 > v681)
              goto LABEL_1123;
          }
          if ((unint64_t)v18 <= v279)
          {
            v709 = &v707[v279 - (_QWORD)v18];
            v715 = v18;
            v716 = *(char **)(v690 + 24);
            do
            {
              v717 = *(_OWORD *)v715;
              v715 += 16;
              *(_OWORD *)v716 = v717;
              v716 += 16;
            }
            while (v716 < v709);
            v708 = (unsigned __int8 *)v279;
            if (v279 >= (unint64_t)v706)
              goto LABEL_1172;
          }
          else
          {
            v708 = v18;
            v709 = *(char **)(v690 + 24);
            if (v18 >= v706)
              goto LABEL_1172;
          }
          if ((unint64_t)v18 <= v279)
            v718 = (unsigned __int8 *)v279;
          else
            v718 = v18;
          v719 = &v18[v694] - v718;
          if (v719 < 8)
          {
            v720 = v708;
            goto LABEL_1171;
          }
          if ((unint64_t)(v707 - (char *)v18) < 0x20)
          {
            v720 = v708;
            goto LABEL_1171;
          }
          if (v719 >= 0x20)
          {
            v722 = v719 & 0xFFFFFFFFFFFFFFE0;
            v723 = (__int128 *)(v708 + 16);
            v724 = &v707[v718 - v18 + 16];
            v725 = v719 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v726 = *v723;
              *((_OWORD *)v724 - 1) = *(v723 - 1);
              *(_OWORD *)v724 = v726;
              v723 += 2;
              v724 += 32;
              v725 -= 32;
            }
            while (v725);
            if (v719 == v722)
              goto LABEL_1172;
            if ((v719 & 0x18) == 0)
            {
              v720 = &v708[v722];
              v709 += v722;
              goto LABEL_1171;
            }
          }
          else
          {
            v722 = 0;
          }
          v709 += v719 & 0xFFFFFFFFFFFFFFF8;
          v720 = &v708[v719 & 0xFFFFFFFFFFFFFFF8];
          v727 = &v708[v722];
          v728 = &v707[&v718[v722] - v18];
          v729 = v722 - (v719 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v730 = *(_QWORD *)v727;
            v727 += 8;
            *(_QWORD *)v728 = v730;
            v728 += 8;
            v729 += 8;
          }
          while (v729);
          if (v719 == (v719 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_1172;
          do
          {
LABEL_1171:
            v731 = *v720++;
            *v709++ = v731;
          }
          while (v720 < v706);
          goto LABEL_1172;
        }
        v15 = v994;
LABEL_1123:
        if (*(_DWORD *)(v7 + 176) != 2)
        {
          v691 = *(_DWORD *)(v7 + 128) + 1;
          v692 = __clz(v691) ^ 0x1F;
          *(_DWORD *)(v7 + 144) = (v691 << 8 >> v692) + (v692 << 8);
        }
        v19 = *(_DWORD *)(v7 + 140) + 1;
        v20 = __clz(v19);
        v21 = vadd_s32(*(int32x2_t *)(v7 + 132), (int32x2_t)0x100000001);
        v22 = (int32x2_t)veor_s8((int8x8_t)vclz_s32(v21), (int8x8_t)0x1F0000001FLL);
        *(int32x2_t *)(v7 + 148) = vadd_s32(vshl_n_s32(v22, 8uLL), (int32x2_t)vshl_u32((uint32x2_t)vshl_n_s32(v21, 8uLL), (uint32x2_t)vneg_s32(v22)));
        *(_DWORD *)(v7 + 156) = (v19 << 8 >> (v20 ^ 0x1F)) + ((v20 ^ 0x1F) << 8);
        if ((unint64_t)v15 >= v984)
        {
LABEL_1215:
          v974 = v18;
          return v16 - (_QWORD)v974;
        }
      }
      else
      {
        v15 = v280 + 1;
        v16 = (unint64_t)v1005;
        if ((unint64_t)(v280 + 1) >= v984)
          goto LABEL_1215;
      }
    }
    v26 = 0;
    if (*(_DWORD *)(v7 + 212) >= 0xFFFu)
      v70 = 4095;
    else
      v70 = *(_DWORD *)(v7 + 212);
    v71 = *(_QWORD *)(v7 + 8);
    v72 = *(_QWORD *)(v7 + 16);
    v73 = (_DWORD)v994 - v71;
    v74 = -1 << (*(_DWORD *)(v7 + 196) - 1);
    v913 = ~v74;
    v75 = (_DWORD)v994 - v71 + v74 + 1;
    if ((int)v994 - (int)v71 < ~v74)
      v75 = 0;
    v905 = v75;
    v76 = *(unsigned int *)(v7 + 24);
    v77 = 1 << *(_DWORD *)(v7 + 192);
    if (v73 - *(_DWORD *)(v7 + 28) > v77 && *(_DWORD *)(v7 + 32) == 0)
      v79 = v73 - v77;
    else
      v79 = *(_DWORD *)(v7 + 28);
    v15 = v994;
    if (v79 <= 1)
      v80 = 1;
    else
      v80 = v79;
    v929 = v80;
    v81 = v73 - v76;
    v82 = v73 - v79;
    v83 = v7;
    v84 = v23 == 0;
    v85 = (char *)(v994 + 12);
    v799 = *(_DWORD *)(v83 + 204);
    v822 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v994) >> -(char)*(_DWORD *)(v83 + 200);
    v834 = *(_QWORD *)(v83 + 48);
    v843 = *(_DWORD *)(v834 + 4 * v822);
    v989 = v72;
    v946 = (char *)(v72 + v76);
    v920 = v71;
    v936 = (_QWORD *)(v71 + v76);
    v897 = *(_QWORD *)(v83 + 64);
    v960 = (unsigned int *)(v897 + 8 * (v73 & ~v74));
    v966 = v960 + 1;
    v811 = v73 + 9;
    v1013 = 0;
    if (v23)
      v86 = 3;
    else
      v86 = 4;
    v87 = v994 + 4;
    if (v23)
      v88 = 0;
    else
      v88 = -1;
    v997 = (v983 - 1);
    v18 = v985;
    v956 = v76;
    v976 = v70;
    v887 = v79;
    v864 = v73 - v79;
    v876 = v73;
    v852 = v86;
    while (1)
    {
      if (v84 == 3)
      {
        v89 = *a3 - 1;
        v90 = v73 - v89;
        v91 = *a3 - 2;
        if (v91 >= v81)
          goto LABEL_112;
      }
      else
      {
        v89 = a3[v84];
        v90 = v73 - v89;
        v91 = v89 - 1;
        if (v89 - 1 >= v81)
        {
LABEL_112:
          if (v91 < v82 && v76 + ~v90 >= 3)
          {
            v93 = v989 + v90;
            if (*(_DWORD *)v15 == *(_DWORD *)v93)
            {
              v94 = v26;
              v95 = v88;
              v96 = ZSTD_count_2segments(v87, (char *)(v93 + 4), v16, v946, v936);
              v86 = v852;
              v88 = v95;
              v82 = v864;
              v73 = v876;
              v18 = v985;
              v79 = v887;
              v76 = v956;
              v26 = v94;
              v15 = v994;
              v16 = (unint64_t)v1005;
              v97 = v96 + 4;
              v70 = v976;
              v98 = v97;
              if (v997 < v97)
                goto LABEL_126;
            }
          }
          goto LABEL_109;
        }
      }
      if (v90 < v79 || *(_DWORD *)v15 != *(_DWORD *)&v15[-v89])
        goto LABEL_109;
      v101 = -(uint64_t)v89;
      v102 = (char *)v87 - v89;
      if (v1006 <= (unint64_t)v87)
        break;
      v103 = *v87 ^ *(_QWORD *)v102;
      if (v103)
      {
        v97 = (__clz(__rbit64(v103)) >> 3) + 4;
        v98 = v97;
        if (v997 < v97)
          goto LABEL_126;
        goto LABEL_109;
      }
      v105 = 0;
      do
      {
        v104 = &v85[v105];
        if ((unint64_t)&v85[v105] >= v1006)
        {
          v102 = &v104[v101];
          if ((unint64_t)v104 >= v987)
            goto LABEL_136;
          goto LABEL_134;
        }
        v106 = *(_QWORD *)&v85[v101 + v105];
        v105 += 8;
        v107 = *(_QWORD *)v104 ^ v106;
      }
      while (!v107);
      v97 = v105 + (__clz(__rbit64(v107)) >> 3) + 4;
      v98 = v97;
      if (v997 < v97)
      {
LABEL_126:
        v100 = &v1007[2 * v26];
        *v100 = v84 + v88;
        v100[1] = v97;
        v26 = (v26 + 1);
        if (v97 > v70)
          goto LABEL_494;
        v997 = v98;
        if (&v15[v98] == (unsigned __int8 *)v16)
          goto LABEL_494;
      }
LABEL_109:
      if (++v84 >= v86)
      {
        *(_DWORD *)(v834 + 4 * v822) = v73;
        v108 = v843;
        if (v843 < v929)
        {
          v109 = v811;
          goto LABEL_155;
        }
        v192 = 0;
        v193 = 0;
        v194 = ~(-1 << v799);
        v867 = v73 + 2;
        v855 = v15 + 8;
        v837 = v920 + 8;
        v109 = v811;
        while (1)
        {
          v979 = v194;
          v195 = v193 >= v192 ? v192 : v193;
          v196 = (char *)&v15[v195];
          if (v195 + v108 >= v76)
            break;
          v890 = v193;
          v197 = v26;
          v198 = v192;
          v199 = ZSTD_count_2segments(v196, (char *)(v989 + v108 + v195), v16, v946, v936);
          v192 = v198;
          v76 = v956;
          v26 = v197;
          v200 = v199 + v195;
          v201 = v989 + v108;
          v193 = v890;
          if (v199 + v195 + v108 >= v956)
            v201 = v920 + v108;
          if (v200 > v997)
            goto LABEL_304;
LABEL_325:
          v16 = (unint64_t)v1005;
          v18 = v985;
          v15 = v994;
LABEL_326:
          v206 = (unsigned int *)(v897 + 8 * (v108 & v913));
          if (*(unsigned __int8 *)(v201 + v200) >= v15[v200])
          {
            *v966 = v108;
            if (v108 <= v905)
            {
              v966 = (unsigned int *)&v1013;
              goto LABEL_155;
            }
            v192 = v200;
            v966 = (unsigned int *)(v897 + 8 * (v108 & v913));
            v194 = v979 - 1;
            if (!v979)
              goto LABEL_155;
          }
          else
          {
            *v960 = v108;
            if (v108 <= v905)
            {
              v960 = (unsigned int *)&v1013;
              goto LABEL_155;
            }
            ++v206;
            v193 = v200;
            v960 = v206;
            v194 = v979 - 1;
            if (!v979)
              goto LABEL_155;
          }
          v108 = *v206;
          if (*v206 < v929)
          {
LABEL_155:
            *v966 = 0;
            *v960 = 0;
            v110 = v109 - 8;
            goto LABEL_493;
          }
        }
        v201 = v920 + v108;
        v203 = (_QWORD *)(v201 + v195);
        if (v1006 <= (unint64_t)v196)
        {
          v205 = &v15[v195];
          if ((unint64_t)v196 >= v987)
            goto LABEL_316;
        }
        else
        {
          v204 = *(_QWORD *)v196 ^ *v203;
          if (v204)
          {
            v200 = (__clz(__rbit64(v204)) >> 3) + v195;
            if (v200 <= v997)
              goto LABEL_325;
            goto LABEL_304;
          }
          v207 = 0;
          v208 = (char *)v855 + v195;
          while (1)
          {
            v209 = &v208[v207];
            if ((unint64_t)&v208[v207] >= v1006)
              break;
            v210 = *(_QWORD *)(v837 + v195 + v108 + v207);
            v207 += 8;
            v211 = *(_QWORD *)v209 ^ v210;
            if (v211)
            {
              v200 = v207 + (__clz(__rbit64(v211)) >> 3) + v195;
              if (v200 <= v997)
                goto LABEL_325;
LABEL_304:
              if (v200 > v109 - v108)
                v109 = v108 + v200;
              v202 = &v1007[2 * v26];
              *v202 = v867 - v108;
              v202[1] = v200;
              v26 = (v26 + 1);
              v16 = (unint64_t)v1005;
              v18 = v985;
              v15 = v994;
              if (v200 > 0x1000)
                goto LABEL_155;
              v997 = v200;
              if (&v994[v200] == v1005)
                goto LABEL_155;
              goto LABEL_326;
            }
          }
          v205 = (unsigned __int8 *)v855 + v195 + v207;
          v203 = (_QWORD *)(v837 + v195 + v108 + v207);
          if ((unint64_t)v205 >= v987)
          {
LABEL_316:
            if ((unint64_t)v205 >= v986)
            {
              if ((unint64_t)v205 >= v16)
                goto LABEL_324;
            }
            else
            {
              if (*(unsigned __int16 *)v203 == *(unsigned __int16 *)v205)
              {
                v205 += 2;
                v203 = (_QWORD *)((char *)v203 + 2);
              }
              if ((unint64_t)v205 >= v16)
              {
LABEL_324:
                v200 = v205 - (unsigned __int8 *)v196 + v195;
                if (v200 <= v997)
                  goto LABEL_325;
                goto LABEL_304;
              }
            }
            if (*(unsigned __int8 *)v203 == *v205)
              ++v205;
            goto LABEL_324;
          }
        }
        if (*(_DWORD *)v203 == *(_DWORD *)v205)
        {
          v205 += 4;
          v203 = (_QWORD *)((char *)v203 + 4);
        }
        goto LABEL_316;
      }
    }
    v104 = (char *)(v994 + 4);
    if ((unint64_t)v87 >= v987)
      goto LABEL_136;
LABEL_134:
    if (*(_DWORD *)v102 == *(_DWORD *)v104)
    {
      v104 += 4;
      v102 += 4;
    }
LABEL_136:
    if ((unint64_t)v104 >= v986)
    {
      if ((unint64_t)v104 >= v16)
        goto LABEL_144;
    }
    else
    {
      if (*(unsigned __int16 *)v102 == *(unsigned __int16 *)v104)
      {
        v104 += 2;
        v102 += 2;
      }
      if ((unint64_t)v104 >= v16)
      {
LABEL_144:
        v97 = (_DWORD)v104 - (_DWORD)v994;
        v98 = v97;
        if (v997 < v97)
          goto LABEL_126;
        goto LABEL_109;
      }
    }
    if (*v102 == *v104)
      LODWORD(v104) = (_DWORD)v104 + 1;
    goto LABEL_144;
  }
  return v16 - (_QWORD)v974;
}

unint64_t ZSTD_compressBlock_fast_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  unint64_t v27;
  _OWORD *v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _QWORD *v32;
  _DWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _OWORD *v37;
  unint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  BOOL v44;
  unint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  _OWORD *v48;
  unint64_t v49;
  __int128 *v50;
  __int128 v51;
  _DWORD *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  __int128 *v56;
  _OWORD *v57;
  __int128 v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  __int16 v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  unint64_t v78;
  __int128 *v79;
  __int128 v80;
  __int128 *v81;
  _OWORD *v82;
  __int128 v83;
  unint64_t v84;
  unint64_t v85;
  unsigned __int8 *v86;
  unint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  unint64_t v96;
  __int128 *v97;
  __int128 v98;
  __int128 *v99;
  _OWORD *v100;
  __int128 v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  unint64_t v105;
  unint64_t v106;
  __int128 *v107;
  _OWORD *v108;
  unint64_t v109;
  __int128 v110;
  uint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  __int128 *v115;
  _OWORD *v116;
  unint64_t v117;
  __int128 v118;
  uint64_t *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  __int128 *v124;
  _OWORD *v125;
  unint64_t v126;
  __int128 v127;
  uint64_t *v128;
  _QWORD *v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unint64_t v133;
  char v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 *v150;
  unint64_t v151;
  unint64_t v152;
  _OWORD *v153;
  unint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  _QWORD *v157;
  _DWORD *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  _OWORD *v162;
  unint64_t v163;
  _BYTE *v164;
  uint64_t v165;
  unsigned __int8 *v166;
  unsigned __int8 *v167;
  unsigned __int8 *v168;
  unint64_t v169;
  _OWORD *v170;
  uint64_t v171;
  _OWORD *v172;
  unint64_t v173;
  __int128 *v174;
  __int128 v175;
  _DWORD *v176;
  unsigned __int8 *v177;
  unsigned __int8 *v178;
  unsigned __int8 *v179;
  __int128 *v180;
  _OWORD *v181;
  __int128 v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  char v187;
  uint64_t v188;
  unint64_t v189;
  __int16 v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  _OWORD *v201;
  unint64_t v202;
  __int128 *v203;
  __int128 v204;
  __int128 *v205;
  _OWORD *v206;
  __int128 v207;
  unint64_t v208;
  unint64_t v209;
  unsigned __int8 *v210;
  unint64_t v211;
  _BYTE *v212;
  uint64_t v213;
  unint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  _OWORD *v219;
  unint64_t v220;
  __int128 *v221;
  __int128 v222;
  __int128 *v223;
  _OWORD *v224;
  __int128 v225;
  unint64_t v226;
  unint64_t v227;
  char *v228;
  unint64_t v229;
  unint64_t v230;
  __int128 *v231;
  _OWORD *v232;
  unint64_t v233;
  __int128 v234;
  uint64_t *v235;
  _QWORD *v236;
  unint64_t v237;
  uint64_t v238;
  __int128 *v239;
  _OWORD *v240;
  unint64_t v241;
  __int128 v242;
  uint64_t *v243;
  _QWORD *v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  __int128 *v248;
  _OWORD *v249;
  unint64_t v250;
  __int128 v251;
  uint64_t *v252;
  _QWORD *v253;
  unint64_t v254;
  uint64_t v255;
  char v256;
  unint64_t v257;
  char v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t v273;
  unsigned __int8 *v274;
  unint64_t v275;
  unint64_t v276;
  _OWORD *v277;
  unint64_t v278;
  _BYTE *v279;
  uint64_t v280;
  _QWORD *v281;
  _DWORD *v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  _OWORD *v286;
  unint64_t v287;
  _BYTE *v288;
  uint64_t v289;
  unsigned __int8 *v290;
  unsigned __int8 *v291;
  unsigned __int8 *v292;
  unint64_t v293;
  _OWORD *v294;
  uint64_t v295;
  _OWORD *v296;
  unint64_t v297;
  __int128 *v298;
  __int128 v299;
  _DWORD *v300;
  unsigned __int8 *v301;
  unsigned __int8 *v302;
  unsigned __int8 *v303;
  __int128 *v304;
  _OWORD *v305;
  __int128 v306;
  unint64_t v307;
  unint64_t v308;
  char *v309;
  char *v310;
  char v311;
  uint64_t v312;
  unint64_t v313;
  __int16 v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  _OWORD *v325;
  unint64_t v326;
  __int128 *v327;
  __int128 v328;
  __int128 *v329;
  _OWORD *v330;
  __int128 v331;
  unint64_t v332;
  unint64_t v333;
  unsigned __int8 *v334;
  unint64_t v335;
  _BYTE *v336;
  uint64_t v337;
  unint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  _OWORD *v343;
  unint64_t v344;
  __int128 *v345;
  __int128 v346;
  __int128 *v347;
  _OWORD *v348;
  __int128 v349;
  unint64_t v350;
  unint64_t v351;
  char *v352;
  unint64_t v353;
  unint64_t v354;
  __int128 *v355;
  _OWORD *v356;
  unint64_t v357;
  __int128 v358;
  uint64_t *v359;
  _QWORD *v360;
  unint64_t v361;
  uint64_t v362;
  __int128 *v363;
  _OWORD *v364;
  unint64_t v365;
  __int128 v366;
  uint64_t *v367;
  _QWORD *v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  __int128 *v372;
  _OWORD *v373;
  unint64_t v374;
  __int128 v375;
  uint64_t *v376;
  _QWORD *v377;
  unint64_t v378;
  uint64_t v379;
  char v380;
  unint64_t v381;
  char v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  char *v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  unsigned int v393;
  uint64_t v394;
  uint64_t v395;
  unsigned __int8 *v396;
  unint64_t v397;
  unint64_t v398;
  _OWORD *v399;
  unint64_t v400;
  _BYTE *v401;
  uint64_t v402;
  _QWORD *v403;
  _DWORD *v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  _OWORD *v408;
  unint64_t v409;
  _BYTE *v410;
  uint64_t v411;
  unsigned __int8 *v412;
  unsigned __int8 *v413;
  unsigned __int8 *v414;
  unint64_t v415;
  _OWORD *v416;
  uint64_t v417;
  _OWORD *v418;
  unint64_t v419;
  __int128 *v420;
  __int128 v421;
  _DWORD *v422;
  unsigned __int8 *v423;
  unsigned __int8 *v424;
  unsigned __int8 *v425;
  __int128 *v426;
  _OWORD *v427;
  __int128 v428;
  unint64_t v429;
  unint64_t v430;
  char *v431;
  char *v432;
  char v433;
  uint64_t v434;
  unint64_t v435;
  __int16 v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t v446;
  _OWORD *v447;
  unint64_t v448;
  __int128 *v449;
  __int128 v450;
  __int128 *v451;
  _OWORD *v452;
  __int128 v453;
  unint64_t v454;
  unint64_t v455;
  unsigned __int8 *v456;
  unint64_t v457;
  _BYTE *v458;
  uint64_t v459;
  unint64_t v460;
  _QWORD *v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  _OWORD *v465;
  unint64_t v466;
  __int128 *v467;
  __int128 v468;
  __int128 *v469;
  _OWORD *v470;
  __int128 v471;
  unint64_t v472;
  unint64_t v473;
  char *v474;
  unint64_t v475;
  unint64_t v476;
  __int128 *v477;
  _OWORD *v478;
  unint64_t v479;
  __int128 v480;
  uint64_t *v481;
  _QWORD *v482;
  unint64_t v483;
  uint64_t v484;
  __int128 *v485;
  _OWORD *v486;
  unint64_t v487;
  __int128 v488;
  uint64_t *v489;
  _QWORD *v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  __int128 *v494;
  _OWORD *v495;
  unint64_t v496;
  __int128 v497;
  uint64_t *v498;
  _QWORD *v499;
  unint64_t v500;
  uint64_t v501;
  char v502;
  unint64_t v503;
  char v504;
  unint64_t v505;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  unint64_t v520;
  unint64_t v521;
  unint64_t v522;
  unint64_t v523;
  unint64_t v524;
  unint64_t v525;
  unint64_t v526;
  unint64_t v527;
  unint64_t v528;
  unint64_t v529;
  unint64_t v530;
  unsigned int *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  char v536;
  char v537;
  char v538;
  char v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  unsigned int v552;
  unsigned int v553;
  unsigned int v554;
  unsigned int v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  unint64_t v560;
  unint64_t v561;
  unint64_t v562;
  unint64_t v563;
  char *v564;
  char *v565;
  char *v566;
  char *v567;
  int v568;
  int v569;
  int v570;
  int v571;
  int v572;
  int v573;
  int v574;
  int v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unint64_t v580;
  unint64_t v581;
  unint64_t v582;
  unint64_t v583;
  unsigned __int8 *v584;
  unsigned __int8 *v585;
  unsigned __int8 *v586;
  unsigned __int8 *v587;
  unint64_t v588;
  unint64_t v589;
  unint64_t v590;
  unint64_t v591;

  v5 = a4;
  v7 = *(_DWORD *)(a1 + 208);
  if (v7 == 5)
  {
    v136 = *(_QWORD *)(a1 + 8);
    v137 = *(unsigned int *)(a1 + 24);
    v10 = a4 + a5;
    v12 = *a3;
    v11 = a3[1];
    v138 = *(_QWORD *)(a1 + 184);
    v139 = *(char **)v138;
    v140 = *(_QWORD *)(v138 + 8);
    v541 = *(unsigned int *)(v138 + 24);
    v581 = v10 - 8;
    v585 = (unsigned __int8 *)(v136 + v137);
    if (*(_QWORD *)v138 + (_DWORD)v5 - ((_DWORD)v136 + (_DWORD)v137) == (_DWORD)v140 + (_DWORD)v541)
      v141 = v5 + 1;
    else
      v141 = v5;
    if (v141 >= v10 - 8)
      goto LABEL_713;
    v512 = v140 + v541;
    v531 = a3;
    v577 = *(_QWORD *)(a1 + 48);
    LODWORD(v142) = *(_DWORD *)(a1 + 212);
    if ((_DWORD)v142)
      v142 = v142;
    else
      v142 = 1;
    v545 = v142;
    v573 = 64 - *(_DWORD *)(a1 + 200);
    v569 = v137 - 1;
    v533 = *(_QWORD *)(v138 + 48);
    v537 = 64 - *(_DWORD *)(v138 + 200);
    v143 = v10 - 32;
    v524 = v10 - 3;
    v528 = v10 - 7;
    v553 = v137 + v140 - (_DWORD)v139;
    v557 = v140 - v553;
    v508 = v140 - 1;
    v516 = v136 + 12;
    v520 = v10 - 1;
    v589 = v10;
    v549 = *(_QWORD *)(v138 + 8);
    v561 = v10 - 32;
    v565 = *(char **)v138;
    while (1)
    {
      v144 = 0xCF1BBCDCBB000000 * *(_QWORD *)v141;
      v145 = 4 * (v144 >> v573);
      v146 = *(unsigned int *)(v577 + v145);
      v147 = v141 - v136;
      v148 = (v141 - v136 - v12 + 1);
      v149 = v140 + v148 - v553;
      if (v148 >= v137)
        v149 = v136 + v148;
      *(_DWORD *)(v577 + v145) = v147;
      if ((v569 - v148) >= 3)
      {
        v150 = (unsigned __int8 *)(v141 + 1);
        if (*(_DWORD *)v149 == *(_DWORD *)(v141 + 1))
          break;
      }
      if (v146 <= v137)
      {
        v165 = *(unsigned int *)(v533 + 4 * (v144 >> v537));
        if (v165 > v541 && *(_DWORD *)(v140 + v165) == *(_DWORD *)v141)
        {
          v160 = ZSTD_count_2segments((_QWORD *)(v141 + 4), (char *)(v140 + v165 + 4), v10, v139, v585) + 4;
          if (v141 > v5)
          {
            v166 = (unsigned __int8 *)(v508 + v165);
            v167 = (unsigned __int8 *)(v141 - 1);
            v10 = v589;
            v139 = v565;
            v147 = v141 - v136;
            while (*v167 == *v166)
            {
              ++v160;
              v168 = v167 - 1;
              if ((unint64_t)v167 > v5)
              {
                --v167;
                v44 = (unint64_t)v166-- > v512;
                if (v44)
                  continue;
              }
              v141 = (unint64_t)(v168 + 1);
              v143 = v561;
              v150 = (unsigned __int8 *)v141;
              v169 = (unint64_t)&v168[-v5 + 1];
              v170 = *(_OWORD **)(a2 + 24);
              if (v141 <= v561)
                goto LABEL_296;
              goto LABEL_286;
            }
            v141 = (unint64_t)(v167 + 1);
            v143 = v561;
            v150 = v167 + 1;
            v169 = (unint64_t)&v167[-v5 + 1];
            v170 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)(v167 + 1) > v561)
              goto LABEL_286;
LABEL_296:
            *v170 = *(_OWORD *)v5;
            v218 = *(_QWORD *)(a2 + 24);
            if (v169 > 0x10)
            {
              v219 = (_OWORD *)(v218 + 16);
              v220 = v218 + v169;
              v221 = (__int128 *)(v5 + 16);
              do
              {
                v222 = *v221++;
                *v219++ = v222;
              }
              while ((unint64_t)v219 < v220);
              goto LABEL_354;
            }
            *(_QWORD *)(a2 + 24) = v218 + v169;
            v188 = *(_QWORD *)(a2 + 8);
LABEL_356:
            v191 = v147 - v553 - v165;
            v190 = v160 - 3;
            *(_WORD *)(v188 + 4) = v169;
            *(_DWORD *)v188 = v191 + 3;
            v11 = v12;
            if (!((v160 - 3) >> 16))
            {
LABEL_257:
              *(_WORD *)(v188 + 6) = v190;
              v193 = v188 + 8;
              *(_QWORD *)(a2 + 8) = v188 + 8;
              v5 = (unint64_t)&v150[v160];
              if ((unint64_t)&v150[v160] <= v581)
              {
                *(_DWORD *)(v577 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v136 + 2 + v147)) >> v573)) = v147 + 2;
                *(_DWORD *)(v577 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v5 - 2)) >> v573)) = v5 - 2 - v136;
                v194 = v11;
                while (1)
                {
                  v11 = v191;
                  v191 = v194;
                  v195 = (v5 - v136 - v194);
                  v196 = v557;
                  if (v195 >= v137)
                    v196 = v136;
                  if ((v569 - v195) < 3)
                    break;
                  v197 = v196 + v195;
                  if (*(_DWORD *)v197 != *(_DWORD *)v5)
                    break;
                  if (v195 >= v137)
                    v139 = (char *)v10;
                  v198 = ZSTD_count_2segments((_QWORD *)(v5 + 4), (char *)(v197 + 4), v10, v139, v585);
                  v143 = v561;
                  if (v5 <= v561)
                  {
                    *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                    v193 = *(_QWORD *)(a2 + 8);
                  }
                  *(_WORD *)(v193 + 4) = 0;
                  *(_DWORD *)v193 = 1;
                  if (v198 + 1 >= 0x10000)
                  {
                    v199 = (unint64_t)(v193 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 2;
                    *(_DWORD *)(a2 + 76) = v199;
                  }
                  *(_WORD *)(v193 + 6) = v198 + 1;
                  v193 += 8;
                  *(_DWORD *)(v577 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v5) >> v573)) = v5 - v136;
                  v5 += v198 + 4;
                  *(_QWORD *)(a2 + 8) = v193;
                  v194 = v11;
                  v12 = v191;
                  v141 = v5;
                  v10 = v589;
                  v139 = v565;
                  if (v5 > v581)
                    goto LABEL_190;
                }
                v12 = v11;
                v11 = v191;
                v141 = v5;
              }
              else
              {
                v12 = v191;
                v141 = (unint64_t)&v150[v160];
              }
              goto LABEL_190;
            }
LABEL_256:
            v192 = (unint64_t)(v188 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v192;
            goto LABEL_257;
          }
          v150 = (unsigned __int8 *)v141;
          v10 = v589;
          v143 = v561;
          v139 = v565;
          v147 = v141 - v136;
          v169 = v141 - v5;
          v170 = *(_OWORD **)(a2 + 24);
          if (v141 <= v561)
            goto LABEL_296;
LABEL_286:
          if (v5 <= v143)
          {
            v212 = (char *)v170 + v143 - v5;
            v223 = (__int128 *)v5;
            v224 = v170;
            do
            {
              v225 = *v223++;
              *v224++ = v225;
            }
            while (v224 < (_OWORD *)v212);
            v211 = v143;
            if (v143 < v141)
              goto LABEL_305;
          }
          else
          {
            v211 = v5;
            v212 = v170;
            if (v5 >= v141)
              goto LABEL_354;
LABEL_305:
            if (v5 <= v143)
              v226 = v143;
            else
              v226 = v5;
            v227 = v141 - v226;
            if (v141 - v226 < 8)
            {
              v228 = (char *)v211;
              goto LABEL_353;
            }
            if ((unint64_t)v170 - v5 < 0x20)
            {
              v228 = (char *)v211;
              goto LABEL_353;
            }
            if (v227 >= 0x20)
            {
              v247 = v227 & 0xFFFFFFFFFFFFFFE0;
              v248 = (__int128 *)(v211 + 16);
              v249 = (_OWORD *)((char *)v170 + v226 - v5 + 16);
              v250 = v227 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v251 = *v248;
                *(v249 - 1) = *(v248 - 1);
                *v249 = v251;
                v248 += 2;
                v249 += 2;
                v250 -= 32;
              }
              while (v250);
              if (v227 != v247)
              {
                if ((v227 & 0x18) == 0)
                {
                  v228 = (char *)(v211 + v247);
                  v212 += v247;
                  goto LABEL_353;
                }
                goto LABEL_341;
              }
            }
            else
            {
              v247 = 0;
LABEL_341:
              v212 += v227 & 0xFFFFFFFFFFFFFFF8;
              v228 = (char *)(v211 + (v227 & 0xFFFFFFFFFFFFFFF8));
              v252 = (uint64_t *)(v211 + v247);
              v253 = (_QWORD *)((char *)v170 + v247 + v226 - v5);
              v254 = v247 - (v227 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v255 = *v252++;
                *v253++ = v255;
                v254 += 8;
              }
              while (v254);
              if (v227 != (v227 & 0xFFFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_353:
                  v258 = *v228++;
                  *v212++ = v258;
                }
                while ((unint64_t)v228 < v141);
              }
            }
          }
LABEL_354:
          *(_QWORD *)(a2 + 24) += v169;
          v188 = *(_QWORD *)(a2 + 8);
          if (v169 >= 0x10000)
          {
            v259 = (unint64_t)(v188 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v259;
          }
          goto LABEL_356;
        }
      }
      else
      {
        v156 = v136 + v146;
        if (*(_DWORD *)(v136 + v146) == *(_DWORD *)v141)
        {
          v157 = (_QWORD *)(v141 + 4);
          v158 = (_DWORD *)(v156 + 4);
          if (v528 <= v141 + 4)
          {
            v176 = (_DWORD *)(v141 + 4);
            if ((unint64_t)v157 < v524)
            {
LABEL_224:
              if (*v158 == *v176)
              {
                ++v176;
                ++v158;
              }
            }
          }
          else
          {
            v159 = *v157 ^ *(_QWORD *)v158;
            if (v159)
            {
              v160 = (__clz(__rbit64(v159)) >> 3) + 4;
              if (v141 <= v5)
                goto LABEL_206;
LABEL_235:
              v177 = (unsigned __int8 *)(v141 - 1);
              v178 = (unsigned __int8 *)(v136 - 1 + v146);
              while (*v177 == *v178)
              {
                ++v160;
                v179 = v177 - 1;
                if (v178 > v585)
                {
                  --v178;
                  v44 = (unint64_t)v177-- > v5;
                  if (v44)
                    continue;
                }
                v150 = v179 + 1;
                v161 = (unint64_t)&v179[-v5 + 1];
                v162 = *(_OWORD **)(a2 + 24);
                if ((unint64_t)v150 <= v143)
                  goto LABEL_273;
                goto LABEL_207;
              }
              v150 = v177 + 1;
              v161 = (unint64_t)&v177[-v5 + 1];
              v162 = *(_OWORD **)(a2 + 24);
              if ((unint64_t)(v177 + 1) > v143)
                goto LABEL_207;
              goto LABEL_273;
            }
            v213 = 0;
            v214 = v141 + 12;
            while (1)
            {
              v215 = (_QWORD *)(v214 + v213);
              if (v214 + v213 >= v528)
                break;
              v216 = *(_QWORD *)(v516 + v146 + v213);
              v213 += 8;
              v217 = *v215 ^ v216;
              if (v217)
              {
                v160 = v213 + (__clz(__rbit64(v217)) >> 3) + 4;
                if (v141 > v5)
                  goto LABEL_235;
                goto LABEL_206;
              }
            }
            v176 = (_DWORD *)(v141 + v213 + 12);
            v158 = (_DWORD *)(v516 + v146 + v213);
            if ((unint64_t)v176 < v524)
              goto LABEL_224;
          }
          if ((unint64_t)v176 >= v520)
          {
            if ((unint64_t)v176 >= v10)
              goto LABEL_234;
          }
          else
          {
            if (*(unsigned __int16 *)v158 == *(unsigned __int16 *)v176)
            {
              v176 = (_DWORD *)((char *)v176 + 2);
              v158 = (_DWORD *)((char *)v158 + 2);
            }
            if ((unint64_t)v176 >= v10)
            {
LABEL_234:
              v160 = (unint64_t)v176 - v141;
              if (v141 > v5)
                goto LABEL_235;
LABEL_206:
              v150 = (unsigned __int8 *)v141;
              v161 = v141 - v5;
              v162 = *(_OWORD **)(a2 + 24);
              if (v141 <= v143)
              {
LABEL_273:
                *v162 = *(_OWORD *)v5;
                v200 = *(_QWORD *)(a2 + 24);
                if (v161 > 0x10)
                {
                  v201 = (_OWORD *)(v200 + 16);
                  v202 = v200 + v161;
                  v203 = (__int128 *)(v5 + 16);
                  do
                  {
                    v204 = *v203++;
                    *v201++ = v204;
                  }
                  while ((unint64_t)v201 < v202);
                  goto LABEL_348;
                }
                *(_QWORD *)(a2 + 24) = v200 + v161;
                v188 = *(_QWORD *)(a2 + 8);
LABEL_350:
                v191 = (v141 - v156);
                v190 = v160 - 3;
                *(_WORD *)(v188 + 4) = v161;
                *(_DWORD *)v188 = v191 + 3;
                v11 = v12;
                if (v160 - 3 < 0x10000)
                  goto LABEL_257;
                goto LABEL_256;
              }
LABEL_207:
              if (v5 <= v143)
              {
                v164 = (char *)v162 + v143 - v5;
                v205 = (__int128 *)v5;
                v206 = v162;
                do
                {
                  v207 = *v205++;
                  *v206++ = v207;
                }
                while (v206 < (_OWORD *)v164);
                v163 = v143;
                if (v143 >= (unint64_t)v150)
                  goto LABEL_348;
              }
              else
              {
                v163 = v5;
                v164 = v162;
                if (v5 >= (unint64_t)v150)
                {
LABEL_348:
                  *(_QWORD *)(a2 + 24) += v161;
                  v188 = *(_QWORD *)(a2 + 8);
                  if (v161 >= 0x10000)
                  {
                    v257 = (unint64_t)(v188 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v257;
                  }
                  goto LABEL_350;
                }
              }
              if (v5 <= v143)
                v208 = v143;
              else
                v208 = v5;
              v209 = (unint64_t)&v150[-v208];
              if ((unint64_t)&v150[-v208] < 8)
              {
                v210 = (unsigned __int8 *)v163;
                goto LABEL_347;
              }
              if ((unint64_t)v162 - v5 < 0x20)
              {
                v210 = (unsigned __int8 *)v163;
                goto LABEL_347;
              }
              if (v209 >= 0x20)
              {
                v230 = v209 & 0xFFFFFFFFFFFFFFE0;
                v239 = (__int128 *)(v163 + 16);
                v240 = (_OWORD *)((char *)v162 + v208 - v5 + 16);
                v241 = v209 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v242 = *v239;
                  *(v240 - 1) = *(v239 - 1);
                  *v240 = v242;
                  v239 += 2;
                  v240 += 2;
                  v241 -= 32;
                }
                while (v241);
                if (v209 == v230)
                  goto LABEL_348;
                if ((v209 & 0x18) == 0)
                {
                  v210 = (unsigned __int8 *)(v163 + v230);
                  v164 += v230;
                  do
                  {
LABEL_347:
                    v256 = *v210++;
                    *v164++ = v256;
                  }
                  while (v210 < v150);
                  goto LABEL_348;
                }
              }
              else
              {
                v230 = 0;
              }
              v164 += v209 & 0xFFFFFFFFFFFFFFF8;
              v210 = (unsigned __int8 *)(v163 + (v209 & 0xFFFFFFFFFFFFFFF8));
              v243 = (uint64_t *)(v163 + v230);
              v244 = (_QWORD *)((char *)v162 + v230 + v208 - v5);
              v245 = v230 - (v209 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v246 = *v243++;
                *v244++ = v246;
                v245 += 8;
              }
              while (v245);
              if (v209 == (v209 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_348;
              goto LABEL_347;
            }
          }
          if (*(unsigned __int8 *)v158 == *(unsigned __int8 *)v176)
            v176 = (_DWORD *)((char *)v176 + 1);
          goto LABEL_234;
        }
      }
      v141 += v545 + ((uint64_t)(v141 - v5) >> 8);
LABEL_190:
      v140 = v549;
      if (v141 >= v581)
      {
LABEL_712:
        a3 = v531;
        goto LABEL_713;
      }
    }
    if (v148 >= v137)
      v139 = (char *)v10;
    v151 = ZSTD_count_2segments((_QWORD *)(v141 + 5), (char *)(v149 + 4), v10, v139, v585);
    v143 = v561;
    v152 = (unint64_t)&v150[-v5];
    v153 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v150 <= v561)
    {
      *v153 = *(_OWORD *)v5;
      v171 = *(_QWORD *)(a2 + 24);
      if (v152 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v171 + v152;
        v188 = *(_QWORD *)(a2 + 8);
        v10 = v589;
        v139 = v565;
        v147 = v141 - v136;
        goto LABEL_255;
      }
      v172 = (_OWORD *)(v171 + 16);
      v173 = v171 + v152;
      v174 = (__int128 *)(v5 + 16);
      v10 = v589;
      v139 = v565;
      v147 = v141 - v136;
      do
      {
        v175 = *v174++;
        *v172++ = v175;
      }
      while ((unint64_t)v172 < v173);
    }
    else
    {
      if (v5 <= v561)
      {
        v155 = (char *)v153 + v561 - v5;
        v180 = (__int128 *)v5;
        v181 = *(_OWORD **)(a2 + 24);
        v10 = v589;
        v139 = v565;
        v147 = v141 - v136;
        do
        {
          v182 = *v180++;
          *v181++ = v182;
        }
        while (v181 < (_OWORD *)v155);
        v154 = v561;
        if (v561 >= (unint64_t)v150)
          goto LABEL_252;
      }
      else
      {
        v154 = v5;
        v155 = *(_BYTE **)(a2 + 24);
        v10 = v589;
        v139 = v565;
        v147 = v141 - v136;
        if (v5 >= (unint64_t)v150)
          goto LABEL_252;
      }
      if (v5 <= v561)
        v183 = v561;
      else
        v183 = v5;
      v184 = v141 - v183 + 1;
      if (v184 < 8 || (unint64_t)v153 - v5 < 0x20)
      {
        v185 = (char *)v154;
        goto LABEL_250;
      }
      if (v184 >= 0x20)
      {
        v229 = v184 & 0xFFFFFFFFFFFFFFE0;
        v231 = (__int128 *)(v154 + 16);
        v232 = (_OWORD *)((char *)v153 + v183 - v5 + 16);
        v233 = v184 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v234 = *v231;
          *(v232 - 1) = *(v231 - 1);
          *v232 = v234;
          v231 += 2;
          v232 += 2;
          v233 -= 32;
        }
        while (v233);
        if (v184 == v229)
          goto LABEL_252;
        if ((v184 & 0x18) == 0)
        {
          v185 = (char *)(v154 + v229);
          v155 += v229;
LABEL_250:
          v186 = (char *)(v184 + v154);
          do
          {
            v187 = *v185++;
            *v155++ = v187;
          }
          while (v185 != v186);
          goto LABEL_252;
        }
      }
      else
      {
        v229 = 0;
      }
      v155 += v184 & 0xFFFFFFFFFFFFFFF8;
      v185 = (char *)(v154 + (v184 & 0xFFFFFFFFFFFFFFF8));
      v235 = (uint64_t *)(v154 + v229);
      v236 = (_QWORD *)((char *)v153 + v229 + v183 - v5);
      v237 = v229 - (v184 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v238 = *v235++;
        *v236++ = v238;
        v237 += 8;
      }
      while (v237);
      if (v184 != (v184 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_250;
    }
LABEL_252:
    *(_QWORD *)(a2 + 24) += v152;
    v188 = *(_QWORD *)(a2 + 8);
    if (v152 >= 0x10000)
    {
      v189 = (unint64_t)(v188 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v189;
    }
LABEL_255:
    v160 = v151 + 4;
    v190 = v151 + 1;
    *(_WORD *)(v188 + 4) = v152;
    *(_DWORD *)v188 = 1;
    v191 = v12;
    if (!((v151 + 1) >> 16))
      goto LABEL_257;
    goto LABEL_256;
  }
  if (v7 == 6)
  {
    v260 = *(_QWORD *)(a1 + 8);
    v261 = *(unsigned int *)(a1 + 24);
    v10 = a4 + a5;
    v12 = *a3;
    v11 = a3[1];
    v262 = *(_QWORD *)(a1 + 184);
    v263 = *(char **)v262;
    v264 = *(_QWORD *)(v262 + 8);
    v542 = *(unsigned int *)(v262 + 24);
    v582 = v10 - 8;
    v586 = (unsigned __int8 *)(v260 + v261);
    if (*(_QWORD *)v262 + (_DWORD)v5 - ((_DWORD)v260 + (_DWORD)v261) == (_DWORD)v264 + (_DWORD)v542)
      v265 = v5 + 1;
    else
      v265 = v5;
    if (v265 >= v10 - 8)
      goto LABEL_713;
    v513 = v264 + v542;
    v531 = a3;
    v578 = *(_QWORD *)(a1 + 48);
    LODWORD(v266) = *(_DWORD *)(a1 + 212);
    if ((_DWORD)v266)
      v266 = v266;
    else
      v266 = 1;
    v546 = v266;
    v574 = 64 - *(_DWORD *)(a1 + 200);
    v570 = v261 - 1;
    v534 = *(_QWORD *)(v262 + 48);
    v538 = 64 - *(_DWORD *)(v262 + 200);
    v267 = v10 - 32;
    v525 = v10 - 3;
    v529 = v10 - 7;
    v554 = v261 + v264 - (_DWORD)v263;
    v558 = v264 - v554;
    v509 = v264 - 1;
    v517 = v260 + 12;
    v521 = v10 - 1;
    v590 = v10;
    v550 = *(_QWORD *)(v262 + 8);
    v562 = v10 - 32;
    v566 = *(char **)v262;
    while (1)
    {
      v268 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)v265;
      v269 = 4 * (v268 >> v574);
      v270 = *(unsigned int *)(v578 + v269);
      v271 = v265 - v260;
      v272 = (v265 - v260 - v12 + 1);
      v273 = v264 + v272 - v554;
      if (v272 >= v261)
        v273 = v260 + v272;
      *(_DWORD *)(v578 + v269) = v271;
      if ((v570 - v272) >= 3)
      {
        v274 = (unsigned __int8 *)(v265 + 1);
        if (*(_DWORD *)v273 == *(_DWORD *)(v265 + 1))
          break;
      }
      if (v270 <= v261)
      {
        v289 = *(unsigned int *)(v534 + 4 * (v268 >> v538));
        if (v289 > v542 && *(_DWORD *)(v264 + v289) == *(_DWORD *)v265)
        {
          v284 = ZSTD_count_2segments((_QWORD *)(v265 + 4), (char *)(v264 + v289 + 4), v10, v263, v586) + 4;
          if (v265 > v5)
          {
            v290 = (unsigned __int8 *)(v509 + v289);
            v291 = (unsigned __int8 *)(v265 - 1);
            v10 = v590;
            v263 = v566;
            v271 = v265 - v260;
            while (*v291 == *v290)
            {
              ++v284;
              v292 = v291 - 1;
              if ((unint64_t)v291 > v5)
              {
                --v291;
                v44 = (unint64_t)v290-- > v513;
                if (v44)
                  continue;
              }
              v265 = (unint64_t)(v292 + 1);
              v267 = v562;
              v274 = (unsigned __int8 *)v265;
              v293 = (unint64_t)&v292[-v5 + 1];
              v294 = *(_OWORD **)(a2 + 24);
              if (v265 <= v562)
                goto LABEL_473;
              goto LABEL_463;
            }
            v265 = (unint64_t)(v291 + 1);
            v267 = v562;
            v274 = v291 + 1;
            v293 = (unint64_t)&v291[-v5 + 1];
            v294 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)(v291 + 1) > v562)
              goto LABEL_463;
LABEL_473:
            *v294 = *(_OWORD *)v5;
            v342 = *(_QWORD *)(a2 + 24);
            if (v293 > 0x10)
            {
              v343 = (_OWORD *)(v342 + 16);
              v344 = v342 + v293;
              v345 = (__int128 *)(v5 + 16);
              do
              {
                v346 = *v345++;
                *v343++ = v346;
              }
              while ((unint64_t)v343 < v344);
              goto LABEL_531;
            }
            *(_QWORD *)(a2 + 24) = v342 + v293;
            v312 = *(_QWORD *)(a2 + 8);
LABEL_533:
            v315 = v271 - v554 - v289;
            v314 = v284 - 3;
            *(_WORD *)(v312 + 4) = v293;
            *(_DWORD *)v312 = v315 + 3;
            v11 = v12;
            if (!((v284 - 3) >> 16))
            {
LABEL_434:
              *(_WORD *)(v312 + 6) = v314;
              v317 = v312 + 8;
              *(_QWORD *)(a2 + 8) = v312 + 8;
              v5 = (unint64_t)&v274[v284];
              if ((unint64_t)&v274[v284] <= v582)
              {
                *(_DWORD *)(v578 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v260 + 2 + v271)) >> v574)) = v271 + 2;
                *(_DWORD *)(v578 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v5 - 2)) >> v574)) = v5 - 2 - v260;
                v318 = v11;
                while (1)
                {
                  v11 = v315;
                  v315 = v318;
                  v319 = (v5 - v260 - v318);
                  v320 = v558;
                  if (v319 >= v261)
                    v320 = v260;
                  if ((v570 - v319) < 3)
                    break;
                  v321 = v320 + v319;
                  if (*(_DWORD *)v321 != *(_DWORD *)v5)
                    break;
                  if (v319 >= v261)
                    v263 = (char *)v10;
                  v322 = ZSTD_count_2segments((_QWORD *)(v5 + 4), (char *)(v321 + 4), v10, v263, v586);
                  v267 = v562;
                  if (v5 <= v562)
                  {
                    *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                    v317 = *(_QWORD *)(a2 + 8);
                  }
                  *(_WORD *)(v317 + 4) = 0;
                  *(_DWORD *)v317 = 1;
                  if (v322 + 1 >= 0x10000)
                  {
                    v323 = (unint64_t)(v317 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 2;
                    *(_DWORD *)(a2 + 76) = v323;
                  }
                  *(_WORD *)(v317 + 6) = v322 + 1;
                  v317 += 8;
                  *(_DWORD *)(v578 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v5) >> v574)) = v5 - v260;
                  v5 += v322 + 4;
                  *(_QWORD *)(a2 + 8) = v317;
                  v318 = v11;
                  v12 = v315;
                  v265 = v5;
                  v10 = v590;
                  v263 = v566;
                  if (v5 > v582)
                    goto LABEL_367;
                }
                v12 = v11;
                v11 = v315;
                v265 = v5;
              }
              else
              {
                v12 = v315;
                v265 = (unint64_t)&v274[v284];
              }
              goto LABEL_367;
            }
LABEL_433:
            v316 = (unint64_t)(v312 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v316;
            goto LABEL_434;
          }
          v274 = (unsigned __int8 *)v265;
          v10 = v590;
          v267 = v562;
          v263 = v566;
          v271 = v265 - v260;
          v293 = v265 - v5;
          v294 = *(_OWORD **)(a2 + 24);
          if (v265 <= v562)
            goto LABEL_473;
LABEL_463:
          if (v5 <= v267)
          {
            v336 = (char *)v294 + v267 - v5;
            v347 = (__int128 *)v5;
            v348 = v294;
            do
            {
              v349 = *v347++;
              *v348++ = v349;
            }
            while (v348 < (_OWORD *)v336);
            v335 = v267;
            if (v267 < v265)
              goto LABEL_482;
          }
          else
          {
            v335 = v5;
            v336 = v294;
            if (v5 >= v265)
              goto LABEL_531;
LABEL_482:
            if (v5 <= v267)
              v350 = v267;
            else
              v350 = v5;
            v351 = v265 - v350;
            if (v265 - v350 < 8)
            {
              v352 = (char *)v335;
              goto LABEL_530;
            }
            if ((unint64_t)v294 - v5 < 0x20)
            {
              v352 = (char *)v335;
              goto LABEL_530;
            }
            if (v351 >= 0x20)
            {
              v371 = v351 & 0xFFFFFFFFFFFFFFE0;
              v372 = (__int128 *)(v335 + 16);
              v373 = (_OWORD *)((char *)v294 + v350 - v5 + 16);
              v374 = v351 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v375 = *v372;
                *(v373 - 1) = *(v372 - 1);
                *v373 = v375;
                v372 += 2;
                v373 += 2;
                v374 -= 32;
              }
              while (v374);
              if (v351 != v371)
              {
                if ((v351 & 0x18) == 0)
                {
                  v352 = (char *)(v335 + v371);
                  v336 += v371;
                  goto LABEL_530;
                }
                goto LABEL_518;
              }
            }
            else
            {
              v371 = 0;
LABEL_518:
              v336 += v351 & 0xFFFFFFFFFFFFFFF8;
              v352 = (char *)(v335 + (v351 & 0xFFFFFFFFFFFFFFF8));
              v376 = (uint64_t *)(v335 + v371);
              v377 = (_QWORD *)((char *)v294 + v371 + v350 - v5);
              v378 = v371 - (v351 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v379 = *v376++;
                *v377++ = v379;
                v378 += 8;
              }
              while (v378);
              if (v351 != (v351 & 0xFFFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_530:
                  v382 = *v352++;
                  *v336++ = v382;
                }
                while ((unint64_t)v352 < v265);
              }
            }
          }
LABEL_531:
          *(_QWORD *)(a2 + 24) += v293;
          v312 = *(_QWORD *)(a2 + 8);
          if (v293 >= 0x10000)
          {
            v383 = (unint64_t)(v312 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v383;
          }
          goto LABEL_533;
        }
      }
      else
      {
        v280 = v260 + v270;
        if (*(_DWORD *)(v260 + v270) == *(_DWORD *)v265)
        {
          v281 = (_QWORD *)(v265 + 4);
          v282 = (_DWORD *)(v280 + 4);
          if (v529 <= v265 + 4)
          {
            v300 = (_DWORD *)(v265 + 4);
            if ((unint64_t)v281 < v525)
            {
LABEL_401:
              if (*v282 == *v300)
              {
                ++v300;
                ++v282;
              }
            }
          }
          else
          {
            v283 = *v281 ^ *(_QWORD *)v282;
            if (v283)
            {
              v284 = (__clz(__rbit64(v283)) >> 3) + 4;
              if (v265 <= v5)
                goto LABEL_383;
LABEL_412:
              v301 = (unsigned __int8 *)(v265 - 1);
              v302 = (unsigned __int8 *)(v260 - 1 + v270);
              while (*v301 == *v302)
              {
                ++v284;
                v303 = v301 - 1;
                if (v302 > v586)
                {
                  --v302;
                  v44 = (unint64_t)v301-- > v5;
                  if (v44)
                    continue;
                }
                v274 = v303 + 1;
                v285 = (unint64_t)&v303[-v5 + 1];
                v286 = *(_OWORD **)(a2 + 24);
                if ((unint64_t)v274 <= v267)
                  goto LABEL_450;
                goto LABEL_384;
              }
              v274 = v301 + 1;
              v285 = (unint64_t)&v301[-v5 + 1];
              v286 = *(_OWORD **)(a2 + 24);
              if ((unint64_t)(v301 + 1) > v267)
                goto LABEL_384;
              goto LABEL_450;
            }
            v337 = 0;
            v338 = v265 + 12;
            while (1)
            {
              v339 = (_QWORD *)(v338 + v337);
              if (v338 + v337 >= v529)
                break;
              v340 = *(_QWORD *)(v517 + v270 + v337);
              v337 += 8;
              v341 = *v339 ^ v340;
              if (v341)
              {
                v284 = v337 + (__clz(__rbit64(v341)) >> 3) + 4;
                if (v265 > v5)
                  goto LABEL_412;
                goto LABEL_383;
              }
            }
            v300 = (_DWORD *)(v265 + v337 + 12);
            v282 = (_DWORD *)(v517 + v270 + v337);
            if ((unint64_t)v300 < v525)
              goto LABEL_401;
          }
          if ((unint64_t)v300 >= v521)
          {
            if ((unint64_t)v300 >= v10)
              goto LABEL_411;
          }
          else
          {
            if (*(unsigned __int16 *)v282 == *(unsigned __int16 *)v300)
            {
              v300 = (_DWORD *)((char *)v300 + 2);
              v282 = (_DWORD *)((char *)v282 + 2);
            }
            if ((unint64_t)v300 >= v10)
            {
LABEL_411:
              v284 = (unint64_t)v300 - v265;
              if (v265 > v5)
                goto LABEL_412;
LABEL_383:
              v274 = (unsigned __int8 *)v265;
              v285 = v265 - v5;
              v286 = *(_OWORD **)(a2 + 24);
              if (v265 <= v267)
              {
LABEL_450:
                *v286 = *(_OWORD *)v5;
                v324 = *(_QWORD *)(a2 + 24);
                if (v285 > 0x10)
                {
                  v325 = (_OWORD *)(v324 + 16);
                  v326 = v324 + v285;
                  v327 = (__int128 *)(v5 + 16);
                  do
                  {
                    v328 = *v327++;
                    *v325++ = v328;
                  }
                  while ((unint64_t)v325 < v326);
                  goto LABEL_525;
                }
                *(_QWORD *)(a2 + 24) = v324 + v285;
                v312 = *(_QWORD *)(a2 + 8);
LABEL_527:
                v315 = (v265 - v280);
                v314 = v284 - 3;
                *(_WORD *)(v312 + 4) = v285;
                *(_DWORD *)v312 = v315 + 3;
                v11 = v12;
                if (v284 - 3 < 0x10000)
                  goto LABEL_434;
                goto LABEL_433;
              }
LABEL_384:
              if (v5 <= v267)
              {
                v288 = (char *)v286 + v267 - v5;
                v329 = (__int128 *)v5;
                v330 = v286;
                do
                {
                  v331 = *v329++;
                  *v330++ = v331;
                }
                while (v330 < (_OWORD *)v288);
                v287 = v267;
                if (v267 >= (unint64_t)v274)
                  goto LABEL_525;
              }
              else
              {
                v287 = v5;
                v288 = v286;
                if (v5 >= (unint64_t)v274)
                {
LABEL_525:
                  *(_QWORD *)(a2 + 24) += v285;
                  v312 = *(_QWORD *)(a2 + 8);
                  if (v285 >= 0x10000)
                  {
                    v381 = (unint64_t)(v312 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v381;
                  }
                  goto LABEL_527;
                }
              }
              if (v5 <= v267)
                v332 = v267;
              else
                v332 = v5;
              v333 = (unint64_t)&v274[-v332];
              if ((unint64_t)&v274[-v332] < 8)
              {
                v334 = (unsigned __int8 *)v287;
                goto LABEL_524;
              }
              if ((unint64_t)v286 - v5 < 0x20)
              {
                v334 = (unsigned __int8 *)v287;
                goto LABEL_524;
              }
              if (v333 >= 0x20)
              {
                v354 = v333 & 0xFFFFFFFFFFFFFFE0;
                v363 = (__int128 *)(v287 + 16);
                v364 = (_OWORD *)((char *)v286 + v332 - v5 + 16);
                v365 = v333 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v366 = *v363;
                  *(v364 - 1) = *(v363 - 1);
                  *v364 = v366;
                  v363 += 2;
                  v364 += 2;
                  v365 -= 32;
                }
                while (v365);
                if (v333 == v354)
                  goto LABEL_525;
                if ((v333 & 0x18) == 0)
                {
                  v334 = (unsigned __int8 *)(v287 + v354);
                  v288 += v354;
                  do
                  {
LABEL_524:
                    v380 = *v334++;
                    *v288++ = v380;
                  }
                  while (v334 < v274);
                  goto LABEL_525;
                }
              }
              else
              {
                v354 = 0;
              }
              v288 += v333 & 0xFFFFFFFFFFFFFFF8;
              v334 = (unsigned __int8 *)(v287 + (v333 & 0xFFFFFFFFFFFFFFF8));
              v367 = (uint64_t *)(v287 + v354);
              v368 = (_QWORD *)((char *)v286 + v354 + v332 - v5);
              v369 = v354 - (v333 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v370 = *v367++;
                *v368++ = v370;
                v369 += 8;
              }
              while (v369);
              if (v333 == (v333 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_525;
              goto LABEL_524;
            }
          }
          if (*(unsigned __int8 *)v282 == *(unsigned __int8 *)v300)
            v300 = (_DWORD *)((char *)v300 + 1);
          goto LABEL_411;
        }
      }
      v265 += v546 + ((uint64_t)(v265 - v5) >> 8);
LABEL_367:
      v264 = v550;
      if (v265 >= v582)
        goto LABEL_712;
    }
    if (v272 >= v261)
      v263 = (char *)v10;
    v275 = ZSTD_count_2segments((_QWORD *)(v265 + 5), (char *)(v273 + 4), v10, v263, v586);
    v267 = v562;
    v276 = (unint64_t)&v274[-v5];
    v277 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v274 <= v562)
    {
      *v277 = *(_OWORD *)v5;
      v295 = *(_QWORD *)(a2 + 24);
      if (v276 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v295 + v276;
        v312 = *(_QWORD *)(a2 + 8);
        v10 = v590;
        v263 = v566;
        v271 = v265 - v260;
        goto LABEL_432;
      }
      v296 = (_OWORD *)(v295 + 16);
      v297 = v295 + v276;
      v298 = (__int128 *)(v5 + 16);
      v10 = v590;
      v263 = v566;
      v271 = v265 - v260;
      do
      {
        v299 = *v298++;
        *v296++ = v299;
      }
      while ((unint64_t)v296 < v297);
    }
    else
    {
      if (v5 <= v562)
      {
        v279 = (char *)v277 + v562 - v5;
        v304 = (__int128 *)v5;
        v305 = *(_OWORD **)(a2 + 24);
        v10 = v590;
        v263 = v566;
        v271 = v265 - v260;
        do
        {
          v306 = *v304++;
          *v305++ = v306;
        }
        while (v305 < (_OWORD *)v279);
        v278 = v562;
        if (v562 >= (unint64_t)v274)
          goto LABEL_429;
      }
      else
      {
        v278 = v5;
        v279 = *(_BYTE **)(a2 + 24);
        v10 = v590;
        v263 = v566;
        v271 = v265 - v260;
        if (v5 >= (unint64_t)v274)
          goto LABEL_429;
      }
      if (v5 <= v562)
        v307 = v562;
      else
        v307 = v5;
      v308 = v265 - v307 + 1;
      if (v308 < 8 || (unint64_t)v277 - v5 < 0x20)
      {
        v309 = (char *)v278;
        goto LABEL_427;
      }
      if (v308 >= 0x20)
      {
        v353 = v308 & 0xFFFFFFFFFFFFFFE0;
        v355 = (__int128 *)(v278 + 16);
        v356 = (_OWORD *)((char *)v277 + v307 - v5 + 16);
        v357 = v308 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v358 = *v355;
          *(v356 - 1) = *(v355 - 1);
          *v356 = v358;
          v355 += 2;
          v356 += 2;
          v357 -= 32;
        }
        while (v357);
        if (v308 == v353)
          goto LABEL_429;
        if ((v308 & 0x18) == 0)
        {
          v309 = (char *)(v278 + v353);
          v279 += v353;
LABEL_427:
          v310 = (char *)(v308 + v278);
          do
          {
            v311 = *v309++;
            *v279++ = v311;
          }
          while (v309 != v310);
          goto LABEL_429;
        }
      }
      else
      {
        v353 = 0;
      }
      v279 += v308 & 0xFFFFFFFFFFFFFFF8;
      v309 = (char *)(v278 + (v308 & 0xFFFFFFFFFFFFFFF8));
      v359 = (uint64_t *)(v278 + v353);
      v360 = (_QWORD *)((char *)v277 + v353 + v307 - v5);
      v361 = v353 - (v308 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v362 = *v359++;
        *v360++ = v362;
        v361 += 8;
      }
      while (v361);
      if (v308 != (v308 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_427;
    }
LABEL_429:
    *(_QWORD *)(a2 + 24) += v276;
    v312 = *(_QWORD *)(a2 + 8);
    if (v276 >= 0x10000)
    {
      v313 = (unint64_t)(v312 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v313;
    }
LABEL_432:
    v284 = v275 + 4;
    v314 = v275 + 1;
    *(_WORD *)(v312 + 4) = v276;
    *(_DWORD *)v312 = 1;
    v315 = v12;
    if (!((v275 + 1) >> 16))
      goto LABEL_434;
    goto LABEL_433;
  }
  if (v7 != 7)
  {
    v384 = *(_QWORD *)(a1 + 8);
    v385 = *(unsigned int *)(a1 + 24);
    v10 = a4 + a5;
    v12 = *a3;
    v11 = a3[1];
    v386 = *(_QWORD *)(a1 + 184);
    v387 = *(char **)v386;
    v388 = *(_QWORD *)(v386 + 8);
    v543 = *(unsigned int *)(v386 + 24);
    v583 = v10 - 8;
    v587 = (unsigned __int8 *)(v384 + v385);
    if (*(_QWORD *)v386 + (_DWORD)v5 - ((_DWORD)v384 + (_DWORD)v385) == (_DWORD)v388 + (_DWORD)v543)
      v389 = v5 + 1;
    else
      v389 = v5;
    if (v389 >= v10 - 8)
      goto LABEL_713;
    v514 = v388 + v543;
    v531 = a3;
    v579 = *(_QWORD *)(a1 + 48);
    LODWORD(v390) = *(_DWORD *)(a1 + 212);
    if ((_DWORD)v390)
      v390 = v390;
    else
      v390 = 1;
    v547 = v390;
    v575 = 32 - *(_DWORD *)(a1 + 200);
    v571 = v385 - 1;
    v539 = 32 - *(_DWORD *)(v386 + 200);
    v535 = *(_QWORD *)(v386 + 48);
    v391 = v10 - 32;
    v526 = v10 - 3;
    v530 = v10 - 7;
    v555 = v385 + v388 - (_DWORD)v387;
    v559 = v388 - v555;
    v510 = v388 - 1;
    v518 = v384 + 12;
    v522 = v10 - 1;
    v591 = v10;
    v551 = *(_QWORD *)(v386 + 8);
    v563 = v10 - 32;
    v567 = *(char **)v386;
    while (1)
    {
      v392 = *(unsigned int *)(v579 + 4 * ((-1640531535 * *(_DWORD *)v389) >> v575));
      v393 = v389 - v384;
      v394 = (v389 - v384 - v12 + 1);
      v395 = v388 + v394 - v555;
      if (v394 >= v385)
        v395 = v384 + v394;
      *(_DWORD *)(v579 + 4 * ((-1640531535 * *(_DWORD *)v389) >> v575)) = v393;
      if ((v571 - v394) >= 3)
      {
        v396 = (unsigned __int8 *)(v389 + 1);
        if (*(_DWORD *)v395 == *(_DWORD *)(v389 + 1))
          break;
      }
      if (v392 <= v385)
      {
        v411 = *(unsigned int *)(v535 + 4 * ((-1640531535 * *(_DWORD *)v389) >> v539));
        if (v411 > v543 && *(_DWORD *)(v388 + v411) == *(_DWORD *)v389)
        {
          v406 = ZSTD_count_2segments((_QWORD *)(v389 + 4), (char *)(v388 + v411 + 4), v10, v387, v587) + 4;
          if (v389 > v5)
          {
            v412 = (unsigned __int8 *)(v510 + v411);
            v413 = (unsigned __int8 *)(v389 - 1);
            v10 = v591;
            v387 = v567;
            v393 = v389 - v384;
            while (*v413 == *v412)
            {
              ++v406;
              v414 = v413 - 1;
              if ((unint64_t)v413 > v5)
              {
                --v413;
                v44 = (unint64_t)v412-- > v514;
                if (v44)
                  continue;
              }
              v389 = (unint64_t)(v414 + 1);
              v391 = v563;
              v396 = (unsigned __int8 *)v389;
              v415 = (unint64_t)&v414[-v5 + 1];
              v416 = *(_OWORD **)(a2 + 24);
              if (v389 <= v563)
                goto LABEL_650;
              goto LABEL_640;
            }
            v389 = (unint64_t)(v413 + 1);
            v391 = v563;
            v396 = v413 + 1;
            v415 = (unint64_t)&v413[-v5 + 1];
            v416 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)(v413 + 1) > v563)
              goto LABEL_640;
LABEL_650:
            *v416 = *(_OWORD *)v5;
            v464 = *(_QWORD *)(a2 + 24);
            if (v415 > 0x10)
            {
              v465 = (_OWORD *)(v464 + 16);
              v466 = v464 + v415;
              v467 = (__int128 *)(v5 + 16);
              do
              {
                v468 = *v467++;
                *v465++ = v468;
              }
              while ((unint64_t)v465 < v466);
              goto LABEL_708;
            }
            *(_QWORD *)(a2 + 24) = v464 + v415;
            v434 = *(_QWORD *)(a2 + 8);
LABEL_710:
            v437 = v393 - v555 - v411;
            v436 = v406 - 3;
            *(_WORD *)(v434 + 4) = v415;
            *(_DWORD *)v434 = v437 + 3;
            v11 = v12;
            if (!((v406 - 3) >> 16))
            {
LABEL_611:
              *(_WORD *)(v434 + 6) = v436;
              v439 = v434 + 8;
              *(_QWORD *)(a2 + 8) = v434 + 8;
              v5 = (unint64_t)&v396[v406];
              if ((unint64_t)&v396[v406] <= v583)
              {
                *(_DWORD *)(v579 + 4 * ((-1640531535 * *(_DWORD *)(v384 + 2 + v393)) >> v575)) = v393 + 2;
                *(_DWORD *)(v579 + 4 * ((-1640531535 * *(_DWORD *)(v5 - 2)) >> v575)) = v5 - 2 - v384;
                v440 = v11;
                while (1)
                {
                  v11 = v437;
                  v437 = v440;
                  v441 = (v5 - v384 - v440);
                  v442 = v559;
                  if (v441 >= v385)
                    v442 = v384;
                  if ((v571 - v441) < 3)
                    break;
                  v443 = v442 + v441;
                  if (*(_DWORD *)v443 != *(_DWORD *)v5)
                    break;
                  if (v441 >= v385)
                    v387 = (char *)v10;
                  v444 = ZSTD_count_2segments((_QWORD *)(v5 + 4), (char *)(v443 + 4), v10, v387, v587);
                  v391 = v563;
                  if (v5 <= v563)
                  {
                    *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                    v439 = *(_QWORD *)(a2 + 8);
                  }
                  *(_WORD *)(v439 + 4) = 0;
                  *(_DWORD *)v439 = 1;
                  if (v444 + 1 >= 0x10000)
                  {
                    v445 = (unint64_t)(v439 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 2;
                    *(_DWORD *)(a2 + 76) = v445;
                  }
                  *(_WORD *)(v439 + 6) = v444 + 1;
                  v439 += 8;
                  *(_DWORD *)(v579 + 4 * ((-1640531535 * *(_DWORD *)v5) >> v575)) = v5 - v384;
                  v5 += v444 + 4;
                  *(_QWORD *)(a2 + 8) = v439;
                  v440 = v11;
                  v12 = v437;
                  v389 = v5;
                  v10 = v591;
                  v387 = v567;
                  if (v5 > v583)
                    goto LABEL_544;
                }
                v12 = v11;
                v11 = v437;
                v389 = v5;
              }
              else
              {
                v12 = v437;
                v389 = (unint64_t)&v396[v406];
              }
              goto LABEL_544;
            }
LABEL_610:
            v438 = (unint64_t)(v434 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v438;
            goto LABEL_611;
          }
          v396 = (unsigned __int8 *)v389;
          v10 = v591;
          v391 = v563;
          v387 = v567;
          v393 = v389 - v384;
          v415 = v389 - v5;
          v416 = *(_OWORD **)(a2 + 24);
          if (v389 <= v563)
            goto LABEL_650;
LABEL_640:
          if (v5 <= v391)
          {
            v458 = (char *)v416 + v391 - v5;
            v469 = (__int128 *)v5;
            v470 = v416;
            do
            {
              v471 = *v469++;
              *v470++ = v471;
            }
            while (v470 < (_OWORD *)v458);
            v457 = v391;
            if (v391 < v389)
              goto LABEL_659;
          }
          else
          {
            v457 = v5;
            v458 = v416;
            if (v5 >= v389)
              goto LABEL_708;
LABEL_659:
            if (v5 <= v391)
              v472 = v391;
            else
              v472 = v5;
            v473 = v389 - v472;
            if (v389 - v472 < 8)
            {
              v474 = (char *)v457;
              goto LABEL_707;
            }
            if ((unint64_t)v416 - v5 < 0x20)
            {
              v474 = (char *)v457;
              goto LABEL_707;
            }
            if (v473 >= 0x20)
            {
              v493 = v473 & 0xFFFFFFFFFFFFFFE0;
              v494 = (__int128 *)(v457 + 16);
              v495 = (_OWORD *)((char *)v416 + v472 - v5 + 16);
              v496 = v473 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v497 = *v494;
                *(v495 - 1) = *(v494 - 1);
                *v495 = v497;
                v494 += 2;
                v495 += 2;
                v496 -= 32;
              }
              while (v496);
              if (v473 != v493)
              {
                if ((v473 & 0x18) == 0)
                {
                  v474 = (char *)(v457 + v493);
                  v458 += v493;
                  goto LABEL_707;
                }
                goto LABEL_695;
              }
            }
            else
            {
              v493 = 0;
LABEL_695:
              v458 += v473 & 0xFFFFFFFFFFFFFFF8;
              v474 = (char *)(v457 + (v473 & 0xFFFFFFFFFFFFFFF8));
              v498 = (uint64_t *)(v457 + v493);
              v499 = (_QWORD *)((char *)v416 + v493 + v472 - v5);
              v500 = v493 - (v473 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v501 = *v498++;
                *v499++ = v501;
                v500 += 8;
              }
              while (v500);
              if (v473 != (v473 & 0xFFFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_707:
                  v504 = *v474++;
                  *v458++ = v504;
                }
                while ((unint64_t)v474 < v389);
              }
            }
          }
LABEL_708:
          *(_QWORD *)(a2 + 24) += v415;
          v434 = *(_QWORD *)(a2 + 8);
          if (v415 >= 0x10000)
          {
            v505 = (unint64_t)(v434 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v505;
          }
          goto LABEL_710;
        }
      }
      else
      {
        v402 = v384 + v392;
        if (*(_DWORD *)(v384 + v392) == *(_DWORD *)v389)
        {
          v403 = (_QWORD *)(v389 + 4);
          v404 = (_DWORD *)(v402 + 4);
          if (v530 <= v389 + 4)
          {
            v422 = (_DWORD *)(v389 + 4);
            if ((unint64_t)v403 < v526)
            {
LABEL_578:
              if (*v404 == *v422)
              {
                ++v422;
                ++v404;
              }
            }
          }
          else
          {
            v405 = *v403 ^ *(_QWORD *)v404;
            if (v405)
            {
              v406 = (__clz(__rbit64(v405)) >> 3) + 4;
              if (v389 <= v5)
                goto LABEL_560;
LABEL_589:
              v423 = (unsigned __int8 *)(v389 - 1);
              v424 = (unsigned __int8 *)(v384 - 1 + v392);
              while (*v423 == *v424)
              {
                ++v406;
                v425 = v423 - 1;
                if (v424 > v587)
                {
                  --v424;
                  v44 = (unint64_t)v423-- > v5;
                  if (v44)
                    continue;
                }
                v396 = v425 + 1;
                v407 = (unint64_t)&v425[-v5 + 1];
                v408 = *(_OWORD **)(a2 + 24);
                if ((unint64_t)v396 <= v391)
                  goto LABEL_627;
                goto LABEL_561;
              }
              v396 = v423 + 1;
              v407 = (unint64_t)&v423[-v5 + 1];
              v408 = *(_OWORD **)(a2 + 24);
              if ((unint64_t)(v423 + 1) > v391)
                goto LABEL_561;
              goto LABEL_627;
            }
            v459 = 0;
            v460 = v389 + 12;
            while (1)
            {
              v461 = (_QWORD *)(v460 + v459);
              if (v460 + v459 >= v530)
                break;
              v462 = *(_QWORD *)(v518 + v392 + v459);
              v459 += 8;
              v463 = *v461 ^ v462;
              if (v463)
              {
                v406 = v459 + (__clz(__rbit64(v463)) >> 3) + 4;
                if (v389 > v5)
                  goto LABEL_589;
                goto LABEL_560;
              }
            }
            v422 = (_DWORD *)(v389 + v459 + 12);
            v404 = (_DWORD *)(v518 + v392 + v459);
            if ((unint64_t)v422 < v526)
              goto LABEL_578;
          }
          if ((unint64_t)v422 >= v522)
          {
            if ((unint64_t)v422 >= v10)
              goto LABEL_588;
          }
          else
          {
            if (*(unsigned __int16 *)v404 == *(unsigned __int16 *)v422)
            {
              v422 = (_DWORD *)((char *)v422 + 2);
              v404 = (_DWORD *)((char *)v404 + 2);
            }
            if ((unint64_t)v422 >= v10)
            {
LABEL_588:
              v406 = (unint64_t)v422 - v389;
              if (v389 > v5)
                goto LABEL_589;
LABEL_560:
              v396 = (unsigned __int8 *)v389;
              v407 = v389 - v5;
              v408 = *(_OWORD **)(a2 + 24);
              if (v389 <= v391)
              {
LABEL_627:
                *v408 = *(_OWORD *)v5;
                v446 = *(_QWORD *)(a2 + 24);
                if (v407 > 0x10)
                {
                  v447 = (_OWORD *)(v446 + 16);
                  v448 = v446 + v407;
                  v449 = (__int128 *)(v5 + 16);
                  do
                  {
                    v450 = *v449++;
                    *v447++ = v450;
                  }
                  while ((unint64_t)v447 < v448);
                  goto LABEL_702;
                }
                *(_QWORD *)(a2 + 24) = v446 + v407;
                v434 = *(_QWORD *)(a2 + 8);
LABEL_704:
                v437 = (v389 - v402);
                v436 = v406 - 3;
                *(_WORD *)(v434 + 4) = v407;
                *(_DWORD *)v434 = v437 + 3;
                v11 = v12;
                if (v406 - 3 < 0x10000)
                  goto LABEL_611;
                goto LABEL_610;
              }
LABEL_561:
              if (v5 <= v391)
              {
                v410 = (char *)v408 + v391 - v5;
                v451 = (__int128 *)v5;
                v452 = v408;
                do
                {
                  v453 = *v451++;
                  *v452++ = v453;
                }
                while (v452 < (_OWORD *)v410);
                v409 = v391;
                if (v391 >= (unint64_t)v396)
                  goto LABEL_702;
              }
              else
              {
                v409 = v5;
                v410 = v408;
                if (v5 >= (unint64_t)v396)
                {
LABEL_702:
                  *(_QWORD *)(a2 + 24) += v407;
                  v434 = *(_QWORD *)(a2 + 8);
                  if (v407 >= 0x10000)
                  {
                    v503 = (unint64_t)(v434 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v503;
                  }
                  goto LABEL_704;
                }
              }
              if (v5 <= v391)
                v454 = v391;
              else
                v454 = v5;
              v455 = (unint64_t)&v396[-v454];
              if ((unint64_t)&v396[-v454] < 8)
              {
                v456 = (unsigned __int8 *)v409;
                goto LABEL_701;
              }
              if ((unint64_t)v408 - v5 < 0x20)
              {
                v456 = (unsigned __int8 *)v409;
                goto LABEL_701;
              }
              if (v455 >= 0x20)
              {
                v476 = v455 & 0xFFFFFFFFFFFFFFE0;
                v485 = (__int128 *)(v409 + 16);
                v486 = (_OWORD *)((char *)v408 + v454 - v5 + 16);
                v487 = v455 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v488 = *v485;
                  *(v486 - 1) = *(v485 - 1);
                  *v486 = v488;
                  v485 += 2;
                  v486 += 2;
                  v487 -= 32;
                }
                while (v487);
                if (v455 == v476)
                  goto LABEL_702;
                if ((v455 & 0x18) == 0)
                {
                  v456 = (unsigned __int8 *)(v409 + v476);
                  v410 += v476;
                  do
                  {
LABEL_701:
                    v502 = *v456++;
                    *v410++ = v502;
                  }
                  while (v456 < v396);
                  goto LABEL_702;
                }
              }
              else
              {
                v476 = 0;
              }
              v410 += v455 & 0xFFFFFFFFFFFFFFF8;
              v456 = (unsigned __int8 *)(v409 + (v455 & 0xFFFFFFFFFFFFFFF8));
              v489 = (uint64_t *)(v409 + v476);
              v490 = (_QWORD *)((char *)v408 + v476 + v454 - v5);
              v491 = v476 - (v455 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v492 = *v489++;
                *v490++ = v492;
                v491 += 8;
              }
              while (v491);
              if (v455 == (v455 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_702;
              goto LABEL_701;
            }
          }
          if (*(unsigned __int8 *)v404 == *(unsigned __int8 *)v422)
            v422 = (_DWORD *)((char *)v422 + 1);
          goto LABEL_588;
        }
      }
      v389 += v547 + ((uint64_t)(v389 - v5) >> 8);
LABEL_544:
      v388 = v551;
      if (v389 >= v583)
        goto LABEL_712;
    }
    if (v394 >= v385)
      v387 = (char *)v10;
    v397 = ZSTD_count_2segments((_QWORD *)(v389 + 5), (char *)(v395 + 4), v10, v387, v587);
    v391 = v563;
    v398 = (unint64_t)&v396[-v5];
    v399 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v396 <= v563)
    {
      *v399 = *(_OWORD *)v5;
      v417 = *(_QWORD *)(a2 + 24);
      if (v398 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v417 + v398;
        v434 = *(_QWORD *)(a2 + 8);
        v10 = v591;
        v387 = v567;
        v393 = v389 - v384;
        goto LABEL_609;
      }
      v418 = (_OWORD *)(v417 + 16);
      v419 = v417 + v398;
      v420 = (__int128 *)(v5 + 16);
      v10 = v591;
      v387 = v567;
      v393 = v389 - v384;
      do
      {
        v421 = *v420++;
        *v418++ = v421;
      }
      while ((unint64_t)v418 < v419);
    }
    else
    {
      if (v5 <= v563)
      {
        v401 = (char *)v399 + v563 - v5;
        v426 = (__int128 *)v5;
        v427 = *(_OWORD **)(a2 + 24);
        v10 = v591;
        v387 = v567;
        v393 = v389 - v384;
        do
        {
          v428 = *v426++;
          *v427++ = v428;
        }
        while (v427 < (_OWORD *)v401);
        v400 = v563;
        if (v563 >= (unint64_t)v396)
          goto LABEL_606;
      }
      else
      {
        v400 = v5;
        v401 = *(_BYTE **)(a2 + 24);
        v10 = v591;
        v387 = v567;
        v393 = v389 - v384;
        if (v5 >= (unint64_t)v396)
          goto LABEL_606;
      }
      if (v5 <= v563)
        v429 = v563;
      else
        v429 = v5;
      v430 = v389 - v429 + 1;
      if (v430 < 8 || (unint64_t)v399 - v5 < 0x20)
      {
        v431 = (char *)v400;
        goto LABEL_604;
      }
      if (v430 >= 0x20)
      {
        v475 = v430 & 0xFFFFFFFFFFFFFFE0;
        v477 = (__int128 *)(v400 + 16);
        v478 = (_OWORD *)((char *)v399 + v429 - v5 + 16);
        v479 = v430 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v480 = *v477;
          *(v478 - 1) = *(v477 - 1);
          *v478 = v480;
          v477 += 2;
          v478 += 2;
          v479 -= 32;
        }
        while (v479);
        if (v430 == v475)
          goto LABEL_606;
        if ((v430 & 0x18) == 0)
        {
          v431 = (char *)(v400 + v475);
          v401 += v475;
LABEL_604:
          v432 = (char *)(v430 + v400);
          do
          {
            v433 = *v431++;
            *v401++ = v433;
          }
          while (v431 != v432);
          goto LABEL_606;
        }
      }
      else
      {
        v475 = 0;
      }
      v401 += v430 & 0xFFFFFFFFFFFFFFF8;
      v431 = (char *)(v400 + (v430 & 0xFFFFFFFFFFFFFFF8));
      v481 = (uint64_t *)(v400 + v475);
      v482 = (_QWORD *)((char *)v399 + v475 + v429 - v5);
      v483 = v475 - (v430 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v484 = *v481++;
        *v482++ = v484;
        v483 += 8;
      }
      while (v483);
      if (v430 != (v430 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_604;
    }
LABEL_606:
    *(_QWORD *)(a2 + 24) += v398;
    v434 = *(_QWORD *)(a2 + 8);
    if (v398 >= 0x10000)
    {
      v435 = (unint64_t)(v434 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v435;
    }
LABEL_609:
    v406 = v397 + 4;
    v436 = v397 + 1;
    *(_WORD *)(v434 + 4) = v398;
    *(_DWORD *)v434 = 1;
    v437 = v12;
    if (!((v397 + 1) >> 16))
      goto LABEL_611;
    goto LABEL_610;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = a4 + a5;
  v12 = *a3;
  v11 = a3[1];
  v13 = *(_QWORD *)(a1 + 184);
  v14 = *(char **)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v540 = *(unsigned int *)(v13 + 24);
  v580 = v10 - 8;
  v584 = (unsigned __int8 *)(v8 + v9);
  if (*(_QWORD *)v13 + (_DWORD)v5 - ((_DWORD)v8 + (_DWORD)v9) == (_DWORD)v15 + (_DWORD)v540)
    v16 = v5 + 1;
  else
    v16 = v5;
  if (v16 < v10 - 8)
  {
    v511 = v15 + v540;
    v531 = a3;
    v576 = *(_QWORD *)(a1 + 48);
    LODWORD(v17) = *(_DWORD *)(a1 + 212);
    if ((_DWORD)v17)
      v17 = v17;
    else
      v17 = 1;
    v544 = v17;
    v572 = 64 - *(_DWORD *)(a1 + 200);
    v568 = v9 - 1;
    v532 = *(_QWORD *)(v13 + 48);
    v536 = 64 - *(_DWORD *)(v13 + 200);
    v18 = v10 - 32;
    v523 = v10 - 3;
    v527 = v10 - 7;
    v552 = v9 + v15 - (_DWORD)v14;
    v556 = v15 - v552;
    v507 = v15 - 1;
    v515 = v8 + 12;
    v519 = v10 - 1;
    v588 = v10;
    v548 = *(_QWORD *)(v13 + 8);
    v560 = v10 - 32;
    v564 = *(char **)v13;
    while (1)
    {
      v19 = 0xCF1BBCDCBFA56300 * *(_QWORD *)v16;
      v20 = 4 * (v19 >> v572);
      v21 = *(unsigned int *)(v576 + v20);
      v22 = v16 - v8;
      v23 = (v16 - v8 - v12 + 1);
      v24 = v15 + v23 - v552;
      if (v23 >= v9)
        v24 = v8 + v23;
      *(_DWORD *)(v576 + v20) = v22;
      if ((v568 - v23) >= 3)
      {
        v25 = (unsigned __int8 *)(v16 + 1);
        if (*(_DWORD *)v24 == *(_DWORD *)(v16 + 1))
          break;
      }
      if (v21 <= v9)
      {
        v40 = *(unsigned int *)(v532 + 4 * (v19 >> v536));
        if (v40 > v540 && *(_DWORD *)(v15 + v40) == *(_DWORD *)v16)
        {
          v35 = ZSTD_count_2segments((_QWORD *)(v16 + 4), (char *)(v15 + v40 + 4), v10, v14, v584) + 4;
          if (v16 > v5)
          {
            v41 = (unsigned __int8 *)(v507 + v40);
            v42 = (unsigned __int8 *)(v16 - 1);
            v10 = v588;
            v14 = v564;
            v22 = v16 - v8;
            while (*v42 == *v41)
            {
              ++v35;
              v43 = v42 - 1;
              if ((unint64_t)v42 > v5)
              {
                --v42;
                v44 = (unint64_t)v41-- > v511;
                if (v44)
                  continue;
              }
              v16 = (unint64_t)(v43 + 1);
              v18 = v560;
              v25 = (unsigned __int8 *)v16;
              v45 = (unint64_t)&v43[-v5 + 1];
              v46 = *(_OWORD **)(a2 + 24);
              if (v16 <= v560)
                goto LABEL_119;
              goto LABEL_109;
            }
            v16 = (unint64_t)(v42 + 1);
            v18 = v560;
            v25 = v42 + 1;
            v45 = (unint64_t)&v42[-v5 + 1];
            v46 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)(v42 + 1) > v560)
              goto LABEL_109;
LABEL_119:
            *v46 = *(_OWORD *)v5;
            v94 = *(_QWORD *)(a2 + 24);
            if (v45 > 0x10)
            {
              v95 = (_OWORD *)(v94 + 16);
              v96 = v94 + v45;
              v97 = (__int128 *)(v5 + 16);
              do
              {
                v98 = *v97++;
                *v95++ = v98;
              }
              while ((unint64_t)v95 < v96);
              goto LABEL_177;
            }
            *(_QWORD *)(a2 + 24) = v94 + v45;
            v64 = *(_QWORD *)(a2 + 8);
LABEL_179:
            v67 = v22 - v552 - v40;
            v66 = v35 - 3;
            *(_WORD *)(v64 + 4) = v45;
            *(_DWORD *)v64 = v67 + 3;
            v11 = v12;
            if (!((v35 - 3) >> 16))
            {
LABEL_80:
              *(_WORD *)(v64 + 6) = v66;
              v69 = v64 + 8;
              *(_QWORD *)(a2 + 8) = v64 + 8;
              v5 = (unint64_t)&v25[v35];
              if ((unint64_t)&v25[v35] <= v580)
              {
                *(_DWORD *)(v576 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v8 + 2 + v22)) >> v572)) = v22 + 2;
                *(_DWORD *)(v576 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v5 - 2)) >> v572)) = v5 - 2 - v8;
                v70 = v11;
                while (1)
                {
                  v11 = v67;
                  v67 = v70;
                  v71 = (v5 - v8 - v70);
                  v72 = v556;
                  if (v71 >= v9)
                    v72 = v8;
                  if ((v568 - v71) < 3)
                    break;
                  v73 = v72 + v71;
                  if (*(_DWORD *)v73 != *(_DWORD *)v5)
                    break;
                  if (v71 >= v9)
                    v14 = (char *)v10;
                  v74 = ZSTD_count_2segments((_QWORD *)(v5 + 4), (char *)(v73 + 4), v10, v14, v584);
                  v18 = v560;
                  if (v5 <= v560)
                  {
                    *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                    v69 = *(_QWORD *)(a2 + 8);
                  }
                  *(_WORD *)(v69 + 4) = 0;
                  *(_DWORD *)v69 = 1;
                  if (v74 + 1 >= 0x10000)
                  {
                    v75 = (unint64_t)(v69 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 2;
                    *(_DWORD *)(a2 + 76) = v75;
                  }
                  *(_WORD *)(v69 + 6) = v74 + 1;
                  v69 += 8;
                  *(_DWORD *)(v576 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)v5) >> v572)) = v5 - v8;
                  v5 += v74 + 4;
                  *(_QWORD *)(a2 + 8) = v69;
                  v70 = v11;
                  v12 = v67;
                  v16 = v5;
                  v10 = v588;
                  v14 = v564;
                  if (v5 > v580)
                    goto LABEL_13;
                }
                v12 = v11;
                v11 = v67;
                v16 = v5;
              }
              else
              {
                v12 = v67;
                v16 = (unint64_t)&v25[v35];
              }
              goto LABEL_13;
            }
LABEL_79:
            v68 = (unint64_t)(v64 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v68;
            goto LABEL_80;
          }
          v25 = (unsigned __int8 *)v16;
          v10 = v588;
          v18 = v560;
          v14 = v564;
          v22 = v16 - v8;
          v45 = v16 - v5;
          v46 = *(_OWORD **)(a2 + 24);
          if (v16 <= v560)
            goto LABEL_119;
LABEL_109:
          if (v5 <= v18)
          {
            v88 = (char *)v46 + v18 - v5;
            v99 = (__int128 *)v5;
            v100 = v46;
            do
            {
              v101 = *v99++;
              *v100++ = v101;
            }
            while (v100 < (_OWORD *)v88);
            v87 = v18;
            if (v18 < v16)
              goto LABEL_128;
          }
          else
          {
            v87 = v5;
            v88 = v46;
            if (v5 >= v16)
              goto LABEL_177;
LABEL_128:
            if (v5 <= v18)
              v102 = v18;
            else
              v102 = v5;
            v103 = v16 - v102;
            if (v16 - v102 < 8)
            {
              v104 = (char *)v87;
              goto LABEL_176;
            }
            if ((unint64_t)v46 - v5 < 0x20)
            {
              v104 = (char *)v87;
              goto LABEL_176;
            }
            if (v103 >= 0x20)
            {
              v123 = v103 & 0xFFFFFFFFFFFFFFE0;
              v124 = (__int128 *)(v87 + 16);
              v125 = (_OWORD *)((char *)v46 + v102 - v5 + 16);
              v126 = v103 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v127 = *v124;
                *(v125 - 1) = *(v124 - 1);
                *v125 = v127;
                v124 += 2;
                v125 += 2;
                v126 -= 32;
              }
              while (v126);
              if (v103 != v123)
              {
                if ((v103 & 0x18) == 0)
                {
                  v104 = (char *)(v87 + v123);
                  v88 += v123;
                  goto LABEL_176;
                }
                goto LABEL_164;
              }
            }
            else
            {
              v123 = 0;
LABEL_164:
              v88 += v103 & 0xFFFFFFFFFFFFFFF8;
              v104 = (char *)(v87 + (v103 & 0xFFFFFFFFFFFFFFF8));
              v128 = (uint64_t *)(v87 + v123);
              v129 = (_QWORD *)((char *)v46 + v123 + v102 - v5);
              v130 = v123 - (v103 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v131 = *v128++;
                *v129++ = v131;
                v130 += 8;
              }
              while (v130);
              if (v103 != (v103 & 0xFFFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_176:
                  v134 = *v104++;
                  *v88++ = v134;
                }
                while ((unint64_t)v104 < v16);
              }
            }
          }
LABEL_177:
          *(_QWORD *)(a2 + 24) += v45;
          v64 = *(_QWORD *)(a2 + 8);
          if (v45 >= 0x10000)
          {
            v135 = (unint64_t)(v64 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v135;
          }
          goto LABEL_179;
        }
      }
      else
      {
        v31 = v8 + v21;
        if (*(_DWORD *)(v8 + v21) == *(_DWORD *)v16)
        {
          v32 = (_QWORD *)(v16 + 4);
          v33 = (_DWORD *)(v31 + 4);
          if (v527 <= v16 + 4)
          {
            v52 = (_DWORD *)(v16 + 4);
            if ((unint64_t)v32 < v523)
            {
LABEL_47:
              if (*v33 == *v52)
              {
                ++v52;
                ++v33;
              }
            }
          }
          else
          {
            v34 = *v32 ^ *(_QWORD *)v33;
            if (v34)
            {
              v35 = (__clz(__rbit64(v34)) >> 3) + 4;
              if (v16 <= v5)
                goto LABEL_29;
LABEL_58:
              v53 = (unsigned __int8 *)(v16 - 1);
              v54 = (unsigned __int8 *)(v8 - 1 + v21);
              while (*v53 == *v54)
              {
                ++v35;
                v55 = v53 - 1;
                if (v54 > v584)
                {
                  --v54;
                  v44 = (unint64_t)v53-- > v5;
                  if (v44)
                    continue;
                }
                v25 = v55 + 1;
                v36 = (unint64_t)&v55[-v5 + 1];
                v37 = *(_OWORD **)(a2 + 24);
                if ((unint64_t)v25 <= v18)
                  goto LABEL_96;
                goto LABEL_30;
              }
              v25 = v53 + 1;
              v36 = (unint64_t)&v53[-v5 + 1];
              v37 = *(_OWORD **)(a2 + 24);
              if ((unint64_t)(v53 + 1) > v18)
                goto LABEL_30;
              goto LABEL_96;
            }
            v89 = 0;
            v90 = v16 + 12;
            while (1)
            {
              v91 = (_QWORD *)(v90 + v89);
              if (v90 + v89 >= v527)
                break;
              v92 = *(_QWORD *)(v515 + v21 + v89);
              v89 += 8;
              v93 = *v91 ^ v92;
              if (v93)
              {
                v35 = v89 + (__clz(__rbit64(v93)) >> 3) + 4;
                if (v16 > v5)
                  goto LABEL_58;
                goto LABEL_29;
              }
            }
            v52 = (_DWORD *)(v16 + v89 + 12);
            v33 = (_DWORD *)(v515 + v21 + v89);
            if ((unint64_t)v52 < v523)
              goto LABEL_47;
          }
          if ((unint64_t)v52 >= v519)
          {
            if ((unint64_t)v52 >= v10)
              goto LABEL_57;
          }
          else
          {
            if (*(unsigned __int16 *)v33 == *(unsigned __int16 *)v52)
            {
              v52 = (_DWORD *)((char *)v52 + 2);
              v33 = (_DWORD *)((char *)v33 + 2);
            }
            if ((unint64_t)v52 >= v10)
            {
LABEL_57:
              v35 = (unint64_t)v52 - v16;
              if (v16 > v5)
                goto LABEL_58;
LABEL_29:
              v25 = (unsigned __int8 *)v16;
              v36 = v16 - v5;
              v37 = *(_OWORD **)(a2 + 24);
              if (v16 <= v18)
              {
LABEL_96:
                *v37 = *(_OWORD *)v5;
                v76 = *(_QWORD *)(a2 + 24);
                if (v36 > 0x10)
                {
                  v77 = (_OWORD *)(v76 + 16);
                  v78 = v76 + v36;
                  v79 = (__int128 *)(v5 + 16);
                  do
                  {
                    v80 = *v79++;
                    *v77++ = v80;
                  }
                  while ((unint64_t)v77 < v78);
                  goto LABEL_171;
                }
                *(_QWORD *)(a2 + 24) = v76 + v36;
                v64 = *(_QWORD *)(a2 + 8);
LABEL_173:
                v67 = (v16 - v31);
                v66 = v35 - 3;
                *(_WORD *)(v64 + 4) = v36;
                *(_DWORD *)v64 = v67 + 3;
                v11 = v12;
                if (v35 - 3 < 0x10000)
                  goto LABEL_80;
                goto LABEL_79;
              }
LABEL_30:
              if (v5 <= v18)
              {
                v39 = (char *)v37 + v18 - v5;
                v81 = (__int128 *)v5;
                v82 = v37;
                do
                {
                  v83 = *v81++;
                  *v82++ = v83;
                }
                while (v82 < (_OWORD *)v39);
                v38 = v18;
                if (v18 >= (unint64_t)v25)
                  goto LABEL_171;
              }
              else
              {
                v38 = v5;
                v39 = v37;
                if (v5 >= (unint64_t)v25)
                {
LABEL_171:
                  *(_QWORD *)(a2 + 24) += v36;
                  v64 = *(_QWORD *)(a2 + 8);
                  if (v36 >= 0x10000)
                  {
                    v133 = (unint64_t)(v64 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v133;
                  }
                  goto LABEL_173;
                }
              }
              if (v5 <= v18)
                v84 = v18;
              else
                v84 = v5;
              v85 = (unint64_t)&v25[-v84];
              if ((unint64_t)&v25[-v84] < 8)
              {
                v86 = (unsigned __int8 *)v38;
                goto LABEL_170;
              }
              if ((unint64_t)v37 - v5 < 0x20)
              {
                v86 = (unsigned __int8 *)v38;
                goto LABEL_170;
              }
              if (v85 >= 0x20)
              {
                v106 = v85 & 0xFFFFFFFFFFFFFFE0;
                v115 = (__int128 *)(v38 + 16);
                v116 = (_OWORD *)((char *)v37 + v84 - v5 + 16);
                v117 = v85 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v118 = *v115;
                  *(v116 - 1) = *(v115 - 1);
                  *v116 = v118;
                  v115 += 2;
                  v116 += 2;
                  v117 -= 32;
                }
                while (v117);
                if (v85 == v106)
                  goto LABEL_171;
                if ((v85 & 0x18) == 0)
                {
                  v86 = (unsigned __int8 *)(v38 + v106);
                  v39 += v106;
                  do
                  {
LABEL_170:
                    v132 = *v86++;
                    *v39++ = v132;
                  }
                  while (v86 < v25);
                  goto LABEL_171;
                }
              }
              else
              {
                v106 = 0;
              }
              v39 += v85 & 0xFFFFFFFFFFFFFFF8;
              v86 = (unsigned __int8 *)(v38 + (v85 & 0xFFFFFFFFFFFFFFF8));
              v119 = (uint64_t *)(v38 + v106);
              v120 = (_QWORD *)((char *)v37 + v106 + v84 - v5);
              v121 = v106 - (v85 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v122 = *v119++;
                *v120++ = v122;
                v121 += 8;
              }
              while (v121);
              if (v85 == (v85 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_171;
              goto LABEL_170;
            }
          }
          if (*(unsigned __int8 *)v33 == *(unsigned __int8 *)v52)
            v52 = (_DWORD *)((char *)v52 + 1);
          goto LABEL_57;
        }
      }
      v16 += v544 + ((uint64_t)(v16 - v5) >> 8);
LABEL_13:
      v15 = v548;
      if (v16 >= v580)
        goto LABEL_712;
    }
    if (v23 >= v9)
      v14 = (char *)v10;
    v26 = ZSTD_count_2segments((_QWORD *)(v16 + 5), (char *)(v24 + 4), v10, v14, v584);
    v18 = v560;
    v27 = (unint64_t)&v25[-v5];
    v28 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v25 <= v560)
    {
      *v28 = *(_OWORD *)v5;
      v47 = *(_QWORD *)(a2 + 24);
      if (v27 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v47 + v27;
        v64 = *(_QWORD *)(a2 + 8);
        v10 = v588;
        v14 = v564;
        v22 = v16 - v8;
        goto LABEL_78;
      }
      v48 = (_OWORD *)(v47 + 16);
      v49 = v47 + v27;
      v50 = (__int128 *)(v5 + 16);
      v10 = v588;
      v14 = v564;
      v22 = v16 - v8;
      do
      {
        v51 = *v50++;
        *v48++ = v51;
      }
      while ((unint64_t)v48 < v49);
    }
    else
    {
      if (v5 <= v560)
      {
        v30 = (char *)v28 + v560 - v5;
        v56 = (__int128 *)v5;
        v57 = *(_OWORD **)(a2 + 24);
        v10 = v588;
        v14 = v564;
        v22 = v16 - v8;
        do
        {
          v58 = *v56++;
          *v57++ = v58;
        }
        while (v57 < (_OWORD *)v30);
        v29 = v560;
        if (v560 >= (unint64_t)v25)
          goto LABEL_75;
      }
      else
      {
        v29 = v5;
        v30 = *(_BYTE **)(a2 + 24);
        v10 = v588;
        v14 = v564;
        v22 = v16 - v8;
        if (v5 >= (unint64_t)v25)
          goto LABEL_75;
      }
      if (v5 <= v560)
        v59 = v560;
      else
        v59 = v5;
      v60 = v16 - v59 + 1;
      if (v60 < 8 || (unint64_t)v28 - v5 < 0x20)
      {
        v61 = (char *)v29;
        goto LABEL_73;
      }
      if (v60 >= 0x20)
      {
        v105 = v60 & 0xFFFFFFFFFFFFFFE0;
        v107 = (__int128 *)(v29 + 16);
        v108 = (_OWORD *)((char *)v28 + v59 - v5 + 16);
        v109 = v60 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v110 = *v107;
          *(v108 - 1) = *(v107 - 1);
          *v108 = v110;
          v107 += 2;
          v108 += 2;
          v109 -= 32;
        }
        while (v109);
        if (v60 == v105)
          goto LABEL_75;
        if ((v60 & 0x18) == 0)
        {
          v61 = (char *)(v29 + v105);
          v30 += v105;
LABEL_73:
          v62 = (char *)(v60 + v29);
          do
          {
            v63 = *v61++;
            *v30++ = v63;
          }
          while (v61 != v62);
          goto LABEL_75;
        }
      }
      else
      {
        v105 = 0;
      }
      v30 += v60 & 0xFFFFFFFFFFFFFFF8;
      v61 = (char *)(v29 + (v60 & 0xFFFFFFFFFFFFFFF8));
      v111 = (uint64_t *)(v29 + v105);
      v112 = (_QWORD *)((char *)v28 + v105 + v59 - v5);
      v113 = v105 - (v60 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v114 = *v111++;
        *v112++ = v114;
        v113 += 8;
      }
      while (v113);
      if (v60 != (v60 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_73;
    }
LABEL_75:
    *(_QWORD *)(a2 + 24) += v27;
    v64 = *(_QWORD *)(a2 + 8);
    if (v27 >= 0x10000)
    {
      v65 = (unint64_t)(v64 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v65;
    }
LABEL_78:
    v35 = v26 + 4;
    v66 = v26 + 1;
    *(_WORD *)(v64 + 4) = v27;
    *(_DWORD *)v64 = 1;
    v67 = v12;
    if (!((v26 + 1) >> 16))
      goto LABEL_80;
    goto LABEL_79;
  }
LABEL_713:
  *a3 = v12;
  a3[1] = v11;
  return v10 - v5;
}

unint64_t ZSTD_compressBlock_doubleFast_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unint64_t v40;
  _OWORD *v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  _QWORD *v45;
  _DWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _DWORD *v63;
  unint64_t v64;
  uint64_t v70;
  _OWORD *v71;
  unint64_t v72;
  __int128 *v73;
  __int128 v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  uint64_t v78;
  unsigned __int8 *v79;
  _QWORD *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unsigned __int8 *v84;
  __int128 *v85;
  _OWORD *v86;
  __int128 v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char v92;
  uint64_t v93;
  unint64_t v94;
  __int16 v95;
  unint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  uint64_t v100;
  unint64_t v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  unint64_t v106;
  uint64_t v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  _OWORD *v113;
  unint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  _OWORD *v117;
  unint64_t v118;
  __int128 *v119;
  __int128 v120;
  __int128 *v121;
  _OWORD *v122;
  __int128 v123;
  unint64_t v124;
  unint64_t v125;
  unsigned __int8 *v126;
  unint64_t v127;
  __int128 *v128;
  _OWORD *v129;
  unint64_t v130;
  __int128 v131;
  uint64_t *v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  uint64_t v139;
  unint64_t v140;
  __int128 *v141;
  _OWORD *v142;
  unint64_t v143;
  __int128 v144;
  uint64_t *v145;
  _QWORD *v146;
  unint64_t v147;
  uint64_t v148;
  char v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v170;
  unsigned __int8 *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  unsigned __int8 *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  unsigned __int8 *v190;
  unint64_t v191;
  unint64_t v192;
  _OWORD *v193;
  unint64_t v194;
  _BYTE *v195;
  uint64_t v196;
  _QWORD *v197;
  _DWORD *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unsigned __int8 *v205;
  unsigned __int8 *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  _DWORD *v214;
  unint64_t v215;
  uint64_t v218;
  _OWORD *v219;
  unint64_t v220;
  __int128 *v221;
  __int128 v222;
  unsigned __int8 *v223;
  unsigned __int8 *v224;
  unsigned __int8 *v225;
  uint64_t v226;
  unsigned __int8 *v227;
  _QWORD *v228;
  char *v229;
  unint64_t v230;
  unsigned __int8 *v231;
  __int128 *v232;
  _OWORD *v233;
  __int128 v234;
  unint64_t v235;
  unint64_t v236;
  char *v237;
  char *v238;
  char v239;
  uint64_t v240;
  unint64_t v241;
  __int16 v242;
  unint64_t v243;
  uint64_t v244;
  unsigned __int8 *v245;
  unsigned __int8 *v246;
  uint64_t v247;
  unint64_t v248;
  unsigned __int8 *v249;
  unsigned __int8 *v250;
  unsigned __int8 *v251;
  unsigned __int8 *v252;
  unint64_t v253;
  uint64_t v254;
  unsigned __int8 *v255;
  unsigned __int8 *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  _OWORD *v260;
  unint64_t v261;
  _BYTE *v262;
  uint64_t v263;
  _OWORD *v264;
  unint64_t v265;
  __int128 *v266;
  __int128 v267;
  __int128 *v268;
  _OWORD *v269;
  __int128 v270;
  unint64_t v271;
  unint64_t v272;
  unsigned __int8 *v273;
  unint64_t v274;
  __int128 *v275;
  _OWORD *v276;
  unint64_t v277;
  __int128 v278;
  uint64_t *v279;
  _QWORD *v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unsigned __int8 *v284;
  unsigned __int8 *v285;
  uint64_t v286;
  unint64_t v287;
  __int128 *v288;
  _OWORD *v289;
  unint64_t v290;
  __int128 v291;
  uint64_t *v292;
  _QWORD *v293;
  unint64_t v294;
  uint64_t v295;
  char v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  uint64_t v317;
  unsigned __int8 *v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  unsigned __int8 *v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  unsigned __int8 *v337;
  unint64_t v338;
  unint64_t v339;
  _OWORD *v340;
  unint64_t v341;
  _BYTE *v342;
  uint64_t v343;
  _QWORD *v344;
  _DWORD *v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unsigned __int8 *v351;
  unsigned __int8 *v352;
  unsigned __int8 *v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  char *v360;
  _DWORD *v361;
  unint64_t v362;
  uint64_t v365;
  _OWORD *v366;
  unint64_t v367;
  __int128 *v368;
  __int128 v369;
  unsigned __int8 *v370;
  unsigned __int8 *v371;
  unsigned __int8 *v372;
  uint64_t v373;
  unsigned __int8 *v374;
  _QWORD *v375;
  char *v376;
  unint64_t v377;
  unsigned __int8 *v378;
  __int128 *v379;
  _OWORD *v380;
  __int128 v381;
  unint64_t v382;
  unint64_t v383;
  char *v384;
  char *v385;
  char v386;
  uint64_t v387;
  unint64_t v388;
  __int16 v389;
  unint64_t v390;
  uint64_t v391;
  unsigned __int8 *v392;
  unsigned __int8 *v393;
  uint64_t v394;
  unint64_t v395;
  unsigned __int8 *v396;
  unsigned __int8 *v397;
  unsigned __int8 *v398;
  unsigned __int8 *v399;
  unint64_t v400;
  uint64_t v401;
  unsigned __int8 *v402;
  unsigned __int8 *v403;
  uint64_t v404;
  unint64_t v405;
  unint64_t v406;
  _OWORD *v407;
  unint64_t v408;
  _BYTE *v409;
  uint64_t v410;
  _OWORD *v411;
  unint64_t v412;
  __int128 *v413;
  __int128 v414;
  __int128 *v415;
  _OWORD *v416;
  __int128 v417;
  unint64_t v418;
  unint64_t v419;
  unsigned __int8 *v420;
  unint64_t v421;
  __int128 *v422;
  _OWORD *v423;
  unint64_t v424;
  __int128 v425;
  uint64_t *v426;
  _QWORD *v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unsigned __int8 *v431;
  unsigned __int8 *v432;
  uint64_t v433;
  unint64_t v434;
  __int128 *v435;
  _OWORD *v436;
  unint64_t v437;
  __int128 v438;
  uint64_t *v439;
  _QWORD *v440;
  unint64_t v441;
  uint64_t v442;
  char v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unint64_t v456;
  uint64_t v457;
  int v458;
  unsigned int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  uint64_t v464;
  unsigned __int8 *v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  char *v471;
  uint64_t v472;
  unsigned __int8 *v473;
  unint64_t v474;
  unint64_t v475;
  unsigned int v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  uint64_t v480;
  uint64_t v481;
  int v482;
  uint64_t v483;
  uint64_t v484;
  unsigned __int8 *v485;
  unint64_t v486;
  unint64_t v487;
  _OWORD *v488;
  unint64_t v489;
  _BYTE *v490;
  uint64_t v491;
  _QWORD *v492;
  _DWORD *v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  unsigned __int8 *v499;
  unsigned __int8 *v500;
  unsigned __int8 *v501;
  unint64_t v502;
  uint64_t v503;
  uint64_t v504;
  unint64_t v505;
  uint64_t v506;
  uint64_t v507;
  char *v508;
  _DWORD *v509;
  unint64_t v510;
  uint64_t v513;
  _OWORD *v514;
  unint64_t v515;
  __int128 *v516;
  __int128 v517;
  unsigned __int8 *v518;
  unsigned __int8 *v519;
  unsigned __int8 *v520;
  uint64_t v521;
  unsigned __int8 *v522;
  _QWORD *v523;
  char *v524;
  unint64_t v525;
  unint64_t v526;
  unsigned __int8 *v527;
  __int128 *v528;
  _OWORD *v529;
  __int128 v530;
  unint64_t v531;
  unint64_t v532;
  char *v533;
  char *v534;
  char v535;
  uint64_t v536;
  unint64_t v537;
  __int16 v538;
  unint64_t v539;
  uint64_t v540;
  unsigned __int8 *v541;
  unsigned __int8 *v542;
  uint64_t v543;
  unint64_t v544;
  unsigned __int8 *v545;
  unsigned __int8 *v546;
  unsigned __int8 *v547;
  unsigned __int8 *v548;
  unint64_t v549;
  uint64_t v550;
  unsigned __int8 *v551;
  unsigned __int8 *v552;
  uint64_t v553;
  unint64_t v554;
  unint64_t v555;
  _OWORD *v556;
  unint64_t v557;
  _BYTE *v558;
  uint64_t v559;
  _OWORD *v560;
  unint64_t v561;
  __int128 *v562;
  __int128 v563;
  __int128 *v564;
  _OWORD *v565;
  __int128 v566;
  unint64_t v567;
  unint64_t v568;
  unsigned __int8 *v569;
  unint64_t v570;
  __int128 *v571;
  _OWORD *v572;
  unint64_t v573;
  __int128 v574;
  uint64_t *v575;
  _QWORD *v576;
  unint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unsigned __int8 *v580;
  unsigned __int8 *v581;
  uint64_t v582;
  unint64_t v583;
  __int128 *v584;
  _OWORD *v585;
  unint64_t v586;
  __int128 v587;
  uint64_t *v588;
  _QWORD *v589;
  unint64_t v590;
  uint64_t v591;
  char v592;
  unint64_t v593;
  unint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  unint64_t v603;
  unint64_t v604;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  unint64_t v613;
  unint64_t v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t v618;
  unint64_t v619;
  uint64_t v620;
  unint64_t v621;
  unint64_t v622;
  uint64_t v623;
  unint64_t v624;
  unint64_t v625;
  unint64_t v626;
  unint64_t v627;
  unsigned int *v628;
  unsigned int *v629;
  unint64_t v630;
  uint64_t v631;
  uint64_t v632;
  unint64_t v633;
  uint64_t v634;
  int v635;
  int v636;
  uint64_t v637;
  int v638;
  int v639;
  unint64_t v640;
  unint64_t v641;
  unint64_t v642;
  unint64_t v643;
  int v644;
  int v645;
  int v646;
  int v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unsigned int v652;
  unsigned int v653;
  unsigned int v654;
  unsigned int v655;
  unsigned int v656;
  unsigned int v657;
  unsigned int v658;
  unsigned int v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  char *v668;
  char *v669;
  char *v670;
  char *v671;
  unint64_t v672;
  unint64_t v673;
  unint64_t v674;
  unint64_t v675;
  unint64_t v676;
  unint64_t v677;
  unint64_t v678;
  unint64_t v679;
  unint64_t v680;
  unint64_t v681;
  unint64_t v682;
  unint64_t v683;
  int v684;
  int v685;
  int v686;
  int v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  int v692;
  int v693;
  int v694;
  int v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;

  v5 = a4;
  v7 = *(_DWORD *)(a1 + 208);
  if (v7 == 5)
  {
    v163 = *(_QWORD *)(a1 + 8);
    v9 = a4 + a5;
    v164 = a4 + a5 - v163;
    v165 = *(_DWORD *)(a1 + 24);
    v166 = 1 << *(_DWORD *)(a1 + 192);
    v167 = v164 - v165;
    v168 = v164 - v166;
    if (v167 > v166 && *(_DWORD *)(a1 + 32) == 0)
      v170 = v168;
    else
      v170 = v165;
    v171 = (unsigned __int8 *)(v163 + v170);
    v172 = v9 - 8;
    v19 = *a3;
    v20 = a3[1];
    v173 = *(_QWORD *)(a1 + 184);
    v174 = *(unsigned int *)(v173 + 24);
    v175 = *(char **)v173;
    v176 = *(_QWORD *)(v173 + 8);
    if ((_DWORD)v5 - ((_DWORD)v176 + (_DWORD)v174) - ((_DWORD)v163 + (_DWORD)v170) + *(_QWORD *)v173)
      v177 = (unsigned __int8 *)v5;
    else
      v177 = (unsigned __int8 *)(v5 + 1);
    if ((unint64_t)v177 >= v172)
      goto LABEL_691;
    v613 = v176 + v174;
    v653 = *(_DWORD *)(v173 + 24);
    v628 = a3;
    v697 = *(_QWORD *)(a1 + 48);
    v689 = *(_QWORD *)(a1 + 64);
    v649 = *(_QWORD *)(v173 + 48);
    v693 = 64 - *(_DWORD *)(a1 + 200);
    v685 = 64 - *(_DWORD *)(a1 + 196);
    v635 = 64 - *(_DWORD *)(v173 + 196);
    v641 = v9 - 7;
    v645 = 64 - *(_DWORD *)(v173 + 200);
    v621 = v9 - 1;
    v625 = v9 - 3;
    v178 = v9 - 32;
    v657 = v170 + v176 - (_DWORD)v175;
    v665 = v176 - v657;
    v631 = *(_QWORD *)(v173 + 64);
    v606 = v176 - 1;
    v609 = v163 + 16;
    v617 = v163 - 1;
    v669 = *(char **)v173;
    v673 = v9 - 8;
    v677 = v9 - 32;
    v681 = v9;
    v661 = *(_QWORD *)(v173 + 8);
    while (1)
    {
      v179 = *(_QWORD *)v177;
      v180 = 0xCF1BBCDCB7A56463 * *(_QWORD *)v177;
      v181 = 0xCF1BBCDCBB000000 * *(_QWORD *)v177;
      v182 = 4 * (v180 >> v693);
      v183 = *(unsigned int *)(v697 + v182);
      v184 = (_DWORD)v177 - v163;
      v185 = 4 * (v181 >> v685);
      v186 = *(unsigned int *)(v689 + v185);
      v187 = (_DWORD)v177 - v163 + 1;
      v188 = (v187 - v19);
      *(_DWORD *)(v689 + v185) = (_DWORD)v177 - v163;
      v189 = v188 >= v170 ? v163 + v188 : v176 + v188 - v657;
      *(_DWORD *)(v697 + v182) = v184;
      if ((v170 + ~(_DWORD)v188) >= 3)
      {
        v190 = v177 + 1;
        if (*(_DWORD *)v189 == *(_DWORD *)(v177 + 1))
          break;
      }
      if (v183 <= v170)
      {
        v202 = *(unsigned int *)(v649 + 4 * (v180 >> v645));
        if (v202 > v653 && *(_QWORD *)(v661 + v202) == v179)
        {
          v9 = v681;
          v203 = ZSTD_count_2segments((_QWORD *)v177 + 1, (char *)(v661 + v202 + 8), v681, v175, v171);
          v184 = (_DWORD)v177 - v163;
          v200 = v203 + 8;
          v201 = (_DWORD)v177 - (_DWORD)v163 - v657 - v202;
          if ((unint64_t)v177 > v5)
          {
            v204 = v177 - 1;
            v205 = (unsigned __int8 *)(v606 + v202);
            v171 = (unsigned __int8 *)(v163 + v170);
            v178 = v677;
            v175 = v669;
            v172 = v673;
            while (*v204 == *v205)
            {
              ++v200;
              v206 = v204 - 1;
              if ((unint64_t)v205 > v613)
              {
                --v205;
                v55 = (unint64_t)v204-- > v5;
                if (v55)
                  continue;
              }
LABEL_364:
              v190 = v206 + 1;
              goto LABEL_395;
            }
LABEL_365:
            v190 = v204 + 1;
LABEL_395:
            v259 = (unint64_t)&v190[-v5];
            v260 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v190 > v178)
            {
              if (v5 <= v178)
              {
                v262 = (char *)v260 + v178 - v5;
                v268 = (__int128 *)v5;
                v269 = *(_OWORD **)(a2 + 24);
                do
                {
                  v270 = *v268++;
                  *v269++ = v270;
                }
                while (v269 < (_OWORD *)v262);
                v261 = v178;
                if (v178 >= (unint64_t)v190)
                  goto LABEL_443;
              }
              else
              {
                v261 = v5;
                v262 = *(_BYTE **)(a2 + 24);
                if (v5 >= (unint64_t)v190)
                {
LABEL_443:
                  *(_QWORD *)(a2 + 24) += v259;
                  v240 = *(_QWORD *)(a2 + 8);
                  if (v259 >= 0x10000)
                  {
                    v297 = (unint64_t)(v240 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v297;
                  }
                  goto LABEL_445;
                }
              }
              if (v5 <= v178)
                v271 = v178;
              else
                v271 = v5;
              v272 = (unint64_t)&v190[-v271];
              if ((unint64_t)&v190[-v271] < 8)
              {
                v273 = (unsigned __int8 *)v261;
                goto LABEL_442;
              }
              if ((unint64_t)v260 - v5 < 0x20)
              {
                v273 = (unsigned __int8 *)v261;
                goto LABEL_442;
              }
              if (v272 >= 0x20)
              {
                v274 = v272 & 0xFFFFFFFFFFFFFFE0;
                v275 = (__int128 *)(v261 + 16);
                v276 = (_OWORD *)((char *)v260 + v271 - v5 + 16);
                v277 = v272 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v278 = *v275;
                  *(v276 - 1) = *(v275 - 1);
                  *v276 = v278;
                  v275 += 2;
                  v276 += 2;
                  v277 -= 32;
                }
                while (v277);
                if (v272 == v274)
                  goto LABEL_443;
                if ((v272 & 0x18) == 0)
                {
                  v273 = (unsigned __int8 *)(v261 + v274);
                  v262 += v274;
                  do
                  {
LABEL_442:
                    v296 = *v273++;
                    *v262++ = v296;
                  }
                  while (v273 < v190);
                  goto LABEL_443;
                }
              }
              else
              {
                v274 = 0;
              }
              v262 += v272 & 0xFFFFFFFFFFFFFFF8;
              v273 = (unsigned __int8 *)(v261 + (v272 & 0xFFFFFFFFFFFFFFF8));
              v279 = (uint64_t *)(v261 + v274);
              v280 = (_QWORD *)((char *)v260 + v274 + v271 - v5);
              v281 = v274 - (v272 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v282 = *v279++;
                *v280++ = v282;
                v281 += 8;
              }
              while (v281);
              if (v272 == (v272 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_443;
              goto LABEL_442;
            }
            *v260 = *(_OWORD *)v5;
            v263 = *(_QWORD *)(a2 + 24);
            if (v259 > 0x10)
            {
              v264 = (_OWORD *)(v263 + 16);
              v265 = v263 + v259;
              v266 = (__int128 *)(v5 + 16);
              do
              {
                v267 = *v266++;
                *v264++ = v267;
              }
              while ((unint64_t)v264 < v265);
              goto LABEL_443;
            }
            *(_QWORD *)(a2 + 24) = v263 + v259;
            v240 = *(_QWORD *)(a2 + 8);
LABEL_445:
            v242 = v200 - 3;
            *(_WORD *)(v240 + 4) = v259;
            *(_DWORD *)v240 = v201 + 3;
            v20 = v19;
            v19 = v201;
            if ((unint64_t)(v200 - 3) >= 0x10000)
            {
LABEL_446:
              v298 = (unint64_t)(v240 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v298;
              v19 = v201;
            }
LABEL_447:
            *(_WORD *)(v240 + 6) = v242;
            v299 = v240 + 8;
            *(_QWORD *)(a2 + 8) = v240 + 8;
            v5 = (unint64_t)&v190[v200];
            if ((unint64_t)&v190[v200] <= v172)
            {
              v300 = *(_QWORD *)(v163 + (v184 + 2));
              *(_DWORD *)(v697 + 4 * ((0xCF1BBCDCB7A56463 * v300) >> v693)) = v184 + 2;
              *(_DWORD *)(v697 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v5 - 2)) >> v693)) = v5 - 2 - v163;
              *(_DWORD *)(v689 + 4 * ((0xCF1BBCDCBB000000 * v300) >> v685)) = v184 + 2;
              *(_DWORD *)(v689 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v5 - 1)) >> v685)) = v5 - 1 - v163;
              v301 = v19;
              v302 = v20;
              while (1)
              {
                v19 = v302;
                v302 = v301;
                v304 = v5 - v163;
                v305 = (v5 - v163 - v19);
                v306 = v665;
                if (v305 >= v170)
                  v306 = v163;
                if ((v170 + ~(_DWORD)v305) < 3)
                  break;
                v307 = v306 + v305;
                if (*(_DWORD *)v307 != *(_DWORD *)v5)
                  break;
                if (v305 >= v170)
                  v175 = (char *)v9;
                v308 = ZSTD_count_2segments((_QWORD *)(v5 + 4), (char *)(v307 + 4), v9, v175, v171);
                v178 = v677;
                if (v5 <= v677)
                {
                  *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                  v299 = *(_QWORD *)(a2 + 8);
                }
                *(_WORD *)(v299 + 4) = 0;
                *(_DWORD *)v299 = 1;
                v172 = v673;
                if (v308 + 1 >= 0x10000)
                {
                  v309 = (unint64_t)(v299 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v309;
                }
                *(_WORD *)(v299 + 6) = v308 + 1;
                v299 += 8;
                v303 = *(_QWORD *)v5;
                *(_DWORD *)(v689 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v5) >> v685)) = v304;
                *(_DWORD *)(v697 + 4 * ((0xCF1BBCDCB7A56463 * v303) >> v693)) = v304;
                v5 += v308 + 4;
                *(_QWORD *)(a2 + 8) = v299;
                v301 = v19;
                v20 = v302;
                v177 = (unsigned __int8 *)v5;
                v171 = (unsigned __int8 *)(v163 + v170);
                v175 = v669;
                if (v5 > v673)
                  goto LABEL_245;
              }
              v20 = v19;
              v19 = v301;
            }
            v177 = (unsigned __int8 *)v5;
            goto LABEL_245;
          }
LABEL_337:
          v190 = v177;
          v171 = (unsigned __int8 *)(v163 + v170);
          v178 = v677;
          v175 = v669;
          v172 = v673;
          goto LABEL_395;
        }
      }
      else
      {
        v196 = v163 + v183;
        if (*(_QWORD *)(v163 + v183) == v179)
        {
          v197 = v177 + 8;
          v198 = (_DWORD *)(v196 + 8);
          if (v641 <= (unint64_t)(v177 + 8))
          {
            v223 = v177 + 8;
            if ((unint64_t)v197 < v625)
            {
LABEL_289:
              if (*v198 == *(_DWORD *)v223)
              {
                v223 += 4;
                ++v198;
              }
            }
          }
          else
          {
            v199 = *v197 ^ *(_QWORD *)v198;
            if (v199)
            {
              v9 = v681;
              v200 = (__clz(__rbit64(v199)) >> 3) + 8;
              v201 = ((_DWORD)v177 - v196);
              if ((unint64_t)v177 <= v5)
                goto LABEL_394;
              goto LABEL_300;
            }
            v244 = 0;
            v245 = v177 + 16;
            v9 = v681;
            while (1)
            {
              v246 = &v245[v244];
              if ((unint64_t)&v245[v244] >= v641)
                break;
              v247 = *(_QWORD *)(v609 + v183 + v244);
              v244 += 8;
              v248 = *(_QWORD *)v246 ^ v247;
              if (v248)
              {
                v200 = v244 + (__clz(__rbit64(v248)) >> 3) + 8;
                v201 = ((_DWORD)v177 - v196);
                if ((unint64_t)v177 > v5)
                  goto LABEL_300;
                goto LABEL_394;
              }
            }
            v223 = &v177[v244 + 16];
            v198 = (_DWORD *)(v609 + v183 + v244);
            if ((unint64_t)v223 < v625)
              goto LABEL_289;
          }
          v9 = v681;
          if ((unint64_t)v223 >= v621)
          {
            if ((unint64_t)v223 >= v681)
              goto LABEL_299;
          }
          else
          {
            if (*(unsigned __int16 *)v198 == *(unsigned __int16 *)v223)
            {
              v223 += 2;
              v198 = (_DWORD *)((char *)v198 + 2);
            }
            if ((unint64_t)v223 >= v681)
            {
LABEL_299:
              v200 = v223 - v177;
              v201 = ((_DWORD)v177 - v196);
              if ((unint64_t)v177 <= v5)
                goto LABEL_394;
LABEL_300:
              v224 = v177 - 1;
              v225 = (unsigned __int8 *)(v617 + v183);
              while (*v224 == *v225)
              {
                ++v200;
                v206 = v224 - 1;
                if (v225 > v171)
                {
                  --v225;
                  v55 = (unint64_t)v224-- > v5;
                  if (v55)
                    continue;
                }
                goto LABEL_364;
              }
LABEL_382:
              v190 = v224 + 1;
              goto LABEL_395;
            }
          }
          if (*(unsigned __int8 *)v198 == *v223)
            ++v223;
          goto LABEL_299;
        }
      }
      if (v186 <= v170)
      {
        v208 = *(unsigned int *)(v631 + 4 * (v181 >> v635));
        if (v208 > v653)
        {
          v207 = v661 + v208;
          if (*(_DWORD *)(v661 + v208) == *(_DWORD *)v177)
          {
            LODWORD(v186) = v208 + v657;
LABEL_277:
            v190 = v177 + 1;
            v209 = *(_QWORD *)(v177 + 1);
            v210 = 4 * ((0xCF1BBCDCB7A56463 * v209) >> v693);
            v211 = *(unsigned int *)(v697 + v210);
            *(_DWORD *)(v697 + v210) = v187;
            if (v211 <= v170)
            {
              v226 = *(unsigned int *)(v649 + 4 * ((0xCF1BBCDCB7A56463 * v209) >> v645));
              if (v226 > v653 && *(_QWORD *)(v661 + v226) == v209)
              {
                v200 = ZSTD_count_2segments(v177 + 9, (char *)(v661 + v226 + 8), v681, v175, v171) + 8;
                v201 = v187 - v657 - v226;
                if ((unint64_t)v190 <= v5)
                {
                  v178 = v677;
                  v9 = v681;
                  v171 = (unsigned __int8 *)(v163 + v170);
                  v175 = v669;
                  v172 = v673;
                  v184 = (_DWORD)v177 - v163;
                  goto LABEL_395;
                }
                v227 = (unsigned __int8 *)(v606 + v226);
                v178 = v677;
                v9 = v681;
                v171 = (unsigned __int8 *)(v163 + v170);
                v175 = v669;
                v172 = v673;
                v184 = (_DWORD)v177 - v163;
                while (*v177 == *v227)
                {
                  ++v200;
                  v224 = v177 - 1;
                  if ((unint64_t)v177 > v5)
                  {
                    --v177;
                    v55 = (unint64_t)v227-- > v613;
                    if (v55)
                      continue;
                  }
                  goto LABEL_382;
                }
                goto LABEL_385;
              }
            }
            else
            {
              v212 = v163 + v211;
              if (*(_QWORD *)(v163 + v211) == v209)
              {
                v213 = (char *)(v177 + 9);
                v214 = (_DWORD *)(v212 + 8);
                if (v641 <= (unint64_t)(v177 + 9))
                {
                  v251 = v177 + 9;
                  v9 = v681;
                  if ((unint64_t)v213 < v625)
                  {
LABEL_367:
                    if (*v214 == *(_DWORD *)v251)
                    {
                      v251 += 4;
                      ++v214;
                    }
                  }
                }
                else
                {
                  v215 = *(_QWORD *)v213 ^ *(_QWORD *)v214;
                  v9 = v681;
                  if (v215)
                  {
                    v200 = (__clz(__rbit64(v215)) >> 3) + 8;
                    v201 = ((_DWORD)v190 - v212);
                    if ((unint64_t)v190 <= v5)
                      goto LABEL_395;
LABEL_378:
                    v252 = (unsigned __int8 *)(v617 + v211);
                    while (*v177 == *v252)
                    {
                      ++v200;
                      v224 = v177 - 1;
                      if ((unint64_t)v177 > v5)
                      {
                        --v177;
                        v55 = v252-- > v171;
                        if (v55)
                          continue;
                      }
                      goto LABEL_382;
                    }
LABEL_385:
                    v190 = v177 + 1;
                    goto LABEL_395;
                  }
                  v283 = 0;
                  v284 = v177 + 17;
                  while (1)
                  {
                    v285 = &v284[v283];
                    if ((unint64_t)&v284[v283] >= v641)
                      break;
                    v286 = *(_QWORD *)(v609 + v211 + v283);
                    v283 += 8;
                    v287 = *(_QWORD *)v285 ^ v286;
                    if (v287)
                    {
                      v200 = v283 + (__clz(__rbit64(v287)) >> 3) + 8;
                      v201 = ((_DWORD)v190 - v212);
                      if ((unint64_t)v190 > v5)
                        goto LABEL_378;
                      goto LABEL_395;
                    }
                  }
                  v251 = &v177[v283 + 17];
                  v214 = (_DWORD *)(v609 + v211 + v283);
                  if ((unint64_t)v251 < v625)
                    goto LABEL_367;
                }
                if ((unint64_t)v251 >= v621)
                {
                  if ((unint64_t)v251 >= v9)
                    goto LABEL_377;
                }
                else
                {
                  if (*(unsigned __int16 *)v214 == *(unsigned __int16 *)v251)
                  {
                    v251 += 2;
                    v214 = (_DWORD *)((char *)v214 + 2);
                  }
                  if ((unint64_t)v251 >= v9)
                  {
LABEL_377:
                    v200 = v251 - (unsigned __int8 *)v213 + 8;
                    v201 = ((_DWORD)v190 - v212);
                    if ((unint64_t)v190 <= v5)
                      goto LABEL_395;
                    goto LABEL_378;
                  }
                }
                if (*(unsigned __int8 *)v214 == *v251)
                  ++v251;
                goto LABEL_377;
              }
            }
            v228 = v177 + 4;
            v229 = (char *)(v207 + 4);
            if (v186 < v170)
            {
              v9 = v681;
              v230 = v207;
              v200 = ZSTD_count_2segments(v228, v229, v681, v175, v171) + 4;
              v184 = (_DWORD)v177 - v163;
              v201 = ((_DWORD)v177 - v163 - v186);
              if (v230 > v613)
              {
                v178 = v677;
                if ((unint64_t)v177 > v5)
                {
                  v204 = v177 - 1;
                  v231 = (unsigned __int8 *)(v230 - 1);
                  v171 = (unsigned __int8 *)(v163 + v170);
                  v175 = v669;
                  v172 = v673;
                  while (*v204 == *v231)
                  {
                    ++v200;
                    v206 = v204 - 1;
                    if ((unint64_t)v231 > v613)
                    {
                      --v231;
                      v55 = (unint64_t)v204-- > v5;
                      if (v55)
                        continue;
                    }
                    goto LABEL_364;
                  }
                  goto LABEL_365;
                }
                v190 = v177;
                v171 = (unsigned __int8 *)(v163 + v170);
                v175 = v669;
                v172 = v673;
                goto LABEL_395;
              }
              goto LABEL_337;
            }
            v9 = v681;
            if (v641 <= (unint64_t)v228)
            {
              v249 = v177 + 4;
              if ((unint64_t)v228 < v625)
              {
LABEL_348:
                if (*(_DWORD *)v229 == *(_DWORD *)v249)
                {
                  v249 += 4;
                  v229 += 4;
                }
              }
            }
            else
            {
              v243 = *v228 ^ *(_QWORD *)v229;
              if (v243)
              {
                v200 = (__clz(__rbit64(v243)) >> 3) + 4;
                v201 = ((_DWORD)v177 - v207);
                if (v207 <= (unint64_t)v171)
                  goto LABEL_394;
LABEL_359:
                if ((unint64_t)v177 > v5)
                {
                  v204 = v177 - 1;
                  v250 = (unsigned __int8 *)(v207 - 1);
                  while (*v204 == *v250)
                  {
                    ++v200;
                    v206 = v204 - 1;
                    if (v250 > v171)
                    {
                      --v250;
                      v55 = (unint64_t)v204-- > v5;
                      if (v55)
                        continue;
                    }
                    goto LABEL_364;
                  }
                  goto LABEL_365;
                }
                goto LABEL_394;
              }
              v254 = 0;
              v255 = v177 + 12;
              while (1)
              {
                v256 = &v255[v254];
                if ((unint64_t)&v255[v254] >= v641)
                  break;
                v257 = *(_QWORD *)(v207 + 12 + v254);
                v254 += 8;
                v258 = *(_QWORD *)v256 ^ v257;
                if (v258)
                {
                  v200 = v254 + (__clz(__rbit64(v258)) >> 3) + 4;
                  v201 = ((_DWORD)v177 - v207);
                  if (v207 > (unint64_t)v171)
                    goto LABEL_359;
                  goto LABEL_394;
                }
              }
              v249 = &v177[v254 + 12];
              v229 = (char *)(v207 + v254 + 12);
              if ((unint64_t)v249 < v625)
                goto LABEL_348;
            }
            if ((unint64_t)v249 >= v621)
            {
              if ((unint64_t)v249 < v681)
                goto LABEL_356;
            }
            else
            {
              if (*(unsigned __int16 *)v229 == *(unsigned __int16 *)v249)
              {
                v249 += 2;
                v229 += 2;
              }
              if ((unint64_t)v249 >= v681)
                goto LABEL_358;
LABEL_356:
              if (*v229 == *v249)
                ++v249;
            }
LABEL_358:
            v200 = v249 - v177;
            v201 = ((_DWORD)v177 - v207);
            if (v207 > (unint64_t)v171)
              goto LABEL_359;
LABEL_394:
            v190 = v177;
            goto LABEL_395;
          }
        }
      }
      else
      {
        v207 = v163 + v186;
        if (*(_DWORD *)(v163 + v186) == *(_DWORD *)v177)
          goto LABEL_277;
      }
      _X8 = &v177[(uint64_t)&v177[-v5] >> 8];
      v177 = _X8 + 1;
      _X8 += 257;
      __asm { PRFM            #0, [X8] }
      v9 = v681;
LABEL_245:
      v176 = v661;
      if ((unint64_t)v177 >= v172)
      {
LABEL_690:
        a3 = v628;
        goto LABEL_691;
      }
    }
    v9 = v681;
    if (v188 >= v170)
      v175 = (char *)v681;
    v191 = ZSTD_count_2segments(v177 + 5, (char *)(v189 + 4), v681, v175, v171);
    v178 = v677;
    v192 = (unint64_t)&v190[-v5];
    v193 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v190 <= v677)
    {
      *v193 = *(_OWORD *)v5;
      v218 = *(_QWORD *)(a2 + 24);
      if (v192 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v218 + v192;
        v240 = *(_QWORD *)(a2 + 8);
        v171 = (unsigned __int8 *)(v163 + v170);
        v175 = v669;
        v172 = v673;
        v184 = (_DWORD)v177 - v163;
        goto LABEL_335;
      }
      v219 = (_OWORD *)(v218 + 16);
      v220 = v218 + v192;
      v221 = (__int128 *)(v5 + 16);
      v171 = (unsigned __int8 *)(v163 + v170);
      v175 = v669;
      v172 = v673;
      v184 = (_DWORD)v177 - v163;
      do
      {
        v222 = *v221++;
        *v219++ = v222;
      }
      while ((unint64_t)v219 < v220);
    }
    else
    {
      if (v5 <= v677)
      {
        v195 = (char *)v193 + v677 - v5;
        v232 = (__int128 *)v5;
        v233 = *(_OWORD **)(a2 + 24);
        v171 = (unsigned __int8 *)(v163 + v170);
        v175 = v669;
        v172 = v673;
        v184 = (_DWORD)v177 - v163;
        do
        {
          v234 = *v232++;
          *v233++ = v234;
        }
        while (v233 < (_OWORD *)v195);
        v194 = v677;
        if (v677 >= (unint64_t)v190)
          goto LABEL_332;
      }
      else
      {
        v194 = v5;
        v195 = *(_BYTE **)(a2 + 24);
        v171 = (unsigned __int8 *)(v163 + v170);
        v175 = v669;
        v172 = v673;
        v184 = (_DWORD)v177 - v163;
        if (v5 >= (unint64_t)v190)
          goto LABEL_332;
      }
      if (v5 <= v677)
        v235 = v677;
      else
        v235 = v5;
      v236 = (unint64_t)&v177[-v235 + 1];
      if (v236 < 8 || (unint64_t)v193 - v5 < 0x20)
      {
        v237 = (char *)v194;
        goto LABEL_330;
      }
      if (v236 >= 0x20)
      {
        v253 = v236 & 0xFFFFFFFFFFFFFFE0;
        v288 = (__int128 *)(v194 + 16);
        v289 = (_OWORD *)((char *)v193 + v235 - v5 + 16);
        v290 = v236 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v291 = *v288;
          *(v289 - 1) = *(v288 - 1);
          *v289 = v291;
          v288 += 2;
          v289 += 2;
          v290 -= 32;
        }
        while (v290);
        if (v236 == v253)
          goto LABEL_332;
        if ((v236 & 0x18) == 0)
        {
          v237 = (char *)(v194 + v253);
          v195 += v253;
LABEL_330:
          v238 = (char *)(v236 + v194);
          do
          {
            v239 = *v237++;
            *v195++ = v239;
          }
          while (v237 != v238);
          goto LABEL_332;
        }
      }
      else
      {
        v253 = 0;
      }
      v195 += v236 & 0xFFFFFFFFFFFFFFF8;
      v237 = (char *)(v194 + (v236 & 0xFFFFFFFFFFFFFFF8));
      v292 = (uint64_t *)(v194 + v253);
      v293 = (_QWORD *)((char *)v193 + v253 + v235 - v5);
      v294 = v253 - (v236 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v295 = *v292++;
        *v293++ = v295;
        v294 += 8;
      }
      while (v294);
      if (v236 != (v236 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_330;
    }
LABEL_332:
    *(_QWORD *)(a2 + 24) += v192;
    v240 = *(_QWORD *)(a2 + 8);
    if (v192 >= 0x10000)
    {
      v241 = (unint64_t)(v240 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v241;
    }
LABEL_335:
    v200 = v191 + 4;
    v242 = v191 + 1;
    *(_WORD *)(v240 + 4) = v192;
    *(_DWORD *)v240 = 1;
    v201 = v19;
    if ((v191 + 1) >> 16)
      goto LABEL_446;
    goto LABEL_447;
  }
  if (v7 != 6)
  {
    if (v7 == 7)
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = a4 + a5;
      v10 = a4 + a5 - v8;
      v11 = *(_DWORD *)(a1 + 24);
      v12 = 1 << *(_DWORD *)(a1 + 192);
      v13 = v10 - v11;
      v14 = v10 - v12;
      if (v13 > v12 && *(_DWORD *)(a1 + 32) == 0)
        v16 = v14;
      else
        v16 = v11;
      v17 = (unsigned __int8 *)(v8 + v16);
      v18 = v9 - 8;
      v19 = *a3;
      v20 = a3[1];
      v21 = *(_QWORD *)(a1 + 184);
      v22 = *(unsigned int *)(v21 + 24);
      v23 = *(char **)v21;
      v24 = *(_QWORD *)(v21 + 8);
      if ((_DWORD)v5 - ((_DWORD)v24 + (_DWORD)v22) - ((_DWORD)v8 + (_DWORD)v16) + *(_QWORD *)v21)
        v25 = (unsigned __int8 *)v5;
      else
        v25 = (unsigned __int8 *)(v5 + 1);
      if ((unint64_t)v25 < v18)
      {
        v616 = v24 + v22;
        v652 = *(_DWORD *)(v21 + 24);
        v628 = a3;
        v696 = *(_QWORD *)(a1 + 48);
        v688 = *(_QWORD *)(a1 + 64);
        v648 = *(_QWORD *)(v21 + 48);
        v692 = 64 - *(_DWORD *)(a1 + 200);
        v684 = 64 - *(_DWORD *)(a1 + 196);
        v638 = 64 - *(_DWORD *)(v21 + 196);
        v640 = v9 - 7;
        v644 = 64 - *(_DWORD *)(v21 + 200);
        v26 = v9 - 32;
        v656 = v16 + v24 - (_DWORD)v23;
        v664 = v24 - v656;
        v630 = v9 - 3;
        v634 = *(_QWORD *)(v21 + 64);
        v608 = v24 - 1;
        v612 = v8 + 16;
        v620 = v8 - 1;
        v624 = v9 - 1;
        v668 = *(char **)v21;
        v672 = v9 - 8;
        v676 = v9 - 32;
        v680 = v9;
        v660 = *(_QWORD *)(v21 + 8);
        while (1)
        {
          v27 = *(_QWORD *)v25;
          v28 = 0xCF1BBCDCB7A56463 * *(_QWORD *)v25;
          v29 = 0xCF1BBCDCBFA56300 * *(_QWORD *)v25;
          v30 = 4 * (v28 >> v692);
          v31 = *(unsigned int *)(v696 + v30);
          v32 = (_DWORD)v25 - v8;
          v33 = 4 * (v29 >> v684);
          v34 = *(unsigned int *)(v688 + v33);
          v35 = (_DWORD)v25 - v8 + 1;
          v36 = (v35 - v19);
          *(_DWORD *)(v688 + v33) = (_DWORD)v25 - v8;
          v37 = v36 >= v16 ? v8 + v36 : v24 + v36 - v656;
          *(_DWORD *)(v696 + v30) = v32;
          if ((v16 + ~(_DWORD)v36) >= 3)
          {
            v38 = v25 + 1;
            if (*(_DWORD *)v37 == *(_DWORD *)(v25 + 1))
              break;
          }
          if (v31 <= v16)
          {
            v50 = *(unsigned int *)(v648 + 4 * (v28 >> v644));
            if (v50 > v652 && *(_QWORD *)(v660 + v50) == v27)
            {
              v9 = v680;
              v51 = ZSTD_count_2segments((_QWORD *)v25 + 1, (char *)(v660 + v50 + 8), v680, v23, v17);
              v32 = (_DWORD)v25 - v8;
              v48 = v51 + 8;
              v49 = (_DWORD)v25 - (_DWORD)v8 - v656 - v50;
              if ((unint64_t)v25 > v5)
              {
                v52 = v25 - 1;
                v53 = (unsigned __int8 *)(v608 + v50);
                v17 = (unsigned __int8 *)(v8 + v16);
                v26 = v676;
                v23 = v668;
                v18 = v672;
                while (*v52 == *v53)
                {
                  ++v48;
                  v54 = v52 - 1;
                  if ((unint64_t)v53 > v616)
                  {
                    --v53;
                    v55 = (unint64_t)v52-- > v5;
                    if (v55)
                      continue;
                  }
LABEL_136:
                  v38 = v54 + 1;
                  goto LABEL_166;
                }
LABEL_137:
                v38 = v52 + 1;
LABEL_166:
                v112 = (unint64_t)&v38[-v5];
                v113 = *(_OWORD **)(a2 + 24);
                if ((unint64_t)v38 > v26)
                {
                  if (v5 <= v26)
                  {
                    v115 = (char *)v113 + v26 - v5;
                    v121 = (__int128 *)v5;
                    v122 = *(_OWORD **)(a2 + 24);
                    do
                    {
                      v123 = *v121++;
                      *v122++ = v123;
                    }
                    while (v122 < (_OWORD *)v115);
                    v114 = v26;
                    if (v26 >= (unint64_t)v38)
                      goto LABEL_214;
                  }
                  else
                  {
                    v114 = v5;
                    v115 = *(_BYTE **)(a2 + 24);
                    if (v5 >= (unint64_t)v38)
                    {
LABEL_214:
                      *(_QWORD *)(a2 + 24) += v112;
                      v93 = *(_QWORD *)(a2 + 8);
                      if (v112 >= 0x10000)
                      {
                        v150 = (unint64_t)(v93 - *(_QWORD *)a2) >> 3;
                        *(_DWORD *)(a2 + 72) = 1;
                        *(_DWORD *)(a2 + 76) = v150;
                      }
                      goto LABEL_216;
                    }
                  }
                  if (v5 <= v26)
                    v124 = v26;
                  else
                    v124 = v5;
                  v125 = (unint64_t)&v38[-v124];
                  if ((unint64_t)&v38[-v124] < 8)
                  {
                    v126 = (unsigned __int8 *)v114;
                    goto LABEL_213;
                  }
                  if ((unint64_t)v113 - v5 < 0x20)
                  {
                    v126 = (unsigned __int8 *)v114;
                    goto LABEL_213;
                  }
                  if (v125 >= 0x20)
                  {
                    v127 = v125 & 0xFFFFFFFFFFFFFFE0;
                    v128 = (__int128 *)(v114 + 16);
                    v129 = (_OWORD *)((char *)v113 + v124 - v5 + 16);
                    v130 = v125 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v131 = *v128;
                      *(v129 - 1) = *(v128 - 1);
                      *v129 = v131;
                      v128 += 2;
                      v129 += 2;
                      v130 -= 32;
                    }
                    while (v130);
                    if (v125 == v127)
                      goto LABEL_214;
                    if ((v125 & 0x18) == 0)
                    {
                      v126 = (unsigned __int8 *)(v114 + v127);
                      v115 += v127;
                      do
                      {
LABEL_213:
                        v149 = *v126++;
                        *v115++ = v149;
                      }
                      while (v126 < v38);
                      goto LABEL_214;
                    }
                  }
                  else
                  {
                    v127 = 0;
                  }
                  v115 += v125 & 0xFFFFFFFFFFFFFFF8;
                  v126 = (unsigned __int8 *)(v114 + (v125 & 0xFFFFFFFFFFFFFFF8));
                  v132 = (uint64_t *)(v114 + v127);
                  v133 = (_QWORD *)((char *)v113 + v127 + v124 - v5);
                  v134 = v127 - (v125 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v135 = *v132++;
                    *v133++ = v135;
                    v134 += 8;
                  }
                  while (v134);
                  if (v125 == (v125 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_214;
                  goto LABEL_213;
                }
                *v113 = *(_OWORD *)v5;
                v116 = *(_QWORD *)(a2 + 24);
                if (v112 > 0x10)
                {
                  v117 = (_OWORD *)(v116 + 16);
                  v118 = v116 + v112;
                  v119 = (__int128 *)(v5 + 16);
                  do
                  {
                    v120 = *v119++;
                    *v117++ = v120;
                  }
                  while ((unint64_t)v117 < v118);
                  goto LABEL_214;
                }
                *(_QWORD *)(a2 + 24) = v116 + v112;
                v93 = *(_QWORD *)(a2 + 8);
LABEL_216:
                v95 = v48 - 3;
                *(_WORD *)(v93 + 4) = v112;
                *(_DWORD *)v93 = v49 + 3;
                v20 = v19;
                v19 = v49;
                if ((unint64_t)(v48 - 3) >= 0x10000)
                {
LABEL_217:
                  v151 = (unint64_t)(v93 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v151;
                  v19 = v49;
                }
LABEL_218:
                *(_WORD *)(v93 + 6) = v95;
                v152 = v93 + 8;
                *(_QWORD *)(a2 + 8) = v93 + 8;
                v5 = (unint64_t)&v38[v48];
                if ((unint64_t)&v38[v48] <= v18)
                {
                  v153 = *(_QWORD *)(v8 + (v32 + 2));
                  *(_DWORD *)(v696 + 4 * ((0xCF1BBCDCB7A56463 * v153) >> v692)) = v32 + 2;
                  *(_DWORD *)(v696 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v5 - 2)) >> v692)) = v5 - 2 - v8;
                  *(_DWORD *)(v688 + 4 * ((0xCF1BBCDCBFA56300 * v153) >> v684)) = v32 + 2;
                  *(_DWORD *)(v688 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v5 - 1)) >> v684)) = v5 - 1 - v8;
                  v154 = v19;
                  v155 = v20;
                  while (1)
                  {
                    v19 = v155;
                    v155 = v154;
                    v157 = v5 - v8;
                    v158 = (v5 - v8 - v19);
                    v159 = v664;
                    if (v158 >= v16)
                      v159 = v8;
                    if ((v16 + ~(_DWORD)v158) < 3)
                      break;
                    v160 = v159 + v158;
                    if (*(_DWORD *)v160 != *(_DWORD *)v5)
                      break;
                    if (v158 >= v16)
                      v23 = (char *)v9;
                    v161 = ZSTD_count_2segments((_QWORD *)(v5 + 4), (char *)(v160 + 4), v9, v23, v17);
                    v26 = v676;
                    if (v5 <= v676)
                    {
                      *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                      v152 = *(_QWORD *)(a2 + 8);
                    }
                    *(_WORD *)(v152 + 4) = 0;
                    *(_DWORD *)v152 = 1;
                    v18 = v672;
                    if (v161 + 1 >= 0x10000)
                    {
                      v162 = (unint64_t)(v152 - *(_QWORD *)a2) >> 3;
                      *(_DWORD *)(a2 + 72) = 2;
                      *(_DWORD *)(a2 + 76) = v162;
                    }
                    *(_WORD *)(v152 + 6) = v161 + 1;
                    v152 += 8;
                    v156 = *(_QWORD *)v5;
                    *(_DWORD *)(v688 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)v5) >> v684)) = v157;
                    *(_DWORD *)(v696 + 4 * ((0xCF1BBCDCB7A56463 * v156) >> v692)) = v157;
                    v5 += v161 + 4;
                    *(_QWORD *)(a2 + 8) = v152;
                    v154 = v19;
                    v20 = v155;
                    v25 = (unsigned __int8 *)v5;
                    v17 = (unsigned __int8 *)(v8 + v16);
                    v23 = v668;
                    if (v5 > v672)
                      goto LABEL_17;
                  }
                  v20 = v19;
                  v19 = v154;
                }
                v25 = (unsigned __int8 *)v5;
                goto LABEL_17;
              }
LABEL_93:
              v38 = v25;
              v17 = (unsigned __int8 *)(v8 + v16);
              v26 = v676;
              v23 = v668;
              v18 = v672;
              goto LABEL_166;
            }
          }
          else
          {
            v44 = v8 + v31;
            if (*(_QWORD *)(v8 + v31) == v27)
            {
              v45 = v25 + 8;
              v46 = (_DWORD *)(v44 + 8);
              if (v640 <= (unint64_t)(v25 + 8))
              {
                v75 = v25 + 8;
                if ((unint64_t)v45 < v630)
                {
LABEL_61:
                  if (*v46 == *(_DWORD *)v75)
                  {
                    v75 += 4;
                    ++v46;
                  }
                }
              }
              else
              {
                v47 = *v45 ^ *(_QWORD *)v46;
                if (v47)
                {
                  v9 = v680;
                  v48 = (__clz(__rbit64(v47)) >> 3) + 8;
                  v49 = ((_DWORD)v25 - v44);
                  if ((unint64_t)v25 <= v5)
                    goto LABEL_165;
                  goto LABEL_72;
                }
                v97 = 0;
                v98 = v25 + 16;
                v9 = v680;
                while (1)
                {
                  v99 = &v98[v97];
                  if ((unint64_t)&v98[v97] >= v640)
                    break;
                  v100 = *(_QWORD *)(v612 + v31 + v97);
                  v97 += 8;
                  v101 = *(_QWORD *)v99 ^ v100;
                  if (v101)
                  {
                    v48 = v97 + (__clz(__rbit64(v101)) >> 3) + 8;
                    v49 = ((_DWORD)v25 - v44);
                    if ((unint64_t)v25 > v5)
                      goto LABEL_72;
                    goto LABEL_165;
                  }
                }
                v75 = &v25[v97 + 16];
                v46 = (_DWORD *)(v612 + v31 + v97);
                if ((unint64_t)v75 < v630)
                  goto LABEL_61;
              }
              v9 = v680;
              if ((unint64_t)v75 >= v624)
              {
                if ((unint64_t)v75 >= v680)
                  goto LABEL_71;
              }
              else
              {
                if (*(unsigned __int16 *)v46 == *(unsigned __int16 *)v75)
                {
                  v75 += 2;
                  v46 = (_DWORD *)((char *)v46 + 2);
                }
                if ((unint64_t)v75 >= v680)
                {
LABEL_71:
                  v48 = v75 - v25;
                  v49 = ((_DWORD)v25 - v44);
                  if ((unint64_t)v25 <= v5)
                    goto LABEL_165;
LABEL_72:
                  v76 = v25 - 1;
                  v77 = (unsigned __int8 *)(v620 + v31);
                  while (*v76 == *v77)
                  {
                    ++v48;
                    v54 = v76 - 1;
                    if (v77 > v17)
                    {
                      --v77;
                      v55 = (unint64_t)v76-- > v5;
                      if (v55)
                        continue;
                    }
                    goto LABEL_136;
                  }
LABEL_154:
                  v38 = v76 + 1;
                  goto LABEL_166;
                }
              }
              if (*(unsigned __int8 *)v46 == *v75)
                ++v75;
              goto LABEL_71;
            }
          }
          if (v34 <= v16)
          {
            v57 = *(unsigned int *)(v634 + 4 * (v29 >> v638));
            if (v57 > v652)
            {
              v56 = v660 + v57;
              if (*(_DWORD *)(v660 + v57) == *(_DWORD *)v25)
              {
                LODWORD(v34) = v57 + v656;
LABEL_49:
                v38 = v25 + 1;
                v58 = *(_QWORD *)(v25 + 1);
                v59 = 4 * ((0xCF1BBCDCB7A56463 * v58) >> v692);
                v60 = *(unsigned int *)(v696 + v59);
                *(_DWORD *)(v696 + v59) = v35;
                if (v60 <= v16)
                {
                  v78 = *(unsigned int *)(v648 + 4 * ((0xCF1BBCDCB7A56463 * v58) >> v644));
                  if (v78 > v652 && *(_QWORD *)(v660 + v78) == v58)
                  {
                    v48 = ZSTD_count_2segments(v25 + 9, (char *)(v660 + v78 + 8), v680, v23, v17) + 8;
                    v49 = v35 - v656 - v78;
                    if ((unint64_t)v38 <= v5)
                    {
                      v26 = v676;
                      v9 = v680;
                      v17 = (unsigned __int8 *)(v8 + v16);
                      v23 = v668;
                      v18 = v672;
                      v32 = (_DWORD)v25 - v8;
                      goto LABEL_166;
                    }
                    v79 = (unsigned __int8 *)(v608 + v78);
                    v26 = v676;
                    v9 = v680;
                    v17 = (unsigned __int8 *)(v8 + v16);
                    v23 = v668;
                    v18 = v672;
                    v32 = (_DWORD)v25 - v8;
                    while (*v25 == *v79)
                    {
                      ++v48;
                      v76 = v25 - 1;
                      if ((unint64_t)v25 > v5)
                      {
                        --v25;
                        v55 = (unint64_t)v79-- > v616;
                        if (v55)
                          continue;
                      }
                      goto LABEL_154;
                    }
                    goto LABEL_157;
                  }
                }
                else
                {
                  v61 = v8 + v60;
                  if (*(_QWORD *)(v8 + v60) == v58)
                  {
                    v62 = (char *)(v25 + 9);
                    v63 = (_DWORD *)(v61 + 8);
                    if (v640 <= (unint64_t)(v25 + 9))
                    {
                      v104 = v25 + 9;
                      v9 = v680;
                      if ((unint64_t)v62 < v630)
                      {
LABEL_139:
                        if (*v63 == *(_DWORD *)v104)
                        {
                          v104 += 4;
                          ++v63;
                        }
                      }
                    }
                    else
                    {
                      v64 = *(_QWORD *)v62 ^ *(_QWORD *)v63;
                      if (v64)
                      {
                        v9 = v680;
                        v48 = (__clz(__rbit64(v64)) >> 3) + 8;
                        v49 = ((_DWORD)v38 - v61);
                        if ((unint64_t)v38 <= v5)
                          goto LABEL_166;
LABEL_150:
                        v105 = (unsigned __int8 *)(v620 + v60);
                        while (*v25 == *v105)
                        {
                          ++v48;
                          v76 = v25 - 1;
                          if ((unint64_t)v25 > v5)
                          {
                            --v25;
                            v55 = v105-- > v17;
                            if (v55)
                              continue;
                          }
                          goto LABEL_154;
                        }
LABEL_157:
                        v38 = v25 + 1;
                        goto LABEL_166;
                      }
                      v136 = 0;
                      v137 = v25 + 17;
                      v9 = v680;
                      while (1)
                      {
                        v138 = &v137[v136];
                        if ((unint64_t)&v137[v136] >= v640)
                          break;
                        v139 = *(_QWORD *)(v612 + v60 + v136);
                        v136 += 8;
                        v140 = *(_QWORD *)v138 ^ v139;
                        if (v140)
                        {
                          v48 = v136 + (__clz(__rbit64(v140)) >> 3) + 8;
                          v49 = ((_DWORD)v38 - v61);
                          if ((unint64_t)v38 > v5)
                            goto LABEL_150;
                          goto LABEL_166;
                        }
                      }
                      v104 = &v25[v136 + 17];
                      v63 = (_DWORD *)(v612 + v60 + v136);
                      if ((unint64_t)v104 < v630)
                        goto LABEL_139;
                    }
                    if ((unint64_t)v104 >= v624)
                    {
                      if ((unint64_t)v104 >= v9)
                        goto LABEL_149;
                    }
                    else
                    {
                      if (*(unsigned __int16 *)v63 == *(unsigned __int16 *)v104)
                      {
                        v104 += 2;
                        v63 = (_DWORD *)((char *)v63 + 2);
                      }
                      if ((unint64_t)v104 >= v9)
                      {
LABEL_149:
                        v48 = v104 - (unsigned __int8 *)v62 + 8;
                        v49 = ((_DWORD)v38 - v61);
                        if ((unint64_t)v38 <= v5)
                          goto LABEL_166;
                        goto LABEL_150;
                      }
                    }
                    if (*(unsigned __int8 *)v63 == *v104)
                      ++v104;
                    goto LABEL_149;
                  }
                }
                v80 = v25 + 4;
                v81 = (char *)(v56 + 4);
                if (v34 < v16)
                {
                  v9 = v680;
                  v82 = v56;
                  v83 = ZSTD_count_2segments(v80, v81, v680, v23, v17);
                  v32 = (_DWORD)v25 - v8;
                  v48 = v83 + 4;
                  v49 = ((_DWORD)v25 - v8 - v34);
                  if (v82 > v616 && (unint64_t)v25 > v5)
                  {
                    v52 = v25 - 1;
                    v84 = (unsigned __int8 *)(v82 - 1);
                    v17 = (unsigned __int8 *)(v8 + v16);
                    v26 = v676;
                    v23 = v668;
                    v18 = v672;
                    while (*v52 == *v84)
                    {
                      ++v48;
                      v54 = v52 - 1;
                      if ((unint64_t)v84 > v616)
                      {
                        --v84;
                        v55 = (unint64_t)v52-- > v5;
                        if (v55)
                          continue;
                      }
                      goto LABEL_136;
                    }
                    goto LABEL_137;
                  }
                  goto LABEL_93;
                }
                if (v640 <= (unint64_t)v80)
                {
                  v102 = v25 + 4;
                  if ((unint64_t)v80 < v630)
                  {
LABEL_120:
                    if (*(_DWORD *)v81 == *(_DWORD *)v102)
                    {
                      v102 += 4;
                      v81 += 4;
                    }
                  }
                }
                else
                {
                  v96 = *v80 ^ *(_QWORD *)v81;
                  if (v96)
                  {
                    v9 = v680;
                    v48 = (__clz(__rbit64(v96)) >> 3) + 4;
                    v49 = ((_DWORD)v25 - v56);
                    if (v56 <= (unint64_t)v17)
                      goto LABEL_165;
LABEL_131:
                    if ((unint64_t)v25 > v5)
                    {
                      v52 = v25 - 1;
                      v103 = (unsigned __int8 *)(v56 - 1);
                      while (*v52 == *v103)
                      {
                        ++v48;
                        v54 = v52 - 1;
                        if (v103 > v17)
                        {
                          --v103;
                          v55 = (unint64_t)v52-- > v5;
                          if (v55)
                            continue;
                        }
                        goto LABEL_136;
                      }
                      goto LABEL_137;
                    }
                    goto LABEL_165;
                  }
                  v107 = 0;
                  v108 = v25 + 12;
                  v9 = v680;
                  while (1)
                  {
                    v109 = &v108[v107];
                    if ((unint64_t)&v108[v107] >= v640)
                      break;
                    v110 = *(_QWORD *)(v56 + 12 + v107);
                    v107 += 8;
                    v111 = *(_QWORD *)v109 ^ v110;
                    if (v111)
                    {
                      v48 = v107 + (__clz(__rbit64(v111)) >> 3) + 4;
                      v49 = ((_DWORD)v25 - v56);
                      if (v56 > (unint64_t)v17)
                        goto LABEL_131;
                      goto LABEL_165;
                    }
                  }
                  v102 = &v25[v107 + 12];
                  v81 = (char *)(v56 + v107 + 12);
                  if ((unint64_t)v102 < v630)
                    goto LABEL_120;
                }
                v9 = v680;
                if ((unint64_t)v102 >= v624)
                {
                  if ((unint64_t)v102 < v680)
                    goto LABEL_128;
                }
                else
                {
                  if (*(unsigned __int16 *)v81 == *(unsigned __int16 *)v102)
                  {
                    v102 += 2;
                    v81 += 2;
                  }
                  if ((unint64_t)v102 >= v680)
                    goto LABEL_130;
LABEL_128:
                  if (*v81 == *v102)
                    ++v102;
                }
LABEL_130:
                v48 = v102 - v25;
                v49 = ((_DWORD)v25 - v56);
                if (v56 > (unint64_t)v17)
                  goto LABEL_131;
LABEL_165:
                v38 = v25;
                goto LABEL_166;
              }
            }
          }
          else
          {
            v56 = v8 + v34;
            if (*(_DWORD *)(v8 + v34) == *(_DWORD *)v25)
              goto LABEL_49;
          }
          _X8 = &v25[(uint64_t)&v25[-v5] >> 8];
          v25 = _X8 + 1;
          _X8 += 257;
          __asm { PRFM            #0, [X8] }
          v9 = v680;
LABEL_17:
          v24 = v660;
          if ((unint64_t)v25 >= v18)
            goto LABEL_690;
        }
        v9 = v680;
        if (v36 >= v16)
          v23 = (char *)v680;
        v39 = ZSTD_count_2segments(v25 + 5, (char *)(v37 + 4), v680, v23, v17);
        v26 = v676;
        v40 = (unint64_t)&v38[-v5];
        v41 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)v38 <= v676)
        {
          *v41 = *(_OWORD *)v5;
          v70 = *(_QWORD *)(a2 + 24);
          if (v40 <= 0x10)
          {
            *(_QWORD *)(a2 + 24) = v70 + v40;
            v93 = *(_QWORD *)(a2 + 8);
            v17 = (unsigned __int8 *)(v8 + v16);
            v23 = v668;
            v18 = v672;
            v32 = (_DWORD)v25 - v8;
            goto LABEL_108;
          }
          v71 = (_OWORD *)(v70 + 16);
          v72 = v70 + v40;
          v73 = (__int128 *)(v5 + 16);
          v17 = (unsigned __int8 *)(v8 + v16);
          v23 = v668;
          v18 = v672;
          v32 = (_DWORD)v25 - v8;
          do
          {
            v74 = *v73++;
            *v71++ = v74;
          }
          while ((unint64_t)v71 < v72);
        }
        else
        {
          if (v5 <= v676)
          {
            v43 = (char *)v41 + v676 - v5;
            v85 = (__int128 *)v5;
            v86 = *(_OWORD **)(a2 + 24);
            v17 = (unsigned __int8 *)(v8 + v16);
            v23 = v668;
            v18 = v672;
            v32 = (_DWORD)v25 - v8;
            do
            {
              v87 = *v85++;
              *v86++ = v87;
            }
            while (v86 < (_OWORD *)v43);
            v42 = v676;
            if (v676 >= (unint64_t)v38)
              goto LABEL_105;
          }
          else
          {
            v42 = v5;
            v43 = *(_BYTE **)(a2 + 24);
            v17 = (unsigned __int8 *)(v8 + v16);
            v23 = v668;
            v18 = v672;
            v32 = (_DWORD)v25 - v8;
            if (v5 >= (unint64_t)v38)
              goto LABEL_105;
          }
          if (v5 <= v676)
            v88 = v676;
          else
            v88 = v5;
          v89 = (unint64_t)&v25[-v88 + 1];
          if (v89 < 8 || (unint64_t)v41 - v5 < 0x20)
          {
            v90 = (char *)v42;
            goto LABEL_103;
          }
          if (v89 >= 0x20)
          {
            v106 = v89 & 0xFFFFFFFFFFFFFFE0;
            v141 = (__int128 *)(v42 + 16);
            v142 = (_OWORD *)((char *)v41 + v88 - v5 + 16);
            v143 = v89 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v144 = *v141;
              *(v142 - 1) = *(v141 - 1);
              *v142 = v144;
              v141 += 2;
              v142 += 2;
              v143 -= 32;
            }
            while (v143);
            if (v89 == v106)
              goto LABEL_105;
            if ((v89 & 0x18) == 0)
            {
              v90 = (char *)(v42 + v106);
              v43 += v106;
LABEL_103:
              v91 = (char *)(v89 + v42);
              do
              {
                v92 = *v90++;
                *v43++ = v92;
              }
              while (v90 != v91);
              goto LABEL_105;
            }
          }
          else
          {
            v106 = 0;
          }
          v43 += v89 & 0xFFFFFFFFFFFFFFF8;
          v90 = (char *)(v42 + (v89 & 0xFFFFFFFFFFFFFFF8));
          v145 = (uint64_t *)(v42 + v106);
          v146 = (_QWORD *)((char *)v41 + v106 + v88 - v5);
          v147 = v106 - (v89 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v148 = *v145++;
            *v146++ = v148;
            v147 += 8;
          }
          while (v147);
          if (v89 != (v89 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_103;
        }
LABEL_105:
        *(_QWORD *)(a2 + 24) += v40;
        v93 = *(_QWORD *)(a2 + 8);
        if (v40 >= 0x10000)
        {
          v94 = (unint64_t)(v93 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v94;
        }
LABEL_108:
        v48 = v39 + 4;
        v95 = v39 + 1;
        *(_WORD *)(v93 + 4) = v40;
        *(_DWORD *)v93 = 1;
        v49 = v19;
        if ((v39 + 1) >> 16)
          goto LABEL_217;
        goto LABEL_218;
      }
      goto LABEL_691;
    }
    v457 = *(_QWORD *)(a1 + 8);
    v9 = a4 + a5;
    v458 = a4 + a5 - v457;
    v459 = *(_DWORD *)(a1 + 24);
    v460 = 1 << *(_DWORD *)(a1 + 192);
    v461 = v458 - v459;
    v462 = v458 - v460;
    if (v461 > v460 && *(_DWORD *)(a1 + 32) == 0)
      v464 = v462;
    else
      v464 = v459;
    v465 = (unsigned __int8 *)(v457 + v464);
    v466 = v9 - 8;
    v468 = *a3;
    v467 = a3[1];
    v469 = *(_QWORD *)(a1 + 184);
    v470 = *(unsigned int *)(v469 + 24);
    v471 = *(char **)v469;
    v472 = *(_QWORD *)(v469 + 8);
    if ((_DWORD)v5 - ((_DWORD)v472 + (_DWORD)v470) - ((_DWORD)v457 + (_DWORD)v464) + *(_QWORD *)v469)
      v473 = (unsigned __int8 *)v5;
    else
      v473 = (unsigned __int8 *)(v5 + 1);
    if ((unint64_t)v473 >= v466)
    {
LABEL_921:
      *a3 = v468;
      a3[1] = v467;
      return v9 - v5;
    }
    v619 = v472 + v470;
    v655 = *(_DWORD *)(v469 + 24);
    v629 = a3;
    v699 = *(_QWORD *)(a1 + 48);
    v691 = *(_QWORD *)(a1 + 64);
    v651 = *(_QWORD *)(v469 + 48);
    v695 = 64 - *(_DWORD *)(a1 + 200);
    v687 = 32 - *(_DWORD *)(a1 + 196);
    v639 = 32 - *(_DWORD *)(v469 + 196);
    v643 = v9 - 7;
    v647 = 64 - *(_DWORD *)(v469 + 200);
    v633 = v9 - 3;
    v637 = *(_QWORD *)(v469 + 64);
    v474 = v9 - 32;
    v659 = v464 + v472 - (_DWORD)v471;
    v667 = v472 - v659;
    v611 = v472 - 1;
    v615 = v457 + 16;
    v623 = v457 - 1;
    v627 = v9 - 1;
    v671 = *(char **)v469;
    v675 = v9 - 8;
    v679 = v9 - 32;
    v683 = v9;
    v663 = *(_QWORD *)(v469 + 8);
    while (1)
    {
      v475 = 0xCF1BBCDCB7A56463 * *(_QWORD *)v473;
      v476 = -1640531535 * *(_QWORD *)v473;
      v477 = 4 * (v475 >> v695);
      v478 = *(unsigned int *)(v699 + v477);
      v479 = (_DWORD)v473 - v457;
      v480 = 4 * (v476 >> v687);
      v481 = *(unsigned int *)(v691 + v480);
      v482 = (_DWORD)v473 - v457 + 1;
      v483 = (v482 - v468);
      *(_DWORD *)(v691 + v480) = (_DWORD)v473 - v457;
      v484 = v483 >= v464 ? v457 + v483 : v472 + v483 - v659;
      *(_DWORD *)(v699 + v477) = v479;
      if ((v464 + ~(_DWORD)v483) >= 3)
      {
        v485 = v473 + 1;
        if (*(_DWORD *)v484 == *(_DWORD *)(v473 + 1))
          break;
      }
      if (v478 <= v464)
      {
        v497 = *(unsigned int *)(v651 + 4 * (v475 >> v647));
        if (v497 > v655 && *(_QWORD *)(v663 + v497) == *(_QWORD *)v473)
        {
          v9 = v683;
          v498 = ZSTD_count_2segments((_QWORD *)v473 + 1, (char *)(v663 + v497 + 8), v683, v471, v465);
          v479 = (_DWORD)v473 - v457;
          v495 = v498 + 8;
          v496 = (_DWORD)v473 - (_DWORD)v457 - v659 - v497;
          if ((unint64_t)v473 > v5)
          {
            v499 = v473 - 1;
            v500 = (unsigned __int8 *)(v611 + v497);
            v465 = (unsigned __int8 *)(v457 + v464);
            v474 = v679;
            v471 = v671;
            v466 = v675;
            while (*v499 == *v500)
            {
              ++v495;
              v501 = v499 - 1;
              if ((unint64_t)v500 > v619)
              {
                --v500;
                v55 = (unint64_t)v499-- > v5;
                if (v55)
                  continue;
              }
LABEL_824:
              v485 = v501 + 1;
              goto LABEL_854;
            }
LABEL_825:
            v485 = v499 + 1;
LABEL_854:
            v555 = (unint64_t)&v485[-v5];
            v556 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v485 > v474)
            {
              if (v5 <= v474)
              {
                v558 = (char *)v556 + v474 - v5;
                v564 = (__int128 *)v5;
                v565 = *(_OWORD **)(a2 + 24);
                do
                {
                  v566 = *v564++;
                  *v565++ = v566;
                }
                while (v565 < (_OWORD *)v558);
                v557 = v474;
                if (v474 >= (unint64_t)v485)
                  goto LABEL_902;
              }
              else
              {
                v557 = v5;
                v558 = *(_BYTE **)(a2 + 24);
                if (v5 >= (unint64_t)v485)
                {
LABEL_902:
                  *(_QWORD *)(a2 + 24) += v555;
                  v536 = *(_QWORD *)(a2 + 8);
                  if (v555 >= 0x10000)
                  {
                    v593 = (unint64_t)(v536 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v593;
                  }
                  goto LABEL_904;
                }
              }
              if (v5 <= v474)
                v567 = v474;
              else
                v567 = v5;
              v568 = (unint64_t)&v485[-v567];
              if ((unint64_t)&v485[-v567] < 8)
              {
                v569 = (unsigned __int8 *)v557;
                goto LABEL_901;
              }
              if ((unint64_t)v556 - v5 < 0x20)
              {
                v569 = (unsigned __int8 *)v557;
                goto LABEL_901;
              }
              if (v568 >= 0x20)
              {
                v570 = v568 & 0xFFFFFFFFFFFFFFE0;
                v571 = (__int128 *)(v557 + 16);
                v572 = (_OWORD *)((char *)v556 + v567 - v5 + 16);
                v573 = v568 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v574 = *v571;
                  *(v572 - 1) = *(v571 - 1);
                  *v572 = v574;
                  v571 += 2;
                  v572 += 2;
                  v573 -= 32;
                }
                while (v573);
                if (v568 == v570)
                  goto LABEL_902;
                if ((v568 & 0x18) == 0)
                {
                  v569 = (unsigned __int8 *)(v557 + v570);
                  v558 += v570;
                  do
                  {
LABEL_901:
                    v592 = *v569++;
                    *v558++ = v592;
                  }
                  while (v569 < v485);
                  goto LABEL_902;
                }
              }
              else
              {
                v570 = 0;
              }
              v558 += v568 & 0xFFFFFFFFFFFFFFF8;
              v569 = (unsigned __int8 *)(v557 + (v568 & 0xFFFFFFFFFFFFFFF8));
              v575 = (uint64_t *)(v557 + v570);
              v576 = (_QWORD *)((char *)v556 + v570 + v567 - v5);
              v577 = v570 - (v568 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v578 = *v575++;
                *v576++ = v578;
                v577 += 8;
              }
              while (v577);
              if (v568 == (v568 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_902;
              goto LABEL_901;
            }
            *v556 = *(_OWORD *)v5;
            v559 = *(_QWORD *)(a2 + 24);
            if (v555 > 0x10)
            {
              v560 = (_OWORD *)(v559 + 16);
              v561 = v559 + v555;
              v562 = (__int128 *)(v5 + 16);
              do
              {
                v563 = *v562++;
                *v560++ = v563;
              }
              while ((unint64_t)v560 < v561);
              goto LABEL_902;
            }
            *(_QWORD *)(a2 + 24) = v559 + v555;
            v536 = *(_QWORD *)(a2 + 8);
LABEL_904:
            v538 = v495 - 3;
            *(_WORD *)(v536 + 4) = v555;
            *(_DWORD *)v536 = v496 + 3;
            v467 = v468;
            v468 = v496;
            if ((unint64_t)(v495 - 3) >= 0x10000)
            {
LABEL_905:
              v594 = (unint64_t)(v536 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v594;
              v468 = v496;
            }
LABEL_906:
            *(_WORD *)(v536 + 6) = v538;
            v595 = v536 + 8;
            *(_QWORD *)(a2 + 8) = v536 + 8;
            v5 = (unint64_t)&v485[v495];
            if ((unint64_t)&v485[v495] <= v466)
            {
              v596 = (v479 + 2);
              *(_DWORD *)(v699 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v457 + v596)) >> v695)) = v596;
              *(_DWORD *)(v699 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v5 - 2)) >> v695)) = v5 - 2 - v457;
              *(_DWORD *)(v691 + 4 * ((-1640531535 * *(_DWORD *)(v457 + v596)) >> v687)) = v596;
              *(_DWORD *)(v691 + 4 * ((-1640531535 * *(_DWORD *)(v5 - 1)) >> v687)) = v5 - 1 - v457;
              v597 = v468;
              v598 = v467;
              while (1)
              {
                v468 = v598;
                v598 = v597;
                v599 = v5 - v457;
                v600 = (v5 - v457 - v468);
                v601 = v667;
                if (v600 >= v464)
                  v601 = v457;
                if ((v464 + ~(_DWORD)v600) < 3)
                  break;
                v602 = v601 + v600;
                if (*(_DWORD *)v602 != *(_DWORD *)v5)
                  break;
                if (v600 >= v464)
                  v471 = (char *)v9;
                v603 = ZSTD_count_2segments((_QWORD *)(v5 + 4), (char *)(v602 + 4), v9, v471, v465);
                v474 = v679;
                if (v5 <= v679)
                {
                  *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                  v595 = *(_QWORD *)(a2 + 8);
                }
                *(_WORD *)(v595 + 4) = 0;
                *(_DWORD *)v595 = 1;
                v466 = v675;
                if (v603 + 1 >= 0x10000)
                {
                  v604 = (unint64_t)(v595 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v604;
                }
                *(_WORD *)(v595 + 6) = v603 + 1;
                *(_DWORD *)(v691 + 4 * ((-1640531535 * *(_DWORD *)v5) >> v687)) = v599;
                v595 += 8;
                *(_DWORD *)(v699 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)v5) >> v695)) = v599;
                v5 += v603 + 4;
                *(_QWORD *)(a2 + 8) = v595;
                v597 = v468;
                v467 = v598;
                v473 = (unsigned __int8 *)v5;
                v465 = (unsigned __int8 *)(v457 + v464);
                v471 = v671;
                if (v5 > v675)
                  goto LABEL_705;
              }
              v467 = v468;
              v468 = v597;
            }
            v473 = (unsigned __int8 *)v5;
            goto LABEL_705;
          }
LABEL_781:
          v485 = v473;
          v465 = (unsigned __int8 *)(v457 + v464);
          v474 = v679;
          v471 = v671;
          v466 = v675;
          goto LABEL_854;
        }
      }
      else
      {
        v491 = v457 + v478;
        if (*(_QWORD *)(v457 + v478) == *(_QWORD *)v473)
        {
          v492 = v473 + 8;
          v493 = (_DWORD *)(v491 + 8);
          if (v643 <= (unint64_t)(v473 + 8))
          {
            v518 = v473 + 8;
            if ((unint64_t)v492 < v633)
            {
LABEL_749:
              if (*v493 == *(_DWORD *)v518)
              {
                v518 += 4;
                ++v493;
              }
            }
          }
          else
          {
            v494 = *v492 ^ *(_QWORD *)v493;
            if (v494)
            {
              v9 = v683;
              v495 = (__clz(__rbit64(v494)) >> 3) + 8;
              v496 = ((_DWORD)v473 - v491);
              if ((unint64_t)v473 <= v5)
                goto LABEL_853;
              goto LABEL_760;
            }
            v540 = 0;
            v541 = v473 + 16;
            v9 = v683;
            while (1)
            {
              v542 = &v541[v540];
              if ((unint64_t)&v541[v540] >= v643)
                break;
              v543 = *(_QWORD *)(v615 + v478 + v540);
              v540 += 8;
              v544 = *(_QWORD *)v542 ^ v543;
              if (v544)
              {
                v495 = v540 + (__clz(__rbit64(v544)) >> 3) + 8;
                v496 = ((_DWORD)v473 - v491);
                if ((unint64_t)v473 > v5)
                  goto LABEL_760;
                goto LABEL_853;
              }
            }
            v518 = &v473[v540 + 16];
            v493 = (_DWORD *)(v615 + v478 + v540);
            if ((unint64_t)v518 < v633)
              goto LABEL_749;
          }
          v9 = v683;
          if ((unint64_t)v518 >= v627)
          {
            if ((unint64_t)v518 >= v683)
              goto LABEL_759;
          }
          else
          {
            if (*(unsigned __int16 *)v493 == *(unsigned __int16 *)v518)
            {
              v518 += 2;
              v493 = (_DWORD *)((char *)v493 + 2);
            }
            if ((unint64_t)v518 >= v683)
            {
LABEL_759:
              v495 = v518 - v473;
              v496 = ((_DWORD)v473 - v491);
              if ((unint64_t)v473 <= v5)
                goto LABEL_853;
LABEL_760:
              v519 = v473 - 1;
              v520 = (unsigned __int8 *)(v623 + v478);
              while (*v519 == *v520)
              {
                ++v495;
                v501 = v519 - 1;
                if (v520 > v465)
                {
                  --v520;
                  v55 = (unint64_t)v519-- > v5;
                  if (v55)
                    continue;
                }
                goto LABEL_824;
              }
LABEL_842:
              v485 = v519 + 1;
              goto LABEL_854;
            }
          }
          if (*(unsigned __int8 *)v493 == *v518)
            ++v518;
          goto LABEL_759;
        }
      }
      if (v481 <= v464)
      {
        v503 = *(unsigned int *)(v637 + 4 * (v476 >> v639));
        if (v503 > v655)
        {
          v502 = v663 + v503;
          if (*(_DWORD *)(v663 + v503) == *(_DWORD *)v473)
          {
            LODWORD(v481) = v503 + v659;
LABEL_737:
            v485 = v473 + 1;
            v504 = *(_QWORD *)(v473 + 1);
            v505 = 4 * ((0xCF1BBCDCB7A56463 * v504) >> v695);
            v506 = *(unsigned int *)(v699 + v505);
            *(_DWORD *)(v699 + v505) = v482;
            if (v506 <= v464)
            {
              v521 = *(unsigned int *)(v651 + 4 * ((0xCF1BBCDCB7A56463 * v504) >> v647));
              if (v521 > v655 && *(_QWORD *)(v663 + v521) == v504)
              {
                v495 = ZSTD_count_2segments(v473 + 9, (char *)(v663 + v521 + 8), v683, v471, v465) + 8;
                v496 = v482 - v659 - v521;
                if ((unint64_t)v485 <= v5)
                {
                  v474 = v679;
                  v9 = v683;
                  v465 = (unsigned __int8 *)(v457 + v464);
                  v471 = v671;
                  v466 = v675;
                  v479 = (_DWORD)v473 - v457;
                  goto LABEL_854;
                }
                v522 = (unsigned __int8 *)(v611 + v521);
                v474 = v679;
                v9 = v683;
                v465 = (unsigned __int8 *)(v457 + v464);
                v471 = v671;
                v466 = v675;
                v479 = (_DWORD)v473 - v457;
                while (*v473 == *v522)
                {
                  ++v495;
                  v519 = v473 - 1;
                  if ((unint64_t)v473 > v5)
                  {
                    --v473;
                    v55 = (unint64_t)v522-- > v619;
                    if (v55)
                      continue;
                  }
                  goto LABEL_842;
                }
                goto LABEL_845;
              }
            }
            else
            {
              v507 = v457 + v506;
              if (*(_QWORD *)(v457 + v506) == v504)
              {
                v508 = (char *)(v473 + 9);
                v509 = (_DWORD *)(v507 + 8);
                if (v643 <= (unint64_t)(v473 + 9))
                {
                  v547 = v473 + 9;
                  v9 = v683;
                  if ((unint64_t)v508 < v633)
                  {
LABEL_827:
                    if (*v509 == *(_DWORD *)v547)
                    {
                      v547 += 4;
                      ++v509;
                    }
                  }
                }
                else
                {
                  v510 = *(_QWORD *)v508 ^ *(_QWORD *)v509;
                  if (v510)
                  {
                    v9 = v683;
                    v495 = (__clz(__rbit64(v510)) >> 3) + 8;
                    v496 = ((_DWORD)v485 - v507);
                    if ((unint64_t)v485 <= v5)
                      goto LABEL_854;
LABEL_838:
                    v548 = (unsigned __int8 *)(v623 + v506);
                    while (*v473 == *v548)
                    {
                      ++v495;
                      v519 = v473 - 1;
                      if ((unint64_t)v473 > v5)
                      {
                        --v473;
                        v55 = v548-- > v465;
                        if (v55)
                          continue;
                      }
                      goto LABEL_842;
                    }
LABEL_845:
                    v485 = v473 + 1;
                    goto LABEL_854;
                  }
                  v579 = 0;
                  v580 = v473 + 17;
                  v9 = v683;
                  while (1)
                  {
                    v581 = &v580[v579];
                    if ((unint64_t)&v580[v579] >= v643)
                      break;
                    v582 = *(_QWORD *)(v615 + v506 + v579);
                    v579 += 8;
                    v583 = *(_QWORD *)v581 ^ v582;
                    if (v583)
                    {
                      v495 = v579 + (__clz(__rbit64(v583)) >> 3) + 8;
                      v496 = ((_DWORD)v485 - v507);
                      if ((unint64_t)v485 > v5)
                        goto LABEL_838;
                      goto LABEL_854;
                    }
                  }
                  v547 = &v473[v579 + 17];
                  v509 = (_DWORD *)(v615 + v506 + v579);
                  if ((unint64_t)v547 < v633)
                    goto LABEL_827;
                }
                if ((unint64_t)v547 >= v627)
                {
                  if ((unint64_t)v547 >= v9)
                    goto LABEL_837;
                }
                else
                {
                  if (*(unsigned __int16 *)v509 == *(unsigned __int16 *)v547)
                  {
                    v547 += 2;
                    v509 = (_DWORD *)((char *)v509 + 2);
                  }
                  if ((unint64_t)v547 >= v9)
                  {
LABEL_837:
                    v495 = v547 - (unsigned __int8 *)v508 + 8;
                    v496 = ((_DWORD)v485 - v507);
                    if ((unint64_t)v485 <= v5)
                      goto LABEL_854;
                    goto LABEL_838;
                  }
                }
                if (*(unsigned __int8 *)v509 == *v547)
                  ++v547;
                goto LABEL_837;
              }
            }
            v523 = v473 + 4;
            v524 = (char *)(v502 + 4);
            if (v481 < v464)
            {
              v9 = v683;
              v525 = v502;
              v526 = ZSTD_count_2segments(v523, v524, v683, v471, v465);
              v479 = (_DWORD)v473 - v457;
              v495 = v526 + 4;
              v496 = ((_DWORD)v473 - v457 - v481);
              if (v525 > v619 && (unint64_t)v473 > v5)
              {
                v499 = v473 - 1;
                v527 = (unsigned __int8 *)(v525 - 1);
                v465 = (unsigned __int8 *)(v457 + v464);
                v474 = v679;
                v471 = v671;
                v466 = v675;
                while (*v499 == *v527)
                {
                  ++v495;
                  v501 = v499 - 1;
                  if ((unint64_t)v527 > v619)
                  {
                    --v527;
                    v55 = (unint64_t)v499-- > v5;
                    if (v55)
                      continue;
                  }
                  goto LABEL_824;
                }
                goto LABEL_825;
              }
              goto LABEL_781;
            }
            if (v643 <= (unint64_t)v523)
            {
              v545 = v473 + 4;
              if ((unint64_t)v523 < v633)
              {
LABEL_808:
                if (*(_DWORD *)v524 == *(_DWORD *)v545)
                {
                  v545 += 4;
                  v524 += 4;
                }
              }
            }
            else
            {
              v539 = *v523 ^ *(_QWORD *)v524;
              if (v539)
              {
                v9 = v683;
                v495 = (__clz(__rbit64(v539)) >> 3) + 4;
                v496 = ((_DWORD)v473 - v502);
                if (v502 <= (unint64_t)v465)
                  goto LABEL_853;
LABEL_819:
                if ((unint64_t)v473 > v5)
                {
                  v499 = v473 - 1;
                  v546 = (unsigned __int8 *)(v502 - 1);
                  while (*v499 == *v546)
                  {
                    ++v495;
                    v501 = v499 - 1;
                    if (v546 > v465)
                    {
                      --v546;
                      v55 = (unint64_t)v499-- > v5;
                      if (v55)
                        continue;
                    }
                    goto LABEL_824;
                  }
                  goto LABEL_825;
                }
                goto LABEL_853;
              }
              v550 = 0;
              v551 = v473 + 12;
              v9 = v683;
              while (1)
              {
                v552 = &v551[v550];
                if ((unint64_t)&v551[v550] >= v643)
                  break;
                v553 = *(_QWORD *)(v502 + 12 + v550);
                v550 += 8;
                v554 = *(_QWORD *)v552 ^ v553;
                if (v554)
                {
                  v495 = v550 + (__clz(__rbit64(v554)) >> 3) + 4;
                  v496 = ((_DWORD)v473 - v502);
                  if (v502 > (unint64_t)v465)
                    goto LABEL_819;
                  goto LABEL_853;
                }
              }
              v545 = &v473[v550 + 12];
              v524 = (char *)(v502 + v550 + 12);
              if ((unint64_t)v545 < v633)
                goto LABEL_808;
            }
            v9 = v683;
            if ((unint64_t)v545 >= v627)
            {
              if ((unint64_t)v545 < v683)
                goto LABEL_816;
            }
            else
            {
              if (*(unsigned __int16 *)v524 == *(unsigned __int16 *)v545)
              {
                v545 += 2;
                v524 += 2;
              }
              if ((unint64_t)v545 >= v683)
                goto LABEL_818;
LABEL_816:
              if (*v524 == *v545)
                ++v545;
            }
LABEL_818:
            v495 = v545 - v473;
            v496 = ((_DWORD)v473 - v502);
            if (v502 > (unint64_t)v465)
              goto LABEL_819;
LABEL_853:
            v485 = v473;
            goto LABEL_854;
          }
        }
      }
      else
      {
        v502 = v457 + v481;
        if (*(_DWORD *)(v457 + v481) == *(_DWORD *)v473)
          goto LABEL_737;
      }
      _X8 = &v473[(uint64_t)&v473[-v5] >> 8];
      v473 = _X8 + 1;
      _X8 += 257;
      __asm { PRFM            #0, [X8] }
      v9 = v683;
LABEL_705:
      v472 = v663;
      if ((unint64_t)v473 >= v466)
      {
        a3 = v629;
        goto LABEL_921;
      }
    }
    v9 = v683;
    if (v483 >= v464)
      v471 = (char *)v683;
    v486 = ZSTD_count_2segments(v473 + 5, (char *)(v484 + 4), v683, v471, v465);
    v474 = v679;
    v487 = (unint64_t)&v485[-v5];
    v488 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v485 <= v679)
    {
      *v488 = *(_OWORD *)v5;
      v513 = *(_QWORD *)(a2 + 24);
      if (v487 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v513 + v487;
        v536 = *(_QWORD *)(a2 + 8);
        v465 = (unsigned __int8 *)(v457 + v464);
        v471 = v671;
        v466 = v675;
        v479 = (_DWORD)v473 - v457;
        goto LABEL_796;
      }
      v514 = (_OWORD *)(v513 + 16);
      v515 = v513 + v487;
      v516 = (__int128 *)(v5 + 16);
      v465 = (unsigned __int8 *)(v457 + v464);
      v471 = v671;
      v466 = v675;
      v479 = (_DWORD)v473 - v457;
      do
      {
        v517 = *v516++;
        *v514++ = v517;
      }
      while ((unint64_t)v514 < v515);
    }
    else
    {
      if (v5 <= v679)
      {
        v490 = (char *)v488 + v679 - v5;
        v528 = (__int128 *)v5;
        v529 = *(_OWORD **)(a2 + 24);
        v465 = (unsigned __int8 *)(v457 + v464);
        v471 = v671;
        v466 = v675;
        v479 = (_DWORD)v473 - v457;
        do
        {
          v530 = *v528++;
          *v529++ = v530;
        }
        while (v529 < (_OWORD *)v490);
        v489 = v679;
        if (v679 >= (unint64_t)v485)
          goto LABEL_793;
      }
      else
      {
        v489 = v5;
        v490 = *(_BYTE **)(a2 + 24);
        v465 = (unsigned __int8 *)(v457 + v464);
        v471 = v671;
        v466 = v675;
        v479 = (_DWORD)v473 - v457;
        if (v5 >= (unint64_t)v485)
          goto LABEL_793;
      }
      if (v5 <= v679)
        v531 = v679;
      else
        v531 = v5;
      v532 = (unint64_t)&v473[-v531 + 1];
      if (v532 < 8 || (unint64_t)v488 - v5 < 0x20)
      {
        v533 = (char *)v489;
        goto LABEL_791;
      }
      if (v532 >= 0x20)
      {
        v549 = v532 & 0xFFFFFFFFFFFFFFE0;
        v584 = (__int128 *)(v489 + 16);
        v585 = (_OWORD *)((char *)v488 + v531 - v5 + 16);
        v586 = v532 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v587 = *v584;
          *(v585 - 1) = *(v584 - 1);
          *v585 = v587;
          v584 += 2;
          v585 += 2;
          v586 -= 32;
        }
        while (v586);
        if (v532 == v549)
          goto LABEL_793;
        if ((v532 & 0x18) == 0)
        {
          v533 = (char *)(v489 + v549);
          v490 += v549;
LABEL_791:
          v534 = (char *)(v532 + v489);
          do
          {
            v535 = *v533++;
            *v490++ = v535;
          }
          while (v533 != v534);
          goto LABEL_793;
        }
      }
      else
      {
        v549 = 0;
      }
      v490 += v532 & 0xFFFFFFFFFFFFFFF8;
      v533 = (char *)(v489 + (v532 & 0xFFFFFFFFFFFFFFF8));
      v588 = (uint64_t *)(v489 + v549);
      v589 = (_QWORD *)((char *)v488 + v549 + v531 - v5);
      v590 = v549 - (v532 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v591 = *v588++;
        *v589++ = v591;
        v590 += 8;
      }
      while (v590);
      if (v532 != (v532 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_791;
    }
LABEL_793:
    *(_QWORD *)(a2 + 24) += v487;
    v536 = *(_QWORD *)(a2 + 8);
    if (v487 >= 0x10000)
    {
      v537 = (unint64_t)(v536 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v537;
    }
LABEL_796:
    v495 = v486 + 4;
    v538 = v486 + 1;
    *(_WORD *)(v536 + 4) = v487;
    *(_DWORD *)v536 = 1;
    v496 = v468;
    if ((v486 + 1) >> 16)
      goto LABEL_905;
    goto LABEL_906;
  }
  v310 = *(_QWORD *)(a1 + 8);
  v9 = a4 + a5;
  v311 = a4 + a5 - v310;
  v312 = *(_DWORD *)(a1 + 24);
  v313 = 1 << *(_DWORD *)(a1 + 192);
  v314 = v311 - v312;
  v315 = v311 - v313;
  if (v314 > v313 && *(_DWORD *)(a1 + 32) == 0)
    v317 = v315;
  else
    v317 = v312;
  v318 = (unsigned __int8 *)(v310 + v317);
  v319 = v9 - 8;
  v19 = *a3;
  v20 = a3[1];
  v320 = *(_QWORD *)(a1 + 184);
  v321 = *(unsigned int *)(v320 + 24);
  v322 = *(char **)v320;
  v323 = *(_QWORD *)(v320 + 8);
  if ((_DWORD)v5 - ((_DWORD)v323 + (_DWORD)v321) - ((_DWORD)v310 + (_DWORD)v317) + *(_QWORD *)v320)
    v324 = (unsigned __int8 *)v5;
  else
    v324 = (unsigned __int8 *)(v5 + 1);
  if ((unint64_t)v324 < v319)
  {
    v614 = v323 + v321;
    v654 = *(_DWORD *)(v320 + 24);
    v628 = a3;
    v698 = *(_QWORD *)(a1 + 48);
    v690 = *(_QWORD *)(a1 + 64);
    v650 = *(_QWORD *)(v320 + 48);
    v694 = 64 - *(_DWORD *)(a1 + 200);
    v686 = 64 - *(_DWORD *)(a1 + 196);
    v636 = 64 - *(_DWORD *)(v320 + 196);
    v642 = v9 - 7;
    v646 = 64 - *(_DWORD *)(v320 + 200);
    v622 = v9 - 1;
    v626 = v9 - 3;
    v325 = v9 - 32;
    v658 = v317 + v323 - (_DWORD)v322;
    v666 = v323 - v658;
    v632 = *(_QWORD *)(v320 + 64);
    v607 = v323 - 1;
    v610 = v310 + 16;
    v618 = v310 - 1;
    v670 = *(char **)v320;
    v674 = v9 - 8;
    v678 = v9 - 32;
    v682 = v9;
    v662 = *(_QWORD *)(v320 + 8);
    while (1)
    {
      v326 = *(_QWORD *)v324;
      v327 = 0xCF1BBCDCB7A56463 * *(_QWORD *)v324;
      v328 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)v324;
      v329 = 4 * (v327 >> v694);
      v330 = *(unsigned int *)(v698 + v329);
      v331 = (_DWORD)v324 - v310;
      v332 = 4 * (v328 >> v686);
      v333 = *(unsigned int *)(v690 + v332);
      v334 = (_DWORD)v324 - v310 + 1;
      v335 = (v334 - v19);
      *(_DWORD *)(v690 + v332) = (_DWORD)v324 - v310;
      v336 = v335 >= v317 ? v310 + v335 : v323 + v335 - v658;
      *(_DWORD *)(v698 + v329) = v331;
      if ((v317 + ~(_DWORD)v335) >= 3)
      {
        v337 = v324 + 1;
        if (*(_DWORD *)v336 == *(_DWORD *)(v324 + 1))
          break;
      }
      if (v330 <= v317)
      {
        v349 = *(unsigned int *)(v650 + 4 * (v327 >> v646));
        if (v349 > v654 && *(_QWORD *)(v662 + v349) == v326)
        {
          v9 = v682;
          v350 = ZSTD_count_2segments((_QWORD *)v324 + 1, (char *)(v662 + v349 + 8), v682, v322, v318);
          v331 = (_DWORD)v324 - v310;
          v347 = v350 + 8;
          v348 = (_DWORD)v324 - (_DWORD)v310 - v658 - v349;
          if ((unint64_t)v324 > v5)
          {
            v351 = v324 - 1;
            v352 = (unsigned __int8 *)(v607 + v349);
            v318 = (unsigned __int8 *)(v310 + v317);
            v325 = v678;
            v322 = v670;
            v319 = v674;
            while (*v351 == *v352)
            {
              ++v347;
              v353 = v351 - 1;
              if ((unint64_t)v352 > v614)
              {
                --v352;
                v55 = (unint64_t)v351-- > v5;
                if (v55)
                  continue;
              }
LABEL_593:
              v337 = v353 + 1;
              goto LABEL_624;
            }
LABEL_594:
            v337 = v351 + 1;
LABEL_624:
            v406 = (unint64_t)&v337[-v5];
            v407 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v337 > v325)
            {
              if (v5 <= v325)
              {
                v409 = (char *)v407 + v325 - v5;
                v415 = (__int128 *)v5;
                v416 = *(_OWORD **)(a2 + 24);
                do
                {
                  v417 = *v415++;
                  *v416++ = v417;
                }
                while (v416 < (_OWORD *)v409);
                v408 = v325;
                if (v325 >= (unint64_t)v337)
                  goto LABEL_672;
              }
              else
              {
                v408 = v5;
                v409 = *(_BYTE **)(a2 + 24);
                if (v5 >= (unint64_t)v337)
                {
LABEL_672:
                  *(_QWORD *)(a2 + 24) += v406;
                  v387 = *(_QWORD *)(a2 + 8);
                  if (v406 >= 0x10000)
                  {
                    v444 = (unint64_t)(v387 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v444;
                  }
                  goto LABEL_674;
                }
              }
              if (v5 <= v325)
                v418 = v325;
              else
                v418 = v5;
              v419 = (unint64_t)&v337[-v418];
              if ((unint64_t)&v337[-v418] < 8)
              {
                v420 = (unsigned __int8 *)v408;
                goto LABEL_671;
              }
              if ((unint64_t)v407 - v5 < 0x20)
              {
                v420 = (unsigned __int8 *)v408;
                goto LABEL_671;
              }
              if (v419 >= 0x20)
              {
                v421 = v419 & 0xFFFFFFFFFFFFFFE0;
                v422 = (__int128 *)(v408 + 16);
                v423 = (_OWORD *)((char *)v407 + v418 - v5 + 16);
                v424 = v419 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v425 = *v422;
                  *(v423 - 1) = *(v422 - 1);
                  *v423 = v425;
                  v422 += 2;
                  v423 += 2;
                  v424 -= 32;
                }
                while (v424);
                if (v419 == v421)
                  goto LABEL_672;
                if ((v419 & 0x18) == 0)
                {
                  v420 = (unsigned __int8 *)(v408 + v421);
                  v409 += v421;
                  do
                  {
LABEL_671:
                    v443 = *v420++;
                    *v409++ = v443;
                  }
                  while (v420 < v337);
                  goto LABEL_672;
                }
              }
              else
              {
                v421 = 0;
              }
              v409 += v419 & 0xFFFFFFFFFFFFFFF8;
              v420 = (unsigned __int8 *)(v408 + (v419 & 0xFFFFFFFFFFFFFFF8));
              v426 = (uint64_t *)(v408 + v421);
              v427 = (_QWORD *)((char *)v407 + v421 + v418 - v5);
              v428 = v421 - (v419 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v429 = *v426++;
                *v427++ = v429;
                v428 += 8;
              }
              while (v428);
              if (v419 == (v419 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_672;
              goto LABEL_671;
            }
            *v407 = *(_OWORD *)v5;
            v410 = *(_QWORD *)(a2 + 24);
            if (v406 > 0x10)
            {
              v411 = (_OWORD *)(v410 + 16);
              v412 = v410 + v406;
              v413 = (__int128 *)(v5 + 16);
              do
              {
                v414 = *v413++;
                *v411++ = v414;
              }
              while ((unint64_t)v411 < v412);
              goto LABEL_672;
            }
            *(_QWORD *)(a2 + 24) = v410 + v406;
            v387 = *(_QWORD *)(a2 + 8);
LABEL_674:
            v389 = v347 - 3;
            *(_WORD *)(v387 + 4) = v406;
            *(_DWORD *)v387 = v348 + 3;
            v20 = v19;
            v19 = v348;
            if ((unint64_t)(v347 - 3) >= 0x10000)
            {
LABEL_675:
              v445 = (unint64_t)(v387 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v445;
              v19 = v348;
            }
LABEL_676:
            *(_WORD *)(v387 + 6) = v389;
            v446 = v387 + 8;
            *(_QWORD *)(a2 + 8) = v387 + 8;
            v5 = (unint64_t)&v337[v347];
            if ((unint64_t)&v337[v347] <= v319)
            {
              v447 = *(_QWORD *)(v310 + (v331 + 2));
              *(_DWORD *)(v698 + 4 * ((0xCF1BBCDCB7A56463 * v447) >> v694)) = v331 + 2;
              *(_DWORD *)(v698 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v5 - 2)) >> v694)) = v5 - 2 - v310;
              *(_DWORD *)(v690 + 4 * ((0xCF1BBCDCBF9B0000 * v447) >> v686)) = v331 + 2;
              *(_DWORD *)(v690 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v5 - 1)) >> v686)) = v5 - 1 - v310;
              v448 = v19;
              v449 = v20;
              while (1)
              {
                v19 = v449;
                v449 = v448;
                v451 = v5 - v310;
                v452 = (v5 - v310 - v19);
                v453 = v666;
                if (v452 >= v317)
                  v453 = v310;
                if ((v317 + ~(_DWORD)v452) < 3)
                  break;
                v454 = v453 + v452;
                if (*(_DWORD *)v454 != *(_DWORD *)v5)
                  break;
                if (v452 >= v317)
                  v322 = (char *)v9;
                v455 = ZSTD_count_2segments((_QWORD *)(v5 + 4), (char *)(v454 + 4), v9, v322, v318);
                v325 = v678;
                if (v5 <= v678)
                {
                  *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                  v446 = *(_QWORD *)(a2 + 8);
                }
                *(_WORD *)(v446 + 4) = 0;
                *(_DWORD *)v446 = 1;
                v319 = v674;
                if (v455 + 1 >= 0x10000)
                {
                  v456 = (unint64_t)(v446 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v456;
                }
                *(_WORD *)(v446 + 6) = v455 + 1;
                v446 += 8;
                v450 = *(_QWORD *)v5;
                *(_DWORD *)(v690 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v5) >> v686)) = v451;
                *(_DWORD *)(v698 + 4 * ((0xCF1BBCDCB7A56463 * v450) >> v694)) = v451;
                v5 += v455 + 4;
                *(_QWORD *)(a2 + 8) = v446;
                v448 = v19;
                v20 = v449;
                v324 = (unsigned __int8 *)v5;
                v318 = (unsigned __int8 *)(v310 + v317);
                v322 = v670;
                if (v5 > v674)
                  goto LABEL_474;
              }
              v20 = v19;
              v19 = v448;
            }
            v324 = (unsigned __int8 *)v5;
            goto LABEL_474;
          }
LABEL_566:
          v337 = v324;
          v318 = (unsigned __int8 *)(v310 + v317);
          v325 = v678;
          v322 = v670;
          v319 = v674;
          goto LABEL_624;
        }
      }
      else
      {
        v343 = v310 + v330;
        if (*(_QWORD *)(v310 + v330) == v326)
        {
          v344 = v324 + 8;
          v345 = (_DWORD *)(v343 + 8);
          if (v642 <= (unint64_t)(v324 + 8))
          {
            v370 = v324 + 8;
            if ((unint64_t)v344 < v626)
            {
LABEL_518:
              if (*v345 == *(_DWORD *)v370)
              {
                v370 += 4;
                ++v345;
              }
            }
          }
          else
          {
            v346 = *v344 ^ *(_QWORD *)v345;
            if (v346)
            {
              v9 = v682;
              v347 = (__clz(__rbit64(v346)) >> 3) + 8;
              v348 = ((_DWORD)v324 - v343);
              if ((unint64_t)v324 <= v5)
                goto LABEL_623;
              goto LABEL_529;
            }
            v391 = 0;
            v392 = v324 + 16;
            v9 = v682;
            while (1)
            {
              v393 = &v392[v391];
              if ((unint64_t)&v392[v391] >= v642)
                break;
              v394 = *(_QWORD *)(v610 + v330 + v391);
              v391 += 8;
              v395 = *(_QWORD *)v393 ^ v394;
              if (v395)
              {
                v347 = v391 + (__clz(__rbit64(v395)) >> 3) + 8;
                v348 = ((_DWORD)v324 - v343);
                if ((unint64_t)v324 > v5)
                  goto LABEL_529;
                goto LABEL_623;
              }
            }
            v370 = &v324[v391 + 16];
            v345 = (_DWORD *)(v610 + v330 + v391);
            if ((unint64_t)v370 < v626)
              goto LABEL_518;
          }
          v9 = v682;
          if ((unint64_t)v370 >= v622)
          {
            if ((unint64_t)v370 >= v682)
              goto LABEL_528;
          }
          else
          {
            if (*(unsigned __int16 *)v345 == *(unsigned __int16 *)v370)
            {
              v370 += 2;
              v345 = (_DWORD *)((char *)v345 + 2);
            }
            if ((unint64_t)v370 >= v682)
            {
LABEL_528:
              v347 = v370 - v324;
              v348 = ((_DWORD)v324 - v343);
              if ((unint64_t)v324 <= v5)
                goto LABEL_623;
LABEL_529:
              v371 = v324 - 1;
              v372 = (unsigned __int8 *)(v618 + v330);
              while (*v371 == *v372)
              {
                ++v347;
                v353 = v371 - 1;
                if (v372 > v318)
                {
                  --v372;
                  v55 = (unint64_t)v371-- > v5;
                  if (v55)
                    continue;
                }
                goto LABEL_593;
              }
LABEL_611:
              v337 = v371 + 1;
              goto LABEL_624;
            }
          }
          if (*(unsigned __int8 *)v345 == *v370)
            ++v370;
          goto LABEL_528;
        }
      }
      if (v333 <= v317)
      {
        v355 = *(unsigned int *)(v632 + 4 * (v328 >> v636));
        if (v355 > v654)
        {
          v354 = v662 + v355;
          if (*(_DWORD *)(v662 + v355) == *(_DWORD *)v324)
          {
            LODWORD(v333) = v355 + v658;
LABEL_506:
            v337 = v324 + 1;
            v356 = *(_QWORD *)(v324 + 1);
            v357 = 4 * ((0xCF1BBCDCB7A56463 * v356) >> v694);
            v358 = *(unsigned int *)(v698 + v357);
            *(_DWORD *)(v698 + v357) = v334;
            if (v358 <= v317)
            {
              v373 = *(unsigned int *)(v650 + 4 * ((0xCF1BBCDCB7A56463 * v356) >> v646));
              if (v373 > v654 && *(_QWORD *)(v662 + v373) == v356)
              {
                v347 = ZSTD_count_2segments(v324 + 9, (char *)(v662 + v373 + 8), v682, v322, v318) + 8;
                v348 = v334 - v658 - v373;
                if ((unint64_t)v337 <= v5)
                {
                  v325 = v678;
                  v9 = v682;
                  v318 = (unsigned __int8 *)(v310 + v317);
                  v322 = v670;
                  v319 = v674;
                  v331 = (_DWORD)v324 - v310;
                  goto LABEL_624;
                }
                v374 = (unsigned __int8 *)(v607 + v373);
                v325 = v678;
                v9 = v682;
                v318 = (unsigned __int8 *)(v310 + v317);
                v322 = v670;
                v319 = v674;
                v331 = (_DWORD)v324 - v310;
                while (*v324 == *v374)
                {
                  ++v347;
                  v371 = v324 - 1;
                  if ((unint64_t)v324 > v5)
                  {
                    --v324;
                    v55 = (unint64_t)v374-- > v614;
                    if (v55)
                      continue;
                  }
                  goto LABEL_611;
                }
                goto LABEL_614;
              }
            }
            else
            {
              v359 = v310 + v358;
              if (*(_QWORD *)(v310 + v358) == v356)
              {
                v360 = (char *)(v324 + 9);
                v361 = (_DWORD *)(v359 + 8);
                if (v642 <= (unint64_t)(v324 + 9))
                {
                  v398 = v324 + 9;
                  v9 = v682;
                  if ((unint64_t)v360 < v626)
                  {
LABEL_596:
                    if (*v361 == *(_DWORD *)v398)
                    {
                      v398 += 4;
                      ++v361;
                    }
                  }
                }
                else
                {
                  v362 = *(_QWORD *)v360 ^ *(_QWORD *)v361;
                  v9 = v682;
                  if (v362)
                  {
                    v347 = (__clz(__rbit64(v362)) >> 3) + 8;
                    v348 = ((_DWORD)v337 - v359);
                    if ((unint64_t)v337 <= v5)
                      goto LABEL_624;
LABEL_607:
                    v399 = (unsigned __int8 *)(v618 + v358);
                    while (*v324 == *v399)
                    {
                      ++v347;
                      v371 = v324 - 1;
                      if ((unint64_t)v324 > v5)
                      {
                        --v324;
                        v55 = v399-- > v318;
                        if (v55)
                          continue;
                      }
                      goto LABEL_611;
                    }
LABEL_614:
                    v337 = v324 + 1;
                    goto LABEL_624;
                  }
                  v430 = 0;
                  v431 = v324 + 17;
                  while (1)
                  {
                    v432 = &v431[v430];
                    if ((unint64_t)&v431[v430] >= v642)
                      break;
                    v433 = *(_QWORD *)(v610 + v358 + v430);
                    v430 += 8;
                    v434 = *(_QWORD *)v432 ^ v433;
                    if (v434)
                    {
                      v347 = v430 + (__clz(__rbit64(v434)) >> 3) + 8;
                      v348 = ((_DWORD)v337 - v359);
                      if ((unint64_t)v337 > v5)
                        goto LABEL_607;
                      goto LABEL_624;
                    }
                  }
                  v398 = &v324[v430 + 17];
                  v361 = (_DWORD *)(v610 + v358 + v430);
                  if ((unint64_t)v398 < v626)
                    goto LABEL_596;
                }
                if ((unint64_t)v398 >= v622)
                {
                  if ((unint64_t)v398 >= v9)
                    goto LABEL_606;
                }
                else
                {
                  if (*(unsigned __int16 *)v361 == *(unsigned __int16 *)v398)
                  {
                    v398 += 2;
                    v361 = (_DWORD *)((char *)v361 + 2);
                  }
                  if ((unint64_t)v398 >= v9)
                  {
LABEL_606:
                    v347 = v398 - (unsigned __int8 *)v360 + 8;
                    v348 = ((_DWORD)v337 - v359);
                    if ((unint64_t)v337 <= v5)
                      goto LABEL_624;
                    goto LABEL_607;
                  }
                }
                if (*(unsigned __int8 *)v361 == *v398)
                  ++v398;
                goto LABEL_606;
              }
            }
            v375 = v324 + 4;
            v376 = (char *)(v354 + 4);
            if (v333 < v317)
            {
              v9 = v682;
              v377 = v354;
              v347 = ZSTD_count_2segments(v375, v376, v682, v322, v318) + 4;
              v331 = (_DWORD)v324 - v310;
              v348 = ((_DWORD)v324 - v310 - v333);
              if (v377 > v614)
              {
                v325 = v678;
                if ((unint64_t)v324 > v5)
                {
                  v351 = v324 - 1;
                  v378 = (unsigned __int8 *)(v377 - 1);
                  v318 = (unsigned __int8 *)(v310 + v317);
                  v322 = v670;
                  v319 = v674;
                  while (*v351 == *v378)
                  {
                    ++v347;
                    v353 = v351 - 1;
                    if ((unint64_t)v378 > v614)
                    {
                      --v378;
                      v55 = (unint64_t)v351-- > v5;
                      if (v55)
                        continue;
                    }
                    goto LABEL_593;
                  }
                  goto LABEL_594;
                }
                v337 = v324;
                v318 = (unsigned __int8 *)(v310 + v317);
                v322 = v670;
                v319 = v674;
                goto LABEL_624;
              }
              goto LABEL_566;
            }
            v9 = v682;
            if (v642 <= (unint64_t)v375)
            {
              v396 = v324 + 4;
              if ((unint64_t)v375 < v626)
              {
LABEL_577:
                if (*(_DWORD *)v376 == *(_DWORD *)v396)
                {
                  v396 += 4;
                  v376 += 4;
                }
              }
            }
            else
            {
              v390 = *v375 ^ *(_QWORD *)v376;
              if (v390)
              {
                v347 = (__clz(__rbit64(v390)) >> 3) + 4;
                v348 = ((_DWORD)v324 - v354);
                if (v354 <= (unint64_t)v318)
                  goto LABEL_623;
LABEL_588:
                if ((unint64_t)v324 > v5)
                {
                  v351 = v324 - 1;
                  v397 = (unsigned __int8 *)(v354 - 1);
                  while (*v351 == *v397)
                  {
                    ++v347;
                    v353 = v351 - 1;
                    if (v397 > v318)
                    {
                      --v397;
                      v55 = (unint64_t)v351-- > v5;
                      if (v55)
                        continue;
                    }
                    goto LABEL_593;
                  }
                  goto LABEL_594;
                }
                goto LABEL_623;
              }
              v401 = 0;
              v402 = v324 + 12;
              while (1)
              {
                v403 = &v402[v401];
                if ((unint64_t)&v402[v401] >= v642)
                  break;
                v404 = *(_QWORD *)(v354 + 12 + v401);
                v401 += 8;
                v405 = *(_QWORD *)v403 ^ v404;
                if (v405)
                {
                  v347 = v401 + (__clz(__rbit64(v405)) >> 3) + 4;
                  v348 = ((_DWORD)v324 - v354);
                  if (v354 > (unint64_t)v318)
                    goto LABEL_588;
                  goto LABEL_623;
                }
              }
              v396 = &v324[v401 + 12];
              v376 = (char *)(v354 + v401 + 12);
              if ((unint64_t)v396 < v626)
                goto LABEL_577;
            }
            if ((unint64_t)v396 >= v622)
            {
              if ((unint64_t)v396 < v682)
                goto LABEL_585;
            }
            else
            {
              if (*(unsigned __int16 *)v376 == *(unsigned __int16 *)v396)
              {
                v396 += 2;
                v376 += 2;
              }
              if ((unint64_t)v396 >= v682)
                goto LABEL_587;
LABEL_585:
              if (*v376 == *v396)
                ++v396;
            }
LABEL_587:
            v347 = v396 - v324;
            v348 = ((_DWORD)v324 - v354);
            if (v354 > (unint64_t)v318)
              goto LABEL_588;
LABEL_623:
            v337 = v324;
            goto LABEL_624;
          }
        }
      }
      else
      {
        v354 = v310 + v333;
        if (*(_DWORD *)(v310 + v333) == *(_DWORD *)v324)
          goto LABEL_506;
      }
      _X8 = &v324[(uint64_t)&v324[-v5] >> 8];
      v324 = _X8 + 1;
      _X8 += 257;
      __asm { PRFM            #0, [X8] }
      v9 = v682;
LABEL_474:
      v323 = v662;
      if ((unint64_t)v324 >= v319)
        goto LABEL_690;
    }
    v9 = v682;
    if (v335 >= v317)
      v322 = (char *)v682;
    v338 = ZSTD_count_2segments(v324 + 5, (char *)(v336 + 4), v682, v322, v318);
    v325 = v678;
    v339 = (unint64_t)&v337[-v5];
    v340 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v337 <= v678)
    {
      *v340 = *(_OWORD *)v5;
      v365 = *(_QWORD *)(a2 + 24);
      if (v339 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v365 + v339;
        v387 = *(_QWORD *)(a2 + 8);
        v318 = (unsigned __int8 *)(v310 + v317);
        v322 = v670;
        v319 = v674;
        v331 = (_DWORD)v324 - v310;
        goto LABEL_564;
      }
      v366 = (_OWORD *)(v365 + 16);
      v367 = v365 + v339;
      v368 = (__int128 *)(v5 + 16);
      v318 = (unsigned __int8 *)(v310 + v317);
      v322 = v670;
      v319 = v674;
      v331 = (_DWORD)v324 - v310;
      do
      {
        v369 = *v368++;
        *v366++ = v369;
      }
      while ((unint64_t)v366 < v367);
    }
    else
    {
      if (v5 <= v678)
      {
        v342 = (char *)v340 + v678 - v5;
        v379 = (__int128 *)v5;
        v380 = *(_OWORD **)(a2 + 24);
        v318 = (unsigned __int8 *)(v310 + v317);
        v322 = v670;
        v319 = v674;
        v331 = (_DWORD)v324 - v310;
        do
        {
          v381 = *v379++;
          *v380++ = v381;
        }
        while (v380 < (_OWORD *)v342);
        v341 = v678;
        if (v678 >= (unint64_t)v337)
          goto LABEL_561;
      }
      else
      {
        v341 = v5;
        v342 = *(_BYTE **)(a2 + 24);
        v318 = (unsigned __int8 *)(v310 + v317);
        v322 = v670;
        v319 = v674;
        v331 = (_DWORD)v324 - v310;
        if (v5 >= (unint64_t)v337)
          goto LABEL_561;
      }
      if (v5 <= v678)
        v382 = v678;
      else
        v382 = v5;
      v383 = (unint64_t)&v324[-v382 + 1];
      if (v383 < 8 || (unint64_t)v340 - v5 < 0x20)
      {
        v384 = (char *)v341;
        goto LABEL_559;
      }
      if (v383 >= 0x20)
      {
        v400 = v383 & 0xFFFFFFFFFFFFFFE0;
        v435 = (__int128 *)(v341 + 16);
        v436 = (_OWORD *)((char *)v340 + v382 - v5 + 16);
        v437 = v383 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v438 = *v435;
          *(v436 - 1) = *(v435 - 1);
          *v436 = v438;
          v435 += 2;
          v436 += 2;
          v437 -= 32;
        }
        while (v437);
        if (v383 == v400)
          goto LABEL_561;
        if ((v383 & 0x18) == 0)
        {
          v384 = (char *)(v341 + v400);
          v342 += v400;
LABEL_559:
          v385 = (char *)(v383 + v341);
          do
          {
            v386 = *v384++;
            *v342++ = v386;
          }
          while (v384 != v385);
          goto LABEL_561;
        }
      }
      else
      {
        v400 = 0;
      }
      v342 += v383 & 0xFFFFFFFFFFFFFFF8;
      v384 = (char *)(v341 + (v383 & 0xFFFFFFFFFFFFFFF8));
      v439 = (uint64_t *)(v341 + v400);
      v440 = (_QWORD *)((char *)v340 + v400 + v382 - v5);
      v441 = v400 - (v383 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v442 = *v439++;
        *v440++ = v442;
        v441 += 8;
      }
      while (v441);
      if (v383 != (v383 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_559;
    }
LABEL_561:
    *(_QWORD *)(a2 + 24) += v339;
    v387 = *(_QWORD *)(a2 + 8);
    if (v339 >= 0x10000)
    {
      v388 = (unint64_t)(v387 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v388;
    }
LABEL_564:
    v347 = v338 + 4;
    v389 = v338 + 1;
    *(_WORD *)(v387 + 4) = v339;
    *(_DWORD *)v387 = 1;
    v348 = v19;
    if ((v338 + 1) >> 16)
      goto LABEL_675;
    goto LABEL_676;
  }
LABEL_691:
  *a3 = v19;
  a3[1] = v20;
  return v9 - v5;
}

unint64_t ZSTD_compressBlock_greedy_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t BestMatch_dictMatchState_selectMLS;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unint64_t v39;
  _OWORD *v40;
  char *v41;
  _BYTE *v42;
  char *v43;
  _OWORD *v44;
  __int128 v45;
  char *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  _OWORD *v50;
  unint64_t v51;
  __int128 *v52;
  __int128 v53;
  uint64_t v54;
  __int16 v55;
  unint64_t v56;
  __int128 *v57;
  _OWORD *v58;
  unint64_t v59;
  __int128 v60;
  char *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  _DWORD *v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  _DWORD *v90;
  __int16 v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  unsigned int v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;

  v5 = (char *)a4;
  v6 = a4 + a5;
  v7 = a4 + a5 - 8;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v11 = *a3;
  v10 = a3[1];
  v12 = *(_QWORD *)(a1 + 184);
  v14 = *(char **)v12;
  v13 = *(_QWORD *)(v12 + 8);
  v109 = v6;
  v110 = (_QWORD *)(v8 + v9);
  v100 = v13 + *(unsigned int *)(v12 + 24);
  if ((_DWORD)a4 - ((_DWORD)v8 + (_DWORD)v9) - (_DWORD)v100 + *(_QWORD *)v12)
    v15 = (_QWORD *)a4;
  else
    v15 = (_QWORD *)(a4 + 1);
  if ((unint64_t)v15 < v7)
  {
    v99 = a3;
    v17 = v6 - 32;
    v18 = v6 - 7;
    v102 = v6 - 1;
    v103 = v6 - 3;
    v108 = v9 + v13 - (_DWORD)v14;
    v106 = *(char **)v12;
    v107 = v7;
    v19 = v6;
    v105 = *(_QWORD *)(v12 + 8);
    v101 = v13 - v108;
    while (1)
    {
      v21 = v18;
      v22 = v17;
      v23 = (char *)v15 + 1;
      v24 = (_DWORD)v15 - v8 - v11;
      v25 = (v24 + 1);
      v26 = v13 + v25 - v108;
      if (v25 >= v9)
        v26 = v8 + v25;
      if ((v9 - v24 - 5) <= 0xFFFFFFFC && *(_DWORD *)v26 == *(_DWORD *)v23)
        break;
      v111 = 999999999;
      BestMatch_dictMatchState_selectMLS = ZSTD_HcFindBestMatch_dictMatchState_selectMLS(a1, v15, v19, &v111);
      v29 = v111;
      if (BestMatch_dictMatchState_selectMLS)
        v23 = (char *)v15;
      else
        v29 = 0;
      if (BestMatch_dictMatchState_selectMLS <= 3)
      {
        v15 = (_QWORD *)((char *)v15 + (((char *)v15 - v5) >> 8) + 1);
        v14 = v106;
        v20 = v107;
        v13 = v105;
        v17 = v22;
        v18 = v21;
        v19 = v109;
        goto LABEL_7;
      }
      v17 = v22;
      if (!v29)
      {
        v18 = v21;
        goto LABEL_33;
      }
      v31 = v8 + v9;
      if (v9 > (int)v23 - (int)v8 - (int)v29 + 2)
        v31 = v100;
      v32 = v101;
      if (v9 <= (int)v23 - (int)v8 - (int)v29 + 2)
        v32 = v8;
      if (v23 <= v5 || (v33 = ((_DWORD)v23 - v8 - v29 + 2), v32 + v33 <= v31))
      {
        v18 = v21;
        v36 = v9 + v8 + 8;
      }
      else
      {
        v34 = (unsigned __int8 *)(v32 + v33 - 1);
        v35 = (unsigned __int8 *)(v23 - 1);
        v18 = v21;
        v36 = v9 + v8 + 8;
        while (*v35 == *v34)
        {
          ++BestMatch_dictMatchState_selectMLS;
          v37 = v35 - 1;
          if (v35 > (unsigned __int8 *)v5)
          {
            --v35;
            if ((unint64_t)v34-- > v31)
              continue;
          }
          v23 = (char *)(v37 + 1);
          goto LABEL_49;
        }
        v23 = (char *)(v35 + 1);
      }
LABEL_49:
      v10 = v11;
      v11 = (v29 - 2);
      v39 = v23 - v5;
      v40 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v23 <= v17)
      {
LABEL_50:
        *v40 = *(_OWORD *)v5;
        v49 = *(_QWORD *)(a2 + 24);
        if (v39 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v49 + v39;
          v54 = *(_QWORD *)(a2 + 8);
          v14 = v106;
          v20 = v107;
          v13 = v105;
          v19 = v109;
          v55 = BestMatch_dictMatchState_selectMLS - 3;
          *(_WORD *)(v54 + 4) = v39;
          *(_DWORD *)v54 = v29 + 1;
          if (BestMatch_dictMatchState_selectMLS - 3 >= 0x10000)
            goto LABEL_73;
          goto LABEL_70;
        }
        v50 = (_OWORD *)(v49 + 16);
        v51 = v49 + v39;
        v52 = (__int128 *)(v5 + 16);
        v14 = v106;
        v20 = v107;
        v13 = v105;
        v19 = v109;
        do
        {
          v53 = *v52++;
          *v50++ = v53;
        }
        while ((unint64_t)v50 < v51);
        goto LABEL_68;
      }
LABEL_34:
      if ((unint64_t)v5 <= v17)
      {
        v42 = (char *)v40 + v17 - (_QWORD)v5;
        v43 = v5;
        v44 = v40;
        do
        {
          v45 = *(_OWORD *)v43;
          v43 += 16;
          *v44++ = v45;
        }
        while (v44 < (_OWORD *)v42);
        v41 = (char *)v17;
        v14 = v106;
        v20 = v107;
        v13 = v105;
        v19 = v109;
        if (v17 >= (unint64_t)v23)
          goto LABEL_68;
      }
      else
      {
        v41 = v5;
        v42 = v40;
        v14 = v106;
        v20 = v107;
        v13 = v105;
        v19 = v109;
        if (v5 >= v23)
          goto LABEL_68;
      }
      if ((unint64_t)v5 <= v17)
        v46 = (char *)v17;
      else
        v46 = v5;
      v47 = v23 - v46;
      if ((unint64_t)(v23 - v46) < 8)
      {
        v48 = v41;
        goto LABEL_67;
      }
      if ((unint64_t)((char *)v40 - v5) < 0x20)
      {
        v48 = v41;
        goto LABEL_67;
      }
      if (v47 >= 0x20)
      {
        v56 = v47 & 0xFFFFFFFFFFFFFFE0;
        v57 = (__int128 *)(v41 + 16);
        v58 = (_OWORD *)((char *)v40 + v46 - v5 + 16);
        v59 = v47 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v60 = *v57;
          *(v58 - 1) = *(v57 - 1);
          *v58 = v60;
          v57 += 2;
          v58 += 2;
          v59 -= 32;
        }
        while (v59);
        if (v47 == v56)
          goto LABEL_68;
        if ((v47 & 0x18) == 0)
        {
          v48 = &v41[v56];
          v42 += v56;
          do
          {
LABEL_67:
            v65 = *v48++;
            *v42++ = v65;
          }
          while (v48 < v23);
          goto LABEL_68;
        }
      }
      else
      {
        v56 = 0;
      }
      v42 += v47 & 0xFFFFFFFFFFFFFFF8;
      v48 = &v41[v47 & 0xFFFFFFFFFFFFFFF8];
      v61 = &v41[v56];
      v62 = (_QWORD *)((char *)v40 + &v46[v56] - v5);
      v63 = v56 - (v47 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v64 = *(_QWORD *)v61;
        v61 += 8;
        *v62++ = v64;
        v63 += 8;
      }
      while (v63);
      if (v47 != (v47 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_67;
LABEL_68:
      *(_QWORD *)(a2 + 24) += v39;
      v54 = *(_QWORD *)(a2 + 8);
      if (v39 >= 0x10000)
      {
        v67 = (unint64_t)(v54 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v67;
        v55 = BestMatch_dictMatchState_selectMLS - 3;
        *(_WORD *)(v54 + 4) = v39;
        *(_DWORD *)v54 = v29 + 1;
        if (BestMatch_dictMatchState_selectMLS - 3 >= 0x10000)
        {
LABEL_73:
          v68 = (unint64_t)(v54 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v68;
          *(_WORD *)(v54 + 6) = v55;
          v66 = v54 + 8;
          *(_QWORD *)(a2 + 8) = v54 + 8;
          v5 = &v23[BestMatch_dictMatchState_selectMLS];
          if ((unint64_t)&v23[BestMatch_dictMatchState_selectMLS] > v20)
          {
LABEL_71:
            v15 = v5;
            goto LABEL_7;
          }
          goto LABEL_74;
        }
      }
      else
      {
        v55 = BestMatch_dictMatchState_selectMLS - 3;
        *(_WORD *)(v54 + 4) = v39;
        *(_DWORD *)v54 = v29 + 1;
        if (BestMatch_dictMatchState_selectMLS - 3 >= 0x10000)
          goto LABEL_73;
      }
LABEL_70:
      *(_WORD *)(v54 + 6) = v55;
      v66 = v54 + 8;
      *(_QWORD *)(a2 + 8) = v54 + 8;
      v5 = &v23[BestMatch_dictMatchState_selectMLS];
      if ((unint64_t)&v23[BestMatch_dictMatchState_selectMLS] > v20)
        goto LABEL_71;
LABEL_74:
      v69 = v11;
      v70 = v10;
      while (1)
      {
        v11 = v70;
        v70 = v69;
        v71 = ((_DWORD)v5 - v8 - v11);
        v72 = v71 >= v9 ? v8 : v101;
        if ((v9 + ~(_DWORD)v71) < 3)
          break;
        v73 = v72 + v71;
        if (*(_DWORD *)(v72 + v71) != *(_DWORD *)v5)
          break;
        if (v71 >= v9)
          v74 = (_QWORD *)v19;
        else
          v74 = v14;
        v75 = v5 + 4;
        v76 = (_QWORD *)(v73 + 4);
        v77 = (char *)v74 + (_QWORD)v5 - v73;
        if ((unint64_t)v77 >= v19)
          v77 = (char *)v19;
        if (v77 - 7 <= v75)
        {
          v80 = v5 + 4;
          v81 = v76;
          if (v75 < v77 - 3)
          {
LABEL_91:
            if (*v81 == *(_DWORD *)v80)
            {
              v80 += 4;
              ++v81;
            }
          }
        }
        else
        {
          v78 = *(_QWORD *)v75 ^ *v76;
          if (v78)
          {
            v79 = __clz(__rbit64(v78)) >> 3;
            if ((_QWORD *)((char *)v76 + v79) != v74)
              goto LABEL_119;
            goto LABEL_98;
          }
          v85 = v5 + 12;
          while (1)
          {
            v86 = &v85[v78];
            if (&v85[v78] >= v77 - 7)
              break;
            v87 = *(_QWORD *)(v72 + v71 + 12 + v78);
            v78 += 8;
            v88 = *(_QWORD *)v86 ^ v87;
            if (v88)
            {
              v79 = v78 + (__clz(__rbit64(v88)) >> 3);
              v19 = v109;
              if ((_QWORD *)((char *)v76 + v79) != v74)
                goto LABEL_119;
              goto LABEL_98;
            }
          }
          v80 = &v5[v78 + 12];
          v81 = (_DWORD *)(v72 + v71 + v78 + 12);
          v19 = v109;
          if (v80 < v77 - 3)
            goto LABEL_91;
        }
        if (v80 >= v77 - 1)
        {
          if (v80 >= v77)
            goto LABEL_97;
LABEL_95:
          if (*(unsigned __int8 *)v81 == *v80)
            ++v80;
          goto LABEL_97;
        }
        if (*(unsigned __int16 *)v81 == *(unsigned __int16 *)v80)
        {
          v80 += 2;
          v81 = (_DWORD *)((char *)v81 + 2);
        }
        if (v80 < v77)
          goto LABEL_95;
LABEL_97:
        v79 = v80 - v75;
        if ((_QWORD *)((char *)v76 + v80 - v75) != v74)
          goto LABEL_119;
LABEL_98:
        v82 = &v75[v79];
        if (v18 <= (unint64_t)v82)
        {
          v89 = v82;
          v90 = (_DWORD *)(v8 + v9);
          if ((unint64_t)v82 >= v103)
            goto LABEL_113;
          goto LABEL_111;
        }
        v83 = *(_QWORD *)v82 ^ *v110;
        if (!v83)
        {
          v93 = 0;
          v94 = (uint64_t)&v5[v79 + 12];
          while (1)
          {
            v95 = (_QWORD *)(v94 + v93);
            if (v94 + v93 >= v18)
              break;
            v96 = *(_QWORD *)(v36 + v93);
            v93 += 8;
            v97 = *v95 ^ v96;
            if (v97)
            {
              v84 = v93 + (__clz(__rbit64(v97)) >> 3);
              goto LABEL_118;
            }
          }
          v89 = &v5[v79 + 12 + v93];
          v90 = (_DWORD *)(v36 + v93);
          if ((unint64_t)v89 >= v103)
          {
LABEL_113:
            if ((unint64_t)v89 < v102)
            {
              if (*(unsigned __int16 *)v90 == *(unsigned __int16 *)v89)
              {
                v89 += 2;
                v90 = (_DWORD *)((char *)v90 + 2);
              }
              if ((unint64_t)v89 < v19)
              {
LABEL_115:
                if (*(unsigned __int8 *)v90 == *v89)
                  ++v89;
              }
            }
            else if ((unint64_t)v89 < v19)
            {
              goto LABEL_115;
            }
            v84 = v89 - v82;
            goto LABEL_118;
          }
LABEL_111:
          if (*v90 == *(_DWORD *)v89)
          {
            v89 += 4;
            ++v90;
          }
          goto LABEL_113;
        }
        v84 = __clz(__rbit64(v83)) >> 3;
LABEL_118:
        v79 += v84;
LABEL_119:
        if ((unint64_t)v5 <= v17)
        {
          *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
          v66 = *(_QWORD *)(a2 + 8);
          v91 = v79 + 1;
          *(_WORD *)(v66 + 4) = 0;
          *(_DWORD *)v66 = 1;
          if (v79 + 1 >= 0x10000)
          {
LABEL_123:
            v92 = (unint64_t)(v66 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v92;
          }
        }
        else
        {
          v91 = v79 + 1;
          *(_WORD *)(v66 + 4) = 0;
          *(_DWORD *)v66 = 1;
          if (v79 + 1 >= 0x10000)
            goto LABEL_123;
        }
        *(_WORD *)(v66 + 6) = v91;
        v66 += 8;
        v5 += v79 + 4;
        *(_QWORD *)(a2 + 8) = v66;
        v69 = v11;
        v10 = v70;
        v15 = v5;
        if ((unint64_t)v5 > v20)
          goto LABEL_7;
      }
      v10 = v11;
      v11 = v69;
      v15 = v5;
LABEL_7:
      if ((unint64_t)v15 >= v20)
      {
        a3 = v99;
        goto LABEL_138;
      }
    }
    if (v25 >= v9)
      v27 = (char *)v19;
    else
      v27 = v14;
    v28 = ZSTD_count_2segments((_QWORD *)((char *)v15 + 5), (char *)(v26 + 4), v19, v27, v110);
    LODWORD(v29) = 0;
    BestMatch_dictMatchState_selectMLS = v28 + 4;
    v17 = v22;
    v18 = v21;
LABEL_33:
    v36 = v9 + v8 + 8;
    v39 = v23 - v5;
    v40 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v23 <= v17)
      goto LABEL_50;
    goto LABEL_34;
  }
LABEL_138:
  *a3 = v11;
  a3[1] = v10;
  return v109 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t BestMatch_dictMatchState_selectMLS;
  unint64_t v23;
  char v24;
  unsigned __int8 *v25;
  uint64_t v26;
  char *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  _DWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _DWORD *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  unsigned __int8 *v48;
  unint64_t v49;
  int v50;
  BOOL v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  unint64_t v72;
  __int128 *v73;
  __int128 v74;
  uint64_t v75;
  __int16 v76;
  _OWORD *v77;
  _BYTE *v78;
  unsigned __int8 *v79;
  _OWORD *v80;
  __int128 v81;
  unsigned __int8 *v82;
  unint64_t v83;
  unsigned __int8 *v84;
  unint64_t v85;
  __int128 *v86;
  _OWORD *v87;
  unint64_t v88;
  __int128 v89;
  uint64_t *v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  _QWORD *v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  __int16 v109;
  char *v110;
  _DWORD *v111;
  char *v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  unsigned int *v127;
  unsigned __int8 *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  unsigned __int8 *v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unsigned __int8 *v141;
  uint64_t v142;

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = (unint64_t)&a4[a5 - 8];
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v11 = *a3;
  LODWORD(v10) = a3[1];
  v12 = *(_QWORD *)(a1 + 184);
  v14 = *(char **)v12;
  v13 = *(_QWORD *)(v12 + 8);
  v135 = (unsigned __int8 *)(v8 + v9);
  v129 = (unsigned __int8 *)(v13 + *(unsigned int *)(v12 + 24));
  if ((_DWORD)a4 - ((_DWORD)v8 + (_DWORD)v9) - (_DWORD)v129 + *(_QWORD *)v12)
    v15 = a4;
  else
    v15 = a4 + 1;
  v141 = (unsigned __int8 *)v7;
  if ((unint64_t)v15 < v7)
  {
    v16 = a2;
    v127 = a3;
    v131 = v6 - 1;
    v132 = v6 - 3;
    v133 = v9 + v8 + 8;
    v139 = v9 + v13 - (_DWORD)v14;
    v130 = v13 - v139;
    v137 = *(_QWORD *)(a1 + 8);
    v138 = *(_QWORD *)(v12 + 8);
    v134 = *(char **)v12;
    while (1)
    {
      v17 = (_DWORD)v15 - v8 - v11;
      v18 = (v17 + 1);
      v19 = v13 + v18 - v139;
      if (v18 >= v9)
        v19 = v8 + v18;
      v136 = v10;
      if ((v9 - v17 - 5) <= 0xFFFFFFFC && *(_DWORD *)v19 == *(_DWORD *)(v15 + 1))
      {
        if (v18 >= v9)
          v20 = (char *)v6;
        else
          v20 = v14;
        v21 = ZSTD_count_2segments(v15 + 5, (char *)(v19 + 4), v6, v20, v135) + 4;
      }
      else
      {
        v21 = 0;
      }
      v142 = 999999999;
      BestMatch_dictMatchState_selectMLS = ZSTD_HcFindBestMatch_dictMatchState_selectMLS(a1, v15, v6, &v142);
      if (BestMatch_dictMatchState_selectMLS <= v21)
        v23 = v21;
      else
        v23 = BestMatch_dictMatchState_selectMLS;
      if (v23 < 4)
      {
        v15 += ((v15 - v5) >> 8) + 1;
        v13 = v138;
        v14 = v134;
        LODWORD(v10) = v136;
        goto LABEL_7;
      }
      v24 = BestMatch_dictMatchState_selectMLS > v21;
      if (BestMatch_dictMatchState_selectMLS <= v21)
        v25 = v15 + 1;
      else
        v25 = v15;
      if (v24)
        v26 = v142;
      else
        v26 = 0;
      v13 = v138;
      if (v15 >= v141)
      {
LABEL_94:
        v59 = v133;
        v58 = v6 - 7;
        v60 = v6 - 32;
        v10 = v136;
        if (!v26)
          goto LABEL_112;
LABEL_95:
        v61 = v137;
        v62 = v135;
        if (v9 > (int)v25 - ((int)v26 + (int)v137) + 2)
        {
          v62 = v129;
          v61 = v130;
        }
        if (v25 <= v5 || (v63 = ((_DWORD)v25 - (v26 + v137) + 2), v61 + v63 <= (unint64_t)v62))
        {
LABEL_104:
          v10 = v11;
          v11 = (v26 - 2);
          v67 = v25 - v5;
          v68 = *(_OWORD **)(v16 + 24);
          if ((unint64_t)v25 > v60)
            goto LABEL_113;
          goto LABEL_105;
        }
        v64 = (unsigned __int8 *)(v61 + v63 - 1);
        v65 = v25 - 1;
        while (*v65 == *v64)
        {
          ++v23;
          v66 = v65 - 1;
          if (v65 > v5)
          {
            --v65;
            v24 = v64-- > v62;
            if (v24)
              continue;
          }
          v25 = v66 + 1;
          goto LABEL_104;
        }
        v25 = v65 + 1;
        v10 = v11;
        v11 = (v26 - 2);
        v67 = v65 + 1 - v5;
        v68 = *(_OWORD **)(v16 + 24);
        if ((unint64_t)v25 <= v60)
          goto LABEL_105;
LABEL_113:
        if ((unint64_t)v5 <= v60)
        {
          v78 = (char *)v68 + v60 - (_QWORD)v5;
          v79 = v5;
          v80 = v68;
          do
          {
            v81 = *(_OWORD *)v79;
            v79 += 16;
            *v80++ = v81;
          }
          while (v80 < (_OWORD *)v78);
          v70 = v10;
          v77 = (_OWORD *)v60;
          if (v60 >= (unint64_t)v25)
            goto LABEL_140;
        }
        else
        {
          v70 = v10;
          v77 = v5;
          v78 = v68;
          if (v5 >= v25)
            goto LABEL_140;
        }
        if ((unint64_t)v5 <= v60)
          v82 = (unsigned __int8 *)v60;
        else
          v82 = v5;
        v83 = v25 - v82;
        if ((unint64_t)(v25 - v82) < 8)
        {
          v84 = (unsigned __int8 *)v77;
          goto LABEL_139;
        }
        if ((unint64_t)((char *)v68 - (char *)v5) < 0x20)
        {
          v84 = (unsigned __int8 *)v77;
          goto LABEL_139;
        }
        if (v83 < 0x20)
        {
          v85 = 0;
          goto LABEL_134;
        }
        v85 = v83 & 0xFFFFFFFFFFFFFFE0;
        v86 = v77 + 1;
        v87 = (_OWORD *)((char *)v68 + v82 - v5 + 16);
        v88 = v83 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v89 = *v86;
          *(v87 - 1) = *(v86 - 1);
          *v87 = v89;
          v86 += 2;
          v87 += 2;
          v88 -= 32;
        }
        while (v88);
        if (v83 == v85)
          goto LABEL_140;
        if ((v83 & 0x18) != 0)
        {
LABEL_134:
          v78 += v83 & 0xFFFFFFFFFFFFFFF8;
          v84 = (unsigned __int8 *)v77 + (v83 & 0xFFFFFFFFFFFFFFF8);
          v90 = (uint64_t *)((char *)v77 + v85);
          v91 = (_QWORD *)((char *)v68 + &v82[v85] - v5);
          v92 = v85 - (v83 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v93 = *v90++;
            *v91++ = v93;
            v92 += 8;
          }
          while (v92);
          if (v83 == (v83 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_140;
        }
        else
        {
          v84 = (unsigned __int8 *)v77 + v85;
          v78 += v85;
        }
        do
        {
LABEL_139:
          v94 = *v84++;
          *v78++ = v94;
        }
        while (v84 < v25);
        goto LABEL_140;
      }
      v27 = (char *)(v15 + 13);
      do
      {
        v28 = v15 + 1;
        v29 = ((_DWORD)v15 + 1 - v137 - v11);
        if (v29 >= v9)
          v30 = (_DWORD *)(v137 + v29);
        else
          v30 = (_DWORD *)(v13 + v29 - v139);
        if ((v9 + ~(_DWORD)v29) < 3 || *v30 != *(_DWORD *)v28)
          goto LABEL_81;
        if (v29 >= v9)
          v31 = (char *)v6;
        else
          v31 = v134;
        v32 = (char *)(v15 + 5);
        v33 = v30 + 1;
        v34 = (unint64_t)&v15[v31 - (char *)(v30 + 1) + 5];
        if (v34 >= v6)
          v34 = v6;
        if (v34 - 7 <= (unint64_t)v32)
        {
          v39 = v15 + 5;
          v40 = v30 + 1;
          v37 = v133;
          v36 = v6 - 7;
          if ((unint64_t)v32 < v34 - 3)
          {
LABEL_44:
            if (*v40 == *(_DWORD *)v39)
            {
              v39 += 4;
              ++v40;
            }
          }
        }
        else
        {
          v35 = *(_QWORD *)v32 ^ *v33;
          v37 = v133;
          v36 = v6 - 7;
          if (v35)
          {
            v38 = __clz(__rbit64(v35)) >> 3;
            if ((char *)v33 + v38 != v31)
              goto LABEL_76;
            goto LABEL_55;
          }
          v44 = 0;
          while (1)
          {
            v39 = &v15[v44 * 4 + 13];
            if ((unint64_t)v39 >= v34 - 7)
              break;
            v45 = *(_QWORD *)&v30[v44 + 3];
            v44 += 2;
            v46 = *(_QWORD *)v39 ^ v45;
            if (v46)
            {
              v38 = v44 * 4 + (__clz(__rbit64(v46)) >> 3);
              if ((char *)v33 + v38 != v31)
                goto LABEL_76;
              goto LABEL_55;
            }
          }
          v40 = &v30[v44 + 3];
          if ((unint64_t)v39 < v34 - 3)
            goto LABEL_44;
        }
        if ((unint64_t)v39 >= v34 - 1)
        {
          if ((unint64_t)v39 >= v34)
            goto LABEL_54;
LABEL_52:
          if (*(unsigned __int8 *)v40 == *v39)
            ++v39;
          goto LABEL_54;
        }
        if (*(unsigned __int16 *)v40 == *(unsigned __int16 *)v39)
        {
          v39 += 2;
          v40 = (_DWORD *)((char *)v40 + 2);
        }
        if ((unint64_t)v39 < v34)
          goto LABEL_52;
LABEL_54:
        v38 = v39 - (unsigned __int8 *)v32;
        if ((char *)v33 + v39 - (unsigned __int8 *)v32 != v31)
          goto LABEL_76;
LABEL_55:
        v41 = &v32[v38];
        if (v36 <= (unint64_t)v41)
        {
          v47 = v41;
          v48 = v135;
          if ((unint64_t)v41 >= v132)
            goto LABEL_66;
          goto LABEL_64;
        }
        v42 = *(_QWORD *)v41 ^ *(_QWORD *)v135;
        if (!v42)
        {
          v53 = 0;
          v54 = &v27[v38];
          while (1)
          {
            v55 = &v54[v53];
            if ((unint64_t)&v54[v53] >= v36)
              break;
            v56 = *(_QWORD *)(v37 + v53);
            v53 += 8;
            v57 = *(_QWORD *)v55 ^ v56;
            if (v57)
            {
              v43 = v53 + (__clz(__rbit64(v57)) >> 3);
              goto LABEL_75;
            }
          }
          v47 = &v27[v38 + v53];
          v48 = (unsigned __int8 *)(v37 + v53);
          if ((unint64_t)v47 >= v132)
          {
LABEL_66:
            if ((unint64_t)v47 >= v131)
            {
              if ((unint64_t)v47 < v6)
                goto LABEL_72;
            }
            else
            {
              if (*(unsigned __int16 *)v48 == *(unsigned __int16 *)v47)
              {
                v47 += 2;
                v48 += 2;
              }
              if ((unint64_t)v47 >= v6)
                goto LABEL_74;
LABEL_72:
              if (*v48 == *v47)
                ++v47;
            }
LABEL_74:
            v43 = v47 - v41;
            goto LABEL_75;
          }
LABEL_64:
          if (*(_DWORD *)v48 == *(_DWORD *)v47)
          {
            v47 += 4;
            v48 += 4;
          }
          goto LABEL_66;
        }
        v43 = __clz(__rbit64(v42)) >> 3;
LABEL_75:
        v38 += v43;
LABEL_76:
        v49 = v38 + 4;
        v24 = (v38 != -5) & __CFADD__(v38, 5);
        v50 = 3 * v23 + (__clz(v26 + 1) ^ 0xFFFFFFE0) + 2;
        if (v24)
          v51 = 1;
        else
          v51 = 3 * (int)v49 <= v50;
        if (!v51)
        {
          v26 = 0;
          v23 = v49;
          v25 = v15 + 1;
        }
LABEL_81:
        v142 = 999999999;
        v52 = ZSTD_HcFindBestMatch_dictMatchState_selectMLS(a1, v15 + 1, v6, &v142);
        if (v52 < 4
          || (int)((__clz(v142 + 1) ^ 0xFFFFFFE0) + 4 * v52 + 1) <= (int)((__clz(v26 + 1) ^ 0xFFFFFFE0) + 4 * v23 + 5))
        {
          v16 = a2;
          v13 = v138;
          goto LABEL_94;
        }
        ++v27;
        ++v15;
        v25 = v28;
        v26 = v142;
        v23 = v52;
        v13 = v138;
      }
      while (v28 != v141);
      v23 = v52;
      LODWORD(v26) = v142;
      v25 = v141;
      v16 = a2;
      v59 = v133;
      v58 = v6 - 7;
      v60 = v6 - 32;
      v10 = v136;
      if (v142)
        goto LABEL_95;
LABEL_112:
      v67 = v25 - v5;
      v68 = *(_OWORD **)(v16 + 24);
      if ((unint64_t)v25 > v60)
        goto LABEL_113;
LABEL_105:
      *v68 = *(_OWORD *)v5;
      v69 = *(_QWORD *)(v16 + 24);
      if (v67 <= 0x10)
      {
        *(_QWORD *)(v16 + 24) = v69 + v67;
        v75 = *(_QWORD *)(v16 + 8);
        v76 = v23 - 3;
        *(_WORD *)(v75 + 4) = v67;
        *(_DWORD *)v75 = v26 + 1;
        if (v23 - 3 >= 0x10000)
          goto LABEL_143;
      }
      else
      {
        v70 = v10;
        v71 = (_OWORD *)(v69 + 16);
        v72 = v69 + v67;
        v73 = (__int128 *)(v5 + 16);
        do
        {
          v74 = *v73++;
          *v71++ = v74;
        }
        while ((unint64_t)v71 < v72);
LABEL_140:
        *(_QWORD *)(v16 + 24) += v67;
        v75 = *(_QWORD *)(v16 + 8);
        if (v67 >= 0x10000)
        {
          v95 = (unint64_t)(v75 - *(_QWORD *)v16) >> 3;
          *(_DWORD *)(v16 + 72) = 1;
          *(_DWORD *)(v16 + 76) = v95;
        }
        v10 = v70;
        v76 = v23 - 3;
        *(_WORD *)(v75 + 4) = v67;
        *(_DWORD *)v75 = v26 + 1;
        if (v23 - 3 >= 0x10000)
        {
LABEL_143:
          v96 = (unint64_t)(v75 - *(_QWORD *)v16) >> 3;
          *(_DWORD *)(v16 + 72) = 2;
          *(_DWORD *)(v16 + 76) = v96;
        }
      }
      *(_WORD *)(v75 + 6) = v76;
      v97 = v75 + 8;
      *(_QWORD *)(v16 + 8) = v75 + 8;
      v5 = &v25[v23];
      v8 = v137;
      if (&v25[v23] > v141)
      {
        v15 = &v25[v23];
        v14 = v134;
        goto LABEL_7;
      }
      v98 = v11;
      v99 = v10;
      v14 = v134;
      while (2)
      {
        v11 = v99;
        v99 = v98;
        v100 = ((_DWORD)v5 - v137 - v11);
        if (v100 >= v9)
          v101 = v137;
        else
          v101 = v130;
        if ((v9 + ~(_DWORD)v100) >= 3)
        {
          v102 = v101 + v100;
          if (*(_DWORD *)(v101 + v100) == *(_DWORD *)v5)
          {
            if (v100 >= v9)
              v103 = (_QWORD *)v6;
            else
              v103 = v134;
            v104 = (char *)(v5 + 4);
            v105 = (_QWORD *)(v102 + 4);
            v106 = (char *)v103 + (_QWORD)v5 - v102;
            if ((unint64_t)v106 >= v6)
              v106 = (char *)v6;
            if (v106 - 7 <= v104)
            {
              v110 = (char *)(v5 + 4);
              v111 = v105;
              if (v104 < v106 - 3)
              {
LABEL_165:
                if (*v111 == *(_DWORD *)v110)
                {
                  v110 += 4;
                  ++v111;
                }
              }
            }
            else
            {
              v107 = *(_QWORD *)v104 ^ *v105;
              if (v107)
              {
                v108 = __clz(__rbit64(v107)) >> 3;
                if ((_QWORD *)((char *)v105 + v108) != v103)
                  goto LABEL_161;
LABEL_176:
                v112 = &v104[v108];
                if (v58 <= (unint64_t)v112)
                {
                  v118 = (unsigned __int8 *)v112;
                  v119 = v135;
                  if ((unint64_t)v112 < v132)
                  {
LABEL_186:
                    if (*(_DWORD *)v119 == *(_DWORD *)v118)
                    {
                      v118 += 4;
                      v119 += 4;
                    }
                  }
                }
                else
                {
                  v113 = *(_QWORD *)v112 ^ *(_QWORD *)v135;
                  if (v113)
                  {
                    v108 += __clz(__rbit64(v113)) >> 3;
                    if ((unint64_t)v5 > v60)
                      goto LABEL_162;
LABEL_197:
                    *(_OWORD *)*(_QWORD *)(v16 + 24) = *(_OWORD *)v5;
                    v97 = *(_QWORD *)(v16 + 8);
                    v109 = v108 + 1;
                    *(_WORD *)(v97 + 4) = 0;
                    *(_DWORD *)v97 = 1;
                    if (v108 + 1 >= 0x10000)
                    {
LABEL_198:
                      v120 = (unint64_t)(v97 - *(_QWORD *)v16) >> 3;
                      *(_DWORD *)(v16 + 72) = 2;
                      *(_DWORD *)(v16 + 76) = v120;
                    }
LABEL_147:
                    *(_WORD *)(v97 + 6) = v109;
                    v97 += 8;
                    v5 += v108 + 4;
                    *(_QWORD *)(v16 + 8) = v97;
                    v98 = v11;
                    LODWORD(v10) = v99;
                    v15 = v5;
                    if (v5 > v141)
                      goto LABEL_7;
                    continue;
                  }
                  v121 = 0;
                  v122 = (uint64_t)&v5[v108 + 12];
                  while (1)
                  {
                    v123 = (_QWORD *)(v122 + v121);
                    if (v122 + v121 >= v58)
                      break;
                    v124 = *(_QWORD *)(v59 + v121);
                    v121 += 8;
                    v125 = *v123 ^ v124;
                    if (v125)
                    {
                      v108 += v121 + (__clz(__rbit64(v125)) >> 3);
                      if ((unint64_t)v5 <= v60)
                        goto LABEL_197;
                      goto LABEL_162;
                    }
                  }
                  v118 = &v5[v108 + 12 + v121];
                  v119 = (unsigned __int8 *)(v59 + v121);
                  if ((unint64_t)v118 < v132)
                    goto LABEL_186;
                }
                if ((unint64_t)v118 >= v131)
                {
                  if ((unint64_t)v118 >= v6)
                    goto LABEL_196;
                }
                else
                {
                  if (*(unsigned __int16 *)v119 == *(unsigned __int16 *)v118)
                  {
                    v118 += 2;
                    v119 += 2;
                  }
                  if ((unint64_t)v118 >= v6)
                  {
LABEL_196:
                    v108 += v118 - (unsigned __int8 *)v112;
                    if ((unint64_t)v5 > v60)
                      goto LABEL_162;
                    goto LABEL_197;
                  }
                }
                if (*v119 == *v118)
                  ++v118;
                goto LABEL_196;
              }
              v114 = (char *)(v5 + 12);
              while (1)
              {
                v115 = &v114[v107];
                if (&v114[v107] >= v106 - 7)
                  break;
                v116 = *(_QWORD *)(v101 + v100 + 12 + v107);
                v107 += 8;
                v117 = *(_QWORD *)v115 ^ v116;
                if (v117)
                {
                  v108 = v107 + (__clz(__rbit64(v117)) >> 3);
                  if ((_QWORD *)((char *)v105 + v108) != v103)
                    goto LABEL_161;
                  goto LABEL_176;
                }
              }
              v110 = (char *)&v5[v107 + 12];
              v111 = (_DWORD *)(v101 + v100 + v107 + 12);
              if (v110 < v106 - 3)
                goto LABEL_165;
            }
            if (v110 >= v106 - 1)
            {
              if (v110 >= v106)
                goto LABEL_175;
            }
            else
            {
              if (*(unsigned __int16 *)v111 == *(unsigned __int16 *)v110)
              {
                v110 += 2;
                v111 = (_DWORD *)((char *)v111 + 2);
              }
              if (v110 >= v106)
              {
LABEL_175:
                v108 = v110 - v104;
                if ((_QWORD *)((char *)v105 + v110 - v104) == v103)
                  goto LABEL_176;
LABEL_161:
                if ((unint64_t)v5 <= v60)
                  goto LABEL_197;
LABEL_162:
                v109 = v108 + 1;
                *(_WORD *)(v97 + 4) = 0;
                *(_DWORD *)v97 = 1;
                if (v108 + 1 >= 0x10000)
                  goto LABEL_198;
                goto LABEL_147;
              }
            }
            if (*(unsigned __int8 *)v111 == *v110)
              ++v110;
            goto LABEL_175;
          }
        }
        break;
      }
      LODWORD(v10) = v11;
      v11 = v98;
      v15 = v5;
LABEL_7:
      if (v15 >= v141)
      {
        a3 = v127;
        break;
      }
    }
  }
  *a3 = v11;
  a3[1] = v10;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy2_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t BestMatch_dictMatchState_selectMLS;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  _OWORD *v39;
  uint64_t v40;
  _DWORD *v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _DWORD *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _DWORD *v60;
  unint64_t v61;
  int v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  unint64_t v76;
  __int128 *v77;
  __int128 v78;
  uint64_t v79;
  __int16 v80;
  _OWORD *v81;
  _BYTE *v82;
  __int128 *v83;
  _OWORD *v84;
  __int128 v85;
  char *v86;
  unint64_t v87;
  char *v88;
  unint64_t v89;
  __int128 *v90;
  _OWORD *v91;
  unint64_t v92;
  __int128 v93;
  uint64_t *v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  char *v108;
  _QWORD *v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  __int16 v113;
  char *v114;
  _DWORD *v115;
  char *v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  _DWORD *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  unsigned int *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v136;
  unint64_t v137;
  unsigned int v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unsigned int v142;
  unint64_t v144;
  uint64_t v145;

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v10 = *a3;
  LODWORD(v9) = a3[1];
  v11 = *(_QWORD *)(a1 + 184);
  v12 = *(char **)v11;
  v13 = *(_QWORD *)(v11 + 8);
  v140 = (_QWORD *)(v7 + v8);
  v132 = v13 + *(unsigned int *)(v11 + 24);
  if ((_DWORD)a4 - ((_DWORD)v7 + (_DWORD)v8) - (_DWORD)v132 + *(_QWORD *)v11)
    v14 = a4;
  else
    v14 = a4 + 1;
  v144 = (unint64_t)&a4[a5 - 8];
  if ((unint64_t)v14 >= v144)
    goto LABEL_222;
  v131 = a3;
  v136 = v6 - 1;
  v137 = v6 - 3;
  v133 = v6 - 32;
  v142 = v8 + v13 - (_DWORD)v12;
  v134 = v13 - v142;
  v139 = *(_QWORD *)v11;
  v141 = *(_QWORD *)(v11 + 8);
  while (2)
  {
    v15 = v14 + 1;
    v16 = (_DWORD)v14 - v7 - v10;
    v17 = (v16 + 1);
    v18 = v13 + v17 - v142;
    if (v17 >= v8)
      v18 = v7 + v17;
    v138 = v9;
    if ((v8 - v16 - 5) <= 0xFFFFFFFC && *(_DWORD *)v18 == *(_DWORD *)v15)
    {
      if (v17 >= v8)
        v19 = (char *)v6;
      else
        v19 = v12;
      v20 = ZSTD_count_2segments(v14 + 5, (char *)(v18 + 4), v6, v19, v140) + 4;
    }
    else
    {
      v20 = 0;
    }
    v145 = 999999999;
    BestMatch_dictMatchState_selectMLS = ZSTD_HcFindBestMatch_dictMatchState_selectMLS(a1, v14, v6, &v145);
    if (BestMatch_dictMatchState_selectMLS <= v20)
      v22 = v20;
    else
      v22 = BestMatch_dictMatchState_selectMLS;
    if (v22 < 4)
    {
      v14 += ((v14 - v5) >> 8) + 1;
      v12 = (char *)v139;
      LODWORD(v9) = v138;
      goto LABEL_7;
    }
    if (BestMatch_dictMatchState_selectMLS <= v20)
    {
      v23 = 0;
    }
    else
    {
      v15 = v14;
      v23 = v145;
    }
    v24 = v22;
    v25 = v23;
    v26 = v15;
    if ((unint64_t)v14 >= v144)
    {
LABEL_25:
      v27 = a2;
      if (!v25)
        goto LABEL_117;
      goto LABEL_26;
    }
    while (1)
    {
      v26 = v14 + 1;
      v40 = ((_DWORD)v14 + 1 - v7 - v10);
      if (v40 >= v8)
        v41 = (_DWORD *)(v7 + v40);
      else
        v41 = (_DWORD *)(v141 + v40 - v142);
      if ((v8 + ~(_DWORD)v40) < 3 || *v41 != *(_DWORD *)v26)
        goto LABEL_92;
      if (v40 >= v8)
        v42 = (char *)v6;
      else
        v42 = (char *)v139;
      v43 = v14 + 5;
      v44 = v41 + 1;
      v45 = (unint64_t)&v14[v42 - (char *)(v41 + 1) + 5];
      if (v45 >= v6)
        v45 = v6;
      if (v45 - 7 <= (unint64_t)v43)
      {
        v50 = v14 + 5;
        v51 = v41 + 1;
        v48 = v8 + v7 + 8;
        v47 = v6 - 7;
        if ((unint64_t)v43 < v45 - 3)
        {
LABEL_55:
          if (*v51 == *(_DWORD *)v50)
          {
            v50 += 4;
            ++v51;
          }
        }
      }
      else
      {
        v46 = *(_QWORD *)v43 ^ *v44;
        v48 = v8 + v7 + 8;
        v47 = v6 - 7;
        if (v46)
        {
          v49 = __clz(__rbit64(v46)) >> 3;
          if ((char *)v44 + v49 != v42)
            goto LABEL_87;
          goto LABEL_66;
        }
        v55 = v14 + 13;
        while (1)
        {
          v56 = &v55[v46];
          if ((unint64_t)&v55[v46] >= v45 - 7)
            break;
          v57 = *(_QWORD *)((char *)v41 + v46 + 12);
          v46 += 8;
          v58 = *(_QWORD *)v56 ^ v57;
          if (v58)
          {
            v49 = v46 + (__clz(__rbit64(v58)) >> 3);
            if ((char *)v44 + v49 != v42)
              goto LABEL_87;
            goto LABEL_66;
          }
        }
        v50 = &v14[v46 + 13];
        v51 = (_DWORD *)((char *)v41 + v46 + 12);
        if ((unint64_t)v50 < v45 - 3)
          goto LABEL_55;
      }
      if ((unint64_t)v50 >= v45 - 1)
      {
        if ((unint64_t)v50 >= v45)
          goto LABEL_65;
LABEL_63:
        if (*(unsigned __int8 *)v51 == *v50)
          ++v50;
        goto LABEL_65;
      }
      if (*(unsigned __int16 *)v51 == *(unsigned __int16 *)v50)
      {
        v50 += 2;
        v51 = (_DWORD *)((char *)v51 + 2);
      }
      if ((unint64_t)v50 < v45)
        goto LABEL_63;
LABEL_65:
      v49 = v50 - v43;
      if ((char *)v44 + v50 - v43 != v42)
        goto LABEL_87;
LABEL_66:
      v52 = &v43[v49];
      if (v47 <= (unint64_t)v52)
      {
        v59 = v52;
        v60 = (_DWORD *)(v7 + v8);
        if ((unint64_t)v52 >= v137)
          goto LABEL_77;
        goto LABEL_75;
      }
      v53 = *(_QWORD *)v52 ^ *v140;
      if (!v53)
      {
        v68 = 0;
        v69 = (uint64_t)&v14[v49 + 13];
        while (1)
        {
          v70 = (_QWORD *)(v69 + v68);
          if (v69 + v68 >= v47)
            break;
          v71 = *(_QWORD *)(v48 + v68);
          v68 += 8;
          v72 = *v70 ^ v71;
          if (v72)
          {
            v54 = v68 + (__clz(__rbit64(v72)) >> 3);
            goto LABEL_86;
          }
        }
        v59 = &v14[v49 + 13 + v68];
        v60 = (_DWORD *)(v48 + v68);
        if ((unint64_t)v59 >= v137)
        {
LABEL_77:
          if ((unint64_t)v59 >= v136)
          {
            if ((unint64_t)v59 >= v6)
            {
LABEL_85:
              v54 = v59 - v52;
              goto LABEL_86;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v60 == *(unsigned __int16 *)v59)
            {
              v59 += 2;
              v60 = (_DWORD *)((char *)v60 + 2);
            }
            if ((unint64_t)v59 >= v6)
              goto LABEL_85;
          }
          if (*(unsigned __int8 *)v60 == *v59)
            ++v59;
          goto LABEL_85;
        }
LABEL_75:
        if (*v60 == *(_DWORD *)v59)
        {
          v59 += 4;
          ++v60;
        }
        goto LABEL_77;
      }
      v54 = __clz(__rbit64(v53)) >> 3;
LABEL_86:
      v49 += v54;
LABEL_87:
      v61 = v49 + 4;
      v63 = (v49 != -5) & __CFADD__(v49, 5);
      v62 = 3 * v22 + (__clz(v23 + 1) ^ 0xFFFFFFE0) + 2;
      if (v63)
        v63 = 1;
      else
        v63 = 3 * (int)v61 <= v62;
      if (!v63)
      {
        v23 = 0;
        v22 = v61;
        v15 = v14 + 1;
      }
LABEL_92:
      v145 = 999999999;
      v24 = ZSTD_HcFindBestMatch_dictMatchState_selectMLS(a1, v14 + 1, v6, &v145);
      if (v24 < 4
        || (v25 = v145,
            (int)((__clz(v145 + 1) ^ 0xFFFFFFE0) + 4 * v24 + 1) <= (int)((__clz(v23 + 1) ^ 0xFFFFFFE0) + 4 * v22 + 5)))
      {
        if ((unint64_t)v26 >= v144)
          break;
        v26 = v14 + 2;
        v64 = ((_DWORD)v14 + 2 - v7 - v10);
        v65 = v141 + v64 - v142;
        if (v64 >= v8)
          v65 = v7 + v64;
        if ((v8 + ~(_DWORD)v64) >= 3 && *(_DWORD *)v65 == *(_DWORD *)v26)
        {
          v66 = (char *)(v64 >= v8 ? v6 : v139);
          v67 = ZSTD_count_2segments(v14 + 6, (char *)(v65 + 4), v6, v66, v140);
          if (v67 <= 0xFFFFFFFFFFFFFFFBLL && (int)((__clz(v23 + 1) ^ 0xFFFFFFE0) + 4 * v22 + 2) < 4 * ((int)v67 + 4))
          {
            v23 = 0;
            v22 = v67 + 4;
            v15 = v14 + 2;
          }
        }
        v145 = 999999999;
        v24 = ZSTD_HcFindBestMatch_dictMatchState_selectMLS(a1, v14 + 2, v6, &v145);
        if (v24 < 4)
          break;
        v25 = v145;
        if ((int)((__clz(v145 + 1) ^ 0xFFFFFFE0) + 4 * v24 + 1) <= (int)((__clz(v23 + 1) ^ 0xFFFFFFE0) + 4 * v22 + 8))
          break;
      }
      v14 = v26;
      v15 = v26;
      v23 = v25;
      v22 = v24;
      if ((unint64_t)v26 >= v144)
        goto LABEL_25;
    }
    v24 = v22;
    LODWORD(v25) = v23;
    v26 = v15;
    v27 = a2;
    if (!v23)
    {
LABEL_117:
      v12 = (char *)v139;
      v35 = v8 + v7 + 8;
      v34 = v6 - 7;
      v36 = v6 - 32;
      v29 = v134;
      v9 = v138;
      v38 = v26 - v5;
      v39 = *(_OWORD **)(v27 + 24);
      if ((unint64_t)v26 <= v133)
        goto LABEL_118;
LABEL_127:
      v74 = v9;
      if ((unint64_t)v5 <= v36)
      {
        v82 = (char *)v39 + v36 - (_QWORD)v5;
        v83 = (__int128 *)v5;
        v84 = v39;
        do
        {
          v85 = *v83++;
          *v84++ = v85;
        }
        while (v84 < (_OWORD *)v82);
        v81 = (_OWORD *)v36;
        if (v36 < (unint64_t)v26)
          goto LABEL_133;
      }
      else
      {
        v81 = v5;
        v82 = v39;
        if (v5 >= v26)
          goto LABEL_152;
LABEL_133:
        if ((unint64_t)v5 <= v36)
          v86 = (char *)v36;
        else
          v86 = v5;
        v87 = v26 - v86;
        if ((unint64_t)(v26 - v86) < 8)
        {
          v88 = (char *)v81;
          goto LABEL_151;
        }
        if ((unint64_t)((char *)v39 - v5) < 0x20)
        {
          v88 = (char *)v81;
          goto LABEL_151;
        }
        if (v87 >= 0x20)
        {
          v89 = v87 & 0xFFFFFFFFFFFFFFE0;
          v90 = v81 + 1;
          v91 = (_OWORD *)((char *)v39 + v86 - v5 + 16);
          v92 = v87 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v93 = *v90;
            *(v91 - 1) = *(v90 - 1);
            *v91 = v93;
            v90 += 2;
            v91 += 2;
            v92 -= 32;
          }
          while (v92);
          if (v87 != v89)
          {
            if ((v87 & 0x18) == 0)
            {
              v88 = (char *)v81 + v89;
              v82 += v89;
              goto LABEL_151;
            }
            goto LABEL_146;
          }
        }
        else
        {
          v89 = 0;
LABEL_146:
          v82 += v87 & 0xFFFFFFFFFFFFFFF8;
          v88 = (char *)v81 + (v87 & 0xFFFFFFFFFFFFFFF8);
          v94 = (uint64_t *)((char *)v81 + v89);
          v95 = (_QWORD *)((char *)v39 + &v86[v89] - v5);
          v96 = v89 - (v87 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v97 = *v94++;
            *v95++ = v97;
            v96 += 8;
          }
          while (v96);
          if (v87 != (v87 & 0xFFFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_151:
              v98 = *v88++;
              *v82++ = v98;
            }
            while (v88 < v26);
          }
        }
      }
LABEL_152:
      *(_QWORD *)(v27 + 24) += v38;
      v79 = *(_QWORD *)(v27 + 8);
      if (v38 >= 0x10000)
      {
        v99 = (unint64_t)(v79 - *(_QWORD *)v27) >> 3;
        *(_DWORD *)(v27 + 72) = 1;
        *(_DWORD *)(v27 + 76) = v99;
      }
      v9 = v74;
      v80 = v24 - 3;
      *(_WORD *)(v79 + 4) = v38;
      *(_DWORD *)v79 = v25 + 1;
      if (v24 - 3 >= 0x10000)
        goto LABEL_155;
      goto LABEL_156;
    }
LABEL_26:
    v28 = v7 + v8;
    if (v8 > (int)v26 - ((int)v25 + (int)v7) + 2)
      v28 = v132;
    v29 = v134;
    if (v8 <= (int)v26 - ((int)v25 + (int)v7) + 2)
      v30 = v7;
    else
      v30 = v134;
    if (v26 > v5)
    {
      v31 = ((_DWORD)v26 - (v25 + v7) + 2);
      if (v30 + v31 > v28)
      {
        v32 = (unsigned __int8 *)(v30 + v31 - 1);
        v33 = (unsigned __int8 *)(v26 - 1);
        v12 = (char *)v139;
        v35 = v8 + v7 + 8;
        v34 = v6 - 7;
        v36 = v6 - 32;
        while (*v33 == *v32)
        {
          ++v24;
          v37 = v33 - 1;
          if (v33 > (unsigned __int8 *)v5)
          {
            --v33;
            v63 = (unint64_t)v32-- > v28;
            if (v63)
              continue;
          }
          v26 = (char *)(v37 + 1);
          v9 = v10;
          v10 = (v25 - 2);
          v38 = v26 - v5;
          v39 = *(_OWORD **)(v27 + 24);
          if ((unint64_t)v26 <= v133)
            goto LABEL_118;
          goto LABEL_127;
        }
        v26 = (char *)(v33 + 1);
        v9 = v10;
        v10 = (v25 - 2);
        v38 = v33 + 1 - (unsigned __int8 *)v5;
        v39 = *(_OWORD **)(v27 + 24);
        if ((unint64_t)v26 <= v133)
          goto LABEL_118;
        goto LABEL_127;
      }
    }
    v12 = (char *)v139;
    v35 = v8 + v7 + 8;
    v34 = v6 - 7;
    v36 = v6 - 32;
    v9 = v10;
    v10 = (v25 - 2);
    v38 = v26 - v5;
    v39 = *(_OWORD **)(v27 + 24);
    if ((unint64_t)v26 > v133)
      goto LABEL_127;
LABEL_118:
    *v39 = *(_OWORD *)v5;
    v73 = *(_QWORD *)(v27 + 24);
    if (v38 > 0x10)
    {
      v74 = v9;
      v75 = (_OWORD *)(v73 + 16);
      v76 = v73 + v38;
      v77 = (__int128 *)(v5 + 16);
      do
      {
        v78 = *v77++;
        *v75++ = v78;
      }
      while ((unint64_t)v75 < v76);
      goto LABEL_152;
    }
    *(_QWORD *)(v27 + 24) = v73 + v38;
    v79 = *(_QWORD *)(v27 + 8);
    v80 = v24 - 3;
    *(_WORD *)(v79 + 4) = v38;
    *(_DWORD *)v79 = v25 + 1;
    if (v24 - 3 >= 0x10000)
    {
LABEL_155:
      v100 = (unint64_t)(v79 - *(_QWORD *)v27) >> 3;
      *(_DWORD *)(v27 + 72) = 2;
      *(_DWORD *)(v27 + 76) = v100;
    }
LABEL_156:
    *(_WORD *)(v79 + 6) = v80;
    v101 = v79 + 8;
    *(_QWORD *)(v27 + 8) = v79 + 8;
    v5 = &v26[v24];
    if ((unint64_t)&v26[v24] > v144)
    {
      v14 = &v26[v24];
      v13 = v141;
      goto LABEL_7;
    }
    v102 = v10;
    v103 = v9;
    v13 = v141;
    while (2)
    {
      v10 = v103;
      v103 = v102;
      v104 = ((_DWORD)v5 - v7 - v10);
      if (v104 >= v8)
        v105 = v7;
      else
        v105 = v29;
      if ((v8 + ~(_DWORD)v104) >= 3)
      {
        v106 = v105 + v104;
        if (*(_DWORD *)(v105 + v104) == *(_DWORD *)v5)
        {
          if (v104 >= v8)
            v107 = (_QWORD *)v6;
          else
            v107 = v12;
          v108 = v5 + 4;
          v109 = (_QWORD *)(v106 + 4);
          v110 = (char *)v107 + (_QWORD)v5 - v106;
          if ((unint64_t)v110 >= v6)
            v110 = (char *)v6;
          if (v110 - 7 <= v108)
          {
            v114 = v5 + 4;
            v115 = v109;
            if (v108 < v110 - 3)
            {
LABEL_177:
              if (*v115 == *(_DWORD *)v114)
              {
                v114 += 4;
                ++v115;
              }
            }
          }
          else
          {
            v111 = *(_QWORD *)v108 ^ *v109;
            if (v111)
            {
              v112 = __clz(__rbit64(v111)) >> 3;
              if ((_QWORD *)((char *)v109 + v112) != v107)
                goto LABEL_173;
LABEL_188:
              v116 = &v108[v112];
              if (v34 <= (unint64_t)v116)
              {
                v122 = v116;
                v123 = (_DWORD *)(v7 + v8);
                if ((unint64_t)v116 < v137)
                {
LABEL_198:
                  if (*v123 == *(_DWORD *)v122)
                  {
                    v122 += 4;
                    ++v123;
                  }
                }
              }
              else
              {
                v117 = *(_QWORD *)v116 ^ *v140;
                if (v117)
                {
                  v112 += __clz(__rbit64(v117)) >> 3;
                  if ((unint64_t)v5 > v36)
                    goto LABEL_174;
LABEL_209:
                  *(_OWORD *)*(_QWORD *)(v27 + 24) = *(_OWORD *)v5;
                  v101 = *(_QWORD *)(v27 + 8);
                  v113 = v112 + 1;
                  *(_WORD *)(v101 + 4) = 0;
                  *(_DWORD *)v101 = 1;
                  if (v112 + 1 >= 0x10000)
                  {
LABEL_210:
                    v124 = (unint64_t)(v101 - *(_QWORD *)v27) >> 3;
                    *(_DWORD *)(v27 + 72) = 2;
                    *(_DWORD *)(v27 + 76) = v124;
                  }
LABEL_159:
                  *(_WORD *)(v101 + 6) = v113;
                  v101 += 8;
                  v5 += v112 + 4;
                  *(_QWORD *)(v27 + 8) = v101;
                  v102 = v10;
                  LODWORD(v9) = v103;
                  v14 = v5;
                  if ((unint64_t)v5 > v144)
                    goto LABEL_7;
                  continue;
                }
                v125 = 0;
                v126 = (uint64_t)&v5[v112 + 12];
                while (1)
                {
                  v127 = (_QWORD *)(v126 + v125);
                  if (v126 + v125 >= v34)
                    break;
                  v128 = *(_QWORD *)(v35 + v125);
                  v125 += 8;
                  v129 = *v127 ^ v128;
                  if (v129)
                  {
                    v112 += v125 + (__clz(__rbit64(v129)) >> 3);
                    if ((unint64_t)v5 <= v36)
                      goto LABEL_209;
                    goto LABEL_174;
                  }
                }
                v122 = &v5[v112 + 12 + v125];
                v123 = (_DWORD *)(v35 + v125);
                if ((unint64_t)v122 < v137)
                  goto LABEL_198;
              }
              if ((unint64_t)v122 >= v136)
              {
                if ((unint64_t)v122 >= v6)
                  goto LABEL_208;
              }
              else
              {
                if (*(unsigned __int16 *)v123 == *(unsigned __int16 *)v122)
                {
                  v122 += 2;
                  v123 = (_DWORD *)((char *)v123 + 2);
                }
                if ((unint64_t)v122 >= v6)
                {
LABEL_208:
                  v112 += v122 - v116;
                  if ((unint64_t)v5 > v36)
                    goto LABEL_174;
                  goto LABEL_209;
                }
              }
              if (*(unsigned __int8 *)v123 == *v122)
                ++v122;
              goto LABEL_208;
            }
            v118 = v5 + 12;
            while (1)
            {
              v119 = &v118[v111];
              if (&v118[v111] >= v110 - 7)
                break;
              v120 = *(_QWORD *)(v105 + v104 + 12 + v111);
              v111 += 8;
              v121 = *(_QWORD *)v119 ^ v120;
              if (v121)
              {
                v112 = v111 + (__clz(__rbit64(v121)) >> 3);
                if ((_QWORD *)((char *)v109 + v112) != v107)
                  goto LABEL_173;
                goto LABEL_188;
              }
            }
            v114 = &v5[v111 + 12];
            v115 = (_DWORD *)(v105 + v104 + v111 + 12);
            if (v114 < v110 - 3)
              goto LABEL_177;
          }
          if (v114 >= v110 - 1)
          {
            if (v114 >= v110)
              goto LABEL_187;
          }
          else
          {
            if (*(unsigned __int16 *)v115 == *(unsigned __int16 *)v114)
            {
              v114 += 2;
              v115 = (_DWORD *)((char *)v115 + 2);
            }
            if (v114 >= v110)
            {
LABEL_187:
              v112 = v114 - v108;
              if ((_QWORD *)((char *)v109 + v114 - v108) == v107)
                goto LABEL_188;
LABEL_173:
              if ((unint64_t)v5 <= v36)
                goto LABEL_209;
LABEL_174:
              v113 = v112 + 1;
              *(_WORD *)(v101 + 4) = 0;
              *(_DWORD *)v101 = 1;
              if (v112 + 1 >= 0x10000)
                goto LABEL_210;
              goto LABEL_159;
            }
          }
          if (*(unsigned __int8 *)v115 == *v114)
            ++v114;
          goto LABEL_187;
        }
      }
      break;
    }
    LODWORD(v9) = v10;
    v10 = v102;
    v14 = v5;
LABEL_7:
    if ((unint64_t)v14 < v144)
      continue;
    break;
  }
  a3 = v131;
LABEL_222:
  *a3 = v10;
  a3[1] = v9;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_btlazy2_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t BestMatch_dictMatchState_selectMLS;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t BestMatch;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _DWORD *v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  char v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  int v66;
  _DWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  int v76;
  _DWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  int v101;
  _DWORD *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  int v111;
  _DWORD *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  _DWORD *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  unsigned __int8 *v128;
  unint64_t v129;
  unsigned __int8 *v130;
  unint64_t v131;
  unint64_t v132;
  _OWORD *v133;
  uint64_t v134;
  uint64_t v135;
  _OWORD *v136;
  unint64_t v137;
  __int128 *v138;
  __int128 v139;
  uint64_t v140;
  __int16 v141;
  uint64_t *v142;
  _BYTE *v143;
  uint64_t *v144;
  _OWORD *v145;
  __int128 v146;
  uint64_t *v147;
  unint64_t v148;
  uint64_t *v149;
  unint64_t v150;
  __int128 *v151;
  _OWORD *v152;
  unint64_t v153;
  __int128 v154;
  uint64_t *v155;
  _QWORD *v156;
  unint64_t v157;
  uint64_t v158;
  char v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  char *v169;
  _QWORD *v170;
  char *v171;
  unint64_t v172;
  unint64_t v173;
  __int16 v174;
  char *v175;
  _DWORD *v176;
  char *v177;
  unint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  _DWORD *v183;
  _DWORD *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  unint64_t v190;
  unsigned int *v192;
  unint64_t v193;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unsigned int v199;
  char *v200;
  _QWORD *v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unsigned int v208;
  uint64_t v209;

  v5 = a4;
  v6 = (unint64_t)a4 + a5;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v10 = *a3;
  LODWORD(v9) = a3[1];
  v11 = *(_QWORD *)(a1 + 184);
  v13 = *(char **)v11;
  v12 = *(_QWORD *)(v11 + 8);
  v201 = (_QWORD *)(v7 + v8);
  v193 = v12 + *(unsigned int *)(v11 + 24);
  if ((_DWORD)a4 - ((_DWORD)v7 + (_DWORD)v8) - (_DWORD)v193 + *(_QWORD *)v11)
    v14 = a4;
  else
    v14 = (uint64_t *)((char *)a4 + 1);
  if (v14 >= (uint64_t *)((char *)a4 + a5 - 8))
    goto LABEL_256;
  v192 = a3;
  v195 = v6 - 1;
  v196 = v6 - 3;
  v197 = v6 - 32;
  v204 = v8 + v7 + 8;
  v208 = v8 + v12 - (_DWORD)v13;
  v203 = v12 - v208;
  v207 = (unint64_t)a4 + a5;
  v205 = *(_QWORD *)(v11 + 8);
  v206 = (unint64_t)a4 + a5 - 8;
  v200 = *(char **)v11;
  v198 = v6 - 7;
  while (2)
  {
    v17 = (_DWORD)v14 - v7 - v10;
    v18 = (v17 + 1);
    v19 = v12 + v18 - v208;
    if (v18 >= v8)
      v19 = v7 + v18;
    v199 = v9;
    if ((v8 - v17 - 5) <= 0xFFFFFFFC && *(_DWORD *)v19 == *(_DWORD *)((char *)v14 + 1))
    {
      if (v18 >= v8)
        v20 = (char *)v6;
      else
        v20 = v13;
      v21 = ZSTD_count_2segments((uint64_t *)((char *)v14 + 5), (char *)(v19 + 4), v6, v20, v201);
      v6 = v207;
      v22 = v21 + 4;
    }
    else
    {
      v22 = 0;
    }
    v209 = 999999999;
    BestMatch_dictMatchState_selectMLS = ZSTD_BtFindBestMatch_dictMatchState_selectMLS(a1, v14, v6, &v209);
    if (BestMatch_dictMatchState_selectMLS <= v22)
      v24 = v22;
    else
      v24 = BestMatch_dictMatchState_selectMLS;
    if (v24 < 4)
    {
      v14 = (uint64_t *)((char *)v14 + (((char *)v14 - (char *)v5) >> 8) + 1);
      v6 = v207;
      v12 = v205;
      v16 = v206;
      v13 = v200;
      LODWORD(v9) = v199;
      goto LABEL_7;
    }
    if (BestMatch_dictMatchState_selectMLS <= v22)
      v25 = (uint64_t *)((char *)v14 + 1);
    else
      v25 = v14;
    if (BestMatch_dictMatchState_selectMLS <= v22)
      v26 = 0;
    else
      v26 = v209;
    BestMatch = v24;
    v28 = v26;
    v29 = v25;
    v12 = v205;
    v16 = v206;
    v6 = v207;
    if ((unint64_t)v14 >= v206)
    {
LABEL_138:
      v123 = a2;
      if (!v28)
        goto LABEL_151;
      goto LABEL_139;
    }
    while (1)
    {
      v202 = v25;
      v29 = (uint64_t *)((char *)v14 + 1);
      v30 = ((_DWORD)v14 + 1 - v7 - v10);
      if (v30 >= v8)
        v31 = (_DWORD *)(v7 + v30);
      else
        v31 = (_DWORD *)(v12 + v30 - v208);
      if ((v8 + ~(_DWORD)v30) < 3 || *v31 != *(_DWORD *)v29)
        goto LABEL_85;
      if (v30 >= v8)
        v32 = (char *)v6;
      else
        v32 = v200;
      v33 = (char *)v14 + 5;
      v34 = v31 + 1;
      v35 = (unint64_t)v14 + v32 - (char *)(v31 + 1) + 5;
      if (v35 >= v6)
        v35 = v6;
      if (v35 - 7 <= (unint64_t)v33)
      {
        v38 = (_DWORD *)((char *)v14 + 5);
        v39 = v31 + 1;
        if ((unint64_t)v33 < v35 - 3)
        {
LABEL_43:
          if (*v39 == *v38)
          {
            ++v38;
            ++v39;
          }
        }
      }
      else
      {
        v36 = *(_QWORD *)v33 ^ *v34;
        if (v36)
        {
          v37 = __clz(__rbit64(v36)) >> 3;
          if ((char *)v34 + v37 != v32)
            goto LABEL_80;
          goto LABEL_54;
        }
        v43 = (char *)v14 + 13;
        while (1)
        {
          v44 = &v43[v36];
          if ((unint64_t)&v43[v36] >= v35 - 7)
            break;
          v45 = *(_QWORD *)((char *)v31 + v36 + 12);
          v36 += 8;
          v46 = *(_QWORD *)v44 ^ v45;
          if (v46)
          {
            v37 = v36 + (__clz(__rbit64(v46)) >> 3);
            if ((char *)v34 + v37 != v32)
              goto LABEL_80;
            goto LABEL_54;
          }
        }
        v38 = (_DWORD *)((char *)v14 + v36 + 13);
        v39 = (_DWORD *)((char *)v31 + v36 + 12);
        if ((unint64_t)v38 < v35 - 3)
          goto LABEL_43;
      }
      if ((unint64_t)v38 >= v35 - 1)
      {
        if ((unint64_t)v38 >= v35)
          goto LABEL_53;
LABEL_51:
        if (*(unsigned __int8 *)v39 == *(unsigned __int8 *)v38)
          v38 = (_DWORD *)((char *)v38 + 1);
        goto LABEL_53;
      }
      if (*(unsigned __int16 *)v39 == *(unsigned __int16 *)v38)
      {
        v38 = (_DWORD *)((char *)v38 + 2);
        v39 = (_DWORD *)((char *)v39 + 2);
      }
      if ((unint64_t)v38 < v35)
        goto LABEL_51;
LABEL_53:
      v37 = (char *)v38 - v33;
      if ((char *)v34 + (char *)v38 - v33 != v32)
        goto LABEL_80;
LABEL_54:
      v40 = &v33[v37];
      if (v198 <= (unint64_t)v40)
      {
        v47 = v40;
        v48 = (_DWORD *)(v7 + v8);
        if ((unint64_t)v40 >= v196)
        {
LABEL_72:
          if ((unint64_t)v47 < v195 && *(unsigned __int16 *)v48 == *(unsigned __int16 *)v47)
          {
            v47 = (_DWORD *)((char *)v47 + 2);
            v48 = (_DWORD *)((char *)v48 + 2);
          }
          if ((unint64_t)v47 < v6 && *(unsigned __int8 *)v48 == *(unsigned __int8 *)v47)
            v47 = (_DWORD *)((char *)v47 + 1);
          v42 = (char *)v47 - v40;
          goto LABEL_79;
        }
LABEL_63:
        if (*v48 == *v47)
        {
          ++v47;
          ++v48;
        }
        goto LABEL_72;
      }
      v41 = *(_QWORD *)v40 ^ *v201;
      if (!v41)
      {
        v49 = 0;
        v50 = (uint64_t)v14 + v37 + 13;
        while (1)
        {
          v51 = (_QWORD *)(v50 + v49);
          if (v50 + v49 >= v198)
            break;
          v52 = *(_QWORD *)(v204 + v49);
          v49 += 8;
          v53 = *v51 ^ v52;
          if (v53)
          {
            v42 = v49 + (__clz(__rbit64(v53)) >> 3);
            goto LABEL_79;
          }
        }
        v47 = (_DWORD *)((char *)v14 + v37 + v49 + 13);
        v48 = (_DWORD *)(v204 + v49);
        if ((unint64_t)v47 >= v196)
          goto LABEL_72;
        goto LABEL_63;
      }
      v42 = __clz(__rbit64(v41)) >> 3;
LABEL_79:
      v37 += v42;
LABEL_80:
      v54 = v37 + 4;
      v56 = (v37 != -5) & __CFADD__(v37, 5);
      v55 = 3 * v24 + (__clz(v26 + 1) ^ 0xFFFFFFE0) + 2;
      if (v56)
        v56 = 1;
      else
        v56 = 3 * (int)v54 <= v55;
      if (!v56)
      {
        v26 = 0;
        v24 = v54;
        v202 = (uint64_t *)((char *)v14 + 1);
      }
LABEL_85:
      v209 = 999999999;
      v57 = *(_DWORD *)(a1 + 208);
      if ((v57 - 6) < 2)
      {
        v58 = *(_QWORD *)(a1 + 8);
        v59 = *(unsigned int *)(a1 + 36);
        if (v58 + v59 > (unint64_t)v29)
          goto LABEL_105;
        v60 = (_DWORD)v29 - v58;
        if (v59 < (int)v29 - (int)v58)
        {
          v61 = *(_QWORD *)(a1 + 48);
          v62 = *(_QWORD *)(a1 + 64);
          v63 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
          v64 = 64 - *(_DWORD *)(a1 + 200);
          do
          {
            v65 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v58 + v59)) >> v64);
            v66 = *(_DWORD *)(v61 + v65);
            v67 = (_DWORD *)(v62 + 8 * (v59 & v63));
            *(_DWORD *)(v61 + v65) = v59;
            *v67 = v66;
            v67[1] = 1;
            ++v59;
          }
          while ((_DWORD)v29 - (_DWORD)v58 != v59);
        }
        v68 = 6;
LABEL_97:
        v78 = v60;
        goto LABEL_103;
      }
      if (v57 == 5)
      {
        v69 = *(_QWORD *)(a1 + 8);
        v70 = *(unsigned int *)(a1 + 36);
        if (v69 + v70 > (unint64_t)v29)
          goto LABEL_105;
        v60 = (_DWORD)v29 - v69;
        if (v70 < (int)v29 - (int)v69)
        {
          v71 = *(_QWORD *)(a1 + 48);
          v72 = *(_QWORD *)(a1 + 64);
          v73 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
          v74 = 64 - *(_DWORD *)(a1 + 200);
          do
          {
            v75 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v69 + v70)) >> v74);
            v76 = *(_DWORD *)(v71 + v75);
            v77 = (_DWORD *)(v72 + 8 * (v70 & v73));
            *(_DWORD *)(v71 + v75) = v70;
            *v77 = v76;
            v77[1] = 1;
            ++v70;
          }
          while ((_DWORD)v29 - (_DWORD)v69 != v70);
        }
        v68 = 5;
        goto LABEL_97;
      }
      v79 = *(_QWORD *)(a1 + 8);
      v80 = *(unsigned int *)(a1 + 36);
      if (v79 + v80 > (unint64_t)v29)
        goto LABEL_105;
      v78 = (_DWORD)v29 - v79;
      if (v80 < (int)v29 - (int)v79)
      {
        v81 = *(_QWORD *)(a1 + 48);
        v82 = *(_QWORD *)(a1 + 64);
        v83 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
        v84 = 32 - *(_DWORD *)(a1 + 200);
        do
        {
          v85 = 4 * ((-1640531535 * *(_DWORD *)(v79 + v80)) >> v84);
          v86 = *(_DWORD *)(v81 + v85);
          v87 = (_DWORD *)(v82 + 8 * (v80 & v83));
          *(_DWORD *)(v81 + v85) = v80;
          *v87 = v86;
          v87[1] = 1;
          ++v80;
        }
        while ((_DWORD)v29 - (_DWORD)v79 != v80);
      }
      v68 = 4;
LABEL_103:
      *(_DWORD *)(a1 + 36) = v78;
      BestMatch = ZSTD_DUBT_findBestMatch(a1, (uint64_t *)((char *)v14 + 1), v6, &v209, v68, 2);
      v6 = v207;
      v12 = v205;
      v16 = v206;
      if (BestMatch >= 4)
      {
        v28 = v209;
        if ((int)((__clz(v209 + 1) ^ 0xFFFFFFE0) + 4 * BestMatch + 1) > (int)((__clz(v26 + 1) ^ 0xFFFFFFE0)
                                                                             + 4 * v24
                                                                             + 5))
          goto LABEL_137;
      }
LABEL_105:
      if ((unint64_t)v29 >= v16)
        break;
      v29 = (uint64_t *)((char *)v14 + 2);
      v88 = ((_DWORD)v14 + 2 - v7 - v10);
      v89 = v12 + v88 - v208;
      if (v88 >= v8)
        v89 = v7 + v88;
      if ((v8 + ~(_DWORD)v88) >= 3 && *(_DWORD *)v89 == *(_DWORD *)v29)
      {
        if (v88 >= v8)
          v90 = (char *)v6;
        else
          v90 = v200;
        v91 = ZSTD_count_2segments((uint64_t *)((char *)v14 + 6), (char *)(v89 + 4), v6, v90, v201);
        if (v91 > 0xFFFFFFFFFFFFFFFBLL)
        {
          v6 = v207;
          v12 = v205;
          v16 = v206;
        }
        else
        {
          v6 = v207;
          v12 = v205;
          v16 = v206;
          if ((int)((__clz(v26 + 1) ^ 0xFFFFFFE0) + 4 * v24 + 2) < 4 * ((int)v91 + 4))
          {
            v26 = 0;
            v24 = v91 + 4;
            v202 = (uint64_t *)((char *)v14 + 2);
          }
        }
      }
      v209 = 999999999;
      v92 = *(_DWORD *)(a1 + 208);
      if ((v92 - 6) < 2)
      {
        v93 = *(_QWORD *)(a1 + 8);
        v94 = *(unsigned int *)(a1 + 36);
        if (v93 + v94 > (unint64_t)v29)
          break;
        v95 = (_DWORD)v29 - v93;
        if (v94 < (int)v29 - (int)v93)
        {
          v96 = *(_QWORD *)(a1 + 48);
          v97 = *(_QWORD *)(a1 + 64);
          v98 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
          v99 = 64 - *(_DWORD *)(a1 + 200);
          do
          {
            v100 = 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v93 + v94)) >> v99);
            v101 = *(_DWORD *)(v96 + v100);
            v102 = (_DWORD *)(v97 + 8 * (v94 & v98));
            *(_DWORD *)(v96 + v100) = v94;
            *v102 = v101;
            v102[1] = 1;
            ++v94;
          }
          while ((_DWORD)v29 - (_DWORD)v93 != v94);
        }
        v103 = 6;
LABEL_129:
        v113 = v95;
        goto LABEL_135;
      }
      if (v92 == 5)
      {
        v104 = *(_QWORD *)(a1 + 8);
        v105 = *(unsigned int *)(a1 + 36);
        if (v104 + v105 > (unint64_t)v29)
          break;
        v95 = (_DWORD)v29 - v104;
        if (v105 < (int)v29 - (int)v104)
        {
          v106 = *(_QWORD *)(a1 + 48);
          v107 = *(_QWORD *)(a1 + 64);
          v108 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
          v109 = 64 - *(_DWORD *)(a1 + 200);
          do
          {
            v110 = 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v104 + v105)) >> v109);
            v111 = *(_DWORD *)(v106 + v110);
            v112 = (_DWORD *)(v107 + 8 * (v105 & v108));
            *(_DWORD *)(v106 + v110) = v105;
            *v112 = v111;
            v112[1] = 1;
            ++v105;
          }
          while ((_DWORD)v29 - (_DWORD)v104 != v105);
        }
        v103 = 5;
        goto LABEL_129;
      }
      v114 = *(_QWORD *)(a1 + 8);
      v115 = *(unsigned int *)(a1 + 36);
      if (v114 + v115 > (unint64_t)v29)
        break;
      v113 = (_DWORD)v29 - v114;
      if (v115 < (int)v29 - (int)v114)
      {
        v116 = *(_QWORD *)(a1 + 48);
        v117 = *(_QWORD *)(a1 + 64);
        v118 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
        v119 = 32 - *(_DWORD *)(a1 + 200);
        do
        {
          v120 = 4 * ((-1640531535 * *(_DWORD *)(v114 + v115)) >> v119);
          v121 = *(_DWORD *)(v116 + v120);
          v122 = (_DWORD *)(v117 + 8 * (v115 & v118));
          *(_DWORD *)(v116 + v120) = v115;
          *v122 = v121;
          v122[1] = 1;
          ++v115;
        }
        while ((_DWORD)v29 - (_DWORD)v114 != v115);
      }
      v103 = 4;
LABEL_135:
      *(_DWORD *)(a1 + 36) = v113;
      BestMatch = ZSTD_DUBT_findBestMatch(a1, (uint64_t *)((char *)v14 + 2), v6, &v209, v103, 2);
      v6 = v207;
      v12 = v205;
      v16 = v206;
      if (BestMatch < 4)
        break;
      v28 = v209;
      if ((int)((__clz(v209 + 1) ^ 0xFFFFFFE0) + 4 * BestMatch + 1) <= (int)((__clz(v26 + 1) ^ 0xFFFFFFE0) + 4 * v24 + 8))
        break;
LABEL_137:
      v14 = v29;
      v25 = v29;
      v26 = v28;
      v24 = BestMatch;
      if ((unint64_t)v29 >= v16)
        goto LABEL_138;
    }
    BestMatch = v24;
    LODWORD(v28) = v26;
    v29 = v202;
    v123 = a2;
    if (!v26)
    {
LABEL_151:
      v13 = v200;
      v131 = v197;
      v129 = v198;
      v9 = v199;
      v132 = (char *)v29 - (char *)v5;
      v133 = *(_OWORD **)(v123 + 24);
      if ((unint64_t)v29 <= v197)
        goto LABEL_152;
LABEL_161:
      v135 = v9;
      if ((unint64_t)v5 <= v131)
      {
        v143 = (char *)v133 + v131 - (_QWORD)v5;
        v144 = v5;
        v145 = v133;
        do
        {
          v146 = *(_OWORD *)v144;
          v144 += 2;
          *v145++ = v146;
        }
        while (v145 < (_OWORD *)v143);
        v142 = (uint64_t *)v197;
        if (v197 < (unint64_t)v29)
          goto LABEL_167;
      }
      else
      {
        v142 = v5;
        v143 = v133;
        if (v5 >= v29)
          goto LABEL_186;
LABEL_167:
        if ((unint64_t)v5 <= v197)
          v147 = (uint64_t *)v197;
        else
          v147 = v5;
        v148 = (char *)v29 - (char *)v147;
        if ((unint64_t)((char *)v29 - (char *)v147) < 8)
        {
          v149 = v142;
          goto LABEL_185;
        }
        if ((unint64_t)((char *)v133 - (char *)v5) < 0x20)
        {
          v149 = v142;
          goto LABEL_185;
        }
        if (v148 >= 0x20)
        {
          v150 = v148 & 0xFFFFFFFFFFFFFFE0;
          v151 = (__int128 *)(v142 + 2);
          v152 = (_OWORD *)((char *)v133 + (char *)v147 - (char *)v5 + 16);
          v153 = v148 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v154 = *v151;
            *(v152 - 1) = *(v151 - 1);
            *v152 = v154;
            v151 += 2;
            v152 += 2;
            v153 -= 32;
          }
          while (v153);
          if (v148 != v150)
          {
            if ((v148 & 0x18) == 0)
            {
              v149 = (uint64_t *)((char *)v142 + v150);
              v143 += v150;
              goto LABEL_185;
            }
            goto LABEL_180;
          }
        }
        else
        {
          v150 = 0;
LABEL_180:
          v143 += v148 & 0xFFFFFFFFFFFFFFF8;
          v149 = (uint64_t *)((char *)v142 + (v148 & 0xFFFFFFFFFFFFFFF8));
          v155 = (uint64_t *)((char *)v142 + v150);
          v156 = (_QWORD *)((char *)v133 + (char *)v147 + v150 - (char *)v5);
          v157 = v150 - (v148 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v158 = *v155++;
            *v156++ = v158;
            v157 += 8;
          }
          while (v157);
          if (v148 != (v148 & 0xFFFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_185:
              v159 = *(_BYTE *)v149;
              v149 = (uint64_t *)((char *)v149 + 1);
              *v143++ = v159;
            }
            while (v149 < v29);
          }
        }
      }
LABEL_186:
      *(_QWORD *)(v123 + 24) += v132;
      v140 = *(_QWORD *)(v123 + 8);
      if (v132 >= 0x10000)
      {
        v160 = (unint64_t)(v140 - *(_QWORD *)v123) >> 3;
        *(_DWORD *)(v123 + 72) = 1;
        *(_DWORD *)(v123 + 76) = v160;
      }
      v9 = v135;
      v141 = BestMatch - 3;
      *(_WORD *)(v140 + 4) = v132;
      *(_DWORD *)v140 = v28 + 1;
      if (BestMatch - 3 >= 0x10000)
        goto LABEL_189;
      goto LABEL_190;
    }
LABEL_139:
    v124 = v7 + v8;
    if (v8 > (int)v29 - (int)v28 - (int)v7 + 2)
      v124 = v193;
    v125 = v203;
    if (v8 <= (int)v29 - (int)v28 - (int)v7 + 2)
      v125 = v7;
    if (v29 <= v5 || (v126 = ((_DWORD)v29 - v28 - v7 + 2), v125 + v126 <= v124))
    {
      v13 = v200;
      v129 = v198;
    }
    else
    {
      v127 = (unsigned __int8 *)(v125 + v126 - 1);
      v128 = (unsigned __int8 *)v29 - 1;
      v13 = v200;
      v129 = v198;
      while (*v128 == *v127)
      {
        ++BestMatch;
        v130 = v128 - 1;
        if (v128 > (unsigned __int8 *)v5)
        {
          --v128;
          v56 = (unint64_t)v127-- > v124;
          if (v56)
            continue;
        }
        v29 = (uint64_t *)(v130 + 1);
        goto LABEL_160;
      }
      v29 = (uint64_t *)(v128 + 1);
    }
LABEL_160:
    v9 = v10;
    v10 = (v28 - 2);
    v132 = (char *)v29 - (char *)v5;
    v133 = *(_OWORD **)(v123 + 24);
    v131 = v197;
    if ((unint64_t)v29 > v197)
      goto LABEL_161;
LABEL_152:
    *v133 = *(_OWORD *)v5;
    v134 = *(_QWORD *)(v123 + 24);
    if (v132 > 0x10)
    {
      v135 = v9;
      v136 = (_OWORD *)(v134 + 16);
      v137 = v134 + v132;
      v138 = (__int128 *)(v5 + 2);
      do
      {
        v139 = *v138++;
        *v136++ = v139;
      }
      while ((unint64_t)v136 < v137);
      goto LABEL_186;
    }
    *(_QWORD *)(v123 + 24) = v134 + v132;
    v140 = *(_QWORD *)(v123 + 8);
    v141 = BestMatch - 3;
    *(_WORD *)(v140 + 4) = v132;
    *(_DWORD *)v140 = v28 + 1;
    if (BestMatch - 3 >= 0x10000)
    {
LABEL_189:
      v161 = (unint64_t)(v140 - *(_QWORD *)v123) >> 3;
      *(_DWORD *)(v123 + 72) = 2;
      *(_DWORD *)(v123 + 76) = v161;
    }
LABEL_190:
    *(_WORD *)(v140 + 6) = v141;
    v162 = v140 + 8;
    *(_QWORD *)(v123 + 8) = v140 + 8;
    v5 = (uint64_t *)((char *)v29 + BestMatch);
    if ((unint64_t)v29 + BestMatch > v16)
    {
      v14 = (uint64_t *)((char *)v29 + BestMatch);
      goto LABEL_7;
    }
    v163 = v10;
    v164 = v9;
    while (2)
    {
      v10 = v164;
      v164 = v163;
      v165 = ((_DWORD)v5 - v7 - v10);
      if (v165 >= v8)
        v166 = v7;
      else
        v166 = v203;
      if ((v8 + ~(_DWORD)v165) >= 3)
      {
        v167 = v166 + v165;
        if (*(_DWORD *)(v166 + v165) == *(_DWORD *)v5)
        {
          if (v165 >= v8)
            v168 = (_QWORD *)v6;
          else
            v168 = v13;
          v169 = (char *)v5 + 4;
          v170 = (_QWORD *)(v167 + 4);
          v171 = (char *)v168 + (_QWORD)v5 - v167;
          if ((unint64_t)v171 >= v6)
            v171 = (char *)v6;
          if (v171 - 7 <= v169)
          {
            v175 = (char *)v5 + 4;
            v176 = v170;
            if (v169 < v171 - 3)
            {
LABEL_211:
              if (*v176 == *(_DWORD *)v175)
              {
                v175 += 4;
                ++v176;
              }
            }
          }
          else
          {
            v172 = *(_QWORD *)v169 ^ *v170;
            if (v172)
            {
              v173 = __clz(__rbit64(v172)) >> 3;
              if ((_QWORD *)((char *)v170 + v173) != v168)
                goto LABEL_207;
LABEL_222:
              v177 = &v169[v173];
              if (v129 <= (unint64_t)v177)
              {
                v183 = v177;
                v184 = (_DWORD *)(v7 + v8);
                if ((unint64_t)v177 < v196)
                {
LABEL_232:
                  if (*v184 == *v183)
                  {
                    ++v183;
                    ++v184;
                  }
                }
              }
              else
              {
                v178 = *(_QWORD *)v177 ^ *v201;
                if (v178)
                {
                  v173 += __clz(__rbit64(v178)) >> 3;
                  if ((unint64_t)v5 > v197)
                    goto LABEL_208;
LABEL_243:
                  *(_OWORD *)*(_QWORD *)(v123 + 24) = *(_OWORD *)v5;
                  v162 = *(_QWORD *)(v123 + 8);
                  v174 = v173 + 1;
                  *(_WORD *)(v162 + 4) = 0;
                  *(_DWORD *)v162 = 1;
                  if (v173 + 1 >= 0x10000)
                  {
LABEL_244:
                    v185 = (unint64_t)(v162 - *(_QWORD *)v123) >> 3;
                    *(_DWORD *)(v123 + 72) = 2;
                    *(_DWORD *)(v123 + 76) = v185;
                  }
LABEL_193:
                  *(_WORD *)(v162 + 6) = v174;
                  v162 += 8;
                  v5 = (uint64_t *)((char *)v5 + v173 + 4);
                  *(_QWORD *)(v123 + 8) = v162;
                  v163 = v10;
                  LODWORD(v9) = v164;
                  v14 = v5;
                  if ((unint64_t)v5 > v16)
                    goto LABEL_7;
                  continue;
                }
                v186 = 0;
                v187 = (uint64_t)v5 + v173 + 12;
                while (1)
                {
                  v188 = (_QWORD *)(v187 + v186);
                  if (v187 + v186 >= v129)
                    break;
                  v189 = *(_QWORD *)(v204 + v186);
                  v186 += 8;
                  v190 = *v188 ^ v189;
                  if (v190)
                  {
                    v173 += v186 + (__clz(__rbit64(v190)) >> 3);
                    if ((unint64_t)v5 <= v197)
                      goto LABEL_243;
                    goto LABEL_208;
                  }
                }
                v183 = (_DWORD *)((char *)v5 + v173 + v186 + 12);
                v184 = (_DWORD *)(v204 + v186);
                if ((unint64_t)v183 < v196)
                  goto LABEL_232;
              }
              if ((unint64_t)v183 >= v195)
              {
                if ((unint64_t)v183 >= v6)
                  goto LABEL_242;
              }
              else
              {
                if (*(unsigned __int16 *)v184 == *(unsigned __int16 *)v183)
                {
                  v183 = (_DWORD *)((char *)v183 + 2);
                  v184 = (_DWORD *)((char *)v184 + 2);
                }
                if ((unint64_t)v183 >= v6)
                {
LABEL_242:
                  v173 += (char *)v183 - v177;
                  if ((unint64_t)v5 > v197)
                    goto LABEL_208;
                  goto LABEL_243;
                }
              }
              if (*(unsigned __int8 *)v184 == *(unsigned __int8 *)v183)
                v183 = (_DWORD *)((char *)v183 + 1);
              goto LABEL_242;
            }
            v179 = (char *)v5 + 12;
            while (1)
            {
              v180 = &v179[v172];
              if (&v179[v172] >= v171 - 7)
                break;
              v181 = *(_QWORD *)(v166 + v165 + 12 + v172);
              v172 += 8;
              v182 = *(_QWORD *)v180 ^ v181;
              if (v182)
              {
                v173 = v172 + (__clz(__rbit64(v182)) >> 3);
                if ((_QWORD *)((char *)v170 + v173) != v168)
                  goto LABEL_207;
                goto LABEL_222;
              }
            }
            v175 = (char *)v5 + v172 + 12;
            v176 = (_DWORD *)(v166 + v165 + v172 + 12);
            if (v175 < v171 - 3)
              goto LABEL_211;
          }
          if (v175 >= v171 - 1)
          {
            if (v175 >= v171)
              goto LABEL_221;
          }
          else
          {
            if (*(unsigned __int16 *)v176 == *(unsigned __int16 *)v175)
            {
              v175 += 2;
              v176 = (_DWORD *)((char *)v176 + 2);
            }
            if (v175 >= v171)
            {
LABEL_221:
              v173 = v175 - v169;
              if ((_QWORD *)((char *)v170 + v175 - v169) == v168)
                goto LABEL_222;
LABEL_207:
              if ((unint64_t)v5 <= v197)
                goto LABEL_243;
LABEL_208:
              v174 = v173 + 1;
              *(_WORD *)(v162 + 4) = 0;
              *(_DWORD *)v162 = 1;
              if (v173 + 1 >= 0x10000)
                goto LABEL_244;
              goto LABEL_193;
            }
          }
          if (*(unsigned __int8 *)v176 == *v175)
            ++v175;
          goto LABEL_221;
        }
      }
      break;
    }
    LODWORD(v9) = v10;
    v10 = v163;
    v14 = v5;
LABEL_7:
    if ((unint64_t)v14 < v16)
      continue;
    break;
  }
  a3 = v192;
LABEL_256:
  *a3 = v10;
  a3[1] = v9;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_btopt_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v7;
  char **v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  __int128 *v13;
  __int128 v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int i;
  int inserted;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  unint64_t v66;
  _DWORD *v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  int v102;
  unint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  int v112;
  unsigned int v113;
  unint64_t v114;
  _DWORD *v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int *v127;
  unsigned int v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  _DWORD *v135;
  unsigned int v136;
  unsigned int v137;
  _BOOL4 v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  int v165;
  unint64_t v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  unsigned int v175;
  unint64_t v176;
  _DWORD *v178;
  uint64_t v179;
  char *v180;
  unint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int v194;
  unsigned int v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int v202;
  unsigned int v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  _QWORD *v211;
  int v212;
  unint64_t v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  unsigned int v223;
  unint64_t v224;
  _DWORD *v226;
  uint64_t v227;
  char *v228;
  unint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  int v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  BOOL v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unsigned __int8 *v247;
  _QWORD *v248;
  unint64_t v249;
  unint64_t v250;
  unsigned __int8 *v251;
  int v252;
  _DWORD *v253;
  unsigned int *v255;
  unsigned int v256;
  uint64_t v257;
  char *v258;
  char *v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  int v263;
  uint64_t v264;
  unsigned int v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  int v271;
  _DWORD *v272;
  unsigned int v273;
  unsigned int v274;
  _BOOL4 v275;
  int v276;
  uint64_t v277;
  unsigned int v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  int v284;
  _DWORD *v285;
  unsigned int v286;
  unsigned int v287;
  _BOOL4 v288;
  int v289;
  unsigned int *v290;
  unsigned int *v291;
  unsigned int v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  int v298;
  _DWORD *v299;
  unsigned int v300;
  unsigned int v301;
  _BOOL4 v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unsigned __int8 *v309;
  _QWORD *v310;
  unint64_t v311;
  unint64_t v312;
  unsigned __int8 *v313;
  int v314;
  _DWORD *v315;
  unsigned int *v317;
  unsigned int v318;
  uint64_t v319;
  char *v320;
  char *v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unsigned __int8 *v331;
  _QWORD *v332;
  unint64_t v333;
  unint64_t v334;
  unsigned __int8 *v335;
  int v336;
  _DWORD *v337;
  unsigned int *v339;
  unsigned int v340;
  uint64_t v341;
  char *v342;
  char *v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned __int8 *v353;
  _DWORD *v354;
  unint64_t v355;
  unint64_t v356;
  unsigned __int8 *v357;
  int v358;
  _DWORD *v359;
  unsigned int *v361;
  unsigned int v362;
  uint64_t v363;
  char *v364;
  char *v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  _DWORD *v369;
  unint64_t v370;
  unint64_t v371;
  unsigned __int8 *v372;
  unsigned __int8 *v374;
  uint64_t v375;
  int v376;
  unsigned int v377;
  uint64_t v378;
  unsigned int v379;
  unint64_t v380;
  unsigned int v381;
  unsigned int v382;
  _DWORD *v383;
  int v384;
  unsigned int v385;
  unsigned int v386;
  _DWORD *v387;
  unint64_t v388;
  uint64_t v389;
  unsigned int *v390;
  uint64_t v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int *v394;
  unsigned int v395;
  unsigned int v396;
  uint64_t v397;
  int v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v403;
  int v404;
  int v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int *v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int *v414;
  unsigned int *v415;
  unsigned int *v416;
  unint64_t v417;
  unsigned __int8 *v418;
  int v419;
  unsigned int v420;
  unint64_t v421;
  unsigned int v422;
  unsigned int *v423;
  unsigned int v424;
  uint64_t v425;
  unsigned __int8 *v426;
  unsigned int v427;
  int v428;
  unsigned int v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  int v435;
  uint64_t v436;
  signed int v437;
  signed int *v438;
  _DWORD *v439;
  signed int v440;
  signed int v441;
  unsigned int *v442;
  unsigned int v443;
  unsigned int *v444;
  unint64_t v445;
  unsigned int v446;
  unsigned int v447;
  signed int *v448;
  uint64_t v449;
  unsigned int *v450;
  unsigned int *v451;
  int v452;
  unint64_t v453;
  uint64_t v454;
  unsigned int v455;
  unint64_t v456;
  unsigned int *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  int v461;
  unsigned int j;
  int v463;
  unsigned int v464;
  uint64_t v465;
  unsigned int v466;
  _QWORD *v467;
  unsigned int v468;
  int v469;
  uint64_t v470;
  unsigned int v471;
  unsigned int v472;
  unsigned int v474;
  int v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  unsigned int v483;
  unint64_t v484;
  unsigned int v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  unsigned int v489;
  uint64_t v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  uint64_t v495;
  _QWORD *v496;
  uint64_t v497;
  int v498;
  unsigned int v499;
  unint64_t v500;
  _QWORD *v502;
  _QWORD *v503;
  unint64_t v504;
  unint64_t v505;
  _DWORD *v506;
  unsigned int v507;
  uint64_t v508;
  unsigned int v509;
  _QWORD *v510;
  unsigned int v511;
  int v512;
  uint64_t v513;
  unsigned int v514;
  unsigned int v515;
  unsigned int v517;
  int v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unsigned int v522;
  unsigned int v523;
  unsigned int v524;
  unsigned int v525;
  unsigned int v526;
  unint64_t v527;
  unsigned int v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  unsigned int v532;
  uint64_t v533;
  unsigned int *v534;
  unsigned int v535;
  unsigned int v536;
  unsigned int v537;
  uint64_t v539;
  uint64_t v540;
  int v541;
  unsigned int v542;
  unint64_t v543;
  _QWORD *v545;
  _QWORD *v546;
  unint64_t v547;
  unint64_t v548;
  _DWORD *v549;
  int v550;
  unsigned int v551;
  uint64_t v552;
  unsigned int *v553;
  unsigned int *v554;
  unsigned int v555;
  unint64_t v556;
  unint64_t v557;
  unint64_t v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v561;
  unint64_t v562;
  unint64_t v563;
  uint64_t v564;
  unsigned int v565;
  _DWORD *v566;
  unsigned int v567;
  unsigned int v568;
  unsigned int v569;
  _BOOL4 v570;
  unsigned int v571;
  uint64_t v572;
  uint64_t v573;
  unsigned int v574;
  _QWORD *v575;
  unsigned int v576;
  int v577;
  uint64_t v578;
  unsigned int v579;
  unsigned int v580;
  unsigned int v582;
  int v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  unsigned int v587;
  unsigned int v588;
  unsigned int v589;
  unsigned int v590;
  unsigned int v591;
  unint64_t v592;
  unsigned int v593;
  uint64_t v594;
  uint64_t v595;
  unint64_t v596;
  unsigned int v597;
  uint64_t v598;
  unsigned int v599;
  unsigned int v600;
  unsigned int v601;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  unsigned int v606;
  unint64_t v607;
  _QWORD *v609;
  _QWORD *v610;
  unint64_t v611;
  unint64_t v612;
  _DWORD *v613;
  unsigned int v614;
  uint64_t v615;
  unsigned int v616;
  _QWORD *v617;
  unsigned int v618;
  int v619;
  uint64_t v620;
  unsigned int v621;
  unsigned int v622;
  unsigned int v624;
  int v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int v632;
  unsigned int v633;
  unint64_t v634;
  unsigned int v635;
  uint64_t v636;
  uint64_t v637;
  unint64_t v638;
  unsigned int v639;
  uint64_t v640;
  unsigned int v641;
  unsigned int v642;
  unsigned int v643;
  uint64_t v645;
  uint64_t v646;
  int v647;
  unsigned int v648;
  unint64_t v649;
  _QWORD *v651;
  _QWORD *v652;
  unint64_t v653;
  unint64_t v654;
  _DWORD *v655;
  uint64_t v656;
  uint64_t v657;
  int v658;
  int v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  BOOL v663;
  unint64_t v664;
  unint64_t v665;
  unsigned int v666;
  uint64_t v667;
  int v668;
  unint64_t v669;
  uint64_t v670;
  unsigned __int8 *v671;
  _QWORD *v672;
  unint64_t v673;
  unint64_t v674;
  char *v675;
  unsigned int v676;
  _DWORD *v677;
  unsigned int *v679;
  unsigned int *v680;
  unint64_t v681;
  uint64_t v682;
  char *v683;
  char *v684;
  uint64_t v685;
  unint64_t v686;
  unint64_t v687;
  int v688;
  uint64_t v689;
  unsigned int v690;
  unsigned int *v691;
  uint64_t v692;
  unsigned int *v693;
  unsigned int v694;
  unint64_t v695;
  unint64_t v696;
  unint64_t v697;
  uint64_t v698;
  uint64_t v699;
  unint64_t v700;
  unint64_t v701;
  uint64_t v702;
  _DWORD *v703;
  unsigned int v704;
  unsigned int v705;
  unsigned int v706;
  _BOOL4 v707;
  int v708;
  unsigned int v709;
  uint64_t v710;
  unsigned int *v711;
  unsigned int v712;
  unint64_t v713;
  unint64_t v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t v717;
  unint64_t v718;
  unint64_t v719;
  uint64_t v720;
  unsigned int v721;
  _DWORD *v722;
  unsigned int v723;
  unsigned int v724;
  unsigned int v725;
  _BOOL4 v726;
  unsigned int v727;
  int v728;
  unsigned int v729;
  unsigned int *v730;
  unsigned int *v731;
  unsigned int v732;
  unint64_t v733;
  unint64_t v734;
  unint64_t v735;
  uint64_t v736;
  uint64_t v737;
  unint64_t v738;
  unint64_t v739;
  unint64_t v740;
  uint64_t v741;
  unsigned int v742;
  _DWORD *v743;
  unsigned int v744;
  unsigned int v745;
  unsigned int v746;
  _BOOL4 v747;
  unint64_t v748;
  unint64_t v749;
  uint64_t v750;
  int v751;
  unint64_t v752;
  uint64_t v753;
  unsigned __int8 *v754;
  _QWORD *v755;
  unint64_t v756;
  unint64_t v757;
  char *v758;
  unsigned int v759;
  _DWORD *v760;
  unsigned int *v762;
  unsigned int *v763;
  unsigned int *v764;
  unint64_t v765;
  uint64_t v766;
  char *v767;
  char *v768;
  uint64_t v769;
  unint64_t v770;
  unint64_t v771;
  unint64_t v772;
  unint64_t v773;
  unsigned int v774;
  uint64_t v775;
  unint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unsigned __int8 *v779;
  _QWORD *v780;
  unint64_t v781;
  unint64_t v782;
  char *v783;
  _DWORD *v784;
  unsigned int *v786;
  unsigned int v787;
  uint64_t v788;
  char *v789;
  char *v790;
  uint64_t v791;
  unint64_t v792;
  unint64_t v793;
  unint64_t v794;
  unint64_t v795;
  uint64_t v796;
  int v797;
  unint64_t v798;
  uint64_t v799;
  unsigned __int8 *v800;
  _DWORD *v801;
  unint64_t v802;
  unint64_t v803;
  char *v804;
  unsigned int v805;
  _DWORD *v806;
  unsigned int *v808;
  unsigned int *v809;
  unsigned int *v810;
  unint64_t v811;
  uint64_t v812;
  char *v813;
  char *v814;
  uint64_t v815;
  unint64_t v816;
  unint64_t v817;
  _DWORD *v818;
  unint64_t v819;
  unint64_t v820;
  unsigned __int8 *v821;
  uint64_t v823;
  char *v824;
  char *v825;
  uint64_t v826;
  unint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  unsigned int v831;
  signed int *v832;
  unsigned int v833;
  unsigned int v834;
  signed int v835;
  uint64_t v836;
  int v837;
  int v838;
  int v839;
  unsigned int v840;
  signed int *v841;
  unint64_t v842;
  signed int v843;
  uint64_t v844;
  unint64_t v845;
  unint64_t v846;
  _DWORD *v847;
  _DWORD *v848;
  int v849;
  int v850;
  int v851;
  uint64_t v852;
  uint64_t v853;
  int v854;
  int v855;
  unsigned int v856;
  signed int *v857;
  unsigned int v858;
  unsigned int v859;
  unint64_t v860;
  signed int v861;
  uint64_t v862;
  unint64_t v863;
  unint64_t v864;
  _DWORD *v865;
  _DWORD *v866;
  unsigned int *v867;
  unsigned int *v868;
  unsigned int *v869;
  unint64_t v870;
  unsigned int v871;
  unsigned int v872;
  unsigned int v873;
  unint64_t v874;
  uint64_t v875;
  unsigned int v876;
  unsigned int v877;
  unsigned int *v878;
  unsigned int v879;
  unsigned int *v880;
  unsigned int v881;
  unsigned int *v882;
  __int128 v883;
  BOOL v884;
  unsigned int v885;
  uint64_t v886;
  unsigned int v887;
  uint64_t v888;
  unsigned int v889;
  unsigned int v890;
  char *v891;
  unsigned __int8 *v892;
  uint64_t v893;
  int v894;
  unsigned int v895;
  unsigned int v896;
  unsigned int v897;
  unsigned int v898;
  unsigned int v899;
  unsigned __int8 *v900;
  char *v901;
  unsigned __int8 *v902;
  char *v903;
  uint64_t v904;
  _OWORD *v905;
  unint64_t v906;
  __int128 *v907;
  __int128 v908;
  unsigned __int8 *v909;
  char *v910;
  __int128 v911;
  unsigned __int8 *v912;
  unint64_t v913;
  unsigned __int8 *v914;
  uint64_t v915;
  unint64_t v916;
  __int128 *v917;
  char *v918;
  unint64_t v919;
  __int128 v920;
  unsigned __int8 *v921;
  char *v922;
  unint64_t v923;
  uint64_t v924;
  char v925;
  unint64_t v926;
  unint64_t v927;
  unsigned int v928;
  unsigned int v929;
  unsigned int *v930;
  uint64_t v931;
  unint64_t v932;
  _QWORD *v933;
  _QWORD *v934;
  uint64_t v935;
  unint64_t v936;
  uint64_t v938;
  unsigned int *v939;
  unsigned int v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  unsigned int v944;
  int v945;
  int v946;
  int v947;
  int v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  unint64_t v953;
  unint64_t v954;
  uint64_t v955;
  unsigned int *v956;
  int v957;
  int v958;
  int v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  int v964;
  unsigned int *v965;
  uint64_t v966;
  unsigned int *v967;
  unsigned int *v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  unsigned int v974;
  unsigned int v975;
  unsigned int v976;
  unsigned int v977;
  _QWORD *v978;
  int v979;
  unsigned int v980;
  unsigned int v981;
  unsigned int v982;
  int v983;
  int v984;
  int v985;
  unsigned int v986;
  int v987;
  int v988;
  int v989;
  int v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  unsigned int v994;
  uint64_t v995;
  int v996;
  int v997;
  int v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  unsigned int v1008;
  unsigned int v1009;
  unsigned int v1010;
  int v1011;
  unsigned int v1012;
  unsigned int v1013;
  unsigned int v1014;
  unsigned int v1015;
  uint64_t v1016;
  unsigned int *v1017;
  unsigned int *v1018;
  unsigned int *v1019;
  unint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  unsigned int v1029;
  unsigned int v1030;
  unsigned int v1031;
  unsigned int *v1032;
  unint64_t v1033;
  unint64_t v1034;
  uint64_t v1035;
  unsigned int v1036;
  unsigned int v1037;
  unsigned int v1038;
  unint64_t v1039;
  unsigned int v1040;
  uint64_t v1041;
  int v1042;
  int v1043;
  int v1044;
  unsigned int v1045;
  uint64_t v1046;
  uint64_t v1047;
  unsigned int v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  int v1054;
  uint64_t v1055;
  unint64_t v1056;
  int v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  unsigned int v1063;
  unsigned int v1064;
  unsigned int v1065;
  unsigned int v1066;
  unint64_t v1067;
  unsigned int v1068;
  unsigned int v1069;
  unsigned int v1070;
  unsigned int v1071;
  unsigned int v1072;
  uint64_t v1073;
  unsigned int v1074;
  unsigned int v1075;
  uint64_t v1076;
  unsigned int v1077;
  unsigned int v1078;
  unsigned int v1079;
  unsigned int v1080;
  unsigned int v1081;
  unsigned int v1082;
  int v1083;
  uint64_t v1084;
  int v1085;
  unsigned int v1086;
  uint64_t v1087;
  uint64_t v1088;
  unsigned int v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  unsigned int v1094;
  unsigned int v1095;
  int v1096;
  unsigned int v1097;
  uint64_t v1098;
  int v1099;
  unsigned int v1100;
  unsigned int v1101;
  unsigned int v1102;
  unsigned int v1103;
  unsigned int v1104;
  unsigned int v1105;
  unsigned int v1106;
  uint64_t v1107;
  int v1108;
  int v1109;
  int v1110;
  int v1111;
  _DWORD *v1112;
  unsigned int v1113;
  unsigned int v1114;
  unint64_t v1115;
  unint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  unsigned int v1119;
  unsigned int v1120;
  int v1121;
  unsigned int v1122;
  unsigned int v1123;
  int v1124;
  unsigned int v1125;
  int v1126;
  unsigned int v1127;
  unsigned int v1128;
  unsigned int v1129;
  unint64_t v1130;
  uint64_t v1131;
  unint64_t v1132;
  unint64_t v1133;
  unint64_t v1134;
  unint64_t v1135;
  unsigned int v1136;
  unint64_t v1137;
  int v1138;
  unint64_t v1139;
  uint64_t v1140;
  char *v1141;
  unsigned int v1142;
  unsigned int v1143;
  unsigned int v1144;
  int v1145;
  unsigned int v1146;
  unsigned int v1147;
  unsigned int v1148;
  unsigned int v1149;
  unsigned int *v1150;
  unint64_t v1151;
  unint64_t v1152;
  unint64_t v1153;
  uint64_t v1154;
  int v1155;
  int v1156;
  int v1157;
  unsigned int v1158;
  int v1159;
  int v1160;
  unsigned int v1161;
  unsigned int v1162;
  unint64_t v1163;
  char *v1164;
  char *v1165;
  unsigned int v1166;
  unsigned int v1167;
  uint64_t v1168;
  unsigned int v1169;
  uint64_t v1170;
  uint64_t v1171;
  char *v1172;
  char *v1173;
  _QWORD *v1174;
  _QWORD *v1175;
  unsigned int v1176;
  unsigned int v1177;
  uint64_t v1178;
  unsigned int v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  _QWORD *v1183;
  _QWORD *v1184;
  unsigned int v1185;
  unint64_t v1186;
  unsigned int v1187;
  unint64_t v1188;
  unsigned int v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  unsigned int v1193;
  unsigned int v1194;
  unsigned int v1195;
  unsigned int v1196;
  int v1197;
  unsigned int v1198;
  uint64_t v1199;
  int v1200;
  int v1201;
  int v1202;
  signed int v1203;
  _QWORD *v1204;
  _QWORD *v1205;
  _QWORD *v1206;
  _QWORD *v1207;
  char *v1208;
  char *v1209;
  char *v1210;
  char *v1211;
  int v1212;
  unsigned __int8 *v1213;
  int v1214;
  int v1215;
  unsigned int v1216;
  int v1217;
  int v1218;
  unsigned int v1219;
  uint64_t v1220;
  int v1221;
  char *v1222;
  unint64_t v1223;
  uint64_t v1224;
  char **v1225;
  unint64_t v1226;
  unint64_t v1227;
  unint64_t v1228;
  unint64_t v1229;
  unint64_t v1230;
  unint64_t v1231;
  unint64_t v1232;
  unint64_t v1233;
  _QWORD *v1234;
  unsigned __int8 *v1235;
  unint64_t v1236;
  unint64_t v1237;
  unsigned __int8 *v1238;
  int v1239;
  int v1240;
  int v1241;
  int v1242;
  unsigned int v1243;
  _QWORD *v1244;
  int v1245;
  _QWORD *v1246;
  _QWORD *v1247;
  unsigned int *v1248;
  unsigned int v1249;
  char *v1250;
  unsigned int v1251;
  unsigned int v1252;
  unsigned int v1253;
  char *v1254;
  unsigned int v1255;
  unsigned __int8 *v1257;
  uint64_t v1258;
  unsigned __int8 *v1259;
  unint64_t v1260;
  _DWORD *v1261;
  _DWORD *v1262;
  unsigned int v1263;
  __int128 v1264;
  __int128 v1265;
  _BYTE v1266[24];
  int v1267;
  uint64_t v1268;
  unsigned int v1269;
  uint64_t v1270;

  v7 = a1;
  v1270 = *MEMORY[0x1E0C80C00];
  v8 = (char **)(a1 + 80);
  v1213 = a4;
  v1259 = &a4[a5];
  v1223 = (unint64_t)&a4[a5 - 8];
  v9 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 212) >= 0xFFFu)
    v10 = 4095;
  else
    v10 = *(_DWORD *)(a1 + 212);
  v1189 = v10;
  if (*(_DWORD *)(a1 + 208) == 3)
    v11 = 3;
  else
    v11 = 4;
  v1258 = v11;
  v940 = *(_DWORD *)(a1 + 36);
  v12 = *(unsigned int **)(a1 + 120);
  v1261 = *(_DWORD **)(a1 + 112);
  v1269 = 0;
  v1268 = 0;
  v1265 = 0u;
  memset(v1266, 0, sizeof(v1266));
  v1264 = 0u;
  v13 = *(__int128 **)(a1 + 224);
  if (v13)
  {
    v14 = v13[1];
    v1264 = *v13;
    v1265 = v14;
    *(_QWORD *)v1266 = *((_QWORD *)v13 + 4);
  }
  else
  {
    *(_QWORD *)v1266 = 0;
    v1264 = 0uLL;
    v1265 = 0uLL;
  }
  *(_QWORD *)&v1266[12] = 0;
  *(_DWORD *)&v1266[8] = 0;
  ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t *)&v1264, 0, a5);
  ZSTD_rescaleFreqs(v8, v1213, a5, 0);
  if (v9 == v1213)
    v15 = v1213 + 1;
  else
    v15 = v1213;
  v16 = (unint64_t)v1259;
  if ((unint64_t)v15 < v1223)
  {
    v1113 = 0;
    v1260 = (unint64_t)(v1259 - 7);
    v1236 = (unint64_t)(v1259 - 1);
    v1237 = (unint64_t)(v1259 - 3);
    v17 = (v1258 - 1) | 1;
    v1262 = v12 + 14;
    v938 = v1258 - v17;
    v939 = &v12[7 * v17];
    v18 = v12 + 7;
    v1224 = v7;
    v1225 = v8;
    v19 = v1213;
    v1024 = a2;
    while (1)
    {
      v1238 = v19;
      v21 = (_DWORD)v15 - (_DWORD)v19;
      v1263 = 0;
      v22 = *(_QWORD *)(v7 + 8);
      v23 = *(unsigned int *)(v7 + 36);
      v1257 = v15;
      if (v22 + v23 > (unint64_t)v15)
      {
        LODWORD(v24) = 0;
        goto LABEL_602;
      }
      v25 = *(_DWORD *)(v7 + 208);
      for (i = (_DWORD)v15 - v22; v23 < i; LODWORD(v23) = inserted + v23)
      {
        inserted = ZSTD_insertBt1(v7, (_QWORD *)(v22 + v23), v16, v25, 0);
        v16 = (unint64_t)v1259;
      }
      *(_DWORD *)(v7 + 36) = i;
      if ((v25 - 6) < 2)
        break;
      if (v25 == 5)
      {
        LODWORD(v24) = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu)
          v139 = 4095;
        else
          v139 = *(_DWORD *)(v7 + 212);
        v140 = *(_QWORD *)(v7 + 8);
        v141 = ((_DWORD)v1257 - v140);
        v142 = (char *)(v1257 + 12);
        v1043 = *(_DWORD *)(v7 + 204);
        v1052 = *(_QWORD *)(v7 + 48);
        v1034 = (0xCF1BBCDCBB000000 * *(_QWORD *)v1257) >> -(char)*(_DWORD *)(v7 + 200);
        v143 = *(_DWORD *)(v1052 + 4 * v1034);
        v144 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        v989 = ~v144;
        v145 = v141 + v144 + 1;
        if (v141 < ~v144)
          v145 = 0;
        v981 = v145;
        v146 = *(unsigned int *)(v7 + 24);
        v147 = 1 << *(_DWORD *)(v7 + 192);
        if ((int)v141 - *(_DWORD *)(v7 + 28) > v147 && *(_DWORD *)(v7 + 32) == 0)
          v149 = v141 - v147;
        else
          v149 = *(_DWORD *)(v7 + 28);
        v15 = v1257;
        if (v149 <= 1)
          v150 = 1;
        else
          v150 = v149;
        v1198 = v150;
        v151 = *(_QWORD *)(v7 + 184);
        v152 = *(_QWORD *)(v151 + 8);
        v1210 = *(char **)v151;
        v153 = *(_DWORD *)(v151 + 28);
        v154 = v149 - (*(_QWORD *)v151 - (_DWORD)v152);
        v1005 = v151;
        v997 = *(_DWORD *)(v151 + 200);
        v155 = ~(-1 << (*(_DWORD *)(v151 + 196) - 1));
        v156 = *(_QWORD *)v151 - v152 - v153;
        v157 = *(_QWORD *)(v7 + 64);
        v976 = (_DWORD)v1210 - v152;
        v1069 = v155;
        if (v156 <= v155)
          v158 = v153;
        else
          v158 = (_DWORD)v1210 - v152 - v155;
        v1080 = v158;
        v159 = v141 - v146;
        v1091 = v152;
        v160 = v152 - v154;
        v1101 = v153;
        v1061 = v149 - ((_DWORD)v1210 - (_DWORD)v152);
        v161 = v141 - v153 - v154;
        v162 = v21 == 0;
        v1026 = v140;
        v1206 = (_QWORD *)(v140 + v146);
        v1192 = v157;
        v1018 = (unsigned int *)(v157 + 8 * (v141 & ~v144));
        v1267 = 0;
        v1215 = v141 + 9;
        if (v21)
          v163 = 3;
        else
          v163 = 4;
        v164 = v1257 + 4;
        if (v21)
          v165 = 0;
        else
          v165 = -1;
        v166 = (v1258 - 1);
        v1179 = v139;
        v1157 = v146;
        v1144 = v143;
        v1129 = v149;
        v1116 = v163;
        v1109 = v165;
        while (1)
        {
          if (v162 == 3)
          {
            v167 = *a3 - 1;
            v168 = v141 - v167;
            v169 = *a3 - 2;
            if (v169 >= v159)
              goto LABEL_211;
          }
          else
          {
            v167 = a3[v162];
            v168 = v141 - v167;
            v169 = v167 - 1;
            if (v167 - 1 >= v159)
            {
LABEL_211:
              if (v169 < v161 && v146 + ~v168 >= 3)
              {
                v171 = v160 + v168;
                if (*(_DWORD *)v15 == *(_DWORD *)v171)
                {
                  v1242 = v24;
                  v1229 = v166;
                  v172 = v141;
                  v173 = v161;
                  v174 = ZSTD_count_2segments(v164, (char *)(v171 + 4), v16, v1210, v1206);
                  v163 = v1116;
                  v161 = v173;
                  v165 = v1109;
                  v149 = v1129;
                  LODWORD(v146) = v1157;
                  v142 = (char *)(v1257 + 12);
                  v143 = v1144;
                  v141 = v172;
                  v166 = v1229;
                  LODWORD(v24) = v1242;
                  v15 = v1257;
                  v16 = (unint64_t)v1259;
                  v175 = v174 + 4;
                  v139 = v1179;
                  v176 = v175;
                  if (v1229 < v175)
                    goto LABEL_225;
                }
              }
              goto LABEL_208;
            }
          }
          if (v168 < v149 || *(_DWORD *)v15 != *(_DWORD *)&v15[-v167])
            goto LABEL_208;
          v179 = -(uint64_t)v167;
          v180 = (char *)v164 - v167;
          if (v1260 <= (unint64_t)v164)
            break;
          v181 = *v164 ^ *(_QWORD *)v180;
          if (v181)
          {
            v175 = (__clz(__rbit64(v181)) >> 3) + 4;
            v176 = v175;
            if (v166 < v175)
              goto LABEL_225;
            goto LABEL_208;
          }
          v183 = 0;
          do
          {
            v182 = &v142[v183];
            if ((unint64_t)&v142[v183] >= v1260)
            {
              v180 = &v182[v179];
              if ((unint64_t)v182 >= v1237)
                goto LABEL_235;
              goto LABEL_233;
            }
            v184 = *(_QWORD *)&v142[v179 + v183];
            v183 += 8;
            v185 = *(_QWORD *)v182 ^ v184;
          }
          while (!v185);
          v175 = v183 + (__clz(__rbit64(v185)) >> 3) + 4;
          v176 = v175;
          if (v166 < v175)
          {
LABEL_225:
            v178 = &v1261[2 * v24];
            *v178 = v162 + v165;
            v178[1] = v175;
            LODWORD(v24) = v24 + 1;
            if (v175 > v139)
              goto LABEL_601;
            v166 = v176;
            if (&v15[v176] == (unsigned __int8 *)v16)
              goto LABEL_601;
          }
LABEL_208:
          if (++v162 >= v163)
          {
            *(_DWORD *)(v1052 + 4 * v1034) = v141;
            v263 = ~(-1 << v1043);
            if (v143 < v1198)
            {
              v264 = v1026;
              v127 = v1018 + 1;
              v126 = v1018;
LABEL_373:
              *v127 = 0;
              *v126 = 0;
              v1241 = v24;
              if (!v263)
                goto LABEL_599;
              v15 = v1257;
              v265 = *(_DWORD *)(*(_QWORD *)(v1005 + 48) + 4
                                                         * ((0xCF1BBCDCBB000000 * *(_QWORD *)v1257) >> -(char)v997));
              if (v265 <= v1101)
                goto LABEL_600;
              v266 = 0;
              v267 = 0;
              v1170 = *(_QWORD *)(v1005 + 64);
              v1180 = v264 + v1061;
              v1159 = v141 + 2;
              v1200 = v263 - 1;
              while (1)
              {
                v1231 = v166;
                if (v267 >= v266)
                  v268 = v266;
                else
                  v268 = v267;
                v269 = ZSTD_count_2segments(&v15[v268], (char *)(v1091 + v265 + v268), v16, v1210, v1206) + v268;
                v166 = v1231;
                if (v269 + v265 >= v976)
                  v270 = v1180 + v265;
                else
                  v270 = v1091 + v265;
                if (v269 <= v1231)
                {
                  v16 = (unint64_t)v1259;
                  v15 = v1257;
                  if (v265 <= v1080)
                    goto LABEL_600;
                }
                else
                {
                  v271 = v1215;
                  if (v269 > v1215 - (v265 + v1061))
                    v271 = v265 + v1061 + v269;
                  v1215 = v271;
                  v272 = &v1261[2 * v1241];
                  *v272 = v1159 - (v265 + v1061);
                  v272[1] = v269;
                  ++v1241;
                  if (v269 > 0x1000)
                    goto LABEL_598;
                  v15 = v1257;
                  v166 = v269;
                  v16 = (unint64_t)v1259;
                  if (&v1257[v269] == v1259 || v265 <= v1080)
                    goto LABEL_600;
                }
                v273 = *(unsigned __int8 *)(v270 + v269);
                v274 = v15[v269];
                v57 = v273 >= v274;
                v275 = v273 < v274;
                if (v57)
                  v266 = v269;
                else
                  v267 = v269;
                if (v1200)
                {
                  --v1200;
                  v265 = *(_DWORD *)(v1170 + 8 * (v265 & v1069) + 4 * v275);
                  if (v265 > v1101)
                    continue;
                }
                goto LABEL_600;
              }
            }
            v303 = 0;
            v304 = 0;
            v1246 = v1257 + 8;
            v264 = v1026;
            v305 = v1026 + 8;
            v127 = v1018 + 1;
            v126 = v1018;
            while (2)
            {
              if (v304 >= v303)
                v306 = v303;
              else
                v306 = v304;
              v307 = v143;
              v308 = v1026 + v143;
              v309 = &v1257[v306];
              v310 = (_QWORD *)(v308 + v306);
              if (v1260 <= (unint64_t)&v1257[v306])
              {
                v313 = &v1257[v306];
                if ((unint64_t)v309 >= v1237)
                  goto LABEL_459;
              }
              else
              {
                v311 = *(_QWORD *)v309 ^ *v310;
                if (v311)
                {
                  v312 = (__clz(__rbit64(v311)) >> 3) + v306;
                  if (v312 <= v166)
                    goto LABEL_475;
LABEL_468:
                  v314 = v1215;
                  if (v312 > v1215 - v143)
                    v314 = v143 + v312;
                  v1215 = v314;
                  v315 = &v1261[2 * v24];
                  *v315 = v141 + 2 - v143;
                  v315[1] = v312;
                  LODWORD(v24) = v24 + 1;
                  if (v312 > 0x1000 || &v1257[v312] == (unsigned __int8 *)v16)
                    goto LABEL_573;
                  v166 = v312;
LABEL_475:
                  v317 = (unsigned int *)(v1192 + 8 * (v143 & v989));
                  if (*(unsigned __int8 *)(v308 + v312) >= v1257[v312])
                  {
                    *v127 = v143;
                    if (v143 <= v981)
                    {
                      v127 = (unsigned int *)&v1267;
                      goto LABEL_373;
                    }
                    v303 = v312;
                    v127 = (unsigned int *)(v1192 + 8 * (v143 & v989));
                    v57 = v263-- != 0;
                    if (!v57)
                      goto LABEL_373;
                  }
                  else
                  {
                    *v126 = v143;
                    if (v143 <= v981)
                    {
                      v126 = (unsigned int *)&v1267;
                      goto LABEL_373;
                    }
                    ++v317;
                    v304 = v312;
                    v126 = v317;
                    v57 = v263-- != 0;
                    if (!v57)
                      goto LABEL_373;
                  }
                  v143 = *v317;
                  if (*v317 < v1198)
                    goto LABEL_373;
                  continue;
                }
                v318 = v143;
                v319 = 0;
                v320 = (char *)v1246 + v306;
                while (1)
                {
                  v321 = &v320[v319];
                  if ((unint64_t)&v320[v319] >= v1260)
                    break;
                  v322 = *(_QWORD *)(v305 + v306 + v307 + v319);
                  v319 += 8;
                  v323 = *(_QWORD *)v321 ^ v322;
                  if (v323)
                  {
                    v324 = __clz(__rbit64(v323));
                    v143 = v318;
                    v312 = v319 + (v324 >> 3) + v306;
                    if (v312 <= v166)
                      goto LABEL_475;
                    goto LABEL_468;
                  }
                }
                v313 = (unsigned __int8 *)v1246 + v306 + v319;
                v310 = (_QWORD *)(v305 + v306 + v307 + v319);
                v143 = v318;
                if ((unint64_t)v313 >= v1237)
                {
LABEL_459:
                  if ((unint64_t)v313 >= v1236)
                  {
                    if ((unint64_t)v313 >= v16)
                      goto LABEL_467;
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v310 == *(unsigned __int16 *)v313)
                    {
                      v313 += 2;
                      v310 = (_QWORD *)((char *)v310 + 2);
                    }
                    if ((unint64_t)v313 >= v16)
                    {
LABEL_467:
                      v312 = v313 - v1257;
                      if (v313 - v1257 <= v166)
                        goto LABEL_475;
                      goto LABEL_468;
                    }
                  }
                  if (*(unsigned __int8 *)v310 == *v313)
                    ++v313;
                  goto LABEL_467;
                }
              }
              break;
            }
            if (*(_DWORD *)v310 == *(_DWORD *)v313)
            {
              v313 += 4;
              v310 = (_QWORD *)((char *)v310 + 4);
            }
            goto LABEL_459;
          }
        }
        v182 = (char *)(v1257 + 4);
        if ((unint64_t)v164 >= v1237)
          goto LABEL_235;
LABEL_233:
        if (*(_DWORD *)v180 == *(_DWORD *)v182)
        {
          v182 += 4;
          v180 += 4;
        }
LABEL_235:
        if ((unint64_t)v182 >= v1236)
        {
          if ((unint64_t)v182 >= v16)
            goto LABEL_243;
        }
        else
        {
          if (*(unsigned __int16 *)v180 == *(unsigned __int16 *)v182)
          {
            v182 += 2;
            v180 += 2;
          }
          if ((unint64_t)v182 >= v16)
          {
LABEL_243:
            v175 = (_DWORD)v182 - (_DWORD)v1257;
            v176 = v175;
            if (v166 < v175)
              goto LABEL_225;
            goto LABEL_208;
          }
        }
        if (*v180 == *v182)
          LODWORD(v182) = (_DWORD)v182 + 1;
        goto LABEL_243;
      }
      if (v25 != 3)
      {
        v24 = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu)
          v186 = 4095;
        else
          v186 = *(_DWORD *)(v7 + 212);
        v187 = *(_QWORD *)(v7 + 8);
        v188 = ((_DWORD)v1257 - v187);
        v189 = (char *)(v1257 + 12);
        v1044 = *(_DWORD *)(v7 + 204);
        v1053 = *(_QWORD *)(v7 + 48);
        v1035 = (-1640531535 * *(_DWORD *)v1257) >> -(char)*(_DWORD *)(v7 + 200);
        v190 = *(_DWORD *)(v1053 + 4 * v1035);
        v191 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        v990 = ~v191;
        v192 = v188 + v191 + 1;
        if (v188 < ~v191)
          v192 = 0;
        v982 = v192;
        v193 = *(unsigned int *)(v7 + 24);
        v194 = 1 << *(_DWORD *)(v7 + 192);
        if ((int)v188 - *(_DWORD *)(v7 + 28) > v194 && *(_DWORD *)(v7 + 32) == 0)
          v196 = v188 - v194;
        else
          v196 = *(_DWORD *)(v7 + 28);
        v15 = v1257;
        if (v196 <= 1)
          v197 = 1;
        else
          v197 = v196;
        v1243 = v197;
        v198 = *(_QWORD *)(v7 + 184);
        v199 = *(_QWORD *)(v198 + 8);
        v1211 = *(char **)v198;
        v200 = *(_DWORD *)(v198 + 28);
        v201 = v196 - (*(_QWORD *)v198 - (_DWORD)v199);
        v1006 = v198;
        v998 = *(_DWORD *)(v198 + 200);
        v202 = ~(-1 << (*(_DWORD *)(v198 + 196) - 1));
        v203 = *(_QWORD *)v198 - v199 - v200;
        v204 = *(_QWORD *)(v7 + 64);
        v977 = (_DWORD)v1211 - v199;
        v1070 = v202;
        if (v203 <= v202)
          v205 = v200;
        else
          v205 = (_DWORD)v1211 - v199 - v202;
        v1081 = v205;
        v206 = v188 - v193;
        v1092 = v199;
        v207 = v199 - v201;
        v1102 = v200;
        v1062 = v196 - ((_DWORD)v1211 - (_DWORD)v199);
        v208 = v188 - v200 - v201;
        v209 = v21 == 0;
        v1027 = v187;
        v1199 = v204;
        v1207 = (_QWORD *)(v187 + v193);
        v1019 = (unsigned int *)(v204 + 8 * (v188 & ~v191));
        v1267 = 0;
        v1215 = v188 + 9;
        if (v21)
          v210 = 3;
        else
          v210 = 4;
        v211 = v1257 + 4;
        if (v21)
          v212 = 0;
        else
          v212 = -1;
        v213 = (v1258 - 1);
        v1193 = v186;
        v1169 = v196;
        v1158 = v190;
        v1130 = v210;
        v1145 = v193;
        v1117 = v207;
        v1110 = v212;
        while (1)
        {
          if (v209 == 3)
          {
            v214 = *a3 - 1;
            v215 = v188 - v214;
            v216 = *a3 - 2;
            if (v216 >= v206)
              goto LABEL_279;
          }
          else
          {
            v214 = a3[v209];
            v215 = v188 - v214;
            v216 = v214 - 1;
            if (v214 - 1 >= v206)
            {
LABEL_279:
              if (v216 < v208 && v193 + ~v215 >= 3)
              {
                v218 = v207 + v215;
                if (*(_DWORD *)v15 == *(_DWORD *)v218)
                {
                  v219 = v24;
                  v1230 = v213;
                  v220 = v188;
                  v221 = v208;
                  v222 = ZSTD_count_2segments(v211, (char *)(v218 + 4), v16, v1211, v1207);
                  v210 = v1130;
                  LODWORD(v193) = v1145;
                  v208 = v221;
                  v212 = v1110;
                  v207 = v1117;
                  v196 = v1169;
                  v189 = (char *)(v1257 + 12);
                  v190 = v1158;
                  v188 = v220;
                  v213 = v1230;
                  v24 = v219;
                  v15 = v1257;
                  v16 = (unint64_t)v1259;
                  v223 = v222 + 4;
                  v186 = v1193;
                  v224 = v223;
                  if (v1230 < v223)
                    goto LABEL_293;
                }
              }
              goto LABEL_276;
            }
          }
          if (v215 < v196 || *(_DWORD *)v15 != *(_DWORD *)&v15[-v214])
            goto LABEL_276;
          v227 = -(uint64_t)v214;
          v228 = (char *)v211 - v214;
          if (v1260 <= (unint64_t)v211)
            break;
          v229 = *v211 ^ *(_QWORD *)v228;
          if (v229)
          {
            v223 = (__clz(__rbit64(v229)) >> 3) + 4;
            v224 = v223;
            if (v213 < v223)
              goto LABEL_293;
            goto LABEL_276;
          }
          v231 = 0;
          do
          {
            v230 = &v189[v231];
            if ((unint64_t)&v189[v231] >= v1260)
            {
              v228 = &v230[v227];
              if ((unint64_t)v230 >= v1237)
                goto LABEL_303;
              goto LABEL_301;
            }
            v232 = *(_QWORD *)&v189[v227 + v231];
            v231 += 8;
            v233 = *(_QWORD *)v230 ^ v232;
          }
          while (!v233);
          v223 = v231 + (__clz(__rbit64(v233)) >> 3) + 4;
          v224 = v223;
          if (v213 < v223)
          {
LABEL_293:
            v226 = &v1261[2 * v24];
            *v226 = v209 + v212;
            v226[1] = v223;
            v24 = (v24 + 1);
            if (v223 > v186)
              goto LABEL_601;
            v213 = v224;
            if (&v15[v224] == (unsigned __int8 *)v16)
              goto LABEL_601;
          }
LABEL_276:
          if (++v209 >= v210)
          {
            *(_DWORD *)(v1053 + 4 * v1035) = v188;
            v276 = ~(-1 << v1044);
            if (v190 < v1243)
            {
              v277 = v1027;
              v127 = v1019 + 1;
              v126 = v1019;
              goto LABEL_398;
            }
            v325 = 0;
            v326 = 0;
            v1234 = v1257 + 8;
            v277 = v1027;
            v327 = v1027 + 8;
            v127 = v1019 + 1;
            v126 = v1019;
            while (1)
            {
              v328 = v326 >= v325 ? v325 : v326;
              v329 = v190;
              v330 = v1027 + v190;
              v331 = &v1257[v328];
              v332 = (_QWORD *)(v330 + v328);
              if (v1260 <= (unint64_t)&v1257[v328])
                break;
              v333 = *(_QWORD *)v331 ^ *v332;
              if (v333)
              {
                v334 = (__clz(__rbit64(v333)) >> 3) + v328;
                if (v334 <= v213)
                  goto LABEL_517;
LABEL_510:
                v336 = v1215;
                if (v334 > v1215 - v190)
                  v336 = v190 + v334;
                v1215 = v336;
                v337 = &v1261[2 * v24];
                *v337 = v188 + 2 - v190;
                v337[1] = v334;
                LODWORD(v24) = v24 + 1;
                if (v334 <= 0x1000 && &v1257[v334] != (unsigned __int8 *)v16)
                {
                  v213 = v334;
                  goto LABEL_517;
                }
LABEL_573:
                v1241 = v24;
                *v127 = 0;
                *v126 = 0;
                goto LABEL_599;
              }
              v340 = v190;
              v341 = 0;
              v342 = (char *)v1234 + v328;
              do
              {
                v343 = &v342[v341];
                if ((unint64_t)&v342[v341] >= v1260)
                {
                  v335 = (unsigned __int8 *)v1234 + v328 + v341;
                  v332 = (_QWORD *)(v327 + v328 + v329 + v341);
                  v190 = v340;
                  if ((unint64_t)v335 >= v1237)
                    goto LABEL_501;
                  goto LABEL_499;
                }
                v344 = *(_QWORD *)(v327 + v328 + v329 + v341);
                v341 += 8;
                v345 = *(_QWORD *)v343 ^ v344;
              }
              while (!v345);
              v346 = __clz(__rbit64(v345));
              v190 = v340;
              v334 = v341 + (v346 >> 3) + v328;
              if (v334 > v213)
                goto LABEL_510;
LABEL_517:
              v339 = (unsigned int *)(v1199 + 8 * (v190 & v990));
              if (*(unsigned __int8 *)(v330 + v334) >= v1257[v334])
              {
                *v127 = v190;
                if (v190 <= v982)
                {
                  v127 = (unsigned int *)&v1267;
                  goto LABEL_398;
                }
                v325 = v334;
                v127 = (unsigned int *)(v1199 + 8 * (v190 & v990));
                v57 = v276-- != 0;
                if (v57)
                  goto LABEL_490;
LABEL_398:
                *v127 = 0;
                *v126 = 0;
                v1241 = v24;
                if (v276)
                {
                  v15 = v1257;
                  v278 = *(_DWORD *)(*(_QWORD *)(v1006 + 48)
                                   + 4 * ((-1640531535 * *(_DWORD *)v1257) >> -(char)v998));
                  if (v278 > v1102)
                  {
                    v279 = 0;
                    v280 = 0;
                    v1171 = *(_QWORD *)(v1006 + 64);
                    v1181 = v277 + v1062;
                    v1160 = v188 + 2;
                    v1201 = v276 - 1;
                    while (1)
                    {
                      v1232 = v213;
                      if (v280 >= v279)
                        v281 = v279;
                      else
                        v281 = v280;
                      v282 = ZSTD_count_2segments(&v15[v281], (char *)(v1092 + v278 + v281), v16, v1211, v1207) + v281;
                      v213 = v1232;
                      if (v282 + v278 >= v977)
                        v283 = v1181 + v278;
                      else
                        v283 = v1092 + v278;
                      if (v282 <= v1232)
                      {
                        v16 = (unint64_t)v1259;
                        v15 = v1257;
                        if (v278 <= v1081)
                          break;
                      }
                      else
                      {
                        v284 = v1215;
                        if (v282 > v1215 - (v278 + v1062))
                          v284 = v278 + v1062 + v282;
                        v1215 = v284;
                        v285 = &v1261[2 * v1241];
                        *v285 = v1160 - (v278 + v1062);
                        v285[1] = v282;
                        ++v1241;
                        if (v282 > 0x1000)
                          goto LABEL_598;
                        v15 = v1257;
                        v213 = v282;
                        v16 = (unint64_t)v1259;
                        if (&v1257[v282] == v1259 || v278 <= v1081)
                          break;
                      }
                      v286 = *(unsigned __int8 *)(v283 + v282);
                      v287 = v15[v282];
                      v57 = v286 >= v287;
                      v288 = v286 < v287;
                      if (v57)
                        v279 = v282;
                      else
                        v280 = v282;
                      if (v1201)
                      {
                        --v1201;
                        v278 = *(_DWORD *)(v1171 + 8 * (v278 & v1070) + 4 * v288);
                        if (v278 > v1102)
                          continue;
                      }
                      break;
                    }
                  }
LABEL_600:
                  *(_DWORD *)(v1224 + 36) = v1215 - 8;
                  LODWORD(v24) = v1241;
LABEL_601:
                  v7 = v1224;
                  v18 = v12 + 7;
LABEL_602:
                  v19 = v1238;
                  goto LABEL_603;
                }
LABEL_599:
                v15 = v1257;
                goto LABEL_600;
              }
              *v126 = v190;
              if (v190 <= v982)
              {
                v126 = (unsigned int *)&v1267;
                goto LABEL_398;
              }
              ++v339;
              v326 = v334;
              v126 = v339;
              v57 = v276-- != 0;
              if (!v57)
                goto LABEL_398;
LABEL_490:
              v190 = *v339;
              if (*v339 < v1243)
                goto LABEL_398;
            }
            v335 = &v1257[v328];
            if ((unint64_t)v331 >= v1237)
              goto LABEL_501;
LABEL_499:
            if (*(_DWORD *)v332 == *(_DWORD *)v335)
            {
              v335 += 4;
              v332 = (_QWORD *)((char *)v332 + 4);
            }
LABEL_501:
            if ((unint64_t)v335 >= v1236)
            {
              if ((unint64_t)v335 >= v16)
                goto LABEL_509;
            }
            else
            {
              if (*(unsigned __int16 *)v332 == *(unsigned __int16 *)v335)
              {
                v335 += 2;
                v332 = (_QWORD *)((char *)v332 + 2);
              }
              if ((unint64_t)v335 >= v16)
              {
LABEL_509:
                v334 = v335 - v1257;
                if (v335 - v1257 <= v213)
                  goto LABEL_517;
                goto LABEL_510;
              }
            }
            if (*(unsigned __int8 *)v332 == *v335)
              ++v335;
            goto LABEL_509;
          }
        }
        v230 = (char *)(v1257 + 4);
        if ((unint64_t)v211 >= v1237)
          goto LABEL_303;
LABEL_301:
        if (*(_DWORD *)v228 == *(_DWORD *)v230)
        {
          v230 += 4;
          v228 += 4;
        }
LABEL_303:
        if ((unint64_t)v230 >= v1236)
        {
          if ((unint64_t)v230 >= v16)
            goto LABEL_311;
        }
        else
        {
          if (*(unsigned __int16 *)v228 == *(unsigned __int16 *)v230)
          {
            v230 += 2;
            v228 += 2;
          }
          if ((unint64_t)v230 >= v16)
          {
LABEL_311:
            v223 = (_DWORD)v230 - (_DWORD)v1257;
            v224 = v223;
            if (v213 < v223)
              goto LABEL_293;
            goto LABEL_276;
          }
        }
        if (*v228 == *v230)
          LODWORD(v230) = (_DWORD)v230 + 1;
        goto LABEL_311;
      }
      LODWORD(v24) = 0;
      if (*(_DWORD *)(v7 + 212) >= 0xFFFu)
        v28 = 4095;
      else
        v28 = *(_DWORD *)(v7 + 212);
      v29 = *(_QWORD *)(v7 + 8);
      v30 = (char *)&v1257[-v29];
      v31 = (char *)(v1257 + 11);
      v1011 = *(_DWORD *)(v7 + 204);
      v1016 = *(_QWORD *)(v7 + 48);
      v1003 = (-1640531535 * *(_DWORD *)v1257) >> -(char)*(_DWORD *)(v7 + 200);
      v32 = *(_DWORD *)(v1016 + 4 * v1003);
      v33 = -1 << (*(_DWORD *)(v7 + 196) - 1);
      v979 = ~v33;
      v34 = (_DWORD)v1257 - v29 + v33 + 1;
      if ((int)v1257 - (int)v29 < ~v33)
        v34 = 0;
      v1195 = v34;
      v35 = *(unsigned int *)(v7 + 24);
      v36 = *(_DWORD *)(v7 + 28);
      v37 = 1 << *(_DWORD *)(v7 + 192);
      if (v30 - v36 > v37 && *(_DWORD *)(v7 + 32) == 0)
        v39 = v30 - v37;
      else
        v39 = v36;
      v15 = v1257;
      if (v39 <= 1)
        v40 = 1;
      else
        v40 = v39;
      v41 = *(_QWORD *)(v7 + 184);
      v42 = *(_QWORD *)(v41 + 8);
      v1208 = *(char **)v41;
      v43 = *(_DWORD *)(v41 + 28);
      v44 = v39 - (*(_QWORD *)v41 - (_DWORD)v42);
      v995 = v41;
      v987 = *(_DWORD *)(v41 + 200);
      v974 = *(_QWORD *)v41 - v42;
      v1127 = ~(-1 << (*(_DWORD *)(v41 + 196) - 1));
      if (v974 - v43 <= v1127)
        v45 = *(_DWORD *)(v41 + 28);
      else
        v45 = *(_QWORD *)v41 - v42 + (-1 << (*(_DWORD *)(v41 + 196) - 1)) + 1;
      v1142 = v45;
      v46 = (_DWORD)v30 - v35;
      v1154 = *(_QWORD *)(v41 + 8);
      v47 = v42 - v44;
      v1167 = *(_DWORD *)(v41 + 28);
      v1041 = *(_QWORD *)(v7 + 8);
      v1050 = (v39 - ((_DWORD)v1208 - v42));
      v48 = ((_DWORD)v30 - v43 - v44);
      v49 = v21 == 0;
      v1204 = (_QWORD *)(v29 + v35);
      v1190 = *(_QWORD *)(v7 + 64);
      v1032 = (unsigned int *)(v1190 + 8 * (v30 & ~v33));
      v1267 = 0;
      v1214 = (_DWORD)v30 + 9;
      if (v21)
        v50 = 3;
      else
        v50 = 4;
      v51 = v1257 + 3;
      if (v21)
        v52 = 0;
      else
        v52 = -1;
      v53 = (v1258 - 1);
      v1176 = v40;
      v1114 = v28;
      v1099 = v35;
      v1089 = v32;
      v1078 = (_DWORD)v30 - v35;
      v1067 = v50;
      do
      {
        if (v49 == 3)
        {
          v54 = *a3 - 1;
          v55 = (_DWORD)v30 - v54;
          v56 = *a3 - 2;
          if (v56 >= v46)
            goto LABEL_50;
        }
        else
        {
          v54 = a3[v49];
          v55 = (_DWORD)v30 - v54;
          v56 = v54 - 1;
          if (v54 - 1 >= v46)
          {
LABEL_50:
            v57 = v56 < v48 && v35 + ~v55 >= 3;
            if (!v57)
              goto LABEL_47;
            v58 = v47 + v55;
            if (((*(_DWORD *)v58 ^ *(_DWORD *)v15) & 0xFFFFFF) != 0)
              goto LABEL_47;
            v59 = v51;
            v1239 = v24;
            v1226 = v53;
            v60 = v30;
            v61 = v39;
            v62 = v48;
            v63 = v52;
            v64 = ZSTD_count_2segments(v59, (char *)(v58 + 3), v16, v1208, v1204);
            v52 = v63;
            v51 = v1257 + 3;
            v50 = v1067;
            v48 = v62;
            v46 = v1078;
            v39 = v61;
            LODWORD(v35) = v1099;
            v31 = (char *)(v1257 + 11);
            v32 = v1089;
            v40 = v1176;
            v30 = v60;
            v53 = v1226;
            LODWORD(v24) = v1239;
            v15 = v1257;
            v16 = (unint64_t)v1259;
            v65 = v64 + 3;
            v28 = v1114;
            v66 = v65;
            if (v1226 >= v65)
              goto LABEL_47;
            goto LABEL_64;
          }
        }
        if (v55 < v39 || ((*(_DWORD *)&v15[-v54] ^ *(_DWORD *)v15) & 0xFFFFFF) != 0)
          goto LABEL_47;
        v69 = -(uint64_t)v54;
        v70 = (char *)v51 - v54;
        if (v1260 <= (unint64_t)v51)
        {
          v72 = (char *)v51;
          if ((unint64_t)v51 < v1237)
          {
LABEL_72:
            if (*(_DWORD *)v70 == *(_DWORD *)v72)
            {
              v72 += 4;
              v70 += 4;
            }
          }
LABEL_74:
          if ((unint64_t)v72 >= v1236)
          {
            if ((unint64_t)v72 >= v16)
              goto LABEL_82;
          }
          else
          {
            if (*(unsigned __int16 *)v70 == *(unsigned __int16 *)v72)
            {
              v72 += 2;
              v70 += 2;
            }
            if ((unint64_t)v72 >= v16)
            {
LABEL_82:
              v65 = (_DWORD)v72 - (_DWORD)v51 + 3;
              v66 = v65;
              if (v53 >= v65)
                goto LABEL_47;
LABEL_64:
              v68 = &v1261[2 * v24];
              *v68 = v49 + v52;
              v68[1] = v65;
              LODWORD(v24) = v24 + 1;
              if (v65 <= v28)
              {
                v53 = v66;
                if (&v15[v66] != (unsigned __int8 *)v16)
                  goto LABEL_47;
              }
              goto LABEL_601;
            }
          }
          if (*v70 == *v72)
            LODWORD(v72) = (_DWORD)v72 + 1;
          goto LABEL_82;
        }
        v71 = *v51 ^ *(_QWORD *)v70;
        if (v71)
        {
          v65 = (__clz(__rbit64(v71)) >> 3) + 3;
          v66 = v65;
          if (v53 >= v65)
            goto LABEL_47;
          goto LABEL_64;
        }
        v73 = 0;
        do
        {
          v72 = &v31[v73];
          if ((unint64_t)&v31[v73] >= v1260)
          {
            v70 = &v72[v69];
            if ((unint64_t)v72 < v1237)
              goto LABEL_72;
            goto LABEL_74;
          }
          v74 = *(_QWORD *)&v31[v69 + v73];
          v73 += 8;
          v75 = *(_QWORD *)v72 ^ v74;
        }
        while (!v75);
        v65 = v73 + (__clz(__rbit64(v75)) >> 3) + 3;
        v66 = v65;
        if (v53 < v65)
          goto LABEL_64;
LABEL_47:
        ++v49;
      }
      while (v49 < v50);
      if (v53 > 2)
      {
        v18 = v12 + 7;
        v237 = v1041;
        goto LABEL_422;
      }
      v7 = v1224;
      v234 = *(_QWORD *)(v1224 + 56);
      v235 = *(_DWORD *)v15;
      v236 = 32 - *(_DWORD *)(v1224 + 40);
      v237 = v1041;
      if (v940 < v30)
      {
        v238 = v940;
        do
        {
          *(_DWORD *)(v234 + 4 * ((900185344 * *(_DWORD *)(v1041 + v238)) >> v236)) = v238;
          ++v238;
        }
        while (v30 != v238);
      }
      v239 = *(unsigned int *)(v234 + 4 * ((900185344 * v235) >> v236));
      v240 = v239 >= v40 && ((_DWORD)v30 - v239) >> 18 == 0;
      v18 = v12 + 7;
      v19 = v1238;
      if (!v240)
      {
        v940 = v30;
        goto LABEL_422;
      }
      v369 = (_DWORD *)(v1041 + v239);
      v15 = v1257;
      if (v1260 <= (unint64_t)v1257)
      {
        v372 = v1257;
        if ((unint64_t)v1257 < v1237)
        {
LABEL_581:
          if (*v369 == *(_DWORD *)v372)
          {
            v372 += 4;
            ++v369;
          }
        }
      }
      else
      {
        v370 = *(_QWORD *)v1257 ^ *(_QWORD *)v369;
        if (v370)
        {
          v371 = __clz(__rbit64(v370)) >> 3;
          v940 = v30;
          if (v371 < 3)
            goto LABEL_422;
          goto LABEL_592;
        }
        v932 = 0;
        v933 = v1257 + 8;
        while (1)
        {
          v934 = &v933[v932 / 8];
          if ((unint64_t)&v933[v932 / 8] >= v1260)
            break;
          v935 = *(_QWORD *)(v1041 + v239 + 8 + v932);
          v932 += 8;
          v936 = *v934 ^ v935;
          if (v936)
          {
            v371 = v932 + (__clz(__rbit64(v936)) >> 3);
            v15 = v1257;
            v940 = v30;
            if (v371 >= 3)
              goto LABEL_592;
            goto LABEL_422;
          }
        }
        v15 = v1257;
        v372 = &v1257[v932 + 8];
        v369 = (_DWORD *)(v1041 + v239 + v932 + 8);
        if ((unint64_t)v372 < v1237)
          goto LABEL_581;
      }
      if ((unint64_t)v372 >= v1236)
      {
        if ((unint64_t)v372 >= v16)
          goto LABEL_591;
LABEL_589:
        if (*(unsigned __int8 *)v369 == *v372)
          ++v372;
        goto LABEL_591;
      }
      if (*(unsigned __int16 *)v369 == *(unsigned __int16 *)v372)
      {
        v372 += 2;
        v369 = (_DWORD *)((char *)v369 + 2);
      }
      if ((unint64_t)v372 < v16)
        goto LABEL_589;
LABEL_591:
      v371 = v372 - v15;
      v940 = v30;
      if (v371 < 3)
        goto LABEL_422;
LABEL_592:
      *v1261 = (_DWORD)v30 - v239 + 2;
      v1261[1] = v371;
      if (v371 > v28 || &v15[v371] == (unsigned __int8 *)v16)
      {
        LODWORD(v24) = 1;
        v940 = v30;
        *(_DWORD *)(v1224 + 36) = (_DWORD)v30 + 1;
        goto LABEL_603;
      }
      LODWORD(v24) = 1;
      v940 = v30;
      v53 = v371;
LABEL_422:
      *(_DWORD *)(v1016 + 4 * v1003) = (_DWORD)v30;
      v289 = ~(-1 << v1011);
      if (v32 < v40)
      {
        v291 = v1032 + 1;
        v290 = v1032;
        goto LABEL_424;
      }
      v347 = 0;
      v348 = 0;
      v1247 = v1257 + 8;
      v349 = v237 + 8;
      v291 = v1032 + 1;
      v290 = v1032;
      while (2)
      {
        if (v348 >= v347)
          v350 = v347;
        else
          v350 = v348;
        v351 = v32;
        v352 = v237 + v32;
        v353 = &v1257[v350];
        v354 = (_DWORD *)(v352 + v350);
        if (v1260 <= (unint64_t)&v1257[v350])
        {
          v357 = &v1257[v350];
          if ((unint64_t)v353 < v1237)
          {
LABEL_541:
            if (*v354 == *(_DWORD *)v357)
            {
              v357 += 4;
              ++v354;
            }
          }
        }
        else
        {
          v355 = *(_QWORD *)v353 ^ *(_QWORD *)v354;
          if (v355)
          {
            v356 = (__clz(__rbit64(v355)) >> 3) + v350;
            if (v356 <= v53)
              goto LABEL_559;
            goto LABEL_552;
          }
          v362 = v32;
          v363 = 0;
          v364 = (char *)v1247 + v350;
          while (1)
          {
            v365 = &v364[v363];
            if ((unint64_t)&v364[v363] >= v1260)
              break;
            v366 = *(_QWORD *)(v349 + v350 + v351 + v363);
            v363 += 8;
            v367 = *(_QWORD *)v365 ^ v366;
            if (v367)
            {
              v368 = __clz(__rbit64(v367));
              v40 = v1176;
              v32 = v362;
              v356 = v363 + (v368 >> 3) + v350;
              if (v356 > v53)
                goto LABEL_552;
              goto LABEL_559;
            }
          }
          v357 = (unsigned __int8 *)v1247 + v350 + v363;
          v354 = (_DWORD *)(v349 + v350 + v351 + v363);
          v40 = v1176;
          v32 = v362;
          if ((unint64_t)v357 < v1237)
            goto LABEL_541;
        }
        if ((unint64_t)v357 >= v1236)
        {
          if ((unint64_t)v357 >= v16)
            goto LABEL_551;
LABEL_549:
          if (*(unsigned __int8 *)v354 == *v357)
            ++v357;
          goto LABEL_551;
        }
        if (*(unsigned __int16 *)v354 == *(unsigned __int16 *)v357)
        {
          v357 += 2;
          v354 = (_DWORD *)((char *)v354 + 2);
        }
        if ((unint64_t)v357 < v16)
          goto LABEL_549;
LABEL_551:
        v356 = v357 - v1257;
        if (v357 - v1257 <= v53)
          goto LABEL_559;
LABEL_552:
        v358 = v1214;
        if (v356 > v1214 - v32)
          v358 = v32 + v356;
        v1214 = v358;
        v359 = &v1261[2 * v24];
        *v359 = (_DWORD)v30 + 2 - v32;
        v359[1] = v356;
        LODWORD(v24) = v24 + 1;
        if (v356 > 0x1000 || &v1257[v356] == (unsigned __int8 *)v16)
        {
          v1245 = v24;
          *v291 = 0;
          *v290 = 0;
          goto LABEL_1419;
        }
        v53 = v356;
LABEL_559:
        v361 = (unsigned int *)(v1190 + 8 * (v32 & v979));
        if (*(unsigned __int8 *)(v352 + v356) < v1257[v356])
        {
          *v290 = v32;
          if (v32 <= v1195)
          {
            v290 = (unsigned int *)&v1267;
            goto LABEL_424;
          }
          ++v361;
          v348 = v356;
          v290 = v361;
          v57 = v289-- != 0;
          if (!v57)
            goto LABEL_424;
          goto LABEL_532;
        }
        *v291 = v32;
        if (v32 > v1195)
        {
          v347 = v356;
          v291 = (unsigned int *)(v1190 + 8 * (v32 & v979));
          v57 = v289-- != 0;
          if (!v57)
            goto LABEL_424;
LABEL_532:
          v32 = *v361;
          if (*v361 < v40)
            goto LABEL_424;
          continue;
        }
        break;
      }
      v291 = (unsigned int *)&v1267;
LABEL_424:
      *v291 = 0;
      *v290 = 0;
      v1245 = v24;
      if (!v289)
        goto LABEL_1419;
      v15 = v1257;
      v292 = *(_DWORD *)(*(_QWORD *)(v995 + 48) + 4 * ((-1640531535 * *(_DWORD *)v1257) >> -(char)v987));
      if (v292 <= v1167)
        goto LABEL_1420;
      v293 = 0;
      v294 = 0;
      v1118 = *(_QWORD *)(v995 + 64);
      v1182 = v237 + v1050;
      v1111 = (_DWORD)v30 + 2;
      v1202 = v289 - 1;
      while (2)
      {
        v1233 = v53;
        if (v294 >= v293)
          v295 = v293;
        else
          v295 = v294;
        v296 = ZSTD_count_2segments(&v15[v295], (char *)(v1154 + v292 + v295), v16, v1208, v1204) + v295;
        v53 = v1233;
        if (v296 + v292 >= v974)
          v297 = v1182 + v292;
        else
          v297 = v1154 + v292;
        if (v296 <= v1233)
        {
          v16 = (unint64_t)v1259;
          v18 = v12 + 7;
          v15 = v1257;
          if (v292 <= v1142)
            goto LABEL_1420;
          goto LABEL_441;
        }
        v298 = v1214;
        if (v296 > v1214 - (v292 + v1050))
          v298 = v292 + v1050 + v296;
        v1214 = v298;
        v299 = &v1261[2 * v1245];
        *v299 = v1111 - (v292 + v1050);
        v299[1] = v296;
        ++v1245;
        if (v296 <= 0x1000)
        {
          v15 = v1257;
          v53 = v296;
          v16 = (unint64_t)v1259;
          v18 = v12 + 7;
          if (&v1257[v296] == v1259 || v292 <= v1142)
            goto LABEL_1420;
LABEL_441:
          v300 = *(unsigned __int8 *)(v297 + v296);
          v301 = v15[v296];
          v57 = v300 >= v301;
          v302 = v300 < v301;
          if (v57)
            v293 = v296;
          else
            v294 = v296;
          if (!v1202)
            goto LABEL_1420;
          --v1202;
          v292 = *(_DWORD *)(v1118 + 8 * (v292 & v1127) + 4 * v302);
          if (v292 <= v1167)
            goto LABEL_1420;
          continue;
        }
        break;
      }
      LODWORD(v16) = (_DWORD)v1259;
      v18 = v12 + 7;
LABEL_1419:
      v15 = v1257;
LABEL_1420:
      v7 = v1224;
      v19 = v1238;
      LODWORD(v24) = v1245;
      *(_DWORD *)(v1224 + 36) = v1214 - 8;
LABEL_603:
      v1263 = v24;
      v374 = v15;
      ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1264, (uint64_t)v1261, &v1263, (_DWORD)v15 - (_DWORD)v1213, v16 - (_DWORD)v15);
      LODWORD(v375) = v1263;
      if (v1263)
      {
        v12[4] = *a3;
        v12[5] = a3[1];
        v12[6] = a3[2];
        v12[2] = 0;
        v12[3] = v21;
        v376 = *(_DWORD *)(v7 + 160);
        if (v376 != 1)
        {
          v16 = (unint64_t)v1259;
          if (v21 < 0x40)
            v381 = ZSTD_LLcode_LL_Code[v21];
          else
            v381 = 50 - __clz(v21);
          v380 = (unint64_t)(v1259 - 32);
          v383 = *(_DWORD **)(v7 + 88);
          v384 = *(_DWORD *)(v7 + 148) + 1;
          v377 = v384 + (LL_bits[v381] << 8) + ((__clz(v383[v381] + 1) << 8) ^ 0xFFFFE0FF);
          *v12 = v377;
          v378 = (v375 - 1);
          v379 = v1261[2 * v378 + 1];
          if (v379 <= v1189)
          {
            v382 = v384 + ((__clz(*v383 + 1) << 8) ^ 0xFFFFE0FF);
            goto LABEL_616;
          }
LABEL_614:
          v385 = 0;
          v386 = v1261[2 * v378];
          goto LABEL_1325;
        }
        v377 = (__clz(v21 + 1) << 8) ^ 0x1F00;
        *v12 = v377;
        v378 = (v375 - 1);
        v379 = v1261[2 * v378 + 1];
        v16 = (unint64_t)v1259;
        if (v379 > v1189)
        {
          v380 = (unint64_t)(v1259 - 32);
          goto LABEL_614;
        }
        v382 = 0;
LABEL_616:
        v387 = v12 + 14;
        v388 = (v1258 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v387 - 7) = 0x40000000;
          *v387 = 0x40000000;
          v387 += 14;
          v388 -= 2;
        }
        while (v388);
        if (v1258 - 1 != ((v1258 - 1) & 0xFFFFFFFFFFFFFFFELL))
        {
          v389 = v938;
          v390 = v939;
          do
          {
            *v390 = 0x40000000;
            v390 += 7;
            --v389;
          }
          while (v389);
        }
        v391 = 0;
        v392 = v382 + v377;
        if (v375 <= 1)
          v375 = 1;
        else
          v375 = v375;
        v393 = v1258;
        while (2)
        {
          v394 = &v1261[2 * v391];
          v395 = v394[1];
          if (v393 <= v395)
          {
            v396 = *v394;
            v397 = __clz(v396 + 1) ^ 0x1F;
            if (v376 == 1)
            {
              v398 = ((_DWORD)v397 << 8) + 4096;
              if (v393 + 1 <= v395 + 1)
                v399 = v395 + 1;
              else
                v399 = v393 + 1;
              v400 = v399 - v393;
              v401 = v399 - 1;
              if (v400 < 2 || v401 < v393)
              {
                v403 = v393;
                goto LABEL_647;
              }
              v403 = v393 + (v400 & 0xFFFFFFFE);
              v413 = v400 & 0xFFFFFFFE;
              do
              {
                v414 = &v12[7 * v393];
                v414[2] = v393;
                v414[3] = v21;
                v415 = &v12[7 * v393 + 7];
                v415[2] = v393 + 1;
                v415[3] = v21;
                *v414 = v392 + v398 + ((__clz(v393 - 2) << 8) ^ 0x1F00);
                v414[1] = v396;
                *v415 = v392 + v398 + ((__clz(v393 - 1) << 8) ^ 0x1F00);
                v415[1] = v396;
                v393 += 2;
                v413 -= 2;
              }
              while (v413);
              v393 = v403;
              if (v400 != (v400 & 0xFFFFFFFE))
              {
LABEL_647:
                v393 = v403;
                do
                {
                  v416 = &v12[7 * v393];
                  v416[2] = v393;
                  v416[3] = v21;
                  *v416 = v392 + v398 + ((__clz(v393 - 2) << 8) ^ 0x1F00);
                  v416[1] = v396;
                  ++v393;
                }
                while (v393 <= v395);
              }
            }
            else
            {
              if (v397 <= 0x13)
                v404 = 53;
              else
                v404 = ((_DWORD)v397 << 9) - 9675;
              v405 = *(_DWORD *)(v7 + 152);
              v406 = *(_QWORD *)(v7 + 96);
              v407 = *(_QWORD *)(v7 + 104);
              v408 = v404 + *(_DWORD *)(v7 + 156);
              do
              {
                v412 = v393 - 3;
                if (v393 - 3 < 0x80)
                  v409 = ZSTD_MLcode_ML_Code[v412];
                else
                  v409 = 67 - __clz(v412);
                v410 = v392
                     + v408
                     + ((__clz(*(_DWORD *)(v407 + 4 * v397) + 1) << 8) ^ 0xFFFFE0FF)
                     + v405
                     + ((ML_bits[v409] + (_DWORD)v397) << 8)
                     + ((__clz(*(_DWORD *)(v406 + 4 * v409) + 1) << 8) ^ 0xFFFFE0FF);
                v411 = &v12[7 * v393];
                v411[2] = v393;
                v411[3] = v21;
                *v411 = v410;
                v411[1] = v396;
                ++v393;
              }
              while (v393 <= v395);
            }
          }
          if (++v391 != v375)
            continue;
          break;
        }
        LODWORD(v417) = v393 - 1;
        v418 = v1257;
        if (v393 == 1)
          goto LABEL_1321;
        v978 = v1257 + 8;
        v419 = (_DWORD)v1257 + 1;
        v420 = 1;
        v421 = v1223;
        while (2)
        {
          v422 = v420 - 1;
          v423 = &v12[7 * v420 - 7];
          if (v423[2])
            v424 = 1u;
          else
            v424 = v12[7 * v422 + 3] + 1;
          v425 = v420;
          v426 = &v418[v420];
          v427 = *v423;
          v428 = *(_DWORD *)(v7 + 160);
          if (*(_DWORD *)(v7 + 176) == 2)
          {
            v429 = v427 + 2048;
            if (v428 != 1)
            {
              if (v424 >= 0x40)
                goto LABEL_660;
LABEL_666:
              v430 = ZSTD_LLcode_LL_Code[v424];
              v431 = v424 - 1;
              if (v424 - 1 >= 0x40)
                goto LABEL_667;
LABEL_661:
              v432 = ZSTD_LLcode_LL_Code[v431];
              goto LABEL_668;
            }
LABEL_664:
            v433 = (__clz(v424 + 1) << 8) ^ 0x1F00;
            v434 = ((__clz(v424) << 8) ^ 0xFFFFE0FF) + 1;
          }
          else
          {
            if (v428 == 1)
            {
              v429 = v427 + 1536;
              goto LABEL_664;
            }
            v429 = *(_DWORD *)(v7 + 144)
                 + v427
                 + ((__clz(*(_DWORD *)(*(_QWORD *)(v7 + 80) + 4 * *(v426 - 1)) + 1) << 8) ^ 0xFFFFE0FF)
                 + 1;
            if (v424 < 0x40)
              goto LABEL_666;
LABEL_660:
            v430 = 50 - __clz(v424);
            v431 = v424 - 1;
            if (v424 - 1 < 0x40)
              goto LABEL_661;
LABEL_667:
            v432 = 50 - __clz(v431);
LABEL_668:
            v435 = *(_DWORD *)(v7 + 148);
            v436 = *(_QWORD *)(v7 + 88);
            v433 = v435 + (LL_bits[v430] << 8) + ((__clz(*(_DWORD *)(v436 + 4 * v430) + 1) << 8) ^ 0xFFFFE0FF) + 1;
            v434 = ~v435 - (LL_bits[v432] << 8) + ((__clz(*(_DWORD *)(v436 + 4 * v432) + 1) << 8) ^ 0x1F01);
            v418 = v1257;
          }
          v437 = v429 + v433 + v434;
          v438 = (signed int *)&v12[7 * v425];
          v441 = *v438;
          v439 = v438 + 2;
          v440 = v441;
          if (v437 <= v441)
          {
            v448 = (signed int *)&v12[7 * v425];
            v448[1] = 0;
            v448[2] = 0;
            v448[3] = v424;
            *v448 = v437;
            v440 = v437;
LABEL_674:
            v449 = 0;
            v450 = &v12[7 * v425];
            v451 = &v12[7 * v422];
            *((_QWORD *)v450 + 2) = *((_QWORD *)v451 + 2);
            v450[6] = v451[6];
            v452 = 1;
            if ((unint64_t)v426 <= v421)
              goto LABEL_687;
LABEL_652:
            v420 = v425 + 1;
LABEL_653:
            ++v419;
            v19 = v1238;
            if (v420 > v417)
              goto LABEL_1321;
            continue;
          }
          break;
        }
        if (!*v439)
          goto LABEL_674;
        v442 = &v12[7 * (v425 - *v439) + 4];
        v443 = v12[7 * v425 + 1];
        if (v443 < 3)
        {
          if (!v12[7 * v425 + 3])
            ++v443;
          if (v443)
          {
            if (v443 == 3)
            {
              v445 = *v442;
              v447 = v445 - 1;
            }
            else
            {
              v447 = v442[v443];
              v445 = *v442;
            }
            v884 = v443 > 1;
            v454 = 2;
            if (v884)
              v454 = 1;
            v444 = &v442[v454];
          }
          else
          {
            v453 = *(_QWORD *)v442;
            v444 = &v12[7 * (v425 - *v439) + 6];
            v447 = v453;
            v445 = HIDWORD(v453);
          }
        }
        else
        {
          v446 = *v442;
          v444 = &v12[7 * (v425 - *v439) + 5];
          v445 = v446;
          v447 = v443 - 2;
        }
        v452 = 0;
        v455 = *v444;
        v456 = v447 | (v445 << 32);
        v457 = &v12[7 * v425];
        *((_QWORD *)v457 + 2) = v456;
        v457[6] = v455;
        v449 = 1;
        if ((unint64_t)v426 > v421)
          goto LABEL_652;
LABEL_687:
        if ((_DWORD)v425 == (_DWORD)v417)
        {
          v19 = v1238;
LABEL_1321:
          v867 = &v12[7 * v417];
          v386 = v867[1];
          v1113 = *v867;
          v379 = v867[2];
          v21 = v867[3];
          v1268 = *((_QWORD *)v867 + 2);
          v1269 = v867[6];
          if (v417 >= v21 + v379)
            v385 = v417 - (v21 + v379);
          else
            v385 = 0;
          v380 = (unint64_t)(v1259 - 32);
          if (!v379)
            goto LABEL_1405;
          goto LABEL_1325;
        }
        v420 = v425 + 1;
        if ((int)v12[7 * (v425 + 1)] <= v440 + 128)
          goto LABEL_653;
        v1212 = v419;
        if (v452)
        {
          v21 = v12[7 * v425 + 3];
          if (*(_DWORD *)(v7 + 160) != 1)
            goto LABEL_691;
LABEL_693:
          v1194 = 0;
        }
        else
        {
          v21 = 0;
          if (*(_DWORD *)(v7 + 160) == 1)
            goto LABEL_693;
LABEL_691:
          v1194 = *(_DWORD *)(v7 + 148) + ((__clz(**(_DWORD **)(v7 + 88) + 1) << 8) ^ 0xFFFFE0FF) + 1;
        }
        v1203 = v440;
        v1112 = v439;
        v1263 = 0;
        v458 = *(_QWORD *)(v7 + 8);
        v459 = *(unsigned int *)(v7 + 36);
        if (v458 + v459 > (unint64_t)v426)
        {
          LODWORD(v460) = 0;
          goto LABEL_1274;
        }
        v1131 = v449;
        v461 = *(_DWORD *)(v7 + 208);
        v1235 = v426;
        for (j = (_DWORD)v426 - v458; v459 < j; LODWORD(v459) = v463 + v459)
        {
          v463 = ZSTD_insertBt1(v7, (_QWORD *)(v458 + v459), v16, v461, 0);
          v16 = (unint64_t)v1259;
        }
        v1248 = &v12[7 * v425 + 4];
        *(_DWORD *)(v7 + 36) = j;
        if ((v461 - 6) < 2)
        {
          v460 = 0;
          if (*(_DWORD *)(v7 + 212) >= 0xFFFu)
            v507 = 4095;
          else
            v507 = *(_DWORD *)(v7 + 212);
          v508 = *(_QWORD *)(v7 + 8);
          v426 = v1235;
          v509 = (_DWORD)v1235 - v508;
          v510 = v1235 + 4;
          v957 = *(_DWORD *)(v7 + 204);
          v961 = *(_QWORD *)(v7 + 48);
          v953 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v1235) >> -(char)*(_DWORD *)(v7 + 200);
          v511 = *(_DWORD *)(v961 + 4 * v953);
          v512 = -1 << (*(_DWORD *)(v7 + 196) - 1);
          v513 = *(unsigned int *)(v7 + 24);
          v971 = v508;
          v1184 = (_QWORD *)(v508 + v513);
          v984 = ~v512;
          v514 = (_DWORD)v1235 - v508 + v512 + 1;
          if (v509 < ~v512)
            v514 = 0;
          v1120 = v514;
          v515 = 1 << *(_DWORD *)(v7 + 192);
          if (v509 - *(_DWORD *)(v7 + 28) > v515 && *(_DWORD *)(v7 + 32) == 0)
            v517 = v509 - v515;
          else
            v517 = *(_DWORD *)(v7 + 28);
          if (v517 <= 1)
            v518 = 1;
          else
            v518 = v517;
          v1162 = v518;
          v992 = *(_QWORD *)(v7 + 64);
          v967 = (unsigned int *)(v992 + 8 * (v509 & ~v512));
          v1147 = v509 + 9;
          v519 = *(_QWORD *)(v7 + 184);
          v520 = *(_QWORD *)(v519 + 8);
          v1173 = *(char **)v519;
          v521 = v517 - (*(_QWORD *)v519 - (_DWORD)v520);
          v946 = *(_DWORD *)(v519 + 200);
          v950 = v519;
          v522 = *(_DWORD *)(v519 + 28);
          v523 = ~(-1 << (*(_DWORD *)(v519 + 196) - 1));
          v524 = *(_QWORD *)v519 - v520 - v522;
          v942 = *(_QWORD *)v519 - v520;
          v525 = *(_QWORD *)v519 - v520 + (-1 << (*(_DWORD *)(v519 + 196) - 1)) + 1;
          v1008 = v523;
          if (v524 <= v523)
            v526 = v522;
          else
            v526 = v525;
          v1013 = v526;
          v1267 = 0;
          v527 = (v1258 - 1);
          v1029 = v522;
          v528 = v509 - v522 - v521;
          v529 = v1131;
          v530 = v1131 << 63 >> 63;
          if ((_DWORD)v1131)
            v531 = 4;
          else
            v531 = 3;
          v532 = v509 - v513;
          v1021 = v520;
          v1000 = v517 - ((_DWORD)v1173 - (_DWORD)v520);
          v533 = v520 - v521;
          v534 = &v12[7 * v425 + 4];
          v1104 = v509;
          v1094 = v511;
          v1083 = v513;
          v1072 = v517;
          v1064 = v507;
          v1046 = v520 - v521;
          v1055 = v1131 << 63 >> 63;
          v1037 = v509 - v513;
          while (2)
          {
            if (v529 == 3)
            {
              v535 = *v534 - 1;
              v536 = v509 - v535;
              v537 = *v534 - 2;
              if (v537 >= v532)
                goto LABEL_788;
LABEL_797:
              if (v536 < v517 || *(_DWORD *)v426 != *(_DWORD *)&v426[-v535])
                goto LABEL_785;
              v545 = (_QWORD *)((char *)v510 - v535);
              if (v1260 > (unint64_t)v510)
              {
                v546 = v510;
                v547 = *v510 ^ *v545;
                if (v547)
                {
                  v542 = (__clz(__rbit64(v547)) >> 3) + 4;
                  v543 = v542;
                  if (v527 >= v542)
                    goto LABEL_785;
                  goto LABEL_818;
                }
                do
                {
                  ++v545;
                  if ((unint64_t)++v546 >= v1260)
                    goto LABEL_810;
                  v548 = *v546 ^ *v545;
                }
                while (!v548);
                v546 = (_QWORD *)((char *)v546 + (__clz(__rbit64(v548)) >> 3));
LABEL_817:
                v542 = (_DWORD)v546 - (_DWORD)v510 + 4;
                v543 = v542;
                if (v527 >= v542)
                  goto LABEL_785;
                goto LABEL_818;
              }
              v546 = v510;
LABEL_810:
              if ((unint64_t)v546 >= v1237)
              {
                if ((unint64_t)v546 < v1236)
                  goto LABEL_822;
LABEL_814:
                if ((unint64_t)v546 >= v16)
                  goto LABEL_817;
              }
              else
              {
                if (*(_DWORD *)v545 == *(_DWORD *)v546)
                {
                  v546 = (_QWORD *)((char *)v546 + 4);
                  v545 = (_QWORD *)((char *)v545 + 4);
                }
                if ((unint64_t)v546 >= v1236)
                  goto LABEL_814;
LABEL_822:
                if (*(unsigned __int16 *)v545 == *(unsigned __int16 *)v546)
                {
                  v546 = (_QWORD *)((char *)v546 + 2);
                  v545 = (_QWORD *)((char *)v545 + 2);
                }
                if ((unint64_t)v546 >= v16)
                  goto LABEL_817;
              }
              if (*(unsigned __int8 *)v545 == *(unsigned __int8 *)v546)
                LODWORD(v546) = (_DWORD)v546 + 1;
              goto LABEL_817;
            }
            v535 = v534[v529];
            v536 = v509 - v535;
            v537 = v535 - 1;
            if (v535 - 1 < v532)
              goto LABEL_797;
LABEL_788:
            if (v537 < v528 && v513 + ~v536 >= 3)
            {
              v539 = v533 + v536;
              if (*(_DWORD *)v426 == *(_DWORD *)v539)
              {
                v1133 = v527;
                v540 = v460;
                v541 = ZSTD_count_2segments(v1235 + 4, (char *)(v539 + 4), v16, v1173, v1184);
                v533 = v1046;
                LODWORD(v530) = v1055;
                v517 = v1072;
                LODWORD(v513) = v1083;
                v507 = v1064;
                v511 = v1094;
                v527 = v1133;
                v509 = v1104;
                v460 = v540;
                v532 = v1037;
                v534 = &v12[7 * v425 + 4];
                v426 = v1235;
                v16 = (unint64_t)v1259;
                v542 = v541 + 4;
                v510 = v1235 + 4;
                v543 = v542;
                if (v1133 < v542)
                {
LABEL_818:
                  v549 = &v1261[2 * v460];
                  *v549 = v529 + v530;
                  v549[1] = v542;
                  v460 = (v460 + 1);
                  if (v542 > v507)
                    goto LABEL_1273;
                  v527 = v543;
                  if (&v426[v543] == (unsigned __int8 *)v16)
                    goto LABEL_1273;
                }
              }
            }
LABEL_785:
            if (++v529 < v531)
              continue;
            break;
          }
          *(_DWORD *)(v961 + 4 * v953) = v509;
          v550 = ~(-1 << v957);
          if (v511 < v1162)
          {
            v551 = v1147;
            v553 = v967;
            v552 = v971;
            v554 = v967 + 1;
            goto LABEL_828;
          }
          v664 = 0;
          v665 = 0;
          v666 = v509 + 2;
          v1250 = (char *)v978 + v425;
          v553 = v967;
          v552 = v971;
          v1220 = v971 + 8;
          v551 = v1147;
          v554 = v967 + 1;
          v667 = v992;
          v668 = v984;
          while (2)
          {
            if (v665 >= v664)
              v669 = v664;
            else
              v669 = v665;
            v670 = v971 + v511;
            v671 = &v426[v669];
            v672 = (_QWORD *)(v670 + v669);
            if (v1260 <= (unint64_t)&v426[v669])
            {
              v675 = (char *)&v426[v669];
              v676 = v511;
              if ((unint64_t)v671 >= v1237)
                goto LABEL_996;
            }
            else
            {
              v673 = *(_QWORD *)v671 ^ *v672;
              if (v673)
              {
                v674 = (__clz(__rbit64(v673)) >> 3) + v669;
                if (v674 <= v527)
                  goto LABEL_1012;
LABEL_1005:
                if (v674 > v551 - v511)
                  v551 = v511 + v674;
                v677 = &v1261[2 * v460];
                *v677 = v666 - v511;
                v677[1] = v674;
                LODWORD(v460) = v460 + 1;
                if (v674 > 0x1000 || &v426[v674] == (unsigned __int8 *)v16)
                {
                  v1148 = v551;
                  v1217 = v460;
                  *v554 = 0;
                  *v553 = 0;
LABEL_1263:
                  v727 = v1148;
                  goto LABEL_1264;
                }
                v527 = v674;
LABEL_1012:
                v679 = (unsigned int *)(v667 + 8 * (v511 & v668));
                if (*(unsigned __int8 *)(v670 + v674) >= v426[v674])
                {
                  *v554 = v511;
                  if (v511 <= v1120)
                  {
                    v554 = (unsigned int *)&v1267;
LABEL_828:
                    v1148 = v551;
                    *v554 = 0;
                    *v553 = 0;
                    v1217 = v460;
                    if (!v550)
                      goto LABEL_1263;
                    v555 = *(_DWORD *)(*(_QWORD *)(v950 + 48)
                                     + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v426) >> -(char)v946));
                    if (v555 <= v1029)
                      goto LABEL_1263;
                    v556 = 0;
                    v557 = 0;
                    v1073 = *(_QWORD *)(v950 + 64);
                    v1084 = v552 + v1000;
                    v1105 = v1104 + 2;
                    v1121 = v550 - 1;
                    while (1)
                    {
                      v1249 = v555;
                      v1163 = v556;
                      v1134 = v557;
                      if (v557 >= v556)
                        v558 = v556;
                      else
                        v558 = v557;
                      v559 = v555;
                      v560 = v1021 + v555;
                      v561 = v527;
                      v562 = ZSTD_count_2segments(&v426[v558], (char *)(v560 + v558), v16, v1173, v1184);
                      v563 = v562 + v558;
                      if (v562 + v558 + v559 >= v942)
                        v564 = v1084 + v559;
                      else
                        v564 = v560;
                      if (v563 <= v561)
                      {
                        v527 = v561;
                        v16 = (unint64_t)v1259;
                        v426 = v1235;
                        v556 = v1163;
                        v557 = v1134;
                        v567 = v1249;
                        if (v1249 <= v1013)
                          goto LABEL_1263;
                      }
                      else
                      {
                        v565 = v1148;
                        if (v563 > v1148 - (v1249 + (_DWORD)v1000))
                          v565 = v1249 + v1000 + v563;
                        v1148 = v565;
                        v566 = &v1261[2 * v1217];
                        *v566 = v1105 - (v1249 + v1000);
                        v566[1] = v563;
                        ++v1217;
                        if (v563 > 0x1000)
                        {
                          LODWORD(v16) = (_DWORD)v1259;
                          LODWORD(v426) = (_DWORD)v1235;
                          goto LABEL_1263;
                        }
                        v567 = v1249;
                        v426 = v1235;
                        v527 = v562 + v558;
                        v16 = (unint64_t)v1259;
                        v556 = v1163;
                        v557 = v1134;
                        if (&v1235[v563] == v1259 || v1249 <= v1013)
                          goto LABEL_1263;
                      }
                      v568 = *(unsigned __int8 *)(v564 + v563);
                      v569 = v426[v563];
                      v57 = v568 >= v569;
                      v570 = v568 < v569;
                      if (v57)
                        v556 = v562 + v558;
                      else
                        v557 = v562 + v558;
                      if (v1121)
                      {
                        --v1121;
                        v555 = *(_DWORD *)(v1073 + 8 * (v567 & v1008) + 4 * v570);
                        if (v555 > v1029)
                          continue;
                      }
                      goto LABEL_1263;
                    }
                  }
                  v664 = v674;
                  v554 = (unsigned int *)(v667 + 8 * (v511 & v668));
                  v57 = v550-- != 0;
                  if (!v57)
                    goto LABEL_828;
                }
                else
                {
                  *v553 = v511;
                  if (v511 <= v1120)
                  {
                    v553 = (unsigned int *)&v1267;
                    goto LABEL_828;
                  }
                  ++v679;
                  v665 = v674;
                  v553 = v679;
                  v57 = v550-- != 0;
                  if (!v57)
                    goto LABEL_828;
                }
                v511 = *v679;
                if (*v679 < v1162)
                  goto LABEL_828;
                continue;
              }
              v676 = v511;
              v680 = v554;
              v681 = v527;
              v682 = 0;
              v683 = &v1250[v669];
              while (1)
              {
                v684 = &v683[v682];
                if ((unint64_t)&v683[v682] >= v1260)
                  break;
                v685 = *(_QWORD *)(v1220 + v669 + v511 + v682);
                v682 += 8;
                v686 = *(_QWORD *)v684 ^ v685;
                if (v686)
                {
                  v687 = __clz(__rbit64(v686));
                  v527 = v681;
                  v554 = v680;
                  v667 = v992;
                  v668 = v984;
                  v674 = v682 + (v687 >> 3) + v669;
                  if (v674 <= v527)
                    goto LABEL_1012;
                  goto LABEL_1005;
                }
              }
              v675 = &v1250[v669 + v682];
              v672 = (_QWORD *)(v1220 + v669 + v511 + v682);
              v527 = v681;
              v554 = v680;
              v667 = v992;
              v668 = v984;
              if ((unint64_t)v675 >= v1237)
              {
LABEL_996:
                if ((unint64_t)v675 >= v1236)
                {
                  if ((unint64_t)v675 >= v16)
                    goto LABEL_1004;
                }
                else
                {
                  if (*(unsigned __int16 *)v672 == *(unsigned __int16 *)v675)
                  {
                    v675 += 2;
                    v672 = (_QWORD *)((char *)v672 + 2);
                  }
                  if ((unint64_t)v675 >= v16)
                  {
LABEL_1004:
                    v511 = v676;
                    v674 = v675 - (char *)v426;
                    if (v675 - (char *)v426 <= v527)
                      goto LABEL_1012;
                    goto LABEL_1005;
                  }
                }
                if (*(unsigned __int8 *)v672 == *v675)
                  ++v675;
                goto LABEL_1004;
              }
            }
            break;
          }
          if (*(_DWORD *)v672 == *(_DWORD *)v675)
          {
            v675 += 4;
            v672 = (_QWORD *)((char *)v672 + 4);
          }
          goto LABEL_996;
        }
        v426 = v1235;
        if (v461 == 5)
        {
          LODWORD(v460) = 0;
          v571 = *(_DWORD *)(v7 + 212);
          if (v571 >= 0xFFF)
            v572 = 4095;
          else
            v572 = v571;
          v573 = *(_QWORD *)(v7 + 8);
          v574 = (_DWORD)v1235 - v573;
          v575 = v1235 + 4;
          v958 = *(_DWORD *)(v7 + 204);
          v962 = *(_QWORD *)(v7 + 48);
          v954 = (0xCF1BBCDCBB000000 * *(_QWORD *)v1235) >> -(char)*(_DWORD *)(v7 + 200);
          v576 = *(_DWORD *)(v962 + 4 * v954);
          v577 = -1 << (*(_DWORD *)(v7 + 196) - 1);
          v578 = *(unsigned int *)(v7 + 24);
          v972 = v573;
          v1174 = (_QWORD *)(v573 + v578);
          v985 = ~v577;
          v579 = (_DWORD)v1235 - v573 + v577 + 1;
          if (v574 < ~v577)
            v579 = 0;
          v1122 = v579;
          v580 = 1 << *(_DWORD *)(v7 + 192);
          if (v574 - *(_DWORD *)(v7 + 28) > v580 && *(_DWORD *)(v7 + 32) == 0)
            v582 = v574 - v580;
          else
            v582 = *(_DWORD *)(v7 + 28);
          if (v582 <= 1)
            v583 = 1;
          else
            v583 = v582;
          v1149 = v583;
          v993 = *(_QWORD *)(v7 + 64);
          v968 = (unsigned int *)(v993 + 8 * (v574 & ~v577));
          v1185 = v574 + 9;
          v584 = *(_QWORD *)(v7 + 184);
          v585 = *(_QWORD *)(v584 + 8);
          v1164 = *(char **)v584;
          v586 = v582 - (*(_QWORD *)v584 - (_DWORD)v585);
          v947 = *(_DWORD *)(v584 + 200);
          v951 = v584;
          v587 = *(_DWORD *)(v584 + 28);
          v588 = ~(-1 << (*(_DWORD *)(v584 + 196) - 1));
          v589 = *(_QWORD *)v584 - v585 - v587;
          v943 = *(_QWORD *)v584 - v585;
          v590 = *(_QWORD *)v584 - v585 + (-1 << (*(_DWORD *)(v584 + 196) - 1)) + 1;
          v1009 = v588;
          if (v589 <= v588)
            v591 = v587;
          else
            v591 = v590;
          v1014 = v591;
          v1267 = 0;
          v592 = (v1258 - 1);
          v1030 = v587;
          v593 = v574 - v587 - v586;
          v594 = v1131;
          v595 = v1131 << 63 >> 63;
          if ((_DWORD)v1131)
            v596 = 4;
          else
            v596 = 3;
          v597 = v574 - v578;
          v1022 = v585;
          v1001 = v582 - ((_DWORD)v1164 - (_DWORD)v585);
          v598 = v585 - v586;
          v1106 = v576;
          v1095 = v574;
          v1085 = v578;
          v1074 = v582;
          v1065 = v593;
          v1047 = v585 - v586;
          v1056 = v596;
          v1038 = v574 - v578;
          while (2)
          {
            if (v594 == 3)
            {
              v599 = *v1248 - 1;
              v600 = v574 - v599;
              v601 = *v1248 - 2;
              if (v601 >= v597)
                goto LABEL_875;
LABEL_884:
              if (v600 < v582 || *(_DWORD *)v426 != *(_DWORD *)&v426[-v599])
                goto LABEL_872;
              v609 = (_QWORD *)((char *)v575 - v599);
              if (v1260 > (unint64_t)v575)
              {
                v610 = v1235 + 4;
                v611 = *v575 ^ *v609;
                if (v611)
                {
                  v606 = (__clz(__rbit64(v611)) >> 3) + 4;
                  v607 = v606;
                  if (v592 >= v606)
                    goto LABEL_872;
                  goto LABEL_905;
                }
                do
                {
                  ++v609;
                  if ((unint64_t)++v610 >= v1260)
                    goto LABEL_897;
                  v612 = *v610 ^ *v609;
                }
                while (!v612);
                v610 = (_QWORD *)((char *)v610 + (__clz(__rbit64(v612)) >> 3));
LABEL_904:
                v606 = (_DWORD)v610 - (_DWORD)v1235;
                v607 = v606;
                if (v592 >= v606)
                  goto LABEL_872;
                goto LABEL_905;
              }
              v610 = v1235 + 4;
LABEL_897:
              if ((unint64_t)v610 >= v1237)
              {
                if ((unint64_t)v610 < v1236)
                  goto LABEL_909;
LABEL_901:
                if ((unint64_t)v610 >= v16)
                  goto LABEL_904;
              }
              else
              {
                if (*(_DWORD *)v609 == *(_DWORD *)v610)
                {
                  v610 = (_QWORD *)((char *)v610 + 4);
                  v609 = (_QWORD *)((char *)v609 + 4);
                }
                if ((unint64_t)v610 >= v1236)
                  goto LABEL_901;
LABEL_909:
                if (*(unsigned __int16 *)v609 == *(unsigned __int16 *)v610)
                {
                  v610 = (_QWORD *)((char *)v610 + 2);
                  v609 = (_QWORD *)((char *)v609 + 2);
                }
                if ((unint64_t)v610 >= v16)
                  goto LABEL_904;
              }
              if (*(unsigned __int8 *)v609 == *(unsigned __int8 *)v610)
                LODWORD(v610) = (_DWORD)v610 + 1;
              goto LABEL_904;
            }
            v599 = v1248[v594];
            v600 = v574 - v599;
            v601 = v599 - 1;
            if (v599 - 1 < v597)
              goto LABEL_884;
LABEL_875:
            if (v601 < v593 && v578 + ~v600 >= 3)
            {
              v603 = v598 + v600;
              if (*(_DWORD *)v426 == *(_DWORD *)v603)
              {
                v1135 = v592;
                v1218 = v460;
                v604 = v572;
                v605 = v595;
                LODWORD(v578) = ZSTD_count_2segments(v575, (char *)(v603 + 4), v16, v1164, v1174);
                v597 = v1038;
                v598 = v1047;
                v596 = v1056;
                v595 = v605;
                v593 = v1065;
                v582 = v1074;
                v572 = v604;
                v576 = v1106;
                v592 = v1135;
                LODWORD(v460) = v1218;
                v574 = v1095;
                v426 = v1235;
                v16 = (unint64_t)v1259;
                v606 = v578 + 4;
                LODWORD(v578) = v1085;
                v607 = v606;
                if (v1135 < v606)
                {
LABEL_905:
                  v613 = &v1261[2 * v460];
                  *v613 = v594 + v595;
                  v613[1] = v606;
                  LODWORD(v460) = v460 + 1;
                  if (v606 > v572)
                    goto LABEL_1273;
                  v592 = v607;
                  if (&v426[v607] == (unsigned __int8 *)v16)
                    goto LABEL_1273;
                }
              }
            }
LABEL_872:
            if (++v594 < v596)
              continue;
            break;
          }
          *(_DWORD *)(v962 + 4 * v954) = v574;
          v688 = ~(-1 << v958);
          if (v576 < v1149)
          {
            v689 = v1224;
            v690 = v1185;
            v691 = v968;
            v692 = v972;
            v693 = v968 + 1;
            goto LABEL_1028;
          }
          v748 = 0;
          v749 = 0;
          v1222 = (char *)v978 + v425;
          v691 = v968;
          v692 = v972;
          v1140 = v972 + 8;
          v689 = v1224;
          v690 = v1185;
          v693 = v968 + 1;
          v750 = v993;
          v751 = v985;
          while (2)
          {
            if (v749 >= v748)
              v752 = v748;
            else
              v752 = v749;
            v753 = v972 + v576;
            v754 = &v426[v752];
            v755 = (_QWORD *)(v753 + v752);
            if (v1260 <= (unint64_t)&v426[v752])
            {
              v758 = (char *)&v426[v752];
              v759 = v576;
              if ((unint64_t)v754 >= v1237)
                goto LABEL_1114;
            }
            else
            {
              v756 = *(_QWORD *)v754 ^ *v755;
              if (v756)
              {
                v757 = (__clz(__rbit64(v756)) >> 3) + v752;
                if (v757 <= v592)
                  goto LABEL_1130;
LABEL_1123:
                if (v757 > v690 - v576)
                  v690 = v576 + v757;
                v760 = &v1261[2 * v460];
                *v760 = v574 + 2 - v576;
                v760[1] = v757;
                LODWORD(v460) = v460 + 1;
                if (v757 > 0x1000 || &v426[v757] == (unsigned __int8 *)v16)
                {
                  v1217 = v460;
                  *v693 = 0;
                  *v691 = 0;
LABEL_1271:
                  *(_DWORD *)(v689 + 36) = v690 - 8;
                  goto LABEL_1272;
                }
                v592 = v757;
LABEL_1130:
                v762 = (unsigned int *)(v750 + 8 * (v576 & v751));
                if (*(unsigned __int8 *)(v753 + v757) >= v426[v757])
                {
                  *v693 = v576;
                  if (v576 <= v1122)
                  {
                    v693 = (unsigned int *)&v1267;
LABEL_1028:
                    *v693 = 0;
                    *v691 = 0;
                    v1217 = v460;
                    if (!v688)
                      goto LABEL_1271;
                    v694 = *(_DWORD *)(*(_QWORD *)(v951 + 48)
                                     + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v426) >> -(char)v947));
                    if (v694 <= v1030)
                      goto LABEL_1271;
                    v695 = 0;
                    v696 = 0;
                    v1076 = *(_QWORD *)(v951 + 64);
                    v1087 = v692 + v1001;
                    v1097 = v574 + 2;
                    v1124 = v688 - 1;
                    while (1)
                    {
                      v1251 = v694;
                      v1187 = v690;
                      v1137 = v696;
                      v1151 = v695;
                      if (v696 >= v695)
                        v697 = v695;
                      else
                        v697 = v696;
                      v698 = v694;
                      v699 = v1022 + v694;
                      v700 = v592;
                      v701 = ZSTD_count_2segments(&v426[v697], (char *)(v699 + v697), v16, v1164, v1174) + v697;
                      if (v701 + v698 >= v943)
                        v702 = v1087 + v698;
                      else
                        v702 = v699;
                      if (v701 <= v700)
                      {
                        v592 = v700;
                        v16 = (unint64_t)v1259;
                        v689 = v1224;
                        v426 = v1235;
                        v690 = v1187;
                        v696 = v1137;
                        v695 = v1151;
                        v704 = v1251;
                        if (v1251 <= v1014)
                          goto LABEL_1271;
                      }
                      else
                      {
                        v690 = v1187;
                        if (v701 > v1187 - (v1251 + (_DWORD)v1001))
                          v690 = v1251 + v1001 + v701;
                        v703 = &v1261[2 * v1217];
                        *v703 = v1097 - (v1251 + v1001);
                        v703[1] = v701;
                        ++v1217;
                        if (v701 > 0x1000)
                        {
                          LODWORD(v16) = (_DWORD)v1259;
                          v689 = v1224;
                          LODWORD(v426) = (_DWORD)v1235;
                          goto LABEL_1271;
                        }
                        v704 = v1251;
                        v426 = v1235;
                        v592 = v701;
                        v16 = (unint64_t)v1259;
                        v689 = v1224;
                        v696 = v1137;
                        v695 = v1151;
                        if (&v1235[v701] == v1259 || v1251 <= v1014)
                          goto LABEL_1271;
                      }
                      v705 = *(unsigned __int8 *)(v702 + v701);
                      v706 = v426[v701];
                      v57 = v705 >= v706;
                      v707 = v705 < v706;
                      if (v57)
                        v695 = v701;
                      else
                        v696 = v701;
                      if (v1124)
                      {
                        --v1124;
                        v694 = *(_DWORD *)(v1076 + 8 * (v704 & v1009) + 4 * v707);
                        if (v694 > v1030)
                          continue;
                      }
                      goto LABEL_1271;
                    }
                  }
                  v748 = v757;
                  v693 = (unsigned int *)(v750 + 8 * (v576 & v751));
                  v57 = v688-- != 0;
                  if (!v57)
                    goto LABEL_1028;
                }
                else
                {
                  *v691 = v576;
                  if (v576 <= v1122)
                  {
                    v691 = (unsigned int *)&v1267;
                    goto LABEL_1028;
                  }
                  ++v762;
                  v749 = v757;
                  v691 = v762;
                  v57 = v688-- != 0;
                  if (!v57)
                    goto LABEL_1028;
                }
                v576 = *v762;
                if (*v762 < v1149)
                  goto LABEL_1028;
                continue;
              }
              v759 = v576;
              v763 = v693;
              v764 = v691;
              v765 = v592;
              v766 = 0;
              v767 = &v1222[v752];
              while (1)
              {
                v768 = &v767[v766];
                if ((unint64_t)&v767[v766] >= v1260)
                  break;
                v769 = *(_QWORD *)(v1140 + v752 + v576 + v766);
                v766 += 8;
                v770 = *(_QWORD *)v768 ^ v769;
                if (v770)
                {
                  v771 = __clz(__rbit64(v770));
                  v592 = v765;
                  v691 = v764;
                  v693 = v763;
                  v750 = v993;
                  v751 = v985;
                  v757 = v766 + (v771 >> 3) + v752;
                  if (v757 <= v592)
                    goto LABEL_1130;
                  goto LABEL_1123;
                }
              }
              v758 = &v1222[v752 + v766];
              v755 = (_QWORD *)(v1140 + v752 + v576 + v766);
              v592 = v765;
              v691 = v764;
              v693 = v763;
              v750 = v993;
              v751 = v985;
              if ((unint64_t)v758 >= v1237)
              {
LABEL_1114:
                if ((unint64_t)v758 >= v1236)
                {
                  if ((unint64_t)v758 >= v16)
                    goto LABEL_1122;
                }
                else
                {
                  if (*(unsigned __int16 *)v755 == *(unsigned __int16 *)v758)
                  {
                    v758 += 2;
                    v755 = (_QWORD *)((char *)v755 + 2);
                  }
                  if ((unint64_t)v758 >= v16)
                  {
LABEL_1122:
                    v576 = v759;
                    v757 = v758 - (char *)v426;
                    if (v758 - (char *)v426 <= v592)
                      goto LABEL_1130;
                    goto LABEL_1123;
                  }
                }
                if (*(unsigned __int8 *)v755 == *v758)
                  ++v758;
                goto LABEL_1122;
              }
            }
            break;
          }
          if (*(_DWORD *)v755 == *(_DWORD *)v758)
          {
            v758 += 4;
            v755 = (_QWORD *)((char *)v755 + 4);
          }
          goto LABEL_1114;
        }
        if (v461 != 3)
        {
          v460 = 0;
          if (*(_DWORD *)(v7 + 212) >= 0xFFFu)
            v614 = 4095;
          else
            v614 = *(_DWORD *)(v7 + 212);
          v615 = *(_QWORD *)(v7 + 8);
          v616 = (_DWORD)v1235 - v615;
          v617 = v1235 + 4;
          v959 = *(_DWORD *)(v7 + 204);
          v963 = *(_QWORD *)(v7 + 48);
          v955 = (-1640531535 * *(_DWORD *)v1235) >> -(char)*(_DWORD *)(v7 + 200);
          v618 = *(_DWORD *)(v963 + 4 * v955);
          v619 = -1 << (*(_DWORD *)(v7 + 196) - 1);
          v620 = *(unsigned int *)(v7 + 24);
          v969 = v615;
          v1175 = (_QWORD *)(v615 + v620);
          v1096 = ~v619;
          v621 = (_DWORD)v1235 - v615 + v619 + 1;
          if (v616 < ~v619)
            v621 = 0;
          v1086 = v621;
          v622 = 1 << *(_DWORD *)(v7 + 192);
          if (v616 - *(_DWORD *)(v7 + 28) > v622 && *(_DWORD *)(v7 + 32) == 0)
            v624 = v616 - v622;
          else
            v624 = *(_DWORD *)(v7 + 28);
          if (v624 <= 1)
            v625 = 1;
          else
            v625 = v624;
          v1219 = v625;
          v1107 = *(_QWORD *)(v7 + 64);
          v965 = (unsigned int *)(v1107 + 8 * (v616 & ~v619));
          v1123 = v616 + 9;
          v626 = *(_QWORD *)(v7 + 184);
          v627 = *(_QWORD *)(v626 + 8);
          v1150 = v965 + 1;
          v1165 = *(char **)v626;
          v628 = *(_QWORD *)v626 - v627;
          v629 = v624 - (*(_QWORD *)v626 - (_DWORD)v627);
          v948 = *(_DWORD *)(v626 + 200);
          v952 = v626;
          v630 = *(_DWORD *)(v626 + 28);
          v631 = ~(-1 << (*(_DWORD *)(v626 + 196) - 1));
          v944 = v628;
          v632 = v628 + (-1 << (*(_DWORD *)(v626 + 196) - 1)) + 1;
          if (v628 - v630 <= v631)
            v633 = v630;
          else
            v633 = v632;
          v986 = v631;
          v994 = v633;
          v1267 = 0;
          v634 = (v1258 - 1);
          v1010 = v630;
          v635 = v616 - v630 - v629;
          v636 = v1131;
          v637 = v1131 << 63 >> 63;
          if ((_DWORD)v1131)
            v638 = 4;
          else
            v638 = 3;
          v639 = v616 - v620;
          v1002 = v627;
          v973 = v629;
          v640 = v627 - v629;
          v1136 = v616;
          v1075 = v618;
          v1066 = v614;
          v1057 = v620;
          v1048 = v624;
          v1039 = v638;
          v1031 = v616 - v620;
          v1023 = v627 - v629;
          v1015 = v616 - v630 - v629;
          while (2)
          {
            if (v636 == 3)
            {
              v641 = *v1248 - 1;
              v642 = v616 - v641;
              v643 = *v1248 - 2;
              if (v643 >= v639)
                goto LABEL_937;
LABEL_946:
              if (v642 < v624 || *(_DWORD *)v426 != *(_DWORD *)&v426[-v641])
                goto LABEL_934;
              v651 = (_QWORD *)((char *)v617 - v641);
              if (v1260 > (unint64_t)v617)
              {
                v652 = v1235 + 4;
                v653 = *v617 ^ *v651;
                if (v653)
                {
                  v648 = (__clz(__rbit64(v653)) >> 3) + 4;
                  v649 = v648;
                  if (v634 >= v648)
                    goto LABEL_934;
                  goto LABEL_967;
                }
                do
                {
                  ++v651;
                  if ((unint64_t)++v652 >= v1260)
                    goto LABEL_959;
                  v654 = *v652 ^ *v651;
                }
                while (!v654);
                v652 = (_QWORD *)((char *)v652 + (__clz(__rbit64(v654)) >> 3));
LABEL_966:
                v648 = (_DWORD)v652 - (_DWORD)v1235;
                v649 = v648;
                if (v634 >= v648)
                  goto LABEL_934;
                goto LABEL_967;
              }
              v652 = v1235 + 4;
LABEL_959:
              if ((unint64_t)v652 >= v1237)
              {
                if ((unint64_t)v652 < v1236)
                  goto LABEL_971;
LABEL_963:
                if ((unint64_t)v652 >= v16)
                  goto LABEL_966;
              }
              else
              {
                if (*(_DWORD *)v651 == *(_DWORD *)v652)
                {
                  v652 = (_QWORD *)((char *)v652 + 4);
                  v651 = (_QWORD *)((char *)v651 + 4);
                }
                if ((unint64_t)v652 >= v1236)
                  goto LABEL_963;
LABEL_971:
                if (*(unsigned __int16 *)v651 == *(unsigned __int16 *)v652)
                {
                  v652 = (_QWORD *)((char *)v652 + 2);
                  v651 = (_QWORD *)((char *)v651 + 2);
                }
                if ((unint64_t)v652 >= v16)
                  goto LABEL_966;
              }
              if (*(unsigned __int8 *)v651 == *(unsigned __int8 *)v652)
                LODWORD(v652) = (_DWORD)v652 + 1;
              goto LABEL_966;
            }
            v641 = v1248[v636];
            v642 = v616 - v641;
            v643 = v641 - 1;
            if (v641 - 1 < v639)
              goto LABEL_946;
LABEL_937:
            if (v643 < v635 && v620 + ~v642 >= 3)
            {
              v645 = v640 + v642;
              if (*(_DWORD *)v426 == *(_DWORD *)v645)
              {
                v1186 = v634;
                v646 = v460;
                v647 = ZSTD_count_2segments(v617, (char *)(v645 + 4), v16, v1165, v1175);
                v635 = v1015;
                v640 = v1023;
                v639 = v1031;
                v638 = v1039;
                v624 = v1048;
                LODWORD(v620) = v1057;
                v614 = v1066;
                v618 = v1075;
                v616 = v1136;
                v460 = v646;
                v634 = v1186;
                v426 = v1235;
                v16 = (unint64_t)v1259;
                v648 = v647 + 4;
                v649 = (v647 + 4);
                if (v1186 < v649)
                {
LABEL_967:
                  v655 = &v1261[2 * v460];
                  *v655 = v636 + v637;
                  v655[1] = v648;
                  v460 = (v460 + 1);
                  if (v648 > v614)
                    goto LABEL_1273;
                  v634 = v649;
                  if (&v426[v649] == (unsigned __int8 *)v16)
                    goto LABEL_1273;
                }
              }
            }
LABEL_934:
            if (++v636 < v638)
              continue;
            break;
          }
          *(_DWORD *)(v963 + 4 * v955) = v616;
          v708 = ~(-1 << v959);
          if (v618 < v1219)
          {
            v709 = v1123;
            v711 = v965;
            v710 = v969;
            goto LABEL_1053;
          }
          v772 = 0;
          v773 = 0;
          v774 = v616 + 2;
          v1254 = (char *)v978 + v425;
          v711 = v965;
          v710 = v969;
          v775 = v969 + 8;
          v709 = v1123;
          while (2)
          {
            if (v773 >= v772)
              v776 = v772;
            else
              v776 = v773;
            v777 = v618;
            v778 = v969 + v618;
            v779 = &v426[v776];
            v780 = (_QWORD *)(v778 + v776);
            if (v1260 <= (unint64_t)&v426[v776])
            {
              v783 = (char *)&v426[v776];
              if ((unint64_t)v779 >= v1237)
                goto LABEL_1156;
            }
            else
            {
              v781 = *(_QWORD *)v779 ^ *v780;
              if (v781)
              {
                v782 = (__clz(__rbit64(v781)) >> 3) + v776;
                if (v782 <= v634)
                  goto LABEL_1172;
LABEL_1165:
                if (v782 > v709 - v618)
                  v709 = v618 + v782;
                v784 = &v1261[2 * v460];
                *v784 = v774 - v618;
                v784[1] = v782;
                LODWORD(v460) = v460 + 1;
                if (v782 > 0x1000 || &v426[v782] == (unsigned __int8 *)v16)
                {
                  v1217 = v460;
                  *v1150 = 0;
                  *v711 = 0;
                  v727 = v709;
                  goto LABEL_1264;
                }
                v634 = v782;
LABEL_1172:
                v786 = (unsigned int *)(v1107 + 8 * (v618 & v1096));
                if (*(unsigned __int8 *)(v778 + v782) >= v426[v782])
                {
                  *v1150 = v618;
                  if (v618 <= v1086)
                  {
                    v1150 = (unsigned int *)&v1267;
LABEL_1053:
                    v1125 = v709;
                    *v1150 = 0;
                    *v711 = 0;
                    v1217 = v460;
                    if (!v708
                      || (v712 = *(_DWORD *)(*(_QWORD *)(v952 + 48)
                                           + 4 * ((-1640531535 * *(_DWORD *)v426) >> -(char)v948)),
                          v712 <= v1010))
                    {
LABEL_1075:
                      v727 = v1125;
                      goto LABEL_1264;
                    }
                    v1188 = v634;
                    v713 = 0;
                    v714 = 0;
                    v1088 = *(_QWORD *)(v952 + 64);
                    v1098 = v710 + v973;
                    v1077 = v1136 + 2;
                    v1138 = v708 - 1;
                    while (1)
                    {
                      v1252 = v712;
                      v1152 = v713;
                      if (v714 >= v713)
                        v715 = v713;
                      else
                        v715 = v714;
                      v716 = v712;
                      v717 = v1002 + v712;
                      v718 = ZSTD_count_2segments(&v426[v715], (char *)(v717 + v715), v16, v1165, v1175);
                      v719 = v718 + v715;
                      if (v718 + v715 + v716 >= v944)
                        v720 = v1098 + v716;
                      else
                        v720 = v717;
                      if (v719 <= v1188)
                      {
                        v16 = (unint64_t)v1259;
                        v426 = v1235;
                        v713 = v1152;
                        v723 = v1252;
                        if (v1252 <= v994)
                          goto LABEL_1075;
                      }
                      else
                      {
                        v721 = v1125;
                        if (v719 > v1125 - (v1252 + (_DWORD)v973))
                          v721 = v1252 + v973 + v719;
                        v1125 = v721;
                        v722 = &v1261[2 * v1217];
                        *v722 = v1077 - (v1252 + v973);
                        v722[1] = v719;
                        ++v1217;
                        if (v719 > 0x1000)
                        {
                          LODWORD(v16) = (_DWORD)v1259;
                          LODWORD(v426) = (_DWORD)v1235;
                          v727 = v721;
LABEL_1264:
                          *(_DWORD *)(v1224 + 36) = v727 - 8;
LABEL_1272:
                          LODWORD(v460) = v1217;
LABEL_1273:
                          v18 = v12 + 7;
                          goto LABEL_1274;
                        }
                        v723 = v1252;
                        v426 = v1235;
                        v1188 = v718 + v715;
                        v16 = (unint64_t)v1259;
                        v713 = v1152;
                        if (&v1235[v719] == v1259 || v1252 <= v994)
                          goto LABEL_1075;
                      }
                      v724 = *(unsigned __int8 *)(v720 + v719);
                      v725 = v426[v719];
                      v57 = v724 >= v725;
                      v726 = v724 < v725;
                      if (v57)
                        v713 = v718 + v715;
                      else
                        v714 = v718 + v715;
                      if (v1138)
                      {
                        --v1138;
                        v712 = *(_DWORD *)(v1088 + 8 * (v723 & v986) + 4 * v726);
                        if (v712 > v1010)
                          continue;
                      }
                      goto LABEL_1075;
                    }
                  }
                  v772 = v782;
                  v1150 = (unsigned int *)(v1107 + 8 * (v618 & v1096));
                  v57 = v708-- != 0;
                  if (!v57)
                    goto LABEL_1053;
                }
                else
                {
                  *v711 = v618;
                  if (v618 <= v1086)
                  {
                    v711 = (unsigned int *)&v1267;
                    goto LABEL_1053;
                  }
                  ++v786;
                  v773 = v782;
                  v711 = v786;
                  v57 = v708-- != 0;
                  if (!v57)
                    goto LABEL_1053;
                }
                v618 = *v786;
                if (*v786 < v1219)
                  goto LABEL_1053;
                continue;
              }
              v787 = v618;
              v788 = 0;
              v789 = &v1254[v776];
              while (1)
              {
                v790 = &v789[v788];
                if ((unint64_t)&v789[v788] >= v1260)
                  break;
                v791 = *(_QWORD *)(v775 + v776 + v777 + v788);
                v788 += 8;
                v792 = *(_QWORD *)v790 ^ v791;
                if (v792)
                {
                  v793 = __clz(__rbit64(v792));
                  v618 = v787;
                  v782 = v788 + (v793 >> 3) + v776;
                  if (v782 <= v634)
                    goto LABEL_1172;
                  goto LABEL_1165;
                }
              }
              v783 = &v1254[v776 + v788];
              v780 = (_QWORD *)(v775 + v776 + v777 + v788);
              v618 = v787;
              if ((unint64_t)v783 >= v1237)
              {
LABEL_1156:
                if ((unint64_t)v783 >= v1236)
                {
                  if ((unint64_t)v783 >= v16)
                    goto LABEL_1164;
                }
                else
                {
                  if (*(unsigned __int16 *)v780 == *(unsigned __int16 *)v783)
                  {
                    v783 += 2;
                    v780 = (_QWORD *)((char *)v780 + 2);
                  }
                  if ((unint64_t)v783 >= v16)
                  {
LABEL_1164:
                    v782 = v783 - (char *)v426;
                    if (v783 - (char *)v426 <= v634)
                      goto LABEL_1172;
                    goto LABEL_1165;
                  }
                }
                if (*(unsigned __int8 *)v780 == *v783)
                  ++v783;
                goto LABEL_1164;
              }
            }
            break;
          }
          if (*(_DWORD *)v780 == *(_DWORD *)v783)
          {
            v783 += 4;
            v780 = (_QWORD *)((char *)v780 + 4);
          }
          goto LABEL_1156;
        }
        v460 = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu)
          v464 = 4095;
        else
          v464 = *(_DWORD *)(v7 + 212);
        v465 = *(_QWORD *)(v7 + 8);
        v466 = (_DWORD)v1235 - v465;
        v467 = v1235 + 3;
        v964 = *(_DWORD *)(v7 + 204);
        v966 = *(_QWORD *)(v7 + 48);
        v970 = v465;
        v960 = (-1640531535 * *(_DWORD *)v1235) >> -(char)*(_DWORD *)(v7 + 200);
        v468 = *(_DWORD *)(v966 + 4 * v960);
        v469 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        v470 = *(unsigned int *)(v7 + 24);
        v1183 = (_QWORD *)(v465 + v470);
        v983 = ~v469;
        v471 = (_DWORD)v1235 - v465 + v469 + 1;
        if (v466 < ~v469)
          v471 = 0;
        v1146 = v471;
        v472 = 1 << *(_DWORD *)(v7 + 192);
        if (v466 - *(_DWORD *)(v7 + 28) > v472 && *(_DWORD *)(v7 + 32) == 0)
          v474 = v466 - v472;
        else
          v474 = *(_DWORD *)(v7 + 28);
        if (v474 <= 1)
          v475 = 1;
        else
          v475 = v474;
        v1216 = v475;
        v991 = *(_QWORD *)(v7 + 64);
        v956 = (unsigned int *)(v991 + 8 * (v466 & ~v469));
        v1161 = v466 + 9;
        v476 = *(_QWORD *)(v7 + 184);
        v477 = *(_QWORD *)(v476 + 8);
        v1172 = *(char **)v476;
        v478 = *(_DWORD *)(v476 + 28);
        v479 = v474 - (*(_QWORD *)v476 - (_DWORD)v477);
        v945 = *(_DWORD *)(v476 + 200);
        v949 = v476;
        v480 = ~(-1 << (*(_DWORD *)(v476 + 196) - 1));
        v481 = *(_QWORD *)v476 - v477 - v478;
        v941 = *(_QWORD *)v476 - v477;
        v482 = *(_QWORD *)v476 - v477 + (-1 << (*(_DWORD *)(v476 + 196) - 1)) + 1;
        v1071 = v480;
        if (v481 <= v480)
          v483 = v478;
        else
          v483 = v482;
        v1082 = v483;
        v1267 = 0;
        v484 = (v1258 - 1);
        v1103 = v478;
        v485 = v466 - v478 - v479;
        v486 = v1131;
        v487 = v1131 << 63 >> 63;
        if ((_DWORD)v1131)
          v488 = 4;
        else
          v488 = 3;
        v489 = v466 - v470;
        v1093 = v477;
        v999 = v474 - ((_DWORD)v1172 - (_DWORD)v477);
        v490 = v477 - v479;
        v1119 = v466;
        v1063 = v468;
        v1054 = v470;
        v1045 = v474;
        v1036 = v464;
        v1028 = v1131 << 63 >> 63;
        v1020 = v488;
        v1012 = v466 - v470;
        v1007 = v490;
        while (2)
        {
          if (v486 == 3)
          {
            v491 = *v1248 - 1;
            v492 = v466 - v491;
            v493 = *v1248 - 2;
            if (v493 >= v489)
              goto LABEL_725;
LABEL_734:
            if (v492 < v474 || ((*(_DWORD *)&v426[-v491] ^ *(_DWORD *)v426) & 0xFFFFFF) != 0)
              goto LABEL_722;
            v502 = (_QWORD *)((char *)v467 - v491);
            if (v1260 > (unint64_t)v467)
            {
              v503 = v467;
              v504 = *v467 ^ *v502;
              if (v504)
              {
                v499 = (__clz(__rbit64(v504)) >> 3) + 3;
                v500 = v499;
                if (v484 >= v499)
                  goto LABEL_722;
              }
              else
              {
                do
                {
                  ++v502;
                  if ((unint64_t)++v503 >= v1260)
                    goto LABEL_748;
                  v505 = *v503 ^ *v502;
                }
                while (!v505);
                v499 = (_DWORD)v503 + (__clz(__rbit64(v505)) >> 3) - (_DWORD)v467 + 3;
                v500 = v499;
                if (v484 >= v499)
                  goto LABEL_722;
              }
              goto LABEL_756;
            }
            v503 = v467;
LABEL_748:
            if ((unint64_t)v503 >= v1237)
            {
              if ((unint64_t)v503 >= v1236)
                goto LABEL_752;
            }
            else
            {
              if (*(_DWORD *)v502 == *(_DWORD *)v503)
              {
                v503 = (_QWORD *)((char *)v503 + 4);
                v502 = (_QWORD *)((char *)v502 + 4);
              }
              if ((unint64_t)v503 >= v1236)
              {
LABEL_752:
                if ((unint64_t)v503 < v16)
                  goto LABEL_753;
                goto LABEL_755;
              }
            }
            if (*(unsigned __int16 *)v502 == *(unsigned __int16 *)v503)
            {
              v503 = (_QWORD *)((char *)v503 + 2);
              v502 = (_QWORD *)((char *)v502 + 2);
            }
            if ((unint64_t)v503 < v16)
            {
LABEL_753:
              if (*(unsigned __int8 *)v502 == *(unsigned __int8 *)v503)
                LODWORD(v503) = (_DWORD)v503 + 1;
            }
LABEL_755:
            v499 = (_DWORD)v503 - (_DWORD)v467 + 3;
            v500 = v499;
            if (v484 >= v499)
              goto LABEL_722;
LABEL_756:
            v506 = &v1261[2 * v460];
            *v506 = v486 + v487;
            v506[1] = v499;
            v460 = (v460 + 1);
            if (v499 > v464)
              goto LABEL_1273;
            v484 = v500;
            if (&v426[v500] == (unsigned __int8 *)v16)
              goto LABEL_1273;
            goto LABEL_722;
          }
          v491 = v1248[v486];
          v492 = v466 - v491;
          v493 = v491 - 1;
          if (v491 - 1 < v489)
            goto LABEL_734;
LABEL_725:
          if (v493 < v485 && v470 + ~v492 >= 3)
          {
            v495 = v490 + v492;
            if (((*(_DWORD *)v495 ^ *(_DWORD *)v426) & 0xFFFFFF) == 0)
            {
              v496 = v467;
              v1132 = v484;
              v497 = v460;
              v498 = ZSTD_count_2segments(v467, (char *)(v495 + 3), v16, v1172, v1183);
              v490 = v1007;
              v489 = v1012;
              v488 = v1020;
              LODWORD(v487) = v1028;
              v464 = v1036;
              v474 = v1045;
              LODWORD(v470) = v1054;
              v468 = v1063;
              v484 = v1132;
              v466 = v1119;
              v460 = v497;
              v426 = v1235;
              v16 = (unint64_t)v1259;
              v499 = v498 + 3;
              v467 = v496;
              v500 = v499;
              if (v1132 < v499)
                goto LABEL_756;
            }
          }
LABEL_722:
          if (++v486 < v488)
            continue;
          break;
        }
        if (v484 > 2)
        {
          v656 = v1224;
          v660 = v970;
          goto LABEL_1077;
        }
        v656 = v1224;
        v657 = *(_QWORD *)(v1224 + 56);
        v658 = *(_DWORD *)v426;
        v659 = 32 - *(_DWORD *)(v1224 + 40);
        v660 = v970;
        if (v940 < v466)
        {
          v661 = v940;
          do
          {
            *(_DWORD *)(v657 + 4 * ((900185344 * *(_DWORD *)(v970 + v661)) >> v659)) = v661;
            ++v661;
          }
          while (v1212 - (_DWORD)v970 != v661);
        }
        v662 = *(unsigned int *)(v657 + 4 * ((900185344 * v658) >> v659));
        v663 = v662 >= v1216 && (v466 - v662) >> 18 == 0;
        v18 = v12 + 7;
        if (!v663)
        {
          v940 = v466;
          goto LABEL_1077;
        }
        v818 = (_DWORD *)(v970 + v662);
        if (v1260 <= (unint64_t)v426)
        {
          v821 = v426;
          if ((unint64_t)v426 >= v1237)
            goto LABEL_1238;
LABEL_1236:
          if (*v818 == *(_DWORD *)v821)
          {
            v821 += 4;
            ++v818;
          }
LABEL_1238:
          if ((unint64_t)v821 >= v1236)
          {
            if ((unint64_t)v821 >= v16)
              goto LABEL_1246;
          }
          else
          {
            if (*(unsigned __int16 *)v818 == *(unsigned __int16 *)v821)
            {
              v821 += 2;
              v818 = (_DWORD *)((char *)v818 + 2);
            }
            if ((unint64_t)v821 >= v16)
            {
LABEL_1246:
              v820 = v821 - v426;
              v940 = v466;
              if (v820 >= 3)
                goto LABEL_1247;
              goto LABEL_1077;
            }
          }
          if (*(unsigned __int8 *)v818 == *v821)
            ++v821;
          goto LABEL_1246;
        }
        v819 = *(_QWORD *)v426 ^ *(_QWORD *)v818;
        if (v819)
        {
          v820 = __clz(__rbit64(v819)) >> 3;
          v940 = v466;
          if (v820 >= 3)
            goto LABEL_1247;
LABEL_1077:
          *(_DWORD *)(v966 + 4 * v960) = v466;
          v728 = ~(-1 << v964);
          if (v468 < v1216)
          {
            v729 = v1161;
            v731 = v956 + 1;
            v730 = v956;
LABEL_1079:
            v1166 = v729;
            *v731 = 0;
            *v730 = 0;
            v1221 = v460;
            if (v728)
            {
              v732 = *(_DWORD *)(*(_QWORD *)(v949 + 48)
                               + 4 * ((-1640531535 * *(_DWORD *)v426) >> -(char)v945));
              if (v732 > v1103)
              {
                v733 = 0;
                v734 = 0;
                v1049 = *(_QWORD *)(v949 + 64);
                v1058 = v660 + v999;
                v1040 = v1119 + 2;
                v1126 = v728 - 1;
                while (1)
                {
                  v1253 = v732;
                  v1139 = v734;
                  v1153 = v733;
                  if (v734 >= v733)
                    v735 = v733;
                  else
                    v735 = v734;
                  v736 = v732;
                  v737 = v1093 + v732;
                  v738 = v484;
                  v739 = ZSTD_count_2segments(&v426[v735], (char *)(v737 + v735), v16, v1172, v1183);
                  v740 = v739 + v735;
                  if (v739 + v735 + v736 >= v941)
                    v741 = v1058 + v736;
                  else
                    v741 = v737;
                  if (v740 <= v738)
                  {
                    v484 = v738;
                    v16 = (unint64_t)v1259;
                    v656 = v1224;
                    v426 = v1235;
                    v734 = v1139;
                    v733 = v1153;
                    v744 = v1253;
                    if (v1253 <= v1082)
                      break;
                  }
                  else
                  {
                    v742 = v1166;
                    if (v740 > v1166 - (v1253 + (_DWORD)v999))
                      v742 = v1253 + v999 + v740;
                    v1166 = v742;
                    v743 = &v1261[2 * v1221];
                    *v743 = v1040 - (v1253 + v999);
                    v743[1] = v740;
                    ++v1221;
                    if (v740 > 0x1000)
                    {
                      LODWORD(v16) = (_DWORD)v1259;
                      v656 = v1224;
                      LODWORD(v426) = (_DWORD)v1235;
                      break;
                    }
                    v744 = v1253;
                    v426 = v1235;
                    v484 = v739 + v735;
                    v16 = (unint64_t)v1259;
                    v656 = v1224;
                    v734 = v1139;
                    v733 = v1153;
                    if (&v1235[v740] == v1259 || v1253 <= v1082)
                      break;
                  }
                  v745 = *(unsigned __int8 *)(v741 + v740);
                  v746 = v426[v740];
                  v57 = v745 >= v746;
                  v747 = v745 < v746;
                  if (v57)
                    v733 = v739 + v735;
                  else
                    v734 = v739 + v735;
                  if (v1126)
                  {
                    --v1126;
                    v732 = *(_DWORD *)(v1049 + 8 * (v744 & v1071) + 4 * v747);
                    if (v732 > v1103)
                      continue;
                  }
                  break;
                }
              }
            }
LABEL_1317:
            v18 = v12 + 7;
            LODWORD(v460) = v1221;
            *(_DWORD *)(v656 + 36) = v1166 - 8;
            goto LABEL_1274;
          }
          v794 = 0;
          v795 = 0;
          v1255 = v466 + 2;
          v1141 = (char *)v978 + v425;
          v1059 = v660 + 8;
          v729 = v1161;
          v731 = v956 + 1;
          v730 = v956;
          v796 = v991;
          v797 = v983;
          while (2)
          {
            if (v795 >= v794)
              v798 = v794;
            else
              v798 = v795;
            v799 = v660 + v468;
            v800 = &v426[v798];
            v801 = (_DWORD *)(v799 + v798);
            if (v1260 <= (unint64_t)&v426[v798])
            {
              v804 = (char *)&v426[v798];
              v805 = v468;
              if ((unint64_t)v800 < v1237)
              {
LABEL_1196:
                if (*v801 == *(_DWORD *)v804)
                {
                  v804 += 4;
                  ++v801;
                }
              }
            }
            else
            {
              v802 = *(_QWORD *)v800 ^ *(_QWORD *)v801;
              if (v802)
              {
                v803 = (__clz(__rbit64(v802)) >> 3) + v798;
                if (v803 <= v484)
                  goto LABEL_1214;
                goto LABEL_1207;
              }
              v805 = v468;
              v809 = v731;
              v810 = v730;
              v811 = v484;
              v812 = 0;
              v813 = &v1141[v798];
              while (1)
              {
                v814 = &v813[v812];
                if ((unint64_t)&v813[v812] >= v1260)
                  break;
                v815 = *(_QWORD *)(v1059 + v798 + v468 + v812);
                v812 += 8;
                v816 = *(_QWORD *)v814 ^ v815;
                if (v816)
                {
                  v817 = __clz(__rbit64(v816));
                  v484 = v811;
                  v730 = v810;
                  v731 = v809;
                  v796 = v991;
                  v797 = v983;
                  v803 = v812 + (v817 >> 3) + v798;
                  if (v803 > v484)
                    goto LABEL_1207;
                  goto LABEL_1214;
                }
              }
              v804 = &v1141[v798 + v812];
              v801 = (_DWORD *)(v1059 + v798 + v468 + v812);
              v484 = v811;
              v730 = v810;
              v731 = v809;
              v796 = v991;
              v797 = v983;
              if ((unint64_t)v804 < v1237)
                goto LABEL_1196;
            }
            if ((unint64_t)v804 >= v1236)
            {
              if ((unint64_t)v804 >= v16)
                goto LABEL_1206;
            }
            else
            {
              if (*(unsigned __int16 *)v801 == *(unsigned __int16 *)v804)
              {
                v804 += 2;
                v801 = (_DWORD *)((char *)v801 + 2);
              }
              if ((unint64_t)v804 >= v16)
              {
LABEL_1206:
                v468 = v805;
                v803 = v804 - (char *)v426;
                if (v804 - (char *)v426 <= v484)
                {
LABEL_1214:
                  v808 = (unsigned int *)(v796 + 8 * (v468 & v797));
                  if (*(unsigned __int8 *)(v799 + v803) >= v426[v803])
                  {
                    *v731 = v468;
                    if (v468 <= v1146)
                    {
                      v731 = (unsigned int *)&v1267;
                      goto LABEL_1079;
                    }
                    v794 = v803;
                    v731 = (unsigned int *)(v796 + 8 * (v468 & v797));
                    v57 = v728-- != 0;
                    if (!v57)
                      goto LABEL_1079;
                  }
                  else
                  {
                    *v730 = v468;
                    if (v468 <= v1146)
                    {
                      v730 = (unsigned int *)&v1267;
                      goto LABEL_1079;
                    }
                    ++v808;
                    v795 = v803;
                    v730 = v808;
                    v57 = v728-- != 0;
                    if (!v57)
                      goto LABEL_1079;
                  }
                  v468 = *v808;
                  if (*v808 < v1216)
                    goto LABEL_1079;
                  continue;
                }
LABEL_1207:
                if (v803 > v729 - v468)
                  v729 = v468 + v803;
                v806 = &v1261[2 * v460];
                *v806 = v1255 - v468;
                v806[1] = v803;
                LODWORD(v460) = v460 + 1;
                if (v803 > 0x1000 || &v426[v803] == (unsigned __int8 *)v16)
                {
                  v1166 = v729;
                  v1221 = v460;
                  *v731 = 0;
                  *v730 = 0;
                  goto LABEL_1317;
                }
                v484 = v803;
                goto LABEL_1214;
              }
            }
            break;
          }
          if (*(unsigned __int8 *)v801 == *v804)
            ++v804;
          goto LABEL_1206;
        }
        v823 = 0;
        v824 = (char *)v978 + v425;
        while (2)
        {
          v825 = &v824[v823];
          if ((unint64_t)&v824[v823] >= v1260)
          {
            v821 = (unsigned __int8 *)v978 + v425 + v823;
            v818 = (_DWORD *)(v970 + v662 + v823 + 8);
            if ((unint64_t)v821 >= v1237)
              goto LABEL_1238;
            goto LABEL_1236;
          }
          v826 = *(_QWORD *)(v970 + v662 + 8 + v823);
          v823 += 8;
          v827 = *(_QWORD *)v825 ^ v826;
          if (!v827)
            continue;
          break;
        }
        v820 = v823 + (__clz(__rbit64(v827)) >> 3);
        v940 = v466;
        if (v820 < 3)
          goto LABEL_1077;
LABEL_1247:
        *v1261 = v466 - v662 + 2;
        v1261[1] = v820;
        if (v820 <= v464 && &v426[v820] != (unsigned __int8 *)v16)
        {
          LODWORD(v460) = 1;
          v940 = v466;
          v484 = v820;
          goto LABEL_1077;
        }
        LODWORD(v460) = 1;
        v940 = v466;
        *(_DWORD *)(v1224 + 36) = v466 + 1;
LABEL_1274:
        v1263 = v460;
        ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1264, (uint64_t)v1261, &v1263, (_DWORD)v426 - (_DWORD)v1213, v16 - (_DWORD)v426);
        v828 = v1263;
        if (!v1263)
        {
          v16 = (unint64_t)v1259;
          v7 = v1224;
LABEL_1314:
          v418 = v1257;
          v419 = v1212;
          v420 = v425 + 1;
          v421 = v1223;
          goto LABEL_653;
        }
        v829 = v1263 - 1;
        v379 = v1261[2 * v829 + 1];
        if (v379 <= v1189 && v379 + v425 <= 0xFFF)
        {
          v830 = 0;
          v831 = v1194 + v1203;
          v16 = (unint64_t)v1259;
          v7 = v1224;
          while (1)
          {
            v832 = &v1261[2 * v830];
            v833 = v1258;
            if (v830)
              v833 = *(v832 - 1) + 1;
            v834 = v832[1];
            if (v834 >= v833)
              break;
LABEL_1278:
            if (++v830 == v828)
              goto LABEL_1314;
          }
          v835 = *v832;
          v836 = __clz(v835 + 1) ^ 0x1F;
          if (*(_DWORD *)(v1224 + 160) == 1)
          {
            v837 = 0;
            v838 = ((_DWORD)v836 << 8) + 4096;
            v839 = v425 + v834;
            v840 = v425 + v834;
            while (1)
            {
              v842 = v834 + v425;
              v843 = v831 + v838 + ((__clz(v834 - 2) << 8) ^ 0x1F00);
              if (v842 <= v417)
              {
                if (v843 >= (int)v12[7 * v842])
                  goto LABEL_1278;
                goto LABEL_1285;
              }
              v844 = v417;
              v845 = (v839 - v837) - (unint64_t)v417;
              if (v845 >= 2)
              {
                v417 = (v845 & 0xFFFFFFFFFFFFFFFELL) + v417;
                v846 = (v840 - v844) & 0xFFFFFFFFFFFFFFFELL;
                v847 = &v1262[7 * v844];
                do
                {
                  *(v847 - 7) = 0x40000000;
                  *v847 = 0x40000000;
                  v847 += 14;
                  v846 -= 2;
                }
                while (v846);
                if (v845 == (v845 & 0xFFFFFFFFFFFFFFFELL))
                  goto LABEL_1285;
              }
              else
              {
                v417 = v417;
              }
              v848 = &v18[7 * v417];
              do
              {
                ++v417;
                *v848 = 0x40000000;
                v848 += 7;
              }
              while (v417 < v842);
LABEL_1285:
              v841 = (signed int *)&v12[7 * v842];
              v841[2] = v834;
              v841[3] = v21;
              *v841 = v843;
              v841[1] = v835;
              --v834;
              ++v837;
              --v840;
              if (v834 < v833)
                goto LABEL_1278;
            }
          }
          v849 = 0;
          if (v836 <= 0x13)
            v850 = 53;
          else
            v850 = ((_DWORD)v836 << 9) - 9675;
          v851 = *(_DWORD *)(v1224 + 152);
          v852 = *(_QWORD *)(v1224 + 96);
          v853 = *(_QWORD *)(v1224 + 104);
          v854 = v850 + *(_DWORD *)(v1224 + 156);
          v855 = v425 + v834;
          v856 = v425 + v834;
          while (2)
          {
            v858 = v834 - 3;
            if (v834 - 3 < 0x80)
              v859 = ZSTD_MLcode_ML_Code[v858];
            else
              v859 = 67 - __clz(v858);
            v860 = v834 + v425;
            v861 = v831
                 + v854
                 + ((__clz(*(_DWORD *)(v853 + 4 * v836) + 1) << 8) ^ 0xFFFFE0FF)
                 + v851
                 + ((ML_bits[v859] + (_DWORD)v836) << 8)
                 + ((__clz(*(_DWORD *)(v852 + 4 * v859) + 1) << 8) ^ 0xFFFFE0FF);
            if (v860 <= v417)
            {
              if (v861 >= (int)v12[7 * v860])
                goto LABEL_1278;
            }
            else
            {
              v862 = v417;
              v863 = (v855 - v849) - (unint64_t)v417;
              if (v863 < 2)
              {
                v417 = v417;
                goto LABEL_1310;
              }
              v417 = (v863 & 0xFFFFFFFFFFFFFFFELL) + v417;
              v864 = (v856 - v862) & 0xFFFFFFFFFFFFFFFELL;
              v865 = &v1262[7 * v862];
              do
              {
                *(v865 - 7) = 0x40000000;
                *v865 = 0x40000000;
                v865 += 14;
                v864 -= 2;
              }
              while (v864);
              v18 = v12 + 7;
              if (v863 != (v863 & 0xFFFFFFFFFFFFFFFELL))
              {
LABEL_1310:
                v866 = &v18[7 * v417];
                do
                {
                  ++v417;
                  *v866 = 0x40000000;
                  v866 += 7;
                }
                while (v417 < v860);
              }
            }
            v857 = (signed int *)&v12[7 * v860];
            v857[2] = v834;
            v857[3] = v21;
            *v857 = v861;
            v857[1] = v835;
            --v834;
            ++v849;
            --v856;
            if (v834 < v833)
              goto LABEL_1278;
            continue;
          }
        }
        v16 = (unint64_t)v1259;
        v7 = v1224;
        if (*v1112)
          v928 = 0;
        else
          v928 = v12[7 * v425 + 3];
        v380 = (unint64_t)(v1259 - 32);
        v386 = v1261[2 * v829];
        v929 = v425 - v928;
        if (v929 <= 0x1000)
          v385 = v929;
        else
          v385 = 0;
        v19 = v1238;
        if (!v379)
        {
LABEL_1405:
          v930 = &v12[7 * v385];
          v931 = *((_QWORD *)v930 + 2);
          a3[2] = v930[6];
          *(_QWORD *)a3 = v931;
          goto LABEL_1339;
        }
LABEL_1325:
        v868 = &v12[7 * v385 + 4];
        if (v386 < 3)
        {
          if (v21)
            v873 = v386;
          else
            v873 = v386 + 1;
          if (v873)
          {
            if (v873 == 3)
            {
              v870 = *v868;
              v872 = v870 - 1;
            }
            else
            {
              v872 = v868[v873];
              v870 = *v868;
            }
            v884 = v873 > 1;
            v875 = 2;
            if (v884)
              v875 = 1;
            v869 = &v868[v875];
          }
          else
          {
            v874 = *(_QWORD *)v868;
            v869 = &v12[7 * v385 + 6];
            v872 = v874;
            v870 = HIDWORD(v874);
          }
        }
        else
        {
          v871 = *v868;
          v869 = &v12[7 * v385 + 5];
          v870 = v871;
          v872 = v386 - 2;
        }
        v876 = *v869;
        *(_QWORD *)a3 = v872 | (v870 << 32);
        a3[2] = v876;
LABEL_1339:
        v877 = v385 + 1;
        v878 = &v12[7 * v385 + 7];
        *v878 = v1113;
        v878[1] = v386;
        v878[2] = v379;
        v878[3] = v21;
        *((_QWORD *)v878 + 2) = v1268;
        v878[6] = v1269;
        v879 = v385;
        if (!v385)
        {
          v885 = 1;
          v886 = v1024;
          goto LABEL_1349;
        }
        do
        {
          v880 = &v12[7 * v879];
          v881 = v880[3] + v880[2];
          v882 = &v12[7 * v385];
          v883 = *(_OWORD *)v880;
          *(_OWORD *)(v882 + 3) = *(_OWORD *)(v880 + 3);
          *(_OWORD *)v882 = v883;
          --v385;
          v57 = v879 >= v881;
          v879 -= v881;
          v884 = v879 != 0 && v57;
          if (!v57)
            v879 = 0;
        }
        while (v884);
        v885 = v385 + 1;
        v886 = v1024;
        if (v885 <= v877)
        {
          while (1)
          {
LABEL_1349:
            while (1)
            {
              v887 = v885;
              v889 = v12[7 * v885 + 2];
              v888 = v12[7 * v885 + 3];
              if (v889)
                break;
              v15 = &v19[v888];
              v885 = v887 + 1;
              if (v887 + 1 > v877)
                goto LABEL_1345;
            }
            v890 = v12[7 * v887 + 1];
            if (*(_DWORD *)(v7 + 176) != 2)
            {
              if ((_DWORD)v888)
              {
                v891 = *v1225;
                v892 = v19;
                v893 = v888;
                do
                {
                  v894 = *v892++;
                  *(_DWORD *)&v891[4 * v894] += 2;
                  --v893;
                }
                while (v893);
              }
              *(_DWORD *)(v7 + 128) += 2 * v888;
            }
            v895 = v888 < 0x40 ? ZSTD_LLcode_LL_Code[v888] : 50 - __clz(v888);
            ++*(_DWORD *)(*(_QWORD *)(v7 + 88) + 4 * v895);
            ++*(_DWORD *)(v7 + 132);
            v896 = v890 + 1;
            v897 = __clz(v890 + 1);
            ++*(_DWORD *)(*(_QWORD *)(v7 + 104) + 4 * (v897 ^ 0x1F));
            ++*(_DWORD *)(v7 + 140);
            v898 = v889 - 3;
            v899 = v889 - 3 < 0x80 ? ZSTD_MLcode_ML_Code[v898] : 67 - __clz(v898);
            ++*(_DWORD *)(*(_QWORD *)(v7 + 96) + 4 * v899);
            ++*(_DWORD *)(v7 + 136);
            v900 = &v19[v888];
            v901 = *(char **)(v886 + 24);
            if ((unint64_t)&v19[v888] > v380)
              break;
            *(_OWORD *)v901 = *(_OWORD *)v19;
            v904 = *(_QWORD *)(v886 + 24);
            if (v888 > 0x10)
            {
              v905 = (_OWORD *)(v904 + 16);
              v906 = v904 + v888;
              v907 = (__int128 *)(v19 + 16);
              do
              {
                v908 = *v907++;
                *v905++ = v908;
              }
              while ((unint64_t)v905 < v906);
LABEL_1394:
              *(_QWORD *)(v886 + 24) += v888;
              v915 = *(_QWORD *)(v886 + 8);
              if (v888 >= 0x10000)
              {
                v926 = (unint64_t)(v915 - *(_QWORD *)v886) >> 3;
                *(_DWORD *)(v886 + 72) = 1;
                *(_DWORD *)(v886 + 76) = v926;
              }
              goto LABEL_1396;
            }
            *(_QWORD *)(v886 + 24) = v904 + v888;
            v915 = *(_QWORD *)(v886 + 8);
LABEL_1396:
            *(_WORD *)(v915 + 4) = v888;
            *(_DWORD *)v915 = v896;
            if (v898 >= 0x10000)
            {
              v927 = (unint64_t)(v915 - *(_QWORD *)v886) >> 3;
              *(_DWORD *)(v886 + 72) = 2;
              *(_DWORD *)(v886 + 76) = v927;
            }
            *(_WORD *)(v915 + 6) = v898;
            *(_QWORD *)(v886 + 8) = v915 + 8;
            v19 += v889 + v888;
            v15 = v19;
            v885 = v887 + 1;
            if (v887 + 1 > v877)
              goto LABEL_1345;
          }
          if ((unint64_t)v19 <= v380)
          {
            v903 = &v901[v380 - (_QWORD)v19];
            v909 = v19;
            v910 = *(char **)(v886 + 24);
            do
            {
              v911 = *(_OWORD *)v909;
              v909 += 16;
              *(_OWORD *)v910 = v911;
              v910 += 16;
            }
            while (v910 < v903);
            v902 = (unsigned __int8 *)v380;
            if (v380 >= (unint64_t)v900)
              goto LABEL_1394;
          }
          else
          {
            v902 = v19;
            v903 = *(char **)(v886 + 24);
            if (v19 >= v900)
              goto LABEL_1394;
          }
          if ((unint64_t)v19 <= v380)
            v912 = (unsigned __int8 *)v380;
          else
            v912 = v19;
          v913 = &v19[v888] - v912;
          if (v913 < 8)
          {
            v914 = v902;
            goto LABEL_1393;
          }
          if ((unint64_t)(v901 - (char *)v19) < 0x20)
          {
            v914 = v902;
            goto LABEL_1393;
          }
          if (v913 < 0x20)
          {
            v916 = 0;
            goto LABEL_1388;
          }
          v916 = v913 & 0xFFFFFFFFFFFFFFE0;
          v917 = (__int128 *)(v902 + 16);
          v918 = &v901[v912 - v19 + 16];
          v919 = v913 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v920 = *v917;
            *((_OWORD *)v918 - 1) = *(v917 - 1);
            *(_OWORD *)v918 = v920;
            v917 += 2;
            v918 += 32;
            v919 -= 32;
          }
          while (v919);
          if (v913 == v916)
            goto LABEL_1394;
          if ((v913 & 0x18) != 0)
          {
LABEL_1388:
            v903 += v913 & 0xFFFFFFFFFFFFFFF8;
            v914 = &v902[v913 & 0xFFFFFFFFFFFFFFF8];
            v921 = &v902[v916];
            v922 = &v901[&v912[v916] - v19];
            v923 = v916 - (v913 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v924 = *(_QWORD *)v921;
              v921 += 8;
              *(_QWORD *)v922 = v924;
              v922 += 8;
              v923 += 8;
            }
            while (v923);
            if (v913 == (v913 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_1394;
          }
          else
          {
            v914 = &v902[v916];
            v903 += v916;
          }
          do
          {
LABEL_1393:
            v925 = *v914++;
            *v903++ = v925;
          }
          while (v914 < v900);
          goto LABEL_1394;
        }
        v15 = v1257;
LABEL_1345:
        if (*(_DWORD *)(v7 + 176) != 2)
          *(_DWORD *)(v7 + 144) = (__clz(*(_DWORD *)(v7 + 128) + 1) << 8) ^ 0x1F00;
        v20 = __clz(*(_DWORD *)(v7 + 140) + 1);
        *(int8x8_t *)(v7 + 148) = veor_s8((int8x8_t)vshl_n_s32(vclz_s32(vadd_s32(*(int32x2_t *)(v7 + 132), (int32x2_t)0x100000001)), 8uLL), (int8x8_t)0x1F0000001F00);
        *(_DWORD *)(v7 + 156) = (v20 << 8) ^ 0x1F00;
        if ((unint64_t)v15 >= v1223)
        {
LABEL_1423:
          v1213 = v19;
          return v16 - (_QWORD)v1213;
        }
      }
      else
      {
        v15 = v374 + 1;
        v16 = (unint64_t)v1259;
        if ((unint64_t)(v374 + 1) >= v1223)
          goto LABEL_1423;
      }
    }
    LODWORD(v24) = 0;
    if (*(_DWORD *)(v7 + 212) >= 0xFFFu)
      v76 = 4095;
    else
      v76 = *(_DWORD *)(v7 + 212);
    v77 = *(_QWORD *)(v7 + 8);
    v78 = ((_DWORD)v1257 - v77);
    v79 = (char *)(v1257 + 12);
    v1042 = *(_DWORD *)(v7 + 204);
    v1051 = *(_QWORD *)(v7 + 48);
    v1033 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v1257) >> -(char)*(_DWORD *)(v7 + 200);
    v80 = *(_DWORD *)(v1051 + 4 * v1033);
    v81 = -1 << (*(_DWORD *)(v7 + 196) - 1);
    v988 = ~v81;
    v82 = v78 + v81 + 1;
    if (v78 < ~v81)
      v82 = 0;
    v980 = v82;
    v83 = *(unsigned int *)(v7 + 24);
    v84 = 1 << *(_DWORD *)(v7 + 192);
    if ((int)v78 - *(_DWORD *)(v7 + 28) > v84 && *(_DWORD *)(v7 + 32) == 0)
      v86 = v78 - v84;
    else
      v86 = *(_DWORD *)(v7 + 28);
    v15 = v1257;
    if (v86 <= 1)
      v87 = 1;
    else
      v87 = v86;
    v1196 = v87;
    v88 = *(_QWORD *)(v7 + 184);
    v89 = *(_QWORD *)(v88 + 8);
    v1209 = *(char **)v88;
    v90 = *(_DWORD *)(v88 + 28);
    v91 = v86 - (*(_QWORD *)v88 - (_DWORD)v89);
    v1004 = v88;
    v996 = *(_DWORD *)(v88 + 200);
    v92 = ~(-1 << (*(_DWORD *)(v88 + 196) - 1));
    v93 = *(_QWORD *)v88 - v89 - v90;
    v94 = *(_QWORD *)(v7 + 64);
    v975 = (_DWORD)v1209 - v89;
    v1068 = v92;
    if (v93 <= v92)
      v95 = v90;
    else
      v95 = (_DWORD)v1209 - v89 - v92;
    v1079 = v95;
    v96 = v78 - v83;
    v1090 = v89;
    v97 = v89 - v91;
    v1100 = v90;
    v1060 = v86 - ((_DWORD)v1209 - (_DWORD)v89);
    v98 = v78 - v90 - v91;
    v99 = v21 == 0;
    v1025 = v77;
    v1205 = (_QWORD *)(v77 + v83);
    v1191 = v94;
    v1017 = (unsigned int *)(v94 + 8 * (v78 & ~v81));
    v1267 = 0;
    v1215 = v78 + 9;
    if (v21)
      v100 = 3;
    else
      v100 = 4;
    v101 = v1257 + 4;
    if (v21)
      v102 = 0;
    else
      v102 = -1;
    v103 = (v1258 - 1);
    v1177 = v76;
    v1155 = v83;
    v1143 = v80;
    v1128 = v86;
    v1115 = v100;
    v1108 = v102;
    while (1)
    {
      if (v99 == 3)
      {
        v104 = *a3 - 1;
        v105 = v78 - v104;
        v106 = *a3 - 2;
        if (v106 >= v96)
          goto LABEL_118;
      }
      else
      {
        v104 = a3[v99];
        v105 = v78 - v104;
        v106 = v104 - 1;
        if (v104 - 1 >= v96)
        {
LABEL_118:
          if (v106 < v98 && v83 + ~v105 >= 3)
          {
            v108 = v97 + v105;
            if (*(_DWORD *)v15 == *(_DWORD *)v108)
            {
              v1227 = v103;
              v1240 = v24;
              v109 = v78;
              v110 = v97;
              v111 = v101;
              v112 = ZSTD_count_2segments(v101, (char *)(v108 + 4), v16, v1209, v1205);
              v101 = v111;
              v100 = v1115;
              v97 = v110;
              v102 = v1108;
              v86 = v1128;
              LODWORD(v83) = v1155;
              v79 = (char *)(v1257 + 12);
              v80 = v1143;
              v78 = v109;
              LODWORD(v24) = v1240;
              v103 = v1227;
              v15 = v1257;
              v16 = (unint64_t)v1259;
              v113 = v112 + 4;
              v76 = v1177;
              v114 = v113;
              if (v1227 < v113)
                goto LABEL_132;
            }
          }
          goto LABEL_115;
        }
      }
      if (v105 < v86 || *(_DWORD *)v15 != *(_DWORD *)&v15[-v104])
        goto LABEL_115;
      v117 = -(uint64_t)v104;
      v118 = (char *)v101 - v104;
      if (v1260 <= (unint64_t)v101)
        break;
      v119 = *v101 ^ *(_QWORD *)v118;
      if (v119)
      {
        v113 = (__clz(__rbit64(v119)) >> 3) + 4;
        v114 = v113;
        if (v103 < v113)
          goto LABEL_132;
        goto LABEL_115;
      }
      v121 = 0;
      do
      {
        v120 = &v79[v121];
        if ((unint64_t)&v79[v121] >= v1260)
        {
          v118 = &v120[v117];
          if ((unint64_t)v120 >= v1237)
            goto LABEL_142;
          goto LABEL_140;
        }
        v122 = *(_QWORD *)&v79[v117 + v121];
        v121 += 8;
        v123 = *(_QWORD *)v120 ^ v122;
      }
      while (!v123);
      v113 = v121 + (__clz(__rbit64(v123)) >> 3) + 4;
      v114 = v113;
      if (v103 < v113)
      {
LABEL_132:
        v116 = &v1261[2 * v24];
        *v116 = v99 + v102;
        v116[1] = v113;
        LODWORD(v24) = v24 + 1;
        if (v113 > v76)
          goto LABEL_601;
        v103 = v114;
        if (&v15[v114] == (unsigned __int8 *)v16)
          goto LABEL_601;
      }
LABEL_115:
      if (++v99 >= v100)
      {
        *(_DWORD *)(v1051 + 4 * v1033) = v78;
        v124 = ~(-1 << v1042);
        if (v80 < v1196)
        {
          v125 = v1025;
          v127 = v1017 + 1;
          v126 = v1017;
LABEL_161:
          *v127 = 0;
          *v126 = 0;
          v1241 = v24;
          if (!v124)
            goto LABEL_599;
          v15 = v1257;
          v128 = *(_DWORD *)(*(_QWORD *)(v1004 + 48) + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v1257) >> -(char)v996));
          if (v128 <= v1100)
            goto LABEL_600;
          v129 = 0;
          v130 = 0;
          v1168 = *(_QWORD *)(v1004 + 64);
          v1178 = v125 + v1060;
          v1156 = v78 + 2;
          v1197 = v124 - 1;
          while (1)
          {
            v1228 = v103;
            if (v130 >= v129)
              v131 = v129;
            else
              v131 = v130;
            v132 = ZSTD_count_2segments(&v15[v131], (char *)(v1090 + v128 + v131), v16, v1209, v1205) + v131;
            v103 = v1228;
            if (v132 + v128 >= v975)
              v133 = v1178 + v128;
            else
              v133 = v1090 + v128;
            if (v132 <= v1228)
            {
              v16 = (unint64_t)v1259;
              v15 = v1257;
              if (v128 <= v1079)
                goto LABEL_600;
            }
            else
            {
              v134 = v1215;
              if (v132 > v1215 - (v128 + v1060))
                v134 = v128 + v1060 + v132;
              v1215 = v134;
              v135 = &v1261[2 * v1241];
              *v135 = v1156 - (v128 + v1060);
              v135[1] = v132;
              ++v1241;
              if (v132 > 0x1000)
              {
LABEL_598:
                LODWORD(v16) = (_DWORD)v1259;
                goto LABEL_599;
              }
              v15 = v1257;
              v103 = v132;
              v16 = (unint64_t)v1259;
              if (&v1257[v132] == v1259 || v128 <= v1079)
                goto LABEL_600;
            }
            v136 = *(unsigned __int8 *)(v133 + v132);
            v137 = v15[v132];
            v57 = v136 >= v137;
            v138 = v136 < v137;
            if (v57)
              v129 = v132;
            else
              v130 = v132;
            if (v1197)
            {
              --v1197;
              v128 = *(_DWORD *)(v1168 + 8 * (v128 & v1068) + 4 * v138);
              if (v128 > v1100)
                continue;
            }
            goto LABEL_600;
          }
        }
        v241 = 0;
        v242 = 0;
        v1244 = v1257 + 8;
        v125 = v1025;
        v243 = v1025 + 8;
        v127 = v1017 + 1;
        v126 = v1017;
        while (2)
        {
          if (v242 >= v241)
            v244 = v241;
          else
            v244 = v242;
          v245 = v80;
          v246 = v1025 + v80;
          v247 = &v1257[v244];
          v248 = (_QWORD *)(v246 + v244);
          if (v1260 <= (unint64_t)&v1257[v244])
          {
            v251 = &v1257[v244];
            if ((unint64_t)v247 >= v1237)
              goto LABEL_341;
          }
          else
          {
            v249 = *(_QWORD *)v247 ^ *v248;
            if (v249)
            {
              v250 = (__clz(__rbit64(v249)) >> 3) + v244;
              if (v250 <= v103)
                goto LABEL_357;
LABEL_350:
              v252 = v1215;
              if (v250 > v1215 - v80)
                v252 = v80 + v250;
              v1215 = v252;
              v253 = &v1261[2 * v24];
              *v253 = v78 + 2 - v80;
              v253[1] = v250;
              LODWORD(v24) = v24 + 1;
              if (v250 > 0x1000 || &v1257[v250] == (unsigned __int8 *)v16)
                goto LABEL_573;
              v103 = v250;
LABEL_357:
              v255 = (unsigned int *)(v1191 + 8 * (v80 & v988));
              if (*(unsigned __int8 *)(v246 + v250) >= v1257[v250])
              {
                *v127 = v80;
                if (v80 <= v980)
                {
                  v127 = (unsigned int *)&v1267;
                  goto LABEL_161;
                }
                v241 = v250;
                v127 = (unsigned int *)(v1191 + 8 * (v80 & v988));
                v57 = v124-- != 0;
                if (!v57)
                  goto LABEL_161;
              }
              else
              {
                *v126 = v80;
                if (v80 <= v980)
                {
                  v126 = (unsigned int *)&v1267;
                  goto LABEL_161;
                }
                ++v255;
                v242 = v250;
                v126 = v255;
                v57 = v124-- != 0;
                if (!v57)
                  goto LABEL_161;
              }
              v80 = *v255;
              if (*v255 < v1196)
                goto LABEL_161;
              continue;
            }
            v256 = v80;
            v257 = 0;
            v258 = (char *)v1244 + v244;
            while (1)
            {
              v259 = &v258[v257];
              if ((unint64_t)&v258[v257] >= v1260)
                break;
              v260 = *(_QWORD *)(v243 + v244 + v245 + v257);
              v257 += 8;
              v261 = *(_QWORD *)v259 ^ v260;
              if (v261)
              {
                v262 = __clz(__rbit64(v261));
                v80 = v256;
                v250 = v257 + (v262 >> 3) + v244;
                if (v250 <= v103)
                  goto LABEL_357;
                goto LABEL_350;
              }
            }
            v251 = (unsigned __int8 *)v1244 + v244 + v257;
            v248 = (_QWORD *)(v243 + v244 + v245 + v257);
            v80 = v256;
            if ((unint64_t)v251 >= v1237)
            {
LABEL_341:
              if ((unint64_t)v251 >= v1236)
              {
                if ((unint64_t)v251 >= v16)
                  goto LABEL_349;
              }
              else
              {
                if (*(unsigned __int16 *)v248 == *(unsigned __int16 *)v251)
                {
                  v251 += 2;
                  v248 = (_QWORD *)((char *)v248 + 2);
                }
                if ((unint64_t)v251 >= v16)
                {
LABEL_349:
                  v250 = v251 - v1257;
                  if (v251 - v1257 <= v103)
                    goto LABEL_357;
                  goto LABEL_350;
                }
              }
              if (*(unsigned __int8 *)v248 == *v251)
                ++v251;
              goto LABEL_349;
            }
          }
          break;
        }
        if (*(_DWORD *)v248 == *(_DWORD *)v251)
        {
          v251 += 4;
          v248 = (_QWORD *)((char *)v248 + 4);
        }
        goto LABEL_341;
      }
    }
    v120 = (char *)v101;
    if ((unint64_t)v101 >= v1237)
      goto LABEL_142;
LABEL_140:
    if (*(_DWORD *)v118 == *(_DWORD *)v120)
    {
      v120 += 4;
      v118 += 4;
    }
LABEL_142:
    if ((unint64_t)v120 >= v1236)
    {
      if ((unint64_t)v120 >= v16)
        goto LABEL_150;
    }
    else
    {
      if (*(unsigned __int16 *)v118 == *(unsigned __int16 *)v120)
      {
        v120 += 2;
        v118 += 2;
      }
      if ((unint64_t)v120 >= v16)
      {
LABEL_150:
        v113 = (_DWORD)v120 - (_DWORD)v101 + 4;
        v114 = v113;
        if (v103 < v113)
          goto LABEL_132;
        goto LABEL_115;
      }
    }
    if (*v118 == *v120)
      LODWORD(v120) = (_DWORD)v120 + 1;
    goto LABEL_150;
  }
  return v16 - (_QWORD)v1213;
}

